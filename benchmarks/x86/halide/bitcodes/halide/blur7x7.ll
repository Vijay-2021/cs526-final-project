; ModuleID = 'blur7x7'
source_filename = "/home/muchenx2/Hydride/frontends/halide/src/runtime/posix_allocator.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64--linux-gnu"

%struct.timespec = type { i64, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::hash_table" = type { [1024 x %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"] }
%"struct.Halide::Runtime::Internal::Synchronization::hash_bucket" = type { %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* }
%"class.Halide::Runtime::Internal::Synchronization::word_lock" = type { i64 }
%"struct.Halide::Runtime::Internal::Synchronization::queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", i64, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::thread_parker" = type <{ %struct.pthread_mutex_t, %struct.pthread_mutex_t, i8, [7 x i8] }>
%struct.pthread_mutex_t = type { [8 x i64] }
%"struct.Halide::Runtime::Internal::work_queue_t" = type { %struct.halide_mutex, i32, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i32, i32, [4 x i8], %struct.halide_mutex, %struct.halide_mutex, %struct.halide_mutex, i32, i32, [256 x %struct.halide_thread*], i8, i8, i32 }
%"struct.Halide::Runtime::Internal::work" = type { %struct.halide_parallel_task_t, i32 (i8*, i32, i8*)*, %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"*, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i8*, i32, i32, i32, i8 }
%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8, [7 x i8] }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32, [4 x i8] }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex = type { [1 x i64] }
%struct.halide_thread = type opaque
%"class.Halide::Runtime::Internal::TraceBuffer" = type { %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock", i32, i32, [1048576 x i8] }
%"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" = type { i32 }
%struct.halide_trace_event_t = type <{ i8*, i8*, i32*, i8*, %struct.halide_type_t, i32, i32, i32, i32, [4 x i8] }>
%struct.halide_type_t = type { i8, i8, i16 }
%"struct.Halide::Runtime::Internal::CacheEntry" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, i8*, i64, i8*, i32, i32, i32, i32, %struct.halide_dimension_t*, %struct.halide_buffer_t*, i64, i8, [7 x i8] }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_profiler_state = type { %struct.halide_mutex, i32, i32, i32, i32, %struct.halide_profiler_pipeline_stats*, void (i32*, i32*)*, %struct.halide_thread* }
%struct.halide_profiler_pipeline_stats = type { i64, i64, i64, i64, i64, i64, i8*, %struct.halide_profiler_func_stats*, i8*, i32, i32, i32, i32, i32, [4 x i8] }
%struct.halide_profiler_func_stats = type { i64, i64, i64, i64, i64, i64, i64, i8*, i32, [4 x i8] }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_scalar_value_t = type { %union.anon.28 }
%union.anon.28 = type { double }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64* }
%"struct.Halide::Runtime::Internal::Synchronization::parking_control" = type { i32 (...)** }
%"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* }
%"struct.Halide::Runtime::Internal::Synchronization::validate_action" = type { i8, [7 x i8], i64 }
%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"* }
%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair" = type { %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* }
%"struct.Halide::Runtime::Internal::spawned_thread" = type { void (i8*)*, i8*, i64 }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%"struct.Halide::Runtime::Internal::halide_tiff_header" = type <{ i16, i16, i32, i16, [15 x %"struct.Halide::Runtime::Internal::tiff_tag"], i32, [2 x i32], [2 x i32] }>
%"struct.Halide::Runtime::Internal::tiff_tag" = type { i16, i16, i32, %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" }
%"struct.Halide::Runtime::Internal::CacheBlockHeader" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, i32, [4 x i8] }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }
%struct.halide_pseudostack_slot_t = type { i8*, i64, i64 }

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = comdat any

@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i64)* @halide_default_malloc, align 8
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 8
@_ZN6Halide7Runtime8Internal13error_handlerE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_error, align 8
@.str = private unnamed_addr constant [8 x i8] c"Error: \00", align 1
@_ZN6Halide7Runtime8Internal12custom_printE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_print, align 8
@halide_reference_clock_inited = linkonce local_unnamed_addr global i8 0, align 1
@halide_reference_clock = linkonce global %struct.timespec zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal15Synchronization5tableE = linkonce global %"struct.Halide::Runtime::Internal::Synchronization::hash_table" zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal10work_queueE = linkonce global %"struct.Halide::Runtime::Internal::work_queue_t" { %struct.halide_mutex zeroinitializer, i32 0, i32 0, %"struct.Halide::Runtime::Internal::work"* null, i32 0, i32 0, i32 0, [4 x i8] undef, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, i32 0, i32 0, [256 x %struct.halide_thread*] zeroinitializer, i8 0, i8 0, i32 0 }, align 8
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 8
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 8
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 8
@_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5 = private unnamed_addr constant [130 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:386 halide_abort_if_false() failed: next != nullptr\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5.6 = private unnamed_addr constant [124 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:994 halide_abort_if_false() failed: val & 0x1\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.6 = private unnamed_addr constant [186 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:155 halide_abort_if_false() failed: bytes == limit && \22Logic error in thread pool work queue initialization.\\n\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [263 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:527 halide_abort_if_false() failed: (min_threads <= ((task_parent->task.min_threads * task_parent->active_workers) - task_parent->threads_reserved)) && \22Logic error: thread over commit.\\n\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"HL_NUM_THREADS\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"HL_NUMTHREADS\00", align 1
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 8
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 8
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 8
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 8
@llvm.global_dtors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @halide_thread_pool_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_trace_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_cache_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_profiler_shutdown, i8* null }]
@_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.4 = private unnamed_addr constant [38 x i8] c"halide_set_num_threads: must be >= 0.\00", align 1
@_ZN6Halide7Runtime8Internal17custom_get_symbolE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_get_symbol, align 8
@_ZN6Halide7Runtime8Internal19custom_load_libraryE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_load_library, align 8
@_ZN6Halide7Runtime8Internal25custom_get_library_symbolE = linkonce local_unnamed_addr global i8* (i8*, i8*)* @halide_default_get_library_symbol, align 8
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@_ZN6Halide7Runtime8Internal19halide_trace_bufferE = linkonce local_unnamed_addr global %"class.Halide::Runtime::Internal::TraceBuffer"* null, align 8
@_ZN6Halide7Runtime8Internal17halide_trace_fileE = linkonce local_unnamed_addr global i32 -1, align 4
@_ZN6Halide7Runtime8Internal22halide_trace_file_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE = linkonce local_unnamed_addr global i8* null, align 8
@_ZN6Halide7Runtime8Internal19halide_custom_traceE = linkonce local_unnamed_addr global i32 (i8*, %struct.halide_trace_event_t*)* @halide_default_trace, align 8
@_ZZ20halide_default_traceE3ids = internal global i32 1, align 4
@.str.32 = private unnamed_addr constant [144 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:115 halide_abort_if_false() failed: success && \22Could not write to trace file\22\0A\00", align 1
@.str.31 = private unnamed_addr constant [120 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:87 halide_abort_if_false() failed: size <= buffer_size\0A\00", align 1
@.str.1.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.11 = private unnamed_addr constant [140 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:218 halide_abort_if_false() failed: print_bits <= 64 && \22Tracing bad type\22\0A\00", align 1
@__const.halide_default_trace.event_types = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.17, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0)], align 8
@.str.17 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c">)\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c">, <\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c" = <\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.24 = private unnamed_addr constant [142 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:287 halide_abort_if_false() failed: print_bits >= 16 && \22Tracing a bad type\22\0A\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c" tag = \22\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.3.12 = private unnamed_addr constant [5 x i8] c"Load\00", align 1
@.str.4.13 = private unnamed_addr constant [6 x i8] c"Store\00", align 1
@.str.5.14 = private unnamed_addr constant [18 x i8] c"Begin realization\00", align 1
@.str.6.15 = private unnamed_addr constant [16 x i8] c"End realization\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"Produce\00", align 1
@.str.8.16 = private unnamed_addr constant [12 x i8] c"End produce\00", align 1
@.str.9.17 = private unnamed_addr constant [8 x i8] c"Consume\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"End consume\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Begin pipeline\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"End pipeline\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Tag\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"HL_TRACE_FILE\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.30 = private unnamed_addr constant [139 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:351 halide_abort_if_false() failed: file && \22Failed to open trace file\\n\22\0A\00", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE = linkonce local_unnamed_addr global [10 x i16] [i16 3, i16 3, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2], align 2
@_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\06\09\08\0B\0A\0D\0C\0F\0E", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\09\02\01\04\03\06\05\0D\0C", align 1
@.str.34 = private unnamed_addr constant [51 x i8] c"Bounds query buffer passed to halide_debug_to_file\00", align 1
@.str.1.35 = private unnamed_addr constant [59 x i8] c"Can't debug_to_file a Func with more than four dimensions\0A\00", align 1
@.str.2.36 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.3.37 = private unnamed_addr constant [6 x i8] c".tiff\00", align 1
@.str.4.38 = private unnamed_addr constant [5 x i8] c".tif\00", align 1
@.str.5.39 = private unnamed_addr constant [5 x i8] c".mat\00", align 1
@__const.halide_debug_to_file.header = private unnamed_addr constant [129 x i8] c"MATLAB 5.0 MAT-file, produced by Halide                                                                                     \00\01IM\00", align 1
@.str.6.40 = private unnamed_addr constant [53 x i8] c"Can't debug_to_file to a .mat file greater than 4GB\0A\00", align 1
@_ZN6Halide7Runtime8Internal16memoization_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal13cache_entriesE = linkonce global [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*] zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal18most_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal19least_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal14max_cache_sizeE = linkonce local_unnamed_addr global i64 1048576, align 8
@_ZN6Halide7Runtime8Internal18current_cache_sizeE = linkonce local_unnamed_addr global i64 0, align 8
@.str.2.42 = private unnamed_addr constant [126 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:284 halide_abort_if_false() failed: prev_hash_entry != nullptr\0A\00", align 1
@.str.3.43 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:373 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.4.44 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:377 halide_abort_if_false() failed: least_recently_used == entry\0A\00", align 1
@.str.5.45 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:380 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.9.46 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:472 halide_abort_if_false() failed: no_host_pointers_equal\0A\00", align 1
@.str.12.47 = private unnamed_addr constant [123 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:550 halide_abort_if_false() failed: entry->in_use_count > 0\0A\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.57 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.58 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.59 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.60 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.61 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.62 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.63 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.64 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9.65 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11.67 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12.68 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13.71 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18.72 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17.73 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16.74 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15.75 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14.76 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19.77 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20.78 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21.79 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23.82 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24.83 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 8
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@.str.6.88 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.89 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.90 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.91 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.92 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.93 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.96 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.97 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.98 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.99 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26.100 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27.101 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28.102 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29.103 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30.104 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31.105 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32.106 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33.107 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34.108 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.111 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.112 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.113 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.114 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.115 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.116 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.117 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.118 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.119 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.120 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.121 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.122 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.123 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.124 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.125 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.126 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.127 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.128 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.129 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.130 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.131 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.132 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.133 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.134 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.135 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.136 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.137 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.138 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.139 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.140 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.141 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.142 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.143 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.144 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.145 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.146 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.147 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50.148 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.149 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.150 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.151 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.152 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.153 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.29.163 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.7.164 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8.165 = private unnamed_addr constant [14 x i8] c" total time: \00", align 1
@.str.9.166 = private unnamed_addr constant [4 x i8] c" ms\00", align 1
@.str.10.167 = private unnamed_addr constant [12 x i8] c"  samples: \00", align 1
@.str.11.168 = private unnamed_addr constant [9 x i8] c"  runs: \00", align 1
@.str.12.169 = private unnamed_addr constant [13 x i8] c"  time/run: \00", align 1
@.str.13.170 = private unnamed_addr constant [5 x i8] c" ms\0A\00", align 1
@.str.14.171 = private unnamed_addr constant [24 x i8] c" average threads used: \00", align 1
@.str.15.172 = private unnamed_addr constant [20 x i8] c" heap allocations: \00", align 1
@.str.16.173 = private unnamed_addr constant [20 x i8] c"  peak heap usage: \00", align 1
@.str.17.174 = private unnamed_addr constant [8 x i8] c" bytes\0A\00", align 1
@.str.18.175 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.19.176 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.20.177 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.21.178 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.22.179 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.23.180 = private unnamed_addr constant [3 x i8] c"%)\00", align 1
@.str.24.181 = private unnamed_addr constant [10 x i8] c"threads: \00", align 1
@.str.25.182 = private unnamed_addr constant [8 x i8] c" peak: \00", align 1
@.str.26.183 = private unnamed_addr constant [7 x i8] c" num: \00", align 1
@.str.27.184 = private unnamed_addr constant [7 x i8] c" avg: \00", align 1
@.str.28.185 = private unnamed_addr constant [9 x i8] c" stack: \00", align 1
@_ZZ25halide_profiler_get_stateE1s = internal global %struct.halide_profiler_state { %struct.halide_mutex zeroinitializer, i32 1, i32 0, i32 0, i32 0, %struct.halide_profiler_pipeline_stats* null, void (i32*, i32*)* null, %struct.halide_thread* null }, align 8
@.str.186 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:246 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.1.187 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:273 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.2.188 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:274 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.3.189 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:275 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@.str.4.190 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:309 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.5.191 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:310 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.6.192 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:311 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 8
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.197 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant [4 x i64*] zeroinitializer
@str = private constant [6 x i8] c"input\00", align 32
@1 = private constant [4 x i64*] zeroinitializer
@str.200 = private constant [7 x i8] c"blur_y\00", align 32
@2 = private constant [2 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @0, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i32 0, i32 0), i32 2, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @1, i32 0, i32 0) }]
@str.201 = private constant [64 x i8] c"x86-64-linux-avx-avx2-f16c-fma-no_asserts-no_bounds_query-sse41\00", align 32
@str.202 = private constant [8 x i8] c"blur7x7\00", align 32
@blur7x7_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 2, %struct.halide_filter_argument_t* getelementptr inbounds ([2 x %struct.halide_filter_argument_t], [2 x %struct.halide_filter_argument_t]* @2, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @str.201, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.202, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.76, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15.75, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16.74, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.73, i64 0, i64 0)], align 8

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i64 %x) #0 {
entry:
  %add = add i64 %x, 64
  %call1 = tail call i8* @malloc(i64 %add) #16
  %cmp = icmp eq i8* %call1, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call1 to i64
  %sub = add i64 %0, 71
  %and = and i64 %sub, -64
  %1 = inttoptr i64 %and to i8*
  %2 = inttoptr i64 %and to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 -1
  store i8* %call1, i8** %arrayidx, align 8, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i64 -8
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !10
  tail call void @free(i8* %1) #16
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i64)* @halide_set_custom_malloc(i8* (i8*, i64)* %user_malloc) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  store i8* (i8*, i64)* %user_malloc, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  ret i8* (i8*, i64)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_malloc(i8* %user_context, i64 %x) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %user_context, i64 %x) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %ptr) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_error(i8* %user_context, i8* %msg) #0 {
entry:
  %buf = alloca [4096 x i8], align 1
  %0 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %0) #11
  %add.ptr = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 4094
  %call = call i8* @halide_string_to_string(i8* nonnull %0, i8* nonnull %add.ptr, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)) #16
  %add.ptr2 = getelementptr inbounds i8, i8* %call, i64 4094
  %call3 = call i8* @halide_string_to_string(i8* %call, i8* nonnull %add.ptr2, i8* %msg) #16
  %arrayidx = getelementptr inbounds i8, i8* %call3, i64 -1
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %cmp.not = icmp eq i8 %1, 10
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8 10, i8* %call3, align 1, !tbaa !14
  %arrayidx5 = getelementptr inbounds i8, i8* %call3, i64 1
  store i8 0, i8* %arrayidx5, align 1, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %dst.0 = phi i8* [ %arrayidx5, %if.then ], [ %call3, %entry ]
  %sub.ptr.lhs.cast = ptrtoint i8* %dst.0 to i64
  %sub.ptr.rhs.cast = ptrtoint [4096 x i8]* %buf to i64
  %sub.ptr.sub = sub i64 1, %sub.ptr.rhs.cast
  %add = add i64 %sub.ptr.sub, %sub.ptr.lhs.cast
  %call9 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 %add) #16
  call void @halide_print(i8* %user_context, i8* nonnull %0) #16
  call void @abort() #16
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @abort() local_unnamed_addr #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak void @halide_error(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_error_handler(void (i8*, i8*)* %handler) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  store void (i8*, i8*)* %handler, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_print(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_print(void (i8*, i8*)* %print) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  store void (i8*, i8*)* %print, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_start_clock(i8* %user_context) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* @halide_reference_clock_inited, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i32 (i32, ...) @syscall(i32 228, i32 0, %struct.timespec* nonnull @halide_reference_clock) #16
  store i8 1, i8* @halide_reference_clock_inited, align 1, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

declare i32 @syscall(i32, ...) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i64 @halide_current_time_ns(i8* %user_context) local_unnamed_addr #0 {
entry:
  %now = alloca <2 x i64>, align 16
  %0 = bitcast <2 x i64>* %now to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  %call = call i32 (i32, ...) @syscall(i32 228, i32 0, <2 x i64>* nonnull %now) #16
  %1 = load <2 x i64>, <2 x i64>* %now, align 16, !tbaa !18
  %2 = load <2 x i64>, <2 x i64>* bitcast (%struct.timespec* @halide_reference_clock to <2 x i64>*), align 8, !tbaa !18
  %3 = sub <2 x i64> %1, %2
  %4 = extractelement <2 x i64> %3, i32 0
  %mul = mul nsw i64 %4, 1000000000
  %5 = extractelement <2 x i64> %3, i32 1
  %add = add nsw i64 %mul, %5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i64 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_sleep_ms(i8* %user_context, i32 %ms) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %ms, 1000
  %call = tail call i32 @usleep(i32 %mul) #16
  ret void
}

declare i32 @usleep(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_print(i8* %user_context, i8* %str) #0 {
entry:
  %call = tail call i64 @strlen(i8* %str) #16
  %call1 = tail call i64 @write(i32 1, i8* %str, i64 %call) #16
  ret void
}

declare i64 @strlen(i8*) local_unnamed_addr #1

declare i64 @write(i32, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_host_cpu_count() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @sysconf(i32 84) #16
  %conv = trunc i64 %call to i32
  ret i32 %conv
}

declare i64 @sysconf(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_yield() local_unnamed_addr #0 {
entry:
  %call = tail call i32 @sched_yield() #16
  ret void
}

declare i32 @sched_yield() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %job = alloca %"struct.Halide::Runtime::Internal::work", align 8
  %cmp = icmp slt i32 %size, 1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %"struct.Halide::Runtime::Internal::work"* %job to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %0) #11
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 0
  store i32 (i8*, i32, i32, i8*, i8*)* null, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %min2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 5
  store i32 %min, i32* %min2, align 4, !tbaa !24
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 6
  store i32 %size, i32* %extent, align 8, !tbaa !25
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 8
  store i8 0, i8* %serial, align 8, !tbaa !26
  %semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 3
  store %struct.halide_semaphore_acquire_t* null, %struct.halide_semaphore_acquire_t** %semaphores, align 8, !tbaa !27
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 4
  store i32 0, i32* %num_semaphores, align 8, !tbaa !28
  %closure8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 1
  store i8* %closure, i8** %closure8, align 8, !tbaa !29
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 7
  store i32 0, i32* %min_threads, align 4, !tbaa !30
  %name = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 2
  store i8* null, i8** %name, align 8, !tbaa !31
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 1
  store i32 (i8*, i32, i8*)* %f, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 7
  store i8* %user_context, i8** %user_context11, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %job, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 4
  store i32 0, i32* %sibling_count, align 8, !tbaa !39
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 5
  store %"struct.Halide::Runtime::Internal::work"* null, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 1, %"struct.Halide::Runtime::Internal::work"* nonnull %job, %"struct.Halide::Runtime::Internal::work"* null) #17
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %job) #17
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %1 = load i32, i32* %exit_status, align 4, !tbaa !34
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %0) #11
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %1, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = load atomic i64, i64* %state.i monotonic, align 8
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %6 = ptrtoint %struct.halide_mutex* %mutex to i64
  br label %while.cond.outer.i.i

while.cond.outer.i.i:                             ; preds = %while.cond.outer.i.i.backedge, %if.then.i
  %expected.0.ph.i.i = phi i64 [ %2, %if.then.i ], [ %expected.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i = phi i32 [ 40, %if.then.i ], [ %spinner.sroa.0.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %and55.i.i = and i64 %expected.0.ph.i.i, 1
  %tobool.not56.i.i = icmp eq i64 %and55.i.i, 0
  br i1 %tobool.not56.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %while.cond.outer.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %expected.057.i.i = phi i64 [ %9, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i ], [ %expected.0.ph.i.i, %while.cond.outer.i.i ]
  %or.i.i = or i64 %expected.057.i.i, 1
  %7 = cmpxchg weak i64* %state.i, i64 %expected.057.i.i, i64 %or.i.i acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then.i.i
  %9 = extractvalue { i64, i1 } %7, 0
  %and.i.i = and i64 %9, 1
  %tobool.not.i.i = icmp eq i64 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.end4.i.i.loopexit

if.end4.i.i.loopexit:                             ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %10 = extractvalue { i64, i1 } %7, 0
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end4.i.i.loopexit, %while.cond.outer.i.i
  %expected.0.lcssa.i.i = phi i64 [ %expected.0.ph.i.i, %while.cond.outer.i.i ], [ %10, %if.end4.i.i.loopexit ]
  %cmp.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i, 0
  br i1 %cmp.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, label %if.end8.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i: ; preds = %if.end4.i.i
  %cmp4.i.not.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i, 1
  br i1 %cmp4.i.not.i.i, label %if.end8.i.i, label %if.then6.i.i

if.then6.i.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i
  %dec.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i, -1
  call void @halide_thread_yield() #16
  %11 = load atomic i64, i64* %state.i monotonic, align 8
  br label %while.cond.outer.i.i.backedge

if.end8.i.i:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, %if.end4.i.i
  %spinner.sroa.0.152.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i ], [ %spinner.sroa.0.0.ph.i.i, %if.end4.i.i ]
  %and9.i.i = and i64 %expected.0.lcssa.i.i, 2
  %cmp.i.i = icmp eq i64 %and9.i.i, 0
  br i1 %cmp.i.i, label %if.then10.i.i, label %if.end19.i.i

if.then10.i.i:                                    ; preds = %if.end8.i.i
  %or12.i.i = or i64 %expected.0.lcssa.i.i, 2
  %12 = cmpxchg weak i64* %state.i, i64 %expected.0.lcssa.i.i, i64 %or12.i.i monotonic monotonic
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %if.end19.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then10.i.i
  %14 = extractvalue { i64, i1 } %12, 0
  br label %while.cond.outer.i.i.backedge

if.end19.i.i:                                     ; preds = %if.then10.i.i, %if.end8.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !41
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %call21.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %5, i64 %6) #16
  %cmp22.i.i = icmp eq i64 %call21.i.i, %6
  br i1 %cmp22.i.i, label %cleanup30.critedge.i.i, label %if.end24.i.i

if.end24.i.i:                                     ; preds = %if.end19.i.i
  %15 = load atomic i64, i64* %state.i monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %while.cond.outer.i.i.backedge

while.cond.outer.i.i.backedge:                    ; preds = %if.end24.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i, %if.then6.i.i
  %expected.0.ph.i.i.be = phi i64 [ %14, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ %15, %if.end24.i.i ], [ %11, %if.then6.i.i ]
  %spinner.sroa.0.0.ph.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ 40, %if.end24.i.i ], [ %dec.i.i.i, %if.then6.i.i ]
  br label %while.cond.outer.i.i

cleanup30.critedge.i.i:                           ; preds = %if.end19.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit: ; preds = %if.then.i.i, %cleanup30.critedge.i.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_jobs, %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %land.rhs.i, label %if.end4

land.rhs.i:                                       ; preds = %entry, %while.body.i
  %bytes.011.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), %entry ]
  %1 = load i8, i8* %bytes.011.i, align 1, !tbaa !14
  %cmp2.i = icmp eq i8 %1, 0
  br i1 %cmp2.i, label %while.body.i, label %do.body.i

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %bytes.011.i, i64 1
  %exitcond.not.i = icmp eq i8* %incdec.ptr.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*)
  br i1 %exitcond.not.i, label %do.body.i, label %land.rhs.i, !llvm.loop !49

do.body.i:                                        ; preds = %while.body.i, %land.rhs.i
  %bytes.0.lcssa.i = phi i8* [ %bytes.011.i, %land.rhs.i ], [ bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*), %while.body.i ]
  %cmp3.i = icmp eq i8* %bytes.0.lcssa.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*)
  br i1 %cmp3.i, label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit, label %if.then.i

if.then.i:                                        ; preds = %do.body.i
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.6, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit

_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit: ; preds = %if.then.i, %do.body.i
  %2 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %tobool1.not = icmp eq i32 %2, 0
  br i1 %tobool1.not, label %if.then2, label %if.end

if.then2:                                         ; preds = %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #17
  br label %if.end

if.end:                                           ; preds = %if.then2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %3 = phi i32 [ %call, %if.then2 ], [ %2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit ]
  %4 = icmp sgt i32 %3, 1
  %spec.select.i = select i1 %4, i32 %3, i32 1
  %5 = icmp slt i32 %spec.select.i, 256
  %call3176 = select i1 %5, i32 %spec.select.i, i32 256
  store i32 %call3176, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %cmp181 = icmp sgt i32 %num_jobs, 0
  br i1 %cmp181, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end4
  %wide.trip.count = zext i32 %num_jobs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %6 = icmp eq i32 %num_jobs, 1
  br i1 %6, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.inc.1, %for.body.preheader
  %workers_to_wake.1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %add.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %stealable_jobs.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %job_may_block.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %spec.select.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %indvars.iv193.unr = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187.unr = phi i32 [ 0, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185.unr = phi i8 [ 0, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184.unr = phi i8 [ 0, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183.unr = phi i8 [ 0, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182.unr = phi i32 [ -1, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup.loopexit, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %min_threads5.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 7
  %7 = load i32, i32* %min_threads5.epil, align 4, !tbaa !30
  %cmp6.epil = icmp eq i32 %7, 0
  %add.epil = add i32 %7, %min_threads.0187.unr
  %stealable_jobs.1.epil = select i1 %cmp6.epil, i8 1, i8 %stealable_jobs.0183.unr
  %job_may_block.1.epil = select i1 %cmp6.epil, i8 %job_may_block.0185.unr, i8 1
  %num_semaphores.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 4
  %8 = load i32, i32* %num_semaphores.epil, align 8, !tbaa !28
  %cmp16.not.epil = icmp eq i32 %8, 0
  %spec.select.epil = select i1 %cmp16.not.epil, i8 %job_has_acquires.0184.unr, i8 1
  %serial.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 8
  %9 = load i8, i8* %serial.epil, align 8, !tbaa !26, !range !17
  %tobool22.not.epil = icmp eq i8 %9, 0
  br i1 %tobool22.not.epil, label %if.else24.epil, label %if.then23.epil

if.then23.epil:                                   ; preds = %for.body.epil
  %inc.epil = add nsw i32 %workers_to_wake.0182.unr, 1
  br label %for.cond.cleanup.loopexit

if.else24.epil:                                   ; preds = %for.body.epil
  %extent.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 6
  %10 = load i32, i32* %extent.epil, align 8, !tbaa !25
  %add28.epil = add nsw i32 %10, %workers_to_wake.0182.unr
  br label %for.cond.cleanup.loopexit

for.cond.cleanup.loopexit:                        ; preds = %if.else24.epil, %if.then23.epil, %for.cond.cleanup.loopexit.unr-lcssa
  %workers_to_wake.1.lcssa = phi i32 [ %workers_to_wake.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %inc.epil, %if.then23.epil ], [ %add28.epil, %if.else24.epil ]
  %add.lcssa = phi i32 [ %add.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add.epil, %if.then23.epil ], [ %add.epil, %if.else24.epil ]
  %stealable_jobs.1.lcssa = phi i8 [ %stealable_jobs.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %stealable_jobs.1.epil, %if.then23.epil ], [ %stealable_jobs.1.epil, %if.else24.epil ]
  %job_may_block.1.lcssa = phi i8 [ %job_may_block.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %job_may_block.1.epil, %if.then23.epil ], [ %job_may_block.1.epil, %if.else24.epil ]
  %spec.select.lcssa = phi i8 [ %spec.select.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %spec.select.epil, %if.then23.epil ], [ %spec.select.epil, %if.else24.epil ]
  %phi.bo = and i8 %stealable_jobs.1.lcssa, 1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end4
  %workers_to_wake.0.lcssa = phi i32 [ -1, %if.end4 ], [ %workers_to_wake.1.lcssa, %for.cond.cleanup.loopexit ]
  %stealable_jobs.0.lcssa = phi i8 [ 0, %if.end4 ], [ %phi.bo, %for.cond.cleanup.loopexit ]
  %job_has_acquires.0.lcssa = phi i8 [ 0, %if.end4 ], [ %spec.select.lcssa, %for.cond.cleanup.loopexit ]
  %job_may_block.0.lcssa = phi i8 [ 0, %if.end4 ], [ %job_may_block.1.lcssa, %for.cond.cleanup.loopexit ]
  %min_threads.0.lcssa = phi i32 [ 0, %if.end4 ], [ %add.lcssa, %for.cond.cleanup.loopexit ]
  %cmp31 = icmp eq %"struct.Halide::Runtime::Internal::work"* %task_parent, null
  br i1 %cmp31, label %if.then32, label %do.body61

for.body:                                         ; preds = %for.inc.1, %for.body.preheader.new
  %indvars.iv193 = phi i64 [ 0, %for.body.preheader.new ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187 = phi i32 [ 0, %for.body.preheader.new ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185 = phi i8 [ 0, %for.body.preheader.new ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184 = phi i8 [ 0, %for.body.preheader.new ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183 = phi i8 [ 0, %for.body.preheader.new ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182 = phi i32 [ -1, %for.body.preheader.new ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.1, %for.inc.1 ]
  %min_threads5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 7
  %11 = load i32, i32* %min_threads5, align 4, !tbaa !30
  %cmp6 = icmp eq i32 %11, 0
  %add = add i32 %11, %min_threads.0187
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 4
  %12 = load i32, i32* %num_semaphores, align 8, !tbaa !28
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 8
  %13 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool22.not = icmp eq i8 %13, 0
  br i1 %tobool22.not, label %if.else24, label %if.then23

if.then23:                                        ; preds = %for.body
  %inc = add nsw i32 %workers_to_wake.0182, 1
  br label %for.inc

if.else24:                                        ; preds = %for.body
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 6
  %14 = load i32, i32* %extent, align 8, !tbaa !25
  %add28 = add nsw i32 %14, %workers_to_wake.0182
  br label %for.inc

for.inc:                                          ; preds = %if.else24, %if.then23
  %workers_to_wake.1 = phi i32 [ %inc, %if.then23 ], [ %add28, %if.else24 ]
  %indvars.iv.next194 = or i64 %indvars.iv193, 1
  %min_threads5.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 7
  %15 = load i32, i32* %min_threads5.1, align 4, !tbaa !30
  %cmp6.1 = icmp eq i32 %15, 0
  %add.1 = add i32 %15, %add
  %16 = or i1 %cmp6.1, %cmp6
  %stealable_jobs.1.1 = select i1 %16, i8 1, i8 %stealable_jobs.0183
  %17 = or i32 %15, %11
  %18 = icmp eq i32 %17, 0
  %job_may_block.1.1 = select i1 %18, i8 %job_may_block.0185, i8 1
  %num_semaphores.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 4
  %19 = load i32, i32* %num_semaphores.1, align 8, !tbaa !28
  %20 = or i32 %19, %12
  %21 = icmp eq i32 %20, 0
  %spec.select.1 = select i1 %21, i8 %job_has_acquires.0184, i8 1
  %serial.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 8
  %22 = load i8, i8* %serial.1, align 8, !tbaa !26, !range !17
  %tobool22.not.1 = icmp eq i8 %22, 0
  br i1 %tobool22.not.1, label %if.else24.1, label %if.then23.1

if.then32:                                        ; preds = %for.cond.cleanup
  %23 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  %not. = xor i1 %25, true
  %add36 = zext i1 %not. to i32
  %min_threads.2 = add nsw i32 %min_threads.0.lcssa, %add36
  %26 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp38180 = icmp slt i32 %26, 256
  br i1 %cmp38180, label %land.rhs, label %do.end50

land.rhs:                                         ; preds = %if.then32, %while.body
  %27 = phi i32 [ %inc45, %while.body ], [ %26, %if.then32 ]
  %28 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %sub = add nsw i32 %28, -1
  %cmp39 = icmp slt i32 %27, %sub
  br i1 %cmp39, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %add40 = add nsw i32 %27, 1
  %29 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub41 = sub i32 %add40, %29
  %cmp42 = icmp slt i32 %sub41, %min_threads.2
  br i1 %cmp42, label %while.body, label %do.end50

while.body:                                       ; preds = %lor.rhs, %land.rhs
  %30 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc43 = add nsw i32 %30, 1
  store i32 %inc43, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %call44 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal13worker_threadEPv, i8* null) #17
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %inc45 = add nsw i32 %31, 1
  store i32 %inc45, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %idxprom46 = sext i32 %31 to i64
  %arrayidx47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %idxprom46
  store %struct.halide_thread* %call44, %struct.halide_thread** %arrayidx47, align 8, !tbaa !10
  %cmp38 = icmp slt i32 %31, 255
  br i1 %cmp38, label %land.rhs, label %do.end50, !llvm.loop !55

do.end50:                                         ; preds = %while.body, %lor.rhs, %if.then32
  br i1 %25, label %if.end77, label %if.then54

if.then54:                                        ; preds = %do.end50
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %inc55 = add nsw i32 %32, 1
  store i32 %inc55, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end77

do.body61:                                        ; preds = %for.cond.cleanup
  %min_threads63 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 0, i32 7
  %33 = load i32, i32* %min_threads63, align 4, !tbaa !30
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 8
  %34 = load i32, i32* %active_workers, align 8, !tbaa !35
  %mul = mul nsw i32 %34, %33
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub64 = sub nsw i32 %mul, %35
  %cmp65.not = icmp sgt i32 %min_threads.0.lcssa, %sub64
  br i1 %cmp65.not, label %if.then66, label %do.end69

if.then66:                                        ; preds = %do.body61
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([263 x i8], [263 x i8]* @.str.3, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end69

do.end69:                                         ; preds = %if.then66, %do.body61
  %36 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %37 = and i8 %36, 1
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %if.end77, label %if.then73

if.then73:                                        ; preds = %do.end69
  %39 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %inc75 = add nsw i32 %39, 1
  store i32 %inc75, i32* %threads_reserved, align 8, !tbaa !56
  br label %if.end77

if.end77:                                         ; preds = %if.then73, %do.end69, %if.then54, %do.end50
  br i1 %cmp181, label %for.body83.lr.ph, label %for.cond.cleanup82

for.body83.lr.ph:                                 ; preds = %if.end77
  %.promoted = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %40 = zext i32 %num_jobs to i64
  %xtraiter3 = and i64 %40, 1
  %lcmp.mod4.not = icmp eq i64 %xtraiter3, 0
  br i1 %lcmp.mod4.not, label %for.body83.prol.loopexit, label %for.body83.prol

for.body83.prol:                                  ; preds = %for.body83.lr.ph
  %indvars.iv.next.prol = add nsw i64 %40, -1
  %arrayidx85.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol
  %next_job.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %.promoted, %"struct.Halide::Runtime::Internal::work"** %next_job.prol, align 8, !tbaa !58
  %siblings.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.prol, align 8, !tbaa !38
  %sibling_count.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 4
  store i32 %num_jobs, i32* %sibling_count.prol, align 8, !tbaa !39
  %threads_reserved93.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 6
  store i32 0, i32* %threads_reserved93.prol, align 8, !tbaa !56
  br label %for.body83.prol.loopexit

for.body83.prol.loopexit:                         ; preds = %for.body83.prol, %for.body83.lr.ph
  %indvars.iv.unr = phi i64 [ %40, %for.body83.lr.ph ], [ %indvars.iv.next.prol, %for.body83.prol ]
  %arrayidx85192.unr = phi %"struct.Halide::Runtime::Internal::work"* [ %.promoted, %for.body83.lr.ph ], [ %arrayidx85.prol, %for.body83.prol ]
  %41 = icmp eq i32 %num_jobs, 1
  br i1 %41, label %for.cond80.for.cond.cleanup82_crit_edge, label %for.body83

for.cond80.for.cond.cleanup82_crit_edge:          ; preds = %for.body83, %for.body83.prol.loopexit
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %for.cond.cleanup82

for.cond.cleanup82:                               ; preds = %for.cond80.for.cond.cleanup82_crit_edge, %if.end77
  %42 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %tobool96 = icmp ne i32 %42, 0
  %43 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8
  %44 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8
  %cmp98 = icmp slt i32 %43, %44
  %45 = or i1 %tobool96, %cmp98
  %cmp102 = icmp sgt i32 %workers_to_wake.0.lcssa, %43
  %or.cond174 = or i1 %cmp102, %45
  %storemerge = select i1 %or.cond174, i32 %44, i32 %workers_to_wake.0.lcssa
  store i32 %storemerge, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  %46 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %47 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %cmp106 = icmp sgt i32 %46, %47
  br i1 %cmp106, label %if.then107, label %if.end111

for.body83:                                       ; preds = %for.body83.prol.loopexit, %for.body83
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body83 ], [ %indvars.iv.unr, %for.body83.prol.loopexit ]
  %arrayidx85192 = phi %"struct.Halide::Runtime::Internal::work"* [ %arrayidx85.1, %for.body83 ], [ %arrayidx85192.unr, %for.body83.prol.loopexit ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx85 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85192, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 4
  store i32 %num_jobs, i32* %sibling_count, align 8, !tbaa !39
  %threads_reserved93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 6
  store i32 0, i32* %threads_reserved93, align 8, !tbaa !56
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, -2
  %arrayidx85.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1
  %next_job.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85, %"struct.Halide::Runtime::Internal::work"** %next_job.1, align 8, !tbaa !58
  %siblings.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.1, align 8, !tbaa !38
  %sibling_count.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 4
  store i32 %num_jobs, i32* %sibling_count.1, align 8, !tbaa !39
  %threads_reserved93.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 6
  store i32 0, i32* %threads_reserved93.1, align 8, !tbaa !56
  %cmp81.1 = icmp sgt i64 %indvars.iv, 2
  br i1 %cmp81.1, label %for.body83, label %for.cond80.for.cond.cleanup82_crit_edge, !llvm.loop !61

if.then107:                                       ; preds = %for.cond.cleanup82
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #17
  %tobool108.not = icmp eq i8 %stealable_jobs.0.lcssa, 0
  br i1 %tobool108.not, label %if.end111, label %if.then109

if.then109:                                       ; preds = %if.then107
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.then107, %for.cond.cleanup82
  %48 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %49 = and i8 %48, 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %if.end123, label %if.then115

if.then115:                                       ; preds = %if.end111
  br i1 %cmp31, label %if.else120, label %if.then117

if.then117:                                       ; preds = %if.then115
  %threads_reserved118 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %51 = load i32, i32* %threads_reserved118, align 8, !tbaa !56
  %dec119 = add nsw i32 %51, -1
  store i32 %dec119, i32* %threads_reserved118, align 8, !tbaa !56
  br label %if.end123

if.else120:                                       ; preds = %if.then115
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %dec121 = add nsw i32 %52, -1
  store i32 %dec121, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end123

if.end123:                                        ; preds = %if.else120, %if.then117, %if.end111
  ret void

if.then23.1:                                      ; preds = %for.inc
  %inc.1 = add nsw i32 %workers_to_wake.1, 1
  br label %for.inc.1

if.else24.1:                                      ; preds = %for.inc
  %extent.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 6
  %53 = load i32, i32* %extent.1, align 8, !tbaa !25
  %add28.1 = add nsw i32 %53, %workers_to_wake.1
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.else24.1, %if.then23.1
  %workers_to_wake.1.1 = phi i32 [ %inc.1, %if.then23.1 ], [ %add28.1, %if.else24.1 ]
  %indvars.iv.next194.1 = add nuw nsw i64 %indvars.iv193, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body, !llvm.loop !62
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %owned_job) local_unnamed_addr #0 {
entry:
  %active_workers.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 8
  %tobool.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %owned_job, null
  %extent.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 0, i32 6
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 9
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 5
  %siblings56 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 3
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 11
  %next_job10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 2
  br label %while.cond

while.cond:                                       ; preds = %while.cond.backedge, %entry
  %spin_count.0 = phi i32 [ 0, %entry ], [ %spin_count.0.be, %while.cond.backedge ]
  br i1 %tobool.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.cond
  %0 = load i32, i32* %extent.i, align 8, !tbaa !25
  %tobool.not.i = icmp eq i32 %0, 0
  br i1 %tobool.not.i, label %cond.end, label %if.then

cond.false:                                       ; preds = %while.cond
  %1 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63, !range !17
  %tobool1.not = icmp eq i8 %1, 0
  br i1 %tobool1.not, label %do.end.thread, label %while.end316

cond.end:                                         ; preds = %cond.true
  %2 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %tobool2.i.not = icmp eq i32 %2, 0
  br i1 %tobool2.i.not, label %while.end316, label %if.then

if.then:                                          ; preds = %cond.end, %cond.true
  %3 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %4 = load i32, i32* %exit_status, align 4, !tbaa !34
  %cmp.not = icmp eq i32 %4, 0
  br i1 %cmp.not, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %cmp4 = icmp eq i32 %5, 0
  br i1 %cmp4, label %while.cond6.preheader, label %do.end

while.cond6.preheader:                            ; preds = %if.then3
  %cmp7.not524 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, %owned_job
  br i1 %cmp7.not524, label %while.end, label %while.body8

while.body8:                                      ; preds = %while.cond6.preheader, %while.body8
  %job.0525 = phi %"struct.Halide::Runtime::Internal::work"* [ %6, %while.body8 ], [ %3, %while.cond6.preheader ]
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %cmp7.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %6, %owned_job
  br i1 %cmp7.not, label %while.end.loopexit, label %while.body8, !llvm.loop !64

while.end.loopexit:                               ; preds = %while.body8
  %next_job.le = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond6.preheader
  %prev_ptr.0.lcssa = phi %"struct.Halide::Runtime::Internal::work"** [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %while.cond6.preheader ], [ %next_job.le, %while.end.loopexit ]
  %7 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job10, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %7, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.0.lcssa, align 8, !tbaa !10
  store i32 0, i32* %extent.i, align 8, !tbaa !25
  br label %while.cond.backedge

if.else:                                          ; preds = %if.then
  %8 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  %tobool11.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %8, null
  br i1 %tobool11.not, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %exit_status13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %8, i64 0, i32 9
  %9 = load i32, i32* %exit_status13, align 4, !tbaa !34
  %cmp14.not = icmp eq i32 %9, 0
  br i1 %cmp14.not, label %do.end, label %if.then15

if.then15:                                        ; preds = %land.lhs.true
  store i32 %9, i32* %exit_status, align 4, !tbaa !34
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %while.cond.backedge

do.end:                                           ; preds = %land.lhs.true, %if.else, %if.then3
  %tobool23.not527 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, null
  br i1 %tobool23.not527, label %if.then105, label %do.end27

do.end.thread:                                    ; preds = %cond.false
  %10 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %tobool23.not527563 = icmp eq %"struct.Halide::Runtime::Internal::work"* %10, null
  br i1 %tobool23.not527563, label %if.else112, label %do.end27.us

do.end27.us:                                      ; preds = %do.end.thread, %cleanup.us
  %job.1529.us = phi %"struct.Halide::Runtime::Internal::work"* [ %29, %cleanup.us ], [ %10, %do.end.thread ]
  %prev_ptr.1528.us = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95.us, %cleanup.us ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end.thread ]
  %parent_job29.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 5
  %11 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29.us, align 8, !tbaa !40
  %cmp30.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %11, null
  br i1 %cmp30.us, label %if.then31.us, label %if.else32.us

if.else32.us:                                     ; preds = %do.end27.us
  %active_workers33.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 8
  %12 = load i32, i32* %active_workers33.us, align 8, !tbaa !35
  %cmp34.us = icmp eq i32 %12, 0
  %min_threads.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 0, i32 7
  %13 = load i32, i32* %min_threads.us, align 4, !tbaa !30
  br i1 %cmp34.us, label %if.then35.us, label %if.else38.us

if.else38.us:                                     ; preds = %if.else32.us
  %mul.us = mul nsw i32 %13, %12
  %threads_reserved42.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %14 = load i32, i32* %threads_reserved42.us, align 8, !tbaa !56
  %sub43.us = sub nsw i32 %mul.us, %14
  br label %if.end45.us

if.then35.us:                                     ; preds = %if.else32.us
  %threads_reserved.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %15 = load i32, i32* %threads_reserved.us, align 8, !tbaa !56
  %sub37.us = sub nsw i32 %13, %15
  br label %if.end45.us

if.then31.us:                                     ; preds = %do.end27.us
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add.us = add nsw i32 %16, 1
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub.us = sub i32 %add.us, %17
  br label %if.end45.us

if.end45.us:                                      ; preds = %if.then31.us, %if.then35.us, %if.else38.us
  %threads_available.0.us = phi i32 [ %sub.us, %if.then31.us ], [ %sub37.us, %if.then35.us ], [ %sub43.us, %if.else38.us ]
  %min_threads47.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 7
  %18 = load i32, i32* %min_threads47.us, align 4, !tbaa !30
  %cmp48.not.us = icmp sge i32 %threads_available.0.us, %18
  %serial.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 8
  %19 = load i8, i8* %serial.us, align 8, !tbaa !26, !range !17
  %tobool69.not.us = icmp eq i8 %19, 0
  br i1 %tobool69.not.us, label %if.end45.us.lor.end73.us_crit_edge, label %lor.rhs70.us

if.end45.us.lor.end73.us_crit_edge:               ; preds = %if.end45.us
  %.0 = and i1 %cmp48.not.us, true
  br label %lor.end73.us

lor.rhs70.us:                                     ; preds = %if.end45.us
  %active_workers71.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 8
  %20 = load i32, i32* %active_workers71.us, align 8, !tbaa !35
  %cmp72.us = icmp eq i32 %20, 0
  %.1 = and i1 %cmp48.not.us, %cmp72.us
  br label %lor.end73.us

lor.end73.us:                                     ; preds = %if.end45.us.lor.end73.us_crit_edge, %lor.rhs70.us
  %.phi = phi i1 [ %.0, %if.end45.us.lor.end73.us_crit_edge ], [ %.1, %lor.rhs70.us ]
  br i1 %.phi, label %if.then86.us, label %cleanup.us

if.then86.us:                                     ; preds = %lor.end73.us
  %next_semaphore.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 10
  %21 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %num_semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 4
  %22 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp14.i.us = icmp slt i32 %21, %22
  br i1 %cmp14.i.us, label %for.body.lr.ph.i.us, label %if.else127

for.body.lr.ph.i.us:                              ; preds = %if.then86.us
  %semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 3
  br label %for.body.i.us

for.body.i.us:                                    ; preds = %for.inc.i.us, %for.body.lr.ph.i.us
  %23 = phi i32 [ %21, %for.body.lr.ph.i.us ], [ %inc.i.us, %for.inc.i.us ]
  %24 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i.us, align 8, !tbaa !27
  %idxprom.i.us = sext i32 %23 to i64
  %semaphore.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 0
  %25 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i.us, align 8, !tbaa !65
  %count.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 1
  %26 = load i32, i32* %count.i.us, align 8, !tbaa !67
  %call.i.us = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %25, i32 %26) #16
  br i1 %call.i.us, label %for.inc.i.us, label %cleanup.us

for.inc.i.us:                                     ; preds = %for.body.i.us
  %27 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %inc.i.us = add nsw i32 %27, 1
  store i32 %inc.i.us, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %28 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp.i.us = icmp slt i32 %inc.i.us, %28
  br i1 %cmp.i.us, label %for.body.i.us, label %if.else127, !llvm.loop !68

cleanup.us:                                       ; preds = %for.body.i.us, %lor.end73.us
  %next_job95.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 2
  %29 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95.us, align 8, !tbaa !58
  %tobool23.not.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %29, null
  br i1 %tobool23.not.us, label %if.then103, label %do.end27.us

do.end27:                                         ; preds = %do.end, %cleanup
  %job.1529 = phi %"struct.Halide::Runtime::Internal::work"* [ %50, %cleanup ], [ %3, %do.end ]
  %prev_ptr.1528 = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95, %cleanup ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end ]
  %parent_job29 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 5
  %30 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29, align 8, !tbaa !40
  %cmp30 = icmp eq %"struct.Halide::Runtime::Internal::work"* %30, null
  br i1 %cmp30, label %if.then31, label %if.else32

if.then31:                                        ; preds = %do.end27
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add = add nsw i32 %31, 1
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub = sub i32 %add, %32
  br label %if.end45

if.else32:                                        ; preds = %do.end27
  %active_workers33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 8
  %33 = load i32, i32* %active_workers33, align 8, !tbaa !35
  %cmp34 = icmp eq i32 %33, 0
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 0, i32 7
  %34 = load i32, i32* %min_threads, align 4, !tbaa !30
  br i1 %cmp34, label %if.then35, label %if.else38

if.then35:                                        ; preds = %if.else32
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub37 = sub nsw i32 %34, %35
  br label %if.end45

if.else38:                                        ; preds = %if.else32
  %mul = mul nsw i32 %34, %33
  %threads_reserved42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %36 = load i32, i32* %threads_reserved42, align 8, !tbaa !56
  %sub43 = sub nsw i32 %mul, %36
  br label %if.end45

if.end45:                                         ; preds = %if.else38, %if.then35, %if.then31
  %threads_available.0 = phi i32 [ %sub, %if.then31 ], [ %sub37, %if.then35 ], [ %sub43, %if.else38 ]
  %min_threads47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 7
  %37 = load i32, i32* %min_threads47, align 4, !tbaa !30
  %cmp48.not = icmp slt i32 %threads_available.0, %37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 3
  %38 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %39 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings56, align 8, !tbaa !38
  %cmp57 = icmp ne %"struct.Halide::Runtime::Internal::work"* %38, %39
  %cmp60 = icmp ne i32 %37, 0
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 8
  %40 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool69.not = icmp eq i8 %40, 0
  br i1 %tobool69.not, label %if.end45.lor.end73_crit_edge, label %lor.rhs70

if.end45.lor.end73_crit_edge:                     ; preds = %if.end45
  %.not472.0 = xor i1 true, true
  br label %lor.end73

lor.rhs70:                                        ; preds = %if.end45
  %active_workers71 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 8
  %41 = load i32, i32* %active_workers71, align 8, !tbaa !35
  %cmp72 = icmp eq i32 %41, 0
  %.not472.1 = xor i1 %cmp72, true
  br label %lor.end73

lor.end73:                                        ; preds = %if.end45.lor.end73_crit_edge, %lor.rhs70
  %.not472.phi = phi i1 [ %.not472.0, %if.end45.lor.end73_crit_edge ], [ %.not472.1, %lor.rhs70 ]
  %.not = and i1 %cmp60, %cmp57
  %brmerge = or i1 %cmp48.not, %.not
  %brmerge473 = or i1 %brmerge, %.not472.phi
  br i1 %brmerge473, label %cleanup, label %if.then86

if.then86:                                        ; preds = %lor.end73
  %next_semaphore.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 10
  %42 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %num_semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 4
  %43 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp14.i = icmp slt i32 %42, %43
  br i1 %cmp14.i, label %for.body.lr.ph.i, label %if.else127

for.body.lr.ph.i:                                 ; preds = %if.then86
  %semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 3
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %44 = phi i32 [ %42, %for.body.lr.ph.i ], [ %inc.i, %for.inc.i ]
  %45 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i, align 8, !tbaa !27
  %idxprom.i = sext i32 %44 to i64
  %semaphore.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 0
  %46 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i, align 8, !tbaa !65
  %count.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 1
  %47 = load i32, i32* %count.i, align 8, !tbaa !67
  %call.i = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %46, i32 %47) #16
  br i1 %call.i, label %for.inc.i, label %cleanup

for.inc.i:                                        ; preds = %for.body.i
  %48 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %inc.i = add nsw i32 %48, 1
  store i32 %inc.i, i32* %next_semaphore.i, align 8, !tbaa !36
  %49 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp.i = icmp slt i32 %inc.i, %49
  br i1 %cmp.i, label %for.body.i, label %if.else127, !llvm.loop !68

cleanup:                                          ; preds = %for.body.i, %lor.end73
  %next_job95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 2
  %50 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95, align 8, !tbaa !58
  %tobool23.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %50, null
  br i1 %tobool23.not, label %if.then103, label %do.end27

if.then103:                                       ; preds = %cleanup, %cleanup.us
  br i1 %tobool.not, label %if.else112, label %if.then105

if.then105:                                       ; preds = %do.end, %if.then103
  %inc = add nsw i32 %spin_count.0, 1
  %cmp106 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp106, label %if.then107, label %if.else108

if.then107:                                       ; preds = %if.then105
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_thread_yield() #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %while.cond.backedge

if.else108:                                       ; preds = %if.then105
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %inc109 = add nsw i32 %51, 1
  store i32 %inc109, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  store i8 1, i8* %owner_is_sleeping, align 4, !tbaa !37
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %dec = add nsw i32 %52, -1
  store i32 %dec, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  br label %while.cond.backedge

if.else112:                                       ; preds = %if.then103, %do.end.thread
  %53 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %inc113 = add nsw i32 %53, 1
  store i32 %inc113, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %54 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %55 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %cmp114 = icmp sgt i32 %54, %55
  br i1 %cmp114, label %if.then115, label %if.else118

if.then115:                                       ; preds = %if.else112
  %dec116 = add nsw i32 %54, -1
  store i32 %dec116, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %56 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc117 = add nsw i32 %56, 1
  store i32 %inc117, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  br label %if.end124

if.else118:                                       ; preds = %if.else112
  %inc119 = add nsw i32 %spin_count.0, 1
  %cmp120 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp120, label %if.then121, label %if.else122

if.then121:                                       ; preds = %if.else118
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_thread_yield() #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end124

if.else122:                                       ; preds = %if.else118
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end124

if.end124:                                        ; preds = %if.else122, %if.then121, %if.then115
  %spin_count.1 = phi i32 [ %spin_count.0, %if.then115 ], [ %inc119, %if.then121 ], [ %inc119, %if.else122 ]
  %57 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %dec125 = add nsw i32 %57, -1
  store i32 %dec125, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  br label %while.cond.backedge

if.else127:                                       ; preds = %if.then86, %if.then86.us, %for.inc.i, %for.inc.i.us
  %next_semaphore.i521 = phi i32* [ %next_semaphore.i.us, %for.inc.i.us ], [ %next_semaphore.i, %for.inc.i ], [ %next_semaphore.i.us, %if.then86.us ], [ %next_semaphore.i, %if.then86 ]
  %prev_ptr.1519 = phi %"struct.Halide::Runtime::Internal::work"** [ %prev_ptr.1528.us, %for.inc.i.us ], [ %prev_ptr.1528, %for.inc.i ], [ %prev_ptr.1528.us, %if.then86.us ], [ %prev_ptr.1528, %if.then86 ]
  %job.1515 = phi %"struct.Halide::Runtime::Internal::work"* [ %job.1529.us, %for.inc.i.us ], [ %job.1529, %for.inc.i ], [ %job.1529.us, %if.then86.us ], [ %job.1529, %if.then86 ]
  store i32 0, i32* %next_semaphore.i521, align 8, !tbaa !36
  %active_workers132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 8
  %58 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %inc133 = add nsw i32 %58, 1
  store i32 %inc133, i32* %active_workers132, align 8, !tbaa !35
  %parent_job134 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 5
  %59 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp135 = icmp eq %"struct.Halide::Runtime::Internal::work"* %59, null
  %min_threads138 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 7
  %60 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp135, label %if.then136, label %if.else143

if.then136:                                       ; preds = %if.else127
  %61 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %add139 = add nsw i32 %61, %60
  store i32 %add139, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end152

if.else143:                                       ; preds = %if.else127
  %threads_reserved147 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %59, i64 0, i32 6
  %62 = load i32, i32* %threads_reserved147, align 8, !tbaa !56
  %add148 = add nsw i32 %62, %60
  store i32 %add148, i32* %threads_reserved147, align 8, !tbaa !56
  br label %if.end152

if.end152:                                        ; preds = %if.else143, %if.then136
  %serial154 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 8
  %63 = load i8, i8* %serial154, align 8, !tbaa !26, !range !17
  %tobool155.not = icmp eq i8 %63, 0
  br i1 %tobool155.not, label %if.else198, label %if.then156

if.then156:                                       ; preds = %if.end152
  %next_job157 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %64 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %64, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %extent163 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %next_semaphore.i474 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 10
  %num_semaphores.i475 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 4
  %semaphores.i477 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 3
  %user_context = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %min = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %closure = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %65 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  br label %while.cond161.preheader

while.cond161.preheader:                          ; preds = %if.end172, %if.then156
  %iters.0538 = phi i32 [ 1, %if.then156 ], [ 0, %if.end172 ]
  %total_iters.0537 = phi i32 [ 0, %if.then156 ], [ %add178, %if.end172 ]
  %66 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub164531 = sub nsw i32 %66, %total_iters.0537
  %cmp165532 = icmp sgt i32 %sub164531, %iters.0538
  br i1 %cmp165532, label %land.rhs.preheader, label %while.end169

land.rhs.preheader:                               ; preds = %while.cond161.preheader
  %.pre = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %.pre560 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  br label %land.rhs

land.rhs:                                         ; preds = %while.body167, %land.rhs.preheader
  %67 = phi i32 [ %76, %while.body167 ], [ %66, %land.rhs.preheader ]
  %68 = phi i32 [ %77, %while.body167 ], [ %.pre560, %land.rhs.preheader ]
  %69 = phi i32 [ 0, %while.body167 ], [ %.pre, %land.rhs.preheader ]
  %iters.1533 = phi i32 [ %inc168, %while.body167 ], [ %iters.0538, %land.rhs.preheader ]
  %cmp14.i476 = icmp slt i32 %69, %68
  br i1 %cmp14.i476, label %for.body.i483, label %while.body167

for.body.i483:                                    ; preds = %land.rhs, %for.inc.i486
  %70 = phi i32 [ %inc.i484, %for.inc.i486 ], [ %69, %land.rhs ]
  %71 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i477, align 8, !tbaa !27
  %idxprom.i479 = sext i32 %70 to i64
  %semaphore.i480 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 0
  %72 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i480, align 8, !tbaa !65
  %count.i481 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 1
  %73 = load i32, i32* %count.i481, align 8, !tbaa !67
  %call.i482 = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %72, i32 %73) #16
  br i1 %call.i482, label %for.inc.i486, label %while.end169

for.inc.i486:                                     ; preds = %for.body.i483
  %74 = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc.i484 = add nsw i32 %74, 1
  store i32 %inc.i484, i32* %next_semaphore.i474, align 8, !tbaa !36
  %75 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  %cmp.i485 = icmp slt i32 %inc.i484, %75
  br i1 %cmp.i485, label %for.body.i483, label %while.body167.loopexit, !llvm.loop !68

while.body167.loopexit:                           ; preds = %for.inc.i486
  %.pre561 = load i32, i32* %extent163, align 8, !tbaa !25
  br label %while.body167

while.body167:                                    ; preds = %while.body167.loopexit, %land.rhs
  %76 = phi i32 [ %.pre561, %while.body167.loopexit ], [ %67, %land.rhs ]
  %77 = phi i32 [ %75, %while.body167.loopexit ], [ %68, %land.rhs ]
  store i32 0, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc168 = add nuw nsw i32 %iters.1533, 1
  %sub164 = sub nsw i32 %76, %total_iters.0537
  %cmp165 = icmp sgt i32 %sub164, %inc168
  br i1 %cmp165, label %land.rhs, label %if.end172, !llvm.loop !70

while.end169:                                     ; preds = %for.body.i483, %while.cond161.preheader
  %iters.1523 = phi i32 [ %iters.0538, %while.cond161.preheader ], [ %iters.1533, %for.body.i483 ]
  %cmp170 = icmp eq i32 %iters.1523, 0
  br i1 %cmp170, label %while.end179, label %if.end172

if.end172:                                        ; preds = %while.body167, %while.end169
  %iters.1523566 = phi i32 [ %iters.1523, %while.end169 ], [ %inc168, %while.body167 ]
  %78 = load i8*, i8** %user_context, align 8, !tbaa !33
  %79 = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %80 = load i32, i32* %min, align 4, !tbaa !24
  %add175 = add nsw i32 %80, %total_iters.0537
  %81 = load i8*, i8** %closure, align 8, !tbaa !29
  %call177 = tail call i32 @halide_do_loop_task(i8* %78, i32 (i8*, i32, i32, i8*, i8*)* %79, i32 %add175, i32 %iters.1523566, i8* %81, i8* nonnull %65) #17
  %add178 = add nuw nsw i32 %iters.1523566, %total_iters.0537
  %cmp159 = icmp eq i32 %call177, 0
  br i1 %cmp159, label %while.cond161.preheader, label %while.end179, !llvm.loop !71

while.end179:                                     ; preds = %if.end172, %while.end169
  %cmp170568 = phi i1 [ true, %while.end169 ], [ false, %if.end172 ]
  %result.0.lcssa = phi i32 [ 0, %while.end169 ], [ %call177, %if.end172 ]
  %total_iters.0.lcssa = phi i32 [ %total_iters.0537, %while.end169 ], [ %add178, %if.end172 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %82 = load i32, i32* %min, align 4, !tbaa !24
  %add182 = add nsw i32 %82, %total_iters.0.lcssa
  store i32 %add182, i32* %min, align 4, !tbaa !24
  %83 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub185 = sub nsw i32 %83, %total_iters.0.lcssa
  store i32 %sub185, i32* %extent163, align 8, !tbaa !25
  br i1 %cmp170568, label %if.else190, label %if.end230.thread505

if.end230.thread505:                              ; preds = %while.end179
  store i32 0, i32* %extent163, align 8, !tbaa !25
  br label %if.then238

if.else190:                                       ; preds = %while.end179
  %cmp193 = icmp sgt i32 %sub185, 0
  br i1 %cmp193, label %if.then194, label %if.end271

if.then194:                                       ; preds = %if.else190
  %84 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  store %"struct.Halide::Runtime::Internal::work"* %84, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %job.1515, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %if.end271

if.else198:                                       ; preds = %if.end152
  %myjob.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %myjob.sroa.0.0.copyload = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %myjob.sroa.0.0..sroa_idx, align 8, !tbaa.struct !72
  %myjob.sroa.4.0..sroa_idx327 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %myjob.sroa.4.0.copyload = load i8*, i8** %myjob.sroa.4.0..sroa_idx327, align 8, !tbaa.struct !74
  %myjob.sroa.6333.0..sroa_idx334 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %myjob.sroa.6333.0.copyload = load i32, i32* %myjob.sroa.6333.0..sroa_idx334, align 4
  %myjob.sroa.8340.0..sroa_idx341 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 1
  %myjob.sroa.8340.0.copyload = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %myjob.sroa.8340.0..sroa_idx341, align 8, !tbaa.struct !75
  %myjob.sroa.10347.0..sroa_idx348 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %myjob.sroa.10347.0.copyload = load i8*, i8** %myjob.sroa.10347.0..sroa_idx348, align 8, !tbaa.struct !76
  %inc201 = add nsw i32 %myjob.sroa.6333.0.copyload, 1
  store i32 %inc201, i32* %myjob.sroa.6333.0..sroa_idx334, align 4, !tbaa !24
  %extent203 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %85 = load i32, i32* %extent203, align 8, !tbaa !25
  %dec204 = add nsw i32 %85, -1
  store i32 %dec204, i32* %extent203, align 8, !tbaa !25
  %cmp207 = icmp eq i32 %dec204, 0
  br i1 %cmp207, label %if.then208, label %if.end210

if.then208:                                       ; preds = %if.else198
  %next_job209 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %86 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job209, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %86, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %if.else198
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %tobool211.not = icmp eq i32 (i8*, i32, i8*)* %myjob.sroa.8340.0.copyload, null
  br i1 %tobool211.not, label %if.else220, label %if.then212

if.then212:                                       ; preds = %if.end210
  %call219 = tail call i32 @halide_do_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i8*)* nonnull %myjob.sroa.8340.0.copyload, i32 %myjob.sroa.6333.0.copyload, i8* %myjob.sroa.4.0.copyload) #17
  br label %if.end230

if.else220:                                       ; preds = %if.end210
  %87 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  %call228 = tail call i32 @halide_do_loop_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i32, i8*, i8*)* %myjob.sroa.0.0.copyload, i32 %myjob.sroa.6333.0.copyload, i32 1, i8* %myjob.sroa.4.0.copyload, i8* %87) #17
  br label %if.end230

if.end230:                                        ; preds = %if.else220, %if.then212
  %result.1 = phi i32 [ %call219, %if.then212 ], [ %call228, %if.else220 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %cmp237.not = icmp eq i32 %result.1, 0
  br i1 %cmp237.not, label %if.end271, label %if.then238

if.then238:                                       ; preds = %if.end230, %if.end230.thread505
  %result.2510 = phi i32 [ %result.0.lcssa, %if.end230.thread505 ], [ %result.1, %if.end230 ]
  %exit_status239 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  store i32 %result.2510, i32* %exit_status239, align 4, !tbaa !34
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 4
  %88 = load i32, i32* %sibling_count, align 8, !tbaa !39
  %cmp240540 = icmp sgt i32 %88, 0
  br i1 %cmp240540, label %do.end243.lr.ph, label %if.end271

do.end243.lr.ph:                                  ; preds = %if.then238
  %siblings244 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 3
  %89 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings244, align 8, !tbaa !38
  %wide.trip.count = zext i32 %88 to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %90 = icmp eq i32 %88, 1
  br i1 %90, label %if.end271.loopexit.unr-lcssa, label %do.end243.lr.ph.new

do.end243.lr.ph.new:                              ; preds = %do.end243.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %do.end243

do.end243:                                        ; preds = %for.inc.1, %do.end243.lr.ph.new
  %indvars.iv = phi i64 [ 0, %do.end243.lr.ph.new ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541 = phi i8 [ 0, %do.end243.lr.ph.new ], [ %wake_owners.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %do.end243.lr.ph.new ], [ %niter.nsub.1, %for.inc.1 ]
  %exit_status245 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 9
  %91 = load i32, i32* %exit_status245, align 4, !tbaa !34
  %cmp246 = icmp eq i32 %91, 0
  br i1 %cmp246, label %if.then247, label %for.inc

if.then247:                                       ; preds = %do.end243
  store i32 %result.2510, i32* %exit_status245, align 4, !tbaa !34
  %92 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253 = icmp eq i32 %92, 0
  br i1 %cmp253, label %land.rhs254, label %land.end260

land.rhs254:                                      ; preds = %if.then247
  %owner_is_sleeping258 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 11
  %93 = load i8, i8* %owner_is_sleeping258, align 4, !tbaa !37, !range !17
  br label %land.end260

land.end260:                                      ; preds = %land.rhs254, %if.then247
  %94 = phi i8 [ 0, %if.then247 ], [ %93, %land.rhs254 ]
  %95 = and i8 %wake_owners.0541, 1
  %or = or i8 %94, %95
  br label %for.inc

for.inc:                                          ; preds = %land.end260, %do.end243
  %wake_owners.1 = phi i8 [ %or, %land.end260 ], [ %wake_owners.0541, %do.end243 ]
  %indvars.iv.next = or i64 %indvars.iv, 1
  %exit_status245.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 9
  %96 = load i32, i32* %exit_status245.1, align 4, !tbaa !34
  %cmp246.1 = icmp eq i32 %96, 0
  br i1 %cmp246.1, label %if.then247.1, label %for.inc.1

if.end271.loopexit.unr-lcssa:                     ; preds = %for.inc.1, %do.end243.lr.ph
  %wake_owners.1.lcssa.ph = phi i8 [ undef, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %indvars.iv.unr = phi i64 [ 0, %do.end243.lr.ph ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541.unr = phi i8 [ 0, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %if.end271, label %do.end243.epil

do.end243.epil:                                   ; preds = %if.end271.loopexit.unr-lcssa
  %exit_status245.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 9
  %97 = load i32, i32* %exit_status245.epil, align 4, !tbaa !34
  %cmp246.epil = icmp eq i32 %97, 0
  br i1 %cmp246.epil, label %if.then247.epil, label %if.end271

if.then247.epil:                                  ; preds = %do.end243.epil
  store i32 %result.2510, i32* %exit_status245.epil, align 4, !tbaa !34
  %98 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.epil = icmp eq i32 %98, 0
  br i1 %cmp253.epil, label %land.rhs254.epil, label %land.end260.epil

land.rhs254.epil:                                 ; preds = %if.then247.epil
  %owner_is_sleeping258.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 11
  %99 = load i8, i8* %owner_is_sleeping258.epil, align 4, !tbaa !37, !range !17
  br label %land.end260.epil

land.end260.epil:                                 ; preds = %land.rhs254.epil, %if.then247.epil
  %100 = phi i8 [ 0, %if.then247.epil ], [ %99, %land.rhs254.epil ]
  %101 = and i8 %wake_owners.0541.unr, 1
  %or.epil = or i8 %100, %101
  br label %if.end271

if.end271:                                        ; preds = %if.end271.loopexit.unr-lcssa, %do.end243.epil, %land.end260.epil, %if.then238, %if.end230, %if.then194, %if.else190
  %wake_owners.2 = phi i8 [ 0, %if.end230 ], [ 0, %if.else190 ], [ 0, %if.then194 ], [ 0, %if.then238 ], [ %wake_owners.1.lcssa.ph, %if.end271.loopexit.unr-lcssa ], [ %or.epil, %land.end260.epil ], [ %wake_owners.0541.unr, %do.end243.epil ]
  %102 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp273 = icmp eq %"struct.Halide::Runtime::Internal::work"* %102, null
  %103 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp273, label %if.then274, label %if.else281

if.then274:                                       ; preds = %if.end271
  %104 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub277 = sub nsw i32 %104, %103
  store i32 %sub277, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end290

if.else281:                                       ; preds = %if.end271
  %threads_reserved285 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %102, i64 0, i32 6
  %105 = load i32, i32* %threads_reserved285, align 8, !tbaa !56
  %sub286 = sub nsw i32 %105, %103
  store i32 %sub286, i32* %threads_reserved285, align 8, !tbaa !56
  br label %if.end290

if.end290:                                        ; preds = %if.else281, %if.then274
  %106 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %dec292 = add nsw i32 %106, -1
  store i32 %dec292, i32* %active_workers132, align 8, !tbaa !35
  %107 = and i8 %wake_owners.2, 1
  %tobool296.not = icmp eq i8 %107, 0
  br i1 %tobool296.not, label %lor.lhs.false297, label %if.then310

lor.lhs.false297:                                 ; preds = %if.end290
  %cmp299 = icmp eq i32 %dec292, 0
  br i1 %cmp299, label %land.lhs.true300, label %while.cond.backedge

land.lhs.true300:                                 ; preds = %lor.lhs.false297
  %extent302 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %108 = load i32, i32* %extent302, align 8, !tbaa !25
  %cmp303 = icmp eq i32 %108, 0
  br i1 %cmp303, label %land.lhs.true307, label %lor.lhs.false304

lor.lhs.false304:                                 ; preds = %land.lhs.true300
  %exit_status305 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  %109 = load i32, i32* %exit_status305, align 4, !tbaa !34
  %cmp306.not = icmp eq i32 %109, 0
  br i1 %cmp306.not, label %while.cond.backedge, label %land.lhs.true307

land.lhs.true307:                                 ; preds = %lor.lhs.false304, %land.lhs.true300
  %owner_is_sleeping308 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 11
  %110 = load i8, i8* %owner_is_sleeping308, align 4, !tbaa !37, !range !17
  %tobool309.not = icmp eq i8 %110, 0
  br i1 %tobool309.not, label %while.cond.backedge, label %if.then310

if.then310:                                       ; preds = %land.lhs.true307, %if.end290
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then310, %land.lhs.true307, %lor.lhs.false304, %lor.lhs.false297, %if.end124, %if.else108, %if.then107, %if.then15, %while.end
  %spin_count.0.be = phi i32 [ %spin_count.0, %while.end ], [ %spin_count.0, %if.then15 ], [ %inc, %if.then107 ], [ %inc, %if.else108 ], [ %spin_count.1, %if.end124 ], [ 0, %if.then310 ], [ 0, %land.lhs.true307 ], [ 0, %lor.lhs.false304 ], [ 0, %lor.lhs.false297 ]
  br label %while.cond, !llvm.loop !77

while.end316:                                     ; preds = %cond.end, %cond.false
  ret void

if.then247.1:                                     ; preds = %for.inc
  store i32 %result.2510, i32* %exit_status245.1, align 4, !tbaa !34
  %111 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.1 = icmp eq i32 %111, 0
  br i1 %cmp253.1, label %land.rhs254.1, label %land.end260.1

land.rhs254.1:                                    ; preds = %if.then247.1
  %owner_is_sleeping258.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 11
  %112 = load i8, i8* %owner_is_sleeping258.1, align 4, !tbaa !37, !range !17
  br label %land.end260.1

land.end260.1:                                    ; preds = %land.rhs254.1, %if.then247.1
  %113 = phi i8 [ 0, %if.then247.1 ], [ %112, %land.rhs254.1 ]
  %114 = and i8 %wake_owners.1, 1
  %or.1 = or i8 %113, %114
  br label %for.inc.1

for.inc.1:                                        ; preds = %land.end260.1, %for.inc
  %wake_owners.1.1 = phi i8 [ %or.1, %land.end260.1 ], [ %wake_owners.1, %for.inc ]
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %if.end271.loopexit.unr-lcssa, label %do.end243, !llvm.loop !78
}

; Function Attrs: nounwind
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %4 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #11
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %7 = ptrtoint %struct.halide_mutex* %mutex to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %6, i64 %7) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #0 align 2 {
entry:
  %call = tail call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #17
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)***
  %state.i60 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  br label %while.cond

while.cond:                                       ; preds = %cleanup, %entry
  %data_location.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %head, %entry ], [ %data_location.1, %cleanup ]
  %prev.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ null, %entry ], [ %prev.1, %cleanup ]
  %data.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %0, %entry ], [ %data.1, %cleanup ]
  %retval.0 = phi i64 [ undef, %entry ], [ %retval.1, %cleanup ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, null
  br i1 %cmp.not, label %while.end22, label %while.body

while.body:                                       ; preds = %while.cond
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 1
  %2 = load atomic i64, i64* %sleep_address monotonic, align 8
  %cmp2 = icmp eq i64 %2, %addr
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 2
  %3 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next3, align 8, !tbaa !79
  br i1 %cmp2, label %if.then, label %cleanup

if.then:                                          ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.0, align 8, !tbaa !10
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp4 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %4, %data.0
  br i1 %cmp4, label %if.then5, label %while.cond7.preheader

while.cond7.preheader:                            ; preds = %if.then
  %cmp872.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, null
  br i1 %cmp872.not, label %if.end, label %while.body9

if.then5:                                         ; preds = %if.then
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.0, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end

while.body9:                                      ; preds = %while.cond7.preheader, %while.body9
  %data2.073 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %6, %while.body9 ], [ %3, %while.cond7.preheader ]
  %sleep_address10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 1
  %5 = load atomic i64, i64* %sleep_address10 monotonic, align 8
  %cmp11 = icmp eq i64 %5, %addr
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next12, align 8, !tbaa !79
  %cmp8 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, null
  %7 = or i1 %cmp11, %cmp8
  br i1 %7, label %if.end.loopexit, label %while.body9, !llvm.loop !88

if.end.loopexit:                                  ; preds = %while.body9
  %frombool = zext i1 %cmp11 to i8
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit, %if.then5, %while.cond7.preheader
  %more_waiters.1 = phi i8 [ 0, %if.then5 ], [ 0, %while.cond7.preheader ], [ %frombool, %if.end.loopexit ]
  %tobool13 = icmp ne i8 %more_waiters.1, 0
  %vtable = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable, i64 2
  %8 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn, align 8
  %call14 = tail call i64 %8(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 1, i1 zeroext %tobool13) #16
  %unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 3
  store i64 %call14, i64* %unpark_info, align 8, !tbaa !89
  %mutex.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 0
  %call.i = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i) #16
  %9 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i61 = and i64 %9, 2
  %cmp.i62 = icmp ne i64 %and.i61, 0
  %cmp3.not.i63 = icmp ult i64 %9, 4
  %or.cond.i64 = or i1 %cmp3.not.i63, %cmp.i62
  br i1 %or.cond.i64, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, label %if.then.i65

if.then.i65:                                      ; preds = %if.end
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66: ; preds = %if.then.i65, %if.end
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 1
  %call.i67 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i69 = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i) #16
  %10 = zext i8 %more_waiters.1 to i64
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %next3, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %data.0, %while.body ]
  %data.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %3, %while.body ]
  %retval.1 = phi i64 [ %10, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %retval.0, %while.body ]
  br i1 %cmp2, label %cleanup27, label %while.cond, !llvm.loop !91

while.end22:                                      ; preds = %while.cond
  %vtable23 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn24 = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable23, i64 2
  %11 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn24, align 8
  %call25 = tail call i64 %11(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 0, i1 zeroext false) #16
  %12 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i = and i64 %12, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %12, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup27, label %if.then.i

if.then.i:                                        ; preds = %while.end22
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup27

cleanup27:                                        ; preds = %cleanup, %if.then.i, %while.end22
  %retval.2 = phi i64 [ 0, %while.end22 ], [ 0, %if.then.i ], [ %retval.1, %cleanup ]
  ret i64 %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) local_unnamed_addr #0 {
entry:
  %mul.i = mul i64 %addr, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit: ; preds = %if.then.i, %entry
  ret %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx
}

declare i32 @pthread_mutex_lock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %expected.0 = phi i64 [ %0, %entry ], [ %3, %if.end ]
  %and = and i64 %expected.0, 2
  %tobool.not = icmp ne i64 %and, 0
  %cmp = icmp ult i64 %expected.0, 4
  %or.cond = or i1 %cmp, %tobool.not
  br i1 %or.cond, label %cleanup75, label %if.end

if.end:                                           ; preds = %while.cond
  %or = or i64 %expected.0, 2
  %1 = cmpxchg weak i64* %state, i64 %expected.0, i64 %or acquire monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  br i1 %2, label %while.cond11, label %while.cond

while.cond11:                                     ; preds = %if.end, %cleanup70
  %.pn.pn = phi { i64, i1 } [ %.pn, %cleanup70 ], [ %1, %if.end ]
  %expected.3 = extractvalue { i64, i1 } %.pn.pn, 0
  %and13 = and i64 %expected.3, -4
  %4 = inttoptr i64 %and13 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  %tail14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %4, i64 0, i32 3
  %tail.0143 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %cmp16144 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0143, null
  br i1 %cmp16144, label %while.body17, label %while.end23

while.body17:                                     ; preds = %while.cond11, %do.end
  %current.0145 = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %5, %do.end ], [ %4, %while.cond11 ]
  %next18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next18, align 8, !tbaa !94
  %cmp19.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, null
  br i1 %cmp19.not, label %if.then20, label %do.end

if.then20:                                        ; preds = %while.body17
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.5, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then20, %while.body17
  %prev = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev, align 8, !tbaa !95
  %tail22 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 3
  %tail.0 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail22, align 8, !tbaa !92
  %cmp16 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0, null
  br i1 %cmp16, label %while.body17, label %while.end23, !llvm.loop !96

while.end23:                                      ; preds = %do.end, %while.cond11
  %tail.0.lcssa = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %tail.0143, %while.cond11 ], [ %tail.0, %do.end ]
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %and25 = and i64 %expected.3, 1
  %tobool26.not = icmp eq i64 %and25, 0
  br i1 %tobool26.not, label %if.end35, label %if.then27

if.then27:                                        ; preds = %while.end23
  %and29 = and i64 %expected.3, -3
  %6 = cmpxchg weak i64* %state, i64 %expected.3, i64 %and29 acq_rel monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %cleanup75, label %cleanup70

if.end35:                                         ; preds = %while.end23
  %prev36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 2
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev36, align 8, !tbaa !95
  %cmp37 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, null
  br i1 %cmp37, label %while.body41, label %if.else62

while.body41:                                     ; preds = %if.end35, %if.end47
  %expected.5146 = phi i64 [ %11, %if.end47 ], [ %expected.3, %if.end35 ]
  %and43 = and i64 %expected.5146, 1
  %9 = cmpxchg weak i64* %state, i64 %expected.5146, i64 %and43 acq_rel monotonic
  %10 = extractvalue { i64, i1 } %9, 1
  br i1 %10, label %if.end66, label %if.end47

if.end47:                                         ; preds = %while.body41
  %11 = extractvalue { i64, i1 } %9, 0
  %cmp49 = icmp ult i64 %11, 4
  br i1 %cmp49, label %while.body41, label %cleanup70, !llvm.loop !97

if.else62:                                        ; preds = %if.end35
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %12 = atomicrmw and i64* %state, i64 -3 release
  br label %if.end66

if.end66:                                         ; preds = %while.body41, %if.else62
  %mutex.i103 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 0
  %call.i104 = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i103) #16
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 1
  %call.i101 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i103) #16
  br label %cleanup75

cleanup70:                                        ; preds = %if.end47, %if.then27
  %.pn = phi { i64, i1 } [ %6, %if.then27 ], [ %9, %if.end47 ]
  fence acquire
  br label %while.cond11

cleanup75:                                        ; preds = %while.cond, %if.then27, %if.end66
  ret void
}

declare i32 @pthread_cond_signal(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_unlock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %node = alloca %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", align 8
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i8*
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 2
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 0
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 1
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 1
  %tail.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 3
  %2 = ptrtoint %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i64
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i to <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>*
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %while.cond.outer.backedge, %entry
  %expected.0.ph = phi i64 [ %0, %entry ], [ %expected.0.ph.be, %while.cond.outer.backedge ]
  %spinner.sroa.0.0.ph = phi i32 [ 40, %entry ], [ %spinner.sroa.0.0.ph.be, %while.cond.outer.backedge ]
  %and46 = and i64 %expected.0.ph, 1
  %tobool.not47 = icmp eq i64 %and46, 0
  br i1 %tobool.not47, label %if.then, label %if.end4

if.then:                                          ; preds = %while.cond.outer, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %expected.048 = phi i64 [ %6, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit ], [ %expected.0.ph, %while.cond.outer ]
  %or = or i64 %expected.048, 1
  %4 = cmpxchg weak i64* %state, i64 %expected.048, i64 %or acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup23, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit: ; preds = %if.then
  %6 = extractvalue { i64, i1 } %4, 0
  %and = and i64 %6, 1
  %tobool.not = icmp eq i64 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end4.loopexit

if.end4.loopexit:                                 ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %7 = extractvalue { i64, i1 } %4, 0
  br label %if.end4

if.end4:                                          ; preds = %if.end4.loopexit, %while.cond.outer
  %expected.0.lcssa = phi i64 [ %expected.0.ph, %while.cond.outer ], [ %7, %if.end4.loopexit ]
  %cmp.not = icmp ugt i64 %expected.0.lcssa, 3
  %cmp.i = icmp sgt i32 %spinner.sroa.0.0.ph, 0
  %or.cond = and i1 %cmp.i, %cmp.not
  br i1 %or.cond, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, label %if.end9

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit: ; preds = %if.end4
  %cmp4.i = icmp sgt i32 %spinner.sroa.0.0.ph, 1
  br i1 %cmp4.i, label %if.then7, label %if.end9

if.then7:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit
  %dec.i = add nsw i32 %spinner.sroa.0.0.ph, -1
  call void @halide_thread_yield() #16
  %8 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond.outer.backedge

if.end9:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, %if.end4
  %spinner.sroa.0.2 = phi i32 [ %spinner.sroa.0.0.ph, %if.end4 ], [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit ]
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1) #11
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %call.i.i29 = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #16
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #16
  store <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>* %3, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %and10 = and i64 %expected.0.lcssa, -4
  %cmp11 = icmp eq i64 %and10, 0
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  br label %if.end13

if.else:                                          ; preds = %if.end9
  %9 = inttoptr i64 %and10 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %9, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i, align 8, !tbaa !94
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  %and15 = and i64 %expected.0.lcssa, 3
  %or16 = or i64 %and15, %2
  %10 = cmpxchg weak i64* %state, i64 %expected.0.lcssa, i64 %or16 release monotonic
  %11 = extractvalue { i64, i1 } %10, 1
  br i1 %11, label %if.then19, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit: ; preds = %if.end13
  %12 = extractvalue { i64, i1 } %10, 0
  br label %if.end22

if.then19:                                        ; preds = %if.end13
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %13 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %13, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %if.then19, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %14 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %14, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %if.then19
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %15 = load atomic i64, i64* %state monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit
  %expected.3 = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %12, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %spinner.sroa.0.3 = phi i32 [ 40, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %spinner.sroa.0.2, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %call.i.i = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #16
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1) #11
  br label %while.cond.outer.backedge

while.cond.outer.backedge:                        ; preds = %if.end22, %if.then7
  %expected.0.ph.be = phi i64 [ %8, %if.then7 ], [ %expected.3, %if.end22 ]
  %spinner.sroa.0.0.ph.be = phi i32 [ %dec.i, %if.then7 ], [ %spinner.sroa.0.3, %if.end22 ]
  br label %while.cond.outer

cleanup23:                                        ; preds = %if.then
  ret void
}

declare i32 @pthread_mutex_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_wait(%struct.pthread_mutex_t*, %struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_cond_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %lock_state, align 8, !tbaa !43
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 3
  ret i1 %cmp
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  %0 = select i1 %more_waiters, i64 2, i64 0
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %1 = load i64*, i64** %lock_state, align 8, !tbaa !43
  store atomic i64 %0, i64* %1 release, align 8
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak void @halide_cond_broadcast(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !99
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !101
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5, i64 %0, i64 0) #16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = load atomic i32, i32* %value acquire, align 4
  %sub12 = sub nsw i32 %0, %n
  %cmp113 = icmp sgt i32 %sub12, -1
  br i1 %cmp113, label %land.rhs, label %return

land.rhs:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit
  %sub15 = phi i32 [ %sub, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %sub12, %if.end ]
  %expected.014 = phi i32 [ %3, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %0, %if.end ]
  %1 = cmpxchg weak i32* %value, i32 %expected.014, i32 %sub15 acq_rel monotonic
  %2 = extractvalue { i32, i1 } %1, 1
  br i1 %2, label %return.loopexit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit: ; preds = %land.rhs
  %3 = extractvalue { i32, i1 } %1, 0
  %sub = sub nsw i32 %3, %n
  %cmp1 = icmp sgt i32 %sub, -1
  br i1 %cmp1, label %land.rhs, label %return.loopexit

return.loopexit:                                  ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit, %land.rhs
  %4 = extractvalue { i32, i1 } %1, 1
  br label %return

return:                                           ; preds = %return.loopexit, %if.end, %entry
  %retval.0 = phi i1 [ true, %entry ], [ false, %if.end ], [ %4, %return.loopexit ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_cond_wait(%struct.halide_mutex* %cond, %struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #11
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !102
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  %2 = bitcast %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i to %struct.halide_mutex**
  store %struct.halide_mutex* %mutex, %struct.halide_mutex** %2, align 8, !tbaa !104
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %4 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %3, i64 %4) #16
  %5 = ptrtoint %struct.halide_mutex* %mutex to i64
  %cmp.not.i = icmp eq i64 %call.i, %5
  %6 = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %7 = cmpxchg weak i64* %6, i64 0, i64 1 acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  %9 = load atomic i64, i64* %6 monotonic, align 8
  %10 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i to i8*
  %11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0
  br label %while.cond.outer.i.i.i

while.cond.outer.i.i.i:                           ; preds = %while.cond.outer.i.i.i.backedge, %if.then.i.i
  %expected.0.ph.i.i.i = phi i64 [ %9, %if.then.i.i ], [ %expected.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i.i = phi i32 [ 40, %if.then.i.i ], [ %spinner.sroa.0.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %and55.i.i.i = and i64 %expected.0.ph.i.i.i, 1
  %tobool.not56.i.i.i = icmp eq i64 %and55.i.i.i, 0
  br i1 %tobool.not56.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i

if.then.i.i.i:                                    ; preds = %while.cond.outer.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %expected.057.i.i.i = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i ], [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ]
  %or.i.i.i = or i64 %expected.057.i.i.i, 1
  %13 = cmpxchg weak i64* %6, i64 %expected.057.i.i.i, i64 %or.i.i.i acquire monotonic
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then.i.i.i
  %15 = extractvalue { i64, i1 } %13, 0
  %and.i.i.i = and i64 %15, 1
  %tobool.not.i.i.i = icmp eq i64 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i.loopexit

if.end4.i.i.i.loopexit:                           ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %16 = extractvalue { i64, i1 } %13, 0
  br label %if.end4.i.i.i

if.end4.i.i.i:                                    ; preds = %if.end4.i.i.i.loopexit, %while.cond.outer.i.i.i
  %expected.0.lcssa.i.i.i = phi i64 [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ], [ %16, %if.end4.i.i.i.loopexit ]
  %cmp.i.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, label %if.end8.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i: ; preds = %if.end4.i.i.i
  %cmp4.i.not.i.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i.i, 1
  br i1 %cmp4.i.not.i.i.i, label %if.end8.i.i.i, label %if.then6.i.i.i

if.then6.i.i.i:                                   ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i
  %dec.i.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i.i, -1
  call void @halide_thread_yield() #16
  %17 = load atomic i64, i64* %6 monotonic, align 8
  br label %while.cond.outer.i.i.i.backedge

if.end8.i.i.i:                                    ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, %if.end4.i.i.i
  %spinner.sroa.0.152.i.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i ], [ %spinner.sroa.0.0.ph.i.i.i, %if.end4.i.i.i ]
  %and9.i.i.i = and i64 %expected.0.lcssa.i.i.i, 2
  %cmp.i.i.i = icmp eq i64 %and9.i.i.i, 0
  br i1 %cmp.i.i.i, label %if.then10.i.i.i, label %if.end19.i.i.i

if.then10.i.i.i:                                  ; preds = %if.end8.i.i.i
  %or12.i.i.i = or i64 %expected.0.lcssa.i.i.i, 2
  %18 = cmpxchg weak i64* %6, i64 %expected.0.lcssa.i.i.i, i64 %or12.i.i.i monotonic monotonic
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %if.end19.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then10.i.i.i
  %20 = extractvalue { i64, i1 } %18, 0
  br label %while.cond.outer.i.i.i.backedge

if.end19.i.i.i:                                   ; preds = %if.then10.i.i.i, %if.end8.i.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !41
  store i64* %6, i64** %lock_state2.i.i.i.i, align 8, !tbaa !43
  %call21.i.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %12, i64 %5) #16
  %cmp22.i.i.i = icmp eq i64 %call21.i.i.i, %5
  br i1 %cmp22.i.i.i, label %cleanup30.critedge.i.i.i, label %if.end24.i.i.i

if.end24.i.i.i:                                   ; preds = %if.end19.i.i.i
  %21 = load atomic i64, i64* %6 monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %while.cond.outer.i.i.i.backedge

while.cond.outer.i.i.i.backedge:                  ; preds = %if.end24.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i, %if.then6.i.i.i
  %expected.0.ph.i.i.i.be = phi i64 [ %20, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ %21, %if.end24.i.i.i ], [ %17, %if.then6.i.i.i ]
  %spinner.sroa.0.0.ph.i.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ 40, %if.end24.i.i.i ], [ %dec.i.i.i.i, %if.then6.i.i.i ]
  br label %while.cond.outer.i.i.i

cleanup30.critedge.i.i.i:                         ; preds = %if.end19.i.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.else.i:                                        ; preds = %entry
  %22 = load atomic i64, i64* %6 monotonic, align 8
  %and.i = and i64 %22, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %if.then2.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.then2.i:                                       ; preds = %if.else.i
  call void @halide_print(i8* null, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str.5.6, i64 0, i64 0)) #16
  call void @abort() #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit: ; preds = %if.then.i.i.i, %if.then2.i, %if.else.i, %cleanup30.critedge.i.i.i, %if.then.i
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #4 align 2 {
entry:
  %queue_data = alloca %"struct.Halide::Runtime::Internal::Synchronization::queue_data", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %0) #11
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 0
  %call.i.i = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #16
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 1
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #16
  %sleep_address.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 1
  store i64 0, i64* %sleep_address.i, align 8, !tbaa !105
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  %unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 3
  store i64 0, i64* %unpark_info.i, align 8, !tbaa !89
  %call = call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #17
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call2 = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #16
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %4 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %4, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %4, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup

if.end:                                           ; preds = %entry
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  store i64 %addr, i64* %sleep_address.i, align 8, !tbaa !105
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !109
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, i64 0, i32 2
  %head.sink = select i1 %cmp.not, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head.sink, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %state.i23 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %7 = atomicrmw and i64* %state.i23, i64 -2 release
  %and.i24 = and i64 %7, 2
  %cmp.i25 = icmp ne i64 %and.i24, 0
  %cmp3.not.i26 = icmp ult i64 %7, 4
  %or.cond.i27 = or i1 %cmp3.not.i26, %cmp.i25
  br i1 %or.cond.i27, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, label %if.then.i28

if.then.i28:                                      ; preds = %if.end
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29: ; preds = %if.then.i28, %if.end
  %8 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)***
  %vtable9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*** %8, align 8, !tbaa !41
  %vfn10 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vtable9, i64 1
  %9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vfn10, align 8
  call void %9(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) #16
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %10 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %10, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %11 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %11, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %if.then.i, %if.then
  %unpark_info.i.sink = phi i64* [ %unpark_info.i, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %invalid_unpark_info.i, %if.then ], [ %invalid_unpark_info.i, %if.then.i ]
  %12 = load i64, i64* %unpark_info.i.sink, align 8, !tbaa !110
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  %call.i.i22 = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #16
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %0) #11
  ret i64 %12
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store atomic i64 %3, i64* %0 monotonic, align 8
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp4.not = icmp eq i64 %1, %3
  br i1 %cmp4.not, label %cleanup, label %if.then5

if.then5:                                         ; preds = %if.else
  %invalid_unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 %3, i64* %invalid_unpark_info, align 8, !tbaa !108
  br label %cleanup

cleanup:                                          ; preds = %if.then5, %if.else, %if.then
  %retval.0 = phi i1 [ false, %if.then5 ], [ true, %if.else ], [ true, %if.then ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this) unnamed_addr #4 comdat align 2 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %0 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0, i64 0, i32 0
  %1 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  br i1 %2, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %3 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %5 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %8 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0 to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %7, i64 %8) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr_from, i64 %addr_to, i64 %unpark_info) local_unnamed_addr #4 align 2 {
entry:
  %buckets = alloca %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  call void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %buckets, i64 %addr_from, i64 %addr_to) #17
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #16
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  br label %cleanup

if.end:                                           ; preds = %entry
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %cmp.not92 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  br i1 %cmp.not92, label %if.end38, label %while.body

while.body:                                       ; preds = %if.end, %if.end22
  %wakeup.098 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end22 ], [ null, %if.end ]
  %requeue_tail.097 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.2, %if.end22 ], [ null, %if.end ]
  %requeue.096 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.3, %if.end22 ], [ null, %if.end ]
  %data.095 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %7, %if.end22 ], [ %5, %if.end ]
  %prev.094 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.1, %if.end22 ], [ null, %if.end ]
  %data_location.093 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.1, %if.end22 ], [ %head, %if.end ]
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 1
  %6 = load atomic i64, i64* %sleep_address monotonic, align 8
  %next2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 2
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next2, align 8, !tbaa !79
  %cmp3 = icmp eq i64 %6, %addr_from
  br i1 %cmp3, label %if.then4, label %if.end22

if.then4:                                         ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.093, align 8, !tbaa !10
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %8, i64 0, i32 2
  %9 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp6 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %9, %data.095
  br i1 %cmp6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.then4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.094, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.then4
  %10 = load i8, i8* %1, align 8, !tbaa !106, !range !17
  %tobool = icmp ne i8 %10, 0
  %cmp11 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.098, null
  %or.cond = and i1 %cmp11, %tobool
  br i1 %or.cond, label %if.end22, label %if.else

if.else:                                          ; preds = %if.end10
  %cmp13 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.096, null
  br i1 %cmp13, label %if.end17, label %if.else15

if.else15:                                        ; preds = %if.else
  %next16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.097, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next16, align 8, !tbaa !79
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.else
  %requeue.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.else15 ], [ %data.095, %if.else ]
  store atomic i64 %addr_to, i64* %sleep_address monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.end17, %if.end10, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.093, %if.end10 ], [ %data_location.093, %if.end17 ], [ %next2, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.094, %if.end10 ], [ %prev.094, %if.end17 ], [ %data.095, %while.body ]
  %requeue.3 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.end10 ], [ %requeue.1, %if.end17 ], [ %requeue.096, %while.body ]
  %requeue_tail.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.097, %if.end10 ], [ %data.095, %if.end17 ], [ %requeue_tail.097, %while.body ]
  %wakeup.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.095, %if.end10 ], [ %wakeup.098, %if.end17 ], [ %wakeup.098, %while.body ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !113

while.end:                                        ; preds = %if.end22
  %cmp23.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, null
  br i1 %cmp23.not, label %if.end38, label %if.then24

if.then24:                                        ; preds = %while.end
  %next25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next25, align 8, !tbaa !79
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %11 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %head26 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 1
  %12 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head26, align 8, !tbaa !109
  %cmp27 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %12, null
  br i1 %cmp27, label %if.end35, label %if.else31

if.else31:                                        ; preds = %if.then24
  %tail33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  %13 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail33, align 8, !tbaa !85
  %next34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %13, i64 0, i32 2
  br label %if.end35

if.end35:                                         ; preds = %if.else31, %if.then24
  %next34.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %next34, %if.else31 ], [ %head26, %if.then24 ]
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next34.sink, align 8, !tbaa !10
  %tail37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail37, align 8, !tbaa !85
  br label %if.end38

if.end38:                                         ; preds = %if.end35, %while.end, %if.end
  %cmp23106 = phi i1 [ true, %if.end35 ], [ false, %while.end ], [ false, %if.end ]
  %wakeup.0.lcssa105 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end35 ], [ %wakeup.2, %while.end ], [ null, %if.end ]
  %cmp39 = icmp ne %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, null
  %14 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)***
  %vtable41 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*** %14, align 8, !tbaa !41
  %vfn42 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vtable41, i64 3
  %15 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vfn42, align 8
  call void %15(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %cmp39, i1 zeroext %cmp23106) #16
  br i1 %cmp39, label %if.then44, label %if.else48

if.then44:                                        ; preds = %if.end38
  %unpark_info45 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 3
  store i64 %unpark_info, i64* %unpark_info45, align 8, !tbaa !89
  %mutex.i89 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 0
  %call.i90 = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i89) #16
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 1
  %call.i88 = call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i89) #16
  br label %if.end49

if.else48:                                        ; preds = %if.end38
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.then44
  %16 = load i8, i8* %1, align 8
  %17 = and i8 %16, 1
  %tobool52 = icmp ne i8 %17, 0
  %18 = and i1 %cmp39, %tobool52
  %conv = zext i1 %18 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then
  %retval.0 = phi i32 [ %conv, %if.end49 ], [ 0, %if.then ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* noalias sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %agg.result, i64 %addr_from, i64 %addr_to) local_unnamed_addr #4 {
entry:
  %mul.i = mul i64 %addr_from, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %mul.i37 = mul i64 %addr_to, -7046029254386353131
  %shr.i38 = lshr i64 %mul.i37, 54
  %cmp = icmp eq i64 %shr.i, %shr.i38
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i42, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %cleanup, label %if.then.i43

if.then.i43:                                      ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp2 = icmp ult i64 %shr.i, %shr.i38
  br i1 %cmp2, label %if.then3, label %if.else9

if.then3:                                         ; preds = %if.else
  %arrayidx5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %state.i52 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0, i32 0
  %2 = cmpxchg weak i64* %state.i52, i64 0, i64 1 acquire monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, label %if.then.i53

if.then.i53:                                      ; preds = %if.then3
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54: ; preds = %if.then.i53, %if.then3
  %state.i49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0, i32 0
  %4 = cmpxchg weak i64* %state.i49, i64 0, i64 1 acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup, label %if.then.i50

if.then.i50:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #16
  br label %cleanup

if.else9:                                         ; preds = %if.else
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %arrayidx13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0, i32 0
  %6 = cmpxchg weak i64* %state.i39, i64 0, i64 1 acquire monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, label %if.then.i40

if.then.i40:                                      ; preds = %if.else9
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41: ; preds = %if.then.i40, %if.else9
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0, i32 0
  %8 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41
  %mutex15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex15) #16
  br label %cleanup

cleanup:                                          ; preds = %if.then.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, %if.then.i50, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, %if.then.i43, %if.then
  %arrayidx13.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx5, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx5, %if.then.i50 ], [ %arrayidx13, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx13, %if.then.i ]
  %arrayidx11.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx6, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx6, %if.then.i50 ], [ %arrayidx11, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx11, %if.then.i ]
  %from2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from2.i, align 8, !tbaa !10
  %to3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to3.i, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) local_unnamed_addr #0 {
entry:
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %1 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %2 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %2, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %2, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end15, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %if.end15

if.else:                                          ; preds = %entry
  %cmp4 = icmp ugt %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %state.i25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %3 = atomicrmw and i64* %state.i25, i64 -2 release
  %and.i26 = and i64 %3, 2
  %cmp.i27 = icmp ne i64 %and.i26, 0
  %cmp3.not.i28 = icmp ult i64 %3, 4
  %or.cond.i29 = or i1 %cmp3.not.i28, %cmp.i27
  br i1 %or.cond.i29, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, label %if.then.i30

if.then.i30:                                      ; preds = %if.then5
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31: ; preds = %if.then.i30, %if.then5
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %state.i32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0, i32 0
  %5 = atomicrmw and i64* %state.i32, i64 -2 release
  %and.i33 = and i64 %5, 2
  %cmp.i34 = icmp ne i64 %and.i33, 0
  %cmp3.not.i35 = icmp ult i64 %5, 4
  %or.cond.i36 = or i1 %cmp3.not.i35, %cmp.i34
  br i1 %or.cond.i36, label %if.end15, label %if.then.i37

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31
  %mutex9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex9) #16
  br label %if.end15

if.else10:                                        ; preds = %if.else
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0, i32 0
  %6 = atomicrmw and i64* %state.i39, i64 -2 release
  %and.i40 = and i64 %6, 2
  %cmp.i41 = icmp ne i64 %and.i40, 0
  %cmp3.not.i42 = icmp ult i64 %6, 4
  %or.cond.i43 = or i1 %cmp3.not.i42, %cmp.i41
  br i1 %or.cond.i43, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, label %if.then.i44

if.then.i44:                                      ; preds = %if.else10
  %mutex12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex12) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45: ; preds = %if.then.i44, %if.else10
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %state.i46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0, i32 0
  %8 = atomicrmw and i64* %state.i46, i64 -2 release
  %and.i47 = and i64 %8, 2
  %cmp.i48 = icmp ne i64 %and.i47, 0
  %cmp3.not.i49 = icmp ult i64 %8, 4
  %or.cond.i50 = or i1 %cmp3.not.i49, %cmp.i48
  br i1 %or.cond.i50, label %if.end15, label %if.then.i51

if.then.i51:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #16
  br label %if.end15

if.end15:                                         ; preds = %if.then.i51, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, %if.then.i37, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, %if.then.i, %if.then
  ret void
}

; Function Attrs: nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #4 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !99
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  %cmp.not = icmp eq i64 %1, %3
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  store atomic i64 0, i64* %0 monotonic, align 8
  %4 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %4, i64 0, i32 0
  %5 = load atomic i64, i64* %state.i monotonic, align 8
  %and11.i = and i64 %5, 1
  %tobool.not12.i = icmp eq i64 %and11.i, 0
  br i1 %tobool.not12.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i
  %val.013.i = phi i64 [ %8, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ %5, %if.end ]
  %or.i = or i64 %val.013.i, 2
  %6 = cmpxchg weak i64* %state.i, i64 %val.013.i, i64 %or.i monotonic monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i: ; preds = %if.end.i
  %8 = extractvalue { i64, i1 } %6, 0
  %and.i = and i64 %8, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit: ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i, %if.end.i, %if.end
  %tobool.not.lcssa.i = phi i8 [ 1, %if.end ], [ 1, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ 0, %if.end.i ]
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  store i8 %tobool.not.lcssa.i, i8* %unpark_one, align 8, !tbaa !106
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, %entry
  ret i1 %cmp.not
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  %0 = load i8, i8* %unpark_one, align 8, !tbaa !106, !range !17
  %tobool.not = icmp ne i8 %0, 0
  %1 = and i1 %tobool.not, %some_requeued
  br i1 %1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, i64 0, i32 0
  %3 = atomicrmw or i64* %state.i, i64 2 monotonic
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() local_unnamed_addr #0 {
entry:
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.end, label %cond.true

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #16
  %tobool2.not = icmp eq i8* %call1, null
  br i1 %tobool2.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end, %entry
  %threads_str.010 = phi i8* [ %call1, %if.end ], [ %call, %entry ]
  %call3 = tail call i32 @atoi(i8* nonnull %threads_str.010) #16
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = tail call i32 @halide_host_cpu_count() #16
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal13worker_threadEPv(i8* %arg) #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %0 = bitcast i8* %arg to %"struct.Halide::Runtime::Internal::work"*
  tail call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %0) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @malloc(i64 24) #16
  %f1 = bitcast i8* %call to void (i8*)**
  store void (i8*)* %f, void (i8*)** %f1, align 8, !tbaa !115
  %closure2 = getelementptr inbounds i8, i8* %call, i64 8
  %0 = bitcast i8* %closure2 to i8**
  store i8* %closure, i8** %0, align 8, !tbaa !117
  %handle = getelementptr inbounds i8, i8* %call, i64 16
  %1 = bitcast i8* %handle to i64*
  store i64 0, i64* %1, align 8, !tbaa !118
  %call4 = tail call i32 @pthread_create(i64* nonnull %1, i8* null, i8* (i8*)* nonnull @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv, i8* %call) #16
  %2 = bitcast i8* %call to %struct.halide_thread*
  ret %struct.halide_thread* %2
}

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv(i8* %arg) #0 {
entry:
  %f = bitcast i8* %arg to void (i8*)**
  %0 = load void (i8*)*, void (i8*)** %f, align 8, !tbaa !115
  %closure = getelementptr inbounds i8, i8* %arg, i64 8
  %1 = bitcast i8* %closure to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !117
  tail call void %0(i8* %2) #16
  ret i8* null
}

declare i32 @pthread_create(i64*, i8*, i8* (i8*)*, i8*) local_unnamed_addr #1

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  %conv = sext i32 %num_tasks to i64
  %0 = alloca %"struct.Halide::Runtime::Internal::work", i64 %conv, align 8
  %cmp76 = icmp sgt i32 %num_tasks, 0
  br i1 %cmp76, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %num_tasks.addr.0.lcssa = phi i32 [ %num_tasks, %entry ], [ %num_tasks.addr.1, %for.inc ]
  %cmp17 = icmp eq i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp17, label %cleanup, label %if.end19

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv82 = phi i64 [ %indvars.iv.next83, %for.inc ], [ 0, %entry ]
  %num_tasks.addr.078 = phi i32 [ %num_tasks.addr.1, %for.inc ], [ %num_tasks, %entry ]
  %tasks.addr.077 = phi %struct.halide_parallel_task_t* [ %tasks.addr.1, %for.inc ], [ %tasks, %entry ]
  %extent = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 0, i32 6
  %1 = load i32, i32* %extent, align 8, !tbaa !119
  %cmp1 = icmp slt i32 %1, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %dec = add nsw i32 %num_tasks.addr.078, -1
  br label %for.inc

if.end:                                           ; preds = %for.body
  %incdec.ptr = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 1
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82
  %2 = bitcast %"struct.Halide::Runtime::Internal::work"* %arrayidx to i8*
  %3 = bitcast %struct.halide_parallel_task_t* %tasks.addr.077 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %2, i8* nonnull align 8 dereferenceable(56) %3, i64 56, i1 false), !tbaa.struct !120
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 1
  store i32 (i8*, i32, i8*)* null, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 7
  store i8* %user_context, i8** %user_context6, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 5
  %4 = bitcast %"struct.Halide::Runtime::Internal::work"** %parent_job to i8**
  store i8* %task_parent, i8** %4, align 8, !tbaa !40
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %tasks.addr.1 = phi %struct.halide_parallel_task_t* [ %tasks.addr.077, %if.then ], [ %incdec.ptr, %if.end ]
  %num_tasks.addr.1 = phi i32 [ %dec, %if.then ], [ %num_tasks.addr.078, %if.end ]
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %5 = sext i32 %num_tasks.addr.1 to i64
  %cmp = icmp slt i64 %indvars.iv.next83, %5
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !121

if.end19:                                         ; preds = %for.cond.cleanup
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %6 = bitcast i8* %task_parent to %"struct.Halide::Runtime::Internal::work"*
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_tasks.addr.0.lcssa, %"struct.Halide::Runtime::Internal::work"* nonnull %0, %"struct.Halide::Runtime::Internal::work"* %6) #17
  %cmp2373 = icmp sgt i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp2373, label %for.body25.preheader, label %for.cond.cleanup24

for.body25.preheader:                             ; preds = %if.end19
  %wide.trip.count = zext i32 %num_tasks.addr.0.lcssa to i64
  br label %for.body25

for.cond.cleanup24:                               ; preds = %for.body25, %if.end19
  %exit_status20.0.lcssa = phi i32 [ 0, %if.end19 ], [ %spec.select, %for.body25 ]
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %cleanup

for.body25:                                       ; preds = %for.body25, %for.body25.preheader
  %indvars.iv = phi i64 [ 0, %for.body25.preheader ], [ %indvars.iv.next, %for.body25 ]
  %exit_status20.074 = phi i32 [ 0, %for.body25.preheader ], [ %spec.select, %for.body25 ]
  %add.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %add.ptr) #17
  %exit_status28 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 9
  %7 = load i32, i32* %exit_status28, align 4, !tbaa !34
  %cmp29.not = icmp eq i32 %7, 0
  %spec.select = select i1 %cmp29.not, i32 %exit_status20.074, i32 %7
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup24, label %for.body25, !llvm.loop !122

cleanup:                                          ; preds = %for.cond.cleanup24, %for.cond.cleanup
  %retval.0 = phi i32 [ %exit_status20.0.lcssa, %for.cond.cleanup24 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #2 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  store atomic i32 %n, i32* %value release, align 4
  ret i32 %n
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = atomicrmw add i32* %value, i32 %n acq_rel
  %cmp = icmp eq i32 %0, 0
  %cmp1 = icmp ne i32 %n, 0
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %add = add nsw i32 %0, %n
  ret i32 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_pool_cleanup() #0 {
entry:
  tail call void @halide_shutdown_thread_pool() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp4 = icmp sgt i32 %1, 0
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %call.i = tail call i8* @memset(i8* nonnull bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i32 0, i64 2116) #16
  br label %if.end

for.body:                                         ; preds = %if.then, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %indvars.iv
  %2 = load %struct.halide_thread*, %struct.halide_thread** %arrayidx, align 8, !tbaa !10
  tail call void @halide_join_thread(%struct.halide_thread* %2) #17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %3 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %4 = sext i32 %3 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %4
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !123

if.end:                                           ; preds = %for.cond.cleanup, %entry
  ret void
}

declare i8* @memset(i8*, i32, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  %ret = alloca i8*, align 8
  %0 = bitcast %struct.halide_thread* %thread_arg to %"struct.Halide::Runtime::Internal::spawned_thread"*
  %1 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #11
  store i8* null, i8** %ret, align 8, !tbaa !10
  %handle = getelementptr inbounds %"struct.Halide::Runtime::Internal::spawned_thread", %"struct.Halide::Runtime::Internal::spawned_thread"* %0, i64 0, i32 2
  %2 = load i64, i64* %handle, align 8, !tbaa !118
  %call = call i32 @pthread_join(i64 %2, i8** nonnull %ret) #16
  %3 = bitcast %struct.halide_thread* %thread_arg to i8*
  call void @free(i8* %3) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #11
  ret void
}

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #1

; Function Attrs: nounwind
define weak void @halide_cond_signal(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !124
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !126
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5) #16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  ret i1 true
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !124
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_malloc(i8* null, i64 8) #16
  %0 = bitcast i8* %call to %struct.halide_mutex_array*
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %conv = sext i32 %sz to i64
  %mul = shl nsw i64 %conv, 3
  %call1 = tail call i8* @halide_malloc(i8* null, i64 %mul) #16
  %1 = bitcast i8* %call to i8**
  store i8* %call1, i8** %1, align 8, !tbaa !127
  %cmp4 = icmp eq i8* %call1, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  tail call void @halide_free(i8* null, i8* nonnull %call) #16
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %call10 = tail call i8* @memset(i8* nonnull %call1, i32 0, i64 %mul) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then5, %entry
  %retval.0 = phi %struct.halide_mutex_array* [ null, %if.then5 ], [ %0, %if.end6 ], [ null, %entry ]
  ret %struct.halide_mutex_array* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %array to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !127
  tail call void @halide_free(i8* %user_context, i8* %1) #16
  tail call void @halide_free(i8* %user_context, i8* %array) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_lock(%struct.halide_mutex* %arrayidx) #17
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %arrayidx) #17
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  br i1 %cmp, label %if.end3.thread, label %if.end

if.end3.thread:                                   ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %0 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  br label %if.else.i

if.end:                                           ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %cmp1 = icmp eq i32 %n, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #17
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %n.addr.0 = phi i32 [ %call, %if.then2 ], [ %n, %if.end ]
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %cmp.i = icmp sgt i32 %n.addr.0, 256
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit, label %if.else.i

if.else.i:                                        ; preds = %if.end3, %if.end3.thread
  %2 = phi i32 [ %0, %if.end3.thread ], [ %1, %if.end3 ]
  %n.addr.012 = phi i32 [ %n, %if.end3.thread ], [ %n.addr.0, %if.end3 ]
  %3 = icmp sgt i32 %n.addr.012, 1
  %spec.select.i = select i1 %3, i32 %n.addr.012, i32 1
  br label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit

_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit: ; preds = %if.else.i, %if.end3
  %4 = phi i32 [ %2, %if.else.i ], [ %1, %if.end3 ]
  %call48 = phi i32 [ %spec.select.i, %if.else.i ], [ 256, %if.end3 ]
  store i32 %call48, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  ret i32 %4
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_set_custom_do_loop_task(i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_custom_parallel_runtime(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release) local_unnamed_addr #2 {
entry:
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  store i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i1 %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_symbol(i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* null, i8* %name) #16
  ret i8* %call
}

declare i8* @dlsym(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_load_library(i8* %name) #0 {
entry:
  %call = tail call i8* @dlopen(i8* %name, i32 1) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call3 = tail call i8* @dlerror() #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i8* %call
}

declare i8* @dlopen(i8*, i32) local_unnamed_addr #1

declare i8* @dlerror() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_library_symbol(i8* %lib, i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* %lib, i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_get_symbol(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_load_library(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i8*)* @halide_set_custom_get_library_symbol(i8* (i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  store i8* (i8*, i8*)* %f, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  ret i8* (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_symbol(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_load_library(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_library_symbol(i8* %lib, i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %lib, i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !129

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0)) #16
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #16
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

; Function Attrs: nounwind
define weak i32 @halide_default_trace(i8* %user_context, %struct.halide_trace_event_t* %e) #4 {
entry:
  %0 = atomicrmw add i32* @_ZZ20halide_default_traceE3ids, i32 1 seq_cst
  %call = tail call i32 @halide_get_trace_file(i8* %user_context) #17
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4
  %lanes = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %1 = load i16, i16* %lanes, align 2, !tbaa !130
  %conv = zext i16 %1 to i32
  %bits.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %2 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %2 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %mul = mul nuw nsw i32 %div.i, %conv
  %dimensions = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %3 = load i32, i32* %dimensions, align 8, !tbaa !137
  %mul3 = shl i32 %3, 2
  %func = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !138
  %call4 = tail call i64 @strlen(i8* %4) #16
  %5 = trunc i64 %call4 to i32
  %conv5 = add i32 %5, 1
  %trace_tag = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %6 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool.not = icmp eq i8* %6, null
  br i1 %tobool.not, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.then
  %call7 = tail call i64 @strlen(i8* nonnull %6) #16
  %7 = trunc i64 %call7 to i32
  %phi.cast = add i32 %7, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.then
  %cond = phi i32 [ %phi.cast, %cond.true ], [ 1, %if.then ]
  %add11 = add i32 %mul3, 31
  %add12 = add i32 %add11, %mul
  %add13 = add i32 %add12, %conv5
  %add14 = add i32 %add13, %cond
  %and = and i32 %add14, -4
  %8 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 0, i32 0
  %cmp.i.i = icmp ult i32 %and, 1048577
  %cursor.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 1
  %overage.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 2
  %arraydecay.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 0
  br i1 %cmp.i.i, label %while.body.i.i.us.i, label %while.body.i.i.i

while.body.i.i.us.i:                              ; preds = %cond.end, %while.body.i.i.us.i.backedge
  %9 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.us.i = and i32 %9, 1073741823
  %add.i.i.us.i = add nuw nsw i32 %and.i.i.us.i, 1
  %10 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.us.i, i32 %add.i.i.us.i seq_cst seq_cst
  %11 = extractvalue { i32, i1 } %10, 1
  br i1 %11, label %do.end.i.us.i, label %while.body.i.i.us.i.backedge

do.end.i.us.i:                                    ; preds = %while.body.i.i.us.i
  %12 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.us.i = add i32 %12, %and
  %cmp2.i.us.i = icmp ugt i32 %add.i.us.i, 1048576
  br i1 %cmp2.i.us.i, label %while.body.us.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.us.i:                                  ; preds = %do.end.i.us.i
  %13 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %14 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.us.i

while.body.i.i5.us.i:                             ; preds = %while.body.i.i5.us.i, %while.body.us.i
  %15 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %16 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i, label %while.body.i.i5.us.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i: ; preds = %while.body.i.i5.us.i
  %18 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.us.i = icmp eq i32 %18, 0
  br i1 %tobool.not.i.us.i, label %do.end.critedge.i.us.i, label %if.then.i9.us.i

if.then.i9.us.i:                                  ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %19 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.us.i = sub i32 %18, %19
  store i32 %sub.i.us.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.us.i = zext i32 %sub.i.us.i to i64
  %call.i.us.i = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.us.i) #16
  %conv5.i.us.i = trunc i64 %call.i.us.i to i32
  %cmp.i8.us.i = icmp eq i32 %sub.i.us.i, %conv5.i.us.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %20 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.us.i, label %while.body.i.i.us.i.backedge, label %if.then10.i.us.i

if.then10.i.us.i:                                 ; preds = %if.then.i9.us.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %while.body.i.i.us.i.backedge

do.end.critedge.i.us.i:                           ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %21 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.us.i.backedge

while.body.i.i.us.i.backedge:                     ; preds = %do.end.critedge.i.us.i, %if.then10.i.us.i, %if.then.i9.us.i, %while.body.i.i.us.i
  br label %while.body.i.i.us.i, !llvm.loop !145

while.body.i.i.i:                                 ; preds = %cond.end, %while.body.i.i.i.backedge
  %22 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.i = and i32 %22, 1073741823
  %add.i.i.i = add nuw nsw i32 %and.i.i.i, 1
  %23 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.i, i32 %add.i.i.i seq_cst seq_cst
  %24 = extractvalue { i32, i1 } %23, 1
  br i1 %24, label %if.then.i.i, label %while.body.i.i.i.backedge

if.then.i.i:                                      ; preds = %while.body.i.i.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.31, i64 0, i64 0)) #16
  tail call void @abort() #16
  %25 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.i400 = add i32 %25, %and
  %cmp2.i.i = icmp ugt i32 %add.i.i400, 1048576
  br i1 %cmp2.i.i, label %while.body.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.i:                                     ; preds = %if.then.i.i
  %26 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %27 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.i

while.body.i.i5.i:                                ; preds = %while.body.i.i5.i, %while.body.i
  %28 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %29 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %30 = extractvalue { i32, i1 } %29, 1
  br i1 %30, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i, label %while.body.i.i5.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i: ; preds = %while.body.i.i5.i
  %31 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.i = icmp eq i32 %31, 0
  br i1 %tobool.not.i.i, label %do.end.critedge.i.i, label %if.then.i9.i

if.then.i9.i:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %32 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.i = sub i32 %31, %32
  store i32 %sub.i.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.i = zext i32 %sub.i.i to i64
  %call.i.i401 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.i) #16
  %conv5.i.i = trunc i64 %call.i.i401 to i32
  %cmp.i8.i = icmp eq i32 %sub.i.i, %conv5.i.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %33 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.i, label %while.body.i.i.i.backedge, label %if.then10.i.i

if.then10.i.i:                                    ; preds = %if.then.i9.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %while.body.i.i.i.backedge

do.end.critedge.i.i:                              ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %34 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.i.backedge

while.body.i.i.i.backedge:                        ; preds = %do.end.critedge.i.i, %if.then10.i.i, %if.then.i9.i, %while.body.i.i.i
  br label %while.body.i.i.i, !llvm.loop !145

_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit: ; preds = %if.then.i.i, %do.end.i.us.i
  %.lcssa.i = phi i32 [ %12, %do.end.i.us.i ], [ %25, %if.then.i.i ]
  %idx.ext.i.i = zext i32 %.lcssa.i to i64
  %add.ptr.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 %idx.ext.i.i
  %cmp16 = icmp ugt i32 %and, 4096
  br i1 %cmp16, label %if.then17, label %if.end

if.then17:                                        ; preds = %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i404 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i404, label %if.then.i415, label %if.else.i421

if.then.i415:                                     ; preds = %if.then17
  %conv.i4071 = zext i32 %and to i64
  %call.i4082 = tail call i8* @halide_uint64_to_string(i8* null, i8* null, i64 %conv.i4071, i32 1) #16
  %call.i41117 = tail call i8* @halide_string_to_string(i8* %call.i4082, i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

if.else.i421:                                     ; preds = %if.then17
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %conv.i4073 = zext i32 %and to i64
  %call.i4084 = tail call i8* @halide_uint64_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i64 %conv.i4073, i32 1) #16
  %call.i411 = tail call i8* @halide_string_to_string(i8* %call.i4084, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i416 = ptrtoint i8* %call.i411 to i64
  %sub.ptr.rhs.cast.i.i417 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i418 = sub i64 1, %sub.ptr.rhs.cast.i.i417
  %add.i.i419 = add i64 %sub.ptr.sub.i.i418, %sub.ptr.lhs.cast.i.i416
  %call.i.i420 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* null, i8* nonnull %call.i, i64 %add.i.i419) #16
  tail call void @halide_print(i8* null, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit: ; preds = %if.else.i421, %if.then.i415
  tail call void @free(i8* %call.i) #16
  br label %if.end

if.end:                                           ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit, %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %size = bitcast i8* %add.ptr.i.i to i32*
  store i32 %and, i32* %size, align 4, !tbaa !146
  %id = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 4
  %35 = bitcast i8* %id to i32*
  store i32 %0, i32* %35, align 4, !tbaa !148
  %36 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 8
  %37 = bitcast %struct.halide_type_t* %type to i32*
  %38 = bitcast i8* %36 to i32*
  %39 = load i32, i32* %37, align 8
  store i32 %39, i32* %38, align 4
  %event = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %event22 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 12
  %40 = bitcast i32* %event to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4, !tbaa !14
  %dimensions26 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 24
  %42 = bitcast i8* %dimensions26 to i32*
  %43 = bitcast i8* %event22 to <4 x i32>*
  store <4 x i32> %41, <4 x i32>* %43, align 4, !tbaa !14
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %44 = load i32*, i32** %coordinates, align 8, !tbaa !149
  %tobool27.not = icmp eq i32* %44, null
  br i1 %tobool27.not, label %if.end33, label %if.then28

if.then28:                                        ; preds = %if.end
  %45 = bitcast i32* %44 to i8*
  %46 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %conv31 = zext i32 %mul3 to i64
  %call32 = tail call i8* @memcpy(i8* nonnull %46, i8* nonnull %45, i64 %conv31) #16
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.end
  %value = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %47 = load i8*, i8** %value, align 8, !tbaa !150
  %tobool34.not = icmp eq i8* %47, null
  br i1 %tobool34.not, label %if.end40, label %if.then35

if.then35:                                        ; preds = %if.end33
  %48 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i = sext i32 %50 to i64
  %add.ptr.i424 = getelementptr inbounds i32, i32* %49, i64 %idx.ext.i
  %51 = bitcast i32* %add.ptr.i424 to i8*
  %conv38 = zext i32 %mul to i64
  %call39 = tail call i8* @memcpy(i8* nonnull %51, i8* nonnull %47, i64 %conv38) #16
  br label %if.end40

if.end40:                                         ; preds = %if.end33, %if.then35
  %52 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i425 = sext i32 %54 to i64
  %add.ptr.i.i426 = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i425
  %55 = bitcast i32* %add.ptr.i.i426 to i8*
  %lanes.i = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 10
  %56 = bitcast i8* %lanes.i to i16*
  %57 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i427 = zext i16 %57 to i32
  %58 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 9
  %59 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i428 = zext i8 %59 to i32
  %add.i.i429 = add nuw nsw i32 %conv.i.i428, 7
  %div.i.i = lshr i32 %add.i.i429, 3
  %mul.i = mul nuw nsw i32 %div.i.i, %conv.i427
  %idx.ext.i430 = zext i32 %mul.i to i64
  %add.ptr.i431 = getelementptr inbounds i8, i8* %55, i64 %idx.ext.i430
  %60 = load i8*, i8** %func, align 8, !tbaa !138
  %conv43 = zext i32 %conv5 to i64
  %call44 = tail call i8* @memcpy(i8* nonnull %add.ptr.i431, i8* %60, i64 %conv43) #16
  %61 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i.i = sext i32 %61 to i64
  %add.ptr.i.i.i = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i.i
  %62 = bitcast i32* %add.ptr.i.i.i to i8*
  %63 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i.i432 = zext i16 %63 to i32
  %64 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i.i = zext i8 %64 to i32
  %add.i.i.i433 = add nuw nsw i32 %conv.i.i.i, 7
  %div.i.i.i = lshr i32 %add.i.i.i433, 3
  %mul.i.i = mul nuw nsw i32 %div.i.i.i, %conv.i.i432
  %idx.ext.i.i434 = zext i32 %mul.i.i to i64
  %add.ptr.i.i435 = getelementptr inbounds i8, i8* %62, i64 %idx.ext.i.i434
  br label %while.cond.i437

while.cond.i437:                                  ; preds = %while.cond.i437, %if.end40
  %f.0.i = phi i8* [ %add.ptr.i.i435, %if.end40 ], [ %incdec.ptr.i, %while.cond.i437 ]
  %incdec.ptr.i = getelementptr inbounds i8, i8* %f.0.i, i64 1
  %65 = load i8, i8* %f.0.i, align 1, !tbaa !14
  %tobool.not.i436 = icmp eq i8 %65, 0
  br i1 %tobool.not.i436, label %_ZN21halide_trace_packet_t9trace_tagEv.exit, label %while.cond.i437, !llvm.loop !153

_ZN21halide_trace_packet_t9trace_tagEv.exit:      ; preds = %while.cond.i437
  %66 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool47.not = icmp eq i8* %66, null
  %spec.select = select i1 %tobool47.not, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.10, i64 0, i64 0), i8* %66
  %conv53 = zext i32 %cond to i64
  %call54 = tail call i8* @memcpy(i8* nonnull %incdec.ptr.i, i8* %spec.select, i64 %conv53) #16
  %67 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  fence seq_cst
  %lock.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %67, i64 0, i32 0, i32 0
  %68 = atomicrmw sub i32* %lock.i.i, i32 1 seq_cst
  %69 = load i32, i32* %event, align 4, !tbaa !154
  %cmp56 = icmp eq i32 %69, 9
  br i1 %cmp56, label %if.then57, label %if.end277

if.then57:                                        ; preds = %_ZN21halide_trace_packet_t9trace_tagEv.exit
  %70 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i438 = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 0, i32 0
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %if.then57
  %71 = atomicrmw or i32* %lock.i.i438, i32 1073741824 seq_cst
  %72 = cmpxchg i32* %lock.i.i438, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %73 = extractvalue { i32, i1 } %72, 1
  br i1 %73, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i, label %while.body.i.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i: ; preds = %while.body.i.i
  %cursor.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 1
  %74 = load i32, i32* %cursor.i, align 4, !tbaa !142
  %tobool.not.i439 = icmp eq i32 %74, 0
  br i1 %tobool.not.i439, label %do.end.critedge.i, label %if.then.i442

if.then.i442:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %overage.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 2
  %75 = load i32, i32* %overage.i, align 4, !tbaa !144
  %sub.i = sub i32 %74, %75
  store i32 %sub.i, i32* %cursor.i, align 4, !tbaa !142
  %arraydecay.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 3, i64 0
  %conv.i440 = zext i32 %sub.i to i64
  %call.i441 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i, i64 %conv.i440) #16
  %conv5.i = trunc i64 %call.i441 to i32
  %cmp.i = icmp eq i32 %sub.i, %conv5.i
  store i32 0, i32* %cursor.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i, align 4, !tbaa !144
  %76 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br i1 %cmp.i, label %if.end277, label %if.then10.i

if.then10.i:                                      ; preds = %if.then.i442
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %if.end277

do.end.critedge.i:                                ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %77 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br label %if.end277

if.else:                                          ; preds = %entry
  %call.i445 = tail call i8* @malloc(i64 4096) #16
  %tobool.not.i448 = icmp eq i8* %call.i445, null
  br i1 %tobool.not.i448, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit, label %if.then6.i451

if.then6.i451:                                    ; preds = %if.else
  %add.ptr.i449 = getelementptr inbounds i8, i8* %call.i445, i64 4095
  store i8 0, i8* %add.ptr.i449, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit: ; preds = %if.then6.i451, %if.else
  %ss.sroa.74.0 = phi i8* [ %add.ptr.i449, %if.then6.i451 ], [ null, %if.else ]
  %bits = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %78 = load i8, i8* %bits, align 1, !tbaa !155
  %conv60 = zext i8 %78 to i32
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit
  %print_bits.0 = phi i32 [ 8, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit ], [ %shl, %while.cond ]
  %cmp61 = icmp slt i32 %print_bits.0, %conv60
  %shl = shl i32 %print_bits.0, 1
  br i1 %cmp61, label %while.cond, label %do.body, !llvm.loop !156

do.body:                                          ; preds = %while.cond
  %cmp62 = icmp slt i32 %print_bits.0, 65
  br i1 %cmp62, label %do.end, label %if.then63

if.then63:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2.11, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then63, %do.body
  %event65 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %79 = load i32, i32* %event65, align 4, !tbaa !154
  %cmp66 = icmp slt i32 %79, 2
  %idxprom = zext i32 %79 to i64
  %arrayidx = getelementptr inbounds [11 x i8*], [11 x i8*]* @__const.halide_default_trace.event_types, i64 0, i64 %idxprom
  %80 = load i8*, i8** %arrayidx, align 8, !tbaa !10
  %call.i456 = tail call i8* @halide_string_to_string(i8* %call.i445, i8* %ss.sroa.74.0, i8* %80) #16
  %call.i459 = tail call i8* @halide_string_to_string(i8* %call.i456, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %func70 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %81 = load i8*, i8** %func70, align 8, !tbaa !138
  %call.i462 = tail call i8* @halide_string_to_string(i8* %call.i459, i8* %ss.sroa.74.0, i8* %81) #16
  %call.i465 = tail call i8* @halide_string_to_string(i8* %call.i462, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  %value_index73 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 7
  %82 = load i32, i32* %value_index73, align 4, !tbaa !157
  %conv.i468 = sext i32 %82 to i64
  %call.i469 = tail call i8* @halide_int64_to_string(i8* %call.i465, i8* %ss.sroa.74.0, i64 %conv.i468, i32 1) #16
  %call.i472 = tail call i8* @halide_string_to_string(i8* %call.i469, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #16
  %lanes77 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %83 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp79 = icmp ugt i16 %83, 1
  br i1 %cmp79, label %if.then80, label %if.end82

if.then80:                                        ; preds = %do.end
  %call.i475 = tail call i8* @halide_string_to_string(i8* %call.i472, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)) #16
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %do.end
  %ss.sroa.7.0 = phi i8* [ %call.i475, %if.then80 ], [ %call.i472, %do.end ]
  %dimensions83 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %84 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84660 = icmp sgt i32 %84, 0
  br i1 %cmp84660, label %if.end100.peel, label %for.cond.cleanup

if.end100.peel:                                   ; preds = %if.end82
  %coordinates101 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %.pre = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %.pre673 = load i32, i32* %.pre, align 4, !tbaa !73
  %conv.i484.peel = sext i32 %.pre673 to i64
  %call.i485.peel = tail call i8* @halide_int64_to_string(i8* %ss.sroa.7.0, i8* %ss.sroa.74.0, i64 %conv.i484.peel, i32 1) #16
  %85 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84.peel = icmp sgt i32 %85, 1
  br i1 %cmp84.peel, label %if.then86, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %if.end100, %if.end100.peel, %if.end82
  %ss.sroa.7.1.lcssa = phi i8* [ %ss.sroa.7.0, %if.end82 ], [ %call.i485.peel, %if.end100.peel ], [ %call.i485, %if.end100 ]
  %86 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp108 = icmp ugt i16 %86, 1
  %.sink684 = select i1 %cmp108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)
  %call.i491 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1.lcssa, i8* %ss.sroa.74.0, i8* %.sink684) #16
  br i1 %cmp66, label %if.then115, label %if.end263

if.then86:                                        ; preds = %if.end100.peel, %if.end100
  %indvars.iv670 = phi i64 [ %indvars.iv.next671, %if.end100 ], [ 1, %if.end100.peel ]
  %ss.sroa.7.1661 = phi i8* [ %call.i485, %if.end100 ], [ %call.i485.peel, %if.end100.peel ]
  %87 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp90 = icmp ugt i16 %87, 1
  br i1 %cmp90, label %land.lhs.true, label %if.else97.split

land.lhs.true:                                    ; preds = %if.then86
  %conv89 = zext i16 %87 to i32
  %88 = trunc i64 %indvars.iv670 to i32
  %rem = urem i32 %88, %conv89
  %cmp94 = icmp eq i32 %rem, 0
  br i1 %cmp94, label %if.end100, label %if.else97.split

if.else97.split:                                  ; preds = %if.then86, %land.lhs.true
  br label %if.end100

if.end100:                                        ; preds = %land.lhs.true, %if.else97.split
  %.sink = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0), %if.else97.split ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), %land.lhs.true ]
  %call.i4786 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1661, i8* %ss.sroa.74.0, i8* %.sink) #16
  %89 = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %arrayidx103 = getelementptr inbounds i32, i32* %89, i64 %indvars.iv670
  %90 = load i32, i32* %arrayidx103, align 4, !tbaa !73
  %conv.i484 = sext i32 %90 to i64
  %call.i485 = tail call i8* @halide_int64_to_string(i8* %call.i4786, i8* %ss.sroa.74.0, i64 %conv.i484, i32 1) #16
  %indvars.iv.next671 = add nuw nsw i64 %indvars.iv670, 1
  %91 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %92 = sext i32 %91 to i64
  %cmp84 = icmp slt i64 %indvars.iv.next671, %92
  br i1 %cmp84, label %if.then86, label %for.cond.cleanup, !llvm.loop !158

if.then115:                                       ; preds = %for.cond.cleanup
  %93 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp119 = icmp ugt i16 %93, 1
  %.sink685 = select i1 %cmp119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0)
  %call.i497 = tail call i8* @halide_string_to_string(i8* %call.i491, i8* %ss.sroa.74.0, i8* %.sink685) #16
  %94 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130655.not = icmp eq i16 %94, 0
  br i1 %cmp130655.not, label %if.end263, label %if.end136.peel

if.end136.peel:                                   ; preds = %if.then115
  %code = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 0
  %value245 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %95 = bitcast i8** %value245 to i8***
  %cmp214 = icmp sgt i32 %print_bits.0, 15
  %96 = bitcast i8** %value245 to i16**
  %97 = bitcast i8** %value245 to float**
  %98 = bitcast i8** %value245 to double**
  %99 = bitcast i8** %value245 to i32**
  %100 = bitcast i8** %value245 to i64**
  %.pre674 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %.pre674, label %for.inc253.peel [
    i8 0, label %if.then140.peel
    i8 1, label %if.then176.peel
    i8 2, label %do.body213.peel
    i8 3, label %if.then244.peel
  ]

if.then244.peel:                                  ; preds = %if.end136.peel
  %101 = load i8**, i8*** %95, align 8, !tbaa !150
  %102 = load i8*, i8** %101, align 8, !tbaa !10
  %call.i543.peel = tail call i8* @halide_pointer_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i8* %102) #16
  br label %for.inc253.peel

do.body213.peel:                                  ; preds = %if.end136.peel
  br i1 %cmp214, label %do.end218.peel, label %if.then215.peel

if.then215.peel:                                  ; preds = %do.body213.peel
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end218.peel

do.end218.peel:                                   ; preds = %if.then215.peel, %do.body213.peel
  switch i32 %print_bits.0, label %if.else232.peel [
    i32 32, label %if.then220.peel
    i32 16, label %if.then227.peel
  ]

if.then227.peel:                                  ; preds = %do.end218.peel
  %103 = load i16*, i16** %96, align 8, !tbaa !150
  %104 = load i16, i16* %103, align 2, !tbaa !161
  %call.i535.peel = tail call double @halide_float16_bits_to_double(i16 zeroext %104) #16
  %call2.i.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %call.i535.peel, i32 1) #16
  br label %for.inc253.peel

if.then220.peel:                                  ; preds = %do.end218.peel
  %105 = load float*, float** %97, align 8, !tbaa !150
  %106 = load float, float* %105, align 4, !tbaa !162
  %conv.i533.peel = fpext float %106 to double
  %call.i534.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %conv.i533.peel, i32 0) #16
  br label %for.inc253.peel

if.else232.peel:                                  ; preds = %do.end218.peel
  %107 = load double*, double** %98, align 8, !tbaa !150
  %108 = load double, double* %107, align 8, !tbaa !164
  %call.i540.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %108, i32 1) #16
  br label %for.inc253.peel

if.then176.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else199.peel [
    i32 8, label %if.then178.peel
    i32 16, label %if.then186.peel
    i32 32, label %if.then194.peel
  ]

if.then194.peel:                                  ; preds = %if.then176.peel
  %109 = load i32*, i32** %99, align 8, !tbaa !150
  %110 = load i32, i32* %109, align 4, !tbaa !73
  %conv.i526.peel = zext i32 %110 to i64
  %call.i527.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i526.peel, i32 1) #16
  br label %for.inc253.peel

if.then186.peel:                                  ; preds = %if.then176.peel
  %111 = load i16*, i16** %96, align 8, !tbaa !150
  %112 = load i16, i16* %111, align 2, !tbaa !161
  %conv.i522.peel = zext i16 %112 to i64
  %call.i523.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i522.peel, i32 1) #16
  br label %for.inc253.peel

if.then178.peel:                                  ; preds = %if.then176.peel
  %113 = load i8*, i8** %value245, align 8, !tbaa !150
  %114 = load i8, i8* %113, align 1, !tbaa !14
  %conv.i518.peel = zext i8 %114 to i64
  %call.i519.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i518.peel, i32 1) #16
  br label %for.inc253.peel

if.else199.peel:                                  ; preds = %if.then176.peel
  %115 = load i64*, i64** %100, align 8, !tbaa !150
  %116 = load i64, i64* %115, align 8, !tbaa !110
  %call.i530.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %116, i32 1) #16
  br label %for.inc253.peel

if.then140.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else163.peel [
    i32 8, label %if.then142.peel
    i32 16, label %if.then150.peel
    i32 32, label %if.then158.peel
  ]

if.then158.peel:                                  ; preds = %if.then140.peel
  %117 = load i32*, i32** %99, align 8, !tbaa !150
  %118 = load i32, i32* %117, align 4, !tbaa !73
  %conv.i511.peel = sext i32 %118 to i64
  %call.i512.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i511.peel, i32 1) #16
  br label %for.inc253.peel

if.then150.peel:                                  ; preds = %if.then140.peel
  %119 = load i16*, i16** %96, align 8, !tbaa !150
  %120 = load i16, i16* %119, align 2, !tbaa !161
  %conv.i507.peel = sext i16 %120 to i64
  %call.i508.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i507.peel, i32 1) #16
  br label %for.inc253.peel

if.then142.peel:                                  ; preds = %if.then140.peel
  %121 = load i8*, i8** %value245, align 8, !tbaa !150
  %122 = load i8, i8* %121, align 1, !tbaa !14
  %conv.i503.peel = sext i8 %122 to i64
  %call.i504.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i503.peel, i32 1) #16
  br label %for.inc253.peel

if.else163.peel:                                  ; preds = %if.then140.peel
  %123 = load i64*, i64** %100, align 8, !tbaa !150
  %124 = load i64, i64* %123, align 8, !tbaa !110
  %call.i515.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %124, i32 1) #16
  br label %for.inc253.peel

for.inc253.peel:                                  ; preds = %if.else163.peel, %if.then142.peel, %if.then150.peel, %if.then158.peel, %if.else199.peel, %if.then178.peel, %if.then186.peel, %if.then194.peel, %if.else232.peel, %if.then220.peel, %if.then227.peel, %if.then244.peel, %if.end136.peel
  %ss.sroa.7.7.peel = phi i8* [ %call.i497, %if.end136.peel ], [ %call.i543.peel, %if.then244.peel ], [ %call.i540.peel, %if.else232.peel ], [ %call2.i.peel, %if.then227.peel ], [ %call.i534.peel, %if.then220.peel ], [ %call.i530.peel, %if.else199.peel ], [ %call.i527.peel, %if.then194.peel ], [ %call.i523.peel, %if.then186.peel ], [ %call.i519.peel, %if.then178.peel ], [ %call.i515.peel, %if.else163.peel ], [ %call.i512.peel, %if.then158.peel ], [ %call.i508.peel, %if.then150.peel ], [ %call.i504.peel, %if.then142.peel ]
  %125 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130.peel = icmp ugt i16 %125, 1
  br i1 %cmp130.peel, label %if.end136, label %if.end263

for.cond.cleanup131:                              ; preds = %for.inc253
  %cmp259 = icmp ugt i16 %151, 1
  br i1 %cmp259, label %if.then260, label %if.end263

if.end136:                                        ; preds = %for.inc253.peel, %for.inc253
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc253 ], [ 1, %for.inc253.peel ]
  %ss.sroa.7.5656 = phi i8* [ %ss.sroa.7.7, %for.inc253 ], [ %ss.sroa.7.7.peel, %for.inc253.peel ]
  %call.i500 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.5656, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %126 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %126, label %for.inc253 [
    i8 0, label %if.then140
    i8 1, label %if.then176
    i8 2, label %do.body213
    i8 3, label %if.then244
  ]

if.then140:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else163 [
    i32 8, label %if.then142
    i32 16, label %if.then150
    i32 32, label %if.then158
  ]

if.then142:                                       ; preds = %if.then140
  %127 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx145 = getelementptr inbounds i8, i8* %127, i64 %indvars.iv
  %128 = load i8, i8* %arrayidx145, align 1, !tbaa !14
  %conv.i503 = sext i8 %128 to i64
  %call.i504 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i503, i32 1) #16
  br label %for.inc253

if.then150:                                       ; preds = %if.then140
  %129 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx153 = getelementptr inbounds i16, i16* %129, i64 %indvars.iv
  %130 = load i16, i16* %arrayidx153, align 2, !tbaa !161
  %conv.i507 = sext i16 %130 to i64
  %call.i508 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i507, i32 1) #16
  br label %for.inc253

if.then158:                                       ; preds = %if.then140
  %131 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx161 = getelementptr inbounds i32, i32* %131, i64 %indvars.iv
  %132 = load i32, i32* %arrayidx161, align 4, !tbaa !73
  %conv.i511 = sext i32 %132 to i64
  %call.i512 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i511, i32 1) #16
  br label %for.inc253

if.else163:                                       ; preds = %if.then140
  %133 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx166 = getelementptr inbounds i64, i64* %133, i64 %indvars.iv
  %134 = load i64, i64* %arrayidx166, align 8, !tbaa !110
  %call.i515 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %134, i32 1) #16
  br label %for.inc253

if.then176:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else199 [
    i32 8, label %if.then178
    i32 16, label %if.then186
    i32 32, label %if.then194
  ]

if.then178:                                       ; preds = %if.then176
  %135 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx181 = getelementptr inbounds i8, i8* %135, i64 %indvars.iv
  %136 = load i8, i8* %arrayidx181, align 1, !tbaa !14
  %conv.i518 = zext i8 %136 to i64
  %call.i519 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i518, i32 1) #16
  br label %for.inc253

if.then186:                                       ; preds = %if.then176
  %137 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx189 = getelementptr inbounds i16, i16* %137, i64 %indvars.iv
  %138 = load i16, i16* %arrayidx189, align 2, !tbaa !161
  %conv.i522 = zext i16 %138 to i64
  %call.i523 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i522, i32 1) #16
  br label %for.inc253

if.then194:                                       ; preds = %if.then176
  %139 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx197 = getelementptr inbounds i32, i32* %139, i64 %indvars.iv
  %140 = load i32, i32* %arrayidx197, align 4, !tbaa !73
  %conv.i526 = zext i32 %140 to i64
  %call.i527 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i526, i32 1) #16
  br label %for.inc253

if.else199:                                       ; preds = %if.then176
  %141 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx202 = getelementptr inbounds i64, i64* %141, i64 %indvars.iv
  %142 = load i64, i64* %arrayidx202, align 8, !tbaa !110
  %call.i530 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %142, i32 1) #16
  br label %for.inc253

do.body213:                                       ; preds = %if.end136
  br i1 %cmp214, label %do.end218, label %if.then215

if.then215:                                       ; preds = %do.body213
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end218

do.end218:                                        ; preds = %if.then215, %do.body213
  switch i32 %print_bits.0, label %if.else232 [
    i32 32, label %if.then220
    i32 16, label %if.then227
  ]

if.then220:                                       ; preds = %do.end218
  %143 = load float*, float** %97, align 8, !tbaa !150
  %arrayidx223 = getelementptr inbounds float, float* %143, i64 %indvars.iv
  %144 = load float, float* %arrayidx223, align 4, !tbaa !162
  %conv.i533 = fpext float %144 to double
  %call.i534 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %conv.i533, i32 0) #16
  br label %for.inc253

if.then227:                                       ; preds = %do.end218
  %145 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx230 = getelementptr inbounds i16, i16* %145, i64 %indvars.iv
  %146 = load i16, i16* %arrayidx230, align 2, !tbaa !161
  %call.i535 = tail call double @halide_float16_bits_to_double(i16 zeroext %146) #16
  %call2.i = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %call.i535, i32 1) #16
  br label %for.inc253

if.else232:                                       ; preds = %do.end218
  %147 = load double*, double** %98, align 8, !tbaa !150
  %arrayidx235 = getelementptr inbounds double, double* %147, i64 %indvars.iv
  %148 = load double, double* %arrayidx235, align 8, !tbaa !164
  %call.i540 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %148, i32 1) #16
  br label %for.inc253

if.then244:                                       ; preds = %if.end136
  %149 = load i8**, i8*** %95, align 8, !tbaa !150
  %arrayidx247 = getelementptr inbounds i8*, i8** %149, i64 %indvars.iv
  %150 = load i8*, i8** %arrayidx247, align 8, !tbaa !10
  %call.i543 = tail call i8* @halide_pointer_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i8* %150) #16
  br label %for.inc253

for.inc253:                                       ; preds = %if.then244, %if.else232, %if.then227, %if.then220, %if.else199, %if.then194, %if.then186, %if.then178, %if.else163, %if.then158, %if.then150, %if.then142, %if.end136
  %ss.sroa.7.7 = phi i8* [ %call.i500, %if.end136 ], [ %call.i543, %if.then244 ], [ %call.i540, %if.else232 ], [ %call2.i, %if.then227 ], [ %call.i534, %if.then220 ], [ %call.i530, %if.else199 ], [ %call.i527, %if.then194 ], [ %call.i523, %if.then186 ], [ %call.i519, %if.then178 ], [ %call.i515, %if.else163 ], [ %call.i512, %if.then158 ], [ %call.i508, %if.then150 ], [ %call.i504, %if.then142 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %151 = load i16, i16* %lanes77, align 2, !tbaa !130
  %152 = zext i16 %151 to i64
  %cmp130 = icmp ult i64 %indvars.iv.next, %152
  br i1 %cmp130, label %if.end136, label %for.cond.cleanup131, !llvm.loop !166

if.then260:                                       ; preds = %for.cond.cleanup131
  %call.i546 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.7, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0)) #16
  br label %if.end263

if.end263:                                        ; preds = %if.then260, %for.cond.cleanup131, %for.inc253.peel, %if.then115, %for.cond.cleanup
  %ss.sroa.7.8 = phi i8* [ %call.i546, %if.then260 ], [ %ss.sroa.7.7, %for.cond.cleanup131 ], [ %call.i491, %for.cond.cleanup ], [ %ss.sroa.7.7.peel, %for.inc253.peel ], [ %call.i497, %if.then115 ]
  %trace_tag264 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %153 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %tobool265.not = icmp eq i8* %153, null
  br i1 %tobool265.not, label %if.end274, label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end263
  %154 = load i8, i8* %153, align 1, !tbaa !14
  %tobool268.not = icmp eq i8 %154, 0
  br i1 %tobool268.not, label %if.end274, label %if.then269

if.then269:                                       ; preds = %land.lhs.true266
  %call.i549 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.8, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0)) #16
  %155 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %call.i552 = tail call i8* @halide_string_to_string(i8* %call.i549, i8* %ss.sroa.74.0, i8* %155) #16
  %call.i555 = tail call i8* @halide_string_to_string(i8* %call.i552, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0)) #16
  br label %if.end274

if.end274:                                        ; preds = %if.then269, %land.lhs.true266, %if.end263
  %ss.sroa.7.9 = phi i8* [ %ss.sroa.7.8, %if.end263 ], [ %ss.sroa.7.8, %land.lhs.true266 ], [ %call.i555, %if.then269 ]
  %call.i558 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.9, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br label %while.cond.i560

while.cond.i560:                                  ; preds = %while.cond.i560, %if.end274
  %156 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i559 = icmp eq i8 %156, 0
  br i1 %tobool.not.i559, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i560, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i560
  br i1 %tobool.not.i448, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %sub.ptr.lhs.cast.i.i563 = ptrtoint i8* %call.i558 to i64
  %sub.ptr.rhs.cast.i.i564 = ptrtoint i8* %call.i445 to i64
  %sub.ptr.sub.i.i565 = sub i64 1, %sub.ptr.rhs.cast.i.i564
  %add.i.i566 = add i64 %sub.ptr.sub.i.i565, %sub.ptr.lhs.cast.i.i563
  %call.i.i567 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #16
  tail call void @halide_print(i8* %user_context, i8* nonnull %call.i445) #16
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i445) #16
  br label %if.end277

if.end277:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit, %do.end.critedge.i, %if.then10.i, %if.then.i442, %_ZN21halide_trace_packet_t9trace_tagEv.exit
  ret i32 %0
}

; Function Attrs: nounwind
define weak i32 @halide_get_trace_file(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i64 0, i64 0)) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.then
  %call2 = tail call i8* @fopen(i8* nonnull %call, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i64 0, i64 0)) #16
  %tobool3.not = icmp eq i8* %call2, null
  br i1 %tobool3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.then1
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.30, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.then1
  %call5 = tail call i32 @fileno(i8* %call2) #16
  tail call void @halide_set_trace_file(i32 %call5) #17
  store i8* %call2, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %2 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool6.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %2, null
  br i1 %tobool6.not, label %if.then7, label %if.end11

if.then7:                                         ; preds = %do.end
  %call8 = tail call i8* @malloc(i64 1048588) #16
  store i8* %call8, i8** bitcast (%"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE to i8**), align 8, !tbaa !10
  %cursor.i = getelementptr inbounds i8, i8* %call8, i64 4
  %3 = bitcast i8* %cursor.i to i32*
  store i32 0, i32* %3, align 4, !tbaa !142
  %overage.i = getelementptr inbounds i8, i8* %call8, i64 8
  %4 = bitcast i8* %overage.i to i32*
  store i32 0, i32* %4, align 4, !tbaa !144
  %lock.i.i = bitcast i8* %call8 to i32*
  store volatile i32 0, i32* %lock.i.i, align 4, !tbaa !140
  br label %if.end11

if.else:                                          ; preds = %if.then
  tail call void @halide_set_trace_file(i32 0) #17
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then7, %do.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %5 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  ret i32 %5
}

declare i8* @memcpy(i8*, i8*, i64) local_unnamed_addr #1

declare i8* @fopen(i8*, i8*) local_unnamed_addr #1

declare i32 @fileno(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_trace_file(i32 %fd) local_unnamed_addr #2 {
entry:
  store i32 %fd, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_trace_cleanup() #0 {
entry:
  %call = tail call i32 @halide_shutdown_trace() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_shutdown_trace() local_unnamed_addr #0 {
entry:
  %0 = load i8*, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %tobool.not = icmp eq i8* %0, null
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @fclose(i8* nonnull %0) #16
  store i32 0, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store i8 0, i8* @_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE, align 1, !tbaa !15
  store i8* null, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %1 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool1.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %1, null
  br i1 %tobool1.not, label %return, label %if.then2

if.then2:                                         ; preds = %if.then
  %2 = bitcast %"class.Halide::Runtime::Internal::TraceBuffer"* %1 to i8*
  tail call void @free(i8* nonnull %2) #16
  br label %return

return:                                           ; preds = %if.then2, %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then2 ], [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @fclose(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, %struct.halide_trace_event_t*)* @halide_set_custom_trace(i32 (i8*, %struct.halide_trace_event_t*)* %t) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  store i32 (i8*, %struct.halide_trace_event_t*)* %t, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  ret i32 (i8*, %struct.halide_trace_event_t*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* %e) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, %struct.halide_trace_event_t* %e) #16
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_trace_helper(i8* %user_context, i8* %func, i8* %value, i32* %coords, i32 %type_code, i32 %type_bits, i32 %type_lanes, i32 %code, i32 %parent_id, i32 %value_index, i32 %dimensions, i8* %trace_tag) local_unnamed_addr #4 {
entry:
  %event = alloca %struct.halide_trace_event_t, align 8
  %0 = bitcast %struct.halide_trace_event_t* %event to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %0) #11
  %code.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 0
  %bits.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 1
  %lanes.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 2
  %func1 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 0
  store i8* %func, i8** %func1, align 8, !tbaa !138
  %value2 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 1
  store i8* %value, i8** %value2, align 8, !tbaa !150
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 2
  store i32* %coords, i32** %coordinates, align 8, !tbaa !149
  %trace_tag3 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 3
  store i8* %trace_tag, i8** %trace_tag3, align 8, !tbaa !139
  %conv = trunc i32 %type_code to i8
  store i8 %conv, i8* %code.i.i, align 8, !tbaa !160
  %conv5 = trunc i32 %type_bits to i8
  store i8 %conv5, i8* %bits.i.i, align 1, !tbaa !155
  %conv7 = trunc i32 %type_lanes to i16
  store i16 %conv7, i16* %lanes.i.i, align 2, !tbaa !130
  %event9 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 5
  store i32 %code, i32* %event9, align 4, !tbaa !154
  %parent_id10 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 6
  store i32 %parent_id, i32* %parent_id10, align 8, !tbaa !168
  %value_index11 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 7
  store i32 %value_index, i32* %value_index11, align 4, !tbaa !157
  %dimensions12 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 8
  store i32 %dimensions, i32* %dimensions12, align 8, !tbaa !137
  %call = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 56) #16
  %add = add nsw i32 %type_bits, 7
  %div = sdiv i32 %add, 8
  %mul = mul nsw i32 %div, %type_lanes
  %conv13 = sext i32 %mul to i64
  %call14 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %value, i64 %conv13) #16
  %1 = bitcast i32* %coords to i8*
  %conv15 = sext i32 %dimensions to i64
  %mul16 = shl nsw i64 %conv15, 2
  %call17 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %1, i64 %mul16) #16
  %call18 = call i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* nonnull %event) #16
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %0) #11
  ret i32 %call18
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* %suffix) local_unnamed_addr #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %f.0 = phi i8* [ %filename, %entry ], [ %incdec.ptr, %while.cond ]
  %0 = load i8, i8* %f.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %0, 0
  %incdec.ptr = getelementptr inbounds i8, i8* %f.0, i64 1
  br i1 %tobool.not, label %while.cond1, label %while.cond, !llvm.loop !169

while.cond1:                                      ; preds = %while.cond, %while.cond1
  %s.0 = phi i8* [ %incdec.ptr4, %while.cond1 ], [ %suffix, %while.cond ]
  %1 = load i8, i8* %s.0, align 1, !tbaa !14
  %tobool2.not = icmp eq i8 %1, 0
  %incdec.ptr4 = getelementptr inbounds i8, i8* %s.0, i64 1
  br i1 %tobool2.not, label %while.cond6.preheader, label %while.cond1, !llvm.loop !170

while.cond6.preheader:                            ; preds = %while.cond1
  %cmp34 = icmp ne i8* %s.0, %suffix
  %cmp735 = icmp ne i8* %f.0, %filename
  %2 = and i1 %cmp735, %cmp34
  br i1 %2, label %if.end, label %while.end13

if.end:                                           ; preds = %while.cond6.preheader, %if.end.while.body8_crit_edge
  %f.13649 = phi i8* [ %incdec.ptr11, %if.end.while.body8_crit_edge ], [ %f.0, %while.cond6.preheader ]
  %s.13748 = phi i8* [ %incdec.ptr12, %if.end.while.body8_crit_edge ], [ %s.0, %while.cond6.preheader ]
  %incdec.ptr11 = getelementptr inbounds i8, i8* %f.13649, i64 -1
  %incdec.ptr12 = getelementptr inbounds i8, i8* %s.13748, i64 -1
  %cmp = icmp ne i8* %incdec.ptr12, %suffix
  %cmp7 = icmp ne i8* %incdec.ptr11, %filename
  %3 = and i1 %cmp7, %cmp
  %.pre = load i8, i8* %incdec.ptr11, align 1, !tbaa !14
  %.pre45 = load i8, i8* %incdec.ptr12, align 1, !tbaa !14
  br i1 %3, label %if.end.while.body8_crit_edge, label %while.end13, !llvm.loop !171

if.end.while.body8_crit_edge:                     ; preds = %if.end
  %cmp10.not = icmp eq i8 %.pre, %.pre45
  br i1 %cmp10.not, label %if.end, label %cleanup

while.end13:                                      ; preds = %if.end, %while.cond6.preheader
  %4 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre45, %if.end ]
  %5 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre, %if.end ]
  %cmp16 = icmp eq i8 %5, %4
  br label %cleanup

cleanup:                                          ; preds = %if.end.while.body8_crit_edge, %while.end13
  %retval.0 = phi i1 [ %cmp16, %while.end13 ], [ false, %if.end.while.body8_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_debug_to_file(i8* %user_context, i8* %filename, i32 %type_code, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %header = alloca %"struct.Halide::Runtime::Internal::halide_tiff_header", align 2
  %offset = alloca i32, align 4
  %count = alloca i32, align 4
  %array_name = alloca [256 x i8], align 1
  %array_name42 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  %header198 = alloca [129 x i8], align 1
  %tags = alloca [8 x i32], align 4
  %extents = alloca [4 x i32], align 4
  %name_header = alloca [2 x i32], align 4
  %payload_header = alloca [2 x i32], align 4
  %header289 = alloca [5 x i32], align 4
  %temp = alloca [4096 x i8], align 1
  %idx = alloca [4 x i32], align 4
  %zero = alloca i64, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !172
  %cmp.i = icmp eq i8* %0, null
  br i1 %cmp.i, label %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, label %if.end

_ZNK15halide_buffer_t15is_bounds_queryEv.exit:    ; preds = %entry
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp2.i = icmp eq i64 %1, 0
  br i1 %cmp2.i, label %if.then, label %if.end

if.then:                                          ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.34, i64 0, i64 0)) #16
  br label %return

if.end:                                           ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, %entry
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp = icmp sgt i32 %2, 4
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1.35, i64 0, i64 0)) #16
  br label %return

if.end2:                                          ; preds = %if.end
  %call3 = tail call i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp4.not = icmp eq i32 %call3, 0
  br i1 %cmp4.not, label %if.end6, label %return

if.end6:                                          ; preds = %if.end2
  %call.i598 = tail call i8* @fopen(i8* %filename, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.36, i64 0, i64 0)) #16
  %cmp.i601.not = icmp eq i8* %call.i598, null
  br i1 %cmp.i601.not, label %return, label %if.end9

if.end9:                                          ; preds = %if.end6
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #11
  %min.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 0
  %extent.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %min.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 0
  %extent.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %4 = bitcast [4 x %struct.halide_dimension_t]* %shape to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %4, align 4, !tbaa !73
  %min.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 0
  %extent.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %min.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 0
  %extent.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %5 = bitcast i32* %min.i.2 to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %5, align 4, !tbaa !73
  %6 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp11875 = icmp sgt i32 %6, 0
  br i1 %cmp11875, label %for.body.lr.ph, label %for.body22.preheader

for.body.lr.ph:                                   ; preds = %if.end9
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %7 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %8 = zext i32 %6 to i64
  %9 = add nsw i64 %8, -1
  %10 = icmp ult i64 %9, 3
  %11 = select i1 %10, i64 %8, i64 4
  %12 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %13 = bitcast %struct.halide_dimension_t* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %12, i8* nonnull align 4 dereferenceable(16) %13, i64 16, i1 false), !tbaa.struct !177
  %extent = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %14 = load i32, i32* %extent, align 4, !tbaa !178
  %conv903 = zext i32 %14 to i64
  %exitcond.not17 = icmp eq i64 %11, 1
  br i1 %exitcond.not17, label %for.cond19.preheader, label %for.body.1, !llvm.loop !180

for.cond19.preheader:                             ; preds = %for.body.3, %for.body.2, %for.body.1, %for.body.lr.ph
  %mul.lcssa = phi i64 [ %conv903, %for.body.lr.ph ], [ %mul.1, %for.body.1 ], [ %mul.2, %for.body.2 ], [ %mul.3, %for.body.3 ]
  %cmp20873 = icmp slt i32 %6, 4
  br i1 %cmp20873, label %for.body22.preheader, label %for.cond.cleanup21

for.body22.preheader:                             ; preds = %for.cond19.preheader, %if.end9
  %elts.0.lcssa907 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ 1, %if.end9 ]
  %15 = sext i32 %6 to i64
  %16 = sub i32 3, %6
  %17 = zext i32 %16 to i64
  %18 = add nuw nsw i64 %17, 1
  %min.iters.check = icmp ult i32 %16, 7
  br i1 %min.iters.check, label %for.body22.preheader214, label %vector.ph

vector.ph:                                        ; preds = %for.body22.preheader
  %n.vec = and i64 %18, 8589934584
  %ind.end = add nsw i64 %n.vec, %15
  %.splatinsert = insertelement <8 x i64> poison, i64 %15, i32 0
  %.splat = shufflevector <8 x i64> %.splatinsert, <8 x i64> poison, <8 x i32> zeroinitializer
  %induction = add <8 x i64> %.splat, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
  %19 = add nsw i64 %n.vec, -8
  %20 = lshr exact i64 %19, 3
  %21 = add nuw nsw i64 %20, 1
  %xtraiter = and i64 %21, 3
  %22 = icmp ult i64 %19, 24
  br i1 %22, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = and i64 %21, 4611686018427387900
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %vec.ind = phi <8 x i64> [ %induction, %vector.ph.new ], [ %vec.ind.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %23 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %23, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %24 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %24, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %25 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %25, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next = add <8 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %26 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %26, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %27, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %28 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %28, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.1 = add <8 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %29 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %29, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %30 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %30, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %31 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %31, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.2 = add <8 x i64> %vec.ind, <i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24>
  %32 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %32, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %33 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %33, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %34 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %34, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.3 = add <8 x i64> %vec.ind, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !183

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %vec.ind.unr = phi <8 x i64> [ %induction, %vector.ph ], [ %vec.ind.next.3, %vector.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %middle.block, label %vector.body.epil

vector.body.epil:                                 ; preds = %middle.block.unr-lcssa, %vector.body.epil
  %vec.ind.epil = phi <8 x i64> [ %vec.ind.next.epil, %vector.body.epil ], [ %vec.ind.unr, %middle.block.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %vector.body.epil ], [ %xtraiter, %middle.block.unr-lcssa ]
  %35 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %35, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %36 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %36, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %37 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %37, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.epil = add <8 x i64> %vec.ind.epil, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %middle.block, label %vector.body.epil, !llvm.loop !185

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %18, %n.vec
  br i1 %cmp.n, label %for.cond.cleanup21, label %for.body22.preheader214

for.body22.preheader214:                          ; preds = %for.body22.preheader, %middle.block
  %indvars.iv.ph = phi i64 [ %15, %for.body22.preheader ], [ %ind.end, %middle.block ]
  br label %for.body22

for.cond.cleanup21:                               ; preds = %for.body22, %middle.block, %for.cond19.preheader
  %elts.0.lcssa906 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ %elts.0.lcssa907, %middle.block ], [ %elts.0.lcssa907, %for.body22 ]
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %38 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %38 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %call34 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.37, i64 0, i64 0)) #17
  br i1 %call34, label %if.then36, label %lor.lhs.false

for.body22:                                       ; preds = %for.body22.preheader214, %for.body22
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body22 ], [ %indvars.iv.ph, %for.body22.preheader214 ]
  %min = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 0
  store i32 0, i32* %min, align 4, !tbaa !181
  %extent27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 1
  store i32 1, i32* %extent27, align 4, !tbaa !178
  %stride = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 2
  store i32 0, i32* %stride, align 4, !tbaa !182
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond886.not = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond886.not, label %for.cond.cleanup21, label %for.body22, !llvm.loop !187

lor.lhs.false:                                    ; preds = %for.cond.cleanup21
  %call35 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.38, i64 0, i64 0)) #17
  br i1 %call35, label %if.then36, label %if.else164

if.then36:                                        ; preds = %lor.lhs.false, %for.cond.cleanup21
  %39 = load i32, i32* %extent.i, align 4, !tbaa !178
  %40 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %41 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %switch = icmp ult i32 %41, 2
  %42 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %cmp50 = icmp slt i32 %42, 5
  %or.cond = and i1 %switch, %cmp50
  %depth.0 = select i1 %or.cond, i32 1, i32 %42
  %channels.0 = select i1 %or.cond, i32 %42, i32 %41
  %43 = bitcast %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 210, i8* nonnull %43) #11
  %byte_order_marker = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 0
  store i16 18761, i16* %byte_order_marker, align 2, !tbaa !189
  %version = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 1
  store i16 42, i16* %version, align 2, !tbaa !191
  %ifd0_offset = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 2
  store i32 8, i32* %ifd0_offset, align 2, !tbaa !192
  %entry_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 3
  store i16 15, i16* %entry_count, align 2, !tbaa !193
  %tag_code2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 0
  store i16 256, i16* %tag_code2.i, align 2, !tbaa !194
  %type_code.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 1
  store i16 4, i16* %type_code.i, align 2, !tbaa !196
  %count3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 2
  store i32 1, i32* %count3.i, align 2, !tbaa !197
  %i32.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 3, i32 0
  store i32 %39, i32* %i32.i, align 2, !tbaa !14
  %tag_code2.i632 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 0
  store i16 257, i16* %tag_code2.i632, align 2, !tbaa !194
  %type_code.i633 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 1
  store i16 4, i16* %type_code.i633, align 2, !tbaa !196
  %count3.i634 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 2
  store i32 1, i32* %count3.i634, align 2, !tbaa !197
  %i32.i635 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 3, i32 0
  store i32 %40, i32* %i32.i635, align 2, !tbaa !14
  %44 = trunc i32 %add.i to i16
  %conv68 = and i16 %44, 504
  %tag_code2.i643 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 0
  store i16 258, i16* %tag_code2.i643, align 2, !tbaa !194
  %type_code.i644 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 1
  store i16 3, i16* %type_code.i644, align 2, !tbaa !196
  %count3.i645 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 2
  store i32 1, i32* %count3.i645, align 2, !tbaa !197
  %value4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 3
  %i16.i = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i to i16*
  store i16 %conv68, i16* %i16.i, align 2, !tbaa !14
  %tag_code2.i653 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 0
  store i16 259, i16* %tag_code2.i653, align 2, !tbaa !194
  %type_code.i654 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 1
  store i16 3, i16* %type_code.i654, align 2, !tbaa !196
  %count3.i655 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 2
  store i32 1, i32* %count3.i655, align 2, !tbaa !197
  %value4.i656 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 3
  %i16.i657 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i656 to i16*
  store i16 1, i16* %i16.i657, align 2, !tbaa !14
  %cmp71 = icmp sgt i32 %channels.0, 2
  %conv72 = select i1 %cmp71, i16 2, i16 1
  %tag_code2.i665 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 0
  store i16 262, i16* %tag_code2.i665, align 2, !tbaa !194
  %type_code.i666 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 1
  store i16 3, i16* %type_code.i666, align 2, !tbaa !196
  %count3.i667 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 2
  store i32 1, i32* %count3.i667, align 2, !tbaa !197
  %value4.i668 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 3
  %i16.i669 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i668 to i16*
  store i16 %conv72, i16* %i16.i669, align 2, !tbaa !14
  %tag_code2.i677 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 0
  store i16 273, i16* %tag_code2.i677, align 2, !tbaa !194
  %type_code.i678 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 1
  store i16 4, i16* %type_code.i678, align 2, !tbaa !196
  %count3.i679 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 2
  store i32 %channels.0, i32* %count3.i679, align 2, !tbaa !197
  %i32.i680 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 3, i32 0
  store i32 210, i32* %i32.i680, align 2, !tbaa !14
  %conv75 = trunc i32 %channels.0 to i16
  %tag_code2.i688 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 0
  store i16 277, i16* %tag_code2.i688, align 2, !tbaa !194
  %type_code.i689 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 1
  store i16 3, i16* %type_code.i689, align 2, !tbaa !196
  %count3.i690 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 2
  store i32 1, i32* %count3.i690, align 2, !tbaa !197
  %value4.i691 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 3
  %i16.i692 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i691 to i16*
  store i16 %conv75, i16* %i16.i692, align 2, !tbaa !14
  %tag_code2.i706 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 0
  store i16 278, i16* %tag_code2.i706, align 2, !tbaa !194
  %type_code.i707 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 1
  store i16 4, i16* %type_code.i707, align 2, !tbaa !196
  %count3.i708 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 2
  store i32 1, i32* %count3.i708, align 2, !tbaa !197
  %i32.i709 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 3, i32 0
  store i32 %40, i32* %i32.i709, align 2, !tbaa !14
  %cmp80 = icmp eq i32 %channels.0, 1
  %45 = trunc i64 %elts.0.lcssa906 to i32
  %conv86595 = mul i32 %div.i, %45
  %mul84 = shl i32 %channels.0, 2
  %add = add i32 %mul84, 210
  %add.sink = select i1 %cmp80, i32 %conv86595, i32 %add
  %46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 0
  store i16 279, i16* %46, align 2
  %47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 1
  store i16 4, i16* %47, align 2
  %48 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 2
  store i32 %channels.0, i32* %48, align 2
  %49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 3, i32 0
  store i32 %add.sink, i32* %49, align 2
  %tag_code2.i732 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 0
  store i16 282, i16* %tag_code2.i732, align 2, !tbaa !194
  %type_code3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 1
  store i16 5, i16* %type_code3.i, align 2, !tbaa !196
  %count4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 2
  store i32 1, i32* %count4.i, align 2, !tbaa !197
  %i32.i733 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 3, i32 0
  store i32 194, i32* %i32.i733, align 2, !tbaa !14
  %tag_code2.i741 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 0
  store i16 283, i16* %tag_code2.i741, align 2, !tbaa !194
  %type_code3.i742 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 1
  store i16 5, i16* %type_code3.i742, align 2, !tbaa !196
  %count4.i743 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 2
  store i32 1, i32* %count4.i743, align 2, !tbaa !197
  %i32.i744 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 3, i32 0
  store i32 202, i32* %i32.i744, align 2, !tbaa !14
  %tag_code2.i759 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 0
  store i16 284, i16* %tag_code2.i759, align 2, !tbaa !194
  %type_code.i760 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 1
  store i16 3, i16* %type_code.i760, align 2, !tbaa !196
  %count3.i761 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 2
  store i32 1, i32* %count3.i761, align 2, !tbaa !197
  %value4.i762 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 3
  %i16.i763 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i762 to i16*
  store i16 2, i16* %i16.i763, align 2, !tbaa !14
  %tag_code2.i754 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 0
  store i16 296, i16* %tag_code2.i754, align 2, !tbaa !194
  %type_code.i755 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 1
  store i16 3, i16* %type_code.i755, align 2, !tbaa !196
  %count3.i756 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 2
  store i32 1, i32* %count3.i756, align 2, !tbaa !197
  %value4.i757 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 3
  %i16.i758 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i757 to i16*
  store i16 1, i16* %i16.i758, align 2, !tbaa !14
  %idxprom92 = sext i32 %type_code to i64
  %arrayidx93 = getelementptr inbounds [10 x i16], [10 x i16]* @_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE, i64 0, i64 %idxprom92
  %50 = load i16, i16* %arrayidx93, align 2, !tbaa !161
  %tag_code2.i749 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 0
  store i16 339, i16* %tag_code2.i749, align 2, !tbaa !194
  %type_code.i750 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 1
  store i16 3, i16* %type_code.i750, align 2, !tbaa !196
  %count3.i751 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 2
  store i32 1, i32* %count3.i751, align 2, !tbaa !197
  %value4.i752 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 3
  %i16.i753 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i752 to i16*
  store i16 %50, i16* %i16.i753, align 2, !tbaa !14
  %tag_code2.i745 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 0
  store i16 -32539, i16* %tag_code2.i745, align 2, !tbaa !194
  %type_code.i746 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 1
  store i16 4, i16* %type_code.i746, align 2, !tbaa !196
  %count3.i747 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 2
  store i32 1, i32* %count3.i747, align 2, !tbaa !197
  %i32.i748 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 3, i32 0
  store i32 %depth.0, i32* %i32.i748, align 2, !tbaa !14
  %ifd0_end = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 5
  %51 = bitcast i32* %ifd0_end to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 1, i32 1>, <4 x i32>* %51, align 2, !tbaa !73
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 7, i64 1
  store i32 1, i32* %arrayidx100, align 2, !tbaa !73
  %call.i736 = call i64 @fwrite(i8* nonnull %43, i64 210, i64 1, i8* nonnull %call.i598) #16
  %cmp.i737.not = icmp eq i64 %call.i736, 0
  br i1 %cmp.i737.not, label %cleanup154, label %if.end103

if.end103:                                        ; preds = %if.then36
  %cmp104 = icmp sgt i32 %channels.0, 1
  br i1 %cmp104, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph, label %cleanup154.thread

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph: ; preds = %if.end103
  %52 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %52) #11
  %mul108 = shl i32 %channels.0, 3
  %add109 = add i32 %mul108, 210
  store i32 %add109, i32* %offset, align 4, !tbaa !73
  %mul123 = mul i32 %depth.0, %div.i
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731: ; preds = %if.end118, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph
  %i111.0865 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph ], [ %inc128, %if.end118 ]
  %call.i727 = call i64 @fwrite(i8* nonnull %52, i64 4, i64 1, i8* nonnull %call.i598) #16
  %cmp.i728.not = icmp eq i64 %call.i727, 0
  br i1 %cmp.i728.not, label %cleanup151.thread, label %if.end118

if.end118:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731
  %53 = load i32, i32* %extent.i, align 4, !tbaa !178
  %54 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %mul124 = mul i32 %mul123, %53
  %mul125 = mul i32 %mul124, %54
  %55 = load i32, i32* %offset, align 4, !tbaa !73
  %add126 = add nsw i32 %mul125, %55
  store i32 %add126, i32* %offset, align 4, !tbaa !73
  %inc128 = add nuw nsw i32 %i111.0865, 1
  %exitcond881.not = icmp eq i32 %inc128, %channels.0
  br i1 %exitcond881.not, label %for.end129, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, !llvm.loop !198

for.end129:                                       ; preds = %if.end118
  %56 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %56) #11
  store i32 %mul125, i32* %count, align 4, !tbaa !73
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

for.cond138:                                      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  %exitcond.not = icmp eq i32 %inc146, %channels.0
  br i1 %exitcond.not, label %cleanup151, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720, !llvm.loop !199

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720: ; preds = %for.end129, %for.cond138
  %i137.0863 = phi i32 [ %inc146, %for.cond138 ], [ 0, %for.end129 ]
  %call.i716 = call i64 @fwrite(i8* nonnull %56, i64 4, i64 1, i8* nonnull %call.i598) #16
  %cmp.i717.not = icmp eq i64 %call.i716, 0
  %inc146 = add nuw nsw i32 %i137.0863, 1
  br i1 %cmp.i717.not, label %select.unfold, label %for.cond138

select.unfold:                                    ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #11
  br label %cleanup151.thread

cleanup151.thread:                                ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, %select.unfold
  %retval.2.ph = phi i32 [ -5, %select.unfold ], [ -4, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #11
  br label %cleanup154

cleanup151:                                       ; preds = %for.cond138
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #11
  br label %cleanup154.thread

cleanup154.thread:                                ; preds = %cleanup151, %if.end103
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #11
  br label %if.end311

cleanup154:                                       ; preds = %cleanup151.thread, %if.then36
  %retval.4 = phi i32 [ -3, %if.then36 ], [ %retval.2.ph, %cleanup151.thread ]
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #11
  br label %cleanup433

if.else164:                                       ; preds = %lor.lhs.false
  %call165 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.39, i64 0, i64 0)) #17
  br i1 %call165, label %while.cond, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631

while.cond:                                       ; preds = %if.else164, %while.cond
  %end.0 = phi i8* [ %incdec.ptr167, %while.cond ], [ %filename, %if.else164 ]
  %57 = load i8, i8* %end.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %57, 0
  %incdec.ptr167 = getelementptr inbounds i8, i8* %end.0, i64 1
  br i1 %tobool.not, label %while.body171, label %while.cond, !llvm.loop !200

while.cond174.preheader:                          ; preds = %while.body171
  %end.1872.lcssa883 = ptrtoint i8* %end.1872 to i64
  %58 = ptrtoint i8* %filename to i64
  %59 = sub i64 %58, %end.1872.lcssa883
  br label %while.cond174

while.body171:                                    ; preds = %while.cond, %while.body171
  %end.1872 = phi i8* [ %incdec.ptr172.ptr, %while.body171 ], [ %end.0, %while.cond ]
  %incdec.ptr172.ptr = getelementptr inbounds i8, i8* %end.1872, i64 -1
  %.pr = load i8, i8* %incdec.ptr172.ptr, align 1, !tbaa !14
  %cmp170.not = icmp eq i8 %.pr, 46
  br i1 %cmp170.not, label %while.cond174.preheader, label %while.body171, !llvm.loop !201

while.cond174:                                    ; preds = %land.rhs176, %while.cond174.preheader
  %start.0.idx = phi i64 [ %start.0.add, %land.rhs176 ], [ -1, %while.cond174.preheader ]
  %start.0.ptr.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.idx
  %cmp175.not = icmp eq i8* %start.0.ptr.ptr, %filename
  br i1 %cmp175.not, label %while.end183, label %land.rhs176

land.rhs176:                                      ; preds = %while.cond174
  %start.0.add = add nsw i64 %start.0.idx, -1
  %arrayidx177.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.add
  %60 = load i8, i8* %arrayidx177.ptr, align 1, !tbaa !14
  %cmp179.not = icmp eq i8 %60, 47
  br i1 %cmp179.not, label %while.end183, label %while.cond174, !llvm.loop !202

while.end183:                                     ; preds = %land.rhs176, %while.cond174
  %start.0.idx.lcssa = phi i64 [ %59, %while.cond174 ], [ %start.0.idx, %land.rhs176 ]
  %61 = trunc i64 %start.0.idx.lcssa to i32
  %conv184 = xor i32 %61, -1
  %62 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %62) #11
  %cmp186.not868 = icmp eq i64 %start.0.idx.lcssa, -1
  br i1 %cmp186.not868, label %iter.check, label %while.body187.preheader

while.body187.preheader:                          ; preds = %while.end183
  %63 = xor i64 %start.0.idx.lcssa, -1
  %min.iters.check39 = icmp ugt i64 %start.0.idx.lcssa, -129
  br i1 %min.iters.check39, label %while.body187.preheader212, label %vector.memcheck

vector.memcheck:                                  ; preds = %while.body187.preheader
  %64 = xor i64 %start.0.idx.lcssa, -1
  %scevgep43 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %64
  %scevgep44 = getelementptr i8, i8* %end.1872, i64 %start.0.idx.lcssa
  %scevgep45 = getelementptr i8, i8* %end.1872, i64 -1
  %bound0 = icmp ult i8* %array_name42, %scevgep45
  %bound1 = icmp ult i8* %scevgep44, %scevgep43
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %while.body187.preheader212, label %vector.ph41

vector.ph41:                                      ; preds = %vector.memcheck
  %n.vec47 = and i64 %63, -128
  %ind.end51 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %n.vec47
  %ind.end53 = add i64 %start.0.idx.lcssa, %n.vec47
  %65 = add i64 %n.vec47, -128
  %66 = lshr exact i64 %65, 7
  %67 = add nuw nsw i64 %66, 1
  %xtraiter215 = and i64 %67, 3
  %68 = icmp ult i64 %65, 384
  br i1 %68, label %middle.block36.unr-lcssa, label %vector.ph41.new

vector.ph41.new:                                  ; preds = %vector.ph41
  %unroll_iter218 = and i64 %67, 288230376151711740
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph41.new
  %index48 = phi i64 [ 0, %vector.ph41.new ], [ %index.next49.3, %vector.body38 ]
  %niter219 = phi i64 [ %unroll_iter218, %vector.ph41.new ], [ %niter219.nsub.3, %vector.body38 ]
  %next.gep = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48
  %offset.idx = add i64 %start.0.idx.lcssa, %index48
  %69 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx
  %70 = bitcast i8* %69 to <32 x i8>*
  %wide.load = load <32 x i8>, <32 x i8>* %70, align 1, !tbaa !14, !alias.scope !203
  %71 = getelementptr inbounds i8, i8* %69, i64 32
  %72 = bitcast i8* %71 to <32 x i8>*
  %wide.load58 = load <32 x i8>, <32 x i8>* %72, align 1, !tbaa !14, !alias.scope !203
  %73 = getelementptr inbounds i8, i8* %69, i64 64
  %74 = bitcast i8* %73 to <32 x i8>*
  %wide.load59 = load <32 x i8>, <32 x i8>* %74, align 1, !tbaa !14, !alias.scope !203
  %75 = getelementptr inbounds i8, i8* %69, i64 96
  %76 = bitcast i8* %75 to <32 x i8>*
  %wide.load60 = load <32 x i8>, <32 x i8>* %76, align 1, !tbaa !14, !alias.scope !203
  %77 = bitcast i8* %next.gep to <32 x i8>*
  store <32 x i8> %wide.load, <32 x i8>* %77, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %78 = getelementptr i8, i8* %next.gep, i64 32
  %79 = bitcast i8* %78 to <32 x i8>*
  store <32 x i8> %wide.load58, <32 x i8>* %79, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %80 = getelementptr i8, i8* %next.gep, i64 64
  %81 = bitcast i8* %80 to <32 x i8>*
  store <32 x i8> %wide.load59, <32 x i8>* %81, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %82 = getelementptr i8, i8* %next.gep, i64 96
  %83 = bitcast i8* %82 to <32 x i8>*
  store <32 x i8> %wide.load60, <32 x i8>* %83, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49 = or i64 %index48, 128
  %next.gep.1 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49
  %offset.idx.1 = add i64 %start.0.idx.lcssa, %index.next49
  %84 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.1
  %85 = bitcast i8* %84 to <32 x i8>*
  %wide.load.1 = load <32 x i8>, <32 x i8>* %85, align 1, !tbaa !14, !alias.scope !203
  %86 = getelementptr inbounds i8, i8* %84, i64 32
  %87 = bitcast i8* %86 to <32 x i8>*
  %wide.load58.1 = load <32 x i8>, <32 x i8>* %87, align 1, !tbaa !14, !alias.scope !203
  %88 = getelementptr inbounds i8, i8* %84, i64 64
  %89 = bitcast i8* %88 to <32 x i8>*
  %wide.load59.1 = load <32 x i8>, <32 x i8>* %89, align 1, !tbaa !14, !alias.scope !203
  %90 = getelementptr inbounds i8, i8* %84, i64 96
  %91 = bitcast i8* %90 to <32 x i8>*
  %wide.load60.1 = load <32 x i8>, <32 x i8>* %91, align 1, !tbaa !14, !alias.scope !203
  %92 = bitcast i8* %next.gep.1 to <32 x i8>*
  store <32 x i8> %wide.load.1, <32 x i8>* %92, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %93 = getelementptr i8, i8* %next.gep.1, i64 32
  %94 = bitcast i8* %93 to <32 x i8>*
  store <32 x i8> %wide.load58.1, <32 x i8>* %94, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %95 = getelementptr i8, i8* %next.gep.1, i64 64
  %96 = bitcast i8* %95 to <32 x i8>*
  store <32 x i8> %wide.load59.1, <32 x i8>* %96, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %97 = getelementptr i8, i8* %next.gep.1, i64 96
  %98 = bitcast i8* %97 to <32 x i8>*
  store <32 x i8> %wide.load60.1, <32 x i8>* %98, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.1 = or i64 %index48, 256
  %next.gep.2 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.1
  %offset.idx.2 = add i64 %start.0.idx.lcssa, %index.next49.1
  %99 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.2
  %100 = bitcast i8* %99 to <32 x i8>*
  %wide.load.2 = load <32 x i8>, <32 x i8>* %100, align 1, !tbaa !14, !alias.scope !203
  %101 = getelementptr inbounds i8, i8* %99, i64 32
  %102 = bitcast i8* %101 to <32 x i8>*
  %wide.load58.2 = load <32 x i8>, <32 x i8>* %102, align 1, !tbaa !14, !alias.scope !203
  %103 = getelementptr inbounds i8, i8* %99, i64 64
  %104 = bitcast i8* %103 to <32 x i8>*
  %wide.load59.2 = load <32 x i8>, <32 x i8>* %104, align 1, !tbaa !14, !alias.scope !203
  %105 = getelementptr inbounds i8, i8* %99, i64 96
  %106 = bitcast i8* %105 to <32 x i8>*
  %wide.load60.2 = load <32 x i8>, <32 x i8>* %106, align 1, !tbaa !14, !alias.scope !203
  %107 = bitcast i8* %next.gep.2 to <32 x i8>*
  store <32 x i8> %wide.load.2, <32 x i8>* %107, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %108 = getelementptr i8, i8* %next.gep.2, i64 32
  %109 = bitcast i8* %108 to <32 x i8>*
  store <32 x i8> %wide.load58.2, <32 x i8>* %109, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %110 = getelementptr i8, i8* %next.gep.2, i64 64
  %111 = bitcast i8* %110 to <32 x i8>*
  store <32 x i8> %wide.load59.2, <32 x i8>* %111, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %112 = getelementptr i8, i8* %next.gep.2, i64 96
  %113 = bitcast i8* %112 to <32 x i8>*
  store <32 x i8> %wide.load60.2, <32 x i8>* %113, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.2 = or i64 %index48, 384
  %next.gep.3 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.2
  %offset.idx.3 = add i64 %start.0.idx.lcssa, %index.next49.2
  %114 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.3
  %115 = bitcast i8* %114 to <32 x i8>*
  %wide.load.3 = load <32 x i8>, <32 x i8>* %115, align 1, !tbaa !14, !alias.scope !203
  %116 = getelementptr inbounds i8, i8* %114, i64 32
  %117 = bitcast i8* %116 to <32 x i8>*
  %wide.load58.3 = load <32 x i8>, <32 x i8>* %117, align 1, !tbaa !14, !alias.scope !203
  %118 = getelementptr inbounds i8, i8* %114, i64 64
  %119 = bitcast i8* %118 to <32 x i8>*
  %wide.load59.3 = load <32 x i8>, <32 x i8>* %119, align 1, !tbaa !14, !alias.scope !203
  %120 = getelementptr inbounds i8, i8* %114, i64 96
  %121 = bitcast i8* %120 to <32 x i8>*
  %wide.load60.3 = load <32 x i8>, <32 x i8>* %121, align 1, !tbaa !14, !alias.scope !203
  %122 = bitcast i8* %next.gep.3 to <32 x i8>*
  store <32 x i8> %wide.load.3, <32 x i8>* %122, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %123 = getelementptr i8, i8* %next.gep.3, i64 32
  %124 = bitcast i8* %123 to <32 x i8>*
  store <32 x i8> %wide.load58.3, <32 x i8>* %124, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %125 = getelementptr i8, i8* %next.gep.3, i64 64
  %126 = bitcast i8* %125 to <32 x i8>*
  store <32 x i8> %wide.load59.3, <32 x i8>* %126, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %127 = getelementptr i8, i8* %next.gep.3, i64 96
  %128 = bitcast i8* %127 to <32 x i8>*
  store <32 x i8> %wide.load60.3, <32 x i8>* %128, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.3 = add i64 %index48, 512
  %niter219.nsub.3 = add i64 %niter219, -4
  %niter219.ncmp.3 = icmp eq i64 %niter219.nsub.3, 0
  br i1 %niter219.ncmp.3, label %middle.block36.unr-lcssa, label %vector.body38, !llvm.loop !208

middle.block36.unr-lcssa:                         ; preds = %vector.body38, %vector.ph41
  %index48.unr = phi i64 [ 0, %vector.ph41 ], [ %index.next49.3, %vector.body38 ]
  %lcmp.mod217.not = icmp eq i64 %xtraiter215, 0
  br i1 %lcmp.mod217.not, label %middle.block36, label %vector.body38.epil

vector.body38.epil:                               ; preds = %middle.block36.unr-lcssa, %vector.body38.epil
  %index48.epil = phi i64 [ %index.next49.epil, %vector.body38.epil ], [ %index48.unr, %middle.block36.unr-lcssa ]
  %epil.iter216 = phi i64 [ %epil.iter216.sub, %vector.body38.epil ], [ %xtraiter215, %middle.block36.unr-lcssa ]
  %next.gep.epil = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48.epil
  %offset.idx.epil = add i64 %start.0.idx.lcssa, %index48.epil
  %129 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.epil
  %130 = bitcast i8* %129 to <32 x i8>*
  %wide.load.epil = load <32 x i8>, <32 x i8>* %130, align 1, !tbaa !14, !alias.scope !203
  %131 = getelementptr inbounds i8, i8* %129, i64 32
  %132 = bitcast i8* %131 to <32 x i8>*
  %wide.load58.epil = load <32 x i8>, <32 x i8>* %132, align 1, !tbaa !14, !alias.scope !203
  %133 = getelementptr inbounds i8, i8* %129, i64 64
  %134 = bitcast i8* %133 to <32 x i8>*
  %wide.load59.epil = load <32 x i8>, <32 x i8>* %134, align 1, !tbaa !14, !alias.scope !203
  %135 = getelementptr inbounds i8, i8* %129, i64 96
  %136 = bitcast i8* %135 to <32 x i8>*
  %wide.load60.epil = load <32 x i8>, <32 x i8>* %136, align 1, !tbaa !14, !alias.scope !203
  %137 = bitcast i8* %next.gep.epil to <32 x i8>*
  store <32 x i8> %wide.load.epil, <32 x i8>* %137, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %138 = getelementptr i8, i8* %next.gep.epil, i64 32
  %139 = bitcast i8* %138 to <32 x i8>*
  store <32 x i8> %wide.load58.epil, <32 x i8>* %139, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %140 = getelementptr i8, i8* %next.gep.epil, i64 64
  %141 = bitcast i8* %140 to <32 x i8>*
  store <32 x i8> %wide.load59.epil, <32 x i8>* %141, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %142 = getelementptr i8, i8* %next.gep.epil, i64 96
  %143 = bitcast i8* %142 to <32 x i8>*
  store <32 x i8> %wide.load60.epil, <32 x i8>* %143, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.epil = add i64 %index48.epil, 128
  %epil.iter216.sub = add i64 %epil.iter216, -1
  %epil.iter216.cmp.not = icmp eq i64 %epil.iter216.sub, 0
  br i1 %epil.iter216.cmp.not, label %middle.block36, label %vector.body38.epil, !llvm.loop !209

middle.block36:                                   ; preds = %vector.body38.epil, %middle.block36.unr-lcssa
  %cmp.n54 = icmp eq i64 %n.vec47, %63
  br i1 %cmp.n54, label %while.cond191.preheader, label %while.body187.preheader212

while.body187.preheader212:                       ; preds = %vector.memcheck, %while.body187.preheader, %middle.block36
  %dst.0870.ph = phi i8* [ %62, %vector.memcheck ], [ %62, %while.body187.preheader ], [ %ind.end51, %middle.block36 ]
  %start.1869.idx.ph = phi i64 [ %start.0.idx.lcssa, %vector.memcheck ], [ %start.0.idx.lcssa, %while.body187.preheader ], [ %ind.end53, %middle.block36 ]
  %144 = sub i64 -2, %start.1869.idx.ph
  %145 = and i64 %start.1869.idx.ph, 7
  %xtraiter220 = xor i64 %145, 7
  %lcmp.mod221.not = icmp eq i64 %xtraiter220, 0
  br i1 %lcmp.mod221.not, label %while.body187.prol.loopexit, label %while.body187.prol

while.body187.prol:                               ; preds = %while.body187.preheader212, %while.body187.prol
  %dst.0870.prol = phi i8* [ %incdec.ptr189.prol, %while.body187.prol ], [ %dst.0870.ph, %while.body187.preheader212 ]
  %start.1869.idx.prol = phi i64 [ %start.1869.add.prol, %while.body187.prol ], [ %start.1869.idx.ph, %while.body187.preheader212 ]
  %prol.iter = phi i64 [ %prol.iter.sub, %while.body187.prol ], [ %xtraiter220, %while.body187.preheader212 ]
  %start.1869.ptr.prol = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx.prol
  %start.1869.add.prol = add nuw nsw i64 %start.1869.idx.prol, 1
  %146 = load i8, i8* %start.1869.ptr.prol, align 1, !tbaa !14
  %incdec.ptr189.prol = getelementptr inbounds i8, i8* %dst.0870.prol, i64 1
  store i8 %146, i8* %dst.0870.prol, align 1, !tbaa !14
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %while.body187.prol.loopexit, label %while.body187.prol, !llvm.loop !210

while.body187.prol.loopexit:                      ; preds = %while.body187.prol, %while.body187.preheader212
  %incdec.ptr189.lcssa213.unr = phi i8* [ undef, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %dst.0870.unr = phi i8* [ %dst.0870.ph, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %start.1869.idx.unr = phi i64 [ %start.1869.idx.ph, %while.body187.preheader212 ], [ %start.1869.add.prol, %while.body187.prol ]
  %147 = icmp ult i64 %144, 7
  br i1 %147, label %while.cond191.preheader, label %while.body187

while.cond191.preheader:                          ; preds = %while.body187.prol.loopexit, %while.body187, %middle.block36
  %incdec.ptr189.lcssa = phi i8* [ %ind.end51, %middle.block36 ], [ %incdec.ptr189.lcssa213.unr, %while.body187.prol.loopexit ], [ %incdec.ptr189.7, %while.body187 ]
  %add.ptr = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 256
  %cmp193866 = icmp ult i8* %incdec.ptr189.lcssa, %add.ptr
  br i1 %cmp193866, label %iter.check, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705

iter.check:                                       ; preds = %while.cond191.preheader, %while.end183
  %dst.0.lcssa911 = phi i8* [ %incdec.ptr189.lcssa, %while.cond191.preheader ], [ %62, %while.end183 ]
  %dst.0.lcssa91164 = ptrtoint i8* %dst.0.lcssa911 to i64
  %scevgep = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 1, i64 0
  %148 = sub i64 0, %dst.0.lcssa91164
  %scevgep65 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %148
  %exitcount.ptrcnt.to.int = ptrtoint i8* %scevgep65 to i64
  %min.iters.check67 = icmp ult i8* %scevgep65, inttoptr (i64 4 to i8*)
  br i1 %min.iters.check67, label %while.body194.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  %min.iters.check69 = icmp ult i8* %scevgep65, inttoptr (i64 128 to i8*)
  br i1 %min.iters.check69, label %vec.epilog.ph, label %vector.ph70

vector.ph70:                                      ; preds = %vector.main.loop.iter.check
  %n.vec72 = and i64 %exitcount.ptrcnt.to.int, -128
  %149 = add i64 %n.vec72, -128
  %150 = lshr exact i64 %149, 7
  %151 = add nuw nsw i64 %150, 1
  %xtraiter222 = and i64 %151, 7
  %152 = icmp ult i64 %149, 896
  br i1 %152, label %middle.block61.unr-lcssa, label %vector.ph70.new

vector.ph70.new:                                  ; preds = %vector.ph70
  %unroll_iter225 = and i64 %151, 288230376151711736
  br label %vector.body63

vector.body63:                                    ; preds = %vector.body63, %vector.ph70.new
  %index73 = phi i64 [ 0, %vector.ph70.new ], [ %index.next74.7, %vector.body63 ]
  %niter226 = phi i64 [ %unroll_iter225, %vector.ph70.new ], [ %niter226.nsub.7, %vector.body63 ]
  %next.gep76 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73
  %153 = bitcast i8* %next.gep76 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %153, align 1, !tbaa !14
  %154 = getelementptr i8, i8* %next.gep76, i64 32
  %155 = bitcast i8* %154 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %155, align 1, !tbaa !14
  %156 = getelementptr i8, i8* %next.gep76, i64 64
  %157 = bitcast i8* %156 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %157, align 1, !tbaa !14
  %158 = getelementptr i8, i8* %next.gep76, i64 96
  %159 = bitcast i8* %158 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %159, align 1, !tbaa !14
  %index.next74 = or i64 %index73, 128
  %next.gep76.1 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74
  %160 = bitcast i8* %next.gep76.1 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %160, align 1, !tbaa !14
  %161 = getelementptr i8, i8* %next.gep76.1, i64 32
  %162 = bitcast i8* %161 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %162, align 1, !tbaa !14
  %163 = getelementptr i8, i8* %next.gep76.1, i64 64
  %164 = bitcast i8* %163 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %164, align 1, !tbaa !14
  %165 = getelementptr i8, i8* %next.gep76.1, i64 96
  %166 = bitcast i8* %165 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %166, align 1, !tbaa !14
  %index.next74.1 = or i64 %index73, 256
  %next.gep76.2 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.1
  %167 = bitcast i8* %next.gep76.2 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %167, align 1, !tbaa !14
  %168 = getelementptr i8, i8* %next.gep76.2, i64 32
  %169 = bitcast i8* %168 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %169, align 1, !tbaa !14
  %170 = getelementptr i8, i8* %next.gep76.2, i64 64
  %171 = bitcast i8* %170 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %171, align 1, !tbaa !14
  %172 = getelementptr i8, i8* %next.gep76.2, i64 96
  %173 = bitcast i8* %172 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %173, align 1, !tbaa !14
  %index.next74.2 = or i64 %index73, 384
  %next.gep76.3 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.2
  %174 = bitcast i8* %next.gep76.3 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %174, align 1, !tbaa !14
  %175 = getelementptr i8, i8* %next.gep76.3, i64 32
  %176 = bitcast i8* %175 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %176, align 1, !tbaa !14
  %177 = getelementptr i8, i8* %next.gep76.3, i64 64
  %178 = bitcast i8* %177 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %178, align 1, !tbaa !14
  %179 = getelementptr i8, i8* %next.gep76.3, i64 96
  %180 = bitcast i8* %179 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %180, align 1, !tbaa !14
  %index.next74.3 = or i64 %index73, 512
  %next.gep76.4 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.3
  %181 = bitcast i8* %next.gep76.4 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %181, align 1, !tbaa !14
  %182 = getelementptr i8, i8* %next.gep76.4, i64 32
  %183 = bitcast i8* %182 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %183, align 1, !tbaa !14
  %184 = getelementptr i8, i8* %next.gep76.4, i64 64
  %185 = bitcast i8* %184 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %185, align 1, !tbaa !14
  %186 = getelementptr i8, i8* %next.gep76.4, i64 96
  %187 = bitcast i8* %186 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %187, align 1, !tbaa !14
  %index.next74.4 = or i64 %index73, 640
  %next.gep76.5 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.4
  %188 = bitcast i8* %next.gep76.5 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %188, align 1, !tbaa !14
  %189 = getelementptr i8, i8* %next.gep76.5, i64 32
  %190 = bitcast i8* %189 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %190, align 1, !tbaa !14
  %191 = getelementptr i8, i8* %next.gep76.5, i64 64
  %192 = bitcast i8* %191 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %192, align 1, !tbaa !14
  %193 = getelementptr i8, i8* %next.gep76.5, i64 96
  %194 = bitcast i8* %193 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %194, align 1, !tbaa !14
  %index.next74.5 = or i64 %index73, 768
  %next.gep76.6 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.5
  %195 = bitcast i8* %next.gep76.6 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %195, align 1, !tbaa !14
  %196 = getelementptr i8, i8* %next.gep76.6, i64 32
  %197 = bitcast i8* %196 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %197, align 1, !tbaa !14
  %198 = getelementptr i8, i8* %next.gep76.6, i64 64
  %199 = bitcast i8* %198 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %199, align 1, !tbaa !14
  %200 = getelementptr i8, i8* %next.gep76.6, i64 96
  %201 = bitcast i8* %200 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %201, align 1, !tbaa !14
  %index.next74.6 = or i64 %index73, 896
  %next.gep76.7 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.6
  %202 = bitcast i8* %next.gep76.7 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %202, align 1, !tbaa !14
  %203 = getelementptr i8, i8* %next.gep76.7, i64 32
  %204 = bitcast i8* %203 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %204, align 1, !tbaa !14
  %205 = getelementptr i8, i8* %next.gep76.7, i64 64
  %206 = bitcast i8* %205 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %206, align 1, !tbaa !14
  %207 = getelementptr i8, i8* %next.gep76.7, i64 96
  %208 = bitcast i8* %207 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %208, align 1, !tbaa !14
  %index.next74.7 = add i64 %index73, 1024
  %niter226.nsub.7 = add i64 %niter226, -8
  %niter226.ncmp.7 = icmp eq i64 %niter226.nsub.7, 0
  br i1 %niter226.ncmp.7, label %middle.block61.unr-lcssa, label %vector.body63, !llvm.loop !211

middle.block61.unr-lcssa:                         ; preds = %vector.body63, %vector.ph70
  %index73.unr = phi i64 [ 0, %vector.ph70 ], [ %index.next74.7, %vector.body63 ]
  %lcmp.mod224.not = icmp eq i64 %xtraiter222, 0
  br i1 %lcmp.mod224.not, label %middle.block61, label %vector.body63.epil

vector.body63.epil:                               ; preds = %middle.block61.unr-lcssa, %vector.body63.epil
  %index73.epil = phi i64 [ %index.next74.epil, %vector.body63.epil ], [ %index73.unr, %middle.block61.unr-lcssa ]
  %epil.iter223 = phi i64 [ %epil.iter223.sub, %vector.body63.epil ], [ %xtraiter222, %middle.block61.unr-lcssa ]
  %next.gep76.epil = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73.epil
  %209 = bitcast i8* %next.gep76.epil to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %209, align 1, !tbaa !14
  %210 = getelementptr i8, i8* %next.gep76.epil, i64 32
  %211 = bitcast i8* %210 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %211, align 1, !tbaa !14
  %212 = getelementptr i8, i8* %next.gep76.epil, i64 64
  %213 = bitcast i8* %212 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %213, align 1, !tbaa !14
  %214 = getelementptr i8, i8* %next.gep76.epil, i64 96
  %215 = bitcast i8* %214 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %215, align 1, !tbaa !14
  %index.next74.epil = add i64 %index73.epil, 128
  %epil.iter223.sub = add i64 %epil.iter223, -1
  %epil.iter223.cmp.not = icmp eq i64 %epil.iter223.sub, 0
  br i1 %epil.iter223.cmp.not, label %middle.block61, label %vector.body63.epil, !llvm.loop !212

middle.block61:                                   ; preds = %vector.body63.epil, %middle.block61.unr-lcssa
  %cmp.n75 = icmp eq i64 %n.vec72, %exitcount.ptrcnt.to.int
  br i1 %cmp.n75, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block61
  %ind.end89 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec72
  %n.vec.remaining = and i64 %exitcount.ptrcnt.to.int, 124
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  br i1 %min.epilog.iters.check, label %while.body194.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %vec.epilog.resume.val = phi i64 [ %n.vec72, %vec.epilog.iter.check ], [ 0, %vector.main.loop.iter.check ]
  %216 = sub i64 0, %dst.0.lcssa91164
  %scevgep80 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %216
  %exitcount.ptrcnt.to.int82 = ptrtoint i8* %scevgep80 to i64
  %n.vec84 = and i64 %exitcount.ptrcnt.to.int82, -4
  %ind.end88 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec84
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index85 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next86, %vec.epilog.vector.body ]
  %next.gep91 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index85
  %217 = bitcast i8* %next.gep91 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %217, align 1, !tbaa !14
  %index.next86 = add i64 %index85, 4
  %218 = icmp eq i64 %index.next86, %n.vec84
  br i1 %218, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !213

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %cmp.n90 = icmp eq i64 %n.vec84, %exitcount.ptrcnt.to.int82
  br i1 %cmp.n90, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194.preheader

while.body194.preheader:                          ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %dst.1867.ph = phi i8* [ %dst.0.lcssa911, %iter.check ], [ %ind.end89, %vec.epilog.iter.check ], [ %ind.end88, %vec.epilog.middle.block ]
  br label %while.body194

while.body187:                                    ; preds = %while.body187.prol.loopexit, %while.body187
  %dst.0870 = phi i8* [ %incdec.ptr189.7, %while.body187 ], [ %dst.0870.unr, %while.body187.prol.loopexit ]
  %start.1869.idx = phi i64 [ %start.1869.add.7, %while.body187 ], [ %start.1869.idx.unr, %while.body187.prol.loopexit ]
  %start.1869.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx
  %start.1869.add = add nuw nsw i64 %start.1869.idx, 1
  %219 = load i8, i8* %start.1869.ptr, align 1, !tbaa !14
  %incdec.ptr189 = getelementptr inbounds i8, i8* %dst.0870, i64 1
  store i8 %219, i8* %dst.0870, align 1, !tbaa !14
  %start.1869.ptr.1 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add
  %start.1869.add.1 = add nuw nsw i64 %start.1869.idx, 2
  %220 = load i8, i8* %start.1869.ptr.1, align 1, !tbaa !14
  %incdec.ptr189.1 = getelementptr inbounds i8, i8* %dst.0870, i64 2
  store i8 %220, i8* %incdec.ptr189, align 1, !tbaa !14
  %start.1869.ptr.2 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.1
  %start.1869.add.2 = add nuw nsw i64 %start.1869.idx, 3
  %221 = load i8, i8* %start.1869.ptr.2, align 1, !tbaa !14
  %incdec.ptr189.2 = getelementptr inbounds i8, i8* %dst.0870, i64 3
  store i8 %221, i8* %incdec.ptr189.1, align 1, !tbaa !14
  %start.1869.ptr.3 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.2
  %start.1869.add.3 = add nuw nsw i64 %start.1869.idx, 4
  %222 = load i8, i8* %start.1869.ptr.3, align 1, !tbaa !14
  %incdec.ptr189.3 = getelementptr inbounds i8, i8* %dst.0870, i64 4
  store i8 %222, i8* %incdec.ptr189.2, align 1, !tbaa !14
  %start.1869.ptr.4 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.3
  %start.1869.add.4 = add nuw nsw i64 %start.1869.idx, 5
  %223 = load i8, i8* %start.1869.ptr.4, align 1, !tbaa !14
  %incdec.ptr189.4 = getelementptr inbounds i8, i8* %dst.0870, i64 5
  store i8 %223, i8* %incdec.ptr189.3, align 1, !tbaa !14
  %start.1869.ptr.5 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.4
  %start.1869.add.5 = add nuw nsw i64 %start.1869.idx, 6
  %224 = load i8, i8* %start.1869.ptr.5, align 1, !tbaa !14
  %incdec.ptr189.5 = getelementptr inbounds i8, i8* %dst.0870, i64 6
  store i8 %224, i8* %incdec.ptr189.4, align 1, !tbaa !14
  %start.1869.ptr.6 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.5
  %start.1869.add.6 = add nuw nsw i64 %start.1869.idx, 7
  %225 = load i8, i8* %start.1869.ptr.6, align 1, !tbaa !14
  %incdec.ptr189.6 = getelementptr inbounds i8, i8* %dst.0870, i64 7
  store i8 %225, i8* %incdec.ptr189.5, align 1, !tbaa !14
  %start.1869.ptr.7 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.6
  %start.1869.add.7 = add nuw nsw i64 %start.1869.idx, 8
  %226 = load i8, i8* %start.1869.ptr.7, align 1, !tbaa !14
  %incdec.ptr189.7 = getelementptr inbounds i8, i8* %dst.0870, i64 8
  store i8 %226, i8* %incdec.ptr189.6, align 1, !tbaa !14
  %cmp186.not.7 = icmp eq i64 %start.1869.add.7, -1
  br i1 %cmp186.not.7, label %while.cond191.preheader, label %while.body187, !llvm.loop !214

while.body194:                                    ; preds = %while.body194.preheader, %while.body194
  %dst.1867 = phi i8* [ %incdec.ptr195, %while.body194 ], [ %dst.1867.ph, %while.body194.preheader ]
  %incdec.ptr195 = getelementptr inbounds i8, i8* %dst.1867, i64 1
  store i8 0, i8* %dst.1867, align 1, !tbaa !14
  %exitcond882.not = icmp eq i8* %incdec.ptr195, %scevgep
  br i1 %exitcond882.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194, !llvm.loop !215

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705: ; preds = %while.body194, %middle.block61, %vec.epilog.middle.block, %while.cond191.preheader
  %add197 = sub i32 6, %61
  %and = and i32 %add197, -8
  %227 = getelementptr inbounds [129 x i8], [129 x i8]* %header198, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(129) %227, i8* nonnull align 1 dereferenceable(129) getelementptr inbounds ([129 x i8], [129 x i8]* @__const.halide_debug_to_file.header, i64 0, i64 0), i64 129, i1 false)
  %call.i701 = call i64 @fwrite(i8* nonnull %227, i64 128, i64 1, i8* nonnull %call.i598) #16
  %228 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %228, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %229 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %228 to i64
  %min.iters.check95 = icmp ult i32 %228, 17
  br i1 %min.iters.check95, label %for.body.i.i.preheader, label %vector.ph96

vector.ph96:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf97 = and i64 %wide.trip.count.i.i, 15
  %230 = icmp eq i64 %n.mod.vf97, 0
  %231 = select i1 %230, i64 16, i64 %n.mod.vf97
  %n.vec98 = sub nsw i64 %wide.trip.count.i.i, %231
  br label %vector.body94

vector.body94:                                    ; preds = %vector.body94, %vector.ph96
  %index99 = phi i64 [ 0, %vector.ph96 ], [ %index.next100, %vector.body94 ]
  %vec.ind103 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph96 ], [ %vec.ind.next107, %vector.body94 ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi, %vector.body94 ]
  %vec.phi108 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi120, %vector.body94 ]
  %vec.phi109 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi121, %vector.body94 ]
  %vec.phi110 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi122, %vector.body94 ]
  %step.add = add <4 x i64> %vec.ind103, <i64 4, i64 4, i64 4, i64 4>
  %step.add104 = add <4 x i64> %vec.ind103, <i64 8, i64 8, i64 8, i64 8>
  %step.add105 = add <4 x i64> %vec.ind103, <i64 12, i64 12, i64 12, i64 12>
  %232 = or i64 %index99, 4
  %233 = or i64 %index99, 8
  %234 = or i64 %index99, 12
  %235 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index99, i32 2
  %236 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %232, i32 2
  %237 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %233, i32 2
  %238 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %234, i32 2
  %239 = bitcast i32* %235 to <16 x i32>*
  %240 = bitcast i32* %236 to <16 x i32>*
  %241 = bitcast i32* %237 to <16 x i32>*
  %242 = bitcast i32* %238 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %239, align 4, !tbaa !182
  %wide.vec111 = load <16 x i32>, <16 x i32>* %240, align 4, !tbaa !182
  %wide.vec112 = load <16 x i32>, <16 x i32>* %241, align 4, !tbaa !182
  %wide.vec113 = load <16 x i32>, <16 x i32>* %242, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec114 = shufflevector <16 x i32> %wide.vec111, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec115 = shufflevector <16 x i32> %wide.vec112, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec116 = shufflevector <16 x i32> %wide.vec113, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %243 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %244 = icmp sgt <4 x i32> %strided.vec114, zeroinitializer
  %245 = icmp sgt <4 x i32> %strided.vec115, zeroinitializer
  %246 = icmp sgt <4 x i32> %strided.vec116, zeroinitializer
  %247 = zext <4 x i32> %strided.vec to <4 x i64>
  %248 = zext <4 x i32> %strided.vec114 to <4 x i64>
  %249 = zext <4 x i32> %strided.vec115 to <4 x i64>
  %250 = zext <4 x i32> %strided.vec116 to <4 x i64>
  %251 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind103, i32 1
  %252 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add, i32 1
  %253 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add104, i32 1
  %254 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add105, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %251, i32 4, <4 x i1> %243, <4 x i32> undef), !tbaa !178
  %wide.masked.gather117 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %252, i32 4, <4 x i1> %244, <4 x i32> undef), !tbaa !178
  %wide.masked.gather118 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %253, i32 4, <4 x i1> %245, <4 x i32> undef), !tbaa !178
  %wide.masked.gather119 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %254, i32 4, <4 x i1> %246, <4 x i32> undef), !tbaa !178
  %255 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %256 = add nsw <4 x i32> %wide.masked.gather117, <i32 -1, i32 -1, i32 -1, i32 -1>
  %257 = add nsw <4 x i32> %wide.masked.gather118, <i32 -1, i32 -1, i32 -1, i32 -1>
  %258 = add nsw <4 x i32> %wide.masked.gather119, <i32 -1, i32 -1, i32 -1, i32 -1>
  %259 = sext <4 x i32> %255 to <4 x i64>
  %260 = sext <4 x i32> %256 to <4 x i64>
  %261 = sext <4 x i32> %257 to <4 x i64>
  %262 = sext <4 x i32> %258 to <4 x i64>
  %263 = mul nsw <4 x i64> %259, %247
  %264 = mul nsw <4 x i64> %260, %248
  %265 = mul nsw <4 x i64> %261, %249
  %266 = mul nsw <4 x i64> %262, %250
  %267 = select <4 x i1> %243, <4 x i64> %263, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %267
  %268 = select <4 x i1> %244, <4 x i64> %264, <4 x i64> zeroinitializer
  %predphi120 = add <4 x i64> %vec.phi108, %268
  %269 = select <4 x i1> %245, <4 x i64> %265, <4 x i64> zeroinitializer
  %predphi121 = add <4 x i64> %vec.phi109, %269
  %270 = select <4 x i1> %246, <4 x i64> %266, <4 x i64> zeroinitializer
  %predphi122 = add <4 x i64> %vec.phi110, %270
  %index.next100 = add i64 %index99, 16
  %vec.ind.next107 = add <4 x i64> %vec.ind103, <i64 16, i64 16, i64 16, i64 16>
  %271 = icmp eq i64 %index.next100, %n.vec98
  br i1 %271, label %middle.block92, label %vector.body94, !llvm.loop !216

middle.block92:                                   ; preds = %vector.body94
  %bin.rdx = add <4 x i64> %predphi120, %predphi
  %bin.rdx123 = add <4 x i64> %predphi121, %bin.rdx
  %bin.rdx124 = add <4 x i64> %predphi122, %bin.rdx123
  %272 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx124)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block92, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec98, %middle.block92 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %272, %middle.block92 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 2
  %273 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %273, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %273 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 1
  %274 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %274, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i693 = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i693, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !217

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check128 = icmp ult i32 %228, 17
  br i1 %min.iters.check128, label %for.body.i13.i.preheader211, label %vector.ph129

vector.ph129:                                     ; preds = %for.body.i13.i.preheader
  %n.mod.vf130 = and i64 %wide.trip.count.i.i, 15
  %275 = icmp eq i64 %n.mod.vf130, 0
  %276 = select i1 %275, i64 16, i64 %n.mod.vf130
  %n.vec131 = sub nsw i64 %wide.trip.count.i.i, %276
  br label %vector.body127

vector.body127:                                   ; preds = %vector.body127, %vector.ph129
  %index132 = phi i64 [ 0, %vector.ph129 ], [ %index.next133, %vector.body127 ]
  %vec.ind136 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph129 ], [ %vec.ind.next141, %vector.body127 ]
  %vec.phi142 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi158, %vector.body127 ]
  %vec.phi143 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi159, %vector.body127 ]
  %vec.phi144 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi160, %vector.body127 ]
  %vec.phi145 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi161, %vector.body127 ]
  %step.add137 = add <4 x i64> %vec.ind136, <i64 4, i64 4, i64 4, i64 4>
  %step.add138 = add <4 x i64> %vec.ind136, <i64 8, i64 8, i64 8, i64 8>
  %step.add139 = add <4 x i64> %vec.ind136, <i64 12, i64 12, i64 12, i64 12>
  %277 = or i64 %index132, 4
  %278 = or i64 %index132, 8
  %279 = or i64 %index132, 12
  %280 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index132, i32 2
  %281 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %277, i32 2
  %282 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %278, i32 2
  %283 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %279, i32 2
  %284 = bitcast i32* %280 to <16 x i32>*
  %285 = bitcast i32* %281 to <16 x i32>*
  %286 = bitcast i32* %282 to <16 x i32>*
  %287 = bitcast i32* %283 to <16 x i32>*
  %wide.vec146 = load <16 x i32>, <16 x i32>* %284, align 4, !tbaa !182
  %wide.vec147 = load <16 x i32>, <16 x i32>* %285, align 4, !tbaa !182
  %wide.vec148 = load <16 x i32>, <16 x i32>* %286, align 4, !tbaa !182
  %wide.vec149 = load <16 x i32>, <16 x i32>* %287, align 4, !tbaa !182
  %strided.vec150 = shufflevector <16 x i32> %wide.vec146, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec151 = shufflevector <16 x i32> %wide.vec147, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec152 = shufflevector <16 x i32> %wide.vec148, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec153 = shufflevector <16 x i32> %wide.vec149, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %288 = icmp slt <4 x i32> %strided.vec150, zeroinitializer
  %289 = icmp slt <4 x i32> %strided.vec151, zeroinitializer
  %290 = icmp slt <4 x i32> %strided.vec152, zeroinitializer
  %291 = icmp slt <4 x i32> %strided.vec153, zeroinitializer
  %292 = sext <4 x i32> %strided.vec150 to <4 x i64>
  %293 = sext <4 x i32> %strided.vec151 to <4 x i64>
  %294 = sext <4 x i32> %strided.vec152 to <4 x i64>
  %295 = sext <4 x i32> %strided.vec153 to <4 x i64>
  %296 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind136, i32 1
  %297 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add137, i32 1
  %298 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add138, i32 1
  %299 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add139, i32 1
  %wide.masked.gather154 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %296, i32 4, <4 x i1> %288, <4 x i32> undef), !tbaa !178
  %wide.masked.gather155 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %297, i32 4, <4 x i1> %289, <4 x i32> undef), !tbaa !178
  %wide.masked.gather156 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %298, i32 4, <4 x i1> %290, <4 x i32> undef), !tbaa !178
  %wide.masked.gather157 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %299, i32 4, <4 x i1> %291, <4 x i32> undef), !tbaa !178
  %300 = add nsw <4 x i32> %wide.masked.gather154, <i32 -1, i32 -1, i32 -1, i32 -1>
  %301 = add nsw <4 x i32> %wide.masked.gather155, <i32 -1, i32 -1, i32 -1, i32 -1>
  %302 = add nsw <4 x i32> %wide.masked.gather156, <i32 -1, i32 -1, i32 -1, i32 -1>
  %303 = add nsw <4 x i32> %wide.masked.gather157, <i32 -1, i32 -1, i32 -1, i32 -1>
  %304 = sext <4 x i32> %300 to <4 x i64>
  %305 = sext <4 x i32> %301 to <4 x i64>
  %306 = sext <4 x i32> %302 to <4 x i64>
  %307 = sext <4 x i32> %303 to <4 x i64>
  %308 = mul nsw <4 x i64> %304, %292
  %309 = mul nsw <4 x i64> %305, %293
  %310 = mul nsw <4 x i64> %306, %294
  %311 = mul nsw <4 x i64> %307, %295
  %312 = select <4 x i1> %288, <4 x i64> %308, <4 x i64> zeroinitializer
  %predphi158 = add <4 x i64> %vec.phi142, %312
  %313 = select <4 x i1> %289, <4 x i64> %309, <4 x i64> zeroinitializer
  %predphi159 = add <4 x i64> %vec.phi143, %313
  %314 = select <4 x i1> %290, <4 x i64> %310, <4 x i64> zeroinitializer
  %predphi160 = add <4 x i64> %vec.phi144, %314
  %315 = select <4 x i1> %291, <4 x i64> %311, <4 x i64> zeroinitializer
  %predphi161 = add <4 x i64> %vec.phi145, %315
  %index.next133 = add i64 %index132, 16
  %vec.ind.next141 = add <4 x i64> %vec.ind136, <i64 16, i64 16, i64 16, i64 16>
  %316 = icmp eq i64 %index.next133, %n.vec131
  br i1 %316, label %middle.block125, label %vector.body127, !llvm.loop !218

middle.block125:                                  ; preds = %vector.body127
  %bin.rdx162 = add <4 x i64> %predphi159, %predphi158
  %bin.rdx163 = add <4 x i64> %predphi160, %bin.rdx162
  %bin.rdx164 = add <4 x i64> %predphi161, %bin.rdx163
  %317 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx164)
  br label %for.body.i13.i.preheader211

for.body.i13.i.preheader211:                      ; preds = %middle.block125, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec131, %middle.block125 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %317, %middle.block125 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader211, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader211 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader211 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 2
  %318 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %318, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %318 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 1
  %319 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %319, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !219

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %add8.i27.i = phi i64 [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i694 = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %320 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i696 = zext i8 %320 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i696, 7
  %div.i.i697 = lshr i64 %add.i4.i, 3
  %mul.i698 = mul i64 %div.i.i697, %sub.i694
  %321 = trunc i64 %mul.i698 to i32
  %322 = add i32 %321, 7
  %323 = and i32 %322, 7
  %conv204 = xor i32 %323, 7
  %conv205 = zext i32 %conv204 to i64
  %add206 = add i64 %mul.i698, %conv205
  %tobool207.not = icmp ult i64 %add206, 4294967296
  br i1 %tobool207.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687, label %cleanup278.thread

cleanup278.thread:                                ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6.40, i64 0, i64 0)) #16
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #11
  br label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687: ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %324 = icmp sgt i32 %228, 2
  %spec.store.select = select i1 %324, i32 %228, i32 2
  %325 = bitcast [8 x i32]* %tags to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %325) #11
  %arrayinit.begin = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 0
  store i32 14, i32* %arrayinit.begin, align 4, !tbaa !73
  %arrayinit.element = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 1
  %add214 = shl i32 %spec.store.select, 2
  %and215 = add i32 %add214, 4
  %mul216 = and i32 %and215, -8
  %add217 = add i32 %and, 40
  %add218 = add i32 %add217, %mul216
  %add220 = add i32 %add218, %321
  %add221 = add i32 %add220, %conv204
  store i32 %add221, i32* %arrayinit.element, align 4, !tbaa !73
  %arrayinit.element222 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 2
  store i32 6, i32* %arrayinit.element222, align 4, !tbaa !73
  %arrayinit.element223 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 3
  store i32 8, i32* %arrayinit.element223, align 4, !tbaa !73
  %arrayinit.element224 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 4
  %idxprom225 = sext i32 %type_code to i64
  %arrayidx226 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE, i64 0, i64 %idxprom225
  %326 = load i8, i8* %arrayidx226, align 1, !tbaa !14
  %conv227 = zext i8 %326 to i32
  store i32 %conv227, i32* %arrayinit.element224, align 4, !tbaa !73
  %arrayinit.element228 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 5
  store i32 1, i32* %arrayinit.element228, align 4, !tbaa !73
  %arrayinit.element229 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 6
  store i32 5, i32* %arrayinit.element229, align 4, !tbaa !73
  %arrayinit.element230 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 7
  store i32 %add214, i32* %arrayinit.element230, align 4, !tbaa !73
  %call.i683 = call i64 @fwrite(i8* nonnull %325, i64 32, i64 1, i8* nonnull %call.i598) #16
  %cmp.i684.not = icmp eq i64 %call.i683, 0
  br i1 %cmp.i684.not, label %cleanup278, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %327 = bitcast [4 x i32]* %extents to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %327) #11
  %arrayinit.begin235 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 0
  %328 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %328, i32* %arrayinit.begin235, align 4, !tbaa !73
  %arrayinit.element238 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 1
  %329 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %329, i32* %arrayinit.element238, align 4, !tbaa !73
  %arrayinit.element241 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 2
  %330 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %330, i32* %arrayinit.element241, align 4, !tbaa !73
  %arrayinit.element244 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 3
  %331 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %331, i32* %arrayinit.element244, align 4, !tbaa !73
  %conv248 = sext i32 %mul216 to i64
  %call.i672 = call i64 @fwrite(i8* nonnull %327, i64 %conv248, i64 1, i8* nonnull %call.i598) #16
  %cmp.i673.not = icmp eq i64 %call.i672, 0
  br i1 %cmp.i673.not, label %cleanup274, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %332 = bitcast [2 x i32]* %name_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %332) #11
  %arrayinit.begin252 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 0
  store i32 1, i32* %arrayinit.begin252, align 4, !tbaa !73
  %arrayinit.element253 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 1
  store i32 %conv184, i32* %arrayinit.element253, align 4, !tbaa !73
  %call.i660 = call i64 @fwrite(i8* nonnull %332, i64 8, i64 1, i8* nonnull %call.i598) #16
  %cmp.i661.not = icmp eq i64 %call.i660, 0
  br i1 %cmp.i661.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %conv258 = zext i32 %and to i64
  %call.i648 = call i64 @fwrite(i8* nonnull %62, i64 %conv258, i64 1, i8* nonnull %call.i598) #16
  %cmp.i649.not = icmp eq i64 %call.i648, 0
  br i1 %cmp.i649.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652
  %333 = bitcast [2 x i32]* %payload_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %333) #11
  %arrayinit.begin262 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 0
  %arrayidx264 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE, i64 0, i64 %idxprom225
  %334 = load i8, i8* %arrayidx264, align 1, !tbaa !14
  %conv265 = zext i8 %334 to i32
  store i32 %conv265, i32* %arrayinit.begin262, align 4, !tbaa !73
  %arrayinit.element266 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 1
  store i32 %321, i32* %arrayinit.element266, align 4, !tbaa !73
  %call.i638 = call i64 @fwrite(i8* nonnull %333, i64 8, i64 1, i8* nonnull %call.i598) #16
  %cmp.i639.not = icmp eq i64 %call.i638, 0
  %cleanup.dest.slot.5 = zext i1 %cmp.i639.not to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %333) #11
  br label %cleanup273

cleanup273:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %cleanup.dest.slot.6 = phi i32 [ %cleanup.dest.slot.5, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  %retval.6 = phi i32 [ -11, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ -9, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ -10, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %332) #11
  br label %cleanup274

cleanup274:                                       ; preds = %cleanup273, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %cleanup.dest.slot.7 = phi i32 [ %cleanup.dest.slot.6, %cleanup273 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  %retval.7 = phi i32 [ %retval.6, %cleanup273 ], [ -8, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %327) #11
  br label %cleanup278

cleanup278:                                       ; preds = %cleanup274, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %cleanup.dest.slot.8 = phi i32 [ %cleanup.dest.slot.7, %cleanup274 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  %retval.8 = phi i32 [ %retval.7, %cleanup274 ], [ -7, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %325) #11
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #11
  %cond442 = icmp eq i32 %cleanup.dest.slot.8, 0
  br i1 %cond442, label %if.end311, label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631: ; preds = %if.else164
  %335 = bitcast [5 x i32]* %header289 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %335) #11
  %arrayinit.begin290 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 0
  %336 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %336, i32* %arrayinit.begin290, align 4, !tbaa !73
  %arrayinit.element293 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 1
  %337 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %337, i32* %arrayinit.element293, align 4, !tbaa !73
  %arrayinit.element296 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 2
  %338 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %338, i32* %arrayinit.element296, align 4, !tbaa !73
  %arrayinit.element299 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 3
  %339 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %339, i32* %arrayinit.element299, align 4, !tbaa !73
  %arrayinit.element302 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 4
  store i32 %type_code, i32* %arrayinit.element302, align 4, !tbaa !73
  %call.i627 = call i64 @fwrite(i8* nonnull %335, i64 20, i64 1, i8* nonnull %call.i598) #16
  %cmp.i628.not = icmp eq i64 %call.i627, 0
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %335) #11
  br i1 %cmp.i628.not, label %cleanup433, label %if.end311

if.end311:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup154.thread
  %final_padding_bytes.0 = phi i32 [ %conv204, %cleanup278 ], [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ 0, %cleanup154.thread ]
  %340 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %340) #11
  %div = udiv i32 4096, %div.i
  %341 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %cmp320856 = icmp sgt i32 %341, 0
  br i1 %cmp320856, label %for.body322.lr.ph, label %if.end412

for.body322.lr.ph:                                ; preds = %if.end311
  %342 = load i32, i32* %min.i.3, align 4, !tbaa !181
  %343 = bitcast [4 x i32]* %idx to i8*
  %arrayinit.begin357 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 0
  %arrayinit.element358 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 1
  %arrayinit.element359 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 2
  %arrayinit.element360 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 3
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %conv368 = zext i32 %div.i to i64
  %mul373 = mul nuw nsw i32 %div, %div.i
  %conv374 = zext i32 %mul373 to i64
  %.pre891 = load i32, i32* %min.i.2, align 4, !tbaa !181
  %.pre892 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  br label %for.body322

for.body322:                                      ; preds = %for.inc399, %for.body322.lr.ph
  %344 = phi i32 [ %342, %for.body322.lr.ph ], [ %430, %for.inc399 ]
  %345 = phi i32 [ %341, %for.body322.lr.ph ], [ %431, %for.inc399 ]
  %346 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %432, %for.inc399 ]
  %347 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %433, %for.inc399 ]
  %348 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %434, %for.inc399 ]
  %349 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %435, %for.inc399 ]
  %dim3.0858 = phi i32 [ %342, %for.body322.lr.ph ], [ %inc400, %for.inc399 ]
  %counter.0857 = phi i32 [ 0, %for.body322.lr.ph ], [ %counter.1.lcssa, %for.inc399 ]
  %cmp331848 = icmp sgt i32 %348, 0
  br i1 %cmp331848, label %for.body333.preheader, label %for.inc399

for.body333.preheader:                            ; preds = %for.body322
  %.pre893 = load i32, i32* %min.i.1, align 4, !tbaa !181
  %.pre894 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  br label %for.body333

for.body333:                                      ; preds = %for.inc394, %for.body333.preheader
  %350 = phi i32 [ %424, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %351 = phi i32 [ %425, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %352 = phi i32 [ %426, %for.inc394 ], [ %346, %for.body333.preheader ]
  %353 = phi i32 [ %427, %for.inc394 ], [ %347, %for.body333.preheader ]
  %354 = phi i32 [ %428, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %355 = phi i32 [ %429, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %dim2.0850 = phi i32 [ %inc395, %for.inc394 ], [ %349, %for.body333.preheader ]
  %counter.1849 = phi i32 [ %counter.2.lcssa, %for.inc394 ], [ %counter.0857, %for.body333.preheader ]
  %cmp342839 = icmp sgt i32 %354, 0
  br i1 %cmp342839, label %for.body344.preheader, label %for.inc394

for.body344.preheader:                            ; preds = %for.body333
  %.pre = load i32, i32* %extent.i, align 4, !tbaa !178
  br label %for.body344

for.body344:                                      ; preds = %for.body344.preheader, %for.inc389
  %356 = phi i32 [ %421, %for.inc389 ], [ %350, %for.body344.preheader ]
  %357 = phi i32 [ %422, %for.inc389 ], [ %351, %for.body344.preheader ]
  %358 = phi i32 [ %423, %for.inc389 ], [ %.pre, %for.body344.preheader ]
  %dim1.0841 = phi i32 [ %inc390, %for.inc389 ], [ %355, %for.body344.preheader ]
  %counter.2840 = phi i32 [ %counter.6797, %for.inc389 ], [ %counter.1849, %for.body344.preheader ]
  %cmp353834 = icmp sgt i32 %358, 0
  br i1 %cmp353834, label %for.body355.preheader, label %for.inc389

for.body355.preheader:                            ; preds = %for.body344
  %359 = load i32, i32* %min.i, align 4, !tbaa !181
  br label %for.body355

for.body355:                                      ; preds = %for.inc384, %for.body355.preheader
  %dim0.0836 = phi i32 [ %inc385, %for.inc384 ], [ %359, %for.body355.preheader ]
  %counter.3835 = phi i32 [ %counter.4, %for.inc384 ], [ %counter.2840, %for.body355.preheader ]
  %inc356 = add nsw i32 %counter.3835, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %343) #11
  store i32 %dim0.0836, i32* %arrayinit.begin357, align 4, !tbaa !73
  store i32 %dim1.0841, i32* %arrayinit.element358, align 4, !tbaa !73
  store i32 %dim2.0850, i32* %arrayinit.element359, align 4, !tbaa !73
  store i32 %dim3.0858, i32* %arrayinit.element360, align 4, !tbaa !73
  %360 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17.i = icmp sgt i32 %360, 0
  br i1 %cmp17.i, label %for.body.lr.ph.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit

for.body.lr.ph.i:                                 ; preds = %for.body355
  %361 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %wide.trip.count.i = zext i32 %360 to i64
  %stride.i621920 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 2
  %362 = load i32, i32* %stride.i621920, align 4, !tbaa !182
  %conv.i622921 = sext i32 %362 to i64
  %min.i623922 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 0
  %363 = load i32, i32* %min.i623922, align 4, !tbaa !181
  %sub.i923 = sub nsw i32 %dim0.0836, %363
  %conv7.i924 = sext i32 %sub.i923 to i64
  %mul.i925 = mul nsw i64 %conv7.i924, %conv.i622921
  %exitcond.not.i927 = icmp eq i32 %360, 1
  br i1 %exitcond.not.i927, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.preheader, !llvm.loop !220

for.body.i.for.body.i_crit_edge.preheader:        ; preds = %for.body.lr.ph.i
  %stride.i62126 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 2
  %364 = load i32, i32* %stride.i62126, align 4, !tbaa !182
  %conv.i62227 = sext i32 %364 to i64
  %min.i62328 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 0
  %365 = load i32, i32* %min.i62328, align 4, !tbaa !181
  %sub.i29 = sub nsw i32 %dim1.0841, %365
  %conv7.i30 = sext i32 %sub.i29 to i64
  %mul.i31 = mul nsw i64 %conv7.i30, %conv.i62227
  %add.i62432 = add nsw i64 %mul.i31, %mul.i925
  %exitcond.not.i33 = icmp eq i32 %360, 2
  br i1 %exitcond.not.i33, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph, !llvm.loop !220

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph: ; preds = %for.body.i.for.body.i_crit_edge.preheader
  %366 = add nsw i64 %wide.trip.count.i, -2
  %min.iters.check169 = icmp ult i64 %366, 17
  br i1 %min.iters.check169, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, label %vector.ph170

vector.ph170:                                     ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %n.mod.vf171 = and i64 %366, 15
  %367 = icmp eq i64 %n.mod.vf171, 0
  %368 = select i1 %367, i64 16, i64 %n.mod.vf171
  %n.vec172 = sub nsw i64 %366, %368
  %ind.end176 = add nsw i64 %n.vec172, 2
  %369 = insertelement <4 x i64> <i64 poison, i64 0, i64 0, i64 0>, i64 %add.i62432, i32 0
  br label %vector.body168

vector.body168:                                   ; preds = %vector.body168, %vector.ph170
  %index173 = phi i64 [ 0, %vector.ph170 ], [ %index.next174, %vector.body168 ]
  %vec.phi179 = phi <4 x i64> [ %369, %vector.ph170 ], [ %409, %vector.body168 ]
  %vec.phi180 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %410, %vector.body168 ]
  %vec.phi181 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %411, %vector.body168 ]
  %vec.phi182 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %412, %vector.body168 ]
  %offset.idx178 = or i64 %index173, 2
  %370 = or i64 %index173, 6
  %371 = or i64 %index173, 10
  %372 = or i64 %index173, 14
  %373 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %offset.idx178
  %374 = bitcast i32* %373 to <4 x i32>*
  %wide.load183 = load <4 x i32>, <4 x i32>* %374, align 4, !tbaa !73
  %375 = getelementptr inbounds i32, i32* %373, i64 4
  %376 = bitcast i32* %375 to <4 x i32>*
  %wide.load184 = load <4 x i32>, <4 x i32>* %376, align 4, !tbaa !73
  %377 = getelementptr inbounds i32, i32* %373, i64 8
  %378 = bitcast i32* %377 to <4 x i32>*
  %wide.load185 = load <4 x i32>, <4 x i32>* %378, align 4, !tbaa !73
  %379 = getelementptr inbounds i32, i32* %373, i64 12
  %380 = bitcast i32* %379 to <4 x i32>*
  %wide.load186 = load <4 x i32>, <4 x i32>* %380, align 4, !tbaa !73
  %381 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %offset.idx178, i32 2
  %382 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %370, i32 2
  %383 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %371, i32 2
  %384 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %372, i32 2
  %385 = getelementptr inbounds i32, i32* %381, i64 -2
  %386 = bitcast i32* %385 to <16 x i32>*
  %387 = getelementptr inbounds i32, i32* %382, i64 -2
  %388 = bitcast i32* %387 to <16 x i32>*
  %389 = getelementptr inbounds i32, i32* %383, i64 -2
  %390 = bitcast i32* %389 to <16 x i32>*
  %391 = getelementptr inbounds i32, i32* %384, i64 -2
  %392 = bitcast i32* %391 to <16 x i32>*
  %wide.vec187 = load <16 x i32>, <16 x i32>* %386, align 4, !tbaa !73
  %wide.vec188 = load <16 x i32>, <16 x i32>* %388, align 4, !tbaa !73
  %wide.vec189 = load <16 x i32>, <16 x i32>* %390, align 4, !tbaa !73
  %wide.vec190 = load <16 x i32>, <16 x i32>* %392, align 4, !tbaa !73
  %strided.vec191 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec192 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec193 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec194 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec195 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec196 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec197 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec198 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %393 = sext <4 x i32> %strided.vec195 to <4 x i64>
  %394 = sext <4 x i32> %strided.vec196 to <4 x i64>
  %395 = sext <4 x i32> %strided.vec197 to <4 x i64>
  %396 = sext <4 x i32> %strided.vec198 to <4 x i64>
  %397 = sub nsw <4 x i32> %wide.load183, %strided.vec191
  %398 = sub nsw <4 x i32> %wide.load184, %strided.vec192
  %399 = sub nsw <4 x i32> %wide.load185, %strided.vec193
  %400 = sub nsw <4 x i32> %wide.load186, %strided.vec194
  %401 = sext <4 x i32> %397 to <4 x i64>
  %402 = sext <4 x i32> %398 to <4 x i64>
  %403 = sext <4 x i32> %399 to <4 x i64>
  %404 = sext <4 x i32> %400 to <4 x i64>
  %405 = mul nsw <4 x i64> %401, %393
  %406 = mul nsw <4 x i64> %402, %394
  %407 = mul nsw <4 x i64> %403, %395
  %408 = mul nsw <4 x i64> %404, %396
  %409 = add <4 x i64> %405, %vec.phi179
  %410 = add <4 x i64> %406, %vec.phi180
  %411 = add <4 x i64> %407, %vec.phi181
  %412 = add <4 x i64> %408, %vec.phi182
  %index.next174 = add i64 %index173, 16
  %413 = icmp eq i64 %index.next174, %n.vec172
  br i1 %413, label %middle.block166, label %vector.body168, !llvm.loop !221

middle.block166:                                  ; preds = %vector.body168
  %bin.rdx199 = add <4 x i64> %410, %409
  %bin.rdx200 = add <4 x i64> %411, %bin.rdx199
  %bin.rdx201 = add <4 x i64> %412, %bin.rdx200
  %414 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx201)
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader: ; preds = %middle.block166, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %indvars.iv.next.i35.ph = phi i64 [ 2, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %ind.end176, %middle.block166 ]
  %add.i62434.ph = phi i64 [ %add.i62432, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %414, %middle.block166 ]
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge: ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge
  %indvars.iv.next.i35 = phi i64 [ %indvars.iv.next.i, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %indvars.iv.next.i35.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %add.i62434 = phi i64 [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %add.i62434.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %arrayidx3.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %indvars.iv.next.i35
  %.pre895.pre = load i32, i32* %arrayidx3.i.phi.trans.insert.phi.trans.insert, align 4, !tbaa !73
  %stride.i621 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 2
  %415 = load i32, i32* %stride.i621, align 4, !tbaa !182
  %conv.i622 = sext i32 %415 to i64
  %min.i623 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 0
  %416 = load i32, i32* %min.i623, align 4, !tbaa !181
  %sub.i = sub nsw i32 %.pre895.pre, %416
  %conv7.i = sext i32 %sub.i to i64
  %mul.i = mul nsw i64 %conv7.i, %conv.i622
  %add.i624 = add nsw i64 %mul.i, %add.i62434
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i35, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, !llvm.loop !222

_ZNK15halide_buffer_t10address_ofEPKi.exit:       ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, %for.body.i.for.body.i_crit_edge.preheader, %for.body.lr.ph.i, %for.body355
  %index.0.lcssa.i = phi i64 [ 0, %for.body355 ], [ %mul.i925, %for.body.lr.ph.i ], [ %add.i62432, %for.body.i.for.body.i_crit_edge.preheader ], [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ]
  %417 = load i8*, i8** %host.i, align 8, !tbaa !172
  %418 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %418 to i64
  %add.i.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i.i, 3
  %mul9.i = mul nsw i64 %div.i.i, %index.0.lcssa.i
  %add.ptr.i = getelementptr inbounds i8, i8* %417, i64 %mul9.i
  %mul366 = mul nsw i32 %counter.3835, %div.i
  %idx.ext = sext i32 %mul366 to i64
  %add.ptr367 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 %idx.ext
  %call369 = call i8* @memcpy(i8* nonnull %add.ptr367, i8* %add.ptr.i, i64 %conv368) #16
  %cmp370 = icmp eq i32 %inc356, %div
  br i1 %cmp370, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, label %for.inc384

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619: ; preds = %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %call.i615 = call i64 @fwrite(i8* nonnull %340, i64 %conv374, i64 1, i8* nonnull %call.i598) #16
  %cmp.i616.not = icmp eq i64 %call.i615, 0
  br i1 %cmp.i616.not, label %cleanup425.loopexit, label %for.inc384

for.inc384:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %counter.4 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619 ], [ %inc356, %_ZNK15halide_buffer_t10address_ofEPKi.exit ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #11
  %inc385 = add nsw i32 %dim0.0836, 1
  %419 = load i32, i32* %extent.i, align 4, !tbaa !178
  %420 = load i32, i32* %min.i, align 4, !tbaa !181
  %add352 = add nsw i32 %420, %419
  %cmp353 = icmp slt i32 %inc385, %add352
  br i1 %cmp353, label %for.body355, label %for.inc389.loopexit, !llvm.loop !223

for.inc389.loopexit:                              ; preds = %for.inc384
  %.pre15 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %.pre16 = load i32, i32* %min.i.1, align 4, !tbaa !181
  br label %for.inc389

for.inc389:                                       ; preds = %for.inc389.loopexit, %for.body344
  %421 = phi i32 [ %356, %for.body344 ], [ %.pre16, %for.inc389.loopexit ]
  %422 = phi i32 [ %357, %for.body344 ], [ %.pre15, %for.inc389.loopexit ]
  %423 = phi i32 [ %358, %for.body344 ], [ %419, %for.inc389.loopexit ]
  %counter.6797 = phi i32 [ %counter.2840, %for.body344 ], [ %counter.4, %for.inc389.loopexit ]
  %inc390 = add nsw i32 %dim1.0841, 1
  %add341 = add nsw i32 %421, %422
  %cmp342 = icmp slt i32 %inc390, %add341
  br i1 %cmp342, label %for.body344, label %for.inc394.loopexit, !llvm.loop !224

for.inc394.loopexit:                              ; preds = %for.inc389
  %.pre896 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %.pre897 = load i32, i32* %min.i.2, align 4, !tbaa !181
  br label %for.inc394

for.inc394:                                       ; preds = %for.inc394.loopexit, %for.body333
  %424 = phi i32 [ %350, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %425 = phi i32 [ %351, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %426 = phi i32 [ %352, %for.body333 ], [ %.pre897, %for.inc394.loopexit ]
  %427 = phi i32 [ %353, %for.body333 ], [ %.pre896, %for.inc394.loopexit ]
  %428 = phi i32 [ %354, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %429 = phi i32 [ %355, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %counter.2.lcssa = phi i32 [ %counter.1849, %for.body333 ], [ %counter.6797, %for.inc394.loopexit ]
  %inc395 = add nsw i32 %dim2.0850, 1
  %add330 = add nsw i32 %427, %426
  %cmp331 = icmp slt i32 %inc395, %add330
  br i1 %cmp331, label %for.body333, label %for.inc399.loopexit, !llvm.loop !225

for.inc399.loopexit:                              ; preds = %for.inc394
  %.pre898 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %.pre899 = load i32, i32* %min.i.3, align 4, !tbaa !181
  br label %for.inc399

for.inc399:                                       ; preds = %for.inc399.loopexit, %for.body322
  %430 = phi i32 [ %344, %for.body322 ], [ %.pre899, %for.inc399.loopexit ]
  %431 = phi i32 [ %345, %for.body322 ], [ %.pre898, %for.inc399.loopexit ]
  %432 = phi i32 [ %346, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %433 = phi i32 [ %347, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %434 = phi i32 [ %348, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %435 = phi i32 [ %349, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %counter.1.lcssa = phi i32 [ %counter.0857, %for.body322 ], [ %counter.2.lcssa, %for.inc399.loopexit ]
  %inc400 = add nsw i32 %dim3.0858, 1
  %add319 = add nsw i32 %431, %430
  %cmp320 = icmp slt i32 %inc400, %add319
  br i1 %cmp320, label %for.body322, label %for.end403, !llvm.loop !226

for.end403:                                       ; preds = %for.inc399
  %cmp404 = icmp sgt i32 %counter.1.lcssa, 0
  br i1 %cmp404, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, label %if.end412

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612: ; preds = %for.end403
  %mul407 = mul nsw i32 %counter.1.lcssa, %div.i
  %conv408 = sext i32 %mul407 to i64
  %call.i608 = call i64 @fwrite(i8* nonnull %340, i64 %conv408, i64 1, i8* nonnull %call.i598) #16
  %cmp.i609.not = icmp eq i64 %call.i608, 0
  br i1 %cmp.i609.not, label %cleanup425, label %if.end412

if.end412:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, %for.end403, %if.end311
  %436 = bitcast i64* %zero to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %436) #11
  store i64 0, i64* %zero, align 8, !tbaa !110
  %tobool413.not = icmp eq i32 %final_padding_bytes.0, 0
  br i1 %tobool413.not, label %if.end423, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit: ; preds = %if.end412
  %conv415 = zext i32 %final_padding_bytes.0 to i64
  %call.i604 = call i64 @fwrite(i8* nonnull %436, i64 %conv415, i64 1, i8* nonnull %call.i598) #16
  %cmp.i605.not = icmp eq i64 %call.i604, 0
  br i1 %cmp.i605.not, label %cleanup424, label %if.end423

if.end423:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit, %if.end412
  br label %cleanup424

cleanup424:                                       ; preds = %if.end423, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit
  %retval.21 = phi i32 [ 0, %if.end423 ], [ -16, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %436) #11
  br label %cleanup425

cleanup425.loopexit:                              ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #11
  br label %cleanup425

cleanup425:                                       ; preds = %cleanup425.loopexit, %cleanup424, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612
  %retval.22 = phi i32 [ %retval.21, %cleanup424 ], [ -14, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612 ], [ -13, %cleanup425.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %340) #11
  br label %cleanup433

cleanup433:                                       ; preds = %cleanup425, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup278.thread, %cleanup154
  %retval.23 = phi i32 [ %retval.22, %cleanup425 ], [ %retval.4, %cleanup154 ], [ %retval.8, %cleanup278 ], [ -12, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ -6, %cleanup278.thread ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #11
  %call.i = call i32 @fclose(i8* nonnull %call.i598) #16
  br label %return

return:                                           ; preds = %cleanup433, %if.end6, %if.end2, %if.then1, %if.then
  %retval.26 = phi i32 [ -1, %if.then ], [ -1, %if.then1 ], [ %call3, %if.end2 ], [ %retval.23, %cleanup433 ], [ -2, %if.end6 ]
  ret i32 %retval.26

for.body.1:                                       ; preds = %for.body.lr.ph
  %arrayidx.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 1
  %arrayidx14.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1
  %437 = bitcast %struct.halide_dimension_t* %arrayidx14.1 to i8*
  %438 = bitcast %struct.halide_dimension_t* %arrayidx.1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %437, i8* nonnull align 4 dereferenceable(16) %438, i64 16, i1 false), !tbaa.struct !177
  %extent.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %439 = load i32, i32* %extent.1, align 4, !tbaa !178
  %conv903.1 = zext i32 %439 to i64
  %mul.1 = mul nuw i64 %conv903, %conv903.1
  %exitcond.not17.1 = icmp eq i64 %11, 2
  br i1 %exitcond.not17.1, label %for.cond19.preheader, label %for.body.2, !llvm.loop !180

for.body.2:                                       ; preds = %for.body.1
  %arrayidx.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 2
  %arrayidx14.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2
  %440 = bitcast %struct.halide_dimension_t* %arrayidx14.2 to i8*
  %441 = bitcast %struct.halide_dimension_t* %arrayidx.2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %440, i8* nonnull align 4 dereferenceable(16) %441, i64 16, i1 false), !tbaa.struct !177
  %extent.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %442 = load i32, i32* %extent.2, align 4, !tbaa !178
  %conv903.2 = zext i32 %442 to i64
  %mul.2 = mul i64 %mul.1, %conv903.2
  %exitcond.not17.2 = icmp eq i64 %11, 3
  br i1 %exitcond.not17.2, label %for.cond19.preheader, label %for.body.3, !llvm.loop !180

for.body.3:                                       ; preds = %for.body.2
  %arrayidx.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 3
  %arrayidx14.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3
  %443 = bitcast %struct.halide_dimension_t* %arrayidx14.3 to i8*
  %444 = bitcast %struct.halide_dimension_t* %arrayidx.3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %443, i8* nonnull align 4 dereferenceable(16) %444, i64 16, i1 false), !tbaa.struct !177
  %extent.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %445 = load i32, i32* %extent.3, align 4, !tbaa !178
  %conv903.3 = zext i32 %445 to i64
  %mul.3 = mul i64 %mul.2, %conv903.3
  br label %for.cond19.preheader
}

declare i64 @fwrite(i8*, i64, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_cache_cleanup() #0 {
entry:
  tail call void @halide_memoization_cache_cleanup() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_memoization_cache_cleanup() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %while.end
  store i64 0, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  ret void

for.body:                                         ; preds = %while.end, %entry
  %__begin1.018 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %while.end ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  %cmp2.not16 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not16, label %while.end, label %while.body

while.body:                                       ; preds = %for.body, %while.body
  %entry1.017 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %while.body ], [ %0, %for.body ]
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next3, align 8, !tbaa !227
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.017) #17
  %2 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %2) #16
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp2.not, label %while.end, label %while.body, !llvm.loop !229

while.end:                                        ; preds = %while.body, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this) local_unnamed_addr #0 align 2 {
entry:
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  %0 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp11.not = icmp eq i32 %0, 0
  br i1 %cmp11.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  %1 = load i8*, i8** %metadata_storage, align 8, !tbaa !231
  tail call void @halide_free(i8* null, i8* %1) #16
  ret void

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %2, i64 %indvars.iv
  %call = tail call i32 @halide_device_free(i8* null, %struct.halide_buffer_t* %arrayidx) #16
  %3 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %3, i64 %indvars.iv, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %4) #17
  %5 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call6 to i8*
  tail call void @halide_free(i8* null, i8* %5) #16
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %6 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %7 = zext i32 %6 to i64
  %cmp = icmp ult i64 %indvars.iv.next, %7
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !233
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) local_unnamed_addr #2 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %host, i64 -64
  %0 = bitcast i8* %add.ptr to %"struct.Halide::Runtime::Internal::CacheBlockHeader"*
  ret %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %0
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp41 = icmp sgt i32 %d, -1
  br i1 %cmp41, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.042 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %idxprom36 = zext i32 %d.addr.042 to i64
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom36
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.042, -1
  %cmp = icmp sgt i32 %d.addr.042, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !234

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.042, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %idxprom5 = sext i32 %d.addr.0.lcssa to i64
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom5
  %1 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp737.not = icmp eq i64 %1, 0
  br i1 %cmp737.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 4, i64 %idxprom5
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 5, i64 %idxprom5
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !235
  %add = add i64 %2, %src_off
  %3 = inttoptr i64 %add to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !237
  %add3 = add i64 %4, %dst_off
  %5 = inttoptr i64 %add3 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !238
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i64 %6) #16
  br label %if.end

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.040 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %src_off.addr.039 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body ]
  %dst_off.addr.038 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add13, %for.body ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.039, i64 %dst_off.addr.038) #17
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !110
  %add10 = add i64 %7, %src_off.addr.039
  %8 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %add13 = add i64 %8, %dst_off.addr.038
  %inc = add nuw i64 %i.040, 1
  %9 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp7 = icmp ult i64 %inc, %9
  br i1 %cmp7, label %for.body, label %if.end, !llvm.loop !239

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !235
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !237
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !240
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %2 = ptrtoint i8* %1 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %3 = load i64, i64* %device, align 8, !tbaa !174
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !235
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %4 = load i8*, i8** %host5, align 8, !tbaa !172
  %5 = ptrtoint i8* %4 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %6 = load i64, i64* %device7, align 8, !tbaa !174
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %5, %cond.true4 ], [ %6, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !237
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 4, i32 1
  %7 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %7 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !238
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 0
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 0
  %arrayidx14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 0
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 1
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 1
  %arrayidx14.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 1
  %8 = bitcast i64* %arrayidx to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %8, align 8, !tbaa !110
  %9 = bitcast i64* %arrayidx12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %9, align 8, !tbaa !110
  %10 = bitcast i64* %arrayidx14 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %10, align 8, !tbaa !110
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 4
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 4
  %arrayidx14.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 4
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 5
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 5
  %arrayidx14.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 5
  %11 = bitcast i64* %arrayidx.4 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %11, align 8, !tbaa !110
  %12 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %12, align 8, !tbaa !110
  %13 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 8
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 8
  %arrayidx14.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 8
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 9
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 9
  %arrayidx14.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 9
  %14 = bitcast i64* %arrayidx.8 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %14, align 8, !tbaa !110
  %15 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %15, align 8, !tbaa !110
  %16 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %16, align 8, !tbaa !110
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 12
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 12
  %arrayidx14.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 12
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 13
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 13
  %arrayidx14.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 13
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 14
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 14
  %arrayidx14.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 14
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 15
  %17 = bitcast i64* %arrayidx.12 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %17, align 8, !tbaa !110
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 15
  %18 = bitcast i64* %arrayidx12.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %18, align 8, !tbaa !110
  %arrayidx14.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 15
  %19 = bitcast i64* %arrayidx14.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %19, align 8, !tbaa !110
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %20 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17272 = icmp sgt i32 %20, 0
  br i1 %cmp17272, label %for.body19.lr.ph, label %for.cond.cleanup18

for.body19.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %21 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %dim23 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim23, align 8, !tbaa !176
  %wide.trip.count = zext i32 %20 to i64
  %min.iters.check = icmp ult i32 %20, 17
  br i1 %min.iters.check, label %for.body19.preheader, label %vector.ph

for.body19.preheader:                             ; preds = %middle.block, %for.body19.lr.ph
  %indvars.iv284.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %n.vec, %middle.block ]
  %.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %73, %middle.block ]
  br label %for.body19

vector.ph:                                        ; preds = %for.body19.lr.ph
  %n.mod.vf = and i64 %wide.trip.count, 15
  %23 = icmp eq i64 %n.mod.vf, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count, %24
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %68, %vector.body ]
  %vec.phi2 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %69, %vector.body ]
  %vec.phi3 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %70, %vector.body ]
  %vec.phi4 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %71, %vector.body ]
  %25 = or i64 %index, 4
  %26 = or i64 %index, 8
  %27 = or i64 %index, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %index, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %27, i32 2
  %32 = getelementptr inbounds i32, i32* %28, i64 -2
  %33 = bitcast i32* %32 to <16 x i32>*
  %34 = getelementptr inbounds i32, i32* %29, i64 -2
  %35 = bitcast i32* %34 to <16 x i32>*
  %36 = getelementptr inbounds i32, i32* %30, i64 -2
  %37 = bitcast i32* %36 to <16 x i32>*
  %38 = getelementptr inbounds i32, i32* %31, i64 -2
  %39 = bitcast i32* %38 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !73
  %wide.vec5 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !73
  %wide.vec6 = load <16 x i32>, <16 x i32>* %37, align 4, !tbaa !73
  %wide.vec7 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !73
  %strided.vec11 = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec5, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec6, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec7, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %40 = sext <4 x i32> %strided.vec11 to <4 x i64>
  %41 = sext <4 x i32> %strided.vec12 to <4 x i64>
  %42 = sext <4 x i32> %strided.vec13 to <4 x i64>
  %43 = sext <4 x i32> %strided.vec14 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 0
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 0
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 0
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 0
  %48 = bitcast i32* %44 to <16 x i32>*
  %49 = bitcast i32* %45 to <16 x i32>*
  %50 = bitcast i32* %46 to <16 x i32>*
  %51 = bitcast i32* %47 to <16 x i32>*
  %wide.vec15 = load <16 x i32>, <16 x i32>* %48, align 4, !tbaa !181
  %wide.vec16 = load <16 x i32>, <16 x i32>* %49, align 4, !tbaa !181
  %wide.vec17 = load <16 x i32>, <16 x i32>* %50, align 4, !tbaa !181
  %wide.vec18 = load <16 x i32>, <16 x i32>* %51, align 4, !tbaa !181
  %52 = sub nsw <16 x i32> %wide.vec15, %wide.vec
  %53 = shufflevector <16 x i32> %52, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %54 = sub nsw <16 x i32> %wide.vec16, %wide.vec5
  %55 = shufflevector <16 x i32> %54, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %56 = sub nsw <16 x i32> %wide.vec17, %wide.vec6
  %57 = shufflevector <16 x i32> %56, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %58 = sub nsw <16 x i32> %wide.vec18, %wide.vec7
  %59 = shufflevector <16 x i32> %58, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = sext <4 x i32> %53 to <4 x i64>
  %61 = sext <4 x i32> %55 to <4 x i64>
  %62 = sext <4 x i32> %57 to <4 x i64>
  %63 = sext <4 x i32> %59 to <4 x i64>
  %64 = mul nsw <4 x i64> %60, %40
  %65 = mul nsw <4 x i64> %61, %41
  %66 = mul nsw <4 x i64> %62, %42
  %67 = mul nsw <4 x i64> %63, %43
  %68 = add <4 x i64> %64, %vec.phi
  %69 = add <4 x i64> %65, %vec.phi2
  %70 = add <4 x i64> %66, %vec.phi3
  %71 = add <4 x i64> %67, %vec.phi4
  %index.next = add i64 %index, 16
  %72 = icmp eq i64 %index.next, %n.vec
  br i1 %72, label %middle.block, label %vector.body, !llvm.loop !241

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %69, %68
  %bin.rdx23 = add <4 x i64> %70, %bin.rdx
  %bin.rdx24 = add <4 x i64> %71, %bin.rdx23
  %73 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx24)
  br label %for.body19.preheader

for.cond.cleanup18:                               ; preds = %for.body19, %cond.end8
  %74 = phi i64 [ 0, %cond.end8 ], [ %add, %for.body19 ]
  %mul37 = mul i64 %74, %conv
  store i64 %mul37, i64* %src_begin, align 8, !tbaa !240
  %dimensions39 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %75 = load i32, i32* %dimensions39, align 4, !tbaa !175
  %cmp40.not = icmp eq i32 %20, %75
  br i1 %cmp40.not, label %lor.lhs.false, label %if.then

for.body19:                                       ; preds = %for.body19.preheader, %for.body19
  %indvars.iv284 = phi i64 [ %indvars.iv.next285, %for.body19 ], [ %indvars.iv284.ph, %for.body19.preheader ]
  %76 = phi i64 [ %add, %for.body19 ], [ %.ph, %for.body19.preheader ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 2
  %77 = load i32, i32* %stride, align 4, !tbaa !182
  %conv22 = sext i32 %77 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv284, i32 0
  %78 = load i32, i32* %min, align 4, !tbaa !181
  %min29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 0
  %79 = load i32, i32* %min29, align 4, !tbaa !181
  %sub = sub nsw i32 %78, %79
  %conv30 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv30, %conv22
  %add = add i64 %mul, %76
  %indvars.iv.next285 = add nuw nsw i64 %indvars.iv284, 1
  %exitcond286.not = icmp eq i64 %indvars.iv.next285, %wide.trip.count
  br i1 %exitcond286.not, label %for.cond.cleanup18, label %for.body19, !llvm.loop !242

lor.lhs.false:                                    ; preds = %for.cond.cleanup18
  %bits.i253 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 4, i32 1
  %80 = load i8, i8* %bits.i253, align 1, !tbaa !136
  %conv.i254 = zext i8 %80 to i32
  %add.i255 = add nuw nsw i32 %conv.i254, 7
  %div.i256 = lshr i32 %add.i255, 3
  %cmp45.not = icmp ne i32 %div.i, %div.i256
  %cmp48 = icmp sgt i32 %20, 16
  %or.cond261 = or i1 %cmp48, %cmp45.not
  br i1 %or.cond261, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup18
  %81 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %81, i8 0, i64 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp50 = icmp eq i32 %div.i, 0
  br i1 %cmp50, label %if.then51, label %for.cond54.preheader

for.cond54.preheader:                             ; preds = %if.end
  br i1 %cmp17272, label %for.body58.lr.ph, label %while.end

for.body58.lr.ph:                                 ; preds = %for.cond54.preheader
  %dim60 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %82 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim60, align 8, !tbaa !176
  %dim70 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %83 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim70, align 8, !tbaa !176
  %wide.trip.count282 = zext i32 %20 to i64
  br label %for.body58

if.then51:                                        ; preds = %if.end
  %84 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %84, i8 0, i64 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup94
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !238
  %.pre290 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %cmp139263 = icmp eq i64 %.pre, %.pre290
  br i1 %cmp139263, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre291 = load i64, i64* %arrayidx14, align 8, !tbaa !110
  %85 = bitcast i64* %arrayidx.1 to <4 x i64>*
  %86 = bitcast i64* %arrayidx to <4 x i64>*
  %87 = bitcast i64* %arrayidx12.1 to <4 x i64>*
  %88 = bitcast i64* %arrayidx12 to <4 x i64>*
  %89 = bitcast i64* %arrayidx14.1 to <4 x i64>*
  %90 = bitcast i64* %arrayidx14 to <4 x i64>*
  %91 = bitcast i64* %arrayidx.5 to <4 x i64>*
  %92 = bitcast i64* %arrayidx.4 to <4 x i64>*
  %93 = bitcast i64* %arrayidx12.5 to <4 x i64>*
  %94 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  %95 = bitcast i64* %arrayidx14.5 to <4 x i64>*
  %96 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  %97 = bitcast i64* %arrayidx.9 to <4 x i64>*
  %98 = bitcast i64* %arrayidx.8 to <4 x i64>*
  %99 = bitcast i64* %arrayidx12.9 to <4 x i64>*
  %100 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  %101 = bitcast i64* %arrayidx14.9 to <4 x i64>*
  %102 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  %103 = bitcast i64* %arrayidx.13 to <2 x i64>*
  %104 = bitcast i64* %arrayidx.12 to <2 x i64>*
  %105 = bitcast i64* %arrayidx12.13 to <2 x i64>*
  %106 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  %107 = bitcast i64* %arrayidx14.13 to <2 x i64>*
  %108 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  br label %land.rhs

for.body58:                                       ; preds = %for.cond.cleanup94, %for.body58.lr.ph
  %indvars.iv278 = phi i64 [ 0, %for.body58.lr.ph ], [ %indvars.iv.next279, %for.cond.cleanup94 ]
  %stride63 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 2
  %109 = load i32, i32* %stride63, align 4, !tbaa !182
  %conv64 = sext i32 %109 to i64
  %mul68 = mul nsw i64 %conv64, %conv
  %stride73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %83, i64 %indvars.iv278, i32 2
  %110 = load i32, i32* %stride73, align 4, !tbaa !182
  %conv74 = sext i32 %110 to i64
  %mul78 = mul nsw i64 %conv74, %conv
  %cmp80264.not = icmp eq i64 %indvars.iv278, 0
  br i1 %cmp80264.not, label %for.end91, label %for.body81.lr.ph

for.body81.lr.ph:                                 ; preds = %for.body58
  %cmp86.not = icmp eq i64 %mul68, 0
  br i1 %cmp86.not, label %for.body81.preheader, label %for.body81.us

for.body81.preheader:                             ; preds = %for.body81.lr.ph
  %111 = trunc i64 %indvars.iv278 to i32
  br label %for.end91

for.body81.us:                                    ; preds = %for.body81.lr.ph, %for.inc89.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc89.us ], [ 0, %for.body81.lr.ph ]
  %arrayidx84.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv
  %112 = load i64, i64* %arrayidx84.us, align 8, !tbaa !110
  %cmp85.us = icmp ult i64 %mul68, %112
  br i1 %cmp85.us, label %for.end91.loopexit, label %for.inc89.us

for.inc89.us:                                     ; preds = %for.body81.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %indvars.iv278
  br i1 %exitcond.not, label %for.end91.loopexit, label %for.body81.us, !llvm.loop !243

for.end91.loopexit:                               ; preds = %for.inc89.us, %for.body81.us
  %insert.0.lcssa.ph.in = phi i64 [ %indvars.iv278, %for.inc89.us ], [ %indvars.iv, %for.body81.us ]
  %insert.0.lcssa.ph = trunc i64 %insert.0.lcssa.ph.in to i32
  br label %for.end91

for.end91:                                        ; preds = %for.end91.loopexit, %for.body81.preheader, %for.body58
  %insert.0.lcssa = phi i32 [ 0, %for.body58 ], [ %insert.0.lcssa.ph, %for.end91.loopexit ], [ %111, %for.body81.preheader ]
  %113 = zext i32 %insert.0.lcssa to i64
  %cmp93267 = icmp ugt i64 %indvars.iv278, %113
  br i1 %cmp93267, label %for.body95.preheader, label %for.cond.cleanup94

for.body95.preheader:                             ; preds = %for.end91
  %114 = sext i32 %insert.0.lcssa to i64
  %115 = sub i64 %indvars.iv278, %114
  %116 = xor i64 %114, -1
  %117 = add i64 %indvars.iv278, %116
  %xtraiter = and i64 %115, 3
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body95.prol.loopexit, label %for.body95.prol

for.body95.prol:                                  ; preds = %for.body95.preheader, %for.body95.prol
  %indvars.iv280.prol = phi i64 [ %indvars.iv.next281.prol, %for.body95.prol ], [ %indvars.iv278, %for.body95.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %for.body95.prol ], [ %xtraiter, %for.body95.preheader ]
  %indvars.iv.next281.prol = add nsw i64 %indvars.iv280.prol, -1
  %arrayidx99.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.prol
  %118 = load i64, i64* %arrayidx99.prol, align 8, !tbaa !110
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280.prol
  store i64 %118, i64* %arrayidx102.prol, align 8, !tbaa !110
  %arrayidx106.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.prol
  %119 = load i64, i64* %arrayidx106.prol, align 8, !tbaa !110
  %arrayidx109.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280.prol
  store i64 %119, i64* %arrayidx109.prol, align 8, !tbaa !110
  %arrayidx113.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.prol
  %120 = load i64, i64* %arrayidx113.prol, align 8, !tbaa !110
  %arrayidx116.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280.prol
  store i64 %120, i64* %arrayidx116.prol, align 8, !tbaa !110
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body95.prol.loopexit, label %for.body95.prol, !llvm.loop !244

for.body95.prol.loopexit:                         ; preds = %for.body95.prol, %for.body95.preheader
  %indvars.iv280.unr = phi i64 [ %indvars.iv278, %for.body95.preheader ], [ %indvars.iv.next281.prol, %for.body95.prol ]
  %121 = icmp ult i64 %117, 3
  br i1 %121, label %for.cond.cleanup94, label %for.body95

for.cond.cleanup94:                               ; preds = %for.body95.prol.loopexit, %for.body95, %for.end91
  %extent122 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 1
  %122 = load i32, i32* %extent122, align 4, !tbaa !178
  %conv123 = sext i32 %122 to i64
  %arrayidx126 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %113
  store i64 %conv123, i64* %arrayidx126, align 8, !tbaa !110
  %arrayidx129 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %113
  store i64 %mul68, i64* %arrayidx129, align 8, !tbaa !110
  %arrayidx132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %113
  store i64 %mul78, i64* %arrayidx132, align 8, !tbaa !110
  %indvars.iv.next279 = add nuw nsw i64 %indvars.iv278, 1
  %exitcond283.not = icmp eq i64 %indvars.iv.next279, %wide.trip.count282
  br i1 %exitcond283.not, label %while.cond.preheader, label %for.body58, !llvm.loop !245

for.body95:                                       ; preds = %for.body95.prol.loopexit, %for.body95
  %indvars.iv280 = phi i64 [ %indvars.iv.next281.3, %for.body95 ], [ %indvars.iv280.unr, %for.body95.prol.loopexit ]
  %indvars.iv.next281 = add nsw i64 %indvars.iv280, -1
  %arrayidx99 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  %123 = load i64, i64* %arrayidx99, align 8, !tbaa !110
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280
  store i64 %123, i64* %arrayidx102, align 8, !tbaa !110
  %arrayidx106 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  %124 = load i64, i64* %arrayidx106, align 8, !tbaa !110
  %arrayidx109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280
  store i64 %124, i64* %arrayidx109, align 8, !tbaa !110
  %arrayidx113 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  %125 = load i64, i64* %arrayidx113, align 8, !tbaa !110
  %arrayidx116 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280
  store i64 %125, i64* %arrayidx116, align 8, !tbaa !110
  %indvars.iv.next281.1 = add nsw i64 %indvars.iv280, -2
  %arrayidx99.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  %126 = load i64, i64* %arrayidx99.1, align 8, !tbaa !110
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  store i64 %126, i64* %arrayidx102.1, align 8, !tbaa !110
  %arrayidx106.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  %127 = load i64, i64* %arrayidx106.1, align 8, !tbaa !110
  %arrayidx109.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  store i64 %127, i64* %arrayidx109.1, align 8, !tbaa !110
  %arrayidx113.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  %128 = load i64, i64* %arrayidx113.1, align 8, !tbaa !110
  %arrayidx116.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  store i64 %128, i64* %arrayidx116.1, align 8, !tbaa !110
  %indvars.iv.next281.2 = add nsw i64 %indvars.iv280, -3
  %arrayidx99.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  %129 = load i64, i64* %arrayidx99.2, align 8, !tbaa !110
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  store i64 %129, i64* %arrayidx102.2, align 8, !tbaa !110
  %arrayidx106.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  %130 = load i64, i64* %arrayidx106.2, align 8, !tbaa !110
  %arrayidx109.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  store i64 %130, i64* %arrayidx109.2, align 8, !tbaa !110
  %arrayidx113.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  %131 = load i64, i64* %arrayidx113.2, align 8, !tbaa !110
  %arrayidx116.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  store i64 %131, i64* %arrayidx116.2, align 8, !tbaa !110
  %indvars.iv.next281.3 = add nsw i64 %indvars.iv280, -4
  %arrayidx99.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.3
  %132 = load i64, i64* %arrayidx99.3, align 8, !tbaa !110
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  store i64 %132, i64* %arrayidx102.3, align 8, !tbaa !110
  %arrayidx106.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.3
  %133 = load i64, i64* %arrayidx106.3, align 8, !tbaa !110
  %arrayidx109.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  store i64 %133, i64* %arrayidx109.3, align 8, !tbaa !110
  %arrayidx113.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.3
  %134 = load i64, i64* %arrayidx113.3, align 8, !tbaa !110
  %arrayidx116.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  store i64 %134, i64* %arrayidx116.3, align 8, !tbaa !110
  %cmp93.3 = icmp sgt i64 %indvars.iv.next281.3, %114
  br i1 %cmp93.3, label %for.body95, label %for.cond.cleanup94, !llvm.loop !246

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %135 = phi i64 [ %.pre291, %land.rhs.lr.ph ], [ %154, %while.body ]
  %136 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul147, %while.body ]
  %cmp143 = icmp eq i64 %136, %135
  br i1 %cmp143, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %137 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %mul147 = mul i64 %137, %135
  store i64 %mul147, i64* %chunk_size, align 8, !tbaa !238
  %138 = load <4 x i64>, <4 x i64>* %85, align 8, !tbaa !110
  store <4 x i64> %138, <4 x i64>* %86, align 8, !tbaa !110
  %139 = load <4 x i64>, <4 x i64>* %87, align 8, !tbaa !110
  store <4 x i64> %139, <4 x i64>* %88, align 8, !tbaa !110
  %140 = load <4 x i64>, <4 x i64>* %89, align 8, !tbaa !110
  store <4 x i64> %140, <4 x i64>* %90, align 8, !tbaa !110
  %141 = load <4 x i64>, <4 x i64>* %91, align 8, !tbaa !110
  store <4 x i64> %141, <4 x i64>* %92, align 8, !tbaa !110
  %142 = load <4 x i64>, <4 x i64>* %93, align 8, !tbaa !110
  store <4 x i64> %142, <4 x i64>* %94, align 8, !tbaa !110
  %143 = load <4 x i64>, <4 x i64>* %95, align 8, !tbaa !110
  store <4 x i64> %143, <4 x i64>* %96, align 8, !tbaa !110
  %144 = load <4 x i64>, <4 x i64>* %97, align 8, !tbaa !110
  store <4 x i64> %144, <4 x i64>* %98, align 8, !tbaa !110
  %145 = load <4 x i64>, <4 x i64>* %99, align 8, !tbaa !110
  store <4 x i64> %145, <4 x i64>* %100, align 8, !tbaa !110
  %146 = load <4 x i64>, <4 x i64>* %101, align 8, !tbaa !110
  store <4 x i64> %146, <4 x i64>* %102, align 8, !tbaa !110
  %147 = load <2 x i64>, <2 x i64>* %103, align 8, !tbaa !110
  store <2 x i64> %147, <2 x i64>* %104, align 8, !tbaa !110
  %148 = load <2 x i64>, <2 x i64>* %105, align 8, !tbaa !110
  store <2 x i64> %148, <2 x i64>* %106, align 8, !tbaa !110
  %149 = load <2 x i64>, <2 x i64>* %107, align 8, !tbaa !110
  store <2 x i64> %149, <2 x i64>* %108, align 8, !tbaa !110
  %150 = load i64, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 %150, i64* %arrayidx.14, align 8, !tbaa !110
  %151 = load i64, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 %151, i64* %arrayidx12.14, align 8, !tbaa !110
  %152 = load i64, i64* %arrayidx14.15, align 8, !tbaa !110
  store i64 %152, i64* %arrayidx14.14, align 8, !tbaa !110
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx14.15, align 8, !tbaa !110
  %153 = extractelement <4 x i64> %139, i32 0
  %cmp139 = icmp eq i64 %mul147, %153
  %154 = extractelement <4 x i64> %140, i32 0
  br i1 %cmp139, label %land.rhs, label %while.end, !llvm.loop !247

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond54.preheader
  %155 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %155, i8* nonnull align 8 dereferenceable(416) %0, i64 416, i1 false), !tbaa.struct !248
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then51, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %key1, i8* %key2, i64 %key_size) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @memcmp(i8* %key1, i8* %key2, i64 %key_size) #16
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

declare i32 @memcmp(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %buf, %struct.halide_dimension_t* %shape) local_unnamed_addr #0 {
entry:
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %0 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp9 = icmp sgt i32 %0, 0
  br i1 %cmp9, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %2 = zext i32 %0 to i64
  br label %for.body

for.cond:                                         ; preds = %_ZNK18halide_dimension_tneERKS_.exit
  %exitcond.not = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond.not, label %return, label %for.body, !llvm.loop !249

for.body:                                         ; preds = %for.cond, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %min.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 0
  %3 = load i32, i32* %min.i.i, align 4, !tbaa !181
  %min2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %min2.i.i, align 4, !tbaa !181
  %cmp.i.i = icmp eq i32 %3, %4
  br i1 %cmp.i.i, label %land.lhs.true.i.i, label %return

land.lhs.true.i.i:                                ; preds = %for.body
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 1
  %5 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %extent3.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 1
  %6 = load i32, i32* %extent3.i.i, align 4, !tbaa !178
  %cmp4.i.i = icmp eq i32 %5, %6
  br i1 %cmp4.i.i, label %land.lhs.true5.i.i, label %return

land.lhs.true5.i.i:                               ; preds = %land.lhs.true.i.i
  %stride.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 2
  %7 = load i32, i32* %stride.i.i, align 4, !tbaa !182
  %stride6.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 2
  %8 = load i32, i32* %stride6.i.i, align 4, !tbaa !182
  %cmp7.i.i = icmp eq i32 %7, %8
  br i1 %cmp7.i.i, label %_ZNK18halide_dimension_tneERKS_.exit, label %return

_ZNK18halide_dimension_tneERKS_.exit:             ; preds = %land.lhs.true5.i.i
  %flags.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 3
  %9 = load i32, i32* %flags.i.i, align 4, !tbaa !250
  %flags8.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 3
  %10 = load i32, i32* %flags8.i.i, align 4, !tbaa !250
  %cmp9.i.i.not = icmp eq i32 %9, %10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp9.i.i.not, label %for.cond, label %return

return:                                           ; preds = %_ZNK18halide_dimension_tneERKS_.exit, %land.lhs.true5.i.i, %land.lhs.true.i.i, %for.body, %for.cond, %entry
  %cmp.lcssa = phi i1 [ true, %entry ], [ false, %_ZNK18halide_dimension_tneERKS_.exit ], [ true, %for.cond ], [ false, %land.lhs.true5.i.i ], [ false, %land.lhs.true.i.i ], [ false, %for.body ]
  ret i1 %cmp.lcssa
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this, i8* %cache_key, i64 %cache_key_size, i32 %key_hash, %struct.halide_buffer_t* %computed_bounds_buf, i32 %tuples, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key_arg, i64 %eviction_key_arg) local_unnamed_addr #0 align 2 {
entry:
  %frombool = zext i1 %has_eviction_key_arg to i8
  %0 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %this to <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>*
  store <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>* %0, align 8, !tbaa !10
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 4
  store i64 %cache_key_size, i64* %key_size, align 8, !tbaa !252
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 6
  store i32 %key_hash, i32* %hash, align 8, !tbaa !253
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 7
  store i32 0, i32* %in_use_count, align 4, !tbaa !254
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  store i32 %tuples, i32* %tuple_count, align 8, !tbaa !230
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 5
  %1 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 9
  store i32 %1, i32* %dimensions2, align 4, !tbaa !255
  %conv = zext i32 %tuples to i64
  %mul = mul nuw nsw i64 %conv, 56
  %conv5 = sext i32 %1 to i64
  %add8 = add i32 %tuples, 1
  %conv9 = zext i32 %add8 to i64
  %mul6 = shl nuw nsw i64 %conv9, 4
  %mul10 = mul i64 %mul6, %conv5
  %add11 = add i64 %mul10, %mul
  %add13 = add i64 %add11, %cache_key_size
  %call = tail call i8* @halide_malloc(i8* null, i64 %add13) #16
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  store i8* %call, i8** %metadata_storage, align 8, !tbaa !231
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  %2 = bitcast %struct.halide_buffer_t** %buf to i8**
  store i8* %call, i8** %2, align 8, !tbaa !232
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 %mul
  %computed_bounds = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 10
  %3 = bitcast %struct.halide_dimension_t** %computed_bounds to i8**
  store i8* %add.ptr, i8** %3, align 8, !tbaa !256
  %add.ptr18 = getelementptr inbounds i8, i8* %call, i64 %add11
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 5
  store i8* %add.ptr18, i8** %key, align 8, !tbaa !257
  %4 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp117.not = icmp eq i64 %4, 0
  br i1 %cmp117.not, label %for.cond23.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %if.end
  %5 = load i8, i8* %cache_key, align 1, !tbaa !14
  store i8 %5, i8* %add.ptr18, align 1, !tbaa !14
  %6 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp130 = icmp ugt i64 %6, 1
  br i1 %cmp130, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond23.preheader:                             ; preds = %for.body.for.body_crit_edge, %for.body.preheader, %if.end
  %7 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp25115 = icmp sgt i32 %7, 0
  br i1 %cmp25115, label %for.body27.lr.ph, label %for.cond36.preheader

for.body27.lr.ph:                                 ; preds = %for.cond23.preheader
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 6
  br label %for.body27

for.body.for.body_crit_edge:                      ; preds = %for.body.preheader, %for.body.for.body_crit_edge
  %inc131 = phi i64 [ %inc, %for.body.for.body_crit_edge ], [ 1, %for.body.preheader ]
  %.pre = load i8*, i8** %key, align 8, !tbaa !257
  %arrayidx = getelementptr inbounds i8, i8* %cache_key, i64 %inc131
  %8 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %arrayidx21 = getelementptr inbounds i8, i8* %.pre, i64 %inc131
  store i8 %8, i8* %arrayidx21, align 1, !tbaa !14
  %inc = add nuw i64 %inc131, 1
  %9 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp = icmp ult i64 %inc, %9
  br i1 %cmp, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond36.preheader:                             ; preds = %for.body27, %for.cond23.preheader
  %10 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp38113.not = icmp eq i32 %10, 0
  br i1 %cmp38113.not, label %for.cond.cleanup39, label %for.body40

for.body27:                                       ; preds = %for.body27, %for.body27.lr.ph
  %indvars.iv121 = phi i64 [ 0, %for.body27.lr.ph ], [ %indvars.iv.next122, %for.body27 ]
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %arrayidx28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 %indvars.iv121
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %arrayidx31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 %indvars.iv121
  %13 = bitcast %struct.halide_dimension_t* %arrayidx31 to i8*
  %14 = bitcast %struct.halide_dimension_t* %arrayidx28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %13, i8* nonnull align 4 dereferenceable(16) %14, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  %15 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %16 = sext i32 %15 to i64
  %cmp25 = icmp slt i64 %indvars.iv.next122, %16
  br i1 %cmp25, label %for.body27, label %for.cond36.preheader, !llvm.loop !259

for.cond36.loopexit:                              ; preds = %for.body59.for.body59_crit_edge, %for.body59.preheader, %for.body40
  %17 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %18 = zext i32 %17 to i64
  %cmp38 = icmp ult i64 %indvars.iv.next120, %18
  br i1 %cmp38, label %for.body40, label %for.cond.cleanup39, !llvm.loop !260

for.cond.cleanup39:                               ; preds = %for.cond36.loopexit, %for.cond36.preheader
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 13
  store i8 %frombool, i8* %has_eviction_key, align 8, !tbaa !261
  %eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 12
  store i64 %eviction_key_arg, i64* %eviction_key, align 8, !tbaa !262
  br label %cleanup

for.body40:                                       ; preds = %for.cond36.preheader, %for.cond36.loopexit
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %for.cond36.loopexit ], [ 0, %for.cond36.preheader ]
  %arrayidx42 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv119
  %19 = bitcast %struct.halide_buffer_t** %arrayidx42 to i8**
  %20 = load i8*, i8** %19, align 8, !tbaa !10
  %21 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx45 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %21, i64 %indvars.iv119
  %22 = bitcast %struct.halide_buffer_t* %arrayidx45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %22, i8* nonnull align 8 dereferenceable(56) %20, i64 56, i1 false), !tbaa.struct !263
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv119, 1
  %24 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %25 = trunc i64 %indvars.iv.next120 to i32
  %mul49 = mul i32 %24, %25
  %idx.ext = zext i32 %mul49 to i64
  %add.ptr50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i64 %idx.ext
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim54 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 %indvars.iv119, i32 6
  store %struct.halide_dimension_t* %add.ptr50, %struct.halide_dimension_t** %dim54, align 8, !tbaa !176
  %cmp57111 = icmp sgt i32 %24, 0
  br i1 %cmp57111, label %for.body59.preheader, label %for.cond36.loopexit

for.body59.preheader:                             ; preds = %for.body40
  %27 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62125 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %27, i64 0, i32 6
  %28 = bitcast %struct.halide_dimension_t** %dim62125 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !176
  %30 = bitcast %struct.halide_dimension_t* %add.ptr50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %30, i8* nonnull align 4 dereferenceable(16) %29, i64 16, i1 false), !tbaa.struct !177
  %31 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp57128 = icmp sgt i32 %31, 1
  br i1 %cmp57128, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

for.body59.for.body59_crit_edge:                  ; preds = %for.body59.preheader, %for.body59.for.body59_crit_edge
  %indvars.iv.next129 = phi i64 [ %indvars.iv.next, %for.body59.for.body59_crit_edge ], [ 1, %for.body59.preheader ]
  %.pre123 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim68.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %.pre123, i64 %indvars.iv119, i32 6
  %.pre124 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim68.phi.trans.insert, align 8, !tbaa !176
  %32 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %32, i64 0, i32 6
  %33 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim62, align 8, !tbaa !176
  %arrayidx64 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv.next129
  %arrayidx70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre124, i64 %indvars.iv.next129
  %34 = bitcast %struct.halide_dimension_t* %arrayidx70 to i8*
  %35 = bitcast %struct.halide_dimension_t* %arrayidx64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %34, i8* nonnull align 4 dereferenceable(16) %35, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next129, 1
  %36 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %37 = sext i32 %36 to i64
  %cmp57 = icmp slt i64 %indvars.iv.next, %37
  br i1 %cmp57, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

cleanup:                                          ; preds = %for.cond.cleanup39, %entry
  %38 = xor i1 %tobool.not, true
  ret i1 %38
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %key, i64 %key_size) local_unnamed_addr #0 {
entry:
  %cmp8.not = icmp eq i64 %key_size, 0
  br i1 %cmp8.not, label %for.cond.cleanup, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  %0 = add i64 %key_size, -1
  %xtraiter = and i64 %key_size, 7
  %1 = icmp ult i64 %0, 7
  br i1 %1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %key_size, -8
  %add.0 = mul i32 5381, 33
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.body, %for.body.preheader
  %add1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add1.7, %for.body ]
  %i.010.unr = phi i64 [ 0, %for.body.preheader ], [ %inc.7, %for.body ]
  %h.09.unr = phi i32 [ 5381, %for.body.preheader ], [ %add1.7, %for.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil
  %i.010.epil = phi i64 [ %inc.epil, %for.body.epil ], [ %i.010.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %h.09.epil = phi i32 [ %add1.epil, %for.body.epil ], [ %h.09.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.epil = mul i32 %h.09.epil, 33
  %arrayidx.epil = getelementptr inbounds i8, i8* %key, i64 %i.010.epil
  %2 = load i8, i8* %arrayidx.epil, align 1, !tbaa !14
  %conv.epil = zext i8 %2 to i32
  %add1.epil = add i32 %add.epil, %conv.epil
  %inc.epil = add nuw i64 %i.010.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.body.epil, !llvm.loop !266

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil, %entry
  %h.0.lcssa = phi i32 [ 5381, %entry ], [ %add1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add1.epil, %for.body.epil ]
  ret i32 %h.0.lcssa

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.preheader.new
  %i.010 = phi i64 [ 0, %for.body.preheader.new ], [ %inc.7, %for.body.for.body_crit_edge ]
  %add.phi = phi i32 [ %add.0, %for.body.preheader.new ], [ %add.12, %for.body.for.body_crit_edge ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.7, %for.body.for.body_crit_edge ]
  %arrayidx = getelementptr inbounds i8, i8* %key, i64 %i.010
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = zext i8 %3 to i32
  %add1 = add i32 %add.phi, %conv
  %inc = or i64 %i.010, 1
  %add.1 = mul i32 %add1, 33
  %arrayidx.1 = getelementptr inbounds i8, i8* %key, i64 %inc
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %conv.1 = zext i8 %4 to i32
  %add1.1 = add i32 %add.1, %conv.1
  %inc.1 = or i64 %i.010, 2
  %add.2 = mul i32 %add1.1, 33
  %arrayidx.2 = getelementptr inbounds i8, i8* %key, i64 %inc.1
  %5 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %conv.2 = zext i8 %5 to i32
  %add1.2 = add i32 %add.2, %conv.2
  %inc.2 = or i64 %i.010, 3
  %add.3 = mul i32 %add1.2, 33
  %arrayidx.3 = getelementptr inbounds i8, i8* %key, i64 %inc.2
  %6 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %conv.3 = zext i8 %6 to i32
  %add1.3 = add i32 %add.3, %conv.3
  %inc.3 = or i64 %i.010, 4
  %add.4 = mul i32 %add1.3, 33
  %arrayidx.4 = getelementptr inbounds i8, i8* %key, i64 %inc.3
  %7 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %conv.4 = zext i8 %7 to i32
  %add1.4 = add i32 %add.4, %conv.4
  %inc.4 = or i64 %i.010, 5
  %add.5 = mul i32 %add1.4, 33
  %arrayidx.5 = getelementptr inbounds i8, i8* %key, i64 %inc.4
  %8 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %conv.5 = zext i8 %8 to i32
  %add1.5 = add i32 %add.5, %conv.5
  %inc.5 = or i64 %i.010, 6
  %add.6 = mul i32 %add1.5, 33
  %arrayidx.6 = getelementptr inbounds i8, i8* %key, i64 %inc.5
  %9 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %conv.6 = zext i8 %9 to i32
  %add1.6 = add i32 %add.6, %conv.6
  %inc.6 = or i64 %i.010, 7
  %add.7 = mul i32 %add1.6, 33
  %arrayidx.7 = getelementptr inbounds i8, i8* %key, i64 %inc.6
  %10 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %conv.7 = zext i8 %10 to i32
  %add1.7 = add i32 %add.7, %conv.7
  %inc.7 = add nuw i64 %i.010, 8
  %niter.nsub.7 = add i64 %niter, -8
  %niter.ncmp.7 = icmp eq i64 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.for.body_crit_edge, !llvm.loop !267

for.body.for.body_crit_edge:                      ; preds = %for.body
  %add.12 = mul i32 %add1.7, 33
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11prune_cacheEv() local_unnamed_addr #0 {
entry:
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %1 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %2 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  %cmp84 = icmp sgt i64 %1, %2
  %cmp185 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  %3 = and i1 %cmp185, %cmp84
  br i1 %3, label %while.body, label %while.end42

while.body:                                       ; preds = %entry, %if.end41
  %4 = phi i64 [ %114, %if.end41 ], [ %2, %entry ]
  %5 = phi i64 [ %115, %if.end41 ], [ %1, %entry ]
  %prune_candidate.086 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %6, %if.end41 ], [ %0, %entry ]
  %more_recent2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 1
  %6 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent2, align 8, !tbaa !268
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 7
  %7 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3 = icmp eq i32 %7, 0
  br i1 %cmp3, label %if.then, label %if.end41

if.then:                                          ; preds = %while.body
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 6
  %8 = load i32, i32* %hash, align 8, !tbaa !253
  %9 = and i32 %8, 255
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %10 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp5 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %10, %prune_candidate.086
  br i1 %cmp5, label %if.then6, label %while.cond9

if.then6:                                         ; preds = %if.then
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %11 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !227
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %11, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  br label %if.end21

while.cond9:                                      ; preds = %if.then, %land.rhs11
  %prev_hash_entry.0 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %12, %land.rhs11 ], [ %10, %if.then ]
  %cmp10.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, null
  br i1 %cmp10.not, label %if.then18, label %land.rhs11

land.rhs11:                                       ; preds = %while.cond9
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  %12 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next12, align 8, !tbaa !227
  %cmp13.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %12, %prune_candidate.086
  br i1 %cmp13.not, label %do.end, label %while.cond9, !llvm.loop !269

if.then18:                                        ; preds = %while.cond9
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.2.42, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %land.rhs11, %if.then18
  %next19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %13 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next19, align 8, !tbaa !227
  %next20 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %13, %"struct.Halide::Runtime::Internal::CacheEntry"** %next20, align 8, !tbaa !227
  br label %if.end21

if.end21:                                         ; preds = %do.end, %if.then6
  %14 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp22 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %14, %prune_candidate.086
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %cmp25.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  br i1 %cmp25.not, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end24
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %15 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent27 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %15, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent27, align 8, !tbaa !251
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp29 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %16, %prune_candidate.086
  %less_recent31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end28
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %17, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %cmp34.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp34.not, label %if.end37, label %if.then35

if.then35:                                        ; preds = %if.end32
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end32
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 8
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp3882.not = icmp eq i32 %18, 0
  br i1 %cmp3882.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end37
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 11
  %19 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %wide.trip.count = zext i32 %18 to i64
  br label %for.body

for.cond.for.cond.cleanup_crit_edge:              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %if.end37
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %prune_candidate.086) #17
  %20 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %20) #16
  %.pre92 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %.pre93 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  br label %if.end41

for.body:                                         ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %sub89 = phi i64 [ %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted, %for.body.lr.ph ], [ %sub, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 5
  %21 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %21, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body
  %sub.i.neg.0 = add i64 0, -1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %21 to i64
  %min.iters.check43 = icmp ult i32 %21, 17
  br i1 %min.iters.check43, label %for.body.i.i.preheader, label %vector.ph44

vector.ph44:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf45 = and i64 %wide.trip.count.i.i, 15
  %23 = icmp eq i64 %n.mod.vf45, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf45
  %n.vec46 = sub nsw i64 %wide.trip.count.i.i, %24
  br label %vector.body42

vector.body42:                                    ; preds = %vector.body42, %vector.ph44
  %index47 = phi i64 [ 0, %vector.ph44 ], [ %index.next48, %vector.body42 ]
  %vec.ind51 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph44 ], [ %vec.ind.next56, %vector.body42 ]
  %vec.phi57 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi73, %vector.body42 ]
  %vec.phi58 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi74, %vector.body42 ]
  %vec.phi59 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi75, %vector.body42 ]
  %vec.phi60 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi76, %vector.body42 ]
  %step.add52 = add <4 x i64> %vec.ind51, <i64 4, i64 4, i64 4, i64 4>
  %step.add53 = add <4 x i64> %vec.ind51, <i64 8, i64 8, i64 8, i64 8>
  %step.add54 = add <4 x i64> %vec.ind51, <i64 12, i64 12, i64 12, i64 12>
  %25 = or i64 %index47, 4
  %26 = or i64 %index47, 8
  %27 = or i64 %index47, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index47, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 2
  %32 = bitcast i32* %28 to <16 x i32>*
  %33 = bitcast i32* %29 to <16 x i32>*
  %34 = bitcast i32* %30 to <16 x i32>*
  %35 = bitcast i32* %31 to <16 x i32>*
  %wide.vec61 = load <16 x i32>, <16 x i32>* %32, align 4, !tbaa !182
  %wide.vec62 = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !182
  %wide.vec63 = load <16 x i32>, <16 x i32>* %34, align 4, !tbaa !182
  %wide.vec64 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !182
  %strided.vec65 = shufflevector <16 x i32> %wide.vec61, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec66 = shufflevector <16 x i32> %wide.vec62, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec67 = shufflevector <16 x i32> %wide.vec63, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec68 = shufflevector <16 x i32> %wide.vec64, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %36 = icmp sgt <4 x i32> %strided.vec65, zeroinitializer
  %37 = icmp sgt <4 x i32> %strided.vec66, zeroinitializer
  %38 = icmp sgt <4 x i32> %strided.vec67, zeroinitializer
  %39 = icmp sgt <4 x i32> %strided.vec68, zeroinitializer
  %40 = zext <4 x i32> %strided.vec65 to <4 x i64>
  %41 = zext <4 x i32> %strided.vec66 to <4 x i64>
  %42 = zext <4 x i32> %strided.vec67 to <4 x i64>
  %43 = zext <4 x i32> %strided.vec68 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind51, i32 1
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add52, i32 1
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add53, i32 1
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add54, i32 1
  %wide.masked.gather69 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %44, i32 4, <4 x i1> %36, <4 x i32> undef), !tbaa !178
  %wide.masked.gather70 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %45, i32 4, <4 x i1> %37, <4 x i32> undef), !tbaa !178
  %wide.masked.gather71 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %46, i32 4, <4 x i1> %38, <4 x i32> undef), !tbaa !178
  %wide.masked.gather72 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %47, i32 4, <4 x i1> %39, <4 x i32> undef), !tbaa !178
  %48 = add nsw <4 x i32> %wide.masked.gather69, <i32 -1, i32 -1, i32 -1, i32 -1>
  %49 = add nsw <4 x i32> %wide.masked.gather70, <i32 -1, i32 -1, i32 -1, i32 -1>
  %50 = add nsw <4 x i32> %wide.masked.gather71, <i32 -1, i32 -1, i32 -1, i32 -1>
  %51 = add nsw <4 x i32> %wide.masked.gather72, <i32 -1, i32 -1, i32 -1, i32 -1>
  %52 = sext <4 x i32> %48 to <4 x i64>
  %53 = sext <4 x i32> %49 to <4 x i64>
  %54 = sext <4 x i32> %50 to <4 x i64>
  %55 = sext <4 x i32> %51 to <4 x i64>
  %56 = mul nsw <4 x i64> %52, %40
  %57 = mul nsw <4 x i64> %53, %41
  %58 = mul nsw <4 x i64> %54, %42
  %59 = mul nsw <4 x i64> %55, %43
  %60 = select <4 x i1> %36, <4 x i64> %56, <4 x i64> zeroinitializer
  %predphi73 = add <4 x i64> %vec.phi57, %60
  %61 = select <4 x i1> %37, <4 x i64> %57, <4 x i64> zeroinitializer
  %predphi74 = add <4 x i64> %vec.phi58, %61
  %62 = select <4 x i1> %38, <4 x i64> %58, <4 x i64> zeroinitializer
  %predphi75 = add <4 x i64> %vec.phi59, %62
  %63 = select <4 x i1> %39, <4 x i64> %59, <4 x i64> zeroinitializer
  %predphi76 = add <4 x i64> %vec.phi60, %63
  %index.next48 = add i64 %index47, 16
  %vec.ind.next56 = add <4 x i64> %vec.ind51, <i64 16, i64 16, i64 16, i64 16>
  %64 = icmp eq i64 %index.next48, %n.vec46
  br i1 %64, label %middle.block40, label %vector.body42, !llvm.loop !270

middle.block40:                                   ; preds = %vector.body42
  %bin.rdx77 = add <4 x i64> %predphi74, %predphi73
  %bin.rdx78 = add <4 x i64> %predphi75, %bin.rdx77
  %bin.rdx79 = add <4 x i64> %predphi76, %bin.rdx78
  %65 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx79)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block40, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec46, %middle.block40 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %65, %middle.block40 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 2
  %66 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %66, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %66 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 1
  %67 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %67, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !271

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %21, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader81, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %68 = icmp eq i64 %n.mod.vf, 0
  %69 = select i1 %68, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %69
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi23 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi35, %vector.body ]
  %vec.phi24 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi36, %vector.body ]
  %vec.phi25 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi37, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add20 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add21 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %70 = or i64 %index, 4
  %71 = or i64 %index, 8
  %72 = or i64 %index, 12
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 2
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %70, i32 2
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %71, i32 2
  %76 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %72, i32 2
  %77 = bitcast i32* %73 to <16 x i32>*
  %78 = bitcast i32* %74 to <16 x i32>*
  %79 = bitcast i32* %75 to <16 x i32>*
  %80 = bitcast i32* %76 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %77, align 4, !tbaa !182
  %wide.vec26 = load <16 x i32>, <16 x i32>* %78, align 4, !tbaa !182
  %wide.vec27 = load <16 x i32>, <16 x i32>* %79, align 4, !tbaa !182
  %wide.vec28 = load <16 x i32>, <16 x i32>* %80, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec29 = shufflevector <16 x i32> %wide.vec26, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec30 = shufflevector <16 x i32> %wide.vec27, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec31 = shufflevector <16 x i32> %wide.vec28, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %81 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %82 = icmp slt <4 x i32> %strided.vec29, zeroinitializer
  %83 = icmp slt <4 x i32> %strided.vec30, zeroinitializer
  %84 = icmp slt <4 x i32> %strided.vec31, zeroinitializer
  %85 = sext <4 x i32> %strided.vec to <4 x i64>
  %86 = sext <4 x i32> %strided.vec29 to <4 x i64>
  %87 = sext <4 x i32> %strided.vec30 to <4 x i64>
  %88 = sext <4 x i32> %strided.vec31 to <4 x i64>
  %89 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind, i32 1
  %90 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add, i32 1
  %91 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add20, i32 1
  %92 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add21, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %89, i32 4, <4 x i1> %81, <4 x i32> undef), !tbaa !178
  %wide.masked.gather32 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %90, i32 4, <4 x i1> %82, <4 x i32> undef), !tbaa !178
  %wide.masked.gather33 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %91, i32 4, <4 x i1> %83, <4 x i32> undef), !tbaa !178
  %wide.masked.gather34 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %92, i32 4, <4 x i1> %84, <4 x i32> undef), !tbaa !178
  %93 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %94 = add nsw <4 x i32> %wide.masked.gather32, <i32 -1, i32 -1, i32 -1, i32 -1>
  %95 = add nsw <4 x i32> %wide.masked.gather33, <i32 -1, i32 -1, i32 -1, i32 -1>
  %96 = add nsw <4 x i32> %wide.masked.gather34, <i32 -1, i32 -1, i32 -1, i32 -1>
  %97 = sext <4 x i32> %93 to <4 x i64>
  %98 = sext <4 x i32> %94 to <4 x i64>
  %99 = sext <4 x i32> %95 to <4 x i64>
  %100 = sext <4 x i32> %96 to <4 x i64>
  %101 = mul nsw <4 x i64> %97, %85
  %102 = mul nsw <4 x i64> %98, %86
  %103 = mul nsw <4 x i64> %99, %87
  %104 = mul nsw <4 x i64> %100, %88
  %105 = select <4 x i1> %81, <4 x i64> %101, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %105
  %106 = select <4 x i1> %82, <4 x i64> %102, <4 x i64> zeroinitializer
  %predphi35 = add <4 x i64> %vec.phi23, %106
  %107 = select <4 x i1> %83, <4 x i64> %103, <4 x i64> zeroinitializer
  %predphi36 = add <4 x i64> %vec.phi24, %107
  %108 = select <4 x i1> %84, <4 x i64> %104, <4 x i64> zeroinitializer
  %predphi37 = add <4 x i64> %vec.phi25, %108
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %109 = icmp eq i64 %index.next, %n.vec
  br i1 %109, label %middle.block, label %vector.body, !llvm.loop !272

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi35, %predphi
  %bin.rdx38 = add <4 x i64> %predphi36, %bin.rdx
  %bin.rdx39 = add <4 x i64> %predphi37, %bin.rdx38
  %110 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx39)
  br label %for.body.i13.i.preheader81

for.body.i13.i.preheader81:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %110, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader81, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader81 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader81 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 2
  %111 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %111, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %111 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 1
  %112 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %112, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !273

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i.neg = xor i64 %index.1.i.i, -1
  %sub.i.neg.1 = add i64 %index.1.i21.i, %add8.i.i.neg
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.neg.phi = phi i64 [ %sub.i.neg.0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.neg.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 4, i32 1
  %113 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %113 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i.neg = mul i64 %div.i.i, %sub.i.neg.phi
  %sub = add i64 %mul.i.neg, %sub89
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.for.cond.cleanup_crit_edge, label %for.body, !llvm.loop !274

if.end41:                                         ; preds = %for.cond.cleanup, %while.body
  %114 = phi i64 [ %.pre93, %for.cond.cleanup ], [ %4, %while.body ]
  %115 = phi i64 [ %.pre92, %for.cond.cleanup ], [ %5, %while.body ]
  %cmp = icmp sgt i64 %115, %114
  %cmp1 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %116 = and i1 %cmp1, %cmp
  br i1 %116, label %while.body, label %while.end42, !llvm.loop !275

while.end42:                                      ; preds = %if.end41, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_set_size(i64 %size) local_unnamed_addr #4 {
entry:
  %cmp = icmp eq i64 %size, 0
  %spec.store.select = select i1 %cmp, i64 1048576, i64 %size
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  store i64 %spec.store.select, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_lookup(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers) local_unnamed_addr #4 {
entry:
  %conv = sext i32 %size to i64
  %call = tail call i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %cache_key, i64 %conv) #17
  %0 = and i32 %call, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry3.0220 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp.not221 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0220, null
  br i1 %cmp.not221, label %for.cond75.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %cmp16215 = icmp sgt i32 %tuple_count, 0
  %1 = sext i32 %tuple_count to i64
  br i1 %cmp16215, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.lr.ph, %if.end73.us
  %entry3.0222.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0.us, %if.end73.us ], [ %entry3.0220, %while.body.lr.ph ]
  %hash.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 6
  %2 = load i32, i32* %hash.us, align 8, !tbaa !253
  %cmp4.us = icmp eq i32 %2, %call
  br i1 %cmp4.us, label %land.lhs.true.us, label %if.end73.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 4
  %3 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp6.us = icmp eq i64 %3, %conv
  br i1 %cmp6.us, label %land.lhs.true7.us, label %if.end73.us

land.lhs.true7.us:                                ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 5
  %4 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call9.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %4, i8* %cache_key, i64 %conv) #17
  br i1 %call9.us, label %land.lhs.true10.us, label %if.end73.us

land.lhs.true10.us:                               ; preds = %land.lhs.true7.us
  %computed_bounds11.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 10
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11.us, align 8, !tbaa !256
  %call12.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %5) #17
  br i1 %call12.us, label %land.lhs.true13.us, label %if.end73.us

land.lhs.true13.us:                               ; preds = %land.lhs.true10.us
  %tuple_count14.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 8
  %6 = load i32, i32* %tuple_count14.us, align 8, !tbaa !230
  %cmp15.us = icmp eq i32 %6, %tuple_count
  br i1 %cmp15.us, label %for.cond.preheader.us, label %if.end73.us

for.cond.preheader.us:                            ; preds = %land.lhs.true13.us
  %buf.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 11
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %for.cond.preheader.us
  %indvars.iv226.us = phi i64 [ 0, %for.cond.preheader.us ], [ %indvars.iv.next227.us, %for.body.us ]
  %arrayidx18.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv226.us
  %7 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx18.us, align 8, !tbaa !10
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf.us, align 8, !tbaa !232
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %8, i64 %indvars.iv226.us, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call21.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %7, %struct.halide_dimension_t* %9) #17
  %indvars.iv.next227.us = add nuw nsw i64 %indvars.iv226.us, 1
  %cmp16.us = icmp slt i64 %indvars.iv.next227.us, %1
  %10 = and i1 %cmp16.us, %call21.us
  br i1 %10, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !276

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call21.us, label %if.then23, label %if.end73.us

if.end73.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true13.us, %land.lhs.true10.us, %land.lhs.true7.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 0
  %entry3.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0.us, null
  br i1 %cmp.not.us, label %for.cond75.preheader, label %while.body.us, !llvm.loop !277

for.cond75.preheader:                             ; preds = %if.end73, %if.end73.us, %entry
  %cmp76210 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp76210, label %for.body78.preheader, label %cleanup119

for.body78.preheader:                             ; preds = %for.cond75.preheader
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body78

while.body:                                       ; preds = %while.body.lr.ph, %if.end73
  %entry3.0222 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0, %if.end73 ], [ %entry3.0220, %while.body.lr.ph ]
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 6
  %11 = load i32, i32* %hash, align 8, !tbaa !253
  %cmp4 = icmp eq i32 %11, %call
  br i1 %cmp4, label %land.lhs.true, label %if.end73

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 4
  %12 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp6 = icmp eq i64 %12, %conv
  br i1 %cmp6, label %land.lhs.true7, label %if.end73

land.lhs.true7:                                   ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 5
  %13 = load i8*, i8** %key, align 8, !tbaa !257
  %call9 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %13, i8* %cache_key, i64 %conv) #17
  br i1 %call9, label %land.lhs.true10, label %if.end73

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %computed_bounds11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 10
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11, align 8, !tbaa !256
  %call12 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %14) #17
  br i1 %call12, label %land.lhs.true13, label %if.end73

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %tuple_count14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 8
  %15 = load i32, i32* %tuple_count14, align 8, !tbaa !230
  %cmp15 = icmp eq i32 %15, %tuple_count
  br i1 %cmp15, label %if.then23, label %if.end73

if.then23:                                        ; preds = %land.lhs.true13, %for.cond.cleanup.us
  %.us-phi = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0222.us, %for.cond.cleanup.us ], [ %entry3.0222, %land.lhs.true13 ]
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp24.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %16
  br i1 %cmp24.not, label %if.end57, label %do.body

do.body:                                          ; preds = %if.then23
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 1
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp26.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp26.not, label %if.then27, label %do.end

if.then27:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.3.43, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then27, %do.body
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 2
  %18 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp28.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %18, null
  br i1 %cmp28.not, label %do.body33, label %if.then29

if.then29:                                        ; preds = %do.end
  %19 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %more_recent32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %18, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %19, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent32, align 8, !tbaa !268
  %.pr = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.body41

do.body33:                                        ; preds = %do.end
  %20 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp34 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %20, %.us-phi
  br i1 %cmp34, label %do.end38, label %if.then35

if.then35:                                        ; preds = %do.body33
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.44, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end38

do.end38:                                         ; preds = %if.then35, %do.body33
  %21 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %21, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %do.body41

do.body41:                                        ; preds = %do.end38, %if.then29
  %22 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pr, %if.then29 ], [ %21, %do.end38 ]
  %cmp43.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %22, null
  br i1 %cmp43.not, label %if.then44, label %do.end47

if.then44:                                        ; preds = %do.body41
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.5.45, i64 0, i64 0)) #16
  tail call void @abort() #16
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.end47

do.end47:                                         ; preds = %if.then44, %do.body41
  %23 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pre, %if.then44 ], [ %22, %do.body41 ]
  %24 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent50 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %23, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %24, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent50, align 8, !tbaa !251
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %25 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %25, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp53.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %25, null
  br i1 %cmp53.not, label %if.end56, label %if.then54

if.then54:                                        ; preds = %do.end47
  %more_recent55 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %25, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent55, align 8, !tbaa !268
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %do.end47
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then23
  br i1 %cmp16215, label %for.body62.lr.ph, label %cleanup119.loopexit223

for.body62.lr.ph:                                 ; preds = %if.end57
  %buf66 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 11
  %wide.trip.count230 = zext i32 %tuple_count to i64
  %26 = add nsw i64 %wide.trip.count230, -1
  %xtraiter = and i64 %wide.trip.count230, 3
  %27 = icmp ult i64 %26, 3
  br i1 %27, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62.lr.ph.new

for.body62.lr.ph.new:                             ; preds = %for.body62.lr.ph
  %unroll_iter = and i64 %wide.trip.count230, 4294967292
  br label %for.body62

for.body62:                                       ; preds = %for.body62, %for.body62.lr.ph.new
  %indvars.iv228 = phi i64 [ 0, %for.body62.lr.ph.new ], [ %indvars.iv.next229.3, %for.body62 ]
  %niter = phi i64 [ %unroll_iter, %for.body62.lr.ph.new ], [ %niter.nsub.3, %for.body62 ]
  %arrayidx65 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228
  %28 = bitcast %struct.halide_buffer_t** %arrayidx65 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !10
  %30 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 %indvars.iv228
  %31 = bitcast %struct.halide_buffer_t* %arrayidx68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %29, i8* nonnull align 8 dereferenceable(56) %31, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229 = or i64 %indvars.iv228, 1
  %arrayidx65.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229
  %32 = bitcast %struct.halide_buffer_t** %arrayidx65.1 to i8**
  %33 = load i8*, i8** %32, align 8, !tbaa !10
  %34 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %34, i64 %indvars.iv.next229
  %35 = bitcast %struct.halide_buffer_t* %arrayidx68.1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %33, i8* nonnull align 8 dereferenceable(56) %35, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.1 = or i64 %indvars.iv228, 2
  %arrayidx65.2 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.1
  %36 = bitcast %struct.halide_buffer_t** %arrayidx65.2 to i8**
  %37 = load i8*, i8** %36, align 8, !tbaa !10
  %38 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.2 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %38, i64 %indvars.iv.next229.1
  %39 = bitcast %struct.halide_buffer_t* %arrayidx68.2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %37, i8* nonnull align 8 dereferenceable(56) %39, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.2 = or i64 %indvars.iv228, 3
  %arrayidx65.3 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.2
  %40 = bitcast %struct.halide_buffer_t** %arrayidx65.3 to i8**
  %41 = load i8*, i8** %40, align 8, !tbaa !10
  %42 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.3 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %42, i64 %indvars.iv.next229.2
  %43 = bitcast %struct.halide_buffer_t* %arrayidx68.3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %41, i8* nonnull align 8 dereferenceable(56) %43, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.3 = add nuw nsw i64 %indvars.iv228, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62, !llvm.loop !278

if.end73:                                         ; preds = %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 0
  %entry3.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0, null
  br i1 %cmp.not, label %for.cond75.preheader, label %while.body, !llvm.loop !277

for.body78:                                       ; preds = %for.inc114, %for.body78.preheader
  %indvars.iv = phi i64 [ 0, %for.body78.preheader ], [ %indvars.iv.next, %for.inc114 ]
  %arrayidx81 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %44 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx81, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 5
  %45 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %45, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body78
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 6
  %46 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %45 to i64
  %min.iters.check53 = icmp ult i32 %45, 17
  br i1 %min.iters.check53, label %for.body.i.i.preheader, label %vector.ph54

vector.ph54:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf55 = and i64 %wide.trip.count.i.i, 15
  %47 = icmp eq i64 %n.mod.vf55, 0
  %48 = select i1 %47, i64 16, i64 %n.mod.vf55
  %n.vec56 = sub nsw i64 %wide.trip.count.i.i, %48
  br label %vector.body52

vector.body52:                                    ; preds = %vector.body52, %vector.ph54
  %index57 = phi i64 [ 0, %vector.ph54 ], [ %index.next58, %vector.body52 ]
  %vec.ind61 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph54 ], [ %vec.ind.next66, %vector.body52 ]
  %vec.phi67 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi83, %vector.body52 ]
  %vec.phi68 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi84, %vector.body52 ]
  %vec.phi69 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi85, %vector.body52 ]
  %vec.phi70 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi86, %vector.body52 ]
  %step.add62 = add <4 x i64> %vec.ind61, <i64 4, i64 4, i64 4, i64 4>
  %step.add63 = add <4 x i64> %vec.ind61, <i64 8, i64 8, i64 8, i64 8>
  %step.add64 = add <4 x i64> %vec.ind61, <i64 12, i64 12, i64 12, i64 12>
  %49 = or i64 %index57, 4
  %50 = or i64 %index57, 8
  %51 = or i64 %index57, 12
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index57, i32 2
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %49, i32 2
  %54 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %50, i32 2
  %55 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %51, i32 2
  %56 = bitcast i32* %52 to <16 x i32>*
  %57 = bitcast i32* %53 to <16 x i32>*
  %58 = bitcast i32* %54 to <16 x i32>*
  %59 = bitcast i32* %55 to <16 x i32>*
  %wide.vec71 = load <16 x i32>, <16 x i32>* %56, align 4, !tbaa !182
  %wide.vec72 = load <16 x i32>, <16 x i32>* %57, align 4, !tbaa !182
  %wide.vec73 = load <16 x i32>, <16 x i32>* %58, align 4, !tbaa !182
  %wide.vec74 = load <16 x i32>, <16 x i32>* %59, align 4, !tbaa !182
  %strided.vec75 = shufflevector <16 x i32> %wide.vec71, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec76 = shufflevector <16 x i32> %wide.vec72, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec77 = shufflevector <16 x i32> %wide.vec73, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec78 = shufflevector <16 x i32> %wide.vec74, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = icmp sgt <4 x i32> %strided.vec75, zeroinitializer
  %61 = icmp sgt <4 x i32> %strided.vec76, zeroinitializer
  %62 = icmp sgt <4 x i32> %strided.vec77, zeroinitializer
  %63 = icmp sgt <4 x i32> %strided.vec78, zeroinitializer
  %64 = zext <4 x i32> %strided.vec75 to <4 x i64>
  %65 = zext <4 x i32> %strided.vec76 to <4 x i64>
  %66 = zext <4 x i32> %strided.vec77 to <4 x i64>
  %67 = zext <4 x i32> %strided.vec78 to <4 x i64>
  %68 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind61, i32 1
  %69 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add62, i32 1
  %70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add63, i32 1
  %71 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add64, i32 1
  %wide.masked.gather79 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %68, i32 4, <4 x i1> %60, <4 x i32> undef), !tbaa !178
  %wide.masked.gather80 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %69, i32 4, <4 x i1> %61, <4 x i32> undef), !tbaa !178
  %wide.masked.gather81 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %70, i32 4, <4 x i1> %62, <4 x i32> undef), !tbaa !178
  %wide.masked.gather82 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %71, i32 4, <4 x i1> %63, <4 x i32> undef), !tbaa !178
  %72 = add nsw <4 x i32> %wide.masked.gather79, <i32 -1, i32 -1, i32 -1, i32 -1>
  %73 = add nsw <4 x i32> %wide.masked.gather80, <i32 -1, i32 -1, i32 -1, i32 -1>
  %74 = add nsw <4 x i32> %wide.masked.gather81, <i32 -1, i32 -1, i32 -1, i32 -1>
  %75 = add nsw <4 x i32> %wide.masked.gather82, <i32 -1, i32 -1, i32 -1, i32 -1>
  %76 = sext <4 x i32> %72 to <4 x i64>
  %77 = sext <4 x i32> %73 to <4 x i64>
  %78 = sext <4 x i32> %74 to <4 x i64>
  %79 = sext <4 x i32> %75 to <4 x i64>
  %80 = mul nsw <4 x i64> %76, %64
  %81 = mul nsw <4 x i64> %77, %65
  %82 = mul nsw <4 x i64> %78, %66
  %83 = mul nsw <4 x i64> %79, %67
  %84 = select <4 x i1> %60, <4 x i64> %80, <4 x i64> zeroinitializer
  %predphi83 = add <4 x i64> %vec.phi67, %84
  %85 = select <4 x i1> %61, <4 x i64> %81, <4 x i64> zeroinitializer
  %predphi84 = add <4 x i64> %vec.phi68, %85
  %86 = select <4 x i1> %62, <4 x i64> %82, <4 x i64> zeroinitializer
  %predphi85 = add <4 x i64> %vec.phi69, %86
  %87 = select <4 x i1> %63, <4 x i64> %83, <4 x i64> zeroinitializer
  %predphi86 = add <4 x i64> %vec.phi70, %87
  %index.next58 = add i64 %index57, 16
  %vec.ind.next66 = add <4 x i64> %vec.ind61, <i64 16, i64 16, i64 16, i64 16>
  %88 = icmp eq i64 %index.next58, %n.vec56
  br i1 %88, label %middle.block50, label %vector.body52, !llvm.loop !279

middle.block50:                                   ; preds = %vector.body52
  %bin.rdx87 = add <4 x i64> %predphi84, %predphi83
  %bin.rdx88 = add <4 x i64> %predphi85, %bin.rdx87
  %bin.rdx89 = add <4 x i64> %predphi86, %bin.rdx88
  %89 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx89)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block50, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec56, %middle.block50 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %89, %middle.block50 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 2
  %90 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %90, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %90 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 1
  %91 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %91, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !280

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %45, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader91, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %92 = icmp eq i64 %n.mod.vf, 0
  %93 = select i1 %92, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %93
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi33 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi45, %vector.body ]
  %vec.phi34 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi46, %vector.body ]
  %vec.phi35 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi47, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add30 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add31 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %94 = or i64 %index, 4
  %95 = or i64 %index, 8
  %96 = or i64 %index, 12
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index, i32 2
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %94, i32 2
  %99 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %95, i32 2
  %100 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %96, i32 2
  %101 = bitcast i32* %97 to <16 x i32>*
  %102 = bitcast i32* %98 to <16 x i32>*
  %103 = bitcast i32* %99 to <16 x i32>*
  %104 = bitcast i32* %100 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %101, align 4, !tbaa !182
  %wide.vec36 = load <16 x i32>, <16 x i32>* %102, align 4, !tbaa !182
  %wide.vec37 = load <16 x i32>, <16 x i32>* %103, align 4, !tbaa !182
  %wide.vec38 = load <16 x i32>, <16 x i32>* %104, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec39 = shufflevector <16 x i32> %wide.vec36, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec40 = shufflevector <16 x i32> %wide.vec37, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec41 = shufflevector <16 x i32> %wide.vec38, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %105 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %106 = icmp slt <4 x i32> %strided.vec39, zeroinitializer
  %107 = icmp slt <4 x i32> %strided.vec40, zeroinitializer
  %108 = icmp slt <4 x i32> %strided.vec41, zeroinitializer
  %109 = sext <4 x i32> %strided.vec to <4 x i64>
  %110 = sext <4 x i32> %strided.vec39 to <4 x i64>
  %111 = sext <4 x i32> %strided.vec40 to <4 x i64>
  %112 = sext <4 x i32> %strided.vec41 to <4 x i64>
  %113 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind, i32 1
  %114 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add, i32 1
  %115 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add30, i32 1
  %116 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add31, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %113, i32 4, <4 x i1> %105, <4 x i32> undef), !tbaa !178
  %wide.masked.gather42 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %114, i32 4, <4 x i1> %106, <4 x i32> undef), !tbaa !178
  %wide.masked.gather43 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %115, i32 4, <4 x i1> %107, <4 x i32> undef), !tbaa !178
  %wide.masked.gather44 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %116, i32 4, <4 x i1> %108, <4 x i32> undef), !tbaa !178
  %117 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %118 = add nsw <4 x i32> %wide.masked.gather42, <i32 -1, i32 -1, i32 -1, i32 -1>
  %119 = add nsw <4 x i32> %wide.masked.gather43, <i32 -1, i32 -1, i32 -1, i32 -1>
  %120 = add nsw <4 x i32> %wide.masked.gather44, <i32 -1, i32 -1, i32 -1, i32 -1>
  %121 = sext <4 x i32> %117 to <4 x i64>
  %122 = sext <4 x i32> %118 to <4 x i64>
  %123 = sext <4 x i32> %119 to <4 x i64>
  %124 = sext <4 x i32> %120 to <4 x i64>
  %125 = mul nsw <4 x i64> %121, %109
  %126 = mul nsw <4 x i64> %122, %110
  %127 = mul nsw <4 x i64> %123, %111
  %128 = mul nsw <4 x i64> %124, %112
  %129 = select <4 x i1> %105, <4 x i64> %125, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %129
  %130 = select <4 x i1> %106, <4 x i64> %126, <4 x i64> zeroinitializer
  %predphi45 = add <4 x i64> %vec.phi33, %130
  %131 = select <4 x i1> %107, <4 x i64> %127, <4 x i64> zeroinitializer
  %predphi46 = add <4 x i64> %vec.phi34, %131
  %132 = select <4 x i1> %108, <4 x i64> %128, <4 x i64> zeroinitializer
  %predphi47 = add <4 x i64> %vec.phi35, %132
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %133 = icmp eq i64 %index.next, %n.vec
  br i1 %133, label %middle.block, label %vector.body, !llvm.loop !281

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi45, %predphi
  %bin.rdx48 = add <4 x i64> %predphi46, %bin.rdx
  %bin.rdx49 = add <4 x i64> %predphi47, %bin.rdx48
  %134 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx49)
  br label %for.body.i13.i.preheader91

for.body.i13.i.preheader91:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %134, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader91, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader91 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader91 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 2
  %135 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %135, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %135 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 1
  %136 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %136, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !282

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body78
  %add8.i27.i = phi i64 [ 1, %for.body78 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body78 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 4, i32 1
  %137 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %137 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add84 = add i64 %mul.i, 64
  %call85 = tail call i8* @halide_malloc(i8* %user_context, i64 %add84) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 2
  store i8* %call85, i8** %host, align 8, !tbaa !172
  %cmp87 = icmp eq i8* %call85, null
  br i1 %cmp87, label %for.cond89.preheader, label %for.inc114

for.cond89.preheader:                             ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %cmp90208.not = icmp eq i64 %indvars.iv, 0
  br i1 %cmp90208.not, label %cleanup119, label %for.body92

for.body92:                                       ; preds = %for.cond89.preheader, %for.body92
  %indvars.iv224 = phi i64 [ %indvars.iv.next225, %for.body92 ], [ %indvars.iv, %for.cond89.preheader ]
  %sub = add nuw nsw i64 %indvars.iv224, 4294967295
  %138 = and i64 %sub, 4294967295
  %arrayidx94 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %138
  %139 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host95 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %139, i64 0, i32 2
  %140 = load i8*, i8** %host95, align 8, !tbaa !172
  %call96 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %140) #17
  %141 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call96 to i8*
  tail call void @halide_free(i8* %user_context, i8* %141) #16
  %142 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host100 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %142, i64 0, i32 2
  store i8* null, i8** %host100, align 8, !tbaa !172
  %143 = icmp sgt i64 %indvars.iv224, 1
  %indvars.iv.next225 = add nsw i64 %indvars.iv224, -1
  br i1 %143, label %for.body92, label %cleanup119, !llvm.loop !283

for.inc114:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %add.ptr = getelementptr inbounds i8, i8* %call85, i64 64
  store i8* %add.ptr, i8** %host, align 8, !tbaa !172
  %call108 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* nonnull %add.ptr) #17
  %hash109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 1
  store i32 %call, i32* %hash109, align 8, !tbaa !284
  %entry110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry110, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %cleanup119, label %for.body78, !llvm.loop !287

cleanup119.loopexit223.loopexit.unr-lcssa:        ; preds = %for.body62, %for.body62.lr.ph
  %indvars.iv228.unr = phi i64 [ 0, %for.body62.lr.ph ], [ %indvars.iv.next229.3, %for.body62 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %cleanup119.loopexit223, label %for.body62.epil

for.body62.epil:                                  ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil
  %indvars.iv228.epil = phi i64 [ %indvars.iv.next229.epil, %for.body62.epil ], [ %indvars.iv228.unr, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body62.epil ], [ %xtraiter, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %arrayidx65.epil = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228.epil
  %144 = bitcast %struct.halide_buffer_t** %arrayidx65.epil to i8**
  %145 = load i8*, i8** %144, align 8, !tbaa !10
  %146 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.epil = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %146, i64 %indvars.iv228.epil
  %147 = bitcast %struct.halide_buffer_t* %arrayidx68.epil to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %145, i8* nonnull align 8 dereferenceable(56) %147, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.epil = add nuw nsw i64 %indvars.iv228.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %cleanup119.loopexit223, label %for.body62.epil, !llvm.loop !288

cleanup119.loopexit223:                           ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil, %if.end57
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 7
  %148 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %add = add i32 %148, %tuple_count
  store i32 %add, i32* %in_use_count, align 4, !tbaa !254
  br label %cleanup119

cleanup119:                                       ; preds = %for.inc114, %for.body92, %cleanup119.loopexit223, %for.cond89.preheader, %for.cond75.preheader
  %retval.6 = phi i32 [ 1, %for.cond75.preheader ], [ 0, %cleanup119.loopexit223 ], [ -1, %for.cond89.preheader ], [ -1, %for.body92 ], [ 1, %for.inc114 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret i32 %retval.6
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_store(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  %0 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, align 8, !tbaa !10
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %0, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %1) #17
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 1
  %2 = load i32, i32* %hash, align 8, !tbaa !284
  %3 = and i32 %2, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %idxprom = zext i32 %3 to i64
  %arrayidx7 = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry6.0228 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %cmp.not229 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0228, null
  br i1 %cmp.not229, label %for.cond61.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %conv10 = sext i32 %size to i64
  %cmp22221 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp22221, label %while.body.us.preheader, label %while.body

while.body.us.preheader:                          ; preds = %while.body.lr.ph
  %4 = zext i32 %tuple_count to i64
  br label %while.body.us

while.body.us:                                    ; preds = %if.end59.us, %while.body.us.preheader
  %entry6.0230.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0.us, %if.end59.us ], [ %entry6.0228, %while.body.us.preheader ]
  %hash8.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 6
  %5 = load i32, i32* %hash8.us, align 8, !tbaa !253
  %cmp9.us = icmp eq i32 %5, %2
  br i1 %cmp9.us, label %land.lhs.true.us, label %if.end59.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 4
  %6 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp11.us = icmp eq i64 %6, %conv10
  br i1 %cmp11.us, label %land.lhs.true12.us, label %if.end59.us

land.lhs.true12.us:                               ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 5
  %7 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call14.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %7, i8* %cache_key, i64 %conv10) #17
  br i1 %call14.us, label %land.lhs.true15.us, label %if.end59.us

land.lhs.true15.us:                               ; preds = %land.lhs.true12.us
  %computed_bounds16.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 10
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16.us, align 8, !tbaa !256
  %call17.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %8) #17
  br i1 %call17.us, label %land.lhs.true18.us, label %if.end59.us

land.lhs.true18.us:                               ; preds = %land.lhs.true15.us
  %tuple_count19.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 8
  %9 = load i32, i32* %tuple_count19.us, align 8, !tbaa !230
  %cmp20.us = icmp eq i32 %9, %tuple_count
  br i1 %cmp20.us, label %for.body.lr.ph.us, label %if.end59.us

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call30.us, label %do.body.us, label %if.end59.us

do.body.us:                                       ; preds = %for.cond.cleanup.us
  %10 = and i8 %spec.select.us, 1
  %tobool41.not.us = icmp eq i8 %10, 0
  br i1 %tobool41.not.us, label %if.then42.us, label %for.body48.us.preheader

for.body48.us.preheader:                          ; preds = %if.then42.us, %do.body.us
  br label %for.body48.us

if.then42.us:                                     ; preds = %do.body.us
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.9.46, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %for.body48.us.preheader

if.end59.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true18.us, %land.lhs.true15.us, %land.lhs.true12.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 0
  %entry6.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0.us, null
  br i1 %cmp.not.us, label %for.cond61.preheader, label %while.body.us, !llvm.loop !289

for.body48.us:                                    ; preds = %for.body48.us.preheader, %for.body48.us
  %indvars.iv244 = phi i64 [ %indvars.iv.next245, %for.body48.us ], [ 0, %for.body48.us.preheader ]
  %arrayidx50.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv244
  %11 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx50.us, align 8, !tbaa !10
  %host51.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %11, i64 0, i32 2
  %12 = load i8*, i8** %host51.us, align 8, !tbaa !172
  %call52.us = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %12) #17
  %entry53.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call52.us, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry53.us, align 8, !tbaa !286
  %indvars.iv.next245 = add nuw nsw i64 %indvars.iv244, 1
  %exitcond247.not = icmp eq i64 %indvars.iv.next245, %4
  br i1 %exitcond247.not, label %cleanup132, label %for.body48.us, !llvm.loop !290

for.body.us:                                      ; preds = %for.body.lr.ph.us, %for.body.us
  %13 = phi %struct.halide_buffer_t* [ %.pre, %for.body.lr.ph.us ], [ %16, %for.body.us ]
  %indvars.iv242 = phi i64 [ 0, %for.body.lr.ph.us ], [ %indvars.iv.next243, %for.body.us ]
  %no_host_pointers_equal.0222.us = phi i8 [ 1, %for.body.lr.ph.us ], [ %spec.select.us, %for.body.us ]
  %arrayidx24.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv242
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx24.us, align 8, !tbaa !10
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %13, i64 %indvars.iv242, i32 6
  %15 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call30.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %14, %struct.halide_dimension_t* %15) #17
  %16 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  %host35.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %16, i64 %indvars.iv242, i32 2
  %17 = load i8*, i8** %host35.us, align 8, !tbaa !172
  %host36.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %14, i64 0, i32 2
  %18 = load i8*, i8** %host36.us, align 8, !tbaa !172
  %cmp37.us = icmp eq i8* %17, %18
  %spec.select.us = select i1 %cmp37.us, i8 0, i8 %no_host_pointers_equal.0222.us
  %indvars.iv.next243 = add nuw nsw i64 %indvars.iv242, 1
  %cmp22.us = icmp ult i64 %indvars.iv.next243, %4
  %19 = and i1 %cmp22.us, %call30.us
  br i1 %19, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !291

for.body.lr.ph.us:                                ; preds = %land.lhs.true18.us
  %buf27.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 11
  %.pre = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  br label %for.body.us

for.cond61.preheader:                             ; preds = %if.end59, %if.end59.us, %entry
  %cmp62218 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp62218, label %for.body64.preheader, label %for.cond.cleanup63

for.body64.preheader:                             ; preds = %for.cond61.preheader
  %wide.trip.count240 = zext i32 %tuple_count to i64
  br label %for.body64

while.body:                                       ; preds = %while.body.lr.ph, %if.end59
  %entry6.0230 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0, %if.end59 ], [ %entry6.0228, %while.body.lr.ph ]
  %hash8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 6
  %20 = load i32, i32* %hash8, align 8, !tbaa !253
  %cmp9 = icmp eq i32 %20, %2
  br i1 %cmp9, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 4
  %21 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp11 = icmp eq i64 %21, %conv10
  br i1 %cmp11, label %land.lhs.true12, label %if.end59

land.lhs.true12:                                  ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 5
  %22 = load i8*, i8** %key, align 8, !tbaa !257
  %call14 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %22, i8* %cache_key, i64 %conv10) #17
  br i1 %call14, label %land.lhs.true15, label %if.end59

land.lhs.true15:                                  ; preds = %land.lhs.true12
  %computed_bounds16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 10
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16, align 8, !tbaa !256
  %call17 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %23) #17
  br i1 %call17, label %land.lhs.true18, label %if.end59

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %tuple_count19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 8
  %24 = load i32, i32* %tuple_count19, align 8, !tbaa !230
  %cmp20 = icmp eq i32 %24, %tuple_count
  br i1 %cmp20, label %cleanup132, label %if.end59

if.end59:                                         ; preds = %land.lhs.true18, %land.lhs.true15, %land.lhs.true12, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 0
  %entry6.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0, null
  br i1 %cmp.not, label %for.cond61.preheader, label %while.body, !llvm.loop !289

for.cond.cleanup63:                               ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.cond61.preheader
  %added_size.0.lcssa = phi i64 [ 0, %for.cond61.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %25 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %add73 = add i64 %25, %added_size.0.lcssa
  store i64 %add73, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #17
  %call74 = tail call i8* @halide_malloc(i8* null, i64 96) #16
  %tobool75.not = icmp eq i8* %call74, null
  br i1 %tobool75.not, label %if.then83, label %if.then76

for.body64:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body64.preheader
  %indvars.iv238 = phi i64 [ 0, %for.body64.preheader ], [ %indvars.iv.next239, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %added_size.0219 = phi i64 [ 0, %for.body64.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %arrayidx67 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv238
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx67, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 5
  %27 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %27, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body64
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 6
  %28 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %27 to i64
  %min.iters.check39 = icmp ult i32 %27, 17
  br i1 %min.iters.check39, label %for.body.i.i.preheader, label %vector.ph40

vector.ph40:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf41 = and i64 %wide.trip.count.i.i, 15
  %29 = icmp eq i64 %n.mod.vf41, 0
  %30 = select i1 %29, i64 16, i64 %n.mod.vf41
  %n.vec42 = sub nsw i64 %wide.trip.count.i.i, %30
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph40
  %index43 = phi i64 [ 0, %vector.ph40 ], [ %index.next44, %vector.body38 ]
  %vec.ind47 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph40 ], [ %vec.ind.next52, %vector.body38 ]
  %vec.phi53 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi69, %vector.body38 ]
  %vec.phi54 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi70, %vector.body38 ]
  %vec.phi55 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi71, %vector.body38 ]
  %vec.phi56 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi72, %vector.body38 ]
  %step.add48 = add <4 x i64> %vec.ind47, <i64 4, i64 4, i64 4, i64 4>
  %step.add49 = add <4 x i64> %vec.ind47, <i64 8, i64 8, i64 8, i64 8>
  %step.add50 = add <4 x i64> %vec.ind47, <i64 12, i64 12, i64 12, i64 12>
  %31 = or i64 %index43, 4
  %32 = or i64 %index43, 8
  %33 = or i64 %index43, 12
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index43, i32 2
  %35 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %31, i32 2
  %36 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %32, i32 2
  %37 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %33, i32 2
  %38 = bitcast i32* %34 to <16 x i32>*
  %39 = bitcast i32* %35 to <16 x i32>*
  %40 = bitcast i32* %36 to <16 x i32>*
  %41 = bitcast i32* %37 to <16 x i32>*
  %wide.vec57 = load <16 x i32>, <16 x i32>* %38, align 4, !tbaa !182
  %wide.vec58 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !182
  %wide.vec59 = load <16 x i32>, <16 x i32>* %40, align 4, !tbaa !182
  %wide.vec60 = load <16 x i32>, <16 x i32>* %41, align 4, !tbaa !182
  %strided.vec61 = shufflevector <16 x i32> %wide.vec57, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec62 = shufflevector <16 x i32> %wide.vec58, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec63 = shufflevector <16 x i32> %wide.vec59, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec64 = shufflevector <16 x i32> %wide.vec60, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %42 = icmp sgt <4 x i32> %strided.vec61, zeroinitializer
  %43 = icmp sgt <4 x i32> %strided.vec62, zeroinitializer
  %44 = icmp sgt <4 x i32> %strided.vec63, zeroinitializer
  %45 = icmp sgt <4 x i32> %strided.vec64, zeroinitializer
  %46 = zext <4 x i32> %strided.vec61 to <4 x i64>
  %47 = zext <4 x i32> %strided.vec62 to <4 x i64>
  %48 = zext <4 x i32> %strided.vec63 to <4 x i64>
  %49 = zext <4 x i32> %strided.vec64 to <4 x i64>
  %50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind47, i32 1
  %51 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add48, i32 1
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add49, i32 1
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add50, i32 1
  %wide.masked.gather65 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %50, i32 4, <4 x i1> %42, <4 x i32> undef), !tbaa !178
  %wide.masked.gather66 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %51, i32 4, <4 x i1> %43, <4 x i32> undef), !tbaa !178
  %wide.masked.gather67 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %52, i32 4, <4 x i1> %44, <4 x i32> undef), !tbaa !178
  %wide.masked.gather68 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %53, i32 4, <4 x i1> %45, <4 x i32> undef), !tbaa !178
  %54 = add nsw <4 x i32> %wide.masked.gather65, <i32 -1, i32 -1, i32 -1, i32 -1>
  %55 = add nsw <4 x i32> %wide.masked.gather66, <i32 -1, i32 -1, i32 -1, i32 -1>
  %56 = add nsw <4 x i32> %wide.masked.gather67, <i32 -1, i32 -1, i32 -1, i32 -1>
  %57 = add nsw <4 x i32> %wide.masked.gather68, <i32 -1, i32 -1, i32 -1, i32 -1>
  %58 = sext <4 x i32> %54 to <4 x i64>
  %59 = sext <4 x i32> %55 to <4 x i64>
  %60 = sext <4 x i32> %56 to <4 x i64>
  %61 = sext <4 x i32> %57 to <4 x i64>
  %62 = mul nsw <4 x i64> %58, %46
  %63 = mul nsw <4 x i64> %59, %47
  %64 = mul nsw <4 x i64> %60, %48
  %65 = mul nsw <4 x i64> %61, %49
  %66 = select <4 x i1> %42, <4 x i64> %62, <4 x i64> zeroinitializer
  %predphi69 = add <4 x i64> %vec.phi53, %66
  %67 = select <4 x i1> %43, <4 x i64> %63, <4 x i64> zeroinitializer
  %predphi70 = add <4 x i64> %vec.phi54, %67
  %68 = select <4 x i1> %44, <4 x i64> %64, <4 x i64> zeroinitializer
  %predphi71 = add <4 x i64> %vec.phi55, %68
  %69 = select <4 x i1> %45, <4 x i64> %65, <4 x i64> zeroinitializer
  %predphi72 = add <4 x i64> %vec.phi56, %69
  %index.next44 = add i64 %index43, 16
  %vec.ind.next52 = add <4 x i64> %vec.ind47, <i64 16, i64 16, i64 16, i64 16>
  %70 = icmp eq i64 %index.next44, %n.vec42
  br i1 %70, label %middle.block36, label %vector.body38, !llvm.loop !292

middle.block36:                                   ; preds = %vector.body38
  %bin.rdx73 = add <4 x i64> %predphi70, %predphi69
  %bin.rdx74 = add <4 x i64> %predphi71, %bin.rdx73
  %bin.rdx75 = add <4 x i64> %predphi72, %bin.rdx74
  %71 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx75)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block36, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec42, %middle.block36 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %71, %middle.block36 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 2
  %72 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %72, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %72 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 1
  %73 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %73, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !293

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %27, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader77, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %74 = icmp eq i64 %n.mod.vf, 0
  %75 = select i1 %74, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %75
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi19 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi31, %vector.body ]
  %vec.phi20 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi32, %vector.body ]
  %vec.phi21 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi33, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add16 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add17 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %76 = or i64 %index, 4
  %77 = or i64 %index, 8
  %78 = or i64 %index, 12
  %79 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 2
  %80 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %76, i32 2
  %81 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %77, i32 2
  %82 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %78, i32 2
  %83 = bitcast i32* %79 to <16 x i32>*
  %84 = bitcast i32* %80 to <16 x i32>*
  %85 = bitcast i32* %81 to <16 x i32>*
  %86 = bitcast i32* %82 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %83, align 4, !tbaa !182
  %wide.vec22 = load <16 x i32>, <16 x i32>* %84, align 4, !tbaa !182
  %wide.vec23 = load <16 x i32>, <16 x i32>* %85, align 4, !tbaa !182
  %wide.vec24 = load <16 x i32>, <16 x i32>* %86, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec25 = shufflevector <16 x i32> %wide.vec22, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec26 = shufflevector <16 x i32> %wide.vec23, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec27 = shufflevector <16 x i32> %wide.vec24, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %87 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %88 = icmp slt <4 x i32> %strided.vec25, zeroinitializer
  %89 = icmp slt <4 x i32> %strided.vec26, zeroinitializer
  %90 = icmp slt <4 x i32> %strided.vec27, zeroinitializer
  %91 = sext <4 x i32> %strided.vec to <4 x i64>
  %92 = sext <4 x i32> %strided.vec25 to <4 x i64>
  %93 = sext <4 x i32> %strided.vec26 to <4 x i64>
  %94 = sext <4 x i32> %strided.vec27 to <4 x i64>
  %95 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind, i32 1
  %96 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add, i32 1
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add16, i32 1
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add17, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %95, i32 4, <4 x i1> %87, <4 x i32> undef), !tbaa !178
  %wide.masked.gather28 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %96, i32 4, <4 x i1> %88, <4 x i32> undef), !tbaa !178
  %wide.masked.gather29 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %97, i32 4, <4 x i1> %89, <4 x i32> undef), !tbaa !178
  %wide.masked.gather30 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %98, i32 4, <4 x i1> %90, <4 x i32> undef), !tbaa !178
  %99 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %100 = add nsw <4 x i32> %wide.masked.gather28, <i32 -1, i32 -1, i32 -1, i32 -1>
  %101 = add nsw <4 x i32> %wide.masked.gather29, <i32 -1, i32 -1, i32 -1, i32 -1>
  %102 = add nsw <4 x i32> %wide.masked.gather30, <i32 -1, i32 -1, i32 -1, i32 -1>
  %103 = sext <4 x i32> %99 to <4 x i64>
  %104 = sext <4 x i32> %100 to <4 x i64>
  %105 = sext <4 x i32> %101 to <4 x i64>
  %106 = sext <4 x i32> %102 to <4 x i64>
  %107 = mul nsw <4 x i64> %103, %91
  %108 = mul nsw <4 x i64> %104, %92
  %109 = mul nsw <4 x i64> %105, %93
  %110 = mul nsw <4 x i64> %106, %94
  %111 = select <4 x i1> %87, <4 x i64> %107, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %111
  %112 = select <4 x i1> %88, <4 x i64> %108, <4 x i64> zeroinitializer
  %predphi31 = add <4 x i64> %vec.phi19, %112
  %113 = select <4 x i1> %89, <4 x i64> %109, <4 x i64> zeroinitializer
  %predphi32 = add <4 x i64> %vec.phi20, %113
  %114 = select <4 x i1> %90, <4 x i64> %110, <4 x i64> zeroinitializer
  %predphi33 = add <4 x i64> %vec.phi21, %114
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %115 = icmp eq i64 %index.next, %n.vec
  br i1 %115, label %middle.block, label %vector.body, !llvm.loop !294

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi31, %predphi
  %bin.rdx34 = add <4 x i64> %predphi32, %bin.rdx
  %bin.rdx35 = add <4 x i64> %predphi33, %bin.rdx34
  %116 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx35)
  br label %for.body.i13.i.preheader77

for.body.i13.i.preheader77:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %116, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader77, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader77 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader77 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 2
  %117 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %117, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %117 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 1
  %118 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %118, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !295

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body64
  %add8.i27.i = phi i64 [ 1, %for.body64 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body64 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 4, i32 1
  %119 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %119 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add = add i64 %mul.i, %added_size.0219
  %indvars.iv.next239 = add nuw nsw i64 %indvars.iv238, 1
  %exitcond241.not = icmp eq i64 %indvars.iv.next239, %wide.trip.count240
  br i1 %exitcond241.not, label %for.cond.cleanup63, label %for.body64, !llvm.loop !296

if.then76:                                        ; preds = %for.cond.cleanup63
  %120 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"*
  %conv77 = sext i32 %size to i64
  %call79 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %120, i8* %cache_key, i64 %conv77, i32 %2, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** nonnull %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) #17
  br i1 %call79, label %if.end101, label %if.then83

if.then83:                                        ; preds = %if.then76, %for.cond.cleanup63
  %121 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %sub = sub i64 %121, %added_size.0.lcssa
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br i1 %cmp62218, label %for.body88.preheader, label %for.cond.cleanup87

for.body88.preheader:                             ; preds = %if.then83
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body88

for.cond.cleanup87:                               ; preds = %for.body88, %if.then83
  br i1 %tobool75.not, label %cleanup132, label %if.then99

for.body88:                                       ; preds = %for.body88, %for.body88.preheader
  %indvars.iv = phi i64 [ 0, %for.body88.preheader ], [ %indvars.iv.next, %for.body88 ]
  %arrayidx90 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %122 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx90, align 8, !tbaa !10
  %host91 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %122, i64 0, i32 2
  %123 = load i8*, i8** %host91, align 8, !tbaa !172
  %call92 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %123) #17
  %entry93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call92, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry93, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup87, label %for.body88, !llvm.loop !297

if.then99:                                        ; preds = %for.cond.cleanup87
  tail call void @halide_free(i8* %user_context, i8* nonnull %call74) #16
  br label %cleanup132

if.end101:                                        ; preds = %if.then76
  %124 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %next104 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %124, %"struct.Halide::Runtime::Internal::CacheEntry"** %next104, align 8, !tbaa !227
  %125 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %less_recent = getelementptr inbounds i8, i8* %call74, i64 16
  %126 = bitcast i8* %less_recent to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %125, %"struct.Halide::Runtime::Internal::CacheEntry"** %126, align 8, !tbaa !251
  %cmp105.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %125, null
  br i1 %cmp105.not, label %if.end107, label %if.then106

if.then106:                                       ; preds = %if.end101
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %125, i64 0, i32 1
  %127 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent to i8**
  store i8* %call74, i8** %127, align 8, !tbaa !268
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.end101
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE to i8**), align 8, !tbaa !10
  %128 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp108 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %128, null
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.end107
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE to i8**), align 8, !tbaa !10
  br label %if.end110

if.end110:                                        ; preds = %if.then109, %if.end107
  %129 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7 to i8**
  store i8* %call74, i8** %129, align 8, !tbaa !10
  %in_use_count = getelementptr inbounds i8, i8* %call74, i64 52
  %130 = bitcast i8* %in_use_count to i32*
  store i32 %tuple_count, i32* %130, align 4, !tbaa !254
  br i1 %cmp62218, label %for.body117.preheader, label %cleanup132

for.body117.preheader:                            ; preds = %if.end110
  %wide.trip.count236 = zext i32 %tuple_count to i64
  br label %for.body117

for.body117:                                      ; preds = %for.body117, %for.body117.preheader
  %indvars.iv234 = phi i64 [ 0, %for.body117.preheader ], [ %indvars.iv.next235, %for.body117 ]
  %arrayidx119 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv234
  %131 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx119, align 8, !tbaa !10
  %host120 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %131, i64 0, i32 2
  %132 = load i8*, i8** %host120, align 8, !tbaa !172
  %call121 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %132) #17
  %133 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call121 to i8**
  store i8* %call74, i8** %133, align 8, !tbaa !286
  %indvars.iv.next235 = add nuw nsw i64 %indvars.iv234, 1
  %exitcond237.not = icmp eq i64 %indvars.iv.next235, %wide.trip.count236
  br i1 %exitcond237.not, label %cleanup132, label %for.body117, !llvm.loop !298

cleanup132:                                       ; preds = %land.lhs.true18, %for.body48.us, %for.body117, %if.end110, %if.then99, %for.cond.cleanup87
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret i32 0
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_release(i8* %user_context, i8* %host) local_unnamed_addr #4 {
entry:
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) #17
  %entry2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry2, align 8, !tbaa !286
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call to i8*
  tail call void @halide_free(i8* %user_context, i8* %1) #16
  br label %if.end6

if.else:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %0, i64 0, i32 7
  %2 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3.not = icmp eq i32 %2, 0
  br i1 %cmp3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.else
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.12.47, i64 0, i64 0)) #16
  tail call void @abort() #16
  %.pre = load i32, i32* %in_use_count, align 4, !tbaa !254
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.else
  %3 = phi i32 [ %.pre, %if.then4 ], [ %2, %if.else ]
  %dec = add i32 %3, -1
  store i32 %dec, i32* %in_use_count, align 4, !tbaa !254
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  br label %if.end6

if.end6:                                          ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_evict(i8* %user_context, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  br label %for.body

for.cond.cleanup:                                 ; preds = %if.end25
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret void

for.body:                                         ; preds = %if.end25, %entry
  %__begin1.059 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %if.end25 ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, align 8, !tbaa !10
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not, label %if.end25, label %while.body

while.body:                                       ; preds = %for.body, %if.end24
  %prev.058 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.1, %if.end24 ], [ %__begin1.059, %for.body ]
  %entry1.056 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %if.end24 ], [ %0, %for.body ]
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next4, align 8, !tbaa !227
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 13
  %2 = load i8, i8* %has_eviction_key, align 8, !tbaa !261, !range !17
  %tobool.not = icmp eq i8 %2, 0
  br i1 %tobool.not, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %eviction_key5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 12
  %3 = load i64, i64* %eviction_key5, align 8, !tbaa !262
  %cmp6 = icmp eq i64 %3, %eviction_key
  br i1 %cmp6, label %if.then7, label %if.end24

if.then7:                                         ; preds = %land.lhs.true
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %1, %"struct.Halide::Runtime::Internal::CacheEntry"** %prev.058, align 8, !tbaa !10
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 1
  %4 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp8.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %4, null
  %less_recent12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 2
  %5 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br i1 %cmp8.not, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.then7
  %less_recent11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %4, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent11, align 8, !tbaa !251
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br label %if.end

if.else:                                          ; preds = %if.then7
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then9
  %6 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %5, %if.else ], [ %.pre, %if.then9 ]
  %cmp14.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %more_recent18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 1
  %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink = select i1 %cmp14.not, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %4, %"struct.Halide::Runtime::Internal::CacheEntry"** %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink, align 8, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.056) #17
  %7 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056 to i8*
  tail call void @halide_free(i8* %user_context, i8* nonnull %7) #16
  br label %if.end24

if.end24:                                         ; preds = %if.end, %land.lhs.true, %while.body
  %prev.1 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.058, %if.end ], [ %next4, %land.lhs.true ], [ %next4, %while.body ]
  %cmp3.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp3.not, label %if.end25, label %while.body, !llvm.loop !299

if.end25:                                         ; preds = %if.end24, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i64 0, i64 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !14
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !14
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !14
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i64 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i64 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !14
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i64 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #17
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry, %for.body
  %arg.addr.017 = phi i64 [ %div, %for.body ], [ %arg, %entry ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body ], [ %add.ptr, %entry ]
  %i.015 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i64 -1
  %inc = add nuw nsw i32 %i.015, 1
  %cmp = icmp slt i32 %inc, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body, label %for.cond.cleanup, !llvm.loop !300
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i64 1
  store i8 45, i8* %dst, align 1, !tbaa !14
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #17
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !164
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !110
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i64 8) #16
  %2 = load i64, i64* %bits, align 8, !tbaa !110
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.57, i64 0, i64 0)) #17
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.58, i64 0, i64 0)) #17
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.59, i64 0, i64 0)) #17
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.60, i64 0, i64 0)) #17
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.61, i64 0, i64 0)) #17
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.62, i64 0, i64 0)) #17
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.63, i64 0, i64 0)) #17
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.64, i64 0, i64 0)) #17
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9.65, i64 0, i64 0)) #17
  %4 = load double, double* %arg.addr, align 8, !tbaa !164
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !164
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !164
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.body, label %while.cond40thread-pre-split

while.body:                                       ; preds = %while.condthread-pre-split, %while.body
  %exponent_base_10.0277 = phi i32 [ %dec, %while.body ], [ 0, %while.condthread-pre-split ]
  %5 = phi double [ %mul, %while.body ], [ %.pr, %while.condthread-pre-split ]
  %mul = fmul double %5, 1.000000e+01
  %dec = add nsw i32 %exponent_base_10.0277, -1
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !301

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !164
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr261 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr261, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr261, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !302

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !164
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr261, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #17
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #17
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11.67, i64 0, i64 0)) #17
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.68, i64 0, i64 0)) #17
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59262 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59262, i32 2) #17
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #17
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %integer_part.0 = select i1 %cmp72, i64 0, i64 %shr77
  %sub81 = select i1 %cmp72, i64 0, i64 %shl80
  %f.0.in = sub i64 %add67, %sub81
  %f.0 = uitofp i64 %f.0.in to double
  %conv84258 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84258, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond259 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond259 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select260 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.then71, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.then71 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.then71 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select260, %if.then71 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #17
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader.preheader, label %for.cond.cleanup

for.cond111.preheader.preheader:                  ; preds = %if.end104
  %xtraiter = and i32 %integer_exponent.0, 1
  %9 = icmp eq i32 %integer_exponent.0, 1
  br i1 %9, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader.preheader.new

for.cond111.preheader.preheader.new:              ; preds = %for.cond111.preheader.preheader
  %unroll_iter = and i32 %integer_exponent.0, -2
  br label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %if.end137.1, %for.cond111.preheader.preheader.new
  %int_part_ptr.0268 = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader.new ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %niter = phi i32 [ %unroll_iter, %for.cond111.preheader.preheader.new ], [ %niter.nsub.1, %if.end137.1 ]
  %cmp113.not264 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not264, label %if.end137, label %for.body115

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %if.end137.1, %for.cond111.preheader.preheader
  %int_part_ptr.1.lcssa.ph = phi i8* [ undef, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %int_part_ptr.0268.unr = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.cond111.preheader.epil

for.cond111.preheader.epil:                       ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %cmp113.not264.epil = icmp eq i8* %call108, %int_part_ptr.0268.unr
  br i1 %cmp113.not264.epil, label %for.cond.cleanup, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.cond111.preheader.epil, %for.body115.epil
  %p.0266.pn.epil = phi i8* [ %p.0266.epil, %for.body115.epil ], [ %call108, %for.cond111.preheader.epil ]
  %carry.0265.epil = phi i32 [ %carry.1.epil, %for.body115.epil ], [ 0, %for.cond111.preheader.epil ]
  %p.0266.epil = getelementptr inbounds i8, i8* %p.0266.pn.epil, i64 -1
  %10 = load i8, i8* %p.0266.epil, align 1, !tbaa !14
  %sub117.epil = add i8 %10, -48
  %conv119.epil = sext i8 %sub117.epil to i32
  %mul120.epil = shl nsw i32 %conv119.epil, 1
  %add121.epil = or i32 %mul120.epil, %carry.0265.epil
  %11 = trunc i32 %add121.epil to i8
  %cmp124.epil = icmp sgt i8 %11, 9
  %sub127.epil = add nsw i32 %add121.epil, 246
  %carry.1.epil = zext i1 %cmp124.epil to i32
  %new_digit.0.in.epil = select i1 %cmp124.epil, i32 %sub127.epil, i32 %add121.epil
  %12 = trunc i32 %new_digit.0.in.epil to i8
  %conv133.epil = add i8 %12, 48
  store i8 %conv133.epil, i8* %p.0266.epil, align 1, !tbaa !14
  %cmp113.not.epil = icmp eq i8* %p.0266.epil, %int_part_ptr.0268.unr
  br i1 %cmp113.not.epil, label %for.cond.cleanup114.epil, label %for.body115.epil, !llvm.loop !303

for.cond.cleanup114.epil:                         ; preds = %for.body115.epil
  br i1 %cmp124.epil, label %if.then135.epil, label %for.cond.cleanup

if.then135.epil:                                  ; preds = %for.cond.cleanup114.epil
  %incdec.ptr136.epil = getelementptr inbounds i8, i8* %int_part_ptr.0268.unr, i64 -1
  store i8 49, i8* %incdec.ptr136.epil, align 1, !tbaa !14
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.cond111.preheader.epil, %for.cond.cleanup114.epil, %if.then135.epil, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %incdec.ptr136.epil, %if.then135.epil ], [ %int_part_ptr.0268.unr, %for.cond.cleanup114.epil ], [ %call108, %for.cond111.preheader.epil ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #17
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #17
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0266.pn = phi i8* [ %p.0266, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0265 = phi i32 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0266 = getelementptr inbounds i8, i8* %p.0266.pn, i64 -1
  %13 = load i8, i8* %p.0266, align 1, !tbaa !14
  %sub117 = add i8 %13, -48
  %conv119 = sext i8 %sub117 to i32
  %mul120 = shl nsw i32 %conv119, 1
  %add121 = or i32 %mul120, %carry.0265
  %14 = trunc i32 %add121 to i8
  %cmp124 = icmp sgt i8 %14, 9
  %sub127 = add nsw i32 %add121, 246
  %carry.1 = zext i1 %cmp124 to i32
  %new_digit.0.in = select i1 %cmp124, i32 %sub127, i32 %add121
  %15 = trunc i32 %new_digit.0.in to i8
  %conv133 = add i8 %15, 48
  store i8 %conv133, i8* %p.0266, align 1, !tbaa !14
  %cmp113.not = icmp eq i8* %p.0266, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !303

if.then135:                                       ; preds = %for.cond.cleanup114
  %incdec.ptr136 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i64 -1
  store i8 49, i8* %incdec.ptr136, align 1, !tbaa !14
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %incdec.ptr136, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %cmp113.not264.1 = icmp eq i8* %call108, %int_part_ptr.1
  br i1 %cmp113.not264.1, label %if.end137.1, label %for.body115.1

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1

for.body115.1:                                    ; preds = %if.end137, %for.body115.1
  %p.0266.pn.1 = phi i8* [ %p.0266.1, %for.body115.1 ], [ %call108, %if.end137 ]
  %carry.0265.1 = phi i32 [ %carry.1.1, %for.body115.1 ], [ 0, %if.end137 ]
  %p.0266.1 = getelementptr inbounds i8, i8* %p.0266.pn.1, i64 -1
  %16 = load i8, i8* %p.0266.1, align 1, !tbaa !14
  %sub117.1 = add i8 %16, -48
  %conv119.1 = sext i8 %sub117.1 to i32
  %mul120.1 = shl nsw i32 %conv119.1, 1
  %add121.1 = or i32 %mul120.1, %carry.0265.1
  %17 = trunc i32 %add121.1 to i8
  %cmp124.1 = icmp sgt i8 %17, 9
  %sub127.1 = add nsw i32 %add121.1, 246
  %carry.1.1 = zext i1 %cmp124.1 to i32
  %new_digit.0.in.1 = select i1 %cmp124.1, i32 %sub127.1, i32 %add121.1
  %18 = trunc i32 %new_digit.0.in.1 to i8
  %conv133.1 = add i8 %18, 48
  store i8 %conv133.1, i8* %p.0266.1, align 1, !tbaa !14
  %cmp113.not.1 = icmp eq i8* %p.0266.1, %int_part_ptr.1
  br i1 %cmp113.not.1, label %for.cond.cleanup114.1, label %for.body115.1, !llvm.loop !303

for.cond.cleanup114.1:                            ; preds = %for.body115.1
  br i1 %cmp124.1, label %if.then135.1, label %if.end137.1

if.then135.1:                                     ; preds = %for.cond.cleanup114.1
  %incdec.ptr136.1 = getelementptr inbounds i8, i8* %int_part_ptr.1, i64 -1
  store i8 49, i8* %incdec.ptr136.1, align 1, !tbaa !14
  br label %if.end137.1

if.end137.1:                                      ; preds = %if.then135.1, %for.cond.cleanup114.1, %if.end137
  %int_part_ptr.1.1 = phi i8* [ %incdec.ptr136.1, %if.then135.1 ], [ %int_part_ptr.1, %for.cond.cleanup114.1 ], [ %call108, %if.end137 ]
  %niter.nsub.1 = add i32 %niter, -2
  %niter.ncmp.1 = icmp eq i32 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader, !llvm.loop !304
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i64 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 18
  %1 = ptrtoint i8* %arg to i64
  %and = and i64 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !14
  %shr = lshr i64 %1, 4
  %tobool.not = icmp eq i64 %shr, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %and.1 = and i64 %shr, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.1
  %3 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 16
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !14
  %shr.1 = lshr i64 %1, 8
  %tobool.not.1 = icmp eq i64 %shr.1, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.14, %for.cond.13, %for.cond.12, %for.cond.11, %for.cond.10, %for.cond.9, %for.cond.8, %for.cond.7, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ], [ %incdec.ptr.7, %for.cond.7 ], [ %incdec.ptr.8, %for.cond.8 ], [ %incdec.ptr.9, %for.cond.9 ], [ %incdec.ptr.10, %for.cond.10 ], [ %incdec.ptr.11, %for.cond.11 ], [ %incdec.ptr.12, %for.cond.12 ], [ %incdec.ptr.13, %for.cond.13 ], [ %incdec.ptr.14, %for.cond.14 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ], [ %incdec.ptr.8, %for.cond.7 ], [ %incdec.ptr.9, %for.cond.8 ], [ %incdec.ptr.10, %for.cond.9 ], [ %incdec.ptr.11, %for.cond.10 ], [ %incdec.ptr.12, %for.cond.11 ], [ %incdec.ptr.13, %for.cond.12 ], [ %incdec.ptr.14, %for.cond.13 ], [ %incdec.ptr.15, %for.cond.14 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i64 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !14
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !14
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #17
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %and.2 = and i64 %shr.1, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.2
  %4 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 15
  store i8 %4, i8* %incdec.ptr.1, align 1, !tbaa !14
  %shr.2 = lshr i64 %1, 12
  %tobool.not.2 = icmp eq i64 %shr.2, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %and.3 = and i64 %shr.2, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.3
  %5 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 14
  store i8 %5, i8* %incdec.ptr.2, align 1, !tbaa !14
  %shr.3 = lshr i64 %1, 16
  %tobool.not.3 = icmp eq i64 %shr.3, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %and.4 = and i64 %shr.3, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.4
  %6 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 13
  store i8 %6, i8* %incdec.ptr.3, align 1, !tbaa !14
  %shr.4 = lshr i64 %1, 20
  %tobool.not.4 = icmp eq i64 %shr.4, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %and.5 = and i64 %shr.4, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.5
  %7 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 12
  store i8 %7, i8* %incdec.ptr.4, align 1, !tbaa !14
  %shr.5 = lshr i64 %1, 24
  %tobool.not.5 = icmp eq i64 %shr.5, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %and.6 = and i64 %shr.5, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.6
  %8 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 11
  store i8 %8, i8* %incdec.ptr.5, align 1, !tbaa !14
  %shr.6 = lshr i64 %1, 28
  %tobool.not.6 = icmp eq i64 %shr.6, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %and.7 = and i64 %shr.6, 15
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.7
  %9 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 10
  store i8 %9, i8* %incdec.ptr.6, align 1, !tbaa !14
  %shr.7 = lshr i64 %1, 32
  %tobool.not.7 = icmp eq i64 %shr.7, 0
  br i1 %tobool.not.7, label %cleanup, label %for.cond.7

for.cond.7:                                       ; preds = %for.cond.6
  %and.8 = and i64 %shr.7, 15
  %arrayidx.8 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.8
  %10 = load i8, i8* %arrayidx.8, align 1, !tbaa !14
  %incdec.ptr.8 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 9
  store i8 %10, i8* %incdec.ptr.7, align 1, !tbaa !14
  %shr.8 = lshr i64 %1, 36
  %tobool.not.8 = icmp eq i64 %shr.8, 0
  br i1 %tobool.not.8, label %cleanup, label %for.cond.8

for.cond.8:                                       ; preds = %for.cond.7
  %and.9 = and i64 %shr.8, 15
  %arrayidx.9 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.9
  %11 = load i8, i8* %arrayidx.9, align 1, !tbaa !14
  %incdec.ptr.9 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 8
  store i8 %11, i8* %incdec.ptr.8, align 1, !tbaa !14
  %shr.9 = lshr i64 %1, 40
  %tobool.not.9 = icmp eq i64 %shr.9, 0
  br i1 %tobool.not.9, label %cleanup, label %for.cond.9

for.cond.9:                                       ; preds = %for.cond.8
  %and.10 = and i64 %shr.9, 15
  %arrayidx.10 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.10
  %12 = load i8, i8* %arrayidx.10, align 1, !tbaa !14
  %incdec.ptr.10 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 7
  store i8 %12, i8* %incdec.ptr.9, align 1, !tbaa !14
  %shr.10 = lshr i64 %1, 44
  %tobool.not.10 = icmp eq i64 %shr.10, 0
  br i1 %tobool.not.10, label %cleanup, label %for.cond.10

for.cond.10:                                      ; preds = %for.cond.9
  %and.11 = and i64 %shr.10, 15
  %arrayidx.11 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.11
  %13 = load i8, i8* %arrayidx.11, align 1, !tbaa !14
  %incdec.ptr.11 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 6
  store i8 %13, i8* %incdec.ptr.10, align 1, !tbaa !14
  %shr.11 = lshr i64 %1, 48
  %tobool.not.11 = icmp eq i64 %shr.11, 0
  br i1 %tobool.not.11, label %cleanup, label %for.cond.11

for.cond.11:                                      ; preds = %for.cond.10
  %and.12 = and i64 %shr.11, 15
  %arrayidx.12 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.12
  %14 = load i8, i8* %arrayidx.12, align 1, !tbaa !14
  %incdec.ptr.12 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 5
  store i8 %14, i8* %incdec.ptr.11, align 1, !tbaa !14
  %shr.12 = lshr i64 %1, 52
  %tobool.not.12 = icmp eq i64 %shr.12, 0
  br i1 %tobool.not.12, label %cleanup, label %for.cond.12

for.cond.12:                                      ; preds = %for.cond.11
  %and.13 = and i64 %shr.12, 15
  %arrayidx.13 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.13
  %15 = load i8, i8* %arrayidx.13, align 1, !tbaa !14
  %incdec.ptr.13 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 4
  store i8 %15, i8* %incdec.ptr.12, align 1, !tbaa !14
  %shr.13 = lshr i64 %1, 56
  %tobool.not.13 = icmp eq i64 %shr.13, 0
  br i1 %tobool.not.13, label %cleanup, label %for.cond.13

for.cond.13:                                      ; preds = %for.cond.12
  %and.14 = and i64 %shr.13, 15
  %arrayidx.14 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.14
  %16 = load i8, i8* %arrayidx.14, align 1, !tbaa !14
  %incdec.ptr.14 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 3
  store i8 %16, i8* %incdec.ptr.13, align 1, !tbaa !14
  %shr.14 = lshr i64 %1, 60
  %tobool.not.14 = icmp eq i64 %shr.14, 0
  br i1 %tobool.not.14, label %cleanup, label %for.cond.14

for.cond.14:                                      ; preds = %for.cond.13
  %arrayidx.15 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %shr.14
  %17 = load i8, i8* %arrayidx.15, align 1, !tbaa !14
  %incdec.ptr.15 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 2
  store i8 %17, i8* %incdec.ptr.14, align 1, !tbaa !14
  br label %cleanup
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !305
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i64
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i64 0, i64 %2
  %switch.load = load i8*, i8** %switch.gep, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18.72, i64 0, i64 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #17
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !136
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #17
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !306
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19.77, i64 0, i64 0)) #17
  %5 = load i16, i16* %lanes, align 2, !tbaa !306
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20.78, i64 0, i64 0)) #17
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21.79, i64 0, i64 0)) #17
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #17
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !307
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #17
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %3 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #17
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !308
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #17
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #17
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp1179 = icmp sgt i32 %5, 0
  br i1 %cmp1179, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call26, %for.body ]
  %call27 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #17
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %dst.addr.080 = phi i8* [ %call10, %for.body.lr.ph ], [ %call26, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.080, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.82, i64 0, i64 0)) #17
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 %indvars.iv, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !181
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #17
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 %indvars.iv, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !178
  %conv18 = sext i32 %9 to i64
  %call19 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv18, i32 1) #17
  %call20 = tail call i8* @halide_string_to_string(i8* %call19, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i64 %indvars.iv, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !182
  %conv24 = sext i32 %11 to i64
  %call25 = tail call i8* @halide_int64_to_string(i8* %call20, i8* %end, i64 %conv24, i32 1) #17
  %call26 = tail call i8* @halide_string_to_string(i8* %call25, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24.83, i64 0, i64 0)) #17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !175
  %13 = sext i32 %12 to i64
  %cmp11 = icmp slt i64 %indvars.iv.next, %13
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !309

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call27, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 64
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 8, !tbaa !310
  %call = tail call i32 %0(i8* %user_context) #16
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !312

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15, !range !17
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i64 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !313
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 8, !tbaa !316
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !308
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 8, !tbaa !318
  %call = tail call i32 %1(i8* %user_context) #16
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.88, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.89, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !307
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !307
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.90, i64 0, i64 0)) #16
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #17
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 8, !tbaa !319
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.91, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.92, i64 0, i64 0)) #16
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 8, !tbaa !321
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.93, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 8, !tbaa !323
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.96, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 8, !tbaa !324
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.22.97, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.98, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.99, i64 0, i64 0)) #16
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 8, !tbaa !325
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26.100, i64 0, i64 0)) #16
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27.101, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 8, !tbaa !326
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.28.102, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %12 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29.103, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %4, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %4 to i64
  %min.iters.check = icmp ult i32 %4, 17
  br i1 %min.iters.check, label %for.body.i.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body.lr.ph.i.i
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %6 = icmp eq i64 %n.mod.vf, 0
  %7 = select i1 %6, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %7
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi6 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi18, %vector.body ]
  %vec.phi7 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi19, %vector.body ]
  %vec.phi8 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi20, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add3 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add4 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %8 = or i64 %index, 4
  %9 = or i64 %index, 8
  %10 = or i64 %index, 12
  %11 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 2
  %12 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %8, i32 2
  %13 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %9, i32 2
  %14 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %10, i32 2
  %15 = bitcast i32* %11 to <16 x i32>*
  %16 = bitcast i32* %12 to <16 x i32>*
  %17 = bitcast i32* %13 to <16 x i32>*
  %18 = bitcast i32* %14 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %15, align 4, !tbaa !182
  %wide.vec9 = load <16 x i32>, <16 x i32>* %16, align 4, !tbaa !182
  %wide.vec10 = load <16 x i32>, <16 x i32>* %17, align 4, !tbaa !182
  %wide.vec11 = load <16 x i32>, <16 x i32>* %18, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec9, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec10, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec11, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %19 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %20 = icmp sgt <4 x i32> %strided.vec12, zeroinitializer
  %21 = icmp sgt <4 x i32> %strided.vec13, zeroinitializer
  %22 = icmp sgt <4 x i32> %strided.vec14, zeroinitializer
  %23 = zext <4 x i32> %strided.vec to <4 x i64>
  %24 = zext <4 x i32> %strided.vec12 to <4 x i64>
  %25 = zext <4 x i32> %strided.vec13 to <4 x i64>
  %26 = zext <4 x i32> %strided.vec14 to <4 x i64>
  %27 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind, i32 1
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add, i32 1
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add3, i32 1
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add4, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %27, i32 4, <4 x i1> %19, <4 x i32> undef), !tbaa !178
  %wide.masked.gather15 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %28, i32 4, <4 x i1> %20, <4 x i32> undef), !tbaa !178
  %wide.masked.gather16 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %29, i32 4, <4 x i1> %21, <4 x i32> undef), !tbaa !178
  %wide.masked.gather17 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %30, i32 4, <4 x i1> %22, <4 x i32> undef), !tbaa !178
  %31 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %32 = add nsw <4 x i32> %wide.masked.gather15, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = add nsw <4 x i32> %wide.masked.gather16, <i32 -1, i32 -1, i32 -1, i32 -1>
  %34 = add nsw <4 x i32> %wide.masked.gather17, <i32 -1, i32 -1, i32 -1, i32 -1>
  %35 = sext <4 x i32> %31 to <4 x i64>
  %36 = sext <4 x i32> %32 to <4 x i64>
  %37 = sext <4 x i32> %33 to <4 x i64>
  %38 = sext <4 x i32> %34 to <4 x i64>
  %39 = mul nsw <4 x i64> %35, %23
  %40 = mul nsw <4 x i64> %36, %24
  %41 = mul nsw <4 x i64> %37, %25
  %42 = mul nsw <4 x i64> %38, %26
  %43 = select <4 x i1> %19, <4 x i64> %39, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %43
  %44 = select <4 x i1> %20, <4 x i64> %40, <4 x i64> zeroinitializer
  %predphi18 = add <4 x i64> %vec.phi6, %44
  %45 = select <4 x i1> %21, <4 x i64> %41, <4 x i64> zeroinitializer
  %predphi19 = add <4 x i64> %vec.phi7, %45
  %46 = select <4 x i1> %22, <4 x i64> %42, <4 x i64> zeroinitializer
  %predphi20 = add <4 x i64> %vec.phi8, %46
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %47 = icmp eq i64 %index.next, %n.vec
  br i1 %47, label %middle.block, label %vector.body, !llvm.loop !327

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi18, %predphi
  %bin.rdx21 = add <4 x i64> %predphi19, %bin.rdx
  %bin.rdx22 = add <4 x i64> %predphi20, %bin.rdx21
  %48 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx22)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec, %middle.block ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %48, %middle.block ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 2
  %49 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %49, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %49 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 1
  %50 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %50, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !328

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check26 = icmp ult i32 %4, 17
  br i1 %min.iters.check26, label %for.body.i13.i.preheader64, label %vector.ph27

vector.ph27:                                      ; preds = %for.body.i13.i.preheader
  %n.mod.vf28 = and i64 %wide.trip.count.i.i, 15
  %51 = icmp eq i64 %n.mod.vf28, 0
  %52 = select i1 %51, i64 16, i64 %n.mod.vf28
  %n.vec29 = sub nsw i64 %wide.trip.count.i.i, %52
  br label %vector.body25

vector.body25:                                    ; preds = %vector.body25, %vector.ph27
  %index30 = phi i64 [ 0, %vector.ph27 ], [ %index.next31, %vector.body25 ]
  %vec.ind34 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph27 ], [ %vec.ind.next39, %vector.body25 ]
  %vec.phi40 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi56, %vector.body25 ]
  %vec.phi41 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi57, %vector.body25 ]
  %vec.phi42 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi58, %vector.body25 ]
  %vec.phi43 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi59, %vector.body25 ]
  %step.add35 = add <4 x i64> %vec.ind34, <i64 4, i64 4, i64 4, i64 4>
  %step.add36 = add <4 x i64> %vec.ind34, <i64 8, i64 8, i64 8, i64 8>
  %step.add37 = add <4 x i64> %vec.ind34, <i64 12, i64 12, i64 12, i64 12>
  %53 = or i64 %index30, 4
  %54 = or i64 %index30, 8
  %55 = or i64 %index30, 12
  %56 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index30, i32 2
  %57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %53, i32 2
  %58 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %54, i32 2
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %55, i32 2
  %60 = bitcast i32* %56 to <16 x i32>*
  %61 = bitcast i32* %57 to <16 x i32>*
  %62 = bitcast i32* %58 to <16 x i32>*
  %63 = bitcast i32* %59 to <16 x i32>*
  %wide.vec44 = load <16 x i32>, <16 x i32>* %60, align 4, !tbaa !182
  %wide.vec45 = load <16 x i32>, <16 x i32>* %61, align 4, !tbaa !182
  %wide.vec46 = load <16 x i32>, <16 x i32>* %62, align 4, !tbaa !182
  %wide.vec47 = load <16 x i32>, <16 x i32>* %63, align 4, !tbaa !182
  %strided.vec48 = shufflevector <16 x i32> %wide.vec44, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec49 = shufflevector <16 x i32> %wide.vec45, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec50 = shufflevector <16 x i32> %wide.vec46, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec51 = shufflevector <16 x i32> %wide.vec47, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %64 = icmp slt <4 x i32> %strided.vec48, zeroinitializer
  %65 = icmp slt <4 x i32> %strided.vec49, zeroinitializer
  %66 = icmp slt <4 x i32> %strided.vec50, zeroinitializer
  %67 = icmp slt <4 x i32> %strided.vec51, zeroinitializer
  %68 = sext <4 x i32> %strided.vec48 to <4 x i64>
  %69 = sext <4 x i32> %strided.vec49 to <4 x i64>
  %70 = sext <4 x i32> %strided.vec50 to <4 x i64>
  %71 = sext <4 x i32> %strided.vec51 to <4 x i64>
  %72 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind34, i32 1
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add35, i32 1
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add36, i32 1
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add37, i32 1
  %wide.masked.gather52 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %72, i32 4, <4 x i1> %64, <4 x i32> undef), !tbaa !178
  %wide.masked.gather53 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %73, i32 4, <4 x i1> %65, <4 x i32> undef), !tbaa !178
  %wide.masked.gather54 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %74, i32 4, <4 x i1> %66, <4 x i32> undef), !tbaa !178
  %wide.masked.gather55 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %75, i32 4, <4 x i1> %67, <4 x i32> undef), !tbaa !178
  %76 = add nsw <4 x i32> %wide.masked.gather52, <i32 -1, i32 -1, i32 -1, i32 -1>
  %77 = add nsw <4 x i32> %wide.masked.gather53, <i32 -1, i32 -1, i32 -1, i32 -1>
  %78 = add nsw <4 x i32> %wide.masked.gather54, <i32 -1, i32 -1, i32 -1, i32 -1>
  %79 = add nsw <4 x i32> %wide.masked.gather55, <i32 -1, i32 -1, i32 -1, i32 -1>
  %80 = sext <4 x i32> %76 to <4 x i64>
  %81 = sext <4 x i32> %77 to <4 x i64>
  %82 = sext <4 x i32> %78 to <4 x i64>
  %83 = sext <4 x i32> %79 to <4 x i64>
  %84 = mul nsw <4 x i64> %80, %68
  %85 = mul nsw <4 x i64> %81, %69
  %86 = mul nsw <4 x i64> %82, %70
  %87 = mul nsw <4 x i64> %83, %71
  %88 = select <4 x i1> %64, <4 x i64> %84, <4 x i64> zeroinitializer
  %predphi56 = add <4 x i64> %vec.phi40, %88
  %89 = select <4 x i1> %65, <4 x i64> %85, <4 x i64> zeroinitializer
  %predphi57 = add <4 x i64> %vec.phi41, %89
  %90 = select <4 x i1> %66, <4 x i64> %86, <4 x i64> zeroinitializer
  %predphi58 = add <4 x i64> %vec.phi42, %90
  %91 = select <4 x i1> %67, <4 x i64> %87, <4 x i64> zeroinitializer
  %predphi59 = add <4 x i64> %vec.phi43, %91
  %index.next31 = add i64 %index30, 16
  %vec.ind.next39 = add <4 x i64> %vec.ind34, <i64 16, i64 16, i64 16, i64 16>
  %92 = icmp eq i64 %index.next31, %n.vec29
  br i1 %92, label %middle.block23, label %vector.body25, !llvm.loop !329

middle.block23:                                   ; preds = %vector.body25
  %bin.rdx60 = add <4 x i64> %predphi57, %predphi56
  %bin.rdx61 = add <4 x i64> %predphi58, %bin.rdx60
  %bin.rdx62 = add <4 x i64> %predphi59, %bin.rdx61
  %93 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx62)
  br label %for.body.i13.i.preheader64

for.body.i13.i.preheader64:                       ; preds = %middle.block23, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec29, %middle.block23 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %93, %middle.block23 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader64, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader64 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader64 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 2
  %94 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %94, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %94 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 1
  %95 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %95, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !330

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %if.end
  %add8.i27.i = phi i64 [ 1, %if.end ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %if.end ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %96 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %96 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i64 %mul.i) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  store i8* %call2, i8** %host, align 8, !tbaa !172
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #17
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %97 = load i8*, i8** %host, align 8, !tbaa !172
  tail call void @halide_free(i8* %user_context, i8* %97) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30.104, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #17
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31.105, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32.106, i64 0, i64 0)) #16
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !307
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 8, !tbaa !331
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33.107, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 8, !tbaa !332
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.34.108, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %3() #16
  store i64 %handle, i64* %device, align 8, !tbaa !174
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !174
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i64 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i64 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %7() #16
  store i64 0, i64* %device, align 8, !tbaa !174
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #17
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i64 0, i64 0)) #16
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !174
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #17
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !174
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 8, !tbaa !172
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !308
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !308
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !307
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %9 = load i8*, i8** %host34, align 8, !tbaa !172
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i64 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 8, !tbaa !333
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #17
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #17
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !307
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i64 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 8, !tbaa !314
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i64 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 8, !tbaa !333
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #17
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #17
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !307
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i64 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 8, !tbaa !314
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i64 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 8, !tbaa !333
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !308
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !308
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #17
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #17
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 8, !tbaa !314
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i64 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 8, !tbaa !333
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #16
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %1() #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i64 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 8, !tbaa !314
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i64 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 8, !tbaa !320
  tail call void %4() #16
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #17
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %6() #16
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 8, !tbaa !314
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 8, !tbaa !322
  tail call void %9() #16
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #16
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i64 0, i64 0)) #16
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #16
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i64 0, i64 0)) #16
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 8, !tbaa !334
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #16
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i64 0, i64 0)) #16
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 8, !tbaa !335
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #16
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 8, !tbaa !336
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  store i64 0, i64* %device, align 8, !tbaa !174
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i64 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %5() #16
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !337
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #17
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #16
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #16
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.115, i64 0, i64 0)) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #16
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.116, i64 0, i64 0)) #16
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #16
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #16
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.118, i64 0, i64 0)) #16
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #16
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #16
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !73
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !73
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !305
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !136
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !306
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !305
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !136
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !306
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i64 4) #16
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i64 4) #16
  %call.i = call i8* @malloc(i64 1024) #16
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.120, i64 0, i64 0)) #16
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #16
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.121, i64 0, i64 0)) #16
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #16
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.122, i64 0, i64 0)) #16
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.123, i64 0, i64 0)) #16
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.124, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #16
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.126, i64 0, i64 0)) #16
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #16
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #16
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i64 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !14
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #16
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #16
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.128, i64 0, i64 0)) #16
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #16
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #16
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #16
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i100

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end17.sink.split

if.else.i100:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i64
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i64
  %sub.ptr.sub.i.i97 = sub i64 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i64 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %call.i.i99 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %add.i.i98) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #16
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i100, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i100 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #16
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.133, i64 0, i64 0)) #16
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.134, i64 0, i64 0)) #16
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #16
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.137, i64 0, i64 0)) #16
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #16
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #16
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.139, i64 0, i64 0)) #16
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #16
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #16
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #16
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.140, i64 0, i64 0)) #16
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #16
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #16
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #16
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.144, i64 0, i64 0)) #16
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i64 0, i64 0)) #16
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.147, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0)) #16
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #16
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #16
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #16
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i64 0, i64 0)) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i64 0, i64 0)) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #16
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #16
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #16
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #16
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #16
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #16
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #16
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i64 0, i64 0)) #16
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #16
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #16
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.149, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i64 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !14
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #16
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #16
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #16
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #16
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #16
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #16
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.150, i64 0, i64 0)) #16
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.151, i64 0, i64 0)) #16
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #16
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i167

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end

if.else.i167:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i64
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i64
  %sub.ptr.sub.i.i164 = sub i64 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i64 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %call.i.i166 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %add.i.i165) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #16
  br label %if.end

if.end:                                           ; preds = %if.else.i167, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i167 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #16
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #16
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #16
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #16
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #16
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i64 0, i64 0)) #16
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #16
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #16
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #16
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i64 0, i64 0)) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #16
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #16
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #16
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i64 0, i64 0)) #16
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -41
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_shutdown() #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  store i32 -2, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_join_thread(%struct.halide_thread* nonnull %0) #16
  store %struct.halide_thread* null, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  store i32 -1, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_profiler_report_unlocked(i8* null, %struct.halide_profiler_state* nonnull %call) #17
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* nonnull %call) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_profiler_state* @halide_profiler_get_state() local_unnamed_addr #2 {
entry:
  ret %struct.halide_profiler_state* @_ZZ25halide_profiler_get_stateE1s
}

; Function Attrs: nounwind
define weak void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %s) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit, label %if.then6.i

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry
  %sstr.sroa.125.0 = phi i8* [ %add.ptr.i, %if.then6.i ], [ null, %entry ]
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.0624 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not625 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0624, null
  br i1 %tobool.not625, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sub.ptr.rhs.cast.i.i348 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i349 = sub i64 1, %sub.ptr.rhs.cast.i.i348
  br label %for.body

for.cond.cleanup:                                 ; preds = %cleanup181, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sstr.sroa.19.0.lcssa = phi i8* [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit ], [ %sstr.sroa.19.15, %cleanup181 ]
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.cond.cleanup
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %for.cond.cleanup
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %sstr.sroa.19.0.lcssa to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret void

for.body:                                         ; preds = %cleanup181, %for.body.lr.ph
  %p.0627 = phi %struct.halide_profiler_pipeline_stats* [ %p.0624, %for.body.lr.ph ], [ %p.0, %cleanup181 ]
  %sstr.sroa.19.0626 = phi i8* [ %call.i, %for.body.lr.ph ], [ %sstr.sroa.19.15, %cleanup181 ]
  %time = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 0
  %0 = load i64, i64* %time, align 8, !tbaa !341
  %conv = uitofp i64 %0 to float
  %div = fdiv float %conv, 1.000000e+06
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %tobool1.not = icmp eq i32 %1, 0
  br i1 %tobool1.not, label %cleanup181, label %if.end

if.end:                                           ; preds = %for.body
  br i1 %tobool.not.i, label %if.end.split, label %if.then.i278

if.end.split:                                     ; preds = %if.end
  %active_threads_numerator1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %2 = load i64, i64* %active_threads_numerator1, align 8, !tbaa !344
  %active_threads_denominator2 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %3 = load i64, i64* %active_threads_denominator2, align 8, !tbaa !345
  %cmp3 = icmp eq i64 %2, %3
  %name4 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %4 = load i8*, i8** %name4, align 8, !tbaa !346
  %call.i2825 = tail call i8* @halide_string_to_string(i8* null, i8* %sstr.sroa.125.0, i8* %4) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

if.then.i278:                                     ; preds = %if.end
  store i8 0, i8* %call.i, align 1, !tbaa !14
  %active_threads_numerator6 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %5 = load i64, i64* %active_threads_numerator6, align 8, !tbaa !344
  %active_threads_denominator7 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %6 = load i64, i64* %active_threads_denominator7, align 8, !tbaa !345
  %cmp8 = icmp eq i64 %5, %6
  %name9 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %7 = load i8*, i8** %name9, align 8, !tbaa !346
  %call.i28210 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* %sstr.sroa.125.0, i8* %7) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit: ; preds = %if.end.split, %if.then.i278
  %8 = phi i64 [ %2, %if.end.split ], [ %5, %if.then.i278 ]
  %9 = phi i64 [ %3, %if.end.split ], [ %6, %if.then.i278 ]
  %10 = phi i1 [ %cmp3, %if.end.split ], [ %cmp8, %if.then.i278 ]
  %phi.call = phi i8* [ %call.i2825, %if.end.split ], [ %call.i28210, %if.then.i278 ]
  %call.i285 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  %call.i288 = tail call i8* @halide_string_to_string(i8* %call.i285, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8.165, i64 0, i64 0)) #16
  %conv.i = fpext float %div to double
  %call.i291 = tail call i8* @halide_double_to_string(i8* %call.i288, i8* %sstr.sroa.125.0, double %conv.i, i32 0) #16
  %call.i294 = tail call i8* @halide_string_to_string(i8* %call.i291, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.166, i64 0, i64 0)) #16
  %call.i297 = tail call i8* @halide_string_to_string(i8* %call.i294, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.167, i64 0, i64 0)) #16
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 12
  %11 = load i32, i32* %samples, align 4, !tbaa !347
  %conv.i300 = sext i32 %11 to i64
  %call.i301 = tail call i8* @halide_int64_to_string(i8* %call.i297, i8* %sstr.sroa.125.0, i64 %conv.i300, i32 1) #16
  %call.i304 = tail call i8* @halide_string_to_string(i8* %call.i301, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.168, i64 0, i64 0)) #16
  %12 = load i32, i32* %runs, align 8, !tbaa !343
  %conv.i307 = sext i32 %12 to i64
  %call.i308 = tail call i8* @halide_int64_to_string(i8* %call.i304, i8* %sstr.sroa.125.0, i64 %conv.i307, i32 1) #16
  %call.i311 = tail call i8* @halide_string_to_string(i8* %call.i308, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12.169, i64 0, i64 0)) #16
  %13 = load i32, i32* %runs, align 8, !tbaa !343
  %conv19 = sitofp i32 %13 to float
  %div20 = fdiv float %div, %conv19
  %conv.i314 = fpext float %div20 to double
  %call.i315 = tail call i8* @halide_double_to_string(i8* %call.i311, i8* %sstr.sroa.125.0, double %conv.i314, i32 0) #16
  %call.i318 = tail call i8* @halide_string_to_string(i8* %call.i315, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13.170, i64 0, i64 0)) #16
  br i1 %10, label %if.end28, label %if.then24

if.then24:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %conv3 = uitofp i64 %8 to double
  %conv5 = uitofp i64 %9 to double
  %add = fadd double %conv5, 1.000000e-10
  %div6 = fdiv double %conv3, %add
  %conv7 = fptrunc double %div6 to float
  %call.i321 = tail call i8* @halide_string_to_string(i8* %call.i318, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14.171, i64 0, i64 0)) #16
  %conv.i324 = fpext float %conv7 to double
  %call.i325 = tail call i8* @halide_double_to_string(i8* %call.i321, i8* %sstr.sroa.125.0, double %conv.i324, i32 0) #16
  %call.i328 = tail call i8* @halide_string_to_string(i8* %call.i325, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %sstr.sroa.19.1 = phi i8* [ %call.i318, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit ], [ %call.i328, %if.then24 ]
  %call.i331 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.1, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15.172, i64 0, i64 0)) #16
  %num_allocs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 13
  %14 = load i32, i32* %num_allocs, align 8, !tbaa !348
  %conv.i334 = sext i32 %14 to i64
  %call.i335 = tail call i8* @halide_int64_to_string(i8* %call.i331, i8* %sstr.sroa.125.0, i64 %conv.i334, i32 1) #16
  %call.i338 = tail call i8* @halide_string_to_string(i8* %call.i335, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.173, i64 0, i64 0)) #16
  %memory_peak = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 2
  %15 = load i64, i64* %memory_peak, align 8, !tbaa !349
  %call.i341 = tail call i8* @halide_uint64_to_string(i8* %call.i338, i8* %sstr.sroa.125.0, i64 %15, i32 1) #16
  %call.i344 = tail call i8* @halide_string_to_string(i8* %call.i341, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.174, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit, label %if.then.i352

if.then.i352:                                     ; preds = %if.end28
  %sub.ptr.lhs.cast.i.i347 = ptrtoint i8* %call.i344 to i64
  %add.i.i350 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i347
  %call.i.i351 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i350) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit: ; preds = %if.then.i352, %if.end28
  %retval.0.i = phi i8* [ %call.i, %if.then.i352 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end28 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i) #16
  %16 = load i64, i64* %time, align 8, !tbaa !341
  %tobool36.not = icmp eq i64 %16, 0
  br i1 %tobool36.not, label %lor.end, label %for.cond53.preheader

lor.end:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %memory_total = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 3
  %17 = load i64, i64* %memory_total, align 8, !tbaa !350
  %tobool37.not = icmp eq i64 %17, 0
  br i1 %tobool37.not, label %for.cond41.preheader, label %for.cond53.preheader

for.cond41.preheader:                             ; preds = %lor.end
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %18 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %cmp42589 = icmp sgt i32 %18, 0
  br i1 %cmp42589, label %for.body44.lr.ph, label %cleanup181

for.body44.lr.ph:                                 ; preds = %for.cond41.preheader
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  %19 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %20 = zext i32 %18 to i64
  br label %for.body44

for.cond41:                                       ; preds = %for.body44
  %exitcond.not = icmp eq i64 %indvars.iv.next, %20
  br i1 %exitcond.not, label %cleanup181, label %for.body44, !llvm.loop !353

for.body44:                                       ; preds = %for.cond41, %for.body44.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body44.lr.ph ], [ %indvars.iv.next, %for.cond41 ]
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %19, i64 %indvars.iv, i32 4
  %21 = load i64, i64* %stack_peak, align 8, !tbaa !354
  %tobool45.not = icmp eq i64 %21, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool45.not, label %for.cond41, label %for.cond53.preheader

for.cond53.preheader:                             ; preds = %for.body44, %lor.end, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %num_funcs54 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %22 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %cmp55621 = icmp sgt i32 %22, 0
  br i1 %cmp55621, label %for.body57.lr.ph, label %cleanup181

for.body57.lr.ph:                                 ; preds = %for.cond53.preheader
  %funcs59 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  br label %for.body57

for.body57:                                       ; preds = %cleanup172, %for.body57.lr.ph
  %indvars.iv630 = phi i64 [ 0, %for.body57.lr.ph ], [ %indvars.iv.next631, %cleanup172 ]
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358, label %if.then.i356

if.then.i356:                                     ; preds = %for.body57
  store i8 0, i8* %call.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358: ; preds = %if.then.i356, %for.body57
  %23 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs59, align 8, !tbaa !352
  %add.ptr61 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630
  %cmp62 = icmp eq i64 %indvars.iv630, 0
  br i1 %cmp62, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %time63 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %24 = load i64, i64* %time63, align 8, !tbaa !356
  %cmp64 = icmp eq i64 %24, 0
  br i1 %cmp64, label %cleanup172, label %if.end66

if.end66:                                         ; preds = %land.lhs.true, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %call.i361 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.175, i64 0, i64 0)) #16
  %name68 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 7
  %25 = load i8*, i8** %name68, align 8, !tbaa !357
  %call.i364 = tail call i8* @halide_string_to_string(i8* %call.i361, i8* %sstr.sroa.125.0, i8* %25) #16
  %call.i367 = tail call i8* @halide_string_to_string(i8* %call.i364, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19.176, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i591 = ptrtoint i8* %call.i367 to i64
  %sub.ptr.sub.i592 = sub i64 %sub.ptr.lhs.cast.i591, %sub.ptr.rhs.cast.i.i348
  %cmp73593 = icmp ult i64 %sub.ptr.sub.i592, 25
  br i1 %cmp73593, label %while.body, label %while.end

while.body:                                       ; preds = %if.end66, %while.body
  %sstr.sroa.19.3594 = phi i8* [ %call.i384, %while.body ], [ %call.i367, %if.end66 ]
  %call.i384 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.3594, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i = ptrtoint i8* %call.i384 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i.i348
  %cmp73 = icmp ult i64 %sub.ptr.sub.i, 25
  br i1 %cmp73, label %while.body, label %while.end, !llvm.loop !358

while.end:                                        ; preds = %while.body, %if.end66
  %sstr.sroa.19.3.lcssa = phi i8* [ %call.i367, %if.end66 ], [ %call.i384, %while.body ]
  %time75 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %26 = load i64, i64* %time75, align 8, !tbaa !356
  %conv76 = uitofp i64 %26 to float
  %27 = load i32, i32* %runs, align 8, !tbaa !343
  %conv78 = sitofp i32 %27 to float
  %mul = fmul float %conv78, 1.000000e+06
  %div79 = fdiv float %conv76, %mul
  %conv.i387 = fpext float %div79 to double
  %call.i388 = tail call i8* @halide_double_to_string(i8* %sstr.sroa.19.3.lcssa, i8* %sstr.sroa.125.0, double %conv.i387, i32 0) #16
  %tobool.not.i390 = icmp eq i8* %call.i388, null
  br i1 %tobool.not.i390, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, label %if.then.i393

if.then.i393:                                     ; preds = %while.end
  %add.ptr.i391 = getelementptr inbounds i8, i8* %call.i388, i64 -3
  %cmp.i = icmp ult i8* %add.ptr.i391, %call.i
  %spec.store.select.i = select i1 %cmp.i, i8* %call.i, i8* %add.ptr.i391
  store i8 0, i8* %spec.store.select.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit: ; preds = %if.then.i393, %while.end
  %sstr.sroa.19.4 = phi i8* [ null, %while.end ], [ %spec.store.select.i, %if.then.i393 ]
  %call.i399 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.4, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.178, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i400596 = ptrtoint i8* %call.i399 to i64
  %sub.ptr.sub.i402597 = sub i64 %sub.ptr.lhs.cast.i400596, %sub.ptr.rhs.cast.i.i348
  %cmp85598 = icmp ult i64 %sub.ptr.sub.i402597, 35
  br i1 %cmp85598, label %while.body86, label %while.end88

while.body86:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, %while.body86
  %sstr.sroa.19.5599 = phi i8* [ %call.i408, %while.body86 ], [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ]
  %call.i408 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5599, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i400 = ptrtoint i8* %call.i408 to i64
  %sub.ptr.sub.i402 = sub i64 %sub.ptr.lhs.cast.i400, %sub.ptr.rhs.cast.i.i348
  %cmp85 = icmp ult i64 %sub.ptr.sub.i402, 35
  br i1 %cmp85, label %while.body86, label %while.end88, !llvm.loop !359

while.end88:                                      ; preds = %while.body86, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit
  %sstr.sroa.19.5.lcssa = phi i8* [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ], [ %call.i408, %while.body86 ]
  %28 = load i64, i64* %time, align 8, !tbaa !341
  %cmp90.not = icmp eq i64 %28, 0
  br i1 %cmp90.not, label %if.end97, label %if.then91

if.then91:                                        ; preds = %while.end88
  %29 = load i64, i64* %time75, align 8, !tbaa !356
  %mul93 = mul i64 %29, 100
  %div95 = udiv i64 %mul93, %28
  br label %if.end97

if.end97:                                         ; preds = %if.then91, %while.end88
  %percent.0 = phi i64 [ %div95, %if.then91 ], [ 0, %while.end88 ]
  %call.i411 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #16
  %sext = shl i64 %percent.0, 32
  %conv.i414 = ashr exact i64 %sext, 32
  %call.i415 = tail call i8* @halide_int64_to_string(i8* %call.i411, i8* %sstr.sroa.125.0, i64 %conv.i414, i32 1) #16
  %call.i418 = tail call i8* @halide_string_to_string(i8* %call.i415, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23.180, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i419601 = ptrtoint i8* %call.i418 to i64
  %sub.ptr.sub.i421602 = sub i64 %sub.ptr.lhs.cast.i419601, %sub.ptr.rhs.cast.i.i348
  %cmp104603 = icmp ult i64 %sub.ptr.sub.i421602, 43
  br i1 %cmp104603, label %while.body105, label %while.end107

while.body105:                                    ; preds = %if.end97, %while.body105
  %sstr.sroa.19.6604 = phi i8* [ %call.i427, %while.body105 ], [ %call.i418, %if.end97 ]
  %call.i427 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6604, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i419 = ptrtoint i8* %call.i427 to i64
  %sub.ptr.sub.i421 = sub i64 %sub.ptr.lhs.cast.i419, %sub.ptr.rhs.cast.i.i348
  %cmp104 = icmp ult i64 %sub.ptr.sub.i421, 43
  br i1 %cmp104, label %while.body105, label %while.end107, !llvm.loop !360

while.end107:                                     ; preds = %while.body105, %if.end97
  %sstr.sroa.19.6.lcssa = phi i8* [ %call.i418, %if.end97 ], [ %call.i427, %while.body105 ]
  br i1 %10, label %if.end127, label %if.then109

if.then109:                                       ; preds = %while.end107
  %active_threads_numerator111 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 5
  %30 = load i64, i64* %active_threads_numerator111, align 8, !tbaa !361
  %conv112 = uitofp i64 %30 to double
  %active_threads_denominator113 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 6
  %31 = load i64, i64* %active_threads_denominator113, align 8, !tbaa !362
  %conv114 = uitofp i64 %31 to double
  %add115 = fadd double %conv114, 1.000000e-10
  %div116 = fdiv double %conv112, %add115
  %conv117 = fptrunc double %div116 to float
  %call.i430 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.181, i64 0, i64 0)) #16
  %conv.i433 = fpext float %conv117 to double
  %call.i434 = tail call i8* @halide_double_to_string(i8* %call.i430, i8* %sstr.sroa.125.0, double %conv.i433, i32 0) #16
  %tobool.not.i436 = icmp eq i8* %call.i434, null
  br i1 %tobool.not.i436, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, label %if.then.i441

if.then.i441:                                     ; preds = %if.then109
  %add.ptr.i437 = getelementptr inbounds i8, i8* %call.i434, i64 -3
  %cmp.i439 = icmp ult i8* %add.ptr.i437, %call.i
  %spec.store.select.i440 = select i1 %cmp.i439, i8* %call.i, i8* %add.ptr.i437
  store i8 0, i8* %spec.store.select.i440, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442: ; preds = %if.then.i441, %if.then109
  %sstr.sroa.19.7 = phi i8* [ null, %if.then109 ], [ %spec.store.select.i440, %if.then.i441 ]
  %sub.ptr.lhs.cast.i447606 = ptrtoint i8* %sstr.sroa.19.7 to i64
  %sub.ptr.sub.i449607 = sub i64 %sub.ptr.lhs.cast.i447606, %sub.ptr.rhs.cast.i.i348
  %cmp123608 = icmp ult i64 %sub.ptr.sub.i449607, 58
  br i1 %cmp123608, label %while.body124, label %if.end127

while.body124:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.body124
  %sstr.sroa.19.8609 = phi i8* [ %call.i455, %while.body124 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ]
  %call.i455 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.8609, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i447 = ptrtoint i8* %call.i455 to i64
  %sub.ptr.sub.i449 = sub i64 %sub.ptr.lhs.cast.i447, %sub.ptr.rhs.cast.i.i348
  %cmp123 = icmp ult i64 %sub.ptr.sub.i449, 58
  br i1 %cmp123, label %while.body124, label %if.end127, !llvm.loop !363

if.end127:                                        ; preds = %while.body124, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.end107
  %sstr.sroa.19.9 = phi i8* [ %sstr.sroa.19.6.lcssa, %while.end107 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ %call.i455, %while.body124 ]
  %cursor.0 = phi i64 [ 58, %while.end107 ], [ 73, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ 73, %while.body124 ]
  %memory_peak128 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 2
  %32 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %tobool129.not = icmp eq i64 %32, 0
  br i1 %tobool129.not, label %if.end162, label %if.then130

if.then130:                                       ; preds = %if.end127
  %call.i458 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.9, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25.182, i64 0, i64 0)) #16
  %33 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %call.i461 = tail call i8* @halide_uint64_to_string(i8* %call.i458, i8* %sstr.sroa.125.0, i64 %33, i32 1) #16
  %sub.ptr.lhs.cast.i462611 = ptrtoint i8* %call.i461 to i64
  %sub.ptr.sub.i464612 = sub i64 %sub.ptr.lhs.cast.i462611, %sub.ptr.rhs.cast.i.i348
  %cmp137613 = icmp ult i64 %sub.ptr.sub.i464612, %cursor.0
  br i1 %cmp137613, label %while.body138, label %while.end140

while.body138:                                    ; preds = %if.then130, %while.body138
  %sstr.sroa.19.10614 = phi i8* [ %call.i470, %while.body138 ], [ %call.i461, %if.then130 ]
  %call.i470 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10614, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i462 = ptrtoint i8* %call.i470 to i64
  %sub.ptr.sub.i464 = sub i64 %sub.ptr.lhs.cast.i462, %sub.ptr.rhs.cast.i.i348
  %cmp137 = icmp ult i64 %sub.ptr.sub.i464, %cursor.0
  br i1 %cmp137, label %while.body138, label %while.end140, !llvm.loop !365

while.end140:                                     ; preds = %while.body138, %if.then130
  %sstr.sroa.19.10.lcssa = phi i8* [ %call.i461, %if.then130 ], [ %call.i470, %while.body138 ]
  %call.i473 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26.183, i64 0, i64 0)) #16
  %num_allocs142 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 8
  %34 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %conv.i476 = sext i32 %34 to i64
  %call.i477 = tail call i8* @halide_int64_to_string(i8* %call.i473, i8* %sstr.sroa.125.0, i64 %conv.i476, i32 1) #16
  %add144 = add nuw nsw i64 %cursor.0, 15
  %sub.ptr.lhs.cast.i478616 = ptrtoint i8* %call.i477 to i64
  %sub.ptr.sub.i480617 = sub i64 %sub.ptr.lhs.cast.i478616, %sub.ptr.rhs.cast.i.i348
  %cmp147618 = icmp ult i64 %sub.ptr.sub.i480617, %add144
  br i1 %cmp147618, label %while.body148, label %while.end150

while.body148:                                    ; preds = %while.end140, %while.body148
  %sstr.sroa.19.11619 = phi i8* [ %call.i467, %while.body148 ], [ %call.i477, %while.end140 ]
  %call.i467 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11619, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i478 = ptrtoint i8* %call.i467 to i64
  %sub.ptr.sub.i480 = sub i64 %sub.ptr.lhs.cast.i478, %sub.ptr.rhs.cast.i.i348
  %cmp147 = icmp ult i64 %sub.ptr.sub.i480, %add144
  br i1 %cmp147, label %while.body148, label %while.end150, !llvm.loop !367

while.end150:                                     ; preds = %while.body148, %while.end140
  %sstr.sroa.19.11.lcssa = phi i8* [ %call.i477, %while.end140 ], [ %call.i467, %while.body148 ]
  %35 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %cmp152.not = icmp eq i32 %35, 0
  br i1 %cmp152.not, label %if.end159, label %if.then153

if.then153:                                       ; preds = %while.end150
  %memory_total154 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 3
  %36 = load i64, i64* %memory_total154, align 8, !tbaa !368
  %conv156 = sext i32 %35 to i64
  %div157 = udiv i64 %36, %conv156
  br label %if.end159

if.end159:                                        ; preds = %if.then153, %while.end150
  %alloc_avg.0 = phi i64 [ %div157, %if.then153 ], [ 0, %while.end150 ]
  %call.i452 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27.184, i64 0, i64 0)) #16
  %sext586 = shl i64 %alloc_avg.0, 32
  %conv.i445 = ashr exact i64 %sext586, 32
  %call.i446 = tail call i8* @halide_int64_to_string(i8* %call.i452, i8* %sstr.sroa.125.0, i64 %conv.i445, i32 1) #16
  br label %if.end162

if.end162:                                        ; preds = %if.end159, %if.end127
  %sstr.sroa.19.12 = phi i8* [ %sstr.sroa.19.9, %if.end127 ], [ %call.i446, %if.end159 ]
  %stack_peak163 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 4
  %37 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %cmp164.not = icmp eq i64 %37, 0
  br i1 %cmp164.not, label %if.end169, label %if.then165

if.then165:                                       ; preds = %if.end162
  %call.i424 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.12, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28.185, i64 0, i64 0)) #16
  %38 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %call.i405 = tail call i8* @halide_uint64_to_string(i8* %call.i424, i8* %sstr.sroa.125.0, i64 %38, i32 1) #16
  br label %if.end169

if.end169:                                        ; preds = %if.then165, %if.end162
  %sstr.sroa.19.13 = phi i8* [ %sstr.sroa.19.12, %if.end162 ], [ %call.i405, %if.then165 ]
  %call.i396 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.13, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, label %if.then.i379

if.then.i379:                                     ; preds = %if.end169
  %sub.ptr.lhs.cast.i.i374 = ptrtoint i8* %call.i396 to i64
  %add.i.i377 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i374
  %call.i.i378 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i377) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381: ; preds = %if.then.i379, %if.end169
  %retval.0.i380 = phi i8* [ %call.i, %if.then.i379 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end169 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i380) #16
  br label %cleanup172

cleanup172:                                       ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, %land.lhs.true
  %sstr.sroa.19.14 = phi i8* [ %call.i, %land.lhs.true ], [ %call.i396, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381 ]
  %indvars.iv.next631 = add nuw nsw i64 %indvars.iv630, 1
  %39 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %40 = sext i32 %39 to i64
  %cmp55 = icmp slt i64 %indvars.iv.next631, %40
  br i1 %cmp55, label %for.body57, label %cleanup181, !llvm.loop !369

cleanup181:                                       ; preds = %for.cond41, %cleanup172, %for.cond53.preheader, %for.cond41.preheader, %for.body
  %sstr.sroa.19.15 = phi i8* [ %sstr.sroa.19.0626, %for.body ], [ %call.i344, %for.cond53.preheader ], [ %call.i344, %for.cond41.preheader ], [ %sstr.sroa.19.14, %cleanup172 ], [ %call.i344, %for.cond41 ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 8
  %41 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %41, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.cond.cleanup, label %for.body, !llvm.loop !370
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %s) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not9 = icmp eq %struct.halide_profiler_pipeline_stats* %0, null
  br i1 %tobool.not9, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %1 = phi %struct.halide_profiler_pipeline_stats* [ %7, %while.body ], [ %0, %entry ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %3 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %3, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 7
  %4 = bitcast %struct.halide_profiler_func_stats** %funcs to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !352
  tail call void @free(i8* %5) #16
  %6 = bitcast %struct.halide_profiler_pipeline_stats* %1 to i8*
  tail call void @free(i8* nonnull %6) #16
  %7 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %7, null
  br i1 %tobool.not, label %while.end, label %while.body, !llvm.loop !373

while.end:                                        ; preds = %while.body, %entry
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 2
  store i32 0, i32* %first_free_id, align 4, !tbaa !374
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.0121 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not122 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0121, null
  br i1 %tobool.not122, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.0123 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.0121, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %num_funcs1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 9
  %1 = load i32, i32* %num_funcs1, align 8, !tbaa !351
  %cmp2 = icmp eq i32 %1, %num_funcs
  br i1 %cmp2, label %cleanup62, label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.end, label %for.body, !llvm.loop !375

for.end:                                          ; preds = %for.inc, %entry
  %call4 = tail call i8* @malloc(i64 96) #16
  %3 = bitcast i8* %call4 to %struct.halide_profiler_pipeline_stats*
  %tobool5.not = icmp eq i8* %call4, null
  br i1 %tobool5.not, label %cleanup62, label %if.end7

if.end7:                                          ; preds = %for.end
  %4 = bitcast %struct.halide_profiler_pipeline_stats** %pipelines to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !371
  %next9 = getelementptr inbounds i8, i8* %call4, i64 64
  %6 = bitcast i8* %next9 to i8**
  store i8* %5, i8** %6, align 8, !tbaa !372
  %name10 = getelementptr inbounds i8, i8* %call4, i64 48
  %7 = bitcast i8* %name10 to i8**
  store i8* %pipeline_name, i8** %7, align 8, !tbaa !346
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 2
  %8 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %first_func_id = getelementptr inbounds i8, i8* %call4, i64 76
  %9 = bitcast i8* %first_func_id to i32*
  store i32 %8, i32* %9, align 4, !tbaa !376
  %num_funcs11 = getelementptr inbounds i8, i8* %call4, i64 72
  %10 = bitcast i8* %num_funcs11 to i32*
  store i32 %num_funcs, i32* %10, align 8, !tbaa !351
  %runs = getelementptr inbounds i8, i8* %call4, i64 80
  %11 = bitcast i8* %runs to i32*
  store i32 0, i32* %11, align 8, !tbaa !343
  %samples = getelementptr inbounds i8, i8* %call4, i64 84
  %12 = bitcast i8* %samples to i32*
  store i32 0, i32* %12, align 4, !tbaa !347
  %13 = bitcast i8* %call4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %num_allocs = getelementptr inbounds i8, i8* %call4, i64 88
  %14 = bitcast i8* %num_allocs to i32*
  store i32 0, i32* %14, align 8, !tbaa !348
  %active_threads_numerator = getelementptr inbounds i8, i8* %call4, i64 32
  %15 = bitcast i8* %active_threads_numerator to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !110
  %conv = sext i32 %num_funcs to i64
  %mul = mul nsw i64 %conv, 72
  %call12 = tail call i8* @malloc(i64 %mul) #16
  %funcs = getelementptr inbounds i8, i8* %call4, i64 56
  %16 = bitcast i8* %funcs to i8**
  store i8* %call12, i8** %16, align 8, !tbaa !352
  %tobool14.not = icmp eq i8* %call12, null
  %17 = bitcast i8* %call12 to %struct.halide_profiler_func_stats*
  br i1 %tobool14.not, label %if.then15, label %for.cond17.preheader

for.cond17.preheader:                             ; preds = %if.end7
  %cmp18119 = icmp sgt i32 %num_funcs, 0
  br i1 %cmp18119, label %for.body20.lr.ph, label %for.cond.cleanup19

for.body20.lr.ph:                                 ; preds = %for.cond17.preheader
  %wide.trip.count = zext i32 %num_funcs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %18 = icmp eq i32 %num_funcs, 1
  br i1 %18, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20.lr.ph.new

for.body20.lr.ph.new:                             ; preds = %for.body20.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body20

if.then15:                                        ; preds = %if.end7
  tail call void @free(i8* nonnull %call4) #16
  br label %cleanup62

for.cond.cleanup19.loopexit.unr-lcssa:            ; preds = %for.body20, %for.body20.lr.ph
  %indvars.iv.unr = phi i64 [ 0, %for.body20.lr.ph ], [ %indvars.iv.next.1, %for.body20 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup19, label %for.body20.epil

for.body20.epil:                                  ; preds = %for.cond.cleanup19.loopexit.unr-lcssa
  %time22.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 0
  store i64 0, i64* %time22.epil, align 8, !tbaa !356
  %arrayidx24.epil = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.unr
  %19 = load i64, i64* %arrayidx24.epil, align 8, !tbaa !110
  %20 = inttoptr i64 %19 to i8*
  %name28.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 7
  store i8* %20, i8** %name28.epil, align 8, !tbaa !357
  %memory_current32.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 1
  %num_allocs44.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 8
  store i32 0, i32* %num_allocs44.epil, align 8, !tbaa !366
  %21 = bitcast i64* %memory_current32.epil to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %21, align 8, !tbaa !110
  %active_threads_numerator51.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 5
  %22 = bitcast i64* %active_threads_numerator51.epil to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !110
  br label %for.cond.cleanup19

for.cond.cleanup19:                               ; preds = %for.body20.epil, %for.cond.cleanup19.loopexit.unr-lcssa, %for.cond17.preheader
  %23 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %add = add nsw i32 %23, %num_funcs
  store i32 %add, i32* %first_free_id, align 4, !tbaa !374
  store i8* %call4, i8** %4, align 8, !tbaa !371
  br label %cleanup62

for.body20:                                       ; preds = %for.body20, %for.body20.lr.ph.new
  %indvars.iv = phi i64 [ 0, %for.body20.lr.ph.new ], [ %indvars.iv.next.1, %for.body20 ]
  %niter = phi i64 [ %unroll_iter, %for.body20.lr.ph.new ], [ %niter.nsub.1, %for.body20 ]
  %time22 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 0
  store i64 0, i64* %time22, align 8, !tbaa !356
  %arrayidx24 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv
  %24 = load i64, i64* %arrayidx24, align 8, !tbaa !110
  %25 = inttoptr i64 %24 to i8*
  %name28 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 7
  store i8* %25, i8** %name28, align 8, !tbaa !357
  %memory_current32 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 1
  %num_allocs44 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 8
  store i32 0, i32* %num_allocs44, align 8, !tbaa !366
  %26 = bitcast i64* %memory_current32 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %26, align 8, !tbaa !110
  %active_threads_numerator51 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 5
  %27 = bitcast i64* %active_threads_numerator51 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %27, align 8, !tbaa !110
  %indvars.iv.next = or i64 %indvars.iv, 1
  %time22.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 0
  store i64 0, i64* %time22.1, align 8, !tbaa !356
  %arrayidx24.1 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.next
  %28 = load i64, i64* %arrayidx24.1, align 8, !tbaa !110
  %29 = inttoptr i64 %28 to i8*
  %name28.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 7
  store i8* %29, i8** %name28.1, align 8, !tbaa !357
  %memory_current32.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 1
  %num_allocs44.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 8
  store i32 0, i32* %num_allocs44.1, align 8, !tbaa !366
  %30 = bitcast i64* %memory_current32.1 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %30, align 8, !tbaa !110
  %active_threads_numerator51.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 5
  %31 = bitcast i64* %active_threads_numerator51.1 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %31, align 8, !tbaa !110
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20, !llvm.loop !377

cleanup62:                                        ; preds = %land.lhs.true, %for.cond.cleanup19, %if.then15, %for.end
  %retval.2 = phi %struct.halide_profiler_pipeline_stats* [ %3, %for.cond.cleanup19 ], [ null, %if.then15 ], [ null, %for.end ], [ %p.0123, %land.lhs.true ]
  ret %struct.halide_profiler_pipeline_stats* %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* %s, i32 %func_id, i64 %time, i32 %active_threads) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.055 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not56 = icmp eq %struct.halide_profiler_pipeline_stats* %p.055, null
  br i1 %tobool.not56, label %cleanup25, label %for.body

for.body:                                         ; preds = %entry, %if.end23
  %p.058 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %if.end23 ], [ %p.055, %entry ]
  %p_prev.057 = phi %struct.halide_profiler_pipeline_stats* [ %p.058, %if.end23 ], [ null, %entry ]
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 10
  %0 = load i32, i32* %first_func_id, align 4, !tbaa !376
  %cmp.not = icmp sgt i32 %0, %func_id
  br i1 %cmp.not, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 9
  %1 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %add = add nsw i32 %1, %0
  %cmp2 = icmp sgt i32 %add, %func_id
  br i1 %cmp2, label %if.then, label %if.end23

if.then:                                          ; preds = %land.lhs.true
  %tobool3.not = icmp eq %struct.halide_profiler_pipeline_stats* %p_prev.057, null
  br i1 %tobool3.not, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %2 = load i8*, i8** %next, align 8, !tbaa !372
  %next5 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p_prev.057, i64 0, i32 8
  store i8* %2, i8** %next5, align 8, !tbaa !372
  %3 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  store %struct.halide_profiler_pipeline_stats* %p.055, %struct.halide_profiler_pipeline_stats** %3, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %p.058, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 7
  %4 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %idx.ext = sext i32 %func_id to i64
  %add.ptr = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %4, i64 %idx.ext
  %idx.ext10 = sext i32 %0 to i64
  %idx.neg = sub nsw i64 0, %idx.ext10
  %add.ptr11 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr, i64 %idx.neg
  %time12 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 0
  %5 = load i64, i64* %time12, align 8, !tbaa !356
  %add13 = add i64 %5, %time
  store i64 %add13, i64* %time12, align 8, !tbaa !356
  %conv = sext i32 %active_threads to i64
  %active_threads_numerator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 5
  %6 = bitcast i64* %active_threads_numerator to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8, !tbaa !110
  %8 = insertelement <2 x i64> <i64 poison, i64 1>, i64 %conv, i32 0
  %9 = add <2 x i64> %7, %8
  %10 = bitcast i64* %active_threads_numerator to <2 x i64>*
  store <2 x i64> %9, <2 x i64>* %10, align 8, !tbaa !110
  %time16 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 0
  %11 = load i64, i64* %time16, align 8, !tbaa !341
  %add17 = add i64 %11, %time
  store i64 %add17, i64* %time16, align 8, !tbaa !341
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 12
  %12 = load i32, i32* %samples, align 4, !tbaa !347
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %samples, align 4, !tbaa !347
  %active_threads_numerator19 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 4
  %13 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8, !tbaa !110
  %15 = add <2 x i64> %14, %8
  %16 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 8, !tbaa !110
  ret void

if.end23:                                         ; preds = %land.lhs.true, %for.body
  %next24 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %17 = bitcast i8** %next24 to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %17, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup25, label %for.body, !llvm.loop !378

cleanup25:                                        ; preds = %if.end23, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_profiler_sample(%struct.halide_profiler_state* %s, i64* %prev_t) local_unnamed_addr #0 {
entry:
  %func = alloca i32, align 4
  %active_threads = alloca i32, align 4
  %0 = bitcast i32* %func to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  %1 = bitcast i32* %active_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  %get_remote_profiler_state = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 6
  %2 = load void (i32*, i32*)*, void (i32*, i32*)** %get_remote_profiler_state, align 8, !tbaa !379
  %tobool.not = icmp eq void (i32*, i32*)* %2, null
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void %2(i32* nonnull %func, i32* nonnull %active_threads) #16
  br label %if.end

if.else:                                          ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 3
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  store i32 %3, i32* %func, align 4, !tbaa !73
  %active_threads2 = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 4
  %4 = load i32, i32* %active_threads2, align 4, !tbaa !380
  store i32 %4, i32* %active_threads, align 4, !tbaa !73
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call = call i64 @halide_current_time_ns(i8* null) #16
  %5 = load i32, i32* %func, align 4, !tbaa !73
  %cmp = icmp eq i32 %5, -2
  br i1 %cmp, label %cleanup, label %if.else4

if.else4:                                         ; preds = %if.end
  %cmp5 = icmp sgt i32 %5, -1
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.else4
  %6 = load i64, i64* %prev_t, align 8, !tbaa !110
  %sub = sub i64 %call, %6
  %7 = load i32, i32* %active_threads, align 4, !tbaa !73
  call void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* nonnull %s, i32 %5, i64 %sub, i32 %7) #17
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.else4
  store i64 %call, i64* %prev_t, align 8, !tbaa !110
  %sleep_time = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 1
  %8 = load i32, i32* %sleep_time, align 8, !tbaa !381
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.end
  %retval.0 = phi i32 [ %8, %if.end8 ], [ -1, %if.end ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv(i8* %0) #4 {
entry:
  %t = alloca i64, align 8
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock) #16
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  %1 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not23 = icmp eq i32 %1, -2
  br i1 %cmp.not23, label %while.end8, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %2 = bitcast i64* %t to i8*
  br label %while.body

while.body:                                       ; preds = %while.end, %while.body.lr.ph
  %call1 = call i64 @halide_current_time_ns(i8* null) #16
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #11
  store i64 %call1, i64* %t, align 8, !tbaa !110
  %call420 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* nonnull %call, i64* nonnull %t) #17
  %cmp521 = icmp slt i32 %call420, 0
  br i1 %cmp521, label %while.end, label %if.end

if.end:                                           ; preds = %while.body, %if.end
  %call422 = phi i32 [ %call4, %if.end ], [ %call420, %while.body ]
  call void @halide_mutex_unlock(%struct.halide_mutex* %lock) #16
  call void @halide_sleep_ms(i8* null, i32 %call422) #16
  call void @halide_mutex_lock(%struct.halide_mutex* %lock) #16
  %call4 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* %call, i64* nonnull %t) #17
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %while.end, label %if.end

while.end:                                        ; preds = %if.end, %while.body
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #11
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not = icmp eq i32 %3, -2
  br i1 %cmp.not, label %while.end8, label %while.body, !llvm.loop !382

while.end8:                                       ; preds = %while.end, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock) #16
  ret void
}

; Function Attrs: nounwind
define weak %struct.halide_profiler_pipeline_stats* @halide_profiler_get_pipeline_state(i8* %pipeline_name) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.013 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not14 = icmp eq %struct.halide_profiler_pipeline_stats* %p.013, null
  br i1 %tobool.not14, label %cleanup, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.015 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.013, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 8
  %1 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %1, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup, label %for.body, !llvm.loop !383

cleanup:                                          ; preds = %for.inc, %for.body, %entry
  %p.0.lcssa = phi %struct.halide_profiler_pipeline_stats* [ null, %entry ], [ null, %for.inc ], [ %p.015, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret %struct.halide_profiler_pipeline_stats* %p.0.lcssa
}

; Function Attrs: nounwind
define weak i32 @halide_profiler_pipeline_start(i8* %user_context, i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @halide_start_clock(i8* %user_context) #16
  %call2 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv, i8* null) #16
  store %struct.halide_thread* %call2, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call4 = tail call %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) #17
  %tobool5.not = icmp eq %struct.halide_profiler_pipeline_stats* %call4, null
  br i1 %tobool5.not, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32 @halide_error_out_of_memory(i8* %user_context) #16
  br label %cleanup

if.end8:                                          ; preds = %if.end
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %runs, align 8, !tbaa !343
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 10
  %2 = load i32, i32* %first_func_id, align 4, !tbaa !376
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then6
  %retval.0 = phi i32 [ %2, %if.end8 ], [ %call7, %if.then6 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock.i) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_stack_peak_update(i8* %user_context, i8* %pipeline_state, i64* %f_values) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp.not, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.186, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp118 = icmp sgt i32 %1, 0
  br i1 %cmp118, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %do.end
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %do.end
  ret void

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %3 = phi i32 [ %1, %for.body.lr.ph ], [ %9, %for.inc ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i64, i64* %f_values, i64 %indvars.iv
  %4 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp2.not = icmp eq i64 %4, 0
  br i1 %cmp2.not, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %5 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %5, i64 %indvars.iv, i32 4
  %6 = load i64, i64* %stack_peak, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then3
  %old_val.0.i = phi i64 [ %6, %if.then3 ], [ %8, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %4
  br i1 %cmp.i, label %while.body.i, label %for.inc.loopexit

while.body.i:                                     ; preds = %while.cond.i
  %7 = cmpxchg i64* %stack_peak, i64 %old_val.0.i, i64 %4 seq_cst seq_cst
  %8 = extractvalue { i64, i1 } %7, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %8
  br i1 %cmp1.i, label %for.inc.loopexit, label %while.cond.i, !llvm.loop !384

for.inc.loopexit:                                 ; preds = %while.body.i, %while.cond.i
  %.pre = load i32, i32* %0, align 8, !tbaa !351
  br label %for.inc

for.inc:                                          ; preds = %for.inc.loopexit, %for.body
  %9 = phi i32 [ %.pre, %for.inc.loopexit ], [ %3, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = sext i32 %9 to i64
  %cmp1 = icmp slt i64 %indvars.iv.next, %10
  br i1 %cmp1, label %for.body, label %for.cond.cleanup, !llvm.loop !385
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_allocate(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %incr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %incr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.1.187, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.2.188, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.3.189, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %num_allocs = getelementptr inbounds i8, i8* %pipeline_state, i64 88
  %4 = bitcast i8* %num_allocs to i32*
  %5 = atomicrmw add i32* %4, i32 1 seq_cst
  %memory_total = getelementptr inbounds i8, i8* %pipeline_state, i64 24
  %6 = bitcast i8* %memory_total to i64*
  %7 = atomicrmw add i64* %6, i64 %incr seq_cst
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %8 = bitcast i8* %memory_current to i64*
  %9 = atomicrmw add i64* %8, i64 %incr seq_cst
  %10 = add i64 %9, %incr
  %memory_peak = getelementptr inbounds i8, i8* %pipeline_state, i64 16
  %11 = bitcast i8* %memory_peak to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %do.end15
  %old_val.0.i = phi i64 [ %12, %do.end15 ], [ %14, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %10
  br i1 %cmp.i, label %while.body.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit

while.body.i:                                     ; preds = %while.cond.i
  %13 = cmpxchg i64* %11, i64 %old_val.0.i, i64 %10 seq_cst seq_cst
  %14 = extractvalue { i64, i1 } %13, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %14
  br i1 %cmp1.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit, label %while.cond.i, !llvm.loop !384

_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit: ; preds = %while.body.i, %while.cond.i
  %num_allocs16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 8
  %15 = atomicrmw add i32* %num_allocs16, i32 1 seq_cst
  %memory_total17 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 3
  %16 = atomicrmw add i64* %memory_total17, i64 %incr seq_cst
  %memory_current18 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %17 = atomicrmw add i64* %memory_current18, i64 %incr seq_cst
  %18 = add i64 %17, %incr
  %memory_peak19 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 2
  %19 = load i64, i64* %memory_peak19, align 8, !tbaa !110
  br label %while.cond.i43

while.cond.i43:                                   ; preds = %while.body.i45, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit
  %old_val.0.i41 = phi i64 [ %19, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit ], [ %21, %while.body.i45 ]
  %cmp.i42 = icmp ult i64 %old_val.0.i41, %18
  br i1 %cmp.i42, label %while.body.i45, label %return

while.body.i45:                                   ; preds = %while.cond.i43
  %20 = cmpxchg i64* %memory_peak19, i64 %old_val.0.i41, i64 %18 seq_cst seq_cst
  %21 = extractvalue { i64, i1 } %20, 0
  %cmp1.i44 = icmp eq i64 %old_val.0.i41, %21
  br i1 %cmp1.i44, label %return, label %while.cond.i43, !llvm.loop !384

return:                                           ; preds = %while.body.i45, %while.cond.i43, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_free(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %decr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %decr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.190, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.5.191, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.6.192, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %4 = bitcast i8* %memory_current to i64*
  %5 = atomicrmw sub i64* %4, i64 %decr seq_cst
  %memory_current16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %6 = atomicrmw sub i64* %memory_current16, i64 %decr seq_cst
  br label %return

return:                                           ; preds = %do.end15, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_report(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  tail call void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %call) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_reset() local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %call) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_profiler_pipeline_end(i8* %user_context, i8* %state) local_unnamed_addr #2 {
entry:
  %current_func = getelementptr inbounds i8, i8* %state, i64 16
  %0 = bitcast i8* %current_func to i32*
  store i32 -1, i32* %0, align 8, !tbaa !340
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #16
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #16
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i64 32) #16
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #16
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.197, i64 0, i64 0)) #16
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !110
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 0), align 8, !tbaa !110
  %and = and i64 %3, %2
  %cmp6.not = icmp eq i64 %and, 0
  br i1 %cmp6.not, label %for.inc.critedge, label %if.then7

if.then7:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 2), align 8, !tbaa !110
  %and10 = and i64 %4, %and
  %cmp11.not = icmp eq i64 %and10, %and
  br i1 %cmp11.not, label %for.inc.critedge, label %cleanup15

for.inc.critedge:                                 ; preds = %if.then7, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i64 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !110
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 1), align 8, !tbaa !110
  %and.1 = and i64 %6, %5
  %cmp6.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp6.not.1, label %for.inc.critedge.1, label %if.then7.1

cleanup15:                                        ; preds = %for.inc.critedge.1, %if.then7.1, %if.then7
  %cmp3.lcssa = phi i32 [ 0, %if.then7 ], [ 0, %if.then7.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then7.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 3), align 8, !tbaa !110
  %and10.1 = and i64 %7, %and.1
  %cmp11.not.1 = icmp eq i64 %and10.1, %and.1
  br i1 %cmp11.not.1, label %for.inc.critedge.1, label %cleanup15

for.inc.critedge.1:                               ; preds = %if.then7.1, %for.inc.critedge
  br label %cleanup15
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #16
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #8 {
entry:
  %info = alloca [4 x i32], align 4
  %info2 = alloca [4 x i32], align 4
  %info3 = alloca [4 x i32], align 4
  %arrayidx3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i64 0, i32 1, i64 0
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result to <4 x i64>*
  store <4 x i64> <i64 34084860461808, i64 0, i64 0, i64 0>, <4 x i64>* %0, align 8, !tbaa !110
  %1 = bitcast [4 x i32]* %info to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 0
  store i32 1, i32* %arraydecay, align 4, !tbaa !73
  %arrayidx1.i110 = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i110, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay) #11
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 2
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !73
  %and = lshr i32 %2, 15
  %3 = and i32 %and, 16
  %and2 = lshr i32 %2, 23
  %4 = and i32 %and2, 32
  %5 = or i32 %4, %3
  %and6 = lshr i32 %2, 20
  %6 = and i32 %and6, 512
  %7 = or i32 %5, %6
  %and14 = lshr i32 %2, 5
  %8 = and i32 %and14, 128
  %9 = or i32 %7, %8
  %10 = zext i32 %9 to i64
  %11 = and i32 %2, 805834752
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %entry
  store i64 %10, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %14

14:                                               ; preds = %13, %entry
  %15 = and i32 %2, 1879048192
  %.not = icmp eq i32 %15, 1879048192
  br i1 %.not, label %if.then30, label %if.end67

if.then30:                                        ; preds = %14
  %16 = bitcast [4 x i32]* %info2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #11
  %arraydecay31 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 0
  store i32 7, i32* %arraydecay31, align 4, !tbaa !73
  %arrayidx1.i99 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i99, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay31) #11
  %17 = load i32, i32* %arrayidx1.i99, align 4, !tbaa !73
  %and33 = and i32 %17, 32
  %cmp34.not = icmp eq i32 %and33, 0
  br i1 %cmp34.not, label %if.end36, label %if.then35

if.then35:                                        ; preds = %if.then30
  %or.i98 = or i64 %10, 64
  store i64 %or.i98, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %if.then30
  %18 = phi i64 [ %or.i98, %if.then35 ], [ %10, %if.then30 ]
  %and38 = and i32 %17, 268500992
  %cmp39 = icmp eq i32 %and38, 268500992
  br i1 %cmp39, label %if.then40, label %if.end66

if.then40:                                        ; preds = %if.end36
  %and42 = and i32 %17, 469827584
  %cmp43 = icmp eq i32 %and42, 469827584
  %spec.select.v = select i1 %cmp43, i64 3298534883328, i64 1099511627776
  %spec.select = or i64 %18, %spec.select.v
  %and47 = and i32 %17, -805109760
  %cmp48 = icmp eq i32 %and47, -805109760
  %or.i92 = or i64 %spec.select, 4398046511104
  %spec.select130 = select i1 %cmp48, i64 %or.i92, i64 %spec.select
  store i64 %spec.select130, i64* %arrayidx3.i, align 8, !tbaa !110
  %and52 = and i32 %17, -803012608
  %cmp53 = icmp eq i32 %and52, -803012608
  br i1 %cmp53, label %if.then54, label %if.end66

if.then54:                                        ; preds = %if.then40
  %or.i90 = or i64 %spec.select130, 8796093022208
  store i64 %or.i90, i64* %arrayidx3.i, align 8, !tbaa !110
  %19 = bitcast [4 x i32]* %info3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #11
  %arraydecay55 = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 0
  store i32 7, i32* %arraydecay55, align 4, !tbaa !73
  %arrayidx1.i = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 1
  store i32 1, i32* %arrayidx1.i, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay55) #11
  %arrayidx56 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 2
  %20 = load i32, i32* %arrayidx56, align 4, !tbaa !73
  %and57 = and i32 %20, 2048
  %cmp58.not = icmp eq i32 %and57, 0
  br i1 %cmp58.not, label %if.end64, label %land.lhs.true59

land.lhs.true59:                                  ; preds = %if.then54
  %21 = load i32, i32* %arraydecay55, align 4, !tbaa !73
  %and61 = and i32 %21, 32
  %cmp62.not = icmp eq i32 %and61, 0
  br i1 %cmp62.not, label %if.end64, label %if.then63

if.then63:                                        ; preds = %land.lhs.true59
  %or.i = or i64 %spec.select130, 26388279066624
  store i64 %or.i, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %land.lhs.true59, %if.then54
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #11
  br label %if.end66

if.end66:                                         ; preds = %if.end64, %if.then40, %if.end36
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #11
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16>, <16 x i16>) #9

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16>, <16 x i16>) #9

; Function Attrs: nounwind
define i32 @blur7x7(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, %struct.halide_buffer_t* noalias nocapture readonly %blur_y.buffer) local_unnamed_addr #10 {
entry:
  %blur_x.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep2475 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 0
  %.fca.1.gep2476 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep2477 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 2
  %read_input.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 0
  %0 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %0, i8 0, i64 24, i1 false)
  %.fca.1.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 2
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 2
  %1 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %1, i8 0, i64 24, i1 false)
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 6
  %2 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %min.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 0, i32 0
  %3 = load i32, i32* %min.i, align 4, !tbaa !181
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 0, i32 1
  %4 = load i32, i32* %extent.i, align 4, !tbaa !178
  %min.i2826 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 0
  %5 = load i32, i32* %min.i2826, align 4, !tbaa !181
  %extent.i2828 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 1
  %6 = load i32, i32* %extent.i2828, align 4, !tbaa !178
  %stride.i2830 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 2
  %7 = load i32, i32* %stride.i2830, align 4, !tbaa !182
  %host.i2831 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 2
  %dim.i2832 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 6
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2832, align 8, !tbaa !176
  %min.i2833 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 0, i32 0
  %9 = load i32, i32* %min.i2833, align 4, !tbaa !181
  %extent.i2835 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 0, i32 1
  %10 = load i32, i32* %extent.i2835, align 4, !tbaa !178
  %min.i2839 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 0
  %11 = load i32, i32* %min.i2839, align 4, !tbaa !181
  %extent.i2841 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 1
  %12 = load i32, i32* %extent.i2841, align 4, !tbaa !178
  %stride.i2843 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 2
  %13 = load i32, i32* %stride.i2843, align 4, !tbaa !182
  %b22 = add nsw i32 %4, %3
  %t1678 = add nsw i32 %10, %9
  %14 = icmp slt i32 %4, 32
  %t1679 = select i1 %14, i32 %4, i32 32
  %15 = icmp sgt i32 %12, 0
  %16 = select i1 %15, i32 %12, i32 0
  %a40 = add nsw i32 %16, %11
  %t1681 = mul nsw i32 %7, %5
  %17 = add nsw i32 %4, 31
  %a3 = ashr i32 %17, 5
  %18 = icmp sgt i32 %4, 32
  %b21 = select i1 %18, i32 %4, i32 32
  %19 = add nuw nsw i32 %b21, 37
  %20 = lshr i32 %19, 5
  %21 = icmp slt i32 %a3, 1
  %b23 = select i1 %21, i32 %a3, i32 1
  %22 = sub i32 63, %3
  %23 = sub i32 %22, %t1679
  %24 = add i32 %23, %9
  %a5 = ashr i32 %24, 5
  %25 = icmp sgt i32 %a5, 0
  %a4 = select i1 %25, i32 %a5, i32 0
  %26 = icmp sgt i32 %20, %a4
  %b18 = select i1 %26, i32 %a4, i32 %20
  %b8 = add nsw i32 %t1679, -32
  %27 = icmp slt i32 %4, 0
  %28 = select i1 %27, i32 %4, i32 0
  %a6 = select i1 %18, i32 %28, i32 %b8
  %29 = icmp sgt i32 %b8, %a6
  %t1689 = select i1 %29, i32 %a6, i32 %b8
  %b19 = add nuw nsw i32 %b21, 5
  %a14 = add nsw i32 %4, -32
  %30 = add nsw i32 %4, -1
  %31 = and i32 %30, -32
  %a8 = select i1 %18, i32 %31, i32 %a14
  %32 = icmp sgt i32 %a8, %a14
  %33 = select i1 %32, i32 %a8, i32 %a14
  %34 = icmp sgt i32 %4, 0
  %35 = select i1 %34, i32 %4, i32 0
  %a9 = select i1 %18, i32 %35, i32 32
  %36 = icmp sgt i32 %a9, 32
  %37 = select i1 %36, i32 %a9, i32 32
  %38 = add nsw i32 %37, -1
  %39 = and i32 %38, -32
  %b16 = add nsw i32 %39, %33
  %a13 = add nsw i32 %b16, 32
  %40 = icmp sgt i32 %4, %a13
  %a12 = select i1 %40, i32 %a13, i32 %4
  %41 = icmp sgt i32 %b16, %a14
  %42 = select i1 %41, i32 %a14, i32 %b16
  %b14 = add nsw i32 %42, 37
  %43 = icmp sgt i32 %a12, %b14
  %a11 = select i1 %43, i32 %a12, i32 %b14
  %a15 = add nsw i32 %4, 6
  %44 = and i32 %b19, 2147483616
  %b17 = add nsw i32 %44, %t1679
  %45 = icmp sgt i32 %b17, %a15
  %46 = select i1 %45, i32 %a15, i32 %b17
  %b13 = add nsw i32 %46, -1
  %.not = icmp slt i32 %a11, %46
  %47 = select i1 %.not, i32 %b13, i32 %a11
  %48 = sub nsw i32 %47, %t1689
  %a24 = add nsw i32 %48, 1
  %49 = sub nsw i32 %t1678, %t1679
  %a18 = sub i32 %49, %3
  %a20 = add nsw i32 %t1678, 25
  %50 = icmp sgt i32 %b22, %a20
  %51 = select i1 %50, i32 %a20, i32 %b22
  %52 = sub i32 32, %3
  %53 = sub i32 %52, %t1679
  %a19 = add i32 %53, %51
  %54 = icmp sgt i32 %b21, %a19
  %55 = select i1 %54, i32 %a19, i32 %b21
  %b20 = add nsw i32 %55, -26
  %56 = icmp sgt i32 %b20, %a18
  %a17 = select i1 %56, i32 %a18, i32 %b20
  %57 = icmp sgt i32 %b19, %a17
  %58 = select i1 %57, i32 %a17, i32 %b19
  %59 = ashr i32 %58, 5
  %a16 = add nsw i32 %59, 1
  %.not2641 = icmp slt i32 %59, %b18
  %t1668 = select i1 %.not2641, i32 %b18, i32 %a16
  %a21 = ashr i32 %4, 5
  %60 = icmp sgt i32 %a21, %b23
  %t1670 = select i1 %60, i32 %a21, i32 %b23
  %61 = add nsw i32 %6, 31
  %t1656 = ashr i32 %61, 5
  %62 = icmp sgt i32 %6, 0
  br i1 %62, label %"for blur_y.s0.y.y.preheader", label %"end for blur_y.s0.y.y", !prof !386

"for blur_y.s0.y.y.preheader":                    ; preds = %entry
  %63 = bitcast i8** %host.i2831 to i16**
  %64 = load i16*, i16** %63, align 8, !tbaa !172
  %65 = bitcast i8** %host.i to i16**
  %66 = load i16*, i16** %65, align 8, !tbaa !172
  %b24 = add nsw i32 %6, -32
  %.inv2733 = icmp slt i32 %48, 0
  %67 = select i1 %.inv2733, i32 0, i32 %a24
  %t2350 = zext i32 %67 to i64
  %68 = mul nuw nsw i64 %t2350, 76
  %69 = add nuw nsw i64 %68, 6
  %70 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8***
  %b30 = add nsw i32 %12, %11
  %71 = sub nsw i32 %11, %5
  %72 = sub i32 %5, %11
  %t1696 = add nsw i32 %t1689, %3
  %t1694 = add nsw i32 %t1679, %3
  %b36 = add nsw i32 %12, -1
  %b37 = add nsw i32 %b22, 6
  %73 = add nsw i32 %t1678, -1
  %74 = insertelement <32 x i32> undef, i32 %73, i32 0
  %75 = shufflevector <32 x i32> %74, <32 x i32> undef, <8 x i32> zeroinitializer
  %76 = insertelement <32 x i32> undef, i32 %9, i32 0
  %77 = shufflevector <32 x i32> %76, <32 x i32> undef, <8 x i32> zeroinitializer
  %t1705 = sub nsw i32 %20, %t1668
  %78 = icmp sgt i32 %b18, 0
  %79 = sext i32 %11 to i64
  %80 = sext i32 %5 to i64
  %81 = sub nsw i64 %79, %80
  %82 = sext i32 %a24 to i64
  %83 = sext i32 %t1696 to i64
  %t1711 = sub nsw i32 %t1668, %b18
  %84 = icmp sgt i32 %t1711, 0
  %85 = icmp sgt i32 %t1705, 0
  %86 = sub nsw i32 %5, %a40
  %87 = sext i32 %a40 to i64
  %88 = sub nsw i64 %87, %80
  %a73 = sub nsw i32 %4, %t1689
  %89 = icmp sgt i32 %a73, 0
  %90 = select i1 %89, i32 %a73, i32 0
  %t2351 = zext i32 %90 to i64
  %91 = shl nuw nsw i64 %t2351, 4
  %92 = or i64 %91, 6
  %93 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8***
  %t710 = sub i32 %t1679, %t1689
  %94 = sext i32 %t710 to i64
  %95 = zext i32 %4 to i64
  %96 = sext i32 %t1689 to i64
  %97 = sub nsw i64 %95, %96
  %98 = sext i32 %t1679 to i64
  %99 = sub nsw i64 %98, %96
  %t1724 = sub nsw i32 %t1670, %b23
  %100 = icmp sgt i32 %t1724, 0
  %101 = sext i32 %b23 to i64
  %t1727 = sub nsw i32 %a3, %t1670
  %102 = icmp sgt i32 %t1727, 0
  %t716 = add i32 %t710, %a24
  %103 = sext i32 %t716 to i64
  %t1731 = sub nsw i32 %a24, %t1689
  %104 = shl nsw i32 %a24, 1
  %t722 = add i32 %t710, %104
  %105 = sext i32 %t722 to i64
  %t1737 = sub nsw i32 %104, %t1689
  %106 = mul nsw i32 %a24, 3
  %t728 = add i32 %t710, %106
  %107 = sext i32 %t728 to i64
  %t1743 = sub nsw i32 %106, %t1689
  %108 = shl nsw i32 %a24, 2
  %t734 = add i32 %t710, %108
  %109 = sext i32 %t734 to i64
  %t1749 = sub nsw i32 %108, %t1689
  %110 = mul nsw i32 %a24, 6
  %a24.neg = xor i32 %48, -1
  %111 = add i32 %t710, %a24.neg
  %t740 = add i32 %111, %110
  %112 = sext i32 %t740 to i64
  %113 = sub nsw i32 %110, %t1689
  %t1755 = sub nsw i32 %113, %a24
  %114 = add nsw i32 %110, %t1679
  %t746 = sub i32 %114, %t1689
  %115 = sext i32 %t746 to i64
  %116 = sext i32 %a73 to i64
  %117 = sext i32 %7 to i64
  %118 = sext i32 %t1681 to i64
  %119 = sub nsw i64 %98, %118
  %t1765 = sub nsw i32 0, %t1681
  %120 = sext i32 %t1765 to i64
  %t762 = add nsw i32 %t746, %a24
  %121 = sext i32 %t762 to i64
  %t1777 = add nsw i32 %113, %a24
  %122 = shl nsw i32 %a24, 3
  %t778 = add i32 %t710, %122
  %123 = sext i32 %t778 to i64
  %t1793 = sub nsw i32 %122, %t1689
  %124 = mul nsw i32 %a24, 9
  %t794 = add i32 %t710, %124
  %125 = sext i32 %t794 to i64
  %t1809 = sub nsw i32 %124, %t1689
  %126 = mul nsw i32 %a24, 10
  %t810 = add i32 %t710, %126
  %127 = sext i32 %t810 to i64
  %t1825 = sub nsw i32 %126, %t1689
  %128 = mul nsw i32 %a24, 11
  %t826 = add i32 %t710, %128
  %129 = sext i32 %t826 to i64
  %t1841 = sub nsw i32 %128, %t1689
  %130 = mul nsw i32 %a24, 12
  %t842 = add i32 %t710, %130
  %131 = sext i32 %t842 to i64
  %t1857 = sub nsw i32 %130, %t1689
  %132 = mul nsw i32 %a24, 13
  %t858 = add i32 %t710, %132
  %133 = sext i32 %t858 to i64
  %t1873 = sub nsw i32 %132, %t1689
  %134 = mul nsw i32 %a24, 14
  %t874 = add i32 %t710, %134
  %135 = sext i32 %t874 to i64
  %t1889 = sub nsw i32 %134, %t1689
  %136 = mul nsw i32 %a24, 15
  %t890 = add i32 %t710, %136
  %137 = sext i32 %t890 to i64
  %t1905 = sub nsw i32 %136, %t1689
  %138 = shl nsw i32 %a24, 4
  %t906 = add i32 %t710, %138
  %139 = sext i32 %t906 to i64
  %t1921 = sub nsw i32 %138, %t1689
  %140 = mul nsw i32 %a24, 17
  %t922 = add i32 %t710, %140
  %141 = sext i32 %t922 to i64
  %t1937 = sub nsw i32 %140, %t1689
  %142 = mul nsw i32 %a24, 18
  %t938 = add i32 %t710, %142
  %143 = sext i32 %t938 to i64
  %t1953 = sub nsw i32 %142, %t1689
  %144 = mul nsw i32 %a24, 19
  %t954 = add i32 %t710, %144
  %145 = sext i32 %t954 to i64
  %t1969 = sub nsw i32 %144, %t1689
  %146 = mul nsw i32 %a24, 20
  %t970 = add i32 %t710, %146
  %147 = sext i32 %t970 to i64
  %t1985 = sub nsw i32 %146, %t1689
  %148 = mul nsw i32 %a24, 21
  %t986 = add i32 %t710, %148
  %149 = sext i32 %t986 to i64
  %t2001 = sub nsw i32 %148, %t1689
  %150 = mul nsw i32 %a24, 22
  %t1002 = add i32 %t710, %150
  %151 = sext i32 %t1002 to i64
  %t2017 = sub nsw i32 %150, %t1689
  %152 = mul nsw i32 %a24, 23
  %t1018 = add i32 %t710, %152
  %153 = sext i32 %t1018 to i64
  %t2033 = sub nsw i32 %152, %t1689
  %154 = mul nsw i32 %a24, 24
  %t1034 = add i32 %t710, %154
  %155 = sext i32 %t1034 to i64
  %t2049 = sub nsw i32 %154, %t1689
  %156 = mul nsw i32 %a24, 25
  %t1050 = add i32 %t710, %156
  %157 = sext i32 %t1050 to i64
  %t2065 = sub nsw i32 %156, %t1689
  %158 = mul nsw i32 %a24, 26
  %t1066 = add i32 %t710, %158
  %159 = sext i32 %t1066 to i64
  %t2081 = sub nsw i32 %158, %t1689
  %160 = mul nsw i32 %a24, 27
  %t1082 = add i32 %t710, %160
  %161 = sext i32 %t1082 to i64
  %t2097 = sub nsw i32 %160, %t1689
  %162 = mul nsw i32 %a24, 28
  %t1098 = add i32 %t710, %162
  %163 = sext i32 %t1098 to i64
  %t2113 = sub nsw i32 %162, %t1689
  %164 = mul nsw i32 %a24, 29
  %t1114 = add i32 %t710, %164
  %165 = sext i32 %t1114 to i64
  %t2129 = sub nsw i32 %164, %t1689
  %166 = mul nsw i32 %a24, 30
  %t1130 = add i32 %t710, %166
  %167 = sext i32 %t1130 to i64
  %t2145 = sub nsw i32 %166, %t1689
  %168 = mul nsw i32 %a24, 31
  %t1146 = add i32 %t710, %168
  %169 = sext i32 %t1146 to i64
  %t2161 = sub nsw i32 %168, %t1689
  %170 = shl nsw i32 %a24, 5
  %t1162 = add i32 %t710, %170
  %171 = sext i32 %t1162 to i64
  %t2177 = sub nsw i32 %170, %t1689
  %172 = mul nsw i32 %a24, 33
  %t1178 = add i32 %t710, %172
  %173 = sext i32 %t1178 to i64
  %t2193 = sub nsw i32 %172, %t1689
  %174 = mul nsw i32 %a24, 34
  %t1194 = add i32 %t710, %174
  %175 = sext i32 %t1194 to i64
  %t2209 = sub nsw i32 %174, %t1689
  %176 = mul nsw i32 %a24, 35
  %t1210 = add i32 %t710, %176
  %177 = sext i32 %t1210 to i64
  %t2225 = sub nsw i32 %176, %t1689
  %178 = mul nsw i32 %a24, 36
  %t1226 = add i32 %t710, %178
  %179 = sext i32 %t1226 to i64
  %t2241 = sub nsw i32 %178, %t1689
  %180 = mul nsw i32 %a24, 37
  %t1242 = add i32 %t710, %180
  %181 = sext i32 %t1242 to i64
  %t2257 = sub nsw i32 %180, %t1689
  %182 = sext i32 %b36 to i64
  %183 = zext i32 %b18 to i64
  %184 = sext i32 %t1694 to i64
  %185 = zext i32 %t1711 to i64
  %186 = sext i32 %13 to i64
  %187 = sext i32 %9 to i64
  %188 = zext i32 %t1724 to i64
  %189 = add nsw i64 %185, -1
  %xtraiter = and i64 %185, 3
  %190 = icmp ult i64 %189, 3
  %unroll_iter = and i64 %185, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %"for blur_y.s0.y.y"

"for blur_y.s0.y.y":                              ; preds = %"for blur_y.s0.y.y.preheader", %"end for blur_y.s0.x.x.rebased825"
  %blur_y.s0.y.y = phi i32 [ %19234, %"end for blur_y.s0.x.x.rebased825" ], [ 0, %"for blur_y.s0.y.y.preheader" ]
  %a22 = shl nsw i32 %blur_y.s0.y.y, 5
  %191 = icmp sgt i32 %b24, %a22
  %blur_y.s0.y.yi.base.s = select i1 %191, i32 %a22, i32 %b24
  %192 = load i64, i64* %.fca.1.gep, align 8, !tbaa !387
  %cmp.i = icmp ult i64 %192, %69
  %193 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !389
  br i1 %cmp.i, label %if.then.i, label %pseudostack_alloc.exit, !prof !390

if.then.i:                                        ; preds = %"for blur_y.s0.y.y"
  %tobool1.not.i = icmp ne i8* %193, null
  %194 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i = icmp ugt i64 %194, 16384
  %or.cond = and i1 %tobool1.not.i, %cmp2.i
  br i1 %or.cond, label %if.then3.i, label %if.end.i

if.then3.i:                                       ; preds = %if.then.i
  call void @halide_free(i8* null, i8* nonnull %193) #16
  %.pre = load i64, i64* %.fca.2.gep, align 8, !tbaa !391
  br label %if.end.i

if.end.i:                                         ; preds = %if.then3.i, %if.then.i
  %195 = phi i64 [ %.pre, %if.then3.i ], [ %194, %if.then.i ]
  %add.i = add i64 %195, %69
  store i64 %add.i, i64* %.fca.2.gep, align 8, !tbaa !391
  %cmp7.i = icmp ugt i64 %add.i, 16384
  br i1 %cmp7.i, label %if.then8.i, label %if.end11.i

if.then8.i:                                       ; preds = %if.end.i
  %call.i = call i8* @halide_malloc(i8* null, i64 %69) #16
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then8.i, %if.end.i
  %storemerge.i = phi i8* [ %call.i, %if.then8.i ], [ null, %if.end.i ]
  store i8* %storemerge.i, i8** %.fca.0.gep, align 8, !tbaa !389
  store i64 %69, i64* %.fca.1.gep, align 8, !tbaa !387
  br label %pseudostack_alloc.exit

pseudostack_alloc.exit:                           ; preds = %"for blur_y.s0.y.y", %if.end11.i
  %196 = phi i8* [ %storemerge.i, %if.end11.i ], [ %193, %"for blur_y.s0.y.y" ]
  %197 = bitcast i8* %196 to i16*
  %.not2734 = icmp eq i8* %196, null
  br i1 %.not2734, label %then_bb, label %"produce read_input", !prof !392

"end for blur_y.s0.y.y.loopexit":                 ; preds = %"end for blur_y.s0.x.x.rebased825"
  %198 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  %199 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  br label %"end for blur_y.s0.y.y"

"end for blur_y.s0.y.y":                          ; preds = %"end for blur_y.s0.y.y.loopexit", %entry
  %.02948 = phi i8* [ null, %entry ], [ %199, %"end for blur_y.s0.y.y.loopexit" ]
  %.0 = phi i8* [ null, %entry ], [ %198, %"end for blur_y.s0.y.y.loopexit" ]
  %200 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %min.i2846 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %200, i64 0, i32 0
  %201 = load i32, i32* %min.i2846, align 4, !tbaa !181
  %extent.i2848 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %200, i64 0, i32 1
  %202 = load i32, i32* %extent.i2848, align 4, !tbaa !178
  %min.i2852 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %200, i64 1, i32 0
  %203 = load i32, i32* %min.i2852, align 4, !tbaa !181
  %extent.i2854 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %200, i64 1, i32 1
  %204 = load i32, i32* %extent.i2854, align 4, !tbaa !178
  %stride.i2856 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %200, i64 1, i32 2
  %205 = load i32, i32* %stride.i2856, align 4, !tbaa !182
  %206 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2832, align 8, !tbaa !176
  %min.i2859 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %206, i64 0, i32 0
  %207 = load i32, i32* %min.i2859, align 4, !tbaa !181
  %extent.i2861 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %206, i64 0, i32 1
  %208 = load i32, i32* %extent.i2861, align 4, !tbaa !178
  %min.i2865 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %206, i64 1, i32 0
  %209 = load i32, i32* %min.i2865, align 4, !tbaa !181
  %extent.i2867 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %206, i64 1, i32 1
  %210 = load i32, i32* %extent.i2867, align 4, !tbaa !178
  %stride.i2869 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %206, i64 1, i32 2
  %211 = load i32, i32* %stride.i2869, align 4, !tbaa !182
  %b363 = add nsw i32 %202, %201
  %t1678845 = add nsw i32 %208, %207
  %212 = icmp slt i32 %202, 32
  %t1679846 = select i1 %212, i32 %202, i32 32
  %213 = icmp sgt i32 %210, 0
  %214 = select i1 %213, i32 %210, i32 0
  %a381 = add nsw i32 %214, %209
  %t1681847 = mul nsw i32 %205, %203
  %215 = add nsw i32 %202, 31
  %a344 = ashr i32 %215, 5
  %216 = icmp sgt i32 %202, 32
  %b362 = select i1 %216, i32 %202, i32 32
  %217 = add nuw nsw i32 %b362, 37
  %218 = lshr i32 %217, 5
  %219 = icmp slt i32 %a344, 1
  %b364 = select i1 %219, i32 %a344, i32 1
  %220 = sub i32 63, %201
  %221 = sub i32 %220, %t1679846
  %222 = add i32 %221, %207
  %a346 = ashr i32 %222, 5
  %223 = icmp sgt i32 %a346, 0
  %a345 = select i1 %223, i32 %a346, i32 0
  %224 = icmp sgt i32 %218, %a345
  %b359 = select i1 %224, i32 %a345, i32 %218
  %b349 = add nsw i32 %t1679846, -32
  %225 = icmp slt i32 %202, 0
  %226 = select i1 %225, i32 %202, i32 0
  %a347 = select i1 %216, i32 %226, i32 %b349
  %227 = icmp sgt i32 %b349, %a347
  %t1689849 = select i1 %227, i32 %a347, i32 %b349
  %b360 = add nuw nsw i32 %b362, 5
  %a355 = add nsw i32 %202, -32
  %228 = add nsw i32 %202, -1
  %229 = and i32 %228, -32
  %a349 = select i1 %216, i32 %229, i32 %a355
  %230 = icmp sgt i32 %a349, %a355
  %231 = select i1 %230, i32 %a349, i32 %a355
  %232 = icmp sgt i32 %202, 0
  %233 = select i1 %232, i32 %202, i32 0
  %a350 = select i1 %216, i32 %233, i32 32
  %234 = icmp sgt i32 %a350, 32
  %235 = select i1 %234, i32 %a350, i32 32
  %236 = add nsw i32 %235, -1
  %237 = and i32 %236, -32
  %b357 = add nsw i32 %237, %231
  %a354 = add nsw i32 %b357, 32
  %238 = icmp sgt i32 %202, %a354
  %a353 = select i1 %238, i32 %a354, i32 %202
  %239 = icmp sgt i32 %b357, %a355
  %240 = select i1 %239, i32 %a355, i32 %b357
  %b355 = add nsw i32 %240, 37
  %241 = icmp sgt i32 %a353, %b355
  %a352 = select i1 %241, i32 %a353, i32 %b355
  %a356 = add nsw i32 %202, 6
  %242 = and i32 %b360, 2147483616
  %b358 = add nsw i32 %242, %t1679846
  %243 = icmp sgt i32 %b358, %a356
  %244 = select i1 %243, i32 %a356, i32 %b358
  %b354 = add nsw i32 %244, -1
  %.not2642 = icmp slt i32 %a352, %244
  %245 = select i1 %.not2642, i32 %b354, i32 %a352
  %246 = sub nsw i32 %245, %t1689849
  %a365 = add nsw i32 %246, 1
  %247 = sub nsw i32 %t1678845, %t1679846
  %a359 = sub i32 %247, %201
  %a361 = add nsw i32 %t1678845, 25
  %248 = icmp sgt i32 %b363, %a361
  %249 = select i1 %248, i32 %a361, i32 %b363
  %250 = sub i32 32, %201
  %251 = sub i32 %250, %t1679846
  %a360 = add i32 %251, %249
  %252 = icmp sgt i32 %b362, %a360
  %253 = select i1 %252, i32 %a360, i32 %b362
  %b361 = add nsw i32 %253, -26
  %254 = icmp sgt i32 %b361, %a359
  %a358 = select i1 %254, i32 %a359, i32 %b361
  %255 = icmp sgt i32 %b360, %a358
  %256 = select i1 %255, i32 %a358, i32 %b360
  %257 = ashr i32 %256, 5
  %a357 = add nsw i32 %257, 1
  %.not2643 = icmp slt i32 %257, %b359
  %t1668851 = select i1 %.not2643, i32 %b359, i32 %a357
  %a362 = ashr i32 %202, 5
  %258 = icmp sgt i32 %a362, %b364
  %t1670852 = select i1 %258, i32 %a362, i32 %b364
  %259 = add nsw i32 %204, 31
  %t1656853 = ashr i32 %259, 5
  %260 = icmp sgt i32 %204, 0
  br i1 %260, label %"for blur_y.s0.y.y854.preheader", label %"end for blur_y.s0.y.y855", !prof !386

"for blur_y.s0.y.y854.preheader":                 ; preds = %"end for blur_y.s0.y.y"
  %261 = bitcast i8** %host.i2831 to i16**
  %262 = load i16*, i16** %261, align 8, !tbaa !172
  %263 = bitcast i8** %host.i to i16**
  %264 = load i16*, i16** %263, align 8, !tbaa !172
  %b365 = add nsw i32 %204, -32
  %.inv = icmp slt i32 %246, 0
  %265 = select i1 %.inv, i32 0, i32 %a365
  %t2352 = zext i32 %265 to i64
  %266 = mul nuw nsw i64 %t2352, 76
  %267 = add nuw nsw i64 %266, 6
  %268 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8***
  %b371 = add nsw i32 %210, %209
  %269 = sub nsw i32 %209, %203
  %270 = sub i32 %203, %209
  %t1696866 = add nsw i32 %t1689849, %201
  %t1694867 = add nsw i32 %t1679846, %201
  %b377 = add nsw i32 %210, -1
  %b378 = add nsw i32 %b363, 6
  %271 = add nsw i32 %t1678845, -1
  %272 = insertelement <32 x i32> undef, i32 %271, i32 0
  %273 = shufflevector <32 x i32> %272, <32 x i32> undef, <8 x i32> zeroinitializer
  %274 = insertelement <32 x i32> undef, i32 %207, i32 0
  %275 = shufflevector <32 x i32> %274, <32 x i32> undef, <8 x i32> zeroinitializer
  %t1705879 = sub nsw i32 %218, %t1668851
  %276 = icmp sgt i32 %b359, 0
  %277 = sext i32 %209 to i64
  %278 = sext i32 %203 to i64
  %279 = sub nsw i64 %277, %278
  %280 = sext i32 %a365 to i64
  %281 = sext i32 %t1696866 to i64
  %t1711892 = sub nsw i32 %t1668851, %b359
  %282 = icmp sgt i32 %t1711892, 0
  %283 = icmp sgt i32 %t1705879, 0
  %284 = sub nsw i32 %203, %a381
  %285 = sext i32 %a381 to i64
  %286 = sub nsw i64 %285, %278
  %a414 = sub nsw i32 %202, %t1689849
  %287 = icmp sgt i32 %a414, 0
  %288 = select i1 %287, i32 %a414, i32 0
  %t2353 = zext i32 %288 to i64
  %289 = shl nuw nsw i64 %t2353, 4
  %290 = or i64 %289, 6
  %291 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8***
  %t710923 = sub i32 %t1679846, %t1689849
  %292 = sext i32 %t710923 to i64
  %293 = zext i32 %202 to i64
  %294 = sext i32 %t1689849 to i64
  %295 = sub nsw i64 %293, %294
  %296 = sext i32 %t1679846 to i64
  %297 = sub nsw i64 %296, %294
  %t1724925 = sub nsw i32 %t1670852, %b364
  %298 = icmp sgt i32 %t1724925, 0
  %299 = sext i32 %b364 to i64
  %t1727937 = sub nsw i32 %a344, %t1670852
  %300 = icmp sgt i32 %t1727937, 0
  %t716953 = add i32 %t710923, %a365
  %301 = sext i32 %t716953 to i64
  %t1731956 = sub nsw i32 %a365, %t1689849
  %302 = shl nsw i32 %a365, 1
  %t722983 = add i32 %t710923, %302
  %303 = sext i32 %t722983 to i64
  %t1737985 = sub nsw i32 %302, %t1689849
  %304 = mul nsw i32 %a365, 3
  %t7281013 = add i32 %t710923, %304
  %305 = sext i32 %t7281013 to i64
  %t17431015 = sub nsw i32 %304, %t1689849
  %306 = shl nsw i32 %a365, 2
  %t7341043 = add i32 %t710923, %306
  %307 = sext i32 %t7341043 to i64
  %t17491045 = sub nsw i32 %306, %t1689849
  %308 = mul nsw i32 %a365, 6
  %a365.neg = xor i32 %246, -1
  %309 = add i32 %t710923, %a365.neg
  %t7401073 = add i32 %309, %308
  %310 = sext i32 %t7401073 to i64
  %311 = sub nsw i32 %308, %t1689849
  %t17551075 = sub nsw i32 %311, %a365
  %312 = add nsw i32 %308, %t1679846
  %t7461103 = sub i32 %312, %t1689849
  %313 = sext i32 %t7461103 to i64
  %314 = sext i32 %a414 to i64
  %315 = sext i32 %205 to i64
  %316 = sext i32 %t1681847 to i64
  %317 = sub nsw i64 %296, %316
  %t17651113 = sub nsw i32 0, %t1681847
  %318 = sext i32 %t17651113 to i64
  %t7621146 = add nsw i32 %t7461103, %a365
  %319 = sext i32 %t7621146 to i64
  %t17771156 = add nsw i32 %311, %a365
  %320 = shl nsw i32 %a365, 3
  %t7781189 = add i32 %t710923, %320
  %321 = sext i32 %t7781189 to i64
  %t17931197 = sub nsw i32 %320, %t1689849
  %322 = mul nsw i32 %a365, 9
  %t7941232 = add i32 %t710923, %322
  %323 = sext i32 %t7941232 to i64
  %t18091240 = sub nsw i32 %322, %t1689849
  %324 = mul nsw i32 %a365, 10
  %t8101275 = add i32 %t710923, %324
  %325 = sext i32 %t8101275 to i64
  %t18251283 = sub nsw i32 %324, %t1689849
  %326 = mul nsw i32 %a365, 11
  %t8261318 = add i32 %t710923, %326
  %327 = sext i32 %t8261318 to i64
  %t18411326 = sub nsw i32 %326, %t1689849
  %328 = mul nsw i32 %a365, 12
  %t8421361 = add i32 %t710923, %328
  %329 = sext i32 %t8421361 to i64
  %t18571369 = sub nsw i32 %328, %t1689849
  %330 = mul nsw i32 %a365, 13
  %t8581404 = add i32 %t710923, %330
  %331 = sext i32 %t8581404 to i64
  %t18731412 = sub nsw i32 %330, %t1689849
  %332 = mul nsw i32 %a365, 14
  %t8741447 = add i32 %t710923, %332
  %333 = sext i32 %t8741447 to i64
  %t18891455 = sub nsw i32 %332, %t1689849
  %334 = mul nsw i32 %a365, 15
  %t8901490 = add i32 %t710923, %334
  %335 = sext i32 %t8901490 to i64
  %t19051498 = sub nsw i32 %334, %t1689849
  %336 = shl nsw i32 %a365, 4
  %t9061533 = add i32 %t710923, %336
  %337 = sext i32 %t9061533 to i64
  %t19211541 = sub nsw i32 %336, %t1689849
  %338 = mul nsw i32 %a365, 17
  %t9221576 = add i32 %t710923, %338
  %339 = sext i32 %t9221576 to i64
  %t19371584 = sub nsw i32 %338, %t1689849
  %340 = mul nsw i32 %a365, 18
  %t9381619 = add i32 %t710923, %340
  %341 = sext i32 %t9381619 to i64
  %t19531627 = sub nsw i32 %340, %t1689849
  %342 = mul nsw i32 %a365, 19
  %t9541662 = add i32 %t710923, %342
  %343 = sext i32 %t9541662 to i64
  %t19691670 = sub nsw i32 %342, %t1689849
  %344 = mul nsw i32 %a365, 20
  %t9701705 = add i32 %t710923, %344
  %345 = sext i32 %t9701705 to i64
  %t19851713 = sub nsw i32 %344, %t1689849
  %346 = mul nsw i32 %a365, 21
  %t9861748 = add i32 %t710923, %346
  %347 = sext i32 %t9861748 to i64
  %t20011756 = sub nsw i32 %346, %t1689849
  %348 = mul nsw i32 %a365, 22
  %t10021791 = add i32 %t710923, %348
  %349 = sext i32 %t10021791 to i64
  %t20171799 = sub nsw i32 %348, %t1689849
  %350 = mul nsw i32 %a365, 23
  %t10181834 = add i32 %t710923, %350
  %351 = sext i32 %t10181834 to i64
  %t20331842 = sub nsw i32 %350, %t1689849
  %352 = mul nsw i32 %a365, 24
  %t10341877 = add i32 %t710923, %352
  %353 = sext i32 %t10341877 to i64
  %t20491885 = sub nsw i32 %352, %t1689849
  %354 = mul nsw i32 %a365, 25
  %t10501920 = add i32 %t710923, %354
  %355 = sext i32 %t10501920 to i64
  %t20651928 = sub nsw i32 %354, %t1689849
  %356 = mul nsw i32 %a365, 26
  %t10661963 = add i32 %t710923, %356
  %357 = sext i32 %t10661963 to i64
  %t20811971 = sub nsw i32 %356, %t1689849
  %358 = mul nsw i32 %a365, 27
  %t10822006 = add i32 %t710923, %358
  %359 = sext i32 %t10822006 to i64
  %t20972014 = sub nsw i32 %358, %t1689849
  %360 = mul nsw i32 %a365, 28
  %t10982049 = add i32 %t710923, %360
  %361 = sext i32 %t10982049 to i64
  %t21132057 = sub nsw i32 %360, %t1689849
  %362 = mul nsw i32 %a365, 29
  %t11142092 = add i32 %t710923, %362
  %363 = sext i32 %t11142092 to i64
  %t21292100 = sub nsw i32 %362, %t1689849
  %364 = mul nsw i32 %a365, 30
  %t11302135 = add i32 %t710923, %364
  %365 = sext i32 %t11302135 to i64
  %t21452143 = sub nsw i32 %364, %t1689849
  %366 = mul nsw i32 %a365, 31
  %t11462178 = add i32 %t710923, %366
  %367 = sext i32 %t11462178 to i64
  %t21612186 = sub nsw i32 %366, %t1689849
  %368 = shl nsw i32 %a365, 5
  %t11622221 = add i32 %t710923, %368
  %369 = sext i32 %t11622221 to i64
  %t21772229 = sub nsw i32 %368, %t1689849
  %370 = mul nsw i32 %a365, 33
  %t11782264 = add i32 %t710923, %370
  %371 = sext i32 %t11782264 to i64
  %t21932272 = sub nsw i32 %370, %t1689849
  %372 = mul nsw i32 %a365, 34
  %t11942307 = add i32 %t710923, %372
  %373 = sext i32 %t11942307 to i64
  %t22092315 = sub nsw i32 %372, %t1689849
  %374 = mul nsw i32 %a365, 35
  %t12102350 = add i32 %t710923, %374
  %375 = sext i32 %t12102350 to i64
  %t22252358 = sub nsw i32 %374, %t1689849
  %376 = mul nsw i32 %a365, 36
  %t12262393 = add i32 %t710923, %376
  %377 = sext i32 %t12262393 to i64
  %t22412401 = sub nsw i32 %376, %t1689849
  %378 = mul nsw i32 %a365, 37
  %t12422436 = add i32 %t710923, %378
  %379 = sext i32 %t12422436 to i64
  %t22572444 = sub nsw i32 %378, %t1689849
  %380 = sext i32 %b377 to i64
  %381 = zext i32 %b359 to i64
  %382 = sext i32 %t1694867 to i64
  %383 = zext i32 %t1711892 to i64
  %384 = sext i32 %211 to i64
  %385 = sext i32 %207 to i64
  %386 = zext i32 %t1724925 to i64
  %387 = add nsw i64 %383, -1
  %xtraiter3691 = and i64 %383, 3
  %388 = icmp ult i64 %387, 3
  %unroll_iter3694 = and i64 %383, 4294967292
  %lcmp.mod3693.not = icmp eq i64 %xtraiter3691, 0
  br label %"for blur_y.s0.y.y854"

then_bb:                                          ; preds = %pseudostack_alloc.exit
  %389 = alloca i8*, i64 %69, align 32
  %390 = bitcast i8** %389 to i16*
  store i8** %389, i8*** %70, align 8
  br label %"produce read_input"

"produce read_input":                             ; preds = %pseudostack_alloc.exit, %then_bb
  %read_input = phi i16* [ %390, %then_bb ], [ %197, %pseudostack_alloc.exit ]
  %a26 = add nsw i32 %blur_y.s0.y.yi.base.s, %5
  %391 = icmp sgt i32 %a26, %11
  %a25 = select i1 %391, i32 %a26, i32 %11
  %b27 = add nsw i32 %a26, 38
  %392 = icmp sgt i32 %b27, %a25
  %read_input.s0.y.prologue = select i1 %392, i32 %a25, i32 %b27
  %393 = icmp sgt i32 %a25, %b30
  %a27 = select i1 %393, i32 %a25, i32 %b30
  %394 = icmp sgt i32 %b27, %a27
  %read_input.s0.y.epilogue = select i1 %394, i32 %a27, i32 %b27
  %a31 = sub i32 %71, %blur_y.s0.y.yi.base.s
  %395 = icmp sgt i32 %a31, 0
  br i1 %395, label %"for read_input.s0.y.rebased.preheader", label %"end for read_input.s0.y.rebased", !prof !386

"for read_input.s0.y.rebased.preheader":          ; preds = %"produce read_input"
  %t1695 = add nsw i32 %72, %blur_y.s0.y.yi.base.s
  %396 = icmp slt i32 %a31, 38
  %a30 = select i1 %396, i32 %a31, i32 38
  %397 = sext i32 %t1695 to i64
  %398 = zext i32 %a30 to i64
  br label %"for read_input.s0.y.rebased"

"for read_input.s0.y.rebased":                    ; preds = %"for read_input.s0.y.rebased.preheader", %"end for read_input.s0.x.x"
  %indvars.iv = phi i64 [ 0, %"for read_input.s0.y.rebased.preheader" ], [ %indvars.iv.next, %"end for read_input.s0.x.x" ]
  %399 = add nsw i64 %indvars.iv, %397
  %400 = icmp slt i64 %399, %182
  %401 = trunc i64 %399 to i32
  %a33 = select i1 %400, i32 %401, i32 %b36
  %402 = mul nsw i64 %indvars.iv, %82
  %403 = sub nsw i64 %402, %83
  %404 = icmp sgt i32 %a33, 0
  %405 = select i1 %404, i32 %a33, i32 0
  %406 = mul nsw i32 %405, %13
  %t1697 = sub nsw i32 %406, %9
  %407 = insertelement <32 x i32> undef, i32 %t1697, i32 0
  %408 = shufflevector <32 x i32> %407, <32 x i32> undef, <32 x i32> zeroinitializer
  br label %"for read_input.s0.x.x"

"end for read_input.s0.y.rebased":                ; preds = %"end for read_input.s0.x.x", %"produce read_input"
  %409 = icmp sgt i32 %a40, %a26
  %a39 = select i1 %409, i32 %a40, i32 %a26
  %410 = icmp sgt i32 %b27, %a39
  %411 = select i1 %410, i32 %a39, i32 %b27
  %t1699 = sub nsw i32 %411, %read_input.s0.y.prologue
  %412 = icmp sgt i32 %t1699, 0
  br i1 %412, label %"for read_input.s0.y.rebased1.preheader", label %"end for read_input.s0.y.rebased2", !prof !386

"for read_input.s0.y.rebased1.preheader":         ; preds = %"end for read_input.s0.y.rebased"
  %t1702 = sub i32 %read_input.s0.y.prologue, %11
  %413 = sext i32 %blur_y.s0.y.yi.base.s to i64
  %a47 = sub nsw i64 %81, %413
  %414 = icmp slt i64 %a47, 38
  %a46 = select i1 %414, i64 %a47, i64 38
  %415 = icmp sgt i64 %a46, 0
  %416 = select i1 %415, i64 %a46, i64 0
  %417 = sext i32 %t1702 to i64
  %418 = zext i32 %t1699 to i64
  br label %"for read_input.s0.y.rebased1"

"for read_input.s0.x.x":                          ; preds = %"for read_input.s0.y.rebased", %"for read_input.s0.x.x"
  %read_input.s0.x.x = phi i32 [ %617, %"for read_input.s0.x.x" ], [ 0, %"for read_input.s0.y.rebased" ]
  %419 = shl nsw i32 %read_input.s0.x.x, 5
  %a35 = add nsw i32 %419, %t1694
  %420 = icmp sgt i32 %b37, %a35
  %read_input.s0.x.v2.base.s = select i1 %420, i32 %a35, i32 %b37
  %421 = add nsw i32 %read_input.s0.x.v2.base.s, -32
  %422 = insertelement <32 x i32> undef, i32 %421, i32 0
  %423 = shufflevector <32 x i32> %422, <32 x i32> undef, <32 x i32> zeroinitializer
  %a37 = add nsw <32 x i32> %423, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %424 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %425 = icmp sgt <8 x i32> %75, %424
  %426 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %427 = icmp sgt <8 x i32> %75, %426
  %428 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %429 = icmp sgt <8 x i32> %75, %428
  %430 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %431 = icmp sgt <8 x i32> %75, %430
  %432 = select <8 x i1> %425, <8 x i32> %424, <8 x i32> %75
  %433 = select <8 x i1> %427, <8 x i32> %426, <8 x i32> %75
  %434 = select <8 x i1> %429, <8 x i32> %428, <8 x i32> %75
  %435 = select <8 x i1> %431, <8 x i32> %430, <8 x i32> %75
  %436 = icmp sgt <8 x i32> %432, %77
  %437 = icmp sgt <8 x i32> %433, %77
  %438 = icmp sgt <8 x i32> %434, %77
  %439 = icmp sgt <8 x i32> %435, %77
  %440 = select <8 x i1> %436, <8 x i32> %432, <8 x i32> %77
  %441 = select <8 x i1> %437, <8 x i32> %433, <8 x i32> %77
  %442 = select <8 x i1> %438, <8 x i32> %434, <8 x i32> %77
  %443 = select <8 x i1> %439, <8 x i32> %435, <8 x i32> %77
  %444 = shufflevector <8 x i32> %440, <8 x i32> %441, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %445 = shufflevector <8 x i32> %442, <8 x i32> %443, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %446 = shufflevector <16 x i32> %444, <16 x i32> %445, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %447 = add nsw <32 x i32> %446, %408
  %448 = extractelement <32 x i32> %447, i32 0
  %449 = sext i32 %448 to i64
  %450 = getelementptr inbounds i16, i16* %64, i64 %449
  %451 = load i16, i16* %450, align 2, !tbaa !393
  %452 = insertelement <32 x i16> undef, i16 %451, i32 0
  %453 = extractelement <32 x i32> %447, i32 1
  %454 = sext i32 %453 to i64
  %455 = getelementptr inbounds i16, i16* %64, i64 %454
  %456 = load i16, i16* %455, align 2, !tbaa !393
  %457 = insertelement <32 x i16> %452, i16 %456, i32 1
  %458 = extractelement <32 x i32> %447, i32 2
  %459 = sext i32 %458 to i64
  %460 = getelementptr inbounds i16, i16* %64, i64 %459
  %461 = load i16, i16* %460, align 2, !tbaa !393
  %462 = insertelement <32 x i16> %457, i16 %461, i32 2
  %463 = extractelement <32 x i32> %447, i32 3
  %464 = sext i32 %463 to i64
  %465 = getelementptr inbounds i16, i16* %64, i64 %464
  %466 = load i16, i16* %465, align 2, !tbaa !393
  %467 = insertelement <32 x i16> %462, i16 %466, i32 3
  %468 = extractelement <32 x i32> %447, i32 4
  %469 = sext i32 %468 to i64
  %470 = getelementptr inbounds i16, i16* %64, i64 %469
  %471 = load i16, i16* %470, align 2, !tbaa !393
  %472 = insertelement <32 x i16> %467, i16 %471, i32 4
  %473 = extractelement <32 x i32> %447, i32 5
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds i16, i16* %64, i64 %474
  %476 = load i16, i16* %475, align 2, !tbaa !393
  %477 = insertelement <32 x i16> %472, i16 %476, i32 5
  %478 = extractelement <32 x i32> %447, i32 6
  %479 = sext i32 %478 to i64
  %480 = getelementptr inbounds i16, i16* %64, i64 %479
  %481 = load i16, i16* %480, align 2, !tbaa !393
  %482 = insertelement <32 x i16> %477, i16 %481, i32 6
  %483 = extractelement <32 x i32> %447, i32 7
  %484 = sext i32 %483 to i64
  %485 = getelementptr inbounds i16, i16* %64, i64 %484
  %486 = load i16, i16* %485, align 2, !tbaa !393
  %487 = insertelement <32 x i16> %482, i16 %486, i32 7
  %488 = extractelement <32 x i32> %447, i32 8
  %489 = sext i32 %488 to i64
  %490 = getelementptr inbounds i16, i16* %64, i64 %489
  %491 = load i16, i16* %490, align 2, !tbaa !393
  %492 = insertelement <32 x i16> %487, i16 %491, i32 8
  %493 = extractelement <32 x i32> %447, i32 9
  %494 = sext i32 %493 to i64
  %495 = getelementptr inbounds i16, i16* %64, i64 %494
  %496 = load i16, i16* %495, align 2, !tbaa !393
  %497 = insertelement <32 x i16> %492, i16 %496, i32 9
  %498 = extractelement <32 x i32> %447, i32 10
  %499 = sext i32 %498 to i64
  %500 = getelementptr inbounds i16, i16* %64, i64 %499
  %501 = load i16, i16* %500, align 2, !tbaa !393
  %502 = insertelement <32 x i16> %497, i16 %501, i32 10
  %503 = extractelement <32 x i32> %447, i32 11
  %504 = sext i32 %503 to i64
  %505 = getelementptr inbounds i16, i16* %64, i64 %504
  %506 = load i16, i16* %505, align 2, !tbaa !393
  %507 = insertelement <32 x i16> %502, i16 %506, i32 11
  %508 = extractelement <32 x i32> %447, i32 12
  %509 = sext i32 %508 to i64
  %510 = getelementptr inbounds i16, i16* %64, i64 %509
  %511 = load i16, i16* %510, align 2, !tbaa !393
  %512 = insertelement <32 x i16> %507, i16 %511, i32 12
  %513 = extractelement <32 x i32> %447, i32 13
  %514 = sext i32 %513 to i64
  %515 = getelementptr inbounds i16, i16* %64, i64 %514
  %516 = load i16, i16* %515, align 2, !tbaa !393
  %517 = insertelement <32 x i16> %512, i16 %516, i32 13
  %518 = extractelement <32 x i32> %447, i32 14
  %519 = sext i32 %518 to i64
  %520 = getelementptr inbounds i16, i16* %64, i64 %519
  %521 = load i16, i16* %520, align 2, !tbaa !393
  %522 = insertelement <32 x i16> %517, i16 %521, i32 14
  %523 = extractelement <32 x i32> %447, i32 15
  %524 = sext i32 %523 to i64
  %525 = getelementptr inbounds i16, i16* %64, i64 %524
  %526 = load i16, i16* %525, align 2, !tbaa !393
  %527 = insertelement <32 x i16> %522, i16 %526, i32 15
  %528 = extractelement <32 x i32> %447, i32 16
  %529 = sext i32 %528 to i64
  %530 = getelementptr inbounds i16, i16* %64, i64 %529
  %531 = load i16, i16* %530, align 2, !tbaa !393
  %532 = insertelement <32 x i16> %527, i16 %531, i32 16
  %533 = extractelement <32 x i32> %447, i32 17
  %534 = sext i32 %533 to i64
  %535 = getelementptr inbounds i16, i16* %64, i64 %534
  %536 = load i16, i16* %535, align 2, !tbaa !393
  %537 = insertelement <32 x i16> %532, i16 %536, i32 17
  %538 = extractelement <32 x i32> %447, i32 18
  %539 = sext i32 %538 to i64
  %540 = getelementptr inbounds i16, i16* %64, i64 %539
  %541 = load i16, i16* %540, align 2, !tbaa !393
  %542 = insertelement <32 x i16> %537, i16 %541, i32 18
  %543 = extractelement <32 x i32> %447, i32 19
  %544 = sext i32 %543 to i64
  %545 = getelementptr inbounds i16, i16* %64, i64 %544
  %546 = load i16, i16* %545, align 2, !tbaa !393
  %547 = insertelement <32 x i16> %542, i16 %546, i32 19
  %548 = extractelement <32 x i32> %447, i32 20
  %549 = sext i32 %548 to i64
  %550 = getelementptr inbounds i16, i16* %64, i64 %549
  %551 = load i16, i16* %550, align 2, !tbaa !393
  %552 = insertelement <32 x i16> %547, i16 %551, i32 20
  %553 = extractelement <32 x i32> %447, i32 21
  %554 = sext i32 %553 to i64
  %555 = getelementptr inbounds i16, i16* %64, i64 %554
  %556 = load i16, i16* %555, align 2, !tbaa !393
  %557 = insertelement <32 x i16> %552, i16 %556, i32 21
  %558 = extractelement <32 x i32> %447, i32 22
  %559 = sext i32 %558 to i64
  %560 = getelementptr inbounds i16, i16* %64, i64 %559
  %561 = load i16, i16* %560, align 2, !tbaa !393
  %562 = insertelement <32 x i16> %557, i16 %561, i32 22
  %563 = extractelement <32 x i32> %447, i32 23
  %564 = sext i32 %563 to i64
  %565 = getelementptr inbounds i16, i16* %64, i64 %564
  %566 = load i16, i16* %565, align 2, !tbaa !393
  %567 = insertelement <32 x i16> %562, i16 %566, i32 23
  %568 = extractelement <32 x i32> %447, i32 24
  %569 = sext i32 %568 to i64
  %570 = getelementptr inbounds i16, i16* %64, i64 %569
  %571 = load i16, i16* %570, align 2, !tbaa !393
  %572 = insertelement <32 x i16> %567, i16 %571, i32 24
  %573 = extractelement <32 x i32> %447, i32 25
  %574 = sext i32 %573 to i64
  %575 = getelementptr inbounds i16, i16* %64, i64 %574
  %576 = load i16, i16* %575, align 2, !tbaa !393
  %577 = insertelement <32 x i16> %572, i16 %576, i32 25
  %578 = extractelement <32 x i32> %447, i32 26
  %579 = sext i32 %578 to i64
  %580 = getelementptr inbounds i16, i16* %64, i64 %579
  %581 = load i16, i16* %580, align 2, !tbaa !393
  %582 = insertelement <32 x i16> %577, i16 %581, i32 26
  %583 = extractelement <32 x i32> %447, i32 27
  %584 = sext i32 %583 to i64
  %585 = getelementptr inbounds i16, i16* %64, i64 %584
  %586 = load i16, i16* %585, align 2, !tbaa !393
  %587 = insertelement <32 x i16> %582, i16 %586, i32 27
  %588 = extractelement <32 x i32> %447, i32 28
  %589 = sext i32 %588 to i64
  %590 = getelementptr inbounds i16, i16* %64, i64 %589
  %591 = load i16, i16* %590, align 2, !tbaa !393
  %592 = insertelement <32 x i16> %587, i16 %591, i32 28
  %593 = extractelement <32 x i32> %447, i32 29
  %594 = sext i32 %593 to i64
  %595 = getelementptr inbounds i16, i16* %64, i64 %594
  %596 = load i16, i16* %595, align 2, !tbaa !393
  %597 = insertelement <32 x i16> %592, i16 %596, i32 29
  %598 = extractelement <32 x i32> %447, i32 30
  %599 = sext i32 %598 to i64
  %600 = getelementptr inbounds i16, i16* %64, i64 %599
  %601 = load i16, i16* %600, align 2, !tbaa !393
  %602 = insertelement <32 x i16> %597, i16 %601, i32 30
  %603 = extractelement <32 x i32> %447, i32 31
  %604 = sext i32 %603 to i64
  %605 = getelementptr inbounds i16, i16* %64, i64 %604
  %606 = load i16, i16* %605, align 2, !tbaa !393
  %607 = insertelement <32 x i16> %602, i16 %606, i32 31
  %608 = shufflevector <32 x i16> %607, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %609 = sext i32 %read_input.s0.x.v2.base.s to i64
  %610 = add nsw i64 %403, %609
  %611 = getelementptr inbounds i16, i16* %read_input, i64 %610
  %612 = getelementptr inbounds i16, i16* %611, i64 -32
  %613 = bitcast i16* %612 to <16 x i16>*
  store <16 x i16> %608, <16 x i16>* %613, align 2, !tbaa !396
  %614 = shufflevector <32 x i16> %607, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %615 = getelementptr inbounds i16, i16* %611, i64 -16
  %616 = bitcast i16* %615 to <16 x i16>*
  store <16 x i16> %614, <16 x i16>* %616, align 2, !tbaa !396
  %617 = add nuw nsw i32 %read_input.s0.x.x, 1
  %.not2822 = icmp eq i32 %617, %20
  br i1 %.not2822, label %"end for read_input.s0.x.x", label %"for read_input.s0.x.x"

"end for read_input.s0.x.x":                      ; preds = %"for read_input.s0.x.x"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %.not2821 = icmp eq i64 %indvars.iv.next, %398
  br i1 %.not2821, label %"end for read_input.s0.y.rebased", label %"for read_input.s0.y.rebased"

"for read_input.s0.y.rebased1":                   ; preds = %"for read_input.s0.y.rebased1.preheader", %"end for read_input.s0.x.x.rebased10"
  %indvars.iv3256 = phi i64 [ 0, %"for read_input.s0.y.rebased1.preheader" ], [ %indvars.iv.next3257, %"end for read_input.s0.x.x.rebased10" ]
  %618 = add nsw i64 %indvars.iv3256, %417
  %619 = mul nsw i64 %618, %186
  %620 = sub nsw i64 %619, %187
  br i1 %78, label %"for read_input.s0.x.x4.preheader", label %"end for read_input.s0.x.x5", !prof !386

"for read_input.s0.x.x4.preheader":               ; preds = %"for read_input.s0.y.rebased1"
  %621 = trunc i64 %620 to i32
  %622 = insertelement <32 x i32> undef, i32 %621, i32 0
  %623 = shufflevector <32 x i32> %622, <32 x i32> undef, <32 x i32> zeroinitializer
  %624 = add nuw nsw i64 %416, %indvars.iv3256
  %625 = mul nsw i64 %624, %82
  %626 = sub i64 %625, %83
  br label %"for read_input.s0.x.x4"

"end for read_input.s0.y.rebased2":               ; preds = %"end for read_input.s0.x.x.rebased10", %"end for read_input.s0.y.rebased"
  %a63 = add nsw i32 %blur_y.s0.y.yi.base.s, %86
  %627 = icmp slt i32 %a63, 0
  %a62 = select i1 %627, i32 %a63, i32 0
  %628 = icmp sgt i32 %a62, -38
  %t1719 = sub nsw i32 %read_input.s0.y.epilogue, %11
  br i1 %628, label %"for read_input.s0.y.rebased13.preheader", label %"end for read_input.s0.y.rebased14", !prof !386

"for read_input.s0.y.rebased13.preheader":        ; preds = %"end for read_input.s0.y.rebased2"
  %629 = sext i32 %blur_y.s0.y.yi.base.s to i64
  %a70 = sub nsw i64 %88, %629
  %630 = icmp slt i64 %a70, 38
  %a69 = select i1 %630, i64 %a70, i64 38
  %631 = icmp sgt i64 %a69, 0
  %632 = select i1 %631, i64 %a69, i64 0
  %a62.op = add nsw i32 %a62, 37
  %633 = zext i32 %a62.op to i64
  br label %"for read_input.s0.y.rebased13"

"for read_input.s0.x.x4":                         ; preds = %"for read_input.s0.x.x4.preheader", %"for read_input.s0.x.x4"
  %read_input.s0.x.x6 = phi i32 [ %832, %"for read_input.s0.x.x4" ], [ 0, %"for read_input.s0.x.x4.preheader" ]
  %634 = shl nsw i32 %read_input.s0.x.x6, 5
  %a43 = add nsw i32 %634, %t1694
  %635 = icmp sgt i32 %b37, %a43
  %read_input.s0.x.v2.base.s7 = select i1 %635, i32 %a43, i32 %b37
  %636 = add nsw i32 %read_input.s0.x.v2.base.s7, -32
  %637 = insertelement <32 x i32> undef, i32 %636, i32 0
  %638 = shufflevector <32 x i32> %637, <32 x i32> undef, <32 x i32> zeroinitializer
  %a45 = add nsw <32 x i32> %638, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %639 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %640 = icmp sgt <8 x i32> %75, %639
  %641 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %642 = icmp sgt <8 x i32> %75, %641
  %643 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %644 = icmp sgt <8 x i32> %75, %643
  %645 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %646 = icmp sgt <8 x i32> %75, %645
  %647 = select <8 x i1> %640, <8 x i32> %639, <8 x i32> %75
  %648 = select <8 x i1> %642, <8 x i32> %641, <8 x i32> %75
  %649 = select <8 x i1> %644, <8 x i32> %643, <8 x i32> %75
  %650 = select <8 x i1> %646, <8 x i32> %645, <8 x i32> %75
  %651 = icmp sgt <8 x i32> %647, %77
  %652 = icmp sgt <8 x i32> %648, %77
  %653 = icmp sgt <8 x i32> %649, %77
  %654 = icmp sgt <8 x i32> %650, %77
  %655 = select <8 x i1> %651, <8 x i32> %647, <8 x i32> %77
  %656 = select <8 x i1> %652, <8 x i32> %648, <8 x i32> %77
  %657 = select <8 x i1> %653, <8 x i32> %649, <8 x i32> %77
  %658 = select <8 x i1> %654, <8 x i32> %650, <8 x i32> %77
  %659 = shufflevector <8 x i32> %655, <8 x i32> %656, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %660 = shufflevector <8 x i32> %657, <8 x i32> %658, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %661 = shufflevector <16 x i32> %659, <16 x i32> %660, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %662 = add nsw <32 x i32> %661, %623
  %663 = extractelement <32 x i32> %662, i32 0
  %664 = sext i32 %663 to i64
  %665 = getelementptr inbounds i16, i16* %64, i64 %664
  %666 = load i16, i16* %665, align 2, !tbaa !393
  %667 = insertelement <32 x i16> undef, i16 %666, i32 0
  %668 = extractelement <32 x i32> %662, i32 1
  %669 = sext i32 %668 to i64
  %670 = getelementptr inbounds i16, i16* %64, i64 %669
  %671 = load i16, i16* %670, align 2, !tbaa !393
  %672 = insertelement <32 x i16> %667, i16 %671, i32 1
  %673 = extractelement <32 x i32> %662, i32 2
  %674 = sext i32 %673 to i64
  %675 = getelementptr inbounds i16, i16* %64, i64 %674
  %676 = load i16, i16* %675, align 2, !tbaa !393
  %677 = insertelement <32 x i16> %672, i16 %676, i32 2
  %678 = extractelement <32 x i32> %662, i32 3
  %679 = sext i32 %678 to i64
  %680 = getelementptr inbounds i16, i16* %64, i64 %679
  %681 = load i16, i16* %680, align 2, !tbaa !393
  %682 = insertelement <32 x i16> %677, i16 %681, i32 3
  %683 = extractelement <32 x i32> %662, i32 4
  %684 = sext i32 %683 to i64
  %685 = getelementptr inbounds i16, i16* %64, i64 %684
  %686 = load i16, i16* %685, align 2, !tbaa !393
  %687 = insertelement <32 x i16> %682, i16 %686, i32 4
  %688 = extractelement <32 x i32> %662, i32 5
  %689 = sext i32 %688 to i64
  %690 = getelementptr inbounds i16, i16* %64, i64 %689
  %691 = load i16, i16* %690, align 2, !tbaa !393
  %692 = insertelement <32 x i16> %687, i16 %691, i32 5
  %693 = extractelement <32 x i32> %662, i32 6
  %694 = sext i32 %693 to i64
  %695 = getelementptr inbounds i16, i16* %64, i64 %694
  %696 = load i16, i16* %695, align 2, !tbaa !393
  %697 = insertelement <32 x i16> %692, i16 %696, i32 6
  %698 = extractelement <32 x i32> %662, i32 7
  %699 = sext i32 %698 to i64
  %700 = getelementptr inbounds i16, i16* %64, i64 %699
  %701 = load i16, i16* %700, align 2, !tbaa !393
  %702 = insertelement <32 x i16> %697, i16 %701, i32 7
  %703 = extractelement <32 x i32> %662, i32 8
  %704 = sext i32 %703 to i64
  %705 = getelementptr inbounds i16, i16* %64, i64 %704
  %706 = load i16, i16* %705, align 2, !tbaa !393
  %707 = insertelement <32 x i16> %702, i16 %706, i32 8
  %708 = extractelement <32 x i32> %662, i32 9
  %709 = sext i32 %708 to i64
  %710 = getelementptr inbounds i16, i16* %64, i64 %709
  %711 = load i16, i16* %710, align 2, !tbaa !393
  %712 = insertelement <32 x i16> %707, i16 %711, i32 9
  %713 = extractelement <32 x i32> %662, i32 10
  %714 = sext i32 %713 to i64
  %715 = getelementptr inbounds i16, i16* %64, i64 %714
  %716 = load i16, i16* %715, align 2, !tbaa !393
  %717 = insertelement <32 x i16> %712, i16 %716, i32 10
  %718 = extractelement <32 x i32> %662, i32 11
  %719 = sext i32 %718 to i64
  %720 = getelementptr inbounds i16, i16* %64, i64 %719
  %721 = load i16, i16* %720, align 2, !tbaa !393
  %722 = insertelement <32 x i16> %717, i16 %721, i32 11
  %723 = extractelement <32 x i32> %662, i32 12
  %724 = sext i32 %723 to i64
  %725 = getelementptr inbounds i16, i16* %64, i64 %724
  %726 = load i16, i16* %725, align 2, !tbaa !393
  %727 = insertelement <32 x i16> %722, i16 %726, i32 12
  %728 = extractelement <32 x i32> %662, i32 13
  %729 = sext i32 %728 to i64
  %730 = getelementptr inbounds i16, i16* %64, i64 %729
  %731 = load i16, i16* %730, align 2, !tbaa !393
  %732 = insertelement <32 x i16> %727, i16 %731, i32 13
  %733 = extractelement <32 x i32> %662, i32 14
  %734 = sext i32 %733 to i64
  %735 = getelementptr inbounds i16, i16* %64, i64 %734
  %736 = load i16, i16* %735, align 2, !tbaa !393
  %737 = insertelement <32 x i16> %732, i16 %736, i32 14
  %738 = extractelement <32 x i32> %662, i32 15
  %739 = sext i32 %738 to i64
  %740 = getelementptr inbounds i16, i16* %64, i64 %739
  %741 = load i16, i16* %740, align 2, !tbaa !393
  %742 = insertelement <32 x i16> %737, i16 %741, i32 15
  %743 = extractelement <32 x i32> %662, i32 16
  %744 = sext i32 %743 to i64
  %745 = getelementptr inbounds i16, i16* %64, i64 %744
  %746 = load i16, i16* %745, align 2, !tbaa !393
  %747 = insertelement <32 x i16> %742, i16 %746, i32 16
  %748 = extractelement <32 x i32> %662, i32 17
  %749 = sext i32 %748 to i64
  %750 = getelementptr inbounds i16, i16* %64, i64 %749
  %751 = load i16, i16* %750, align 2, !tbaa !393
  %752 = insertelement <32 x i16> %747, i16 %751, i32 17
  %753 = extractelement <32 x i32> %662, i32 18
  %754 = sext i32 %753 to i64
  %755 = getelementptr inbounds i16, i16* %64, i64 %754
  %756 = load i16, i16* %755, align 2, !tbaa !393
  %757 = insertelement <32 x i16> %752, i16 %756, i32 18
  %758 = extractelement <32 x i32> %662, i32 19
  %759 = sext i32 %758 to i64
  %760 = getelementptr inbounds i16, i16* %64, i64 %759
  %761 = load i16, i16* %760, align 2, !tbaa !393
  %762 = insertelement <32 x i16> %757, i16 %761, i32 19
  %763 = extractelement <32 x i32> %662, i32 20
  %764 = sext i32 %763 to i64
  %765 = getelementptr inbounds i16, i16* %64, i64 %764
  %766 = load i16, i16* %765, align 2, !tbaa !393
  %767 = insertelement <32 x i16> %762, i16 %766, i32 20
  %768 = extractelement <32 x i32> %662, i32 21
  %769 = sext i32 %768 to i64
  %770 = getelementptr inbounds i16, i16* %64, i64 %769
  %771 = load i16, i16* %770, align 2, !tbaa !393
  %772 = insertelement <32 x i16> %767, i16 %771, i32 21
  %773 = extractelement <32 x i32> %662, i32 22
  %774 = sext i32 %773 to i64
  %775 = getelementptr inbounds i16, i16* %64, i64 %774
  %776 = load i16, i16* %775, align 2, !tbaa !393
  %777 = insertelement <32 x i16> %772, i16 %776, i32 22
  %778 = extractelement <32 x i32> %662, i32 23
  %779 = sext i32 %778 to i64
  %780 = getelementptr inbounds i16, i16* %64, i64 %779
  %781 = load i16, i16* %780, align 2, !tbaa !393
  %782 = insertelement <32 x i16> %777, i16 %781, i32 23
  %783 = extractelement <32 x i32> %662, i32 24
  %784 = sext i32 %783 to i64
  %785 = getelementptr inbounds i16, i16* %64, i64 %784
  %786 = load i16, i16* %785, align 2, !tbaa !393
  %787 = insertelement <32 x i16> %782, i16 %786, i32 24
  %788 = extractelement <32 x i32> %662, i32 25
  %789 = sext i32 %788 to i64
  %790 = getelementptr inbounds i16, i16* %64, i64 %789
  %791 = load i16, i16* %790, align 2, !tbaa !393
  %792 = insertelement <32 x i16> %787, i16 %791, i32 25
  %793 = extractelement <32 x i32> %662, i32 26
  %794 = sext i32 %793 to i64
  %795 = getelementptr inbounds i16, i16* %64, i64 %794
  %796 = load i16, i16* %795, align 2, !tbaa !393
  %797 = insertelement <32 x i16> %792, i16 %796, i32 26
  %798 = extractelement <32 x i32> %662, i32 27
  %799 = sext i32 %798 to i64
  %800 = getelementptr inbounds i16, i16* %64, i64 %799
  %801 = load i16, i16* %800, align 2, !tbaa !393
  %802 = insertelement <32 x i16> %797, i16 %801, i32 27
  %803 = extractelement <32 x i32> %662, i32 28
  %804 = sext i32 %803 to i64
  %805 = getelementptr inbounds i16, i16* %64, i64 %804
  %806 = load i16, i16* %805, align 2, !tbaa !393
  %807 = insertelement <32 x i16> %802, i16 %806, i32 28
  %808 = extractelement <32 x i32> %662, i32 29
  %809 = sext i32 %808 to i64
  %810 = getelementptr inbounds i16, i16* %64, i64 %809
  %811 = load i16, i16* %810, align 2, !tbaa !393
  %812 = insertelement <32 x i16> %807, i16 %811, i32 29
  %813 = extractelement <32 x i32> %662, i32 30
  %814 = sext i32 %813 to i64
  %815 = getelementptr inbounds i16, i16* %64, i64 %814
  %816 = load i16, i16* %815, align 2, !tbaa !393
  %817 = insertelement <32 x i16> %812, i16 %816, i32 30
  %818 = extractelement <32 x i32> %662, i32 31
  %819 = sext i32 %818 to i64
  %820 = getelementptr inbounds i16, i16* %64, i64 %819
  %821 = load i16, i16* %820, align 2, !tbaa !393
  %822 = insertelement <32 x i16> %817, i16 %821, i32 31
  %823 = shufflevector <32 x i16> %822, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %824 = sext i32 %read_input.s0.x.v2.base.s7 to i64
  %825 = add nsw i64 %626, %824
  %826 = getelementptr inbounds i16, i16* %read_input, i64 %825
  %827 = getelementptr inbounds i16, i16* %826, i64 -32
  %828 = bitcast i16* %827 to <16 x i16>*
  store <16 x i16> %823, <16 x i16>* %828, align 2, !tbaa !396
  %829 = shufflevector <32 x i16> %822, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %830 = getelementptr inbounds i16, i16* %826, i64 -16
  %831 = bitcast i16* %830 to <16 x i16>*
  store <16 x i16> %829, <16 x i16>* %831, align 2, !tbaa !396
  %832 = add nuw nsw i32 %read_input.s0.x.x6, 1
  %.not2819 = icmp eq i32 %832, %b18
  br i1 %.not2819, label %"end for read_input.s0.x.x5", label %"for read_input.s0.x.x4"

"end for read_input.s0.x.x5":                     ; preds = %"for read_input.s0.x.x4", %"for read_input.s0.y.rebased1"
  br i1 %84, label %"for read_input.s0.x.x.rebased.preheader", label %"end for read_input.s0.x.x.rebased", !prof !386

"for read_input.s0.x.x.rebased.preheader":        ; preds = %"end for read_input.s0.x.x5"
  %833 = add nuw nsw i64 %416, %indvars.iv3256
  %834 = mul nsw i64 %833, %82
  %835 = sub i64 %834, %83
  br i1 %190, label %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased"

"for read_input.s0.x.x.rebased":                  ; preds = %"for read_input.s0.x.x.rebased.preheader", %"for read_input.s0.x.x.rebased"
  %indvars.iv3253 = phi i64 [ %indvars.iv.next3254.3, %"for read_input.s0.x.x.rebased" ], [ 0, %"for read_input.s0.x.x.rebased.preheader" ]
  %niter = phi i64 [ %niter.nsub.3, %"for read_input.s0.x.x.rebased" ], [ %unroll_iter, %"for read_input.s0.x.x.rebased.preheader" ]
  %836 = add nuw nsw i64 %indvars.iv3253, %183
  %837 = shl nsw i64 %836, 5
  %838 = add nsw i64 %837, %184
  %839 = add nsw i64 %838, %620
  %840 = getelementptr inbounds i16, i16* %64, i64 %839
  %841 = getelementptr inbounds i16, i16* %840, i64 -32
  %842 = bitcast i16* %841 to <16 x i16>*
  %843 = load <16 x i16>, <16 x i16>* %842, align 2, !tbaa !393
  %844 = getelementptr inbounds i16, i16* %840, i64 -16
  %845 = bitcast i16* %844 to <16 x i16>*
  %846 = load <16 x i16>, <16 x i16>* %845, align 2, !tbaa !393
  %847 = add nsw i64 %835, %838
  %848 = getelementptr inbounds i16, i16* %read_input, i64 %847
  %849 = getelementptr inbounds i16, i16* %848, i64 -32
  %850 = bitcast i16* %849 to <16 x i16>*
  store <16 x i16> %843, <16 x i16>* %850, align 2, !tbaa !396
  %851 = getelementptr inbounds i16, i16* %848, i64 -16
  %852 = bitcast i16* %851 to <16 x i16>*
  store <16 x i16> %846, <16 x i16>* %852, align 2, !tbaa !396
  %indvars.iv.next3254 = or i64 %indvars.iv3253, 1
  %853 = add nuw nsw i64 %indvars.iv.next3254, %183
  %854 = shl nsw i64 %853, 5
  %855 = add nsw i64 %854, %184
  %856 = add nsw i64 %855, %620
  %857 = getelementptr inbounds i16, i16* %64, i64 %856
  %858 = getelementptr inbounds i16, i16* %857, i64 -32
  %859 = bitcast i16* %858 to <16 x i16>*
  %860 = load <16 x i16>, <16 x i16>* %859, align 2, !tbaa !393
  %861 = getelementptr inbounds i16, i16* %857, i64 -16
  %862 = bitcast i16* %861 to <16 x i16>*
  %863 = load <16 x i16>, <16 x i16>* %862, align 2, !tbaa !393
  %864 = add nsw i64 %835, %855
  %865 = getelementptr inbounds i16, i16* %read_input, i64 %864
  %866 = getelementptr inbounds i16, i16* %865, i64 -32
  %867 = bitcast i16* %866 to <16 x i16>*
  store <16 x i16> %860, <16 x i16>* %867, align 2, !tbaa !396
  %868 = getelementptr inbounds i16, i16* %865, i64 -16
  %869 = bitcast i16* %868 to <16 x i16>*
  store <16 x i16> %863, <16 x i16>* %869, align 2, !tbaa !396
  %indvars.iv.next3254.1 = or i64 %indvars.iv3253, 2
  %870 = add nuw nsw i64 %indvars.iv.next3254.1, %183
  %871 = shl nsw i64 %870, 5
  %872 = add nsw i64 %871, %184
  %873 = add nsw i64 %872, %620
  %874 = getelementptr inbounds i16, i16* %64, i64 %873
  %875 = getelementptr inbounds i16, i16* %874, i64 -32
  %876 = bitcast i16* %875 to <16 x i16>*
  %877 = load <16 x i16>, <16 x i16>* %876, align 2, !tbaa !393
  %878 = getelementptr inbounds i16, i16* %874, i64 -16
  %879 = bitcast i16* %878 to <16 x i16>*
  %880 = load <16 x i16>, <16 x i16>* %879, align 2, !tbaa !393
  %881 = add nsw i64 %835, %872
  %882 = getelementptr inbounds i16, i16* %read_input, i64 %881
  %883 = getelementptr inbounds i16, i16* %882, i64 -32
  %884 = bitcast i16* %883 to <16 x i16>*
  store <16 x i16> %877, <16 x i16>* %884, align 2, !tbaa !396
  %885 = getelementptr inbounds i16, i16* %882, i64 -16
  %886 = bitcast i16* %885 to <16 x i16>*
  store <16 x i16> %880, <16 x i16>* %886, align 2, !tbaa !396
  %indvars.iv.next3254.2 = or i64 %indvars.iv3253, 3
  %887 = add nuw nsw i64 %indvars.iv.next3254.2, %183
  %888 = shl nsw i64 %887, 5
  %889 = add nsw i64 %888, %184
  %890 = add nsw i64 %889, %620
  %891 = getelementptr inbounds i16, i16* %64, i64 %890
  %892 = getelementptr inbounds i16, i16* %891, i64 -32
  %893 = bitcast i16* %892 to <16 x i16>*
  %894 = load <16 x i16>, <16 x i16>* %893, align 2, !tbaa !393
  %895 = getelementptr inbounds i16, i16* %891, i64 -16
  %896 = bitcast i16* %895 to <16 x i16>*
  %897 = load <16 x i16>, <16 x i16>* %896, align 2, !tbaa !393
  %898 = add nsw i64 %835, %889
  %899 = getelementptr inbounds i16, i16* %read_input, i64 %898
  %900 = getelementptr inbounds i16, i16* %899, i64 -32
  %901 = bitcast i16* %900 to <16 x i16>*
  store <16 x i16> %894, <16 x i16>* %901, align 2, !tbaa !396
  %902 = getelementptr inbounds i16, i16* %899, i64 -16
  %903 = bitcast i16* %902 to <16 x i16>*
  store <16 x i16> %897, <16 x i16>* %903, align 2, !tbaa !396
  %indvars.iv.next3254.3 = add nuw nsw i64 %indvars.iv3253, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased"

"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa": ; preds = %"for read_input.s0.x.x.rebased", %"for read_input.s0.x.x.rebased.preheader"
  %indvars.iv3253.unr = phi i64 [ 0, %"for read_input.s0.x.x.rebased.preheader" ], [ %indvars.iv.next3254.3, %"for read_input.s0.x.x.rebased" ]
  br i1 %lcmp.mod.not, label %"end for read_input.s0.x.x.rebased", label %"for read_input.s0.x.x.rebased.epil"

"for read_input.s0.x.x.rebased.epil":             ; preds = %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased.epil"
  %indvars.iv3253.epil = phi i64 [ %indvars.iv.next3254.epil, %"for read_input.s0.x.x.rebased.epil" ], [ %indvars.iv3253.unr, %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa" ]
  %epil.iter = phi i64 [ %epil.iter.sub, %"for read_input.s0.x.x.rebased.epil" ], [ %xtraiter, %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa" ]
  %904 = add nuw nsw i64 %indvars.iv3253.epil, %183
  %905 = shl nsw i64 %904, 5
  %906 = add nsw i64 %905, %184
  %907 = add nsw i64 %906, %620
  %908 = getelementptr inbounds i16, i16* %64, i64 %907
  %909 = getelementptr inbounds i16, i16* %908, i64 -32
  %910 = bitcast i16* %909 to <16 x i16>*
  %911 = load <16 x i16>, <16 x i16>* %910, align 2, !tbaa !393
  %912 = getelementptr inbounds i16, i16* %908, i64 -16
  %913 = bitcast i16* %912 to <16 x i16>*
  %914 = load <16 x i16>, <16 x i16>* %913, align 2, !tbaa !393
  %915 = add nsw i64 %835, %906
  %916 = getelementptr inbounds i16, i16* %read_input, i64 %915
  %917 = getelementptr inbounds i16, i16* %916, i64 -32
  %918 = bitcast i16* %917 to <16 x i16>*
  store <16 x i16> %911, <16 x i16>* %918, align 2, !tbaa !396
  %919 = getelementptr inbounds i16, i16* %916, i64 -16
  %920 = bitcast i16* %919 to <16 x i16>*
  store <16 x i16> %914, <16 x i16>* %920, align 2, !tbaa !396
  %indvars.iv.next3254.epil = add nuw nsw i64 %indvars.iv3253.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %"end for read_input.s0.x.x.rebased", label %"for read_input.s0.x.x.rebased.epil", !llvm.loop !398

"end for read_input.s0.x.x.rebased":              ; preds = %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased.epil", %"end for read_input.s0.x.x5"
  br i1 %85, label %"for read_input.s0.x.x.rebased9.preheader", label %"end for read_input.s0.x.x.rebased10", !prof !386

"for read_input.s0.x.x.rebased9.preheader":       ; preds = %"end for read_input.s0.x.x.rebased"
  %921 = trunc i64 %620 to i32
  %922 = insertelement <32 x i32> undef, i32 %921, i32 0
  %923 = shufflevector <32 x i32> %922, <32 x i32> undef, <32 x i32> zeroinitializer
  %924 = add nuw nsw i64 %416, %indvars.iv3256
  %925 = mul nsw i64 %924, %82
  %926 = sub i64 %925, %83
  br label %"for read_input.s0.x.x.rebased9"

"for read_input.s0.x.x.rebased9":                 ; preds = %"for read_input.s0.x.x.rebased9.preheader", %"for read_input.s0.x.x.rebased9"
  %read_input.s0.x.x.rebased11 = phi i32 [ %1126, %"for read_input.s0.x.x.rebased9" ], [ 0, %"for read_input.s0.x.x.rebased9.preheader" ]
  %927 = add nsw i32 %read_input.s0.x.x.rebased11, %t1668
  %928 = shl nsw i32 %927, 5
  %a54 = add nsw i32 %928, %t1694
  %929 = icmp sgt i32 %b37, %a54
  %read_input.s0.x.v2.base.s12 = select i1 %929, i32 %a54, i32 %b37
  %930 = add nsw i32 %read_input.s0.x.v2.base.s12, -32
  %931 = insertelement <32 x i32> undef, i32 %930, i32 0
  %932 = shufflevector <32 x i32> %931, <32 x i32> undef, <32 x i32> zeroinitializer
  %a56 = add nsw <32 x i32> %932, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %933 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %934 = icmp sgt <8 x i32> %75, %933
  %935 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %936 = icmp sgt <8 x i32> %75, %935
  %937 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %938 = icmp sgt <8 x i32> %75, %937
  %939 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %940 = icmp sgt <8 x i32> %75, %939
  %941 = select <8 x i1> %934, <8 x i32> %933, <8 x i32> %75
  %942 = select <8 x i1> %936, <8 x i32> %935, <8 x i32> %75
  %943 = select <8 x i1> %938, <8 x i32> %937, <8 x i32> %75
  %944 = select <8 x i1> %940, <8 x i32> %939, <8 x i32> %75
  %945 = icmp sgt <8 x i32> %941, %77
  %946 = icmp sgt <8 x i32> %942, %77
  %947 = icmp sgt <8 x i32> %943, %77
  %948 = icmp sgt <8 x i32> %944, %77
  %949 = select <8 x i1> %945, <8 x i32> %941, <8 x i32> %77
  %950 = select <8 x i1> %946, <8 x i32> %942, <8 x i32> %77
  %951 = select <8 x i1> %947, <8 x i32> %943, <8 x i32> %77
  %952 = select <8 x i1> %948, <8 x i32> %944, <8 x i32> %77
  %953 = shufflevector <8 x i32> %949, <8 x i32> %950, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %954 = shufflevector <8 x i32> %951, <8 x i32> %952, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %955 = shufflevector <16 x i32> %953, <16 x i32> %954, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %956 = add nsw <32 x i32> %955, %923
  %957 = extractelement <32 x i32> %956, i32 0
  %958 = sext i32 %957 to i64
  %959 = getelementptr inbounds i16, i16* %64, i64 %958
  %960 = load i16, i16* %959, align 2, !tbaa !393
  %961 = insertelement <32 x i16> undef, i16 %960, i32 0
  %962 = extractelement <32 x i32> %956, i32 1
  %963 = sext i32 %962 to i64
  %964 = getelementptr inbounds i16, i16* %64, i64 %963
  %965 = load i16, i16* %964, align 2, !tbaa !393
  %966 = insertelement <32 x i16> %961, i16 %965, i32 1
  %967 = extractelement <32 x i32> %956, i32 2
  %968 = sext i32 %967 to i64
  %969 = getelementptr inbounds i16, i16* %64, i64 %968
  %970 = load i16, i16* %969, align 2, !tbaa !393
  %971 = insertelement <32 x i16> %966, i16 %970, i32 2
  %972 = extractelement <32 x i32> %956, i32 3
  %973 = sext i32 %972 to i64
  %974 = getelementptr inbounds i16, i16* %64, i64 %973
  %975 = load i16, i16* %974, align 2, !tbaa !393
  %976 = insertelement <32 x i16> %971, i16 %975, i32 3
  %977 = extractelement <32 x i32> %956, i32 4
  %978 = sext i32 %977 to i64
  %979 = getelementptr inbounds i16, i16* %64, i64 %978
  %980 = load i16, i16* %979, align 2, !tbaa !393
  %981 = insertelement <32 x i16> %976, i16 %980, i32 4
  %982 = extractelement <32 x i32> %956, i32 5
  %983 = sext i32 %982 to i64
  %984 = getelementptr inbounds i16, i16* %64, i64 %983
  %985 = load i16, i16* %984, align 2, !tbaa !393
  %986 = insertelement <32 x i16> %981, i16 %985, i32 5
  %987 = extractelement <32 x i32> %956, i32 6
  %988 = sext i32 %987 to i64
  %989 = getelementptr inbounds i16, i16* %64, i64 %988
  %990 = load i16, i16* %989, align 2, !tbaa !393
  %991 = insertelement <32 x i16> %986, i16 %990, i32 6
  %992 = extractelement <32 x i32> %956, i32 7
  %993 = sext i32 %992 to i64
  %994 = getelementptr inbounds i16, i16* %64, i64 %993
  %995 = load i16, i16* %994, align 2, !tbaa !393
  %996 = insertelement <32 x i16> %991, i16 %995, i32 7
  %997 = extractelement <32 x i32> %956, i32 8
  %998 = sext i32 %997 to i64
  %999 = getelementptr inbounds i16, i16* %64, i64 %998
  %1000 = load i16, i16* %999, align 2, !tbaa !393
  %1001 = insertelement <32 x i16> %996, i16 %1000, i32 8
  %1002 = extractelement <32 x i32> %956, i32 9
  %1003 = sext i32 %1002 to i64
  %1004 = getelementptr inbounds i16, i16* %64, i64 %1003
  %1005 = load i16, i16* %1004, align 2, !tbaa !393
  %1006 = insertelement <32 x i16> %1001, i16 %1005, i32 9
  %1007 = extractelement <32 x i32> %956, i32 10
  %1008 = sext i32 %1007 to i64
  %1009 = getelementptr inbounds i16, i16* %64, i64 %1008
  %1010 = load i16, i16* %1009, align 2, !tbaa !393
  %1011 = insertelement <32 x i16> %1006, i16 %1010, i32 10
  %1012 = extractelement <32 x i32> %956, i32 11
  %1013 = sext i32 %1012 to i64
  %1014 = getelementptr inbounds i16, i16* %64, i64 %1013
  %1015 = load i16, i16* %1014, align 2, !tbaa !393
  %1016 = insertelement <32 x i16> %1011, i16 %1015, i32 11
  %1017 = extractelement <32 x i32> %956, i32 12
  %1018 = sext i32 %1017 to i64
  %1019 = getelementptr inbounds i16, i16* %64, i64 %1018
  %1020 = load i16, i16* %1019, align 2, !tbaa !393
  %1021 = insertelement <32 x i16> %1016, i16 %1020, i32 12
  %1022 = extractelement <32 x i32> %956, i32 13
  %1023 = sext i32 %1022 to i64
  %1024 = getelementptr inbounds i16, i16* %64, i64 %1023
  %1025 = load i16, i16* %1024, align 2, !tbaa !393
  %1026 = insertelement <32 x i16> %1021, i16 %1025, i32 13
  %1027 = extractelement <32 x i32> %956, i32 14
  %1028 = sext i32 %1027 to i64
  %1029 = getelementptr inbounds i16, i16* %64, i64 %1028
  %1030 = load i16, i16* %1029, align 2, !tbaa !393
  %1031 = insertelement <32 x i16> %1026, i16 %1030, i32 14
  %1032 = extractelement <32 x i32> %956, i32 15
  %1033 = sext i32 %1032 to i64
  %1034 = getelementptr inbounds i16, i16* %64, i64 %1033
  %1035 = load i16, i16* %1034, align 2, !tbaa !393
  %1036 = insertelement <32 x i16> %1031, i16 %1035, i32 15
  %1037 = extractelement <32 x i32> %956, i32 16
  %1038 = sext i32 %1037 to i64
  %1039 = getelementptr inbounds i16, i16* %64, i64 %1038
  %1040 = load i16, i16* %1039, align 2, !tbaa !393
  %1041 = insertelement <32 x i16> %1036, i16 %1040, i32 16
  %1042 = extractelement <32 x i32> %956, i32 17
  %1043 = sext i32 %1042 to i64
  %1044 = getelementptr inbounds i16, i16* %64, i64 %1043
  %1045 = load i16, i16* %1044, align 2, !tbaa !393
  %1046 = insertelement <32 x i16> %1041, i16 %1045, i32 17
  %1047 = extractelement <32 x i32> %956, i32 18
  %1048 = sext i32 %1047 to i64
  %1049 = getelementptr inbounds i16, i16* %64, i64 %1048
  %1050 = load i16, i16* %1049, align 2, !tbaa !393
  %1051 = insertelement <32 x i16> %1046, i16 %1050, i32 18
  %1052 = extractelement <32 x i32> %956, i32 19
  %1053 = sext i32 %1052 to i64
  %1054 = getelementptr inbounds i16, i16* %64, i64 %1053
  %1055 = load i16, i16* %1054, align 2, !tbaa !393
  %1056 = insertelement <32 x i16> %1051, i16 %1055, i32 19
  %1057 = extractelement <32 x i32> %956, i32 20
  %1058 = sext i32 %1057 to i64
  %1059 = getelementptr inbounds i16, i16* %64, i64 %1058
  %1060 = load i16, i16* %1059, align 2, !tbaa !393
  %1061 = insertelement <32 x i16> %1056, i16 %1060, i32 20
  %1062 = extractelement <32 x i32> %956, i32 21
  %1063 = sext i32 %1062 to i64
  %1064 = getelementptr inbounds i16, i16* %64, i64 %1063
  %1065 = load i16, i16* %1064, align 2, !tbaa !393
  %1066 = insertelement <32 x i16> %1061, i16 %1065, i32 21
  %1067 = extractelement <32 x i32> %956, i32 22
  %1068 = sext i32 %1067 to i64
  %1069 = getelementptr inbounds i16, i16* %64, i64 %1068
  %1070 = load i16, i16* %1069, align 2, !tbaa !393
  %1071 = insertelement <32 x i16> %1066, i16 %1070, i32 22
  %1072 = extractelement <32 x i32> %956, i32 23
  %1073 = sext i32 %1072 to i64
  %1074 = getelementptr inbounds i16, i16* %64, i64 %1073
  %1075 = load i16, i16* %1074, align 2, !tbaa !393
  %1076 = insertelement <32 x i16> %1071, i16 %1075, i32 23
  %1077 = extractelement <32 x i32> %956, i32 24
  %1078 = sext i32 %1077 to i64
  %1079 = getelementptr inbounds i16, i16* %64, i64 %1078
  %1080 = load i16, i16* %1079, align 2, !tbaa !393
  %1081 = insertelement <32 x i16> %1076, i16 %1080, i32 24
  %1082 = extractelement <32 x i32> %956, i32 25
  %1083 = sext i32 %1082 to i64
  %1084 = getelementptr inbounds i16, i16* %64, i64 %1083
  %1085 = load i16, i16* %1084, align 2, !tbaa !393
  %1086 = insertelement <32 x i16> %1081, i16 %1085, i32 25
  %1087 = extractelement <32 x i32> %956, i32 26
  %1088 = sext i32 %1087 to i64
  %1089 = getelementptr inbounds i16, i16* %64, i64 %1088
  %1090 = load i16, i16* %1089, align 2, !tbaa !393
  %1091 = insertelement <32 x i16> %1086, i16 %1090, i32 26
  %1092 = extractelement <32 x i32> %956, i32 27
  %1093 = sext i32 %1092 to i64
  %1094 = getelementptr inbounds i16, i16* %64, i64 %1093
  %1095 = load i16, i16* %1094, align 2, !tbaa !393
  %1096 = insertelement <32 x i16> %1091, i16 %1095, i32 27
  %1097 = extractelement <32 x i32> %956, i32 28
  %1098 = sext i32 %1097 to i64
  %1099 = getelementptr inbounds i16, i16* %64, i64 %1098
  %1100 = load i16, i16* %1099, align 2, !tbaa !393
  %1101 = insertelement <32 x i16> %1096, i16 %1100, i32 28
  %1102 = extractelement <32 x i32> %956, i32 29
  %1103 = sext i32 %1102 to i64
  %1104 = getelementptr inbounds i16, i16* %64, i64 %1103
  %1105 = load i16, i16* %1104, align 2, !tbaa !393
  %1106 = insertelement <32 x i16> %1101, i16 %1105, i32 29
  %1107 = extractelement <32 x i32> %956, i32 30
  %1108 = sext i32 %1107 to i64
  %1109 = getelementptr inbounds i16, i16* %64, i64 %1108
  %1110 = load i16, i16* %1109, align 2, !tbaa !393
  %1111 = insertelement <32 x i16> %1106, i16 %1110, i32 30
  %1112 = extractelement <32 x i32> %956, i32 31
  %1113 = sext i32 %1112 to i64
  %1114 = getelementptr inbounds i16, i16* %64, i64 %1113
  %1115 = load i16, i16* %1114, align 2, !tbaa !393
  %1116 = insertelement <32 x i16> %1111, i16 %1115, i32 31
  %1117 = shufflevector <32 x i16> %1116, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1118 = sext i32 %read_input.s0.x.v2.base.s12 to i64
  %1119 = add nsw i64 %926, %1118
  %1120 = getelementptr inbounds i16, i16* %read_input, i64 %1119
  %1121 = getelementptr inbounds i16, i16* %1120, i64 -32
  %1122 = bitcast i16* %1121 to <16 x i16>*
  store <16 x i16> %1117, <16 x i16>* %1122, align 2, !tbaa !396
  %1123 = shufflevector <32 x i16> %1116, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1124 = getelementptr inbounds i16, i16* %1120, i64 -16
  %1125 = bitcast i16* %1124 to <16 x i16>*
  store <16 x i16> %1123, <16 x i16>* %1125, align 2, !tbaa !396
  %1126 = add nuw nsw i32 %read_input.s0.x.x.rebased11, 1
  %.not2817 = icmp eq i32 %1126, %t1705
  br i1 %.not2817, label %"end for read_input.s0.x.x.rebased10", label %"for read_input.s0.x.x.rebased9"

"end for read_input.s0.x.x.rebased10":            ; preds = %"for read_input.s0.x.x.rebased9", %"end for read_input.s0.x.x.rebased"
  %indvars.iv.next3257 = add nuw nsw i64 %indvars.iv3256, 1
  %.not2816 = icmp eq i64 %indvars.iv.next3257, %418
  br i1 %.not2816, label %"end for read_input.s0.y.rebased2", label %"for read_input.s0.y.rebased1"

"for read_input.s0.y.rebased13":                  ; preds = %"for read_input.s0.y.rebased13.preheader", %"end for read_input.s0.x.x17"
  %indvars.iv3259 = phi i64 [ 0, %"for read_input.s0.y.rebased13.preheader" ], [ %indvars.iv.next3260, %"end for read_input.s0.x.x17" ]
  %1127 = trunc i64 %indvars.iv3259 to i32
  %a65 = add nsw i32 %t1719, %1127
  %1128 = icmp sgt i32 %b36, %a65
  %a64 = select i1 %1128, i32 %a65, i32 %b36
  %1129 = icmp sgt i32 %a64, 0
  %1130 = select i1 %1129, i32 %a64, i32 0
  %1131 = mul nsw i32 %1130, %13
  %t1723 = sub nsw i32 %1131, %9
  %1132 = insertelement <32 x i32> undef, i32 %t1723, i32 0
  %1133 = shufflevector <32 x i32> %1132, <32 x i32> undef, <32 x i32> zeroinitializer
  %1134 = add nuw nsw i64 %632, %indvars.iv3259
  %1135 = mul nsw i64 %1134, %82
  %1136 = sub i64 %1135, %83
  br label %"for read_input.s0.x.x16"

"end for read_input.s0.y.rebased14":              ; preds = %"end for read_input.s0.x.x17", %"end for read_input.s0.y.rebased2"
  %1137 = load i64, i64* %.fca.1.gep2476, align 8, !tbaa !387
  %cmp.i2871 = icmp ult i64 %1137, %92
  %1138 = load i8*, i8** %.fca.0.gep2475, align 8, !tbaa !389
  br i1 %cmp.i2871, label %if.then.i2874, label %pseudostack_alloc.exit2887, !prof !390

if.then.i2874:                                    ; preds = %"end for read_input.s0.y.rebased14"
  %tobool1.not.i2873 = icmp ne i8* %1138, null
  %1139 = load i64, i64* %.fca.2.gep2477, align 8
  %cmp2.i2876 = icmp ugt i64 %1139, 16384
  %or.cond2958 = and i1 %tobool1.not.i2873, %cmp2.i2876
  br i1 %or.cond2958, label %if.then3.i2878, label %if.end.i2882

if.then3.i2878:                                   ; preds = %if.then.i2874
  call void @halide_free(i8* null, i8* nonnull %1138) #16
  %.pre3501 = load i64, i64* %.fca.2.gep2477, align 8, !tbaa !391
  br label %if.end.i2882

if.end.i2882:                                     ; preds = %if.then3.i2878, %if.then.i2874
  %1140 = phi i64 [ %.pre3501, %if.then3.i2878 ], [ %1139, %if.then.i2874 ]
  %add.i2880 = add i64 %1140, %92
  store i64 %add.i2880, i64* %.fca.2.gep2477, align 8, !tbaa !391
  %cmp7.i2881 = icmp ugt i64 %add.i2880, 16384
  br i1 %cmp7.i2881, label %if.then8.i2884, label %if.end11.i2886

if.then8.i2884:                                   ; preds = %if.end.i2882
  %call.i2883 = call i8* @halide_malloc(i8* null, i64 %92) #16
  br label %if.end11.i2886

if.end11.i2886:                                   ; preds = %if.then8.i2884, %if.end.i2882
  %storemerge.i2885 = phi i8* [ %call.i2883, %if.then8.i2884 ], [ null, %if.end.i2882 ]
  store i8* %storemerge.i2885, i8** %.fca.0.gep2475, align 8, !tbaa !389
  store i64 %92, i64* %.fca.1.gep2476, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2887

pseudostack_alloc.exit2887:                       ; preds = %"end for read_input.s0.y.rebased14", %if.end11.i2886
  %1141 = phi i8* [ %storemerge.i2885, %if.end11.i2886 ], [ %1138, %"end for read_input.s0.y.rebased14" ]
  %1142 = bitcast i8* %1141 to i16*
  %.not2735 = icmp eq i8* %1141, null
  br i1 %.not2735, label %then_bb21, label %"consume read_input", !prof !392

"for read_input.s0.x.x16":                        ; preds = %"for read_input.s0.y.rebased13", %"for read_input.s0.x.x16"
  %read_input.s0.x.x18 = phi i32 [ %1341, %"for read_input.s0.x.x16" ], [ 0, %"for read_input.s0.y.rebased13" ]
  %1143 = shl nsw i32 %read_input.s0.x.x18, 5
  %a66 = add nsw i32 %1143, %t1694
  %1144 = icmp sgt i32 %b37, %a66
  %read_input.s0.x.v2.base.s19 = select i1 %1144, i32 %a66, i32 %b37
  %1145 = add nsw i32 %read_input.s0.x.v2.base.s19, -32
  %1146 = insertelement <32 x i32> undef, i32 %1145, i32 0
  %1147 = shufflevector <32 x i32> %1146, <32 x i32> undef, <32 x i32> zeroinitializer
  %a68 = add nsw <32 x i32> %1147, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1148 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1149 = icmp sgt <8 x i32> %75, %1148
  %1150 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1151 = icmp sgt <8 x i32> %75, %1150
  %1152 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1153 = icmp sgt <8 x i32> %75, %1152
  %1154 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1155 = icmp sgt <8 x i32> %75, %1154
  %1156 = select <8 x i1> %1149, <8 x i32> %1148, <8 x i32> %75
  %1157 = select <8 x i1> %1151, <8 x i32> %1150, <8 x i32> %75
  %1158 = select <8 x i1> %1153, <8 x i32> %1152, <8 x i32> %75
  %1159 = select <8 x i1> %1155, <8 x i32> %1154, <8 x i32> %75
  %1160 = icmp sgt <8 x i32> %1156, %77
  %1161 = icmp sgt <8 x i32> %1157, %77
  %1162 = icmp sgt <8 x i32> %1158, %77
  %1163 = icmp sgt <8 x i32> %1159, %77
  %1164 = select <8 x i1> %1160, <8 x i32> %1156, <8 x i32> %77
  %1165 = select <8 x i1> %1161, <8 x i32> %1157, <8 x i32> %77
  %1166 = select <8 x i1> %1162, <8 x i32> %1158, <8 x i32> %77
  %1167 = select <8 x i1> %1163, <8 x i32> %1159, <8 x i32> %77
  %1168 = shufflevector <8 x i32> %1164, <8 x i32> %1165, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1169 = shufflevector <8 x i32> %1166, <8 x i32> %1167, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1170 = shufflevector <16 x i32> %1168, <16 x i32> %1169, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1171 = add nsw <32 x i32> %1170, %1133
  %1172 = extractelement <32 x i32> %1171, i32 0
  %1173 = sext i32 %1172 to i64
  %1174 = getelementptr inbounds i16, i16* %64, i64 %1173
  %1175 = load i16, i16* %1174, align 2, !tbaa !393
  %1176 = insertelement <32 x i16> undef, i16 %1175, i32 0
  %1177 = extractelement <32 x i32> %1171, i32 1
  %1178 = sext i32 %1177 to i64
  %1179 = getelementptr inbounds i16, i16* %64, i64 %1178
  %1180 = load i16, i16* %1179, align 2, !tbaa !393
  %1181 = insertelement <32 x i16> %1176, i16 %1180, i32 1
  %1182 = extractelement <32 x i32> %1171, i32 2
  %1183 = sext i32 %1182 to i64
  %1184 = getelementptr inbounds i16, i16* %64, i64 %1183
  %1185 = load i16, i16* %1184, align 2, !tbaa !393
  %1186 = insertelement <32 x i16> %1181, i16 %1185, i32 2
  %1187 = extractelement <32 x i32> %1171, i32 3
  %1188 = sext i32 %1187 to i64
  %1189 = getelementptr inbounds i16, i16* %64, i64 %1188
  %1190 = load i16, i16* %1189, align 2, !tbaa !393
  %1191 = insertelement <32 x i16> %1186, i16 %1190, i32 3
  %1192 = extractelement <32 x i32> %1171, i32 4
  %1193 = sext i32 %1192 to i64
  %1194 = getelementptr inbounds i16, i16* %64, i64 %1193
  %1195 = load i16, i16* %1194, align 2, !tbaa !393
  %1196 = insertelement <32 x i16> %1191, i16 %1195, i32 4
  %1197 = extractelement <32 x i32> %1171, i32 5
  %1198 = sext i32 %1197 to i64
  %1199 = getelementptr inbounds i16, i16* %64, i64 %1198
  %1200 = load i16, i16* %1199, align 2, !tbaa !393
  %1201 = insertelement <32 x i16> %1196, i16 %1200, i32 5
  %1202 = extractelement <32 x i32> %1171, i32 6
  %1203 = sext i32 %1202 to i64
  %1204 = getelementptr inbounds i16, i16* %64, i64 %1203
  %1205 = load i16, i16* %1204, align 2, !tbaa !393
  %1206 = insertelement <32 x i16> %1201, i16 %1205, i32 6
  %1207 = extractelement <32 x i32> %1171, i32 7
  %1208 = sext i32 %1207 to i64
  %1209 = getelementptr inbounds i16, i16* %64, i64 %1208
  %1210 = load i16, i16* %1209, align 2, !tbaa !393
  %1211 = insertelement <32 x i16> %1206, i16 %1210, i32 7
  %1212 = extractelement <32 x i32> %1171, i32 8
  %1213 = sext i32 %1212 to i64
  %1214 = getelementptr inbounds i16, i16* %64, i64 %1213
  %1215 = load i16, i16* %1214, align 2, !tbaa !393
  %1216 = insertelement <32 x i16> %1211, i16 %1215, i32 8
  %1217 = extractelement <32 x i32> %1171, i32 9
  %1218 = sext i32 %1217 to i64
  %1219 = getelementptr inbounds i16, i16* %64, i64 %1218
  %1220 = load i16, i16* %1219, align 2, !tbaa !393
  %1221 = insertelement <32 x i16> %1216, i16 %1220, i32 9
  %1222 = extractelement <32 x i32> %1171, i32 10
  %1223 = sext i32 %1222 to i64
  %1224 = getelementptr inbounds i16, i16* %64, i64 %1223
  %1225 = load i16, i16* %1224, align 2, !tbaa !393
  %1226 = insertelement <32 x i16> %1221, i16 %1225, i32 10
  %1227 = extractelement <32 x i32> %1171, i32 11
  %1228 = sext i32 %1227 to i64
  %1229 = getelementptr inbounds i16, i16* %64, i64 %1228
  %1230 = load i16, i16* %1229, align 2, !tbaa !393
  %1231 = insertelement <32 x i16> %1226, i16 %1230, i32 11
  %1232 = extractelement <32 x i32> %1171, i32 12
  %1233 = sext i32 %1232 to i64
  %1234 = getelementptr inbounds i16, i16* %64, i64 %1233
  %1235 = load i16, i16* %1234, align 2, !tbaa !393
  %1236 = insertelement <32 x i16> %1231, i16 %1235, i32 12
  %1237 = extractelement <32 x i32> %1171, i32 13
  %1238 = sext i32 %1237 to i64
  %1239 = getelementptr inbounds i16, i16* %64, i64 %1238
  %1240 = load i16, i16* %1239, align 2, !tbaa !393
  %1241 = insertelement <32 x i16> %1236, i16 %1240, i32 13
  %1242 = extractelement <32 x i32> %1171, i32 14
  %1243 = sext i32 %1242 to i64
  %1244 = getelementptr inbounds i16, i16* %64, i64 %1243
  %1245 = load i16, i16* %1244, align 2, !tbaa !393
  %1246 = insertelement <32 x i16> %1241, i16 %1245, i32 14
  %1247 = extractelement <32 x i32> %1171, i32 15
  %1248 = sext i32 %1247 to i64
  %1249 = getelementptr inbounds i16, i16* %64, i64 %1248
  %1250 = load i16, i16* %1249, align 2, !tbaa !393
  %1251 = insertelement <32 x i16> %1246, i16 %1250, i32 15
  %1252 = extractelement <32 x i32> %1171, i32 16
  %1253 = sext i32 %1252 to i64
  %1254 = getelementptr inbounds i16, i16* %64, i64 %1253
  %1255 = load i16, i16* %1254, align 2, !tbaa !393
  %1256 = insertelement <32 x i16> %1251, i16 %1255, i32 16
  %1257 = extractelement <32 x i32> %1171, i32 17
  %1258 = sext i32 %1257 to i64
  %1259 = getelementptr inbounds i16, i16* %64, i64 %1258
  %1260 = load i16, i16* %1259, align 2, !tbaa !393
  %1261 = insertelement <32 x i16> %1256, i16 %1260, i32 17
  %1262 = extractelement <32 x i32> %1171, i32 18
  %1263 = sext i32 %1262 to i64
  %1264 = getelementptr inbounds i16, i16* %64, i64 %1263
  %1265 = load i16, i16* %1264, align 2, !tbaa !393
  %1266 = insertelement <32 x i16> %1261, i16 %1265, i32 18
  %1267 = extractelement <32 x i32> %1171, i32 19
  %1268 = sext i32 %1267 to i64
  %1269 = getelementptr inbounds i16, i16* %64, i64 %1268
  %1270 = load i16, i16* %1269, align 2, !tbaa !393
  %1271 = insertelement <32 x i16> %1266, i16 %1270, i32 19
  %1272 = extractelement <32 x i32> %1171, i32 20
  %1273 = sext i32 %1272 to i64
  %1274 = getelementptr inbounds i16, i16* %64, i64 %1273
  %1275 = load i16, i16* %1274, align 2, !tbaa !393
  %1276 = insertelement <32 x i16> %1271, i16 %1275, i32 20
  %1277 = extractelement <32 x i32> %1171, i32 21
  %1278 = sext i32 %1277 to i64
  %1279 = getelementptr inbounds i16, i16* %64, i64 %1278
  %1280 = load i16, i16* %1279, align 2, !tbaa !393
  %1281 = insertelement <32 x i16> %1276, i16 %1280, i32 21
  %1282 = extractelement <32 x i32> %1171, i32 22
  %1283 = sext i32 %1282 to i64
  %1284 = getelementptr inbounds i16, i16* %64, i64 %1283
  %1285 = load i16, i16* %1284, align 2, !tbaa !393
  %1286 = insertelement <32 x i16> %1281, i16 %1285, i32 22
  %1287 = extractelement <32 x i32> %1171, i32 23
  %1288 = sext i32 %1287 to i64
  %1289 = getelementptr inbounds i16, i16* %64, i64 %1288
  %1290 = load i16, i16* %1289, align 2, !tbaa !393
  %1291 = insertelement <32 x i16> %1286, i16 %1290, i32 23
  %1292 = extractelement <32 x i32> %1171, i32 24
  %1293 = sext i32 %1292 to i64
  %1294 = getelementptr inbounds i16, i16* %64, i64 %1293
  %1295 = load i16, i16* %1294, align 2, !tbaa !393
  %1296 = insertelement <32 x i16> %1291, i16 %1295, i32 24
  %1297 = extractelement <32 x i32> %1171, i32 25
  %1298 = sext i32 %1297 to i64
  %1299 = getelementptr inbounds i16, i16* %64, i64 %1298
  %1300 = load i16, i16* %1299, align 2, !tbaa !393
  %1301 = insertelement <32 x i16> %1296, i16 %1300, i32 25
  %1302 = extractelement <32 x i32> %1171, i32 26
  %1303 = sext i32 %1302 to i64
  %1304 = getelementptr inbounds i16, i16* %64, i64 %1303
  %1305 = load i16, i16* %1304, align 2, !tbaa !393
  %1306 = insertelement <32 x i16> %1301, i16 %1305, i32 26
  %1307 = extractelement <32 x i32> %1171, i32 27
  %1308 = sext i32 %1307 to i64
  %1309 = getelementptr inbounds i16, i16* %64, i64 %1308
  %1310 = load i16, i16* %1309, align 2, !tbaa !393
  %1311 = insertelement <32 x i16> %1306, i16 %1310, i32 27
  %1312 = extractelement <32 x i32> %1171, i32 28
  %1313 = sext i32 %1312 to i64
  %1314 = getelementptr inbounds i16, i16* %64, i64 %1313
  %1315 = load i16, i16* %1314, align 2, !tbaa !393
  %1316 = insertelement <32 x i16> %1311, i16 %1315, i32 28
  %1317 = extractelement <32 x i32> %1171, i32 29
  %1318 = sext i32 %1317 to i64
  %1319 = getelementptr inbounds i16, i16* %64, i64 %1318
  %1320 = load i16, i16* %1319, align 2, !tbaa !393
  %1321 = insertelement <32 x i16> %1316, i16 %1320, i32 29
  %1322 = extractelement <32 x i32> %1171, i32 30
  %1323 = sext i32 %1322 to i64
  %1324 = getelementptr inbounds i16, i16* %64, i64 %1323
  %1325 = load i16, i16* %1324, align 2, !tbaa !393
  %1326 = insertelement <32 x i16> %1321, i16 %1325, i32 30
  %1327 = extractelement <32 x i32> %1171, i32 31
  %1328 = sext i32 %1327 to i64
  %1329 = getelementptr inbounds i16, i16* %64, i64 %1328
  %1330 = load i16, i16* %1329, align 2, !tbaa !393
  %1331 = insertelement <32 x i16> %1326, i16 %1330, i32 31
  %1332 = shufflevector <32 x i16> %1331, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1333 = sext i32 %read_input.s0.x.v2.base.s19 to i64
  %1334 = add nsw i64 %1136, %1333
  %1335 = getelementptr inbounds i16, i16* %read_input, i64 %1334
  %1336 = getelementptr inbounds i16, i16* %1335, i64 -32
  %1337 = bitcast i16* %1336 to <16 x i16>*
  store <16 x i16> %1332, <16 x i16>* %1337, align 2, !tbaa !396
  %1338 = shufflevector <32 x i16> %1331, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1339 = getelementptr inbounds i16, i16* %1335, i64 -16
  %1340 = bitcast i16* %1339 to <16 x i16>*
  store <16 x i16> %1338, <16 x i16>* %1340, align 2, !tbaa !396
  %1341 = add nuw nsw i32 %read_input.s0.x.x18, 1
  %.not2815 = icmp eq i32 %1341, %20
  br i1 %.not2815, label %"end for read_input.s0.x.x17", label %"for read_input.s0.x.x16"

"end for read_input.s0.x.x17":                    ; preds = %"for read_input.s0.x.x16"
  %indvars.iv.next3260 = add nuw nsw i64 %indvars.iv3259, 1
  %.not2814 = icmp eq i64 %indvars.iv3259, %633
  br i1 %.not2814, label %"end for read_input.s0.y.rebased14", label %"for read_input.s0.y.rebased13"

then_bb21:                                        ; preds = %pseudostack_alloc.exit2887
  %1342 = alloca i8*, i64 %92, align 32
  %1343 = bitcast i8** %1342 to i16*
  store i8** %1342, i8*** %93, align 8
  br label %"consume read_input"

"consume read_input":                             ; preds = %pseudostack_alloc.exit2887, %then_bb21
  %blur_x = phi i16* [ %1343, %then_bb21 ], [ %1142, %pseudostack_alloc.exit2887 ]
  br i1 %34, label %"produce blur_x", label %"consume read_input.after_bb22_crit_edge"

"consume read_input.after_bb22_crit_edge":        ; preds = %"consume read_input"
  %.pre3504 = and i32 %a26, 7
  br label %after_bb22

after_bb22:                                       ; preds = %"consume read_input.after_bb22_crit_edge", %"produce blur_x"
  %.pre-phi = phi i32 [ %.pre3504, %"consume read_input.after_bb22_crit_edge" ], [ %1408, %"produce blur_x" ]
  %1344 = mul nsw i32 %.pre-phi, %a73
  %t1726 = sub nsw i32 %1344, %t1689
  br i1 %100, label %"for blur_y.s0.x.x.rebased.preheader", label %"end for blur_y.s0.x.x.rebased", !prof !386

"for blur_y.s0.x.x.rebased.preheader":            ; preds = %after_bb22
  %1345 = sext i32 %t1726 to i64
  br label %"for blur_y.s0.x.x.rebased"

"produce blur_x":                                 ; preds = %"consume read_input"
  %1346 = getelementptr inbounds i16, i16* %read_input, i64 %94
  %1347 = getelementptr inbounds i16, i16* %1346, i64 -31
  %1348 = bitcast i16* %1347 to <16 x i16>*
  %1349 = load <16 x i16>, <16 x i16>* %1348, align 2, !tbaa !396
  %1350 = getelementptr inbounds i16, i16* %1346, i64 -15
  %1351 = bitcast i16* %1350 to <16 x i16>*
  %1352 = load <16 x i16>, <16 x i16>* %1351, align 2, !tbaa !396
  %1353 = getelementptr inbounds i16, i16* %1346, i64 -32
  %1354 = bitcast i16* %1353 to <16 x i16>*
  %1355 = load <16 x i16>, <16 x i16>* %1354, align 2, !tbaa !396
  %1356 = getelementptr inbounds i16, i16* %1346, i64 -16
  %1357 = bitcast i16* %1356 to <16 x i16>*
  %1358 = load <16 x i16>, <16 x i16>* %1357, align 2, !tbaa !396
  %1359 = getelementptr inbounds i16, i16* %1346, i64 -30
  %1360 = bitcast i16* %1359 to <16 x i16>*
  %1361 = load <16 x i16>, <16 x i16>* %1360, align 2, !tbaa !396
  %1362 = getelementptr inbounds i16, i16* %1346, i64 -14
  %1363 = bitcast i16* %1362 to <16 x i16>*
  %1364 = load <16 x i16>, <16 x i16>* %1363, align 2, !tbaa !396
  %1365 = getelementptr inbounds i16, i16* %1346, i64 -29
  %1366 = bitcast i16* %1365 to <16 x i16>*
  %1367 = load <16 x i16>, <16 x i16>* %1366, align 2, !tbaa !396
  %1368 = getelementptr inbounds i16, i16* %1346, i64 -13
  %1369 = bitcast i16* %1368 to <16 x i16>*
  %1370 = load <16 x i16>, <16 x i16>* %1369, align 2, !tbaa !396
  %1371 = getelementptr inbounds i16, i16* %1346, i64 -28
  %1372 = bitcast i16* %1371 to <16 x i16>*
  %1373 = load <16 x i16>, <16 x i16>* %1372, align 2, !tbaa !396
  %1374 = getelementptr inbounds i16, i16* %1346, i64 -12
  %1375 = bitcast i16* %1374 to <16 x i16>*
  %1376 = load <16 x i16>, <16 x i16>* %1375, align 2, !tbaa !396
  %1377 = getelementptr inbounds i16, i16* %1346, i64 -26
  %1378 = bitcast i16* %1377 to <16 x i16>*
  %1379 = load <16 x i16>, <16 x i16>* %1378, align 2, !tbaa !396
  %1380 = getelementptr inbounds i16, i16* %1346, i64 -10
  %1381 = bitcast i16* %1380 to <16 x i16>*
  %1382 = load <16 x i16>, <16 x i16>* %1381, align 2, !tbaa !396
  %1383 = getelementptr inbounds i16, i16* %1346, i64 -27
  %1384 = bitcast i16* %1383 to <16 x i16>*
  %1385 = load <16 x i16>, <16 x i16>* %1384, align 2, !tbaa !396
  %1386 = getelementptr inbounds i16, i16* %1346, i64 -11
  %1387 = bitcast i16* %1386 to <16 x i16>*
  %1388 = load <16 x i16>, <16 x i16>* %1387, align 2, !tbaa !396
  %1389 = add <16 x i16> %1355, %1349
  %1390 = add <16 x i16> %1389, %1361
  %1391 = add <16 x i16> %1390, %1367
  %1392 = add <16 x i16> %1391, %1373
  %1393 = add <16 x i16> %1392, %1379
  %1394 = add <16 x i16> %1393, %1385
  %1395 = add <16 x i16> %1358, %1352
  %1396 = add <16 x i16> %1395, %1364
  %1397 = add <16 x i16> %1396, %1370
  %1398 = add <16 x i16> %1397, %1376
  %1399 = add <16 x i16> %1398, %1382
  %1400 = add <16 x i16> %1399, %1388
  %1401 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1394, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1402 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1400, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1403 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1401, <16 x i16> %1394)
  %1404 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1402, <16 x i16> %1400)
  %1405 = shufflevector <16 x i16> %1403, <16 x i16> %1404, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1406 = lshr <32 x i16> %1405, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1407 = shufflevector <32 x i16> %1406, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1408 = and i32 %a26, 7
  %1409 = zext i32 %1408 to i64
  %1410 = mul nsw i64 %97, %1409
  %1411 = add nsw i64 %99, %1410
  %1412 = getelementptr inbounds i16, i16* %blur_x, i64 %1411
  %1413 = getelementptr inbounds i16, i16* %1412, i64 -32
  %1414 = bitcast i16* %1413 to <16 x i16>*
  store <16 x i16> %1407, <16 x i16>* %1414, align 2, !tbaa !399
  %1415 = shufflevector <32 x i16> %1406, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1416 = getelementptr inbounds i16, i16* %1412, i64 -16
  %1417 = bitcast i16* %1416 to <16 x i16>*
  store <16 x i16> %1415, <16 x i16>* %1417, align 2, !tbaa !399
  br label %after_bb22

"for blur_y.s0.x.x.rebased":                      ; preds = %"for blur_y.s0.x.x.rebased.preheader", %after_bb24
  %indvars.iv3261 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased.preheader" ], [ %indvars.iv.next3262, %after_bb24 ]
  %1418 = add nsw i64 %indvars.iv3261, %101
  %1419 = icmp slt i64 %1418, 1
  %1420 = trunc i64 %1418 to i32
  %1421 = shl nsw i32 %1420, 5
  %1422 = icmp sgt i32 %4, %1421
  %1423 = or i1 %1419, %1422
  br i1 %1423, label %"produce blur_x27", label %after_bb24

"end for blur_y.s0.x.x.rebased":                  ; preds = %after_bb24, %after_bb22
  br i1 %102, label %"for blur_y.s0.x.x.rebased28.preheader", label %"end for blur_y.s0.x.x.rebased29", !prof !386

"for blur_y.s0.x.x.rebased28.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased"
  %1424 = sext i32 %t1726 to i64
  br label %"for blur_y.s0.x.x.rebased28"

after_bb24:                                       ; preds = %"for blur_y.s0.x.x.rebased", %"produce blur_x27"
  %indvars.iv.next3262 = add nuw nsw i64 %indvars.iv3261, 1
  %.not2812 = icmp eq i64 %indvars.iv.next3262, %188
  br i1 %.not2812, label %"end for blur_y.s0.x.x.rebased", label %"for blur_y.s0.x.x.rebased"

"produce blur_x27":                               ; preds = %"for blur_y.s0.x.x.rebased"
  %t712 = sub i32 %1421, %t1689
  %1425 = sext i32 %t712 to i64
  %1426 = getelementptr inbounds i16, i16* %read_input, i64 %1425
  %1427 = getelementptr inbounds i16, i16* %1426, i64 1
  %1428 = bitcast i16* %1427 to <16 x i16>*
  %1429 = load <16 x i16>, <16 x i16>* %1428, align 2, !tbaa !396
  %1430 = getelementptr inbounds i16, i16* %1426, i64 17
  %1431 = bitcast i16* %1430 to <16 x i16>*
  %1432 = load <16 x i16>, <16 x i16>* %1431, align 2, !tbaa !396
  %1433 = bitcast i16* %1426 to <16 x i16>*
  %1434 = load <16 x i16>, <16 x i16>* %1433, align 2, !tbaa !396
  %1435 = getelementptr inbounds i16, i16* %1426, i64 16
  %1436 = bitcast i16* %1435 to <16 x i16>*
  %1437 = load <16 x i16>, <16 x i16>* %1436, align 2, !tbaa !396
  %1438 = getelementptr inbounds i16, i16* %1426, i64 2
  %1439 = bitcast i16* %1438 to <16 x i16>*
  %1440 = load <16 x i16>, <16 x i16>* %1439, align 2, !tbaa !396
  %1441 = getelementptr inbounds i16, i16* %1426, i64 18
  %1442 = bitcast i16* %1441 to <16 x i16>*
  %1443 = load <16 x i16>, <16 x i16>* %1442, align 2, !tbaa !396
  %1444 = getelementptr inbounds i16, i16* %1426, i64 3
  %1445 = bitcast i16* %1444 to <16 x i16>*
  %1446 = load <16 x i16>, <16 x i16>* %1445, align 2, !tbaa !396
  %1447 = getelementptr inbounds i16, i16* %1426, i64 19
  %1448 = bitcast i16* %1447 to <16 x i16>*
  %1449 = load <16 x i16>, <16 x i16>* %1448, align 2, !tbaa !396
  %1450 = getelementptr inbounds i16, i16* %1426, i64 4
  %1451 = bitcast i16* %1450 to <16 x i16>*
  %1452 = load <16 x i16>, <16 x i16>* %1451, align 2, !tbaa !396
  %1453 = getelementptr inbounds i16, i16* %1426, i64 20
  %1454 = bitcast i16* %1453 to <16 x i16>*
  %1455 = load <16 x i16>, <16 x i16>* %1454, align 2, !tbaa !396
  %1456 = getelementptr inbounds i16, i16* %1426, i64 6
  %1457 = bitcast i16* %1456 to <16 x i16>*
  %1458 = load <16 x i16>, <16 x i16>* %1457, align 2, !tbaa !396
  %1459 = getelementptr inbounds i16, i16* %1426, i64 22
  %1460 = bitcast i16* %1459 to <16 x i16>*
  %1461 = load <16 x i16>, <16 x i16>* %1460, align 2, !tbaa !396
  %1462 = getelementptr inbounds i16, i16* %1426, i64 5
  %1463 = bitcast i16* %1462 to <16 x i16>*
  %1464 = load <16 x i16>, <16 x i16>* %1463, align 2, !tbaa !396
  %1465 = getelementptr inbounds i16, i16* %1426, i64 21
  %1466 = bitcast i16* %1465 to <16 x i16>*
  %1467 = load <16 x i16>, <16 x i16>* %1466, align 2, !tbaa !396
  %1468 = add <16 x i16> %1434, %1429
  %1469 = add <16 x i16> %1468, %1440
  %1470 = add <16 x i16> %1469, %1446
  %1471 = add <16 x i16> %1470, %1452
  %1472 = add <16 x i16> %1471, %1458
  %1473 = add <16 x i16> %1472, %1464
  %1474 = add <16 x i16> %1437, %1432
  %1475 = add <16 x i16> %1474, %1443
  %1476 = add <16 x i16> %1475, %1449
  %1477 = add <16 x i16> %1476, %1455
  %1478 = add <16 x i16> %1477, %1461
  %1479 = add <16 x i16> %1478, %1467
  %1480 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1473, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1481 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1479, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1482 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1480, <16 x i16> %1473)
  %1483 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1481, <16 x i16> %1479)
  %1484 = shufflevector <16 x i16> %1482, <16 x i16> %1483, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1485 = lshr <32 x i16> %1484, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1486 = shufflevector <32 x i16> %1485, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1487 = shl nsw i64 %1418, 5
  %1488 = add nsw i64 %1487, %1345
  %1489 = getelementptr inbounds i16, i16* %blur_x, i64 %1488
  %1490 = bitcast i16* %1489 to <16 x i16>*
  store <16 x i16> %1486, <16 x i16>* %1490, align 2, !tbaa !399
  %1491 = shufflevector <32 x i16> %1485, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1492 = getelementptr inbounds i16, i16* %1489, i64 16
  %1493 = bitcast i16* %1492 to <16 x i16>*
  store <16 x i16> %1491, <16 x i16>* %1493, align 2, !tbaa !399
  br label %after_bb24

"for blur_y.s0.x.x.rebased28":                    ; preds = %"for blur_y.s0.x.x.rebased28.preheader", %after_bb31
  %blur_y.s0.x.x.rebased30 = phi i32 [ %1498, %after_bb31 ], [ 0, %"for blur_y.s0.x.x.rebased28.preheader" ]
  %t2275 = add nsw i32 %blur_y.s0.x.x.rebased30, %t1670
  %1494 = icmp slt i32 %t2275, 1
  %1495 = shl nsw i32 %t2275, 5
  %1496 = icmp sgt i32 %4, %1495
  %1497 = or i1 %1494, %1496
  br i1 %1497, label %then_bb32, label %after_bb31

"end for blur_y.s0.x.x.rebased29":                ; preds = %after_bb31, %"end for blur_y.s0.x.x.rebased"
  br i1 %34, label %"produce blur_x38", label %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge"

"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased29"
  %.pre3505 = add nsw i32 %a26, 1
  %.pre3507 = and i32 %.pre3505, 7
  br label %after_bb35

after_bb31:                                       ; preds = %"for blur_y.s0.x.x.rebased28", %then_bb32
  %1498 = add nuw nsw i32 %blur_y.s0.x.x.rebased30, 1
  %.not2811 = icmp eq i32 %1498, %t1727
  br i1 %.not2811, label %"end for blur_y.s0.x.x.rebased29", label %"for blur_y.s0.x.x.rebased28"

then_bb32:                                        ; preds = %"for blur_y.s0.x.x.rebased28"
  %1499 = icmp sgt i32 %a14, %1495
  %b83 = select i1 %1499, i32 %1495, i32 %a14
  %1500 = icmp slt i32 %b83, %4
  %blur_x.s0.x.v1.base.s = select i1 %1500, i32 %b83, i32 %4
  %t714 = sub i32 %blur_x.s0.x.v1.base.s, %t1689
  %1501 = sext i32 %t714 to i64
  %1502 = getelementptr inbounds i16, i16* %read_input, i64 %1501
  %1503 = getelementptr inbounds i16, i16* %1502, i64 1
  %1504 = bitcast i16* %1503 to <16 x i16>*
  %1505 = load <16 x i16>, <16 x i16>* %1504, align 2, !tbaa !396
  %1506 = getelementptr inbounds i16, i16* %1502, i64 17
  %1507 = bitcast i16* %1506 to <16 x i16>*
  %1508 = load <16 x i16>, <16 x i16>* %1507, align 2, !tbaa !396
  %1509 = bitcast i16* %1502 to <16 x i16>*
  %1510 = load <16 x i16>, <16 x i16>* %1509, align 2, !tbaa !396
  %1511 = getelementptr inbounds i16, i16* %1502, i64 16
  %1512 = bitcast i16* %1511 to <16 x i16>*
  %1513 = load <16 x i16>, <16 x i16>* %1512, align 2, !tbaa !396
  %1514 = getelementptr inbounds i16, i16* %1502, i64 2
  %1515 = bitcast i16* %1514 to <16 x i16>*
  %1516 = load <16 x i16>, <16 x i16>* %1515, align 2, !tbaa !396
  %1517 = getelementptr inbounds i16, i16* %1502, i64 18
  %1518 = bitcast i16* %1517 to <16 x i16>*
  %1519 = load <16 x i16>, <16 x i16>* %1518, align 2, !tbaa !396
  %1520 = getelementptr inbounds i16, i16* %1502, i64 3
  %1521 = bitcast i16* %1520 to <16 x i16>*
  %1522 = load <16 x i16>, <16 x i16>* %1521, align 2, !tbaa !396
  %1523 = getelementptr inbounds i16, i16* %1502, i64 19
  %1524 = bitcast i16* %1523 to <16 x i16>*
  %1525 = load <16 x i16>, <16 x i16>* %1524, align 2, !tbaa !396
  %1526 = getelementptr inbounds i16, i16* %1502, i64 4
  %1527 = bitcast i16* %1526 to <16 x i16>*
  %1528 = load <16 x i16>, <16 x i16>* %1527, align 2, !tbaa !396
  %1529 = getelementptr inbounds i16, i16* %1502, i64 20
  %1530 = bitcast i16* %1529 to <16 x i16>*
  %1531 = load <16 x i16>, <16 x i16>* %1530, align 2, !tbaa !396
  %1532 = getelementptr inbounds i16, i16* %1502, i64 6
  %1533 = bitcast i16* %1532 to <16 x i16>*
  %1534 = load <16 x i16>, <16 x i16>* %1533, align 2, !tbaa !396
  %1535 = getelementptr inbounds i16, i16* %1502, i64 22
  %1536 = bitcast i16* %1535 to <16 x i16>*
  %1537 = load <16 x i16>, <16 x i16>* %1536, align 2, !tbaa !396
  %1538 = getelementptr inbounds i16, i16* %1502, i64 5
  %1539 = bitcast i16* %1538 to <16 x i16>*
  %1540 = load <16 x i16>, <16 x i16>* %1539, align 2, !tbaa !396
  %1541 = getelementptr inbounds i16, i16* %1502, i64 21
  %1542 = bitcast i16* %1541 to <16 x i16>*
  %1543 = load <16 x i16>, <16 x i16>* %1542, align 2, !tbaa !396
  %1544 = add <16 x i16> %1510, %1505
  %1545 = add <16 x i16> %1544, %1516
  %1546 = add <16 x i16> %1545, %1522
  %1547 = add <16 x i16> %1546, %1528
  %1548 = add <16 x i16> %1547, %1534
  %1549 = add <16 x i16> %1548, %1540
  %1550 = add <16 x i16> %1513, %1508
  %1551 = add <16 x i16> %1550, %1519
  %1552 = add <16 x i16> %1551, %1525
  %1553 = add <16 x i16> %1552, %1531
  %1554 = add <16 x i16> %1553, %1537
  %1555 = add <16 x i16> %1554, %1543
  %1556 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1549, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1557 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1555, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1558 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1556, <16 x i16> %1549)
  %1559 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1557, <16 x i16> %1555)
  %1560 = shufflevector <16 x i16> %1558, <16 x i16> %1559, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1561 = lshr <32 x i16> %1560, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1562 = shufflevector <32 x i16> %1561, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1563 = sext i32 %blur_x.s0.x.v1.base.s to i64
  %1564 = add nsw i64 %1563, %1424
  %1565 = getelementptr inbounds i16, i16* %blur_x, i64 %1564
  %1566 = bitcast i16* %1565 to <16 x i16>*
  store <16 x i16> %1562, <16 x i16>* %1566, align 2, !tbaa !399
  %1567 = shufflevector <32 x i16> %1561, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1568 = getelementptr inbounds i16, i16* %1565, i64 16
  %1569 = bitcast i16* %1568 to <16 x i16>*
  store <16 x i16> %1567, <16 x i16>* %1569, align 2, !tbaa !399
  br label %after_bb31

after_bb35:                                       ; preds = %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge", %"produce blur_x38"
  %.pre-phi3508 = phi i32 [ %.pre3507, %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge" ], [ %1635, %"produce blur_x38" ]
  %1570 = mul nsw i32 %.pre-phi3508, %a73
  %t1732 = sub nsw i32 %1570, %t1689
  br i1 %100, label %"for blur_y.s0.x.x.rebased39.preheader", label %"end for blur_y.s0.x.x.rebased40", !prof !386

"for blur_y.s0.x.x.rebased39.preheader":          ; preds = %after_bb35
  %1571 = sext i32 %t1732 to i64
  br label %"for blur_y.s0.x.x.rebased39"

"produce blur_x38":                               ; preds = %"end for blur_y.s0.x.x.rebased29"
  %1572 = getelementptr inbounds i16, i16* %read_input, i64 %103
  %1573 = getelementptr inbounds i16, i16* %1572, i64 -31
  %1574 = bitcast i16* %1573 to <16 x i16>*
  %1575 = load <16 x i16>, <16 x i16>* %1574, align 2, !tbaa !396
  %1576 = getelementptr inbounds i16, i16* %1572, i64 -15
  %1577 = bitcast i16* %1576 to <16 x i16>*
  %1578 = load <16 x i16>, <16 x i16>* %1577, align 2, !tbaa !396
  %1579 = getelementptr inbounds i16, i16* %1572, i64 -32
  %1580 = bitcast i16* %1579 to <16 x i16>*
  %1581 = load <16 x i16>, <16 x i16>* %1580, align 2, !tbaa !396
  %1582 = getelementptr inbounds i16, i16* %1572, i64 -16
  %1583 = bitcast i16* %1582 to <16 x i16>*
  %1584 = load <16 x i16>, <16 x i16>* %1583, align 2, !tbaa !396
  %1585 = getelementptr inbounds i16, i16* %1572, i64 -30
  %1586 = bitcast i16* %1585 to <16 x i16>*
  %1587 = load <16 x i16>, <16 x i16>* %1586, align 2, !tbaa !396
  %1588 = getelementptr inbounds i16, i16* %1572, i64 -14
  %1589 = bitcast i16* %1588 to <16 x i16>*
  %1590 = load <16 x i16>, <16 x i16>* %1589, align 2, !tbaa !396
  %1591 = getelementptr inbounds i16, i16* %1572, i64 -29
  %1592 = bitcast i16* %1591 to <16 x i16>*
  %1593 = load <16 x i16>, <16 x i16>* %1592, align 2, !tbaa !396
  %1594 = getelementptr inbounds i16, i16* %1572, i64 -13
  %1595 = bitcast i16* %1594 to <16 x i16>*
  %1596 = load <16 x i16>, <16 x i16>* %1595, align 2, !tbaa !396
  %1597 = getelementptr inbounds i16, i16* %1572, i64 -28
  %1598 = bitcast i16* %1597 to <16 x i16>*
  %1599 = load <16 x i16>, <16 x i16>* %1598, align 2, !tbaa !396
  %1600 = getelementptr inbounds i16, i16* %1572, i64 -12
  %1601 = bitcast i16* %1600 to <16 x i16>*
  %1602 = load <16 x i16>, <16 x i16>* %1601, align 2, !tbaa !396
  %1603 = getelementptr inbounds i16, i16* %1572, i64 -26
  %1604 = bitcast i16* %1603 to <16 x i16>*
  %1605 = load <16 x i16>, <16 x i16>* %1604, align 2, !tbaa !396
  %1606 = getelementptr inbounds i16, i16* %1572, i64 -10
  %1607 = bitcast i16* %1606 to <16 x i16>*
  %1608 = load <16 x i16>, <16 x i16>* %1607, align 2, !tbaa !396
  %1609 = getelementptr inbounds i16, i16* %1572, i64 -27
  %1610 = bitcast i16* %1609 to <16 x i16>*
  %1611 = load <16 x i16>, <16 x i16>* %1610, align 2, !tbaa !396
  %1612 = getelementptr inbounds i16, i16* %1572, i64 -11
  %1613 = bitcast i16* %1612 to <16 x i16>*
  %1614 = load <16 x i16>, <16 x i16>* %1613, align 2, !tbaa !396
  %1615 = add <16 x i16> %1581, %1575
  %1616 = add <16 x i16> %1615, %1587
  %1617 = add <16 x i16> %1616, %1593
  %1618 = add <16 x i16> %1617, %1599
  %1619 = add <16 x i16> %1618, %1605
  %1620 = add <16 x i16> %1619, %1611
  %1621 = add <16 x i16> %1584, %1578
  %1622 = add <16 x i16> %1621, %1590
  %1623 = add <16 x i16> %1622, %1596
  %1624 = add <16 x i16> %1623, %1602
  %1625 = add <16 x i16> %1624, %1608
  %1626 = add <16 x i16> %1625, %1614
  %1627 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1620, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1628 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1626, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1629 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1627, <16 x i16> %1620)
  %1630 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1628, <16 x i16> %1626)
  %1631 = shufflevector <16 x i16> %1629, <16 x i16> %1630, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1632 = lshr <32 x i16> %1631, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1633 = shufflevector <32 x i16> %1632, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1634 = add nsw i32 %a26, 1
  %1635 = and i32 %1634, 7
  %1636 = zext i32 %1635 to i64
  %1637 = mul nsw i64 %97, %1636
  %1638 = add nsw i64 %99, %1637
  %1639 = getelementptr inbounds i16, i16* %blur_x, i64 %1638
  %1640 = getelementptr inbounds i16, i16* %1639, i64 -32
  %1641 = bitcast i16* %1640 to <16 x i16>*
  store <16 x i16> %1633, <16 x i16>* %1641, align 2, !tbaa !399
  %1642 = shufflevector <32 x i16> %1632, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1643 = getelementptr inbounds i16, i16* %1639, i64 -16
  %1644 = bitcast i16* %1643 to <16 x i16>*
  store <16 x i16> %1642, <16 x i16>* %1644, align 2, !tbaa !399
  br label %after_bb35

"for blur_y.s0.x.x.rebased39":                    ; preds = %"for blur_y.s0.x.x.rebased39.preheader", %after_bb42
  %indvars.iv3264 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased39.preheader" ], [ %indvars.iv.next3265, %after_bb42 ]
  %1645 = add nsw i64 %indvars.iv3264, %101
  %1646 = icmp slt i64 %1645, 1
  %1647 = trunc i64 %1645 to i32
  %1648 = shl nsw i32 %1647, 5
  %1649 = icmp sgt i32 %4, %1648
  %1650 = or i1 %1646, %1649
  br i1 %1650, label %"produce blur_x45", label %after_bb42

"end for blur_y.s0.x.x.rebased40":                ; preds = %after_bb42, %after_bb35
  br i1 %102, label %"for blur_y.s0.x.x.rebased46.preheader", label %"end for blur_y.s0.x.x.rebased47", !prof !386

"for blur_y.s0.x.x.rebased46.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased40"
  %1651 = sext i32 %t1732 to i64
  br label %"for blur_y.s0.x.x.rebased46"

after_bb42:                                       ; preds = %"for blur_y.s0.x.x.rebased39", %"produce blur_x45"
  %indvars.iv.next3265 = add nuw nsw i64 %indvars.iv3264, 1
  %.not2810 = icmp eq i64 %indvars.iv.next3265, %188
  br i1 %.not2810, label %"end for blur_y.s0.x.x.rebased40", label %"for blur_y.s0.x.x.rebased39"

"produce blur_x45":                               ; preds = %"for blur_y.s0.x.x.rebased39"
  %t718 = add nsw i32 %1648, %t1731
  %1652 = sext i32 %t718 to i64
  %1653 = getelementptr inbounds i16, i16* %read_input, i64 %1652
  %1654 = getelementptr inbounds i16, i16* %1653, i64 1
  %1655 = bitcast i16* %1654 to <16 x i16>*
  %1656 = load <16 x i16>, <16 x i16>* %1655, align 2, !tbaa !396
  %1657 = getelementptr inbounds i16, i16* %1653, i64 17
  %1658 = bitcast i16* %1657 to <16 x i16>*
  %1659 = load <16 x i16>, <16 x i16>* %1658, align 2, !tbaa !396
  %1660 = bitcast i16* %1653 to <16 x i16>*
  %1661 = load <16 x i16>, <16 x i16>* %1660, align 2, !tbaa !396
  %1662 = getelementptr inbounds i16, i16* %1653, i64 16
  %1663 = bitcast i16* %1662 to <16 x i16>*
  %1664 = load <16 x i16>, <16 x i16>* %1663, align 2, !tbaa !396
  %1665 = getelementptr inbounds i16, i16* %1653, i64 2
  %1666 = bitcast i16* %1665 to <16 x i16>*
  %1667 = load <16 x i16>, <16 x i16>* %1666, align 2, !tbaa !396
  %1668 = getelementptr inbounds i16, i16* %1653, i64 18
  %1669 = bitcast i16* %1668 to <16 x i16>*
  %1670 = load <16 x i16>, <16 x i16>* %1669, align 2, !tbaa !396
  %1671 = getelementptr inbounds i16, i16* %1653, i64 3
  %1672 = bitcast i16* %1671 to <16 x i16>*
  %1673 = load <16 x i16>, <16 x i16>* %1672, align 2, !tbaa !396
  %1674 = getelementptr inbounds i16, i16* %1653, i64 19
  %1675 = bitcast i16* %1674 to <16 x i16>*
  %1676 = load <16 x i16>, <16 x i16>* %1675, align 2, !tbaa !396
  %1677 = getelementptr inbounds i16, i16* %1653, i64 4
  %1678 = bitcast i16* %1677 to <16 x i16>*
  %1679 = load <16 x i16>, <16 x i16>* %1678, align 2, !tbaa !396
  %1680 = getelementptr inbounds i16, i16* %1653, i64 20
  %1681 = bitcast i16* %1680 to <16 x i16>*
  %1682 = load <16 x i16>, <16 x i16>* %1681, align 2, !tbaa !396
  %1683 = getelementptr inbounds i16, i16* %1653, i64 6
  %1684 = bitcast i16* %1683 to <16 x i16>*
  %1685 = load <16 x i16>, <16 x i16>* %1684, align 2, !tbaa !396
  %1686 = getelementptr inbounds i16, i16* %1653, i64 22
  %1687 = bitcast i16* %1686 to <16 x i16>*
  %1688 = load <16 x i16>, <16 x i16>* %1687, align 2, !tbaa !396
  %1689 = getelementptr inbounds i16, i16* %1653, i64 5
  %1690 = bitcast i16* %1689 to <16 x i16>*
  %1691 = load <16 x i16>, <16 x i16>* %1690, align 2, !tbaa !396
  %1692 = getelementptr inbounds i16, i16* %1653, i64 21
  %1693 = bitcast i16* %1692 to <16 x i16>*
  %1694 = load <16 x i16>, <16 x i16>* %1693, align 2, !tbaa !396
  %1695 = add <16 x i16> %1661, %1656
  %1696 = add <16 x i16> %1695, %1667
  %1697 = add <16 x i16> %1696, %1673
  %1698 = add <16 x i16> %1697, %1679
  %1699 = add <16 x i16> %1698, %1685
  %1700 = add <16 x i16> %1699, %1691
  %1701 = add <16 x i16> %1664, %1659
  %1702 = add <16 x i16> %1701, %1670
  %1703 = add <16 x i16> %1702, %1676
  %1704 = add <16 x i16> %1703, %1682
  %1705 = add <16 x i16> %1704, %1688
  %1706 = add <16 x i16> %1705, %1694
  %1707 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1700, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1708 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1706, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1709 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1707, <16 x i16> %1700)
  %1710 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1708, <16 x i16> %1706)
  %1711 = shufflevector <16 x i16> %1709, <16 x i16> %1710, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1712 = lshr <32 x i16> %1711, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1713 = shufflevector <32 x i16> %1712, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1714 = shl nsw i64 %1645, 5
  %1715 = add nsw i64 %1714, %1571
  %1716 = getelementptr inbounds i16, i16* %blur_x, i64 %1715
  %1717 = bitcast i16* %1716 to <16 x i16>*
  store <16 x i16> %1713, <16 x i16>* %1717, align 2, !tbaa !399
  %1718 = shufflevector <32 x i16> %1712, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1719 = getelementptr inbounds i16, i16* %1716, i64 16
  %1720 = bitcast i16* %1719 to <16 x i16>*
  store <16 x i16> %1718, <16 x i16>* %1720, align 2, !tbaa !399
  br label %after_bb42

"for blur_y.s0.x.x.rebased46":                    ; preds = %"for blur_y.s0.x.x.rebased46.preheader", %after_bb49
  %blur_y.s0.x.x.rebased48 = phi i32 [ %1725, %after_bb49 ], [ 0, %"for blur_y.s0.x.x.rebased46.preheader" ]
  %t2277 = add nsw i32 %blur_y.s0.x.x.rebased48, %t1670
  %1721 = icmp slt i32 %t2277, 1
  %1722 = shl nsw i32 %t2277, 5
  %1723 = icmp sgt i32 %4, %1722
  %1724 = or i1 %1721, %1723
  br i1 %1724, label %then_bb50, label %after_bb49

"end for blur_y.s0.x.x.rebased47":                ; preds = %after_bb49, %"end for blur_y.s0.x.x.rebased40"
  br i1 %34, label %"produce blur_x57", label %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge"

"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased47"
  %.pre3509 = add nsw i32 %a26, 2
  %.pre3511 = and i32 %.pre3509, 7
  br label %after_bb54

after_bb49:                                       ; preds = %"for blur_y.s0.x.x.rebased46", %then_bb50
  %1725 = add nuw nsw i32 %blur_y.s0.x.x.rebased48, 1
  %.not2809 = icmp eq i32 %1725, %t1727
  br i1 %.not2809, label %"end for blur_y.s0.x.x.rebased47", label %"for blur_y.s0.x.x.rebased46"

then_bb50:                                        ; preds = %"for blur_y.s0.x.x.rebased46"
  %1726 = icmp sgt i32 %a14, %1722
  %b90 = select i1 %1726, i32 %1722, i32 %a14
  %1727 = icmp slt i32 %b90, %4
  %blur_x.s0.x.v1.base.s53 = select i1 %1727, i32 %b90, i32 %4
  %t720 = add nsw i32 %blur_x.s0.x.v1.base.s53, %t1731
  %1728 = sext i32 %t720 to i64
  %1729 = getelementptr inbounds i16, i16* %read_input, i64 %1728
  %1730 = getelementptr inbounds i16, i16* %1729, i64 1
  %1731 = bitcast i16* %1730 to <16 x i16>*
  %1732 = load <16 x i16>, <16 x i16>* %1731, align 2, !tbaa !396
  %1733 = getelementptr inbounds i16, i16* %1729, i64 17
  %1734 = bitcast i16* %1733 to <16 x i16>*
  %1735 = load <16 x i16>, <16 x i16>* %1734, align 2, !tbaa !396
  %1736 = bitcast i16* %1729 to <16 x i16>*
  %1737 = load <16 x i16>, <16 x i16>* %1736, align 2, !tbaa !396
  %1738 = getelementptr inbounds i16, i16* %1729, i64 16
  %1739 = bitcast i16* %1738 to <16 x i16>*
  %1740 = load <16 x i16>, <16 x i16>* %1739, align 2, !tbaa !396
  %1741 = getelementptr inbounds i16, i16* %1729, i64 2
  %1742 = bitcast i16* %1741 to <16 x i16>*
  %1743 = load <16 x i16>, <16 x i16>* %1742, align 2, !tbaa !396
  %1744 = getelementptr inbounds i16, i16* %1729, i64 18
  %1745 = bitcast i16* %1744 to <16 x i16>*
  %1746 = load <16 x i16>, <16 x i16>* %1745, align 2, !tbaa !396
  %1747 = getelementptr inbounds i16, i16* %1729, i64 3
  %1748 = bitcast i16* %1747 to <16 x i16>*
  %1749 = load <16 x i16>, <16 x i16>* %1748, align 2, !tbaa !396
  %1750 = getelementptr inbounds i16, i16* %1729, i64 19
  %1751 = bitcast i16* %1750 to <16 x i16>*
  %1752 = load <16 x i16>, <16 x i16>* %1751, align 2, !tbaa !396
  %1753 = getelementptr inbounds i16, i16* %1729, i64 4
  %1754 = bitcast i16* %1753 to <16 x i16>*
  %1755 = load <16 x i16>, <16 x i16>* %1754, align 2, !tbaa !396
  %1756 = getelementptr inbounds i16, i16* %1729, i64 20
  %1757 = bitcast i16* %1756 to <16 x i16>*
  %1758 = load <16 x i16>, <16 x i16>* %1757, align 2, !tbaa !396
  %1759 = getelementptr inbounds i16, i16* %1729, i64 6
  %1760 = bitcast i16* %1759 to <16 x i16>*
  %1761 = load <16 x i16>, <16 x i16>* %1760, align 2, !tbaa !396
  %1762 = getelementptr inbounds i16, i16* %1729, i64 22
  %1763 = bitcast i16* %1762 to <16 x i16>*
  %1764 = load <16 x i16>, <16 x i16>* %1763, align 2, !tbaa !396
  %1765 = getelementptr inbounds i16, i16* %1729, i64 5
  %1766 = bitcast i16* %1765 to <16 x i16>*
  %1767 = load <16 x i16>, <16 x i16>* %1766, align 2, !tbaa !396
  %1768 = getelementptr inbounds i16, i16* %1729, i64 21
  %1769 = bitcast i16* %1768 to <16 x i16>*
  %1770 = load <16 x i16>, <16 x i16>* %1769, align 2, !tbaa !396
  %1771 = add <16 x i16> %1737, %1732
  %1772 = add <16 x i16> %1771, %1743
  %1773 = add <16 x i16> %1772, %1749
  %1774 = add <16 x i16> %1773, %1755
  %1775 = add <16 x i16> %1774, %1761
  %1776 = add <16 x i16> %1775, %1767
  %1777 = add <16 x i16> %1740, %1735
  %1778 = add <16 x i16> %1777, %1746
  %1779 = add <16 x i16> %1778, %1752
  %1780 = add <16 x i16> %1779, %1758
  %1781 = add <16 x i16> %1780, %1764
  %1782 = add <16 x i16> %1781, %1770
  %1783 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1776, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1784 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1782, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1785 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1783, <16 x i16> %1776)
  %1786 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1784, <16 x i16> %1782)
  %1787 = shufflevector <16 x i16> %1785, <16 x i16> %1786, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1788 = lshr <32 x i16> %1787, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1789 = shufflevector <32 x i16> %1788, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1790 = sext i32 %blur_x.s0.x.v1.base.s53 to i64
  %1791 = add nsw i64 %1790, %1651
  %1792 = getelementptr inbounds i16, i16* %blur_x, i64 %1791
  %1793 = bitcast i16* %1792 to <16 x i16>*
  store <16 x i16> %1789, <16 x i16>* %1793, align 2, !tbaa !399
  %1794 = shufflevector <32 x i16> %1788, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1795 = getelementptr inbounds i16, i16* %1792, i64 16
  %1796 = bitcast i16* %1795 to <16 x i16>*
  store <16 x i16> %1794, <16 x i16>* %1796, align 2, !tbaa !399
  br label %after_bb49

after_bb54:                                       ; preds = %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge", %"produce blur_x57"
  %.pre-phi3512 = phi i32 [ %.pre3511, %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge" ], [ %1862, %"produce blur_x57" ]
  %1797 = mul nsw i32 %.pre-phi3512, %a73
  %t1738 = sub nsw i32 %1797, %t1689
  br i1 %100, label %"for blur_y.s0.x.x.rebased58.preheader", label %"end for blur_y.s0.x.x.rebased59", !prof !386

"for blur_y.s0.x.x.rebased58.preheader":          ; preds = %after_bb54
  %1798 = sext i32 %t1738 to i64
  br label %"for blur_y.s0.x.x.rebased58"

"produce blur_x57":                               ; preds = %"end for blur_y.s0.x.x.rebased47"
  %1799 = getelementptr inbounds i16, i16* %read_input, i64 %105
  %1800 = getelementptr inbounds i16, i16* %1799, i64 -31
  %1801 = bitcast i16* %1800 to <16 x i16>*
  %1802 = load <16 x i16>, <16 x i16>* %1801, align 2, !tbaa !396
  %1803 = getelementptr inbounds i16, i16* %1799, i64 -15
  %1804 = bitcast i16* %1803 to <16 x i16>*
  %1805 = load <16 x i16>, <16 x i16>* %1804, align 2, !tbaa !396
  %1806 = getelementptr inbounds i16, i16* %1799, i64 -32
  %1807 = bitcast i16* %1806 to <16 x i16>*
  %1808 = load <16 x i16>, <16 x i16>* %1807, align 2, !tbaa !396
  %1809 = getelementptr inbounds i16, i16* %1799, i64 -16
  %1810 = bitcast i16* %1809 to <16 x i16>*
  %1811 = load <16 x i16>, <16 x i16>* %1810, align 2, !tbaa !396
  %1812 = getelementptr inbounds i16, i16* %1799, i64 -30
  %1813 = bitcast i16* %1812 to <16 x i16>*
  %1814 = load <16 x i16>, <16 x i16>* %1813, align 2, !tbaa !396
  %1815 = getelementptr inbounds i16, i16* %1799, i64 -14
  %1816 = bitcast i16* %1815 to <16 x i16>*
  %1817 = load <16 x i16>, <16 x i16>* %1816, align 2, !tbaa !396
  %1818 = getelementptr inbounds i16, i16* %1799, i64 -29
  %1819 = bitcast i16* %1818 to <16 x i16>*
  %1820 = load <16 x i16>, <16 x i16>* %1819, align 2, !tbaa !396
  %1821 = getelementptr inbounds i16, i16* %1799, i64 -13
  %1822 = bitcast i16* %1821 to <16 x i16>*
  %1823 = load <16 x i16>, <16 x i16>* %1822, align 2, !tbaa !396
  %1824 = getelementptr inbounds i16, i16* %1799, i64 -28
  %1825 = bitcast i16* %1824 to <16 x i16>*
  %1826 = load <16 x i16>, <16 x i16>* %1825, align 2, !tbaa !396
  %1827 = getelementptr inbounds i16, i16* %1799, i64 -12
  %1828 = bitcast i16* %1827 to <16 x i16>*
  %1829 = load <16 x i16>, <16 x i16>* %1828, align 2, !tbaa !396
  %1830 = getelementptr inbounds i16, i16* %1799, i64 -26
  %1831 = bitcast i16* %1830 to <16 x i16>*
  %1832 = load <16 x i16>, <16 x i16>* %1831, align 2, !tbaa !396
  %1833 = getelementptr inbounds i16, i16* %1799, i64 -10
  %1834 = bitcast i16* %1833 to <16 x i16>*
  %1835 = load <16 x i16>, <16 x i16>* %1834, align 2, !tbaa !396
  %1836 = getelementptr inbounds i16, i16* %1799, i64 -27
  %1837 = bitcast i16* %1836 to <16 x i16>*
  %1838 = load <16 x i16>, <16 x i16>* %1837, align 2, !tbaa !396
  %1839 = getelementptr inbounds i16, i16* %1799, i64 -11
  %1840 = bitcast i16* %1839 to <16 x i16>*
  %1841 = load <16 x i16>, <16 x i16>* %1840, align 2, !tbaa !396
  %1842 = add <16 x i16> %1808, %1802
  %1843 = add <16 x i16> %1842, %1814
  %1844 = add <16 x i16> %1843, %1820
  %1845 = add <16 x i16> %1844, %1826
  %1846 = add <16 x i16> %1845, %1832
  %1847 = add <16 x i16> %1846, %1838
  %1848 = add <16 x i16> %1811, %1805
  %1849 = add <16 x i16> %1848, %1817
  %1850 = add <16 x i16> %1849, %1823
  %1851 = add <16 x i16> %1850, %1829
  %1852 = add <16 x i16> %1851, %1835
  %1853 = add <16 x i16> %1852, %1841
  %1854 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1847, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1855 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1853, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1856 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1854, <16 x i16> %1847)
  %1857 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1855, <16 x i16> %1853)
  %1858 = shufflevector <16 x i16> %1856, <16 x i16> %1857, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1859 = lshr <32 x i16> %1858, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1860 = shufflevector <32 x i16> %1859, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1861 = add nsw i32 %a26, 2
  %1862 = and i32 %1861, 7
  %1863 = zext i32 %1862 to i64
  %1864 = mul nsw i64 %97, %1863
  %1865 = add nsw i64 %99, %1864
  %1866 = getelementptr inbounds i16, i16* %blur_x, i64 %1865
  %1867 = getelementptr inbounds i16, i16* %1866, i64 -32
  %1868 = bitcast i16* %1867 to <16 x i16>*
  store <16 x i16> %1860, <16 x i16>* %1868, align 2, !tbaa !399
  %1869 = shufflevector <32 x i16> %1859, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1870 = getelementptr inbounds i16, i16* %1866, i64 -16
  %1871 = bitcast i16* %1870 to <16 x i16>*
  store <16 x i16> %1869, <16 x i16>* %1871, align 2, !tbaa !399
  br label %after_bb54

"for blur_y.s0.x.x.rebased58":                    ; preds = %"for blur_y.s0.x.x.rebased58.preheader", %after_bb61
  %indvars.iv3267 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased58.preheader" ], [ %indvars.iv.next3268, %after_bb61 ]
  %1872 = add nsw i64 %indvars.iv3267, %101
  %1873 = icmp slt i64 %1872, 1
  %1874 = trunc i64 %1872 to i32
  %1875 = shl nsw i32 %1874, 5
  %1876 = icmp sgt i32 %4, %1875
  %1877 = or i1 %1873, %1876
  br i1 %1877, label %"produce blur_x64", label %after_bb61

"end for blur_y.s0.x.x.rebased59":                ; preds = %after_bb61, %after_bb54
  br i1 %102, label %"for blur_y.s0.x.x.rebased65.preheader", label %"end for blur_y.s0.x.x.rebased66", !prof !386

"for blur_y.s0.x.x.rebased65.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased59"
  %1878 = sext i32 %t1738 to i64
  br label %"for blur_y.s0.x.x.rebased65"

after_bb61:                                       ; preds = %"for blur_y.s0.x.x.rebased58", %"produce blur_x64"
  %indvars.iv.next3268 = add nuw nsw i64 %indvars.iv3267, 1
  %.not2808 = icmp eq i64 %indvars.iv.next3268, %188
  br i1 %.not2808, label %"end for blur_y.s0.x.x.rebased59", label %"for blur_y.s0.x.x.rebased58"

"produce blur_x64":                               ; preds = %"for blur_y.s0.x.x.rebased58"
  %t724 = add nsw i32 %1875, %t1737
  %1879 = sext i32 %t724 to i64
  %1880 = getelementptr inbounds i16, i16* %read_input, i64 %1879
  %1881 = getelementptr inbounds i16, i16* %1880, i64 1
  %1882 = bitcast i16* %1881 to <16 x i16>*
  %1883 = load <16 x i16>, <16 x i16>* %1882, align 2, !tbaa !396
  %1884 = getelementptr inbounds i16, i16* %1880, i64 17
  %1885 = bitcast i16* %1884 to <16 x i16>*
  %1886 = load <16 x i16>, <16 x i16>* %1885, align 2, !tbaa !396
  %1887 = bitcast i16* %1880 to <16 x i16>*
  %1888 = load <16 x i16>, <16 x i16>* %1887, align 2, !tbaa !396
  %1889 = getelementptr inbounds i16, i16* %1880, i64 16
  %1890 = bitcast i16* %1889 to <16 x i16>*
  %1891 = load <16 x i16>, <16 x i16>* %1890, align 2, !tbaa !396
  %1892 = getelementptr inbounds i16, i16* %1880, i64 2
  %1893 = bitcast i16* %1892 to <16 x i16>*
  %1894 = load <16 x i16>, <16 x i16>* %1893, align 2, !tbaa !396
  %1895 = getelementptr inbounds i16, i16* %1880, i64 18
  %1896 = bitcast i16* %1895 to <16 x i16>*
  %1897 = load <16 x i16>, <16 x i16>* %1896, align 2, !tbaa !396
  %1898 = getelementptr inbounds i16, i16* %1880, i64 3
  %1899 = bitcast i16* %1898 to <16 x i16>*
  %1900 = load <16 x i16>, <16 x i16>* %1899, align 2, !tbaa !396
  %1901 = getelementptr inbounds i16, i16* %1880, i64 19
  %1902 = bitcast i16* %1901 to <16 x i16>*
  %1903 = load <16 x i16>, <16 x i16>* %1902, align 2, !tbaa !396
  %1904 = getelementptr inbounds i16, i16* %1880, i64 4
  %1905 = bitcast i16* %1904 to <16 x i16>*
  %1906 = load <16 x i16>, <16 x i16>* %1905, align 2, !tbaa !396
  %1907 = getelementptr inbounds i16, i16* %1880, i64 20
  %1908 = bitcast i16* %1907 to <16 x i16>*
  %1909 = load <16 x i16>, <16 x i16>* %1908, align 2, !tbaa !396
  %1910 = getelementptr inbounds i16, i16* %1880, i64 6
  %1911 = bitcast i16* %1910 to <16 x i16>*
  %1912 = load <16 x i16>, <16 x i16>* %1911, align 2, !tbaa !396
  %1913 = getelementptr inbounds i16, i16* %1880, i64 22
  %1914 = bitcast i16* %1913 to <16 x i16>*
  %1915 = load <16 x i16>, <16 x i16>* %1914, align 2, !tbaa !396
  %1916 = getelementptr inbounds i16, i16* %1880, i64 5
  %1917 = bitcast i16* %1916 to <16 x i16>*
  %1918 = load <16 x i16>, <16 x i16>* %1917, align 2, !tbaa !396
  %1919 = getelementptr inbounds i16, i16* %1880, i64 21
  %1920 = bitcast i16* %1919 to <16 x i16>*
  %1921 = load <16 x i16>, <16 x i16>* %1920, align 2, !tbaa !396
  %1922 = add <16 x i16> %1888, %1883
  %1923 = add <16 x i16> %1922, %1894
  %1924 = add <16 x i16> %1923, %1900
  %1925 = add <16 x i16> %1924, %1906
  %1926 = add <16 x i16> %1925, %1912
  %1927 = add <16 x i16> %1926, %1918
  %1928 = add <16 x i16> %1891, %1886
  %1929 = add <16 x i16> %1928, %1897
  %1930 = add <16 x i16> %1929, %1903
  %1931 = add <16 x i16> %1930, %1909
  %1932 = add <16 x i16> %1931, %1915
  %1933 = add <16 x i16> %1932, %1921
  %1934 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1927, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1935 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1933, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %1936 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1934, <16 x i16> %1927)
  %1937 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %1935, <16 x i16> %1933)
  %1938 = shufflevector <16 x i16> %1936, <16 x i16> %1937, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1939 = lshr <32 x i16> %1938, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1940 = shufflevector <32 x i16> %1939, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1941 = shl nsw i64 %1872, 5
  %1942 = add nsw i64 %1941, %1798
  %1943 = getelementptr inbounds i16, i16* %blur_x, i64 %1942
  %1944 = bitcast i16* %1943 to <16 x i16>*
  store <16 x i16> %1940, <16 x i16>* %1944, align 2, !tbaa !399
  %1945 = shufflevector <32 x i16> %1939, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1946 = getelementptr inbounds i16, i16* %1943, i64 16
  %1947 = bitcast i16* %1946 to <16 x i16>*
  store <16 x i16> %1945, <16 x i16>* %1947, align 2, !tbaa !399
  br label %after_bb61

"for blur_y.s0.x.x.rebased65":                    ; preds = %"for blur_y.s0.x.x.rebased65.preheader", %after_bb68
  %blur_y.s0.x.x.rebased67 = phi i32 [ %1952, %after_bb68 ], [ 0, %"for blur_y.s0.x.x.rebased65.preheader" ]
  %t2279 = add nsw i32 %blur_y.s0.x.x.rebased67, %t1670
  %1948 = icmp slt i32 %t2279, 1
  %1949 = shl nsw i32 %t2279, 5
  %1950 = icmp sgt i32 %4, %1949
  %1951 = or i1 %1948, %1950
  br i1 %1951, label %then_bb69, label %after_bb68

"end for blur_y.s0.x.x.rebased66":                ; preds = %after_bb68, %"end for blur_y.s0.x.x.rebased59"
  br i1 %34, label %"produce blur_x76", label %"end for blur_y.s0.x.x.rebased66.after_bb73_crit_edge"

"end for blur_y.s0.x.x.rebased66.after_bb73_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased66"
  %.pre3513 = add nsw i32 %a26, 3
  %.pre3515 = and i32 %.pre3513, 7
  br label %after_bb73

after_bb68:                                       ; preds = %"for blur_y.s0.x.x.rebased65", %then_bb69
  %1952 = add nuw nsw i32 %blur_y.s0.x.x.rebased67, 1
  %.not2807 = icmp eq i32 %1952, %t1727
  br i1 %.not2807, label %"end for blur_y.s0.x.x.rebased66", label %"for blur_y.s0.x.x.rebased65"

then_bb69:                                        ; preds = %"for blur_y.s0.x.x.rebased65"
  %1953 = icmp sgt i32 %a14, %1949
  %b97 = select i1 %1953, i32 %1949, i32 %a14
  %1954 = icmp slt i32 %b97, %4
  %blur_x.s0.x.v1.base.s72 = select i1 %1954, i32 %b97, i32 %4
  %t726 = add nsw i32 %blur_x.s0.x.v1.base.s72, %t1737
  %1955 = sext i32 %t726 to i64
  %1956 = getelementptr inbounds i16, i16* %read_input, i64 %1955
  %1957 = getelementptr inbounds i16, i16* %1956, i64 1
  %1958 = bitcast i16* %1957 to <16 x i16>*
  %1959 = load <16 x i16>, <16 x i16>* %1958, align 2, !tbaa !396
  %1960 = getelementptr inbounds i16, i16* %1956, i64 17
  %1961 = bitcast i16* %1960 to <16 x i16>*
  %1962 = load <16 x i16>, <16 x i16>* %1961, align 2, !tbaa !396
  %1963 = bitcast i16* %1956 to <16 x i16>*
  %1964 = load <16 x i16>, <16 x i16>* %1963, align 2, !tbaa !396
  %1965 = getelementptr inbounds i16, i16* %1956, i64 16
  %1966 = bitcast i16* %1965 to <16 x i16>*
  %1967 = load <16 x i16>, <16 x i16>* %1966, align 2, !tbaa !396
  %1968 = getelementptr inbounds i16, i16* %1956, i64 2
  %1969 = bitcast i16* %1968 to <16 x i16>*
  %1970 = load <16 x i16>, <16 x i16>* %1969, align 2, !tbaa !396
  %1971 = getelementptr inbounds i16, i16* %1956, i64 18
  %1972 = bitcast i16* %1971 to <16 x i16>*
  %1973 = load <16 x i16>, <16 x i16>* %1972, align 2, !tbaa !396
  %1974 = getelementptr inbounds i16, i16* %1956, i64 3
  %1975 = bitcast i16* %1974 to <16 x i16>*
  %1976 = load <16 x i16>, <16 x i16>* %1975, align 2, !tbaa !396
  %1977 = getelementptr inbounds i16, i16* %1956, i64 19
  %1978 = bitcast i16* %1977 to <16 x i16>*
  %1979 = load <16 x i16>, <16 x i16>* %1978, align 2, !tbaa !396
  %1980 = getelementptr inbounds i16, i16* %1956, i64 4
  %1981 = bitcast i16* %1980 to <16 x i16>*
  %1982 = load <16 x i16>, <16 x i16>* %1981, align 2, !tbaa !396
  %1983 = getelementptr inbounds i16, i16* %1956, i64 20
  %1984 = bitcast i16* %1983 to <16 x i16>*
  %1985 = load <16 x i16>, <16 x i16>* %1984, align 2, !tbaa !396
  %1986 = getelementptr inbounds i16, i16* %1956, i64 6
  %1987 = bitcast i16* %1986 to <16 x i16>*
  %1988 = load <16 x i16>, <16 x i16>* %1987, align 2, !tbaa !396
  %1989 = getelementptr inbounds i16, i16* %1956, i64 22
  %1990 = bitcast i16* %1989 to <16 x i16>*
  %1991 = load <16 x i16>, <16 x i16>* %1990, align 2, !tbaa !396
  %1992 = getelementptr inbounds i16, i16* %1956, i64 5
  %1993 = bitcast i16* %1992 to <16 x i16>*
  %1994 = load <16 x i16>, <16 x i16>* %1993, align 2, !tbaa !396
  %1995 = getelementptr inbounds i16, i16* %1956, i64 21
  %1996 = bitcast i16* %1995 to <16 x i16>*
  %1997 = load <16 x i16>, <16 x i16>* %1996, align 2, !tbaa !396
  %1998 = add <16 x i16> %1964, %1959
  %1999 = add <16 x i16> %1998, %1970
  %2000 = add <16 x i16> %1999, %1976
  %2001 = add <16 x i16> %2000, %1982
  %2002 = add <16 x i16> %2001, %1988
  %2003 = add <16 x i16> %2002, %1994
  %2004 = add <16 x i16> %1967, %1962
  %2005 = add <16 x i16> %2004, %1973
  %2006 = add <16 x i16> %2005, %1979
  %2007 = add <16 x i16> %2006, %1985
  %2008 = add <16 x i16> %2007, %1991
  %2009 = add <16 x i16> %2008, %1997
  %2010 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2003, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2011 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2009, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2012 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2010, <16 x i16> %2003)
  %2013 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2011, <16 x i16> %2009)
  %2014 = shufflevector <16 x i16> %2012, <16 x i16> %2013, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2015 = lshr <32 x i16> %2014, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2016 = shufflevector <32 x i16> %2015, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2017 = sext i32 %blur_x.s0.x.v1.base.s72 to i64
  %2018 = add nsw i64 %2017, %1878
  %2019 = getelementptr inbounds i16, i16* %blur_x, i64 %2018
  %2020 = bitcast i16* %2019 to <16 x i16>*
  store <16 x i16> %2016, <16 x i16>* %2020, align 2, !tbaa !399
  %2021 = shufflevector <32 x i16> %2015, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2022 = getelementptr inbounds i16, i16* %2019, i64 16
  %2023 = bitcast i16* %2022 to <16 x i16>*
  store <16 x i16> %2021, <16 x i16>* %2023, align 2, !tbaa !399
  br label %after_bb68

after_bb73:                                       ; preds = %"end for blur_y.s0.x.x.rebased66.after_bb73_crit_edge", %"produce blur_x76"
  %.pre-phi3516 = phi i32 [ %.pre3515, %"end for blur_y.s0.x.x.rebased66.after_bb73_crit_edge" ], [ %2089, %"produce blur_x76" ]
  %2024 = mul nsw i32 %.pre-phi3516, %a73
  %t1744 = sub nsw i32 %2024, %t1689
  br i1 %100, label %"for blur_y.s0.x.x.rebased77.preheader", label %"end for blur_y.s0.x.x.rebased78", !prof !386

"for blur_y.s0.x.x.rebased77.preheader":          ; preds = %after_bb73
  %2025 = sext i32 %t1744 to i64
  br label %"for blur_y.s0.x.x.rebased77"

"produce blur_x76":                               ; preds = %"end for blur_y.s0.x.x.rebased66"
  %2026 = getelementptr inbounds i16, i16* %read_input, i64 %107
  %2027 = getelementptr inbounds i16, i16* %2026, i64 -31
  %2028 = bitcast i16* %2027 to <16 x i16>*
  %2029 = load <16 x i16>, <16 x i16>* %2028, align 2, !tbaa !396
  %2030 = getelementptr inbounds i16, i16* %2026, i64 -15
  %2031 = bitcast i16* %2030 to <16 x i16>*
  %2032 = load <16 x i16>, <16 x i16>* %2031, align 2, !tbaa !396
  %2033 = getelementptr inbounds i16, i16* %2026, i64 -32
  %2034 = bitcast i16* %2033 to <16 x i16>*
  %2035 = load <16 x i16>, <16 x i16>* %2034, align 2, !tbaa !396
  %2036 = getelementptr inbounds i16, i16* %2026, i64 -16
  %2037 = bitcast i16* %2036 to <16 x i16>*
  %2038 = load <16 x i16>, <16 x i16>* %2037, align 2, !tbaa !396
  %2039 = getelementptr inbounds i16, i16* %2026, i64 -30
  %2040 = bitcast i16* %2039 to <16 x i16>*
  %2041 = load <16 x i16>, <16 x i16>* %2040, align 2, !tbaa !396
  %2042 = getelementptr inbounds i16, i16* %2026, i64 -14
  %2043 = bitcast i16* %2042 to <16 x i16>*
  %2044 = load <16 x i16>, <16 x i16>* %2043, align 2, !tbaa !396
  %2045 = getelementptr inbounds i16, i16* %2026, i64 -29
  %2046 = bitcast i16* %2045 to <16 x i16>*
  %2047 = load <16 x i16>, <16 x i16>* %2046, align 2, !tbaa !396
  %2048 = getelementptr inbounds i16, i16* %2026, i64 -13
  %2049 = bitcast i16* %2048 to <16 x i16>*
  %2050 = load <16 x i16>, <16 x i16>* %2049, align 2, !tbaa !396
  %2051 = getelementptr inbounds i16, i16* %2026, i64 -28
  %2052 = bitcast i16* %2051 to <16 x i16>*
  %2053 = load <16 x i16>, <16 x i16>* %2052, align 2, !tbaa !396
  %2054 = getelementptr inbounds i16, i16* %2026, i64 -12
  %2055 = bitcast i16* %2054 to <16 x i16>*
  %2056 = load <16 x i16>, <16 x i16>* %2055, align 2, !tbaa !396
  %2057 = getelementptr inbounds i16, i16* %2026, i64 -26
  %2058 = bitcast i16* %2057 to <16 x i16>*
  %2059 = load <16 x i16>, <16 x i16>* %2058, align 2, !tbaa !396
  %2060 = getelementptr inbounds i16, i16* %2026, i64 -10
  %2061 = bitcast i16* %2060 to <16 x i16>*
  %2062 = load <16 x i16>, <16 x i16>* %2061, align 2, !tbaa !396
  %2063 = getelementptr inbounds i16, i16* %2026, i64 -27
  %2064 = bitcast i16* %2063 to <16 x i16>*
  %2065 = load <16 x i16>, <16 x i16>* %2064, align 2, !tbaa !396
  %2066 = getelementptr inbounds i16, i16* %2026, i64 -11
  %2067 = bitcast i16* %2066 to <16 x i16>*
  %2068 = load <16 x i16>, <16 x i16>* %2067, align 2, !tbaa !396
  %2069 = add <16 x i16> %2035, %2029
  %2070 = add <16 x i16> %2069, %2041
  %2071 = add <16 x i16> %2070, %2047
  %2072 = add <16 x i16> %2071, %2053
  %2073 = add <16 x i16> %2072, %2059
  %2074 = add <16 x i16> %2073, %2065
  %2075 = add <16 x i16> %2038, %2032
  %2076 = add <16 x i16> %2075, %2044
  %2077 = add <16 x i16> %2076, %2050
  %2078 = add <16 x i16> %2077, %2056
  %2079 = add <16 x i16> %2078, %2062
  %2080 = add <16 x i16> %2079, %2068
  %2081 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2074, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2082 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2080, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2083 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2081, <16 x i16> %2074)
  %2084 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2082, <16 x i16> %2080)
  %2085 = shufflevector <16 x i16> %2083, <16 x i16> %2084, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2086 = lshr <32 x i16> %2085, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2087 = shufflevector <32 x i16> %2086, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2088 = add nsw i32 %a26, 3
  %2089 = and i32 %2088, 7
  %2090 = zext i32 %2089 to i64
  %2091 = mul nsw i64 %97, %2090
  %2092 = add nsw i64 %99, %2091
  %2093 = getelementptr inbounds i16, i16* %blur_x, i64 %2092
  %2094 = getelementptr inbounds i16, i16* %2093, i64 -32
  %2095 = bitcast i16* %2094 to <16 x i16>*
  store <16 x i16> %2087, <16 x i16>* %2095, align 2, !tbaa !399
  %2096 = shufflevector <32 x i16> %2086, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2097 = getelementptr inbounds i16, i16* %2093, i64 -16
  %2098 = bitcast i16* %2097 to <16 x i16>*
  store <16 x i16> %2096, <16 x i16>* %2098, align 2, !tbaa !399
  br label %after_bb73

"for blur_y.s0.x.x.rebased77":                    ; preds = %"for blur_y.s0.x.x.rebased77.preheader", %after_bb80
  %indvars.iv3270 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased77.preheader" ], [ %indvars.iv.next3271, %after_bb80 ]
  %2099 = add nsw i64 %indvars.iv3270, %101
  %2100 = icmp slt i64 %2099, 1
  %2101 = trunc i64 %2099 to i32
  %2102 = shl nsw i32 %2101, 5
  %2103 = icmp sgt i32 %4, %2102
  %2104 = or i1 %2100, %2103
  br i1 %2104, label %"produce blur_x83", label %after_bb80

"end for blur_y.s0.x.x.rebased78":                ; preds = %after_bb80, %after_bb73
  br i1 %102, label %"for blur_y.s0.x.x.rebased84.preheader", label %"end for blur_y.s0.x.x.rebased85", !prof !386

"for blur_y.s0.x.x.rebased84.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased78"
  %2105 = sext i32 %t1744 to i64
  br label %"for blur_y.s0.x.x.rebased84"

after_bb80:                                       ; preds = %"for blur_y.s0.x.x.rebased77", %"produce blur_x83"
  %indvars.iv.next3271 = add nuw nsw i64 %indvars.iv3270, 1
  %.not2806 = icmp eq i64 %indvars.iv.next3271, %188
  br i1 %.not2806, label %"end for blur_y.s0.x.x.rebased78", label %"for blur_y.s0.x.x.rebased77"

"produce blur_x83":                               ; preds = %"for blur_y.s0.x.x.rebased77"
  %t730 = add nsw i32 %2102, %t1743
  %2106 = sext i32 %t730 to i64
  %2107 = getelementptr inbounds i16, i16* %read_input, i64 %2106
  %2108 = getelementptr inbounds i16, i16* %2107, i64 1
  %2109 = bitcast i16* %2108 to <16 x i16>*
  %2110 = load <16 x i16>, <16 x i16>* %2109, align 2, !tbaa !396
  %2111 = getelementptr inbounds i16, i16* %2107, i64 17
  %2112 = bitcast i16* %2111 to <16 x i16>*
  %2113 = load <16 x i16>, <16 x i16>* %2112, align 2, !tbaa !396
  %2114 = bitcast i16* %2107 to <16 x i16>*
  %2115 = load <16 x i16>, <16 x i16>* %2114, align 2, !tbaa !396
  %2116 = getelementptr inbounds i16, i16* %2107, i64 16
  %2117 = bitcast i16* %2116 to <16 x i16>*
  %2118 = load <16 x i16>, <16 x i16>* %2117, align 2, !tbaa !396
  %2119 = getelementptr inbounds i16, i16* %2107, i64 2
  %2120 = bitcast i16* %2119 to <16 x i16>*
  %2121 = load <16 x i16>, <16 x i16>* %2120, align 2, !tbaa !396
  %2122 = getelementptr inbounds i16, i16* %2107, i64 18
  %2123 = bitcast i16* %2122 to <16 x i16>*
  %2124 = load <16 x i16>, <16 x i16>* %2123, align 2, !tbaa !396
  %2125 = getelementptr inbounds i16, i16* %2107, i64 3
  %2126 = bitcast i16* %2125 to <16 x i16>*
  %2127 = load <16 x i16>, <16 x i16>* %2126, align 2, !tbaa !396
  %2128 = getelementptr inbounds i16, i16* %2107, i64 19
  %2129 = bitcast i16* %2128 to <16 x i16>*
  %2130 = load <16 x i16>, <16 x i16>* %2129, align 2, !tbaa !396
  %2131 = getelementptr inbounds i16, i16* %2107, i64 4
  %2132 = bitcast i16* %2131 to <16 x i16>*
  %2133 = load <16 x i16>, <16 x i16>* %2132, align 2, !tbaa !396
  %2134 = getelementptr inbounds i16, i16* %2107, i64 20
  %2135 = bitcast i16* %2134 to <16 x i16>*
  %2136 = load <16 x i16>, <16 x i16>* %2135, align 2, !tbaa !396
  %2137 = getelementptr inbounds i16, i16* %2107, i64 6
  %2138 = bitcast i16* %2137 to <16 x i16>*
  %2139 = load <16 x i16>, <16 x i16>* %2138, align 2, !tbaa !396
  %2140 = getelementptr inbounds i16, i16* %2107, i64 22
  %2141 = bitcast i16* %2140 to <16 x i16>*
  %2142 = load <16 x i16>, <16 x i16>* %2141, align 2, !tbaa !396
  %2143 = getelementptr inbounds i16, i16* %2107, i64 5
  %2144 = bitcast i16* %2143 to <16 x i16>*
  %2145 = load <16 x i16>, <16 x i16>* %2144, align 2, !tbaa !396
  %2146 = getelementptr inbounds i16, i16* %2107, i64 21
  %2147 = bitcast i16* %2146 to <16 x i16>*
  %2148 = load <16 x i16>, <16 x i16>* %2147, align 2, !tbaa !396
  %2149 = add <16 x i16> %2115, %2110
  %2150 = add <16 x i16> %2149, %2121
  %2151 = add <16 x i16> %2150, %2127
  %2152 = add <16 x i16> %2151, %2133
  %2153 = add <16 x i16> %2152, %2139
  %2154 = add <16 x i16> %2153, %2145
  %2155 = add <16 x i16> %2118, %2113
  %2156 = add <16 x i16> %2155, %2124
  %2157 = add <16 x i16> %2156, %2130
  %2158 = add <16 x i16> %2157, %2136
  %2159 = add <16 x i16> %2158, %2142
  %2160 = add <16 x i16> %2159, %2148
  %2161 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2154, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2162 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2160, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2163 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2161, <16 x i16> %2154)
  %2164 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2162, <16 x i16> %2160)
  %2165 = shufflevector <16 x i16> %2163, <16 x i16> %2164, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2166 = lshr <32 x i16> %2165, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2167 = shufflevector <32 x i16> %2166, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2168 = shl nsw i64 %2099, 5
  %2169 = add nsw i64 %2168, %2025
  %2170 = getelementptr inbounds i16, i16* %blur_x, i64 %2169
  %2171 = bitcast i16* %2170 to <16 x i16>*
  store <16 x i16> %2167, <16 x i16>* %2171, align 2, !tbaa !399
  %2172 = shufflevector <32 x i16> %2166, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2173 = getelementptr inbounds i16, i16* %2170, i64 16
  %2174 = bitcast i16* %2173 to <16 x i16>*
  store <16 x i16> %2172, <16 x i16>* %2174, align 2, !tbaa !399
  br label %after_bb80

"for blur_y.s0.x.x.rebased84":                    ; preds = %"for blur_y.s0.x.x.rebased84.preheader", %after_bb87
  %blur_y.s0.x.x.rebased86 = phi i32 [ %2179, %after_bb87 ], [ 0, %"for blur_y.s0.x.x.rebased84.preheader" ]
  %t2281 = add nsw i32 %blur_y.s0.x.x.rebased86, %t1670
  %2175 = icmp slt i32 %t2281, 1
  %2176 = shl nsw i32 %t2281, 5
  %2177 = icmp sgt i32 %4, %2176
  %2178 = or i1 %2175, %2177
  br i1 %2178, label %then_bb88, label %after_bb87

"end for blur_y.s0.x.x.rebased85":                ; preds = %after_bb87, %"end for blur_y.s0.x.x.rebased78"
  br i1 %34, label %"produce blur_x95", label %"end for blur_y.s0.x.x.rebased85.after_bb92_crit_edge"

"end for blur_y.s0.x.x.rebased85.after_bb92_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased85"
  %.pre3517 = add nsw i32 %a26, 4
  %.pre3519 = and i32 %.pre3517, 7
  br label %after_bb92

after_bb87:                                       ; preds = %"for blur_y.s0.x.x.rebased84", %then_bb88
  %2179 = add nuw nsw i32 %blur_y.s0.x.x.rebased86, 1
  %.not2805 = icmp eq i32 %2179, %t1727
  br i1 %.not2805, label %"end for blur_y.s0.x.x.rebased85", label %"for blur_y.s0.x.x.rebased84"

then_bb88:                                        ; preds = %"for blur_y.s0.x.x.rebased84"
  %2180 = icmp sgt i32 %a14, %2176
  %b104 = select i1 %2180, i32 %2176, i32 %a14
  %2181 = icmp slt i32 %b104, %4
  %blur_x.s0.x.v1.base.s91 = select i1 %2181, i32 %b104, i32 %4
  %t732 = add nsw i32 %blur_x.s0.x.v1.base.s91, %t1743
  %2182 = sext i32 %t732 to i64
  %2183 = getelementptr inbounds i16, i16* %read_input, i64 %2182
  %2184 = getelementptr inbounds i16, i16* %2183, i64 1
  %2185 = bitcast i16* %2184 to <16 x i16>*
  %2186 = load <16 x i16>, <16 x i16>* %2185, align 2, !tbaa !396
  %2187 = getelementptr inbounds i16, i16* %2183, i64 17
  %2188 = bitcast i16* %2187 to <16 x i16>*
  %2189 = load <16 x i16>, <16 x i16>* %2188, align 2, !tbaa !396
  %2190 = bitcast i16* %2183 to <16 x i16>*
  %2191 = load <16 x i16>, <16 x i16>* %2190, align 2, !tbaa !396
  %2192 = getelementptr inbounds i16, i16* %2183, i64 16
  %2193 = bitcast i16* %2192 to <16 x i16>*
  %2194 = load <16 x i16>, <16 x i16>* %2193, align 2, !tbaa !396
  %2195 = getelementptr inbounds i16, i16* %2183, i64 2
  %2196 = bitcast i16* %2195 to <16 x i16>*
  %2197 = load <16 x i16>, <16 x i16>* %2196, align 2, !tbaa !396
  %2198 = getelementptr inbounds i16, i16* %2183, i64 18
  %2199 = bitcast i16* %2198 to <16 x i16>*
  %2200 = load <16 x i16>, <16 x i16>* %2199, align 2, !tbaa !396
  %2201 = getelementptr inbounds i16, i16* %2183, i64 3
  %2202 = bitcast i16* %2201 to <16 x i16>*
  %2203 = load <16 x i16>, <16 x i16>* %2202, align 2, !tbaa !396
  %2204 = getelementptr inbounds i16, i16* %2183, i64 19
  %2205 = bitcast i16* %2204 to <16 x i16>*
  %2206 = load <16 x i16>, <16 x i16>* %2205, align 2, !tbaa !396
  %2207 = getelementptr inbounds i16, i16* %2183, i64 4
  %2208 = bitcast i16* %2207 to <16 x i16>*
  %2209 = load <16 x i16>, <16 x i16>* %2208, align 2, !tbaa !396
  %2210 = getelementptr inbounds i16, i16* %2183, i64 20
  %2211 = bitcast i16* %2210 to <16 x i16>*
  %2212 = load <16 x i16>, <16 x i16>* %2211, align 2, !tbaa !396
  %2213 = getelementptr inbounds i16, i16* %2183, i64 6
  %2214 = bitcast i16* %2213 to <16 x i16>*
  %2215 = load <16 x i16>, <16 x i16>* %2214, align 2, !tbaa !396
  %2216 = getelementptr inbounds i16, i16* %2183, i64 22
  %2217 = bitcast i16* %2216 to <16 x i16>*
  %2218 = load <16 x i16>, <16 x i16>* %2217, align 2, !tbaa !396
  %2219 = getelementptr inbounds i16, i16* %2183, i64 5
  %2220 = bitcast i16* %2219 to <16 x i16>*
  %2221 = load <16 x i16>, <16 x i16>* %2220, align 2, !tbaa !396
  %2222 = getelementptr inbounds i16, i16* %2183, i64 21
  %2223 = bitcast i16* %2222 to <16 x i16>*
  %2224 = load <16 x i16>, <16 x i16>* %2223, align 2, !tbaa !396
  %2225 = add <16 x i16> %2191, %2186
  %2226 = add <16 x i16> %2225, %2197
  %2227 = add <16 x i16> %2226, %2203
  %2228 = add <16 x i16> %2227, %2209
  %2229 = add <16 x i16> %2228, %2215
  %2230 = add <16 x i16> %2229, %2221
  %2231 = add <16 x i16> %2194, %2189
  %2232 = add <16 x i16> %2231, %2200
  %2233 = add <16 x i16> %2232, %2206
  %2234 = add <16 x i16> %2233, %2212
  %2235 = add <16 x i16> %2234, %2218
  %2236 = add <16 x i16> %2235, %2224
  %2237 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2230, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2238 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2236, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2239 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2237, <16 x i16> %2230)
  %2240 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2238, <16 x i16> %2236)
  %2241 = shufflevector <16 x i16> %2239, <16 x i16> %2240, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2242 = lshr <32 x i16> %2241, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2243 = shufflevector <32 x i16> %2242, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2244 = sext i32 %blur_x.s0.x.v1.base.s91 to i64
  %2245 = add nsw i64 %2244, %2105
  %2246 = getelementptr inbounds i16, i16* %blur_x, i64 %2245
  %2247 = bitcast i16* %2246 to <16 x i16>*
  store <16 x i16> %2243, <16 x i16>* %2247, align 2, !tbaa !399
  %2248 = shufflevector <32 x i16> %2242, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2249 = getelementptr inbounds i16, i16* %2246, i64 16
  %2250 = bitcast i16* %2249 to <16 x i16>*
  store <16 x i16> %2248, <16 x i16>* %2250, align 2, !tbaa !399
  br label %after_bb87

after_bb92:                                       ; preds = %"end for blur_y.s0.x.x.rebased85.after_bb92_crit_edge", %"produce blur_x95"
  %.pre-phi3520 = phi i32 [ %.pre3519, %"end for blur_y.s0.x.x.rebased85.after_bb92_crit_edge" ], [ %2316, %"produce blur_x95" ]
  %2251 = mul nsw i32 %.pre-phi3520, %a73
  %t1750 = sub nsw i32 %2251, %t1689
  br i1 %100, label %"for blur_y.s0.x.x.rebased96.preheader", label %"end for blur_y.s0.x.x.rebased97", !prof !386

"for blur_y.s0.x.x.rebased96.preheader":          ; preds = %after_bb92
  %2252 = sext i32 %t1750 to i64
  br label %"for blur_y.s0.x.x.rebased96"

"produce blur_x95":                               ; preds = %"end for blur_y.s0.x.x.rebased85"
  %2253 = getelementptr inbounds i16, i16* %read_input, i64 %109
  %2254 = getelementptr inbounds i16, i16* %2253, i64 -31
  %2255 = bitcast i16* %2254 to <16 x i16>*
  %2256 = load <16 x i16>, <16 x i16>* %2255, align 2, !tbaa !396
  %2257 = getelementptr inbounds i16, i16* %2253, i64 -15
  %2258 = bitcast i16* %2257 to <16 x i16>*
  %2259 = load <16 x i16>, <16 x i16>* %2258, align 2, !tbaa !396
  %2260 = getelementptr inbounds i16, i16* %2253, i64 -32
  %2261 = bitcast i16* %2260 to <16 x i16>*
  %2262 = load <16 x i16>, <16 x i16>* %2261, align 2, !tbaa !396
  %2263 = getelementptr inbounds i16, i16* %2253, i64 -16
  %2264 = bitcast i16* %2263 to <16 x i16>*
  %2265 = load <16 x i16>, <16 x i16>* %2264, align 2, !tbaa !396
  %2266 = getelementptr inbounds i16, i16* %2253, i64 -30
  %2267 = bitcast i16* %2266 to <16 x i16>*
  %2268 = load <16 x i16>, <16 x i16>* %2267, align 2, !tbaa !396
  %2269 = getelementptr inbounds i16, i16* %2253, i64 -14
  %2270 = bitcast i16* %2269 to <16 x i16>*
  %2271 = load <16 x i16>, <16 x i16>* %2270, align 2, !tbaa !396
  %2272 = getelementptr inbounds i16, i16* %2253, i64 -29
  %2273 = bitcast i16* %2272 to <16 x i16>*
  %2274 = load <16 x i16>, <16 x i16>* %2273, align 2, !tbaa !396
  %2275 = getelementptr inbounds i16, i16* %2253, i64 -13
  %2276 = bitcast i16* %2275 to <16 x i16>*
  %2277 = load <16 x i16>, <16 x i16>* %2276, align 2, !tbaa !396
  %2278 = getelementptr inbounds i16, i16* %2253, i64 -28
  %2279 = bitcast i16* %2278 to <16 x i16>*
  %2280 = load <16 x i16>, <16 x i16>* %2279, align 2, !tbaa !396
  %2281 = getelementptr inbounds i16, i16* %2253, i64 -12
  %2282 = bitcast i16* %2281 to <16 x i16>*
  %2283 = load <16 x i16>, <16 x i16>* %2282, align 2, !tbaa !396
  %2284 = getelementptr inbounds i16, i16* %2253, i64 -26
  %2285 = bitcast i16* %2284 to <16 x i16>*
  %2286 = load <16 x i16>, <16 x i16>* %2285, align 2, !tbaa !396
  %2287 = getelementptr inbounds i16, i16* %2253, i64 -10
  %2288 = bitcast i16* %2287 to <16 x i16>*
  %2289 = load <16 x i16>, <16 x i16>* %2288, align 2, !tbaa !396
  %2290 = getelementptr inbounds i16, i16* %2253, i64 -27
  %2291 = bitcast i16* %2290 to <16 x i16>*
  %2292 = load <16 x i16>, <16 x i16>* %2291, align 2, !tbaa !396
  %2293 = getelementptr inbounds i16, i16* %2253, i64 -11
  %2294 = bitcast i16* %2293 to <16 x i16>*
  %2295 = load <16 x i16>, <16 x i16>* %2294, align 2, !tbaa !396
  %2296 = add <16 x i16> %2262, %2256
  %2297 = add <16 x i16> %2296, %2268
  %2298 = add <16 x i16> %2297, %2274
  %2299 = add <16 x i16> %2298, %2280
  %2300 = add <16 x i16> %2299, %2286
  %2301 = add <16 x i16> %2300, %2292
  %2302 = add <16 x i16> %2265, %2259
  %2303 = add <16 x i16> %2302, %2271
  %2304 = add <16 x i16> %2303, %2277
  %2305 = add <16 x i16> %2304, %2283
  %2306 = add <16 x i16> %2305, %2289
  %2307 = add <16 x i16> %2306, %2295
  %2308 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2301, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2309 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2307, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2310 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2308, <16 x i16> %2301)
  %2311 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2309, <16 x i16> %2307)
  %2312 = shufflevector <16 x i16> %2310, <16 x i16> %2311, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2313 = lshr <32 x i16> %2312, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2314 = shufflevector <32 x i16> %2313, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2315 = add nsw i32 %a26, 4
  %2316 = and i32 %2315, 7
  %2317 = zext i32 %2316 to i64
  %2318 = mul nsw i64 %97, %2317
  %2319 = add nsw i64 %99, %2318
  %2320 = getelementptr inbounds i16, i16* %blur_x, i64 %2319
  %2321 = getelementptr inbounds i16, i16* %2320, i64 -32
  %2322 = bitcast i16* %2321 to <16 x i16>*
  store <16 x i16> %2314, <16 x i16>* %2322, align 2, !tbaa !399
  %2323 = shufflevector <32 x i16> %2313, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2324 = getelementptr inbounds i16, i16* %2320, i64 -16
  %2325 = bitcast i16* %2324 to <16 x i16>*
  store <16 x i16> %2323, <16 x i16>* %2325, align 2, !tbaa !399
  br label %after_bb92

"for blur_y.s0.x.x.rebased96":                    ; preds = %"for blur_y.s0.x.x.rebased96.preheader", %after_bb99
  %indvars.iv3273 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased96.preheader" ], [ %indvars.iv.next3274, %after_bb99 ]
  %2326 = add nsw i64 %indvars.iv3273, %101
  %2327 = icmp slt i64 %2326, 1
  %2328 = trunc i64 %2326 to i32
  %2329 = shl nsw i32 %2328, 5
  %2330 = icmp sgt i32 %4, %2329
  %2331 = or i1 %2327, %2330
  br i1 %2331, label %"produce blur_x102", label %after_bb99

"end for blur_y.s0.x.x.rebased97":                ; preds = %after_bb99, %after_bb92
  br i1 %102, label %"for blur_y.s0.x.x.rebased103.preheader", label %"end for blur_y.s0.x.x.rebased104", !prof !386

"for blur_y.s0.x.x.rebased103.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased97"
  %2332 = sext i32 %t1750 to i64
  br label %"for blur_y.s0.x.x.rebased103"

after_bb99:                                       ; preds = %"for blur_y.s0.x.x.rebased96", %"produce blur_x102"
  %indvars.iv.next3274 = add nuw nsw i64 %indvars.iv3273, 1
  %.not2804 = icmp eq i64 %indvars.iv.next3274, %188
  br i1 %.not2804, label %"end for blur_y.s0.x.x.rebased97", label %"for blur_y.s0.x.x.rebased96"

"produce blur_x102":                              ; preds = %"for blur_y.s0.x.x.rebased96"
  %t736 = add nsw i32 %2329, %t1749
  %2333 = sext i32 %t736 to i64
  %2334 = getelementptr inbounds i16, i16* %read_input, i64 %2333
  %2335 = getelementptr inbounds i16, i16* %2334, i64 1
  %2336 = bitcast i16* %2335 to <16 x i16>*
  %2337 = load <16 x i16>, <16 x i16>* %2336, align 2, !tbaa !396
  %2338 = getelementptr inbounds i16, i16* %2334, i64 17
  %2339 = bitcast i16* %2338 to <16 x i16>*
  %2340 = load <16 x i16>, <16 x i16>* %2339, align 2, !tbaa !396
  %2341 = bitcast i16* %2334 to <16 x i16>*
  %2342 = load <16 x i16>, <16 x i16>* %2341, align 2, !tbaa !396
  %2343 = getelementptr inbounds i16, i16* %2334, i64 16
  %2344 = bitcast i16* %2343 to <16 x i16>*
  %2345 = load <16 x i16>, <16 x i16>* %2344, align 2, !tbaa !396
  %2346 = getelementptr inbounds i16, i16* %2334, i64 2
  %2347 = bitcast i16* %2346 to <16 x i16>*
  %2348 = load <16 x i16>, <16 x i16>* %2347, align 2, !tbaa !396
  %2349 = getelementptr inbounds i16, i16* %2334, i64 18
  %2350 = bitcast i16* %2349 to <16 x i16>*
  %2351 = load <16 x i16>, <16 x i16>* %2350, align 2, !tbaa !396
  %2352 = getelementptr inbounds i16, i16* %2334, i64 3
  %2353 = bitcast i16* %2352 to <16 x i16>*
  %2354 = load <16 x i16>, <16 x i16>* %2353, align 2, !tbaa !396
  %2355 = getelementptr inbounds i16, i16* %2334, i64 19
  %2356 = bitcast i16* %2355 to <16 x i16>*
  %2357 = load <16 x i16>, <16 x i16>* %2356, align 2, !tbaa !396
  %2358 = getelementptr inbounds i16, i16* %2334, i64 4
  %2359 = bitcast i16* %2358 to <16 x i16>*
  %2360 = load <16 x i16>, <16 x i16>* %2359, align 2, !tbaa !396
  %2361 = getelementptr inbounds i16, i16* %2334, i64 20
  %2362 = bitcast i16* %2361 to <16 x i16>*
  %2363 = load <16 x i16>, <16 x i16>* %2362, align 2, !tbaa !396
  %2364 = getelementptr inbounds i16, i16* %2334, i64 6
  %2365 = bitcast i16* %2364 to <16 x i16>*
  %2366 = load <16 x i16>, <16 x i16>* %2365, align 2, !tbaa !396
  %2367 = getelementptr inbounds i16, i16* %2334, i64 22
  %2368 = bitcast i16* %2367 to <16 x i16>*
  %2369 = load <16 x i16>, <16 x i16>* %2368, align 2, !tbaa !396
  %2370 = getelementptr inbounds i16, i16* %2334, i64 5
  %2371 = bitcast i16* %2370 to <16 x i16>*
  %2372 = load <16 x i16>, <16 x i16>* %2371, align 2, !tbaa !396
  %2373 = getelementptr inbounds i16, i16* %2334, i64 21
  %2374 = bitcast i16* %2373 to <16 x i16>*
  %2375 = load <16 x i16>, <16 x i16>* %2374, align 2, !tbaa !396
  %2376 = add <16 x i16> %2342, %2337
  %2377 = add <16 x i16> %2376, %2348
  %2378 = add <16 x i16> %2377, %2354
  %2379 = add <16 x i16> %2378, %2360
  %2380 = add <16 x i16> %2379, %2366
  %2381 = add <16 x i16> %2380, %2372
  %2382 = add <16 x i16> %2345, %2340
  %2383 = add <16 x i16> %2382, %2351
  %2384 = add <16 x i16> %2383, %2357
  %2385 = add <16 x i16> %2384, %2363
  %2386 = add <16 x i16> %2385, %2369
  %2387 = add <16 x i16> %2386, %2375
  %2388 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2381, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2389 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2387, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2390 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2388, <16 x i16> %2381)
  %2391 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2389, <16 x i16> %2387)
  %2392 = shufflevector <16 x i16> %2390, <16 x i16> %2391, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2393 = lshr <32 x i16> %2392, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2394 = shufflevector <32 x i16> %2393, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2395 = shl nsw i64 %2326, 5
  %2396 = add nsw i64 %2395, %2252
  %2397 = getelementptr inbounds i16, i16* %blur_x, i64 %2396
  %2398 = bitcast i16* %2397 to <16 x i16>*
  store <16 x i16> %2394, <16 x i16>* %2398, align 2, !tbaa !399
  %2399 = shufflevector <32 x i16> %2393, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2400 = getelementptr inbounds i16, i16* %2397, i64 16
  %2401 = bitcast i16* %2400 to <16 x i16>*
  store <16 x i16> %2399, <16 x i16>* %2401, align 2, !tbaa !399
  br label %after_bb99

"for blur_y.s0.x.x.rebased103":                   ; preds = %"for blur_y.s0.x.x.rebased103.preheader", %after_bb106
  %blur_y.s0.x.x.rebased105 = phi i32 [ %2406, %after_bb106 ], [ 0, %"for blur_y.s0.x.x.rebased103.preheader" ]
  %t2283 = add nsw i32 %blur_y.s0.x.x.rebased105, %t1670
  %2402 = icmp slt i32 %t2283, 1
  %2403 = shl nsw i32 %t2283, 5
  %2404 = icmp sgt i32 %4, %2403
  %2405 = or i1 %2402, %2404
  br i1 %2405, label %then_bb107, label %after_bb106

"end for blur_y.s0.x.x.rebased104":               ; preds = %after_bb106, %"end for blur_y.s0.x.x.rebased97"
  br i1 %34, label %"produce blur_x114", label %"end for blur_y.s0.x.x.rebased104.after_bb111_crit_edge"

"end for blur_y.s0.x.x.rebased104.after_bb111_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased104"
  %.pre3521 = add nsw i32 %a26, 5
  %.pre3523 = and i32 %.pre3521, 7
  br label %after_bb111

after_bb106:                                      ; preds = %"for blur_y.s0.x.x.rebased103", %then_bb107
  %2406 = add nuw nsw i32 %blur_y.s0.x.x.rebased105, 1
  %.not2803 = icmp eq i32 %2406, %t1727
  br i1 %.not2803, label %"end for blur_y.s0.x.x.rebased104", label %"for blur_y.s0.x.x.rebased103"

then_bb107:                                       ; preds = %"for blur_y.s0.x.x.rebased103"
  %2407 = icmp sgt i32 %a14, %2403
  %b111 = select i1 %2407, i32 %2403, i32 %a14
  %2408 = icmp slt i32 %b111, %4
  %blur_x.s0.x.v1.base.s110 = select i1 %2408, i32 %b111, i32 %4
  %t738 = add nsw i32 %blur_x.s0.x.v1.base.s110, %t1749
  %2409 = sext i32 %t738 to i64
  %2410 = getelementptr inbounds i16, i16* %read_input, i64 %2409
  %2411 = getelementptr inbounds i16, i16* %2410, i64 1
  %2412 = bitcast i16* %2411 to <16 x i16>*
  %2413 = load <16 x i16>, <16 x i16>* %2412, align 2, !tbaa !396
  %2414 = getelementptr inbounds i16, i16* %2410, i64 17
  %2415 = bitcast i16* %2414 to <16 x i16>*
  %2416 = load <16 x i16>, <16 x i16>* %2415, align 2, !tbaa !396
  %2417 = bitcast i16* %2410 to <16 x i16>*
  %2418 = load <16 x i16>, <16 x i16>* %2417, align 2, !tbaa !396
  %2419 = getelementptr inbounds i16, i16* %2410, i64 16
  %2420 = bitcast i16* %2419 to <16 x i16>*
  %2421 = load <16 x i16>, <16 x i16>* %2420, align 2, !tbaa !396
  %2422 = getelementptr inbounds i16, i16* %2410, i64 2
  %2423 = bitcast i16* %2422 to <16 x i16>*
  %2424 = load <16 x i16>, <16 x i16>* %2423, align 2, !tbaa !396
  %2425 = getelementptr inbounds i16, i16* %2410, i64 18
  %2426 = bitcast i16* %2425 to <16 x i16>*
  %2427 = load <16 x i16>, <16 x i16>* %2426, align 2, !tbaa !396
  %2428 = getelementptr inbounds i16, i16* %2410, i64 3
  %2429 = bitcast i16* %2428 to <16 x i16>*
  %2430 = load <16 x i16>, <16 x i16>* %2429, align 2, !tbaa !396
  %2431 = getelementptr inbounds i16, i16* %2410, i64 19
  %2432 = bitcast i16* %2431 to <16 x i16>*
  %2433 = load <16 x i16>, <16 x i16>* %2432, align 2, !tbaa !396
  %2434 = getelementptr inbounds i16, i16* %2410, i64 4
  %2435 = bitcast i16* %2434 to <16 x i16>*
  %2436 = load <16 x i16>, <16 x i16>* %2435, align 2, !tbaa !396
  %2437 = getelementptr inbounds i16, i16* %2410, i64 20
  %2438 = bitcast i16* %2437 to <16 x i16>*
  %2439 = load <16 x i16>, <16 x i16>* %2438, align 2, !tbaa !396
  %2440 = getelementptr inbounds i16, i16* %2410, i64 6
  %2441 = bitcast i16* %2440 to <16 x i16>*
  %2442 = load <16 x i16>, <16 x i16>* %2441, align 2, !tbaa !396
  %2443 = getelementptr inbounds i16, i16* %2410, i64 22
  %2444 = bitcast i16* %2443 to <16 x i16>*
  %2445 = load <16 x i16>, <16 x i16>* %2444, align 2, !tbaa !396
  %2446 = getelementptr inbounds i16, i16* %2410, i64 5
  %2447 = bitcast i16* %2446 to <16 x i16>*
  %2448 = load <16 x i16>, <16 x i16>* %2447, align 2, !tbaa !396
  %2449 = getelementptr inbounds i16, i16* %2410, i64 21
  %2450 = bitcast i16* %2449 to <16 x i16>*
  %2451 = load <16 x i16>, <16 x i16>* %2450, align 2, !tbaa !396
  %2452 = add <16 x i16> %2418, %2413
  %2453 = add <16 x i16> %2452, %2424
  %2454 = add <16 x i16> %2453, %2430
  %2455 = add <16 x i16> %2454, %2436
  %2456 = add <16 x i16> %2455, %2442
  %2457 = add <16 x i16> %2456, %2448
  %2458 = add <16 x i16> %2421, %2416
  %2459 = add <16 x i16> %2458, %2427
  %2460 = add <16 x i16> %2459, %2433
  %2461 = add <16 x i16> %2460, %2439
  %2462 = add <16 x i16> %2461, %2445
  %2463 = add <16 x i16> %2462, %2451
  %2464 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2457, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2465 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2463, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2466 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2464, <16 x i16> %2457)
  %2467 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2465, <16 x i16> %2463)
  %2468 = shufflevector <16 x i16> %2466, <16 x i16> %2467, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2469 = lshr <32 x i16> %2468, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2470 = shufflevector <32 x i16> %2469, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2471 = sext i32 %blur_x.s0.x.v1.base.s110 to i64
  %2472 = add nsw i64 %2471, %2332
  %2473 = getelementptr inbounds i16, i16* %blur_x, i64 %2472
  %2474 = bitcast i16* %2473 to <16 x i16>*
  store <16 x i16> %2470, <16 x i16>* %2474, align 2, !tbaa !399
  %2475 = shufflevector <32 x i16> %2469, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2476 = getelementptr inbounds i16, i16* %2473, i64 16
  %2477 = bitcast i16* %2476 to <16 x i16>*
  store <16 x i16> %2475, <16 x i16>* %2477, align 2, !tbaa !399
  br label %after_bb106

after_bb111:                                      ; preds = %"end for blur_y.s0.x.x.rebased104.after_bb111_crit_edge", %"produce blur_x114"
  %.pre-phi3524 = phi i32 [ %.pre3523, %"end for blur_y.s0.x.x.rebased104.after_bb111_crit_edge" ], [ %2543, %"produce blur_x114" ]
  %2478 = mul nsw i32 %.pre-phi3524, %a73
  %t1756 = sub nsw i32 %2478, %t1689
  br i1 %100, label %"for blur_y.s0.x.x.rebased115.preheader", label %"end for blur_y.s0.x.x.rebased116", !prof !386

"for blur_y.s0.x.x.rebased115.preheader":         ; preds = %after_bb111
  %2479 = sext i32 %t1756 to i64
  br label %"for blur_y.s0.x.x.rebased115"

"produce blur_x114":                              ; preds = %"end for blur_y.s0.x.x.rebased104"
  %2480 = getelementptr inbounds i16, i16* %read_input, i64 %112
  %2481 = getelementptr inbounds i16, i16* %2480, i64 -31
  %2482 = bitcast i16* %2481 to <16 x i16>*
  %2483 = load <16 x i16>, <16 x i16>* %2482, align 2, !tbaa !396
  %2484 = getelementptr inbounds i16, i16* %2480, i64 -15
  %2485 = bitcast i16* %2484 to <16 x i16>*
  %2486 = load <16 x i16>, <16 x i16>* %2485, align 2, !tbaa !396
  %2487 = getelementptr inbounds i16, i16* %2480, i64 -32
  %2488 = bitcast i16* %2487 to <16 x i16>*
  %2489 = load <16 x i16>, <16 x i16>* %2488, align 2, !tbaa !396
  %2490 = getelementptr inbounds i16, i16* %2480, i64 -16
  %2491 = bitcast i16* %2490 to <16 x i16>*
  %2492 = load <16 x i16>, <16 x i16>* %2491, align 2, !tbaa !396
  %2493 = getelementptr inbounds i16, i16* %2480, i64 -30
  %2494 = bitcast i16* %2493 to <16 x i16>*
  %2495 = load <16 x i16>, <16 x i16>* %2494, align 2, !tbaa !396
  %2496 = getelementptr inbounds i16, i16* %2480, i64 -14
  %2497 = bitcast i16* %2496 to <16 x i16>*
  %2498 = load <16 x i16>, <16 x i16>* %2497, align 2, !tbaa !396
  %2499 = getelementptr inbounds i16, i16* %2480, i64 -29
  %2500 = bitcast i16* %2499 to <16 x i16>*
  %2501 = load <16 x i16>, <16 x i16>* %2500, align 2, !tbaa !396
  %2502 = getelementptr inbounds i16, i16* %2480, i64 -13
  %2503 = bitcast i16* %2502 to <16 x i16>*
  %2504 = load <16 x i16>, <16 x i16>* %2503, align 2, !tbaa !396
  %2505 = getelementptr inbounds i16, i16* %2480, i64 -28
  %2506 = bitcast i16* %2505 to <16 x i16>*
  %2507 = load <16 x i16>, <16 x i16>* %2506, align 2, !tbaa !396
  %2508 = getelementptr inbounds i16, i16* %2480, i64 -12
  %2509 = bitcast i16* %2508 to <16 x i16>*
  %2510 = load <16 x i16>, <16 x i16>* %2509, align 2, !tbaa !396
  %2511 = getelementptr inbounds i16, i16* %2480, i64 -26
  %2512 = bitcast i16* %2511 to <16 x i16>*
  %2513 = load <16 x i16>, <16 x i16>* %2512, align 2, !tbaa !396
  %2514 = getelementptr inbounds i16, i16* %2480, i64 -10
  %2515 = bitcast i16* %2514 to <16 x i16>*
  %2516 = load <16 x i16>, <16 x i16>* %2515, align 2, !tbaa !396
  %2517 = getelementptr inbounds i16, i16* %2480, i64 -27
  %2518 = bitcast i16* %2517 to <16 x i16>*
  %2519 = load <16 x i16>, <16 x i16>* %2518, align 2, !tbaa !396
  %2520 = getelementptr inbounds i16, i16* %2480, i64 -11
  %2521 = bitcast i16* %2520 to <16 x i16>*
  %2522 = load <16 x i16>, <16 x i16>* %2521, align 2, !tbaa !396
  %2523 = add <16 x i16> %2489, %2483
  %2524 = add <16 x i16> %2523, %2495
  %2525 = add <16 x i16> %2524, %2501
  %2526 = add <16 x i16> %2525, %2507
  %2527 = add <16 x i16> %2526, %2513
  %2528 = add <16 x i16> %2527, %2519
  %2529 = add <16 x i16> %2492, %2486
  %2530 = add <16 x i16> %2529, %2498
  %2531 = add <16 x i16> %2530, %2504
  %2532 = add <16 x i16> %2531, %2510
  %2533 = add <16 x i16> %2532, %2516
  %2534 = add <16 x i16> %2533, %2522
  %2535 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2528, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2536 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2534, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2537 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2535, <16 x i16> %2528)
  %2538 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2536, <16 x i16> %2534)
  %2539 = shufflevector <16 x i16> %2537, <16 x i16> %2538, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2540 = lshr <32 x i16> %2539, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2541 = shufflevector <32 x i16> %2540, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2542 = add nsw i32 %a26, 5
  %2543 = and i32 %2542, 7
  %2544 = zext i32 %2543 to i64
  %2545 = mul nsw i64 %97, %2544
  %2546 = add nsw i64 %99, %2545
  %2547 = getelementptr inbounds i16, i16* %blur_x, i64 %2546
  %2548 = getelementptr inbounds i16, i16* %2547, i64 -32
  %2549 = bitcast i16* %2548 to <16 x i16>*
  store <16 x i16> %2541, <16 x i16>* %2549, align 2, !tbaa !399
  %2550 = shufflevector <32 x i16> %2540, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2551 = getelementptr inbounds i16, i16* %2547, i64 -16
  %2552 = bitcast i16* %2551 to <16 x i16>*
  store <16 x i16> %2550, <16 x i16>* %2552, align 2, !tbaa !399
  br label %after_bb111

"for blur_y.s0.x.x.rebased115":                   ; preds = %"for blur_y.s0.x.x.rebased115.preheader", %after_bb118
  %indvars.iv3276 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased115.preheader" ], [ %indvars.iv.next3277, %after_bb118 ]
  %2553 = add nsw i64 %indvars.iv3276, %101
  %2554 = icmp slt i64 %2553, 1
  %2555 = trunc i64 %2553 to i32
  %2556 = shl nsw i32 %2555, 5
  %2557 = icmp sgt i32 %4, %2556
  %2558 = or i1 %2554, %2557
  br i1 %2558, label %"produce blur_x121", label %after_bb118

"end for blur_y.s0.x.x.rebased116":               ; preds = %after_bb118, %after_bb111
  br i1 %102, label %"for blur_y.s0.x.x.rebased122.preheader", label %"end for blur_y.s0.x.x.rebased123", !prof !386

"for blur_y.s0.x.x.rebased122.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased116"
  %2559 = sext i32 %t1756 to i64
  br label %"for blur_y.s0.x.x.rebased122"

after_bb118:                                      ; preds = %"for blur_y.s0.x.x.rebased115", %"produce blur_x121"
  %indvars.iv.next3277 = add nuw nsw i64 %indvars.iv3276, 1
  %.not2802 = icmp eq i64 %indvars.iv.next3277, %188
  br i1 %.not2802, label %"end for blur_y.s0.x.x.rebased116", label %"for blur_y.s0.x.x.rebased115"

"produce blur_x121":                              ; preds = %"for blur_y.s0.x.x.rebased115"
  %t742 = add nsw i32 %2556, %t1755
  %2560 = sext i32 %t742 to i64
  %2561 = getelementptr inbounds i16, i16* %read_input, i64 %2560
  %2562 = getelementptr inbounds i16, i16* %2561, i64 1
  %2563 = bitcast i16* %2562 to <16 x i16>*
  %2564 = load <16 x i16>, <16 x i16>* %2563, align 2, !tbaa !396
  %2565 = getelementptr inbounds i16, i16* %2561, i64 17
  %2566 = bitcast i16* %2565 to <16 x i16>*
  %2567 = load <16 x i16>, <16 x i16>* %2566, align 2, !tbaa !396
  %2568 = bitcast i16* %2561 to <16 x i16>*
  %2569 = load <16 x i16>, <16 x i16>* %2568, align 2, !tbaa !396
  %2570 = getelementptr inbounds i16, i16* %2561, i64 16
  %2571 = bitcast i16* %2570 to <16 x i16>*
  %2572 = load <16 x i16>, <16 x i16>* %2571, align 2, !tbaa !396
  %2573 = getelementptr inbounds i16, i16* %2561, i64 2
  %2574 = bitcast i16* %2573 to <16 x i16>*
  %2575 = load <16 x i16>, <16 x i16>* %2574, align 2, !tbaa !396
  %2576 = getelementptr inbounds i16, i16* %2561, i64 18
  %2577 = bitcast i16* %2576 to <16 x i16>*
  %2578 = load <16 x i16>, <16 x i16>* %2577, align 2, !tbaa !396
  %2579 = getelementptr inbounds i16, i16* %2561, i64 3
  %2580 = bitcast i16* %2579 to <16 x i16>*
  %2581 = load <16 x i16>, <16 x i16>* %2580, align 2, !tbaa !396
  %2582 = getelementptr inbounds i16, i16* %2561, i64 19
  %2583 = bitcast i16* %2582 to <16 x i16>*
  %2584 = load <16 x i16>, <16 x i16>* %2583, align 2, !tbaa !396
  %2585 = getelementptr inbounds i16, i16* %2561, i64 4
  %2586 = bitcast i16* %2585 to <16 x i16>*
  %2587 = load <16 x i16>, <16 x i16>* %2586, align 2, !tbaa !396
  %2588 = getelementptr inbounds i16, i16* %2561, i64 20
  %2589 = bitcast i16* %2588 to <16 x i16>*
  %2590 = load <16 x i16>, <16 x i16>* %2589, align 2, !tbaa !396
  %2591 = getelementptr inbounds i16, i16* %2561, i64 6
  %2592 = bitcast i16* %2591 to <16 x i16>*
  %2593 = load <16 x i16>, <16 x i16>* %2592, align 2, !tbaa !396
  %2594 = getelementptr inbounds i16, i16* %2561, i64 22
  %2595 = bitcast i16* %2594 to <16 x i16>*
  %2596 = load <16 x i16>, <16 x i16>* %2595, align 2, !tbaa !396
  %2597 = getelementptr inbounds i16, i16* %2561, i64 5
  %2598 = bitcast i16* %2597 to <16 x i16>*
  %2599 = load <16 x i16>, <16 x i16>* %2598, align 2, !tbaa !396
  %2600 = getelementptr inbounds i16, i16* %2561, i64 21
  %2601 = bitcast i16* %2600 to <16 x i16>*
  %2602 = load <16 x i16>, <16 x i16>* %2601, align 2, !tbaa !396
  %2603 = add <16 x i16> %2569, %2564
  %2604 = add <16 x i16> %2603, %2575
  %2605 = add <16 x i16> %2604, %2581
  %2606 = add <16 x i16> %2605, %2587
  %2607 = add <16 x i16> %2606, %2593
  %2608 = add <16 x i16> %2607, %2599
  %2609 = add <16 x i16> %2572, %2567
  %2610 = add <16 x i16> %2609, %2578
  %2611 = add <16 x i16> %2610, %2584
  %2612 = add <16 x i16> %2611, %2590
  %2613 = add <16 x i16> %2612, %2596
  %2614 = add <16 x i16> %2613, %2602
  %2615 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2608, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2616 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2614, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2617 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2615, <16 x i16> %2608)
  %2618 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2616, <16 x i16> %2614)
  %2619 = shufflevector <16 x i16> %2617, <16 x i16> %2618, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2620 = lshr <32 x i16> %2619, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2621 = shufflevector <32 x i16> %2620, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2622 = shl nsw i64 %2553, 5
  %2623 = add nsw i64 %2622, %2479
  %2624 = getelementptr inbounds i16, i16* %blur_x, i64 %2623
  %2625 = bitcast i16* %2624 to <16 x i16>*
  store <16 x i16> %2621, <16 x i16>* %2625, align 2, !tbaa !399
  %2626 = shufflevector <32 x i16> %2620, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2627 = getelementptr inbounds i16, i16* %2624, i64 16
  %2628 = bitcast i16* %2627 to <16 x i16>*
  store <16 x i16> %2626, <16 x i16>* %2628, align 2, !tbaa !399
  br label %after_bb118

"for blur_y.s0.x.x.rebased122":                   ; preds = %"for blur_y.s0.x.x.rebased122.preheader", %after_bb125
  %blur_y.s0.x.x.rebased124 = phi i32 [ %2633, %after_bb125 ], [ 0, %"for blur_y.s0.x.x.rebased122.preheader" ]
  %t2285 = add nsw i32 %blur_y.s0.x.x.rebased124, %t1670
  %2629 = icmp slt i32 %t2285, 1
  %2630 = shl nsw i32 %t2285, 5
  %2631 = icmp sgt i32 %4, %2630
  %2632 = or i1 %2629, %2631
  br i1 %2632, label %then_bb126, label %after_bb125

"end for blur_y.s0.x.x.rebased123":               ; preds = %after_bb125, %"end for blur_y.s0.x.x.rebased116"
  br i1 %34, label %"produce blur_x133", label %"end for blur_y.s0.x.x.rebased123.after_bb130_crit_edge"

"end for blur_y.s0.x.x.rebased123.after_bb130_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased123"
  %.pre3525 = add nsw i32 %a26, 6
  %.pre3527 = and i32 %.pre3525, 7
  br label %after_bb130

after_bb125:                                      ; preds = %"for blur_y.s0.x.x.rebased122", %then_bb126
  %2633 = add nuw nsw i32 %blur_y.s0.x.x.rebased124, 1
  %.not2801 = icmp eq i32 %2633, %t1727
  br i1 %.not2801, label %"end for blur_y.s0.x.x.rebased123", label %"for blur_y.s0.x.x.rebased122"

then_bb126:                                       ; preds = %"for blur_y.s0.x.x.rebased122"
  %2634 = icmp sgt i32 %a14, %2630
  %b118 = select i1 %2634, i32 %2630, i32 %a14
  %2635 = icmp slt i32 %b118, %4
  %blur_x.s0.x.v1.base.s129 = select i1 %2635, i32 %b118, i32 %4
  %t744 = add nsw i32 %blur_x.s0.x.v1.base.s129, %t1755
  %2636 = sext i32 %t744 to i64
  %2637 = getelementptr inbounds i16, i16* %read_input, i64 %2636
  %2638 = getelementptr inbounds i16, i16* %2637, i64 1
  %2639 = bitcast i16* %2638 to <16 x i16>*
  %2640 = load <16 x i16>, <16 x i16>* %2639, align 2, !tbaa !396
  %2641 = getelementptr inbounds i16, i16* %2637, i64 17
  %2642 = bitcast i16* %2641 to <16 x i16>*
  %2643 = load <16 x i16>, <16 x i16>* %2642, align 2, !tbaa !396
  %2644 = bitcast i16* %2637 to <16 x i16>*
  %2645 = load <16 x i16>, <16 x i16>* %2644, align 2, !tbaa !396
  %2646 = getelementptr inbounds i16, i16* %2637, i64 16
  %2647 = bitcast i16* %2646 to <16 x i16>*
  %2648 = load <16 x i16>, <16 x i16>* %2647, align 2, !tbaa !396
  %2649 = getelementptr inbounds i16, i16* %2637, i64 2
  %2650 = bitcast i16* %2649 to <16 x i16>*
  %2651 = load <16 x i16>, <16 x i16>* %2650, align 2, !tbaa !396
  %2652 = getelementptr inbounds i16, i16* %2637, i64 18
  %2653 = bitcast i16* %2652 to <16 x i16>*
  %2654 = load <16 x i16>, <16 x i16>* %2653, align 2, !tbaa !396
  %2655 = getelementptr inbounds i16, i16* %2637, i64 3
  %2656 = bitcast i16* %2655 to <16 x i16>*
  %2657 = load <16 x i16>, <16 x i16>* %2656, align 2, !tbaa !396
  %2658 = getelementptr inbounds i16, i16* %2637, i64 19
  %2659 = bitcast i16* %2658 to <16 x i16>*
  %2660 = load <16 x i16>, <16 x i16>* %2659, align 2, !tbaa !396
  %2661 = getelementptr inbounds i16, i16* %2637, i64 4
  %2662 = bitcast i16* %2661 to <16 x i16>*
  %2663 = load <16 x i16>, <16 x i16>* %2662, align 2, !tbaa !396
  %2664 = getelementptr inbounds i16, i16* %2637, i64 20
  %2665 = bitcast i16* %2664 to <16 x i16>*
  %2666 = load <16 x i16>, <16 x i16>* %2665, align 2, !tbaa !396
  %2667 = getelementptr inbounds i16, i16* %2637, i64 6
  %2668 = bitcast i16* %2667 to <16 x i16>*
  %2669 = load <16 x i16>, <16 x i16>* %2668, align 2, !tbaa !396
  %2670 = getelementptr inbounds i16, i16* %2637, i64 22
  %2671 = bitcast i16* %2670 to <16 x i16>*
  %2672 = load <16 x i16>, <16 x i16>* %2671, align 2, !tbaa !396
  %2673 = getelementptr inbounds i16, i16* %2637, i64 5
  %2674 = bitcast i16* %2673 to <16 x i16>*
  %2675 = load <16 x i16>, <16 x i16>* %2674, align 2, !tbaa !396
  %2676 = getelementptr inbounds i16, i16* %2637, i64 21
  %2677 = bitcast i16* %2676 to <16 x i16>*
  %2678 = load <16 x i16>, <16 x i16>* %2677, align 2, !tbaa !396
  %2679 = add <16 x i16> %2645, %2640
  %2680 = add <16 x i16> %2679, %2651
  %2681 = add <16 x i16> %2680, %2657
  %2682 = add <16 x i16> %2681, %2663
  %2683 = add <16 x i16> %2682, %2669
  %2684 = add <16 x i16> %2683, %2675
  %2685 = add <16 x i16> %2648, %2643
  %2686 = add <16 x i16> %2685, %2654
  %2687 = add <16 x i16> %2686, %2660
  %2688 = add <16 x i16> %2687, %2666
  %2689 = add <16 x i16> %2688, %2672
  %2690 = add <16 x i16> %2689, %2678
  %2691 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2684, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2692 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2690, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2693 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2691, <16 x i16> %2684)
  %2694 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2692, <16 x i16> %2690)
  %2695 = shufflevector <16 x i16> %2693, <16 x i16> %2694, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2696 = lshr <32 x i16> %2695, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2697 = shufflevector <32 x i16> %2696, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2698 = sext i32 %blur_x.s0.x.v1.base.s129 to i64
  %2699 = add nsw i64 %2698, %2559
  %2700 = getelementptr inbounds i16, i16* %blur_x, i64 %2699
  %2701 = bitcast i16* %2700 to <16 x i16>*
  store <16 x i16> %2697, <16 x i16>* %2701, align 2, !tbaa !399
  %2702 = shufflevector <32 x i16> %2696, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2703 = getelementptr inbounds i16, i16* %2700, i64 16
  %2704 = bitcast i16* %2703 to <16 x i16>*
  store <16 x i16> %2702, <16 x i16>* %2704, align 2, !tbaa !399
  br label %after_bb125

after_bb130:                                      ; preds = %"end for blur_y.s0.x.x.rebased123.after_bb130_crit_edge", %"produce blur_x133"
  %.pre-phi3528 = phi i32 [ %.pre3527, %"end for blur_y.s0.x.x.rebased123.after_bb130_crit_edge" ], [ %2794, %"produce blur_x133" ]
  %2705 = mul nsw i32 %.pre-phi3528, %a73
  %t1762 = sub nsw i32 %2705, %t1689
  br i1 %100, label %"for blur_y.s0.x.x.rebased134.preheader", label %"end for blur_y.s0.x.x.rebased135", !prof !386

"for blur_y.s0.x.x.rebased134.preheader":         ; preds = %after_bb130
  %2706 = sext i32 %t1762 to i64
  %2707 = zext i32 %.pre-phi3508 to i64
  %2708 = mul nsw i64 %2707, %116
  %2709 = sub nsw i64 %2708, %96
  %2710 = zext i32 %.pre-phi to i64
  %2711 = mul nsw i64 %2710, %116
  %2712 = sub nsw i64 %2711, %96
  %2713 = zext i32 %.pre-phi3512 to i64
  %2714 = mul nsw i64 %2713, %116
  %2715 = sub nsw i64 %2714, %96
  %2716 = zext i32 %.pre-phi3516 to i64
  %2717 = mul nsw i64 %2716, %116
  %2718 = sub nsw i64 %2717, %96
  %2719 = zext i32 %.pre-phi3520 to i64
  %2720 = mul nsw i64 %2719, %116
  %2721 = sub nsw i64 %2720, %96
  %2722 = zext i32 %.pre-phi3528 to i64
  %2723 = mul nsw i64 %2722, %116
  %2724 = sub nsw i64 %2723, %96
  %2725 = zext i32 %.pre-phi3524 to i64
  %2726 = mul nsw i64 %2725, %116
  %2727 = sub nsw i64 %2726, %96
  %2728 = sext i32 %a26 to i64
  %2729 = mul nsw i64 %2728, %117
  %2730 = add nsw i64 %2729, %120
  br label %"for blur_y.s0.x.x.rebased134"

"produce blur_x133":                              ; preds = %"end for blur_y.s0.x.x.rebased123"
  %2731 = getelementptr inbounds i16, i16* %read_input, i64 %115
  %2732 = getelementptr inbounds i16, i16* %2731, i64 -31
  %2733 = bitcast i16* %2732 to <16 x i16>*
  %2734 = load <16 x i16>, <16 x i16>* %2733, align 2, !tbaa !396
  %2735 = getelementptr inbounds i16, i16* %2731, i64 -15
  %2736 = bitcast i16* %2735 to <16 x i16>*
  %2737 = load <16 x i16>, <16 x i16>* %2736, align 2, !tbaa !396
  %2738 = getelementptr inbounds i16, i16* %2731, i64 -32
  %2739 = bitcast i16* %2738 to <16 x i16>*
  %2740 = load <16 x i16>, <16 x i16>* %2739, align 2, !tbaa !396
  %2741 = getelementptr inbounds i16, i16* %2731, i64 -16
  %2742 = bitcast i16* %2741 to <16 x i16>*
  %2743 = load <16 x i16>, <16 x i16>* %2742, align 2, !tbaa !396
  %2744 = getelementptr inbounds i16, i16* %2731, i64 -30
  %2745 = bitcast i16* %2744 to <16 x i16>*
  %2746 = load <16 x i16>, <16 x i16>* %2745, align 2, !tbaa !396
  %2747 = getelementptr inbounds i16, i16* %2731, i64 -14
  %2748 = bitcast i16* %2747 to <16 x i16>*
  %2749 = load <16 x i16>, <16 x i16>* %2748, align 2, !tbaa !396
  %2750 = getelementptr inbounds i16, i16* %2731, i64 -29
  %2751 = bitcast i16* %2750 to <16 x i16>*
  %2752 = load <16 x i16>, <16 x i16>* %2751, align 2, !tbaa !396
  %2753 = getelementptr inbounds i16, i16* %2731, i64 -13
  %2754 = bitcast i16* %2753 to <16 x i16>*
  %2755 = load <16 x i16>, <16 x i16>* %2754, align 2, !tbaa !396
  %2756 = getelementptr inbounds i16, i16* %2731, i64 -28
  %2757 = bitcast i16* %2756 to <16 x i16>*
  %2758 = load <16 x i16>, <16 x i16>* %2757, align 2, !tbaa !396
  %2759 = getelementptr inbounds i16, i16* %2731, i64 -12
  %2760 = bitcast i16* %2759 to <16 x i16>*
  %2761 = load <16 x i16>, <16 x i16>* %2760, align 2, !tbaa !396
  %2762 = getelementptr inbounds i16, i16* %2731, i64 -26
  %2763 = bitcast i16* %2762 to <16 x i16>*
  %2764 = load <16 x i16>, <16 x i16>* %2763, align 2, !tbaa !396
  %2765 = getelementptr inbounds i16, i16* %2731, i64 -10
  %2766 = bitcast i16* %2765 to <16 x i16>*
  %2767 = load <16 x i16>, <16 x i16>* %2766, align 2, !tbaa !396
  %2768 = getelementptr inbounds i16, i16* %2731, i64 -27
  %2769 = bitcast i16* %2768 to <16 x i16>*
  %2770 = load <16 x i16>, <16 x i16>* %2769, align 2, !tbaa !396
  %2771 = getelementptr inbounds i16, i16* %2731, i64 -11
  %2772 = bitcast i16* %2771 to <16 x i16>*
  %2773 = load <16 x i16>, <16 x i16>* %2772, align 2, !tbaa !396
  %2774 = add <16 x i16> %2740, %2734
  %2775 = add <16 x i16> %2774, %2746
  %2776 = add <16 x i16> %2775, %2752
  %2777 = add <16 x i16> %2776, %2758
  %2778 = add <16 x i16> %2777, %2764
  %2779 = add <16 x i16> %2778, %2770
  %2780 = add <16 x i16> %2743, %2737
  %2781 = add <16 x i16> %2780, %2749
  %2782 = add <16 x i16> %2781, %2755
  %2783 = add <16 x i16> %2782, %2761
  %2784 = add <16 x i16> %2783, %2767
  %2785 = add <16 x i16> %2784, %2773
  %2786 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2779, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2787 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2785, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2788 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2786, <16 x i16> %2779)
  %2789 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2787, <16 x i16> %2785)
  %2790 = shufflevector <16 x i16> %2788, <16 x i16> %2789, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2791 = lshr <32 x i16> %2790, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2792 = shufflevector <32 x i16> %2791, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2793 = add nsw i32 %a26, 6
  %2794 = and i32 %2793, 7
  %2795 = zext i32 %2794 to i64
  %2796 = mul nsw i64 %97, %2795
  %2797 = add nsw i64 %99, %2796
  %2798 = getelementptr inbounds i16, i16* %blur_x, i64 %2797
  %2799 = getelementptr inbounds i16, i16* %2798, i64 -32
  %2800 = bitcast i16* %2799 to <16 x i16>*
  store <16 x i16> %2792, <16 x i16>* %2800, align 2, !tbaa !399
  %2801 = shufflevector <32 x i16> %2791, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2802 = getelementptr inbounds i16, i16* %2798, i64 -16
  %2803 = bitcast i16* %2802 to <16 x i16>*
  store <16 x i16> %2801, <16 x i16>* %2803, align 2, !tbaa !399
  %2804 = zext i32 %.pre-phi3508 to i64
  %2805 = mul nsw i64 %2804, %116
  %2806 = add nsw i64 %2805, %94
  %2807 = getelementptr inbounds i16, i16* %blur_x, i64 %2806
  %2808 = getelementptr inbounds i16, i16* %2807, i64 -32
  %2809 = bitcast i16* %2808 to <16 x i16>*
  %2810 = load <16 x i16>, <16 x i16>* %2809, align 2, !tbaa !399
  %2811 = getelementptr inbounds i16, i16* %2807, i64 -16
  %2812 = bitcast i16* %2811 to <16 x i16>*
  %2813 = load <16 x i16>, <16 x i16>* %2812, align 2, !tbaa !399
  %2814 = zext i32 %.pre-phi to i64
  %2815 = mul nsw i64 %2814, %116
  %2816 = add nsw i64 %2815, %94
  %2817 = getelementptr inbounds i16, i16* %blur_x, i64 %2816
  %2818 = getelementptr inbounds i16, i16* %2817, i64 -32
  %2819 = bitcast i16* %2818 to <16 x i16>*
  %2820 = load <16 x i16>, <16 x i16>* %2819, align 2, !tbaa !399
  %2821 = getelementptr inbounds i16, i16* %2817, i64 -16
  %2822 = bitcast i16* %2821 to <16 x i16>*
  %2823 = load <16 x i16>, <16 x i16>* %2822, align 2, !tbaa !399
  %2824 = zext i32 %.pre-phi3512 to i64
  %2825 = mul nsw i64 %2824, %116
  %2826 = add nsw i64 %2825, %94
  %2827 = getelementptr inbounds i16, i16* %blur_x, i64 %2826
  %2828 = getelementptr inbounds i16, i16* %2827, i64 -32
  %2829 = bitcast i16* %2828 to <16 x i16>*
  %2830 = load <16 x i16>, <16 x i16>* %2829, align 2, !tbaa !399
  %2831 = getelementptr inbounds i16, i16* %2827, i64 -16
  %2832 = bitcast i16* %2831 to <16 x i16>*
  %2833 = load <16 x i16>, <16 x i16>* %2832, align 2, !tbaa !399
  %2834 = zext i32 %.pre-phi3516 to i64
  %2835 = mul nsw i64 %2834, %116
  %2836 = add nsw i64 %2835, %94
  %2837 = getelementptr inbounds i16, i16* %blur_x, i64 %2836
  %2838 = getelementptr inbounds i16, i16* %2837, i64 -32
  %2839 = bitcast i16* %2838 to <16 x i16>*
  %2840 = load <16 x i16>, <16 x i16>* %2839, align 2, !tbaa !399
  %2841 = getelementptr inbounds i16, i16* %2837, i64 -16
  %2842 = bitcast i16* %2841 to <16 x i16>*
  %2843 = load <16 x i16>, <16 x i16>* %2842, align 2, !tbaa !399
  %2844 = zext i32 %.pre-phi3520 to i64
  %2845 = mul nsw i64 %2844, %116
  %2846 = add nsw i64 %2845, %94
  %2847 = getelementptr inbounds i16, i16* %blur_x, i64 %2846
  %2848 = getelementptr inbounds i16, i16* %2847, i64 -32
  %2849 = bitcast i16* %2848 to <16 x i16>*
  %2850 = load <16 x i16>, <16 x i16>* %2849, align 2, !tbaa !399
  %2851 = getelementptr inbounds i16, i16* %2847, i64 -16
  %2852 = bitcast i16* %2851 to <16 x i16>*
  %2853 = load <16 x i16>, <16 x i16>* %2852, align 2, !tbaa !399
  %2854 = mul nsw i64 %2795, %116
  %2855 = add nsw i64 %2854, %94
  %2856 = getelementptr inbounds i16, i16* %blur_x, i64 %2855
  %2857 = getelementptr inbounds i16, i16* %2856, i64 -32
  %2858 = bitcast i16* %2857 to <16 x i16>*
  %2859 = load <16 x i16>, <16 x i16>* %2858, align 2, !tbaa !399
  %2860 = getelementptr inbounds i16, i16* %2856, i64 -16
  %2861 = bitcast i16* %2860 to <16 x i16>*
  %2862 = load <16 x i16>, <16 x i16>* %2861, align 2, !tbaa !399
  %2863 = zext i32 %.pre-phi3524 to i64
  %2864 = mul nsw i64 %2863, %116
  %2865 = add nsw i64 %2864, %94
  %2866 = getelementptr inbounds i16, i16* %blur_x, i64 %2865
  %2867 = getelementptr inbounds i16, i16* %2866, i64 -32
  %2868 = bitcast i16* %2867 to <16 x i16>*
  %2869 = load <16 x i16>, <16 x i16>* %2868, align 2, !tbaa !399
  %2870 = getelementptr inbounds i16, i16* %2866, i64 -16
  %2871 = bitcast i16* %2870 to <16 x i16>*
  %2872 = load <16 x i16>, <16 x i16>* %2871, align 2, !tbaa !399
  %2873 = add <16 x i16> %2820, %2810
  %2874 = add <16 x i16> %2873, %2830
  %2875 = add <16 x i16> %2874, %2840
  %2876 = add <16 x i16> %2875, %2850
  %2877 = add <16 x i16> %2876, %2859
  %2878 = add <16 x i16> %2877, %2869
  %2879 = add <16 x i16> %2823, %2813
  %2880 = add <16 x i16> %2879, %2833
  %2881 = add <16 x i16> %2880, %2843
  %2882 = add <16 x i16> %2881, %2853
  %2883 = add <16 x i16> %2882, %2862
  %2884 = add <16 x i16> %2883, %2872
  %2885 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2878, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2886 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2884, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2887 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2885, <16 x i16> %2878)
  %2888 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2886, <16 x i16> %2884)
  %2889 = shufflevector <16 x i16> %2887, <16 x i16> %2888, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2890 = lshr <32 x i16> %2889, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2891 = shufflevector <32 x i16> %2890, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2892 = sext i32 %a26 to i64
  %2893 = mul nsw i64 %2892, %117
  %2894 = add nsw i64 %119, %2893
  %2895 = getelementptr inbounds i16, i16* %66, i64 %2894
  %2896 = getelementptr inbounds i16, i16* %2895, i64 -32
  %2897 = bitcast i16* %2896 to <16 x i16>*
  store <16 x i16> %2891, <16 x i16>* %2897, align 2, !tbaa !401
  %2898 = shufflevector <32 x i16> %2890, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2899 = getelementptr inbounds i16, i16* %2895, i64 -16
  %2900 = bitcast i16* %2899 to <16 x i16>*
  store <16 x i16> %2898, <16 x i16>* %2900, align 2, !tbaa !401
  br label %after_bb130

"for blur_y.s0.x.x.rebased134":                   ; preds = %"for blur_y.s0.x.x.rebased134.preheader", %"consume blur_x141"
  %indvars.iv3279 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased134.preheader" ], [ %indvars.iv.next3280, %"consume blur_x141" ]
  %2901 = add nsw i64 %indvars.iv3279, %101
  %2902 = icmp slt i64 %2901, 1
  %2903 = trunc i64 %2901 to i32
  %2904 = shl nsw i32 %2903, 5
  %2905 = icmp sgt i32 %4, %2904
  %2906 = or i1 %2902, %2905
  br i1 %2906, label %"produce blur_x140", label %"for blur_y.s0.x.x.rebased134.consume blur_x141_crit_edge"

"for blur_y.s0.x.x.rebased134.consume blur_x141_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased134"
  %.pre3529 = shl nsw i64 %2901, 5
  br label %"consume blur_x141"

"end for blur_y.s0.x.x.rebased135":               ; preds = %"consume blur_x141", %after_bb130
  br i1 %102, label %"for blur_y.s0.x.x.rebased142.preheader", label %"end for blur_y.s0.x.x.rebased143", !prof !386

"for blur_y.s0.x.x.rebased142.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased135"
  %2907 = sext i32 %t1762 to i64
  %2908 = zext i32 %.pre-phi3508 to i64
  %2909 = mul nsw i64 %2908, %116
  %2910 = sub nsw i64 %2909, %96
  %2911 = zext i32 %.pre-phi to i64
  %2912 = mul nsw i64 %2911, %116
  %2913 = sub nsw i64 %2912, %96
  %2914 = zext i32 %.pre-phi3512 to i64
  %2915 = mul nsw i64 %2914, %116
  %2916 = sub nsw i64 %2915, %96
  %2917 = zext i32 %.pre-phi3516 to i64
  %2918 = mul nsw i64 %2917, %116
  %2919 = sub nsw i64 %2918, %96
  %2920 = zext i32 %.pre-phi3520 to i64
  %2921 = mul nsw i64 %2920, %116
  %2922 = sub nsw i64 %2921, %96
  %2923 = zext i32 %.pre-phi3528 to i64
  %2924 = mul nsw i64 %2923, %116
  %2925 = sub nsw i64 %2924, %96
  %2926 = zext i32 %.pre-phi3524 to i64
  %2927 = mul nsw i64 %2926, %116
  %2928 = sub nsw i64 %2927, %96
  %2929 = sext i32 %a26 to i64
  %2930 = mul nsw i64 %2929, %117
  %2931 = add nsw i64 %2930, %120
  br label %"for blur_y.s0.x.x.rebased142"

"produce blur_x140":                              ; preds = %"for blur_y.s0.x.x.rebased134"
  %t752 = add nsw i32 %2904, %113
  %2932 = sext i32 %t752 to i64
  %2933 = getelementptr inbounds i16, i16* %read_input, i64 %2932
  %2934 = getelementptr inbounds i16, i16* %2933, i64 1
  %2935 = bitcast i16* %2934 to <16 x i16>*
  %2936 = load <16 x i16>, <16 x i16>* %2935, align 2, !tbaa !396
  %2937 = getelementptr inbounds i16, i16* %2933, i64 17
  %2938 = bitcast i16* %2937 to <16 x i16>*
  %2939 = load <16 x i16>, <16 x i16>* %2938, align 2, !tbaa !396
  %2940 = bitcast i16* %2933 to <16 x i16>*
  %2941 = load <16 x i16>, <16 x i16>* %2940, align 2, !tbaa !396
  %2942 = getelementptr inbounds i16, i16* %2933, i64 16
  %2943 = bitcast i16* %2942 to <16 x i16>*
  %2944 = load <16 x i16>, <16 x i16>* %2943, align 2, !tbaa !396
  %2945 = getelementptr inbounds i16, i16* %2933, i64 2
  %2946 = bitcast i16* %2945 to <16 x i16>*
  %2947 = load <16 x i16>, <16 x i16>* %2946, align 2, !tbaa !396
  %2948 = getelementptr inbounds i16, i16* %2933, i64 18
  %2949 = bitcast i16* %2948 to <16 x i16>*
  %2950 = load <16 x i16>, <16 x i16>* %2949, align 2, !tbaa !396
  %2951 = getelementptr inbounds i16, i16* %2933, i64 3
  %2952 = bitcast i16* %2951 to <16 x i16>*
  %2953 = load <16 x i16>, <16 x i16>* %2952, align 2, !tbaa !396
  %2954 = getelementptr inbounds i16, i16* %2933, i64 19
  %2955 = bitcast i16* %2954 to <16 x i16>*
  %2956 = load <16 x i16>, <16 x i16>* %2955, align 2, !tbaa !396
  %2957 = getelementptr inbounds i16, i16* %2933, i64 4
  %2958 = bitcast i16* %2957 to <16 x i16>*
  %2959 = load <16 x i16>, <16 x i16>* %2958, align 2, !tbaa !396
  %2960 = getelementptr inbounds i16, i16* %2933, i64 20
  %2961 = bitcast i16* %2960 to <16 x i16>*
  %2962 = load <16 x i16>, <16 x i16>* %2961, align 2, !tbaa !396
  %2963 = getelementptr inbounds i16, i16* %2933, i64 6
  %2964 = bitcast i16* %2963 to <16 x i16>*
  %2965 = load <16 x i16>, <16 x i16>* %2964, align 2, !tbaa !396
  %2966 = getelementptr inbounds i16, i16* %2933, i64 22
  %2967 = bitcast i16* %2966 to <16 x i16>*
  %2968 = load <16 x i16>, <16 x i16>* %2967, align 2, !tbaa !396
  %2969 = getelementptr inbounds i16, i16* %2933, i64 5
  %2970 = bitcast i16* %2969 to <16 x i16>*
  %2971 = load <16 x i16>, <16 x i16>* %2970, align 2, !tbaa !396
  %2972 = getelementptr inbounds i16, i16* %2933, i64 21
  %2973 = bitcast i16* %2972 to <16 x i16>*
  %2974 = load <16 x i16>, <16 x i16>* %2973, align 2, !tbaa !396
  %2975 = add <16 x i16> %2941, %2936
  %2976 = add <16 x i16> %2975, %2947
  %2977 = add <16 x i16> %2976, %2953
  %2978 = add <16 x i16> %2977, %2959
  %2979 = add <16 x i16> %2978, %2965
  %2980 = add <16 x i16> %2979, %2971
  %2981 = add <16 x i16> %2944, %2939
  %2982 = add <16 x i16> %2981, %2950
  %2983 = add <16 x i16> %2982, %2956
  %2984 = add <16 x i16> %2983, %2962
  %2985 = add <16 x i16> %2984, %2968
  %2986 = add <16 x i16> %2985, %2974
  %2987 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2980, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2988 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2986, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %2989 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2987, <16 x i16> %2980)
  %2990 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %2988, <16 x i16> %2986)
  %2991 = shufflevector <16 x i16> %2989, <16 x i16> %2990, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2992 = lshr <32 x i16> %2991, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2993 = shufflevector <32 x i16> %2992, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2994 = shl nsw i64 %2901, 5
  %2995 = add nsw i64 %2994, %2706
  %2996 = getelementptr inbounds i16, i16* %blur_x, i64 %2995
  %2997 = bitcast i16* %2996 to <16 x i16>*
  store <16 x i16> %2993, <16 x i16>* %2997, align 2, !tbaa !399
  %2998 = shufflevector <32 x i16> %2992, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2999 = getelementptr inbounds i16, i16* %2996, i64 16
  %3000 = bitcast i16* %2999 to <16 x i16>*
  store <16 x i16> %2998, <16 x i16>* %3000, align 2, !tbaa !399
  br label %"consume blur_x141"

"consume blur_x141":                              ; preds = %"for blur_y.s0.x.x.rebased134.consume blur_x141_crit_edge", %"produce blur_x140"
  %.pre-phi3530 = phi i64 [ %.pre3529, %"for blur_y.s0.x.x.rebased134.consume blur_x141_crit_edge" ], [ %2994, %"produce blur_x140" ]
  %3001 = add nsw i64 %2709, %.pre-phi3530
  %3002 = getelementptr inbounds i16, i16* %blur_x, i64 %3001
  %3003 = bitcast i16* %3002 to <16 x i16>*
  %3004 = load <16 x i16>, <16 x i16>* %3003, align 2, !tbaa !399
  %3005 = getelementptr inbounds i16, i16* %3002, i64 16
  %3006 = bitcast i16* %3005 to <16 x i16>*
  %3007 = load <16 x i16>, <16 x i16>* %3006, align 2, !tbaa !399
  %3008 = add nsw i64 %2712, %.pre-phi3530
  %3009 = getelementptr inbounds i16, i16* %blur_x, i64 %3008
  %3010 = bitcast i16* %3009 to <16 x i16>*
  %3011 = load <16 x i16>, <16 x i16>* %3010, align 2, !tbaa !399
  %3012 = getelementptr inbounds i16, i16* %3009, i64 16
  %3013 = bitcast i16* %3012 to <16 x i16>*
  %3014 = load <16 x i16>, <16 x i16>* %3013, align 2, !tbaa !399
  %3015 = add nsw i64 %2715, %.pre-phi3530
  %3016 = getelementptr inbounds i16, i16* %blur_x, i64 %3015
  %3017 = bitcast i16* %3016 to <16 x i16>*
  %3018 = load <16 x i16>, <16 x i16>* %3017, align 2, !tbaa !399
  %3019 = getelementptr inbounds i16, i16* %3016, i64 16
  %3020 = bitcast i16* %3019 to <16 x i16>*
  %3021 = load <16 x i16>, <16 x i16>* %3020, align 2, !tbaa !399
  %3022 = add nsw i64 %2718, %.pre-phi3530
  %3023 = getelementptr inbounds i16, i16* %blur_x, i64 %3022
  %3024 = bitcast i16* %3023 to <16 x i16>*
  %3025 = load <16 x i16>, <16 x i16>* %3024, align 2, !tbaa !399
  %3026 = getelementptr inbounds i16, i16* %3023, i64 16
  %3027 = bitcast i16* %3026 to <16 x i16>*
  %3028 = load <16 x i16>, <16 x i16>* %3027, align 2, !tbaa !399
  %3029 = add nsw i64 %2721, %.pre-phi3530
  %3030 = getelementptr inbounds i16, i16* %blur_x, i64 %3029
  %3031 = bitcast i16* %3030 to <16 x i16>*
  %3032 = load <16 x i16>, <16 x i16>* %3031, align 2, !tbaa !399
  %3033 = getelementptr inbounds i16, i16* %3030, i64 16
  %3034 = bitcast i16* %3033 to <16 x i16>*
  %3035 = load <16 x i16>, <16 x i16>* %3034, align 2, !tbaa !399
  %3036 = add nsw i64 %2724, %.pre-phi3530
  %3037 = getelementptr inbounds i16, i16* %blur_x, i64 %3036
  %3038 = bitcast i16* %3037 to <16 x i16>*
  %3039 = load <16 x i16>, <16 x i16>* %3038, align 2, !tbaa !399
  %3040 = getelementptr inbounds i16, i16* %3037, i64 16
  %3041 = bitcast i16* %3040 to <16 x i16>*
  %3042 = load <16 x i16>, <16 x i16>* %3041, align 2, !tbaa !399
  %3043 = add nsw i64 %2727, %.pre-phi3530
  %3044 = getelementptr inbounds i16, i16* %blur_x, i64 %3043
  %3045 = bitcast i16* %3044 to <16 x i16>*
  %3046 = load <16 x i16>, <16 x i16>* %3045, align 2, !tbaa !399
  %3047 = getelementptr inbounds i16, i16* %3044, i64 16
  %3048 = bitcast i16* %3047 to <16 x i16>*
  %3049 = load <16 x i16>, <16 x i16>* %3048, align 2, !tbaa !399
  %3050 = add <16 x i16> %3011, %3004
  %3051 = add <16 x i16> %3050, %3018
  %3052 = add <16 x i16> %3051, %3025
  %3053 = add <16 x i16> %3052, %3032
  %3054 = add <16 x i16> %3053, %3039
  %3055 = add <16 x i16> %3054, %3046
  %3056 = add <16 x i16> %3014, %3007
  %3057 = add <16 x i16> %3056, %3021
  %3058 = add <16 x i16> %3057, %3028
  %3059 = add <16 x i16> %3058, %3035
  %3060 = add <16 x i16> %3059, %3042
  %3061 = add <16 x i16> %3060, %3049
  %3062 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3055, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3063 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3061, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3064 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3062, <16 x i16> %3055)
  %3065 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3063, <16 x i16> %3061)
  %3066 = shufflevector <16 x i16> %3064, <16 x i16> %3065, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3067 = lshr <32 x i16> %3066, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3068 = shufflevector <32 x i16> %3067, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3069 = add nsw i64 %2730, %.pre-phi3530
  %3070 = getelementptr inbounds i16, i16* %66, i64 %3069
  %3071 = bitcast i16* %3070 to <16 x i16>*
  store <16 x i16> %3068, <16 x i16>* %3071, align 2, !tbaa !401
  %3072 = shufflevector <32 x i16> %3067, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3073 = getelementptr inbounds i16, i16* %3070, i64 16
  %3074 = bitcast i16* %3073 to <16 x i16>*
  store <16 x i16> %3072, <16 x i16>* %3074, align 2, !tbaa !401
  %indvars.iv.next3280 = add nuw nsw i64 %indvars.iv3279, 1
  %.not2800 = icmp eq i64 %indvars.iv.next3280, %188
  br i1 %.not2800, label %"end for blur_y.s0.x.x.rebased135", label %"for blur_y.s0.x.x.rebased134"

"for blur_y.s0.x.x.rebased142":                   ; preds = %"for blur_y.s0.x.x.rebased142.preheader", %"consume blur_x150"
  %blur_y.s0.x.x.rebased144 = phi i32 [ %3225, %"consume blur_x150" ], [ 0, %"for blur_y.s0.x.x.rebased142.preheader" ]
  %3075 = add nsw i32 %blur_y.s0.x.x.rebased144, %t1670
  %a119 = shl nsw i32 %3075, 5
  %3076 = icmp sgt i32 %a14, %a119
  %b125 = select i1 %3076, i32 %a119, i32 %a14
  %3077 = icmp slt i32 %3075, 1
  %3078 = icmp sgt i32 %4, %a119
  %3079 = or i1 %3077, %3078
  br i1 %3079, label %"produce blur_x148", label %"consume blur_x150"

"end for blur_y.s0.x.x.rebased143":               ; preds = %"consume blur_x150", %"end for blur_y.s0.x.x.rebased135"
  br i1 %34, label %"produce blur_x154", label %"end for blur_y.s0.x.x.rebased143.after_bb151_crit_edge"

"end for blur_y.s0.x.x.rebased143.after_bb151_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased143"
  %.pre3531 = add nsw i32 %a26, 7
  %.pre3533 = and i32 %.pre3531, 7
  br label %after_bb151

"produce blur_x148":                              ; preds = %"for blur_y.s0.x.x.rebased142"
  %3080 = icmp slt i32 %b125, %4
  %blur_x.s0.x.v1.base.s149 = select i1 %3080, i32 %b125, i32 %4
  %t757 = add nsw i32 %blur_x.s0.x.v1.base.s149, %113
  %3081 = sext i32 %t757 to i64
  %3082 = getelementptr inbounds i16, i16* %read_input, i64 %3081
  %3083 = getelementptr inbounds i16, i16* %3082, i64 1
  %3084 = bitcast i16* %3083 to <16 x i16>*
  %3085 = load <16 x i16>, <16 x i16>* %3084, align 2, !tbaa !396
  %3086 = getelementptr inbounds i16, i16* %3082, i64 17
  %3087 = bitcast i16* %3086 to <16 x i16>*
  %3088 = load <16 x i16>, <16 x i16>* %3087, align 2, !tbaa !396
  %3089 = bitcast i16* %3082 to <16 x i16>*
  %3090 = load <16 x i16>, <16 x i16>* %3089, align 2, !tbaa !396
  %3091 = getelementptr inbounds i16, i16* %3082, i64 16
  %3092 = bitcast i16* %3091 to <16 x i16>*
  %3093 = load <16 x i16>, <16 x i16>* %3092, align 2, !tbaa !396
  %3094 = getelementptr inbounds i16, i16* %3082, i64 2
  %3095 = bitcast i16* %3094 to <16 x i16>*
  %3096 = load <16 x i16>, <16 x i16>* %3095, align 2, !tbaa !396
  %3097 = getelementptr inbounds i16, i16* %3082, i64 18
  %3098 = bitcast i16* %3097 to <16 x i16>*
  %3099 = load <16 x i16>, <16 x i16>* %3098, align 2, !tbaa !396
  %3100 = getelementptr inbounds i16, i16* %3082, i64 3
  %3101 = bitcast i16* %3100 to <16 x i16>*
  %3102 = load <16 x i16>, <16 x i16>* %3101, align 2, !tbaa !396
  %3103 = getelementptr inbounds i16, i16* %3082, i64 19
  %3104 = bitcast i16* %3103 to <16 x i16>*
  %3105 = load <16 x i16>, <16 x i16>* %3104, align 2, !tbaa !396
  %3106 = getelementptr inbounds i16, i16* %3082, i64 4
  %3107 = bitcast i16* %3106 to <16 x i16>*
  %3108 = load <16 x i16>, <16 x i16>* %3107, align 2, !tbaa !396
  %3109 = getelementptr inbounds i16, i16* %3082, i64 20
  %3110 = bitcast i16* %3109 to <16 x i16>*
  %3111 = load <16 x i16>, <16 x i16>* %3110, align 2, !tbaa !396
  %3112 = getelementptr inbounds i16, i16* %3082, i64 6
  %3113 = bitcast i16* %3112 to <16 x i16>*
  %3114 = load <16 x i16>, <16 x i16>* %3113, align 2, !tbaa !396
  %3115 = getelementptr inbounds i16, i16* %3082, i64 22
  %3116 = bitcast i16* %3115 to <16 x i16>*
  %3117 = load <16 x i16>, <16 x i16>* %3116, align 2, !tbaa !396
  %3118 = getelementptr inbounds i16, i16* %3082, i64 5
  %3119 = bitcast i16* %3118 to <16 x i16>*
  %3120 = load <16 x i16>, <16 x i16>* %3119, align 2, !tbaa !396
  %3121 = getelementptr inbounds i16, i16* %3082, i64 21
  %3122 = bitcast i16* %3121 to <16 x i16>*
  %3123 = load <16 x i16>, <16 x i16>* %3122, align 2, !tbaa !396
  %3124 = add <16 x i16> %3090, %3085
  %3125 = add <16 x i16> %3124, %3096
  %3126 = add <16 x i16> %3125, %3102
  %3127 = add <16 x i16> %3126, %3108
  %3128 = add <16 x i16> %3127, %3114
  %3129 = add <16 x i16> %3128, %3120
  %3130 = add <16 x i16> %3093, %3088
  %3131 = add <16 x i16> %3130, %3099
  %3132 = add <16 x i16> %3131, %3105
  %3133 = add <16 x i16> %3132, %3111
  %3134 = add <16 x i16> %3133, %3117
  %3135 = add <16 x i16> %3134, %3123
  %3136 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3129, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3137 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3135, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3138 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3136, <16 x i16> %3129)
  %3139 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3137, <16 x i16> %3135)
  %3140 = shufflevector <16 x i16> %3138, <16 x i16> %3139, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3141 = lshr <32 x i16> %3140, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3142 = shufflevector <32 x i16> %3141, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3143 = sext i32 %blur_x.s0.x.v1.base.s149 to i64
  %3144 = add nsw i64 %3143, %2907
  %3145 = getelementptr inbounds i16, i16* %blur_x, i64 %3144
  %3146 = bitcast i16* %3145 to <16 x i16>*
  store <16 x i16> %3142, <16 x i16>* %3146, align 2, !tbaa !399
  %3147 = shufflevector <32 x i16> %3141, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3148 = getelementptr inbounds i16, i16* %3145, i64 16
  %3149 = bitcast i16* %3148 to <16 x i16>*
  store <16 x i16> %3147, <16 x i16>* %3149, align 2, !tbaa !399
  br label %"consume blur_x150"

"consume blur_x150":                              ; preds = %"for blur_y.s0.x.x.rebased142", %"produce blur_x148"
  %3150 = sext i32 %b125 to i64
  %3151 = add nsw i64 %2910, %3150
  %3152 = getelementptr inbounds i16, i16* %blur_x, i64 %3151
  %3153 = bitcast i16* %3152 to <16 x i16>*
  %3154 = load <16 x i16>, <16 x i16>* %3153, align 2, !tbaa !399
  %3155 = getelementptr inbounds i16, i16* %3152, i64 16
  %3156 = bitcast i16* %3155 to <16 x i16>*
  %3157 = load <16 x i16>, <16 x i16>* %3156, align 2, !tbaa !399
  %3158 = add nsw i64 %2913, %3150
  %3159 = getelementptr inbounds i16, i16* %blur_x, i64 %3158
  %3160 = bitcast i16* %3159 to <16 x i16>*
  %3161 = load <16 x i16>, <16 x i16>* %3160, align 2, !tbaa !399
  %3162 = getelementptr inbounds i16, i16* %3159, i64 16
  %3163 = bitcast i16* %3162 to <16 x i16>*
  %3164 = load <16 x i16>, <16 x i16>* %3163, align 2, !tbaa !399
  %3165 = add nsw i64 %2916, %3150
  %3166 = getelementptr inbounds i16, i16* %blur_x, i64 %3165
  %3167 = bitcast i16* %3166 to <16 x i16>*
  %3168 = load <16 x i16>, <16 x i16>* %3167, align 2, !tbaa !399
  %3169 = getelementptr inbounds i16, i16* %3166, i64 16
  %3170 = bitcast i16* %3169 to <16 x i16>*
  %3171 = load <16 x i16>, <16 x i16>* %3170, align 2, !tbaa !399
  %3172 = add nsw i64 %2919, %3150
  %3173 = getelementptr inbounds i16, i16* %blur_x, i64 %3172
  %3174 = bitcast i16* %3173 to <16 x i16>*
  %3175 = load <16 x i16>, <16 x i16>* %3174, align 2, !tbaa !399
  %3176 = getelementptr inbounds i16, i16* %3173, i64 16
  %3177 = bitcast i16* %3176 to <16 x i16>*
  %3178 = load <16 x i16>, <16 x i16>* %3177, align 2, !tbaa !399
  %3179 = add nsw i64 %2922, %3150
  %3180 = getelementptr inbounds i16, i16* %blur_x, i64 %3179
  %3181 = bitcast i16* %3180 to <16 x i16>*
  %3182 = load <16 x i16>, <16 x i16>* %3181, align 2, !tbaa !399
  %3183 = getelementptr inbounds i16, i16* %3180, i64 16
  %3184 = bitcast i16* %3183 to <16 x i16>*
  %3185 = load <16 x i16>, <16 x i16>* %3184, align 2, !tbaa !399
  %3186 = add nsw i64 %2925, %3150
  %3187 = getelementptr inbounds i16, i16* %blur_x, i64 %3186
  %3188 = bitcast i16* %3187 to <16 x i16>*
  %3189 = load <16 x i16>, <16 x i16>* %3188, align 2, !tbaa !399
  %3190 = getelementptr inbounds i16, i16* %3187, i64 16
  %3191 = bitcast i16* %3190 to <16 x i16>*
  %3192 = load <16 x i16>, <16 x i16>* %3191, align 2, !tbaa !399
  %3193 = add nsw i64 %2928, %3150
  %3194 = getelementptr inbounds i16, i16* %blur_x, i64 %3193
  %3195 = bitcast i16* %3194 to <16 x i16>*
  %3196 = load <16 x i16>, <16 x i16>* %3195, align 2, !tbaa !399
  %3197 = getelementptr inbounds i16, i16* %3194, i64 16
  %3198 = bitcast i16* %3197 to <16 x i16>*
  %3199 = load <16 x i16>, <16 x i16>* %3198, align 2, !tbaa !399
  %3200 = add <16 x i16> %3161, %3154
  %3201 = add <16 x i16> %3200, %3168
  %3202 = add <16 x i16> %3201, %3175
  %3203 = add <16 x i16> %3202, %3182
  %3204 = add <16 x i16> %3203, %3189
  %3205 = add <16 x i16> %3204, %3196
  %3206 = add <16 x i16> %3164, %3157
  %3207 = add <16 x i16> %3206, %3171
  %3208 = add <16 x i16> %3207, %3178
  %3209 = add <16 x i16> %3208, %3185
  %3210 = add <16 x i16> %3209, %3192
  %3211 = add <16 x i16> %3210, %3199
  %3212 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3205, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3213 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3211, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3214 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3212, <16 x i16> %3205)
  %3215 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3213, <16 x i16> %3211)
  %3216 = shufflevector <16 x i16> %3214, <16 x i16> %3215, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3217 = lshr <32 x i16> %3216, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3218 = shufflevector <32 x i16> %3217, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3219 = add nsw i64 %2931, %3150
  %3220 = getelementptr inbounds i16, i16* %66, i64 %3219
  %3221 = bitcast i16* %3220 to <16 x i16>*
  store <16 x i16> %3218, <16 x i16>* %3221, align 2, !tbaa !401
  %3222 = shufflevector <32 x i16> %3217, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3223 = getelementptr inbounds i16, i16* %3220, i64 16
  %3224 = bitcast i16* %3223 to <16 x i16>*
  store <16 x i16> %3222, <16 x i16>* %3224, align 2, !tbaa !401
  %3225 = add nuw nsw i32 %blur_y.s0.x.x.rebased144, 1
  %.not2799 = icmp eq i32 %3225, %t1727
  br i1 %.not2799, label %"end for blur_y.s0.x.x.rebased143", label %"for blur_y.s0.x.x.rebased142"

after_bb151:                                      ; preds = %"end for blur_y.s0.x.x.rebased143.after_bb151_crit_edge", %"produce blur_x154"
  %.pre-phi3534 = phi i32 [ %.pre3533, %"end for blur_y.s0.x.x.rebased143.after_bb151_crit_edge" ], [ %3316, %"produce blur_x154" ]
  %3226 = mul nsw i32 %.pre-phi3534, %a73
  %t1778 = sub nsw i32 %3226, %t1689
  br i1 %100, label %"for blur_y.s0.x.x.rebased156.preheader", label %"end for blur_y.s0.x.x.rebased157", !prof !386

"for blur_y.s0.x.x.rebased156.preheader":         ; preds = %after_bb151
  %3227 = sext i32 %t1778 to i64
  %3228 = zext i32 %.pre-phi3512 to i64
  %3229 = mul nsw i64 %3228, %116
  %3230 = sub nsw i64 %3229, %96
  %3231 = zext i32 %.pre-phi3508 to i64
  %3232 = mul nsw i64 %3231, %116
  %3233 = sub nsw i64 %3232, %96
  %3234 = zext i32 %.pre-phi3516 to i64
  %3235 = mul nsw i64 %3234, %116
  %3236 = sub nsw i64 %3235, %96
  %3237 = zext i32 %.pre-phi3520 to i64
  %3238 = mul nsw i64 %3237, %116
  %3239 = sub nsw i64 %3238, %96
  %3240 = zext i32 %.pre-phi3524 to i64
  %3241 = mul nsw i64 %3240, %116
  %3242 = sub nsw i64 %3241, %96
  %3243 = zext i32 %.pre-phi3534 to i64
  %3244 = mul nsw i64 %3243, %116
  %3245 = sub nsw i64 %3244, %96
  %3246 = zext i32 %.pre-phi3528 to i64
  %3247 = mul nsw i64 %3246, %116
  %3248 = sub nsw i64 %3247, %96
  %3249 = sext i32 %a26 to i64
  %3250 = add nsw i64 %3249, 1
  %3251 = mul nsw i64 %3250, %117
  %3252 = add nsw i64 %3251, %120
  br label %"for blur_y.s0.x.x.rebased156"

"produce blur_x154":                              ; preds = %"end for blur_y.s0.x.x.rebased143"
  %3253 = getelementptr inbounds i16, i16* %read_input, i64 %121
  %3254 = getelementptr inbounds i16, i16* %3253, i64 -31
  %3255 = bitcast i16* %3254 to <16 x i16>*
  %3256 = load <16 x i16>, <16 x i16>* %3255, align 2, !tbaa !396
  %3257 = getelementptr inbounds i16, i16* %3253, i64 -15
  %3258 = bitcast i16* %3257 to <16 x i16>*
  %3259 = load <16 x i16>, <16 x i16>* %3258, align 2, !tbaa !396
  %3260 = getelementptr inbounds i16, i16* %3253, i64 -32
  %3261 = bitcast i16* %3260 to <16 x i16>*
  %3262 = load <16 x i16>, <16 x i16>* %3261, align 2, !tbaa !396
  %3263 = getelementptr inbounds i16, i16* %3253, i64 -16
  %3264 = bitcast i16* %3263 to <16 x i16>*
  %3265 = load <16 x i16>, <16 x i16>* %3264, align 2, !tbaa !396
  %3266 = getelementptr inbounds i16, i16* %3253, i64 -30
  %3267 = bitcast i16* %3266 to <16 x i16>*
  %3268 = load <16 x i16>, <16 x i16>* %3267, align 2, !tbaa !396
  %3269 = getelementptr inbounds i16, i16* %3253, i64 -14
  %3270 = bitcast i16* %3269 to <16 x i16>*
  %3271 = load <16 x i16>, <16 x i16>* %3270, align 2, !tbaa !396
  %3272 = getelementptr inbounds i16, i16* %3253, i64 -29
  %3273 = bitcast i16* %3272 to <16 x i16>*
  %3274 = load <16 x i16>, <16 x i16>* %3273, align 2, !tbaa !396
  %3275 = getelementptr inbounds i16, i16* %3253, i64 -13
  %3276 = bitcast i16* %3275 to <16 x i16>*
  %3277 = load <16 x i16>, <16 x i16>* %3276, align 2, !tbaa !396
  %3278 = getelementptr inbounds i16, i16* %3253, i64 -28
  %3279 = bitcast i16* %3278 to <16 x i16>*
  %3280 = load <16 x i16>, <16 x i16>* %3279, align 2, !tbaa !396
  %3281 = getelementptr inbounds i16, i16* %3253, i64 -12
  %3282 = bitcast i16* %3281 to <16 x i16>*
  %3283 = load <16 x i16>, <16 x i16>* %3282, align 2, !tbaa !396
  %3284 = getelementptr inbounds i16, i16* %3253, i64 -26
  %3285 = bitcast i16* %3284 to <16 x i16>*
  %3286 = load <16 x i16>, <16 x i16>* %3285, align 2, !tbaa !396
  %3287 = getelementptr inbounds i16, i16* %3253, i64 -10
  %3288 = bitcast i16* %3287 to <16 x i16>*
  %3289 = load <16 x i16>, <16 x i16>* %3288, align 2, !tbaa !396
  %3290 = getelementptr inbounds i16, i16* %3253, i64 -27
  %3291 = bitcast i16* %3290 to <16 x i16>*
  %3292 = load <16 x i16>, <16 x i16>* %3291, align 2, !tbaa !396
  %3293 = getelementptr inbounds i16, i16* %3253, i64 -11
  %3294 = bitcast i16* %3293 to <16 x i16>*
  %3295 = load <16 x i16>, <16 x i16>* %3294, align 2, !tbaa !396
  %3296 = add <16 x i16> %3262, %3256
  %3297 = add <16 x i16> %3296, %3268
  %3298 = add <16 x i16> %3297, %3274
  %3299 = add <16 x i16> %3298, %3280
  %3300 = add <16 x i16> %3299, %3286
  %3301 = add <16 x i16> %3300, %3292
  %3302 = add <16 x i16> %3265, %3259
  %3303 = add <16 x i16> %3302, %3271
  %3304 = add <16 x i16> %3303, %3277
  %3305 = add <16 x i16> %3304, %3283
  %3306 = add <16 x i16> %3305, %3289
  %3307 = add <16 x i16> %3306, %3295
  %3308 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3301, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3309 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3307, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3310 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3308, <16 x i16> %3301)
  %3311 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3309, <16 x i16> %3307)
  %3312 = shufflevector <16 x i16> %3310, <16 x i16> %3311, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3313 = lshr <32 x i16> %3312, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3314 = shufflevector <32 x i16> %3313, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3315 = add nsw i32 %a26, 7
  %3316 = and i32 %3315, 7
  %3317 = zext i32 %3316 to i64
  %3318 = mul nsw i64 %97, %3317
  %3319 = add nsw i64 %99, %3318
  %3320 = getelementptr inbounds i16, i16* %blur_x, i64 %3319
  %3321 = getelementptr inbounds i16, i16* %3320, i64 -32
  %3322 = bitcast i16* %3321 to <16 x i16>*
  store <16 x i16> %3314, <16 x i16>* %3322, align 2, !tbaa !399
  %3323 = shufflevector <32 x i16> %3313, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3324 = getelementptr inbounds i16, i16* %3320, i64 -16
  %3325 = bitcast i16* %3324 to <16 x i16>*
  store <16 x i16> %3323, <16 x i16>* %3325, align 2, !tbaa !399
  %3326 = zext i32 %.pre-phi3512 to i64
  %3327 = mul nsw i64 %3326, %116
  %3328 = add nsw i64 %3327, %94
  %3329 = getelementptr inbounds i16, i16* %blur_x, i64 %3328
  %3330 = getelementptr inbounds i16, i16* %3329, i64 -32
  %3331 = bitcast i16* %3330 to <16 x i16>*
  %3332 = load <16 x i16>, <16 x i16>* %3331, align 2, !tbaa !399
  %3333 = getelementptr inbounds i16, i16* %3329, i64 -16
  %3334 = bitcast i16* %3333 to <16 x i16>*
  %3335 = load <16 x i16>, <16 x i16>* %3334, align 2, !tbaa !399
  %3336 = zext i32 %.pre-phi3508 to i64
  %3337 = mul nsw i64 %3336, %116
  %3338 = add nsw i64 %3337, %94
  %3339 = getelementptr inbounds i16, i16* %blur_x, i64 %3338
  %3340 = getelementptr inbounds i16, i16* %3339, i64 -32
  %3341 = bitcast i16* %3340 to <16 x i16>*
  %3342 = load <16 x i16>, <16 x i16>* %3341, align 2, !tbaa !399
  %3343 = getelementptr inbounds i16, i16* %3339, i64 -16
  %3344 = bitcast i16* %3343 to <16 x i16>*
  %3345 = load <16 x i16>, <16 x i16>* %3344, align 2, !tbaa !399
  %3346 = zext i32 %.pre-phi3516 to i64
  %3347 = mul nsw i64 %3346, %116
  %3348 = add nsw i64 %3347, %94
  %3349 = getelementptr inbounds i16, i16* %blur_x, i64 %3348
  %3350 = getelementptr inbounds i16, i16* %3349, i64 -32
  %3351 = bitcast i16* %3350 to <16 x i16>*
  %3352 = load <16 x i16>, <16 x i16>* %3351, align 2, !tbaa !399
  %3353 = getelementptr inbounds i16, i16* %3349, i64 -16
  %3354 = bitcast i16* %3353 to <16 x i16>*
  %3355 = load <16 x i16>, <16 x i16>* %3354, align 2, !tbaa !399
  %3356 = zext i32 %.pre-phi3520 to i64
  %3357 = mul nsw i64 %3356, %116
  %3358 = add nsw i64 %3357, %94
  %3359 = getelementptr inbounds i16, i16* %blur_x, i64 %3358
  %3360 = getelementptr inbounds i16, i16* %3359, i64 -32
  %3361 = bitcast i16* %3360 to <16 x i16>*
  %3362 = load <16 x i16>, <16 x i16>* %3361, align 2, !tbaa !399
  %3363 = getelementptr inbounds i16, i16* %3359, i64 -16
  %3364 = bitcast i16* %3363 to <16 x i16>*
  %3365 = load <16 x i16>, <16 x i16>* %3364, align 2, !tbaa !399
  %3366 = zext i32 %.pre-phi3524 to i64
  %3367 = mul nsw i64 %3366, %116
  %3368 = add nsw i64 %3367, %94
  %3369 = getelementptr inbounds i16, i16* %blur_x, i64 %3368
  %3370 = getelementptr inbounds i16, i16* %3369, i64 -32
  %3371 = bitcast i16* %3370 to <16 x i16>*
  %3372 = load <16 x i16>, <16 x i16>* %3371, align 2, !tbaa !399
  %3373 = getelementptr inbounds i16, i16* %3369, i64 -16
  %3374 = bitcast i16* %3373 to <16 x i16>*
  %3375 = load <16 x i16>, <16 x i16>* %3374, align 2, !tbaa !399
  %3376 = mul nsw i64 %3317, %116
  %3377 = add nsw i64 %3376, %94
  %3378 = getelementptr inbounds i16, i16* %blur_x, i64 %3377
  %3379 = getelementptr inbounds i16, i16* %3378, i64 -32
  %3380 = bitcast i16* %3379 to <16 x i16>*
  %3381 = load <16 x i16>, <16 x i16>* %3380, align 2, !tbaa !399
  %3382 = getelementptr inbounds i16, i16* %3378, i64 -16
  %3383 = bitcast i16* %3382 to <16 x i16>*
  %3384 = load <16 x i16>, <16 x i16>* %3383, align 2, !tbaa !399
  %3385 = zext i32 %.pre-phi3528 to i64
  %3386 = mul nsw i64 %3385, %116
  %3387 = add nsw i64 %3386, %94
  %3388 = getelementptr inbounds i16, i16* %blur_x, i64 %3387
  %3389 = getelementptr inbounds i16, i16* %3388, i64 -32
  %3390 = bitcast i16* %3389 to <16 x i16>*
  %3391 = load <16 x i16>, <16 x i16>* %3390, align 2, !tbaa !399
  %3392 = getelementptr inbounds i16, i16* %3388, i64 -16
  %3393 = bitcast i16* %3392 to <16 x i16>*
  %3394 = load <16 x i16>, <16 x i16>* %3393, align 2, !tbaa !399
  %3395 = add <16 x i16> %3342, %3332
  %3396 = add <16 x i16> %3395, %3352
  %3397 = add <16 x i16> %3396, %3362
  %3398 = add <16 x i16> %3397, %3372
  %3399 = add <16 x i16> %3398, %3381
  %3400 = add <16 x i16> %3399, %3391
  %3401 = add <16 x i16> %3345, %3335
  %3402 = add <16 x i16> %3401, %3355
  %3403 = add <16 x i16> %3402, %3365
  %3404 = add <16 x i16> %3403, %3375
  %3405 = add <16 x i16> %3404, %3384
  %3406 = add <16 x i16> %3405, %3394
  %3407 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3400, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3408 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3406, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3409 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3407, <16 x i16> %3400)
  %3410 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3408, <16 x i16> %3406)
  %3411 = shufflevector <16 x i16> %3409, <16 x i16> %3410, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3412 = lshr <32 x i16> %3411, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3413 = shufflevector <32 x i16> %3412, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3414 = sext i32 %a26 to i64
  %3415 = add nsw i64 %3414, 1
  %3416 = mul nsw i64 %3415, %117
  %3417 = add nsw i64 %119, %3416
  %3418 = getelementptr inbounds i16, i16* %66, i64 %3417
  %3419 = getelementptr inbounds i16, i16* %3418, i64 -32
  %3420 = bitcast i16* %3419 to <16 x i16>*
  store <16 x i16> %3413, <16 x i16>* %3420, align 2, !tbaa !401
  %3421 = shufflevector <32 x i16> %3412, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3422 = getelementptr inbounds i16, i16* %3418, i64 -16
  %3423 = bitcast i16* %3422 to <16 x i16>*
  store <16 x i16> %3421, <16 x i16>* %3423, align 2, !tbaa !401
  br label %after_bb151

"for blur_y.s0.x.x.rebased156":                   ; preds = %"for blur_y.s0.x.x.rebased156.preheader", %"consume blur_x163"
  %indvars.iv3282 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased156.preheader" ], [ %indvars.iv.next3283, %"consume blur_x163" ]
  %3424 = add nsw i64 %indvars.iv3282, %101
  %3425 = icmp slt i64 %3424, 1
  %3426 = trunc i64 %3424 to i32
  %3427 = shl nsw i32 %3426, 5
  %3428 = icmp sgt i32 %4, %3427
  %3429 = or i1 %3425, %3428
  br i1 %3429, label %"produce blur_x162", label %"for blur_y.s0.x.x.rebased156.consume blur_x163_crit_edge"

"for blur_y.s0.x.x.rebased156.consume blur_x163_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased156"
  %.pre3535 = shl nsw i64 %3424, 5
  br label %"consume blur_x163"

"end for blur_y.s0.x.x.rebased157":               ; preds = %"consume blur_x163", %after_bb151
  br i1 %102, label %"for blur_y.s0.x.x.rebased164.preheader", label %"end for blur_y.s0.x.x.rebased165", !prof !386

"for blur_y.s0.x.x.rebased164.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased157"
  %3430 = sext i32 %t1778 to i64
  %3431 = zext i32 %.pre-phi3512 to i64
  %3432 = mul nsw i64 %3431, %116
  %3433 = sub nsw i64 %3432, %96
  %3434 = zext i32 %.pre-phi3508 to i64
  %3435 = mul nsw i64 %3434, %116
  %3436 = sub nsw i64 %3435, %96
  %3437 = zext i32 %.pre-phi3516 to i64
  %3438 = mul nsw i64 %3437, %116
  %3439 = sub nsw i64 %3438, %96
  %3440 = zext i32 %.pre-phi3520 to i64
  %3441 = mul nsw i64 %3440, %116
  %3442 = sub nsw i64 %3441, %96
  %3443 = zext i32 %.pre-phi3524 to i64
  %3444 = mul nsw i64 %3443, %116
  %3445 = sub nsw i64 %3444, %96
  %3446 = zext i32 %.pre-phi3534 to i64
  %3447 = mul nsw i64 %3446, %116
  %3448 = sub nsw i64 %3447, %96
  %3449 = zext i32 %.pre-phi3528 to i64
  %3450 = mul nsw i64 %3449, %116
  %3451 = sub nsw i64 %3450, %96
  %3452 = sext i32 %a26 to i64
  %3453 = add nsw i64 %3452, 1
  %3454 = mul nsw i64 %3453, %117
  %3455 = add nsw i64 %3454, %120
  br label %"for blur_y.s0.x.x.rebased164"

"produce blur_x162":                              ; preds = %"for blur_y.s0.x.x.rebased156"
  %t768 = add nsw i32 %3427, %t1777
  %3456 = sext i32 %t768 to i64
  %3457 = getelementptr inbounds i16, i16* %read_input, i64 %3456
  %3458 = getelementptr inbounds i16, i16* %3457, i64 1
  %3459 = bitcast i16* %3458 to <16 x i16>*
  %3460 = load <16 x i16>, <16 x i16>* %3459, align 2, !tbaa !396
  %3461 = getelementptr inbounds i16, i16* %3457, i64 17
  %3462 = bitcast i16* %3461 to <16 x i16>*
  %3463 = load <16 x i16>, <16 x i16>* %3462, align 2, !tbaa !396
  %3464 = bitcast i16* %3457 to <16 x i16>*
  %3465 = load <16 x i16>, <16 x i16>* %3464, align 2, !tbaa !396
  %3466 = getelementptr inbounds i16, i16* %3457, i64 16
  %3467 = bitcast i16* %3466 to <16 x i16>*
  %3468 = load <16 x i16>, <16 x i16>* %3467, align 2, !tbaa !396
  %3469 = getelementptr inbounds i16, i16* %3457, i64 2
  %3470 = bitcast i16* %3469 to <16 x i16>*
  %3471 = load <16 x i16>, <16 x i16>* %3470, align 2, !tbaa !396
  %3472 = getelementptr inbounds i16, i16* %3457, i64 18
  %3473 = bitcast i16* %3472 to <16 x i16>*
  %3474 = load <16 x i16>, <16 x i16>* %3473, align 2, !tbaa !396
  %3475 = getelementptr inbounds i16, i16* %3457, i64 3
  %3476 = bitcast i16* %3475 to <16 x i16>*
  %3477 = load <16 x i16>, <16 x i16>* %3476, align 2, !tbaa !396
  %3478 = getelementptr inbounds i16, i16* %3457, i64 19
  %3479 = bitcast i16* %3478 to <16 x i16>*
  %3480 = load <16 x i16>, <16 x i16>* %3479, align 2, !tbaa !396
  %3481 = getelementptr inbounds i16, i16* %3457, i64 4
  %3482 = bitcast i16* %3481 to <16 x i16>*
  %3483 = load <16 x i16>, <16 x i16>* %3482, align 2, !tbaa !396
  %3484 = getelementptr inbounds i16, i16* %3457, i64 20
  %3485 = bitcast i16* %3484 to <16 x i16>*
  %3486 = load <16 x i16>, <16 x i16>* %3485, align 2, !tbaa !396
  %3487 = getelementptr inbounds i16, i16* %3457, i64 6
  %3488 = bitcast i16* %3487 to <16 x i16>*
  %3489 = load <16 x i16>, <16 x i16>* %3488, align 2, !tbaa !396
  %3490 = getelementptr inbounds i16, i16* %3457, i64 22
  %3491 = bitcast i16* %3490 to <16 x i16>*
  %3492 = load <16 x i16>, <16 x i16>* %3491, align 2, !tbaa !396
  %3493 = getelementptr inbounds i16, i16* %3457, i64 5
  %3494 = bitcast i16* %3493 to <16 x i16>*
  %3495 = load <16 x i16>, <16 x i16>* %3494, align 2, !tbaa !396
  %3496 = getelementptr inbounds i16, i16* %3457, i64 21
  %3497 = bitcast i16* %3496 to <16 x i16>*
  %3498 = load <16 x i16>, <16 x i16>* %3497, align 2, !tbaa !396
  %3499 = add <16 x i16> %3465, %3460
  %3500 = add <16 x i16> %3499, %3471
  %3501 = add <16 x i16> %3500, %3477
  %3502 = add <16 x i16> %3501, %3483
  %3503 = add <16 x i16> %3502, %3489
  %3504 = add <16 x i16> %3503, %3495
  %3505 = add <16 x i16> %3468, %3463
  %3506 = add <16 x i16> %3505, %3474
  %3507 = add <16 x i16> %3506, %3480
  %3508 = add <16 x i16> %3507, %3486
  %3509 = add <16 x i16> %3508, %3492
  %3510 = add <16 x i16> %3509, %3498
  %3511 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3504, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3512 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3510, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3513 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3511, <16 x i16> %3504)
  %3514 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3512, <16 x i16> %3510)
  %3515 = shufflevector <16 x i16> %3513, <16 x i16> %3514, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3516 = lshr <32 x i16> %3515, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3517 = shufflevector <32 x i16> %3516, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3518 = shl nsw i64 %3424, 5
  %3519 = add nsw i64 %3518, %3227
  %3520 = getelementptr inbounds i16, i16* %blur_x, i64 %3519
  %3521 = bitcast i16* %3520 to <16 x i16>*
  store <16 x i16> %3517, <16 x i16>* %3521, align 2, !tbaa !399
  %3522 = shufflevector <32 x i16> %3516, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3523 = getelementptr inbounds i16, i16* %3520, i64 16
  %3524 = bitcast i16* %3523 to <16 x i16>*
  store <16 x i16> %3522, <16 x i16>* %3524, align 2, !tbaa !399
  br label %"consume blur_x163"

"consume blur_x163":                              ; preds = %"for blur_y.s0.x.x.rebased156.consume blur_x163_crit_edge", %"produce blur_x162"
  %.pre-phi3536 = phi i64 [ %.pre3535, %"for blur_y.s0.x.x.rebased156.consume blur_x163_crit_edge" ], [ %3518, %"produce blur_x162" ]
  %3525 = add nsw i64 %3230, %.pre-phi3536
  %3526 = getelementptr inbounds i16, i16* %blur_x, i64 %3525
  %3527 = bitcast i16* %3526 to <16 x i16>*
  %3528 = load <16 x i16>, <16 x i16>* %3527, align 2, !tbaa !399
  %3529 = getelementptr inbounds i16, i16* %3526, i64 16
  %3530 = bitcast i16* %3529 to <16 x i16>*
  %3531 = load <16 x i16>, <16 x i16>* %3530, align 2, !tbaa !399
  %3532 = add nsw i64 %3233, %.pre-phi3536
  %3533 = getelementptr inbounds i16, i16* %blur_x, i64 %3532
  %3534 = bitcast i16* %3533 to <16 x i16>*
  %3535 = load <16 x i16>, <16 x i16>* %3534, align 2, !tbaa !399
  %3536 = getelementptr inbounds i16, i16* %3533, i64 16
  %3537 = bitcast i16* %3536 to <16 x i16>*
  %3538 = load <16 x i16>, <16 x i16>* %3537, align 2, !tbaa !399
  %3539 = add nsw i64 %3236, %.pre-phi3536
  %3540 = getelementptr inbounds i16, i16* %blur_x, i64 %3539
  %3541 = bitcast i16* %3540 to <16 x i16>*
  %3542 = load <16 x i16>, <16 x i16>* %3541, align 2, !tbaa !399
  %3543 = getelementptr inbounds i16, i16* %3540, i64 16
  %3544 = bitcast i16* %3543 to <16 x i16>*
  %3545 = load <16 x i16>, <16 x i16>* %3544, align 2, !tbaa !399
  %3546 = add nsw i64 %3239, %.pre-phi3536
  %3547 = getelementptr inbounds i16, i16* %blur_x, i64 %3546
  %3548 = bitcast i16* %3547 to <16 x i16>*
  %3549 = load <16 x i16>, <16 x i16>* %3548, align 2, !tbaa !399
  %3550 = getelementptr inbounds i16, i16* %3547, i64 16
  %3551 = bitcast i16* %3550 to <16 x i16>*
  %3552 = load <16 x i16>, <16 x i16>* %3551, align 2, !tbaa !399
  %3553 = add nsw i64 %3242, %.pre-phi3536
  %3554 = getelementptr inbounds i16, i16* %blur_x, i64 %3553
  %3555 = bitcast i16* %3554 to <16 x i16>*
  %3556 = load <16 x i16>, <16 x i16>* %3555, align 2, !tbaa !399
  %3557 = getelementptr inbounds i16, i16* %3554, i64 16
  %3558 = bitcast i16* %3557 to <16 x i16>*
  %3559 = load <16 x i16>, <16 x i16>* %3558, align 2, !tbaa !399
  %3560 = add nsw i64 %3245, %.pre-phi3536
  %3561 = getelementptr inbounds i16, i16* %blur_x, i64 %3560
  %3562 = bitcast i16* %3561 to <16 x i16>*
  %3563 = load <16 x i16>, <16 x i16>* %3562, align 2, !tbaa !399
  %3564 = getelementptr inbounds i16, i16* %3561, i64 16
  %3565 = bitcast i16* %3564 to <16 x i16>*
  %3566 = load <16 x i16>, <16 x i16>* %3565, align 2, !tbaa !399
  %3567 = add nsw i64 %3248, %.pre-phi3536
  %3568 = getelementptr inbounds i16, i16* %blur_x, i64 %3567
  %3569 = bitcast i16* %3568 to <16 x i16>*
  %3570 = load <16 x i16>, <16 x i16>* %3569, align 2, !tbaa !399
  %3571 = getelementptr inbounds i16, i16* %3568, i64 16
  %3572 = bitcast i16* %3571 to <16 x i16>*
  %3573 = load <16 x i16>, <16 x i16>* %3572, align 2, !tbaa !399
  %3574 = add <16 x i16> %3535, %3528
  %3575 = add <16 x i16> %3574, %3542
  %3576 = add <16 x i16> %3575, %3549
  %3577 = add <16 x i16> %3576, %3556
  %3578 = add <16 x i16> %3577, %3563
  %3579 = add <16 x i16> %3578, %3570
  %3580 = add <16 x i16> %3538, %3531
  %3581 = add <16 x i16> %3580, %3545
  %3582 = add <16 x i16> %3581, %3552
  %3583 = add <16 x i16> %3582, %3559
  %3584 = add <16 x i16> %3583, %3566
  %3585 = add <16 x i16> %3584, %3573
  %3586 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3579, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3587 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3585, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3588 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3586, <16 x i16> %3579)
  %3589 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3587, <16 x i16> %3585)
  %3590 = shufflevector <16 x i16> %3588, <16 x i16> %3589, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3591 = lshr <32 x i16> %3590, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3592 = shufflevector <32 x i16> %3591, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3593 = add nsw i64 %3252, %.pre-phi3536
  %3594 = getelementptr inbounds i16, i16* %66, i64 %3593
  %3595 = bitcast i16* %3594 to <16 x i16>*
  store <16 x i16> %3592, <16 x i16>* %3595, align 2, !tbaa !401
  %3596 = shufflevector <32 x i16> %3591, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3597 = getelementptr inbounds i16, i16* %3594, i64 16
  %3598 = bitcast i16* %3597 to <16 x i16>*
  store <16 x i16> %3596, <16 x i16>* %3598, align 2, !tbaa !401
  %indvars.iv.next3283 = add nuw nsw i64 %indvars.iv3282, 1
  %.not2798 = icmp eq i64 %indvars.iv.next3283, %188
  br i1 %.not2798, label %"end for blur_y.s0.x.x.rebased157", label %"for blur_y.s0.x.x.rebased156"

"for blur_y.s0.x.x.rebased164":                   ; preds = %"for blur_y.s0.x.x.rebased164.preheader", %"consume blur_x172"
  %blur_y.s0.x.x.rebased166 = phi i32 [ %3749, %"consume blur_x172" ], [ 0, %"for blur_y.s0.x.x.rebased164.preheader" ]
  %3599 = add nsw i32 %blur_y.s0.x.x.rebased166, %t1670
  %a126 = shl nsw i32 %3599, 5
  %3600 = icmp sgt i32 %a14, %a126
  %b132 = select i1 %3600, i32 %a126, i32 %a14
  %3601 = icmp slt i32 %3599, 1
  %3602 = icmp sgt i32 %4, %a126
  %3603 = or i1 %3601, %3602
  br i1 %3603, label %"produce blur_x170", label %"consume blur_x172"

"end for blur_y.s0.x.x.rebased165":               ; preds = %"consume blur_x172", %"end for blur_y.s0.x.x.rebased157"
  br i1 %34, label %"produce blur_x176", label %after_bb173

"produce blur_x170":                              ; preds = %"for blur_y.s0.x.x.rebased164"
  %3604 = icmp slt i32 %b132, %4
  %blur_x.s0.x.v1.base.s171 = select i1 %3604, i32 %b132, i32 %4
  %t773 = add nsw i32 %blur_x.s0.x.v1.base.s171, %t1777
  %3605 = sext i32 %t773 to i64
  %3606 = getelementptr inbounds i16, i16* %read_input, i64 %3605
  %3607 = getelementptr inbounds i16, i16* %3606, i64 1
  %3608 = bitcast i16* %3607 to <16 x i16>*
  %3609 = load <16 x i16>, <16 x i16>* %3608, align 2, !tbaa !396
  %3610 = getelementptr inbounds i16, i16* %3606, i64 17
  %3611 = bitcast i16* %3610 to <16 x i16>*
  %3612 = load <16 x i16>, <16 x i16>* %3611, align 2, !tbaa !396
  %3613 = bitcast i16* %3606 to <16 x i16>*
  %3614 = load <16 x i16>, <16 x i16>* %3613, align 2, !tbaa !396
  %3615 = getelementptr inbounds i16, i16* %3606, i64 16
  %3616 = bitcast i16* %3615 to <16 x i16>*
  %3617 = load <16 x i16>, <16 x i16>* %3616, align 2, !tbaa !396
  %3618 = getelementptr inbounds i16, i16* %3606, i64 2
  %3619 = bitcast i16* %3618 to <16 x i16>*
  %3620 = load <16 x i16>, <16 x i16>* %3619, align 2, !tbaa !396
  %3621 = getelementptr inbounds i16, i16* %3606, i64 18
  %3622 = bitcast i16* %3621 to <16 x i16>*
  %3623 = load <16 x i16>, <16 x i16>* %3622, align 2, !tbaa !396
  %3624 = getelementptr inbounds i16, i16* %3606, i64 3
  %3625 = bitcast i16* %3624 to <16 x i16>*
  %3626 = load <16 x i16>, <16 x i16>* %3625, align 2, !tbaa !396
  %3627 = getelementptr inbounds i16, i16* %3606, i64 19
  %3628 = bitcast i16* %3627 to <16 x i16>*
  %3629 = load <16 x i16>, <16 x i16>* %3628, align 2, !tbaa !396
  %3630 = getelementptr inbounds i16, i16* %3606, i64 4
  %3631 = bitcast i16* %3630 to <16 x i16>*
  %3632 = load <16 x i16>, <16 x i16>* %3631, align 2, !tbaa !396
  %3633 = getelementptr inbounds i16, i16* %3606, i64 20
  %3634 = bitcast i16* %3633 to <16 x i16>*
  %3635 = load <16 x i16>, <16 x i16>* %3634, align 2, !tbaa !396
  %3636 = getelementptr inbounds i16, i16* %3606, i64 6
  %3637 = bitcast i16* %3636 to <16 x i16>*
  %3638 = load <16 x i16>, <16 x i16>* %3637, align 2, !tbaa !396
  %3639 = getelementptr inbounds i16, i16* %3606, i64 22
  %3640 = bitcast i16* %3639 to <16 x i16>*
  %3641 = load <16 x i16>, <16 x i16>* %3640, align 2, !tbaa !396
  %3642 = getelementptr inbounds i16, i16* %3606, i64 5
  %3643 = bitcast i16* %3642 to <16 x i16>*
  %3644 = load <16 x i16>, <16 x i16>* %3643, align 2, !tbaa !396
  %3645 = getelementptr inbounds i16, i16* %3606, i64 21
  %3646 = bitcast i16* %3645 to <16 x i16>*
  %3647 = load <16 x i16>, <16 x i16>* %3646, align 2, !tbaa !396
  %3648 = add <16 x i16> %3614, %3609
  %3649 = add <16 x i16> %3648, %3620
  %3650 = add <16 x i16> %3649, %3626
  %3651 = add <16 x i16> %3650, %3632
  %3652 = add <16 x i16> %3651, %3638
  %3653 = add <16 x i16> %3652, %3644
  %3654 = add <16 x i16> %3617, %3612
  %3655 = add <16 x i16> %3654, %3623
  %3656 = add <16 x i16> %3655, %3629
  %3657 = add <16 x i16> %3656, %3635
  %3658 = add <16 x i16> %3657, %3641
  %3659 = add <16 x i16> %3658, %3647
  %3660 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3653, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3661 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3659, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3662 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3660, <16 x i16> %3653)
  %3663 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3661, <16 x i16> %3659)
  %3664 = shufflevector <16 x i16> %3662, <16 x i16> %3663, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3665 = lshr <32 x i16> %3664, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3666 = shufflevector <32 x i16> %3665, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3667 = sext i32 %blur_x.s0.x.v1.base.s171 to i64
  %3668 = add nsw i64 %3667, %3430
  %3669 = getelementptr inbounds i16, i16* %blur_x, i64 %3668
  %3670 = bitcast i16* %3669 to <16 x i16>*
  store <16 x i16> %3666, <16 x i16>* %3670, align 2, !tbaa !399
  %3671 = shufflevector <32 x i16> %3665, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3672 = getelementptr inbounds i16, i16* %3669, i64 16
  %3673 = bitcast i16* %3672 to <16 x i16>*
  store <16 x i16> %3671, <16 x i16>* %3673, align 2, !tbaa !399
  br label %"consume blur_x172"

"consume blur_x172":                              ; preds = %"for blur_y.s0.x.x.rebased164", %"produce blur_x170"
  %3674 = sext i32 %b132 to i64
  %3675 = add nsw i64 %3433, %3674
  %3676 = getelementptr inbounds i16, i16* %blur_x, i64 %3675
  %3677 = bitcast i16* %3676 to <16 x i16>*
  %3678 = load <16 x i16>, <16 x i16>* %3677, align 2, !tbaa !399
  %3679 = getelementptr inbounds i16, i16* %3676, i64 16
  %3680 = bitcast i16* %3679 to <16 x i16>*
  %3681 = load <16 x i16>, <16 x i16>* %3680, align 2, !tbaa !399
  %3682 = add nsw i64 %3436, %3674
  %3683 = getelementptr inbounds i16, i16* %blur_x, i64 %3682
  %3684 = bitcast i16* %3683 to <16 x i16>*
  %3685 = load <16 x i16>, <16 x i16>* %3684, align 2, !tbaa !399
  %3686 = getelementptr inbounds i16, i16* %3683, i64 16
  %3687 = bitcast i16* %3686 to <16 x i16>*
  %3688 = load <16 x i16>, <16 x i16>* %3687, align 2, !tbaa !399
  %3689 = add nsw i64 %3439, %3674
  %3690 = getelementptr inbounds i16, i16* %blur_x, i64 %3689
  %3691 = bitcast i16* %3690 to <16 x i16>*
  %3692 = load <16 x i16>, <16 x i16>* %3691, align 2, !tbaa !399
  %3693 = getelementptr inbounds i16, i16* %3690, i64 16
  %3694 = bitcast i16* %3693 to <16 x i16>*
  %3695 = load <16 x i16>, <16 x i16>* %3694, align 2, !tbaa !399
  %3696 = add nsw i64 %3442, %3674
  %3697 = getelementptr inbounds i16, i16* %blur_x, i64 %3696
  %3698 = bitcast i16* %3697 to <16 x i16>*
  %3699 = load <16 x i16>, <16 x i16>* %3698, align 2, !tbaa !399
  %3700 = getelementptr inbounds i16, i16* %3697, i64 16
  %3701 = bitcast i16* %3700 to <16 x i16>*
  %3702 = load <16 x i16>, <16 x i16>* %3701, align 2, !tbaa !399
  %3703 = add nsw i64 %3445, %3674
  %3704 = getelementptr inbounds i16, i16* %blur_x, i64 %3703
  %3705 = bitcast i16* %3704 to <16 x i16>*
  %3706 = load <16 x i16>, <16 x i16>* %3705, align 2, !tbaa !399
  %3707 = getelementptr inbounds i16, i16* %3704, i64 16
  %3708 = bitcast i16* %3707 to <16 x i16>*
  %3709 = load <16 x i16>, <16 x i16>* %3708, align 2, !tbaa !399
  %3710 = add nsw i64 %3448, %3674
  %3711 = getelementptr inbounds i16, i16* %blur_x, i64 %3710
  %3712 = bitcast i16* %3711 to <16 x i16>*
  %3713 = load <16 x i16>, <16 x i16>* %3712, align 2, !tbaa !399
  %3714 = getelementptr inbounds i16, i16* %3711, i64 16
  %3715 = bitcast i16* %3714 to <16 x i16>*
  %3716 = load <16 x i16>, <16 x i16>* %3715, align 2, !tbaa !399
  %3717 = add nsw i64 %3451, %3674
  %3718 = getelementptr inbounds i16, i16* %blur_x, i64 %3717
  %3719 = bitcast i16* %3718 to <16 x i16>*
  %3720 = load <16 x i16>, <16 x i16>* %3719, align 2, !tbaa !399
  %3721 = getelementptr inbounds i16, i16* %3718, i64 16
  %3722 = bitcast i16* %3721 to <16 x i16>*
  %3723 = load <16 x i16>, <16 x i16>* %3722, align 2, !tbaa !399
  %3724 = add <16 x i16> %3685, %3678
  %3725 = add <16 x i16> %3724, %3692
  %3726 = add <16 x i16> %3725, %3699
  %3727 = add <16 x i16> %3726, %3706
  %3728 = add <16 x i16> %3727, %3713
  %3729 = add <16 x i16> %3728, %3720
  %3730 = add <16 x i16> %3688, %3681
  %3731 = add <16 x i16> %3730, %3695
  %3732 = add <16 x i16> %3731, %3702
  %3733 = add <16 x i16> %3732, %3709
  %3734 = add <16 x i16> %3733, %3716
  %3735 = add <16 x i16> %3734, %3723
  %3736 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3729, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3737 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3735, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3738 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3736, <16 x i16> %3729)
  %3739 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3737, <16 x i16> %3735)
  %3740 = shufflevector <16 x i16> %3738, <16 x i16> %3739, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3741 = lshr <32 x i16> %3740, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3742 = shufflevector <32 x i16> %3741, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3743 = add nsw i64 %3455, %3674
  %3744 = getelementptr inbounds i16, i16* %66, i64 %3743
  %3745 = bitcast i16* %3744 to <16 x i16>*
  store <16 x i16> %3742, <16 x i16>* %3745, align 2, !tbaa !401
  %3746 = shufflevector <32 x i16> %3741, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3747 = getelementptr inbounds i16, i16* %3744, i64 16
  %3748 = bitcast i16* %3747 to <16 x i16>*
  store <16 x i16> %3746, <16 x i16>* %3748, align 2, !tbaa !401
  %3749 = add nuw nsw i32 %blur_y.s0.x.x.rebased166, 1
  %.not2797 = icmp eq i32 %3749, %t1727
  br i1 %.not2797, label %"end for blur_y.s0.x.x.rebased165", label %"for blur_y.s0.x.x.rebased164"

after_bb173:                                      ; preds = %"end for blur_y.s0.x.x.rebased165", %"produce blur_x176"
  br i1 %100, label %"for blur_y.s0.x.x.rebased178.preheader", label %"end for blur_y.s0.x.x.rebased179", !prof !386

"for blur_y.s0.x.x.rebased178.preheader":         ; preds = %after_bb173
  %3750 = sext i32 %t1726 to i64
  %3751 = zext i32 %.pre-phi3516 to i64
  %3752 = mul nsw i64 %3751, %116
  %3753 = sub nsw i64 %3752, %96
  %3754 = zext i32 %.pre-phi3512 to i64
  %3755 = mul nsw i64 %3754, %116
  %3756 = sub nsw i64 %3755, %96
  %3757 = zext i32 %.pre-phi3520 to i64
  %3758 = mul nsw i64 %3757, %116
  %3759 = sub nsw i64 %3758, %96
  %3760 = zext i32 %.pre-phi3524 to i64
  %3761 = mul nsw i64 %3760, %116
  %3762 = sub nsw i64 %3761, %96
  %3763 = zext i32 %.pre-phi3528 to i64
  %3764 = mul nsw i64 %3763, %116
  %3765 = sub nsw i64 %3764, %96
  %3766 = zext i32 %.pre-phi to i64
  %3767 = mul nsw i64 %3766, %116
  %3768 = sub nsw i64 %3767, %96
  %3769 = zext i32 %.pre-phi3534 to i64
  %3770 = mul nsw i64 %3769, %116
  %3771 = sub nsw i64 %3770, %96
  %3772 = sext i32 %a26 to i64
  %3773 = add nsw i64 %3772, 2
  %3774 = mul nsw i64 %3773, %117
  %3775 = add nsw i64 %3774, %120
  br label %"for blur_y.s0.x.x.rebased178"

"produce blur_x176":                              ; preds = %"end for blur_y.s0.x.x.rebased165"
  %3776 = getelementptr inbounds i16, i16* %read_input, i64 %123
  %3777 = getelementptr inbounds i16, i16* %3776, i64 -31
  %3778 = bitcast i16* %3777 to <16 x i16>*
  %3779 = load <16 x i16>, <16 x i16>* %3778, align 2, !tbaa !396
  %3780 = getelementptr inbounds i16, i16* %3776, i64 -15
  %3781 = bitcast i16* %3780 to <16 x i16>*
  %3782 = load <16 x i16>, <16 x i16>* %3781, align 2, !tbaa !396
  %3783 = getelementptr inbounds i16, i16* %3776, i64 -32
  %3784 = bitcast i16* %3783 to <16 x i16>*
  %3785 = load <16 x i16>, <16 x i16>* %3784, align 2, !tbaa !396
  %3786 = getelementptr inbounds i16, i16* %3776, i64 -16
  %3787 = bitcast i16* %3786 to <16 x i16>*
  %3788 = load <16 x i16>, <16 x i16>* %3787, align 2, !tbaa !396
  %3789 = getelementptr inbounds i16, i16* %3776, i64 -30
  %3790 = bitcast i16* %3789 to <16 x i16>*
  %3791 = load <16 x i16>, <16 x i16>* %3790, align 2, !tbaa !396
  %3792 = getelementptr inbounds i16, i16* %3776, i64 -14
  %3793 = bitcast i16* %3792 to <16 x i16>*
  %3794 = load <16 x i16>, <16 x i16>* %3793, align 2, !tbaa !396
  %3795 = getelementptr inbounds i16, i16* %3776, i64 -29
  %3796 = bitcast i16* %3795 to <16 x i16>*
  %3797 = load <16 x i16>, <16 x i16>* %3796, align 2, !tbaa !396
  %3798 = getelementptr inbounds i16, i16* %3776, i64 -13
  %3799 = bitcast i16* %3798 to <16 x i16>*
  %3800 = load <16 x i16>, <16 x i16>* %3799, align 2, !tbaa !396
  %3801 = getelementptr inbounds i16, i16* %3776, i64 -28
  %3802 = bitcast i16* %3801 to <16 x i16>*
  %3803 = load <16 x i16>, <16 x i16>* %3802, align 2, !tbaa !396
  %3804 = getelementptr inbounds i16, i16* %3776, i64 -12
  %3805 = bitcast i16* %3804 to <16 x i16>*
  %3806 = load <16 x i16>, <16 x i16>* %3805, align 2, !tbaa !396
  %3807 = getelementptr inbounds i16, i16* %3776, i64 -26
  %3808 = bitcast i16* %3807 to <16 x i16>*
  %3809 = load <16 x i16>, <16 x i16>* %3808, align 2, !tbaa !396
  %3810 = getelementptr inbounds i16, i16* %3776, i64 -10
  %3811 = bitcast i16* %3810 to <16 x i16>*
  %3812 = load <16 x i16>, <16 x i16>* %3811, align 2, !tbaa !396
  %3813 = getelementptr inbounds i16, i16* %3776, i64 -27
  %3814 = bitcast i16* %3813 to <16 x i16>*
  %3815 = load <16 x i16>, <16 x i16>* %3814, align 2, !tbaa !396
  %3816 = getelementptr inbounds i16, i16* %3776, i64 -11
  %3817 = bitcast i16* %3816 to <16 x i16>*
  %3818 = load <16 x i16>, <16 x i16>* %3817, align 2, !tbaa !396
  %3819 = add <16 x i16> %3785, %3779
  %3820 = add <16 x i16> %3819, %3791
  %3821 = add <16 x i16> %3820, %3797
  %3822 = add <16 x i16> %3821, %3803
  %3823 = add <16 x i16> %3822, %3809
  %3824 = add <16 x i16> %3823, %3815
  %3825 = add <16 x i16> %3788, %3782
  %3826 = add <16 x i16> %3825, %3794
  %3827 = add <16 x i16> %3826, %3800
  %3828 = add <16 x i16> %3827, %3806
  %3829 = add <16 x i16> %3828, %3812
  %3830 = add <16 x i16> %3829, %3818
  %3831 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3824, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3832 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3830, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3833 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3831, <16 x i16> %3824)
  %3834 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3832, <16 x i16> %3830)
  %3835 = shufflevector <16 x i16> %3833, <16 x i16> %3834, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3836 = lshr <32 x i16> %3835, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3837 = shufflevector <32 x i16> %3836, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3838 = zext i32 %.pre-phi to i64
  %3839 = mul nsw i64 %97, %3838
  %3840 = add nsw i64 %99, %3839
  %3841 = getelementptr inbounds i16, i16* %blur_x, i64 %3840
  %3842 = getelementptr inbounds i16, i16* %3841, i64 -32
  %3843 = bitcast i16* %3842 to <16 x i16>*
  store <16 x i16> %3837, <16 x i16>* %3843, align 2, !tbaa !399
  %3844 = shufflevector <32 x i16> %3836, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3845 = getelementptr inbounds i16, i16* %3841, i64 -16
  %3846 = bitcast i16* %3845 to <16 x i16>*
  store <16 x i16> %3844, <16 x i16>* %3846, align 2, !tbaa !399
  %3847 = zext i32 %.pre-phi3516 to i64
  %3848 = mul nsw i64 %3847, %116
  %3849 = add nsw i64 %3848, %94
  %3850 = getelementptr inbounds i16, i16* %blur_x, i64 %3849
  %3851 = getelementptr inbounds i16, i16* %3850, i64 -32
  %3852 = bitcast i16* %3851 to <16 x i16>*
  %3853 = load <16 x i16>, <16 x i16>* %3852, align 2, !tbaa !399
  %3854 = getelementptr inbounds i16, i16* %3850, i64 -16
  %3855 = bitcast i16* %3854 to <16 x i16>*
  %3856 = load <16 x i16>, <16 x i16>* %3855, align 2, !tbaa !399
  %3857 = zext i32 %.pre-phi3512 to i64
  %3858 = mul nsw i64 %3857, %116
  %3859 = add nsw i64 %3858, %94
  %3860 = getelementptr inbounds i16, i16* %blur_x, i64 %3859
  %3861 = getelementptr inbounds i16, i16* %3860, i64 -32
  %3862 = bitcast i16* %3861 to <16 x i16>*
  %3863 = load <16 x i16>, <16 x i16>* %3862, align 2, !tbaa !399
  %3864 = getelementptr inbounds i16, i16* %3860, i64 -16
  %3865 = bitcast i16* %3864 to <16 x i16>*
  %3866 = load <16 x i16>, <16 x i16>* %3865, align 2, !tbaa !399
  %3867 = zext i32 %.pre-phi3520 to i64
  %3868 = mul nsw i64 %3867, %116
  %3869 = add nsw i64 %3868, %94
  %3870 = getelementptr inbounds i16, i16* %blur_x, i64 %3869
  %3871 = getelementptr inbounds i16, i16* %3870, i64 -32
  %3872 = bitcast i16* %3871 to <16 x i16>*
  %3873 = load <16 x i16>, <16 x i16>* %3872, align 2, !tbaa !399
  %3874 = getelementptr inbounds i16, i16* %3870, i64 -16
  %3875 = bitcast i16* %3874 to <16 x i16>*
  %3876 = load <16 x i16>, <16 x i16>* %3875, align 2, !tbaa !399
  %3877 = zext i32 %.pre-phi3524 to i64
  %3878 = mul nsw i64 %3877, %116
  %3879 = add nsw i64 %3878, %94
  %3880 = getelementptr inbounds i16, i16* %blur_x, i64 %3879
  %3881 = getelementptr inbounds i16, i16* %3880, i64 -32
  %3882 = bitcast i16* %3881 to <16 x i16>*
  %3883 = load <16 x i16>, <16 x i16>* %3882, align 2, !tbaa !399
  %3884 = getelementptr inbounds i16, i16* %3880, i64 -16
  %3885 = bitcast i16* %3884 to <16 x i16>*
  %3886 = load <16 x i16>, <16 x i16>* %3885, align 2, !tbaa !399
  %3887 = zext i32 %.pre-phi3528 to i64
  %3888 = mul nsw i64 %3887, %116
  %3889 = add nsw i64 %3888, %94
  %3890 = getelementptr inbounds i16, i16* %blur_x, i64 %3889
  %3891 = getelementptr inbounds i16, i16* %3890, i64 -32
  %3892 = bitcast i16* %3891 to <16 x i16>*
  %3893 = load <16 x i16>, <16 x i16>* %3892, align 2, !tbaa !399
  %3894 = getelementptr inbounds i16, i16* %3890, i64 -16
  %3895 = bitcast i16* %3894 to <16 x i16>*
  %3896 = load <16 x i16>, <16 x i16>* %3895, align 2, !tbaa !399
  %3897 = mul nsw i64 %3838, %116
  %3898 = add nsw i64 %3897, %94
  %3899 = getelementptr inbounds i16, i16* %blur_x, i64 %3898
  %3900 = getelementptr inbounds i16, i16* %3899, i64 -32
  %3901 = bitcast i16* %3900 to <16 x i16>*
  %3902 = load <16 x i16>, <16 x i16>* %3901, align 2, !tbaa !399
  %3903 = getelementptr inbounds i16, i16* %3899, i64 -16
  %3904 = bitcast i16* %3903 to <16 x i16>*
  %3905 = load <16 x i16>, <16 x i16>* %3904, align 2, !tbaa !399
  %3906 = zext i32 %.pre-phi3534 to i64
  %3907 = mul nsw i64 %3906, %116
  %3908 = add nsw i64 %3907, %94
  %3909 = getelementptr inbounds i16, i16* %blur_x, i64 %3908
  %3910 = getelementptr inbounds i16, i16* %3909, i64 -32
  %3911 = bitcast i16* %3910 to <16 x i16>*
  %3912 = load <16 x i16>, <16 x i16>* %3911, align 2, !tbaa !399
  %3913 = getelementptr inbounds i16, i16* %3909, i64 -16
  %3914 = bitcast i16* %3913 to <16 x i16>*
  %3915 = load <16 x i16>, <16 x i16>* %3914, align 2, !tbaa !399
  %3916 = add <16 x i16> %3863, %3853
  %3917 = add <16 x i16> %3916, %3873
  %3918 = add <16 x i16> %3917, %3883
  %3919 = add <16 x i16> %3918, %3893
  %3920 = add <16 x i16> %3919, %3902
  %3921 = add <16 x i16> %3920, %3912
  %3922 = add <16 x i16> %3866, %3856
  %3923 = add <16 x i16> %3922, %3876
  %3924 = add <16 x i16> %3923, %3886
  %3925 = add <16 x i16> %3924, %3896
  %3926 = add <16 x i16> %3925, %3905
  %3927 = add <16 x i16> %3926, %3915
  %3928 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3921, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3929 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3927, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %3930 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3928, <16 x i16> %3921)
  %3931 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %3929, <16 x i16> %3927)
  %3932 = shufflevector <16 x i16> %3930, <16 x i16> %3931, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3933 = lshr <32 x i16> %3932, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3934 = shufflevector <32 x i16> %3933, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3935 = sext i32 %a26 to i64
  %3936 = add nsw i64 %3935, 2
  %3937 = mul nsw i64 %3936, %117
  %3938 = add nsw i64 %119, %3937
  %3939 = getelementptr inbounds i16, i16* %66, i64 %3938
  %3940 = getelementptr inbounds i16, i16* %3939, i64 -32
  %3941 = bitcast i16* %3940 to <16 x i16>*
  store <16 x i16> %3934, <16 x i16>* %3941, align 2, !tbaa !401
  %3942 = shufflevector <32 x i16> %3933, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3943 = getelementptr inbounds i16, i16* %3939, i64 -16
  %3944 = bitcast i16* %3943 to <16 x i16>*
  store <16 x i16> %3942, <16 x i16>* %3944, align 2, !tbaa !401
  br label %after_bb173

"for blur_y.s0.x.x.rebased178":                   ; preds = %"for blur_y.s0.x.x.rebased178.preheader", %"consume blur_x185"
  %indvars.iv3285 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased178.preheader" ], [ %indvars.iv.next3286, %"consume blur_x185" ]
  %3945 = add nsw i64 %indvars.iv3285, %101
  %3946 = icmp slt i64 %3945, 1
  %3947 = trunc i64 %3945 to i32
  %3948 = shl nsw i32 %3947, 5
  %3949 = icmp sgt i32 %4, %3948
  %3950 = or i1 %3946, %3949
  br i1 %3950, label %"produce blur_x184", label %"for blur_y.s0.x.x.rebased178.consume blur_x185_crit_edge"

"for blur_y.s0.x.x.rebased178.consume blur_x185_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased178"
  %.pre3537 = shl nsw i64 %3945, 5
  br label %"consume blur_x185"

"end for blur_y.s0.x.x.rebased179":               ; preds = %"consume blur_x185", %after_bb173
  br i1 %102, label %"for blur_y.s0.x.x.rebased186.preheader", label %"end for blur_y.s0.x.x.rebased187", !prof !386

"for blur_y.s0.x.x.rebased186.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased179"
  %3951 = sext i32 %t1726 to i64
  %3952 = zext i32 %.pre-phi3516 to i64
  %3953 = mul nsw i64 %3952, %116
  %3954 = sub nsw i64 %3953, %96
  %3955 = zext i32 %.pre-phi3512 to i64
  %3956 = mul nsw i64 %3955, %116
  %3957 = sub nsw i64 %3956, %96
  %3958 = zext i32 %.pre-phi3520 to i64
  %3959 = mul nsw i64 %3958, %116
  %3960 = sub nsw i64 %3959, %96
  %3961 = zext i32 %.pre-phi3524 to i64
  %3962 = mul nsw i64 %3961, %116
  %3963 = sub nsw i64 %3962, %96
  %3964 = zext i32 %.pre-phi3528 to i64
  %3965 = mul nsw i64 %3964, %116
  %3966 = sub nsw i64 %3965, %96
  %3967 = zext i32 %.pre-phi to i64
  %3968 = mul nsw i64 %3967, %116
  %3969 = sub nsw i64 %3968, %96
  %3970 = zext i32 %.pre-phi3534 to i64
  %3971 = mul nsw i64 %3970, %116
  %3972 = sub nsw i64 %3971, %96
  %3973 = sext i32 %a26 to i64
  %3974 = add nsw i64 %3973, 2
  %3975 = mul nsw i64 %3974, %117
  %3976 = add nsw i64 %3975, %120
  br label %"for blur_y.s0.x.x.rebased186"

"produce blur_x184":                              ; preds = %"for blur_y.s0.x.x.rebased178"
  %t784 = add nsw i32 %3948, %t1793
  %3977 = sext i32 %t784 to i64
  %3978 = getelementptr inbounds i16, i16* %read_input, i64 %3977
  %3979 = getelementptr inbounds i16, i16* %3978, i64 1
  %3980 = bitcast i16* %3979 to <16 x i16>*
  %3981 = load <16 x i16>, <16 x i16>* %3980, align 2, !tbaa !396
  %3982 = getelementptr inbounds i16, i16* %3978, i64 17
  %3983 = bitcast i16* %3982 to <16 x i16>*
  %3984 = load <16 x i16>, <16 x i16>* %3983, align 2, !tbaa !396
  %3985 = bitcast i16* %3978 to <16 x i16>*
  %3986 = load <16 x i16>, <16 x i16>* %3985, align 2, !tbaa !396
  %3987 = getelementptr inbounds i16, i16* %3978, i64 16
  %3988 = bitcast i16* %3987 to <16 x i16>*
  %3989 = load <16 x i16>, <16 x i16>* %3988, align 2, !tbaa !396
  %3990 = getelementptr inbounds i16, i16* %3978, i64 2
  %3991 = bitcast i16* %3990 to <16 x i16>*
  %3992 = load <16 x i16>, <16 x i16>* %3991, align 2, !tbaa !396
  %3993 = getelementptr inbounds i16, i16* %3978, i64 18
  %3994 = bitcast i16* %3993 to <16 x i16>*
  %3995 = load <16 x i16>, <16 x i16>* %3994, align 2, !tbaa !396
  %3996 = getelementptr inbounds i16, i16* %3978, i64 3
  %3997 = bitcast i16* %3996 to <16 x i16>*
  %3998 = load <16 x i16>, <16 x i16>* %3997, align 2, !tbaa !396
  %3999 = getelementptr inbounds i16, i16* %3978, i64 19
  %4000 = bitcast i16* %3999 to <16 x i16>*
  %4001 = load <16 x i16>, <16 x i16>* %4000, align 2, !tbaa !396
  %4002 = getelementptr inbounds i16, i16* %3978, i64 4
  %4003 = bitcast i16* %4002 to <16 x i16>*
  %4004 = load <16 x i16>, <16 x i16>* %4003, align 2, !tbaa !396
  %4005 = getelementptr inbounds i16, i16* %3978, i64 20
  %4006 = bitcast i16* %4005 to <16 x i16>*
  %4007 = load <16 x i16>, <16 x i16>* %4006, align 2, !tbaa !396
  %4008 = getelementptr inbounds i16, i16* %3978, i64 6
  %4009 = bitcast i16* %4008 to <16 x i16>*
  %4010 = load <16 x i16>, <16 x i16>* %4009, align 2, !tbaa !396
  %4011 = getelementptr inbounds i16, i16* %3978, i64 22
  %4012 = bitcast i16* %4011 to <16 x i16>*
  %4013 = load <16 x i16>, <16 x i16>* %4012, align 2, !tbaa !396
  %4014 = getelementptr inbounds i16, i16* %3978, i64 5
  %4015 = bitcast i16* %4014 to <16 x i16>*
  %4016 = load <16 x i16>, <16 x i16>* %4015, align 2, !tbaa !396
  %4017 = getelementptr inbounds i16, i16* %3978, i64 21
  %4018 = bitcast i16* %4017 to <16 x i16>*
  %4019 = load <16 x i16>, <16 x i16>* %4018, align 2, !tbaa !396
  %4020 = add <16 x i16> %3986, %3981
  %4021 = add <16 x i16> %4020, %3992
  %4022 = add <16 x i16> %4021, %3998
  %4023 = add <16 x i16> %4022, %4004
  %4024 = add <16 x i16> %4023, %4010
  %4025 = add <16 x i16> %4024, %4016
  %4026 = add <16 x i16> %3989, %3984
  %4027 = add <16 x i16> %4026, %3995
  %4028 = add <16 x i16> %4027, %4001
  %4029 = add <16 x i16> %4028, %4007
  %4030 = add <16 x i16> %4029, %4013
  %4031 = add <16 x i16> %4030, %4019
  %4032 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4025, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4033 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4031, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4034 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4032, <16 x i16> %4025)
  %4035 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4033, <16 x i16> %4031)
  %4036 = shufflevector <16 x i16> %4034, <16 x i16> %4035, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4037 = lshr <32 x i16> %4036, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4038 = shufflevector <32 x i16> %4037, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4039 = shl nsw i64 %3945, 5
  %4040 = add nsw i64 %4039, %3750
  %4041 = getelementptr inbounds i16, i16* %blur_x, i64 %4040
  %4042 = bitcast i16* %4041 to <16 x i16>*
  store <16 x i16> %4038, <16 x i16>* %4042, align 2, !tbaa !399
  %4043 = shufflevector <32 x i16> %4037, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4044 = getelementptr inbounds i16, i16* %4041, i64 16
  %4045 = bitcast i16* %4044 to <16 x i16>*
  store <16 x i16> %4043, <16 x i16>* %4045, align 2, !tbaa !399
  br label %"consume blur_x185"

"consume blur_x185":                              ; preds = %"for blur_y.s0.x.x.rebased178.consume blur_x185_crit_edge", %"produce blur_x184"
  %.pre-phi3538 = phi i64 [ %.pre3537, %"for blur_y.s0.x.x.rebased178.consume blur_x185_crit_edge" ], [ %4039, %"produce blur_x184" ]
  %4046 = add nsw i64 %3753, %.pre-phi3538
  %4047 = getelementptr inbounds i16, i16* %blur_x, i64 %4046
  %4048 = bitcast i16* %4047 to <16 x i16>*
  %4049 = load <16 x i16>, <16 x i16>* %4048, align 2, !tbaa !399
  %4050 = getelementptr inbounds i16, i16* %4047, i64 16
  %4051 = bitcast i16* %4050 to <16 x i16>*
  %4052 = load <16 x i16>, <16 x i16>* %4051, align 2, !tbaa !399
  %4053 = add nsw i64 %3756, %.pre-phi3538
  %4054 = getelementptr inbounds i16, i16* %blur_x, i64 %4053
  %4055 = bitcast i16* %4054 to <16 x i16>*
  %4056 = load <16 x i16>, <16 x i16>* %4055, align 2, !tbaa !399
  %4057 = getelementptr inbounds i16, i16* %4054, i64 16
  %4058 = bitcast i16* %4057 to <16 x i16>*
  %4059 = load <16 x i16>, <16 x i16>* %4058, align 2, !tbaa !399
  %4060 = add nsw i64 %3759, %.pre-phi3538
  %4061 = getelementptr inbounds i16, i16* %blur_x, i64 %4060
  %4062 = bitcast i16* %4061 to <16 x i16>*
  %4063 = load <16 x i16>, <16 x i16>* %4062, align 2, !tbaa !399
  %4064 = getelementptr inbounds i16, i16* %4061, i64 16
  %4065 = bitcast i16* %4064 to <16 x i16>*
  %4066 = load <16 x i16>, <16 x i16>* %4065, align 2, !tbaa !399
  %4067 = add nsw i64 %3762, %.pre-phi3538
  %4068 = getelementptr inbounds i16, i16* %blur_x, i64 %4067
  %4069 = bitcast i16* %4068 to <16 x i16>*
  %4070 = load <16 x i16>, <16 x i16>* %4069, align 2, !tbaa !399
  %4071 = getelementptr inbounds i16, i16* %4068, i64 16
  %4072 = bitcast i16* %4071 to <16 x i16>*
  %4073 = load <16 x i16>, <16 x i16>* %4072, align 2, !tbaa !399
  %4074 = add nsw i64 %3765, %.pre-phi3538
  %4075 = getelementptr inbounds i16, i16* %blur_x, i64 %4074
  %4076 = bitcast i16* %4075 to <16 x i16>*
  %4077 = load <16 x i16>, <16 x i16>* %4076, align 2, !tbaa !399
  %4078 = getelementptr inbounds i16, i16* %4075, i64 16
  %4079 = bitcast i16* %4078 to <16 x i16>*
  %4080 = load <16 x i16>, <16 x i16>* %4079, align 2, !tbaa !399
  %4081 = add nsw i64 %3768, %.pre-phi3538
  %4082 = getelementptr inbounds i16, i16* %blur_x, i64 %4081
  %4083 = bitcast i16* %4082 to <16 x i16>*
  %4084 = load <16 x i16>, <16 x i16>* %4083, align 2, !tbaa !399
  %4085 = getelementptr inbounds i16, i16* %4082, i64 16
  %4086 = bitcast i16* %4085 to <16 x i16>*
  %4087 = load <16 x i16>, <16 x i16>* %4086, align 2, !tbaa !399
  %4088 = add nsw i64 %3771, %.pre-phi3538
  %4089 = getelementptr inbounds i16, i16* %blur_x, i64 %4088
  %4090 = bitcast i16* %4089 to <16 x i16>*
  %4091 = load <16 x i16>, <16 x i16>* %4090, align 2, !tbaa !399
  %4092 = getelementptr inbounds i16, i16* %4089, i64 16
  %4093 = bitcast i16* %4092 to <16 x i16>*
  %4094 = load <16 x i16>, <16 x i16>* %4093, align 2, !tbaa !399
  %4095 = add <16 x i16> %4056, %4049
  %4096 = add <16 x i16> %4095, %4063
  %4097 = add <16 x i16> %4096, %4070
  %4098 = add <16 x i16> %4097, %4077
  %4099 = add <16 x i16> %4098, %4084
  %4100 = add <16 x i16> %4099, %4091
  %4101 = add <16 x i16> %4059, %4052
  %4102 = add <16 x i16> %4101, %4066
  %4103 = add <16 x i16> %4102, %4073
  %4104 = add <16 x i16> %4103, %4080
  %4105 = add <16 x i16> %4104, %4087
  %4106 = add <16 x i16> %4105, %4094
  %4107 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4100, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4108 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4106, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4109 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4107, <16 x i16> %4100)
  %4110 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4108, <16 x i16> %4106)
  %4111 = shufflevector <16 x i16> %4109, <16 x i16> %4110, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4112 = lshr <32 x i16> %4111, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4113 = shufflevector <32 x i16> %4112, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4114 = add nsw i64 %3775, %.pre-phi3538
  %4115 = getelementptr inbounds i16, i16* %66, i64 %4114
  %4116 = bitcast i16* %4115 to <16 x i16>*
  store <16 x i16> %4113, <16 x i16>* %4116, align 2, !tbaa !401
  %4117 = shufflevector <32 x i16> %4112, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4118 = getelementptr inbounds i16, i16* %4115, i64 16
  %4119 = bitcast i16* %4118 to <16 x i16>*
  store <16 x i16> %4117, <16 x i16>* %4119, align 2, !tbaa !401
  %indvars.iv.next3286 = add nuw nsw i64 %indvars.iv3285, 1
  %.not2796 = icmp eq i64 %indvars.iv.next3286, %188
  br i1 %.not2796, label %"end for blur_y.s0.x.x.rebased179", label %"for blur_y.s0.x.x.rebased178"

"for blur_y.s0.x.x.rebased186":                   ; preds = %"for blur_y.s0.x.x.rebased186.preheader", %"consume blur_x194"
  %blur_y.s0.x.x.rebased188 = phi i32 [ %4270, %"consume blur_x194" ], [ 0, %"for blur_y.s0.x.x.rebased186.preheader" ]
  %4120 = add nsw i32 %blur_y.s0.x.x.rebased188, %t1670
  %a133 = shl nsw i32 %4120, 5
  %4121 = icmp sgt i32 %a14, %a133
  %b139 = select i1 %4121, i32 %a133, i32 %a14
  %4122 = icmp slt i32 %4120, 1
  %4123 = icmp sgt i32 %4, %a133
  %4124 = or i1 %4122, %4123
  br i1 %4124, label %"produce blur_x192", label %"consume blur_x194"

"end for blur_y.s0.x.x.rebased187":               ; preds = %"consume blur_x194", %"end for blur_y.s0.x.x.rebased179"
  br i1 %34, label %"produce blur_x198", label %after_bb195

"produce blur_x192":                              ; preds = %"for blur_y.s0.x.x.rebased186"
  %4125 = icmp slt i32 %b139, %4
  %blur_x.s0.x.v1.base.s193 = select i1 %4125, i32 %b139, i32 %4
  %t789 = add nsw i32 %blur_x.s0.x.v1.base.s193, %t1793
  %4126 = sext i32 %t789 to i64
  %4127 = getelementptr inbounds i16, i16* %read_input, i64 %4126
  %4128 = getelementptr inbounds i16, i16* %4127, i64 1
  %4129 = bitcast i16* %4128 to <16 x i16>*
  %4130 = load <16 x i16>, <16 x i16>* %4129, align 2, !tbaa !396
  %4131 = getelementptr inbounds i16, i16* %4127, i64 17
  %4132 = bitcast i16* %4131 to <16 x i16>*
  %4133 = load <16 x i16>, <16 x i16>* %4132, align 2, !tbaa !396
  %4134 = bitcast i16* %4127 to <16 x i16>*
  %4135 = load <16 x i16>, <16 x i16>* %4134, align 2, !tbaa !396
  %4136 = getelementptr inbounds i16, i16* %4127, i64 16
  %4137 = bitcast i16* %4136 to <16 x i16>*
  %4138 = load <16 x i16>, <16 x i16>* %4137, align 2, !tbaa !396
  %4139 = getelementptr inbounds i16, i16* %4127, i64 2
  %4140 = bitcast i16* %4139 to <16 x i16>*
  %4141 = load <16 x i16>, <16 x i16>* %4140, align 2, !tbaa !396
  %4142 = getelementptr inbounds i16, i16* %4127, i64 18
  %4143 = bitcast i16* %4142 to <16 x i16>*
  %4144 = load <16 x i16>, <16 x i16>* %4143, align 2, !tbaa !396
  %4145 = getelementptr inbounds i16, i16* %4127, i64 3
  %4146 = bitcast i16* %4145 to <16 x i16>*
  %4147 = load <16 x i16>, <16 x i16>* %4146, align 2, !tbaa !396
  %4148 = getelementptr inbounds i16, i16* %4127, i64 19
  %4149 = bitcast i16* %4148 to <16 x i16>*
  %4150 = load <16 x i16>, <16 x i16>* %4149, align 2, !tbaa !396
  %4151 = getelementptr inbounds i16, i16* %4127, i64 4
  %4152 = bitcast i16* %4151 to <16 x i16>*
  %4153 = load <16 x i16>, <16 x i16>* %4152, align 2, !tbaa !396
  %4154 = getelementptr inbounds i16, i16* %4127, i64 20
  %4155 = bitcast i16* %4154 to <16 x i16>*
  %4156 = load <16 x i16>, <16 x i16>* %4155, align 2, !tbaa !396
  %4157 = getelementptr inbounds i16, i16* %4127, i64 6
  %4158 = bitcast i16* %4157 to <16 x i16>*
  %4159 = load <16 x i16>, <16 x i16>* %4158, align 2, !tbaa !396
  %4160 = getelementptr inbounds i16, i16* %4127, i64 22
  %4161 = bitcast i16* %4160 to <16 x i16>*
  %4162 = load <16 x i16>, <16 x i16>* %4161, align 2, !tbaa !396
  %4163 = getelementptr inbounds i16, i16* %4127, i64 5
  %4164 = bitcast i16* %4163 to <16 x i16>*
  %4165 = load <16 x i16>, <16 x i16>* %4164, align 2, !tbaa !396
  %4166 = getelementptr inbounds i16, i16* %4127, i64 21
  %4167 = bitcast i16* %4166 to <16 x i16>*
  %4168 = load <16 x i16>, <16 x i16>* %4167, align 2, !tbaa !396
  %4169 = add <16 x i16> %4135, %4130
  %4170 = add <16 x i16> %4169, %4141
  %4171 = add <16 x i16> %4170, %4147
  %4172 = add <16 x i16> %4171, %4153
  %4173 = add <16 x i16> %4172, %4159
  %4174 = add <16 x i16> %4173, %4165
  %4175 = add <16 x i16> %4138, %4133
  %4176 = add <16 x i16> %4175, %4144
  %4177 = add <16 x i16> %4176, %4150
  %4178 = add <16 x i16> %4177, %4156
  %4179 = add <16 x i16> %4178, %4162
  %4180 = add <16 x i16> %4179, %4168
  %4181 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4174, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4182 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4180, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4183 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4181, <16 x i16> %4174)
  %4184 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4182, <16 x i16> %4180)
  %4185 = shufflevector <16 x i16> %4183, <16 x i16> %4184, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4186 = lshr <32 x i16> %4185, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4187 = shufflevector <32 x i16> %4186, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4188 = sext i32 %blur_x.s0.x.v1.base.s193 to i64
  %4189 = add nsw i64 %4188, %3951
  %4190 = getelementptr inbounds i16, i16* %blur_x, i64 %4189
  %4191 = bitcast i16* %4190 to <16 x i16>*
  store <16 x i16> %4187, <16 x i16>* %4191, align 2, !tbaa !399
  %4192 = shufflevector <32 x i16> %4186, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4193 = getelementptr inbounds i16, i16* %4190, i64 16
  %4194 = bitcast i16* %4193 to <16 x i16>*
  store <16 x i16> %4192, <16 x i16>* %4194, align 2, !tbaa !399
  br label %"consume blur_x194"

"consume blur_x194":                              ; preds = %"for blur_y.s0.x.x.rebased186", %"produce blur_x192"
  %4195 = sext i32 %b139 to i64
  %4196 = add nsw i64 %3954, %4195
  %4197 = getelementptr inbounds i16, i16* %blur_x, i64 %4196
  %4198 = bitcast i16* %4197 to <16 x i16>*
  %4199 = load <16 x i16>, <16 x i16>* %4198, align 2, !tbaa !399
  %4200 = getelementptr inbounds i16, i16* %4197, i64 16
  %4201 = bitcast i16* %4200 to <16 x i16>*
  %4202 = load <16 x i16>, <16 x i16>* %4201, align 2, !tbaa !399
  %4203 = add nsw i64 %3957, %4195
  %4204 = getelementptr inbounds i16, i16* %blur_x, i64 %4203
  %4205 = bitcast i16* %4204 to <16 x i16>*
  %4206 = load <16 x i16>, <16 x i16>* %4205, align 2, !tbaa !399
  %4207 = getelementptr inbounds i16, i16* %4204, i64 16
  %4208 = bitcast i16* %4207 to <16 x i16>*
  %4209 = load <16 x i16>, <16 x i16>* %4208, align 2, !tbaa !399
  %4210 = add nsw i64 %3960, %4195
  %4211 = getelementptr inbounds i16, i16* %blur_x, i64 %4210
  %4212 = bitcast i16* %4211 to <16 x i16>*
  %4213 = load <16 x i16>, <16 x i16>* %4212, align 2, !tbaa !399
  %4214 = getelementptr inbounds i16, i16* %4211, i64 16
  %4215 = bitcast i16* %4214 to <16 x i16>*
  %4216 = load <16 x i16>, <16 x i16>* %4215, align 2, !tbaa !399
  %4217 = add nsw i64 %3963, %4195
  %4218 = getelementptr inbounds i16, i16* %blur_x, i64 %4217
  %4219 = bitcast i16* %4218 to <16 x i16>*
  %4220 = load <16 x i16>, <16 x i16>* %4219, align 2, !tbaa !399
  %4221 = getelementptr inbounds i16, i16* %4218, i64 16
  %4222 = bitcast i16* %4221 to <16 x i16>*
  %4223 = load <16 x i16>, <16 x i16>* %4222, align 2, !tbaa !399
  %4224 = add nsw i64 %3966, %4195
  %4225 = getelementptr inbounds i16, i16* %blur_x, i64 %4224
  %4226 = bitcast i16* %4225 to <16 x i16>*
  %4227 = load <16 x i16>, <16 x i16>* %4226, align 2, !tbaa !399
  %4228 = getelementptr inbounds i16, i16* %4225, i64 16
  %4229 = bitcast i16* %4228 to <16 x i16>*
  %4230 = load <16 x i16>, <16 x i16>* %4229, align 2, !tbaa !399
  %4231 = add nsw i64 %3969, %4195
  %4232 = getelementptr inbounds i16, i16* %blur_x, i64 %4231
  %4233 = bitcast i16* %4232 to <16 x i16>*
  %4234 = load <16 x i16>, <16 x i16>* %4233, align 2, !tbaa !399
  %4235 = getelementptr inbounds i16, i16* %4232, i64 16
  %4236 = bitcast i16* %4235 to <16 x i16>*
  %4237 = load <16 x i16>, <16 x i16>* %4236, align 2, !tbaa !399
  %4238 = add nsw i64 %3972, %4195
  %4239 = getelementptr inbounds i16, i16* %blur_x, i64 %4238
  %4240 = bitcast i16* %4239 to <16 x i16>*
  %4241 = load <16 x i16>, <16 x i16>* %4240, align 2, !tbaa !399
  %4242 = getelementptr inbounds i16, i16* %4239, i64 16
  %4243 = bitcast i16* %4242 to <16 x i16>*
  %4244 = load <16 x i16>, <16 x i16>* %4243, align 2, !tbaa !399
  %4245 = add <16 x i16> %4206, %4199
  %4246 = add <16 x i16> %4245, %4213
  %4247 = add <16 x i16> %4246, %4220
  %4248 = add <16 x i16> %4247, %4227
  %4249 = add <16 x i16> %4248, %4234
  %4250 = add <16 x i16> %4249, %4241
  %4251 = add <16 x i16> %4209, %4202
  %4252 = add <16 x i16> %4251, %4216
  %4253 = add <16 x i16> %4252, %4223
  %4254 = add <16 x i16> %4253, %4230
  %4255 = add <16 x i16> %4254, %4237
  %4256 = add <16 x i16> %4255, %4244
  %4257 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4250, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4258 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4256, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4259 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4257, <16 x i16> %4250)
  %4260 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4258, <16 x i16> %4256)
  %4261 = shufflevector <16 x i16> %4259, <16 x i16> %4260, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4262 = lshr <32 x i16> %4261, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4263 = shufflevector <32 x i16> %4262, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4264 = add nsw i64 %3976, %4195
  %4265 = getelementptr inbounds i16, i16* %66, i64 %4264
  %4266 = bitcast i16* %4265 to <16 x i16>*
  store <16 x i16> %4263, <16 x i16>* %4266, align 2, !tbaa !401
  %4267 = shufflevector <32 x i16> %4262, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4268 = getelementptr inbounds i16, i16* %4265, i64 16
  %4269 = bitcast i16* %4268 to <16 x i16>*
  store <16 x i16> %4267, <16 x i16>* %4269, align 2, !tbaa !401
  %4270 = add nuw nsw i32 %blur_y.s0.x.x.rebased188, 1
  %.not2795 = icmp eq i32 %4270, %t1727
  br i1 %.not2795, label %"end for blur_y.s0.x.x.rebased187", label %"for blur_y.s0.x.x.rebased186"

after_bb195:                                      ; preds = %"end for blur_y.s0.x.x.rebased187", %"produce blur_x198"
  br i1 %100, label %"for blur_y.s0.x.x.rebased200.preheader", label %"end for blur_y.s0.x.x.rebased201", !prof !386

"for blur_y.s0.x.x.rebased200.preheader":         ; preds = %after_bb195
  %4271 = sext i32 %t1732 to i64
  %4272 = zext i32 %.pre-phi3520 to i64
  %4273 = mul nsw i64 %4272, %116
  %4274 = sub nsw i64 %4273, %96
  %4275 = zext i32 %.pre-phi3516 to i64
  %4276 = mul nsw i64 %4275, %116
  %4277 = sub nsw i64 %4276, %96
  %4278 = zext i32 %.pre-phi3524 to i64
  %4279 = mul nsw i64 %4278, %116
  %4280 = sub nsw i64 %4279, %96
  %4281 = zext i32 %.pre-phi3528 to i64
  %4282 = mul nsw i64 %4281, %116
  %4283 = sub nsw i64 %4282, %96
  %4284 = zext i32 %.pre-phi3534 to i64
  %4285 = mul nsw i64 %4284, %116
  %4286 = sub nsw i64 %4285, %96
  %4287 = zext i32 %.pre-phi3508 to i64
  %4288 = mul nsw i64 %4287, %116
  %4289 = sub nsw i64 %4288, %96
  %4290 = zext i32 %.pre-phi to i64
  %4291 = mul nsw i64 %4290, %116
  %4292 = sub nsw i64 %4291, %96
  %4293 = sext i32 %a26 to i64
  %4294 = add nsw i64 %4293, 3
  %4295 = mul nsw i64 %4294, %117
  %4296 = add nsw i64 %4295, %120
  br label %"for blur_y.s0.x.x.rebased200"

"produce blur_x198":                              ; preds = %"end for blur_y.s0.x.x.rebased187"
  %4297 = getelementptr inbounds i16, i16* %read_input, i64 %125
  %4298 = getelementptr inbounds i16, i16* %4297, i64 -31
  %4299 = bitcast i16* %4298 to <16 x i16>*
  %4300 = load <16 x i16>, <16 x i16>* %4299, align 2, !tbaa !396
  %4301 = getelementptr inbounds i16, i16* %4297, i64 -15
  %4302 = bitcast i16* %4301 to <16 x i16>*
  %4303 = load <16 x i16>, <16 x i16>* %4302, align 2, !tbaa !396
  %4304 = getelementptr inbounds i16, i16* %4297, i64 -32
  %4305 = bitcast i16* %4304 to <16 x i16>*
  %4306 = load <16 x i16>, <16 x i16>* %4305, align 2, !tbaa !396
  %4307 = getelementptr inbounds i16, i16* %4297, i64 -16
  %4308 = bitcast i16* %4307 to <16 x i16>*
  %4309 = load <16 x i16>, <16 x i16>* %4308, align 2, !tbaa !396
  %4310 = getelementptr inbounds i16, i16* %4297, i64 -30
  %4311 = bitcast i16* %4310 to <16 x i16>*
  %4312 = load <16 x i16>, <16 x i16>* %4311, align 2, !tbaa !396
  %4313 = getelementptr inbounds i16, i16* %4297, i64 -14
  %4314 = bitcast i16* %4313 to <16 x i16>*
  %4315 = load <16 x i16>, <16 x i16>* %4314, align 2, !tbaa !396
  %4316 = getelementptr inbounds i16, i16* %4297, i64 -29
  %4317 = bitcast i16* %4316 to <16 x i16>*
  %4318 = load <16 x i16>, <16 x i16>* %4317, align 2, !tbaa !396
  %4319 = getelementptr inbounds i16, i16* %4297, i64 -13
  %4320 = bitcast i16* %4319 to <16 x i16>*
  %4321 = load <16 x i16>, <16 x i16>* %4320, align 2, !tbaa !396
  %4322 = getelementptr inbounds i16, i16* %4297, i64 -28
  %4323 = bitcast i16* %4322 to <16 x i16>*
  %4324 = load <16 x i16>, <16 x i16>* %4323, align 2, !tbaa !396
  %4325 = getelementptr inbounds i16, i16* %4297, i64 -12
  %4326 = bitcast i16* %4325 to <16 x i16>*
  %4327 = load <16 x i16>, <16 x i16>* %4326, align 2, !tbaa !396
  %4328 = getelementptr inbounds i16, i16* %4297, i64 -26
  %4329 = bitcast i16* %4328 to <16 x i16>*
  %4330 = load <16 x i16>, <16 x i16>* %4329, align 2, !tbaa !396
  %4331 = getelementptr inbounds i16, i16* %4297, i64 -10
  %4332 = bitcast i16* %4331 to <16 x i16>*
  %4333 = load <16 x i16>, <16 x i16>* %4332, align 2, !tbaa !396
  %4334 = getelementptr inbounds i16, i16* %4297, i64 -27
  %4335 = bitcast i16* %4334 to <16 x i16>*
  %4336 = load <16 x i16>, <16 x i16>* %4335, align 2, !tbaa !396
  %4337 = getelementptr inbounds i16, i16* %4297, i64 -11
  %4338 = bitcast i16* %4337 to <16 x i16>*
  %4339 = load <16 x i16>, <16 x i16>* %4338, align 2, !tbaa !396
  %4340 = add <16 x i16> %4306, %4300
  %4341 = add <16 x i16> %4340, %4312
  %4342 = add <16 x i16> %4341, %4318
  %4343 = add <16 x i16> %4342, %4324
  %4344 = add <16 x i16> %4343, %4330
  %4345 = add <16 x i16> %4344, %4336
  %4346 = add <16 x i16> %4309, %4303
  %4347 = add <16 x i16> %4346, %4315
  %4348 = add <16 x i16> %4347, %4321
  %4349 = add <16 x i16> %4348, %4327
  %4350 = add <16 x i16> %4349, %4333
  %4351 = add <16 x i16> %4350, %4339
  %4352 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4345, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4353 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4351, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4354 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4352, <16 x i16> %4345)
  %4355 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4353, <16 x i16> %4351)
  %4356 = shufflevector <16 x i16> %4354, <16 x i16> %4355, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4357 = lshr <32 x i16> %4356, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4358 = shufflevector <32 x i16> %4357, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4359 = zext i32 %.pre-phi3508 to i64
  %4360 = mul nsw i64 %97, %4359
  %4361 = add nsw i64 %99, %4360
  %4362 = getelementptr inbounds i16, i16* %blur_x, i64 %4361
  %4363 = getelementptr inbounds i16, i16* %4362, i64 -32
  %4364 = bitcast i16* %4363 to <16 x i16>*
  store <16 x i16> %4358, <16 x i16>* %4364, align 2, !tbaa !399
  %4365 = shufflevector <32 x i16> %4357, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4366 = getelementptr inbounds i16, i16* %4362, i64 -16
  %4367 = bitcast i16* %4366 to <16 x i16>*
  store <16 x i16> %4365, <16 x i16>* %4367, align 2, !tbaa !399
  %4368 = zext i32 %.pre-phi3520 to i64
  %4369 = mul nsw i64 %4368, %116
  %4370 = add nsw i64 %4369, %94
  %4371 = getelementptr inbounds i16, i16* %blur_x, i64 %4370
  %4372 = getelementptr inbounds i16, i16* %4371, i64 -32
  %4373 = bitcast i16* %4372 to <16 x i16>*
  %4374 = load <16 x i16>, <16 x i16>* %4373, align 2, !tbaa !399
  %4375 = getelementptr inbounds i16, i16* %4371, i64 -16
  %4376 = bitcast i16* %4375 to <16 x i16>*
  %4377 = load <16 x i16>, <16 x i16>* %4376, align 2, !tbaa !399
  %4378 = zext i32 %.pre-phi3516 to i64
  %4379 = mul nsw i64 %4378, %116
  %4380 = add nsw i64 %4379, %94
  %4381 = getelementptr inbounds i16, i16* %blur_x, i64 %4380
  %4382 = getelementptr inbounds i16, i16* %4381, i64 -32
  %4383 = bitcast i16* %4382 to <16 x i16>*
  %4384 = load <16 x i16>, <16 x i16>* %4383, align 2, !tbaa !399
  %4385 = getelementptr inbounds i16, i16* %4381, i64 -16
  %4386 = bitcast i16* %4385 to <16 x i16>*
  %4387 = load <16 x i16>, <16 x i16>* %4386, align 2, !tbaa !399
  %4388 = zext i32 %.pre-phi3524 to i64
  %4389 = mul nsw i64 %4388, %116
  %4390 = add nsw i64 %4389, %94
  %4391 = getelementptr inbounds i16, i16* %blur_x, i64 %4390
  %4392 = getelementptr inbounds i16, i16* %4391, i64 -32
  %4393 = bitcast i16* %4392 to <16 x i16>*
  %4394 = load <16 x i16>, <16 x i16>* %4393, align 2, !tbaa !399
  %4395 = getelementptr inbounds i16, i16* %4391, i64 -16
  %4396 = bitcast i16* %4395 to <16 x i16>*
  %4397 = load <16 x i16>, <16 x i16>* %4396, align 2, !tbaa !399
  %4398 = zext i32 %.pre-phi3528 to i64
  %4399 = mul nsw i64 %4398, %116
  %4400 = add nsw i64 %4399, %94
  %4401 = getelementptr inbounds i16, i16* %blur_x, i64 %4400
  %4402 = getelementptr inbounds i16, i16* %4401, i64 -32
  %4403 = bitcast i16* %4402 to <16 x i16>*
  %4404 = load <16 x i16>, <16 x i16>* %4403, align 2, !tbaa !399
  %4405 = getelementptr inbounds i16, i16* %4401, i64 -16
  %4406 = bitcast i16* %4405 to <16 x i16>*
  %4407 = load <16 x i16>, <16 x i16>* %4406, align 2, !tbaa !399
  %4408 = zext i32 %.pre-phi3534 to i64
  %4409 = mul nsw i64 %4408, %116
  %4410 = add nsw i64 %4409, %94
  %4411 = getelementptr inbounds i16, i16* %blur_x, i64 %4410
  %4412 = getelementptr inbounds i16, i16* %4411, i64 -32
  %4413 = bitcast i16* %4412 to <16 x i16>*
  %4414 = load <16 x i16>, <16 x i16>* %4413, align 2, !tbaa !399
  %4415 = getelementptr inbounds i16, i16* %4411, i64 -16
  %4416 = bitcast i16* %4415 to <16 x i16>*
  %4417 = load <16 x i16>, <16 x i16>* %4416, align 2, !tbaa !399
  %4418 = mul nsw i64 %4359, %116
  %4419 = add nsw i64 %4418, %94
  %4420 = getelementptr inbounds i16, i16* %blur_x, i64 %4419
  %4421 = getelementptr inbounds i16, i16* %4420, i64 -32
  %4422 = bitcast i16* %4421 to <16 x i16>*
  %4423 = load <16 x i16>, <16 x i16>* %4422, align 2, !tbaa !399
  %4424 = getelementptr inbounds i16, i16* %4420, i64 -16
  %4425 = bitcast i16* %4424 to <16 x i16>*
  %4426 = load <16 x i16>, <16 x i16>* %4425, align 2, !tbaa !399
  %4427 = zext i32 %.pre-phi to i64
  %4428 = mul nsw i64 %4427, %116
  %4429 = add nsw i64 %4428, %94
  %4430 = getelementptr inbounds i16, i16* %blur_x, i64 %4429
  %4431 = getelementptr inbounds i16, i16* %4430, i64 -32
  %4432 = bitcast i16* %4431 to <16 x i16>*
  %4433 = load <16 x i16>, <16 x i16>* %4432, align 2, !tbaa !399
  %4434 = getelementptr inbounds i16, i16* %4430, i64 -16
  %4435 = bitcast i16* %4434 to <16 x i16>*
  %4436 = load <16 x i16>, <16 x i16>* %4435, align 2, !tbaa !399
  %4437 = add <16 x i16> %4384, %4374
  %4438 = add <16 x i16> %4437, %4394
  %4439 = add <16 x i16> %4438, %4404
  %4440 = add <16 x i16> %4439, %4414
  %4441 = add <16 x i16> %4440, %4423
  %4442 = add <16 x i16> %4441, %4433
  %4443 = add <16 x i16> %4387, %4377
  %4444 = add <16 x i16> %4443, %4397
  %4445 = add <16 x i16> %4444, %4407
  %4446 = add <16 x i16> %4445, %4417
  %4447 = add <16 x i16> %4446, %4426
  %4448 = add <16 x i16> %4447, %4436
  %4449 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4442, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4450 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4448, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4451 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4449, <16 x i16> %4442)
  %4452 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4450, <16 x i16> %4448)
  %4453 = shufflevector <16 x i16> %4451, <16 x i16> %4452, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4454 = lshr <32 x i16> %4453, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4455 = shufflevector <32 x i16> %4454, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4456 = sext i32 %a26 to i64
  %4457 = add nsw i64 %4456, 3
  %4458 = mul nsw i64 %4457, %117
  %4459 = add nsw i64 %119, %4458
  %4460 = getelementptr inbounds i16, i16* %66, i64 %4459
  %4461 = getelementptr inbounds i16, i16* %4460, i64 -32
  %4462 = bitcast i16* %4461 to <16 x i16>*
  store <16 x i16> %4455, <16 x i16>* %4462, align 2, !tbaa !401
  %4463 = shufflevector <32 x i16> %4454, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4464 = getelementptr inbounds i16, i16* %4460, i64 -16
  %4465 = bitcast i16* %4464 to <16 x i16>*
  store <16 x i16> %4463, <16 x i16>* %4465, align 2, !tbaa !401
  br label %after_bb195

"for blur_y.s0.x.x.rebased200":                   ; preds = %"for blur_y.s0.x.x.rebased200.preheader", %"consume blur_x207"
  %indvars.iv3288 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased200.preheader" ], [ %indvars.iv.next3289, %"consume blur_x207" ]
  %4466 = add nsw i64 %indvars.iv3288, %101
  %4467 = icmp slt i64 %4466, 1
  %4468 = trunc i64 %4466 to i32
  %4469 = shl nsw i32 %4468, 5
  %4470 = icmp sgt i32 %4, %4469
  %4471 = or i1 %4467, %4470
  br i1 %4471, label %"produce blur_x206", label %"for blur_y.s0.x.x.rebased200.consume blur_x207_crit_edge"

"for blur_y.s0.x.x.rebased200.consume blur_x207_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased200"
  %.pre3539 = shl nsw i64 %4466, 5
  br label %"consume blur_x207"

"end for blur_y.s0.x.x.rebased201":               ; preds = %"consume blur_x207", %after_bb195
  br i1 %102, label %"for blur_y.s0.x.x.rebased208.preheader", label %"end for blur_y.s0.x.x.rebased209", !prof !386

"for blur_y.s0.x.x.rebased208.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased201"
  %4472 = sext i32 %t1732 to i64
  %4473 = zext i32 %.pre-phi3520 to i64
  %4474 = mul nsw i64 %4473, %116
  %4475 = sub nsw i64 %4474, %96
  %4476 = zext i32 %.pre-phi3516 to i64
  %4477 = mul nsw i64 %4476, %116
  %4478 = sub nsw i64 %4477, %96
  %4479 = zext i32 %.pre-phi3524 to i64
  %4480 = mul nsw i64 %4479, %116
  %4481 = sub nsw i64 %4480, %96
  %4482 = zext i32 %.pre-phi3528 to i64
  %4483 = mul nsw i64 %4482, %116
  %4484 = sub nsw i64 %4483, %96
  %4485 = zext i32 %.pre-phi3534 to i64
  %4486 = mul nsw i64 %4485, %116
  %4487 = sub nsw i64 %4486, %96
  %4488 = zext i32 %.pre-phi3508 to i64
  %4489 = mul nsw i64 %4488, %116
  %4490 = sub nsw i64 %4489, %96
  %4491 = zext i32 %.pre-phi to i64
  %4492 = mul nsw i64 %4491, %116
  %4493 = sub nsw i64 %4492, %96
  %4494 = sext i32 %a26 to i64
  %4495 = add nsw i64 %4494, 3
  %4496 = mul nsw i64 %4495, %117
  %4497 = add nsw i64 %4496, %120
  br label %"for blur_y.s0.x.x.rebased208"

"produce blur_x206":                              ; preds = %"for blur_y.s0.x.x.rebased200"
  %t800 = add nsw i32 %4469, %t1809
  %4498 = sext i32 %t800 to i64
  %4499 = getelementptr inbounds i16, i16* %read_input, i64 %4498
  %4500 = getelementptr inbounds i16, i16* %4499, i64 1
  %4501 = bitcast i16* %4500 to <16 x i16>*
  %4502 = load <16 x i16>, <16 x i16>* %4501, align 2, !tbaa !396
  %4503 = getelementptr inbounds i16, i16* %4499, i64 17
  %4504 = bitcast i16* %4503 to <16 x i16>*
  %4505 = load <16 x i16>, <16 x i16>* %4504, align 2, !tbaa !396
  %4506 = bitcast i16* %4499 to <16 x i16>*
  %4507 = load <16 x i16>, <16 x i16>* %4506, align 2, !tbaa !396
  %4508 = getelementptr inbounds i16, i16* %4499, i64 16
  %4509 = bitcast i16* %4508 to <16 x i16>*
  %4510 = load <16 x i16>, <16 x i16>* %4509, align 2, !tbaa !396
  %4511 = getelementptr inbounds i16, i16* %4499, i64 2
  %4512 = bitcast i16* %4511 to <16 x i16>*
  %4513 = load <16 x i16>, <16 x i16>* %4512, align 2, !tbaa !396
  %4514 = getelementptr inbounds i16, i16* %4499, i64 18
  %4515 = bitcast i16* %4514 to <16 x i16>*
  %4516 = load <16 x i16>, <16 x i16>* %4515, align 2, !tbaa !396
  %4517 = getelementptr inbounds i16, i16* %4499, i64 3
  %4518 = bitcast i16* %4517 to <16 x i16>*
  %4519 = load <16 x i16>, <16 x i16>* %4518, align 2, !tbaa !396
  %4520 = getelementptr inbounds i16, i16* %4499, i64 19
  %4521 = bitcast i16* %4520 to <16 x i16>*
  %4522 = load <16 x i16>, <16 x i16>* %4521, align 2, !tbaa !396
  %4523 = getelementptr inbounds i16, i16* %4499, i64 4
  %4524 = bitcast i16* %4523 to <16 x i16>*
  %4525 = load <16 x i16>, <16 x i16>* %4524, align 2, !tbaa !396
  %4526 = getelementptr inbounds i16, i16* %4499, i64 20
  %4527 = bitcast i16* %4526 to <16 x i16>*
  %4528 = load <16 x i16>, <16 x i16>* %4527, align 2, !tbaa !396
  %4529 = getelementptr inbounds i16, i16* %4499, i64 6
  %4530 = bitcast i16* %4529 to <16 x i16>*
  %4531 = load <16 x i16>, <16 x i16>* %4530, align 2, !tbaa !396
  %4532 = getelementptr inbounds i16, i16* %4499, i64 22
  %4533 = bitcast i16* %4532 to <16 x i16>*
  %4534 = load <16 x i16>, <16 x i16>* %4533, align 2, !tbaa !396
  %4535 = getelementptr inbounds i16, i16* %4499, i64 5
  %4536 = bitcast i16* %4535 to <16 x i16>*
  %4537 = load <16 x i16>, <16 x i16>* %4536, align 2, !tbaa !396
  %4538 = getelementptr inbounds i16, i16* %4499, i64 21
  %4539 = bitcast i16* %4538 to <16 x i16>*
  %4540 = load <16 x i16>, <16 x i16>* %4539, align 2, !tbaa !396
  %4541 = add <16 x i16> %4507, %4502
  %4542 = add <16 x i16> %4541, %4513
  %4543 = add <16 x i16> %4542, %4519
  %4544 = add <16 x i16> %4543, %4525
  %4545 = add <16 x i16> %4544, %4531
  %4546 = add <16 x i16> %4545, %4537
  %4547 = add <16 x i16> %4510, %4505
  %4548 = add <16 x i16> %4547, %4516
  %4549 = add <16 x i16> %4548, %4522
  %4550 = add <16 x i16> %4549, %4528
  %4551 = add <16 x i16> %4550, %4534
  %4552 = add <16 x i16> %4551, %4540
  %4553 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4546, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4554 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4552, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4555 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4553, <16 x i16> %4546)
  %4556 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4554, <16 x i16> %4552)
  %4557 = shufflevector <16 x i16> %4555, <16 x i16> %4556, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4558 = lshr <32 x i16> %4557, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4559 = shufflevector <32 x i16> %4558, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4560 = shl nsw i64 %4466, 5
  %4561 = add nsw i64 %4560, %4271
  %4562 = getelementptr inbounds i16, i16* %blur_x, i64 %4561
  %4563 = bitcast i16* %4562 to <16 x i16>*
  store <16 x i16> %4559, <16 x i16>* %4563, align 2, !tbaa !399
  %4564 = shufflevector <32 x i16> %4558, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4565 = getelementptr inbounds i16, i16* %4562, i64 16
  %4566 = bitcast i16* %4565 to <16 x i16>*
  store <16 x i16> %4564, <16 x i16>* %4566, align 2, !tbaa !399
  br label %"consume blur_x207"

"consume blur_x207":                              ; preds = %"for blur_y.s0.x.x.rebased200.consume blur_x207_crit_edge", %"produce blur_x206"
  %.pre-phi3540 = phi i64 [ %.pre3539, %"for blur_y.s0.x.x.rebased200.consume blur_x207_crit_edge" ], [ %4560, %"produce blur_x206" ]
  %4567 = add nsw i64 %4274, %.pre-phi3540
  %4568 = getelementptr inbounds i16, i16* %blur_x, i64 %4567
  %4569 = bitcast i16* %4568 to <16 x i16>*
  %4570 = load <16 x i16>, <16 x i16>* %4569, align 2, !tbaa !399
  %4571 = getelementptr inbounds i16, i16* %4568, i64 16
  %4572 = bitcast i16* %4571 to <16 x i16>*
  %4573 = load <16 x i16>, <16 x i16>* %4572, align 2, !tbaa !399
  %4574 = add nsw i64 %4277, %.pre-phi3540
  %4575 = getelementptr inbounds i16, i16* %blur_x, i64 %4574
  %4576 = bitcast i16* %4575 to <16 x i16>*
  %4577 = load <16 x i16>, <16 x i16>* %4576, align 2, !tbaa !399
  %4578 = getelementptr inbounds i16, i16* %4575, i64 16
  %4579 = bitcast i16* %4578 to <16 x i16>*
  %4580 = load <16 x i16>, <16 x i16>* %4579, align 2, !tbaa !399
  %4581 = add nsw i64 %4280, %.pre-phi3540
  %4582 = getelementptr inbounds i16, i16* %blur_x, i64 %4581
  %4583 = bitcast i16* %4582 to <16 x i16>*
  %4584 = load <16 x i16>, <16 x i16>* %4583, align 2, !tbaa !399
  %4585 = getelementptr inbounds i16, i16* %4582, i64 16
  %4586 = bitcast i16* %4585 to <16 x i16>*
  %4587 = load <16 x i16>, <16 x i16>* %4586, align 2, !tbaa !399
  %4588 = add nsw i64 %4283, %.pre-phi3540
  %4589 = getelementptr inbounds i16, i16* %blur_x, i64 %4588
  %4590 = bitcast i16* %4589 to <16 x i16>*
  %4591 = load <16 x i16>, <16 x i16>* %4590, align 2, !tbaa !399
  %4592 = getelementptr inbounds i16, i16* %4589, i64 16
  %4593 = bitcast i16* %4592 to <16 x i16>*
  %4594 = load <16 x i16>, <16 x i16>* %4593, align 2, !tbaa !399
  %4595 = add nsw i64 %4286, %.pre-phi3540
  %4596 = getelementptr inbounds i16, i16* %blur_x, i64 %4595
  %4597 = bitcast i16* %4596 to <16 x i16>*
  %4598 = load <16 x i16>, <16 x i16>* %4597, align 2, !tbaa !399
  %4599 = getelementptr inbounds i16, i16* %4596, i64 16
  %4600 = bitcast i16* %4599 to <16 x i16>*
  %4601 = load <16 x i16>, <16 x i16>* %4600, align 2, !tbaa !399
  %4602 = add nsw i64 %4289, %.pre-phi3540
  %4603 = getelementptr inbounds i16, i16* %blur_x, i64 %4602
  %4604 = bitcast i16* %4603 to <16 x i16>*
  %4605 = load <16 x i16>, <16 x i16>* %4604, align 2, !tbaa !399
  %4606 = getelementptr inbounds i16, i16* %4603, i64 16
  %4607 = bitcast i16* %4606 to <16 x i16>*
  %4608 = load <16 x i16>, <16 x i16>* %4607, align 2, !tbaa !399
  %4609 = add nsw i64 %4292, %.pre-phi3540
  %4610 = getelementptr inbounds i16, i16* %blur_x, i64 %4609
  %4611 = bitcast i16* %4610 to <16 x i16>*
  %4612 = load <16 x i16>, <16 x i16>* %4611, align 2, !tbaa !399
  %4613 = getelementptr inbounds i16, i16* %4610, i64 16
  %4614 = bitcast i16* %4613 to <16 x i16>*
  %4615 = load <16 x i16>, <16 x i16>* %4614, align 2, !tbaa !399
  %4616 = add <16 x i16> %4577, %4570
  %4617 = add <16 x i16> %4616, %4584
  %4618 = add <16 x i16> %4617, %4591
  %4619 = add <16 x i16> %4618, %4598
  %4620 = add <16 x i16> %4619, %4605
  %4621 = add <16 x i16> %4620, %4612
  %4622 = add <16 x i16> %4580, %4573
  %4623 = add <16 x i16> %4622, %4587
  %4624 = add <16 x i16> %4623, %4594
  %4625 = add <16 x i16> %4624, %4601
  %4626 = add <16 x i16> %4625, %4608
  %4627 = add <16 x i16> %4626, %4615
  %4628 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4621, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4629 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4627, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4630 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4628, <16 x i16> %4621)
  %4631 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4629, <16 x i16> %4627)
  %4632 = shufflevector <16 x i16> %4630, <16 x i16> %4631, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4633 = lshr <32 x i16> %4632, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4634 = shufflevector <32 x i16> %4633, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4635 = add nsw i64 %4296, %.pre-phi3540
  %4636 = getelementptr inbounds i16, i16* %66, i64 %4635
  %4637 = bitcast i16* %4636 to <16 x i16>*
  store <16 x i16> %4634, <16 x i16>* %4637, align 2, !tbaa !401
  %4638 = shufflevector <32 x i16> %4633, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4639 = getelementptr inbounds i16, i16* %4636, i64 16
  %4640 = bitcast i16* %4639 to <16 x i16>*
  store <16 x i16> %4638, <16 x i16>* %4640, align 2, !tbaa !401
  %indvars.iv.next3289 = add nuw nsw i64 %indvars.iv3288, 1
  %.not2794 = icmp eq i64 %indvars.iv.next3289, %188
  br i1 %.not2794, label %"end for blur_y.s0.x.x.rebased201", label %"for blur_y.s0.x.x.rebased200"

"for blur_y.s0.x.x.rebased208":                   ; preds = %"for blur_y.s0.x.x.rebased208.preheader", %"consume blur_x216"
  %blur_y.s0.x.x.rebased210 = phi i32 [ %4791, %"consume blur_x216" ], [ 0, %"for blur_y.s0.x.x.rebased208.preheader" ]
  %4641 = add nsw i32 %blur_y.s0.x.x.rebased210, %t1670
  %a140 = shl nsw i32 %4641, 5
  %4642 = icmp sgt i32 %a14, %a140
  %b146 = select i1 %4642, i32 %a140, i32 %a14
  %4643 = icmp slt i32 %4641, 1
  %4644 = icmp sgt i32 %4, %a140
  %4645 = or i1 %4643, %4644
  br i1 %4645, label %"produce blur_x214", label %"consume blur_x216"

"end for blur_y.s0.x.x.rebased209":               ; preds = %"consume blur_x216", %"end for blur_y.s0.x.x.rebased201"
  br i1 %34, label %"produce blur_x220", label %after_bb217

"produce blur_x214":                              ; preds = %"for blur_y.s0.x.x.rebased208"
  %4646 = icmp slt i32 %b146, %4
  %blur_x.s0.x.v1.base.s215 = select i1 %4646, i32 %b146, i32 %4
  %t805 = add nsw i32 %blur_x.s0.x.v1.base.s215, %t1809
  %4647 = sext i32 %t805 to i64
  %4648 = getelementptr inbounds i16, i16* %read_input, i64 %4647
  %4649 = getelementptr inbounds i16, i16* %4648, i64 1
  %4650 = bitcast i16* %4649 to <16 x i16>*
  %4651 = load <16 x i16>, <16 x i16>* %4650, align 2, !tbaa !396
  %4652 = getelementptr inbounds i16, i16* %4648, i64 17
  %4653 = bitcast i16* %4652 to <16 x i16>*
  %4654 = load <16 x i16>, <16 x i16>* %4653, align 2, !tbaa !396
  %4655 = bitcast i16* %4648 to <16 x i16>*
  %4656 = load <16 x i16>, <16 x i16>* %4655, align 2, !tbaa !396
  %4657 = getelementptr inbounds i16, i16* %4648, i64 16
  %4658 = bitcast i16* %4657 to <16 x i16>*
  %4659 = load <16 x i16>, <16 x i16>* %4658, align 2, !tbaa !396
  %4660 = getelementptr inbounds i16, i16* %4648, i64 2
  %4661 = bitcast i16* %4660 to <16 x i16>*
  %4662 = load <16 x i16>, <16 x i16>* %4661, align 2, !tbaa !396
  %4663 = getelementptr inbounds i16, i16* %4648, i64 18
  %4664 = bitcast i16* %4663 to <16 x i16>*
  %4665 = load <16 x i16>, <16 x i16>* %4664, align 2, !tbaa !396
  %4666 = getelementptr inbounds i16, i16* %4648, i64 3
  %4667 = bitcast i16* %4666 to <16 x i16>*
  %4668 = load <16 x i16>, <16 x i16>* %4667, align 2, !tbaa !396
  %4669 = getelementptr inbounds i16, i16* %4648, i64 19
  %4670 = bitcast i16* %4669 to <16 x i16>*
  %4671 = load <16 x i16>, <16 x i16>* %4670, align 2, !tbaa !396
  %4672 = getelementptr inbounds i16, i16* %4648, i64 4
  %4673 = bitcast i16* %4672 to <16 x i16>*
  %4674 = load <16 x i16>, <16 x i16>* %4673, align 2, !tbaa !396
  %4675 = getelementptr inbounds i16, i16* %4648, i64 20
  %4676 = bitcast i16* %4675 to <16 x i16>*
  %4677 = load <16 x i16>, <16 x i16>* %4676, align 2, !tbaa !396
  %4678 = getelementptr inbounds i16, i16* %4648, i64 6
  %4679 = bitcast i16* %4678 to <16 x i16>*
  %4680 = load <16 x i16>, <16 x i16>* %4679, align 2, !tbaa !396
  %4681 = getelementptr inbounds i16, i16* %4648, i64 22
  %4682 = bitcast i16* %4681 to <16 x i16>*
  %4683 = load <16 x i16>, <16 x i16>* %4682, align 2, !tbaa !396
  %4684 = getelementptr inbounds i16, i16* %4648, i64 5
  %4685 = bitcast i16* %4684 to <16 x i16>*
  %4686 = load <16 x i16>, <16 x i16>* %4685, align 2, !tbaa !396
  %4687 = getelementptr inbounds i16, i16* %4648, i64 21
  %4688 = bitcast i16* %4687 to <16 x i16>*
  %4689 = load <16 x i16>, <16 x i16>* %4688, align 2, !tbaa !396
  %4690 = add <16 x i16> %4656, %4651
  %4691 = add <16 x i16> %4690, %4662
  %4692 = add <16 x i16> %4691, %4668
  %4693 = add <16 x i16> %4692, %4674
  %4694 = add <16 x i16> %4693, %4680
  %4695 = add <16 x i16> %4694, %4686
  %4696 = add <16 x i16> %4659, %4654
  %4697 = add <16 x i16> %4696, %4665
  %4698 = add <16 x i16> %4697, %4671
  %4699 = add <16 x i16> %4698, %4677
  %4700 = add <16 x i16> %4699, %4683
  %4701 = add <16 x i16> %4700, %4689
  %4702 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4695, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4703 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4701, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4704 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4702, <16 x i16> %4695)
  %4705 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4703, <16 x i16> %4701)
  %4706 = shufflevector <16 x i16> %4704, <16 x i16> %4705, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4707 = lshr <32 x i16> %4706, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4708 = shufflevector <32 x i16> %4707, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4709 = sext i32 %blur_x.s0.x.v1.base.s215 to i64
  %4710 = add nsw i64 %4709, %4472
  %4711 = getelementptr inbounds i16, i16* %blur_x, i64 %4710
  %4712 = bitcast i16* %4711 to <16 x i16>*
  store <16 x i16> %4708, <16 x i16>* %4712, align 2, !tbaa !399
  %4713 = shufflevector <32 x i16> %4707, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4714 = getelementptr inbounds i16, i16* %4711, i64 16
  %4715 = bitcast i16* %4714 to <16 x i16>*
  store <16 x i16> %4713, <16 x i16>* %4715, align 2, !tbaa !399
  br label %"consume blur_x216"

"consume blur_x216":                              ; preds = %"for blur_y.s0.x.x.rebased208", %"produce blur_x214"
  %4716 = sext i32 %b146 to i64
  %4717 = add nsw i64 %4475, %4716
  %4718 = getelementptr inbounds i16, i16* %blur_x, i64 %4717
  %4719 = bitcast i16* %4718 to <16 x i16>*
  %4720 = load <16 x i16>, <16 x i16>* %4719, align 2, !tbaa !399
  %4721 = getelementptr inbounds i16, i16* %4718, i64 16
  %4722 = bitcast i16* %4721 to <16 x i16>*
  %4723 = load <16 x i16>, <16 x i16>* %4722, align 2, !tbaa !399
  %4724 = add nsw i64 %4478, %4716
  %4725 = getelementptr inbounds i16, i16* %blur_x, i64 %4724
  %4726 = bitcast i16* %4725 to <16 x i16>*
  %4727 = load <16 x i16>, <16 x i16>* %4726, align 2, !tbaa !399
  %4728 = getelementptr inbounds i16, i16* %4725, i64 16
  %4729 = bitcast i16* %4728 to <16 x i16>*
  %4730 = load <16 x i16>, <16 x i16>* %4729, align 2, !tbaa !399
  %4731 = add nsw i64 %4481, %4716
  %4732 = getelementptr inbounds i16, i16* %blur_x, i64 %4731
  %4733 = bitcast i16* %4732 to <16 x i16>*
  %4734 = load <16 x i16>, <16 x i16>* %4733, align 2, !tbaa !399
  %4735 = getelementptr inbounds i16, i16* %4732, i64 16
  %4736 = bitcast i16* %4735 to <16 x i16>*
  %4737 = load <16 x i16>, <16 x i16>* %4736, align 2, !tbaa !399
  %4738 = add nsw i64 %4484, %4716
  %4739 = getelementptr inbounds i16, i16* %blur_x, i64 %4738
  %4740 = bitcast i16* %4739 to <16 x i16>*
  %4741 = load <16 x i16>, <16 x i16>* %4740, align 2, !tbaa !399
  %4742 = getelementptr inbounds i16, i16* %4739, i64 16
  %4743 = bitcast i16* %4742 to <16 x i16>*
  %4744 = load <16 x i16>, <16 x i16>* %4743, align 2, !tbaa !399
  %4745 = add nsw i64 %4487, %4716
  %4746 = getelementptr inbounds i16, i16* %blur_x, i64 %4745
  %4747 = bitcast i16* %4746 to <16 x i16>*
  %4748 = load <16 x i16>, <16 x i16>* %4747, align 2, !tbaa !399
  %4749 = getelementptr inbounds i16, i16* %4746, i64 16
  %4750 = bitcast i16* %4749 to <16 x i16>*
  %4751 = load <16 x i16>, <16 x i16>* %4750, align 2, !tbaa !399
  %4752 = add nsw i64 %4490, %4716
  %4753 = getelementptr inbounds i16, i16* %blur_x, i64 %4752
  %4754 = bitcast i16* %4753 to <16 x i16>*
  %4755 = load <16 x i16>, <16 x i16>* %4754, align 2, !tbaa !399
  %4756 = getelementptr inbounds i16, i16* %4753, i64 16
  %4757 = bitcast i16* %4756 to <16 x i16>*
  %4758 = load <16 x i16>, <16 x i16>* %4757, align 2, !tbaa !399
  %4759 = add nsw i64 %4493, %4716
  %4760 = getelementptr inbounds i16, i16* %blur_x, i64 %4759
  %4761 = bitcast i16* %4760 to <16 x i16>*
  %4762 = load <16 x i16>, <16 x i16>* %4761, align 2, !tbaa !399
  %4763 = getelementptr inbounds i16, i16* %4760, i64 16
  %4764 = bitcast i16* %4763 to <16 x i16>*
  %4765 = load <16 x i16>, <16 x i16>* %4764, align 2, !tbaa !399
  %4766 = add <16 x i16> %4727, %4720
  %4767 = add <16 x i16> %4766, %4734
  %4768 = add <16 x i16> %4767, %4741
  %4769 = add <16 x i16> %4768, %4748
  %4770 = add <16 x i16> %4769, %4755
  %4771 = add <16 x i16> %4770, %4762
  %4772 = add <16 x i16> %4730, %4723
  %4773 = add <16 x i16> %4772, %4737
  %4774 = add <16 x i16> %4773, %4744
  %4775 = add <16 x i16> %4774, %4751
  %4776 = add <16 x i16> %4775, %4758
  %4777 = add <16 x i16> %4776, %4765
  %4778 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4771, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4779 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4777, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4780 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4778, <16 x i16> %4771)
  %4781 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4779, <16 x i16> %4777)
  %4782 = shufflevector <16 x i16> %4780, <16 x i16> %4781, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4783 = lshr <32 x i16> %4782, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4784 = shufflevector <32 x i16> %4783, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4785 = add nsw i64 %4497, %4716
  %4786 = getelementptr inbounds i16, i16* %66, i64 %4785
  %4787 = bitcast i16* %4786 to <16 x i16>*
  store <16 x i16> %4784, <16 x i16>* %4787, align 2, !tbaa !401
  %4788 = shufflevector <32 x i16> %4783, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4789 = getelementptr inbounds i16, i16* %4786, i64 16
  %4790 = bitcast i16* %4789 to <16 x i16>*
  store <16 x i16> %4788, <16 x i16>* %4790, align 2, !tbaa !401
  %4791 = add nuw nsw i32 %blur_y.s0.x.x.rebased210, 1
  %.not2793 = icmp eq i32 %4791, %t1727
  br i1 %.not2793, label %"end for blur_y.s0.x.x.rebased209", label %"for blur_y.s0.x.x.rebased208"

after_bb217:                                      ; preds = %"end for blur_y.s0.x.x.rebased209", %"produce blur_x220"
  br i1 %100, label %"for blur_y.s0.x.x.rebased222.preheader", label %"end for blur_y.s0.x.x.rebased223", !prof !386

"for blur_y.s0.x.x.rebased222.preheader":         ; preds = %after_bb217
  %4792 = sext i32 %t1738 to i64
  %4793 = zext i32 %.pre-phi3524 to i64
  %4794 = mul nsw i64 %4793, %116
  %4795 = sub nsw i64 %4794, %96
  %4796 = zext i32 %.pre-phi3520 to i64
  %4797 = mul nsw i64 %4796, %116
  %4798 = sub nsw i64 %4797, %96
  %4799 = zext i32 %.pre-phi3528 to i64
  %4800 = mul nsw i64 %4799, %116
  %4801 = sub nsw i64 %4800, %96
  %4802 = zext i32 %.pre-phi3534 to i64
  %4803 = mul nsw i64 %4802, %116
  %4804 = sub nsw i64 %4803, %96
  %4805 = zext i32 %.pre-phi to i64
  %4806 = mul nsw i64 %4805, %116
  %4807 = sub nsw i64 %4806, %96
  %4808 = zext i32 %.pre-phi3512 to i64
  %4809 = mul nsw i64 %4808, %116
  %4810 = sub nsw i64 %4809, %96
  %4811 = zext i32 %.pre-phi3508 to i64
  %4812 = mul nsw i64 %4811, %116
  %4813 = sub nsw i64 %4812, %96
  %4814 = sext i32 %a26 to i64
  %4815 = add nsw i64 %4814, 4
  %4816 = mul nsw i64 %4815, %117
  %4817 = add nsw i64 %4816, %120
  br label %"for blur_y.s0.x.x.rebased222"

"produce blur_x220":                              ; preds = %"end for blur_y.s0.x.x.rebased209"
  %4818 = getelementptr inbounds i16, i16* %read_input, i64 %127
  %4819 = getelementptr inbounds i16, i16* %4818, i64 -31
  %4820 = bitcast i16* %4819 to <16 x i16>*
  %4821 = load <16 x i16>, <16 x i16>* %4820, align 2, !tbaa !396
  %4822 = getelementptr inbounds i16, i16* %4818, i64 -15
  %4823 = bitcast i16* %4822 to <16 x i16>*
  %4824 = load <16 x i16>, <16 x i16>* %4823, align 2, !tbaa !396
  %4825 = getelementptr inbounds i16, i16* %4818, i64 -32
  %4826 = bitcast i16* %4825 to <16 x i16>*
  %4827 = load <16 x i16>, <16 x i16>* %4826, align 2, !tbaa !396
  %4828 = getelementptr inbounds i16, i16* %4818, i64 -16
  %4829 = bitcast i16* %4828 to <16 x i16>*
  %4830 = load <16 x i16>, <16 x i16>* %4829, align 2, !tbaa !396
  %4831 = getelementptr inbounds i16, i16* %4818, i64 -30
  %4832 = bitcast i16* %4831 to <16 x i16>*
  %4833 = load <16 x i16>, <16 x i16>* %4832, align 2, !tbaa !396
  %4834 = getelementptr inbounds i16, i16* %4818, i64 -14
  %4835 = bitcast i16* %4834 to <16 x i16>*
  %4836 = load <16 x i16>, <16 x i16>* %4835, align 2, !tbaa !396
  %4837 = getelementptr inbounds i16, i16* %4818, i64 -29
  %4838 = bitcast i16* %4837 to <16 x i16>*
  %4839 = load <16 x i16>, <16 x i16>* %4838, align 2, !tbaa !396
  %4840 = getelementptr inbounds i16, i16* %4818, i64 -13
  %4841 = bitcast i16* %4840 to <16 x i16>*
  %4842 = load <16 x i16>, <16 x i16>* %4841, align 2, !tbaa !396
  %4843 = getelementptr inbounds i16, i16* %4818, i64 -28
  %4844 = bitcast i16* %4843 to <16 x i16>*
  %4845 = load <16 x i16>, <16 x i16>* %4844, align 2, !tbaa !396
  %4846 = getelementptr inbounds i16, i16* %4818, i64 -12
  %4847 = bitcast i16* %4846 to <16 x i16>*
  %4848 = load <16 x i16>, <16 x i16>* %4847, align 2, !tbaa !396
  %4849 = getelementptr inbounds i16, i16* %4818, i64 -26
  %4850 = bitcast i16* %4849 to <16 x i16>*
  %4851 = load <16 x i16>, <16 x i16>* %4850, align 2, !tbaa !396
  %4852 = getelementptr inbounds i16, i16* %4818, i64 -10
  %4853 = bitcast i16* %4852 to <16 x i16>*
  %4854 = load <16 x i16>, <16 x i16>* %4853, align 2, !tbaa !396
  %4855 = getelementptr inbounds i16, i16* %4818, i64 -27
  %4856 = bitcast i16* %4855 to <16 x i16>*
  %4857 = load <16 x i16>, <16 x i16>* %4856, align 2, !tbaa !396
  %4858 = getelementptr inbounds i16, i16* %4818, i64 -11
  %4859 = bitcast i16* %4858 to <16 x i16>*
  %4860 = load <16 x i16>, <16 x i16>* %4859, align 2, !tbaa !396
  %4861 = add <16 x i16> %4827, %4821
  %4862 = add <16 x i16> %4861, %4833
  %4863 = add <16 x i16> %4862, %4839
  %4864 = add <16 x i16> %4863, %4845
  %4865 = add <16 x i16> %4864, %4851
  %4866 = add <16 x i16> %4865, %4857
  %4867 = add <16 x i16> %4830, %4824
  %4868 = add <16 x i16> %4867, %4836
  %4869 = add <16 x i16> %4868, %4842
  %4870 = add <16 x i16> %4869, %4848
  %4871 = add <16 x i16> %4870, %4854
  %4872 = add <16 x i16> %4871, %4860
  %4873 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4866, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4874 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4872, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4875 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4873, <16 x i16> %4866)
  %4876 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4874, <16 x i16> %4872)
  %4877 = shufflevector <16 x i16> %4875, <16 x i16> %4876, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4878 = lshr <32 x i16> %4877, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4879 = shufflevector <32 x i16> %4878, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4880 = zext i32 %.pre-phi3512 to i64
  %4881 = mul nsw i64 %97, %4880
  %4882 = add nsw i64 %99, %4881
  %4883 = getelementptr inbounds i16, i16* %blur_x, i64 %4882
  %4884 = getelementptr inbounds i16, i16* %4883, i64 -32
  %4885 = bitcast i16* %4884 to <16 x i16>*
  store <16 x i16> %4879, <16 x i16>* %4885, align 2, !tbaa !399
  %4886 = shufflevector <32 x i16> %4878, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4887 = getelementptr inbounds i16, i16* %4883, i64 -16
  %4888 = bitcast i16* %4887 to <16 x i16>*
  store <16 x i16> %4886, <16 x i16>* %4888, align 2, !tbaa !399
  %4889 = zext i32 %.pre-phi3524 to i64
  %4890 = mul nsw i64 %4889, %116
  %4891 = add nsw i64 %4890, %94
  %4892 = getelementptr inbounds i16, i16* %blur_x, i64 %4891
  %4893 = getelementptr inbounds i16, i16* %4892, i64 -32
  %4894 = bitcast i16* %4893 to <16 x i16>*
  %4895 = load <16 x i16>, <16 x i16>* %4894, align 2, !tbaa !399
  %4896 = getelementptr inbounds i16, i16* %4892, i64 -16
  %4897 = bitcast i16* %4896 to <16 x i16>*
  %4898 = load <16 x i16>, <16 x i16>* %4897, align 2, !tbaa !399
  %4899 = zext i32 %.pre-phi3520 to i64
  %4900 = mul nsw i64 %4899, %116
  %4901 = add nsw i64 %4900, %94
  %4902 = getelementptr inbounds i16, i16* %blur_x, i64 %4901
  %4903 = getelementptr inbounds i16, i16* %4902, i64 -32
  %4904 = bitcast i16* %4903 to <16 x i16>*
  %4905 = load <16 x i16>, <16 x i16>* %4904, align 2, !tbaa !399
  %4906 = getelementptr inbounds i16, i16* %4902, i64 -16
  %4907 = bitcast i16* %4906 to <16 x i16>*
  %4908 = load <16 x i16>, <16 x i16>* %4907, align 2, !tbaa !399
  %4909 = zext i32 %.pre-phi3528 to i64
  %4910 = mul nsw i64 %4909, %116
  %4911 = add nsw i64 %4910, %94
  %4912 = getelementptr inbounds i16, i16* %blur_x, i64 %4911
  %4913 = getelementptr inbounds i16, i16* %4912, i64 -32
  %4914 = bitcast i16* %4913 to <16 x i16>*
  %4915 = load <16 x i16>, <16 x i16>* %4914, align 2, !tbaa !399
  %4916 = getelementptr inbounds i16, i16* %4912, i64 -16
  %4917 = bitcast i16* %4916 to <16 x i16>*
  %4918 = load <16 x i16>, <16 x i16>* %4917, align 2, !tbaa !399
  %4919 = zext i32 %.pre-phi3534 to i64
  %4920 = mul nsw i64 %4919, %116
  %4921 = add nsw i64 %4920, %94
  %4922 = getelementptr inbounds i16, i16* %blur_x, i64 %4921
  %4923 = getelementptr inbounds i16, i16* %4922, i64 -32
  %4924 = bitcast i16* %4923 to <16 x i16>*
  %4925 = load <16 x i16>, <16 x i16>* %4924, align 2, !tbaa !399
  %4926 = getelementptr inbounds i16, i16* %4922, i64 -16
  %4927 = bitcast i16* %4926 to <16 x i16>*
  %4928 = load <16 x i16>, <16 x i16>* %4927, align 2, !tbaa !399
  %4929 = zext i32 %.pre-phi to i64
  %4930 = mul nsw i64 %4929, %116
  %4931 = add nsw i64 %4930, %94
  %4932 = getelementptr inbounds i16, i16* %blur_x, i64 %4931
  %4933 = getelementptr inbounds i16, i16* %4932, i64 -32
  %4934 = bitcast i16* %4933 to <16 x i16>*
  %4935 = load <16 x i16>, <16 x i16>* %4934, align 2, !tbaa !399
  %4936 = getelementptr inbounds i16, i16* %4932, i64 -16
  %4937 = bitcast i16* %4936 to <16 x i16>*
  %4938 = load <16 x i16>, <16 x i16>* %4937, align 2, !tbaa !399
  %4939 = mul nsw i64 %4880, %116
  %4940 = add nsw i64 %4939, %94
  %4941 = getelementptr inbounds i16, i16* %blur_x, i64 %4940
  %4942 = getelementptr inbounds i16, i16* %4941, i64 -32
  %4943 = bitcast i16* %4942 to <16 x i16>*
  %4944 = load <16 x i16>, <16 x i16>* %4943, align 2, !tbaa !399
  %4945 = getelementptr inbounds i16, i16* %4941, i64 -16
  %4946 = bitcast i16* %4945 to <16 x i16>*
  %4947 = load <16 x i16>, <16 x i16>* %4946, align 2, !tbaa !399
  %4948 = zext i32 %.pre-phi3508 to i64
  %4949 = mul nsw i64 %4948, %116
  %4950 = add nsw i64 %4949, %94
  %4951 = getelementptr inbounds i16, i16* %blur_x, i64 %4950
  %4952 = getelementptr inbounds i16, i16* %4951, i64 -32
  %4953 = bitcast i16* %4952 to <16 x i16>*
  %4954 = load <16 x i16>, <16 x i16>* %4953, align 2, !tbaa !399
  %4955 = getelementptr inbounds i16, i16* %4951, i64 -16
  %4956 = bitcast i16* %4955 to <16 x i16>*
  %4957 = load <16 x i16>, <16 x i16>* %4956, align 2, !tbaa !399
  %4958 = add <16 x i16> %4905, %4895
  %4959 = add <16 x i16> %4958, %4915
  %4960 = add <16 x i16> %4959, %4925
  %4961 = add <16 x i16> %4960, %4935
  %4962 = add <16 x i16> %4961, %4944
  %4963 = add <16 x i16> %4962, %4954
  %4964 = add <16 x i16> %4908, %4898
  %4965 = add <16 x i16> %4964, %4918
  %4966 = add <16 x i16> %4965, %4928
  %4967 = add <16 x i16> %4966, %4938
  %4968 = add <16 x i16> %4967, %4947
  %4969 = add <16 x i16> %4968, %4957
  %4970 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4963, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4971 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4969, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %4972 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4970, <16 x i16> %4963)
  %4973 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %4971, <16 x i16> %4969)
  %4974 = shufflevector <16 x i16> %4972, <16 x i16> %4973, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4975 = lshr <32 x i16> %4974, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4976 = shufflevector <32 x i16> %4975, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4977 = sext i32 %a26 to i64
  %4978 = add nsw i64 %4977, 4
  %4979 = mul nsw i64 %4978, %117
  %4980 = add nsw i64 %119, %4979
  %4981 = getelementptr inbounds i16, i16* %66, i64 %4980
  %4982 = getelementptr inbounds i16, i16* %4981, i64 -32
  %4983 = bitcast i16* %4982 to <16 x i16>*
  store <16 x i16> %4976, <16 x i16>* %4983, align 2, !tbaa !401
  %4984 = shufflevector <32 x i16> %4975, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4985 = getelementptr inbounds i16, i16* %4981, i64 -16
  %4986 = bitcast i16* %4985 to <16 x i16>*
  store <16 x i16> %4984, <16 x i16>* %4986, align 2, !tbaa !401
  br label %after_bb217

"for blur_y.s0.x.x.rebased222":                   ; preds = %"for blur_y.s0.x.x.rebased222.preheader", %"consume blur_x229"
  %indvars.iv3291 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased222.preheader" ], [ %indvars.iv.next3292, %"consume blur_x229" ]
  %4987 = add nsw i64 %indvars.iv3291, %101
  %4988 = icmp slt i64 %4987, 1
  %4989 = trunc i64 %4987 to i32
  %4990 = shl nsw i32 %4989, 5
  %4991 = icmp sgt i32 %4, %4990
  %4992 = or i1 %4988, %4991
  br i1 %4992, label %"produce blur_x228", label %"for blur_y.s0.x.x.rebased222.consume blur_x229_crit_edge"

"for blur_y.s0.x.x.rebased222.consume blur_x229_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased222"
  %.pre3541 = shl nsw i64 %4987, 5
  br label %"consume blur_x229"

"end for blur_y.s0.x.x.rebased223":               ; preds = %"consume blur_x229", %after_bb217
  br i1 %102, label %"for blur_y.s0.x.x.rebased230.preheader", label %"end for blur_y.s0.x.x.rebased231", !prof !386

"for blur_y.s0.x.x.rebased230.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased223"
  %4993 = sext i32 %t1738 to i64
  %4994 = zext i32 %.pre-phi3524 to i64
  %4995 = mul nsw i64 %4994, %116
  %4996 = sub nsw i64 %4995, %96
  %4997 = zext i32 %.pre-phi3520 to i64
  %4998 = mul nsw i64 %4997, %116
  %4999 = sub nsw i64 %4998, %96
  %5000 = zext i32 %.pre-phi3528 to i64
  %5001 = mul nsw i64 %5000, %116
  %5002 = sub nsw i64 %5001, %96
  %5003 = zext i32 %.pre-phi3534 to i64
  %5004 = mul nsw i64 %5003, %116
  %5005 = sub nsw i64 %5004, %96
  %5006 = zext i32 %.pre-phi to i64
  %5007 = mul nsw i64 %5006, %116
  %5008 = sub nsw i64 %5007, %96
  %5009 = zext i32 %.pre-phi3512 to i64
  %5010 = mul nsw i64 %5009, %116
  %5011 = sub nsw i64 %5010, %96
  %5012 = zext i32 %.pre-phi3508 to i64
  %5013 = mul nsw i64 %5012, %116
  %5014 = sub nsw i64 %5013, %96
  %5015 = sext i32 %a26 to i64
  %5016 = add nsw i64 %5015, 4
  %5017 = mul nsw i64 %5016, %117
  %5018 = add nsw i64 %5017, %120
  br label %"for blur_y.s0.x.x.rebased230"

"produce blur_x228":                              ; preds = %"for blur_y.s0.x.x.rebased222"
  %t816 = add nsw i32 %4990, %t1825
  %5019 = sext i32 %t816 to i64
  %5020 = getelementptr inbounds i16, i16* %read_input, i64 %5019
  %5021 = getelementptr inbounds i16, i16* %5020, i64 1
  %5022 = bitcast i16* %5021 to <16 x i16>*
  %5023 = load <16 x i16>, <16 x i16>* %5022, align 2, !tbaa !396
  %5024 = getelementptr inbounds i16, i16* %5020, i64 17
  %5025 = bitcast i16* %5024 to <16 x i16>*
  %5026 = load <16 x i16>, <16 x i16>* %5025, align 2, !tbaa !396
  %5027 = bitcast i16* %5020 to <16 x i16>*
  %5028 = load <16 x i16>, <16 x i16>* %5027, align 2, !tbaa !396
  %5029 = getelementptr inbounds i16, i16* %5020, i64 16
  %5030 = bitcast i16* %5029 to <16 x i16>*
  %5031 = load <16 x i16>, <16 x i16>* %5030, align 2, !tbaa !396
  %5032 = getelementptr inbounds i16, i16* %5020, i64 2
  %5033 = bitcast i16* %5032 to <16 x i16>*
  %5034 = load <16 x i16>, <16 x i16>* %5033, align 2, !tbaa !396
  %5035 = getelementptr inbounds i16, i16* %5020, i64 18
  %5036 = bitcast i16* %5035 to <16 x i16>*
  %5037 = load <16 x i16>, <16 x i16>* %5036, align 2, !tbaa !396
  %5038 = getelementptr inbounds i16, i16* %5020, i64 3
  %5039 = bitcast i16* %5038 to <16 x i16>*
  %5040 = load <16 x i16>, <16 x i16>* %5039, align 2, !tbaa !396
  %5041 = getelementptr inbounds i16, i16* %5020, i64 19
  %5042 = bitcast i16* %5041 to <16 x i16>*
  %5043 = load <16 x i16>, <16 x i16>* %5042, align 2, !tbaa !396
  %5044 = getelementptr inbounds i16, i16* %5020, i64 4
  %5045 = bitcast i16* %5044 to <16 x i16>*
  %5046 = load <16 x i16>, <16 x i16>* %5045, align 2, !tbaa !396
  %5047 = getelementptr inbounds i16, i16* %5020, i64 20
  %5048 = bitcast i16* %5047 to <16 x i16>*
  %5049 = load <16 x i16>, <16 x i16>* %5048, align 2, !tbaa !396
  %5050 = getelementptr inbounds i16, i16* %5020, i64 6
  %5051 = bitcast i16* %5050 to <16 x i16>*
  %5052 = load <16 x i16>, <16 x i16>* %5051, align 2, !tbaa !396
  %5053 = getelementptr inbounds i16, i16* %5020, i64 22
  %5054 = bitcast i16* %5053 to <16 x i16>*
  %5055 = load <16 x i16>, <16 x i16>* %5054, align 2, !tbaa !396
  %5056 = getelementptr inbounds i16, i16* %5020, i64 5
  %5057 = bitcast i16* %5056 to <16 x i16>*
  %5058 = load <16 x i16>, <16 x i16>* %5057, align 2, !tbaa !396
  %5059 = getelementptr inbounds i16, i16* %5020, i64 21
  %5060 = bitcast i16* %5059 to <16 x i16>*
  %5061 = load <16 x i16>, <16 x i16>* %5060, align 2, !tbaa !396
  %5062 = add <16 x i16> %5028, %5023
  %5063 = add <16 x i16> %5062, %5034
  %5064 = add <16 x i16> %5063, %5040
  %5065 = add <16 x i16> %5064, %5046
  %5066 = add <16 x i16> %5065, %5052
  %5067 = add <16 x i16> %5066, %5058
  %5068 = add <16 x i16> %5031, %5026
  %5069 = add <16 x i16> %5068, %5037
  %5070 = add <16 x i16> %5069, %5043
  %5071 = add <16 x i16> %5070, %5049
  %5072 = add <16 x i16> %5071, %5055
  %5073 = add <16 x i16> %5072, %5061
  %5074 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5067, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5075 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5073, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5076 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5074, <16 x i16> %5067)
  %5077 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5075, <16 x i16> %5073)
  %5078 = shufflevector <16 x i16> %5076, <16 x i16> %5077, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5079 = lshr <32 x i16> %5078, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5080 = shufflevector <32 x i16> %5079, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5081 = shl nsw i64 %4987, 5
  %5082 = add nsw i64 %5081, %4792
  %5083 = getelementptr inbounds i16, i16* %blur_x, i64 %5082
  %5084 = bitcast i16* %5083 to <16 x i16>*
  store <16 x i16> %5080, <16 x i16>* %5084, align 2, !tbaa !399
  %5085 = shufflevector <32 x i16> %5079, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5086 = getelementptr inbounds i16, i16* %5083, i64 16
  %5087 = bitcast i16* %5086 to <16 x i16>*
  store <16 x i16> %5085, <16 x i16>* %5087, align 2, !tbaa !399
  br label %"consume blur_x229"

"consume blur_x229":                              ; preds = %"for blur_y.s0.x.x.rebased222.consume blur_x229_crit_edge", %"produce blur_x228"
  %.pre-phi3542 = phi i64 [ %.pre3541, %"for blur_y.s0.x.x.rebased222.consume blur_x229_crit_edge" ], [ %5081, %"produce blur_x228" ]
  %5088 = add nsw i64 %4795, %.pre-phi3542
  %5089 = getelementptr inbounds i16, i16* %blur_x, i64 %5088
  %5090 = bitcast i16* %5089 to <16 x i16>*
  %5091 = load <16 x i16>, <16 x i16>* %5090, align 2, !tbaa !399
  %5092 = getelementptr inbounds i16, i16* %5089, i64 16
  %5093 = bitcast i16* %5092 to <16 x i16>*
  %5094 = load <16 x i16>, <16 x i16>* %5093, align 2, !tbaa !399
  %5095 = add nsw i64 %4798, %.pre-phi3542
  %5096 = getelementptr inbounds i16, i16* %blur_x, i64 %5095
  %5097 = bitcast i16* %5096 to <16 x i16>*
  %5098 = load <16 x i16>, <16 x i16>* %5097, align 2, !tbaa !399
  %5099 = getelementptr inbounds i16, i16* %5096, i64 16
  %5100 = bitcast i16* %5099 to <16 x i16>*
  %5101 = load <16 x i16>, <16 x i16>* %5100, align 2, !tbaa !399
  %5102 = add nsw i64 %4801, %.pre-phi3542
  %5103 = getelementptr inbounds i16, i16* %blur_x, i64 %5102
  %5104 = bitcast i16* %5103 to <16 x i16>*
  %5105 = load <16 x i16>, <16 x i16>* %5104, align 2, !tbaa !399
  %5106 = getelementptr inbounds i16, i16* %5103, i64 16
  %5107 = bitcast i16* %5106 to <16 x i16>*
  %5108 = load <16 x i16>, <16 x i16>* %5107, align 2, !tbaa !399
  %5109 = add nsw i64 %4804, %.pre-phi3542
  %5110 = getelementptr inbounds i16, i16* %blur_x, i64 %5109
  %5111 = bitcast i16* %5110 to <16 x i16>*
  %5112 = load <16 x i16>, <16 x i16>* %5111, align 2, !tbaa !399
  %5113 = getelementptr inbounds i16, i16* %5110, i64 16
  %5114 = bitcast i16* %5113 to <16 x i16>*
  %5115 = load <16 x i16>, <16 x i16>* %5114, align 2, !tbaa !399
  %5116 = add nsw i64 %4807, %.pre-phi3542
  %5117 = getelementptr inbounds i16, i16* %blur_x, i64 %5116
  %5118 = bitcast i16* %5117 to <16 x i16>*
  %5119 = load <16 x i16>, <16 x i16>* %5118, align 2, !tbaa !399
  %5120 = getelementptr inbounds i16, i16* %5117, i64 16
  %5121 = bitcast i16* %5120 to <16 x i16>*
  %5122 = load <16 x i16>, <16 x i16>* %5121, align 2, !tbaa !399
  %5123 = add nsw i64 %4810, %.pre-phi3542
  %5124 = getelementptr inbounds i16, i16* %blur_x, i64 %5123
  %5125 = bitcast i16* %5124 to <16 x i16>*
  %5126 = load <16 x i16>, <16 x i16>* %5125, align 2, !tbaa !399
  %5127 = getelementptr inbounds i16, i16* %5124, i64 16
  %5128 = bitcast i16* %5127 to <16 x i16>*
  %5129 = load <16 x i16>, <16 x i16>* %5128, align 2, !tbaa !399
  %5130 = add nsw i64 %4813, %.pre-phi3542
  %5131 = getelementptr inbounds i16, i16* %blur_x, i64 %5130
  %5132 = bitcast i16* %5131 to <16 x i16>*
  %5133 = load <16 x i16>, <16 x i16>* %5132, align 2, !tbaa !399
  %5134 = getelementptr inbounds i16, i16* %5131, i64 16
  %5135 = bitcast i16* %5134 to <16 x i16>*
  %5136 = load <16 x i16>, <16 x i16>* %5135, align 2, !tbaa !399
  %5137 = add <16 x i16> %5098, %5091
  %5138 = add <16 x i16> %5137, %5105
  %5139 = add <16 x i16> %5138, %5112
  %5140 = add <16 x i16> %5139, %5119
  %5141 = add <16 x i16> %5140, %5126
  %5142 = add <16 x i16> %5141, %5133
  %5143 = add <16 x i16> %5101, %5094
  %5144 = add <16 x i16> %5143, %5108
  %5145 = add <16 x i16> %5144, %5115
  %5146 = add <16 x i16> %5145, %5122
  %5147 = add <16 x i16> %5146, %5129
  %5148 = add <16 x i16> %5147, %5136
  %5149 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5142, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5150 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5148, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5151 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5149, <16 x i16> %5142)
  %5152 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5150, <16 x i16> %5148)
  %5153 = shufflevector <16 x i16> %5151, <16 x i16> %5152, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5154 = lshr <32 x i16> %5153, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5155 = shufflevector <32 x i16> %5154, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5156 = add nsw i64 %4817, %.pre-phi3542
  %5157 = getelementptr inbounds i16, i16* %66, i64 %5156
  %5158 = bitcast i16* %5157 to <16 x i16>*
  store <16 x i16> %5155, <16 x i16>* %5158, align 2, !tbaa !401
  %5159 = shufflevector <32 x i16> %5154, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5160 = getelementptr inbounds i16, i16* %5157, i64 16
  %5161 = bitcast i16* %5160 to <16 x i16>*
  store <16 x i16> %5159, <16 x i16>* %5161, align 2, !tbaa !401
  %indvars.iv.next3292 = add nuw nsw i64 %indvars.iv3291, 1
  %.not2792 = icmp eq i64 %indvars.iv.next3292, %188
  br i1 %.not2792, label %"end for blur_y.s0.x.x.rebased223", label %"for blur_y.s0.x.x.rebased222"

"for blur_y.s0.x.x.rebased230":                   ; preds = %"for blur_y.s0.x.x.rebased230.preheader", %"consume blur_x238"
  %blur_y.s0.x.x.rebased232 = phi i32 [ %5312, %"consume blur_x238" ], [ 0, %"for blur_y.s0.x.x.rebased230.preheader" ]
  %5162 = add nsw i32 %blur_y.s0.x.x.rebased232, %t1670
  %a147 = shl nsw i32 %5162, 5
  %5163 = icmp sgt i32 %a14, %a147
  %b153 = select i1 %5163, i32 %a147, i32 %a14
  %5164 = icmp slt i32 %5162, 1
  %5165 = icmp sgt i32 %4, %a147
  %5166 = or i1 %5164, %5165
  br i1 %5166, label %"produce blur_x236", label %"consume blur_x238"

"end for blur_y.s0.x.x.rebased231":               ; preds = %"consume blur_x238", %"end for blur_y.s0.x.x.rebased223"
  br i1 %34, label %"produce blur_x242", label %after_bb239

"produce blur_x236":                              ; preds = %"for blur_y.s0.x.x.rebased230"
  %5167 = icmp slt i32 %b153, %4
  %blur_x.s0.x.v1.base.s237 = select i1 %5167, i32 %b153, i32 %4
  %t821 = add nsw i32 %blur_x.s0.x.v1.base.s237, %t1825
  %5168 = sext i32 %t821 to i64
  %5169 = getelementptr inbounds i16, i16* %read_input, i64 %5168
  %5170 = getelementptr inbounds i16, i16* %5169, i64 1
  %5171 = bitcast i16* %5170 to <16 x i16>*
  %5172 = load <16 x i16>, <16 x i16>* %5171, align 2, !tbaa !396
  %5173 = getelementptr inbounds i16, i16* %5169, i64 17
  %5174 = bitcast i16* %5173 to <16 x i16>*
  %5175 = load <16 x i16>, <16 x i16>* %5174, align 2, !tbaa !396
  %5176 = bitcast i16* %5169 to <16 x i16>*
  %5177 = load <16 x i16>, <16 x i16>* %5176, align 2, !tbaa !396
  %5178 = getelementptr inbounds i16, i16* %5169, i64 16
  %5179 = bitcast i16* %5178 to <16 x i16>*
  %5180 = load <16 x i16>, <16 x i16>* %5179, align 2, !tbaa !396
  %5181 = getelementptr inbounds i16, i16* %5169, i64 2
  %5182 = bitcast i16* %5181 to <16 x i16>*
  %5183 = load <16 x i16>, <16 x i16>* %5182, align 2, !tbaa !396
  %5184 = getelementptr inbounds i16, i16* %5169, i64 18
  %5185 = bitcast i16* %5184 to <16 x i16>*
  %5186 = load <16 x i16>, <16 x i16>* %5185, align 2, !tbaa !396
  %5187 = getelementptr inbounds i16, i16* %5169, i64 3
  %5188 = bitcast i16* %5187 to <16 x i16>*
  %5189 = load <16 x i16>, <16 x i16>* %5188, align 2, !tbaa !396
  %5190 = getelementptr inbounds i16, i16* %5169, i64 19
  %5191 = bitcast i16* %5190 to <16 x i16>*
  %5192 = load <16 x i16>, <16 x i16>* %5191, align 2, !tbaa !396
  %5193 = getelementptr inbounds i16, i16* %5169, i64 4
  %5194 = bitcast i16* %5193 to <16 x i16>*
  %5195 = load <16 x i16>, <16 x i16>* %5194, align 2, !tbaa !396
  %5196 = getelementptr inbounds i16, i16* %5169, i64 20
  %5197 = bitcast i16* %5196 to <16 x i16>*
  %5198 = load <16 x i16>, <16 x i16>* %5197, align 2, !tbaa !396
  %5199 = getelementptr inbounds i16, i16* %5169, i64 6
  %5200 = bitcast i16* %5199 to <16 x i16>*
  %5201 = load <16 x i16>, <16 x i16>* %5200, align 2, !tbaa !396
  %5202 = getelementptr inbounds i16, i16* %5169, i64 22
  %5203 = bitcast i16* %5202 to <16 x i16>*
  %5204 = load <16 x i16>, <16 x i16>* %5203, align 2, !tbaa !396
  %5205 = getelementptr inbounds i16, i16* %5169, i64 5
  %5206 = bitcast i16* %5205 to <16 x i16>*
  %5207 = load <16 x i16>, <16 x i16>* %5206, align 2, !tbaa !396
  %5208 = getelementptr inbounds i16, i16* %5169, i64 21
  %5209 = bitcast i16* %5208 to <16 x i16>*
  %5210 = load <16 x i16>, <16 x i16>* %5209, align 2, !tbaa !396
  %5211 = add <16 x i16> %5177, %5172
  %5212 = add <16 x i16> %5211, %5183
  %5213 = add <16 x i16> %5212, %5189
  %5214 = add <16 x i16> %5213, %5195
  %5215 = add <16 x i16> %5214, %5201
  %5216 = add <16 x i16> %5215, %5207
  %5217 = add <16 x i16> %5180, %5175
  %5218 = add <16 x i16> %5217, %5186
  %5219 = add <16 x i16> %5218, %5192
  %5220 = add <16 x i16> %5219, %5198
  %5221 = add <16 x i16> %5220, %5204
  %5222 = add <16 x i16> %5221, %5210
  %5223 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5216, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5224 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5222, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5225 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5223, <16 x i16> %5216)
  %5226 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5224, <16 x i16> %5222)
  %5227 = shufflevector <16 x i16> %5225, <16 x i16> %5226, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5228 = lshr <32 x i16> %5227, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5229 = shufflevector <32 x i16> %5228, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5230 = sext i32 %blur_x.s0.x.v1.base.s237 to i64
  %5231 = add nsw i64 %5230, %4993
  %5232 = getelementptr inbounds i16, i16* %blur_x, i64 %5231
  %5233 = bitcast i16* %5232 to <16 x i16>*
  store <16 x i16> %5229, <16 x i16>* %5233, align 2, !tbaa !399
  %5234 = shufflevector <32 x i16> %5228, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5235 = getelementptr inbounds i16, i16* %5232, i64 16
  %5236 = bitcast i16* %5235 to <16 x i16>*
  store <16 x i16> %5234, <16 x i16>* %5236, align 2, !tbaa !399
  br label %"consume blur_x238"

"consume blur_x238":                              ; preds = %"for blur_y.s0.x.x.rebased230", %"produce blur_x236"
  %5237 = sext i32 %b153 to i64
  %5238 = add nsw i64 %4996, %5237
  %5239 = getelementptr inbounds i16, i16* %blur_x, i64 %5238
  %5240 = bitcast i16* %5239 to <16 x i16>*
  %5241 = load <16 x i16>, <16 x i16>* %5240, align 2, !tbaa !399
  %5242 = getelementptr inbounds i16, i16* %5239, i64 16
  %5243 = bitcast i16* %5242 to <16 x i16>*
  %5244 = load <16 x i16>, <16 x i16>* %5243, align 2, !tbaa !399
  %5245 = add nsw i64 %4999, %5237
  %5246 = getelementptr inbounds i16, i16* %blur_x, i64 %5245
  %5247 = bitcast i16* %5246 to <16 x i16>*
  %5248 = load <16 x i16>, <16 x i16>* %5247, align 2, !tbaa !399
  %5249 = getelementptr inbounds i16, i16* %5246, i64 16
  %5250 = bitcast i16* %5249 to <16 x i16>*
  %5251 = load <16 x i16>, <16 x i16>* %5250, align 2, !tbaa !399
  %5252 = add nsw i64 %5002, %5237
  %5253 = getelementptr inbounds i16, i16* %blur_x, i64 %5252
  %5254 = bitcast i16* %5253 to <16 x i16>*
  %5255 = load <16 x i16>, <16 x i16>* %5254, align 2, !tbaa !399
  %5256 = getelementptr inbounds i16, i16* %5253, i64 16
  %5257 = bitcast i16* %5256 to <16 x i16>*
  %5258 = load <16 x i16>, <16 x i16>* %5257, align 2, !tbaa !399
  %5259 = add nsw i64 %5005, %5237
  %5260 = getelementptr inbounds i16, i16* %blur_x, i64 %5259
  %5261 = bitcast i16* %5260 to <16 x i16>*
  %5262 = load <16 x i16>, <16 x i16>* %5261, align 2, !tbaa !399
  %5263 = getelementptr inbounds i16, i16* %5260, i64 16
  %5264 = bitcast i16* %5263 to <16 x i16>*
  %5265 = load <16 x i16>, <16 x i16>* %5264, align 2, !tbaa !399
  %5266 = add nsw i64 %5008, %5237
  %5267 = getelementptr inbounds i16, i16* %blur_x, i64 %5266
  %5268 = bitcast i16* %5267 to <16 x i16>*
  %5269 = load <16 x i16>, <16 x i16>* %5268, align 2, !tbaa !399
  %5270 = getelementptr inbounds i16, i16* %5267, i64 16
  %5271 = bitcast i16* %5270 to <16 x i16>*
  %5272 = load <16 x i16>, <16 x i16>* %5271, align 2, !tbaa !399
  %5273 = add nsw i64 %5011, %5237
  %5274 = getelementptr inbounds i16, i16* %blur_x, i64 %5273
  %5275 = bitcast i16* %5274 to <16 x i16>*
  %5276 = load <16 x i16>, <16 x i16>* %5275, align 2, !tbaa !399
  %5277 = getelementptr inbounds i16, i16* %5274, i64 16
  %5278 = bitcast i16* %5277 to <16 x i16>*
  %5279 = load <16 x i16>, <16 x i16>* %5278, align 2, !tbaa !399
  %5280 = add nsw i64 %5014, %5237
  %5281 = getelementptr inbounds i16, i16* %blur_x, i64 %5280
  %5282 = bitcast i16* %5281 to <16 x i16>*
  %5283 = load <16 x i16>, <16 x i16>* %5282, align 2, !tbaa !399
  %5284 = getelementptr inbounds i16, i16* %5281, i64 16
  %5285 = bitcast i16* %5284 to <16 x i16>*
  %5286 = load <16 x i16>, <16 x i16>* %5285, align 2, !tbaa !399
  %5287 = add <16 x i16> %5248, %5241
  %5288 = add <16 x i16> %5287, %5255
  %5289 = add <16 x i16> %5288, %5262
  %5290 = add <16 x i16> %5289, %5269
  %5291 = add <16 x i16> %5290, %5276
  %5292 = add <16 x i16> %5291, %5283
  %5293 = add <16 x i16> %5251, %5244
  %5294 = add <16 x i16> %5293, %5258
  %5295 = add <16 x i16> %5294, %5265
  %5296 = add <16 x i16> %5295, %5272
  %5297 = add <16 x i16> %5296, %5279
  %5298 = add <16 x i16> %5297, %5286
  %5299 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5292, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5300 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5298, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5301 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5299, <16 x i16> %5292)
  %5302 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5300, <16 x i16> %5298)
  %5303 = shufflevector <16 x i16> %5301, <16 x i16> %5302, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5304 = lshr <32 x i16> %5303, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5305 = shufflevector <32 x i16> %5304, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5306 = add nsw i64 %5018, %5237
  %5307 = getelementptr inbounds i16, i16* %66, i64 %5306
  %5308 = bitcast i16* %5307 to <16 x i16>*
  store <16 x i16> %5305, <16 x i16>* %5308, align 2, !tbaa !401
  %5309 = shufflevector <32 x i16> %5304, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5310 = getelementptr inbounds i16, i16* %5307, i64 16
  %5311 = bitcast i16* %5310 to <16 x i16>*
  store <16 x i16> %5309, <16 x i16>* %5311, align 2, !tbaa !401
  %5312 = add nuw nsw i32 %blur_y.s0.x.x.rebased232, 1
  %.not2791 = icmp eq i32 %5312, %t1727
  br i1 %.not2791, label %"end for blur_y.s0.x.x.rebased231", label %"for blur_y.s0.x.x.rebased230"

after_bb239:                                      ; preds = %"end for blur_y.s0.x.x.rebased231", %"produce blur_x242"
  br i1 %100, label %"for blur_y.s0.x.x.rebased244.preheader", label %"end for blur_y.s0.x.x.rebased245", !prof !386

"for blur_y.s0.x.x.rebased244.preheader":         ; preds = %after_bb239
  %5313 = sext i32 %t1744 to i64
  %5314 = zext i32 %.pre-phi3528 to i64
  %5315 = mul nsw i64 %5314, %116
  %5316 = sub nsw i64 %5315, %96
  %5317 = zext i32 %.pre-phi3524 to i64
  %5318 = mul nsw i64 %5317, %116
  %5319 = sub nsw i64 %5318, %96
  %5320 = zext i32 %.pre-phi3534 to i64
  %5321 = mul nsw i64 %5320, %116
  %5322 = sub nsw i64 %5321, %96
  %5323 = zext i32 %.pre-phi to i64
  %5324 = mul nsw i64 %5323, %116
  %5325 = sub nsw i64 %5324, %96
  %5326 = zext i32 %.pre-phi3508 to i64
  %5327 = mul nsw i64 %5326, %116
  %5328 = sub nsw i64 %5327, %96
  %5329 = zext i32 %.pre-phi3516 to i64
  %5330 = mul nsw i64 %5329, %116
  %5331 = sub nsw i64 %5330, %96
  %5332 = zext i32 %.pre-phi3512 to i64
  %5333 = mul nsw i64 %5332, %116
  %5334 = sub nsw i64 %5333, %96
  %5335 = sext i32 %a26 to i64
  %5336 = add nsw i64 %5335, 5
  %5337 = mul nsw i64 %5336, %117
  %5338 = add nsw i64 %5337, %120
  br label %"for blur_y.s0.x.x.rebased244"

"produce blur_x242":                              ; preds = %"end for blur_y.s0.x.x.rebased231"
  %5339 = getelementptr inbounds i16, i16* %read_input, i64 %129
  %5340 = getelementptr inbounds i16, i16* %5339, i64 -31
  %5341 = bitcast i16* %5340 to <16 x i16>*
  %5342 = load <16 x i16>, <16 x i16>* %5341, align 2, !tbaa !396
  %5343 = getelementptr inbounds i16, i16* %5339, i64 -15
  %5344 = bitcast i16* %5343 to <16 x i16>*
  %5345 = load <16 x i16>, <16 x i16>* %5344, align 2, !tbaa !396
  %5346 = getelementptr inbounds i16, i16* %5339, i64 -32
  %5347 = bitcast i16* %5346 to <16 x i16>*
  %5348 = load <16 x i16>, <16 x i16>* %5347, align 2, !tbaa !396
  %5349 = getelementptr inbounds i16, i16* %5339, i64 -16
  %5350 = bitcast i16* %5349 to <16 x i16>*
  %5351 = load <16 x i16>, <16 x i16>* %5350, align 2, !tbaa !396
  %5352 = getelementptr inbounds i16, i16* %5339, i64 -30
  %5353 = bitcast i16* %5352 to <16 x i16>*
  %5354 = load <16 x i16>, <16 x i16>* %5353, align 2, !tbaa !396
  %5355 = getelementptr inbounds i16, i16* %5339, i64 -14
  %5356 = bitcast i16* %5355 to <16 x i16>*
  %5357 = load <16 x i16>, <16 x i16>* %5356, align 2, !tbaa !396
  %5358 = getelementptr inbounds i16, i16* %5339, i64 -29
  %5359 = bitcast i16* %5358 to <16 x i16>*
  %5360 = load <16 x i16>, <16 x i16>* %5359, align 2, !tbaa !396
  %5361 = getelementptr inbounds i16, i16* %5339, i64 -13
  %5362 = bitcast i16* %5361 to <16 x i16>*
  %5363 = load <16 x i16>, <16 x i16>* %5362, align 2, !tbaa !396
  %5364 = getelementptr inbounds i16, i16* %5339, i64 -28
  %5365 = bitcast i16* %5364 to <16 x i16>*
  %5366 = load <16 x i16>, <16 x i16>* %5365, align 2, !tbaa !396
  %5367 = getelementptr inbounds i16, i16* %5339, i64 -12
  %5368 = bitcast i16* %5367 to <16 x i16>*
  %5369 = load <16 x i16>, <16 x i16>* %5368, align 2, !tbaa !396
  %5370 = getelementptr inbounds i16, i16* %5339, i64 -26
  %5371 = bitcast i16* %5370 to <16 x i16>*
  %5372 = load <16 x i16>, <16 x i16>* %5371, align 2, !tbaa !396
  %5373 = getelementptr inbounds i16, i16* %5339, i64 -10
  %5374 = bitcast i16* %5373 to <16 x i16>*
  %5375 = load <16 x i16>, <16 x i16>* %5374, align 2, !tbaa !396
  %5376 = getelementptr inbounds i16, i16* %5339, i64 -27
  %5377 = bitcast i16* %5376 to <16 x i16>*
  %5378 = load <16 x i16>, <16 x i16>* %5377, align 2, !tbaa !396
  %5379 = getelementptr inbounds i16, i16* %5339, i64 -11
  %5380 = bitcast i16* %5379 to <16 x i16>*
  %5381 = load <16 x i16>, <16 x i16>* %5380, align 2, !tbaa !396
  %5382 = add <16 x i16> %5348, %5342
  %5383 = add <16 x i16> %5382, %5354
  %5384 = add <16 x i16> %5383, %5360
  %5385 = add <16 x i16> %5384, %5366
  %5386 = add <16 x i16> %5385, %5372
  %5387 = add <16 x i16> %5386, %5378
  %5388 = add <16 x i16> %5351, %5345
  %5389 = add <16 x i16> %5388, %5357
  %5390 = add <16 x i16> %5389, %5363
  %5391 = add <16 x i16> %5390, %5369
  %5392 = add <16 x i16> %5391, %5375
  %5393 = add <16 x i16> %5392, %5381
  %5394 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5387, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5395 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5393, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5396 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5394, <16 x i16> %5387)
  %5397 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5395, <16 x i16> %5393)
  %5398 = shufflevector <16 x i16> %5396, <16 x i16> %5397, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5399 = lshr <32 x i16> %5398, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5400 = shufflevector <32 x i16> %5399, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5401 = zext i32 %.pre-phi3516 to i64
  %5402 = mul nsw i64 %97, %5401
  %5403 = add nsw i64 %99, %5402
  %5404 = getelementptr inbounds i16, i16* %blur_x, i64 %5403
  %5405 = getelementptr inbounds i16, i16* %5404, i64 -32
  %5406 = bitcast i16* %5405 to <16 x i16>*
  store <16 x i16> %5400, <16 x i16>* %5406, align 2, !tbaa !399
  %5407 = shufflevector <32 x i16> %5399, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5408 = getelementptr inbounds i16, i16* %5404, i64 -16
  %5409 = bitcast i16* %5408 to <16 x i16>*
  store <16 x i16> %5407, <16 x i16>* %5409, align 2, !tbaa !399
  %5410 = zext i32 %.pre-phi3528 to i64
  %5411 = mul nsw i64 %5410, %116
  %5412 = add nsw i64 %5411, %94
  %5413 = getelementptr inbounds i16, i16* %blur_x, i64 %5412
  %5414 = getelementptr inbounds i16, i16* %5413, i64 -32
  %5415 = bitcast i16* %5414 to <16 x i16>*
  %5416 = load <16 x i16>, <16 x i16>* %5415, align 2, !tbaa !399
  %5417 = getelementptr inbounds i16, i16* %5413, i64 -16
  %5418 = bitcast i16* %5417 to <16 x i16>*
  %5419 = load <16 x i16>, <16 x i16>* %5418, align 2, !tbaa !399
  %5420 = zext i32 %.pre-phi3524 to i64
  %5421 = mul nsw i64 %5420, %116
  %5422 = add nsw i64 %5421, %94
  %5423 = getelementptr inbounds i16, i16* %blur_x, i64 %5422
  %5424 = getelementptr inbounds i16, i16* %5423, i64 -32
  %5425 = bitcast i16* %5424 to <16 x i16>*
  %5426 = load <16 x i16>, <16 x i16>* %5425, align 2, !tbaa !399
  %5427 = getelementptr inbounds i16, i16* %5423, i64 -16
  %5428 = bitcast i16* %5427 to <16 x i16>*
  %5429 = load <16 x i16>, <16 x i16>* %5428, align 2, !tbaa !399
  %5430 = zext i32 %.pre-phi3534 to i64
  %5431 = mul nsw i64 %5430, %116
  %5432 = add nsw i64 %5431, %94
  %5433 = getelementptr inbounds i16, i16* %blur_x, i64 %5432
  %5434 = getelementptr inbounds i16, i16* %5433, i64 -32
  %5435 = bitcast i16* %5434 to <16 x i16>*
  %5436 = load <16 x i16>, <16 x i16>* %5435, align 2, !tbaa !399
  %5437 = getelementptr inbounds i16, i16* %5433, i64 -16
  %5438 = bitcast i16* %5437 to <16 x i16>*
  %5439 = load <16 x i16>, <16 x i16>* %5438, align 2, !tbaa !399
  %5440 = zext i32 %.pre-phi to i64
  %5441 = mul nsw i64 %5440, %116
  %5442 = add nsw i64 %5441, %94
  %5443 = getelementptr inbounds i16, i16* %blur_x, i64 %5442
  %5444 = getelementptr inbounds i16, i16* %5443, i64 -32
  %5445 = bitcast i16* %5444 to <16 x i16>*
  %5446 = load <16 x i16>, <16 x i16>* %5445, align 2, !tbaa !399
  %5447 = getelementptr inbounds i16, i16* %5443, i64 -16
  %5448 = bitcast i16* %5447 to <16 x i16>*
  %5449 = load <16 x i16>, <16 x i16>* %5448, align 2, !tbaa !399
  %5450 = zext i32 %.pre-phi3508 to i64
  %5451 = mul nsw i64 %5450, %116
  %5452 = add nsw i64 %5451, %94
  %5453 = getelementptr inbounds i16, i16* %blur_x, i64 %5452
  %5454 = getelementptr inbounds i16, i16* %5453, i64 -32
  %5455 = bitcast i16* %5454 to <16 x i16>*
  %5456 = load <16 x i16>, <16 x i16>* %5455, align 2, !tbaa !399
  %5457 = getelementptr inbounds i16, i16* %5453, i64 -16
  %5458 = bitcast i16* %5457 to <16 x i16>*
  %5459 = load <16 x i16>, <16 x i16>* %5458, align 2, !tbaa !399
  %5460 = mul nsw i64 %5401, %116
  %5461 = add nsw i64 %5460, %94
  %5462 = getelementptr inbounds i16, i16* %blur_x, i64 %5461
  %5463 = getelementptr inbounds i16, i16* %5462, i64 -32
  %5464 = bitcast i16* %5463 to <16 x i16>*
  %5465 = load <16 x i16>, <16 x i16>* %5464, align 2, !tbaa !399
  %5466 = getelementptr inbounds i16, i16* %5462, i64 -16
  %5467 = bitcast i16* %5466 to <16 x i16>*
  %5468 = load <16 x i16>, <16 x i16>* %5467, align 2, !tbaa !399
  %5469 = zext i32 %.pre-phi3512 to i64
  %5470 = mul nsw i64 %5469, %116
  %5471 = add nsw i64 %5470, %94
  %5472 = getelementptr inbounds i16, i16* %blur_x, i64 %5471
  %5473 = getelementptr inbounds i16, i16* %5472, i64 -32
  %5474 = bitcast i16* %5473 to <16 x i16>*
  %5475 = load <16 x i16>, <16 x i16>* %5474, align 2, !tbaa !399
  %5476 = getelementptr inbounds i16, i16* %5472, i64 -16
  %5477 = bitcast i16* %5476 to <16 x i16>*
  %5478 = load <16 x i16>, <16 x i16>* %5477, align 2, !tbaa !399
  %5479 = add <16 x i16> %5426, %5416
  %5480 = add <16 x i16> %5479, %5436
  %5481 = add <16 x i16> %5480, %5446
  %5482 = add <16 x i16> %5481, %5456
  %5483 = add <16 x i16> %5482, %5465
  %5484 = add <16 x i16> %5483, %5475
  %5485 = add <16 x i16> %5429, %5419
  %5486 = add <16 x i16> %5485, %5439
  %5487 = add <16 x i16> %5486, %5449
  %5488 = add <16 x i16> %5487, %5459
  %5489 = add <16 x i16> %5488, %5468
  %5490 = add <16 x i16> %5489, %5478
  %5491 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5484, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5492 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5490, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5493 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5491, <16 x i16> %5484)
  %5494 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5492, <16 x i16> %5490)
  %5495 = shufflevector <16 x i16> %5493, <16 x i16> %5494, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5496 = lshr <32 x i16> %5495, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5497 = shufflevector <32 x i16> %5496, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5498 = sext i32 %a26 to i64
  %5499 = add nsw i64 %5498, 5
  %5500 = mul nsw i64 %5499, %117
  %5501 = add nsw i64 %119, %5500
  %5502 = getelementptr inbounds i16, i16* %66, i64 %5501
  %5503 = getelementptr inbounds i16, i16* %5502, i64 -32
  %5504 = bitcast i16* %5503 to <16 x i16>*
  store <16 x i16> %5497, <16 x i16>* %5504, align 2, !tbaa !401
  %5505 = shufflevector <32 x i16> %5496, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5506 = getelementptr inbounds i16, i16* %5502, i64 -16
  %5507 = bitcast i16* %5506 to <16 x i16>*
  store <16 x i16> %5505, <16 x i16>* %5507, align 2, !tbaa !401
  br label %after_bb239

"for blur_y.s0.x.x.rebased244":                   ; preds = %"for blur_y.s0.x.x.rebased244.preheader", %"consume blur_x251"
  %indvars.iv3294 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased244.preheader" ], [ %indvars.iv.next3295, %"consume blur_x251" ]
  %5508 = add nsw i64 %indvars.iv3294, %101
  %5509 = icmp slt i64 %5508, 1
  %5510 = trunc i64 %5508 to i32
  %5511 = shl nsw i32 %5510, 5
  %5512 = icmp sgt i32 %4, %5511
  %5513 = or i1 %5509, %5512
  br i1 %5513, label %"produce blur_x250", label %"for blur_y.s0.x.x.rebased244.consume blur_x251_crit_edge"

"for blur_y.s0.x.x.rebased244.consume blur_x251_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased244"
  %.pre3543 = shl nsw i64 %5508, 5
  br label %"consume blur_x251"

"end for blur_y.s0.x.x.rebased245":               ; preds = %"consume blur_x251", %after_bb239
  br i1 %102, label %"for blur_y.s0.x.x.rebased252.preheader", label %"end for blur_y.s0.x.x.rebased253", !prof !386

"for blur_y.s0.x.x.rebased252.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased245"
  %5514 = sext i32 %t1744 to i64
  %5515 = zext i32 %.pre-phi3528 to i64
  %5516 = mul nsw i64 %5515, %116
  %5517 = sub nsw i64 %5516, %96
  %5518 = zext i32 %.pre-phi3524 to i64
  %5519 = mul nsw i64 %5518, %116
  %5520 = sub nsw i64 %5519, %96
  %5521 = zext i32 %.pre-phi3534 to i64
  %5522 = mul nsw i64 %5521, %116
  %5523 = sub nsw i64 %5522, %96
  %5524 = zext i32 %.pre-phi to i64
  %5525 = mul nsw i64 %5524, %116
  %5526 = sub nsw i64 %5525, %96
  %5527 = zext i32 %.pre-phi3508 to i64
  %5528 = mul nsw i64 %5527, %116
  %5529 = sub nsw i64 %5528, %96
  %5530 = zext i32 %.pre-phi3516 to i64
  %5531 = mul nsw i64 %5530, %116
  %5532 = sub nsw i64 %5531, %96
  %5533 = zext i32 %.pre-phi3512 to i64
  %5534 = mul nsw i64 %5533, %116
  %5535 = sub nsw i64 %5534, %96
  %5536 = sext i32 %a26 to i64
  %5537 = add nsw i64 %5536, 5
  %5538 = mul nsw i64 %5537, %117
  %5539 = add nsw i64 %5538, %120
  br label %"for blur_y.s0.x.x.rebased252"

"produce blur_x250":                              ; preds = %"for blur_y.s0.x.x.rebased244"
  %t832 = add nsw i32 %5511, %t1841
  %5540 = sext i32 %t832 to i64
  %5541 = getelementptr inbounds i16, i16* %read_input, i64 %5540
  %5542 = getelementptr inbounds i16, i16* %5541, i64 1
  %5543 = bitcast i16* %5542 to <16 x i16>*
  %5544 = load <16 x i16>, <16 x i16>* %5543, align 2, !tbaa !396
  %5545 = getelementptr inbounds i16, i16* %5541, i64 17
  %5546 = bitcast i16* %5545 to <16 x i16>*
  %5547 = load <16 x i16>, <16 x i16>* %5546, align 2, !tbaa !396
  %5548 = bitcast i16* %5541 to <16 x i16>*
  %5549 = load <16 x i16>, <16 x i16>* %5548, align 2, !tbaa !396
  %5550 = getelementptr inbounds i16, i16* %5541, i64 16
  %5551 = bitcast i16* %5550 to <16 x i16>*
  %5552 = load <16 x i16>, <16 x i16>* %5551, align 2, !tbaa !396
  %5553 = getelementptr inbounds i16, i16* %5541, i64 2
  %5554 = bitcast i16* %5553 to <16 x i16>*
  %5555 = load <16 x i16>, <16 x i16>* %5554, align 2, !tbaa !396
  %5556 = getelementptr inbounds i16, i16* %5541, i64 18
  %5557 = bitcast i16* %5556 to <16 x i16>*
  %5558 = load <16 x i16>, <16 x i16>* %5557, align 2, !tbaa !396
  %5559 = getelementptr inbounds i16, i16* %5541, i64 3
  %5560 = bitcast i16* %5559 to <16 x i16>*
  %5561 = load <16 x i16>, <16 x i16>* %5560, align 2, !tbaa !396
  %5562 = getelementptr inbounds i16, i16* %5541, i64 19
  %5563 = bitcast i16* %5562 to <16 x i16>*
  %5564 = load <16 x i16>, <16 x i16>* %5563, align 2, !tbaa !396
  %5565 = getelementptr inbounds i16, i16* %5541, i64 4
  %5566 = bitcast i16* %5565 to <16 x i16>*
  %5567 = load <16 x i16>, <16 x i16>* %5566, align 2, !tbaa !396
  %5568 = getelementptr inbounds i16, i16* %5541, i64 20
  %5569 = bitcast i16* %5568 to <16 x i16>*
  %5570 = load <16 x i16>, <16 x i16>* %5569, align 2, !tbaa !396
  %5571 = getelementptr inbounds i16, i16* %5541, i64 6
  %5572 = bitcast i16* %5571 to <16 x i16>*
  %5573 = load <16 x i16>, <16 x i16>* %5572, align 2, !tbaa !396
  %5574 = getelementptr inbounds i16, i16* %5541, i64 22
  %5575 = bitcast i16* %5574 to <16 x i16>*
  %5576 = load <16 x i16>, <16 x i16>* %5575, align 2, !tbaa !396
  %5577 = getelementptr inbounds i16, i16* %5541, i64 5
  %5578 = bitcast i16* %5577 to <16 x i16>*
  %5579 = load <16 x i16>, <16 x i16>* %5578, align 2, !tbaa !396
  %5580 = getelementptr inbounds i16, i16* %5541, i64 21
  %5581 = bitcast i16* %5580 to <16 x i16>*
  %5582 = load <16 x i16>, <16 x i16>* %5581, align 2, !tbaa !396
  %5583 = add <16 x i16> %5549, %5544
  %5584 = add <16 x i16> %5583, %5555
  %5585 = add <16 x i16> %5584, %5561
  %5586 = add <16 x i16> %5585, %5567
  %5587 = add <16 x i16> %5586, %5573
  %5588 = add <16 x i16> %5587, %5579
  %5589 = add <16 x i16> %5552, %5547
  %5590 = add <16 x i16> %5589, %5558
  %5591 = add <16 x i16> %5590, %5564
  %5592 = add <16 x i16> %5591, %5570
  %5593 = add <16 x i16> %5592, %5576
  %5594 = add <16 x i16> %5593, %5582
  %5595 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5588, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5596 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5594, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5597 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5595, <16 x i16> %5588)
  %5598 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5596, <16 x i16> %5594)
  %5599 = shufflevector <16 x i16> %5597, <16 x i16> %5598, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5600 = lshr <32 x i16> %5599, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5601 = shufflevector <32 x i16> %5600, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5602 = shl nsw i64 %5508, 5
  %5603 = add nsw i64 %5602, %5313
  %5604 = getelementptr inbounds i16, i16* %blur_x, i64 %5603
  %5605 = bitcast i16* %5604 to <16 x i16>*
  store <16 x i16> %5601, <16 x i16>* %5605, align 2, !tbaa !399
  %5606 = shufflevector <32 x i16> %5600, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5607 = getelementptr inbounds i16, i16* %5604, i64 16
  %5608 = bitcast i16* %5607 to <16 x i16>*
  store <16 x i16> %5606, <16 x i16>* %5608, align 2, !tbaa !399
  br label %"consume blur_x251"

"consume blur_x251":                              ; preds = %"for blur_y.s0.x.x.rebased244.consume blur_x251_crit_edge", %"produce blur_x250"
  %.pre-phi3544 = phi i64 [ %.pre3543, %"for blur_y.s0.x.x.rebased244.consume blur_x251_crit_edge" ], [ %5602, %"produce blur_x250" ]
  %5609 = add nsw i64 %5316, %.pre-phi3544
  %5610 = getelementptr inbounds i16, i16* %blur_x, i64 %5609
  %5611 = bitcast i16* %5610 to <16 x i16>*
  %5612 = load <16 x i16>, <16 x i16>* %5611, align 2, !tbaa !399
  %5613 = getelementptr inbounds i16, i16* %5610, i64 16
  %5614 = bitcast i16* %5613 to <16 x i16>*
  %5615 = load <16 x i16>, <16 x i16>* %5614, align 2, !tbaa !399
  %5616 = add nsw i64 %5319, %.pre-phi3544
  %5617 = getelementptr inbounds i16, i16* %blur_x, i64 %5616
  %5618 = bitcast i16* %5617 to <16 x i16>*
  %5619 = load <16 x i16>, <16 x i16>* %5618, align 2, !tbaa !399
  %5620 = getelementptr inbounds i16, i16* %5617, i64 16
  %5621 = bitcast i16* %5620 to <16 x i16>*
  %5622 = load <16 x i16>, <16 x i16>* %5621, align 2, !tbaa !399
  %5623 = add nsw i64 %5322, %.pre-phi3544
  %5624 = getelementptr inbounds i16, i16* %blur_x, i64 %5623
  %5625 = bitcast i16* %5624 to <16 x i16>*
  %5626 = load <16 x i16>, <16 x i16>* %5625, align 2, !tbaa !399
  %5627 = getelementptr inbounds i16, i16* %5624, i64 16
  %5628 = bitcast i16* %5627 to <16 x i16>*
  %5629 = load <16 x i16>, <16 x i16>* %5628, align 2, !tbaa !399
  %5630 = add nsw i64 %5325, %.pre-phi3544
  %5631 = getelementptr inbounds i16, i16* %blur_x, i64 %5630
  %5632 = bitcast i16* %5631 to <16 x i16>*
  %5633 = load <16 x i16>, <16 x i16>* %5632, align 2, !tbaa !399
  %5634 = getelementptr inbounds i16, i16* %5631, i64 16
  %5635 = bitcast i16* %5634 to <16 x i16>*
  %5636 = load <16 x i16>, <16 x i16>* %5635, align 2, !tbaa !399
  %5637 = add nsw i64 %5328, %.pre-phi3544
  %5638 = getelementptr inbounds i16, i16* %blur_x, i64 %5637
  %5639 = bitcast i16* %5638 to <16 x i16>*
  %5640 = load <16 x i16>, <16 x i16>* %5639, align 2, !tbaa !399
  %5641 = getelementptr inbounds i16, i16* %5638, i64 16
  %5642 = bitcast i16* %5641 to <16 x i16>*
  %5643 = load <16 x i16>, <16 x i16>* %5642, align 2, !tbaa !399
  %5644 = add nsw i64 %5331, %.pre-phi3544
  %5645 = getelementptr inbounds i16, i16* %blur_x, i64 %5644
  %5646 = bitcast i16* %5645 to <16 x i16>*
  %5647 = load <16 x i16>, <16 x i16>* %5646, align 2, !tbaa !399
  %5648 = getelementptr inbounds i16, i16* %5645, i64 16
  %5649 = bitcast i16* %5648 to <16 x i16>*
  %5650 = load <16 x i16>, <16 x i16>* %5649, align 2, !tbaa !399
  %5651 = add nsw i64 %5334, %.pre-phi3544
  %5652 = getelementptr inbounds i16, i16* %blur_x, i64 %5651
  %5653 = bitcast i16* %5652 to <16 x i16>*
  %5654 = load <16 x i16>, <16 x i16>* %5653, align 2, !tbaa !399
  %5655 = getelementptr inbounds i16, i16* %5652, i64 16
  %5656 = bitcast i16* %5655 to <16 x i16>*
  %5657 = load <16 x i16>, <16 x i16>* %5656, align 2, !tbaa !399
  %5658 = add <16 x i16> %5619, %5612
  %5659 = add <16 x i16> %5658, %5626
  %5660 = add <16 x i16> %5659, %5633
  %5661 = add <16 x i16> %5660, %5640
  %5662 = add <16 x i16> %5661, %5647
  %5663 = add <16 x i16> %5662, %5654
  %5664 = add <16 x i16> %5622, %5615
  %5665 = add <16 x i16> %5664, %5629
  %5666 = add <16 x i16> %5665, %5636
  %5667 = add <16 x i16> %5666, %5643
  %5668 = add <16 x i16> %5667, %5650
  %5669 = add <16 x i16> %5668, %5657
  %5670 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5663, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5671 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5669, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5672 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5670, <16 x i16> %5663)
  %5673 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5671, <16 x i16> %5669)
  %5674 = shufflevector <16 x i16> %5672, <16 x i16> %5673, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5675 = lshr <32 x i16> %5674, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5676 = shufflevector <32 x i16> %5675, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5677 = add nsw i64 %5338, %.pre-phi3544
  %5678 = getelementptr inbounds i16, i16* %66, i64 %5677
  %5679 = bitcast i16* %5678 to <16 x i16>*
  store <16 x i16> %5676, <16 x i16>* %5679, align 2, !tbaa !401
  %5680 = shufflevector <32 x i16> %5675, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5681 = getelementptr inbounds i16, i16* %5678, i64 16
  %5682 = bitcast i16* %5681 to <16 x i16>*
  store <16 x i16> %5680, <16 x i16>* %5682, align 2, !tbaa !401
  %indvars.iv.next3295 = add nuw nsw i64 %indvars.iv3294, 1
  %.not2790 = icmp eq i64 %indvars.iv.next3295, %188
  br i1 %.not2790, label %"end for blur_y.s0.x.x.rebased245", label %"for blur_y.s0.x.x.rebased244"

"for blur_y.s0.x.x.rebased252":                   ; preds = %"for blur_y.s0.x.x.rebased252.preheader", %"consume blur_x260"
  %blur_y.s0.x.x.rebased254 = phi i32 [ %5833, %"consume blur_x260" ], [ 0, %"for blur_y.s0.x.x.rebased252.preheader" ]
  %5683 = add nsw i32 %blur_y.s0.x.x.rebased254, %t1670
  %a154 = shl nsw i32 %5683, 5
  %5684 = icmp sgt i32 %a14, %a154
  %b160 = select i1 %5684, i32 %a154, i32 %a14
  %5685 = icmp slt i32 %5683, 1
  %5686 = icmp sgt i32 %4, %a154
  %5687 = or i1 %5685, %5686
  br i1 %5687, label %"produce blur_x258", label %"consume blur_x260"

"end for blur_y.s0.x.x.rebased253":               ; preds = %"consume blur_x260", %"end for blur_y.s0.x.x.rebased245"
  br i1 %34, label %"produce blur_x264", label %after_bb261

"produce blur_x258":                              ; preds = %"for blur_y.s0.x.x.rebased252"
  %5688 = icmp slt i32 %b160, %4
  %blur_x.s0.x.v1.base.s259 = select i1 %5688, i32 %b160, i32 %4
  %t837 = add nsw i32 %blur_x.s0.x.v1.base.s259, %t1841
  %5689 = sext i32 %t837 to i64
  %5690 = getelementptr inbounds i16, i16* %read_input, i64 %5689
  %5691 = getelementptr inbounds i16, i16* %5690, i64 1
  %5692 = bitcast i16* %5691 to <16 x i16>*
  %5693 = load <16 x i16>, <16 x i16>* %5692, align 2, !tbaa !396
  %5694 = getelementptr inbounds i16, i16* %5690, i64 17
  %5695 = bitcast i16* %5694 to <16 x i16>*
  %5696 = load <16 x i16>, <16 x i16>* %5695, align 2, !tbaa !396
  %5697 = bitcast i16* %5690 to <16 x i16>*
  %5698 = load <16 x i16>, <16 x i16>* %5697, align 2, !tbaa !396
  %5699 = getelementptr inbounds i16, i16* %5690, i64 16
  %5700 = bitcast i16* %5699 to <16 x i16>*
  %5701 = load <16 x i16>, <16 x i16>* %5700, align 2, !tbaa !396
  %5702 = getelementptr inbounds i16, i16* %5690, i64 2
  %5703 = bitcast i16* %5702 to <16 x i16>*
  %5704 = load <16 x i16>, <16 x i16>* %5703, align 2, !tbaa !396
  %5705 = getelementptr inbounds i16, i16* %5690, i64 18
  %5706 = bitcast i16* %5705 to <16 x i16>*
  %5707 = load <16 x i16>, <16 x i16>* %5706, align 2, !tbaa !396
  %5708 = getelementptr inbounds i16, i16* %5690, i64 3
  %5709 = bitcast i16* %5708 to <16 x i16>*
  %5710 = load <16 x i16>, <16 x i16>* %5709, align 2, !tbaa !396
  %5711 = getelementptr inbounds i16, i16* %5690, i64 19
  %5712 = bitcast i16* %5711 to <16 x i16>*
  %5713 = load <16 x i16>, <16 x i16>* %5712, align 2, !tbaa !396
  %5714 = getelementptr inbounds i16, i16* %5690, i64 4
  %5715 = bitcast i16* %5714 to <16 x i16>*
  %5716 = load <16 x i16>, <16 x i16>* %5715, align 2, !tbaa !396
  %5717 = getelementptr inbounds i16, i16* %5690, i64 20
  %5718 = bitcast i16* %5717 to <16 x i16>*
  %5719 = load <16 x i16>, <16 x i16>* %5718, align 2, !tbaa !396
  %5720 = getelementptr inbounds i16, i16* %5690, i64 6
  %5721 = bitcast i16* %5720 to <16 x i16>*
  %5722 = load <16 x i16>, <16 x i16>* %5721, align 2, !tbaa !396
  %5723 = getelementptr inbounds i16, i16* %5690, i64 22
  %5724 = bitcast i16* %5723 to <16 x i16>*
  %5725 = load <16 x i16>, <16 x i16>* %5724, align 2, !tbaa !396
  %5726 = getelementptr inbounds i16, i16* %5690, i64 5
  %5727 = bitcast i16* %5726 to <16 x i16>*
  %5728 = load <16 x i16>, <16 x i16>* %5727, align 2, !tbaa !396
  %5729 = getelementptr inbounds i16, i16* %5690, i64 21
  %5730 = bitcast i16* %5729 to <16 x i16>*
  %5731 = load <16 x i16>, <16 x i16>* %5730, align 2, !tbaa !396
  %5732 = add <16 x i16> %5698, %5693
  %5733 = add <16 x i16> %5732, %5704
  %5734 = add <16 x i16> %5733, %5710
  %5735 = add <16 x i16> %5734, %5716
  %5736 = add <16 x i16> %5735, %5722
  %5737 = add <16 x i16> %5736, %5728
  %5738 = add <16 x i16> %5701, %5696
  %5739 = add <16 x i16> %5738, %5707
  %5740 = add <16 x i16> %5739, %5713
  %5741 = add <16 x i16> %5740, %5719
  %5742 = add <16 x i16> %5741, %5725
  %5743 = add <16 x i16> %5742, %5731
  %5744 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5737, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5745 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5743, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5746 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5744, <16 x i16> %5737)
  %5747 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5745, <16 x i16> %5743)
  %5748 = shufflevector <16 x i16> %5746, <16 x i16> %5747, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5749 = lshr <32 x i16> %5748, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5750 = shufflevector <32 x i16> %5749, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5751 = sext i32 %blur_x.s0.x.v1.base.s259 to i64
  %5752 = add nsw i64 %5751, %5514
  %5753 = getelementptr inbounds i16, i16* %blur_x, i64 %5752
  %5754 = bitcast i16* %5753 to <16 x i16>*
  store <16 x i16> %5750, <16 x i16>* %5754, align 2, !tbaa !399
  %5755 = shufflevector <32 x i16> %5749, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5756 = getelementptr inbounds i16, i16* %5753, i64 16
  %5757 = bitcast i16* %5756 to <16 x i16>*
  store <16 x i16> %5755, <16 x i16>* %5757, align 2, !tbaa !399
  br label %"consume blur_x260"

"consume blur_x260":                              ; preds = %"for blur_y.s0.x.x.rebased252", %"produce blur_x258"
  %5758 = sext i32 %b160 to i64
  %5759 = add nsw i64 %5517, %5758
  %5760 = getelementptr inbounds i16, i16* %blur_x, i64 %5759
  %5761 = bitcast i16* %5760 to <16 x i16>*
  %5762 = load <16 x i16>, <16 x i16>* %5761, align 2, !tbaa !399
  %5763 = getelementptr inbounds i16, i16* %5760, i64 16
  %5764 = bitcast i16* %5763 to <16 x i16>*
  %5765 = load <16 x i16>, <16 x i16>* %5764, align 2, !tbaa !399
  %5766 = add nsw i64 %5520, %5758
  %5767 = getelementptr inbounds i16, i16* %blur_x, i64 %5766
  %5768 = bitcast i16* %5767 to <16 x i16>*
  %5769 = load <16 x i16>, <16 x i16>* %5768, align 2, !tbaa !399
  %5770 = getelementptr inbounds i16, i16* %5767, i64 16
  %5771 = bitcast i16* %5770 to <16 x i16>*
  %5772 = load <16 x i16>, <16 x i16>* %5771, align 2, !tbaa !399
  %5773 = add nsw i64 %5523, %5758
  %5774 = getelementptr inbounds i16, i16* %blur_x, i64 %5773
  %5775 = bitcast i16* %5774 to <16 x i16>*
  %5776 = load <16 x i16>, <16 x i16>* %5775, align 2, !tbaa !399
  %5777 = getelementptr inbounds i16, i16* %5774, i64 16
  %5778 = bitcast i16* %5777 to <16 x i16>*
  %5779 = load <16 x i16>, <16 x i16>* %5778, align 2, !tbaa !399
  %5780 = add nsw i64 %5526, %5758
  %5781 = getelementptr inbounds i16, i16* %blur_x, i64 %5780
  %5782 = bitcast i16* %5781 to <16 x i16>*
  %5783 = load <16 x i16>, <16 x i16>* %5782, align 2, !tbaa !399
  %5784 = getelementptr inbounds i16, i16* %5781, i64 16
  %5785 = bitcast i16* %5784 to <16 x i16>*
  %5786 = load <16 x i16>, <16 x i16>* %5785, align 2, !tbaa !399
  %5787 = add nsw i64 %5529, %5758
  %5788 = getelementptr inbounds i16, i16* %blur_x, i64 %5787
  %5789 = bitcast i16* %5788 to <16 x i16>*
  %5790 = load <16 x i16>, <16 x i16>* %5789, align 2, !tbaa !399
  %5791 = getelementptr inbounds i16, i16* %5788, i64 16
  %5792 = bitcast i16* %5791 to <16 x i16>*
  %5793 = load <16 x i16>, <16 x i16>* %5792, align 2, !tbaa !399
  %5794 = add nsw i64 %5532, %5758
  %5795 = getelementptr inbounds i16, i16* %blur_x, i64 %5794
  %5796 = bitcast i16* %5795 to <16 x i16>*
  %5797 = load <16 x i16>, <16 x i16>* %5796, align 2, !tbaa !399
  %5798 = getelementptr inbounds i16, i16* %5795, i64 16
  %5799 = bitcast i16* %5798 to <16 x i16>*
  %5800 = load <16 x i16>, <16 x i16>* %5799, align 2, !tbaa !399
  %5801 = add nsw i64 %5535, %5758
  %5802 = getelementptr inbounds i16, i16* %blur_x, i64 %5801
  %5803 = bitcast i16* %5802 to <16 x i16>*
  %5804 = load <16 x i16>, <16 x i16>* %5803, align 2, !tbaa !399
  %5805 = getelementptr inbounds i16, i16* %5802, i64 16
  %5806 = bitcast i16* %5805 to <16 x i16>*
  %5807 = load <16 x i16>, <16 x i16>* %5806, align 2, !tbaa !399
  %5808 = add <16 x i16> %5769, %5762
  %5809 = add <16 x i16> %5808, %5776
  %5810 = add <16 x i16> %5809, %5783
  %5811 = add <16 x i16> %5810, %5790
  %5812 = add <16 x i16> %5811, %5797
  %5813 = add <16 x i16> %5812, %5804
  %5814 = add <16 x i16> %5772, %5765
  %5815 = add <16 x i16> %5814, %5779
  %5816 = add <16 x i16> %5815, %5786
  %5817 = add <16 x i16> %5816, %5793
  %5818 = add <16 x i16> %5817, %5800
  %5819 = add <16 x i16> %5818, %5807
  %5820 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5813, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5821 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5819, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5822 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5820, <16 x i16> %5813)
  %5823 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5821, <16 x i16> %5819)
  %5824 = shufflevector <16 x i16> %5822, <16 x i16> %5823, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5825 = lshr <32 x i16> %5824, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5826 = shufflevector <32 x i16> %5825, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5827 = add nsw i64 %5539, %5758
  %5828 = getelementptr inbounds i16, i16* %66, i64 %5827
  %5829 = bitcast i16* %5828 to <16 x i16>*
  store <16 x i16> %5826, <16 x i16>* %5829, align 2, !tbaa !401
  %5830 = shufflevector <32 x i16> %5825, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5831 = getelementptr inbounds i16, i16* %5828, i64 16
  %5832 = bitcast i16* %5831 to <16 x i16>*
  store <16 x i16> %5830, <16 x i16>* %5832, align 2, !tbaa !401
  %5833 = add nuw nsw i32 %blur_y.s0.x.x.rebased254, 1
  %.not2789 = icmp eq i32 %5833, %t1727
  br i1 %.not2789, label %"end for blur_y.s0.x.x.rebased253", label %"for blur_y.s0.x.x.rebased252"

after_bb261:                                      ; preds = %"end for blur_y.s0.x.x.rebased253", %"produce blur_x264"
  br i1 %100, label %"for blur_y.s0.x.x.rebased266.preheader", label %"end for blur_y.s0.x.x.rebased267", !prof !386

"for blur_y.s0.x.x.rebased266.preheader":         ; preds = %after_bb261
  %5834 = sext i32 %t1750 to i64
  %5835 = zext i32 %.pre-phi3534 to i64
  %5836 = mul nsw i64 %5835, %116
  %5837 = sub nsw i64 %5836, %96
  %5838 = zext i32 %.pre-phi3528 to i64
  %5839 = mul nsw i64 %5838, %116
  %5840 = sub nsw i64 %5839, %96
  %5841 = zext i32 %.pre-phi to i64
  %5842 = mul nsw i64 %5841, %116
  %5843 = sub nsw i64 %5842, %96
  %5844 = zext i32 %.pre-phi3508 to i64
  %5845 = mul nsw i64 %5844, %116
  %5846 = sub nsw i64 %5845, %96
  %5847 = zext i32 %.pre-phi3512 to i64
  %5848 = mul nsw i64 %5847, %116
  %5849 = sub nsw i64 %5848, %96
  %5850 = zext i32 %.pre-phi3520 to i64
  %5851 = mul nsw i64 %5850, %116
  %5852 = sub nsw i64 %5851, %96
  %5853 = zext i32 %.pre-phi3516 to i64
  %5854 = mul nsw i64 %5853, %116
  %5855 = sub nsw i64 %5854, %96
  %5856 = sext i32 %a26 to i64
  %5857 = add nsw i64 %5856, 6
  %5858 = mul nsw i64 %5857, %117
  %5859 = add nsw i64 %5858, %120
  br label %"for blur_y.s0.x.x.rebased266"

"produce blur_x264":                              ; preds = %"end for blur_y.s0.x.x.rebased253"
  %5860 = getelementptr inbounds i16, i16* %read_input, i64 %131
  %5861 = getelementptr inbounds i16, i16* %5860, i64 -31
  %5862 = bitcast i16* %5861 to <16 x i16>*
  %5863 = load <16 x i16>, <16 x i16>* %5862, align 2, !tbaa !396
  %5864 = getelementptr inbounds i16, i16* %5860, i64 -15
  %5865 = bitcast i16* %5864 to <16 x i16>*
  %5866 = load <16 x i16>, <16 x i16>* %5865, align 2, !tbaa !396
  %5867 = getelementptr inbounds i16, i16* %5860, i64 -32
  %5868 = bitcast i16* %5867 to <16 x i16>*
  %5869 = load <16 x i16>, <16 x i16>* %5868, align 2, !tbaa !396
  %5870 = getelementptr inbounds i16, i16* %5860, i64 -16
  %5871 = bitcast i16* %5870 to <16 x i16>*
  %5872 = load <16 x i16>, <16 x i16>* %5871, align 2, !tbaa !396
  %5873 = getelementptr inbounds i16, i16* %5860, i64 -30
  %5874 = bitcast i16* %5873 to <16 x i16>*
  %5875 = load <16 x i16>, <16 x i16>* %5874, align 2, !tbaa !396
  %5876 = getelementptr inbounds i16, i16* %5860, i64 -14
  %5877 = bitcast i16* %5876 to <16 x i16>*
  %5878 = load <16 x i16>, <16 x i16>* %5877, align 2, !tbaa !396
  %5879 = getelementptr inbounds i16, i16* %5860, i64 -29
  %5880 = bitcast i16* %5879 to <16 x i16>*
  %5881 = load <16 x i16>, <16 x i16>* %5880, align 2, !tbaa !396
  %5882 = getelementptr inbounds i16, i16* %5860, i64 -13
  %5883 = bitcast i16* %5882 to <16 x i16>*
  %5884 = load <16 x i16>, <16 x i16>* %5883, align 2, !tbaa !396
  %5885 = getelementptr inbounds i16, i16* %5860, i64 -28
  %5886 = bitcast i16* %5885 to <16 x i16>*
  %5887 = load <16 x i16>, <16 x i16>* %5886, align 2, !tbaa !396
  %5888 = getelementptr inbounds i16, i16* %5860, i64 -12
  %5889 = bitcast i16* %5888 to <16 x i16>*
  %5890 = load <16 x i16>, <16 x i16>* %5889, align 2, !tbaa !396
  %5891 = getelementptr inbounds i16, i16* %5860, i64 -26
  %5892 = bitcast i16* %5891 to <16 x i16>*
  %5893 = load <16 x i16>, <16 x i16>* %5892, align 2, !tbaa !396
  %5894 = getelementptr inbounds i16, i16* %5860, i64 -10
  %5895 = bitcast i16* %5894 to <16 x i16>*
  %5896 = load <16 x i16>, <16 x i16>* %5895, align 2, !tbaa !396
  %5897 = getelementptr inbounds i16, i16* %5860, i64 -27
  %5898 = bitcast i16* %5897 to <16 x i16>*
  %5899 = load <16 x i16>, <16 x i16>* %5898, align 2, !tbaa !396
  %5900 = getelementptr inbounds i16, i16* %5860, i64 -11
  %5901 = bitcast i16* %5900 to <16 x i16>*
  %5902 = load <16 x i16>, <16 x i16>* %5901, align 2, !tbaa !396
  %5903 = add <16 x i16> %5869, %5863
  %5904 = add <16 x i16> %5903, %5875
  %5905 = add <16 x i16> %5904, %5881
  %5906 = add <16 x i16> %5905, %5887
  %5907 = add <16 x i16> %5906, %5893
  %5908 = add <16 x i16> %5907, %5899
  %5909 = add <16 x i16> %5872, %5866
  %5910 = add <16 x i16> %5909, %5878
  %5911 = add <16 x i16> %5910, %5884
  %5912 = add <16 x i16> %5911, %5890
  %5913 = add <16 x i16> %5912, %5896
  %5914 = add <16 x i16> %5913, %5902
  %5915 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5908, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5916 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5914, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %5917 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5915, <16 x i16> %5908)
  %5918 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %5916, <16 x i16> %5914)
  %5919 = shufflevector <16 x i16> %5917, <16 x i16> %5918, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5920 = lshr <32 x i16> %5919, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5921 = shufflevector <32 x i16> %5920, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5922 = zext i32 %.pre-phi3520 to i64
  %5923 = mul nsw i64 %97, %5922
  %5924 = add nsw i64 %99, %5923
  %5925 = getelementptr inbounds i16, i16* %blur_x, i64 %5924
  %5926 = getelementptr inbounds i16, i16* %5925, i64 -32
  %5927 = bitcast i16* %5926 to <16 x i16>*
  store <16 x i16> %5921, <16 x i16>* %5927, align 2, !tbaa !399
  %5928 = shufflevector <32 x i16> %5920, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5929 = getelementptr inbounds i16, i16* %5925, i64 -16
  %5930 = bitcast i16* %5929 to <16 x i16>*
  store <16 x i16> %5928, <16 x i16>* %5930, align 2, !tbaa !399
  %5931 = zext i32 %.pre-phi3534 to i64
  %5932 = mul nsw i64 %5931, %116
  %5933 = add nsw i64 %5932, %94
  %5934 = getelementptr inbounds i16, i16* %blur_x, i64 %5933
  %5935 = getelementptr inbounds i16, i16* %5934, i64 -32
  %5936 = bitcast i16* %5935 to <16 x i16>*
  %5937 = load <16 x i16>, <16 x i16>* %5936, align 2, !tbaa !399
  %5938 = getelementptr inbounds i16, i16* %5934, i64 -16
  %5939 = bitcast i16* %5938 to <16 x i16>*
  %5940 = load <16 x i16>, <16 x i16>* %5939, align 2, !tbaa !399
  %5941 = zext i32 %.pre-phi3528 to i64
  %5942 = mul nsw i64 %5941, %116
  %5943 = add nsw i64 %5942, %94
  %5944 = getelementptr inbounds i16, i16* %blur_x, i64 %5943
  %5945 = getelementptr inbounds i16, i16* %5944, i64 -32
  %5946 = bitcast i16* %5945 to <16 x i16>*
  %5947 = load <16 x i16>, <16 x i16>* %5946, align 2, !tbaa !399
  %5948 = getelementptr inbounds i16, i16* %5944, i64 -16
  %5949 = bitcast i16* %5948 to <16 x i16>*
  %5950 = load <16 x i16>, <16 x i16>* %5949, align 2, !tbaa !399
  %5951 = zext i32 %.pre-phi to i64
  %5952 = mul nsw i64 %5951, %116
  %5953 = add nsw i64 %5952, %94
  %5954 = getelementptr inbounds i16, i16* %blur_x, i64 %5953
  %5955 = getelementptr inbounds i16, i16* %5954, i64 -32
  %5956 = bitcast i16* %5955 to <16 x i16>*
  %5957 = load <16 x i16>, <16 x i16>* %5956, align 2, !tbaa !399
  %5958 = getelementptr inbounds i16, i16* %5954, i64 -16
  %5959 = bitcast i16* %5958 to <16 x i16>*
  %5960 = load <16 x i16>, <16 x i16>* %5959, align 2, !tbaa !399
  %5961 = zext i32 %.pre-phi3508 to i64
  %5962 = mul nsw i64 %5961, %116
  %5963 = add nsw i64 %5962, %94
  %5964 = getelementptr inbounds i16, i16* %blur_x, i64 %5963
  %5965 = getelementptr inbounds i16, i16* %5964, i64 -32
  %5966 = bitcast i16* %5965 to <16 x i16>*
  %5967 = load <16 x i16>, <16 x i16>* %5966, align 2, !tbaa !399
  %5968 = getelementptr inbounds i16, i16* %5964, i64 -16
  %5969 = bitcast i16* %5968 to <16 x i16>*
  %5970 = load <16 x i16>, <16 x i16>* %5969, align 2, !tbaa !399
  %5971 = zext i32 %.pre-phi3512 to i64
  %5972 = mul nsw i64 %5971, %116
  %5973 = add nsw i64 %5972, %94
  %5974 = getelementptr inbounds i16, i16* %blur_x, i64 %5973
  %5975 = getelementptr inbounds i16, i16* %5974, i64 -32
  %5976 = bitcast i16* %5975 to <16 x i16>*
  %5977 = load <16 x i16>, <16 x i16>* %5976, align 2, !tbaa !399
  %5978 = getelementptr inbounds i16, i16* %5974, i64 -16
  %5979 = bitcast i16* %5978 to <16 x i16>*
  %5980 = load <16 x i16>, <16 x i16>* %5979, align 2, !tbaa !399
  %5981 = mul nsw i64 %5922, %116
  %5982 = add nsw i64 %5981, %94
  %5983 = getelementptr inbounds i16, i16* %blur_x, i64 %5982
  %5984 = getelementptr inbounds i16, i16* %5983, i64 -32
  %5985 = bitcast i16* %5984 to <16 x i16>*
  %5986 = load <16 x i16>, <16 x i16>* %5985, align 2, !tbaa !399
  %5987 = getelementptr inbounds i16, i16* %5983, i64 -16
  %5988 = bitcast i16* %5987 to <16 x i16>*
  %5989 = load <16 x i16>, <16 x i16>* %5988, align 2, !tbaa !399
  %5990 = zext i32 %.pre-phi3516 to i64
  %5991 = mul nsw i64 %5990, %116
  %5992 = add nsw i64 %5991, %94
  %5993 = getelementptr inbounds i16, i16* %blur_x, i64 %5992
  %5994 = getelementptr inbounds i16, i16* %5993, i64 -32
  %5995 = bitcast i16* %5994 to <16 x i16>*
  %5996 = load <16 x i16>, <16 x i16>* %5995, align 2, !tbaa !399
  %5997 = getelementptr inbounds i16, i16* %5993, i64 -16
  %5998 = bitcast i16* %5997 to <16 x i16>*
  %5999 = load <16 x i16>, <16 x i16>* %5998, align 2, !tbaa !399
  %6000 = add <16 x i16> %5947, %5937
  %6001 = add <16 x i16> %6000, %5957
  %6002 = add <16 x i16> %6001, %5967
  %6003 = add <16 x i16> %6002, %5977
  %6004 = add <16 x i16> %6003, %5986
  %6005 = add <16 x i16> %6004, %5996
  %6006 = add <16 x i16> %5950, %5940
  %6007 = add <16 x i16> %6006, %5960
  %6008 = add <16 x i16> %6007, %5970
  %6009 = add <16 x i16> %6008, %5980
  %6010 = add <16 x i16> %6009, %5989
  %6011 = add <16 x i16> %6010, %5999
  %6012 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6005, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6013 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6011, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6014 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6012, <16 x i16> %6005)
  %6015 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6013, <16 x i16> %6011)
  %6016 = shufflevector <16 x i16> %6014, <16 x i16> %6015, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6017 = lshr <32 x i16> %6016, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6018 = shufflevector <32 x i16> %6017, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6019 = sext i32 %a26 to i64
  %6020 = add nsw i64 %6019, 6
  %6021 = mul nsw i64 %6020, %117
  %6022 = add nsw i64 %119, %6021
  %6023 = getelementptr inbounds i16, i16* %66, i64 %6022
  %6024 = getelementptr inbounds i16, i16* %6023, i64 -32
  %6025 = bitcast i16* %6024 to <16 x i16>*
  store <16 x i16> %6018, <16 x i16>* %6025, align 2, !tbaa !401
  %6026 = shufflevector <32 x i16> %6017, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6027 = getelementptr inbounds i16, i16* %6023, i64 -16
  %6028 = bitcast i16* %6027 to <16 x i16>*
  store <16 x i16> %6026, <16 x i16>* %6028, align 2, !tbaa !401
  br label %after_bb261

"for blur_y.s0.x.x.rebased266":                   ; preds = %"for blur_y.s0.x.x.rebased266.preheader", %"consume blur_x273"
  %indvars.iv3297 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased266.preheader" ], [ %indvars.iv.next3298, %"consume blur_x273" ]
  %6029 = add nsw i64 %indvars.iv3297, %101
  %6030 = icmp slt i64 %6029, 1
  %6031 = trunc i64 %6029 to i32
  %6032 = shl nsw i32 %6031, 5
  %6033 = icmp sgt i32 %4, %6032
  %6034 = or i1 %6030, %6033
  br i1 %6034, label %"produce blur_x272", label %"for blur_y.s0.x.x.rebased266.consume blur_x273_crit_edge"

"for blur_y.s0.x.x.rebased266.consume blur_x273_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased266"
  %.pre3545 = shl nsw i64 %6029, 5
  br label %"consume blur_x273"

"end for blur_y.s0.x.x.rebased267":               ; preds = %"consume blur_x273", %after_bb261
  br i1 %102, label %"for blur_y.s0.x.x.rebased274.preheader", label %"end for blur_y.s0.x.x.rebased275", !prof !386

"for blur_y.s0.x.x.rebased274.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased267"
  %6035 = sext i32 %t1750 to i64
  %6036 = zext i32 %.pre-phi3534 to i64
  %6037 = mul nsw i64 %6036, %116
  %6038 = sub nsw i64 %6037, %96
  %6039 = zext i32 %.pre-phi3528 to i64
  %6040 = mul nsw i64 %6039, %116
  %6041 = sub nsw i64 %6040, %96
  %6042 = zext i32 %.pre-phi to i64
  %6043 = mul nsw i64 %6042, %116
  %6044 = sub nsw i64 %6043, %96
  %6045 = zext i32 %.pre-phi3508 to i64
  %6046 = mul nsw i64 %6045, %116
  %6047 = sub nsw i64 %6046, %96
  %6048 = zext i32 %.pre-phi3512 to i64
  %6049 = mul nsw i64 %6048, %116
  %6050 = sub nsw i64 %6049, %96
  %6051 = zext i32 %.pre-phi3520 to i64
  %6052 = mul nsw i64 %6051, %116
  %6053 = sub nsw i64 %6052, %96
  %6054 = zext i32 %.pre-phi3516 to i64
  %6055 = mul nsw i64 %6054, %116
  %6056 = sub nsw i64 %6055, %96
  %6057 = sext i32 %a26 to i64
  %6058 = add nsw i64 %6057, 6
  %6059 = mul nsw i64 %6058, %117
  %6060 = add nsw i64 %6059, %120
  br label %"for blur_y.s0.x.x.rebased274"

"produce blur_x272":                              ; preds = %"for blur_y.s0.x.x.rebased266"
  %t848 = add nsw i32 %6032, %t1857
  %6061 = sext i32 %t848 to i64
  %6062 = getelementptr inbounds i16, i16* %read_input, i64 %6061
  %6063 = getelementptr inbounds i16, i16* %6062, i64 1
  %6064 = bitcast i16* %6063 to <16 x i16>*
  %6065 = load <16 x i16>, <16 x i16>* %6064, align 2, !tbaa !396
  %6066 = getelementptr inbounds i16, i16* %6062, i64 17
  %6067 = bitcast i16* %6066 to <16 x i16>*
  %6068 = load <16 x i16>, <16 x i16>* %6067, align 2, !tbaa !396
  %6069 = bitcast i16* %6062 to <16 x i16>*
  %6070 = load <16 x i16>, <16 x i16>* %6069, align 2, !tbaa !396
  %6071 = getelementptr inbounds i16, i16* %6062, i64 16
  %6072 = bitcast i16* %6071 to <16 x i16>*
  %6073 = load <16 x i16>, <16 x i16>* %6072, align 2, !tbaa !396
  %6074 = getelementptr inbounds i16, i16* %6062, i64 2
  %6075 = bitcast i16* %6074 to <16 x i16>*
  %6076 = load <16 x i16>, <16 x i16>* %6075, align 2, !tbaa !396
  %6077 = getelementptr inbounds i16, i16* %6062, i64 18
  %6078 = bitcast i16* %6077 to <16 x i16>*
  %6079 = load <16 x i16>, <16 x i16>* %6078, align 2, !tbaa !396
  %6080 = getelementptr inbounds i16, i16* %6062, i64 3
  %6081 = bitcast i16* %6080 to <16 x i16>*
  %6082 = load <16 x i16>, <16 x i16>* %6081, align 2, !tbaa !396
  %6083 = getelementptr inbounds i16, i16* %6062, i64 19
  %6084 = bitcast i16* %6083 to <16 x i16>*
  %6085 = load <16 x i16>, <16 x i16>* %6084, align 2, !tbaa !396
  %6086 = getelementptr inbounds i16, i16* %6062, i64 4
  %6087 = bitcast i16* %6086 to <16 x i16>*
  %6088 = load <16 x i16>, <16 x i16>* %6087, align 2, !tbaa !396
  %6089 = getelementptr inbounds i16, i16* %6062, i64 20
  %6090 = bitcast i16* %6089 to <16 x i16>*
  %6091 = load <16 x i16>, <16 x i16>* %6090, align 2, !tbaa !396
  %6092 = getelementptr inbounds i16, i16* %6062, i64 6
  %6093 = bitcast i16* %6092 to <16 x i16>*
  %6094 = load <16 x i16>, <16 x i16>* %6093, align 2, !tbaa !396
  %6095 = getelementptr inbounds i16, i16* %6062, i64 22
  %6096 = bitcast i16* %6095 to <16 x i16>*
  %6097 = load <16 x i16>, <16 x i16>* %6096, align 2, !tbaa !396
  %6098 = getelementptr inbounds i16, i16* %6062, i64 5
  %6099 = bitcast i16* %6098 to <16 x i16>*
  %6100 = load <16 x i16>, <16 x i16>* %6099, align 2, !tbaa !396
  %6101 = getelementptr inbounds i16, i16* %6062, i64 21
  %6102 = bitcast i16* %6101 to <16 x i16>*
  %6103 = load <16 x i16>, <16 x i16>* %6102, align 2, !tbaa !396
  %6104 = add <16 x i16> %6070, %6065
  %6105 = add <16 x i16> %6104, %6076
  %6106 = add <16 x i16> %6105, %6082
  %6107 = add <16 x i16> %6106, %6088
  %6108 = add <16 x i16> %6107, %6094
  %6109 = add <16 x i16> %6108, %6100
  %6110 = add <16 x i16> %6073, %6068
  %6111 = add <16 x i16> %6110, %6079
  %6112 = add <16 x i16> %6111, %6085
  %6113 = add <16 x i16> %6112, %6091
  %6114 = add <16 x i16> %6113, %6097
  %6115 = add <16 x i16> %6114, %6103
  %6116 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6109, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6117 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6115, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6118 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6116, <16 x i16> %6109)
  %6119 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6117, <16 x i16> %6115)
  %6120 = shufflevector <16 x i16> %6118, <16 x i16> %6119, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6121 = lshr <32 x i16> %6120, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6122 = shufflevector <32 x i16> %6121, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6123 = shl nsw i64 %6029, 5
  %6124 = add nsw i64 %6123, %5834
  %6125 = getelementptr inbounds i16, i16* %blur_x, i64 %6124
  %6126 = bitcast i16* %6125 to <16 x i16>*
  store <16 x i16> %6122, <16 x i16>* %6126, align 2, !tbaa !399
  %6127 = shufflevector <32 x i16> %6121, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6128 = getelementptr inbounds i16, i16* %6125, i64 16
  %6129 = bitcast i16* %6128 to <16 x i16>*
  store <16 x i16> %6127, <16 x i16>* %6129, align 2, !tbaa !399
  br label %"consume blur_x273"

"consume blur_x273":                              ; preds = %"for blur_y.s0.x.x.rebased266.consume blur_x273_crit_edge", %"produce blur_x272"
  %.pre-phi3546 = phi i64 [ %.pre3545, %"for blur_y.s0.x.x.rebased266.consume blur_x273_crit_edge" ], [ %6123, %"produce blur_x272" ]
  %6130 = add nsw i64 %5837, %.pre-phi3546
  %6131 = getelementptr inbounds i16, i16* %blur_x, i64 %6130
  %6132 = bitcast i16* %6131 to <16 x i16>*
  %6133 = load <16 x i16>, <16 x i16>* %6132, align 2, !tbaa !399
  %6134 = getelementptr inbounds i16, i16* %6131, i64 16
  %6135 = bitcast i16* %6134 to <16 x i16>*
  %6136 = load <16 x i16>, <16 x i16>* %6135, align 2, !tbaa !399
  %6137 = add nsw i64 %5840, %.pre-phi3546
  %6138 = getelementptr inbounds i16, i16* %blur_x, i64 %6137
  %6139 = bitcast i16* %6138 to <16 x i16>*
  %6140 = load <16 x i16>, <16 x i16>* %6139, align 2, !tbaa !399
  %6141 = getelementptr inbounds i16, i16* %6138, i64 16
  %6142 = bitcast i16* %6141 to <16 x i16>*
  %6143 = load <16 x i16>, <16 x i16>* %6142, align 2, !tbaa !399
  %6144 = add nsw i64 %5843, %.pre-phi3546
  %6145 = getelementptr inbounds i16, i16* %blur_x, i64 %6144
  %6146 = bitcast i16* %6145 to <16 x i16>*
  %6147 = load <16 x i16>, <16 x i16>* %6146, align 2, !tbaa !399
  %6148 = getelementptr inbounds i16, i16* %6145, i64 16
  %6149 = bitcast i16* %6148 to <16 x i16>*
  %6150 = load <16 x i16>, <16 x i16>* %6149, align 2, !tbaa !399
  %6151 = add nsw i64 %5846, %.pre-phi3546
  %6152 = getelementptr inbounds i16, i16* %blur_x, i64 %6151
  %6153 = bitcast i16* %6152 to <16 x i16>*
  %6154 = load <16 x i16>, <16 x i16>* %6153, align 2, !tbaa !399
  %6155 = getelementptr inbounds i16, i16* %6152, i64 16
  %6156 = bitcast i16* %6155 to <16 x i16>*
  %6157 = load <16 x i16>, <16 x i16>* %6156, align 2, !tbaa !399
  %6158 = add nsw i64 %5849, %.pre-phi3546
  %6159 = getelementptr inbounds i16, i16* %blur_x, i64 %6158
  %6160 = bitcast i16* %6159 to <16 x i16>*
  %6161 = load <16 x i16>, <16 x i16>* %6160, align 2, !tbaa !399
  %6162 = getelementptr inbounds i16, i16* %6159, i64 16
  %6163 = bitcast i16* %6162 to <16 x i16>*
  %6164 = load <16 x i16>, <16 x i16>* %6163, align 2, !tbaa !399
  %6165 = add nsw i64 %5852, %.pre-phi3546
  %6166 = getelementptr inbounds i16, i16* %blur_x, i64 %6165
  %6167 = bitcast i16* %6166 to <16 x i16>*
  %6168 = load <16 x i16>, <16 x i16>* %6167, align 2, !tbaa !399
  %6169 = getelementptr inbounds i16, i16* %6166, i64 16
  %6170 = bitcast i16* %6169 to <16 x i16>*
  %6171 = load <16 x i16>, <16 x i16>* %6170, align 2, !tbaa !399
  %6172 = add nsw i64 %5855, %.pre-phi3546
  %6173 = getelementptr inbounds i16, i16* %blur_x, i64 %6172
  %6174 = bitcast i16* %6173 to <16 x i16>*
  %6175 = load <16 x i16>, <16 x i16>* %6174, align 2, !tbaa !399
  %6176 = getelementptr inbounds i16, i16* %6173, i64 16
  %6177 = bitcast i16* %6176 to <16 x i16>*
  %6178 = load <16 x i16>, <16 x i16>* %6177, align 2, !tbaa !399
  %6179 = add <16 x i16> %6140, %6133
  %6180 = add <16 x i16> %6179, %6147
  %6181 = add <16 x i16> %6180, %6154
  %6182 = add <16 x i16> %6181, %6161
  %6183 = add <16 x i16> %6182, %6168
  %6184 = add <16 x i16> %6183, %6175
  %6185 = add <16 x i16> %6143, %6136
  %6186 = add <16 x i16> %6185, %6150
  %6187 = add <16 x i16> %6186, %6157
  %6188 = add <16 x i16> %6187, %6164
  %6189 = add <16 x i16> %6188, %6171
  %6190 = add <16 x i16> %6189, %6178
  %6191 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6184, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6192 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6190, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6193 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6191, <16 x i16> %6184)
  %6194 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6192, <16 x i16> %6190)
  %6195 = shufflevector <16 x i16> %6193, <16 x i16> %6194, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6196 = lshr <32 x i16> %6195, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6197 = shufflevector <32 x i16> %6196, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6198 = add nsw i64 %5859, %.pre-phi3546
  %6199 = getelementptr inbounds i16, i16* %66, i64 %6198
  %6200 = bitcast i16* %6199 to <16 x i16>*
  store <16 x i16> %6197, <16 x i16>* %6200, align 2, !tbaa !401
  %6201 = shufflevector <32 x i16> %6196, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6202 = getelementptr inbounds i16, i16* %6199, i64 16
  %6203 = bitcast i16* %6202 to <16 x i16>*
  store <16 x i16> %6201, <16 x i16>* %6203, align 2, !tbaa !401
  %indvars.iv.next3298 = add nuw nsw i64 %indvars.iv3297, 1
  %.not2788 = icmp eq i64 %indvars.iv.next3298, %188
  br i1 %.not2788, label %"end for blur_y.s0.x.x.rebased267", label %"for blur_y.s0.x.x.rebased266"

"for blur_y.s0.x.x.rebased274":                   ; preds = %"for blur_y.s0.x.x.rebased274.preheader", %"consume blur_x282"
  %blur_y.s0.x.x.rebased276 = phi i32 [ %6354, %"consume blur_x282" ], [ 0, %"for blur_y.s0.x.x.rebased274.preheader" ]
  %6204 = add nsw i32 %blur_y.s0.x.x.rebased276, %t1670
  %a161 = shl nsw i32 %6204, 5
  %6205 = icmp sgt i32 %a14, %a161
  %b167 = select i1 %6205, i32 %a161, i32 %a14
  %6206 = icmp slt i32 %6204, 1
  %6207 = icmp sgt i32 %4, %a161
  %6208 = or i1 %6206, %6207
  br i1 %6208, label %"produce blur_x280", label %"consume blur_x282"

"end for blur_y.s0.x.x.rebased275":               ; preds = %"consume blur_x282", %"end for blur_y.s0.x.x.rebased267"
  br i1 %34, label %"produce blur_x286", label %after_bb283

"produce blur_x280":                              ; preds = %"for blur_y.s0.x.x.rebased274"
  %6209 = icmp slt i32 %b167, %4
  %blur_x.s0.x.v1.base.s281 = select i1 %6209, i32 %b167, i32 %4
  %t853 = add nsw i32 %blur_x.s0.x.v1.base.s281, %t1857
  %6210 = sext i32 %t853 to i64
  %6211 = getelementptr inbounds i16, i16* %read_input, i64 %6210
  %6212 = getelementptr inbounds i16, i16* %6211, i64 1
  %6213 = bitcast i16* %6212 to <16 x i16>*
  %6214 = load <16 x i16>, <16 x i16>* %6213, align 2, !tbaa !396
  %6215 = getelementptr inbounds i16, i16* %6211, i64 17
  %6216 = bitcast i16* %6215 to <16 x i16>*
  %6217 = load <16 x i16>, <16 x i16>* %6216, align 2, !tbaa !396
  %6218 = bitcast i16* %6211 to <16 x i16>*
  %6219 = load <16 x i16>, <16 x i16>* %6218, align 2, !tbaa !396
  %6220 = getelementptr inbounds i16, i16* %6211, i64 16
  %6221 = bitcast i16* %6220 to <16 x i16>*
  %6222 = load <16 x i16>, <16 x i16>* %6221, align 2, !tbaa !396
  %6223 = getelementptr inbounds i16, i16* %6211, i64 2
  %6224 = bitcast i16* %6223 to <16 x i16>*
  %6225 = load <16 x i16>, <16 x i16>* %6224, align 2, !tbaa !396
  %6226 = getelementptr inbounds i16, i16* %6211, i64 18
  %6227 = bitcast i16* %6226 to <16 x i16>*
  %6228 = load <16 x i16>, <16 x i16>* %6227, align 2, !tbaa !396
  %6229 = getelementptr inbounds i16, i16* %6211, i64 3
  %6230 = bitcast i16* %6229 to <16 x i16>*
  %6231 = load <16 x i16>, <16 x i16>* %6230, align 2, !tbaa !396
  %6232 = getelementptr inbounds i16, i16* %6211, i64 19
  %6233 = bitcast i16* %6232 to <16 x i16>*
  %6234 = load <16 x i16>, <16 x i16>* %6233, align 2, !tbaa !396
  %6235 = getelementptr inbounds i16, i16* %6211, i64 4
  %6236 = bitcast i16* %6235 to <16 x i16>*
  %6237 = load <16 x i16>, <16 x i16>* %6236, align 2, !tbaa !396
  %6238 = getelementptr inbounds i16, i16* %6211, i64 20
  %6239 = bitcast i16* %6238 to <16 x i16>*
  %6240 = load <16 x i16>, <16 x i16>* %6239, align 2, !tbaa !396
  %6241 = getelementptr inbounds i16, i16* %6211, i64 6
  %6242 = bitcast i16* %6241 to <16 x i16>*
  %6243 = load <16 x i16>, <16 x i16>* %6242, align 2, !tbaa !396
  %6244 = getelementptr inbounds i16, i16* %6211, i64 22
  %6245 = bitcast i16* %6244 to <16 x i16>*
  %6246 = load <16 x i16>, <16 x i16>* %6245, align 2, !tbaa !396
  %6247 = getelementptr inbounds i16, i16* %6211, i64 5
  %6248 = bitcast i16* %6247 to <16 x i16>*
  %6249 = load <16 x i16>, <16 x i16>* %6248, align 2, !tbaa !396
  %6250 = getelementptr inbounds i16, i16* %6211, i64 21
  %6251 = bitcast i16* %6250 to <16 x i16>*
  %6252 = load <16 x i16>, <16 x i16>* %6251, align 2, !tbaa !396
  %6253 = add <16 x i16> %6219, %6214
  %6254 = add <16 x i16> %6253, %6225
  %6255 = add <16 x i16> %6254, %6231
  %6256 = add <16 x i16> %6255, %6237
  %6257 = add <16 x i16> %6256, %6243
  %6258 = add <16 x i16> %6257, %6249
  %6259 = add <16 x i16> %6222, %6217
  %6260 = add <16 x i16> %6259, %6228
  %6261 = add <16 x i16> %6260, %6234
  %6262 = add <16 x i16> %6261, %6240
  %6263 = add <16 x i16> %6262, %6246
  %6264 = add <16 x i16> %6263, %6252
  %6265 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6258, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6266 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6264, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6267 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6265, <16 x i16> %6258)
  %6268 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6266, <16 x i16> %6264)
  %6269 = shufflevector <16 x i16> %6267, <16 x i16> %6268, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6270 = lshr <32 x i16> %6269, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6271 = shufflevector <32 x i16> %6270, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6272 = sext i32 %blur_x.s0.x.v1.base.s281 to i64
  %6273 = add nsw i64 %6272, %6035
  %6274 = getelementptr inbounds i16, i16* %blur_x, i64 %6273
  %6275 = bitcast i16* %6274 to <16 x i16>*
  store <16 x i16> %6271, <16 x i16>* %6275, align 2, !tbaa !399
  %6276 = shufflevector <32 x i16> %6270, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6277 = getelementptr inbounds i16, i16* %6274, i64 16
  %6278 = bitcast i16* %6277 to <16 x i16>*
  store <16 x i16> %6276, <16 x i16>* %6278, align 2, !tbaa !399
  br label %"consume blur_x282"

"consume blur_x282":                              ; preds = %"for blur_y.s0.x.x.rebased274", %"produce blur_x280"
  %6279 = sext i32 %b167 to i64
  %6280 = add nsw i64 %6038, %6279
  %6281 = getelementptr inbounds i16, i16* %blur_x, i64 %6280
  %6282 = bitcast i16* %6281 to <16 x i16>*
  %6283 = load <16 x i16>, <16 x i16>* %6282, align 2, !tbaa !399
  %6284 = getelementptr inbounds i16, i16* %6281, i64 16
  %6285 = bitcast i16* %6284 to <16 x i16>*
  %6286 = load <16 x i16>, <16 x i16>* %6285, align 2, !tbaa !399
  %6287 = add nsw i64 %6041, %6279
  %6288 = getelementptr inbounds i16, i16* %blur_x, i64 %6287
  %6289 = bitcast i16* %6288 to <16 x i16>*
  %6290 = load <16 x i16>, <16 x i16>* %6289, align 2, !tbaa !399
  %6291 = getelementptr inbounds i16, i16* %6288, i64 16
  %6292 = bitcast i16* %6291 to <16 x i16>*
  %6293 = load <16 x i16>, <16 x i16>* %6292, align 2, !tbaa !399
  %6294 = add nsw i64 %6044, %6279
  %6295 = getelementptr inbounds i16, i16* %blur_x, i64 %6294
  %6296 = bitcast i16* %6295 to <16 x i16>*
  %6297 = load <16 x i16>, <16 x i16>* %6296, align 2, !tbaa !399
  %6298 = getelementptr inbounds i16, i16* %6295, i64 16
  %6299 = bitcast i16* %6298 to <16 x i16>*
  %6300 = load <16 x i16>, <16 x i16>* %6299, align 2, !tbaa !399
  %6301 = add nsw i64 %6047, %6279
  %6302 = getelementptr inbounds i16, i16* %blur_x, i64 %6301
  %6303 = bitcast i16* %6302 to <16 x i16>*
  %6304 = load <16 x i16>, <16 x i16>* %6303, align 2, !tbaa !399
  %6305 = getelementptr inbounds i16, i16* %6302, i64 16
  %6306 = bitcast i16* %6305 to <16 x i16>*
  %6307 = load <16 x i16>, <16 x i16>* %6306, align 2, !tbaa !399
  %6308 = add nsw i64 %6050, %6279
  %6309 = getelementptr inbounds i16, i16* %blur_x, i64 %6308
  %6310 = bitcast i16* %6309 to <16 x i16>*
  %6311 = load <16 x i16>, <16 x i16>* %6310, align 2, !tbaa !399
  %6312 = getelementptr inbounds i16, i16* %6309, i64 16
  %6313 = bitcast i16* %6312 to <16 x i16>*
  %6314 = load <16 x i16>, <16 x i16>* %6313, align 2, !tbaa !399
  %6315 = add nsw i64 %6053, %6279
  %6316 = getelementptr inbounds i16, i16* %blur_x, i64 %6315
  %6317 = bitcast i16* %6316 to <16 x i16>*
  %6318 = load <16 x i16>, <16 x i16>* %6317, align 2, !tbaa !399
  %6319 = getelementptr inbounds i16, i16* %6316, i64 16
  %6320 = bitcast i16* %6319 to <16 x i16>*
  %6321 = load <16 x i16>, <16 x i16>* %6320, align 2, !tbaa !399
  %6322 = add nsw i64 %6056, %6279
  %6323 = getelementptr inbounds i16, i16* %blur_x, i64 %6322
  %6324 = bitcast i16* %6323 to <16 x i16>*
  %6325 = load <16 x i16>, <16 x i16>* %6324, align 2, !tbaa !399
  %6326 = getelementptr inbounds i16, i16* %6323, i64 16
  %6327 = bitcast i16* %6326 to <16 x i16>*
  %6328 = load <16 x i16>, <16 x i16>* %6327, align 2, !tbaa !399
  %6329 = add <16 x i16> %6290, %6283
  %6330 = add <16 x i16> %6329, %6297
  %6331 = add <16 x i16> %6330, %6304
  %6332 = add <16 x i16> %6331, %6311
  %6333 = add <16 x i16> %6332, %6318
  %6334 = add <16 x i16> %6333, %6325
  %6335 = add <16 x i16> %6293, %6286
  %6336 = add <16 x i16> %6335, %6300
  %6337 = add <16 x i16> %6336, %6307
  %6338 = add <16 x i16> %6337, %6314
  %6339 = add <16 x i16> %6338, %6321
  %6340 = add <16 x i16> %6339, %6328
  %6341 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6334, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6342 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6340, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6343 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6341, <16 x i16> %6334)
  %6344 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6342, <16 x i16> %6340)
  %6345 = shufflevector <16 x i16> %6343, <16 x i16> %6344, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6346 = lshr <32 x i16> %6345, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6347 = shufflevector <32 x i16> %6346, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6348 = add nsw i64 %6060, %6279
  %6349 = getelementptr inbounds i16, i16* %66, i64 %6348
  %6350 = bitcast i16* %6349 to <16 x i16>*
  store <16 x i16> %6347, <16 x i16>* %6350, align 2, !tbaa !401
  %6351 = shufflevector <32 x i16> %6346, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6352 = getelementptr inbounds i16, i16* %6349, i64 16
  %6353 = bitcast i16* %6352 to <16 x i16>*
  store <16 x i16> %6351, <16 x i16>* %6353, align 2, !tbaa !401
  %6354 = add nuw nsw i32 %blur_y.s0.x.x.rebased276, 1
  %.not2787 = icmp eq i32 %6354, %t1727
  br i1 %.not2787, label %"end for blur_y.s0.x.x.rebased275", label %"for blur_y.s0.x.x.rebased274"

after_bb283:                                      ; preds = %"end for blur_y.s0.x.x.rebased275", %"produce blur_x286"
  br i1 %100, label %"for blur_y.s0.x.x.rebased288.preheader", label %"end for blur_y.s0.x.x.rebased289", !prof !386

"for blur_y.s0.x.x.rebased288.preheader":         ; preds = %after_bb283
  %6355 = sext i32 %t1756 to i64
  %6356 = zext i32 %.pre-phi to i64
  %6357 = mul nsw i64 %6356, %116
  %6358 = sub nsw i64 %6357, %96
  %6359 = zext i32 %.pre-phi3534 to i64
  %6360 = mul nsw i64 %6359, %116
  %6361 = sub nsw i64 %6360, %96
  %6362 = zext i32 %.pre-phi3508 to i64
  %6363 = mul nsw i64 %6362, %116
  %6364 = sub nsw i64 %6363, %96
  %6365 = zext i32 %.pre-phi3512 to i64
  %6366 = mul nsw i64 %6365, %116
  %6367 = sub nsw i64 %6366, %96
  %6368 = zext i32 %.pre-phi3516 to i64
  %6369 = mul nsw i64 %6368, %116
  %6370 = sub nsw i64 %6369, %96
  %6371 = zext i32 %.pre-phi3524 to i64
  %6372 = mul nsw i64 %6371, %116
  %6373 = sub nsw i64 %6372, %96
  %6374 = zext i32 %.pre-phi3520 to i64
  %6375 = mul nsw i64 %6374, %116
  %6376 = sub nsw i64 %6375, %96
  %6377 = sext i32 %a26 to i64
  %6378 = add nsw i64 %6377, 7
  %6379 = mul nsw i64 %6378, %117
  %6380 = add nsw i64 %6379, %120
  br label %"for blur_y.s0.x.x.rebased288"

"produce blur_x286":                              ; preds = %"end for blur_y.s0.x.x.rebased275"
  %6381 = getelementptr inbounds i16, i16* %read_input, i64 %133
  %6382 = getelementptr inbounds i16, i16* %6381, i64 -31
  %6383 = bitcast i16* %6382 to <16 x i16>*
  %6384 = load <16 x i16>, <16 x i16>* %6383, align 2, !tbaa !396
  %6385 = getelementptr inbounds i16, i16* %6381, i64 -15
  %6386 = bitcast i16* %6385 to <16 x i16>*
  %6387 = load <16 x i16>, <16 x i16>* %6386, align 2, !tbaa !396
  %6388 = getelementptr inbounds i16, i16* %6381, i64 -32
  %6389 = bitcast i16* %6388 to <16 x i16>*
  %6390 = load <16 x i16>, <16 x i16>* %6389, align 2, !tbaa !396
  %6391 = getelementptr inbounds i16, i16* %6381, i64 -16
  %6392 = bitcast i16* %6391 to <16 x i16>*
  %6393 = load <16 x i16>, <16 x i16>* %6392, align 2, !tbaa !396
  %6394 = getelementptr inbounds i16, i16* %6381, i64 -30
  %6395 = bitcast i16* %6394 to <16 x i16>*
  %6396 = load <16 x i16>, <16 x i16>* %6395, align 2, !tbaa !396
  %6397 = getelementptr inbounds i16, i16* %6381, i64 -14
  %6398 = bitcast i16* %6397 to <16 x i16>*
  %6399 = load <16 x i16>, <16 x i16>* %6398, align 2, !tbaa !396
  %6400 = getelementptr inbounds i16, i16* %6381, i64 -29
  %6401 = bitcast i16* %6400 to <16 x i16>*
  %6402 = load <16 x i16>, <16 x i16>* %6401, align 2, !tbaa !396
  %6403 = getelementptr inbounds i16, i16* %6381, i64 -13
  %6404 = bitcast i16* %6403 to <16 x i16>*
  %6405 = load <16 x i16>, <16 x i16>* %6404, align 2, !tbaa !396
  %6406 = getelementptr inbounds i16, i16* %6381, i64 -28
  %6407 = bitcast i16* %6406 to <16 x i16>*
  %6408 = load <16 x i16>, <16 x i16>* %6407, align 2, !tbaa !396
  %6409 = getelementptr inbounds i16, i16* %6381, i64 -12
  %6410 = bitcast i16* %6409 to <16 x i16>*
  %6411 = load <16 x i16>, <16 x i16>* %6410, align 2, !tbaa !396
  %6412 = getelementptr inbounds i16, i16* %6381, i64 -26
  %6413 = bitcast i16* %6412 to <16 x i16>*
  %6414 = load <16 x i16>, <16 x i16>* %6413, align 2, !tbaa !396
  %6415 = getelementptr inbounds i16, i16* %6381, i64 -10
  %6416 = bitcast i16* %6415 to <16 x i16>*
  %6417 = load <16 x i16>, <16 x i16>* %6416, align 2, !tbaa !396
  %6418 = getelementptr inbounds i16, i16* %6381, i64 -27
  %6419 = bitcast i16* %6418 to <16 x i16>*
  %6420 = load <16 x i16>, <16 x i16>* %6419, align 2, !tbaa !396
  %6421 = getelementptr inbounds i16, i16* %6381, i64 -11
  %6422 = bitcast i16* %6421 to <16 x i16>*
  %6423 = load <16 x i16>, <16 x i16>* %6422, align 2, !tbaa !396
  %6424 = add <16 x i16> %6390, %6384
  %6425 = add <16 x i16> %6424, %6396
  %6426 = add <16 x i16> %6425, %6402
  %6427 = add <16 x i16> %6426, %6408
  %6428 = add <16 x i16> %6427, %6414
  %6429 = add <16 x i16> %6428, %6420
  %6430 = add <16 x i16> %6393, %6387
  %6431 = add <16 x i16> %6430, %6399
  %6432 = add <16 x i16> %6431, %6405
  %6433 = add <16 x i16> %6432, %6411
  %6434 = add <16 x i16> %6433, %6417
  %6435 = add <16 x i16> %6434, %6423
  %6436 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6429, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6437 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6435, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6438 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6436, <16 x i16> %6429)
  %6439 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6437, <16 x i16> %6435)
  %6440 = shufflevector <16 x i16> %6438, <16 x i16> %6439, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6441 = lshr <32 x i16> %6440, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6442 = shufflevector <32 x i16> %6441, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6443 = zext i32 %.pre-phi3524 to i64
  %6444 = mul nsw i64 %97, %6443
  %6445 = add nsw i64 %99, %6444
  %6446 = getelementptr inbounds i16, i16* %blur_x, i64 %6445
  %6447 = getelementptr inbounds i16, i16* %6446, i64 -32
  %6448 = bitcast i16* %6447 to <16 x i16>*
  store <16 x i16> %6442, <16 x i16>* %6448, align 2, !tbaa !399
  %6449 = shufflevector <32 x i16> %6441, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6450 = getelementptr inbounds i16, i16* %6446, i64 -16
  %6451 = bitcast i16* %6450 to <16 x i16>*
  store <16 x i16> %6449, <16 x i16>* %6451, align 2, !tbaa !399
  %6452 = zext i32 %.pre-phi to i64
  %6453 = mul nsw i64 %6452, %116
  %6454 = add nsw i64 %6453, %94
  %6455 = getelementptr inbounds i16, i16* %blur_x, i64 %6454
  %6456 = getelementptr inbounds i16, i16* %6455, i64 -32
  %6457 = bitcast i16* %6456 to <16 x i16>*
  %6458 = load <16 x i16>, <16 x i16>* %6457, align 2, !tbaa !399
  %6459 = getelementptr inbounds i16, i16* %6455, i64 -16
  %6460 = bitcast i16* %6459 to <16 x i16>*
  %6461 = load <16 x i16>, <16 x i16>* %6460, align 2, !tbaa !399
  %6462 = zext i32 %.pre-phi3534 to i64
  %6463 = mul nsw i64 %6462, %116
  %6464 = add nsw i64 %6463, %94
  %6465 = getelementptr inbounds i16, i16* %blur_x, i64 %6464
  %6466 = getelementptr inbounds i16, i16* %6465, i64 -32
  %6467 = bitcast i16* %6466 to <16 x i16>*
  %6468 = load <16 x i16>, <16 x i16>* %6467, align 2, !tbaa !399
  %6469 = getelementptr inbounds i16, i16* %6465, i64 -16
  %6470 = bitcast i16* %6469 to <16 x i16>*
  %6471 = load <16 x i16>, <16 x i16>* %6470, align 2, !tbaa !399
  %6472 = zext i32 %.pre-phi3508 to i64
  %6473 = mul nsw i64 %6472, %116
  %6474 = add nsw i64 %6473, %94
  %6475 = getelementptr inbounds i16, i16* %blur_x, i64 %6474
  %6476 = getelementptr inbounds i16, i16* %6475, i64 -32
  %6477 = bitcast i16* %6476 to <16 x i16>*
  %6478 = load <16 x i16>, <16 x i16>* %6477, align 2, !tbaa !399
  %6479 = getelementptr inbounds i16, i16* %6475, i64 -16
  %6480 = bitcast i16* %6479 to <16 x i16>*
  %6481 = load <16 x i16>, <16 x i16>* %6480, align 2, !tbaa !399
  %6482 = zext i32 %.pre-phi3512 to i64
  %6483 = mul nsw i64 %6482, %116
  %6484 = add nsw i64 %6483, %94
  %6485 = getelementptr inbounds i16, i16* %blur_x, i64 %6484
  %6486 = getelementptr inbounds i16, i16* %6485, i64 -32
  %6487 = bitcast i16* %6486 to <16 x i16>*
  %6488 = load <16 x i16>, <16 x i16>* %6487, align 2, !tbaa !399
  %6489 = getelementptr inbounds i16, i16* %6485, i64 -16
  %6490 = bitcast i16* %6489 to <16 x i16>*
  %6491 = load <16 x i16>, <16 x i16>* %6490, align 2, !tbaa !399
  %6492 = zext i32 %.pre-phi3516 to i64
  %6493 = mul nsw i64 %6492, %116
  %6494 = add nsw i64 %6493, %94
  %6495 = getelementptr inbounds i16, i16* %blur_x, i64 %6494
  %6496 = getelementptr inbounds i16, i16* %6495, i64 -32
  %6497 = bitcast i16* %6496 to <16 x i16>*
  %6498 = load <16 x i16>, <16 x i16>* %6497, align 2, !tbaa !399
  %6499 = getelementptr inbounds i16, i16* %6495, i64 -16
  %6500 = bitcast i16* %6499 to <16 x i16>*
  %6501 = load <16 x i16>, <16 x i16>* %6500, align 2, !tbaa !399
  %6502 = mul nsw i64 %6443, %116
  %6503 = add nsw i64 %6502, %94
  %6504 = getelementptr inbounds i16, i16* %blur_x, i64 %6503
  %6505 = getelementptr inbounds i16, i16* %6504, i64 -32
  %6506 = bitcast i16* %6505 to <16 x i16>*
  %6507 = load <16 x i16>, <16 x i16>* %6506, align 2, !tbaa !399
  %6508 = getelementptr inbounds i16, i16* %6504, i64 -16
  %6509 = bitcast i16* %6508 to <16 x i16>*
  %6510 = load <16 x i16>, <16 x i16>* %6509, align 2, !tbaa !399
  %6511 = zext i32 %.pre-phi3520 to i64
  %6512 = mul nsw i64 %6511, %116
  %6513 = add nsw i64 %6512, %94
  %6514 = getelementptr inbounds i16, i16* %blur_x, i64 %6513
  %6515 = getelementptr inbounds i16, i16* %6514, i64 -32
  %6516 = bitcast i16* %6515 to <16 x i16>*
  %6517 = load <16 x i16>, <16 x i16>* %6516, align 2, !tbaa !399
  %6518 = getelementptr inbounds i16, i16* %6514, i64 -16
  %6519 = bitcast i16* %6518 to <16 x i16>*
  %6520 = load <16 x i16>, <16 x i16>* %6519, align 2, !tbaa !399
  %6521 = add <16 x i16> %6468, %6458
  %6522 = add <16 x i16> %6521, %6478
  %6523 = add <16 x i16> %6522, %6488
  %6524 = add <16 x i16> %6523, %6498
  %6525 = add <16 x i16> %6524, %6507
  %6526 = add <16 x i16> %6525, %6517
  %6527 = add <16 x i16> %6471, %6461
  %6528 = add <16 x i16> %6527, %6481
  %6529 = add <16 x i16> %6528, %6491
  %6530 = add <16 x i16> %6529, %6501
  %6531 = add <16 x i16> %6530, %6510
  %6532 = add <16 x i16> %6531, %6520
  %6533 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6526, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6534 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6532, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6535 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6533, <16 x i16> %6526)
  %6536 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6534, <16 x i16> %6532)
  %6537 = shufflevector <16 x i16> %6535, <16 x i16> %6536, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6538 = lshr <32 x i16> %6537, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6539 = shufflevector <32 x i16> %6538, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6540 = sext i32 %a26 to i64
  %6541 = add nsw i64 %6540, 7
  %6542 = mul nsw i64 %6541, %117
  %6543 = add nsw i64 %119, %6542
  %6544 = getelementptr inbounds i16, i16* %66, i64 %6543
  %6545 = getelementptr inbounds i16, i16* %6544, i64 -32
  %6546 = bitcast i16* %6545 to <16 x i16>*
  store <16 x i16> %6539, <16 x i16>* %6546, align 2, !tbaa !401
  %6547 = shufflevector <32 x i16> %6538, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6548 = getelementptr inbounds i16, i16* %6544, i64 -16
  %6549 = bitcast i16* %6548 to <16 x i16>*
  store <16 x i16> %6547, <16 x i16>* %6549, align 2, !tbaa !401
  br label %after_bb283

"for blur_y.s0.x.x.rebased288":                   ; preds = %"for blur_y.s0.x.x.rebased288.preheader", %"consume blur_x295"
  %indvars.iv3300 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased288.preheader" ], [ %indvars.iv.next3301, %"consume blur_x295" ]
  %6550 = add nsw i64 %indvars.iv3300, %101
  %6551 = icmp slt i64 %6550, 1
  %6552 = trunc i64 %6550 to i32
  %6553 = shl nsw i32 %6552, 5
  %6554 = icmp sgt i32 %4, %6553
  %6555 = or i1 %6551, %6554
  br i1 %6555, label %"produce blur_x294", label %"for blur_y.s0.x.x.rebased288.consume blur_x295_crit_edge"

"for blur_y.s0.x.x.rebased288.consume blur_x295_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased288"
  %.pre3547 = shl nsw i64 %6550, 5
  br label %"consume blur_x295"

"end for blur_y.s0.x.x.rebased289":               ; preds = %"consume blur_x295", %after_bb283
  br i1 %102, label %"for blur_y.s0.x.x.rebased296.preheader", label %"end for blur_y.s0.x.x.rebased297", !prof !386

"for blur_y.s0.x.x.rebased296.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased289"
  %6556 = sext i32 %t1756 to i64
  %6557 = zext i32 %.pre-phi to i64
  %6558 = mul nsw i64 %6557, %116
  %6559 = sub nsw i64 %6558, %96
  %6560 = zext i32 %.pre-phi3534 to i64
  %6561 = mul nsw i64 %6560, %116
  %6562 = sub nsw i64 %6561, %96
  %6563 = zext i32 %.pre-phi3508 to i64
  %6564 = mul nsw i64 %6563, %116
  %6565 = sub nsw i64 %6564, %96
  %6566 = zext i32 %.pre-phi3512 to i64
  %6567 = mul nsw i64 %6566, %116
  %6568 = sub nsw i64 %6567, %96
  %6569 = zext i32 %.pre-phi3516 to i64
  %6570 = mul nsw i64 %6569, %116
  %6571 = sub nsw i64 %6570, %96
  %6572 = zext i32 %.pre-phi3524 to i64
  %6573 = mul nsw i64 %6572, %116
  %6574 = sub nsw i64 %6573, %96
  %6575 = zext i32 %.pre-phi3520 to i64
  %6576 = mul nsw i64 %6575, %116
  %6577 = sub nsw i64 %6576, %96
  %6578 = sext i32 %a26 to i64
  %6579 = add nsw i64 %6578, 7
  %6580 = mul nsw i64 %6579, %117
  %6581 = add nsw i64 %6580, %120
  br label %"for blur_y.s0.x.x.rebased296"

"produce blur_x294":                              ; preds = %"for blur_y.s0.x.x.rebased288"
  %t864 = add nsw i32 %6553, %t1873
  %6582 = sext i32 %t864 to i64
  %6583 = getelementptr inbounds i16, i16* %read_input, i64 %6582
  %6584 = getelementptr inbounds i16, i16* %6583, i64 1
  %6585 = bitcast i16* %6584 to <16 x i16>*
  %6586 = load <16 x i16>, <16 x i16>* %6585, align 2, !tbaa !396
  %6587 = getelementptr inbounds i16, i16* %6583, i64 17
  %6588 = bitcast i16* %6587 to <16 x i16>*
  %6589 = load <16 x i16>, <16 x i16>* %6588, align 2, !tbaa !396
  %6590 = bitcast i16* %6583 to <16 x i16>*
  %6591 = load <16 x i16>, <16 x i16>* %6590, align 2, !tbaa !396
  %6592 = getelementptr inbounds i16, i16* %6583, i64 16
  %6593 = bitcast i16* %6592 to <16 x i16>*
  %6594 = load <16 x i16>, <16 x i16>* %6593, align 2, !tbaa !396
  %6595 = getelementptr inbounds i16, i16* %6583, i64 2
  %6596 = bitcast i16* %6595 to <16 x i16>*
  %6597 = load <16 x i16>, <16 x i16>* %6596, align 2, !tbaa !396
  %6598 = getelementptr inbounds i16, i16* %6583, i64 18
  %6599 = bitcast i16* %6598 to <16 x i16>*
  %6600 = load <16 x i16>, <16 x i16>* %6599, align 2, !tbaa !396
  %6601 = getelementptr inbounds i16, i16* %6583, i64 3
  %6602 = bitcast i16* %6601 to <16 x i16>*
  %6603 = load <16 x i16>, <16 x i16>* %6602, align 2, !tbaa !396
  %6604 = getelementptr inbounds i16, i16* %6583, i64 19
  %6605 = bitcast i16* %6604 to <16 x i16>*
  %6606 = load <16 x i16>, <16 x i16>* %6605, align 2, !tbaa !396
  %6607 = getelementptr inbounds i16, i16* %6583, i64 4
  %6608 = bitcast i16* %6607 to <16 x i16>*
  %6609 = load <16 x i16>, <16 x i16>* %6608, align 2, !tbaa !396
  %6610 = getelementptr inbounds i16, i16* %6583, i64 20
  %6611 = bitcast i16* %6610 to <16 x i16>*
  %6612 = load <16 x i16>, <16 x i16>* %6611, align 2, !tbaa !396
  %6613 = getelementptr inbounds i16, i16* %6583, i64 6
  %6614 = bitcast i16* %6613 to <16 x i16>*
  %6615 = load <16 x i16>, <16 x i16>* %6614, align 2, !tbaa !396
  %6616 = getelementptr inbounds i16, i16* %6583, i64 22
  %6617 = bitcast i16* %6616 to <16 x i16>*
  %6618 = load <16 x i16>, <16 x i16>* %6617, align 2, !tbaa !396
  %6619 = getelementptr inbounds i16, i16* %6583, i64 5
  %6620 = bitcast i16* %6619 to <16 x i16>*
  %6621 = load <16 x i16>, <16 x i16>* %6620, align 2, !tbaa !396
  %6622 = getelementptr inbounds i16, i16* %6583, i64 21
  %6623 = bitcast i16* %6622 to <16 x i16>*
  %6624 = load <16 x i16>, <16 x i16>* %6623, align 2, !tbaa !396
  %6625 = add <16 x i16> %6591, %6586
  %6626 = add <16 x i16> %6625, %6597
  %6627 = add <16 x i16> %6626, %6603
  %6628 = add <16 x i16> %6627, %6609
  %6629 = add <16 x i16> %6628, %6615
  %6630 = add <16 x i16> %6629, %6621
  %6631 = add <16 x i16> %6594, %6589
  %6632 = add <16 x i16> %6631, %6600
  %6633 = add <16 x i16> %6632, %6606
  %6634 = add <16 x i16> %6633, %6612
  %6635 = add <16 x i16> %6634, %6618
  %6636 = add <16 x i16> %6635, %6624
  %6637 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6630, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6638 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6636, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6639 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6637, <16 x i16> %6630)
  %6640 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6638, <16 x i16> %6636)
  %6641 = shufflevector <16 x i16> %6639, <16 x i16> %6640, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6642 = lshr <32 x i16> %6641, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6643 = shufflevector <32 x i16> %6642, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6644 = shl nsw i64 %6550, 5
  %6645 = add nsw i64 %6644, %6355
  %6646 = getelementptr inbounds i16, i16* %blur_x, i64 %6645
  %6647 = bitcast i16* %6646 to <16 x i16>*
  store <16 x i16> %6643, <16 x i16>* %6647, align 2, !tbaa !399
  %6648 = shufflevector <32 x i16> %6642, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6649 = getelementptr inbounds i16, i16* %6646, i64 16
  %6650 = bitcast i16* %6649 to <16 x i16>*
  store <16 x i16> %6648, <16 x i16>* %6650, align 2, !tbaa !399
  br label %"consume blur_x295"

"consume blur_x295":                              ; preds = %"for blur_y.s0.x.x.rebased288.consume blur_x295_crit_edge", %"produce blur_x294"
  %.pre-phi3548 = phi i64 [ %.pre3547, %"for blur_y.s0.x.x.rebased288.consume blur_x295_crit_edge" ], [ %6644, %"produce blur_x294" ]
  %6651 = add nsw i64 %6358, %.pre-phi3548
  %6652 = getelementptr inbounds i16, i16* %blur_x, i64 %6651
  %6653 = bitcast i16* %6652 to <16 x i16>*
  %6654 = load <16 x i16>, <16 x i16>* %6653, align 2, !tbaa !399
  %6655 = getelementptr inbounds i16, i16* %6652, i64 16
  %6656 = bitcast i16* %6655 to <16 x i16>*
  %6657 = load <16 x i16>, <16 x i16>* %6656, align 2, !tbaa !399
  %6658 = add nsw i64 %6361, %.pre-phi3548
  %6659 = getelementptr inbounds i16, i16* %blur_x, i64 %6658
  %6660 = bitcast i16* %6659 to <16 x i16>*
  %6661 = load <16 x i16>, <16 x i16>* %6660, align 2, !tbaa !399
  %6662 = getelementptr inbounds i16, i16* %6659, i64 16
  %6663 = bitcast i16* %6662 to <16 x i16>*
  %6664 = load <16 x i16>, <16 x i16>* %6663, align 2, !tbaa !399
  %6665 = add nsw i64 %6364, %.pre-phi3548
  %6666 = getelementptr inbounds i16, i16* %blur_x, i64 %6665
  %6667 = bitcast i16* %6666 to <16 x i16>*
  %6668 = load <16 x i16>, <16 x i16>* %6667, align 2, !tbaa !399
  %6669 = getelementptr inbounds i16, i16* %6666, i64 16
  %6670 = bitcast i16* %6669 to <16 x i16>*
  %6671 = load <16 x i16>, <16 x i16>* %6670, align 2, !tbaa !399
  %6672 = add nsw i64 %6367, %.pre-phi3548
  %6673 = getelementptr inbounds i16, i16* %blur_x, i64 %6672
  %6674 = bitcast i16* %6673 to <16 x i16>*
  %6675 = load <16 x i16>, <16 x i16>* %6674, align 2, !tbaa !399
  %6676 = getelementptr inbounds i16, i16* %6673, i64 16
  %6677 = bitcast i16* %6676 to <16 x i16>*
  %6678 = load <16 x i16>, <16 x i16>* %6677, align 2, !tbaa !399
  %6679 = add nsw i64 %6370, %.pre-phi3548
  %6680 = getelementptr inbounds i16, i16* %blur_x, i64 %6679
  %6681 = bitcast i16* %6680 to <16 x i16>*
  %6682 = load <16 x i16>, <16 x i16>* %6681, align 2, !tbaa !399
  %6683 = getelementptr inbounds i16, i16* %6680, i64 16
  %6684 = bitcast i16* %6683 to <16 x i16>*
  %6685 = load <16 x i16>, <16 x i16>* %6684, align 2, !tbaa !399
  %6686 = add nsw i64 %6373, %.pre-phi3548
  %6687 = getelementptr inbounds i16, i16* %blur_x, i64 %6686
  %6688 = bitcast i16* %6687 to <16 x i16>*
  %6689 = load <16 x i16>, <16 x i16>* %6688, align 2, !tbaa !399
  %6690 = getelementptr inbounds i16, i16* %6687, i64 16
  %6691 = bitcast i16* %6690 to <16 x i16>*
  %6692 = load <16 x i16>, <16 x i16>* %6691, align 2, !tbaa !399
  %6693 = add nsw i64 %6376, %.pre-phi3548
  %6694 = getelementptr inbounds i16, i16* %blur_x, i64 %6693
  %6695 = bitcast i16* %6694 to <16 x i16>*
  %6696 = load <16 x i16>, <16 x i16>* %6695, align 2, !tbaa !399
  %6697 = getelementptr inbounds i16, i16* %6694, i64 16
  %6698 = bitcast i16* %6697 to <16 x i16>*
  %6699 = load <16 x i16>, <16 x i16>* %6698, align 2, !tbaa !399
  %6700 = add <16 x i16> %6661, %6654
  %6701 = add <16 x i16> %6700, %6668
  %6702 = add <16 x i16> %6701, %6675
  %6703 = add <16 x i16> %6702, %6682
  %6704 = add <16 x i16> %6703, %6689
  %6705 = add <16 x i16> %6704, %6696
  %6706 = add <16 x i16> %6664, %6657
  %6707 = add <16 x i16> %6706, %6671
  %6708 = add <16 x i16> %6707, %6678
  %6709 = add <16 x i16> %6708, %6685
  %6710 = add <16 x i16> %6709, %6692
  %6711 = add <16 x i16> %6710, %6699
  %6712 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6705, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6713 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6711, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6714 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6712, <16 x i16> %6705)
  %6715 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6713, <16 x i16> %6711)
  %6716 = shufflevector <16 x i16> %6714, <16 x i16> %6715, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6717 = lshr <32 x i16> %6716, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6718 = shufflevector <32 x i16> %6717, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6719 = add nsw i64 %6380, %.pre-phi3548
  %6720 = getelementptr inbounds i16, i16* %66, i64 %6719
  %6721 = bitcast i16* %6720 to <16 x i16>*
  store <16 x i16> %6718, <16 x i16>* %6721, align 2, !tbaa !401
  %6722 = shufflevector <32 x i16> %6717, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6723 = getelementptr inbounds i16, i16* %6720, i64 16
  %6724 = bitcast i16* %6723 to <16 x i16>*
  store <16 x i16> %6722, <16 x i16>* %6724, align 2, !tbaa !401
  %indvars.iv.next3301 = add nuw nsw i64 %indvars.iv3300, 1
  %.not2786 = icmp eq i64 %indvars.iv.next3301, %188
  br i1 %.not2786, label %"end for blur_y.s0.x.x.rebased289", label %"for blur_y.s0.x.x.rebased288"

"for blur_y.s0.x.x.rebased296":                   ; preds = %"for blur_y.s0.x.x.rebased296.preheader", %"consume blur_x304"
  %blur_y.s0.x.x.rebased298 = phi i32 [ %6875, %"consume blur_x304" ], [ 0, %"for blur_y.s0.x.x.rebased296.preheader" ]
  %6725 = add nsw i32 %blur_y.s0.x.x.rebased298, %t1670
  %a168 = shl nsw i32 %6725, 5
  %6726 = icmp sgt i32 %a14, %a168
  %b174 = select i1 %6726, i32 %a168, i32 %a14
  %6727 = icmp slt i32 %6725, 1
  %6728 = icmp sgt i32 %4, %a168
  %6729 = or i1 %6727, %6728
  br i1 %6729, label %"produce blur_x302", label %"consume blur_x304"

"end for blur_y.s0.x.x.rebased297":               ; preds = %"consume blur_x304", %"end for blur_y.s0.x.x.rebased289"
  br i1 %34, label %"produce blur_x308", label %after_bb305

"produce blur_x302":                              ; preds = %"for blur_y.s0.x.x.rebased296"
  %6730 = icmp slt i32 %b174, %4
  %blur_x.s0.x.v1.base.s303 = select i1 %6730, i32 %b174, i32 %4
  %t869 = add nsw i32 %blur_x.s0.x.v1.base.s303, %t1873
  %6731 = sext i32 %t869 to i64
  %6732 = getelementptr inbounds i16, i16* %read_input, i64 %6731
  %6733 = getelementptr inbounds i16, i16* %6732, i64 1
  %6734 = bitcast i16* %6733 to <16 x i16>*
  %6735 = load <16 x i16>, <16 x i16>* %6734, align 2, !tbaa !396
  %6736 = getelementptr inbounds i16, i16* %6732, i64 17
  %6737 = bitcast i16* %6736 to <16 x i16>*
  %6738 = load <16 x i16>, <16 x i16>* %6737, align 2, !tbaa !396
  %6739 = bitcast i16* %6732 to <16 x i16>*
  %6740 = load <16 x i16>, <16 x i16>* %6739, align 2, !tbaa !396
  %6741 = getelementptr inbounds i16, i16* %6732, i64 16
  %6742 = bitcast i16* %6741 to <16 x i16>*
  %6743 = load <16 x i16>, <16 x i16>* %6742, align 2, !tbaa !396
  %6744 = getelementptr inbounds i16, i16* %6732, i64 2
  %6745 = bitcast i16* %6744 to <16 x i16>*
  %6746 = load <16 x i16>, <16 x i16>* %6745, align 2, !tbaa !396
  %6747 = getelementptr inbounds i16, i16* %6732, i64 18
  %6748 = bitcast i16* %6747 to <16 x i16>*
  %6749 = load <16 x i16>, <16 x i16>* %6748, align 2, !tbaa !396
  %6750 = getelementptr inbounds i16, i16* %6732, i64 3
  %6751 = bitcast i16* %6750 to <16 x i16>*
  %6752 = load <16 x i16>, <16 x i16>* %6751, align 2, !tbaa !396
  %6753 = getelementptr inbounds i16, i16* %6732, i64 19
  %6754 = bitcast i16* %6753 to <16 x i16>*
  %6755 = load <16 x i16>, <16 x i16>* %6754, align 2, !tbaa !396
  %6756 = getelementptr inbounds i16, i16* %6732, i64 4
  %6757 = bitcast i16* %6756 to <16 x i16>*
  %6758 = load <16 x i16>, <16 x i16>* %6757, align 2, !tbaa !396
  %6759 = getelementptr inbounds i16, i16* %6732, i64 20
  %6760 = bitcast i16* %6759 to <16 x i16>*
  %6761 = load <16 x i16>, <16 x i16>* %6760, align 2, !tbaa !396
  %6762 = getelementptr inbounds i16, i16* %6732, i64 6
  %6763 = bitcast i16* %6762 to <16 x i16>*
  %6764 = load <16 x i16>, <16 x i16>* %6763, align 2, !tbaa !396
  %6765 = getelementptr inbounds i16, i16* %6732, i64 22
  %6766 = bitcast i16* %6765 to <16 x i16>*
  %6767 = load <16 x i16>, <16 x i16>* %6766, align 2, !tbaa !396
  %6768 = getelementptr inbounds i16, i16* %6732, i64 5
  %6769 = bitcast i16* %6768 to <16 x i16>*
  %6770 = load <16 x i16>, <16 x i16>* %6769, align 2, !tbaa !396
  %6771 = getelementptr inbounds i16, i16* %6732, i64 21
  %6772 = bitcast i16* %6771 to <16 x i16>*
  %6773 = load <16 x i16>, <16 x i16>* %6772, align 2, !tbaa !396
  %6774 = add <16 x i16> %6740, %6735
  %6775 = add <16 x i16> %6774, %6746
  %6776 = add <16 x i16> %6775, %6752
  %6777 = add <16 x i16> %6776, %6758
  %6778 = add <16 x i16> %6777, %6764
  %6779 = add <16 x i16> %6778, %6770
  %6780 = add <16 x i16> %6743, %6738
  %6781 = add <16 x i16> %6780, %6749
  %6782 = add <16 x i16> %6781, %6755
  %6783 = add <16 x i16> %6782, %6761
  %6784 = add <16 x i16> %6783, %6767
  %6785 = add <16 x i16> %6784, %6773
  %6786 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6779, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6787 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6785, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6788 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6786, <16 x i16> %6779)
  %6789 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6787, <16 x i16> %6785)
  %6790 = shufflevector <16 x i16> %6788, <16 x i16> %6789, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6791 = lshr <32 x i16> %6790, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6792 = shufflevector <32 x i16> %6791, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6793 = sext i32 %blur_x.s0.x.v1.base.s303 to i64
  %6794 = add nsw i64 %6793, %6556
  %6795 = getelementptr inbounds i16, i16* %blur_x, i64 %6794
  %6796 = bitcast i16* %6795 to <16 x i16>*
  store <16 x i16> %6792, <16 x i16>* %6796, align 2, !tbaa !399
  %6797 = shufflevector <32 x i16> %6791, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6798 = getelementptr inbounds i16, i16* %6795, i64 16
  %6799 = bitcast i16* %6798 to <16 x i16>*
  store <16 x i16> %6797, <16 x i16>* %6799, align 2, !tbaa !399
  br label %"consume blur_x304"

"consume blur_x304":                              ; preds = %"for blur_y.s0.x.x.rebased296", %"produce blur_x302"
  %6800 = sext i32 %b174 to i64
  %6801 = add nsw i64 %6559, %6800
  %6802 = getelementptr inbounds i16, i16* %blur_x, i64 %6801
  %6803 = bitcast i16* %6802 to <16 x i16>*
  %6804 = load <16 x i16>, <16 x i16>* %6803, align 2, !tbaa !399
  %6805 = getelementptr inbounds i16, i16* %6802, i64 16
  %6806 = bitcast i16* %6805 to <16 x i16>*
  %6807 = load <16 x i16>, <16 x i16>* %6806, align 2, !tbaa !399
  %6808 = add nsw i64 %6562, %6800
  %6809 = getelementptr inbounds i16, i16* %blur_x, i64 %6808
  %6810 = bitcast i16* %6809 to <16 x i16>*
  %6811 = load <16 x i16>, <16 x i16>* %6810, align 2, !tbaa !399
  %6812 = getelementptr inbounds i16, i16* %6809, i64 16
  %6813 = bitcast i16* %6812 to <16 x i16>*
  %6814 = load <16 x i16>, <16 x i16>* %6813, align 2, !tbaa !399
  %6815 = add nsw i64 %6565, %6800
  %6816 = getelementptr inbounds i16, i16* %blur_x, i64 %6815
  %6817 = bitcast i16* %6816 to <16 x i16>*
  %6818 = load <16 x i16>, <16 x i16>* %6817, align 2, !tbaa !399
  %6819 = getelementptr inbounds i16, i16* %6816, i64 16
  %6820 = bitcast i16* %6819 to <16 x i16>*
  %6821 = load <16 x i16>, <16 x i16>* %6820, align 2, !tbaa !399
  %6822 = add nsw i64 %6568, %6800
  %6823 = getelementptr inbounds i16, i16* %blur_x, i64 %6822
  %6824 = bitcast i16* %6823 to <16 x i16>*
  %6825 = load <16 x i16>, <16 x i16>* %6824, align 2, !tbaa !399
  %6826 = getelementptr inbounds i16, i16* %6823, i64 16
  %6827 = bitcast i16* %6826 to <16 x i16>*
  %6828 = load <16 x i16>, <16 x i16>* %6827, align 2, !tbaa !399
  %6829 = add nsw i64 %6571, %6800
  %6830 = getelementptr inbounds i16, i16* %blur_x, i64 %6829
  %6831 = bitcast i16* %6830 to <16 x i16>*
  %6832 = load <16 x i16>, <16 x i16>* %6831, align 2, !tbaa !399
  %6833 = getelementptr inbounds i16, i16* %6830, i64 16
  %6834 = bitcast i16* %6833 to <16 x i16>*
  %6835 = load <16 x i16>, <16 x i16>* %6834, align 2, !tbaa !399
  %6836 = add nsw i64 %6574, %6800
  %6837 = getelementptr inbounds i16, i16* %blur_x, i64 %6836
  %6838 = bitcast i16* %6837 to <16 x i16>*
  %6839 = load <16 x i16>, <16 x i16>* %6838, align 2, !tbaa !399
  %6840 = getelementptr inbounds i16, i16* %6837, i64 16
  %6841 = bitcast i16* %6840 to <16 x i16>*
  %6842 = load <16 x i16>, <16 x i16>* %6841, align 2, !tbaa !399
  %6843 = add nsw i64 %6577, %6800
  %6844 = getelementptr inbounds i16, i16* %blur_x, i64 %6843
  %6845 = bitcast i16* %6844 to <16 x i16>*
  %6846 = load <16 x i16>, <16 x i16>* %6845, align 2, !tbaa !399
  %6847 = getelementptr inbounds i16, i16* %6844, i64 16
  %6848 = bitcast i16* %6847 to <16 x i16>*
  %6849 = load <16 x i16>, <16 x i16>* %6848, align 2, !tbaa !399
  %6850 = add <16 x i16> %6811, %6804
  %6851 = add <16 x i16> %6850, %6818
  %6852 = add <16 x i16> %6851, %6825
  %6853 = add <16 x i16> %6852, %6832
  %6854 = add <16 x i16> %6853, %6839
  %6855 = add <16 x i16> %6854, %6846
  %6856 = add <16 x i16> %6814, %6807
  %6857 = add <16 x i16> %6856, %6821
  %6858 = add <16 x i16> %6857, %6828
  %6859 = add <16 x i16> %6858, %6835
  %6860 = add <16 x i16> %6859, %6842
  %6861 = add <16 x i16> %6860, %6849
  %6862 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6855, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6863 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6861, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6864 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6862, <16 x i16> %6855)
  %6865 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6863, <16 x i16> %6861)
  %6866 = shufflevector <16 x i16> %6864, <16 x i16> %6865, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6867 = lshr <32 x i16> %6866, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6868 = shufflevector <32 x i16> %6867, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6869 = add nsw i64 %6581, %6800
  %6870 = getelementptr inbounds i16, i16* %66, i64 %6869
  %6871 = bitcast i16* %6870 to <16 x i16>*
  store <16 x i16> %6868, <16 x i16>* %6871, align 2, !tbaa !401
  %6872 = shufflevector <32 x i16> %6867, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6873 = getelementptr inbounds i16, i16* %6870, i64 16
  %6874 = bitcast i16* %6873 to <16 x i16>*
  store <16 x i16> %6872, <16 x i16>* %6874, align 2, !tbaa !401
  %6875 = add nuw nsw i32 %blur_y.s0.x.x.rebased298, 1
  %.not2785 = icmp eq i32 %6875, %t1727
  br i1 %.not2785, label %"end for blur_y.s0.x.x.rebased297", label %"for blur_y.s0.x.x.rebased296"

after_bb305:                                      ; preds = %"end for blur_y.s0.x.x.rebased297", %"produce blur_x308"
  br i1 %100, label %"for blur_y.s0.x.x.rebased310.preheader", label %"end for blur_y.s0.x.x.rebased311", !prof !386

"for blur_y.s0.x.x.rebased310.preheader":         ; preds = %after_bb305
  %6876 = sext i32 %t1762 to i64
  %6877 = zext i32 %.pre-phi3508 to i64
  %6878 = mul nsw i64 %6877, %116
  %6879 = sub nsw i64 %6878, %96
  %6880 = zext i32 %.pre-phi to i64
  %6881 = mul nsw i64 %6880, %116
  %6882 = sub nsw i64 %6881, %96
  %6883 = zext i32 %.pre-phi3512 to i64
  %6884 = mul nsw i64 %6883, %116
  %6885 = sub nsw i64 %6884, %96
  %6886 = zext i32 %.pre-phi3516 to i64
  %6887 = mul nsw i64 %6886, %116
  %6888 = sub nsw i64 %6887, %96
  %6889 = zext i32 %.pre-phi3520 to i64
  %6890 = mul nsw i64 %6889, %116
  %6891 = sub nsw i64 %6890, %96
  %6892 = zext i32 %.pre-phi3528 to i64
  %6893 = mul nsw i64 %6892, %116
  %6894 = sub nsw i64 %6893, %96
  %6895 = zext i32 %.pre-phi3524 to i64
  %6896 = mul nsw i64 %6895, %116
  %6897 = sub nsw i64 %6896, %96
  %6898 = sext i32 %a26 to i64
  %6899 = add nsw i64 %6898, 8
  %6900 = mul nsw i64 %6899, %117
  %6901 = add nsw i64 %6900, %120
  br label %"for blur_y.s0.x.x.rebased310"

"produce blur_x308":                              ; preds = %"end for blur_y.s0.x.x.rebased297"
  %6902 = getelementptr inbounds i16, i16* %read_input, i64 %135
  %6903 = getelementptr inbounds i16, i16* %6902, i64 -31
  %6904 = bitcast i16* %6903 to <16 x i16>*
  %6905 = load <16 x i16>, <16 x i16>* %6904, align 2, !tbaa !396
  %6906 = getelementptr inbounds i16, i16* %6902, i64 -15
  %6907 = bitcast i16* %6906 to <16 x i16>*
  %6908 = load <16 x i16>, <16 x i16>* %6907, align 2, !tbaa !396
  %6909 = getelementptr inbounds i16, i16* %6902, i64 -32
  %6910 = bitcast i16* %6909 to <16 x i16>*
  %6911 = load <16 x i16>, <16 x i16>* %6910, align 2, !tbaa !396
  %6912 = getelementptr inbounds i16, i16* %6902, i64 -16
  %6913 = bitcast i16* %6912 to <16 x i16>*
  %6914 = load <16 x i16>, <16 x i16>* %6913, align 2, !tbaa !396
  %6915 = getelementptr inbounds i16, i16* %6902, i64 -30
  %6916 = bitcast i16* %6915 to <16 x i16>*
  %6917 = load <16 x i16>, <16 x i16>* %6916, align 2, !tbaa !396
  %6918 = getelementptr inbounds i16, i16* %6902, i64 -14
  %6919 = bitcast i16* %6918 to <16 x i16>*
  %6920 = load <16 x i16>, <16 x i16>* %6919, align 2, !tbaa !396
  %6921 = getelementptr inbounds i16, i16* %6902, i64 -29
  %6922 = bitcast i16* %6921 to <16 x i16>*
  %6923 = load <16 x i16>, <16 x i16>* %6922, align 2, !tbaa !396
  %6924 = getelementptr inbounds i16, i16* %6902, i64 -13
  %6925 = bitcast i16* %6924 to <16 x i16>*
  %6926 = load <16 x i16>, <16 x i16>* %6925, align 2, !tbaa !396
  %6927 = getelementptr inbounds i16, i16* %6902, i64 -28
  %6928 = bitcast i16* %6927 to <16 x i16>*
  %6929 = load <16 x i16>, <16 x i16>* %6928, align 2, !tbaa !396
  %6930 = getelementptr inbounds i16, i16* %6902, i64 -12
  %6931 = bitcast i16* %6930 to <16 x i16>*
  %6932 = load <16 x i16>, <16 x i16>* %6931, align 2, !tbaa !396
  %6933 = getelementptr inbounds i16, i16* %6902, i64 -26
  %6934 = bitcast i16* %6933 to <16 x i16>*
  %6935 = load <16 x i16>, <16 x i16>* %6934, align 2, !tbaa !396
  %6936 = getelementptr inbounds i16, i16* %6902, i64 -10
  %6937 = bitcast i16* %6936 to <16 x i16>*
  %6938 = load <16 x i16>, <16 x i16>* %6937, align 2, !tbaa !396
  %6939 = getelementptr inbounds i16, i16* %6902, i64 -27
  %6940 = bitcast i16* %6939 to <16 x i16>*
  %6941 = load <16 x i16>, <16 x i16>* %6940, align 2, !tbaa !396
  %6942 = getelementptr inbounds i16, i16* %6902, i64 -11
  %6943 = bitcast i16* %6942 to <16 x i16>*
  %6944 = load <16 x i16>, <16 x i16>* %6943, align 2, !tbaa !396
  %6945 = add <16 x i16> %6911, %6905
  %6946 = add <16 x i16> %6945, %6917
  %6947 = add <16 x i16> %6946, %6923
  %6948 = add <16 x i16> %6947, %6929
  %6949 = add <16 x i16> %6948, %6935
  %6950 = add <16 x i16> %6949, %6941
  %6951 = add <16 x i16> %6914, %6908
  %6952 = add <16 x i16> %6951, %6920
  %6953 = add <16 x i16> %6952, %6926
  %6954 = add <16 x i16> %6953, %6932
  %6955 = add <16 x i16> %6954, %6938
  %6956 = add <16 x i16> %6955, %6944
  %6957 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6950, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6958 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6956, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %6959 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6957, <16 x i16> %6950)
  %6960 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %6958, <16 x i16> %6956)
  %6961 = shufflevector <16 x i16> %6959, <16 x i16> %6960, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6962 = lshr <32 x i16> %6961, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6963 = shufflevector <32 x i16> %6962, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6964 = zext i32 %.pre-phi3528 to i64
  %6965 = mul nsw i64 %97, %6964
  %6966 = add nsw i64 %99, %6965
  %6967 = getelementptr inbounds i16, i16* %blur_x, i64 %6966
  %6968 = getelementptr inbounds i16, i16* %6967, i64 -32
  %6969 = bitcast i16* %6968 to <16 x i16>*
  store <16 x i16> %6963, <16 x i16>* %6969, align 2, !tbaa !399
  %6970 = shufflevector <32 x i16> %6962, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6971 = getelementptr inbounds i16, i16* %6967, i64 -16
  %6972 = bitcast i16* %6971 to <16 x i16>*
  store <16 x i16> %6970, <16 x i16>* %6972, align 2, !tbaa !399
  %6973 = zext i32 %.pre-phi3508 to i64
  %6974 = mul nsw i64 %6973, %116
  %6975 = add nsw i64 %6974, %94
  %6976 = getelementptr inbounds i16, i16* %blur_x, i64 %6975
  %6977 = getelementptr inbounds i16, i16* %6976, i64 -32
  %6978 = bitcast i16* %6977 to <16 x i16>*
  %6979 = load <16 x i16>, <16 x i16>* %6978, align 2, !tbaa !399
  %6980 = getelementptr inbounds i16, i16* %6976, i64 -16
  %6981 = bitcast i16* %6980 to <16 x i16>*
  %6982 = load <16 x i16>, <16 x i16>* %6981, align 2, !tbaa !399
  %6983 = zext i32 %.pre-phi to i64
  %6984 = mul nsw i64 %6983, %116
  %6985 = add nsw i64 %6984, %94
  %6986 = getelementptr inbounds i16, i16* %blur_x, i64 %6985
  %6987 = getelementptr inbounds i16, i16* %6986, i64 -32
  %6988 = bitcast i16* %6987 to <16 x i16>*
  %6989 = load <16 x i16>, <16 x i16>* %6988, align 2, !tbaa !399
  %6990 = getelementptr inbounds i16, i16* %6986, i64 -16
  %6991 = bitcast i16* %6990 to <16 x i16>*
  %6992 = load <16 x i16>, <16 x i16>* %6991, align 2, !tbaa !399
  %6993 = zext i32 %.pre-phi3512 to i64
  %6994 = mul nsw i64 %6993, %116
  %6995 = add nsw i64 %6994, %94
  %6996 = getelementptr inbounds i16, i16* %blur_x, i64 %6995
  %6997 = getelementptr inbounds i16, i16* %6996, i64 -32
  %6998 = bitcast i16* %6997 to <16 x i16>*
  %6999 = load <16 x i16>, <16 x i16>* %6998, align 2, !tbaa !399
  %7000 = getelementptr inbounds i16, i16* %6996, i64 -16
  %7001 = bitcast i16* %7000 to <16 x i16>*
  %7002 = load <16 x i16>, <16 x i16>* %7001, align 2, !tbaa !399
  %7003 = zext i32 %.pre-phi3516 to i64
  %7004 = mul nsw i64 %7003, %116
  %7005 = add nsw i64 %7004, %94
  %7006 = getelementptr inbounds i16, i16* %blur_x, i64 %7005
  %7007 = getelementptr inbounds i16, i16* %7006, i64 -32
  %7008 = bitcast i16* %7007 to <16 x i16>*
  %7009 = load <16 x i16>, <16 x i16>* %7008, align 2, !tbaa !399
  %7010 = getelementptr inbounds i16, i16* %7006, i64 -16
  %7011 = bitcast i16* %7010 to <16 x i16>*
  %7012 = load <16 x i16>, <16 x i16>* %7011, align 2, !tbaa !399
  %7013 = zext i32 %.pre-phi3520 to i64
  %7014 = mul nsw i64 %7013, %116
  %7015 = add nsw i64 %7014, %94
  %7016 = getelementptr inbounds i16, i16* %blur_x, i64 %7015
  %7017 = getelementptr inbounds i16, i16* %7016, i64 -32
  %7018 = bitcast i16* %7017 to <16 x i16>*
  %7019 = load <16 x i16>, <16 x i16>* %7018, align 2, !tbaa !399
  %7020 = getelementptr inbounds i16, i16* %7016, i64 -16
  %7021 = bitcast i16* %7020 to <16 x i16>*
  %7022 = load <16 x i16>, <16 x i16>* %7021, align 2, !tbaa !399
  %7023 = mul nsw i64 %6964, %116
  %7024 = add nsw i64 %7023, %94
  %7025 = getelementptr inbounds i16, i16* %blur_x, i64 %7024
  %7026 = getelementptr inbounds i16, i16* %7025, i64 -32
  %7027 = bitcast i16* %7026 to <16 x i16>*
  %7028 = load <16 x i16>, <16 x i16>* %7027, align 2, !tbaa !399
  %7029 = getelementptr inbounds i16, i16* %7025, i64 -16
  %7030 = bitcast i16* %7029 to <16 x i16>*
  %7031 = load <16 x i16>, <16 x i16>* %7030, align 2, !tbaa !399
  %7032 = zext i32 %.pre-phi3524 to i64
  %7033 = mul nsw i64 %7032, %116
  %7034 = add nsw i64 %7033, %94
  %7035 = getelementptr inbounds i16, i16* %blur_x, i64 %7034
  %7036 = getelementptr inbounds i16, i16* %7035, i64 -32
  %7037 = bitcast i16* %7036 to <16 x i16>*
  %7038 = load <16 x i16>, <16 x i16>* %7037, align 2, !tbaa !399
  %7039 = getelementptr inbounds i16, i16* %7035, i64 -16
  %7040 = bitcast i16* %7039 to <16 x i16>*
  %7041 = load <16 x i16>, <16 x i16>* %7040, align 2, !tbaa !399
  %7042 = add <16 x i16> %6989, %6979
  %7043 = add <16 x i16> %7042, %6999
  %7044 = add <16 x i16> %7043, %7009
  %7045 = add <16 x i16> %7044, %7019
  %7046 = add <16 x i16> %7045, %7028
  %7047 = add <16 x i16> %7046, %7038
  %7048 = add <16 x i16> %6992, %6982
  %7049 = add <16 x i16> %7048, %7002
  %7050 = add <16 x i16> %7049, %7012
  %7051 = add <16 x i16> %7050, %7022
  %7052 = add <16 x i16> %7051, %7031
  %7053 = add <16 x i16> %7052, %7041
  %7054 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7047, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7055 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7053, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7056 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7054, <16 x i16> %7047)
  %7057 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7055, <16 x i16> %7053)
  %7058 = shufflevector <16 x i16> %7056, <16 x i16> %7057, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7059 = lshr <32 x i16> %7058, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7060 = shufflevector <32 x i16> %7059, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7061 = sext i32 %a26 to i64
  %7062 = add nsw i64 %7061, 8
  %7063 = mul nsw i64 %7062, %117
  %7064 = add nsw i64 %119, %7063
  %7065 = getelementptr inbounds i16, i16* %66, i64 %7064
  %7066 = getelementptr inbounds i16, i16* %7065, i64 -32
  %7067 = bitcast i16* %7066 to <16 x i16>*
  store <16 x i16> %7060, <16 x i16>* %7067, align 2, !tbaa !401
  %7068 = shufflevector <32 x i16> %7059, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7069 = getelementptr inbounds i16, i16* %7065, i64 -16
  %7070 = bitcast i16* %7069 to <16 x i16>*
  store <16 x i16> %7068, <16 x i16>* %7070, align 2, !tbaa !401
  br label %after_bb305

"for blur_y.s0.x.x.rebased310":                   ; preds = %"for blur_y.s0.x.x.rebased310.preheader", %"consume blur_x317"
  %indvars.iv3303 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased310.preheader" ], [ %indvars.iv.next3304, %"consume blur_x317" ]
  %7071 = add nsw i64 %indvars.iv3303, %101
  %7072 = icmp slt i64 %7071, 1
  %7073 = trunc i64 %7071 to i32
  %7074 = shl nsw i32 %7073, 5
  %7075 = icmp sgt i32 %4, %7074
  %7076 = or i1 %7072, %7075
  br i1 %7076, label %"produce blur_x316", label %"for blur_y.s0.x.x.rebased310.consume blur_x317_crit_edge"

"for blur_y.s0.x.x.rebased310.consume blur_x317_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased310"
  %.pre3549 = shl nsw i64 %7071, 5
  br label %"consume blur_x317"

"end for blur_y.s0.x.x.rebased311":               ; preds = %"consume blur_x317", %after_bb305
  br i1 %102, label %"for blur_y.s0.x.x.rebased318.preheader", label %"end for blur_y.s0.x.x.rebased319", !prof !386

"for blur_y.s0.x.x.rebased318.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased311"
  %7077 = sext i32 %t1762 to i64
  %7078 = zext i32 %.pre-phi3508 to i64
  %7079 = mul nsw i64 %7078, %116
  %7080 = sub nsw i64 %7079, %96
  %7081 = zext i32 %.pre-phi to i64
  %7082 = mul nsw i64 %7081, %116
  %7083 = sub nsw i64 %7082, %96
  %7084 = zext i32 %.pre-phi3512 to i64
  %7085 = mul nsw i64 %7084, %116
  %7086 = sub nsw i64 %7085, %96
  %7087 = zext i32 %.pre-phi3516 to i64
  %7088 = mul nsw i64 %7087, %116
  %7089 = sub nsw i64 %7088, %96
  %7090 = zext i32 %.pre-phi3520 to i64
  %7091 = mul nsw i64 %7090, %116
  %7092 = sub nsw i64 %7091, %96
  %7093 = zext i32 %.pre-phi3528 to i64
  %7094 = mul nsw i64 %7093, %116
  %7095 = sub nsw i64 %7094, %96
  %7096 = zext i32 %.pre-phi3524 to i64
  %7097 = mul nsw i64 %7096, %116
  %7098 = sub nsw i64 %7097, %96
  %7099 = sext i32 %a26 to i64
  %7100 = add nsw i64 %7099, 8
  %7101 = mul nsw i64 %7100, %117
  %7102 = add nsw i64 %7101, %120
  br label %"for blur_y.s0.x.x.rebased318"

"produce blur_x316":                              ; preds = %"for blur_y.s0.x.x.rebased310"
  %t880 = add nsw i32 %7074, %t1889
  %7103 = sext i32 %t880 to i64
  %7104 = getelementptr inbounds i16, i16* %read_input, i64 %7103
  %7105 = getelementptr inbounds i16, i16* %7104, i64 1
  %7106 = bitcast i16* %7105 to <16 x i16>*
  %7107 = load <16 x i16>, <16 x i16>* %7106, align 2, !tbaa !396
  %7108 = getelementptr inbounds i16, i16* %7104, i64 17
  %7109 = bitcast i16* %7108 to <16 x i16>*
  %7110 = load <16 x i16>, <16 x i16>* %7109, align 2, !tbaa !396
  %7111 = bitcast i16* %7104 to <16 x i16>*
  %7112 = load <16 x i16>, <16 x i16>* %7111, align 2, !tbaa !396
  %7113 = getelementptr inbounds i16, i16* %7104, i64 16
  %7114 = bitcast i16* %7113 to <16 x i16>*
  %7115 = load <16 x i16>, <16 x i16>* %7114, align 2, !tbaa !396
  %7116 = getelementptr inbounds i16, i16* %7104, i64 2
  %7117 = bitcast i16* %7116 to <16 x i16>*
  %7118 = load <16 x i16>, <16 x i16>* %7117, align 2, !tbaa !396
  %7119 = getelementptr inbounds i16, i16* %7104, i64 18
  %7120 = bitcast i16* %7119 to <16 x i16>*
  %7121 = load <16 x i16>, <16 x i16>* %7120, align 2, !tbaa !396
  %7122 = getelementptr inbounds i16, i16* %7104, i64 3
  %7123 = bitcast i16* %7122 to <16 x i16>*
  %7124 = load <16 x i16>, <16 x i16>* %7123, align 2, !tbaa !396
  %7125 = getelementptr inbounds i16, i16* %7104, i64 19
  %7126 = bitcast i16* %7125 to <16 x i16>*
  %7127 = load <16 x i16>, <16 x i16>* %7126, align 2, !tbaa !396
  %7128 = getelementptr inbounds i16, i16* %7104, i64 4
  %7129 = bitcast i16* %7128 to <16 x i16>*
  %7130 = load <16 x i16>, <16 x i16>* %7129, align 2, !tbaa !396
  %7131 = getelementptr inbounds i16, i16* %7104, i64 20
  %7132 = bitcast i16* %7131 to <16 x i16>*
  %7133 = load <16 x i16>, <16 x i16>* %7132, align 2, !tbaa !396
  %7134 = getelementptr inbounds i16, i16* %7104, i64 6
  %7135 = bitcast i16* %7134 to <16 x i16>*
  %7136 = load <16 x i16>, <16 x i16>* %7135, align 2, !tbaa !396
  %7137 = getelementptr inbounds i16, i16* %7104, i64 22
  %7138 = bitcast i16* %7137 to <16 x i16>*
  %7139 = load <16 x i16>, <16 x i16>* %7138, align 2, !tbaa !396
  %7140 = getelementptr inbounds i16, i16* %7104, i64 5
  %7141 = bitcast i16* %7140 to <16 x i16>*
  %7142 = load <16 x i16>, <16 x i16>* %7141, align 2, !tbaa !396
  %7143 = getelementptr inbounds i16, i16* %7104, i64 21
  %7144 = bitcast i16* %7143 to <16 x i16>*
  %7145 = load <16 x i16>, <16 x i16>* %7144, align 2, !tbaa !396
  %7146 = add <16 x i16> %7112, %7107
  %7147 = add <16 x i16> %7146, %7118
  %7148 = add <16 x i16> %7147, %7124
  %7149 = add <16 x i16> %7148, %7130
  %7150 = add <16 x i16> %7149, %7136
  %7151 = add <16 x i16> %7150, %7142
  %7152 = add <16 x i16> %7115, %7110
  %7153 = add <16 x i16> %7152, %7121
  %7154 = add <16 x i16> %7153, %7127
  %7155 = add <16 x i16> %7154, %7133
  %7156 = add <16 x i16> %7155, %7139
  %7157 = add <16 x i16> %7156, %7145
  %7158 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7151, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7159 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7157, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7160 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7158, <16 x i16> %7151)
  %7161 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7159, <16 x i16> %7157)
  %7162 = shufflevector <16 x i16> %7160, <16 x i16> %7161, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7163 = lshr <32 x i16> %7162, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7164 = shufflevector <32 x i16> %7163, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7165 = shl nsw i64 %7071, 5
  %7166 = add nsw i64 %7165, %6876
  %7167 = getelementptr inbounds i16, i16* %blur_x, i64 %7166
  %7168 = bitcast i16* %7167 to <16 x i16>*
  store <16 x i16> %7164, <16 x i16>* %7168, align 2, !tbaa !399
  %7169 = shufflevector <32 x i16> %7163, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7170 = getelementptr inbounds i16, i16* %7167, i64 16
  %7171 = bitcast i16* %7170 to <16 x i16>*
  store <16 x i16> %7169, <16 x i16>* %7171, align 2, !tbaa !399
  br label %"consume blur_x317"

"consume blur_x317":                              ; preds = %"for blur_y.s0.x.x.rebased310.consume blur_x317_crit_edge", %"produce blur_x316"
  %.pre-phi3550 = phi i64 [ %.pre3549, %"for blur_y.s0.x.x.rebased310.consume blur_x317_crit_edge" ], [ %7165, %"produce blur_x316" ]
  %7172 = add nsw i64 %6879, %.pre-phi3550
  %7173 = getelementptr inbounds i16, i16* %blur_x, i64 %7172
  %7174 = bitcast i16* %7173 to <16 x i16>*
  %7175 = load <16 x i16>, <16 x i16>* %7174, align 2, !tbaa !399
  %7176 = getelementptr inbounds i16, i16* %7173, i64 16
  %7177 = bitcast i16* %7176 to <16 x i16>*
  %7178 = load <16 x i16>, <16 x i16>* %7177, align 2, !tbaa !399
  %7179 = add nsw i64 %6882, %.pre-phi3550
  %7180 = getelementptr inbounds i16, i16* %blur_x, i64 %7179
  %7181 = bitcast i16* %7180 to <16 x i16>*
  %7182 = load <16 x i16>, <16 x i16>* %7181, align 2, !tbaa !399
  %7183 = getelementptr inbounds i16, i16* %7180, i64 16
  %7184 = bitcast i16* %7183 to <16 x i16>*
  %7185 = load <16 x i16>, <16 x i16>* %7184, align 2, !tbaa !399
  %7186 = add nsw i64 %6885, %.pre-phi3550
  %7187 = getelementptr inbounds i16, i16* %blur_x, i64 %7186
  %7188 = bitcast i16* %7187 to <16 x i16>*
  %7189 = load <16 x i16>, <16 x i16>* %7188, align 2, !tbaa !399
  %7190 = getelementptr inbounds i16, i16* %7187, i64 16
  %7191 = bitcast i16* %7190 to <16 x i16>*
  %7192 = load <16 x i16>, <16 x i16>* %7191, align 2, !tbaa !399
  %7193 = add nsw i64 %6888, %.pre-phi3550
  %7194 = getelementptr inbounds i16, i16* %blur_x, i64 %7193
  %7195 = bitcast i16* %7194 to <16 x i16>*
  %7196 = load <16 x i16>, <16 x i16>* %7195, align 2, !tbaa !399
  %7197 = getelementptr inbounds i16, i16* %7194, i64 16
  %7198 = bitcast i16* %7197 to <16 x i16>*
  %7199 = load <16 x i16>, <16 x i16>* %7198, align 2, !tbaa !399
  %7200 = add nsw i64 %6891, %.pre-phi3550
  %7201 = getelementptr inbounds i16, i16* %blur_x, i64 %7200
  %7202 = bitcast i16* %7201 to <16 x i16>*
  %7203 = load <16 x i16>, <16 x i16>* %7202, align 2, !tbaa !399
  %7204 = getelementptr inbounds i16, i16* %7201, i64 16
  %7205 = bitcast i16* %7204 to <16 x i16>*
  %7206 = load <16 x i16>, <16 x i16>* %7205, align 2, !tbaa !399
  %7207 = add nsw i64 %6894, %.pre-phi3550
  %7208 = getelementptr inbounds i16, i16* %blur_x, i64 %7207
  %7209 = bitcast i16* %7208 to <16 x i16>*
  %7210 = load <16 x i16>, <16 x i16>* %7209, align 2, !tbaa !399
  %7211 = getelementptr inbounds i16, i16* %7208, i64 16
  %7212 = bitcast i16* %7211 to <16 x i16>*
  %7213 = load <16 x i16>, <16 x i16>* %7212, align 2, !tbaa !399
  %7214 = add nsw i64 %6897, %.pre-phi3550
  %7215 = getelementptr inbounds i16, i16* %blur_x, i64 %7214
  %7216 = bitcast i16* %7215 to <16 x i16>*
  %7217 = load <16 x i16>, <16 x i16>* %7216, align 2, !tbaa !399
  %7218 = getelementptr inbounds i16, i16* %7215, i64 16
  %7219 = bitcast i16* %7218 to <16 x i16>*
  %7220 = load <16 x i16>, <16 x i16>* %7219, align 2, !tbaa !399
  %7221 = add <16 x i16> %7182, %7175
  %7222 = add <16 x i16> %7221, %7189
  %7223 = add <16 x i16> %7222, %7196
  %7224 = add <16 x i16> %7223, %7203
  %7225 = add <16 x i16> %7224, %7210
  %7226 = add <16 x i16> %7225, %7217
  %7227 = add <16 x i16> %7185, %7178
  %7228 = add <16 x i16> %7227, %7192
  %7229 = add <16 x i16> %7228, %7199
  %7230 = add <16 x i16> %7229, %7206
  %7231 = add <16 x i16> %7230, %7213
  %7232 = add <16 x i16> %7231, %7220
  %7233 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7226, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7234 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7232, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7235 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7233, <16 x i16> %7226)
  %7236 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7234, <16 x i16> %7232)
  %7237 = shufflevector <16 x i16> %7235, <16 x i16> %7236, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7238 = lshr <32 x i16> %7237, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7239 = shufflevector <32 x i16> %7238, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7240 = add nsw i64 %6901, %.pre-phi3550
  %7241 = getelementptr inbounds i16, i16* %66, i64 %7240
  %7242 = bitcast i16* %7241 to <16 x i16>*
  store <16 x i16> %7239, <16 x i16>* %7242, align 2, !tbaa !401
  %7243 = shufflevector <32 x i16> %7238, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7244 = getelementptr inbounds i16, i16* %7241, i64 16
  %7245 = bitcast i16* %7244 to <16 x i16>*
  store <16 x i16> %7243, <16 x i16>* %7245, align 2, !tbaa !401
  %indvars.iv.next3304 = add nuw nsw i64 %indvars.iv3303, 1
  %.not2784 = icmp eq i64 %indvars.iv.next3304, %188
  br i1 %.not2784, label %"end for blur_y.s0.x.x.rebased311", label %"for blur_y.s0.x.x.rebased310"

"for blur_y.s0.x.x.rebased318":                   ; preds = %"for blur_y.s0.x.x.rebased318.preheader", %"consume blur_x326"
  %blur_y.s0.x.x.rebased320 = phi i32 [ %7396, %"consume blur_x326" ], [ 0, %"for blur_y.s0.x.x.rebased318.preheader" ]
  %7246 = add nsw i32 %blur_y.s0.x.x.rebased320, %t1670
  %a175 = shl nsw i32 %7246, 5
  %7247 = icmp sgt i32 %a14, %a175
  %b181 = select i1 %7247, i32 %a175, i32 %a14
  %7248 = icmp slt i32 %7246, 1
  %7249 = icmp sgt i32 %4, %a175
  %7250 = or i1 %7248, %7249
  br i1 %7250, label %"produce blur_x324", label %"consume blur_x326"

"end for blur_y.s0.x.x.rebased319":               ; preds = %"consume blur_x326", %"end for blur_y.s0.x.x.rebased311"
  br i1 %34, label %"produce blur_x330", label %after_bb327

"produce blur_x324":                              ; preds = %"for blur_y.s0.x.x.rebased318"
  %7251 = icmp slt i32 %b181, %4
  %blur_x.s0.x.v1.base.s325 = select i1 %7251, i32 %b181, i32 %4
  %t885 = add nsw i32 %blur_x.s0.x.v1.base.s325, %t1889
  %7252 = sext i32 %t885 to i64
  %7253 = getelementptr inbounds i16, i16* %read_input, i64 %7252
  %7254 = getelementptr inbounds i16, i16* %7253, i64 1
  %7255 = bitcast i16* %7254 to <16 x i16>*
  %7256 = load <16 x i16>, <16 x i16>* %7255, align 2, !tbaa !396
  %7257 = getelementptr inbounds i16, i16* %7253, i64 17
  %7258 = bitcast i16* %7257 to <16 x i16>*
  %7259 = load <16 x i16>, <16 x i16>* %7258, align 2, !tbaa !396
  %7260 = bitcast i16* %7253 to <16 x i16>*
  %7261 = load <16 x i16>, <16 x i16>* %7260, align 2, !tbaa !396
  %7262 = getelementptr inbounds i16, i16* %7253, i64 16
  %7263 = bitcast i16* %7262 to <16 x i16>*
  %7264 = load <16 x i16>, <16 x i16>* %7263, align 2, !tbaa !396
  %7265 = getelementptr inbounds i16, i16* %7253, i64 2
  %7266 = bitcast i16* %7265 to <16 x i16>*
  %7267 = load <16 x i16>, <16 x i16>* %7266, align 2, !tbaa !396
  %7268 = getelementptr inbounds i16, i16* %7253, i64 18
  %7269 = bitcast i16* %7268 to <16 x i16>*
  %7270 = load <16 x i16>, <16 x i16>* %7269, align 2, !tbaa !396
  %7271 = getelementptr inbounds i16, i16* %7253, i64 3
  %7272 = bitcast i16* %7271 to <16 x i16>*
  %7273 = load <16 x i16>, <16 x i16>* %7272, align 2, !tbaa !396
  %7274 = getelementptr inbounds i16, i16* %7253, i64 19
  %7275 = bitcast i16* %7274 to <16 x i16>*
  %7276 = load <16 x i16>, <16 x i16>* %7275, align 2, !tbaa !396
  %7277 = getelementptr inbounds i16, i16* %7253, i64 4
  %7278 = bitcast i16* %7277 to <16 x i16>*
  %7279 = load <16 x i16>, <16 x i16>* %7278, align 2, !tbaa !396
  %7280 = getelementptr inbounds i16, i16* %7253, i64 20
  %7281 = bitcast i16* %7280 to <16 x i16>*
  %7282 = load <16 x i16>, <16 x i16>* %7281, align 2, !tbaa !396
  %7283 = getelementptr inbounds i16, i16* %7253, i64 6
  %7284 = bitcast i16* %7283 to <16 x i16>*
  %7285 = load <16 x i16>, <16 x i16>* %7284, align 2, !tbaa !396
  %7286 = getelementptr inbounds i16, i16* %7253, i64 22
  %7287 = bitcast i16* %7286 to <16 x i16>*
  %7288 = load <16 x i16>, <16 x i16>* %7287, align 2, !tbaa !396
  %7289 = getelementptr inbounds i16, i16* %7253, i64 5
  %7290 = bitcast i16* %7289 to <16 x i16>*
  %7291 = load <16 x i16>, <16 x i16>* %7290, align 2, !tbaa !396
  %7292 = getelementptr inbounds i16, i16* %7253, i64 21
  %7293 = bitcast i16* %7292 to <16 x i16>*
  %7294 = load <16 x i16>, <16 x i16>* %7293, align 2, !tbaa !396
  %7295 = add <16 x i16> %7261, %7256
  %7296 = add <16 x i16> %7295, %7267
  %7297 = add <16 x i16> %7296, %7273
  %7298 = add <16 x i16> %7297, %7279
  %7299 = add <16 x i16> %7298, %7285
  %7300 = add <16 x i16> %7299, %7291
  %7301 = add <16 x i16> %7264, %7259
  %7302 = add <16 x i16> %7301, %7270
  %7303 = add <16 x i16> %7302, %7276
  %7304 = add <16 x i16> %7303, %7282
  %7305 = add <16 x i16> %7304, %7288
  %7306 = add <16 x i16> %7305, %7294
  %7307 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7300, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7308 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7306, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7309 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7307, <16 x i16> %7300)
  %7310 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7308, <16 x i16> %7306)
  %7311 = shufflevector <16 x i16> %7309, <16 x i16> %7310, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7312 = lshr <32 x i16> %7311, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7313 = shufflevector <32 x i16> %7312, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7314 = sext i32 %blur_x.s0.x.v1.base.s325 to i64
  %7315 = add nsw i64 %7314, %7077
  %7316 = getelementptr inbounds i16, i16* %blur_x, i64 %7315
  %7317 = bitcast i16* %7316 to <16 x i16>*
  store <16 x i16> %7313, <16 x i16>* %7317, align 2, !tbaa !399
  %7318 = shufflevector <32 x i16> %7312, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7319 = getelementptr inbounds i16, i16* %7316, i64 16
  %7320 = bitcast i16* %7319 to <16 x i16>*
  store <16 x i16> %7318, <16 x i16>* %7320, align 2, !tbaa !399
  br label %"consume blur_x326"

"consume blur_x326":                              ; preds = %"for blur_y.s0.x.x.rebased318", %"produce blur_x324"
  %7321 = sext i32 %b181 to i64
  %7322 = add nsw i64 %7080, %7321
  %7323 = getelementptr inbounds i16, i16* %blur_x, i64 %7322
  %7324 = bitcast i16* %7323 to <16 x i16>*
  %7325 = load <16 x i16>, <16 x i16>* %7324, align 2, !tbaa !399
  %7326 = getelementptr inbounds i16, i16* %7323, i64 16
  %7327 = bitcast i16* %7326 to <16 x i16>*
  %7328 = load <16 x i16>, <16 x i16>* %7327, align 2, !tbaa !399
  %7329 = add nsw i64 %7083, %7321
  %7330 = getelementptr inbounds i16, i16* %blur_x, i64 %7329
  %7331 = bitcast i16* %7330 to <16 x i16>*
  %7332 = load <16 x i16>, <16 x i16>* %7331, align 2, !tbaa !399
  %7333 = getelementptr inbounds i16, i16* %7330, i64 16
  %7334 = bitcast i16* %7333 to <16 x i16>*
  %7335 = load <16 x i16>, <16 x i16>* %7334, align 2, !tbaa !399
  %7336 = add nsw i64 %7086, %7321
  %7337 = getelementptr inbounds i16, i16* %blur_x, i64 %7336
  %7338 = bitcast i16* %7337 to <16 x i16>*
  %7339 = load <16 x i16>, <16 x i16>* %7338, align 2, !tbaa !399
  %7340 = getelementptr inbounds i16, i16* %7337, i64 16
  %7341 = bitcast i16* %7340 to <16 x i16>*
  %7342 = load <16 x i16>, <16 x i16>* %7341, align 2, !tbaa !399
  %7343 = add nsw i64 %7089, %7321
  %7344 = getelementptr inbounds i16, i16* %blur_x, i64 %7343
  %7345 = bitcast i16* %7344 to <16 x i16>*
  %7346 = load <16 x i16>, <16 x i16>* %7345, align 2, !tbaa !399
  %7347 = getelementptr inbounds i16, i16* %7344, i64 16
  %7348 = bitcast i16* %7347 to <16 x i16>*
  %7349 = load <16 x i16>, <16 x i16>* %7348, align 2, !tbaa !399
  %7350 = add nsw i64 %7092, %7321
  %7351 = getelementptr inbounds i16, i16* %blur_x, i64 %7350
  %7352 = bitcast i16* %7351 to <16 x i16>*
  %7353 = load <16 x i16>, <16 x i16>* %7352, align 2, !tbaa !399
  %7354 = getelementptr inbounds i16, i16* %7351, i64 16
  %7355 = bitcast i16* %7354 to <16 x i16>*
  %7356 = load <16 x i16>, <16 x i16>* %7355, align 2, !tbaa !399
  %7357 = add nsw i64 %7095, %7321
  %7358 = getelementptr inbounds i16, i16* %blur_x, i64 %7357
  %7359 = bitcast i16* %7358 to <16 x i16>*
  %7360 = load <16 x i16>, <16 x i16>* %7359, align 2, !tbaa !399
  %7361 = getelementptr inbounds i16, i16* %7358, i64 16
  %7362 = bitcast i16* %7361 to <16 x i16>*
  %7363 = load <16 x i16>, <16 x i16>* %7362, align 2, !tbaa !399
  %7364 = add nsw i64 %7098, %7321
  %7365 = getelementptr inbounds i16, i16* %blur_x, i64 %7364
  %7366 = bitcast i16* %7365 to <16 x i16>*
  %7367 = load <16 x i16>, <16 x i16>* %7366, align 2, !tbaa !399
  %7368 = getelementptr inbounds i16, i16* %7365, i64 16
  %7369 = bitcast i16* %7368 to <16 x i16>*
  %7370 = load <16 x i16>, <16 x i16>* %7369, align 2, !tbaa !399
  %7371 = add <16 x i16> %7332, %7325
  %7372 = add <16 x i16> %7371, %7339
  %7373 = add <16 x i16> %7372, %7346
  %7374 = add <16 x i16> %7373, %7353
  %7375 = add <16 x i16> %7374, %7360
  %7376 = add <16 x i16> %7375, %7367
  %7377 = add <16 x i16> %7335, %7328
  %7378 = add <16 x i16> %7377, %7342
  %7379 = add <16 x i16> %7378, %7349
  %7380 = add <16 x i16> %7379, %7356
  %7381 = add <16 x i16> %7380, %7363
  %7382 = add <16 x i16> %7381, %7370
  %7383 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7376, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7384 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7382, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7385 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7383, <16 x i16> %7376)
  %7386 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7384, <16 x i16> %7382)
  %7387 = shufflevector <16 x i16> %7385, <16 x i16> %7386, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7388 = lshr <32 x i16> %7387, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7389 = shufflevector <32 x i16> %7388, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7390 = add nsw i64 %7102, %7321
  %7391 = getelementptr inbounds i16, i16* %66, i64 %7390
  %7392 = bitcast i16* %7391 to <16 x i16>*
  store <16 x i16> %7389, <16 x i16>* %7392, align 2, !tbaa !401
  %7393 = shufflevector <32 x i16> %7388, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7394 = getelementptr inbounds i16, i16* %7391, i64 16
  %7395 = bitcast i16* %7394 to <16 x i16>*
  store <16 x i16> %7393, <16 x i16>* %7395, align 2, !tbaa !401
  %7396 = add nuw nsw i32 %blur_y.s0.x.x.rebased320, 1
  %.not2783 = icmp eq i32 %7396, %t1727
  br i1 %.not2783, label %"end for blur_y.s0.x.x.rebased319", label %"for blur_y.s0.x.x.rebased318"

after_bb327:                                      ; preds = %"end for blur_y.s0.x.x.rebased319", %"produce blur_x330"
  br i1 %100, label %"for blur_y.s0.x.x.rebased332.preheader", label %"end for blur_y.s0.x.x.rebased333", !prof !386

"for blur_y.s0.x.x.rebased332.preheader":         ; preds = %after_bb327
  %7397 = sext i32 %t1778 to i64
  %7398 = zext i32 %.pre-phi3512 to i64
  %7399 = mul nsw i64 %7398, %116
  %7400 = sub nsw i64 %7399, %96
  %7401 = zext i32 %.pre-phi3508 to i64
  %7402 = mul nsw i64 %7401, %116
  %7403 = sub nsw i64 %7402, %96
  %7404 = zext i32 %.pre-phi3516 to i64
  %7405 = mul nsw i64 %7404, %116
  %7406 = sub nsw i64 %7405, %96
  %7407 = zext i32 %.pre-phi3520 to i64
  %7408 = mul nsw i64 %7407, %116
  %7409 = sub nsw i64 %7408, %96
  %7410 = zext i32 %.pre-phi3524 to i64
  %7411 = mul nsw i64 %7410, %116
  %7412 = sub nsw i64 %7411, %96
  %7413 = zext i32 %.pre-phi3534 to i64
  %7414 = mul nsw i64 %7413, %116
  %7415 = sub nsw i64 %7414, %96
  %7416 = zext i32 %.pre-phi3528 to i64
  %7417 = mul nsw i64 %7416, %116
  %7418 = sub nsw i64 %7417, %96
  %7419 = sext i32 %a26 to i64
  %7420 = add nsw i64 %7419, 9
  %7421 = mul nsw i64 %7420, %117
  %7422 = add nsw i64 %7421, %120
  br label %"for blur_y.s0.x.x.rebased332"

"produce blur_x330":                              ; preds = %"end for blur_y.s0.x.x.rebased319"
  %7423 = getelementptr inbounds i16, i16* %read_input, i64 %137
  %7424 = getelementptr inbounds i16, i16* %7423, i64 -31
  %7425 = bitcast i16* %7424 to <16 x i16>*
  %7426 = load <16 x i16>, <16 x i16>* %7425, align 2, !tbaa !396
  %7427 = getelementptr inbounds i16, i16* %7423, i64 -15
  %7428 = bitcast i16* %7427 to <16 x i16>*
  %7429 = load <16 x i16>, <16 x i16>* %7428, align 2, !tbaa !396
  %7430 = getelementptr inbounds i16, i16* %7423, i64 -32
  %7431 = bitcast i16* %7430 to <16 x i16>*
  %7432 = load <16 x i16>, <16 x i16>* %7431, align 2, !tbaa !396
  %7433 = getelementptr inbounds i16, i16* %7423, i64 -16
  %7434 = bitcast i16* %7433 to <16 x i16>*
  %7435 = load <16 x i16>, <16 x i16>* %7434, align 2, !tbaa !396
  %7436 = getelementptr inbounds i16, i16* %7423, i64 -30
  %7437 = bitcast i16* %7436 to <16 x i16>*
  %7438 = load <16 x i16>, <16 x i16>* %7437, align 2, !tbaa !396
  %7439 = getelementptr inbounds i16, i16* %7423, i64 -14
  %7440 = bitcast i16* %7439 to <16 x i16>*
  %7441 = load <16 x i16>, <16 x i16>* %7440, align 2, !tbaa !396
  %7442 = getelementptr inbounds i16, i16* %7423, i64 -29
  %7443 = bitcast i16* %7442 to <16 x i16>*
  %7444 = load <16 x i16>, <16 x i16>* %7443, align 2, !tbaa !396
  %7445 = getelementptr inbounds i16, i16* %7423, i64 -13
  %7446 = bitcast i16* %7445 to <16 x i16>*
  %7447 = load <16 x i16>, <16 x i16>* %7446, align 2, !tbaa !396
  %7448 = getelementptr inbounds i16, i16* %7423, i64 -28
  %7449 = bitcast i16* %7448 to <16 x i16>*
  %7450 = load <16 x i16>, <16 x i16>* %7449, align 2, !tbaa !396
  %7451 = getelementptr inbounds i16, i16* %7423, i64 -12
  %7452 = bitcast i16* %7451 to <16 x i16>*
  %7453 = load <16 x i16>, <16 x i16>* %7452, align 2, !tbaa !396
  %7454 = getelementptr inbounds i16, i16* %7423, i64 -26
  %7455 = bitcast i16* %7454 to <16 x i16>*
  %7456 = load <16 x i16>, <16 x i16>* %7455, align 2, !tbaa !396
  %7457 = getelementptr inbounds i16, i16* %7423, i64 -10
  %7458 = bitcast i16* %7457 to <16 x i16>*
  %7459 = load <16 x i16>, <16 x i16>* %7458, align 2, !tbaa !396
  %7460 = getelementptr inbounds i16, i16* %7423, i64 -27
  %7461 = bitcast i16* %7460 to <16 x i16>*
  %7462 = load <16 x i16>, <16 x i16>* %7461, align 2, !tbaa !396
  %7463 = getelementptr inbounds i16, i16* %7423, i64 -11
  %7464 = bitcast i16* %7463 to <16 x i16>*
  %7465 = load <16 x i16>, <16 x i16>* %7464, align 2, !tbaa !396
  %7466 = add <16 x i16> %7432, %7426
  %7467 = add <16 x i16> %7466, %7438
  %7468 = add <16 x i16> %7467, %7444
  %7469 = add <16 x i16> %7468, %7450
  %7470 = add <16 x i16> %7469, %7456
  %7471 = add <16 x i16> %7470, %7462
  %7472 = add <16 x i16> %7435, %7429
  %7473 = add <16 x i16> %7472, %7441
  %7474 = add <16 x i16> %7473, %7447
  %7475 = add <16 x i16> %7474, %7453
  %7476 = add <16 x i16> %7475, %7459
  %7477 = add <16 x i16> %7476, %7465
  %7478 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7471, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7479 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7477, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7480 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7478, <16 x i16> %7471)
  %7481 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7479, <16 x i16> %7477)
  %7482 = shufflevector <16 x i16> %7480, <16 x i16> %7481, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7483 = lshr <32 x i16> %7482, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7484 = shufflevector <32 x i16> %7483, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7485 = zext i32 %.pre-phi3534 to i64
  %7486 = mul nsw i64 %97, %7485
  %7487 = add nsw i64 %99, %7486
  %7488 = getelementptr inbounds i16, i16* %blur_x, i64 %7487
  %7489 = getelementptr inbounds i16, i16* %7488, i64 -32
  %7490 = bitcast i16* %7489 to <16 x i16>*
  store <16 x i16> %7484, <16 x i16>* %7490, align 2, !tbaa !399
  %7491 = shufflevector <32 x i16> %7483, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7492 = getelementptr inbounds i16, i16* %7488, i64 -16
  %7493 = bitcast i16* %7492 to <16 x i16>*
  store <16 x i16> %7491, <16 x i16>* %7493, align 2, !tbaa !399
  %7494 = zext i32 %.pre-phi3512 to i64
  %7495 = mul nsw i64 %7494, %116
  %7496 = add nsw i64 %7495, %94
  %7497 = getelementptr inbounds i16, i16* %blur_x, i64 %7496
  %7498 = getelementptr inbounds i16, i16* %7497, i64 -32
  %7499 = bitcast i16* %7498 to <16 x i16>*
  %7500 = load <16 x i16>, <16 x i16>* %7499, align 2, !tbaa !399
  %7501 = getelementptr inbounds i16, i16* %7497, i64 -16
  %7502 = bitcast i16* %7501 to <16 x i16>*
  %7503 = load <16 x i16>, <16 x i16>* %7502, align 2, !tbaa !399
  %7504 = zext i32 %.pre-phi3508 to i64
  %7505 = mul nsw i64 %7504, %116
  %7506 = add nsw i64 %7505, %94
  %7507 = getelementptr inbounds i16, i16* %blur_x, i64 %7506
  %7508 = getelementptr inbounds i16, i16* %7507, i64 -32
  %7509 = bitcast i16* %7508 to <16 x i16>*
  %7510 = load <16 x i16>, <16 x i16>* %7509, align 2, !tbaa !399
  %7511 = getelementptr inbounds i16, i16* %7507, i64 -16
  %7512 = bitcast i16* %7511 to <16 x i16>*
  %7513 = load <16 x i16>, <16 x i16>* %7512, align 2, !tbaa !399
  %7514 = zext i32 %.pre-phi3516 to i64
  %7515 = mul nsw i64 %7514, %116
  %7516 = add nsw i64 %7515, %94
  %7517 = getelementptr inbounds i16, i16* %blur_x, i64 %7516
  %7518 = getelementptr inbounds i16, i16* %7517, i64 -32
  %7519 = bitcast i16* %7518 to <16 x i16>*
  %7520 = load <16 x i16>, <16 x i16>* %7519, align 2, !tbaa !399
  %7521 = getelementptr inbounds i16, i16* %7517, i64 -16
  %7522 = bitcast i16* %7521 to <16 x i16>*
  %7523 = load <16 x i16>, <16 x i16>* %7522, align 2, !tbaa !399
  %7524 = zext i32 %.pre-phi3520 to i64
  %7525 = mul nsw i64 %7524, %116
  %7526 = add nsw i64 %7525, %94
  %7527 = getelementptr inbounds i16, i16* %blur_x, i64 %7526
  %7528 = getelementptr inbounds i16, i16* %7527, i64 -32
  %7529 = bitcast i16* %7528 to <16 x i16>*
  %7530 = load <16 x i16>, <16 x i16>* %7529, align 2, !tbaa !399
  %7531 = getelementptr inbounds i16, i16* %7527, i64 -16
  %7532 = bitcast i16* %7531 to <16 x i16>*
  %7533 = load <16 x i16>, <16 x i16>* %7532, align 2, !tbaa !399
  %7534 = zext i32 %.pre-phi3524 to i64
  %7535 = mul nsw i64 %7534, %116
  %7536 = add nsw i64 %7535, %94
  %7537 = getelementptr inbounds i16, i16* %blur_x, i64 %7536
  %7538 = getelementptr inbounds i16, i16* %7537, i64 -32
  %7539 = bitcast i16* %7538 to <16 x i16>*
  %7540 = load <16 x i16>, <16 x i16>* %7539, align 2, !tbaa !399
  %7541 = getelementptr inbounds i16, i16* %7537, i64 -16
  %7542 = bitcast i16* %7541 to <16 x i16>*
  %7543 = load <16 x i16>, <16 x i16>* %7542, align 2, !tbaa !399
  %7544 = mul nsw i64 %7485, %116
  %7545 = add nsw i64 %7544, %94
  %7546 = getelementptr inbounds i16, i16* %blur_x, i64 %7545
  %7547 = getelementptr inbounds i16, i16* %7546, i64 -32
  %7548 = bitcast i16* %7547 to <16 x i16>*
  %7549 = load <16 x i16>, <16 x i16>* %7548, align 2, !tbaa !399
  %7550 = getelementptr inbounds i16, i16* %7546, i64 -16
  %7551 = bitcast i16* %7550 to <16 x i16>*
  %7552 = load <16 x i16>, <16 x i16>* %7551, align 2, !tbaa !399
  %7553 = zext i32 %.pre-phi3528 to i64
  %7554 = mul nsw i64 %7553, %116
  %7555 = add nsw i64 %7554, %94
  %7556 = getelementptr inbounds i16, i16* %blur_x, i64 %7555
  %7557 = getelementptr inbounds i16, i16* %7556, i64 -32
  %7558 = bitcast i16* %7557 to <16 x i16>*
  %7559 = load <16 x i16>, <16 x i16>* %7558, align 2, !tbaa !399
  %7560 = getelementptr inbounds i16, i16* %7556, i64 -16
  %7561 = bitcast i16* %7560 to <16 x i16>*
  %7562 = load <16 x i16>, <16 x i16>* %7561, align 2, !tbaa !399
  %7563 = add <16 x i16> %7510, %7500
  %7564 = add <16 x i16> %7563, %7520
  %7565 = add <16 x i16> %7564, %7530
  %7566 = add <16 x i16> %7565, %7540
  %7567 = add <16 x i16> %7566, %7549
  %7568 = add <16 x i16> %7567, %7559
  %7569 = add <16 x i16> %7513, %7503
  %7570 = add <16 x i16> %7569, %7523
  %7571 = add <16 x i16> %7570, %7533
  %7572 = add <16 x i16> %7571, %7543
  %7573 = add <16 x i16> %7572, %7552
  %7574 = add <16 x i16> %7573, %7562
  %7575 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7568, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7576 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7574, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7577 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7575, <16 x i16> %7568)
  %7578 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7576, <16 x i16> %7574)
  %7579 = shufflevector <16 x i16> %7577, <16 x i16> %7578, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7580 = lshr <32 x i16> %7579, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7581 = shufflevector <32 x i16> %7580, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7582 = sext i32 %a26 to i64
  %7583 = add nsw i64 %7582, 9
  %7584 = mul nsw i64 %7583, %117
  %7585 = add nsw i64 %119, %7584
  %7586 = getelementptr inbounds i16, i16* %66, i64 %7585
  %7587 = getelementptr inbounds i16, i16* %7586, i64 -32
  %7588 = bitcast i16* %7587 to <16 x i16>*
  store <16 x i16> %7581, <16 x i16>* %7588, align 2, !tbaa !401
  %7589 = shufflevector <32 x i16> %7580, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7590 = getelementptr inbounds i16, i16* %7586, i64 -16
  %7591 = bitcast i16* %7590 to <16 x i16>*
  store <16 x i16> %7589, <16 x i16>* %7591, align 2, !tbaa !401
  br label %after_bb327

"for blur_y.s0.x.x.rebased332":                   ; preds = %"for blur_y.s0.x.x.rebased332.preheader", %"consume blur_x339"
  %indvars.iv3306 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased332.preheader" ], [ %indvars.iv.next3307, %"consume blur_x339" ]
  %7592 = add nsw i64 %indvars.iv3306, %101
  %7593 = icmp slt i64 %7592, 1
  %7594 = trunc i64 %7592 to i32
  %7595 = shl nsw i32 %7594, 5
  %7596 = icmp sgt i32 %4, %7595
  %7597 = or i1 %7593, %7596
  br i1 %7597, label %"produce blur_x338", label %"for blur_y.s0.x.x.rebased332.consume blur_x339_crit_edge"

"for blur_y.s0.x.x.rebased332.consume blur_x339_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased332"
  %.pre3551 = shl nsw i64 %7592, 5
  br label %"consume blur_x339"

"end for blur_y.s0.x.x.rebased333":               ; preds = %"consume blur_x339", %after_bb327
  br i1 %102, label %"for blur_y.s0.x.x.rebased340.preheader", label %"end for blur_y.s0.x.x.rebased341", !prof !386

"for blur_y.s0.x.x.rebased340.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased333"
  %7598 = sext i32 %t1778 to i64
  %7599 = zext i32 %.pre-phi3512 to i64
  %7600 = mul nsw i64 %7599, %116
  %7601 = sub nsw i64 %7600, %96
  %7602 = zext i32 %.pre-phi3508 to i64
  %7603 = mul nsw i64 %7602, %116
  %7604 = sub nsw i64 %7603, %96
  %7605 = zext i32 %.pre-phi3516 to i64
  %7606 = mul nsw i64 %7605, %116
  %7607 = sub nsw i64 %7606, %96
  %7608 = zext i32 %.pre-phi3520 to i64
  %7609 = mul nsw i64 %7608, %116
  %7610 = sub nsw i64 %7609, %96
  %7611 = zext i32 %.pre-phi3524 to i64
  %7612 = mul nsw i64 %7611, %116
  %7613 = sub nsw i64 %7612, %96
  %7614 = zext i32 %.pre-phi3534 to i64
  %7615 = mul nsw i64 %7614, %116
  %7616 = sub nsw i64 %7615, %96
  %7617 = zext i32 %.pre-phi3528 to i64
  %7618 = mul nsw i64 %7617, %116
  %7619 = sub nsw i64 %7618, %96
  %7620 = sext i32 %a26 to i64
  %7621 = add nsw i64 %7620, 9
  %7622 = mul nsw i64 %7621, %117
  %7623 = add nsw i64 %7622, %120
  br label %"for blur_y.s0.x.x.rebased340"

"produce blur_x338":                              ; preds = %"for blur_y.s0.x.x.rebased332"
  %t896 = add nsw i32 %7595, %t1905
  %7624 = sext i32 %t896 to i64
  %7625 = getelementptr inbounds i16, i16* %read_input, i64 %7624
  %7626 = getelementptr inbounds i16, i16* %7625, i64 1
  %7627 = bitcast i16* %7626 to <16 x i16>*
  %7628 = load <16 x i16>, <16 x i16>* %7627, align 2, !tbaa !396
  %7629 = getelementptr inbounds i16, i16* %7625, i64 17
  %7630 = bitcast i16* %7629 to <16 x i16>*
  %7631 = load <16 x i16>, <16 x i16>* %7630, align 2, !tbaa !396
  %7632 = bitcast i16* %7625 to <16 x i16>*
  %7633 = load <16 x i16>, <16 x i16>* %7632, align 2, !tbaa !396
  %7634 = getelementptr inbounds i16, i16* %7625, i64 16
  %7635 = bitcast i16* %7634 to <16 x i16>*
  %7636 = load <16 x i16>, <16 x i16>* %7635, align 2, !tbaa !396
  %7637 = getelementptr inbounds i16, i16* %7625, i64 2
  %7638 = bitcast i16* %7637 to <16 x i16>*
  %7639 = load <16 x i16>, <16 x i16>* %7638, align 2, !tbaa !396
  %7640 = getelementptr inbounds i16, i16* %7625, i64 18
  %7641 = bitcast i16* %7640 to <16 x i16>*
  %7642 = load <16 x i16>, <16 x i16>* %7641, align 2, !tbaa !396
  %7643 = getelementptr inbounds i16, i16* %7625, i64 3
  %7644 = bitcast i16* %7643 to <16 x i16>*
  %7645 = load <16 x i16>, <16 x i16>* %7644, align 2, !tbaa !396
  %7646 = getelementptr inbounds i16, i16* %7625, i64 19
  %7647 = bitcast i16* %7646 to <16 x i16>*
  %7648 = load <16 x i16>, <16 x i16>* %7647, align 2, !tbaa !396
  %7649 = getelementptr inbounds i16, i16* %7625, i64 4
  %7650 = bitcast i16* %7649 to <16 x i16>*
  %7651 = load <16 x i16>, <16 x i16>* %7650, align 2, !tbaa !396
  %7652 = getelementptr inbounds i16, i16* %7625, i64 20
  %7653 = bitcast i16* %7652 to <16 x i16>*
  %7654 = load <16 x i16>, <16 x i16>* %7653, align 2, !tbaa !396
  %7655 = getelementptr inbounds i16, i16* %7625, i64 6
  %7656 = bitcast i16* %7655 to <16 x i16>*
  %7657 = load <16 x i16>, <16 x i16>* %7656, align 2, !tbaa !396
  %7658 = getelementptr inbounds i16, i16* %7625, i64 22
  %7659 = bitcast i16* %7658 to <16 x i16>*
  %7660 = load <16 x i16>, <16 x i16>* %7659, align 2, !tbaa !396
  %7661 = getelementptr inbounds i16, i16* %7625, i64 5
  %7662 = bitcast i16* %7661 to <16 x i16>*
  %7663 = load <16 x i16>, <16 x i16>* %7662, align 2, !tbaa !396
  %7664 = getelementptr inbounds i16, i16* %7625, i64 21
  %7665 = bitcast i16* %7664 to <16 x i16>*
  %7666 = load <16 x i16>, <16 x i16>* %7665, align 2, !tbaa !396
  %7667 = add <16 x i16> %7633, %7628
  %7668 = add <16 x i16> %7667, %7639
  %7669 = add <16 x i16> %7668, %7645
  %7670 = add <16 x i16> %7669, %7651
  %7671 = add <16 x i16> %7670, %7657
  %7672 = add <16 x i16> %7671, %7663
  %7673 = add <16 x i16> %7636, %7631
  %7674 = add <16 x i16> %7673, %7642
  %7675 = add <16 x i16> %7674, %7648
  %7676 = add <16 x i16> %7675, %7654
  %7677 = add <16 x i16> %7676, %7660
  %7678 = add <16 x i16> %7677, %7666
  %7679 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7672, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7680 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7678, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7681 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7679, <16 x i16> %7672)
  %7682 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7680, <16 x i16> %7678)
  %7683 = shufflevector <16 x i16> %7681, <16 x i16> %7682, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7684 = lshr <32 x i16> %7683, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7685 = shufflevector <32 x i16> %7684, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7686 = shl nsw i64 %7592, 5
  %7687 = add nsw i64 %7686, %7397
  %7688 = getelementptr inbounds i16, i16* %blur_x, i64 %7687
  %7689 = bitcast i16* %7688 to <16 x i16>*
  store <16 x i16> %7685, <16 x i16>* %7689, align 2, !tbaa !399
  %7690 = shufflevector <32 x i16> %7684, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7691 = getelementptr inbounds i16, i16* %7688, i64 16
  %7692 = bitcast i16* %7691 to <16 x i16>*
  store <16 x i16> %7690, <16 x i16>* %7692, align 2, !tbaa !399
  br label %"consume blur_x339"

"consume blur_x339":                              ; preds = %"for blur_y.s0.x.x.rebased332.consume blur_x339_crit_edge", %"produce blur_x338"
  %.pre-phi3552 = phi i64 [ %.pre3551, %"for blur_y.s0.x.x.rebased332.consume blur_x339_crit_edge" ], [ %7686, %"produce blur_x338" ]
  %7693 = add nsw i64 %7400, %.pre-phi3552
  %7694 = getelementptr inbounds i16, i16* %blur_x, i64 %7693
  %7695 = bitcast i16* %7694 to <16 x i16>*
  %7696 = load <16 x i16>, <16 x i16>* %7695, align 2, !tbaa !399
  %7697 = getelementptr inbounds i16, i16* %7694, i64 16
  %7698 = bitcast i16* %7697 to <16 x i16>*
  %7699 = load <16 x i16>, <16 x i16>* %7698, align 2, !tbaa !399
  %7700 = add nsw i64 %7403, %.pre-phi3552
  %7701 = getelementptr inbounds i16, i16* %blur_x, i64 %7700
  %7702 = bitcast i16* %7701 to <16 x i16>*
  %7703 = load <16 x i16>, <16 x i16>* %7702, align 2, !tbaa !399
  %7704 = getelementptr inbounds i16, i16* %7701, i64 16
  %7705 = bitcast i16* %7704 to <16 x i16>*
  %7706 = load <16 x i16>, <16 x i16>* %7705, align 2, !tbaa !399
  %7707 = add nsw i64 %7406, %.pre-phi3552
  %7708 = getelementptr inbounds i16, i16* %blur_x, i64 %7707
  %7709 = bitcast i16* %7708 to <16 x i16>*
  %7710 = load <16 x i16>, <16 x i16>* %7709, align 2, !tbaa !399
  %7711 = getelementptr inbounds i16, i16* %7708, i64 16
  %7712 = bitcast i16* %7711 to <16 x i16>*
  %7713 = load <16 x i16>, <16 x i16>* %7712, align 2, !tbaa !399
  %7714 = add nsw i64 %7409, %.pre-phi3552
  %7715 = getelementptr inbounds i16, i16* %blur_x, i64 %7714
  %7716 = bitcast i16* %7715 to <16 x i16>*
  %7717 = load <16 x i16>, <16 x i16>* %7716, align 2, !tbaa !399
  %7718 = getelementptr inbounds i16, i16* %7715, i64 16
  %7719 = bitcast i16* %7718 to <16 x i16>*
  %7720 = load <16 x i16>, <16 x i16>* %7719, align 2, !tbaa !399
  %7721 = add nsw i64 %7412, %.pre-phi3552
  %7722 = getelementptr inbounds i16, i16* %blur_x, i64 %7721
  %7723 = bitcast i16* %7722 to <16 x i16>*
  %7724 = load <16 x i16>, <16 x i16>* %7723, align 2, !tbaa !399
  %7725 = getelementptr inbounds i16, i16* %7722, i64 16
  %7726 = bitcast i16* %7725 to <16 x i16>*
  %7727 = load <16 x i16>, <16 x i16>* %7726, align 2, !tbaa !399
  %7728 = add nsw i64 %7415, %.pre-phi3552
  %7729 = getelementptr inbounds i16, i16* %blur_x, i64 %7728
  %7730 = bitcast i16* %7729 to <16 x i16>*
  %7731 = load <16 x i16>, <16 x i16>* %7730, align 2, !tbaa !399
  %7732 = getelementptr inbounds i16, i16* %7729, i64 16
  %7733 = bitcast i16* %7732 to <16 x i16>*
  %7734 = load <16 x i16>, <16 x i16>* %7733, align 2, !tbaa !399
  %7735 = add nsw i64 %7418, %.pre-phi3552
  %7736 = getelementptr inbounds i16, i16* %blur_x, i64 %7735
  %7737 = bitcast i16* %7736 to <16 x i16>*
  %7738 = load <16 x i16>, <16 x i16>* %7737, align 2, !tbaa !399
  %7739 = getelementptr inbounds i16, i16* %7736, i64 16
  %7740 = bitcast i16* %7739 to <16 x i16>*
  %7741 = load <16 x i16>, <16 x i16>* %7740, align 2, !tbaa !399
  %7742 = add <16 x i16> %7703, %7696
  %7743 = add <16 x i16> %7742, %7710
  %7744 = add <16 x i16> %7743, %7717
  %7745 = add <16 x i16> %7744, %7724
  %7746 = add <16 x i16> %7745, %7731
  %7747 = add <16 x i16> %7746, %7738
  %7748 = add <16 x i16> %7706, %7699
  %7749 = add <16 x i16> %7748, %7713
  %7750 = add <16 x i16> %7749, %7720
  %7751 = add <16 x i16> %7750, %7727
  %7752 = add <16 x i16> %7751, %7734
  %7753 = add <16 x i16> %7752, %7741
  %7754 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7747, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7755 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7753, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7756 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7754, <16 x i16> %7747)
  %7757 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7755, <16 x i16> %7753)
  %7758 = shufflevector <16 x i16> %7756, <16 x i16> %7757, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7759 = lshr <32 x i16> %7758, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7760 = shufflevector <32 x i16> %7759, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7761 = add nsw i64 %7422, %.pre-phi3552
  %7762 = getelementptr inbounds i16, i16* %66, i64 %7761
  %7763 = bitcast i16* %7762 to <16 x i16>*
  store <16 x i16> %7760, <16 x i16>* %7763, align 2, !tbaa !401
  %7764 = shufflevector <32 x i16> %7759, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7765 = getelementptr inbounds i16, i16* %7762, i64 16
  %7766 = bitcast i16* %7765 to <16 x i16>*
  store <16 x i16> %7764, <16 x i16>* %7766, align 2, !tbaa !401
  %indvars.iv.next3307 = add nuw nsw i64 %indvars.iv3306, 1
  %.not2782 = icmp eq i64 %indvars.iv.next3307, %188
  br i1 %.not2782, label %"end for blur_y.s0.x.x.rebased333", label %"for blur_y.s0.x.x.rebased332"

"for blur_y.s0.x.x.rebased340":                   ; preds = %"for blur_y.s0.x.x.rebased340.preheader", %"consume blur_x348"
  %blur_y.s0.x.x.rebased342 = phi i32 [ %7917, %"consume blur_x348" ], [ 0, %"for blur_y.s0.x.x.rebased340.preheader" ]
  %7767 = add nsw i32 %blur_y.s0.x.x.rebased342, %t1670
  %a182 = shl nsw i32 %7767, 5
  %7768 = icmp sgt i32 %a14, %a182
  %b188 = select i1 %7768, i32 %a182, i32 %a14
  %7769 = icmp slt i32 %7767, 1
  %7770 = icmp sgt i32 %4, %a182
  %7771 = or i1 %7769, %7770
  br i1 %7771, label %"produce blur_x346", label %"consume blur_x348"

"end for blur_y.s0.x.x.rebased341":               ; preds = %"consume blur_x348", %"end for blur_y.s0.x.x.rebased333"
  br i1 %34, label %"produce blur_x352", label %after_bb349

"produce blur_x346":                              ; preds = %"for blur_y.s0.x.x.rebased340"
  %7772 = icmp slt i32 %b188, %4
  %blur_x.s0.x.v1.base.s347 = select i1 %7772, i32 %b188, i32 %4
  %t901 = add nsw i32 %blur_x.s0.x.v1.base.s347, %t1905
  %7773 = sext i32 %t901 to i64
  %7774 = getelementptr inbounds i16, i16* %read_input, i64 %7773
  %7775 = getelementptr inbounds i16, i16* %7774, i64 1
  %7776 = bitcast i16* %7775 to <16 x i16>*
  %7777 = load <16 x i16>, <16 x i16>* %7776, align 2, !tbaa !396
  %7778 = getelementptr inbounds i16, i16* %7774, i64 17
  %7779 = bitcast i16* %7778 to <16 x i16>*
  %7780 = load <16 x i16>, <16 x i16>* %7779, align 2, !tbaa !396
  %7781 = bitcast i16* %7774 to <16 x i16>*
  %7782 = load <16 x i16>, <16 x i16>* %7781, align 2, !tbaa !396
  %7783 = getelementptr inbounds i16, i16* %7774, i64 16
  %7784 = bitcast i16* %7783 to <16 x i16>*
  %7785 = load <16 x i16>, <16 x i16>* %7784, align 2, !tbaa !396
  %7786 = getelementptr inbounds i16, i16* %7774, i64 2
  %7787 = bitcast i16* %7786 to <16 x i16>*
  %7788 = load <16 x i16>, <16 x i16>* %7787, align 2, !tbaa !396
  %7789 = getelementptr inbounds i16, i16* %7774, i64 18
  %7790 = bitcast i16* %7789 to <16 x i16>*
  %7791 = load <16 x i16>, <16 x i16>* %7790, align 2, !tbaa !396
  %7792 = getelementptr inbounds i16, i16* %7774, i64 3
  %7793 = bitcast i16* %7792 to <16 x i16>*
  %7794 = load <16 x i16>, <16 x i16>* %7793, align 2, !tbaa !396
  %7795 = getelementptr inbounds i16, i16* %7774, i64 19
  %7796 = bitcast i16* %7795 to <16 x i16>*
  %7797 = load <16 x i16>, <16 x i16>* %7796, align 2, !tbaa !396
  %7798 = getelementptr inbounds i16, i16* %7774, i64 4
  %7799 = bitcast i16* %7798 to <16 x i16>*
  %7800 = load <16 x i16>, <16 x i16>* %7799, align 2, !tbaa !396
  %7801 = getelementptr inbounds i16, i16* %7774, i64 20
  %7802 = bitcast i16* %7801 to <16 x i16>*
  %7803 = load <16 x i16>, <16 x i16>* %7802, align 2, !tbaa !396
  %7804 = getelementptr inbounds i16, i16* %7774, i64 6
  %7805 = bitcast i16* %7804 to <16 x i16>*
  %7806 = load <16 x i16>, <16 x i16>* %7805, align 2, !tbaa !396
  %7807 = getelementptr inbounds i16, i16* %7774, i64 22
  %7808 = bitcast i16* %7807 to <16 x i16>*
  %7809 = load <16 x i16>, <16 x i16>* %7808, align 2, !tbaa !396
  %7810 = getelementptr inbounds i16, i16* %7774, i64 5
  %7811 = bitcast i16* %7810 to <16 x i16>*
  %7812 = load <16 x i16>, <16 x i16>* %7811, align 2, !tbaa !396
  %7813 = getelementptr inbounds i16, i16* %7774, i64 21
  %7814 = bitcast i16* %7813 to <16 x i16>*
  %7815 = load <16 x i16>, <16 x i16>* %7814, align 2, !tbaa !396
  %7816 = add <16 x i16> %7782, %7777
  %7817 = add <16 x i16> %7816, %7788
  %7818 = add <16 x i16> %7817, %7794
  %7819 = add <16 x i16> %7818, %7800
  %7820 = add <16 x i16> %7819, %7806
  %7821 = add <16 x i16> %7820, %7812
  %7822 = add <16 x i16> %7785, %7780
  %7823 = add <16 x i16> %7822, %7791
  %7824 = add <16 x i16> %7823, %7797
  %7825 = add <16 x i16> %7824, %7803
  %7826 = add <16 x i16> %7825, %7809
  %7827 = add <16 x i16> %7826, %7815
  %7828 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7821, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7829 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7827, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7830 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7828, <16 x i16> %7821)
  %7831 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7829, <16 x i16> %7827)
  %7832 = shufflevector <16 x i16> %7830, <16 x i16> %7831, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7833 = lshr <32 x i16> %7832, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7834 = shufflevector <32 x i16> %7833, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7835 = sext i32 %blur_x.s0.x.v1.base.s347 to i64
  %7836 = add nsw i64 %7835, %7598
  %7837 = getelementptr inbounds i16, i16* %blur_x, i64 %7836
  %7838 = bitcast i16* %7837 to <16 x i16>*
  store <16 x i16> %7834, <16 x i16>* %7838, align 2, !tbaa !399
  %7839 = shufflevector <32 x i16> %7833, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7840 = getelementptr inbounds i16, i16* %7837, i64 16
  %7841 = bitcast i16* %7840 to <16 x i16>*
  store <16 x i16> %7839, <16 x i16>* %7841, align 2, !tbaa !399
  br label %"consume blur_x348"

"consume blur_x348":                              ; preds = %"for blur_y.s0.x.x.rebased340", %"produce blur_x346"
  %7842 = sext i32 %b188 to i64
  %7843 = add nsw i64 %7601, %7842
  %7844 = getelementptr inbounds i16, i16* %blur_x, i64 %7843
  %7845 = bitcast i16* %7844 to <16 x i16>*
  %7846 = load <16 x i16>, <16 x i16>* %7845, align 2, !tbaa !399
  %7847 = getelementptr inbounds i16, i16* %7844, i64 16
  %7848 = bitcast i16* %7847 to <16 x i16>*
  %7849 = load <16 x i16>, <16 x i16>* %7848, align 2, !tbaa !399
  %7850 = add nsw i64 %7604, %7842
  %7851 = getelementptr inbounds i16, i16* %blur_x, i64 %7850
  %7852 = bitcast i16* %7851 to <16 x i16>*
  %7853 = load <16 x i16>, <16 x i16>* %7852, align 2, !tbaa !399
  %7854 = getelementptr inbounds i16, i16* %7851, i64 16
  %7855 = bitcast i16* %7854 to <16 x i16>*
  %7856 = load <16 x i16>, <16 x i16>* %7855, align 2, !tbaa !399
  %7857 = add nsw i64 %7607, %7842
  %7858 = getelementptr inbounds i16, i16* %blur_x, i64 %7857
  %7859 = bitcast i16* %7858 to <16 x i16>*
  %7860 = load <16 x i16>, <16 x i16>* %7859, align 2, !tbaa !399
  %7861 = getelementptr inbounds i16, i16* %7858, i64 16
  %7862 = bitcast i16* %7861 to <16 x i16>*
  %7863 = load <16 x i16>, <16 x i16>* %7862, align 2, !tbaa !399
  %7864 = add nsw i64 %7610, %7842
  %7865 = getelementptr inbounds i16, i16* %blur_x, i64 %7864
  %7866 = bitcast i16* %7865 to <16 x i16>*
  %7867 = load <16 x i16>, <16 x i16>* %7866, align 2, !tbaa !399
  %7868 = getelementptr inbounds i16, i16* %7865, i64 16
  %7869 = bitcast i16* %7868 to <16 x i16>*
  %7870 = load <16 x i16>, <16 x i16>* %7869, align 2, !tbaa !399
  %7871 = add nsw i64 %7613, %7842
  %7872 = getelementptr inbounds i16, i16* %blur_x, i64 %7871
  %7873 = bitcast i16* %7872 to <16 x i16>*
  %7874 = load <16 x i16>, <16 x i16>* %7873, align 2, !tbaa !399
  %7875 = getelementptr inbounds i16, i16* %7872, i64 16
  %7876 = bitcast i16* %7875 to <16 x i16>*
  %7877 = load <16 x i16>, <16 x i16>* %7876, align 2, !tbaa !399
  %7878 = add nsw i64 %7616, %7842
  %7879 = getelementptr inbounds i16, i16* %blur_x, i64 %7878
  %7880 = bitcast i16* %7879 to <16 x i16>*
  %7881 = load <16 x i16>, <16 x i16>* %7880, align 2, !tbaa !399
  %7882 = getelementptr inbounds i16, i16* %7879, i64 16
  %7883 = bitcast i16* %7882 to <16 x i16>*
  %7884 = load <16 x i16>, <16 x i16>* %7883, align 2, !tbaa !399
  %7885 = add nsw i64 %7619, %7842
  %7886 = getelementptr inbounds i16, i16* %blur_x, i64 %7885
  %7887 = bitcast i16* %7886 to <16 x i16>*
  %7888 = load <16 x i16>, <16 x i16>* %7887, align 2, !tbaa !399
  %7889 = getelementptr inbounds i16, i16* %7886, i64 16
  %7890 = bitcast i16* %7889 to <16 x i16>*
  %7891 = load <16 x i16>, <16 x i16>* %7890, align 2, !tbaa !399
  %7892 = add <16 x i16> %7853, %7846
  %7893 = add <16 x i16> %7892, %7860
  %7894 = add <16 x i16> %7893, %7867
  %7895 = add <16 x i16> %7894, %7874
  %7896 = add <16 x i16> %7895, %7881
  %7897 = add <16 x i16> %7896, %7888
  %7898 = add <16 x i16> %7856, %7849
  %7899 = add <16 x i16> %7898, %7863
  %7900 = add <16 x i16> %7899, %7870
  %7901 = add <16 x i16> %7900, %7877
  %7902 = add <16 x i16> %7901, %7884
  %7903 = add <16 x i16> %7902, %7891
  %7904 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7897, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7905 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7903, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %7906 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7904, <16 x i16> %7897)
  %7907 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7905, <16 x i16> %7903)
  %7908 = shufflevector <16 x i16> %7906, <16 x i16> %7907, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7909 = lshr <32 x i16> %7908, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7910 = shufflevector <32 x i16> %7909, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7911 = add nsw i64 %7623, %7842
  %7912 = getelementptr inbounds i16, i16* %66, i64 %7911
  %7913 = bitcast i16* %7912 to <16 x i16>*
  store <16 x i16> %7910, <16 x i16>* %7913, align 2, !tbaa !401
  %7914 = shufflevector <32 x i16> %7909, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7915 = getelementptr inbounds i16, i16* %7912, i64 16
  %7916 = bitcast i16* %7915 to <16 x i16>*
  store <16 x i16> %7914, <16 x i16>* %7916, align 2, !tbaa !401
  %7917 = add nuw nsw i32 %blur_y.s0.x.x.rebased342, 1
  %.not2781 = icmp eq i32 %7917, %t1727
  br i1 %.not2781, label %"end for blur_y.s0.x.x.rebased341", label %"for blur_y.s0.x.x.rebased340"

after_bb349:                                      ; preds = %"end for blur_y.s0.x.x.rebased341", %"produce blur_x352"
  br i1 %100, label %"for blur_y.s0.x.x.rebased354.preheader", label %"end for blur_y.s0.x.x.rebased355", !prof !386

"for blur_y.s0.x.x.rebased354.preheader":         ; preds = %after_bb349
  %7918 = sext i32 %t1726 to i64
  %7919 = zext i32 %.pre-phi3516 to i64
  %7920 = mul nsw i64 %7919, %116
  %7921 = sub nsw i64 %7920, %96
  %7922 = zext i32 %.pre-phi3512 to i64
  %7923 = mul nsw i64 %7922, %116
  %7924 = sub nsw i64 %7923, %96
  %7925 = zext i32 %.pre-phi3520 to i64
  %7926 = mul nsw i64 %7925, %116
  %7927 = sub nsw i64 %7926, %96
  %7928 = zext i32 %.pre-phi3524 to i64
  %7929 = mul nsw i64 %7928, %116
  %7930 = sub nsw i64 %7929, %96
  %7931 = zext i32 %.pre-phi3528 to i64
  %7932 = mul nsw i64 %7931, %116
  %7933 = sub nsw i64 %7932, %96
  %7934 = zext i32 %.pre-phi to i64
  %7935 = mul nsw i64 %7934, %116
  %7936 = sub nsw i64 %7935, %96
  %7937 = zext i32 %.pre-phi3534 to i64
  %7938 = mul nsw i64 %7937, %116
  %7939 = sub nsw i64 %7938, %96
  %7940 = sext i32 %a26 to i64
  %7941 = add nsw i64 %7940, 10
  %7942 = mul nsw i64 %7941, %117
  %7943 = add nsw i64 %7942, %120
  br label %"for blur_y.s0.x.x.rebased354"

"produce blur_x352":                              ; preds = %"end for blur_y.s0.x.x.rebased341"
  %7944 = getelementptr inbounds i16, i16* %read_input, i64 %139
  %7945 = getelementptr inbounds i16, i16* %7944, i64 -31
  %7946 = bitcast i16* %7945 to <16 x i16>*
  %7947 = load <16 x i16>, <16 x i16>* %7946, align 2, !tbaa !396
  %7948 = getelementptr inbounds i16, i16* %7944, i64 -15
  %7949 = bitcast i16* %7948 to <16 x i16>*
  %7950 = load <16 x i16>, <16 x i16>* %7949, align 2, !tbaa !396
  %7951 = getelementptr inbounds i16, i16* %7944, i64 -32
  %7952 = bitcast i16* %7951 to <16 x i16>*
  %7953 = load <16 x i16>, <16 x i16>* %7952, align 2, !tbaa !396
  %7954 = getelementptr inbounds i16, i16* %7944, i64 -16
  %7955 = bitcast i16* %7954 to <16 x i16>*
  %7956 = load <16 x i16>, <16 x i16>* %7955, align 2, !tbaa !396
  %7957 = getelementptr inbounds i16, i16* %7944, i64 -30
  %7958 = bitcast i16* %7957 to <16 x i16>*
  %7959 = load <16 x i16>, <16 x i16>* %7958, align 2, !tbaa !396
  %7960 = getelementptr inbounds i16, i16* %7944, i64 -14
  %7961 = bitcast i16* %7960 to <16 x i16>*
  %7962 = load <16 x i16>, <16 x i16>* %7961, align 2, !tbaa !396
  %7963 = getelementptr inbounds i16, i16* %7944, i64 -29
  %7964 = bitcast i16* %7963 to <16 x i16>*
  %7965 = load <16 x i16>, <16 x i16>* %7964, align 2, !tbaa !396
  %7966 = getelementptr inbounds i16, i16* %7944, i64 -13
  %7967 = bitcast i16* %7966 to <16 x i16>*
  %7968 = load <16 x i16>, <16 x i16>* %7967, align 2, !tbaa !396
  %7969 = getelementptr inbounds i16, i16* %7944, i64 -28
  %7970 = bitcast i16* %7969 to <16 x i16>*
  %7971 = load <16 x i16>, <16 x i16>* %7970, align 2, !tbaa !396
  %7972 = getelementptr inbounds i16, i16* %7944, i64 -12
  %7973 = bitcast i16* %7972 to <16 x i16>*
  %7974 = load <16 x i16>, <16 x i16>* %7973, align 2, !tbaa !396
  %7975 = getelementptr inbounds i16, i16* %7944, i64 -26
  %7976 = bitcast i16* %7975 to <16 x i16>*
  %7977 = load <16 x i16>, <16 x i16>* %7976, align 2, !tbaa !396
  %7978 = getelementptr inbounds i16, i16* %7944, i64 -10
  %7979 = bitcast i16* %7978 to <16 x i16>*
  %7980 = load <16 x i16>, <16 x i16>* %7979, align 2, !tbaa !396
  %7981 = getelementptr inbounds i16, i16* %7944, i64 -27
  %7982 = bitcast i16* %7981 to <16 x i16>*
  %7983 = load <16 x i16>, <16 x i16>* %7982, align 2, !tbaa !396
  %7984 = getelementptr inbounds i16, i16* %7944, i64 -11
  %7985 = bitcast i16* %7984 to <16 x i16>*
  %7986 = load <16 x i16>, <16 x i16>* %7985, align 2, !tbaa !396
  %7987 = add <16 x i16> %7953, %7947
  %7988 = add <16 x i16> %7987, %7959
  %7989 = add <16 x i16> %7988, %7965
  %7990 = add <16 x i16> %7989, %7971
  %7991 = add <16 x i16> %7990, %7977
  %7992 = add <16 x i16> %7991, %7983
  %7993 = add <16 x i16> %7956, %7950
  %7994 = add <16 x i16> %7993, %7962
  %7995 = add <16 x i16> %7994, %7968
  %7996 = add <16 x i16> %7995, %7974
  %7997 = add <16 x i16> %7996, %7980
  %7998 = add <16 x i16> %7997, %7986
  %7999 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7992, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8000 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7998, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8001 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %7999, <16 x i16> %7992)
  %8002 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8000, <16 x i16> %7998)
  %8003 = shufflevector <16 x i16> %8001, <16 x i16> %8002, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8004 = lshr <32 x i16> %8003, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8005 = shufflevector <32 x i16> %8004, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8006 = zext i32 %.pre-phi to i64
  %8007 = mul nsw i64 %97, %8006
  %8008 = add nsw i64 %99, %8007
  %8009 = getelementptr inbounds i16, i16* %blur_x, i64 %8008
  %8010 = getelementptr inbounds i16, i16* %8009, i64 -32
  %8011 = bitcast i16* %8010 to <16 x i16>*
  store <16 x i16> %8005, <16 x i16>* %8011, align 2, !tbaa !399
  %8012 = shufflevector <32 x i16> %8004, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8013 = getelementptr inbounds i16, i16* %8009, i64 -16
  %8014 = bitcast i16* %8013 to <16 x i16>*
  store <16 x i16> %8012, <16 x i16>* %8014, align 2, !tbaa !399
  %8015 = zext i32 %.pre-phi3516 to i64
  %8016 = mul nsw i64 %8015, %116
  %8017 = add nsw i64 %8016, %94
  %8018 = getelementptr inbounds i16, i16* %blur_x, i64 %8017
  %8019 = getelementptr inbounds i16, i16* %8018, i64 -32
  %8020 = bitcast i16* %8019 to <16 x i16>*
  %8021 = load <16 x i16>, <16 x i16>* %8020, align 2, !tbaa !399
  %8022 = getelementptr inbounds i16, i16* %8018, i64 -16
  %8023 = bitcast i16* %8022 to <16 x i16>*
  %8024 = load <16 x i16>, <16 x i16>* %8023, align 2, !tbaa !399
  %8025 = zext i32 %.pre-phi3512 to i64
  %8026 = mul nsw i64 %8025, %116
  %8027 = add nsw i64 %8026, %94
  %8028 = getelementptr inbounds i16, i16* %blur_x, i64 %8027
  %8029 = getelementptr inbounds i16, i16* %8028, i64 -32
  %8030 = bitcast i16* %8029 to <16 x i16>*
  %8031 = load <16 x i16>, <16 x i16>* %8030, align 2, !tbaa !399
  %8032 = getelementptr inbounds i16, i16* %8028, i64 -16
  %8033 = bitcast i16* %8032 to <16 x i16>*
  %8034 = load <16 x i16>, <16 x i16>* %8033, align 2, !tbaa !399
  %8035 = zext i32 %.pre-phi3520 to i64
  %8036 = mul nsw i64 %8035, %116
  %8037 = add nsw i64 %8036, %94
  %8038 = getelementptr inbounds i16, i16* %blur_x, i64 %8037
  %8039 = getelementptr inbounds i16, i16* %8038, i64 -32
  %8040 = bitcast i16* %8039 to <16 x i16>*
  %8041 = load <16 x i16>, <16 x i16>* %8040, align 2, !tbaa !399
  %8042 = getelementptr inbounds i16, i16* %8038, i64 -16
  %8043 = bitcast i16* %8042 to <16 x i16>*
  %8044 = load <16 x i16>, <16 x i16>* %8043, align 2, !tbaa !399
  %8045 = zext i32 %.pre-phi3524 to i64
  %8046 = mul nsw i64 %8045, %116
  %8047 = add nsw i64 %8046, %94
  %8048 = getelementptr inbounds i16, i16* %blur_x, i64 %8047
  %8049 = getelementptr inbounds i16, i16* %8048, i64 -32
  %8050 = bitcast i16* %8049 to <16 x i16>*
  %8051 = load <16 x i16>, <16 x i16>* %8050, align 2, !tbaa !399
  %8052 = getelementptr inbounds i16, i16* %8048, i64 -16
  %8053 = bitcast i16* %8052 to <16 x i16>*
  %8054 = load <16 x i16>, <16 x i16>* %8053, align 2, !tbaa !399
  %8055 = zext i32 %.pre-phi3528 to i64
  %8056 = mul nsw i64 %8055, %116
  %8057 = add nsw i64 %8056, %94
  %8058 = getelementptr inbounds i16, i16* %blur_x, i64 %8057
  %8059 = getelementptr inbounds i16, i16* %8058, i64 -32
  %8060 = bitcast i16* %8059 to <16 x i16>*
  %8061 = load <16 x i16>, <16 x i16>* %8060, align 2, !tbaa !399
  %8062 = getelementptr inbounds i16, i16* %8058, i64 -16
  %8063 = bitcast i16* %8062 to <16 x i16>*
  %8064 = load <16 x i16>, <16 x i16>* %8063, align 2, !tbaa !399
  %8065 = mul nsw i64 %8006, %116
  %8066 = add nsw i64 %8065, %94
  %8067 = getelementptr inbounds i16, i16* %blur_x, i64 %8066
  %8068 = getelementptr inbounds i16, i16* %8067, i64 -32
  %8069 = bitcast i16* %8068 to <16 x i16>*
  %8070 = load <16 x i16>, <16 x i16>* %8069, align 2, !tbaa !399
  %8071 = getelementptr inbounds i16, i16* %8067, i64 -16
  %8072 = bitcast i16* %8071 to <16 x i16>*
  %8073 = load <16 x i16>, <16 x i16>* %8072, align 2, !tbaa !399
  %8074 = zext i32 %.pre-phi3534 to i64
  %8075 = mul nsw i64 %8074, %116
  %8076 = add nsw i64 %8075, %94
  %8077 = getelementptr inbounds i16, i16* %blur_x, i64 %8076
  %8078 = getelementptr inbounds i16, i16* %8077, i64 -32
  %8079 = bitcast i16* %8078 to <16 x i16>*
  %8080 = load <16 x i16>, <16 x i16>* %8079, align 2, !tbaa !399
  %8081 = getelementptr inbounds i16, i16* %8077, i64 -16
  %8082 = bitcast i16* %8081 to <16 x i16>*
  %8083 = load <16 x i16>, <16 x i16>* %8082, align 2, !tbaa !399
  %8084 = add <16 x i16> %8031, %8021
  %8085 = add <16 x i16> %8084, %8041
  %8086 = add <16 x i16> %8085, %8051
  %8087 = add <16 x i16> %8086, %8061
  %8088 = add <16 x i16> %8087, %8070
  %8089 = add <16 x i16> %8088, %8080
  %8090 = add <16 x i16> %8034, %8024
  %8091 = add <16 x i16> %8090, %8044
  %8092 = add <16 x i16> %8091, %8054
  %8093 = add <16 x i16> %8092, %8064
  %8094 = add <16 x i16> %8093, %8073
  %8095 = add <16 x i16> %8094, %8083
  %8096 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8089, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8097 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8095, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8098 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8096, <16 x i16> %8089)
  %8099 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8097, <16 x i16> %8095)
  %8100 = shufflevector <16 x i16> %8098, <16 x i16> %8099, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8101 = lshr <32 x i16> %8100, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8102 = shufflevector <32 x i16> %8101, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8103 = sext i32 %a26 to i64
  %8104 = add nsw i64 %8103, 10
  %8105 = mul nsw i64 %8104, %117
  %8106 = add nsw i64 %119, %8105
  %8107 = getelementptr inbounds i16, i16* %66, i64 %8106
  %8108 = getelementptr inbounds i16, i16* %8107, i64 -32
  %8109 = bitcast i16* %8108 to <16 x i16>*
  store <16 x i16> %8102, <16 x i16>* %8109, align 2, !tbaa !401
  %8110 = shufflevector <32 x i16> %8101, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8111 = getelementptr inbounds i16, i16* %8107, i64 -16
  %8112 = bitcast i16* %8111 to <16 x i16>*
  store <16 x i16> %8110, <16 x i16>* %8112, align 2, !tbaa !401
  br label %after_bb349

"for blur_y.s0.x.x.rebased354":                   ; preds = %"for blur_y.s0.x.x.rebased354.preheader", %"consume blur_x361"
  %indvars.iv3309 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased354.preheader" ], [ %indvars.iv.next3310, %"consume blur_x361" ]
  %8113 = add nsw i64 %indvars.iv3309, %101
  %8114 = icmp slt i64 %8113, 1
  %8115 = trunc i64 %8113 to i32
  %8116 = shl nsw i32 %8115, 5
  %8117 = icmp sgt i32 %4, %8116
  %8118 = or i1 %8114, %8117
  br i1 %8118, label %"produce blur_x360", label %"for blur_y.s0.x.x.rebased354.consume blur_x361_crit_edge"

"for blur_y.s0.x.x.rebased354.consume blur_x361_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased354"
  %.pre3553 = shl nsw i64 %8113, 5
  br label %"consume blur_x361"

"end for blur_y.s0.x.x.rebased355":               ; preds = %"consume blur_x361", %after_bb349
  br i1 %102, label %"for blur_y.s0.x.x.rebased362.preheader", label %"end for blur_y.s0.x.x.rebased363", !prof !386

"for blur_y.s0.x.x.rebased362.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased355"
  %8119 = sext i32 %t1726 to i64
  %8120 = zext i32 %.pre-phi3516 to i64
  %8121 = mul nsw i64 %8120, %116
  %8122 = sub nsw i64 %8121, %96
  %8123 = zext i32 %.pre-phi3512 to i64
  %8124 = mul nsw i64 %8123, %116
  %8125 = sub nsw i64 %8124, %96
  %8126 = zext i32 %.pre-phi3520 to i64
  %8127 = mul nsw i64 %8126, %116
  %8128 = sub nsw i64 %8127, %96
  %8129 = zext i32 %.pre-phi3524 to i64
  %8130 = mul nsw i64 %8129, %116
  %8131 = sub nsw i64 %8130, %96
  %8132 = zext i32 %.pre-phi3528 to i64
  %8133 = mul nsw i64 %8132, %116
  %8134 = sub nsw i64 %8133, %96
  %8135 = zext i32 %.pre-phi to i64
  %8136 = mul nsw i64 %8135, %116
  %8137 = sub nsw i64 %8136, %96
  %8138 = zext i32 %.pre-phi3534 to i64
  %8139 = mul nsw i64 %8138, %116
  %8140 = sub nsw i64 %8139, %96
  %8141 = sext i32 %a26 to i64
  %8142 = add nsw i64 %8141, 10
  %8143 = mul nsw i64 %8142, %117
  %8144 = add nsw i64 %8143, %120
  br label %"for blur_y.s0.x.x.rebased362"

"produce blur_x360":                              ; preds = %"for blur_y.s0.x.x.rebased354"
  %t912 = add nsw i32 %8116, %t1921
  %8145 = sext i32 %t912 to i64
  %8146 = getelementptr inbounds i16, i16* %read_input, i64 %8145
  %8147 = getelementptr inbounds i16, i16* %8146, i64 1
  %8148 = bitcast i16* %8147 to <16 x i16>*
  %8149 = load <16 x i16>, <16 x i16>* %8148, align 2, !tbaa !396
  %8150 = getelementptr inbounds i16, i16* %8146, i64 17
  %8151 = bitcast i16* %8150 to <16 x i16>*
  %8152 = load <16 x i16>, <16 x i16>* %8151, align 2, !tbaa !396
  %8153 = bitcast i16* %8146 to <16 x i16>*
  %8154 = load <16 x i16>, <16 x i16>* %8153, align 2, !tbaa !396
  %8155 = getelementptr inbounds i16, i16* %8146, i64 16
  %8156 = bitcast i16* %8155 to <16 x i16>*
  %8157 = load <16 x i16>, <16 x i16>* %8156, align 2, !tbaa !396
  %8158 = getelementptr inbounds i16, i16* %8146, i64 2
  %8159 = bitcast i16* %8158 to <16 x i16>*
  %8160 = load <16 x i16>, <16 x i16>* %8159, align 2, !tbaa !396
  %8161 = getelementptr inbounds i16, i16* %8146, i64 18
  %8162 = bitcast i16* %8161 to <16 x i16>*
  %8163 = load <16 x i16>, <16 x i16>* %8162, align 2, !tbaa !396
  %8164 = getelementptr inbounds i16, i16* %8146, i64 3
  %8165 = bitcast i16* %8164 to <16 x i16>*
  %8166 = load <16 x i16>, <16 x i16>* %8165, align 2, !tbaa !396
  %8167 = getelementptr inbounds i16, i16* %8146, i64 19
  %8168 = bitcast i16* %8167 to <16 x i16>*
  %8169 = load <16 x i16>, <16 x i16>* %8168, align 2, !tbaa !396
  %8170 = getelementptr inbounds i16, i16* %8146, i64 4
  %8171 = bitcast i16* %8170 to <16 x i16>*
  %8172 = load <16 x i16>, <16 x i16>* %8171, align 2, !tbaa !396
  %8173 = getelementptr inbounds i16, i16* %8146, i64 20
  %8174 = bitcast i16* %8173 to <16 x i16>*
  %8175 = load <16 x i16>, <16 x i16>* %8174, align 2, !tbaa !396
  %8176 = getelementptr inbounds i16, i16* %8146, i64 6
  %8177 = bitcast i16* %8176 to <16 x i16>*
  %8178 = load <16 x i16>, <16 x i16>* %8177, align 2, !tbaa !396
  %8179 = getelementptr inbounds i16, i16* %8146, i64 22
  %8180 = bitcast i16* %8179 to <16 x i16>*
  %8181 = load <16 x i16>, <16 x i16>* %8180, align 2, !tbaa !396
  %8182 = getelementptr inbounds i16, i16* %8146, i64 5
  %8183 = bitcast i16* %8182 to <16 x i16>*
  %8184 = load <16 x i16>, <16 x i16>* %8183, align 2, !tbaa !396
  %8185 = getelementptr inbounds i16, i16* %8146, i64 21
  %8186 = bitcast i16* %8185 to <16 x i16>*
  %8187 = load <16 x i16>, <16 x i16>* %8186, align 2, !tbaa !396
  %8188 = add <16 x i16> %8154, %8149
  %8189 = add <16 x i16> %8188, %8160
  %8190 = add <16 x i16> %8189, %8166
  %8191 = add <16 x i16> %8190, %8172
  %8192 = add <16 x i16> %8191, %8178
  %8193 = add <16 x i16> %8192, %8184
  %8194 = add <16 x i16> %8157, %8152
  %8195 = add <16 x i16> %8194, %8163
  %8196 = add <16 x i16> %8195, %8169
  %8197 = add <16 x i16> %8196, %8175
  %8198 = add <16 x i16> %8197, %8181
  %8199 = add <16 x i16> %8198, %8187
  %8200 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8193, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8201 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8199, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8202 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8200, <16 x i16> %8193)
  %8203 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8201, <16 x i16> %8199)
  %8204 = shufflevector <16 x i16> %8202, <16 x i16> %8203, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8205 = lshr <32 x i16> %8204, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8206 = shufflevector <32 x i16> %8205, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8207 = shl nsw i64 %8113, 5
  %8208 = add nsw i64 %8207, %7918
  %8209 = getelementptr inbounds i16, i16* %blur_x, i64 %8208
  %8210 = bitcast i16* %8209 to <16 x i16>*
  store <16 x i16> %8206, <16 x i16>* %8210, align 2, !tbaa !399
  %8211 = shufflevector <32 x i16> %8205, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8212 = getelementptr inbounds i16, i16* %8209, i64 16
  %8213 = bitcast i16* %8212 to <16 x i16>*
  store <16 x i16> %8211, <16 x i16>* %8213, align 2, !tbaa !399
  br label %"consume blur_x361"

"consume blur_x361":                              ; preds = %"for blur_y.s0.x.x.rebased354.consume blur_x361_crit_edge", %"produce blur_x360"
  %.pre-phi3554 = phi i64 [ %.pre3553, %"for blur_y.s0.x.x.rebased354.consume blur_x361_crit_edge" ], [ %8207, %"produce blur_x360" ]
  %8214 = add nsw i64 %7921, %.pre-phi3554
  %8215 = getelementptr inbounds i16, i16* %blur_x, i64 %8214
  %8216 = bitcast i16* %8215 to <16 x i16>*
  %8217 = load <16 x i16>, <16 x i16>* %8216, align 2, !tbaa !399
  %8218 = getelementptr inbounds i16, i16* %8215, i64 16
  %8219 = bitcast i16* %8218 to <16 x i16>*
  %8220 = load <16 x i16>, <16 x i16>* %8219, align 2, !tbaa !399
  %8221 = add nsw i64 %7924, %.pre-phi3554
  %8222 = getelementptr inbounds i16, i16* %blur_x, i64 %8221
  %8223 = bitcast i16* %8222 to <16 x i16>*
  %8224 = load <16 x i16>, <16 x i16>* %8223, align 2, !tbaa !399
  %8225 = getelementptr inbounds i16, i16* %8222, i64 16
  %8226 = bitcast i16* %8225 to <16 x i16>*
  %8227 = load <16 x i16>, <16 x i16>* %8226, align 2, !tbaa !399
  %8228 = add nsw i64 %7927, %.pre-phi3554
  %8229 = getelementptr inbounds i16, i16* %blur_x, i64 %8228
  %8230 = bitcast i16* %8229 to <16 x i16>*
  %8231 = load <16 x i16>, <16 x i16>* %8230, align 2, !tbaa !399
  %8232 = getelementptr inbounds i16, i16* %8229, i64 16
  %8233 = bitcast i16* %8232 to <16 x i16>*
  %8234 = load <16 x i16>, <16 x i16>* %8233, align 2, !tbaa !399
  %8235 = add nsw i64 %7930, %.pre-phi3554
  %8236 = getelementptr inbounds i16, i16* %blur_x, i64 %8235
  %8237 = bitcast i16* %8236 to <16 x i16>*
  %8238 = load <16 x i16>, <16 x i16>* %8237, align 2, !tbaa !399
  %8239 = getelementptr inbounds i16, i16* %8236, i64 16
  %8240 = bitcast i16* %8239 to <16 x i16>*
  %8241 = load <16 x i16>, <16 x i16>* %8240, align 2, !tbaa !399
  %8242 = add nsw i64 %7933, %.pre-phi3554
  %8243 = getelementptr inbounds i16, i16* %blur_x, i64 %8242
  %8244 = bitcast i16* %8243 to <16 x i16>*
  %8245 = load <16 x i16>, <16 x i16>* %8244, align 2, !tbaa !399
  %8246 = getelementptr inbounds i16, i16* %8243, i64 16
  %8247 = bitcast i16* %8246 to <16 x i16>*
  %8248 = load <16 x i16>, <16 x i16>* %8247, align 2, !tbaa !399
  %8249 = add nsw i64 %7936, %.pre-phi3554
  %8250 = getelementptr inbounds i16, i16* %blur_x, i64 %8249
  %8251 = bitcast i16* %8250 to <16 x i16>*
  %8252 = load <16 x i16>, <16 x i16>* %8251, align 2, !tbaa !399
  %8253 = getelementptr inbounds i16, i16* %8250, i64 16
  %8254 = bitcast i16* %8253 to <16 x i16>*
  %8255 = load <16 x i16>, <16 x i16>* %8254, align 2, !tbaa !399
  %8256 = add nsw i64 %7939, %.pre-phi3554
  %8257 = getelementptr inbounds i16, i16* %blur_x, i64 %8256
  %8258 = bitcast i16* %8257 to <16 x i16>*
  %8259 = load <16 x i16>, <16 x i16>* %8258, align 2, !tbaa !399
  %8260 = getelementptr inbounds i16, i16* %8257, i64 16
  %8261 = bitcast i16* %8260 to <16 x i16>*
  %8262 = load <16 x i16>, <16 x i16>* %8261, align 2, !tbaa !399
  %8263 = add <16 x i16> %8224, %8217
  %8264 = add <16 x i16> %8263, %8231
  %8265 = add <16 x i16> %8264, %8238
  %8266 = add <16 x i16> %8265, %8245
  %8267 = add <16 x i16> %8266, %8252
  %8268 = add <16 x i16> %8267, %8259
  %8269 = add <16 x i16> %8227, %8220
  %8270 = add <16 x i16> %8269, %8234
  %8271 = add <16 x i16> %8270, %8241
  %8272 = add <16 x i16> %8271, %8248
  %8273 = add <16 x i16> %8272, %8255
  %8274 = add <16 x i16> %8273, %8262
  %8275 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8268, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8276 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8274, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8277 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8275, <16 x i16> %8268)
  %8278 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8276, <16 x i16> %8274)
  %8279 = shufflevector <16 x i16> %8277, <16 x i16> %8278, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8280 = lshr <32 x i16> %8279, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8281 = shufflevector <32 x i16> %8280, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8282 = add nsw i64 %7943, %.pre-phi3554
  %8283 = getelementptr inbounds i16, i16* %66, i64 %8282
  %8284 = bitcast i16* %8283 to <16 x i16>*
  store <16 x i16> %8281, <16 x i16>* %8284, align 2, !tbaa !401
  %8285 = shufflevector <32 x i16> %8280, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8286 = getelementptr inbounds i16, i16* %8283, i64 16
  %8287 = bitcast i16* %8286 to <16 x i16>*
  store <16 x i16> %8285, <16 x i16>* %8287, align 2, !tbaa !401
  %indvars.iv.next3310 = add nuw nsw i64 %indvars.iv3309, 1
  %.not2780 = icmp eq i64 %indvars.iv.next3310, %188
  br i1 %.not2780, label %"end for blur_y.s0.x.x.rebased355", label %"for blur_y.s0.x.x.rebased354"

"for blur_y.s0.x.x.rebased362":                   ; preds = %"for blur_y.s0.x.x.rebased362.preheader", %"consume blur_x370"
  %blur_y.s0.x.x.rebased364 = phi i32 [ %8438, %"consume blur_x370" ], [ 0, %"for blur_y.s0.x.x.rebased362.preheader" ]
  %8288 = add nsw i32 %blur_y.s0.x.x.rebased364, %t1670
  %a189 = shl nsw i32 %8288, 5
  %8289 = icmp sgt i32 %a14, %a189
  %b195 = select i1 %8289, i32 %a189, i32 %a14
  %8290 = icmp slt i32 %8288, 1
  %8291 = icmp sgt i32 %4, %a189
  %8292 = or i1 %8290, %8291
  br i1 %8292, label %"produce blur_x368", label %"consume blur_x370"

"end for blur_y.s0.x.x.rebased363":               ; preds = %"consume blur_x370", %"end for blur_y.s0.x.x.rebased355"
  br i1 %34, label %"produce blur_x374", label %after_bb371

"produce blur_x368":                              ; preds = %"for blur_y.s0.x.x.rebased362"
  %8293 = icmp slt i32 %b195, %4
  %blur_x.s0.x.v1.base.s369 = select i1 %8293, i32 %b195, i32 %4
  %t917 = add nsw i32 %blur_x.s0.x.v1.base.s369, %t1921
  %8294 = sext i32 %t917 to i64
  %8295 = getelementptr inbounds i16, i16* %read_input, i64 %8294
  %8296 = getelementptr inbounds i16, i16* %8295, i64 1
  %8297 = bitcast i16* %8296 to <16 x i16>*
  %8298 = load <16 x i16>, <16 x i16>* %8297, align 2, !tbaa !396
  %8299 = getelementptr inbounds i16, i16* %8295, i64 17
  %8300 = bitcast i16* %8299 to <16 x i16>*
  %8301 = load <16 x i16>, <16 x i16>* %8300, align 2, !tbaa !396
  %8302 = bitcast i16* %8295 to <16 x i16>*
  %8303 = load <16 x i16>, <16 x i16>* %8302, align 2, !tbaa !396
  %8304 = getelementptr inbounds i16, i16* %8295, i64 16
  %8305 = bitcast i16* %8304 to <16 x i16>*
  %8306 = load <16 x i16>, <16 x i16>* %8305, align 2, !tbaa !396
  %8307 = getelementptr inbounds i16, i16* %8295, i64 2
  %8308 = bitcast i16* %8307 to <16 x i16>*
  %8309 = load <16 x i16>, <16 x i16>* %8308, align 2, !tbaa !396
  %8310 = getelementptr inbounds i16, i16* %8295, i64 18
  %8311 = bitcast i16* %8310 to <16 x i16>*
  %8312 = load <16 x i16>, <16 x i16>* %8311, align 2, !tbaa !396
  %8313 = getelementptr inbounds i16, i16* %8295, i64 3
  %8314 = bitcast i16* %8313 to <16 x i16>*
  %8315 = load <16 x i16>, <16 x i16>* %8314, align 2, !tbaa !396
  %8316 = getelementptr inbounds i16, i16* %8295, i64 19
  %8317 = bitcast i16* %8316 to <16 x i16>*
  %8318 = load <16 x i16>, <16 x i16>* %8317, align 2, !tbaa !396
  %8319 = getelementptr inbounds i16, i16* %8295, i64 4
  %8320 = bitcast i16* %8319 to <16 x i16>*
  %8321 = load <16 x i16>, <16 x i16>* %8320, align 2, !tbaa !396
  %8322 = getelementptr inbounds i16, i16* %8295, i64 20
  %8323 = bitcast i16* %8322 to <16 x i16>*
  %8324 = load <16 x i16>, <16 x i16>* %8323, align 2, !tbaa !396
  %8325 = getelementptr inbounds i16, i16* %8295, i64 6
  %8326 = bitcast i16* %8325 to <16 x i16>*
  %8327 = load <16 x i16>, <16 x i16>* %8326, align 2, !tbaa !396
  %8328 = getelementptr inbounds i16, i16* %8295, i64 22
  %8329 = bitcast i16* %8328 to <16 x i16>*
  %8330 = load <16 x i16>, <16 x i16>* %8329, align 2, !tbaa !396
  %8331 = getelementptr inbounds i16, i16* %8295, i64 5
  %8332 = bitcast i16* %8331 to <16 x i16>*
  %8333 = load <16 x i16>, <16 x i16>* %8332, align 2, !tbaa !396
  %8334 = getelementptr inbounds i16, i16* %8295, i64 21
  %8335 = bitcast i16* %8334 to <16 x i16>*
  %8336 = load <16 x i16>, <16 x i16>* %8335, align 2, !tbaa !396
  %8337 = add <16 x i16> %8303, %8298
  %8338 = add <16 x i16> %8337, %8309
  %8339 = add <16 x i16> %8338, %8315
  %8340 = add <16 x i16> %8339, %8321
  %8341 = add <16 x i16> %8340, %8327
  %8342 = add <16 x i16> %8341, %8333
  %8343 = add <16 x i16> %8306, %8301
  %8344 = add <16 x i16> %8343, %8312
  %8345 = add <16 x i16> %8344, %8318
  %8346 = add <16 x i16> %8345, %8324
  %8347 = add <16 x i16> %8346, %8330
  %8348 = add <16 x i16> %8347, %8336
  %8349 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8342, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8350 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8348, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8351 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8349, <16 x i16> %8342)
  %8352 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8350, <16 x i16> %8348)
  %8353 = shufflevector <16 x i16> %8351, <16 x i16> %8352, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8354 = lshr <32 x i16> %8353, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8355 = shufflevector <32 x i16> %8354, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8356 = sext i32 %blur_x.s0.x.v1.base.s369 to i64
  %8357 = add nsw i64 %8356, %8119
  %8358 = getelementptr inbounds i16, i16* %blur_x, i64 %8357
  %8359 = bitcast i16* %8358 to <16 x i16>*
  store <16 x i16> %8355, <16 x i16>* %8359, align 2, !tbaa !399
  %8360 = shufflevector <32 x i16> %8354, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8361 = getelementptr inbounds i16, i16* %8358, i64 16
  %8362 = bitcast i16* %8361 to <16 x i16>*
  store <16 x i16> %8360, <16 x i16>* %8362, align 2, !tbaa !399
  br label %"consume blur_x370"

"consume blur_x370":                              ; preds = %"for blur_y.s0.x.x.rebased362", %"produce blur_x368"
  %8363 = sext i32 %b195 to i64
  %8364 = add nsw i64 %8122, %8363
  %8365 = getelementptr inbounds i16, i16* %blur_x, i64 %8364
  %8366 = bitcast i16* %8365 to <16 x i16>*
  %8367 = load <16 x i16>, <16 x i16>* %8366, align 2, !tbaa !399
  %8368 = getelementptr inbounds i16, i16* %8365, i64 16
  %8369 = bitcast i16* %8368 to <16 x i16>*
  %8370 = load <16 x i16>, <16 x i16>* %8369, align 2, !tbaa !399
  %8371 = add nsw i64 %8125, %8363
  %8372 = getelementptr inbounds i16, i16* %blur_x, i64 %8371
  %8373 = bitcast i16* %8372 to <16 x i16>*
  %8374 = load <16 x i16>, <16 x i16>* %8373, align 2, !tbaa !399
  %8375 = getelementptr inbounds i16, i16* %8372, i64 16
  %8376 = bitcast i16* %8375 to <16 x i16>*
  %8377 = load <16 x i16>, <16 x i16>* %8376, align 2, !tbaa !399
  %8378 = add nsw i64 %8128, %8363
  %8379 = getelementptr inbounds i16, i16* %blur_x, i64 %8378
  %8380 = bitcast i16* %8379 to <16 x i16>*
  %8381 = load <16 x i16>, <16 x i16>* %8380, align 2, !tbaa !399
  %8382 = getelementptr inbounds i16, i16* %8379, i64 16
  %8383 = bitcast i16* %8382 to <16 x i16>*
  %8384 = load <16 x i16>, <16 x i16>* %8383, align 2, !tbaa !399
  %8385 = add nsw i64 %8131, %8363
  %8386 = getelementptr inbounds i16, i16* %blur_x, i64 %8385
  %8387 = bitcast i16* %8386 to <16 x i16>*
  %8388 = load <16 x i16>, <16 x i16>* %8387, align 2, !tbaa !399
  %8389 = getelementptr inbounds i16, i16* %8386, i64 16
  %8390 = bitcast i16* %8389 to <16 x i16>*
  %8391 = load <16 x i16>, <16 x i16>* %8390, align 2, !tbaa !399
  %8392 = add nsw i64 %8134, %8363
  %8393 = getelementptr inbounds i16, i16* %blur_x, i64 %8392
  %8394 = bitcast i16* %8393 to <16 x i16>*
  %8395 = load <16 x i16>, <16 x i16>* %8394, align 2, !tbaa !399
  %8396 = getelementptr inbounds i16, i16* %8393, i64 16
  %8397 = bitcast i16* %8396 to <16 x i16>*
  %8398 = load <16 x i16>, <16 x i16>* %8397, align 2, !tbaa !399
  %8399 = add nsw i64 %8137, %8363
  %8400 = getelementptr inbounds i16, i16* %blur_x, i64 %8399
  %8401 = bitcast i16* %8400 to <16 x i16>*
  %8402 = load <16 x i16>, <16 x i16>* %8401, align 2, !tbaa !399
  %8403 = getelementptr inbounds i16, i16* %8400, i64 16
  %8404 = bitcast i16* %8403 to <16 x i16>*
  %8405 = load <16 x i16>, <16 x i16>* %8404, align 2, !tbaa !399
  %8406 = add nsw i64 %8140, %8363
  %8407 = getelementptr inbounds i16, i16* %blur_x, i64 %8406
  %8408 = bitcast i16* %8407 to <16 x i16>*
  %8409 = load <16 x i16>, <16 x i16>* %8408, align 2, !tbaa !399
  %8410 = getelementptr inbounds i16, i16* %8407, i64 16
  %8411 = bitcast i16* %8410 to <16 x i16>*
  %8412 = load <16 x i16>, <16 x i16>* %8411, align 2, !tbaa !399
  %8413 = add <16 x i16> %8374, %8367
  %8414 = add <16 x i16> %8413, %8381
  %8415 = add <16 x i16> %8414, %8388
  %8416 = add <16 x i16> %8415, %8395
  %8417 = add <16 x i16> %8416, %8402
  %8418 = add <16 x i16> %8417, %8409
  %8419 = add <16 x i16> %8377, %8370
  %8420 = add <16 x i16> %8419, %8384
  %8421 = add <16 x i16> %8420, %8391
  %8422 = add <16 x i16> %8421, %8398
  %8423 = add <16 x i16> %8422, %8405
  %8424 = add <16 x i16> %8423, %8412
  %8425 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8418, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8426 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8424, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8427 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8425, <16 x i16> %8418)
  %8428 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8426, <16 x i16> %8424)
  %8429 = shufflevector <16 x i16> %8427, <16 x i16> %8428, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8430 = lshr <32 x i16> %8429, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8431 = shufflevector <32 x i16> %8430, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8432 = add nsw i64 %8144, %8363
  %8433 = getelementptr inbounds i16, i16* %66, i64 %8432
  %8434 = bitcast i16* %8433 to <16 x i16>*
  store <16 x i16> %8431, <16 x i16>* %8434, align 2, !tbaa !401
  %8435 = shufflevector <32 x i16> %8430, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8436 = getelementptr inbounds i16, i16* %8433, i64 16
  %8437 = bitcast i16* %8436 to <16 x i16>*
  store <16 x i16> %8435, <16 x i16>* %8437, align 2, !tbaa !401
  %8438 = add nuw nsw i32 %blur_y.s0.x.x.rebased364, 1
  %.not2779 = icmp eq i32 %8438, %t1727
  br i1 %.not2779, label %"end for blur_y.s0.x.x.rebased363", label %"for blur_y.s0.x.x.rebased362"

after_bb371:                                      ; preds = %"end for blur_y.s0.x.x.rebased363", %"produce blur_x374"
  br i1 %100, label %"for blur_y.s0.x.x.rebased376.preheader", label %"end for blur_y.s0.x.x.rebased377", !prof !386

"for blur_y.s0.x.x.rebased376.preheader":         ; preds = %after_bb371
  %8439 = sext i32 %t1732 to i64
  %8440 = zext i32 %.pre-phi3520 to i64
  %8441 = mul nsw i64 %8440, %116
  %8442 = sub nsw i64 %8441, %96
  %8443 = zext i32 %.pre-phi3516 to i64
  %8444 = mul nsw i64 %8443, %116
  %8445 = sub nsw i64 %8444, %96
  %8446 = zext i32 %.pre-phi3524 to i64
  %8447 = mul nsw i64 %8446, %116
  %8448 = sub nsw i64 %8447, %96
  %8449 = zext i32 %.pre-phi3528 to i64
  %8450 = mul nsw i64 %8449, %116
  %8451 = sub nsw i64 %8450, %96
  %8452 = zext i32 %.pre-phi3534 to i64
  %8453 = mul nsw i64 %8452, %116
  %8454 = sub nsw i64 %8453, %96
  %8455 = zext i32 %.pre-phi3508 to i64
  %8456 = mul nsw i64 %8455, %116
  %8457 = sub nsw i64 %8456, %96
  %8458 = zext i32 %.pre-phi to i64
  %8459 = mul nsw i64 %8458, %116
  %8460 = sub nsw i64 %8459, %96
  %8461 = sext i32 %a26 to i64
  %8462 = add nsw i64 %8461, 11
  %8463 = mul nsw i64 %8462, %117
  %8464 = add nsw i64 %8463, %120
  br label %"for blur_y.s0.x.x.rebased376"

"produce blur_x374":                              ; preds = %"end for blur_y.s0.x.x.rebased363"
  %8465 = getelementptr inbounds i16, i16* %read_input, i64 %141
  %8466 = getelementptr inbounds i16, i16* %8465, i64 -31
  %8467 = bitcast i16* %8466 to <16 x i16>*
  %8468 = load <16 x i16>, <16 x i16>* %8467, align 2, !tbaa !396
  %8469 = getelementptr inbounds i16, i16* %8465, i64 -15
  %8470 = bitcast i16* %8469 to <16 x i16>*
  %8471 = load <16 x i16>, <16 x i16>* %8470, align 2, !tbaa !396
  %8472 = getelementptr inbounds i16, i16* %8465, i64 -32
  %8473 = bitcast i16* %8472 to <16 x i16>*
  %8474 = load <16 x i16>, <16 x i16>* %8473, align 2, !tbaa !396
  %8475 = getelementptr inbounds i16, i16* %8465, i64 -16
  %8476 = bitcast i16* %8475 to <16 x i16>*
  %8477 = load <16 x i16>, <16 x i16>* %8476, align 2, !tbaa !396
  %8478 = getelementptr inbounds i16, i16* %8465, i64 -30
  %8479 = bitcast i16* %8478 to <16 x i16>*
  %8480 = load <16 x i16>, <16 x i16>* %8479, align 2, !tbaa !396
  %8481 = getelementptr inbounds i16, i16* %8465, i64 -14
  %8482 = bitcast i16* %8481 to <16 x i16>*
  %8483 = load <16 x i16>, <16 x i16>* %8482, align 2, !tbaa !396
  %8484 = getelementptr inbounds i16, i16* %8465, i64 -29
  %8485 = bitcast i16* %8484 to <16 x i16>*
  %8486 = load <16 x i16>, <16 x i16>* %8485, align 2, !tbaa !396
  %8487 = getelementptr inbounds i16, i16* %8465, i64 -13
  %8488 = bitcast i16* %8487 to <16 x i16>*
  %8489 = load <16 x i16>, <16 x i16>* %8488, align 2, !tbaa !396
  %8490 = getelementptr inbounds i16, i16* %8465, i64 -28
  %8491 = bitcast i16* %8490 to <16 x i16>*
  %8492 = load <16 x i16>, <16 x i16>* %8491, align 2, !tbaa !396
  %8493 = getelementptr inbounds i16, i16* %8465, i64 -12
  %8494 = bitcast i16* %8493 to <16 x i16>*
  %8495 = load <16 x i16>, <16 x i16>* %8494, align 2, !tbaa !396
  %8496 = getelementptr inbounds i16, i16* %8465, i64 -26
  %8497 = bitcast i16* %8496 to <16 x i16>*
  %8498 = load <16 x i16>, <16 x i16>* %8497, align 2, !tbaa !396
  %8499 = getelementptr inbounds i16, i16* %8465, i64 -10
  %8500 = bitcast i16* %8499 to <16 x i16>*
  %8501 = load <16 x i16>, <16 x i16>* %8500, align 2, !tbaa !396
  %8502 = getelementptr inbounds i16, i16* %8465, i64 -27
  %8503 = bitcast i16* %8502 to <16 x i16>*
  %8504 = load <16 x i16>, <16 x i16>* %8503, align 2, !tbaa !396
  %8505 = getelementptr inbounds i16, i16* %8465, i64 -11
  %8506 = bitcast i16* %8505 to <16 x i16>*
  %8507 = load <16 x i16>, <16 x i16>* %8506, align 2, !tbaa !396
  %8508 = add <16 x i16> %8474, %8468
  %8509 = add <16 x i16> %8508, %8480
  %8510 = add <16 x i16> %8509, %8486
  %8511 = add <16 x i16> %8510, %8492
  %8512 = add <16 x i16> %8511, %8498
  %8513 = add <16 x i16> %8512, %8504
  %8514 = add <16 x i16> %8477, %8471
  %8515 = add <16 x i16> %8514, %8483
  %8516 = add <16 x i16> %8515, %8489
  %8517 = add <16 x i16> %8516, %8495
  %8518 = add <16 x i16> %8517, %8501
  %8519 = add <16 x i16> %8518, %8507
  %8520 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8513, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8521 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8519, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8522 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8520, <16 x i16> %8513)
  %8523 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8521, <16 x i16> %8519)
  %8524 = shufflevector <16 x i16> %8522, <16 x i16> %8523, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8525 = lshr <32 x i16> %8524, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8526 = shufflevector <32 x i16> %8525, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8527 = zext i32 %.pre-phi3508 to i64
  %8528 = mul nsw i64 %97, %8527
  %8529 = add nsw i64 %99, %8528
  %8530 = getelementptr inbounds i16, i16* %blur_x, i64 %8529
  %8531 = getelementptr inbounds i16, i16* %8530, i64 -32
  %8532 = bitcast i16* %8531 to <16 x i16>*
  store <16 x i16> %8526, <16 x i16>* %8532, align 2, !tbaa !399
  %8533 = shufflevector <32 x i16> %8525, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8534 = getelementptr inbounds i16, i16* %8530, i64 -16
  %8535 = bitcast i16* %8534 to <16 x i16>*
  store <16 x i16> %8533, <16 x i16>* %8535, align 2, !tbaa !399
  %8536 = zext i32 %.pre-phi3520 to i64
  %8537 = mul nsw i64 %8536, %116
  %8538 = add nsw i64 %8537, %94
  %8539 = getelementptr inbounds i16, i16* %blur_x, i64 %8538
  %8540 = getelementptr inbounds i16, i16* %8539, i64 -32
  %8541 = bitcast i16* %8540 to <16 x i16>*
  %8542 = load <16 x i16>, <16 x i16>* %8541, align 2, !tbaa !399
  %8543 = getelementptr inbounds i16, i16* %8539, i64 -16
  %8544 = bitcast i16* %8543 to <16 x i16>*
  %8545 = load <16 x i16>, <16 x i16>* %8544, align 2, !tbaa !399
  %8546 = zext i32 %.pre-phi3516 to i64
  %8547 = mul nsw i64 %8546, %116
  %8548 = add nsw i64 %8547, %94
  %8549 = getelementptr inbounds i16, i16* %blur_x, i64 %8548
  %8550 = getelementptr inbounds i16, i16* %8549, i64 -32
  %8551 = bitcast i16* %8550 to <16 x i16>*
  %8552 = load <16 x i16>, <16 x i16>* %8551, align 2, !tbaa !399
  %8553 = getelementptr inbounds i16, i16* %8549, i64 -16
  %8554 = bitcast i16* %8553 to <16 x i16>*
  %8555 = load <16 x i16>, <16 x i16>* %8554, align 2, !tbaa !399
  %8556 = zext i32 %.pre-phi3524 to i64
  %8557 = mul nsw i64 %8556, %116
  %8558 = add nsw i64 %8557, %94
  %8559 = getelementptr inbounds i16, i16* %blur_x, i64 %8558
  %8560 = getelementptr inbounds i16, i16* %8559, i64 -32
  %8561 = bitcast i16* %8560 to <16 x i16>*
  %8562 = load <16 x i16>, <16 x i16>* %8561, align 2, !tbaa !399
  %8563 = getelementptr inbounds i16, i16* %8559, i64 -16
  %8564 = bitcast i16* %8563 to <16 x i16>*
  %8565 = load <16 x i16>, <16 x i16>* %8564, align 2, !tbaa !399
  %8566 = zext i32 %.pre-phi3528 to i64
  %8567 = mul nsw i64 %8566, %116
  %8568 = add nsw i64 %8567, %94
  %8569 = getelementptr inbounds i16, i16* %blur_x, i64 %8568
  %8570 = getelementptr inbounds i16, i16* %8569, i64 -32
  %8571 = bitcast i16* %8570 to <16 x i16>*
  %8572 = load <16 x i16>, <16 x i16>* %8571, align 2, !tbaa !399
  %8573 = getelementptr inbounds i16, i16* %8569, i64 -16
  %8574 = bitcast i16* %8573 to <16 x i16>*
  %8575 = load <16 x i16>, <16 x i16>* %8574, align 2, !tbaa !399
  %8576 = zext i32 %.pre-phi3534 to i64
  %8577 = mul nsw i64 %8576, %116
  %8578 = add nsw i64 %8577, %94
  %8579 = getelementptr inbounds i16, i16* %blur_x, i64 %8578
  %8580 = getelementptr inbounds i16, i16* %8579, i64 -32
  %8581 = bitcast i16* %8580 to <16 x i16>*
  %8582 = load <16 x i16>, <16 x i16>* %8581, align 2, !tbaa !399
  %8583 = getelementptr inbounds i16, i16* %8579, i64 -16
  %8584 = bitcast i16* %8583 to <16 x i16>*
  %8585 = load <16 x i16>, <16 x i16>* %8584, align 2, !tbaa !399
  %8586 = mul nsw i64 %8527, %116
  %8587 = add nsw i64 %8586, %94
  %8588 = getelementptr inbounds i16, i16* %blur_x, i64 %8587
  %8589 = getelementptr inbounds i16, i16* %8588, i64 -32
  %8590 = bitcast i16* %8589 to <16 x i16>*
  %8591 = load <16 x i16>, <16 x i16>* %8590, align 2, !tbaa !399
  %8592 = getelementptr inbounds i16, i16* %8588, i64 -16
  %8593 = bitcast i16* %8592 to <16 x i16>*
  %8594 = load <16 x i16>, <16 x i16>* %8593, align 2, !tbaa !399
  %8595 = zext i32 %.pre-phi to i64
  %8596 = mul nsw i64 %8595, %116
  %8597 = add nsw i64 %8596, %94
  %8598 = getelementptr inbounds i16, i16* %blur_x, i64 %8597
  %8599 = getelementptr inbounds i16, i16* %8598, i64 -32
  %8600 = bitcast i16* %8599 to <16 x i16>*
  %8601 = load <16 x i16>, <16 x i16>* %8600, align 2, !tbaa !399
  %8602 = getelementptr inbounds i16, i16* %8598, i64 -16
  %8603 = bitcast i16* %8602 to <16 x i16>*
  %8604 = load <16 x i16>, <16 x i16>* %8603, align 2, !tbaa !399
  %8605 = add <16 x i16> %8552, %8542
  %8606 = add <16 x i16> %8605, %8562
  %8607 = add <16 x i16> %8606, %8572
  %8608 = add <16 x i16> %8607, %8582
  %8609 = add <16 x i16> %8608, %8591
  %8610 = add <16 x i16> %8609, %8601
  %8611 = add <16 x i16> %8555, %8545
  %8612 = add <16 x i16> %8611, %8565
  %8613 = add <16 x i16> %8612, %8575
  %8614 = add <16 x i16> %8613, %8585
  %8615 = add <16 x i16> %8614, %8594
  %8616 = add <16 x i16> %8615, %8604
  %8617 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8610, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8618 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8616, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8619 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8617, <16 x i16> %8610)
  %8620 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8618, <16 x i16> %8616)
  %8621 = shufflevector <16 x i16> %8619, <16 x i16> %8620, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8622 = lshr <32 x i16> %8621, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8623 = shufflevector <32 x i16> %8622, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8624 = sext i32 %a26 to i64
  %8625 = add nsw i64 %8624, 11
  %8626 = mul nsw i64 %8625, %117
  %8627 = add nsw i64 %119, %8626
  %8628 = getelementptr inbounds i16, i16* %66, i64 %8627
  %8629 = getelementptr inbounds i16, i16* %8628, i64 -32
  %8630 = bitcast i16* %8629 to <16 x i16>*
  store <16 x i16> %8623, <16 x i16>* %8630, align 2, !tbaa !401
  %8631 = shufflevector <32 x i16> %8622, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8632 = getelementptr inbounds i16, i16* %8628, i64 -16
  %8633 = bitcast i16* %8632 to <16 x i16>*
  store <16 x i16> %8631, <16 x i16>* %8633, align 2, !tbaa !401
  br label %after_bb371

"for blur_y.s0.x.x.rebased376":                   ; preds = %"for blur_y.s0.x.x.rebased376.preheader", %"consume blur_x383"
  %indvars.iv3312 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased376.preheader" ], [ %indvars.iv.next3313, %"consume blur_x383" ]
  %8634 = add nsw i64 %indvars.iv3312, %101
  %8635 = icmp slt i64 %8634, 1
  %8636 = trunc i64 %8634 to i32
  %8637 = shl nsw i32 %8636, 5
  %8638 = icmp sgt i32 %4, %8637
  %8639 = or i1 %8635, %8638
  br i1 %8639, label %"produce blur_x382", label %"for blur_y.s0.x.x.rebased376.consume blur_x383_crit_edge"

"for blur_y.s0.x.x.rebased376.consume blur_x383_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased376"
  %.pre3555 = shl nsw i64 %8634, 5
  br label %"consume blur_x383"

"end for blur_y.s0.x.x.rebased377":               ; preds = %"consume blur_x383", %after_bb371
  br i1 %102, label %"for blur_y.s0.x.x.rebased384.preheader", label %"end for blur_y.s0.x.x.rebased385", !prof !386

"for blur_y.s0.x.x.rebased384.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased377"
  %8640 = sext i32 %t1732 to i64
  %8641 = zext i32 %.pre-phi3520 to i64
  %8642 = mul nsw i64 %8641, %116
  %8643 = sub nsw i64 %8642, %96
  %8644 = zext i32 %.pre-phi3516 to i64
  %8645 = mul nsw i64 %8644, %116
  %8646 = sub nsw i64 %8645, %96
  %8647 = zext i32 %.pre-phi3524 to i64
  %8648 = mul nsw i64 %8647, %116
  %8649 = sub nsw i64 %8648, %96
  %8650 = zext i32 %.pre-phi3528 to i64
  %8651 = mul nsw i64 %8650, %116
  %8652 = sub nsw i64 %8651, %96
  %8653 = zext i32 %.pre-phi3534 to i64
  %8654 = mul nsw i64 %8653, %116
  %8655 = sub nsw i64 %8654, %96
  %8656 = zext i32 %.pre-phi3508 to i64
  %8657 = mul nsw i64 %8656, %116
  %8658 = sub nsw i64 %8657, %96
  %8659 = zext i32 %.pre-phi to i64
  %8660 = mul nsw i64 %8659, %116
  %8661 = sub nsw i64 %8660, %96
  %8662 = sext i32 %a26 to i64
  %8663 = add nsw i64 %8662, 11
  %8664 = mul nsw i64 %8663, %117
  %8665 = add nsw i64 %8664, %120
  br label %"for blur_y.s0.x.x.rebased384"

"produce blur_x382":                              ; preds = %"for blur_y.s0.x.x.rebased376"
  %t928 = add nsw i32 %8637, %t1937
  %8666 = sext i32 %t928 to i64
  %8667 = getelementptr inbounds i16, i16* %read_input, i64 %8666
  %8668 = getelementptr inbounds i16, i16* %8667, i64 1
  %8669 = bitcast i16* %8668 to <16 x i16>*
  %8670 = load <16 x i16>, <16 x i16>* %8669, align 2, !tbaa !396
  %8671 = getelementptr inbounds i16, i16* %8667, i64 17
  %8672 = bitcast i16* %8671 to <16 x i16>*
  %8673 = load <16 x i16>, <16 x i16>* %8672, align 2, !tbaa !396
  %8674 = bitcast i16* %8667 to <16 x i16>*
  %8675 = load <16 x i16>, <16 x i16>* %8674, align 2, !tbaa !396
  %8676 = getelementptr inbounds i16, i16* %8667, i64 16
  %8677 = bitcast i16* %8676 to <16 x i16>*
  %8678 = load <16 x i16>, <16 x i16>* %8677, align 2, !tbaa !396
  %8679 = getelementptr inbounds i16, i16* %8667, i64 2
  %8680 = bitcast i16* %8679 to <16 x i16>*
  %8681 = load <16 x i16>, <16 x i16>* %8680, align 2, !tbaa !396
  %8682 = getelementptr inbounds i16, i16* %8667, i64 18
  %8683 = bitcast i16* %8682 to <16 x i16>*
  %8684 = load <16 x i16>, <16 x i16>* %8683, align 2, !tbaa !396
  %8685 = getelementptr inbounds i16, i16* %8667, i64 3
  %8686 = bitcast i16* %8685 to <16 x i16>*
  %8687 = load <16 x i16>, <16 x i16>* %8686, align 2, !tbaa !396
  %8688 = getelementptr inbounds i16, i16* %8667, i64 19
  %8689 = bitcast i16* %8688 to <16 x i16>*
  %8690 = load <16 x i16>, <16 x i16>* %8689, align 2, !tbaa !396
  %8691 = getelementptr inbounds i16, i16* %8667, i64 4
  %8692 = bitcast i16* %8691 to <16 x i16>*
  %8693 = load <16 x i16>, <16 x i16>* %8692, align 2, !tbaa !396
  %8694 = getelementptr inbounds i16, i16* %8667, i64 20
  %8695 = bitcast i16* %8694 to <16 x i16>*
  %8696 = load <16 x i16>, <16 x i16>* %8695, align 2, !tbaa !396
  %8697 = getelementptr inbounds i16, i16* %8667, i64 6
  %8698 = bitcast i16* %8697 to <16 x i16>*
  %8699 = load <16 x i16>, <16 x i16>* %8698, align 2, !tbaa !396
  %8700 = getelementptr inbounds i16, i16* %8667, i64 22
  %8701 = bitcast i16* %8700 to <16 x i16>*
  %8702 = load <16 x i16>, <16 x i16>* %8701, align 2, !tbaa !396
  %8703 = getelementptr inbounds i16, i16* %8667, i64 5
  %8704 = bitcast i16* %8703 to <16 x i16>*
  %8705 = load <16 x i16>, <16 x i16>* %8704, align 2, !tbaa !396
  %8706 = getelementptr inbounds i16, i16* %8667, i64 21
  %8707 = bitcast i16* %8706 to <16 x i16>*
  %8708 = load <16 x i16>, <16 x i16>* %8707, align 2, !tbaa !396
  %8709 = add <16 x i16> %8675, %8670
  %8710 = add <16 x i16> %8709, %8681
  %8711 = add <16 x i16> %8710, %8687
  %8712 = add <16 x i16> %8711, %8693
  %8713 = add <16 x i16> %8712, %8699
  %8714 = add <16 x i16> %8713, %8705
  %8715 = add <16 x i16> %8678, %8673
  %8716 = add <16 x i16> %8715, %8684
  %8717 = add <16 x i16> %8716, %8690
  %8718 = add <16 x i16> %8717, %8696
  %8719 = add <16 x i16> %8718, %8702
  %8720 = add <16 x i16> %8719, %8708
  %8721 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8714, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8722 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8720, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8723 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8721, <16 x i16> %8714)
  %8724 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8722, <16 x i16> %8720)
  %8725 = shufflevector <16 x i16> %8723, <16 x i16> %8724, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8726 = lshr <32 x i16> %8725, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8727 = shufflevector <32 x i16> %8726, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8728 = shl nsw i64 %8634, 5
  %8729 = add nsw i64 %8728, %8439
  %8730 = getelementptr inbounds i16, i16* %blur_x, i64 %8729
  %8731 = bitcast i16* %8730 to <16 x i16>*
  store <16 x i16> %8727, <16 x i16>* %8731, align 2, !tbaa !399
  %8732 = shufflevector <32 x i16> %8726, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8733 = getelementptr inbounds i16, i16* %8730, i64 16
  %8734 = bitcast i16* %8733 to <16 x i16>*
  store <16 x i16> %8732, <16 x i16>* %8734, align 2, !tbaa !399
  br label %"consume blur_x383"

"consume blur_x383":                              ; preds = %"for blur_y.s0.x.x.rebased376.consume blur_x383_crit_edge", %"produce blur_x382"
  %.pre-phi3556 = phi i64 [ %.pre3555, %"for blur_y.s0.x.x.rebased376.consume blur_x383_crit_edge" ], [ %8728, %"produce blur_x382" ]
  %8735 = add nsw i64 %8442, %.pre-phi3556
  %8736 = getelementptr inbounds i16, i16* %blur_x, i64 %8735
  %8737 = bitcast i16* %8736 to <16 x i16>*
  %8738 = load <16 x i16>, <16 x i16>* %8737, align 2, !tbaa !399
  %8739 = getelementptr inbounds i16, i16* %8736, i64 16
  %8740 = bitcast i16* %8739 to <16 x i16>*
  %8741 = load <16 x i16>, <16 x i16>* %8740, align 2, !tbaa !399
  %8742 = add nsw i64 %8445, %.pre-phi3556
  %8743 = getelementptr inbounds i16, i16* %blur_x, i64 %8742
  %8744 = bitcast i16* %8743 to <16 x i16>*
  %8745 = load <16 x i16>, <16 x i16>* %8744, align 2, !tbaa !399
  %8746 = getelementptr inbounds i16, i16* %8743, i64 16
  %8747 = bitcast i16* %8746 to <16 x i16>*
  %8748 = load <16 x i16>, <16 x i16>* %8747, align 2, !tbaa !399
  %8749 = add nsw i64 %8448, %.pre-phi3556
  %8750 = getelementptr inbounds i16, i16* %blur_x, i64 %8749
  %8751 = bitcast i16* %8750 to <16 x i16>*
  %8752 = load <16 x i16>, <16 x i16>* %8751, align 2, !tbaa !399
  %8753 = getelementptr inbounds i16, i16* %8750, i64 16
  %8754 = bitcast i16* %8753 to <16 x i16>*
  %8755 = load <16 x i16>, <16 x i16>* %8754, align 2, !tbaa !399
  %8756 = add nsw i64 %8451, %.pre-phi3556
  %8757 = getelementptr inbounds i16, i16* %blur_x, i64 %8756
  %8758 = bitcast i16* %8757 to <16 x i16>*
  %8759 = load <16 x i16>, <16 x i16>* %8758, align 2, !tbaa !399
  %8760 = getelementptr inbounds i16, i16* %8757, i64 16
  %8761 = bitcast i16* %8760 to <16 x i16>*
  %8762 = load <16 x i16>, <16 x i16>* %8761, align 2, !tbaa !399
  %8763 = add nsw i64 %8454, %.pre-phi3556
  %8764 = getelementptr inbounds i16, i16* %blur_x, i64 %8763
  %8765 = bitcast i16* %8764 to <16 x i16>*
  %8766 = load <16 x i16>, <16 x i16>* %8765, align 2, !tbaa !399
  %8767 = getelementptr inbounds i16, i16* %8764, i64 16
  %8768 = bitcast i16* %8767 to <16 x i16>*
  %8769 = load <16 x i16>, <16 x i16>* %8768, align 2, !tbaa !399
  %8770 = add nsw i64 %8457, %.pre-phi3556
  %8771 = getelementptr inbounds i16, i16* %blur_x, i64 %8770
  %8772 = bitcast i16* %8771 to <16 x i16>*
  %8773 = load <16 x i16>, <16 x i16>* %8772, align 2, !tbaa !399
  %8774 = getelementptr inbounds i16, i16* %8771, i64 16
  %8775 = bitcast i16* %8774 to <16 x i16>*
  %8776 = load <16 x i16>, <16 x i16>* %8775, align 2, !tbaa !399
  %8777 = add nsw i64 %8460, %.pre-phi3556
  %8778 = getelementptr inbounds i16, i16* %blur_x, i64 %8777
  %8779 = bitcast i16* %8778 to <16 x i16>*
  %8780 = load <16 x i16>, <16 x i16>* %8779, align 2, !tbaa !399
  %8781 = getelementptr inbounds i16, i16* %8778, i64 16
  %8782 = bitcast i16* %8781 to <16 x i16>*
  %8783 = load <16 x i16>, <16 x i16>* %8782, align 2, !tbaa !399
  %8784 = add <16 x i16> %8745, %8738
  %8785 = add <16 x i16> %8784, %8752
  %8786 = add <16 x i16> %8785, %8759
  %8787 = add <16 x i16> %8786, %8766
  %8788 = add <16 x i16> %8787, %8773
  %8789 = add <16 x i16> %8788, %8780
  %8790 = add <16 x i16> %8748, %8741
  %8791 = add <16 x i16> %8790, %8755
  %8792 = add <16 x i16> %8791, %8762
  %8793 = add <16 x i16> %8792, %8769
  %8794 = add <16 x i16> %8793, %8776
  %8795 = add <16 x i16> %8794, %8783
  %8796 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8789, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8797 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8795, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8798 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8796, <16 x i16> %8789)
  %8799 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8797, <16 x i16> %8795)
  %8800 = shufflevector <16 x i16> %8798, <16 x i16> %8799, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8801 = lshr <32 x i16> %8800, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8802 = shufflevector <32 x i16> %8801, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8803 = add nsw i64 %8464, %.pre-phi3556
  %8804 = getelementptr inbounds i16, i16* %66, i64 %8803
  %8805 = bitcast i16* %8804 to <16 x i16>*
  store <16 x i16> %8802, <16 x i16>* %8805, align 2, !tbaa !401
  %8806 = shufflevector <32 x i16> %8801, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8807 = getelementptr inbounds i16, i16* %8804, i64 16
  %8808 = bitcast i16* %8807 to <16 x i16>*
  store <16 x i16> %8806, <16 x i16>* %8808, align 2, !tbaa !401
  %indvars.iv.next3313 = add nuw nsw i64 %indvars.iv3312, 1
  %.not2778 = icmp eq i64 %indvars.iv.next3313, %188
  br i1 %.not2778, label %"end for blur_y.s0.x.x.rebased377", label %"for blur_y.s0.x.x.rebased376"

"for blur_y.s0.x.x.rebased384":                   ; preds = %"for blur_y.s0.x.x.rebased384.preheader", %"consume blur_x392"
  %blur_y.s0.x.x.rebased386 = phi i32 [ %8959, %"consume blur_x392" ], [ 0, %"for blur_y.s0.x.x.rebased384.preheader" ]
  %8809 = add nsw i32 %blur_y.s0.x.x.rebased386, %t1670
  %a196 = shl nsw i32 %8809, 5
  %8810 = icmp sgt i32 %a14, %a196
  %b202 = select i1 %8810, i32 %a196, i32 %a14
  %8811 = icmp slt i32 %8809, 1
  %8812 = icmp sgt i32 %4, %a196
  %8813 = or i1 %8811, %8812
  br i1 %8813, label %"produce blur_x390", label %"consume blur_x392"

"end for blur_y.s0.x.x.rebased385":               ; preds = %"consume blur_x392", %"end for blur_y.s0.x.x.rebased377"
  br i1 %34, label %"produce blur_x396", label %after_bb393

"produce blur_x390":                              ; preds = %"for blur_y.s0.x.x.rebased384"
  %8814 = icmp slt i32 %b202, %4
  %blur_x.s0.x.v1.base.s391 = select i1 %8814, i32 %b202, i32 %4
  %t933 = add nsw i32 %blur_x.s0.x.v1.base.s391, %t1937
  %8815 = sext i32 %t933 to i64
  %8816 = getelementptr inbounds i16, i16* %read_input, i64 %8815
  %8817 = getelementptr inbounds i16, i16* %8816, i64 1
  %8818 = bitcast i16* %8817 to <16 x i16>*
  %8819 = load <16 x i16>, <16 x i16>* %8818, align 2, !tbaa !396
  %8820 = getelementptr inbounds i16, i16* %8816, i64 17
  %8821 = bitcast i16* %8820 to <16 x i16>*
  %8822 = load <16 x i16>, <16 x i16>* %8821, align 2, !tbaa !396
  %8823 = bitcast i16* %8816 to <16 x i16>*
  %8824 = load <16 x i16>, <16 x i16>* %8823, align 2, !tbaa !396
  %8825 = getelementptr inbounds i16, i16* %8816, i64 16
  %8826 = bitcast i16* %8825 to <16 x i16>*
  %8827 = load <16 x i16>, <16 x i16>* %8826, align 2, !tbaa !396
  %8828 = getelementptr inbounds i16, i16* %8816, i64 2
  %8829 = bitcast i16* %8828 to <16 x i16>*
  %8830 = load <16 x i16>, <16 x i16>* %8829, align 2, !tbaa !396
  %8831 = getelementptr inbounds i16, i16* %8816, i64 18
  %8832 = bitcast i16* %8831 to <16 x i16>*
  %8833 = load <16 x i16>, <16 x i16>* %8832, align 2, !tbaa !396
  %8834 = getelementptr inbounds i16, i16* %8816, i64 3
  %8835 = bitcast i16* %8834 to <16 x i16>*
  %8836 = load <16 x i16>, <16 x i16>* %8835, align 2, !tbaa !396
  %8837 = getelementptr inbounds i16, i16* %8816, i64 19
  %8838 = bitcast i16* %8837 to <16 x i16>*
  %8839 = load <16 x i16>, <16 x i16>* %8838, align 2, !tbaa !396
  %8840 = getelementptr inbounds i16, i16* %8816, i64 4
  %8841 = bitcast i16* %8840 to <16 x i16>*
  %8842 = load <16 x i16>, <16 x i16>* %8841, align 2, !tbaa !396
  %8843 = getelementptr inbounds i16, i16* %8816, i64 20
  %8844 = bitcast i16* %8843 to <16 x i16>*
  %8845 = load <16 x i16>, <16 x i16>* %8844, align 2, !tbaa !396
  %8846 = getelementptr inbounds i16, i16* %8816, i64 6
  %8847 = bitcast i16* %8846 to <16 x i16>*
  %8848 = load <16 x i16>, <16 x i16>* %8847, align 2, !tbaa !396
  %8849 = getelementptr inbounds i16, i16* %8816, i64 22
  %8850 = bitcast i16* %8849 to <16 x i16>*
  %8851 = load <16 x i16>, <16 x i16>* %8850, align 2, !tbaa !396
  %8852 = getelementptr inbounds i16, i16* %8816, i64 5
  %8853 = bitcast i16* %8852 to <16 x i16>*
  %8854 = load <16 x i16>, <16 x i16>* %8853, align 2, !tbaa !396
  %8855 = getelementptr inbounds i16, i16* %8816, i64 21
  %8856 = bitcast i16* %8855 to <16 x i16>*
  %8857 = load <16 x i16>, <16 x i16>* %8856, align 2, !tbaa !396
  %8858 = add <16 x i16> %8824, %8819
  %8859 = add <16 x i16> %8858, %8830
  %8860 = add <16 x i16> %8859, %8836
  %8861 = add <16 x i16> %8860, %8842
  %8862 = add <16 x i16> %8861, %8848
  %8863 = add <16 x i16> %8862, %8854
  %8864 = add <16 x i16> %8827, %8822
  %8865 = add <16 x i16> %8864, %8833
  %8866 = add <16 x i16> %8865, %8839
  %8867 = add <16 x i16> %8866, %8845
  %8868 = add <16 x i16> %8867, %8851
  %8869 = add <16 x i16> %8868, %8857
  %8870 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8863, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8871 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8869, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8872 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8870, <16 x i16> %8863)
  %8873 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8871, <16 x i16> %8869)
  %8874 = shufflevector <16 x i16> %8872, <16 x i16> %8873, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8875 = lshr <32 x i16> %8874, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8876 = shufflevector <32 x i16> %8875, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8877 = sext i32 %blur_x.s0.x.v1.base.s391 to i64
  %8878 = add nsw i64 %8877, %8640
  %8879 = getelementptr inbounds i16, i16* %blur_x, i64 %8878
  %8880 = bitcast i16* %8879 to <16 x i16>*
  store <16 x i16> %8876, <16 x i16>* %8880, align 2, !tbaa !399
  %8881 = shufflevector <32 x i16> %8875, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8882 = getelementptr inbounds i16, i16* %8879, i64 16
  %8883 = bitcast i16* %8882 to <16 x i16>*
  store <16 x i16> %8881, <16 x i16>* %8883, align 2, !tbaa !399
  br label %"consume blur_x392"

"consume blur_x392":                              ; preds = %"for blur_y.s0.x.x.rebased384", %"produce blur_x390"
  %8884 = sext i32 %b202 to i64
  %8885 = add nsw i64 %8643, %8884
  %8886 = getelementptr inbounds i16, i16* %blur_x, i64 %8885
  %8887 = bitcast i16* %8886 to <16 x i16>*
  %8888 = load <16 x i16>, <16 x i16>* %8887, align 2, !tbaa !399
  %8889 = getelementptr inbounds i16, i16* %8886, i64 16
  %8890 = bitcast i16* %8889 to <16 x i16>*
  %8891 = load <16 x i16>, <16 x i16>* %8890, align 2, !tbaa !399
  %8892 = add nsw i64 %8646, %8884
  %8893 = getelementptr inbounds i16, i16* %blur_x, i64 %8892
  %8894 = bitcast i16* %8893 to <16 x i16>*
  %8895 = load <16 x i16>, <16 x i16>* %8894, align 2, !tbaa !399
  %8896 = getelementptr inbounds i16, i16* %8893, i64 16
  %8897 = bitcast i16* %8896 to <16 x i16>*
  %8898 = load <16 x i16>, <16 x i16>* %8897, align 2, !tbaa !399
  %8899 = add nsw i64 %8649, %8884
  %8900 = getelementptr inbounds i16, i16* %blur_x, i64 %8899
  %8901 = bitcast i16* %8900 to <16 x i16>*
  %8902 = load <16 x i16>, <16 x i16>* %8901, align 2, !tbaa !399
  %8903 = getelementptr inbounds i16, i16* %8900, i64 16
  %8904 = bitcast i16* %8903 to <16 x i16>*
  %8905 = load <16 x i16>, <16 x i16>* %8904, align 2, !tbaa !399
  %8906 = add nsw i64 %8652, %8884
  %8907 = getelementptr inbounds i16, i16* %blur_x, i64 %8906
  %8908 = bitcast i16* %8907 to <16 x i16>*
  %8909 = load <16 x i16>, <16 x i16>* %8908, align 2, !tbaa !399
  %8910 = getelementptr inbounds i16, i16* %8907, i64 16
  %8911 = bitcast i16* %8910 to <16 x i16>*
  %8912 = load <16 x i16>, <16 x i16>* %8911, align 2, !tbaa !399
  %8913 = add nsw i64 %8655, %8884
  %8914 = getelementptr inbounds i16, i16* %blur_x, i64 %8913
  %8915 = bitcast i16* %8914 to <16 x i16>*
  %8916 = load <16 x i16>, <16 x i16>* %8915, align 2, !tbaa !399
  %8917 = getelementptr inbounds i16, i16* %8914, i64 16
  %8918 = bitcast i16* %8917 to <16 x i16>*
  %8919 = load <16 x i16>, <16 x i16>* %8918, align 2, !tbaa !399
  %8920 = add nsw i64 %8658, %8884
  %8921 = getelementptr inbounds i16, i16* %blur_x, i64 %8920
  %8922 = bitcast i16* %8921 to <16 x i16>*
  %8923 = load <16 x i16>, <16 x i16>* %8922, align 2, !tbaa !399
  %8924 = getelementptr inbounds i16, i16* %8921, i64 16
  %8925 = bitcast i16* %8924 to <16 x i16>*
  %8926 = load <16 x i16>, <16 x i16>* %8925, align 2, !tbaa !399
  %8927 = add nsw i64 %8661, %8884
  %8928 = getelementptr inbounds i16, i16* %blur_x, i64 %8927
  %8929 = bitcast i16* %8928 to <16 x i16>*
  %8930 = load <16 x i16>, <16 x i16>* %8929, align 2, !tbaa !399
  %8931 = getelementptr inbounds i16, i16* %8928, i64 16
  %8932 = bitcast i16* %8931 to <16 x i16>*
  %8933 = load <16 x i16>, <16 x i16>* %8932, align 2, !tbaa !399
  %8934 = add <16 x i16> %8895, %8888
  %8935 = add <16 x i16> %8934, %8902
  %8936 = add <16 x i16> %8935, %8909
  %8937 = add <16 x i16> %8936, %8916
  %8938 = add <16 x i16> %8937, %8923
  %8939 = add <16 x i16> %8938, %8930
  %8940 = add <16 x i16> %8898, %8891
  %8941 = add <16 x i16> %8940, %8905
  %8942 = add <16 x i16> %8941, %8912
  %8943 = add <16 x i16> %8942, %8919
  %8944 = add <16 x i16> %8943, %8926
  %8945 = add <16 x i16> %8944, %8933
  %8946 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8939, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8947 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8945, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %8948 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8946, <16 x i16> %8939)
  %8949 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %8947, <16 x i16> %8945)
  %8950 = shufflevector <16 x i16> %8948, <16 x i16> %8949, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8951 = lshr <32 x i16> %8950, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8952 = shufflevector <32 x i16> %8951, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8953 = add nsw i64 %8665, %8884
  %8954 = getelementptr inbounds i16, i16* %66, i64 %8953
  %8955 = bitcast i16* %8954 to <16 x i16>*
  store <16 x i16> %8952, <16 x i16>* %8955, align 2, !tbaa !401
  %8956 = shufflevector <32 x i16> %8951, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8957 = getelementptr inbounds i16, i16* %8954, i64 16
  %8958 = bitcast i16* %8957 to <16 x i16>*
  store <16 x i16> %8956, <16 x i16>* %8958, align 2, !tbaa !401
  %8959 = add nuw nsw i32 %blur_y.s0.x.x.rebased386, 1
  %.not2777 = icmp eq i32 %8959, %t1727
  br i1 %.not2777, label %"end for blur_y.s0.x.x.rebased385", label %"for blur_y.s0.x.x.rebased384"

after_bb393:                                      ; preds = %"end for blur_y.s0.x.x.rebased385", %"produce blur_x396"
  br i1 %100, label %"for blur_y.s0.x.x.rebased398.preheader", label %"end for blur_y.s0.x.x.rebased399", !prof !386

"for blur_y.s0.x.x.rebased398.preheader":         ; preds = %after_bb393
  %8960 = sext i32 %t1738 to i64
  %8961 = zext i32 %.pre-phi3524 to i64
  %8962 = mul nsw i64 %8961, %116
  %8963 = sub nsw i64 %8962, %96
  %8964 = zext i32 %.pre-phi3520 to i64
  %8965 = mul nsw i64 %8964, %116
  %8966 = sub nsw i64 %8965, %96
  %8967 = zext i32 %.pre-phi3528 to i64
  %8968 = mul nsw i64 %8967, %116
  %8969 = sub nsw i64 %8968, %96
  %8970 = zext i32 %.pre-phi3534 to i64
  %8971 = mul nsw i64 %8970, %116
  %8972 = sub nsw i64 %8971, %96
  %8973 = zext i32 %.pre-phi to i64
  %8974 = mul nsw i64 %8973, %116
  %8975 = sub nsw i64 %8974, %96
  %8976 = zext i32 %.pre-phi3512 to i64
  %8977 = mul nsw i64 %8976, %116
  %8978 = sub nsw i64 %8977, %96
  %8979 = zext i32 %.pre-phi3508 to i64
  %8980 = mul nsw i64 %8979, %116
  %8981 = sub nsw i64 %8980, %96
  %8982 = sext i32 %a26 to i64
  %8983 = add nsw i64 %8982, 12
  %8984 = mul nsw i64 %8983, %117
  %8985 = add nsw i64 %8984, %120
  br label %"for blur_y.s0.x.x.rebased398"

"produce blur_x396":                              ; preds = %"end for blur_y.s0.x.x.rebased385"
  %8986 = getelementptr inbounds i16, i16* %read_input, i64 %143
  %8987 = getelementptr inbounds i16, i16* %8986, i64 -31
  %8988 = bitcast i16* %8987 to <16 x i16>*
  %8989 = load <16 x i16>, <16 x i16>* %8988, align 2, !tbaa !396
  %8990 = getelementptr inbounds i16, i16* %8986, i64 -15
  %8991 = bitcast i16* %8990 to <16 x i16>*
  %8992 = load <16 x i16>, <16 x i16>* %8991, align 2, !tbaa !396
  %8993 = getelementptr inbounds i16, i16* %8986, i64 -32
  %8994 = bitcast i16* %8993 to <16 x i16>*
  %8995 = load <16 x i16>, <16 x i16>* %8994, align 2, !tbaa !396
  %8996 = getelementptr inbounds i16, i16* %8986, i64 -16
  %8997 = bitcast i16* %8996 to <16 x i16>*
  %8998 = load <16 x i16>, <16 x i16>* %8997, align 2, !tbaa !396
  %8999 = getelementptr inbounds i16, i16* %8986, i64 -30
  %9000 = bitcast i16* %8999 to <16 x i16>*
  %9001 = load <16 x i16>, <16 x i16>* %9000, align 2, !tbaa !396
  %9002 = getelementptr inbounds i16, i16* %8986, i64 -14
  %9003 = bitcast i16* %9002 to <16 x i16>*
  %9004 = load <16 x i16>, <16 x i16>* %9003, align 2, !tbaa !396
  %9005 = getelementptr inbounds i16, i16* %8986, i64 -29
  %9006 = bitcast i16* %9005 to <16 x i16>*
  %9007 = load <16 x i16>, <16 x i16>* %9006, align 2, !tbaa !396
  %9008 = getelementptr inbounds i16, i16* %8986, i64 -13
  %9009 = bitcast i16* %9008 to <16 x i16>*
  %9010 = load <16 x i16>, <16 x i16>* %9009, align 2, !tbaa !396
  %9011 = getelementptr inbounds i16, i16* %8986, i64 -28
  %9012 = bitcast i16* %9011 to <16 x i16>*
  %9013 = load <16 x i16>, <16 x i16>* %9012, align 2, !tbaa !396
  %9014 = getelementptr inbounds i16, i16* %8986, i64 -12
  %9015 = bitcast i16* %9014 to <16 x i16>*
  %9016 = load <16 x i16>, <16 x i16>* %9015, align 2, !tbaa !396
  %9017 = getelementptr inbounds i16, i16* %8986, i64 -26
  %9018 = bitcast i16* %9017 to <16 x i16>*
  %9019 = load <16 x i16>, <16 x i16>* %9018, align 2, !tbaa !396
  %9020 = getelementptr inbounds i16, i16* %8986, i64 -10
  %9021 = bitcast i16* %9020 to <16 x i16>*
  %9022 = load <16 x i16>, <16 x i16>* %9021, align 2, !tbaa !396
  %9023 = getelementptr inbounds i16, i16* %8986, i64 -27
  %9024 = bitcast i16* %9023 to <16 x i16>*
  %9025 = load <16 x i16>, <16 x i16>* %9024, align 2, !tbaa !396
  %9026 = getelementptr inbounds i16, i16* %8986, i64 -11
  %9027 = bitcast i16* %9026 to <16 x i16>*
  %9028 = load <16 x i16>, <16 x i16>* %9027, align 2, !tbaa !396
  %9029 = add <16 x i16> %8995, %8989
  %9030 = add <16 x i16> %9029, %9001
  %9031 = add <16 x i16> %9030, %9007
  %9032 = add <16 x i16> %9031, %9013
  %9033 = add <16 x i16> %9032, %9019
  %9034 = add <16 x i16> %9033, %9025
  %9035 = add <16 x i16> %8998, %8992
  %9036 = add <16 x i16> %9035, %9004
  %9037 = add <16 x i16> %9036, %9010
  %9038 = add <16 x i16> %9037, %9016
  %9039 = add <16 x i16> %9038, %9022
  %9040 = add <16 x i16> %9039, %9028
  %9041 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9034, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9042 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9040, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9043 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9041, <16 x i16> %9034)
  %9044 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9042, <16 x i16> %9040)
  %9045 = shufflevector <16 x i16> %9043, <16 x i16> %9044, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9046 = lshr <32 x i16> %9045, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9047 = shufflevector <32 x i16> %9046, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9048 = zext i32 %.pre-phi3512 to i64
  %9049 = mul nsw i64 %97, %9048
  %9050 = add nsw i64 %99, %9049
  %9051 = getelementptr inbounds i16, i16* %blur_x, i64 %9050
  %9052 = getelementptr inbounds i16, i16* %9051, i64 -32
  %9053 = bitcast i16* %9052 to <16 x i16>*
  store <16 x i16> %9047, <16 x i16>* %9053, align 2, !tbaa !399
  %9054 = shufflevector <32 x i16> %9046, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9055 = getelementptr inbounds i16, i16* %9051, i64 -16
  %9056 = bitcast i16* %9055 to <16 x i16>*
  store <16 x i16> %9054, <16 x i16>* %9056, align 2, !tbaa !399
  %9057 = zext i32 %.pre-phi3524 to i64
  %9058 = mul nsw i64 %9057, %116
  %9059 = add nsw i64 %9058, %94
  %9060 = getelementptr inbounds i16, i16* %blur_x, i64 %9059
  %9061 = getelementptr inbounds i16, i16* %9060, i64 -32
  %9062 = bitcast i16* %9061 to <16 x i16>*
  %9063 = load <16 x i16>, <16 x i16>* %9062, align 2, !tbaa !399
  %9064 = getelementptr inbounds i16, i16* %9060, i64 -16
  %9065 = bitcast i16* %9064 to <16 x i16>*
  %9066 = load <16 x i16>, <16 x i16>* %9065, align 2, !tbaa !399
  %9067 = zext i32 %.pre-phi3520 to i64
  %9068 = mul nsw i64 %9067, %116
  %9069 = add nsw i64 %9068, %94
  %9070 = getelementptr inbounds i16, i16* %blur_x, i64 %9069
  %9071 = getelementptr inbounds i16, i16* %9070, i64 -32
  %9072 = bitcast i16* %9071 to <16 x i16>*
  %9073 = load <16 x i16>, <16 x i16>* %9072, align 2, !tbaa !399
  %9074 = getelementptr inbounds i16, i16* %9070, i64 -16
  %9075 = bitcast i16* %9074 to <16 x i16>*
  %9076 = load <16 x i16>, <16 x i16>* %9075, align 2, !tbaa !399
  %9077 = zext i32 %.pre-phi3528 to i64
  %9078 = mul nsw i64 %9077, %116
  %9079 = add nsw i64 %9078, %94
  %9080 = getelementptr inbounds i16, i16* %blur_x, i64 %9079
  %9081 = getelementptr inbounds i16, i16* %9080, i64 -32
  %9082 = bitcast i16* %9081 to <16 x i16>*
  %9083 = load <16 x i16>, <16 x i16>* %9082, align 2, !tbaa !399
  %9084 = getelementptr inbounds i16, i16* %9080, i64 -16
  %9085 = bitcast i16* %9084 to <16 x i16>*
  %9086 = load <16 x i16>, <16 x i16>* %9085, align 2, !tbaa !399
  %9087 = zext i32 %.pre-phi3534 to i64
  %9088 = mul nsw i64 %9087, %116
  %9089 = add nsw i64 %9088, %94
  %9090 = getelementptr inbounds i16, i16* %blur_x, i64 %9089
  %9091 = getelementptr inbounds i16, i16* %9090, i64 -32
  %9092 = bitcast i16* %9091 to <16 x i16>*
  %9093 = load <16 x i16>, <16 x i16>* %9092, align 2, !tbaa !399
  %9094 = getelementptr inbounds i16, i16* %9090, i64 -16
  %9095 = bitcast i16* %9094 to <16 x i16>*
  %9096 = load <16 x i16>, <16 x i16>* %9095, align 2, !tbaa !399
  %9097 = zext i32 %.pre-phi to i64
  %9098 = mul nsw i64 %9097, %116
  %9099 = add nsw i64 %9098, %94
  %9100 = getelementptr inbounds i16, i16* %blur_x, i64 %9099
  %9101 = getelementptr inbounds i16, i16* %9100, i64 -32
  %9102 = bitcast i16* %9101 to <16 x i16>*
  %9103 = load <16 x i16>, <16 x i16>* %9102, align 2, !tbaa !399
  %9104 = getelementptr inbounds i16, i16* %9100, i64 -16
  %9105 = bitcast i16* %9104 to <16 x i16>*
  %9106 = load <16 x i16>, <16 x i16>* %9105, align 2, !tbaa !399
  %9107 = mul nsw i64 %9048, %116
  %9108 = add nsw i64 %9107, %94
  %9109 = getelementptr inbounds i16, i16* %blur_x, i64 %9108
  %9110 = getelementptr inbounds i16, i16* %9109, i64 -32
  %9111 = bitcast i16* %9110 to <16 x i16>*
  %9112 = load <16 x i16>, <16 x i16>* %9111, align 2, !tbaa !399
  %9113 = getelementptr inbounds i16, i16* %9109, i64 -16
  %9114 = bitcast i16* %9113 to <16 x i16>*
  %9115 = load <16 x i16>, <16 x i16>* %9114, align 2, !tbaa !399
  %9116 = zext i32 %.pre-phi3508 to i64
  %9117 = mul nsw i64 %9116, %116
  %9118 = add nsw i64 %9117, %94
  %9119 = getelementptr inbounds i16, i16* %blur_x, i64 %9118
  %9120 = getelementptr inbounds i16, i16* %9119, i64 -32
  %9121 = bitcast i16* %9120 to <16 x i16>*
  %9122 = load <16 x i16>, <16 x i16>* %9121, align 2, !tbaa !399
  %9123 = getelementptr inbounds i16, i16* %9119, i64 -16
  %9124 = bitcast i16* %9123 to <16 x i16>*
  %9125 = load <16 x i16>, <16 x i16>* %9124, align 2, !tbaa !399
  %9126 = add <16 x i16> %9073, %9063
  %9127 = add <16 x i16> %9126, %9083
  %9128 = add <16 x i16> %9127, %9093
  %9129 = add <16 x i16> %9128, %9103
  %9130 = add <16 x i16> %9129, %9112
  %9131 = add <16 x i16> %9130, %9122
  %9132 = add <16 x i16> %9076, %9066
  %9133 = add <16 x i16> %9132, %9086
  %9134 = add <16 x i16> %9133, %9096
  %9135 = add <16 x i16> %9134, %9106
  %9136 = add <16 x i16> %9135, %9115
  %9137 = add <16 x i16> %9136, %9125
  %9138 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9131, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9139 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9137, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9140 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9138, <16 x i16> %9131)
  %9141 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9139, <16 x i16> %9137)
  %9142 = shufflevector <16 x i16> %9140, <16 x i16> %9141, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9143 = lshr <32 x i16> %9142, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9144 = shufflevector <32 x i16> %9143, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9145 = sext i32 %a26 to i64
  %9146 = add nsw i64 %9145, 12
  %9147 = mul nsw i64 %9146, %117
  %9148 = add nsw i64 %119, %9147
  %9149 = getelementptr inbounds i16, i16* %66, i64 %9148
  %9150 = getelementptr inbounds i16, i16* %9149, i64 -32
  %9151 = bitcast i16* %9150 to <16 x i16>*
  store <16 x i16> %9144, <16 x i16>* %9151, align 2, !tbaa !401
  %9152 = shufflevector <32 x i16> %9143, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9153 = getelementptr inbounds i16, i16* %9149, i64 -16
  %9154 = bitcast i16* %9153 to <16 x i16>*
  store <16 x i16> %9152, <16 x i16>* %9154, align 2, !tbaa !401
  br label %after_bb393

"for blur_y.s0.x.x.rebased398":                   ; preds = %"for blur_y.s0.x.x.rebased398.preheader", %"consume blur_x405"
  %indvars.iv3315 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased398.preheader" ], [ %indvars.iv.next3316, %"consume blur_x405" ]
  %9155 = add nsw i64 %indvars.iv3315, %101
  %9156 = icmp slt i64 %9155, 1
  %9157 = trunc i64 %9155 to i32
  %9158 = shl nsw i32 %9157, 5
  %9159 = icmp sgt i32 %4, %9158
  %9160 = or i1 %9156, %9159
  br i1 %9160, label %"produce blur_x404", label %"for blur_y.s0.x.x.rebased398.consume blur_x405_crit_edge"

"for blur_y.s0.x.x.rebased398.consume blur_x405_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased398"
  %.pre3557 = shl nsw i64 %9155, 5
  br label %"consume blur_x405"

"end for blur_y.s0.x.x.rebased399":               ; preds = %"consume blur_x405", %after_bb393
  br i1 %102, label %"for blur_y.s0.x.x.rebased406.preheader", label %"end for blur_y.s0.x.x.rebased407", !prof !386

"for blur_y.s0.x.x.rebased406.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased399"
  %9161 = sext i32 %t1738 to i64
  %9162 = zext i32 %.pre-phi3524 to i64
  %9163 = mul nsw i64 %9162, %116
  %9164 = sub nsw i64 %9163, %96
  %9165 = zext i32 %.pre-phi3520 to i64
  %9166 = mul nsw i64 %9165, %116
  %9167 = sub nsw i64 %9166, %96
  %9168 = zext i32 %.pre-phi3528 to i64
  %9169 = mul nsw i64 %9168, %116
  %9170 = sub nsw i64 %9169, %96
  %9171 = zext i32 %.pre-phi3534 to i64
  %9172 = mul nsw i64 %9171, %116
  %9173 = sub nsw i64 %9172, %96
  %9174 = zext i32 %.pre-phi to i64
  %9175 = mul nsw i64 %9174, %116
  %9176 = sub nsw i64 %9175, %96
  %9177 = zext i32 %.pre-phi3512 to i64
  %9178 = mul nsw i64 %9177, %116
  %9179 = sub nsw i64 %9178, %96
  %9180 = zext i32 %.pre-phi3508 to i64
  %9181 = mul nsw i64 %9180, %116
  %9182 = sub nsw i64 %9181, %96
  %9183 = sext i32 %a26 to i64
  %9184 = add nsw i64 %9183, 12
  %9185 = mul nsw i64 %9184, %117
  %9186 = add nsw i64 %9185, %120
  br label %"for blur_y.s0.x.x.rebased406"

"produce blur_x404":                              ; preds = %"for blur_y.s0.x.x.rebased398"
  %t944 = add nsw i32 %9158, %t1953
  %9187 = sext i32 %t944 to i64
  %9188 = getelementptr inbounds i16, i16* %read_input, i64 %9187
  %9189 = getelementptr inbounds i16, i16* %9188, i64 1
  %9190 = bitcast i16* %9189 to <16 x i16>*
  %9191 = load <16 x i16>, <16 x i16>* %9190, align 2, !tbaa !396
  %9192 = getelementptr inbounds i16, i16* %9188, i64 17
  %9193 = bitcast i16* %9192 to <16 x i16>*
  %9194 = load <16 x i16>, <16 x i16>* %9193, align 2, !tbaa !396
  %9195 = bitcast i16* %9188 to <16 x i16>*
  %9196 = load <16 x i16>, <16 x i16>* %9195, align 2, !tbaa !396
  %9197 = getelementptr inbounds i16, i16* %9188, i64 16
  %9198 = bitcast i16* %9197 to <16 x i16>*
  %9199 = load <16 x i16>, <16 x i16>* %9198, align 2, !tbaa !396
  %9200 = getelementptr inbounds i16, i16* %9188, i64 2
  %9201 = bitcast i16* %9200 to <16 x i16>*
  %9202 = load <16 x i16>, <16 x i16>* %9201, align 2, !tbaa !396
  %9203 = getelementptr inbounds i16, i16* %9188, i64 18
  %9204 = bitcast i16* %9203 to <16 x i16>*
  %9205 = load <16 x i16>, <16 x i16>* %9204, align 2, !tbaa !396
  %9206 = getelementptr inbounds i16, i16* %9188, i64 3
  %9207 = bitcast i16* %9206 to <16 x i16>*
  %9208 = load <16 x i16>, <16 x i16>* %9207, align 2, !tbaa !396
  %9209 = getelementptr inbounds i16, i16* %9188, i64 19
  %9210 = bitcast i16* %9209 to <16 x i16>*
  %9211 = load <16 x i16>, <16 x i16>* %9210, align 2, !tbaa !396
  %9212 = getelementptr inbounds i16, i16* %9188, i64 4
  %9213 = bitcast i16* %9212 to <16 x i16>*
  %9214 = load <16 x i16>, <16 x i16>* %9213, align 2, !tbaa !396
  %9215 = getelementptr inbounds i16, i16* %9188, i64 20
  %9216 = bitcast i16* %9215 to <16 x i16>*
  %9217 = load <16 x i16>, <16 x i16>* %9216, align 2, !tbaa !396
  %9218 = getelementptr inbounds i16, i16* %9188, i64 6
  %9219 = bitcast i16* %9218 to <16 x i16>*
  %9220 = load <16 x i16>, <16 x i16>* %9219, align 2, !tbaa !396
  %9221 = getelementptr inbounds i16, i16* %9188, i64 22
  %9222 = bitcast i16* %9221 to <16 x i16>*
  %9223 = load <16 x i16>, <16 x i16>* %9222, align 2, !tbaa !396
  %9224 = getelementptr inbounds i16, i16* %9188, i64 5
  %9225 = bitcast i16* %9224 to <16 x i16>*
  %9226 = load <16 x i16>, <16 x i16>* %9225, align 2, !tbaa !396
  %9227 = getelementptr inbounds i16, i16* %9188, i64 21
  %9228 = bitcast i16* %9227 to <16 x i16>*
  %9229 = load <16 x i16>, <16 x i16>* %9228, align 2, !tbaa !396
  %9230 = add <16 x i16> %9196, %9191
  %9231 = add <16 x i16> %9230, %9202
  %9232 = add <16 x i16> %9231, %9208
  %9233 = add <16 x i16> %9232, %9214
  %9234 = add <16 x i16> %9233, %9220
  %9235 = add <16 x i16> %9234, %9226
  %9236 = add <16 x i16> %9199, %9194
  %9237 = add <16 x i16> %9236, %9205
  %9238 = add <16 x i16> %9237, %9211
  %9239 = add <16 x i16> %9238, %9217
  %9240 = add <16 x i16> %9239, %9223
  %9241 = add <16 x i16> %9240, %9229
  %9242 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9235, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9243 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9241, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9244 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9242, <16 x i16> %9235)
  %9245 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9243, <16 x i16> %9241)
  %9246 = shufflevector <16 x i16> %9244, <16 x i16> %9245, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9247 = lshr <32 x i16> %9246, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9248 = shufflevector <32 x i16> %9247, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9249 = shl nsw i64 %9155, 5
  %9250 = add nsw i64 %9249, %8960
  %9251 = getelementptr inbounds i16, i16* %blur_x, i64 %9250
  %9252 = bitcast i16* %9251 to <16 x i16>*
  store <16 x i16> %9248, <16 x i16>* %9252, align 2, !tbaa !399
  %9253 = shufflevector <32 x i16> %9247, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9254 = getelementptr inbounds i16, i16* %9251, i64 16
  %9255 = bitcast i16* %9254 to <16 x i16>*
  store <16 x i16> %9253, <16 x i16>* %9255, align 2, !tbaa !399
  br label %"consume blur_x405"

"consume blur_x405":                              ; preds = %"for blur_y.s0.x.x.rebased398.consume blur_x405_crit_edge", %"produce blur_x404"
  %.pre-phi3558 = phi i64 [ %.pre3557, %"for blur_y.s0.x.x.rebased398.consume blur_x405_crit_edge" ], [ %9249, %"produce blur_x404" ]
  %9256 = add nsw i64 %8963, %.pre-phi3558
  %9257 = getelementptr inbounds i16, i16* %blur_x, i64 %9256
  %9258 = bitcast i16* %9257 to <16 x i16>*
  %9259 = load <16 x i16>, <16 x i16>* %9258, align 2, !tbaa !399
  %9260 = getelementptr inbounds i16, i16* %9257, i64 16
  %9261 = bitcast i16* %9260 to <16 x i16>*
  %9262 = load <16 x i16>, <16 x i16>* %9261, align 2, !tbaa !399
  %9263 = add nsw i64 %8966, %.pre-phi3558
  %9264 = getelementptr inbounds i16, i16* %blur_x, i64 %9263
  %9265 = bitcast i16* %9264 to <16 x i16>*
  %9266 = load <16 x i16>, <16 x i16>* %9265, align 2, !tbaa !399
  %9267 = getelementptr inbounds i16, i16* %9264, i64 16
  %9268 = bitcast i16* %9267 to <16 x i16>*
  %9269 = load <16 x i16>, <16 x i16>* %9268, align 2, !tbaa !399
  %9270 = add nsw i64 %8969, %.pre-phi3558
  %9271 = getelementptr inbounds i16, i16* %blur_x, i64 %9270
  %9272 = bitcast i16* %9271 to <16 x i16>*
  %9273 = load <16 x i16>, <16 x i16>* %9272, align 2, !tbaa !399
  %9274 = getelementptr inbounds i16, i16* %9271, i64 16
  %9275 = bitcast i16* %9274 to <16 x i16>*
  %9276 = load <16 x i16>, <16 x i16>* %9275, align 2, !tbaa !399
  %9277 = add nsw i64 %8972, %.pre-phi3558
  %9278 = getelementptr inbounds i16, i16* %blur_x, i64 %9277
  %9279 = bitcast i16* %9278 to <16 x i16>*
  %9280 = load <16 x i16>, <16 x i16>* %9279, align 2, !tbaa !399
  %9281 = getelementptr inbounds i16, i16* %9278, i64 16
  %9282 = bitcast i16* %9281 to <16 x i16>*
  %9283 = load <16 x i16>, <16 x i16>* %9282, align 2, !tbaa !399
  %9284 = add nsw i64 %8975, %.pre-phi3558
  %9285 = getelementptr inbounds i16, i16* %blur_x, i64 %9284
  %9286 = bitcast i16* %9285 to <16 x i16>*
  %9287 = load <16 x i16>, <16 x i16>* %9286, align 2, !tbaa !399
  %9288 = getelementptr inbounds i16, i16* %9285, i64 16
  %9289 = bitcast i16* %9288 to <16 x i16>*
  %9290 = load <16 x i16>, <16 x i16>* %9289, align 2, !tbaa !399
  %9291 = add nsw i64 %8978, %.pre-phi3558
  %9292 = getelementptr inbounds i16, i16* %blur_x, i64 %9291
  %9293 = bitcast i16* %9292 to <16 x i16>*
  %9294 = load <16 x i16>, <16 x i16>* %9293, align 2, !tbaa !399
  %9295 = getelementptr inbounds i16, i16* %9292, i64 16
  %9296 = bitcast i16* %9295 to <16 x i16>*
  %9297 = load <16 x i16>, <16 x i16>* %9296, align 2, !tbaa !399
  %9298 = add nsw i64 %8981, %.pre-phi3558
  %9299 = getelementptr inbounds i16, i16* %blur_x, i64 %9298
  %9300 = bitcast i16* %9299 to <16 x i16>*
  %9301 = load <16 x i16>, <16 x i16>* %9300, align 2, !tbaa !399
  %9302 = getelementptr inbounds i16, i16* %9299, i64 16
  %9303 = bitcast i16* %9302 to <16 x i16>*
  %9304 = load <16 x i16>, <16 x i16>* %9303, align 2, !tbaa !399
  %9305 = add <16 x i16> %9266, %9259
  %9306 = add <16 x i16> %9305, %9273
  %9307 = add <16 x i16> %9306, %9280
  %9308 = add <16 x i16> %9307, %9287
  %9309 = add <16 x i16> %9308, %9294
  %9310 = add <16 x i16> %9309, %9301
  %9311 = add <16 x i16> %9269, %9262
  %9312 = add <16 x i16> %9311, %9276
  %9313 = add <16 x i16> %9312, %9283
  %9314 = add <16 x i16> %9313, %9290
  %9315 = add <16 x i16> %9314, %9297
  %9316 = add <16 x i16> %9315, %9304
  %9317 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9310, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9318 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9316, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9319 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9317, <16 x i16> %9310)
  %9320 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9318, <16 x i16> %9316)
  %9321 = shufflevector <16 x i16> %9319, <16 x i16> %9320, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9322 = lshr <32 x i16> %9321, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9323 = shufflevector <32 x i16> %9322, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9324 = add nsw i64 %8985, %.pre-phi3558
  %9325 = getelementptr inbounds i16, i16* %66, i64 %9324
  %9326 = bitcast i16* %9325 to <16 x i16>*
  store <16 x i16> %9323, <16 x i16>* %9326, align 2, !tbaa !401
  %9327 = shufflevector <32 x i16> %9322, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9328 = getelementptr inbounds i16, i16* %9325, i64 16
  %9329 = bitcast i16* %9328 to <16 x i16>*
  store <16 x i16> %9327, <16 x i16>* %9329, align 2, !tbaa !401
  %indvars.iv.next3316 = add nuw nsw i64 %indvars.iv3315, 1
  %.not2776 = icmp eq i64 %indvars.iv.next3316, %188
  br i1 %.not2776, label %"end for blur_y.s0.x.x.rebased399", label %"for blur_y.s0.x.x.rebased398"

"for blur_y.s0.x.x.rebased406":                   ; preds = %"for blur_y.s0.x.x.rebased406.preheader", %"consume blur_x414"
  %blur_y.s0.x.x.rebased408 = phi i32 [ %9480, %"consume blur_x414" ], [ 0, %"for blur_y.s0.x.x.rebased406.preheader" ]
  %9330 = add nsw i32 %blur_y.s0.x.x.rebased408, %t1670
  %a203 = shl nsw i32 %9330, 5
  %9331 = icmp sgt i32 %a14, %a203
  %b209 = select i1 %9331, i32 %a203, i32 %a14
  %9332 = icmp slt i32 %9330, 1
  %9333 = icmp sgt i32 %4, %a203
  %9334 = or i1 %9332, %9333
  br i1 %9334, label %"produce blur_x412", label %"consume blur_x414"

"end for blur_y.s0.x.x.rebased407":               ; preds = %"consume blur_x414", %"end for blur_y.s0.x.x.rebased399"
  br i1 %34, label %"produce blur_x418", label %after_bb415

"produce blur_x412":                              ; preds = %"for blur_y.s0.x.x.rebased406"
  %9335 = icmp slt i32 %b209, %4
  %blur_x.s0.x.v1.base.s413 = select i1 %9335, i32 %b209, i32 %4
  %t949 = add nsw i32 %blur_x.s0.x.v1.base.s413, %t1953
  %9336 = sext i32 %t949 to i64
  %9337 = getelementptr inbounds i16, i16* %read_input, i64 %9336
  %9338 = getelementptr inbounds i16, i16* %9337, i64 1
  %9339 = bitcast i16* %9338 to <16 x i16>*
  %9340 = load <16 x i16>, <16 x i16>* %9339, align 2, !tbaa !396
  %9341 = getelementptr inbounds i16, i16* %9337, i64 17
  %9342 = bitcast i16* %9341 to <16 x i16>*
  %9343 = load <16 x i16>, <16 x i16>* %9342, align 2, !tbaa !396
  %9344 = bitcast i16* %9337 to <16 x i16>*
  %9345 = load <16 x i16>, <16 x i16>* %9344, align 2, !tbaa !396
  %9346 = getelementptr inbounds i16, i16* %9337, i64 16
  %9347 = bitcast i16* %9346 to <16 x i16>*
  %9348 = load <16 x i16>, <16 x i16>* %9347, align 2, !tbaa !396
  %9349 = getelementptr inbounds i16, i16* %9337, i64 2
  %9350 = bitcast i16* %9349 to <16 x i16>*
  %9351 = load <16 x i16>, <16 x i16>* %9350, align 2, !tbaa !396
  %9352 = getelementptr inbounds i16, i16* %9337, i64 18
  %9353 = bitcast i16* %9352 to <16 x i16>*
  %9354 = load <16 x i16>, <16 x i16>* %9353, align 2, !tbaa !396
  %9355 = getelementptr inbounds i16, i16* %9337, i64 3
  %9356 = bitcast i16* %9355 to <16 x i16>*
  %9357 = load <16 x i16>, <16 x i16>* %9356, align 2, !tbaa !396
  %9358 = getelementptr inbounds i16, i16* %9337, i64 19
  %9359 = bitcast i16* %9358 to <16 x i16>*
  %9360 = load <16 x i16>, <16 x i16>* %9359, align 2, !tbaa !396
  %9361 = getelementptr inbounds i16, i16* %9337, i64 4
  %9362 = bitcast i16* %9361 to <16 x i16>*
  %9363 = load <16 x i16>, <16 x i16>* %9362, align 2, !tbaa !396
  %9364 = getelementptr inbounds i16, i16* %9337, i64 20
  %9365 = bitcast i16* %9364 to <16 x i16>*
  %9366 = load <16 x i16>, <16 x i16>* %9365, align 2, !tbaa !396
  %9367 = getelementptr inbounds i16, i16* %9337, i64 6
  %9368 = bitcast i16* %9367 to <16 x i16>*
  %9369 = load <16 x i16>, <16 x i16>* %9368, align 2, !tbaa !396
  %9370 = getelementptr inbounds i16, i16* %9337, i64 22
  %9371 = bitcast i16* %9370 to <16 x i16>*
  %9372 = load <16 x i16>, <16 x i16>* %9371, align 2, !tbaa !396
  %9373 = getelementptr inbounds i16, i16* %9337, i64 5
  %9374 = bitcast i16* %9373 to <16 x i16>*
  %9375 = load <16 x i16>, <16 x i16>* %9374, align 2, !tbaa !396
  %9376 = getelementptr inbounds i16, i16* %9337, i64 21
  %9377 = bitcast i16* %9376 to <16 x i16>*
  %9378 = load <16 x i16>, <16 x i16>* %9377, align 2, !tbaa !396
  %9379 = add <16 x i16> %9345, %9340
  %9380 = add <16 x i16> %9379, %9351
  %9381 = add <16 x i16> %9380, %9357
  %9382 = add <16 x i16> %9381, %9363
  %9383 = add <16 x i16> %9382, %9369
  %9384 = add <16 x i16> %9383, %9375
  %9385 = add <16 x i16> %9348, %9343
  %9386 = add <16 x i16> %9385, %9354
  %9387 = add <16 x i16> %9386, %9360
  %9388 = add <16 x i16> %9387, %9366
  %9389 = add <16 x i16> %9388, %9372
  %9390 = add <16 x i16> %9389, %9378
  %9391 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9384, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9392 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9390, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9393 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9391, <16 x i16> %9384)
  %9394 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9392, <16 x i16> %9390)
  %9395 = shufflevector <16 x i16> %9393, <16 x i16> %9394, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9396 = lshr <32 x i16> %9395, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9397 = shufflevector <32 x i16> %9396, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9398 = sext i32 %blur_x.s0.x.v1.base.s413 to i64
  %9399 = add nsw i64 %9398, %9161
  %9400 = getelementptr inbounds i16, i16* %blur_x, i64 %9399
  %9401 = bitcast i16* %9400 to <16 x i16>*
  store <16 x i16> %9397, <16 x i16>* %9401, align 2, !tbaa !399
  %9402 = shufflevector <32 x i16> %9396, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9403 = getelementptr inbounds i16, i16* %9400, i64 16
  %9404 = bitcast i16* %9403 to <16 x i16>*
  store <16 x i16> %9402, <16 x i16>* %9404, align 2, !tbaa !399
  br label %"consume blur_x414"

"consume blur_x414":                              ; preds = %"for blur_y.s0.x.x.rebased406", %"produce blur_x412"
  %9405 = sext i32 %b209 to i64
  %9406 = add nsw i64 %9164, %9405
  %9407 = getelementptr inbounds i16, i16* %blur_x, i64 %9406
  %9408 = bitcast i16* %9407 to <16 x i16>*
  %9409 = load <16 x i16>, <16 x i16>* %9408, align 2, !tbaa !399
  %9410 = getelementptr inbounds i16, i16* %9407, i64 16
  %9411 = bitcast i16* %9410 to <16 x i16>*
  %9412 = load <16 x i16>, <16 x i16>* %9411, align 2, !tbaa !399
  %9413 = add nsw i64 %9167, %9405
  %9414 = getelementptr inbounds i16, i16* %blur_x, i64 %9413
  %9415 = bitcast i16* %9414 to <16 x i16>*
  %9416 = load <16 x i16>, <16 x i16>* %9415, align 2, !tbaa !399
  %9417 = getelementptr inbounds i16, i16* %9414, i64 16
  %9418 = bitcast i16* %9417 to <16 x i16>*
  %9419 = load <16 x i16>, <16 x i16>* %9418, align 2, !tbaa !399
  %9420 = add nsw i64 %9170, %9405
  %9421 = getelementptr inbounds i16, i16* %blur_x, i64 %9420
  %9422 = bitcast i16* %9421 to <16 x i16>*
  %9423 = load <16 x i16>, <16 x i16>* %9422, align 2, !tbaa !399
  %9424 = getelementptr inbounds i16, i16* %9421, i64 16
  %9425 = bitcast i16* %9424 to <16 x i16>*
  %9426 = load <16 x i16>, <16 x i16>* %9425, align 2, !tbaa !399
  %9427 = add nsw i64 %9173, %9405
  %9428 = getelementptr inbounds i16, i16* %blur_x, i64 %9427
  %9429 = bitcast i16* %9428 to <16 x i16>*
  %9430 = load <16 x i16>, <16 x i16>* %9429, align 2, !tbaa !399
  %9431 = getelementptr inbounds i16, i16* %9428, i64 16
  %9432 = bitcast i16* %9431 to <16 x i16>*
  %9433 = load <16 x i16>, <16 x i16>* %9432, align 2, !tbaa !399
  %9434 = add nsw i64 %9176, %9405
  %9435 = getelementptr inbounds i16, i16* %blur_x, i64 %9434
  %9436 = bitcast i16* %9435 to <16 x i16>*
  %9437 = load <16 x i16>, <16 x i16>* %9436, align 2, !tbaa !399
  %9438 = getelementptr inbounds i16, i16* %9435, i64 16
  %9439 = bitcast i16* %9438 to <16 x i16>*
  %9440 = load <16 x i16>, <16 x i16>* %9439, align 2, !tbaa !399
  %9441 = add nsw i64 %9179, %9405
  %9442 = getelementptr inbounds i16, i16* %blur_x, i64 %9441
  %9443 = bitcast i16* %9442 to <16 x i16>*
  %9444 = load <16 x i16>, <16 x i16>* %9443, align 2, !tbaa !399
  %9445 = getelementptr inbounds i16, i16* %9442, i64 16
  %9446 = bitcast i16* %9445 to <16 x i16>*
  %9447 = load <16 x i16>, <16 x i16>* %9446, align 2, !tbaa !399
  %9448 = add nsw i64 %9182, %9405
  %9449 = getelementptr inbounds i16, i16* %blur_x, i64 %9448
  %9450 = bitcast i16* %9449 to <16 x i16>*
  %9451 = load <16 x i16>, <16 x i16>* %9450, align 2, !tbaa !399
  %9452 = getelementptr inbounds i16, i16* %9449, i64 16
  %9453 = bitcast i16* %9452 to <16 x i16>*
  %9454 = load <16 x i16>, <16 x i16>* %9453, align 2, !tbaa !399
  %9455 = add <16 x i16> %9416, %9409
  %9456 = add <16 x i16> %9455, %9423
  %9457 = add <16 x i16> %9456, %9430
  %9458 = add <16 x i16> %9457, %9437
  %9459 = add <16 x i16> %9458, %9444
  %9460 = add <16 x i16> %9459, %9451
  %9461 = add <16 x i16> %9419, %9412
  %9462 = add <16 x i16> %9461, %9426
  %9463 = add <16 x i16> %9462, %9433
  %9464 = add <16 x i16> %9463, %9440
  %9465 = add <16 x i16> %9464, %9447
  %9466 = add <16 x i16> %9465, %9454
  %9467 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9460, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9468 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9466, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9469 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9467, <16 x i16> %9460)
  %9470 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9468, <16 x i16> %9466)
  %9471 = shufflevector <16 x i16> %9469, <16 x i16> %9470, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9472 = lshr <32 x i16> %9471, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9473 = shufflevector <32 x i16> %9472, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9474 = add nsw i64 %9186, %9405
  %9475 = getelementptr inbounds i16, i16* %66, i64 %9474
  %9476 = bitcast i16* %9475 to <16 x i16>*
  store <16 x i16> %9473, <16 x i16>* %9476, align 2, !tbaa !401
  %9477 = shufflevector <32 x i16> %9472, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9478 = getelementptr inbounds i16, i16* %9475, i64 16
  %9479 = bitcast i16* %9478 to <16 x i16>*
  store <16 x i16> %9477, <16 x i16>* %9479, align 2, !tbaa !401
  %9480 = add nuw nsw i32 %blur_y.s0.x.x.rebased408, 1
  %.not2775 = icmp eq i32 %9480, %t1727
  br i1 %.not2775, label %"end for blur_y.s0.x.x.rebased407", label %"for blur_y.s0.x.x.rebased406"

after_bb415:                                      ; preds = %"end for blur_y.s0.x.x.rebased407", %"produce blur_x418"
  br i1 %100, label %"for blur_y.s0.x.x.rebased420.preheader", label %"end for blur_y.s0.x.x.rebased421", !prof !386

"for blur_y.s0.x.x.rebased420.preheader":         ; preds = %after_bb415
  %9481 = sext i32 %t1744 to i64
  %9482 = zext i32 %.pre-phi3528 to i64
  %9483 = mul nsw i64 %9482, %116
  %9484 = sub nsw i64 %9483, %96
  %9485 = zext i32 %.pre-phi3524 to i64
  %9486 = mul nsw i64 %9485, %116
  %9487 = sub nsw i64 %9486, %96
  %9488 = zext i32 %.pre-phi3534 to i64
  %9489 = mul nsw i64 %9488, %116
  %9490 = sub nsw i64 %9489, %96
  %9491 = zext i32 %.pre-phi to i64
  %9492 = mul nsw i64 %9491, %116
  %9493 = sub nsw i64 %9492, %96
  %9494 = zext i32 %.pre-phi3508 to i64
  %9495 = mul nsw i64 %9494, %116
  %9496 = sub nsw i64 %9495, %96
  %9497 = zext i32 %.pre-phi3516 to i64
  %9498 = mul nsw i64 %9497, %116
  %9499 = sub nsw i64 %9498, %96
  %9500 = zext i32 %.pre-phi3512 to i64
  %9501 = mul nsw i64 %9500, %116
  %9502 = sub nsw i64 %9501, %96
  %9503 = sext i32 %a26 to i64
  %9504 = add nsw i64 %9503, 13
  %9505 = mul nsw i64 %9504, %117
  %9506 = add nsw i64 %9505, %120
  br label %"for blur_y.s0.x.x.rebased420"

"produce blur_x418":                              ; preds = %"end for blur_y.s0.x.x.rebased407"
  %9507 = getelementptr inbounds i16, i16* %read_input, i64 %145
  %9508 = getelementptr inbounds i16, i16* %9507, i64 -31
  %9509 = bitcast i16* %9508 to <16 x i16>*
  %9510 = load <16 x i16>, <16 x i16>* %9509, align 2, !tbaa !396
  %9511 = getelementptr inbounds i16, i16* %9507, i64 -15
  %9512 = bitcast i16* %9511 to <16 x i16>*
  %9513 = load <16 x i16>, <16 x i16>* %9512, align 2, !tbaa !396
  %9514 = getelementptr inbounds i16, i16* %9507, i64 -32
  %9515 = bitcast i16* %9514 to <16 x i16>*
  %9516 = load <16 x i16>, <16 x i16>* %9515, align 2, !tbaa !396
  %9517 = getelementptr inbounds i16, i16* %9507, i64 -16
  %9518 = bitcast i16* %9517 to <16 x i16>*
  %9519 = load <16 x i16>, <16 x i16>* %9518, align 2, !tbaa !396
  %9520 = getelementptr inbounds i16, i16* %9507, i64 -30
  %9521 = bitcast i16* %9520 to <16 x i16>*
  %9522 = load <16 x i16>, <16 x i16>* %9521, align 2, !tbaa !396
  %9523 = getelementptr inbounds i16, i16* %9507, i64 -14
  %9524 = bitcast i16* %9523 to <16 x i16>*
  %9525 = load <16 x i16>, <16 x i16>* %9524, align 2, !tbaa !396
  %9526 = getelementptr inbounds i16, i16* %9507, i64 -29
  %9527 = bitcast i16* %9526 to <16 x i16>*
  %9528 = load <16 x i16>, <16 x i16>* %9527, align 2, !tbaa !396
  %9529 = getelementptr inbounds i16, i16* %9507, i64 -13
  %9530 = bitcast i16* %9529 to <16 x i16>*
  %9531 = load <16 x i16>, <16 x i16>* %9530, align 2, !tbaa !396
  %9532 = getelementptr inbounds i16, i16* %9507, i64 -28
  %9533 = bitcast i16* %9532 to <16 x i16>*
  %9534 = load <16 x i16>, <16 x i16>* %9533, align 2, !tbaa !396
  %9535 = getelementptr inbounds i16, i16* %9507, i64 -12
  %9536 = bitcast i16* %9535 to <16 x i16>*
  %9537 = load <16 x i16>, <16 x i16>* %9536, align 2, !tbaa !396
  %9538 = getelementptr inbounds i16, i16* %9507, i64 -26
  %9539 = bitcast i16* %9538 to <16 x i16>*
  %9540 = load <16 x i16>, <16 x i16>* %9539, align 2, !tbaa !396
  %9541 = getelementptr inbounds i16, i16* %9507, i64 -10
  %9542 = bitcast i16* %9541 to <16 x i16>*
  %9543 = load <16 x i16>, <16 x i16>* %9542, align 2, !tbaa !396
  %9544 = getelementptr inbounds i16, i16* %9507, i64 -27
  %9545 = bitcast i16* %9544 to <16 x i16>*
  %9546 = load <16 x i16>, <16 x i16>* %9545, align 2, !tbaa !396
  %9547 = getelementptr inbounds i16, i16* %9507, i64 -11
  %9548 = bitcast i16* %9547 to <16 x i16>*
  %9549 = load <16 x i16>, <16 x i16>* %9548, align 2, !tbaa !396
  %9550 = add <16 x i16> %9516, %9510
  %9551 = add <16 x i16> %9550, %9522
  %9552 = add <16 x i16> %9551, %9528
  %9553 = add <16 x i16> %9552, %9534
  %9554 = add <16 x i16> %9553, %9540
  %9555 = add <16 x i16> %9554, %9546
  %9556 = add <16 x i16> %9519, %9513
  %9557 = add <16 x i16> %9556, %9525
  %9558 = add <16 x i16> %9557, %9531
  %9559 = add <16 x i16> %9558, %9537
  %9560 = add <16 x i16> %9559, %9543
  %9561 = add <16 x i16> %9560, %9549
  %9562 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9555, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9563 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9561, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9564 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9562, <16 x i16> %9555)
  %9565 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9563, <16 x i16> %9561)
  %9566 = shufflevector <16 x i16> %9564, <16 x i16> %9565, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9567 = lshr <32 x i16> %9566, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9568 = shufflevector <32 x i16> %9567, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9569 = zext i32 %.pre-phi3516 to i64
  %9570 = mul nsw i64 %97, %9569
  %9571 = add nsw i64 %99, %9570
  %9572 = getelementptr inbounds i16, i16* %blur_x, i64 %9571
  %9573 = getelementptr inbounds i16, i16* %9572, i64 -32
  %9574 = bitcast i16* %9573 to <16 x i16>*
  store <16 x i16> %9568, <16 x i16>* %9574, align 2, !tbaa !399
  %9575 = shufflevector <32 x i16> %9567, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9576 = getelementptr inbounds i16, i16* %9572, i64 -16
  %9577 = bitcast i16* %9576 to <16 x i16>*
  store <16 x i16> %9575, <16 x i16>* %9577, align 2, !tbaa !399
  %9578 = zext i32 %.pre-phi3528 to i64
  %9579 = mul nsw i64 %9578, %116
  %9580 = add nsw i64 %9579, %94
  %9581 = getelementptr inbounds i16, i16* %blur_x, i64 %9580
  %9582 = getelementptr inbounds i16, i16* %9581, i64 -32
  %9583 = bitcast i16* %9582 to <16 x i16>*
  %9584 = load <16 x i16>, <16 x i16>* %9583, align 2, !tbaa !399
  %9585 = getelementptr inbounds i16, i16* %9581, i64 -16
  %9586 = bitcast i16* %9585 to <16 x i16>*
  %9587 = load <16 x i16>, <16 x i16>* %9586, align 2, !tbaa !399
  %9588 = zext i32 %.pre-phi3524 to i64
  %9589 = mul nsw i64 %9588, %116
  %9590 = add nsw i64 %9589, %94
  %9591 = getelementptr inbounds i16, i16* %blur_x, i64 %9590
  %9592 = getelementptr inbounds i16, i16* %9591, i64 -32
  %9593 = bitcast i16* %9592 to <16 x i16>*
  %9594 = load <16 x i16>, <16 x i16>* %9593, align 2, !tbaa !399
  %9595 = getelementptr inbounds i16, i16* %9591, i64 -16
  %9596 = bitcast i16* %9595 to <16 x i16>*
  %9597 = load <16 x i16>, <16 x i16>* %9596, align 2, !tbaa !399
  %9598 = zext i32 %.pre-phi3534 to i64
  %9599 = mul nsw i64 %9598, %116
  %9600 = add nsw i64 %9599, %94
  %9601 = getelementptr inbounds i16, i16* %blur_x, i64 %9600
  %9602 = getelementptr inbounds i16, i16* %9601, i64 -32
  %9603 = bitcast i16* %9602 to <16 x i16>*
  %9604 = load <16 x i16>, <16 x i16>* %9603, align 2, !tbaa !399
  %9605 = getelementptr inbounds i16, i16* %9601, i64 -16
  %9606 = bitcast i16* %9605 to <16 x i16>*
  %9607 = load <16 x i16>, <16 x i16>* %9606, align 2, !tbaa !399
  %9608 = zext i32 %.pre-phi to i64
  %9609 = mul nsw i64 %9608, %116
  %9610 = add nsw i64 %9609, %94
  %9611 = getelementptr inbounds i16, i16* %blur_x, i64 %9610
  %9612 = getelementptr inbounds i16, i16* %9611, i64 -32
  %9613 = bitcast i16* %9612 to <16 x i16>*
  %9614 = load <16 x i16>, <16 x i16>* %9613, align 2, !tbaa !399
  %9615 = getelementptr inbounds i16, i16* %9611, i64 -16
  %9616 = bitcast i16* %9615 to <16 x i16>*
  %9617 = load <16 x i16>, <16 x i16>* %9616, align 2, !tbaa !399
  %9618 = zext i32 %.pre-phi3508 to i64
  %9619 = mul nsw i64 %9618, %116
  %9620 = add nsw i64 %9619, %94
  %9621 = getelementptr inbounds i16, i16* %blur_x, i64 %9620
  %9622 = getelementptr inbounds i16, i16* %9621, i64 -32
  %9623 = bitcast i16* %9622 to <16 x i16>*
  %9624 = load <16 x i16>, <16 x i16>* %9623, align 2, !tbaa !399
  %9625 = getelementptr inbounds i16, i16* %9621, i64 -16
  %9626 = bitcast i16* %9625 to <16 x i16>*
  %9627 = load <16 x i16>, <16 x i16>* %9626, align 2, !tbaa !399
  %9628 = mul nsw i64 %9569, %116
  %9629 = add nsw i64 %9628, %94
  %9630 = getelementptr inbounds i16, i16* %blur_x, i64 %9629
  %9631 = getelementptr inbounds i16, i16* %9630, i64 -32
  %9632 = bitcast i16* %9631 to <16 x i16>*
  %9633 = load <16 x i16>, <16 x i16>* %9632, align 2, !tbaa !399
  %9634 = getelementptr inbounds i16, i16* %9630, i64 -16
  %9635 = bitcast i16* %9634 to <16 x i16>*
  %9636 = load <16 x i16>, <16 x i16>* %9635, align 2, !tbaa !399
  %9637 = zext i32 %.pre-phi3512 to i64
  %9638 = mul nsw i64 %9637, %116
  %9639 = add nsw i64 %9638, %94
  %9640 = getelementptr inbounds i16, i16* %blur_x, i64 %9639
  %9641 = getelementptr inbounds i16, i16* %9640, i64 -32
  %9642 = bitcast i16* %9641 to <16 x i16>*
  %9643 = load <16 x i16>, <16 x i16>* %9642, align 2, !tbaa !399
  %9644 = getelementptr inbounds i16, i16* %9640, i64 -16
  %9645 = bitcast i16* %9644 to <16 x i16>*
  %9646 = load <16 x i16>, <16 x i16>* %9645, align 2, !tbaa !399
  %9647 = add <16 x i16> %9594, %9584
  %9648 = add <16 x i16> %9647, %9604
  %9649 = add <16 x i16> %9648, %9614
  %9650 = add <16 x i16> %9649, %9624
  %9651 = add <16 x i16> %9650, %9633
  %9652 = add <16 x i16> %9651, %9643
  %9653 = add <16 x i16> %9597, %9587
  %9654 = add <16 x i16> %9653, %9607
  %9655 = add <16 x i16> %9654, %9617
  %9656 = add <16 x i16> %9655, %9627
  %9657 = add <16 x i16> %9656, %9636
  %9658 = add <16 x i16> %9657, %9646
  %9659 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9652, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9660 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9658, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9661 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9659, <16 x i16> %9652)
  %9662 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9660, <16 x i16> %9658)
  %9663 = shufflevector <16 x i16> %9661, <16 x i16> %9662, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9664 = lshr <32 x i16> %9663, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9665 = shufflevector <32 x i16> %9664, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9666 = sext i32 %a26 to i64
  %9667 = add nsw i64 %9666, 13
  %9668 = mul nsw i64 %9667, %117
  %9669 = add nsw i64 %119, %9668
  %9670 = getelementptr inbounds i16, i16* %66, i64 %9669
  %9671 = getelementptr inbounds i16, i16* %9670, i64 -32
  %9672 = bitcast i16* %9671 to <16 x i16>*
  store <16 x i16> %9665, <16 x i16>* %9672, align 2, !tbaa !401
  %9673 = shufflevector <32 x i16> %9664, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9674 = getelementptr inbounds i16, i16* %9670, i64 -16
  %9675 = bitcast i16* %9674 to <16 x i16>*
  store <16 x i16> %9673, <16 x i16>* %9675, align 2, !tbaa !401
  br label %after_bb415

"for blur_y.s0.x.x.rebased420":                   ; preds = %"for blur_y.s0.x.x.rebased420.preheader", %"consume blur_x427"
  %indvars.iv3318 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased420.preheader" ], [ %indvars.iv.next3319, %"consume blur_x427" ]
  %9676 = add nsw i64 %indvars.iv3318, %101
  %9677 = icmp slt i64 %9676, 1
  %9678 = trunc i64 %9676 to i32
  %9679 = shl nsw i32 %9678, 5
  %9680 = icmp sgt i32 %4, %9679
  %9681 = or i1 %9677, %9680
  br i1 %9681, label %"produce blur_x426", label %"for blur_y.s0.x.x.rebased420.consume blur_x427_crit_edge"

"for blur_y.s0.x.x.rebased420.consume blur_x427_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased420"
  %.pre3559 = shl nsw i64 %9676, 5
  br label %"consume blur_x427"

"end for blur_y.s0.x.x.rebased421":               ; preds = %"consume blur_x427", %after_bb415
  br i1 %102, label %"for blur_y.s0.x.x.rebased428.preheader", label %"end for blur_y.s0.x.x.rebased429", !prof !386

"for blur_y.s0.x.x.rebased428.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased421"
  %9682 = sext i32 %t1744 to i64
  %9683 = zext i32 %.pre-phi3528 to i64
  %9684 = mul nsw i64 %9683, %116
  %9685 = sub nsw i64 %9684, %96
  %9686 = zext i32 %.pre-phi3524 to i64
  %9687 = mul nsw i64 %9686, %116
  %9688 = sub nsw i64 %9687, %96
  %9689 = zext i32 %.pre-phi3534 to i64
  %9690 = mul nsw i64 %9689, %116
  %9691 = sub nsw i64 %9690, %96
  %9692 = zext i32 %.pre-phi to i64
  %9693 = mul nsw i64 %9692, %116
  %9694 = sub nsw i64 %9693, %96
  %9695 = zext i32 %.pre-phi3508 to i64
  %9696 = mul nsw i64 %9695, %116
  %9697 = sub nsw i64 %9696, %96
  %9698 = zext i32 %.pre-phi3516 to i64
  %9699 = mul nsw i64 %9698, %116
  %9700 = sub nsw i64 %9699, %96
  %9701 = zext i32 %.pre-phi3512 to i64
  %9702 = mul nsw i64 %9701, %116
  %9703 = sub nsw i64 %9702, %96
  %9704 = sext i32 %a26 to i64
  %9705 = add nsw i64 %9704, 13
  %9706 = mul nsw i64 %9705, %117
  %9707 = add nsw i64 %9706, %120
  br label %"for blur_y.s0.x.x.rebased428"

"produce blur_x426":                              ; preds = %"for blur_y.s0.x.x.rebased420"
  %t960 = add nsw i32 %9679, %t1969
  %9708 = sext i32 %t960 to i64
  %9709 = getelementptr inbounds i16, i16* %read_input, i64 %9708
  %9710 = getelementptr inbounds i16, i16* %9709, i64 1
  %9711 = bitcast i16* %9710 to <16 x i16>*
  %9712 = load <16 x i16>, <16 x i16>* %9711, align 2, !tbaa !396
  %9713 = getelementptr inbounds i16, i16* %9709, i64 17
  %9714 = bitcast i16* %9713 to <16 x i16>*
  %9715 = load <16 x i16>, <16 x i16>* %9714, align 2, !tbaa !396
  %9716 = bitcast i16* %9709 to <16 x i16>*
  %9717 = load <16 x i16>, <16 x i16>* %9716, align 2, !tbaa !396
  %9718 = getelementptr inbounds i16, i16* %9709, i64 16
  %9719 = bitcast i16* %9718 to <16 x i16>*
  %9720 = load <16 x i16>, <16 x i16>* %9719, align 2, !tbaa !396
  %9721 = getelementptr inbounds i16, i16* %9709, i64 2
  %9722 = bitcast i16* %9721 to <16 x i16>*
  %9723 = load <16 x i16>, <16 x i16>* %9722, align 2, !tbaa !396
  %9724 = getelementptr inbounds i16, i16* %9709, i64 18
  %9725 = bitcast i16* %9724 to <16 x i16>*
  %9726 = load <16 x i16>, <16 x i16>* %9725, align 2, !tbaa !396
  %9727 = getelementptr inbounds i16, i16* %9709, i64 3
  %9728 = bitcast i16* %9727 to <16 x i16>*
  %9729 = load <16 x i16>, <16 x i16>* %9728, align 2, !tbaa !396
  %9730 = getelementptr inbounds i16, i16* %9709, i64 19
  %9731 = bitcast i16* %9730 to <16 x i16>*
  %9732 = load <16 x i16>, <16 x i16>* %9731, align 2, !tbaa !396
  %9733 = getelementptr inbounds i16, i16* %9709, i64 4
  %9734 = bitcast i16* %9733 to <16 x i16>*
  %9735 = load <16 x i16>, <16 x i16>* %9734, align 2, !tbaa !396
  %9736 = getelementptr inbounds i16, i16* %9709, i64 20
  %9737 = bitcast i16* %9736 to <16 x i16>*
  %9738 = load <16 x i16>, <16 x i16>* %9737, align 2, !tbaa !396
  %9739 = getelementptr inbounds i16, i16* %9709, i64 6
  %9740 = bitcast i16* %9739 to <16 x i16>*
  %9741 = load <16 x i16>, <16 x i16>* %9740, align 2, !tbaa !396
  %9742 = getelementptr inbounds i16, i16* %9709, i64 22
  %9743 = bitcast i16* %9742 to <16 x i16>*
  %9744 = load <16 x i16>, <16 x i16>* %9743, align 2, !tbaa !396
  %9745 = getelementptr inbounds i16, i16* %9709, i64 5
  %9746 = bitcast i16* %9745 to <16 x i16>*
  %9747 = load <16 x i16>, <16 x i16>* %9746, align 2, !tbaa !396
  %9748 = getelementptr inbounds i16, i16* %9709, i64 21
  %9749 = bitcast i16* %9748 to <16 x i16>*
  %9750 = load <16 x i16>, <16 x i16>* %9749, align 2, !tbaa !396
  %9751 = add <16 x i16> %9717, %9712
  %9752 = add <16 x i16> %9751, %9723
  %9753 = add <16 x i16> %9752, %9729
  %9754 = add <16 x i16> %9753, %9735
  %9755 = add <16 x i16> %9754, %9741
  %9756 = add <16 x i16> %9755, %9747
  %9757 = add <16 x i16> %9720, %9715
  %9758 = add <16 x i16> %9757, %9726
  %9759 = add <16 x i16> %9758, %9732
  %9760 = add <16 x i16> %9759, %9738
  %9761 = add <16 x i16> %9760, %9744
  %9762 = add <16 x i16> %9761, %9750
  %9763 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9756, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9764 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9762, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9765 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9763, <16 x i16> %9756)
  %9766 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9764, <16 x i16> %9762)
  %9767 = shufflevector <16 x i16> %9765, <16 x i16> %9766, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9768 = lshr <32 x i16> %9767, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9769 = shufflevector <32 x i16> %9768, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9770 = shl nsw i64 %9676, 5
  %9771 = add nsw i64 %9770, %9481
  %9772 = getelementptr inbounds i16, i16* %blur_x, i64 %9771
  %9773 = bitcast i16* %9772 to <16 x i16>*
  store <16 x i16> %9769, <16 x i16>* %9773, align 2, !tbaa !399
  %9774 = shufflevector <32 x i16> %9768, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9775 = getelementptr inbounds i16, i16* %9772, i64 16
  %9776 = bitcast i16* %9775 to <16 x i16>*
  store <16 x i16> %9774, <16 x i16>* %9776, align 2, !tbaa !399
  br label %"consume blur_x427"

"consume blur_x427":                              ; preds = %"for blur_y.s0.x.x.rebased420.consume blur_x427_crit_edge", %"produce blur_x426"
  %.pre-phi3560 = phi i64 [ %.pre3559, %"for blur_y.s0.x.x.rebased420.consume blur_x427_crit_edge" ], [ %9770, %"produce blur_x426" ]
  %9777 = add nsw i64 %9484, %.pre-phi3560
  %9778 = getelementptr inbounds i16, i16* %blur_x, i64 %9777
  %9779 = bitcast i16* %9778 to <16 x i16>*
  %9780 = load <16 x i16>, <16 x i16>* %9779, align 2, !tbaa !399
  %9781 = getelementptr inbounds i16, i16* %9778, i64 16
  %9782 = bitcast i16* %9781 to <16 x i16>*
  %9783 = load <16 x i16>, <16 x i16>* %9782, align 2, !tbaa !399
  %9784 = add nsw i64 %9487, %.pre-phi3560
  %9785 = getelementptr inbounds i16, i16* %blur_x, i64 %9784
  %9786 = bitcast i16* %9785 to <16 x i16>*
  %9787 = load <16 x i16>, <16 x i16>* %9786, align 2, !tbaa !399
  %9788 = getelementptr inbounds i16, i16* %9785, i64 16
  %9789 = bitcast i16* %9788 to <16 x i16>*
  %9790 = load <16 x i16>, <16 x i16>* %9789, align 2, !tbaa !399
  %9791 = add nsw i64 %9490, %.pre-phi3560
  %9792 = getelementptr inbounds i16, i16* %blur_x, i64 %9791
  %9793 = bitcast i16* %9792 to <16 x i16>*
  %9794 = load <16 x i16>, <16 x i16>* %9793, align 2, !tbaa !399
  %9795 = getelementptr inbounds i16, i16* %9792, i64 16
  %9796 = bitcast i16* %9795 to <16 x i16>*
  %9797 = load <16 x i16>, <16 x i16>* %9796, align 2, !tbaa !399
  %9798 = add nsw i64 %9493, %.pre-phi3560
  %9799 = getelementptr inbounds i16, i16* %blur_x, i64 %9798
  %9800 = bitcast i16* %9799 to <16 x i16>*
  %9801 = load <16 x i16>, <16 x i16>* %9800, align 2, !tbaa !399
  %9802 = getelementptr inbounds i16, i16* %9799, i64 16
  %9803 = bitcast i16* %9802 to <16 x i16>*
  %9804 = load <16 x i16>, <16 x i16>* %9803, align 2, !tbaa !399
  %9805 = add nsw i64 %9496, %.pre-phi3560
  %9806 = getelementptr inbounds i16, i16* %blur_x, i64 %9805
  %9807 = bitcast i16* %9806 to <16 x i16>*
  %9808 = load <16 x i16>, <16 x i16>* %9807, align 2, !tbaa !399
  %9809 = getelementptr inbounds i16, i16* %9806, i64 16
  %9810 = bitcast i16* %9809 to <16 x i16>*
  %9811 = load <16 x i16>, <16 x i16>* %9810, align 2, !tbaa !399
  %9812 = add nsw i64 %9499, %.pre-phi3560
  %9813 = getelementptr inbounds i16, i16* %blur_x, i64 %9812
  %9814 = bitcast i16* %9813 to <16 x i16>*
  %9815 = load <16 x i16>, <16 x i16>* %9814, align 2, !tbaa !399
  %9816 = getelementptr inbounds i16, i16* %9813, i64 16
  %9817 = bitcast i16* %9816 to <16 x i16>*
  %9818 = load <16 x i16>, <16 x i16>* %9817, align 2, !tbaa !399
  %9819 = add nsw i64 %9502, %.pre-phi3560
  %9820 = getelementptr inbounds i16, i16* %blur_x, i64 %9819
  %9821 = bitcast i16* %9820 to <16 x i16>*
  %9822 = load <16 x i16>, <16 x i16>* %9821, align 2, !tbaa !399
  %9823 = getelementptr inbounds i16, i16* %9820, i64 16
  %9824 = bitcast i16* %9823 to <16 x i16>*
  %9825 = load <16 x i16>, <16 x i16>* %9824, align 2, !tbaa !399
  %9826 = add <16 x i16> %9787, %9780
  %9827 = add <16 x i16> %9826, %9794
  %9828 = add <16 x i16> %9827, %9801
  %9829 = add <16 x i16> %9828, %9808
  %9830 = add <16 x i16> %9829, %9815
  %9831 = add <16 x i16> %9830, %9822
  %9832 = add <16 x i16> %9790, %9783
  %9833 = add <16 x i16> %9832, %9797
  %9834 = add <16 x i16> %9833, %9804
  %9835 = add <16 x i16> %9834, %9811
  %9836 = add <16 x i16> %9835, %9818
  %9837 = add <16 x i16> %9836, %9825
  %9838 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9831, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9839 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9837, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9840 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9838, <16 x i16> %9831)
  %9841 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9839, <16 x i16> %9837)
  %9842 = shufflevector <16 x i16> %9840, <16 x i16> %9841, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9843 = lshr <32 x i16> %9842, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9844 = shufflevector <32 x i16> %9843, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9845 = add nsw i64 %9506, %.pre-phi3560
  %9846 = getelementptr inbounds i16, i16* %66, i64 %9845
  %9847 = bitcast i16* %9846 to <16 x i16>*
  store <16 x i16> %9844, <16 x i16>* %9847, align 2, !tbaa !401
  %9848 = shufflevector <32 x i16> %9843, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9849 = getelementptr inbounds i16, i16* %9846, i64 16
  %9850 = bitcast i16* %9849 to <16 x i16>*
  store <16 x i16> %9848, <16 x i16>* %9850, align 2, !tbaa !401
  %indvars.iv.next3319 = add nuw nsw i64 %indvars.iv3318, 1
  %.not2774 = icmp eq i64 %indvars.iv.next3319, %188
  br i1 %.not2774, label %"end for blur_y.s0.x.x.rebased421", label %"for blur_y.s0.x.x.rebased420"

"for blur_y.s0.x.x.rebased428":                   ; preds = %"for blur_y.s0.x.x.rebased428.preheader", %"consume blur_x436"
  %blur_y.s0.x.x.rebased430 = phi i32 [ %10001, %"consume blur_x436" ], [ 0, %"for blur_y.s0.x.x.rebased428.preheader" ]
  %9851 = add nsw i32 %blur_y.s0.x.x.rebased430, %t1670
  %a210 = shl nsw i32 %9851, 5
  %9852 = icmp sgt i32 %a14, %a210
  %b216 = select i1 %9852, i32 %a210, i32 %a14
  %9853 = icmp slt i32 %9851, 1
  %9854 = icmp sgt i32 %4, %a210
  %9855 = or i1 %9853, %9854
  br i1 %9855, label %"produce blur_x434", label %"consume blur_x436"

"end for blur_y.s0.x.x.rebased429":               ; preds = %"consume blur_x436", %"end for blur_y.s0.x.x.rebased421"
  br i1 %34, label %"produce blur_x440", label %after_bb437

"produce blur_x434":                              ; preds = %"for blur_y.s0.x.x.rebased428"
  %9856 = icmp slt i32 %b216, %4
  %blur_x.s0.x.v1.base.s435 = select i1 %9856, i32 %b216, i32 %4
  %t965 = add nsw i32 %blur_x.s0.x.v1.base.s435, %t1969
  %9857 = sext i32 %t965 to i64
  %9858 = getelementptr inbounds i16, i16* %read_input, i64 %9857
  %9859 = getelementptr inbounds i16, i16* %9858, i64 1
  %9860 = bitcast i16* %9859 to <16 x i16>*
  %9861 = load <16 x i16>, <16 x i16>* %9860, align 2, !tbaa !396
  %9862 = getelementptr inbounds i16, i16* %9858, i64 17
  %9863 = bitcast i16* %9862 to <16 x i16>*
  %9864 = load <16 x i16>, <16 x i16>* %9863, align 2, !tbaa !396
  %9865 = bitcast i16* %9858 to <16 x i16>*
  %9866 = load <16 x i16>, <16 x i16>* %9865, align 2, !tbaa !396
  %9867 = getelementptr inbounds i16, i16* %9858, i64 16
  %9868 = bitcast i16* %9867 to <16 x i16>*
  %9869 = load <16 x i16>, <16 x i16>* %9868, align 2, !tbaa !396
  %9870 = getelementptr inbounds i16, i16* %9858, i64 2
  %9871 = bitcast i16* %9870 to <16 x i16>*
  %9872 = load <16 x i16>, <16 x i16>* %9871, align 2, !tbaa !396
  %9873 = getelementptr inbounds i16, i16* %9858, i64 18
  %9874 = bitcast i16* %9873 to <16 x i16>*
  %9875 = load <16 x i16>, <16 x i16>* %9874, align 2, !tbaa !396
  %9876 = getelementptr inbounds i16, i16* %9858, i64 3
  %9877 = bitcast i16* %9876 to <16 x i16>*
  %9878 = load <16 x i16>, <16 x i16>* %9877, align 2, !tbaa !396
  %9879 = getelementptr inbounds i16, i16* %9858, i64 19
  %9880 = bitcast i16* %9879 to <16 x i16>*
  %9881 = load <16 x i16>, <16 x i16>* %9880, align 2, !tbaa !396
  %9882 = getelementptr inbounds i16, i16* %9858, i64 4
  %9883 = bitcast i16* %9882 to <16 x i16>*
  %9884 = load <16 x i16>, <16 x i16>* %9883, align 2, !tbaa !396
  %9885 = getelementptr inbounds i16, i16* %9858, i64 20
  %9886 = bitcast i16* %9885 to <16 x i16>*
  %9887 = load <16 x i16>, <16 x i16>* %9886, align 2, !tbaa !396
  %9888 = getelementptr inbounds i16, i16* %9858, i64 6
  %9889 = bitcast i16* %9888 to <16 x i16>*
  %9890 = load <16 x i16>, <16 x i16>* %9889, align 2, !tbaa !396
  %9891 = getelementptr inbounds i16, i16* %9858, i64 22
  %9892 = bitcast i16* %9891 to <16 x i16>*
  %9893 = load <16 x i16>, <16 x i16>* %9892, align 2, !tbaa !396
  %9894 = getelementptr inbounds i16, i16* %9858, i64 5
  %9895 = bitcast i16* %9894 to <16 x i16>*
  %9896 = load <16 x i16>, <16 x i16>* %9895, align 2, !tbaa !396
  %9897 = getelementptr inbounds i16, i16* %9858, i64 21
  %9898 = bitcast i16* %9897 to <16 x i16>*
  %9899 = load <16 x i16>, <16 x i16>* %9898, align 2, !tbaa !396
  %9900 = add <16 x i16> %9866, %9861
  %9901 = add <16 x i16> %9900, %9872
  %9902 = add <16 x i16> %9901, %9878
  %9903 = add <16 x i16> %9902, %9884
  %9904 = add <16 x i16> %9903, %9890
  %9905 = add <16 x i16> %9904, %9896
  %9906 = add <16 x i16> %9869, %9864
  %9907 = add <16 x i16> %9906, %9875
  %9908 = add <16 x i16> %9907, %9881
  %9909 = add <16 x i16> %9908, %9887
  %9910 = add <16 x i16> %9909, %9893
  %9911 = add <16 x i16> %9910, %9899
  %9912 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9905, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9913 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9911, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9914 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9912, <16 x i16> %9905)
  %9915 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9913, <16 x i16> %9911)
  %9916 = shufflevector <16 x i16> %9914, <16 x i16> %9915, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9917 = lshr <32 x i16> %9916, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9918 = shufflevector <32 x i16> %9917, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9919 = sext i32 %blur_x.s0.x.v1.base.s435 to i64
  %9920 = add nsw i64 %9919, %9682
  %9921 = getelementptr inbounds i16, i16* %blur_x, i64 %9920
  %9922 = bitcast i16* %9921 to <16 x i16>*
  store <16 x i16> %9918, <16 x i16>* %9922, align 2, !tbaa !399
  %9923 = shufflevector <32 x i16> %9917, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9924 = getelementptr inbounds i16, i16* %9921, i64 16
  %9925 = bitcast i16* %9924 to <16 x i16>*
  store <16 x i16> %9923, <16 x i16>* %9925, align 2, !tbaa !399
  br label %"consume blur_x436"

"consume blur_x436":                              ; preds = %"for blur_y.s0.x.x.rebased428", %"produce blur_x434"
  %9926 = sext i32 %b216 to i64
  %9927 = add nsw i64 %9685, %9926
  %9928 = getelementptr inbounds i16, i16* %blur_x, i64 %9927
  %9929 = bitcast i16* %9928 to <16 x i16>*
  %9930 = load <16 x i16>, <16 x i16>* %9929, align 2, !tbaa !399
  %9931 = getelementptr inbounds i16, i16* %9928, i64 16
  %9932 = bitcast i16* %9931 to <16 x i16>*
  %9933 = load <16 x i16>, <16 x i16>* %9932, align 2, !tbaa !399
  %9934 = add nsw i64 %9688, %9926
  %9935 = getelementptr inbounds i16, i16* %blur_x, i64 %9934
  %9936 = bitcast i16* %9935 to <16 x i16>*
  %9937 = load <16 x i16>, <16 x i16>* %9936, align 2, !tbaa !399
  %9938 = getelementptr inbounds i16, i16* %9935, i64 16
  %9939 = bitcast i16* %9938 to <16 x i16>*
  %9940 = load <16 x i16>, <16 x i16>* %9939, align 2, !tbaa !399
  %9941 = add nsw i64 %9691, %9926
  %9942 = getelementptr inbounds i16, i16* %blur_x, i64 %9941
  %9943 = bitcast i16* %9942 to <16 x i16>*
  %9944 = load <16 x i16>, <16 x i16>* %9943, align 2, !tbaa !399
  %9945 = getelementptr inbounds i16, i16* %9942, i64 16
  %9946 = bitcast i16* %9945 to <16 x i16>*
  %9947 = load <16 x i16>, <16 x i16>* %9946, align 2, !tbaa !399
  %9948 = add nsw i64 %9694, %9926
  %9949 = getelementptr inbounds i16, i16* %blur_x, i64 %9948
  %9950 = bitcast i16* %9949 to <16 x i16>*
  %9951 = load <16 x i16>, <16 x i16>* %9950, align 2, !tbaa !399
  %9952 = getelementptr inbounds i16, i16* %9949, i64 16
  %9953 = bitcast i16* %9952 to <16 x i16>*
  %9954 = load <16 x i16>, <16 x i16>* %9953, align 2, !tbaa !399
  %9955 = add nsw i64 %9697, %9926
  %9956 = getelementptr inbounds i16, i16* %blur_x, i64 %9955
  %9957 = bitcast i16* %9956 to <16 x i16>*
  %9958 = load <16 x i16>, <16 x i16>* %9957, align 2, !tbaa !399
  %9959 = getelementptr inbounds i16, i16* %9956, i64 16
  %9960 = bitcast i16* %9959 to <16 x i16>*
  %9961 = load <16 x i16>, <16 x i16>* %9960, align 2, !tbaa !399
  %9962 = add nsw i64 %9700, %9926
  %9963 = getelementptr inbounds i16, i16* %blur_x, i64 %9962
  %9964 = bitcast i16* %9963 to <16 x i16>*
  %9965 = load <16 x i16>, <16 x i16>* %9964, align 2, !tbaa !399
  %9966 = getelementptr inbounds i16, i16* %9963, i64 16
  %9967 = bitcast i16* %9966 to <16 x i16>*
  %9968 = load <16 x i16>, <16 x i16>* %9967, align 2, !tbaa !399
  %9969 = add nsw i64 %9703, %9926
  %9970 = getelementptr inbounds i16, i16* %blur_x, i64 %9969
  %9971 = bitcast i16* %9970 to <16 x i16>*
  %9972 = load <16 x i16>, <16 x i16>* %9971, align 2, !tbaa !399
  %9973 = getelementptr inbounds i16, i16* %9970, i64 16
  %9974 = bitcast i16* %9973 to <16 x i16>*
  %9975 = load <16 x i16>, <16 x i16>* %9974, align 2, !tbaa !399
  %9976 = add <16 x i16> %9937, %9930
  %9977 = add <16 x i16> %9976, %9944
  %9978 = add <16 x i16> %9977, %9951
  %9979 = add <16 x i16> %9978, %9958
  %9980 = add <16 x i16> %9979, %9965
  %9981 = add <16 x i16> %9980, %9972
  %9982 = add <16 x i16> %9940, %9933
  %9983 = add <16 x i16> %9982, %9947
  %9984 = add <16 x i16> %9983, %9954
  %9985 = add <16 x i16> %9984, %9961
  %9986 = add <16 x i16> %9985, %9968
  %9987 = add <16 x i16> %9986, %9975
  %9988 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9981, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9989 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9987, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %9990 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9988, <16 x i16> %9981)
  %9991 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %9989, <16 x i16> %9987)
  %9992 = shufflevector <16 x i16> %9990, <16 x i16> %9991, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9993 = lshr <32 x i16> %9992, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9994 = shufflevector <32 x i16> %9993, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9995 = add nsw i64 %9707, %9926
  %9996 = getelementptr inbounds i16, i16* %66, i64 %9995
  %9997 = bitcast i16* %9996 to <16 x i16>*
  store <16 x i16> %9994, <16 x i16>* %9997, align 2, !tbaa !401
  %9998 = shufflevector <32 x i16> %9993, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9999 = getelementptr inbounds i16, i16* %9996, i64 16
  %10000 = bitcast i16* %9999 to <16 x i16>*
  store <16 x i16> %9998, <16 x i16>* %10000, align 2, !tbaa !401
  %10001 = add nuw nsw i32 %blur_y.s0.x.x.rebased430, 1
  %.not2773 = icmp eq i32 %10001, %t1727
  br i1 %.not2773, label %"end for blur_y.s0.x.x.rebased429", label %"for blur_y.s0.x.x.rebased428"

after_bb437:                                      ; preds = %"end for blur_y.s0.x.x.rebased429", %"produce blur_x440"
  br i1 %100, label %"for blur_y.s0.x.x.rebased442.preheader", label %"end for blur_y.s0.x.x.rebased443", !prof !386

"for blur_y.s0.x.x.rebased442.preheader":         ; preds = %after_bb437
  %10002 = sext i32 %t1750 to i64
  %10003 = zext i32 %.pre-phi3534 to i64
  %10004 = mul nsw i64 %10003, %116
  %10005 = sub nsw i64 %10004, %96
  %10006 = zext i32 %.pre-phi3528 to i64
  %10007 = mul nsw i64 %10006, %116
  %10008 = sub nsw i64 %10007, %96
  %10009 = zext i32 %.pre-phi to i64
  %10010 = mul nsw i64 %10009, %116
  %10011 = sub nsw i64 %10010, %96
  %10012 = zext i32 %.pre-phi3508 to i64
  %10013 = mul nsw i64 %10012, %116
  %10014 = sub nsw i64 %10013, %96
  %10015 = zext i32 %.pre-phi3512 to i64
  %10016 = mul nsw i64 %10015, %116
  %10017 = sub nsw i64 %10016, %96
  %10018 = zext i32 %.pre-phi3520 to i64
  %10019 = mul nsw i64 %10018, %116
  %10020 = sub nsw i64 %10019, %96
  %10021 = zext i32 %.pre-phi3516 to i64
  %10022 = mul nsw i64 %10021, %116
  %10023 = sub nsw i64 %10022, %96
  %10024 = sext i32 %a26 to i64
  %10025 = add nsw i64 %10024, 14
  %10026 = mul nsw i64 %10025, %117
  %10027 = add nsw i64 %10026, %120
  br label %"for blur_y.s0.x.x.rebased442"

"produce blur_x440":                              ; preds = %"end for blur_y.s0.x.x.rebased429"
  %10028 = getelementptr inbounds i16, i16* %read_input, i64 %147
  %10029 = getelementptr inbounds i16, i16* %10028, i64 -31
  %10030 = bitcast i16* %10029 to <16 x i16>*
  %10031 = load <16 x i16>, <16 x i16>* %10030, align 2, !tbaa !396
  %10032 = getelementptr inbounds i16, i16* %10028, i64 -15
  %10033 = bitcast i16* %10032 to <16 x i16>*
  %10034 = load <16 x i16>, <16 x i16>* %10033, align 2, !tbaa !396
  %10035 = getelementptr inbounds i16, i16* %10028, i64 -32
  %10036 = bitcast i16* %10035 to <16 x i16>*
  %10037 = load <16 x i16>, <16 x i16>* %10036, align 2, !tbaa !396
  %10038 = getelementptr inbounds i16, i16* %10028, i64 -16
  %10039 = bitcast i16* %10038 to <16 x i16>*
  %10040 = load <16 x i16>, <16 x i16>* %10039, align 2, !tbaa !396
  %10041 = getelementptr inbounds i16, i16* %10028, i64 -30
  %10042 = bitcast i16* %10041 to <16 x i16>*
  %10043 = load <16 x i16>, <16 x i16>* %10042, align 2, !tbaa !396
  %10044 = getelementptr inbounds i16, i16* %10028, i64 -14
  %10045 = bitcast i16* %10044 to <16 x i16>*
  %10046 = load <16 x i16>, <16 x i16>* %10045, align 2, !tbaa !396
  %10047 = getelementptr inbounds i16, i16* %10028, i64 -29
  %10048 = bitcast i16* %10047 to <16 x i16>*
  %10049 = load <16 x i16>, <16 x i16>* %10048, align 2, !tbaa !396
  %10050 = getelementptr inbounds i16, i16* %10028, i64 -13
  %10051 = bitcast i16* %10050 to <16 x i16>*
  %10052 = load <16 x i16>, <16 x i16>* %10051, align 2, !tbaa !396
  %10053 = getelementptr inbounds i16, i16* %10028, i64 -28
  %10054 = bitcast i16* %10053 to <16 x i16>*
  %10055 = load <16 x i16>, <16 x i16>* %10054, align 2, !tbaa !396
  %10056 = getelementptr inbounds i16, i16* %10028, i64 -12
  %10057 = bitcast i16* %10056 to <16 x i16>*
  %10058 = load <16 x i16>, <16 x i16>* %10057, align 2, !tbaa !396
  %10059 = getelementptr inbounds i16, i16* %10028, i64 -26
  %10060 = bitcast i16* %10059 to <16 x i16>*
  %10061 = load <16 x i16>, <16 x i16>* %10060, align 2, !tbaa !396
  %10062 = getelementptr inbounds i16, i16* %10028, i64 -10
  %10063 = bitcast i16* %10062 to <16 x i16>*
  %10064 = load <16 x i16>, <16 x i16>* %10063, align 2, !tbaa !396
  %10065 = getelementptr inbounds i16, i16* %10028, i64 -27
  %10066 = bitcast i16* %10065 to <16 x i16>*
  %10067 = load <16 x i16>, <16 x i16>* %10066, align 2, !tbaa !396
  %10068 = getelementptr inbounds i16, i16* %10028, i64 -11
  %10069 = bitcast i16* %10068 to <16 x i16>*
  %10070 = load <16 x i16>, <16 x i16>* %10069, align 2, !tbaa !396
  %10071 = add <16 x i16> %10037, %10031
  %10072 = add <16 x i16> %10071, %10043
  %10073 = add <16 x i16> %10072, %10049
  %10074 = add <16 x i16> %10073, %10055
  %10075 = add <16 x i16> %10074, %10061
  %10076 = add <16 x i16> %10075, %10067
  %10077 = add <16 x i16> %10040, %10034
  %10078 = add <16 x i16> %10077, %10046
  %10079 = add <16 x i16> %10078, %10052
  %10080 = add <16 x i16> %10079, %10058
  %10081 = add <16 x i16> %10080, %10064
  %10082 = add <16 x i16> %10081, %10070
  %10083 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10076, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10084 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10082, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10085 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10083, <16 x i16> %10076)
  %10086 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10084, <16 x i16> %10082)
  %10087 = shufflevector <16 x i16> %10085, <16 x i16> %10086, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10088 = lshr <32 x i16> %10087, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10089 = shufflevector <32 x i16> %10088, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10090 = zext i32 %.pre-phi3520 to i64
  %10091 = mul nsw i64 %97, %10090
  %10092 = add nsw i64 %99, %10091
  %10093 = getelementptr inbounds i16, i16* %blur_x, i64 %10092
  %10094 = getelementptr inbounds i16, i16* %10093, i64 -32
  %10095 = bitcast i16* %10094 to <16 x i16>*
  store <16 x i16> %10089, <16 x i16>* %10095, align 2, !tbaa !399
  %10096 = shufflevector <32 x i16> %10088, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10097 = getelementptr inbounds i16, i16* %10093, i64 -16
  %10098 = bitcast i16* %10097 to <16 x i16>*
  store <16 x i16> %10096, <16 x i16>* %10098, align 2, !tbaa !399
  %10099 = zext i32 %.pre-phi3534 to i64
  %10100 = mul nsw i64 %10099, %116
  %10101 = add nsw i64 %10100, %94
  %10102 = getelementptr inbounds i16, i16* %blur_x, i64 %10101
  %10103 = getelementptr inbounds i16, i16* %10102, i64 -32
  %10104 = bitcast i16* %10103 to <16 x i16>*
  %10105 = load <16 x i16>, <16 x i16>* %10104, align 2, !tbaa !399
  %10106 = getelementptr inbounds i16, i16* %10102, i64 -16
  %10107 = bitcast i16* %10106 to <16 x i16>*
  %10108 = load <16 x i16>, <16 x i16>* %10107, align 2, !tbaa !399
  %10109 = zext i32 %.pre-phi3528 to i64
  %10110 = mul nsw i64 %10109, %116
  %10111 = add nsw i64 %10110, %94
  %10112 = getelementptr inbounds i16, i16* %blur_x, i64 %10111
  %10113 = getelementptr inbounds i16, i16* %10112, i64 -32
  %10114 = bitcast i16* %10113 to <16 x i16>*
  %10115 = load <16 x i16>, <16 x i16>* %10114, align 2, !tbaa !399
  %10116 = getelementptr inbounds i16, i16* %10112, i64 -16
  %10117 = bitcast i16* %10116 to <16 x i16>*
  %10118 = load <16 x i16>, <16 x i16>* %10117, align 2, !tbaa !399
  %10119 = zext i32 %.pre-phi to i64
  %10120 = mul nsw i64 %10119, %116
  %10121 = add nsw i64 %10120, %94
  %10122 = getelementptr inbounds i16, i16* %blur_x, i64 %10121
  %10123 = getelementptr inbounds i16, i16* %10122, i64 -32
  %10124 = bitcast i16* %10123 to <16 x i16>*
  %10125 = load <16 x i16>, <16 x i16>* %10124, align 2, !tbaa !399
  %10126 = getelementptr inbounds i16, i16* %10122, i64 -16
  %10127 = bitcast i16* %10126 to <16 x i16>*
  %10128 = load <16 x i16>, <16 x i16>* %10127, align 2, !tbaa !399
  %10129 = zext i32 %.pre-phi3508 to i64
  %10130 = mul nsw i64 %10129, %116
  %10131 = add nsw i64 %10130, %94
  %10132 = getelementptr inbounds i16, i16* %blur_x, i64 %10131
  %10133 = getelementptr inbounds i16, i16* %10132, i64 -32
  %10134 = bitcast i16* %10133 to <16 x i16>*
  %10135 = load <16 x i16>, <16 x i16>* %10134, align 2, !tbaa !399
  %10136 = getelementptr inbounds i16, i16* %10132, i64 -16
  %10137 = bitcast i16* %10136 to <16 x i16>*
  %10138 = load <16 x i16>, <16 x i16>* %10137, align 2, !tbaa !399
  %10139 = zext i32 %.pre-phi3512 to i64
  %10140 = mul nsw i64 %10139, %116
  %10141 = add nsw i64 %10140, %94
  %10142 = getelementptr inbounds i16, i16* %blur_x, i64 %10141
  %10143 = getelementptr inbounds i16, i16* %10142, i64 -32
  %10144 = bitcast i16* %10143 to <16 x i16>*
  %10145 = load <16 x i16>, <16 x i16>* %10144, align 2, !tbaa !399
  %10146 = getelementptr inbounds i16, i16* %10142, i64 -16
  %10147 = bitcast i16* %10146 to <16 x i16>*
  %10148 = load <16 x i16>, <16 x i16>* %10147, align 2, !tbaa !399
  %10149 = mul nsw i64 %10090, %116
  %10150 = add nsw i64 %10149, %94
  %10151 = getelementptr inbounds i16, i16* %blur_x, i64 %10150
  %10152 = getelementptr inbounds i16, i16* %10151, i64 -32
  %10153 = bitcast i16* %10152 to <16 x i16>*
  %10154 = load <16 x i16>, <16 x i16>* %10153, align 2, !tbaa !399
  %10155 = getelementptr inbounds i16, i16* %10151, i64 -16
  %10156 = bitcast i16* %10155 to <16 x i16>*
  %10157 = load <16 x i16>, <16 x i16>* %10156, align 2, !tbaa !399
  %10158 = zext i32 %.pre-phi3516 to i64
  %10159 = mul nsw i64 %10158, %116
  %10160 = add nsw i64 %10159, %94
  %10161 = getelementptr inbounds i16, i16* %blur_x, i64 %10160
  %10162 = getelementptr inbounds i16, i16* %10161, i64 -32
  %10163 = bitcast i16* %10162 to <16 x i16>*
  %10164 = load <16 x i16>, <16 x i16>* %10163, align 2, !tbaa !399
  %10165 = getelementptr inbounds i16, i16* %10161, i64 -16
  %10166 = bitcast i16* %10165 to <16 x i16>*
  %10167 = load <16 x i16>, <16 x i16>* %10166, align 2, !tbaa !399
  %10168 = add <16 x i16> %10115, %10105
  %10169 = add <16 x i16> %10168, %10125
  %10170 = add <16 x i16> %10169, %10135
  %10171 = add <16 x i16> %10170, %10145
  %10172 = add <16 x i16> %10171, %10154
  %10173 = add <16 x i16> %10172, %10164
  %10174 = add <16 x i16> %10118, %10108
  %10175 = add <16 x i16> %10174, %10128
  %10176 = add <16 x i16> %10175, %10138
  %10177 = add <16 x i16> %10176, %10148
  %10178 = add <16 x i16> %10177, %10157
  %10179 = add <16 x i16> %10178, %10167
  %10180 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10173, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10181 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10179, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10182 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10180, <16 x i16> %10173)
  %10183 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10181, <16 x i16> %10179)
  %10184 = shufflevector <16 x i16> %10182, <16 x i16> %10183, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10185 = lshr <32 x i16> %10184, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10186 = shufflevector <32 x i16> %10185, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10187 = sext i32 %a26 to i64
  %10188 = add nsw i64 %10187, 14
  %10189 = mul nsw i64 %10188, %117
  %10190 = add nsw i64 %119, %10189
  %10191 = getelementptr inbounds i16, i16* %66, i64 %10190
  %10192 = getelementptr inbounds i16, i16* %10191, i64 -32
  %10193 = bitcast i16* %10192 to <16 x i16>*
  store <16 x i16> %10186, <16 x i16>* %10193, align 2, !tbaa !401
  %10194 = shufflevector <32 x i16> %10185, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10195 = getelementptr inbounds i16, i16* %10191, i64 -16
  %10196 = bitcast i16* %10195 to <16 x i16>*
  store <16 x i16> %10194, <16 x i16>* %10196, align 2, !tbaa !401
  br label %after_bb437

"for blur_y.s0.x.x.rebased442":                   ; preds = %"for blur_y.s0.x.x.rebased442.preheader", %"consume blur_x449"
  %indvars.iv3321 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased442.preheader" ], [ %indvars.iv.next3322, %"consume blur_x449" ]
  %10197 = add nsw i64 %indvars.iv3321, %101
  %10198 = icmp slt i64 %10197, 1
  %10199 = trunc i64 %10197 to i32
  %10200 = shl nsw i32 %10199, 5
  %10201 = icmp sgt i32 %4, %10200
  %10202 = or i1 %10198, %10201
  br i1 %10202, label %"produce blur_x448", label %"for blur_y.s0.x.x.rebased442.consume blur_x449_crit_edge"

"for blur_y.s0.x.x.rebased442.consume blur_x449_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased442"
  %.pre3561 = shl nsw i64 %10197, 5
  br label %"consume blur_x449"

"end for blur_y.s0.x.x.rebased443":               ; preds = %"consume blur_x449", %after_bb437
  br i1 %102, label %"for blur_y.s0.x.x.rebased450.preheader", label %"end for blur_y.s0.x.x.rebased451", !prof !386

"for blur_y.s0.x.x.rebased450.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased443"
  %10203 = sext i32 %t1750 to i64
  %10204 = zext i32 %.pre-phi3534 to i64
  %10205 = mul nsw i64 %10204, %116
  %10206 = sub nsw i64 %10205, %96
  %10207 = zext i32 %.pre-phi3528 to i64
  %10208 = mul nsw i64 %10207, %116
  %10209 = sub nsw i64 %10208, %96
  %10210 = zext i32 %.pre-phi to i64
  %10211 = mul nsw i64 %10210, %116
  %10212 = sub nsw i64 %10211, %96
  %10213 = zext i32 %.pre-phi3508 to i64
  %10214 = mul nsw i64 %10213, %116
  %10215 = sub nsw i64 %10214, %96
  %10216 = zext i32 %.pre-phi3512 to i64
  %10217 = mul nsw i64 %10216, %116
  %10218 = sub nsw i64 %10217, %96
  %10219 = zext i32 %.pre-phi3520 to i64
  %10220 = mul nsw i64 %10219, %116
  %10221 = sub nsw i64 %10220, %96
  %10222 = zext i32 %.pre-phi3516 to i64
  %10223 = mul nsw i64 %10222, %116
  %10224 = sub nsw i64 %10223, %96
  %10225 = sext i32 %a26 to i64
  %10226 = add nsw i64 %10225, 14
  %10227 = mul nsw i64 %10226, %117
  %10228 = add nsw i64 %10227, %120
  br label %"for blur_y.s0.x.x.rebased450"

"produce blur_x448":                              ; preds = %"for blur_y.s0.x.x.rebased442"
  %t976 = add nsw i32 %10200, %t1985
  %10229 = sext i32 %t976 to i64
  %10230 = getelementptr inbounds i16, i16* %read_input, i64 %10229
  %10231 = getelementptr inbounds i16, i16* %10230, i64 1
  %10232 = bitcast i16* %10231 to <16 x i16>*
  %10233 = load <16 x i16>, <16 x i16>* %10232, align 2, !tbaa !396
  %10234 = getelementptr inbounds i16, i16* %10230, i64 17
  %10235 = bitcast i16* %10234 to <16 x i16>*
  %10236 = load <16 x i16>, <16 x i16>* %10235, align 2, !tbaa !396
  %10237 = bitcast i16* %10230 to <16 x i16>*
  %10238 = load <16 x i16>, <16 x i16>* %10237, align 2, !tbaa !396
  %10239 = getelementptr inbounds i16, i16* %10230, i64 16
  %10240 = bitcast i16* %10239 to <16 x i16>*
  %10241 = load <16 x i16>, <16 x i16>* %10240, align 2, !tbaa !396
  %10242 = getelementptr inbounds i16, i16* %10230, i64 2
  %10243 = bitcast i16* %10242 to <16 x i16>*
  %10244 = load <16 x i16>, <16 x i16>* %10243, align 2, !tbaa !396
  %10245 = getelementptr inbounds i16, i16* %10230, i64 18
  %10246 = bitcast i16* %10245 to <16 x i16>*
  %10247 = load <16 x i16>, <16 x i16>* %10246, align 2, !tbaa !396
  %10248 = getelementptr inbounds i16, i16* %10230, i64 3
  %10249 = bitcast i16* %10248 to <16 x i16>*
  %10250 = load <16 x i16>, <16 x i16>* %10249, align 2, !tbaa !396
  %10251 = getelementptr inbounds i16, i16* %10230, i64 19
  %10252 = bitcast i16* %10251 to <16 x i16>*
  %10253 = load <16 x i16>, <16 x i16>* %10252, align 2, !tbaa !396
  %10254 = getelementptr inbounds i16, i16* %10230, i64 4
  %10255 = bitcast i16* %10254 to <16 x i16>*
  %10256 = load <16 x i16>, <16 x i16>* %10255, align 2, !tbaa !396
  %10257 = getelementptr inbounds i16, i16* %10230, i64 20
  %10258 = bitcast i16* %10257 to <16 x i16>*
  %10259 = load <16 x i16>, <16 x i16>* %10258, align 2, !tbaa !396
  %10260 = getelementptr inbounds i16, i16* %10230, i64 6
  %10261 = bitcast i16* %10260 to <16 x i16>*
  %10262 = load <16 x i16>, <16 x i16>* %10261, align 2, !tbaa !396
  %10263 = getelementptr inbounds i16, i16* %10230, i64 22
  %10264 = bitcast i16* %10263 to <16 x i16>*
  %10265 = load <16 x i16>, <16 x i16>* %10264, align 2, !tbaa !396
  %10266 = getelementptr inbounds i16, i16* %10230, i64 5
  %10267 = bitcast i16* %10266 to <16 x i16>*
  %10268 = load <16 x i16>, <16 x i16>* %10267, align 2, !tbaa !396
  %10269 = getelementptr inbounds i16, i16* %10230, i64 21
  %10270 = bitcast i16* %10269 to <16 x i16>*
  %10271 = load <16 x i16>, <16 x i16>* %10270, align 2, !tbaa !396
  %10272 = add <16 x i16> %10238, %10233
  %10273 = add <16 x i16> %10272, %10244
  %10274 = add <16 x i16> %10273, %10250
  %10275 = add <16 x i16> %10274, %10256
  %10276 = add <16 x i16> %10275, %10262
  %10277 = add <16 x i16> %10276, %10268
  %10278 = add <16 x i16> %10241, %10236
  %10279 = add <16 x i16> %10278, %10247
  %10280 = add <16 x i16> %10279, %10253
  %10281 = add <16 x i16> %10280, %10259
  %10282 = add <16 x i16> %10281, %10265
  %10283 = add <16 x i16> %10282, %10271
  %10284 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10277, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10285 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10283, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10286 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10284, <16 x i16> %10277)
  %10287 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10285, <16 x i16> %10283)
  %10288 = shufflevector <16 x i16> %10286, <16 x i16> %10287, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10289 = lshr <32 x i16> %10288, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10290 = shufflevector <32 x i16> %10289, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10291 = shl nsw i64 %10197, 5
  %10292 = add nsw i64 %10291, %10002
  %10293 = getelementptr inbounds i16, i16* %blur_x, i64 %10292
  %10294 = bitcast i16* %10293 to <16 x i16>*
  store <16 x i16> %10290, <16 x i16>* %10294, align 2, !tbaa !399
  %10295 = shufflevector <32 x i16> %10289, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10296 = getelementptr inbounds i16, i16* %10293, i64 16
  %10297 = bitcast i16* %10296 to <16 x i16>*
  store <16 x i16> %10295, <16 x i16>* %10297, align 2, !tbaa !399
  br label %"consume blur_x449"

"consume blur_x449":                              ; preds = %"for blur_y.s0.x.x.rebased442.consume blur_x449_crit_edge", %"produce blur_x448"
  %.pre-phi3562 = phi i64 [ %.pre3561, %"for blur_y.s0.x.x.rebased442.consume blur_x449_crit_edge" ], [ %10291, %"produce blur_x448" ]
  %10298 = add nsw i64 %10005, %.pre-phi3562
  %10299 = getelementptr inbounds i16, i16* %blur_x, i64 %10298
  %10300 = bitcast i16* %10299 to <16 x i16>*
  %10301 = load <16 x i16>, <16 x i16>* %10300, align 2, !tbaa !399
  %10302 = getelementptr inbounds i16, i16* %10299, i64 16
  %10303 = bitcast i16* %10302 to <16 x i16>*
  %10304 = load <16 x i16>, <16 x i16>* %10303, align 2, !tbaa !399
  %10305 = add nsw i64 %10008, %.pre-phi3562
  %10306 = getelementptr inbounds i16, i16* %blur_x, i64 %10305
  %10307 = bitcast i16* %10306 to <16 x i16>*
  %10308 = load <16 x i16>, <16 x i16>* %10307, align 2, !tbaa !399
  %10309 = getelementptr inbounds i16, i16* %10306, i64 16
  %10310 = bitcast i16* %10309 to <16 x i16>*
  %10311 = load <16 x i16>, <16 x i16>* %10310, align 2, !tbaa !399
  %10312 = add nsw i64 %10011, %.pre-phi3562
  %10313 = getelementptr inbounds i16, i16* %blur_x, i64 %10312
  %10314 = bitcast i16* %10313 to <16 x i16>*
  %10315 = load <16 x i16>, <16 x i16>* %10314, align 2, !tbaa !399
  %10316 = getelementptr inbounds i16, i16* %10313, i64 16
  %10317 = bitcast i16* %10316 to <16 x i16>*
  %10318 = load <16 x i16>, <16 x i16>* %10317, align 2, !tbaa !399
  %10319 = add nsw i64 %10014, %.pre-phi3562
  %10320 = getelementptr inbounds i16, i16* %blur_x, i64 %10319
  %10321 = bitcast i16* %10320 to <16 x i16>*
  %10322 = load <16 x i16>, <16 x i16>* %10321, align 2, !tbaa !399
  %10323 = getelementptr inbounds i16, i16* %10320, i64 16
  %10324 = bitcast i16* %10323 to <16 x i16>*
  %10325 = load <16 x i16>, <16 x i16>* %10324, align 2, !tbaa !399
  %10326 = add nsw i64 %10017, %.pre-phi3562
  %10327 = getelementptr inbounds i16, i16* %blur_x, i64 %10326
  %10328 = bitcast i16* %10327 to <16 x i16>*
  %10329 = load <16 x i16>, <16 x i16>* %10328, align 2, !tbaa !399
  %10330 = getelementptr inbounds i16, i16* %10327, i64 16
  %10331 = bitcast i16* %10330 to <16 x i16>*
  %10332 = load <16 x i16>, <16 x i16>* %10331, align 2, !tbaa !399
  %10333 = add nsw i64 %10020, %.pre-phi3562
  %10334 = getelementptr inbounds i16, i16* %blur_x, i64 %10333
  %10335 = bitcast i16* %10334 to <16 x i16>*
  %10336 = load <16 x i16>, <16 x i16>* %10335, align 2, !tbaa !399
  %10337 = getelementptr inbounds i16, i16* %10334, i64 16
  %10338 = bitcast i16* %10337 to <16 x i16>*
  %10339 = load <16 x i16>, <16 x i16>* %10338, align 2, !tbaa !399
  %10340 = add nsw i64 %10023, %.pre-phi3562
  %10341 = getelementptr inbounds i16, i16* %blur_x, i64 %10340
  %10342 = bitcast i16* %10341 to <16 x i16>*
  %10343 = load <16 x i16>, <16 x i16>* %10342, align 2, !tbaa !399
  %10344 = getelementptr inbounds i16, i16* %10341, i64 16
  %10345 = bitcast i16* %10344 to <16 x i16>*
  %10346 = load <16 x i16>, <16 x i16>* %10345, align 2, !tbaa !399
  %10347 = add <16 x i16> %10308, %10301
  %10348 = add <16 x i16> %10347, %10315
  %10349 = add <16 x i16> %10348, %10322
  %10350 = add <16 x i16> %10349, %10329
  %10351 = add <16 x i16> %10350, %10336
  %10352 = add <16 x i16> %10351, %10343
  %10353 = add <16 x i16> %10311, %10304
  %10354 = add <16 x i16> %10353, %10318
  %10355 = add <16 x i16> %10354, %10325
  %10356 = add <16 x i16> %10355, %10332
  %10357 = add <16 x i16> %10356, %10339
  %10358 = add <16 x i16> %10357, %10346
  %10359 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10352, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10360 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10358, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10361 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10359, <16 x i16> %10352)
  %10362 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10360, <16 x i16> %10358)
  %10363 = shufflevector <16 x i16> %10361, <16 x i16> %10362, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10364 = lshr <32 x i16> %10363, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10365 = shufflevector <32 x i16> %10364, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10366 = add nsw i64 %10027, %.pre-phi3562
  %10367 = getelementptr inbounds i16, i16* %66, i64 %10366
  %10368 = bitcast i16* %10367 to <16 x i16>*
  store <16 x i16> %10365, <16 x i16>* %10368, align 2, !tbaa !401
  %10369 = shufflevector <32 x i16> %10364, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10370 = getelementptr inbounds i16, i16* %10367, i64 16
  %10371 = bitcast i16* %10370 to <16 x i16>*
  store <16 x i16> %10369, <16 x i16>* %10371, align 2, !tbaa !401
  %indvars.iv.next3322 = add nuw nsw i64 %indvars.iv3321, 1
  %.not2772 = icmp eq i64 %indvars.iv.next3322, %188
  br i1 %.not2772, label %"end for blur_y.s0.x.x.rebased443", label %"for blur_y.s0.x.x.rebased442"

"for blur_y.s0.x.x.rebased450":                   ; preds = %"for blur_y.s0.x.x.rebased450.preheader", %"consume blur_x458"
  %blur_y.s0.x.x.rebased452 = phi i32 [ %10522, %"consume blur_x458" ], [ 0, %"for blur_y.s0.x.x.rebased450.preheader" ]
  %10372 = add nsw i32 %blur_y.s0.x.x.rebased452, %t1670
  %a217 = shl nsw i32 %10372, 5
  %10373 = icmp sgt i32 %a14, %a217
  %b223 = select i1 %10373, i32 %a217, i32 %a14
  %10374 = icmp slt i32 %10372, 1
  %10375 = icmp sgt i32 %4, %a217
  %10376 = or i1 %10374, %10375
  br i1 %10376, label %"produce blur_x456", label %"consume blur_x458"

"end for blur_y.s0.x.x.rebased451":               ; preds = %"consume blur_x458", %"end for blur_y.s0.x.x.rebased443"
  br i1 %34, label %"produce blur_x462", label %after_bb459

"produce blur_x456":                              ; preds = %"for blur_y.s0.x.x.rebased450"
  %10377 = icmp slt i32 %b223, %4
  %blur_x.s0.x.v1.base.s457 = select i1 %10377, i32 %b223, i32 %4
  %t981 = add nsw i32 %blur_x.s0.x.v1.base.s457, %t1985
  %10378 = sext i32 %t981 to i64
  %10379 = getelementptr inbounds i16, i16* %read_input, i64 %10378
  %10380 = getelementptr inbounds i16, i16* %10379, i64 1
  %10381 = bitcast i16* %10380 to <16 x i16>*
  %10382 = load <16 x i16>, <16 x i16>* %10381, align 2, !tbaa !396
  %10383 = getelementptr inbounds i16, i16* %10379, i64 17
  %10384 = bitcast i16* %10383 to <16 x i16>*
  %10385 = load <16 x i16>, <16 x i16>* %10384, align 2, !tbaa !396
  %10386 = bitcast i16* %10379 to <16 x i16>*
  %10387 = load <16 x i16>, <16 x i16>* %10386, align 2, !tbaa !396
  %10388 = getelementptr inbounds i16, i16* %10379, i64 16
  %10389 = bitcast i16* %10388 to <16 x i16>*
  %10390 = load <16 x i16>, <16 x i16>* %10389, align 2, !tbaa !396
  %10391 = getelementptr inbounds i16, i16* %10379, i64 2
  %10392 = bitcast i16* %10391 to <16 x i16>*
  %10393 = load <16 x i16>, <16 x i16>* %10392, align 2, !tbaa !396
  %10394 = getelementptr inbounds i16, i16* %10379, i64 18
  %10395 = bitcast i16* %10394 to <16 x i16>*
  %10396 = load <16 x i16>, <16 x i16>* %10395, align 2, !tbaa !396
  %10397 = getelementptr inbounds i16, i16* %10379, i64 3
  %10398 = bitcast i16* %10397 to <16 x i16>*
  %10399 = load <16 x i16>, <16 x i16>* %10398, align 2, !tbaa !396
  %10400 = getelementptr inbounds i16, i16* %10379, i64 19
  %10401 = bitcast i16* %10400 to <16 x i16>*
  %10402 = load <16 x i16>, <16 x i16>* %10401, align 2, !tbaa !396
  %10403 = getelementptr inbounds i16, i16* %10379, i64 4
  %10404 = bitcast i16* %10403 to <16 x i16>*
  %10405 = load <16 x i16>, <16 x i16>* %10404, align 2, !tbaa !396
  %10406 = getelementptr inbounds i16, i16* %10379, i64 20
  %10407 = bitcast i16* %10406 to <16 x i16>*
  %10408 = load <16 x i16>, <16 x i16>* %10407, align 2, !tbaa !396
  %10409 = getelementptr inbounds i16, i16* %10379, i64 6
  %10410 = bitcast i16* %10409 to <16 x i16>*
  %10411 = load <16 x i16>, <16 x i16>* %10410, align 2, !tbaa !396
  %10412 = getelementptr inbounds i16, i16* %10379, i64 22
  %10413 = bitcast i16* %10412 to <16 x i16>*
  %10414 = load <16 x i16>, <16 x i16>* %10413, align 2, !tbaa !396
  %10415 = getelementptr inbounds i16, i16* %10379, i64 5
  %10416 = bitcast i16* %10415 to <16 x i16>*
  %10417 = load <16 x i16>, <16 x i16>* %10416, align 2, !tbaa !396
  %10418 = getelementptr inbounds i16, i16* %10379, i64 21
  %10419 = bitcast i16* %10418 to <16 x i16>*
  %10420 = load <16 x i16>, <16 x i16>* %10419, align 2, !tbaa !396
  %10421 = add <16 x i16> %10387, %10382
  %10422 = add <16 x i16> %10421, %10393
  %10423 = add <16 x i16> %10422, %10399
  %10424 = add <16 x i16> %10423, %10405
  %10425 = add <16 x i16> %10424, %10411
  %10426 = add <16 x i16> %10425, %10417
  %10427 = add <16 x i16> %10390, %10385
  %10428 = add <16 x i16> %10427, %10396
  %10429 = add <16 x i16> %10428, %10402
  %10430 = add <16 x i16> %10429, %10408
  %10431 = add <16 x i16> %10430, %10414
  %10432 = add <16 x i16> %10431, %10420
  %10433 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10426, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10434 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10432, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10435 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10433, <16 x i16> %10426)
  %10436 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10434, <16 x i16> %10432)
  %10437 = shufflevector <16 x i16> %10435, <16 x i16> %10436, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10438 = lshr <32 x i16> %10437, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10439 = shufflevector <32 x i16> %10438, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10440 = sext i32 %blur_x.s0.x.v1.base.s457 to i64
  %10441 = add nsw i64 %10440, %10203
  %10442 = getelementptr inbounds i16, i16* %blur_x, i64 %10441
  %10443 = bitcast i16* %10442 to <16 x i16>*
  store <16 x i16> %10439, <16 x i16>* %10443, align 2, !tbaa !399
  %10444 = shufflevector <32 x i16> %10438, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10445 = getelementptr inbounds i16, i16* %10442, i64 16
  %10446 = bitcast i16* %10445 to <16 x i16>*
  store <16 x i16> %10444, <16 x i16>* %10446, align 2, !tbaa !399
  br label %"consume blur_x458"

"consume blur_x458":                              ; preds = %"for blur_y.s0.x.x.rebased450", %"produce blur_x456"
  %10447 = sext i32 %b223 to i64
  %10448 = add nsw i64 %10206, %10447
  %10449 = getelementptr inbounds i16, i16* %blur_x, i64 %10448
  %10450 = bitcast i16* %10449 to <16 x i16>*
  %10451 = load <16 x i16>, <16 x i16>* %10450, align 2, !tbaa !399
  %10452 = getelementptr inbounds i16, i16* %10449, i64 16
  %10453 = bitcast i16* %10452 to <16 x i16>*
  %10454 = load <16 x i16>, <16 x i16>* %10453, align 2, !tbaa !399
  %10455 = add nsw i64 %10209, %10447
  %10456 = getelementptr inbounds i16, i16* %blur_x, i64 %10455
  %10457 = bitcast i16* %10456 to <16 x i16>*
  %10458 = load <16 x i16>, <16 x i16>* %10457, align 2, !tbaa !399
  %10459 = getelementptr inbounds i16, i16* %10456, i64 16
  %10460 = bitcast i16* %10459 to <16 x i16>*
  %10461 = load <16 x i16>, <16 x i16>* %10460, align 2, !tbaa !399
  %10462 = add nsw i64 %10212, %10447
  %10463 = getelementptr inbounds i16, i16* %blur_x, i64 %10462
  %10464 = bitcast i16* %10463 to <16 x i16>*
  %10465 = load <16 x i16>, <16 x i16>* %10464, align 2, !tbaa !399
  %10466 = getelementptr inbounds i16, i16* %10463, i64 16
  %10467 = bitcast i16* %10466 to <16 x i16>*
  %10468 = load <16 x i16>, <16 x i16>* %10467, align 2, !tbaa !399
  %10469 = add nsw i64 %10215, %10447
  %10470 = getelementptr inbounds i16, i16* %blur_x, i64 %10469
  %10471 = bitcast i16* %10470 to <16 x i16>*
  %10472 = load <16 x i16>, <16 x i16>* %10471, align 2, !tbaa !399
  %10473 = getelementptr inbounds i16, i16* %10470, i64 16
  %10474 = bitcast i16* %10473 to <16 x i16>*
  %10475 = load <16 x i16>, <16 x i16>* %10474, align 2, !tbaa !399
  %10476 = add nsw i64 %10218, %10447
  %10477 = getelementptr inbounds i16, i16* %blur_x, i64 %10476
  %10478 = bitcast i16* %10477 to <16 x i16>*
  %10479 = load <16 x i16>, <16 x i16>* %10478, align 2, !tbaa !399
  %10480 = getelementptr inbounds i16, i16* %10477, i64 16
  %10481 = bitcast i16* %10480 to <16 x i16>*
  %10482 = load <16 x i16>, <16 x i16>* %10481, align 2, !tbaa !399
  %10483 = add nsw i64 %10221, %10447
  %10484 = getelementptr inbounds i16, i16* %blur_x, i64 %10483
  %10485 = bitcast i16* %10484 to <16 x i16>*
  %10486 = load <16 x i16>, <16 x i16>* %10485, align 2, !tbaa !399
  %10487 = getelementptr inbounds i16, i16* %10484, i64 16
  %10488 = bitcast i16* %10487 to <16 x i16>*
  %10489 = load <16 x i16>, <16 x i16>* %10488, align 2, !tbaa !399
  %10490 = add nsw i64 %10224, %10447
  %10491 = getelementptr inbounds i16, i16* %blur_x, i64 %10490
  %10492 = bitcast i16* %10491 to <16 x i16>*
  %10493 = load <16 x i16>, <16 x i16>* %10492, align 2, !tbaa !399
  %10494 = getelementptr inbounds i16, i16* %10491, i64 16
  %10495 = bitcast i16* %10494 to <16 x i16>*
  %10496 = load <16 x i16>, <16 x i16>* %10495, align 2, !tbaa !399
  %10497 = add <16 x i16> %10458, %10451
  %10498 = add <16 x i16> %10497, %10465
  %10499 = add <16 x i16> %10498, %10472
  %10500 = add <16 x i16> %10499, %10479
  %10501 = add <16 x i16> %10500, %10486
  %10502 = add <16 x i16> %10501, %10493
  %10503 = add <16 x i16> %10461, %10454
  %10504 = add <16 x i16> %10503, %10468
  %10505 = add <16 x i16> %10504, %10475
  %10506 = add <16 x i16> %10505, %10482
  %10507 = add <16 x i16> %10506, %10489
  %10508 = add <16 x i16> %10507, %10496
  %10509 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10502, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10510 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10508, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10511 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10509, <16 x i16> %10502)
  %10512 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10510, <16 x i16> %10508)
  %10513 = shufflevector <16 x i16> %10511, <16 x i16> %10512, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10514 = lshr <32 x i16> %10513, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10515 = shufflevector <32 x i16> %10514, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10516 = add nsw i64 %10228, %10447
  %10517 = getelementptr inbounds i16, i16* %66, i64 %10516
  %10518 = bitcast i16* %10517 to <16 x i16>*
  store <16 x i16> %10515, <16 x i16>* %10518, align 2, !tbaa !401
  %10519 = shufflevector <32 x i16> %10514, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10520 = getelementptr inbounds i16, i16* %10517, i64 16
  %10521 = bitcast i16* %10520 to <16 x i16>*
  store <16 x i16> %10519, <16 x i16>* %10521, align 2, !tbaa !401
  %10522 = add nuw nsw i32 %blur_y.s0.x.x.rebased452, 1
  %.not2771 = icmp eq i32 %10522, %t1727
  br i1 %.not2771, label %"end for blur_y.s0.x.x.rebased451", label %"for blur_y.s0.x.x.rebased450"

after_bb459:                                      ; preds = %"end for blur_y.s0.x.x.rebased451", %"produce blur_x462"
  br i1 %100, label %"for blur_y.s0.x.x.rebased464.preheader", label %"end for blur_y.s0.x.x.rebased465", !prof !386

"for blur_y.s0.x.x.rebased464.preheader":         ; preds = %after_bb459
  %10523 = sext i32 %t1756 to i64
  %10524 = zext i32 %.pre-phi to i64
  %10525 = mul nsw i64 %10524, %116
  %10526 = sub nsw i64 %10525, %96
  %10527 = zext i32 %.pre-phi3534 to i64
  %10528 = mul nsw i64 %10527, %116
  %10529 = sub nsw i64 %10528, %96
  %10530 = zext i32 %.pre-phi3508 to i64
  %10531 = mul nsw i64 %10530, %116
  %10532 = sub nsw i64 %10531, %96
  %10533 = zext i32 %.pre-phi3512 to i64
  %10534 = mul nsw i64 %10533, %116
  %10535 = sub nsw i64 %10534, %96
  %10536 = zext i32 %.pre-phi3516 to i64
  %10537 = mul nsw i64 %10536, %116
  %10538 = sub nsw i64 %10537, %96
  %10539 = zext i32 %.pre-phi3524 to i64
  %10540 = mul nsw i64 %10539, %116
  %10541 = sub nsw i64 %10540, %96
  %10542 = zext i32 %.pre-phi3520 to i64
  %10543 = mul nsw i64 %10542, %116
  %10544 = sub nsw i64 %10543, %96
  %10545 = sext i32 %a26 to i64
  %10546 = add nsw i64 %10545, 15
  %10547 = mul nsw i64 %10546, %117
  %10548 = add nsw i64 %10547, %120
  br label %"for blur_y.s0.x.x.rebased464"

"produce blur_x462":                              ; preds = %"end for blur_y.s0.x.x.rebased451"
  %10549 = getelementptr inbounds i16, i16* %read_input, i64 %149
  %10550 = getelementptr inbounds i16, i16* %10549, i64 -31
  %10551 = bitcast i16* %10550 to <16 x i16>*
  %10552 = load <16 x i16>, <16 x i16>* %10551, align 2, !tbaa !396
  %10553 = getelementptr inbounds i16, i16* %10549, i64 -15
  %10554 = bitcast i16* %10553 to <16 x i16>*
  %10555 = load <16 x i16>, <16 x i16>* %10554, align 2, !tbaa !396
  %10556 = getelementptr inbounds i16, i16* %10549, i64 -32
  %10557 = bitcast i16* %10556 to <16 x i16>*
  %10558 = load <16 x i16>, <16 x i16>* %10557, align 2, !tbaa !396
  %10559 = getelementptr inbounds i16, i16* %10549, i64 -16
  %10560 = bitcast i16* %10559 to <16 x i16>*
  %10561 = load <16 x i16>, <16 x i16>* %10560, align 2, !tbaa !396
  %10562 = getelementptr inbounds i16, i16* %10549, i64 -30
  %10563 = bitcast i16* %10562 to <16 x i16>*
  %10564 = load <16 x i16>, <16 x i16>* %10563, align 2, !tbaa !396
  %10565 = getelementptr inbounds i16, i16* %10549, i64 -14
  %10566 = bitcast i16* %10565 to <16 x i16>*
  %10567 = load <16 x i16>, <16 x i16>* %10566, align 2, !tbaa !396
  %10568 = getelementptr inbounds i16, i16* %10549, i64 -29
  %10569 = bitcast i16* %10568 to <16 x i16>*
  %10570 = load <16 x i16>, <16 x i16>* %10569, align 2, !tbaa !396
  %10571 = getelementptr inbounds i16, i16* %10549, i64 -13
  %10572 = bitcast i16* %10571 to <16 x i16>*
  %10573 = load <16 x i16>, <16 x i16>* %10572, align 2, !tbaa !396
  %10574 = getelementptr inbounds i16, i16* %10549, i64 -28
  %10575 = bitcast i16* %10574 to <16 x i16>*
  %10576 = load <16 x i16>, <16 x i16>* %10575, align 2, !tbaa !396
  %10577 = getelementptr inbounds i16, i16* %10549, i64 -12
  %10578 = bitcast i16* %10577 to <16 x i16>*
  %10579 = load <16 x i16>, <16 x i16>* %10578, align 2, !tbaa !396
  %10580 = getelementptr inbounds i16, i16* %10549, i64 -26
  %10581 = bitcast i16* %10580 to <16 x i16>*
  %10582 = load <16 x i16>, <16 x i16>* %10581, align 2, !tbaa !396
  %10583 = getelementptr inbounds i16, i16* %10549, i64 -10
  %10584 = bitcast i16* %10583 to <16 x i16>*
  %10585 = load <16 x i16>, <16 x i16>* %10584, align 2, !tbaa !396
  %10586 = getelementptr inbounds i16, i16* %10549, i64 -27
  %10587 = bitcast i16* %10586 to <16 x i16>*
  %10588 = load <16 x i16>, <16 x i16>* %10587, align 2, !tbaa !396
  %10589 = getelementptr inbounds i16, i16* %10549, i64 -11
  %10590 = bitcast i16* %10589 to <16 x i16>*
  %10591 = load <16 x i16>, <16 x i16>* %10590, align 2, !tbaa !396
  %10592 = add <16 x i16> %10558, %10552
  %10593 = add <16 x i16> %10592, %10564
  %10594 = add <16 x i16> %10593, %10570
  %10595 = add <16 x i16> %10594, %10576
  %10596 = add <16 x i16> %10595, %10582
  %10597 = add <16 x i16> %10596, %10588
  %10598 = add <16 x i16> %10561, %10555
  %10599 = add <16 x i16> %10598, %10567
  %10600 = add <16 x i16> %10599, %10573
  %10601 = add <16 x i16> %10600, %10579
  %10602 = add <16 x i16> %10601, %10585
  %10603 = add <16 x i16> %10602, %10591
  %10604 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10597, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10605 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10603, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10606 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10604, <16 x i16> %10597)
  %10607 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10605, <16 x i16> %10603)
  %10608 = shufflevector <16 x i16> %10606, <16 x i16> %10607, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10609 = lshr <32 x i16> %10608, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10610 = shufflevector <32 x i16> %10609, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10611 = zext i32 %.pre-phi3524 to i64
  %10612 = mul nsw i64 %97, %10611
  %10613 = add nsw i64 %99, %10612
  %10614 = getelementptr inbounds i16, i16* %blur_x, i64 %10613
  %10615 = getelementptr inbounds i16, i16* %10614, i64 -32
  %10616 = bitcast i16* %10615 to <16 x i16>*
  store <16 x i16> %10610, <16 x i16>* %10616, align 2, !tbaa !399
  %10617 = shufflevector <32 x i16> %10609, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10618 = getelementptr inbounds i16, i16* %10614, i64 -16
  %10619 = bitcast i16* %10618 to <16 x i16>*
  store <16 x i16> %10617, <16 x i16>* %10619, align 2, !tbaa !399
  %10620 = zext i32 %.pre-phi to i64
  %10621 = mul nsw i64 %10620, %116
  %10622 = add nsw i64 %10621, %94
  %10623 = getelementptr inbounds i16, i16* %blur_x, i64 %10622
  %10624 = getelementptr inbounds i16, i16* %10623, i64 -32
  %10625 = bitcast i16* %10624 to <16 x i16>*
  %10626 = load <16 x i16>, <16 x i16>* %10625, align 2, !tbaa !399
  %10627 = getelementptr inbounds i16, i16* %10623, i64 -16
  %10628 = bitcast i16* %10627 to <16 x i16>*
  %10629 = load <16 x i16>, <16 x i16>* %10628, align 2, !tbaa !399
  %10630 = zext i32 %.pre-phi3534 to i64
  %10631 = mul nsw i64 %10630, %116
  %10632 = add nsw i64 %10631, %94
  %10633 = getelementptr inbounds i16, i16* %blur_x, i64 %10632
  %10634 = getelementptr inbounds i16, i16* %10633, i64 -32
  %10635 = bitcast i16* %10634 to <16 x i16>*
  %10636 = load <16 x i16>, <16 x i16>* %10635, align 2, !tbaa !399
  %10637 = getelementptr inbounds i16, i16* %10633, i64 -16
  %10638 = bitcast i16* %10637 to <16 x i16>*
  %10639 = load <16 x i16>, <16 x i16>* %10638, align 2, !tbaa !399
  %10640 = zext i32 %.pre-phi3508 to i64
  %10641 = mul nsw i64 %10640, %116
  %10642 = add nsw i64 %10641, %94
  %10643 = getelementptr inbounds i16, i16* %blur_x, i64 %10642
  %10644 = getelementptr inbounds i16, i16* %10643, i64 -32
  %10645 = bitcast i16* %10644 to <16 x i16>*
  %10646 = load <16 x i16>, <16 x i16>* %10645, align 2, !tbaa !399
  %10647 = getelementptr inbounds i16, i16* %10643, i64 -16
  %10648 = bitcast i16* %10647 to <16 x i16>*
  %10649 = load <16 x i16>, <16 x i16>* %10648, align 2, !tbaa !399
  %10650 = zext i32 %.pre-phi3512 to i64
  %10651 = mul nsw i64 %10650, %116
  %10652 = add nsw i64 %10651, %94
  %10653 = getelementptr inbounds i16, i16* %blur_x, i64 %10652
  %10654 = getelementptr inbounds i16, i16* %10653, i64 -32
  %10655 = bitcast i16* %10654 to <16 x i16>*
  %10656 = load <16 x i16>, <16 x i16>* %10655, align 2, !tbaa !399
  %10657 = getelementptr inbounds i16, i16* %10653, i64 -16
  %10658 = bitcast i16* %10657 to <16 x i16>*
  %10659 = load <16 x i16>, <16 x i16>* %10658, align 2, !tbaa !399
  %10660 = zext i32 %.pre-phi3516 to i64
  %10661 = mul nsw i64 %10660, %116
  %10662 = add nsw i64 %10661, %94
  %10663 = getelementptr inbounds i16, i16* %blur_x, i64 %10662
  %10664 = getelementptr inbounds i16, i16* %10663, i64 -32
  %10665 = bitcast i16* %10664 to <16 x i16>*
  %10666 = load <16 x i16>, <16 x i16>* %10665, align 2, !tbaa !399
  %10667 = getelementptr inbounds i16, i16* %10663, i64 -16
  %10668 = bitcast i16* %10667 to <16 x i16>*
  %10669 = load <16 x i16>, <16 x i16>* %10668, align 2, !tbaa !399
  %10670 = mul nsw i64 %10611, %116
  %10671 = add nsw i64 %10670, %94
  %10672 = getelementptr inbounds i16, i16* %blur_x, i64 %10671
  %10673 = getelementptr inbounds i16, i16* %10672, i64 -32
  %10674 = bitcast i16* %10673 to <16 x i16>*
  %10675 = load <16 x i16>, <16 x i16>* %10674, align 2, !tbaa !399
  %10676 = getelementptr inbounds i16, i16* %10672, i64 -16
  %10677 = bitcast i16* %10676 to <16 x i16>*
  %10678 = load <16 x i16>, <16 x i16>* %10677, align 2, !tbaa !399
  %10679 = zext i32 %.pre-phi3520 to i64
  %10680 = mul nsw i64 %10679, %116
  %10681 = add nsw i64 %10680, %94
  %10682 = getelementptr inbounds i16, i16* %blur_x, i64 %10681
  %10683 = getelementptr inbounds i16, i16* %10682, i64 -32
  %10684 = bitcast i16* %10683 to <16 x i16>*
  %10685 = load <16 x i16>, <16 x i16>* %10684, align 2, !tbaa !399
  %10686 = getelementptr inbounds i16, i16* %10682, i64 -16
  %10687 = bitcast i16* %10686 to <16 x i16>*
  %10688 = load <16 x i16>, <16 x i16>* %10687, align 2, !tbaa !399
  %10689 = add <16 x i16> %10636, %10626
  %10690 = add <16 x i16> %10689, %10646
  %10691 = add <16 x i16> %10690, %10656
  %10692 = add <16 x i16> %10691, %10666
  %10693 = add <16 x i16> %10692, %10675
  %10694 = add <16 x i16> %10693, %10685
  %10695 = add <16 x i16> %10639, %10629
  %10696 = add <16 x i16> %10695, %10649
  %10697 = add <16 x i16> %10696, %10659
  %10698 = add <16 x i16> %10697, %10669
  %10699 = add <16 x i16> %10698, %10678
  %10700 = add <16 x i16> %10699, %10688
  %10701 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10694, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10702 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10700, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10703 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10701, <16 x i16> %10694)
  %10704 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10702, <16 x i16> %10700)
  %10705 = shufflevector <16 x i16> %10703, <16 x i16> %10704, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10706 = lshr <32 x i16> %10705, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10707 = shufflevector <32 x i16> %10706, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10708 = sext i32 %a26 to i64
  %10709 = add nsw i64 %10708, 15
  %10710 = mul nsw i64 %10709, %117
  %10711 = add nsw i64 %119, %10710
  %10712 = getelementptr inbounds i16, i16* %66, i64 %10711
  %10713 = getelementptr inbounds i16, i16* %10712, i64 -32
  %10714 = bitcast i16* %10713 to <16 x i16>*
  store <16 x i16> %10707, <16 x i16>* %10714, align 2, !tbaa !401
  %10715 = shufflevector <32 x i16> %10706, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10716 = getelementptr inbounds i16, i16* %10712, i64 -16
  %10717 = bitcast i16* %10716 to <16 x i16>*
  store <16 x i16> %10715, <16 x i16>* %10717, align 2, !tbaa !401
  br label %after_bb459

"for blur_y.s0.x.x.rebased464":                   ; preds = %"for blur_y.s0.x.x.rebased464.preheader", %"consume blur_x471"
  %indvars.iv3324 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased464.preheader" ], [ %indvars.iv.next3325, %"consume blur_x471" ]
  %10718 = add nsw i64 %indvars.iv3324, %101
  %10719 = icmp slt i64 %10718, 1
  %10720 = trunc i64 %10718 to i32
  %10721 = shl nsw i32 %10720, 5
  %10722 = icmp sgt i32 %4, %10721
  %10723 = or i1 %10719, %10722
  br i1 %10723, label %"produce blur_x470", label %"for blur_y.s0.x.x.rebased464.consume blur_x471_crit_edge"

"for blur_y.s0.x.x.rebased464.consume blur_x471_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased464"
  %.pre3563 = shl nsw i64 %10718, 5
  br label %"consume blur_x471"

"end for blur_y.s0.x.x.rebased465":               ; preds = %"consume blur_x471", %after_bb459
  br i1 %102, label %"for blur_y.s0.x.x.rebased472.preheader", label %"end for blur_y.s0.x.x.rebased473", !prof !386

"for blur_y.s0.x.x.rebased472.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased465"
  %10724 = sext i32 %t1756 to i64
  %10725 = zext i32 %.pre-phi to i64
  %10726 = mul nsw i64 %10725, %116
  %10727 = sub nsw i64 %10726, %96
  %10728 = zext i32 %.pre-phi3534 to i64
  %10729 = mul nsw i64 %10728, %116
  %10730 = sub nsw i64 %10729, %96
  %10731 = zext i32 %.pre-phi3508 to i64
  %10732 = mul nsw i64 %10731, %116
  %10733 = sub nsw i64 %10732, %96
  %10734 = zext i32 %.pre-phi3512 to i64
  %10735 = mul nsw i64 %10734, %116
  %10736 = sub nsw i64 %10735, %96
  %10737 = zext i32 %.pre-phi3516 to i64
  %10738 = mul nsw i64 %10737, %116
  %10739 = sub nsw i64 %10738, %96
  %10740 = zext i32 %.pre-phi3524 to i64
  %10741 = mul nsw i64 %10740, %116
  %10742 = sub nsw i64 %10741, %96
  %10743 = zext i32 %.pre-phi3520 to i64
  %10744 = mul nsw i64 %10743, %116
  %10745 = sub nsw i64 %10744, %96
  %10746 = sext i32 %a26 to i64
  %10747 = add nsw i64 %10746, 15
  %10748 = mul nsw i64 %10747, %117
  %10749 = add nsw i64 %10748, %120
  br label %"for blur_y.s0.x.x.rebased472"

"produce blur_x470":                              ; preds = %"for blur_y.s0.x.x.rebased464"
  %t992 = add nsw i32 %10721, %t2001
  %10750 = sext i32 %t992 to i64
  %10751 = getelementptr inbounds i16, i16* %read_input, i64 %10750
  %10752 = getelementptr inbounds i16, i16* %10751, i64 1
  %10753 = bitcast i16* %10752 to <16 x i16>*
  %10754 = load <16 x i16>, <16 x i16>* %10753, align 2, !tbaa !396
  %10755 = getelementptr inbounds i16, i16* %10751, i64 17
  %10756 = bitcast i16* %10755 to <16 x i16>*
  %10757 = load <16 x i16>, <16 x i16>* %10756, align 2, !tbaa !396
  %10758 = bitcast i16* %10751 to <16 x i16>*
  %10759 = load <16 x i16>, <16 x i16>* %10758, align 2, !tbaa !396
  %10760 = getelementptr inbounds i16, i16* %10751, i64 16
  %10761 = bitcast i16* %10760 to <16 x i16>*
  %10762 = load <16 x i16>, <16 x i16>* %10761, align 2, !tbaa !396
  %10763 = getelementptr inbounds i16, i16* %10751, i64 2
  %10764 = bitcast i16* %10763 to <16 x i16>*
  %10765 = load <16 x i16>, <16 x i16>* %10764, align 2, !tbaa !396
  %10766 = getelementptr inbounds i16, i16* %10751, i64 18
  %10767 = bitcast i16* %10766 to <16 x i16>*
  %10768 = load <16 x i16>, <16 x i16>* %10767, align 2, !tbaa !396
  %10769 = getelementptr inbounds i16, i16* %10751, i64 3
  %10770 = bitcast i16* %10769 to <16 x i16>*
  %10771 = load <16 x i16>, <16 x i16>* %10770, align 2, !tbaa !396
  %10772 = getelementptr inbounds i16, i16* %10751, i64 19
  %10773 = bitcast i16* %10772 to <16 x i16>*
  %10774 = load <16 x i16>, <16 x i16>* %10773, align 2, !tbaa !396
  %10775 = getelementptr inbounds i16, i16* %10751, i64 4
  %10776 = bitcast i16* %10775 to <16 x i16>*
  %10777 = load <16 x i16>, <16 x i16>* %10776, align 2, !tbaa !396
  %10778 = getelementptr inbounds i16, i16* %10751, i64 20
  %10779 = bitcast i16* %10778 to <16 x i16>*
  %10780 = load <16 x i16>, <16 x i16>* %10779, align 2, !tbaa !396
  %10781 = getelementptr inbounds i16, i16* %10751, i64 6
  %10782 = bitcast i16* %10781 to <16 x i16>*
  %10783 = load <16 x i16>, <16 x i16>* %10782, align 2, !tbaa !396
  %10784 = getelementptr inbounds i16, i16* %10751, i64 22
  %10785 = bitcast i16* %10784 to <16 x i16>*
  %10786 = load <16 x i16>, <16 x i16>* %10785, align 2, !tbaa !396
  %10787 = getelementptr inbounds i16, i16* %10751, i64 5
  %10788 = bitcast i16* %10787 to <16 x i16>*
  %10789 = load <16 x i16>, <16 x i16>* %10788, align 2, !tbaa !396
  %10790 = getelementptr inbounds i16, i16* %10751, i64 21
  %10791 = bitcast i16* %10790 to <16 x i16>*
  %10792 = load <16 x i16>, <16 x i16>* %10791, align 2, !tbaa !396
  %10793 = add <16 x i16> %10759, %10754
  %10794 = add <16 x i16> %10793, %10765
  %10795 = add <16 x i16> %10794, %10771
  %10796 = add <16 x i16> %10795, %10777
  %10797 = add <16 x i16> %10796, %10783
  %10798 = add <16 x i16> %10797, %10789
  %10799 = add <16 x i16> %10762, %10757
  %10800 = add <16 x i16> %10799, %10768
  %10801 = add <16 x i16> %10800, %10774
  %10802 = add <16 x i16> %10801, %10780
  %10803 = add <16 x i16> %10802, %10786
  %10804 = add <16 x i16> %10803, %10792
  %10805 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10798, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10806 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10804, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10807 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10805, <16 x i16> %10798)
  %10808 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10806, <16 x i16> %10804)
  %10809 = shufflevector <16 x i16> %10807, <16 x i16> %10808, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10810 = lshr <32 x i16> %10809, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10811 = shufflevector <32 x i16> %10810, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10812 = shl nsw i64 %10718, 5
  %10813 = add nsw i64 %10812, %10523
  %10814 = getelementptr inbounds i16, i16* %blur_x, i64 %10813
  %10815 = bitcast i16* %10814 to <16 x i16>*
  store <16 x i16> %10811, <16 x i16>* %10815, align 2, !tbaa !399
  %10816 = shufflevector <32 x i16> %10810, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10817 = getelementptr inbounds i16, i16* %10814, i64 16
  %10818 = bitcast i16* %10817 to <16 x i16>*
  store <16 x i16> %10816, <16 x i16>* %10818, align 2, !tbaa !399
  br label %"consume blur_x471"

"consume blur_x471":                              ; preds = %"for blur_y.s0.x.x.rebased464.consume blur_x471_crit_edge", %"produce blur_x470"
  %.pre-phi3564 = phi i64 [ %.pre3563, %"for blur_y.s0.x.x.rebased464.consume blur_x471_crit_edge" ], [ %10812, %"produce blur_x470" ]
  %10819 = add nsw i64 %10526, %.pre-phi3564
  %10820 = getelementptr inbounds i16, i16* %blur_x, i64 %10819
  %10821 = bitcast i16* %10820 to <16 x i16>*
  %10822 = load <16 x i16>, <16 x i16>* %10821, align 2, !tbaa !399
  %10823 = getelementptr inbounds i16, i16* %10820, i64 16
  %10824 = bitcast i16* %10823 to <16 x i16>*
  %10825 = load <16 x i16>, <16 x i16>* %10824, align 2, !tbaa !399
  %10826 = add nsw i64 %10529, %.pre-phi3564
  %10827 = getelementptr inbounds i16, i16* %blur_x, i64 %10826
  %10828 = bitcast i16* %10827 to <16 x i16>*
  %10829 = load <16 x i16>, <16 x i16>* %10828, align 2, !tbaa !399
  %10830 = getelementptr inbounds i16, i16* %10827, i64 16
  %10831 = bitcast i16* %10830 to <16 x i16>*
  %10832 = load <16 x i16>, <16 x i16>* %10831, align 2, !tbaa !399
  %10833 = add nsw i64 %10532, %.pre-phi3564
  %10834 = getelementptr inbounds i16, i16* %blur_x, i64 %10833
  %10835 = bitcast i16* %10834 to <16 x i16>*
  %10836 = load <16 x i16>, <16 x i16>* %10835, align 2, !tbaa !399
  %10837 = getelementptr inbounds i16, i16* %10834, i64 16
  %10838 = bitcast i16* %10837 to <16 x i16>*
  %10839 = load <16 x i16>, <16 x i16>* %10838, align 2, !tbaa !399
  %10840 = add nsw i64 %10535, %.pre-phi3564
  %10841 = getelementptr inbounds i16, i16* %blur_x, i64 %10840
  %10842 = bitcast i16* %10841 to <16 x i16>*
  %10843 = load <16 x i16>, <16 x i16>* %10842, align 2, !tbaa !399
  %10844 = getelementptr inbounds i16, i16* %10841, i64 16
  %10845 = bitcast i16* %10844 to <16 x i16>*
  %10846 = load <16 x i16>, <16 x i16>* %10845, align 2, !tbaa !399
  %10847 = add nsw i64 %10538, %.pre-phi3564
  %10848 = getelementptr inbounds i16, i16* %blur_x, i64 %10847
  %10849 = bitcast i16* %10848 to <16 x i16>*
  %10850 = load <16 x i16>, <16 x i16>* %10849, align 2, !tbaa !399
  %10851 = getelementptr inbounds i16, i16* %10848, i64 16
  %10852 = bitcast i16* %10851 to <16 x i16>*
  %10853 = load <16 x i16>, <16 x i16>* %10852, align 2, !tbaa !399
  %10854 = add nsw i64 %10541, %.pre-phi3564
  %10855 = getelementptr inbounds i16, i16* %blur_x, i64 %10854
  %10856 = bitcast i16* %10855 to <16 x i16>*
  %10857 = load <16 x i16>, <16 x i16>* %10856, align 2, !tbaa !399
  %10858 = getelementptr inbounds i16, i16* %10855, i64 16
  %10859 = bitcast i16* %10858 to <16 x i16>*
  %10860 = load <16 x i16>, <16 x i16>* %10859, align 2, !tbaa !399
  %10861 = add nsw i64 %10544, %.pre-phi3564
  %10862 = getelementptr inbounds i16, i16* %blur_x, i64 %10861
  %10863 = bitcast i16* %10862 to <16 x i16>*
  %10864 = load <16 x i16>, <16 x i16>* %10863, align 2, !tbaa !399
  %10865 = getelementptr inbounds i16, i16* %10862, i64 16
  %10866 = bitcast i16* %10865 to <16 x i16>*
  %10867 = load <16 x i16>, <16 x i16>* %10866, align 2, !tbaa !399
  %10868 = add <16 x i16> %10829, %10822
  %10869 = add <16 x i16> %10868, %10836
  %10870 = add <16 x i16> %10869, %10843
  %10871 = add <16 x i16> %10870, %10850
  %10872 = add <16 x i16> %10871, %10857
  %10873 = add <16 x i16> %10872, %10864
  %10874 = add <16 x i16> %10832, %10825
  %10875 = add <16 x i16> %10874, %10839
  %10876 = add <16 x i16> %10875, %10846
  %10877 = add <16 x i16> %10876, %10853
  %10878 = add <16 x i16> %10877, %10860
  %10879 = add <16 x i16> %10878, %10867
  %10880 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10873, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10881 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10879, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10882 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10880, <16 x i16> %10873)
  %10883 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10881, <16 x i16> %10879)
  %10884 = shufflevector <16 x i16> %10882, <16 x i16> %10883, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10885 = lshr <32 x i16> %10884, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10886 = shufflevector <32 x i16> %10885, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10887 = add nsw i64 %10548, %.pre-phi3564
  %10888 = getelementptr inbounds i16, i16* %66, i64 %10887
  %10889 = bitcast i16* %10888 to <16 x i16>*
  store <16 x i16> %10886, <16 x i16>* %10889, align 2, !tbaa !401
  %10890 = shufflevector <32 x i16> %10885, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10891 = getelementptr inbounds i16, i16* %10888, i64 16
  %10892 = bitcast i16* %10891 to <16 x i16>*
  store <16 x i16> %10890, <16 x i16>* %10892, align 2, !tbaa !401
  %indvars.iv.next3325 = add nuw nsw i64 %indvars.iv3324, 1
  %.not2770 = icmp eq i64 %indvars.iv.next3325, %188
  br i1 %.not2770, label %"end for blur_y.s0.x.x.rebased465", label %"for blur_y.s0.x.x.rebased464"

"for blur_y.s0.x.x.rebased472":                   ; preds = %"for blur_y.s0.x.x.rebased472.preheader", %"consume blur_x480"
  %blur_y.s0.x.x.rebased474 = phi i32 [ %11043, %"consume blur_x480" ], [ 0, %"for blur_y.s0.x.x.rebased472.preheader" ]
  %10893 = add nsw i32 %blur_y.s0.x.x.rebased474, %t1670
  %a224 = shl nsw i32 %10893, 5
  %10894 = icmp sgt i32 %a14, %a224
  %b230 = select i1 %10894, i32 %a224, i32 %a14
  %10895 = icmp slt i32 %10893, 1
  %10896 = icmp sgt i32 %4, %a224
  %10897 = or i1 %10895, %10896
  br i1 %10897, label %"produce blur_x478", label %"consume blur_x480"

"end for blur_y.s0.x.x.rebased473":               ; preds = %"consume blur_x480", %"end for blur_y.s0.x.x.rebased465"
  br i1 %34, label %"produce blur_x484", label %after_bb481

"produce blur_x478":                              ; preds = %"for blur_y.s0.x.x.rebased472"
  %10898 = icmp slt i32 %b230, %4
  %blur_x.s0.x.v1.base.s479 = select i1 %10898, i32 %b230, i32 %4
  %t997 = add nsw i32 %blur_x.s0.x.v1.base.s479, %t2001
  %10899 = sext i32 %t997 to i64
  %10900 = getelementptr inbounds i16, i16* %read_input, i64 %10899
  %10901 = getelementptr inbounds i16, i16* %10900, i64 1
  %10902 = bitcast i16* %10901 to <16 x i16>*
  %10903 = load <16 x i16>, <16 x i16>* %10902, align 2, !tbaa !396
  %10904 = getelementptr inbounds i16, i16* %10900, i64 17
  %10905 = bitcast i16* %10904 to <16 x i16>*
  %10906 = load <16 x i16>, <16 x i16>* %10905, align 2, !tbaa !396
  %10907 = bitcast i16* %10900 to <16 x i16>*
  %10908 = load <16 x i16>, <16 x i16>* %10907, align 2, !tbaa !396
  %10909 = getelementptr inbounds i16, i16* %10900, i64 16
  %10910 = bitcast i16* %10909 to <16 x i16>*
  %10911 = load <16 x i16>, <16 x i16>* %10910, align 2, !tbaa !396
  %10912 = getelementptr inbounds i16, i16* %10900, i64 2
  %10913 = bitcast i16* %10912 to <16 x i16>*
  %10914 = load <16 x i16>, <16 x i16>* %10913, align 2, !tbaa !396
  %10915 = getelementptr inbounds i16, i16* %10900, i64 18
  %10916 = bitcast i16* %10915 to <16 x i16>*
  %10917 = load <16 x i16>, <16 x i16>* %10916, align 2, !tbaa !396
  %10918 = getelementptr inbounds i16, i16* %10900, i64 3
  %10919 = bitcast i16* %10918 to <16 x i16>*
  %10920 = load <16 x i16>, <16 x i16>* %10919, align 2, !tbaa !396
  %10921 = getelementptr inbounds i16, i16* %10900, i64 19
  %10922 = bitcast i16* %10921 to <16 x i16>*
  %10923 = load <16 x i16>, <16 x i16>* %10922, align 2, !tbaa !396
  %10924 = getelementptr inbounds i16, i16* %10900, i64 4
  %10925 = bitcast i16* %10924 to <16 x i16>*
  %10926 = load <16 x i16>, <16 x i16>* %10925, align 2, !tbaa !396
  %10927 = getelementptr inbounds i16, i16* %10900, i64 20
  %10928 = bitcast i16* %10927 to <16 x i16>*
  %10929 = load <16 x i16>, <16 x i16>* %10928, align 2, !tbaa !396
  %10930 = getelementptr inbounds i16, i16* %10900, i64 6
  %10931 = bitcast i16* %10930 to <16 x i16>*
  %10932 = load <16 x i16>, <16 x i16>* %10931, align 2, !tbaa !396
  %10933 = getelementptr inbounds i16, i16* %10900, i64 22
  %10934 = bitcast i16* %10933 to <16 x i16>*
  %10935 = load <16 x i16>, <16 x i16>* %10934, align 2, !tbaa !396
  %10936 = getelementptr inbounds i16, i16* %10900, i64 5
  %10937 = bitcast i16* %10936 to <16 x i16>*
  %10938 = load <16 x i16>, <16 x i16>* %10937, align 2, !tbaa !396
  %10939 = getelementptr inbounds i16, i16* %10900, i64 21
  %10940 = bitcast i16* %10939 to <16 x i16>*
  %10941 = load <16 x i16>, <16 x i16>* %10940, align 2, !tbaa !396
  %10942 = add <16 x i16> %10908, %10903
  %10943 = add <16 x i16> %10942, %10914
  %10944 = add <16 x i16> %10943, %10920
  %10945 = add <16 x i16> %10944, %10926
  %10946 = add <16 x i16> %10945, %10932
  %10947 = add <16 x i16> %10946, %10938
  %10948 = add <16 x i16> %10911, %10906
  %10949 = add <16 x i16> %10948, %10917
  %10950 = add <16 x i16> %10949, %10923
  %10951 = add <16 x i16> %10950, %10929
  %10952 = add <16 x i16> %10951, %10935
  %10953 = add <16 x i16> %10952, %10941
  %10954 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10947, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10955 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10953, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %10956 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10954, <16 x i16> %10947)
  %10957 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %10955, <16 x i16> %10953)
  %10958 = shufflevector <16 x i16> %10956, <16 x i16> %10957, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10959 = lshr <32 x i16> %10958, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10960 = shufflevector <32 x i16> %10959, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10961 = sext i32 %blur_x.s0.x.v1.base.s479 to i64
  %10962 = add nsw i64 %10961, %10724
  %10963 = getelementptr inbounds i16, i16* %blur_x, i64 %10962
  %10964 = bitcast i16* %10963 to <16 x i16>*
  store <16 x i16> %10960, <16 x i16>* %10964, align 2, !tbaa !399
  %10965 = shufflevector <32 x i16> %10959, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10966 = getelementptr inbounds i16, i16* %10963, i64 16
  %10967 = bitcast i16* %10966 to <16 x i16>*
  store <16 x i16> %10965, <16 x i16>* %10967, align 2, !tbaa !399
  br label %"consume blur_x480"

"consume blur_x480":                              ; preds = %"for blur_y.s0.x.x.rebased472", %"produce blur_x478"
  %10968 = sext i32 %b230 to i64
  %10969 = add nsw i64 %10727, %10968
  %10970 = getelementptr inbounds i16, i16* %blur_x, i64 %10969
  %10971 = bitcast i16* %10970 to <16 x i16>*
  %10972 = load <16 x i16>, <16 x i16>* %10971, align 2, !tbaa !399
  %10973 = getelementptr inbounds i16, i16* %10970, i64 16
  %10974 = bitcast i16* %10973 to <16 x i16>*
  %10975 = load <16 x i16>, <16 x i16>* %10974, align 2, !tbaa !399
  %10976 = add nsw i64 %10730, %10968
  %10977 = getelementptr inbounds i16, i16* %blur_x, i64 %10976
  %10978 = bitcast i16* %10977 to <16 x i16>*
  %10979 = load <16 x i16>, <16 x i16>* %10978, align 2, !tbaa !399
  %10980 = getelementptr inbounds i16, i16* %10977, i64 16
  %10981 = bitcast i16* %10980 to <16 x i16>*
  %10982 = load <16 x i16>, <16 x i16>* %10981, align 2, !tbaa !399
  %10983 = add nsw i64 %10733, %10968
  %10984 = getelementptr inbounds i16, i16* %blur_x, i64 %10983
  %10985 = bitcast i16* %10984 to <16 x i16>*
  %10986 = load <16 x i16>, <16 x i16>* %10985, align 2, !tbaa !399
  %10987 = getelementptr inbounds i16, i16* %10984, i64 16
  %10988 = bitcast i16* %10987 to <16 x i16>*
  %10989 = load <16 x i16>, <16 x i16>* %10988, align 2, !tbaa !399
  %10990 = add nsw i64 %10736, %10968
  %10991 = getelementptr inbounds i16, i16* %blur_x, i64 %10990
  %10992 = bitcast i16* %10991 to <16 x i16>*
  %10993 = load <16 x i16>, <16 x i16>* %10992, align 2, !tbaa !399
  %10994 = getelementptr inbounds i16, i16* %10991, i64 16
  %10995 = bitcast i16* %10994 to <16 x i16>*
  %10996 = load <16 x i16>, <16 x i16>* %10995, align 2, !tbaa !399
  %10997 = add nsw i64 %10739, %10968
  %10998 = getelementptr inbounds i16, i16* %blur_x, i64 %10997
  %10999 = bitcast i16* %10998 to <16 x i16>*
  %11000 = load <16 x i16>, <16 x i16>* %10999, align 2, !tbaa !399
  %11001 = getelementptr inbounds i16, i16* %10998, i64 16
  %11002 = bitcast i16* %11001 to <16 x i16>*
  %11003 = load <16 x i16>, <16 x i16>* %11002, align 2, !tbaa !399
  %11004 = add nsw i64 %10742, %10968
  %11005 = getelementptr inbounds i16, i16* %blur_x, i64 %11004
  %11006 = bitcast i16* %11005 to <16 x i16>*
  %11007 = load <16 x i16>, <16 x i16>* %11006, align 2, !tbaa !399
  %11008 = getelementptr inbounds i16, i16* %11005, i64 16
  %11009 = bitcast i16* %11008 to <16 x i16>*
  %11010 = load <16 x i16>, <16 x i16>* %11009, align 2, !tbaa !399
  %11011 = add nsw i64 %10745, %10968
  %11012 = getelementptr inbounds i16, i16* %blur_x, i64 %11011
  %11013 = bitcast i16* %11012 to <16 x i16>*
  %11014 = load <16 x i16>, <16 x i16>* %11013, align 2, !tbaa !399
  %11015 = getelementptr inbounds i16, i16* %11012, i64 16
  %11016 = bitcast i16* %11015 to <16 x i16>*
  %11017 = load <16 x i16>, <16 x i16>* %11016, align 2, !tbaa !399
  %11018 = add <16 x i16> %10979, %10972
  %11019 = add <16 x i16> %11018, %10986
  %11020 = add <16 x i16> %11019, %10993
  %11021 = add <16 x i16> %11020, %11000
  %11022 = add <16 x i16> %11021, %11007
  %11023 = add <16 x i16> %11022, %11014
  %11024 = add <16 x i16> %10982, %10975
  %11025 = add <16 x i16> %11024, %10989
  %11026 = add <16 x i16> %11025, %10996
  %11027 = add <16 x i16> %11026, %11003
  %11028 = add <16 x i16> %11027, %11010
  %11029 = add <16 x i16> %11028, %11017
  %11030 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11023, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11031 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11029, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11032 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11030, <16 x i16> %11023)
  %11033 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11031, <16 x i16> %11029)
  %11034 = shufflevector <16 x i16> %11032, <16 x i16> %11033, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11035 = lshr <32 x i16> %11034, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11036 = shufflevector <32 x i16> %11035, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11037 = add nsw i64 %10749, %10968
  %11038 = getelementptr inbounds i16, i16* %66, i64 %11037
  %11039 = bitcast i16* %11038 to <16 x i16>*
  store <16 x i16> %11036, <16 x i16>* %11039, align 2, !tbaa !401
  %11040 = shufflevector <32 x i16> %11035, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11041 = getelementptr inbounds i16, i16* %11038, i64 16
  %11042 = bitcast i16* %11041 to <16 x i16>*
  store <16 x i16> %11040, <16 x i16>* %11042, align 2, !tbaa !401
  %11043 = add nuw nsw i32 %blur_y.s0.x.x.rebased474, 1
  %.not2769 = icmp eq i32 %11043, %t1727
  br i1 %.not2769, label %"end for blur_y.s0.x.x.rebased473", label %"for blur_y.s0.x.x.rebased472"

after_bb481:                                      ; preds = %"end for blur_y.s0.x.x.rebased473", %"produce blur_x484"
  br i1 %100, label %"for blur_y.s0.x.x.rebased486.preheader", label %"end for blur_y.s0.x.x.rebased487", !prof !386

"for blur_y.s0.x.x.rebased486.preheader":         ; preds = %after_bb481
  %11044 = sext i32 %t1762 to i64
  %11045 = zext i32 %.pre-phi3508 to i64
  %11046 = mul nsw i64 %11045, %116
  %11047 = sub nsw i64 %11046, %96
  %11048 = zext i32 %.pre-phi to i64
  %11049 = mul nsw i64 %11048, %116
  %11050 = sub nsw i64 %11049, %96
  %11051 = zext i32 %.pre-phi3512 to i64
  %11052 = mul nsw i64 %11051, %116
  %11053 = sub nsw i64 %11052, %96
  %11054 = zext i32 %.pre-phi3516 to i64
  %11055 = mul nsw i64 %11054, %116
  %11056 = sub nsw i64 %11055, %96
  %11057 = zext i32 %.pre-phi3520 to i64
  %11058 = mul nsw i64 %11057, %116
  %11059 = sub nsw i64 %11058, %96
  %11060 = zext i32 %.pre-phi3528 to i64
  %11061 = mul nsw i64 %11060, %116
  %11062 = sub nsw i64 %11061, %96
  %11063 = zext i32 %.pre-phi3524 to i64
  %11064 = mul nsw i64 %11063, %116
  %11065 = sub nsw i64 %11064, %96
  %11066 = sext i32 %a26 to i64
  %11067 = add nsw i64 %11066, 16
  %11068 = mul nsw i64 %11067, %117
  %11069 = add nsw i64 %11068, %120
  br label %"for blur_y.s0.x.x.rebased486"

"produce blur_x484":                              ; preds = %"end for blur_y.s0.x.x.rebased473"
  %11070 = getelementptr inbounds i16, i16* %read_input, i64 %151
  %11071 = getelementptr inbounds i16, i16* %11070, i64 -31
  %11072 = bitcast i16* %11071 to <16 x i16>*
  %11073 = load <16 x i16>, <16 x i16>* %11072, align 2, !tbaa !396
  %11074 = getelementptr inbounds i16, i16* %11070, i64 -15
  %11075 = bitcast i16* %11074 to <16 x i16>*
  %11076 = load <16 x i16>, <16 x i16>* %11075, align 2, !tbaa !396
  %11077 = getelementptr inbounds i16, i16* %11070, i64 -32
  %11078 = bitcast i16* %11077 to <16 x i16>*
  %11079 = load <16 x i16>, <16 x i16>* %11078, align 2, !tbaa !396
  %11080 = getelementptr inbounds i16, i16* %11070, i64 -16
  %11081 = bitcast i16* %11080 to <16 x i16>*
  %11082 = load <16 x i16>, <16 x i16>* %11081, align 2, !tbaa !396
  %11083 = getelementptr inbounds i16, i16* %11070, i64 -30
  %11084 = bitcast i16* %11083 to <16 x i16>*
  %11085 = load <16 x i16>, <16 x i16>* %11084, align 2, !tbaa !396
  %11086 = getelementptr inbounds i16, i16* %11070, i64 -14
  %11087 = bitcast i16* %11086 to <16 x i16>*
  %11088 = load <16 x i16>, <16 x i16>* %11087, align 2, !tbaa !396
  %11089 = getelementptr inbounds i16, i16* %11070, i64 -29
  %11090 = bitcast i16* %11089 to <16 x i16>*
  %11091 = load <16 x i16>, <16 x i16>* %11090, align 2, !tbaa !396
  %11092 = getelementptr inbounds i16, i16* %11070, i64 -13
  %11093 = bitcast i16* %11092 to <16 x i16>*
  %11094 = load <16 x i16>, <16 x i16>* %11093, align 2, !tbaa !396
  %11095 = getelementptr inbounds i16, i16* %11070, i64 -28
  %11096 = bitcast i16* %11095 to <16 x i16>*
  %11097 = load <16 x i16>, <16 x i16>* %11096, align 2, !tbaa !396
  %11098 = getelementptr inbounds i16, i16* %11070, i64 -12
  %11099 = bitcast i16* %11098 to <16 x i16>*
  %11100 = load <16 x i16>, <16 x i16>* %11099, align 2, !tbaa !396
  %11101 = getelementptr inbounds i16, i16* %11070, i64 -26
  %11102 = bitcast i16* %11101 to <16 x i16>*
  %11103 = load <16 x i16>, <16 x i16>* %11102, align 2, !tbaa !396
  %11104 = getelementptr inbounds i16, i16* %11070, i64 -10
  %11105 = bitcast i16* %11104 to <16 x i16>*
  %11106 = load <16 x i16>, <16 x i16>* %11105, align 2, !tbaa !396
  %11107 = getelementptr inbounds i16, i16* %11070, i64 -27
  %11108 = bitcast i16* %11107 to <16 x i16>*
  %11109 = load <16 x i16>, <16 x i16>* %11108, align 2, !tbaa !396
  %11110 = getelementptr inbounds i16, i16* %11070, i64 -11
  %11111 = bitcast i16* %11110 to <16 x i16>*
  %11112 = load <16 x i16>, <16 x i16>* %11111, align 2, !tbaa !396
  %11113 = add <16 x i16> %11079, %11073
  %11114 = add <16 x i16> %11113, %11085
  %11115 = add <16 x i16> %11114, %11091
  %11116 = add <16 x i16> %11115, %11097
  %11117 = add <16 x i16> %11116, %11103
  %11118 = add <16 x i16> %11117, %11109
  %11119 = add <16 x i16> %11082, %11076
  %11120 = add <16 x i16> %11119, %11088
  %11121 = add <16 x i16> %11120, %11094
  %11122 = add <16 x i16> %11121, %11100
  %11123 = add <16 x i16> %11122, %11106
  %11124 = add <16 x i16> %11123, %11112
  %11125 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11118, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11126 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11124, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11127 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11125, <16 x i16> %11118)
  %11128 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11126, <16 x i16> %11124)
  %11129 = shufflevector <16 x i16> %11127, <16 x i16> %11128, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11130 = lshr <32 x i16> %11129, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11131 = shufflevector <32 x i16> %11130, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11132 = zext i32 %.pre-phi3528 to i64
  %11133 = mul nsw i64 %97, %11132
  %11134 = add nsw i64 %99, %11133
  %11135 = getelementptr inbounds i16, i16* %blur_x, i64 %11134
  %11136 = getelementptr inbounds i16, i16* %11135, i64 -32
  %11137 = bitcast i16* %11136 to <16 x i16>*
  store <16 x i16> %11131, <16 x i16>* %11137, align 2, !tbaa !399
  %11138 = shufflevector <32 x i16> %11130, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11139 = getelementptr inbounds i16, i16* %11135, i64 -16
  %11140 = bitcast i16* %11139 to <16 x i16>*
  store <16 x i16> %11138, <16 x i16>* %11140, align 2, !tbaa !399
  %11141 = zext i32 %.pre-phi3508 to i64
  %11142 = mul nsw i64 %11141, %116
  %11143 = add nsw i64 %11142, %94
  %11144 = getelementptr inbounds i16, i16* %blur_x, i64 %11143
  %11145 = getelementptr inbounds i16, i16* %11144, i64 -32
  %11146 = bitcast i16* %11145 to <16 x i16>*
  %11147 = load <16 x i16>, <16 x i16>* %11146, align 2, !tbaa !399
  %11148 = getelementptr inbounds i16, i16* %11144, i64 -16
  %11149 = bitcast i16* %11148 to <16 x i16>*
  %11150 = load <16 x i16>, <16 x i16>* %11149, align 2, !tbaa !399
  %11151 = zext i32 %.pre-phi to i64
  %11152 = mul nsw i64 %11151, %116
  %11153 = add nsw i64 %11152, %94
  %11154 = getelementptr inbounds i16, i16* %blur_x, i64 %11153
  %11155 = getelementptr inbounds i16, i16* %11154, i64 -32
  %11156 = bitcast i16* %11155 to <16 x i16>*
  %11157 = load <16 x i16>, <16 x i16>* %11156, align 2, !tbaa !399
  %11158 = getelementptr inbounds i16, i16* %11154, i64 -16
  %11159 = bitcast i16* %11158 to <16 x i16>*
  %11160 = load <16 x i16>, <16 x i16>* %11159, align 2, !tbaa !399
  %11161 = zext i32 %.pre-phi3512 to i64
  %11162 = mul nsw i64 %11161, %116
  %11163 = add nsw i64 %11162, %94
  %11164 = getelementptr inbounds i16, i16* %blur_x, i64 %11163
  %11165 = getelementptr inbounds i16, i16* %11164, i64 -32
  %11166 = bitcast i16* %11165 to <16 x i16>*
  %11167 = load <16 x i16>, <16 x i16>* %11166, align 2, !tbaa !399
  %11168 = getelementptr inbounds i16, i16* %11164, i64 -16
  %11169 = bitcast i16* %11168 to <16 x i16>*
  %11170 = load <16 x i16>, <16 x i16>* %11169, align 2, !tbaa !399
  %11171 = zext i32 %.pre-phi3516 to i64
  %11172 = mul nsw i64 %11171, %116
  %11173 = add nsw i64 %11172, %94
  %11174 = getelementptr inbounds i16, i16* %blur_x, i64 %11173
  %11175 = getelementptr inbounds i16, i16* %11174, i64 -32
  %11176 = bitcast i16* %11175 to <16 x i16>*
  %11177 = load <16 x i16>, <16 x i16>* %11176, align 2, !tbaa !399
  %11178 = getelementptr inbounds i16, i16* %11174, i64 -16
  %11179 = bitcast i16* %11178 to <16 x i16>*
  %11180 = load <16 x i16>, <16 x i16>* %11179, align 2, !tbaa !399
  %11181 = zext i32 %.pre-phi3520 to i64
  %11182 = mul nsw i64 %11181, %116
  %11183 = add nsw i64 %11182, %94
  %11184 = getelementptr inbounds i16, i16* %blur_x, i64 %11183
  %11185 = getelementptr inbounds i16, i16* %11184, i64 -32
  %11186 = bitcast i16* %11185 to <16 x i16>*
  %11187 = load <16 x i16>, <16 x i16>* %11186, align 2, !tbaa !399
  %11188 = getelementptr inbounds i16, i16* %11184, i64 -16
  %11189 = bitcast i16* %11188 to <16 x i16>*
  %11190 = load <16 x i16>, <16 x i16>* %11189, align 2, !tbaa !399
  %11191 = mul nsw i64 %11132, %116
  %11192 = add nsw i64 %11191, %94
  %11193 = getelementptr inbounds i16, i16* %blur_x, i64 %11192
  %11194 = getelementptr inbounds i16, i16* %11193, i64 -32
  %11195 = bitcast i16* %11194 to <16 x i16>*
  %11196 = load <16 x i16>, <16 x i16>* %11195, align 2, !tbaa !399
  %11197 = getelementptr inbounds i16, i16* %11193, i64 -16
  %11198 = bitcast i16* %11197 to <16 x i16>*
  %11199 = load <16 x i16>, <16 x i16>* %11198, align 2, !tbaa !399
  %11200 = zext i32 %.pre-phi3524 to i64
  %11201 = mul nsw i64 %11200, %116
  %11202 = add nsw i64 %11201, %94
  %11203 = getelementptr inbounds i16, i16* %blur_x, i64 %11202
  %11204 = getelementptr inbounds i16, i16* %11203, i64 -32
  %11205 = bitcast i16* %11204 to <16 x i16>*
  %11206 = load <16 x i16>, <16 x i16>* %11205, align 2, !tbaa !399
  %11207 = getelementptr inbounds i16, i16* %11203, i64 -16
  %11208 = bitcast i16* %11207 to <16 x i16>*
  %11209 = load <16 x i16>, <16 x i16>* %11208, align 2, !tbaa !399
  %11210 = add <16 x i16> %11157, %11147
  %11211 = add <16 x i16> %11210, %11167
  %11212 = add <16 x i16> %11211, %11177
  %11213 = add <16 x i16> %11212, %11187
  %11214 = add <16 x i16> %11213, %11196
  %11215 = add <16 x i16> %11214, %11206
  %11216 = add <16 x i16> %11160, %11150
  %11217 = add <16 x i16> %11216, %11170
  %11218 = add <16 x i16> %11217, %11180
  %11219 = add <16 x i16> %11218, %11190
  %11220 = add <16 x i16> %11219, %11199
  %11221 = add <16 x i16> %11220, %11209
  %11222 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11215, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11223 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11221, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11224 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11222, <16 x i16> %11215)
  %11225 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11223, <16 x i16> %11221)
  %11226 = shufflevector <16 x i16> %11224, <16 x i16> %11225, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11227 = lshr <32 x i16> %11226, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11228 = shufflevector <32 x i16> %11227, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11229 = sext i32 %a26 to i64
  %11230 = add nsw i64 %11229, 16
  %11231 = mul nsw i64 %11230, %117
  %11232 = add nsw i64 %119, %11231
  %11233 = getelementptr inbounds i16, i16* %66, i64 %11232
  %11234 = getelementptr inbounds i16, i16* %11233, i64 -32
  %11235 = bitcast i16* %11234 to <16 x i16>*
  store <16 x i16> %11228, <16 x i16>* %11235, align 2, !tbaa !401
  %11236 = shufflevector <32 x i16> %11227, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11237 = getelementptr inbounds i16, i16* %11233, i64 -16
  %11238 = bitcast i16* %11237 to <16 x i16>*
  store <16 x i16> %11236, <16 x i16>* %11238, align 2, !tbaa !401
  br label %after_bb481

"for blur_y.s0.x.x.rebased486":                   ; preds = %"for blur_y.s0.x.x.rebased486.preheader", %"consume blur_x493"
  %indvars.iv3327 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased486.preheader" ], [ %indvars.iv.next3328, %"consume blur_x493" ]
  %11239 = add nsw i64 %indvars.iv3327, %101
  %11240 = icmp slt i64 %11239, 1
  %11241 = trunc i64 %11239 to i32
  %11242 = shl nsw i32 %11241, 5
  %11243 = icmp sgt i32 %4, %11242
  %11244 = or i1 %11240, %11243
  br i1 %11244, label %"produce blur_x492", label %"for blur_y.s0.x.x.rebased486.consume blur_x493_crit_edge"

"for blur_y.s0.x.x.rebased486.consume blur_x493_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased486"
  %.pre3565 = shl nsw i64 %11239, 5
  br label %"consume blur_x493"

"end for blur_y.s0.x.x.rebased487":               ; preds = %"consume blur_x493", %after_bb481
  br i1 %102, label %"for blur_y.s0.x.x.rebased494.preheader", label %"end for blur_y.s0.x.x.rebased495", !prof !386

"for blur_y.s0.x.x.rebased494.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased487"
  %11245 = sext i32 %t1762 to i64
  %11246 = zext i32 %.pre-phi3508 to i64
  %11247 = mul nsw i64 %11246, %116
  %11248 = sub nsw i64 %11247, %96
  %11249 = zext i32 %.pre-phi to i64
  %11250 = mul nsw i64 %11249, %116
  %11251 = sub nsw i64 %11250, %96
  %11252 = zext i32 %.pre-phi3512 to i64
  %11253 = mul nsw i64 %11252, %116
  %11254 = sub nsw i64 %11253, %96
  %11255 = zext i32 %.pre-phi3516 to i64
  %11256 = mul nsw i64 %11255, %116
  %11257 = sub nsw i64 %11256, %96
  %11258 = zext i32 %.pre-phi3520 to i64
  %11259 = mul nsw i64 %11258, %116
  %11260 = sub nsw i64 %11259, %96
  %11261 = zext i32 %.pre-phi3528 to i64
  %11262 = mul nsw i64 %11261, %116
  %11263 = sub nsw i64 %11262, %96
  %11264 = zext i32 %.pre-phi3524 to i64
  %11265 = mul nsw i64 %11264, %116
  %11266 = sub nsw i64 %11265, %96
  %11267 = sext i32 %a26 to i64
  %11268 = add nsw i64 %11267, 16
  %11269 = mul nsw i64 %11268, %117
  %11270 = add nsw i64 %11269, %120
  br label %"for blur_y.s0.x.x.rebased494"

"produce blur_x492":                              ; preds = %"for blur_y.s0.x.x.rebased486"
  %t1008 = add nsw i32 %11242, %t2017
  %11271 = sext i32 %t1008 to i64
  %11272 = getelementptr inbounds i16, i16* %read_input, i64 %11271
  %11273 = getelementptr inbounds i16, i16* %11272, i64 1
  %11274 = bitcast i16* %11273 to <16 x i16>*
  %11275 = load <16 x i16>, <16 x i16>* %11274, align 2, !tbaa !396
  %11276 = getelementptr inbounds i16, i16* %11272, i64 17
  %11277 = bitcast i16* %11276 to <16 x i16>*
  %11278 = load <16 x i16>, <16 x i16>* %11277, align 2, !tbaa !396
  %11279 = bitcast i16* %11272 to <16 x i16>*
  %11280 = load <16 x i16>, <16 x i16>* %11279, align 2, !tbaa !396
  %11281 = getelementptr inbounds i16, i16* %11272, i64 16
  %11282 = bitcast i16* %11281 to <16 x i16>*
  %11283 = load <16 x i16>, <16 x i16>* %11282, align 2, !tbaa !396
  %11284 = getelementptr inbounds i16, i16* %11272, i64 2
  %11285 = bitcast i16* %11284 to <16 x i16>*
  %11286 = load <16 x i16>, <16 x i16>* %11285, align 2, !tbaa !396
  %11287 = getelementptr inbounds i16, i16* %11272, i64 18
  %11288 = bitcast i16* %11287 to <16 x i16>*
  %11289 = load <16 x i16>, <16 x i16>* %11288, align 2, !tbaa !396
  %11290 = getelementptr inbounds i16, i16* %11272, i64 3
  %11291 = bitcast i16* %11290 to <16 x i16>*
  %11292 = load <16 x i16>, <16 x i16>* %11291, align 2, !tbaa !396
  %11293 = getelementptr inbounds i16, i16* %11272, i64 19
  %11294 = bitcast i16* %11293 to <16 x i16>*
  %11295 = load <16 x i16>, <16 x i16>* %11294, align 2, !tbaa !396
  %11296 = getelementptr inbounds i16, i16* %11272, i64 4
  %11297 = bitcast i16* %11296 to <16 x i16>*
  %11298 = load <16 x i16>, <16 x i16>* %11297, align 2, !tbaa !396
  %11299 = getelementptr inbounds i16, i16* %11272, i64 20
  %11300 = bitcast i16* %11299 to <16 x i16>*
  %11301 = load <16 x i16>, <16 x i16>* %11300, align 2, !tbaa !396
  %11302 = getelementptr inbounds i16, i16* %11272, i64 6
  %11303 = bitcast i16* %11302 to <16 x i16>*
  %11304 = load <16 x i16>, <16 x i16>* %11303, align 2, !tbaa !396
  %11305 = getelementptr inbounds i16, i16* %11272, i64 22
  %11306 = bitcast i16* %11305 to <16 x i16>*
  %11307 = load <16 x i16>, <16 x i16>* %11306, align 2, !tbaa !396
  %11308 = getelementptr inbounds i16, i16* %11272, i64 5
  %11309 = bitcast i16* %11308 to <16 x i16>*
  %11310 = load <16 x i16>, <16 x i16>* %11309, align 2, !tbaa !396
  %11311 = getelementptr inbounds i16, i16* %11272, i64 21
  %11312 = bitcast i16* %11311 to <16 x i16>*
  %11313 = load <16 x i16>, <16 x i16>* %11312, align 2, !tbaa !396
  %11314 = add <16 x i16> %11280, %11275
  %11315 = add <16 x i16> %11314, %11286
  %11316 = add <16 x i16> %11315, %11292
  %11317 = add <16 x i16> %11316, %11298
  %11318 = add <16 x i16> %11317, %11304
  %11319 = add <16 x i16> %11318, %11310
  %11320 = add <16 x i16> %11283, %11278
  %11321 = add <16 x i16> %11320, %11289
  %11322 = add <16 x i16> %11321, %11295
  %11323 = add <16 x i16> %11322, %11301
  %11324 = add <16 x i16> %11323, %11307
  %11325 = add <16 x i16> %11324, %11313
  %11326 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11319, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11327 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11325, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11328 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11326, <16 x i16> %11319)
  %11329 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11327, <16 x i16> %11325)
  %11330 = shufflevector <16 x i16> %11328, <16 x i16> %11329, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11331 = lshr <32 x i16> %11330, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11332 = shufflevector <32 x i16> %11331, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11333 = shl nsw i64 %11239, 5
  %11334 = add nsw i64 %11333, %11044
  %11335 = getelementptr inbounds i16, i16* %blur_x, i64 %11334
  %11336 = bitcast i16* %11335 to <16 x i16>*
  store <16 x i16> %11332, <16 x i16>* %11336, align 2, !tbaa !399
  %11337 = shufflevector <32 x i16> %11331, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11338 = getelementptr inbounds i16, i16* %11335, i64 16
  %11339 = bitcast i16* %11338 to <16 x i16>*
  store <16 x i16> %11337, <16 x i16>* %11339, align 2, !tbaa !399
  br label %"consume blur_x493"

"consume blur_x493":                              ; preds = %"for blur_y.s0.x.x.rebased486.consume blur_x493_crit_edge", %"produce blur_x492"
  %.pre-phi3566 = phi i64 [ %.pre3565, %"for blur_y.s0.x.x.rebased486.consume blur_x493_crit_edge" ], [ %11333, %"produce blur_x492" ]
  %11340 = add nsw i64 %11047, %.pre-phi3566
  %11341 = getelementptr inbounds i16, i16* %blur_x, i64 %11340
  %11342 = bitcast i16* %11341 to <16 x i16>*
  %11343 = load <16 x i16>, <16 x i16>* %11342, align 2, !tbaa !399
  %11344 = getelementptr inbounds i16, i16* %11341, i64 16
  %11345 = bitcast i16* %11344 to <16 x i16>*
  %11346 = load <16 x i16>, <16 x i16>* %11345, align 2, !tbaa !399
  %11347 = add nsw i64 %11050, %.pre-phi3566
  %11348 = getelementptr inbounds i16, i16* %blur_x, i64 %11347
  %11349 = bitcast i16* %11348 to <16 x i16>*
  %11350 = load <16 x i16>, <16 x i16>* %11349, align 2, !tbaa !399
  %11351 = getelementptr inbounds i16, i16* %11348, i64 16
  %11352 = bitcast i16* %11351 to <16 x i16>*
  %11353 = load <16 x i16>, <16 x i16>* %11352, align 2, !tbaa !399
  %11354 = add nsw i64 %11053, %.pre-phi3566
  %11355 = getelementptr inbounds i16, i16* %blur_x, i64 %11354
  %11356 = bitcast i16* %11355 to <16 x i16>*
  %11357 = load <16 x i16>, <16 x i16>* %11356, align 2, !tbaa !399
  %11358 = getelementptr inbounds i16, i16* %11355, i64 16
  %11359 = bitcast i16* %11358 to <16 x i16>*
  %11360 = load <16 x i16>, <16 x i16>* %11359, align 2, !tbaa !399
  %11361 = add nsw i64 %11056, %.pre-phi3566
  %11362 = getelementptr inbounds i16, i16* %blur_x, i64 %11361
  %11363 = bitcast i16* %11362 to <16 x i16>*
  %11364 = load <16 x i16>, <16 x i16>* %11363, align 2, !tbaa !399
  %11365 = getelementptr inbounds i16, i16* %11362, i64 16
  %11366 = bitcast i16* %11365 to <16 x i16>*
  %11367 = load <16 x i16>, <16 x i16>* %11366, align 2, !tbaa !399
  %11368 = add nsw i64 %11059, %.pre-phi3566
  %11369 = getelementptr inbounds i16, i16* %blur_x, i64 %11368
  %11370 = bitcast i16* %11369 to <16 x i16>*
  %11371 = load <16 x i16>, <16 x i16>* %11370, align 2, !tbaa !399
  %11372 = getelementptr inbounds i16, i16* %11369, i64 16
  %11373 = bitcast i16* %11372 to <16 x i16>*
  %11374 = load <16 x i16>, <16 x i16>* %11373, align 2, !tbaa !399
  %11375 = add nsw i64 %11062, %.pre-phi3566
  %11376 = getelementptr inbounds i16, i16* %blur_x, i64 %11375
  %11377 = bitcast i16* %11376 to <16 x i16>*
  %11378 = load <16 x i16>, <16 x i16>* %11377, align 2, !tbaa !399
  %11379 = getelementptr inbounds i16, i16* %11376, i64 16
  %11380 = bitcast i16* %11379 to <16 x i16>*
  %11381 = load <16 x i16>, <16 x i16>* %11380, align 2, !tbaa !399
  %11382 = add nsw i64 %11065, %.pre-phi3566
  %11383 = getelementptr inbounds i16, i16* %blur_x, i64 %11382
  %11384 = bitcast i16* %11383 to <16 x i16>*
  %11385 = load <16 x i16>, <16 x i16>* %11384, align 2, !tbaa !399
  %11386 = getelementptr inbounds i16, i16* %11383, i64 16
  %11387 = bitcast i16* %11386 to <16 x i16>*
  %11388 = load <16 x i16>, <16 x i16>* %11387, align 2, !tbaa !399
  %11389 = add <16 x i16> %11350, %11343
  %11390 = add <16 x i16> %11389, %11357
  %11391 = add <16 x i16> %11390, %11364
  %11392 = add <16 x i16> %11391, %11371
  %11393 = add <16 x i16> %11392, %11378
  %11394 = add <16 x i16> %11393, %11385
  %11395 = add <16 x i16> %11353, %11346
  %11396 = add <16 x i16> %11395, %11360
  %11397 = add <16 x i16> %11396, %11367
  %11398 = add <16 x i16> %11397, %11374
  %11399 = add <16 x i16> %11398, %11381
  %11400 = add <16 x i16> %11399, %11388
  %11401 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11394, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11402 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11400, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11403 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11401, <16 x i16> %11394)
  %11404 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11402, <16 x i16> %11400)
  %11405 = shufflevector <16 x i16> %11403, <16 x i16> %11404, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11406 = lshr <32 x i16> %11405, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11407 = shufflevector <32 x i16> %11406, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11408 = add nsw i64 %11069, %.pre-phi3566
  %11409 = getelementptr inbounds i16, i16* %66, i64 %11408
  %11410 = bitcast i16* %11409 to <16 x i16>*
  store <16 x i16> %11407, <16 x i16>* %11410, align 2, !tbaa !401
  %11411 = shufflevector <32 x i16> %11406, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11412 = getelementptr inbounds i16, i16* %11409, i64 16
  %11413 = bitcast i16* %11412 to <16 x i16>*
  store <16 x i16> %11411, <16 x i16>* %11413, align 2, !tbaa !401
  %indvars.iv.next3328 = add nuw nsw i64 %indvars.iv3327, 1
  %.not2768 = icmp eq i64 %indvars.iv.next3328, %188
  br i1 %.not2768, label %"end for blur_y.s0.x.x.rebased487", label %"for blur_y.s0.x.x.rebased486"

"for blur_y.s0.x.x.rebased494":                   ; preds = %"for blur_y.s0.x.x.rebased494.preheader", %"consume blur_x502"
  %blur_y.s0.x.x.rebased496 = phi i32 [ %11564, %"consume blur_x502" ], [ 0, %"for blur_y.s0.x.x.rebased494.preheader" ]
  %11414 = add nsw i32 %blur_y.s0.x.x.rebased496, %t1670
  %a231 = shl nsw i32 %11414, 5
  %11415 = icmp sgt i32 %a14, %a231
  %b237 = select i1 %11415, i32 %a231, i32 %a14
  %11416 = icmp slt i32 %11414, 1
  %11417 = icmp sgt i32 %4, %a231
  %11418 = or i1 %11416, %11417
  br i1 %11418, label %"produce blur_x500", label %"consume blur_x502"

"end for blur_y.s0.x.x.rebased495":               ; preds = %"consume blur_x502", %"end for blur_y.s0.x.x.rebased487"
  br i1 %34, label %"produce blur_x506", label %after_bb503

"produce blur_x500":                              ; preds = %"for blur_y.s0.x.x.rebased494"
  %11419 = icmp slt i32 %b237, %4
  %blur_x.s0.x.v1.base.s501 = select i1 %11419, i32 %b237, i32 %4
  %t1013 = add nsw i32 %blur_x.s0.x.v1.base.s501, %t2017
  %11420 = sext i32 %t1013 to i64
  %11421 = getelementptr inbounds i16, i16* %read_input, i64 %11420
  %11422 = getelementptr inbounds i16, i16* %11421, i64 1
  %11423 = bitcast i16* %11422 to <16 x i16>*
  %11424 = load <16 x i16>, <16 x i16>* %11423, align 2, !tbaa !396
  %11425 = getelementptr inbounds i16, i16* %11421, i64 17
  %11426 = bitcast i16* %11425 to <16 x i16>*
  %11427 = load <16 x i16>, <16 x i16>* %11426, align 2, !tbaa !396
  %11428 = bitcast i16* %11421 to <16 x i16>*
  %11429 = load <16 x i16>, <16 x i16>* %11428, align 2, !tbaa !396
  %11430 = getelementptr inbounds i16, i16* %11421, i64 16
  %11431 = bitcast i16* %11430 to <16 x i16>*
  %11432 = load <16 x i16>, <16 x i16>* %11431, align 2, !tbaa !396
  %11433 = getelementptr inbounds i16, i16* %11421, i64 2
  %11434 = bitcast i16* %11433 to <16 x i16>*
  %11435 = load <16 x i16>, <16 x i16>* %11434, align 2, !tbaa !396
  %11436 = getelementptr inbounds i16, i16* %11421, i64 18
  %11437 = bitcast i16* %11436 to <16 x i16>*
  %11438 = load <16 x i16>, <16 x i16>* %11437, align 2, !tbaa !396
  %11439 = getelementptr inbounds i16, i16* %11421, i64 3
  %11440 = bitcast i16* %11439 to <16 x i16>*
  %11441 = load <16 x i16>, <16 x i16>* %11440, align 2, !tbaa !396
  %11442 = getelementptr inbounds i16, i16* %11421, i64 19
  %11443 = bitcast i16* %11442 to <16 x i16>*
  %11444 = load <16 x i16>, <16 x i16>* %11443, align 2, !tbaa !396
  %11445 = getelementptr inbounds i16, i16* %11421, i64 4
  %11446 = bitcast i16* %11445 to <16 x i16>*
  %11447 = load <16 x i16>, <16 x i16>* %11446, align 2, !tbaa !396
  %11448 = getelementptr inbounds i16, i16* %11421, i64 20
  %11449 = bitcast i16* %11448 to <16 x i16>*
  %11450 = load <16 x i16>, <16 x i16>* %11449, align 2, !tbaa !396
  %11451 = getelementptr inbounds i16, i16* %11421, i64 6
  %11452 = bitcast i16* %11451 to <16 x i16>*
  %11453 = load <16 x i16>, <16 x i16>* %11452, align 2, !tbaa !396
  %11454 = getelementptr inbounds i16, i16* %11421, i64 22
  %11455 = bitcast i16* %11454 to <16 x i16>*
  %11456 = load <16 x i16>, <16 x i16>* %11455, align 2, !tbaa !396
  %11457 = getelementptr inbounds i16, i16* %11421, i64 5
  %11458 = bitcast i16* %11457 to <16 x i16>*
  %11459 = load <16 x i16>, <16 x i16>* %11458, align 2, !tbaa !396
  %11460 = getelementptr inbounds i16, i16* %11421, i64 21
  %11461 = bitcast i16* %11460 to <16 x i16>*
  %11462 = load <16 x i16>, <16 x i16>* %11461, align 2, !tbaa !396
  %11463 = add <16 x i16> %11429, %11424
  %11464 = add <16 x i16> %11463, %11435
  %11465 = add <16 x i16> %11464, %11441
  %11466 = add <16 x i16> %11465, %11447
  %11467 = add <16 x i16> %11466, %11453
  %11468 = add <16 x i16> %11467, %11459
  %11469 = add <16 x i16> %11432, %11427
  %11470 = add <16 x i16> %11469, %11438
  %11471 = add <16 x i16> %11470, %11444
  %11472 = add <16 x i16> %11471, %11450
  %11473 = add <16 x i16> %11472, %11456
  %11474 = add <16 x i16> %11473, %11462
  %11475 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11468, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11476 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11474, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11477 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11475, <16 x i16> %11468)
  %11478 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11476, <16 x i16> %11474)
  %11479 = shufflevector <16 x i16> %11477, <16 x i16> %11478, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11480 = lshr <32 x i16> %11479, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11481 = shufflevector <32 x i16> %11480, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11482 = sext i32 %blur_x.s0.x.v1.base.s501 to i64
  %11483 = add nsw i64 %11482, %11245
  %11484 = getelementptr inbounds i16, i16* %blur_x, i64 %11483
  %11485 = bitcast i16* %11484 to <16 x i16>*
  store <16 x i16> %11481, <16 x i16>* %11485, align 2, !tbaa !399
  %11486 = shufflevector <32 x i16> %11480, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11487 = getelementptr inbounds i16, i16* %11484, i64 16
  %11488 = bitcast i16* %11487 to <16 x i16>*
  store <16 x i16> %11486, <16 x i16>* %11488, align 2, !tbaa !399
  br label %"consume blur_x502"

"consume blur_x502":                              ; preds = %"for blur_y.s0.x.x.rebased494", %"produce blur_x500"
  %11489 = sext i32 %b237 to i64
  %11490 = add nsw i64 %11248, %11489
  %11491 = getelementptr inbounds i16, i16* %blur_x, i64 %11490
  %11492 = bitcast i16* %11491 to <16 x i16>*
  %11493 = load <16 x i16>, <16 x i16>* %11492, align 2, !tbaa !399
  %11494 = getelementptr inbounds i16, i16* %11491, i64 16
  %11495 = bitcast i16* %11494 to <16 x i16>*
  %11496 = load <16 x i16>, <16 x i16>* %11495, align 2, !tbaa !399
  %11497 = add nsw i64 %11251, %11489
  %11498 = getelementptr inbounds i16, i16* %blur_x, i64 %11497
  %11499 = bitcast i16* %11498 to <16 x i16>*
  %11500 = load <16 x i16>, <16 x i16>* %11499, align 2, !tbaa !399
  %11501 = getelementptr inbounds i16, i16* %11498, i64 16
  %11502 = bitcast i16* %11501 to <16 x i16>*
  %11503 = load <16 x i16>, <16 x i16>* %11502, align 2, !tbaa !399
  %11504 = add nsw i64 %11254, %11489
  %11505 = getelementptr inbounds i16, i16* %blur_x, i64 %11504
  %11506 = bitcast i16* %11505 to <16 x i16>*
  %11507 = load <16 x i16>, <16 x i16>* %11506, align 2, !tbaa !399
  %11508 = getelementptr inbounds i16, i16* %11505, i64 16
  %11509 = bitcast i16* %11508 to <16 x i16>*
  %11510 = load <16 x i16>, <16 x i16>* %11509, align 2, !tbaa !399
  %11511 = add nsw i64 %11257, %11489
  %11512 = getelementptr inbounds i16, i16* %blur_x, i64 %11511
  %11513 = bitcast i16* %11512 to <16 x i16>*
  %11514 = load <16 x i16>, <16 x i16>* %11513, align 2, !tbaa !399
  %11515 = getelementptr inbounds i16, i16* %11512, i64 16
  %11516 = bitcast i16* %11515 to <16 x i16>*
  %11517 = load <16 x i16>, <16 x i16>* %11516, align 2, !tbaa !399
  %11518 = add nsw i64 %11260, %11489
  %11519 = getelementptr inbounds i16, i16* %blur_x, i64 %11518
  %11520 = bitcast i16* %11519 to <16 x i16>*
  %11521 = load <16 x i16>, <16 x i16>* %11520, align 2, !tbaa !399
  %11522 = getelementptr inbounds i16, i16* %11519, i64 16
  %11523 = bitcast i16* %11522 to <16 x i16>*
  %11524 = load <16 x i16>, <16 x i16>* %11523, align 2, !tbaa !399
  %11525 = add nsw i64 %11263, %11489
  %11526 = getelementptr inbounds i16, i16* %blur_x, i64 %11525
  %11527 = bitcast i16* %11526 to <16 x i16>*
  %11528 = load <16 x i16>, <16 x i16>* %11527, align 2, !tbaa !399
  %11529 = getelementptr inbounds i16, i16* %11526, i64 16
  %11530 = bitcast i16* %11529 to <16 x i16>*
  %11531 = load <16 x i16>, <16 x i16>* %11530, align 2, !tbaa !399
  %11532 = add nsw i64 %11266, %11489
  %11533 = getelementptr inbounds i16, i16* %blur_x, i64 %11532
  %11534 = bitcast i16* %11533 to <16 x i16>*
  %11535 = load <16 x i16>, <16 x i16>* %11534, align 2, !tbaa !399
  %11536 = getelementptr inbounds i16, i16* %11533, i64 16
  %11537 = bitcast i16* %11536 to <16 x i16>*
  %11538 = load <16 x i16>, <16 x i16>* %11537, align 2, !tbaa !399
  %11539 = add <16 x i16> %11500, %11493
  %11540 = add <16 x i16> %11539, %11507
  %11541 = add <16 x i16> %11540, %11514
  %11542 = add <16 x i16> %11541, %11521
  %11543 = add <16 x i16> %11542, %11528
  %11544 = add <16 x i16> %11543, %11535
  %11545 = add <16 x i16> %11503, %11496
  %11546 = add <16 x i16> %11545, %11510
  %11547 = add <16 x i16> %11546, %11517
  %11548 = add <16 x i16> %11547, %11524
  %11549 = add <16 x i16> %11548, %11531
  %11550 = add <16 x i16> %11549, %11538
  %11551 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11544, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11552 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11550, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11553 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11551, <16 x i16> %11544)
  %11554 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11552, <16 x i16> %11550)
  %11555 = shufflevector <16 x i16> %11553, <16 x i16> %11554, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11556 = lshr <32 x i16> %11555, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11557 = shufflevector <32 x i16> %11556, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11558 = add nsw i64 %11270, %11489
  %11559 = getelementptr inbounds i16, i16* %66, i64 %11558
  %11560 = bitcast i16* %11559 to <16 x i16>*
  store <16 x i16> %11557, <16 x i16>* %11560, align 2, !tbaa !401
  %11561 = shufflevector <32 x i16> %11556, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11562 = getelementptr inbounds i16, i16* %11559, i64 16
  %11563 = bitcast i16* %11562 to <16 x i16>*
  store <16 x i16> %11561, <16 x i16>* %11563, align 2, !tbaa !401
  %11564 = add nuw nsw i32 %blur_y.s0.x.x.rebased496, 1
  %.not2767 = icmp eq i32 %11564, %t1727
  br i1 %.not2767, label %"end for blur_y.s0.x.x.rebased495", label %"for blur_y.s0.x.x.rebased494"

after_bb503:                                      ; preds = %"end for blur_y.s0.x.x.rebased495", %"produce blur_x506"
  br i1 %100, label %"for blur_y.s0.x.x.rebased508.preheader", label %"end for blur_y.s0.x.x.rebased509", !prof !386

"for blur_y.s0.x.x.rebased508.preheader":         ; preds = %after_bb503
  %11565 = sext i32 %t1778 to i64
  %11566 = zext i32 %.pre-phi3512 to i64
  %11567 = mul nsw i64 %11566, %116
  %11568 = sub nsw i64 %11567, %96
  %11569 = zext i32 %.pre-phi3508 to i64
  %11570 = mul nsw i64 %11569, %116
  %11571 = sub nsw i64 %11570, %96
  %11572 = zext i32 %.pre-phi3516 to i64
  %11573 = mul nsw i64 %11572, %116
  %11574 = sub nsw i64 %11573, %96
  %11575 = zext i32 %.pre-phi3520 to i64
  %11576 = mul nsw i64 %11575, %116
  %11577 = sub nsw i64 %11576, %96
  %11578 = zext i32 %.pre-phi3524 to i64
  %11579 = mul nsw i64 %11578, %116
  %11580 = sub nsw i64 %11579, %96
  %11581 = zext i32 %.pre-phi3534 to i64
  %11582 = mul nsw i64 %11581, %116
  %11583 = sub nsw i64 %11582, %96
  %11584 = zext i32 %.pre-phi3528 to i64
  %11585 = mul nsw i64 %11584, %116
  %11586 = sub nsw i64 %11585, %96
  %11587 = sext i32 %a26 to i64
  %11588 = add nsw i64 %11587, 17
  %11589 = mul nsw i64 %11588, %117
  %11590 = add nsw i64 %11589, %120
  br label %"for blur_y.s0.x.x.rebased508"

"produce blur_x506":                              ; preds = %"end for blur_y.s0.x.x.rebased495"
  %11591 = getelementptr inbounds i16, i16* %read_input, i64 %153
  %11592 = getelementptr inbounds i16, i16* %11591, i64 -31
  %11593 = bitcast i16* %11592 to <16 x i16>*
  %11594 = load <16 x i16>, <16 x i16>* %11593, align 2, !tbaa !396
  %11595 = getelementptr inbounds i16, i16* %11591, i64 -15
  %11596 = bitcast i16* %11595 to <16 x i16>*
  %11597 = load <16 x i16>, <16 x i16>* %11596, align 2, !tbaa !396
  %11598 = getelementptr inbounds i16, i16* %11591, i64 -32
  %11599 = bitcast i16* %11598 to <16 x i16>*
  %11600 = load <16 x i16>, <16 x i16>* %11599, align 2, !tbaa !396
  %11601 = getelementptr inbounds i16, i16* %11591, i64 -16
  %11602 = bitcast i16* %11601 to <16 x i16>*
  %11603 = load <16 x i16>, <16 x i16>* %11602, align 2, !tbaa !396
  %11604 = getelementptr inbounds i16, i16* %11591, i64 -30
  %11605 = bitcast i16* %11604 to <16 x i16>*
  %11606 = load <16 x i16>, <16 x i16>* %11605, align 2, !tbaa !396
  %11607 = getelementptr inbounds i16, i16* %11591, i64 -14
  %11608 = bitcast i16* %11607 to <16 x i16>*
  %11609 = load <16 x i16>, <16 x i16>* %11608, align 2, !tbaa !396
  %11610 = getelementptr inbounds i16, i16* %11591, i64 -29
  %11611 = bitcast i16* %11610 to <16 x i16>*
  %11612 = load <16 x i16>, <16 x i16>* %11611, align 2, !tbaa !396
  %11613 = getelementptr inbounds i16, i16* %11591, i64 -13
  %11614 = bitcast i16* %11613 to <16 x i16>*
  %11615 = load <16 x i16>, <16 x i16>* %11614, align 2, !tbaa !396
  %11616 = getelementptr inbounds i16, i16* %11591, i64 -28
  %11617 = bitcast i16* %11616 to <16 x i16>*
  %11618 = load <16 x i16>, <16 x i16>* %11617, align 2, !tbaa !396
  %11619 = getelementptr inbounds i16, i16* %11591, i64 -12
  %11620 = bitcast i16* %11619 to <16 x i16>*
  %11621 = load <16 x i16>, <16 x i16>* %11620, align 2, !tbaa !396
  %11622 = getelementptr inbounds i16, i16* %11591, i64 -26
  %11623 = bitcast i16* %11622 to <16 x i16>*
  %11624 = load <16 x i16>, <16 x i16>* %11623, align 2, !tbaa !396
  %11625 = getelementptr inbounds i16, i16* %11591, i64 -10
  %11626 = bitcast i16* %11625 to <16 x i16>*
  %11627 = load <16 x i16>, <16 x i16>* %11626, align 2, !tbaa !396
  %11628 = getelementptr inbounds i16, i16* %11591, i64 -27
  %11629 = bitcast i16* %11628 to <16 x i16>*
  %11630 = load <16 x i16>, <16 x i16>* %11629, align 2, !tbaa !396
  %11631 = getelementptr inbounds i16, i16* %11591, i64 -11
  %11632 = bitcast i16* %11631 to <16 x i16>*
  %11633 = load <16 x i16>, <16 x i16>* %11632, align 2, !tbaa !396
  %11634 = add <16 x i16> %11600, %11594
  %11635 = add <16 x i16> %11634, %11606
  %11636 = add <16 x i16> %11635, %11612
  %11637 = add <16 x i16> %11636, %11618
  %11638 = add <16 x i16> %11637, %11624
  %11639 = add <16 x i16> %11638, %11630
  %11640 = add <16 x i16> %11603, %11597
  %11641 = add <16 x i16> %11640, %11609
  %11642 = add <16 x i16> %11641, %11615
  %11643 = add <16 x i16> %11642, %11621
  %11644 = add <16 x i16> %11643, %11627
  %11645 = add <16 x i16> %11644, %11633
  %11646 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11639, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11647 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11645, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11648 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11646, <16 x i16> %11639)
  %11649 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11647, <16 x i16> %11645)
  %11650 = shufflevector <16 x i16> %11648, <16 x i16> %11649, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11651 = lshr <32 x i16> %11650, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11652 = shufflevector <32 x i16> %11651, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11653 = zext i32 %.pre-phi3534 to i64
  %11654 = mul nsw i64 %97, %11653
  %11655 = add nsw i64 %99, %11654
  %11656 = getelementptr inbounds i16, i16* %blur_x, i64 %11655
  %11657 = getelementptr inbounds i16, i16* %11656, i64 -32
  %11658 = bitcast i16* %11657 to <16 x i16>*
  store <16 x i16> %11652, <16 x i16>* %11658, align 2, !tbaa !399
  %11659 = shufflevector <32 x i16> %11651, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11660 = getelementptr inbounds i16, i16* %11656, i64 -16
  %11661 = bitcast i16* %11660 to <16 x i16>*
  store <16 x i16> %11659, <16 x i16>* %11661, align 2, !tbaa !399
  %11662 = zext i32 %.pre-phi3512 to i64
  %11663 = mul nsw i64 %11662, %116
  %11664 = add nsw i64 %11663, %94
  %11665 = getelementptr inbounds i16, i16* %blur_x, i64 %11664
  %11666 = getelementptr inbounds i16, i16* %11665, i64 -32
  %11667 = bitcast i16* %11666 to <16 x i16>*
  %11668 = load <16 x i16>, <16 x i16>* %11667, align 2, !tbaa !399
  %11669 = getelementptr inbounds i16, i16* %11665, i64 -16
  %11670 = bitcast i16* %11669 to <16 x i16>*
  %11671 = load <16 x i16>, <16 x i16>* %11670, align 2, !tbaa !399
  %11672 = zext i32 %.pre-phi3508 to i64
  %11673 = mul nsw i64 %11672, %116
  %11674 = add nsw i64 %11673, %94
  %11675 = getelementptr inbounds i16, i16* %blur_x, i64 %11674
  %11676 = getelementptr inbounds i16, i16* %11675, i64 -32
  %11677 = bitcast i16* %11676 to <16 x i16>*
  %11678 = load <16 x i16>, <16 x i16>* %11677, align 2, !tbaa !399
  %11679 = getelementptr inbounds i16, i16* %11675, i64 -16
  %11680 = bitcast i16* %11679 to <16 x i16>*
  %11681 = load <16 x i16>, <16 x i16>* %11680, align 2, !tbaa !399
  %11682 = zext i32 %.pre-phi3516 to i64
  %11683 = mul nsw i64 %11682, %116
  %11684 = add nsw i64 %11683, %94
  %11685 = getelementptr inbounds i16, i16* %blur_x, i64 %11684
  %11686 = getelementptr inbounds i16, i16* %11685, i64 -32
  %11687 = bitcast i16* %11686 to <16 x i16>*
  %11688 = load <16 x i16>, <16 x i16>* %11687, align 2, !tbaa !399
  %11689 = getelementptr inbounds i16, i16* %11685, i64 -16
  %11690 = bitcast i16* %11689 to <16 x i16>*
  %11691 = load <16 x i16>, <16 x i16>* %11690, align 2, !tbaa !399
  %11692 = zext i32 %.pre-phi3520 to i64
  %11693 = mul nsw i64 %11692, %116
  %11694 = add nsw i64 %11693, %94
  %11695 = getelementptr inbounds i16, i16* %blur_x, i64 %11694
  %11696 = getelementptr inbounds i16, i16* %11695, i64 -32
  %11697 = bitcast i16* %11696 to <16 x i16>*
  %11698 = load <16 x i16>, <16 x i16>* %11697, align 2, !tbaa !399
  %11699 = getelementptr inbounds i16, i16* %11695, i64 -16
  %11700 = bitcast i16* %11699 to <16 x i16>*
  %11701 = load <16 x i16>, <16 x i16>* %11700, align 2, !tbaa !399
  %11702 = zext i32 %.pre-phi3524 to i64
  %11703 = mul nsw i64 %11702, %116
  %11704 = add nsw i64 %11703, %94
  %11705 = getelementptr inbounds i16, i16* %blur_x, i64 %11704
  %11706 = getelementptr inbounds i16, i16* %11705, i64 -32
  %11707 = bitcast i16* %11706 to <16 x i16>*
  %11708 = load <16 x i16>, <16 x i16>* %11707, align 2, !tbaa !399
  %11709 = getelementptr inbounds i16, i16* %11705, i64 -16
  %11710 = bitcast i16* %11709 to <16 x i16>*
  %11711 = load <16 x i16>, <16 x i16>* %11710, align 2, !tbaa !399
  %11712 = mul nsw i64 %11653, %116
  %11713 = add nsw i64 %11712, %94
  %11714 = getelementptr inbounds i16, i16* %blur_x, i64 %11713
  %11715 = getelementptr inbounds i16, i16* %11714, i64 -32
  %11716 = bitcast i16* %11715 to <16 x i16>*
  %11717 = load <16 x i16>, <16 x i16>* %11716, align 2, !tbaa !399
  %11718 = getelementptr inbounds i16, i16* %11714, i64 -16
  %11719 = bitcast i16* %11718 to <16 x i16>*
  %11720 = load <16 x i16>, <16 x i16>* %11719, align 2, !tbaa !399
  %11721 = zext i32 %.pre-phi3528 to i64
  %11722 = mul nsw i64 %11721, %116
  %11723 = add nsw i64 %11722, %94
  %11724 = getelementptr inbounds i16, i16* %blur_x, i64 %11723
  %11725 = getelementptr inbounds i16, i16* %11724, i64 -32
  %11726 = bitcast i16* %11725 to <16 x i16>*
  %11727 = load <16 x i16>, <16 x i16>* %11726, align 2, !tbaa !399
  %11728 = getelementptr inbounds i16, i16* %11724, i64 -16
  %11729 = bitcast i16* %11728 to <16 x i16>*
  %11730 = load <16 x i16>, <16 x i16>* %11729, align 2, !tbaa !399
  %11731 = add <16 x i16> %11678, %11668
  %11732 = add <16 x i16> %11731, %11688
  %11733 = add <16 x i16> %11732, %11698
  %11734 = add <16 x i16> %11733, %11708
  %11735 = add <16 x i16> %11734, %11717
  %11736 = add <16 x i16> %11735, %11727
  %11737 = add <16 x i16> %11681, %11671
  %11738 = add <16 x i16> %11737, %11691
  %11739 = add <16 x i16> %11738, %11701
  %11740 = add <16 x i16> %11739, %11711
  %11741 = add <16 x i16> %11740, %11720
  %11742 = add <16 x i16> %11741, %11730
  %11743 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11736, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11744 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11742, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11745 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11743, <16 x i16> %11736)
  %11746 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11744, <16 x i16> %11742)
  %11747 = shufflevector <16 x i16> %11745, <16 x i16> %11746, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11748 = lshr <32 x i16> %11747, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11749 = shufflevector <32 x i16> %11748, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11750 = sext i32 %a26 to i64
  %11751 = add nsw i64 %11750, 17
  %11752 = mul nsw i64 %11751, %117
  %11753 = add nsw i64 %119, %11752
  %11754 = getelementptr inbounds i16, i16* %66, i64 %11753
  %11755 = getelementptr inbounds i16, i16* %11754, i64 -32
  %11756 = bitcast i16* %11755 to <16 x i16>*
  store <16 x i16> %11749, <16 x i16>* %11756, align 2, !tbaa !401
  %11757 = shufflevector <32 x i16> %11748, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11758 = getelementptr inbounds i16, i16* %11754, i64 -16
  %11759 = bitcast i16* %11758 to <16 x i16>*
  store <16 x i16> %11757, <16 x i16>* %11759, align 2, !tbaa !401
  br label %after_bb503

"for blur_y.s0.x.x.rebased508":                   ; preds = %"for blur_y.s0.x.x.rebased508.preheader", %"consume blur_x515"
  %indvars.iv3330 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased508.preheader" ], [ %indvars.iv.next3331, %"consume blur_x515" ]
  %11760 = add nsw i64 %indvars.iv3330, %101
  %11761 = icmp slt i64 %11760, 1
  %11762 = trunc i64 %11760 to i32
  %11763 = shl nsw i32 %11762, 5
  %11764 = icmp sgt i32 %4, %11763
  %11765 = or i1 %11761, %11764
  br i1 %11765, label %"produce blur_x514", label %"for blur_y.s0.x.x.rebased508.consume blur_x515_crit_edge"

"for blur_y.s0.x.x.rebased508.consume blur_x515_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased508"
  %.pre3567 = shl nsw i64 %11760, 5
  br label %"consume blur_x515"

"end for blur_y.s0.x.x.rebased509":               ; preds = %"consume blur_x515", %after_bb503
  br i1 %102, label %"for blur_y.s0.x.x.rebased516.preheader", label %"end for blur_y.s0.x.x.rebased517", !prof !386

"for blur_y.s0.x.x.rebased516.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased509"
  %11766 = sext i32 %t1778 to i64
  %11767 = zext i32 %.pre-phi3512 to i64
  %11768 = mul nsw i64 %11767, %116
  %11769 = sub nsw i64 %11768, %96
  %11770 = zext i32 %.pre-phi3508 to i64
  %11771 = mul nsw i64 %11770, %116
  %11772 = sub nsw i64 %11771, %96
  %11773 = zext i32 %.pre-phi3516 to i64
  %11774 = mul nsw i64 %11773, %116
  %11775 = sub nsw i64 %11774, %96
  %11776 = zext i32 %.pre-phi3520 to i64
  %11777 = mul nsw i64 %11776, %116
  %11778 = sub nsw i64 %11777, %96
  %11779 = zext i32 %.pre-phi3524 to i64
  %11780 = mul nsw i64 %11779, %116
  %11781 = sub nsw i64 %11780, %96
  %11782 = zext i32 %.pre-phi3534 to i64
  %11783 = mul nsw i64 %11782, %116
  %11784 = sub nsw i64 %11783, %96
  %11785 = zext i32 %.pre-phi3528 to i64
  %11786 = mul nsw i64 %11785, %116
  %11787 = sub nsw i64 %11786, %96
  %11788 = sext i32 %a26 to i64
  %11789 = add nsw i64 %11788, 17
  %11790 = mul nsw i64 %11789, %117
  %11791 = add nsw i64 %11790, %120
  br label %"for blur_y.s0.x.x.rebased516"

"produce blur_x514":                              ; preds = %"for blur_y.s0.x.x.rebased508"
  %t1024 = add nsw i32 %11763, %t2033
  %11792 = sext i32 %t1024 to i64
  %11793 = getelementptr inbounds i16, i16* %read_input, i64 %11792
  %11794 = getelementptr inbounds i16, i16* %11793, i64 1
  %11795 = bitcast i16* %11794 to <16 x i16>*
  %11796 = load <16 x i16>, <16 x i16>* %11795, align 2, !tbaa !396
  %11797 = getelementptr inbounds i16, i16* %11793, i64 17
  %11798 = bitcast i16* %11797 to <16 x i16>*
  %11799 = load <16 x i16>, <16 x i16>* %11798, align 2, !tbaa !396
  %11800 = bitcast i16* %11793 to <16 x i16>*
  %11801 = load <16 x i16>, <16 x i16>* %11800, align 2, !tbaa !396
  %11802 = getelementptr inbounds i16, i16* %11793, i64 16
  %11803 = bitcast i16* %11802 to <16 x i16>*
  %11804 = load <16 x i16>, <16 x i16>* %11803, align 2, !tbaa !396
  %11805 = getelementptr inbounds i16, i16* %11793, i64 2
  %11806 = bitcast i16* %11805 to <16 x i16>*
  %11807 = load <16 x i16>, <16 x i16>* %11806, align 2, !tbaa !396
  %11808 = getelementptr inbounds i16, i16* %11793, i64 18
  %11809 = bitcast i16* %11808 to <16 x i16>*
  %11810 = load <16 x i16>, <16 x i16>* %11809, align 2, !tbaa !396
  %11811 = getelementptr inbounds i16, i16* %11793, i64 3
  %11812 = bitcast i16* %11811 to <16 x i16>*
  %11813 = load <16 x i16>, <16 x i16>* %11812, align 2, !tbaa !396
  %11814 = getelementptr inbounds i16, i16* %11793, i64 19
  %11815 = bitcast i16* %11814 to <16 x i16>*
  %11816 = load <16 x i16>, <16 x i16>* %11815, align 2, !tbaa !396
  %11817 = getelementptr inbounds i16, i16* %11793, i64 4
  %11818 = bitcast i16* %11817 to <16 x i16>*
  %11819 = load <16 x i16>, <16 x i16>* %11818, align 2, !tbaa !396
  %11820 = getelementptr inbounds i16, i16* %11793, i64 20
  %11821 = bitcast i16* %11820 to <16 x i16>*
  %11822 = load <16 x i16>, <16 x i16>* %11821, align 2, !tbaa !396
  %11823 = getelementptr inbounds i16, i16* %11793, i64 6
  %11824 = bitcast i16* %11823 to <16 x i16>*
  %11825 = load <16 x i16>, <16 x i16>* %11824, align 2, !tbaa !396
  %11826 = getelementptr inbounds i16, i16* %11793, i64 22
  %11827 = bitcast i16* %11826 to <16 x i16>*
  %11828 = load <16 x i16>, <16 x i16>* %11827, align 2, !tbaa !396
  %11829 = getelementptr inbounds i16, i16* %11793, i64 5
  %11830 = bitcast i16* %11829 to <16 x i16>*
  %11831 = load <16 x i16>, <16 x i16>* %11830, align 2, !tbaa !396
  %11832 = getelementptr inbounds i16, i16* %11793, i64 21
  %11833 = bitcast i16* %11832 to <16 x i16>*
  %11834 = load <16 x i16>, <16 x i16>* %11833, align 2, !tbaa !396
  %11835 = add <16 x i16> %11801, %11796
  %11836 = add <16 x i16> %11835, %11807
  %11837 = add <16 x i16> %11836, %11813
  %11838 = add <16 x i16> %11837, %11819
  %11839 = add <16 x i16> %11838, %11825
  %11840 = add <16 x i16> %11839, %11831
  %11841 = add <16 x i16> %11804, %11799
  %11842 = add <16 x i16> %11841, %11810
  %11843 = add <16 x i16> %11842, %11816
  %11844 = add <16 x i16> %11843, %11822
  %11845 = add <16 x i16> %11844, %11828
  %11846 = add <16 x i16> %11845, %11834
  %11847 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11840, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11848 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11846, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11849 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11847, <16 x i16> %11840)
  %11850 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11848, <16 x i16> %11846)
  %11851 = shufflevector <16 x i16> %11849, <16 x i16> %11850, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11852 = lshr <32 x i16> %11851, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11853 = shufflevector <32 x i16> %11852, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11854 = shl nsw i64 %11760, 5
  %11855 = add nsw i64 %11854, %11565
  %11856 = getelementptr inbounds i16, i16* %blur_x, i64 %11855
  %11857 = bitcast i16* %11856 to <16 x i16>*
  store <16 x i16> %11853, <16 x i16>* %11857, align 2, !tbaa !399
  %11858 = shufflevector <32 x i16> %11852, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11859 = getelementptr inbounds i16, i16* %11856, i64 16
  %11860 = bitcast i16* %11859 to <16 x i16>*
  store <16 x i16> %11858, <16 x i16>* %11860, align 2, !tbaa !399
  br label %"consume blur_x515"

"consume blur_x515":                              ; preds = %"for blur_y.s0.x.x.rebased508.consume blur_x515_crit_edge", %"produce blur_x514"
  %.pre-phi3568 = phi i64 [ %.pre3567, %"for blur_y.s0.x.x.rebased508.consume blur_x515_crit_edge" ], [ %11854, %"produce blur_x514" ]
  %11861 = add nsw i64 %11568, %.pre-phi3568
  %11862 = getelementptr inbounds i16, i16* %blur_x, i64 %11861
  %11863 = bitcast i16* %11862 to <16 x i16>*
  %11864 = load <16 x i16>, <16 x i16>* %11863, align 2, !tbaa !399
  %11865 = getelementptr inbounds i16, i16* %11862, i64 16
  %11866 = bitcast i16* %11865 to <16 x i16>*
  %11867 = load <16 x i16>, <16 x i16>* %11866, align 2, !tbaa !399
  %11868 = add nsw i64 %11571, %.pre-phi3568
  %11869 = getelementptr inbounds i16, i16* %blur_x, i64 %11868
  %11870 = bitcast i16* %11869 to <16 x i16>*
  %11871 = load <16 x i16>, <16 x i16>* %11870, align 2, !tbaa !399
  %11872 = getelementptr inbounds i16, i16* %11869, i64 16
  %11873 = bitcast i16* %11872 to <16 x i16>*
  %11874 = load <16 x i16>, <16 x i16>* %11873, align 2, !tbaa !399
  %11875 = add nsw i64 %11574, %.pre-phi3568
  %11876 = getelementptr inbounds i16, i16* %blur_x, i64 %11875
  %11877 = bitcast i16* %11876 to <16 x i16>*
  %11878 = load <16 x i16>, <16 x i16>* %11877, align 2, !tbaa !399
  %11879 = getelementptr inbounds i16, i16* %11876, i64 16
  %11880 = bitcast i16* %11879 to <16 x i16>*
  %11881 = load <16 x i16>, <16 x i16>* %11880, align 2, !tbaa !399
  %11882 = add nsw i64 %11577, %.pre-phi3568
  %11883 = getelementptr inbounds i16, i16* %blur_x, i64 %11882
  %11884 = bitcast i16* %11883 to <16 x i16>*
  %11885 = load <16 x i16>, <16 x i16>* %11884, align 2, !tbaa !399
  %11886 = getelementptr inbounds i16, i16* %11883, i64 16
  %11887 = bitcast i16* %11886 to <16 x i16>*
  %11888 = load <16 x i16>, <16 x i16>* %11887, align 2, !tbaa !399
  %11889 = add nsw i64 %11580, %.pre-phi3568
  %11890 = getelementptr inbounds i16, i16* %blur_x, i64 %11889
  %11891 = bitcast i16* %11890 to <16 x i16>*
  %11892 = load <16 x i16>, <16 x i16>* %11891, align 2, !tbaa !399
  %11893 = getelementptr inbounds i16, i16* %11890, i64 16
  %11894 = bitcast i16* %11893 to <16 x i16>*
  %11895 = load <16 x i16>, <16 x i16>* %11894, align 2, !tbaa !399
  %11896 = add nsw i64 %11583, %.pre-phi3568
  %11897 = getelementptr inbounds i16, i16* %blur_x, i64 %11896
  %11898 = bitcast i16* %11897 to <16 x i16>*
  %11899 = load <16 x i16>, <16 x i16>* %11898, align 2, !tbaa !399
  %11900 = getelementptr inbounds i16, i16* %11897, i64 16
  %11901 = bitcast i16* %11900 to <16 x i16>*
  %11902 = load <16 x i16>, <16 x i16>* %11901, align 2, !tbaa !399
  %11903 = add nsw i64 %11586, %.pre-phi3568
  %11904 = getelementptr inbounds i16, i16* %blur_x, i64 %11903
  %11905 = bitcast i16* %11904 to <16 x i16>*
  %11906 = load <16 x i16>, <16 x i16>* %11905, align 2, !tbaa !399
  %11907 = getelementptr inbounds i16, i16* %11904, i64 16
  %11908 = bitcast i16* %11907 to <16 x i16>*
  %11909 = load <16 x i16>, <16 x i16>* %11908, align 2, !tbaa !399
  %11910 = add <16 x i16> %11871, %11864
  %11911 = add <16 x i16> %11910, %11878
  %11912 = add <16 x i16> %11911, %11885
  %11913 = add <16 x i16> %11912, %11892
  %11914 = add <16 x i16> %11913, %11899
  %11915 = add <16 x i16> %11914, %11906
  %11916 = add <16 x i16> %11874, %11867
  %11917 = add <16 x i16> %11916, %11881
  %11918 = add <16 x i16> %11917, %11888
  %11919 = add <16 x i16> %11918, %11895
  %11920 = add <16 x i16> %11919, %11902
  %11921 = add <16 x i16> %11920, %11909
  %11922 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11915, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11923 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11921, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11924 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11922, <16 x i16> %11915)
  %11925 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11923, <16 x i16> %11921)
  %11926 = shufflevector <16 x i16> %11924, <16 x i16> %11925, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11927 = lshr <32 x i16> %11926, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11928 = shufflevector <32 x i16> %11927, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11929 = add nsw i64 %11590, %.pre-phi3568
  %11930 = getelementptr inbounds i16, i16* %66, i64 %11929
  %11931 = bitcast i16* %11930 to <16 x i16>*
  store <16 x i16> %11928, <16 x i16>* %11931, align 2, !tbaa !401
  %11932 = shufflevector <32 x i16> %11927, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11933 = getelementptr inbounds i16, i16* %11930, i64 16
  %11934 = bitcast i16* %11933 to <16 x i16>*
  store <16 x i16> %11932, <16 x i16>* %11934, align 2, !tbaa !401
  %indvars.iv.next3331 = add nuw nsw i64 %indvars.iv3330, 1
  %.not2766 = icmp eq i64 %indvars.iv.next3331, %188
  br i1 %.not2766, label %"end for blur_y.s0.x.x.rebased509", label %"for blur_y.s0.x.x.rebased508"

"for blur_y.s0.x.x.rebased516":                   ; preds = %"for blur_y.s0.x.x.rebased516.preheader", %"consume blur_x524"
  %blur_y.s0.x.x.rebased518 = phi i32 [ %12085, %"consume blur_x524" ], [ 0, %"for blur_y.s0.x.x.rebased516.preheader" ]
  %11935 = add nsw i32 %blur_y.s0.x.x.rebased518, %t1670
  %a238 = shl nsw i32 %11935, 5
  %11936 = icmp sgt i32 %a14, %a238
  %b244 = select i1 %11936, i32 %a238, i32 %a14
  %11937 = icmp slt i32 %11935, 1
  %11938 = icmp sgt i32 %4, %a238
  %11939 = or i1 %11937, %11938
  br i1 %11939, label %"produce blur_x522", label %"consume blur_x524"

"end for blur_y.s0.x.x.rebased517":               ; preds = %"consume blur_x524", %"end for blur_y.s0.x.x.rebased509"
  br i1 %34, label %"produce blur_x528", label %after_bb525

"produce blur_x522":                              ; preds = %"for blur_y.s0.x.x.rebased516"
  %11940 = icmp slt i32 %b244, %4
  %blur_x.s0.x.v1.base.s523 = select i1 %11940, i32 %b244, i32 %4
  %t1029 = add nsw i32 %blur_x.s0.x.v1.base.s523, %t2033
  %11941 = sext i32 %t1029 to i64
  %11942 = getelementptr inbounds i16, i16* %read_input, i64 %11941
  %11943 = getelementptr inbounds i16, i16* %11942, i64 1
  %11944 = bitcast i16* %11943 to <16 x i16>*
  %11945 = load <16 x i16>, <16 x i16>* %11944, align 2, !tbaa !396
  %11946 = getelementptr inbounds i16, i16* %11942, i64 17
  %11947 = bitcast i16* %11946 to <16 x i16>*
  %11948 = load <16 x i16>, <16 x i16>* %11947, align 2, !tbaa !396
  %11949 = bitcast i16* %11942 to <16 x i16>*
  %11950 = load <16 x i16>, <16 x i16>* %11949, align 2, !tbaa !396
  %11951 = getelementptr inbounds i16, i16* %11942, i64 16
  %11952 = bitcast i16* %11951 to <16 x i16>*
  %11953 = load <16 x i16>, <16 x i16>* %11952, align 2, !tbaa !396
  %11954 = getelementptr inbounds i16, i16* %11942, i64 2
  %11955 = bitcast i16* %11954 to <16 x i16>*
  %11956 = load <16 x i16>, <16 x i16>* %11955, align 2, !tbaa !396
  %11957 = getelementptr inbounds i16, i16* %11942, i64 18
  %11958 = bitcast i16* %11957 to <16 x i16>*
  %11959 = load <16 x i16>, <16 x i16>* %11958, align 2, !tbaa !396
  %11960 = getelementptr inbounds i16, i16* %11942, i64 3
  %11961 = bitcast i16* %11960 to <16 x i16>*
  %11962 = load <16 x i16>, <16 x i16>* %11961, align 2, !tbaa !396
  %11963 = getelementptr inbounds i16, i16* %11942, i64 19
  %11964 = bitcast i16* %11963 to <16 x i16>*
  %11965 = load <16 x i16>, <16 x i16>* %11964, align 2, !tbaa !396
  %11966 = getelementptr inbounds i16, i16* %11942, i64 4
  %11967 = bitcast i16* %11966 to <16 x i16>*
  %11968 = load <16 x i16>, <16 x i16>* %11967, align 2, !tbaa !396
  %11969 = getelementptr inbounds i16, i16* %11942, i64 20
  %11970 = bitcast i16* %11969 to <16 x i16>*
  %11971 = load <16 x i16>, <16 x i16>* %11970, align 2, !tbaa !396
  %11972 = getelementptr inbounds i16, i16* %11942, i64 6
  %11973 = bitcast i16* %11972 to <16 x i16>*
  %11974 = load <16 x i16>, <16 x i16>* %11973, align 2, !tbaa !396
  %11975 = getelementptr inbounds i16, i16* %11942, i64 22
  %11976 = bitcast i16* %11975 to <16 x i16>*
  %11977 = load <16 x i16>, <16 x i16>* %11976, align 2, !tbaa !396
  %11978 = getelementptr inbounds i16, i16* %11942, i64 5
  %11979 = bitcast i16* %11978 to <16 x i16>*
  %11980 = load <16 x i16>, <16 x i16>* %11979, align 2, !tbaa !396
  %11981 = getelementptr inbounds i16, i16* %11942, i64 21
  %11982 = bitcast i16* %11981 to <16 x i16>*
  %11983 = load <16 x i16>, <16 x i16>* %11982, align 2, !tbaa !396
  %11984 = add <16 x i16> %11950, %11945
  %11985 = add <16 x i16> %11984, %11956
  %11986 = add <16 x i16> %11985, %11962
  %11987 = add <16 x i16> %11986, %11968
  %11988 = add <16 x i16> %11987, %11974
  %11989 = add <16 x i16> %11988, %11980
  %11990 = add <16 x i16> %11953, %11948
  %11991 = add <16 x i16> %11990, %11959
  %11992 = add <16 x i16> %11991, %11965
  %11993 = add <16 x i16> %11992, %11971
  %11994 = add <16 x i16> %11993, %11977
  %11995 = add <16 x i16> %11994, %11983
  %11996 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11989, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11997 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11995, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %11998 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11996, <16 x i16> %11989)
  %11999 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %11997, <16 x i16> %11995)
  %12000 = shufflevector <16 x i16> %11998, <16 x i16> %11999, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12001 = lshr <32 x i16> %12000, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12002 = shufflevector <32 x i16> %12001, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12003 = sext i32 %blur_x.s0.x.v1.base.s523 to i64
  %12004 = add nsw i64 %12003, %11766
  %12005 = getelementptr inbounds i16, i16* %blur_x, i64 %12004
  %12006 = bitcast i16* %12005 to <16 x i16>*
  store <16 x i16> %12002, <16 x i16>* %12006, align 2, !tbaa !399
  %12007 = shufflevector <32 x i16> %12001, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12008 = getelementptr inbounds i16, i16* %12005, i64 16
  %12009 = bitcast i16* %12008 to <16 x i16>*
  store <16 x i16> %12007, <16 x i16>* %12009, align 2, !tbaa !399
  br label %"consume blur_x524"

"consume blur_x524":                              ; preds = %"for blur_y.s0.x.x.rebased516", %"produce blur_x522"
  %12010 = sext i32 %b244 to i64
  %12011 = add nsw i64 %11769, %12010
  %12012 = getelementptr inbounds i16, i16* %blur_x, i64 %12011
  %12013 = bitcast i16* %12012 to <16 x i16>*
  %12014 = load <16 x i16>, <16 x i16>* %12013, align 2, !tbaa !399
  %12015 = getelementptr inbounds i16, i16* %12012, i64 16
  %12016 = bitcast i16* %12015 to <16 x i16>*
  %12017 = load <16 x i16>, <16 x i16>* %12016, align 2, !tbaa !399
  %12018 = add nsw i64 %11772, %12010
  %12019 = getelementptr inbounds i16, i16* %blur_x, i64 %12018
  %12020 = bitcast i16* %12019 to <16 x i16>*
  %12021 = load <16 x i16>, <16 x i16>* %12020, align 2, !tbaa !399
  %12022 = getelementptr inbounds i16, i16* %12019, i64 16
  %12023 = bitcast i16* %12022 to <16 x i16>*
  %12024 = load <16 x i16>, <16 x i16>* %12023, align 2, !tbaa !399
  %12025 = add nsw i64 %11775, %12010
  %12026 = getelementptr inbounds i16, i16* %blur_x, i64 %12025
  %12027 = bitcast i16* %12026 to <16 x i16>*
  %12028 = load <16 x i16>, <16 x i16>* %12027, align 2, !tbaa !399
  %12029 = getelementptr inbounds i16, i16* %12026, i64 16
  %12030 = bitcast i16* %12029 to <16 x i16>*
  %12031 = load <16 x i16>, <16 x i16>* %12030, align 2, !tbaa !399
  %12032 = add nsw i64 %11778, %12010
  %12033 = getelementptr inbounds i16, i16* %blur_x, i64 %12032
  %12034 = bitcast i16* %12033 to <16 x i16>*
  %12035 = load <16 x i16>, <16 x i16>* %12034, align 2, !tbaa !399
  %12036 = getelementptr inbounds i16, i16* %12033, i64 16
  %12037 = bitcast i16* %12036 to <16 x i16>*
  %12038 = load <16 x i16>, <16 x i16>* %12037, align 2, !tbaa !399
  %12039 = add nsw i64 %11781, %12010
  %12040 = getelementptr inbounds i16, i16* %blur_x, i64 %12039
  %12041 = bitcast i16* %12040 to <16 x i16>*
  %12042 = load <16 x i16>, <16 x i16>* %12041, align 2, !tbaa !399
  %12043 = getelementptr inbounds i16, i16* %12040, i64 16
  %12044 = bitcast i16* %12043 to <16 x i16>*
  %12045 = load <16 x i16>, <16 x i16>* %12044, align 2, !tbaa !399
  %12046 = add nsw i64 %11784, %12010
  %12047 = getelementptr inbounds i16, i16* %blur_x, i64 %12046
  %12048 = bitcast i16* %12047 to <16 x i16>*
  %12049 = load <16 x i16>, <16 x i16>* %12048, align 2, !tbaa !399
  %12050 = getelementptr inbounds i16, i16* %12047, i64 16
  %12051 = bitcast i16* %12050 to <16 x i16>*
  %12052 = load <16 x i16>, <16 x i16>* %12051, align 2, !tbaa !399
  %12053 = add nsw i64 %11787, %12010
  %12054 = getelementptr inbounds i16, i16* %blur_x, i64 %12053
  %12055 = bitcast i16* %12054 to <16 x i16>*
  %12056 = load <16 x i16>, <16 x i16>* %12055, align 2, !tbaa !399
  %12057 = getelementptr inbounds i16, i16* %12054, i64 16
  %12058 = bitcast i16* %12057 to <16 x i16>*
  %12059 = load <16 x i16>, <16 x i16>* %12058, align 2, !tbaa !399
  %12060 = add <16 x i16> %12021, %12014
  %12061 = add <16 x i16> %12060, %12028
  %12062 = add <16 x i16> %12061, %12035
  %12063 = add <16 x i16> %12062, %12042
  %12064 = add <16 x i16> %12063, %12049
  %12065 = add <16 x i16> %12064, %12056
  %12066 = add <16 x i16> %12024, %12017
  %12067 = add <16 x i16> %12066, %12031
  %12068 = add <16 x i16> %12067, %12038
  %12069 = add <16 x i16> %12068, %12045
  %12070 = add <16 x i16> %12069, %12052
  %12071 = add <16 x i16> %12070, %12059
  %12072 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12065, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12073 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12071, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12074 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12072, <16 x i16> %12065)
  %12075 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12073, <16 x i16> %12071)
  %12076 = shufflevector <16 x i16> %12074, <16 x i16> %12075, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12077 = lshr <32 x i16> %12076, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12078 = shufflevector <32 x i16> %12077, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12079 = add nsw i64 %11791, %12010
  %12080 = getelementptr inbounds i16, i16* %66, i64 %12079
  %12081 = bitcast i16* %12080 to <16 x i16>*
  store <16 x i16> %12078, <16 x i16>* %12081, align 2, !tbaa !401
  %12082 = shufflevector <32 x i16> %12077, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12083 = getelementptr inbounds i16, i16* %12080, i64 16
  %12084 = bitcast i16* %12083 to <16 x i16>*
  store <16 x i16> %12082, <16 x i16>* %12084, align 2, !tbaa !401
  %12085 = add nuw nsw i32 %blur_y.s0.x.x.rebased518, 1
  %.not2765 = icmp eq i32 %12085, %t1727
  br i1 %.not2765, label %"end for blur_y.s0.x.x.rebased517", label %"for blur_y.s0.x.x.rebased516"

after_bb525:                                      ; preds = %"end for blur_y.s0.x.x.rebased517", %"produce blur_x528"
  br i1 %100, label %"for blur_y.s0.x.x.rebased530.preheader", label %"end for blur_y.s0.x.x.rebased531", !prof !386

"for blur_y.s0.x.x.rebased530.preheader":         ; preds = %after_bb525
  %12086 = sext i32 %t1726 to i64
  %12087 = zext i32 %.pre-phi3516 to i64
  %12088 = mul nsw i64 %12087, %116
  %12089 = sub nsw i64 %12088, %96
  %12090 = zext i32 %.pre-phi3512 to i64
  %12091 = mul nsw i64 %12090, %116
  %12092 = sub nsw i64 %12091, %96
  %12093 = zext i32 %.pre-phi3520 to i64
  %12094 = mul nsw i64 %12093, %116
  %12095 = sub nsw i64 %12094, %96
  %12096 = zext i32 %.pre-phi3524 to i64
  %12097 = mul nsw i64 %12096, %116
  %12098 = sub nsw i64 %12097, %96
  %12099 = zext i32 %.pre-phi3528 to i64
  %12100 = mul nsw i64 %12099, %116
  %12101 = sub nsw i64 %12100, %96
  %12102 = zext i32 %.pre-phi to i64
  %12103 = mul nsw i64 %12102, %116
  %12104 = sub nsw i64 %12103, %96
  %12105 = zext i32 %.pre-phi3534 to i64
  %12106 = mul nsw i64 %12105, %116
  %12107 = sub nsw i64 %12106, %96
  %12108 = sext i32 %a26 to i64
  %12109 = add nsw i64 %12108, 18
  %12110 = mul nsw i64 %12109, %117
  %12111 = add nsw i64 %12110, %120
  br label %"for blur_y.s0.x.x.rebased530"

"produce blur_x528":                              ; preds = %"end for blur_y.s0.x.x.rebased517"
  %12112 = getelementptr inbounds i16, i16* %read_input, i64 %155
  %12113 = getelementptr inbounds i16, i16* %12112, i64 -31
  %12114 = bitcast i16* %12113 to <16 x i16>*
  %12115 = load <16 x i16>, <16 x i16>* %12114, align 2, !tbaa !396
  %12116 = getelementptr inbounds i16, i16* %12112, i64 -15
  %12117 = bitcast i16* %12116 to <16 x i16>*
  %12118 = load <16 x i16>, <16 x i16>* %12117, align 2, !tbaa !396
  %12119 = getelementptr inbounds i16, i16* %12112, i64 -32
  %12120 = bitcast i16* %12119 to <16 x i16>*
  %12121 = load <16 x i16>, <16 x i16>* %12120, align 2, !tbaa !396
  %12122 = getelementptr inbounds i16, i16* %12112, i64 -16
  %12123 = bitcast i16* %12122 to <16 x i16>*
  %12124 = load <16 x i16>, <16 x i16>* %12123, align 2, !tbaa !396
  %12125 = getelementptr inbounds i16, i16* %12112, i64 -30
  %12126 = bitcast i16* %12125 to <16 x i16>*
  %12127 = load <16 x i16>, <16 x i16>* %12126, align 2, !tbaa !396
  %12128 = getelementptr inbounds i16, i16* %12112, i64 -14
  %12129 = bitcast i16* %12128 to <16 x i16>*
  %12130 = load <16 x i16>, <16 x i16>* %12129, align 2, !tbaa !396
  %12131 = getelementptr inbounds i16, i16* %12112, i64 -29
  %12132 = bitcast i16* %12131 to <16 x i16>*
  %12133 = load <16 x i16>, <16 x i16>* %12132, align 2, !tbaa !396
  %12134 = getelementptr inbounds i16, i16* %12112, i64 -13
  %12135 = bitcast i16* %12134 to <16 x i16>*
  %12136 = load <16 x i16>, <16 x i16>* %12135, align 2, !tbaa !396
  %12137 = getelementptr inbounds i16, i16* %12112, i64 -28
  %12138 = bitcast i16* %12137 to <16 x i16>*
  %12139 = load <16 x i16>, <16 x i16>* %12138, align 2, !tbaa !396
  %12140 = getelementptr inbounds i16, i16* %12112, i64 -12
  %12141 = bitcast i16* %12140 to <16 x i16>*
  %12142 = load <16 x i16>, <16 x i16>* %12141, align 2, !tbaa !396
  %12143 = getelementptr inbounds i16, i16* %12112, i64 -26
  %12144 = bitcast i16* %12143 to <16 x i16>*
  %12145 = load <16 x i16>, <16 x i16>* %12144, align 2, !tbaa !396
  %12146 = getelementptr inbounds i16, i16* %12112, i64 -10
  %12147 = bitcast i16* %12146 to <16 x i16>*
  %12148 = load <16 x i16>, <16 x i16>* %12147, align 2, !tbaa !396
  %12149 = getelementptr inbounds i16, i16* %12112, i64 -27
  %12150 = bitcast i16* %12149 to <16 x i16>*
  %12151 = load <16 x i16>, <16 x i16>* %12150, align 2, !tbaa !396
  %12152 = getelementptr inbounds i16, i16* %12112, i64 -11
  %12153 = bitcast i16* %12152 to <16 x i16>*
  %12154 = load <16 x i16>, <16 x i16>* %12153, align 2, !tbaa !396
  %12155 = add <16 x i16> %12121, %12115
  %12156 = add <16 x i16> %12155, %12127
  %12157 = add <16 x i16> %12156, %12133
  %12158 = add <16 x i16> %12157, %12139
  %12159 = add <16 x i16> %12158, %12145
  %12160 = add <16 x i16> %12159, %12151
  %12161 = add <16 x i16> %12124, %12118
  %12162 = add <16 x i16> %12161, %12130
  %12163 = add <16 x i16> %12162, %12136
  %12164 = add <16 x i16> %12163, %12142
  %12165 = add <16 x i16> %12164, %12148
  %12166 = add <16 x i16> %12165, %12154
  %12167 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12160, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12168 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12166, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12169 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12167, <16 x i16> %12160)
  %12170 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12168, <16 x i16> %12166)
  %12171 = shufflevector <16 x i16> %12169, <16 x i16> %12170, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12172 = lshr <32 x i16> %12171, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12173 = shufflevector <32 x i16> %12172, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12174 = zext i32 %.pre-phi to i64
  %12175 = mul nsw i64 %97, %12174
  %12176 = add nsw i64 %99, %12175
  %12177 = getelementptr inbounds i16, i16* %blur_x, i64 %12176
  %12178 = getelementptr inbounds i16, i16* %12177, i64 -32
  %12179 = bitcast i16* %12178 to <16 x i16>*
  store <16 x i16> %12173, <16 x i16>* %12179, align 2, !tbaa !399
  %12180 = shufflevector <32 x i16> %12172, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12181 = getelementptr inbounds i16, i16* %12177, i64 -16
  %12182 = bitcast i16* %12181 to <16 x i16>*
  store <16 x i16> %12180, <16 x i16>* %12182, align 2, !tbaa !399
  %12183 = zext i32 %.pre-phi3516 to i64
  %12184 = mul nsw i64 %12183, %116
  %12185 = add nsw i64 %12184, %94
  %12186 = getelementptr inbounds i16, i16* %blur_x, i64 %12185
  %12187 = getelementptr inbounds i16, i16* %12186, i64 -32
  %12188 = bitcast i16* %12187 to <16 x i16>*
  %12189 = load <16 x i16>, <16 x i16>* %12188, align 2, !tbaa !399
  %12190 = getelementptr inbounds i16, i16* %12186, i64 -16
  %12191 = bitcast i16* %12190 to <16 x i16>*
  %12192 = load <16 x i16>, <16 x i16>* %12191, align 2, !tbaa !399
  %12193 = zext i32 %.pre-phi3512 to i64
  %12194 = mul nsw i64 %12193, %116
  %12195 = add nsw i64 %12194, %94
  %12196 = getelementptr inbounds i16, i16* %blur_x, i64 %12195
  %12197 = getelementptr inbounds i16, i16* %12196, i64 -32
  %12198 = bitcast i16* %12197 to <16 x i16>*
  %12199 = load <16 x i16>, <16 x i16>* %12198, align 2, !tbaa !399
  %12200 = getelementptr inbounds i16, i16* %12196, i64 -16
  %12201 = bitcast i16* %12200 to <16 x i16>*
  %12202 = load <16 x i16>, <16 x i16>* %12201, align 2, !tbaa !399
  %12203 = zext i32 %.pre-phi3520 to i64
  %12204 = mul nsw i64 %12203, %116
  %12205 = add nsw i64 %12204, %94
  %12206 = getelementptr inbounds i16, i16* %blur_x, i64 %12205
  %12207 = getelementptr inbounds i16, i16* %12206, i64 -32
  %12208 = bitcast i16* %12207 to <16 x i16>*
  %12209 = load <16 x i16>, <16 x i16>* %12208, align 2, !tbaa !399
  %12210 = getelementptr inbounds i16, i16* %12206, i64 -16
  %12211 = bitcast i16* %12210 to <16 x i16>*
  %12212 = load <16 x i16>, <16 x i16>* %12211, align 2, !tbaa !399
  %12213 = zext i32 %.pre-phi3524 to i64
  %12214 = mul nsw i64 %12213, %116
  %12215 = add nsw i64 %12214, %94
  %12216 = getelementptr inbounds i16, i16* %blur_x, i64 %12215
  %12217 = getelementptr inbounds i16, i16* %12216, i64 -32
  %12218 = bitcast i16* %12217 to <16 x i16>*
  %12219 = load <16 x i16>, <16 x i16>* %12218, align 2, !tbaa !399
  %12220 = getelementptr inbounds i16, i16* %12216, i64 -16
  %12221 = bitcast i16* %12220 to <16 x i16>*
  %12222 = load <16 x i16>, <16 x i16>* %12221, align 2, !tbaa !399
  %12223 = zext i32 %.pre-phi3528 to i64
  %12224 = mul nsw i64 %12223, %116
  %12225 = add nsw i64 %12224, %94
  %12226 = getelementptr inbounds i16, i16* %blur_x, i64 %12225
  %12227 = getelementptr inbounds i16, i16* %12226, i64 -32
  %12228 = bitcast i16* %12227 to <16 x i16>*
  %12229 = load <16 x i16>, <16 x i16>* %12228, align 2, !tbaa !399
  %12230 = getelementptr inbounds i16, i16* %12226, i64 -16
  %12231 = bitcast i16* %12230 to <16 x i16>*
  %12232 = load <16 x i16>, <16 x i16>* %12231, align 2, !tbaa !399
  %12233 = mul nsw i64 %12174, %116
  %12234 = add nsw i64 %12233, %94
  %12235 = getelementptr inbounds i16, i16* %blur_x, i64 %12234
  %12236 = getelementptr inbounds i16, i16* %12235, i64 -32
  %12237 = bitcast i16* %12236 to <16 x i16>*
  %12238 = load <16 x i16>, <16 x i16>* %12237, align 2, !tbaa !399
  %12239 = getelementptr inbounds i16, i16* %12235, i64 -16
  %12240 = bitcast i16* %12239 to <16 x i16>*
  %12241 = load <16 x i16>, <16 x i16>* %12240, align 2, !tbaa !399
  %12242 = zext i32 %.pre-phi3534 to i64
  %12243 = mul nsw i64 %12242, %116
  %12244 = add nsw i64 %12243, %94
  %12245 = getelementptr inbounds i16, i16* %blur_x, i64 %12244
  %12246 = getelementptr inbounds i16, i16* %12245, i64 -32
  %12247 = bitcast i16* %12246 to <16 x i16>*
  %12248 = load <16 x i16>, <16 x i16>* %12247, align 2, !tbaa !399
  %12249 = getelementptr inbounds i16, i16* %12245, i64 -16
  %12250 = bitcast i16* %12249 to <16 x i16>*
  %12251 = load <16 x i16>, <16 x i16>* %12250, align 2, !tbaa !399
  %12252 = add <16 x i16> %12199, %12189
  %12253 = add <16 x i16> %12252, %12209
  %12254 = add <16 x i16> %12253, %12219
  %12255 = add <16 x i16> %12254, %12229
  %12256 = add <16 x i16> %12255, %12238
  %12257 = add <16 x i16> %12256, %12248
  %12258 = add <16 x i16> %12202, %12192
  %12259 = add <16 x i16> %12258, %12212
  %12260 = add <16 x i16> %12259, %12222
  %12261 = add <16 x i16> %12260, %12232
  %12262 = add <16 x i16> %12261, %12241
  %12263 = add <16 x i16> %12262, %12251
  %12264 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12257, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12265 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12263, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12266 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12264, <16 x i16> %12257)
  %12267 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12265, <16 x i16> %12263)
  %12268 = shufflevector <16 x i16> %12266, <16 x i16> %12267, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12269 = lshr <32 x i16> %12268, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12270 = shufflevector <32 x i16> %12269, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12271 = sext i32 %a26 to i64
  %12272 = add nsw i64 %12271, 18
  %12273 = mul nsw i64 %12272, %117
  %12274 = add nsw i64 %119, %12273
  %12275 = getelementptr inbounds i16, i16* %66, i64 %12274
  %12276 = getelementptr inbounds i16, i16* %12275, i64 -32
  %12277 = bitcast i16* %12276 to <16 x i16>*
  store <16 x i16> %12270, <16 x i16>* %12277, align 2, !tbaa !401
  %12278 = shufflevector <32 x i16> %12269, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12279 = getelementptr inbounds i16, i16* %12275, i64 -16
  %12280 = bitcast i16* %12279 to <16 x i16>*
  store <16 x i16> %12278, <16 x i16>* %12280, align 2, !tbaa !401
  br label %after_bb525

"for blur_y.s0.x.x.rebased530":                   ; preds = %"for blur_y.s0.x.x.rebased530.preheader", %"consume blur_x537"
  %indvars.iv3333 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased530.preheader" ], [ %indvars.iv.next3334, %"consume blur_x537" ]
  %12281 = add nsw i64 %indvars.iv3333, %101
  %12282 = icmp slt i64 %12281, 1
  %12283 = trunc i64 %12281 to i32
  %12284 = shl nsw i32 %12283, 5
  %12285 = icmp sgt i32 %4, %12284
  %12286 = or i1 %12282, %12285
  br i1 %12286, label %"produce blur_x536", label %"for blur_y.s0.x.x.rebased530.consume blur_x537_crit_edge"

"for blur_y.s0.x.x.rebased530.consume blur_x537_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased530"
  %.pre3569 = shl nsw i64 %12281, 5
  br label %"consume blur_x537"

"end for blur_y.s0.x.x.rebased531":               ; preds = %"consume blur_x537", %after_bb525
  br i1 %102, label %"for blur_y.s0.x.x.rebased538.preheader", label %"end for blur_y.s0.x.x.rebased539", !prof !386

"for blur_y.s0.x.x.rebased538.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased531"
  %12287 = sext i32 %t1726 to i64
  %12288 = zext i32 %.pre-phi3516 to i64
  %12289 = mul nsw i64 %12288, %116
  %12290 = sub nsw i64 %12289, %96
  %12291 = zext i32 %.pre-phi3512 to i64
  %12292 = mul nsw i64 %12291, %116
  %12293 = sub nsw i64 %12292, %96
  %12294 = zext i32 %.pre-phi3520 to i64
  %12295 = mul nsw i64 %12294, %116
  %12296 = sub nsw i64 %12295, %96
  %12297 = zext i32 %.pre-phi3524 to i64
  %12298 = mul nsw i64 %12297, %116
  %12299 = sub nsw i64 %12298, %96
  %12300 = zext i32 %.pre-phi3528 to i64
  %12301 = mul nsw i64 %12300, %116
  %12302 = sub nsw i64 %12301, %96
  %12303 = zext i32 %.pre-phi to i64
  %12304 = mul nsw i64 %12303, %116
  %12305 = sub nsw i64 %12304, %96
  %12306 = zext i32 %.pre-phi3534 to i64
  %12307 = mul nsw i64 %12306, %116
  %12308 = sub nsw i64 %12307, %96
  %12309 = sext i32 %a26 to i64
  %12310 = add nsw i64 %12309, 18
  %12311 = mul nsw i64 %12310, %117
  %12312 = add nsw i64 %12311, %120
  br label %"for blur_y.s0.x.x.rebased538"

"produce blur_x536":                              ; preds = %"for blur_y.s0.x.x.rebased530"
  %t1040 = add nsw i32 %12284, %t2049
  %12313 = sext i32 %t1040 to i64
  %12314 = getelementptr inbounds i16, i16* %read_input, i64 %12313
  %12315 = getelementptr inbounds i16, i16* %12314, i64 1
  %12316 = bitcast i16* %12315 to <16 x i16>*
  %12317 = load <16 x i16>, <16 x i16>* %12316, align 2, !tbaa !396
  %12318 = getelementptr inbounds i16, i16* %12314, i64 17
  %12319 = bitcast i16* %12318 to <16 x i16>*
  %12320 = load <16 x i16>, <16 x i16>* %12319, align 2, !tbaa !396
  %12321 = bitcast i16* %12314 to <16 x i16>*
  %12322 = load <16 x i16>, <16 x i16>* %12321, align 2, !tbaa !396
  %12323 = getelementptr inbounds i16, i16* %12314, i64 16
  %12324 = bitcast i16* %12323 to <16 x i16>*
  %12325 = load <16 x i16>, <16 x i16>* %12324, align 2, !tbaa !396
  %12326 = getelementptr inbounds i16, i16* %12314, i64 2
  %12327 = bitcast i16* %12326 to <16 x i16>*
  %12328 = load <16 x i16>, <16 x i16>* %12327, align 2, !tbaa !396
  %12329 = getelementptr inbounds i16, i16* %12314, i64 18
  %12330 = bitcast i16* %12329 to <16 x i16>*
  %12331 = load <16 x i16>, <16 x i16>* %12330, align 2, !tbaa !396
  %12332 = getelementptr inbounds i16, i16* %12314, i64 3
  %12333 = bitcast i16* %12332 to <16 x i16>*
  %12334 = load <16 x i16>, <16 x i16>* %12333, align 2, !tbaa !396
  %12335 = getelementptr inbounds i16, i16* %12314, i64 19
  %12336 = bitcast i16* %12335 to <16 x i16>*
  %12337 = load <16 x i16>, <16 x i16>* %12336, align 2, !tbaa !396
  %12338 = getelementptr inbounds i16, i16* %12314, i64 4
  %12339 = bitcast i16* %12338 to <16 x i16>*
  %12340 = load <16 x i16>, <16 x i16>* %12339, align 2, !tbaa !396
  %12341 = getelementptr inbounds i16, i16* %12314, i64 20
  %12342 = bitcast i16* %12341 to <16 x i16>*
  %12343 = load <16 x i16>, <16 x i16>* %12342, align 2, !tbaa !396
  %12344 = getelementptr inbounds i16, i16* %12314, i64 6
  %12345 = bitcast i16* %12344 to <16 x i16>*
  %12346 = load <16 x i16>, <16 x i16>* %12345, align 2, !tbaa !396
  %12347 = getelementptr inbounds i16, i16* %12314, i64 22
  %12348 = bitcast i16* %12347 to <16 x i16>*
  %12349 = load <16 x i16>, <16 x i16>* %12348, align 2, !tbaa !396
  %12350 = getelementptr inbounds i16, i16* %12314, i64 5
  %12351 = bitcast i16* %12350 to <16 x i16>*
  %12352 = load <16 x i16>, <16 x i16>* %12351, align 2, !tbaa !396
  %12353 = getelementptr inbounds i16, i16* %12314, i64 21
  %12354 = bitcast i16* %12353 to <16 x i16>*
  %12355 = load <16 x i16>, <16 x i16>* %12354, align 2, !tbaa !396
  %12356 = add <16 x i16> %12322, %12317
  %12357 = add <16 x i16> %12356, %12328
  %12358 = add <16 x i16> %12357, %12334
  %12359 = add <16 x i16> %12358, %12340
  %12360 = add <16 x i16> %12359, %12346
  %12361 = add <16 x i16> %12360, %12352
  %12362 = add <16 x i16> %12325, %12320
  %12363 = add <16 x i16> %12362, %12331
  %12364 = add <16 x i16> %12363, %12337
  %12365 = add <16 x i16> %12364, %12343
  %12366 = add <16 x i16> %12365, %12349
  %12367 = add <16 x i16> %12366, %12355
  %12368 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12361, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12369 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12367, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12370 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12368, <16 x i16> %12361)
  %12371 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12369, <16 x i16> %12367)
  %12372 = shufflevector <16 x i16> %12370, <16 x i16> %12371, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12373 = lshr <32 x i16> %12372, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12374 = shufflevector <32 x i16> %12373, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12375 = shl nsw i64 %12281, 5
  %12376 = add nsw i64 %12375, %12086
  %12377 = getelementptr inbounds i16, i16* %blur_x, i64 %12376
  %12378 = bitcast i16* %12377 to <16 x i16>*
  store <16 x i16> %12374, <16 x i16>* %12378, align 2, !tbaa !399
  %12379 = shufflevector <32 x i16> %12373, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12380 = getelementptr inbounds i16, i16* %12377, i64 16
  %12381 = bitcast i16* %12380 to <16 x i16>*
  store <16 x i16> %12379, <16 x i16>* %12381, align 2, !tbaa !399
  br label %"consume blur_x537"

"consume blur_x537":                              ; preds = %"for blur_y.s0.x.x.rebased530.consume blur_x537_crit_edge", %"produce blur_x536"
  %.pre-phi3570 = phi i64 [ %.pre3569, %"for blur_y.s0.x.x.rebased530.consume blur_x537_crit_edge" ], [ %12375, %"produce blur_x536" ]
  %12382 = add nsw i64 %12089, %.pre-phi3570
  %12383 = getelementptr inbounds i16, i16* %blur_x, i64 %12382
  %12384 = bitcast i16* %12383 to <16 x i16>*
  %12385 = load <16 x i16>, <16 x i16>* %12384, align 2, !tbaa !399
  %12386 = getelementptr inbounds i16, i16* %12383, i64 16
  %12387 = bitcast i16* %12386 to <16 x i16>*
  %12388 = load <16 x i16>, <16 x i16>* %12387, align 2, !tbaa !399
  %12389 = add nsw i64 %12092, %.pre-phi3570
  %12390 = getelementptr inbounds i16, i16* %blur_x, i64 %12389
  %12391 = bitcast i16* %12390 to <16 x i16>*
  %12392 = load <16 x i16>, <16 x i16>* %12391, align 2, !tbaa !399
  %12393 = getelementptr inbounds i16, i16* %12390, i64 16
  %12394 = bitcast i16* %12393 to <16 x i16>*
  %12395 = load <16 x i16>, <16 x i16>* %12394, align 2, !tbaa !399
  %12396 = add nsw i64 %12095, %.pre-phi3570
  %12397 = getelementptr inbounds i16, i16* %blur_x, i64 %12396
  %12398 = bitcast i16* %12397 to <16 x i16>*
  %12399 = load <16 x i16>, <16 x i16>* %12398, align 2, !tbaa !399
  %12400 = getelementptr inbounds i16, i16* %12397, i64 16
  %12401 = bitcast i16* %12400 to <16 x i16>*
  %12402 = load <16 x i16>, <16 x i16>* %12401, align 2, !tbaa !399
  %12403 = add nsw i64 %12098, %.pre-phi3570
  %12404 = getelementptr inbounds i16, i16* %blur_x, i64 %12403
  %12405 = bitcast i16* %12404 to <16 x i16>*
  %12406 = load <16 x i16>, <16 x i16>* %12405, align 2, !tbaa !399
  %12407 = getelementptr inbounds i16, i16* %12404, i64 16
  %12408 = bitcast i16* %12407 to <16 x i16>*
  %12409 = load <16 x i16>, <16 x i16>* %12408, align 2, !tbaa !399
  %12410 = add nsw i64 %12101, %.pre-phi3570
  %12411 = getelementptr inbounds i16, i16* %blur_x, i64 %12410
  %12412 = bitcast i16* %12411 to <16 x i16>*
  %12413 = load <16 x i16>, <16 x i16>* %12412, align 2, !tbaa !399
  %12414 = getelementptr inbounds i16, i16* %12411, i64 16
  %12415 = bitcast i16* %12414 to <16 x i16>*
  %12416 = load <16 x i16>, <16 x i16>* %12415, align 2, !tbaa !399
  %12417 = add nsw i64 %12104, %.pre-phi3570
  %12418 = getelementptr inbounds i16, i16* %blur_x, i64 %12417
  %12419 = bitcast i16* %12418 to <16 x i16>*
  %12420 = load <16 x i16>, <16 x i16>* %12419, align 2, !tbaa !399
  %12421 = getelementptr inbounds i16, i16* %12418, i64 16
  %12422 = bitcast i16* %12421 to <16 x i16>*
  %12423 = load <16 x i16>, <16 x i16>* %12422, align 2, !tbaa !399
  %12424 = add nsw i64 %12107, %.pre-phi3570
  %12425 = getelementptr inbounds i16, i16* %blur_x, i64 %12424
  %12426 = bitcast i16* %12425 to <16 x i16>*
  %12427 = load <16 x i16>, <16 x i16>* %12426, align 2, !tbaa !399
  %12428 = getelementptr inbounds i16, i16* %12425, i64 16
  %12429 = bitcast i16* %12428 to <16 x i16>*
  %12430 = load <16 x i16>, <16 x i16>* %12429, align 2, !tbaa !399
  %12431 = add <16 x i16> %12392, %12385
  %12432 = add <16 x i16> %12431, %12399
  %12433 = add <16 x i16> %12432, %12406
  %12434 = add <16 x i16> %12433, %12413
  %12435 = add <16 x i16> %12434, %12420
  %12436 = add <16 x i16> %12435, %12427
  %12437 = add <16 x i16> %12395, %12388
  %12438 = add <16 x i16> %12437, %12402
  %12439 = add <16 x i16> %12438, %12409
  %12440 = add <16 x i16> %12439, %12416
  %12441 = add <16 x i16> %12440, %12423
  %12442 = add <16 x i16> %12441, %12430
  %12443 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12436, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12444 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12442, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12445 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12443, <16 x i16> %12436)
  %12446 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12444, <16 x i16> %12442)
  %12447 = shufflevector <16 x i16> %12445, <16 x i16> %12446, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12448 = lshr <32 x i16> %12447, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12449 = shufflevector <32 x i16> %12448, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12450 = add nsw i64 %12111, %.pre-phi3570
  %12451 = getelementptr inbounds i16, i16* %66, i64 %12450
  %12452 = bitcast i16* %12451 to <16 x i16>*
  store <16 x i16> %12449, <16 x i16>* %12452, align 2, !tbaa !401
  %12453 = shufflevector <32 x i16> %12448, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12454 = getelementptr inbounds i16, i16* %12451, i64 16
  %12455 = bitcast i16* %12454 to <16 x i16>*
  store <16 x i16> %12453, <16 x i16>* %12455, align 2, !tbaa !401
  %indvars.iv.next3334 = add nuw nsw i64 %indvars.iv3333, 1
  %.not2764 = icmp eq i64 %indvars.iv.next3334, %188
  br i1 %.not2764, label %"end for blur_y.s0.x.x.rebased531", label %"for blur_y.s0.x.x.rebased530"

"for blur_y.s0.x.x.rebased538":                   ; preds = %"for blur_y.s0.x.x.rebased538.preheader", %"consume blur_x546"
  %blur_y.s0.x.x.rebased540 = phi i32 [ %12606, %"consume blur_x546" ], [ 0, %"for blur_y.s0.x.x.rebased538.preheader" ]
  %12456 = add nsw i32 %blur_y.s0.x.x.rebased540, %t1670
  %a245 = shl nsw i32 %12456, 5
  %12457 = icmp sgt i32 %a14, %a245
  %b251 = select i1 %12457, i32 %a245, i32 %a14
  %12458 = icmp slt i32 %12456, 1
  %12459 = icmp sgt i32 %4, %a245
  %12460 = or i1 %12458, %12459
  br i1 %12460, label %"produce blur_x544", label %"consume blur_x546"

"end for blur_y.s0.x.x.rebased539":               ; preds = %"consume blur_x546", %"end for blur_y.s0.x.x.rebased531"
  br i1 %34, label %"produce blur_x550", label %after_bb547

"produce blur_x544":                              ; preds = %"for blur_y.s0.x.x.rebased538"
  %12461 = icmp slt i32 %b251, %4
  %blur_x.s0.x.v1.base.s545 = select i1 %12461, i32 %b251, i32 %4
  %t1045 = add nsw i32 %blur_x.s0.x.v1.base.s545, %t2049
  %12462 = sext i32 %t1045 to i64
  %12463 = getelementptr inbounds i16, i16* %read_input, i64 %12462
  %12464 = getelementptr inbounds i16, i16* %12463, i64 1
  %12465 = bitcast i16* %12464 to <16 x i16>*
  %12466 = load <16 x i16>, <16 x i16>* %12465, align 2, !tbaa !396
  %12467 = getelementptr inbounds i16, i16* %12463, i64 17
  %12468 = bitcast i16* %12467 to <16 x i16>*
  %12469 = load <16 x i16>, <16 x i16>* %12468, align 2, !tbaa !396
  %12470 = bitcast i16* %12463 to <16 x i16>*
  %12471 = load <16 x i16>, <16 x i16>* %12470, align 2, !tbaa !396
  %12472 = getelementptr inbounds i16, i16* %12463, i64 16
  %12473 = bitcast i16* %12472 to <16 x i16>*
  %12474 = load <16 x i16>, <16 x i16>* %12473, align 2, !tbaa !396
  %12475 = getelementptr inbounds i16, i16* %12463, i64 2
  %12476 = bitcast i16* %12475 to <16 x i16>*
  %12477 = load <16 x i16>, <16 x i16>* %12476, align 2, !tbaa !396
  %12478 = getelementptr inbounds i16, i16* %12463, i64 18
  %12479 = bitcast i16* %12478 to <16 x i16>*
  %12480 = load <16 x i16>, <16 x i16>* %12479, align 2, !tbaa !396
  %12481 = getelementptr inbounds i16, i16* %12463, i64 3
  %12482 = bitcast i16* %12481 to <16 x i16>*
  %12483 = load <16 x i16>, <16 x i16>* %12482, align 2, !tbaa !396
  %12484 = getelementptr inbounds i16, i16* %12463, i64 19
  %12485 = bitcast i16* %12484 to <16 x i16>*
  %12486 = load <16 x i16>, <16 x i16>* %12485, align 2, !tbaa !396
  %12487 = getelementptr inbounds i16, i16* %12463, i64 4
  %12488 = bitcast i16* %12487 to <16 x i16>*
  %12489 = load <16 x i16>, <16 x i16>* %12488, align 2, !tbaa !396
  %12490 = getelementptr inbounds i16, i16* %12463, i64 20
  %12491 = bitcast i16* %12490 to <16 x i16>*
  %12492 = load <16 x i16>, <16 x i16>* %12491, align 2, !tbaa !396
  %12493 = getelementptr inbounds i16, i16* %12463, i64 6
  %12494 = bitcast i16* %12493 to <16 x i16>*
  %12495 = load <16 x i16>, <16 x i16>* %12494, align 2, !tbaa !396
  %12496 = getelementptr inbounds i16, i16* %12463, i64 22
  %12497 = bitcast i16* %12496 to <16 x i16>*
  %12498 = load <16 x i16>, <16 x i16>* %12497, align 2, !tbaa !396
  %12499 = getelementptr inbounds i16, i16* %12463, i64 5
  %12500 = bitcast i16* %12499 to <16 x i16>*
  %12501 = load <16 x i16>, <16 x i16>* %12500, align 2, !tbaa !396
  %12502 = getelementptr inbounds i16, i16* %12463, i64 21
  %12503 = bitcast i16* %12502 to <16 x i16>*
  %12504 = load <16 x i16>, <16 x i16>* %12503, align 2, !tbaa !396
  %12505 = add <16 x i16> %12471, %12466
  %12506 = add <16 x i16> %12505, %12477
  %12507 = add <16 x i16> %12506, %12483
  %12508 = add <16 x i16> %12507, %12489
  %12509 = add <16 x i16> %12508, %12495
  %12510 = add <16 x i16> %12509, %12501
  %12511 = add <16 x i16> %12474, %12469
  %12512 = add <16 x i16> %12511, %12480
  %12513 = add <16 x i16> %12512, %12486
  %12514 = add <16 x i16> %12513, %12492
  %12515 = add <16 x i16> %12514, %12498
  %12516 = add <16 x i16> %12515, %12504
  %12517 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12510, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12518 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12516, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12519 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12517, <16 x i16> %12510)
  %12520 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12518, <16 x i16> %12516)
  %12521 = shufflevector <16 x i16> %12519, <16 x i16> %12520, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12522 = lshr <32 x i16> %12521, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12523 = shufflevector <32 x i16> %12522, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12524 = sext i32 %blur_x.s0.x.v1.base.s545 to i64
  %12525 = add nsw i64 %12524, %12287
  %12526 = getelementptr inbounds i16, i16* %blur_x, i64 %12525
  %12527 = bitcast i16* %12526 to <16 x i16>*
  store <16 x i16> %12523, <16 x i16>* %12527, align 2, !tbaa !399
  %12528 = shufflevector <32 x i16> %12522, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12529 = getelementptr inbounds i16, i16* %12526, i64 16
  %12530 = bitcast i16* %12529 to <16 x i16>*
  store <16 x i16> %12528, <16 x i16>* %12530, align 2, !tbaa !399
  br label %"consume blur_x546"

"consume blur_x546":                              ; preds = %"for blur_y.s0.x.x.rebased538", %"produce blur_x544"
  %12531 = sext i32 %b251 to i64
  %12532 = add nsw i64 %12290, %12531
  %12533 = getelementptr inbounds i16, i16* %blur_x, i64 %12532
  %12534 = bitcast i16* %12533 to <16 x i16>*
  %12535 = load <16 x i16>, <16 x i16>* %12534, align 2, !tbaa !399
  %12536 = getelementptr inbounds i16, i16* %12533, i64 16
  %12537 = bitcast i16* %12536 to <16 x i16>*
  %12538 = load <16 x i16>, <16 x i16>* %12537, align 2, !tbaa !399
  %12539 = add nsw i64 %12293, %12531
  %12540 = getelementptr inbounds i16, i16* %blur_x, i64 %12539
  %12541 = bitcast i16* %12540 to <16 x i16>*
  %12542 = load <16 x i16>, <16 x i16>* %12541, align 2, !tbaa !399
  %12543 = getelementptr inbounds i16, i16* %12540, i64 16
  %12544 = bitcast i16* %12543 to <16 x i16>*
  %12545 = load <16 x i16>, <16 x i16>* %12544, align 2, !tbaa !399
  %12546 = add nsw i64 %12296, %12531
  %12547 = getelementptr inbounds i16, i16* %blur_x, i64 %12546
  %12548 = bitcast i16* %12547 to <16 x i16>*
  %12549 = load <16 x i16>, <16 x i16>* %12548, align 2, !tbaa !399
  %12550 = getelementptr inbounds i16, i16* %12547, i64 16
  %12551 = bitcast i16* %12550 to <16 x i16>*
  %12552 = load <16 x i16>, <16 x i16>* %12551, align 2, !tbaa !399
  %12553 = add nsw i64 %12299, %12531
  %12554 = getelementptr inbounds i16, i16* %blur_x, i64 %12553
  %12555 = bitcast i16* %12554 to <16 x i16>*
  %12556 = load <16 x i16>, <16 x i16>* %12555, align 2, !tbaa !399
  %12557 = getelementptr inbounds i16, i16* %12554, i64 16
  %12558 = bitcast i16* %12557 to <16 x i16>*
  %12559 = load <16 x i16>, <16 x i16>* %12558, align 2, !tbaa !399
  %12560 = add nsw i64 %12302, %12531
  %12561 = getelementptr inbounds i16, i16* %blur_x, i64 %12560
  %12562 = bitcast i16* %12561 to <16 x i16>*
  %12563 = load <16 x i16>, <16 x i16>* %12562, align 2, !tbaa !399
  %12564 = getelementptr inbounds i16, i16* %12561, i64 16
  %12565 = bitcast i16* %12564 to <16 x i16>*
  %12566 = load <16 x i16>, <16 x i16>* %12565, align 2, !tbaa !399
  %12567 = add nsw i64 %12305, %12531
  %12568 = getelementptr inbounds i16, i16* %blur_x, i64 %12567
  %12569 = bitcast i16* %12568 to <16 x i16>*
  %12570 = load <16 x i16>, <16 x i16>* %12569, align 2, !tbaa !399
  %12571 = getelementptr inbounds i16, i16* %12568, i64 16
  %12572 = bitcast i16* %12571 to <16 x i16>*
  %12573 = load <16 x i16>, <16 x i16>* %12572, align 2, !tbaa !399
  %12574 = add nsw i64 %12308, %12531
  %12575 = getelementptr inbounds i16, i16* %blur_x, i64 %12574
  %12576 = bitcast i16* %12575 to <16 x i16>*
  %12577 = load <16 x i16>, <16 x i16>* %12576, align 2, !tbaa !399
  %12578 = getelementptr inbounds i16, i16* %12575, i64 16
  %12579 = bitcast i16* %12578 to <16 x i16>*
  %12580 = load <16 x i16>, <16 x i16>* %12579, align 2, !tbaa !399
  %12581 = add <16 x i16> %12542, %12535
  %12582 = add <16 x i16> %12581, %12549
  %12583 = add <16 x i16> %12582, %12556
  %12584 = add <16 x i16> %12583, %12563
  %12585 = add <16 x i16> %12584, %12570
  %12586 = add <16 x i16> %12585, %12577
  %12587 = add <16 x i16> %12545, %12538
  %12588 = add <16 x i16> %12587, %12552
  %12589 = add <16 x i16> %12588, %12559
  %12590 = add <16 x i16> %12589, %12566
  %12591 = add <16 x i16> %12590, %12573
  %12592 = add <16 x i16> %12591, %12580
  %12593 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12586, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12594 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12592, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12595 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12593, <16 x i16> %12586)
  %12596 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12594, <16 x i16> %12592)
  %12597 = shufflevector <16 x i16> %12595, <16 x i16> %12596, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12598 = lshr <32 x i16> %12597, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12599 = shufflevector <32 x i16> %12598, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12600 = add nsw i64 %12312, %12531
  %12601 = getelementptr inbounds i16, i16* %66, i64 %12600
  %12602 = bitcast i16* %12601 to <16 x i16>*
  store <16 x i16> %12599, <16 x i16>* %12602, align 2, !tbaa !401
  %12603 = shufflevector <32 x i16> %12598, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12604 = getelementptr inbounds i16, i16* %12601, i64 16
  %12605 = bitcast i16* %12604 to <16 x i16>*
  store <16 x i16> %12603, <16 x i16>* %12605, align 2, !tbaa !401
  %12606 = add nuw nsw i32 %blur_y.s0.x.x.rebased540, 1
  %.not2763 = icmp eq i32 %12606, %t1727
  br i1 %.not2763, label %"end for blur_y.s0.x.x.rebased539", label %"for blur_y.s0.x.x.rebased538"

after_bb547:                                      ; preds = %"end for blur_y.s0.x.x.rebased539", %"produce blur_x550"
  br i1 %100, label %"for blur_y.s0.x.x.rebased552.preheader", label %"end for blur_y.s0.x.x.rebased553", !prof !386

"for blur_y.s0.x.x.rebased552.preheader":         ; preds = %after_bb547
  %12607 = sext i32 %t1732 to i64
  %12608 = zext i32 %.pre-phi3520 to i64
  %12609 = mul nsw i64 %12608, %116
  %12610 = sub nsw i64 %12609, %96
  %12611 = zext i32 %.pre-phi3516 to i64
  %12612 = mul nsw i64 %12611, %116
  %12613 = sub nsw i64 %12612, %96
  %12614 = zext i32 %.pre-phi3524 to i64
  %12615 = mul nsw i64 %12614, %116
  %12616 = sub nsw i64 %12615, %96
  %12617 = zext i32 %.pre-phi3528 to i64
  %12618 = mul nsw i64 %12617, %116
  %12619 = sub nsw i64 %12618, %96
  %12620 = zext i32 %.pre-phi3534 to i64
  %12621 = mul nsw i64 %12620, %116
  %12622 = sub nsw i64 %12621, %96
  %12623 = zext i32 %.pre-phi3508 to i64
  %12624 = mul nsw i64 %12623, %116
  %12625 = sub nsw i64 %12624, %96
  %12626 = zext i32 %.pre-phi to i64
  %12627 = mul nsw i64 %12626, %116
  %12628 = sub nsw i64 %12627, %96
  %12629 = sext i32 %a26 to i64
  %12630 = add nsw i64 %12629, 19
  %12631 = mul nsw i64 %12630, %117
  %12632 = add nsw i64 %12631, %120
  br label %"for blur_y.s0.x.x.rebased552"

"produce blur_x550":                              ; preds = %"end for blur_y.s0.x.x.rebased539"
  %12633 = getelementptr inbounds i16, i16* %read_input, i64 %157
  %12634 = getelementptr inbounds i16, i16* %12633, i64 -31
  %12635 = bitcast i16* %12634 to <16 x i16>*
  %12636 = load <16 x i16>, <16 x i16>* %12635, align 2, !tbaa !396
  %12637 = getelementptr inbounds i16, i16* %12633, i64 -15
  %12638 = bitcast i16* %12637 to <16 x i16>*
  %12639 = load <16 x i16>, <16 x i16>* %12638, align 2, !tbaa !396
  %12640 = getelementptr inbounds i16, i16* %12633, i64 -32
  %12641 = bitcast i16* %12640 to <16 x i16>*
  %12642 = load <16 x i16>, <16 x i16>* %12641, align 2, !tbaa !396
  %12643 = getelementptr inbounds i16, i16* %12633, i64 -16
  %12644 = bitcast i16* %12643 to <16 x i16>*
  %12645 = load <16 x i16>, <16 x i16>* %12644, align 2, !tbaa !396
  %12646 = getelementptr inbounds i16, i16* %12633, i64 -30
  %12647 = bitcast i16* %12646 to <16 x i16>*
  %12648 = load <16 x i16>, <16 x i16>* %12647, align 2, !tbaa !396
  %12649 = getelementptr inbounds i16, i16* %12633, i64 -14
  %12650 = bitcast i16* %12649 to <16 x i16>*
  %12651 = load <16 x i16>, <16 x i16>* %12650, align 2, !tbaa !396
  %12652 = getelementptr inbounds i16, i16* %12633, i64 -29
  %12653 = bitcast i16* %12652 to <16 x i16>*
  %12654 = load <16 x i16>, <16 x i16>* %12653, align 2, !tbaa !396
  %12655 = getelementptr inbounds i16, i16* %12633, i64 -13
  %12656 = bitcast i16* %12655 to <16 x i16>*
  %12657 = load <16 x i16>, <16 x i16>* %12656, align 2, !tbaa !396
  %12658 = getelementptr inbounds i16, i16* %12633, i64 -28
  %12659 = bitcast i16* %12658 to <16 x i16>*
  %12660 = load <16 x i16>, <16 x i16>* %12659, align 2, !tbaa !396
  %12661 = getelementptr inbounds i16, i16* %12633, i64 -12
  %12662 = bitcast i16* %12661 to <16 x i16>*
  %12663 = load <16 x i16>, <16 x i16>* %12662, align 2, !tbaa !396
  %12664 = getelementptr inbounds i16, i16* %12633, i64 -26
  %12665 = bitcast i16* %12664 to <16 x i16>*
  %12666 = load <16 x i16>, <16 x i16>* %12665, align 2, !tbaa !396
  %12667 = getelementptr inbounds i16, i16* %12633, i64 -10
  %12668 = bitcast i16* %12667 to <16 x i16>*
  %12669 = load <16 x i16>, <16 x i16>* %12668, align 2, !tbaa !396
  %12670 = getelementptr inbounds i16, i16* %12633, i64 -27
  %12671 = bitcast i16* %12670 to <16 x i16>*
  %12672 = load <16 x i16>, <16 x i16>* %12671, align 2, !tbaa !396
  %12673 = getelementptr inbounds i16, i16* %12633, i64 -11
  %12674 = bitcast i16* %12673 to <16 x i16>*
  %12675 = load <16 x i16>, <16 x i16>* %12674, align 2, !tbaa !396
  %12676 = add <16 x i16> %12642, %12636
  %12677 = add <16 x i16> %12676, %12648
  %12678 = add <16 x i16> %12677, %12654
  %12679 = add <16 x i16> %12678, %12660
  %12680 = add <16 x i16> %12679, %12666
  %12681 = add <16 x i16> %12680, %12672
  %12682 = add <16 x i16> %12645, %12639
  %12683 = add <16 x i16> %12682, %12651
  %12684 = add <16 x i16> %12683, %12657
  %12685 = add <16 x i16> %12684, %12663
  %12686 = add <16 x i16> %12685, %12669
  %12687 = add <16 x i16> %12686, %12675
  %12688 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12681, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12689 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12687, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12690 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12688, <16 x i16> %12681)
  %12691 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12689, <16 x i16> %12687)
  %12692 = shufflevector <16 x i16> %12690, <16 x i16> %12691, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12693 = lshr <32 x i16> %12692, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12694 = shufflevector <32 x i16> %12693, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12695 = zext i32 %.pre-phi3508 to i64
  %12696 = mul nsw i64 %97, %12695
  %12697 = add nsw i64 %99, %12696
  %12698 = getelementptr inbounds i16, i16* %blur_x, i64 %12697
  %12699 = getelementptr inbounds i16, i16* %12698, i64 -32
  %12700 = bitcast i16* %12699 to <16 x i16>*
  store <16 x i16> %12694, <16 x i16>* %12700, align 2, !tbaa !399
  %12701 = shufflevector <32 x i16> %12693, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12702 = getelementptr inbounds i16, i16* %12698, i64 -16
  %12703 = bitcast i16* %12702 to <16 x i16>*
  store <16 x i16> %12701, <16 x i16>* %12703, align 2, !tbaa !399
  %12704 = zext i32 %.pre-phi3520 to i64
  %12705 = mul nsw i64 %12704, %116
  %12706 = add nsw i64 %12705, %94
  %12707 = getelementptr inbounds i16, i16* %blur_x, i64 %12706
  %12708 = getelementptr inbounds i16, i16* %12707, i64 -32
  %12709 = bitcast i16* %12708 to <16 x i16>*
  %12710 = load <16 x i16>, <16 x i16>* %12709, align 2, !tbaa !399
  %12711 = getelementptr inbounds i16, i16* %12707, i64 -16
  %12712 = bitcast i16* %12711 to <16 x i16>*
  %12713 = load <16 x i16>, <16 x i16>* %12712, align 2, !tbaa !399
  %12714 = zext i32 %.pre-phi3516 to i64
  %12715 = mul nsw i64 %12714, %116
  %12716 = add nsw i64 %12715, %94
  %12717 = getelementptr inbounds i16, i16* %blur_x, i64 %12716
  %12718 = getelementptr inbounds i16, i16* %12717, i64 -32
  %12719 = bitcast i16* %12718 to <16 x i16>*
  %12720 = load <16 x i16>, <16 x i16>* %12719, align 2, !tbaa !399
  %12721 = getelementptr inbounds i16, i16* %12717, i64 -16
  %12722 = bitcast i16* %12721 to <16 x i16>*
  %12723 = load <16 x i16>, <16 x i16>* %12722, align 2, !tbaa !399
  %12724 = zext i32 %.pre-phi3524 to i64
  %12725 = mul nsw i64 %12724, %116
  %12726 = add nsw i64 %12725, %94
  %12727 = getelementptr inbounds i16, i16* %blur_x, i64 %12726
  %12728 = getelementptr inbounds i16, i16* %12727, i64 -32
  %12729 = bitcast i16* %12728 to <16 x i16>*
  %12730 = load <16 x i16>, <16 x i16>* %12729, align 2, !tbaa !399
  %12731 = getelementptr inbounds i16, i16* %12727, i64 -16
  %12732 = bitcast i16* %12731 to <16 x i16>*
  %12733 = load <16 x i16>, <16 x i16>* %12732, align 2, !tbaa !399
  %12734 = zext i32 %.pre-phi3528 to i64
  %12735 = mul nsw i64 %12734, %116
  %12736 = add nsw i64 %12735, %94
  %12737 = getelementptr inbounds i16, i16* %blur_x, i64 %12736
  %12738 = getelementptr inbounds i16, i16* %12737, i64 -32
  %12739 = bitcast i16* %12738 to <16 x i16>*
  %12740 = load <16 x i16>, <16 x i16>* %12739, align 2, !tbaa !399
  %12741 = getelementptr inbounds i16, i16* %12737, i64 -16
  %12742 = bitcast i16* %12741 to <16 x i16>*
  %12743 = load <16 x i16>, <16 x i16>* %12742, align 2, !tbaa !399
  %12744 = zext i32 %.pre-phi3534 to i64
  %12745 = mul nsw i64 %12744, %116
  %12746 = add nsw i64 %12745, %94
  %12747 = getelementptr inbounds i16, i16* %blur_x, i64 %12746
  %12748 = getelementptr inbounds i16, i16* %12747, i64 -32
  %12749 = bitcast i16* %12748 to <16 x i16>*
  %12750 = load <16 x i16>, <16 x i16>* %12749, align 2, !tbaa !399
  %12751 = getelementptr inbounds i16, i16* %12747, i64 -16
  %12752 = bitcast i16* %12751 to <16 x i16>*
  %12753 = load <16 x i16>, <16 x i16>* %12752, align 2, !tbaa !399
  %12754 = mul nsw i64 %12695, %116
  %12755 = add nsw i64 %12754, %94
  %12756 = getelementptr inbounds i16, i16* %blur_x, i64 %12755
  %12757 = getelementptr inbounds i16, i16* %12756, i64 -32
  %12758 = bitcast i16* %12757 to <16 x i16>*
  %12759 = load <16 x i16>, <16 x i16>* %12758, align 2, !tbaa !399
  %12760 = getelementptr inbounds i16, i16* %12756, i64 -16
  %12761 = bitcast i16* %12760 to <16 x i16>*
  %12762 = load <16 x i16>, <16 x i16>* %12761, align 2, !tbaa !399
  %12763 = zext i32 %.pre-phi to i64
  %12764 = mul nsw i64 %12763, %116
  %12765 = add nsw i64 %12764, %94
  %12766 = getelementptr inbounds i16, i16* %blur_x, i64 %12765
  %12767 = getelementptr inbounds i16, i16* %12766, i64 -32
  %12768 = bitcast i16* %12767 to <16 x i16>*
  %12769 = load <16 x i16>, <16 x i16>* %12768, align 2, !tbaa !399
  %12770 = getelementptr inbounds i16, i16* %12766, i64 -16
  %12771 = bitcast i16* %12770 to <16 x i16>*
  %12772 = load <16 x i16>, <16 x i16>* %12771, align 2, !tbaa !399
  %12773 = add <16 x i16> %12720, %12710
  %12774 = add <16 x i16> %12773, %12730
  %12775 = add <16 x i16> %12774, %12740
  %12776 = add <16 x i16> %12775, %12750
  %12777 = add <16 x i16> %12776, %12759
  %12778 = add <16 x i16> %12777, %12769
  %12779 = add <16 x i16> %12723, %12713
  %12780 = add <16 x i16> %12779, %12733
  %12781 = add <16 x i16> %12780, %12743
  %12782 = add <16 x i16> %12781, %12753
  %12783 = add <16 x i16> %12782, %12762
  %12784 = add <16 x i16> %12783, %12772
  %12785 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12778, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12786 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12784, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12787 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12785, <16 x i16> %12778)
  %12788 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12786, <16 x i16> %12784)
  %12789 = shufflevector <16 x i16> %12787, <16 x i16> %12788, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12790 = lshr <32 x i16> %12789, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12791 = shufflevector <32 x i16> %12790, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12792 = sext i32 %a26 to i64
  %12793 = add nsw i64 %12792, 19
  %12794 = mul nsw i64 %12793, %117
  %12795 = add nsw i64 %119, %12794
  %12796 = getelementptr inbounds i16, i16* %66, i64 %12795
  %12797 = getelementptr inbounds i16, i16* %12796, i64 -32
  %12798 = bitcast i16* %12797 to <16 x i16>*
  store <16 x i16> %12791, <16 x i16>* %12798, align 2, !tbaa !401
  %12799 = shufflevector <32 x i16> %12790, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12800 = getelementptr inbounds i16, i16* %12796, i64 -16
  %12801 = bitcast i16* %12800 to <16 x i16>*
  store <16 x i16> %12799, <16 x i16>* %12801, align 2, !tbaa !401
  br label %after_bb547

"for blur_y.s0.x.x.rebased552":                   ; preds = %"for blur_y.s0.x.x.rebased552.preheader", %"consume blur_x559"
  %indvars.iv3336 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased552.preheader" ], [ %indvars.iv.next3337, %"consume blur_x559" ]
  %12802 = add nsw i64 %indvars.iv3336, %101
  %12803 = icmp slt i64 %12802, 1
  %12804 = trunc i64 %12802 to i32
  %12805 = shl nsw i32 %12804, 5
  %12806 = icmp sgt i32 %4, %12805
  %12807 = or i1 %12803, %12806
  br i1 %12807, label %"produce blur_x558", label %"for blur_y.s0.x.x.rebased552.consume blur_x559_crit_edge"

"for blur_y.s0.x.x.rebased552.consume blur_x559_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased552"
  %.pre3571 = shl nsw i64 %12802, 5
  br label %"consume blur_x559"

"end for blur_y.s0.x.x.rebased553":               ; preds = %"consume blur_x559", %after_bb547
  br i1 %102, label %"for blur_y.s0.x.x.rebased560.preheader", label %"end for blur_y.s0.x.x.rebased561", !prof !386

"for blur_y.s0.x.x.rebased560.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased553"
  %12808 = sext i32 %t1732 to i64
  %12809 = zext i32 %.pre-phi3520 to i64
  %12810 = mul nsw i64 %12809, %116
  %12811 = sub nsw i64 %12810, %96
  %12812 = zext i32 %.pre-phi3516 to i64
  %12813 = mul nsw i64 %12812, %116
  %12814 = sub nsw i64 %12813, %96
  %12815 = zext i32 %.pre-phi3524 to i64
  %12816 = mul nsw i64 %12815, %116
  %12817 = sub nsw i64 %12816, %96
  %12818 = zext i32 %.pre-phi3528 to i64
  %12819 = mul nsw i64 %12818, %116
  %12820 = sub nsw i64 %12819, %96
  %12821 = zext i32 %.pre-phi3534 to i64
  %12822 = mul nsw i64 %12821, %116
  %12823 = sub nsw i64 %12822, %96
  %12824 = zext i32 %.pre-phi3508 to i64
  %12825 = mul nsw i64 %12824, %116
  %12826 = sub nsw i64 %12825, %96
  %12827 = zext i32 %.pre-phi to i64
  %12828 = mul nsw i64 %12827, %116
  %12829 = sub nsw i64 %12828, %96
  %12830 = sext i32 %a26 to i64
  %12831 = add nsw i64 %12830, 19
  %12832 = mul nsw i64 %12831, %117
  %12833 = add nsw i64 %12832, %120
  br label %"for blur_y.s0.x.x.rebased560"

"produce blur_x558":                              ; preds = %"for blur_y.s0.x.x.rebased552"
  %t1056 = add nsw i32 %12805, %t2065
  %12834 = sext i32 %t1056 to i64
  %12835 = getelementptr inbounds i16, i16* %read_input, i64 %12834
  %12836 = getelementptr inbounds i16, i16* %12835, i64 1
  %12837 = bitcast i16* %12836 to <16 x i16>*
  %12838 = load <16 x i16>, <16 x i16>* %12837, align 2, !tbaa !396
  %12839 = getelementptr inbounds i16, i16* %12835, i64 17
  %12840 = bitcast i16* %12839 to <16 x i16>*
  %12841 = load <16 x i16>, <16 x i16>* %12840, align 2, !tbaa !396
  %12842 = bitcast i16* %12835 to <16 x i16>*
  %12843 = load <16 x i16>, <16 x i16>* %12842, align 2, !tbaa !396
  %12844 = getelementptr inbounds i16, i16* %12835, i64 16
  %12845 = bitcast i16* %12844 to <16 x i16>*
  %12846 = load <16 x i16>, <16 x i16>* %12845, align 2, !tbaa !396
  %12847 = getelementptr inbounds i16, i16* %12835, i64 2
  %12848 = bitcast i16* %12847 to <16 x i16>*
  %12849 = load <16 x i16>, <16 x i16>* %12848, align 2, !tbaa !396
  %12850 = getelementptr inbounds i16, i16* %12835, i64 18
  %12851 = bitcast i16* %12850 to <16 x i16>*
  %12852 = load <16 x i16>, <16 x i16>* %12851, align 2, !tbaa !396
  %12853 = getelementptr inbounds i16, i16* %12835, i64 3
  %12854 = bitcast i16* %12853 to <16 x i16>*
  %12855 = load <16 x i16>, <16 x i16>* %12854, align 2, !tbaa !396
  %12856 = getelementptr inbounds i16, i16* %12835, i64 19
  %12857 = bitcast i16* %12856 to <16 x i16>*
  %12858 = load <16 x i16>, <16 x i16>* %12857, align 2, !tbaa !396
  %12859 = getelementptr inbounds i16, i16* %12835, i64 4
  %12860 = bitcast i16* %12859 to <16 x i16>*
  %12861 = load <16 x i16>, <16 x i16>* %12860, align 2, !tbaa !396
  %12862 = getelementptr inbounds i16, i16* %12835, i64 20
  %12863 = bitcast i16* %12862 to <16 x i16>*
  %12864 = load <16 x i16>, <16 x i16>* %12863, align 2, !tbaa !396
  %12865 = getelementptr inbounds i16, i16* %12835, i64 6
  %12866 = bitcast i16* %12865 to <16 x i16>*
  %12867 = load <16 x i16>, <16 x i16>* %12866, align 2, !tbaa !396
  %12868 = getelementptr inbounds i16, i16* %12835, i64 22
  %12869 = bitcast i16* %12868 to <16 x i16>*
  %12870 = load <16 x i16>, <16 x i16>* %12869, align 2, !tbaa !396
  %12871 = getelementptr inbounds i16, i16* %12835, i64 5
  %12872 = bitcast i16* %12871 to <16 x i16>*
  %12873 = load <16 x i16>, <16 x i16>* %12872, align 2, !tbaa !396
  %12874 = getelementptr inbounds i16, i16* %12835, i64 21
  %12875 = bitcast i16* %12874 to <16 x i16>*
  %12876 = load <16 x i16>, <16 x i16>* %12875, align 2, !tbaa !396
  %12877 = add <16 x i16> %12843, %12838
  %12878 = add <16 x i16> %12877, %12849
  %12879 = add <16 x i16> %12878, %12855
  %12880 = add <16 x i16> %12879, %12861
  %12881 = add <16 x i16> %12880, %12867
  %12882 = add <16 x i16> %12881, %12873
  %12883 = add <16 x i16> %12846, %12841
  %12884 = add <16 x i16> %12883, %12852
  %12885 = add <16 x i16> %12884, %12858
  %12886 = add <16 x i16> %12885, %12864
  %12887 = add <16 x i16> %12886, %12870
  %12888 = add <16 x i16> %12887, %12876
  %12889 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12882, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12890 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12888, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12891 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12889, <16 x i16> %12882)
  %12892 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12890, <16 x i16> %12888)
  %12893 = shufflevector <16 x i16> %12891, <16 x i16> %12892, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12894 = lshr <32 x i16> %12893, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12895 = shufflevector <32 x i16> %12894, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12896 = shl nsw i64 %12802, 5
  %12897 = add nsw i64 %12896, %12607
  %12898 = getelementptr inbounds i16, i16* %blur_x, i64 %12897
  %12899 = bitcast i16* %12898 to <16 x i16>*
  store <16 x i16> %12895, <16 x i16>* %12899, align 2, !tbaa !399
  %12900 = shufflevector <32 x i16> %12894, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12901 = getelementptr inbounds i16, i16* %12898, i64 16
  %12902 = bitcast i16* %12901 to <16 x i16>*
  store <16 x i16> %12900, <16 x i16>* %12902, align 2, !tbaa !399
  br label %"consume blur_x559"

"consume blur_x559":                              ; preds = %"for blur_y.s0.x.x.rebased552.consume blur_x559_crit_edge", %"produce blur_x558"
  %.pre-phi3572 = phi i64 [ %.pre3571, %"for blur_y.s0.x.x.rebased552.consume blur_x559_crit_edge" ], [ %12896, %"produce blur_x558" ]
  %12903 = add nsw i64 %12610, %.pre-phi3572
  %12904 = getelementptr inbounds i16, i16* %blur_x, i64 %12903
  %12905 = bitcast i16* %12904 to <16 x i16>*
  %12906 = load <16 x i16>, <16 x i16>* %12905, align 2, !tbaa !399
  %12907 = getelementptr inbounds i16, i16* %12904, i64 16
  %12908 = bitcast i16* %12907 to <16 x i16>*
  %12909 = load <16 x i16>, <16 x i16>* %12908, align 2, !tbaa !399
  %12910 = add nsw i64 %12613, %.pre-phi3572
  %12911 = getelementptr inbounds i16, i16* %blur_x, i64 %12910
  %12912 = bitcast i16* %12911 to <16 x i16>*
  %12913 = load <16 x i16>, <16 x i16>* %12912, align 2, !tbaa !399
  %12914 = getelementptr inbounds i16, i16* %12911, i64 16
  %12915 = bitcast i16* %12914 to <16 x i16>*
  %12916 = load <16 x i16>, <16 x i16>* %12915, align 2, !tbaa !399
  %12917 = add nsw i64 %12616, %.pre-phi3572
  %12918 = getelementptr inbounds i16, i16* %blur_x, i64 %12917
  %12919 = bitcast i16* %12918 to <16 x i16>*
  %12920 = load <16 x i16>, <16 x i16>* %12919, align 2, !tbaa !399
  %12921 = getelementptr inbounds i16, i16* %12918, i64 16
  %12922 = bitcast i16* %12921 to <16 x i16>*
  %12923 = load <16 x i16>, <16 x i16>* %12922, align 2, !tbaa !399
  %12924 = add nsw i64 %12619, %.pre-phi3572
  %12925 = getelementptr inbounds i16, i16* %blur_x, i64 %12924
  %12926 = bitcast i16* %12925 to <16 x i16>*
  %12927 = load <16 x i16>, <16 x i16>* %12926, align 2, !tbaa !399
  %12928 = getelementptr inbounds i16, i16* %12925, i64 16
  %12929 = bitcast i16* %12928 to <16 x i16>*
  %12930 = load <16 x i16>, <16 x i16>* %12929, align 2, !tbaa !399
  %12931 = add nsw i64 %12622, %.pre-phi3572
  %12932 = getelementptr inbounds i16, i16* %blur_x, i64 %12931
  %12933 = bitcast i16* %12932 to <16 x i16>*
  %12934 = load <16 x i16>, <16 x i16>* %12933, align 2, !tbaa !399
  %12935 = getelementptr inbounds i16, i16* %12932, i64 16
  %12936 = bitcast i16* %12935 to <16 x i16>*
  %12937 = load <16 x i16>, <16 x i16>* %12936, align 2, !tbaa !399
  %12938 = add nsw i64 %12625, %.pre-phi3572
  %12939 = getelementptr inbounds i16, i16* %blur_x, i64 %12938
  %12940 = bitcast i16* %12939 to <16 x i16>*
  %12941 = load <16 x i16>, <16 x i16>* %12940, align 2, !tbaa !399
  %12942 = getelementptr inbounds i16, i16* %12939, i64 16
  %12943 = bitcast i16* %12942 to <16 x i16>*
  %12944 = load <16 x i16>, <16 x i16>* %12943, align 2, !tbaa !399
  %12945 = add nsw i64 %12628, %.pre-phi3572
  %12946 = getelementptr inbounds i16, i16* %blur_x, i64 %12945
  %12947 = bitcast i16* %12946 to <16 x i16>*
  %12948 = load <16 x i16>, <16 x i16>* %12947, align 2, !tbaa !399
  %12949 = getelementptr inbounds i16, i16* %12946, i64 16
  %12950 = bitcast i16* %12949 to <16 x i16>*
  %12951 = load <16 x i16>, <16 x i16>* %12950, align 2, !tbaa !399
  %12952 = add <16 x i16> %12913, %12906
  %12953 = add <16 x i16> %12952, %12920
  %12954 = add <16 x i16> %12953, %12927
  %12955 = add <16 x i16> %12954, %12934
  %12956 = add <16 x i16> %12955, %12941
  %12957 = add <16 x i16> %12956, %12948
  %12958 = add <16 x i16> %12916, %12909
  %12959 = add <16 x i16> %12958, %12923
  %12960 = add <16 x i16> %12959, %12930
  %12961 = add <16 x i16> %12960, %12937
  %12962 = add <16 x i16> %12961, %12944
  %12963 = add <16 x i16> %12962, %12951
  %12964 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12957, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12965 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12963, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %12966 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12964, <16 x i16> %12957)
  %12967 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %12965, <16 x i16> %12963)
  %12968 = shufflevector <16 x i16> %12966, <16 x i16> %12967, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12969 = lshr <32 x i16> %12968, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12970 = shufflevector <32 x i16> %12969, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12971 = add nsw i64 %12632, %.pre-phi3572
  %12972 = getelementptr inbounds i16, i16* %66, i64 %12971
  %12973 = bitcast i16* %12972 to <16 x i16>*
  store <16 x i16> %12970, <16 x i16>* %12973, align 2, !tbaa !401
  %12974 = shufflevector <32 x i16> %12969, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12975 = getelementptr inbounds i16, i16* %12972, i64 16
  %12976 = bitcast i16* %12975 to <16 x i16>*
  store <16 x i16> %12974, <16 x i16>* %12976, align 2, !tbaa !401
  %indvars.iv.next3337 = add nuw nsw i64 %indvars.iv3336, 1
  %.not2762 = icmp eq i64 %indvars.iv.next3337, %188
  br i1 %.not2762, label %"end for blur_y.s0.x.x.rebased553", label %"for blur_y.s0.x.x.rebased552"

"for blur_y.s0.x.x.rebased560":                   ; preds = %"for blur_y.s0.x.x.rebased560.preheader", %"consume blur_x568"
  %blur_y.s0.x.x.rebased562 = phi i32 [ %13127, %"consume blur_x568" ], [ 0, %"for blur_y.s0.x.x.rebased560.preheader" ]
  %12977 = add nsw i32 %blur_y.s0.x.x.rebased562, %t1670
  %a252 = shl nsw i32 %12977, 5
  %12978 = icmp sgt i32 %a14, %a252
  %b258 = select i1 %12978, i32 %a252, i32 %a14
  %12979 = icmp slt i32 %12977, 1
  %12980 = icmp sgt i32 %4, %a252
  %12981 = or i1 %12979, %12980
  br i1 %12981, label %"produce blur_x566", label %"consume blur_x568"

"end for blur_y.s0.x.x.rebased561":               ; preds = %"consume blur_x568", %"end for blur_y.s0.x.x.rebased553"
  br i1 %34, label %"produce blur_x572", label %after_bb569

"produce blur_x566":                              ; preds = %"for blur_y.s0.x.x.rebased560"
  %12982 = icmp slt i32 %b258, %4
  %blur_x.s0.x.v1.base.s567 = select i1 %12982, i32 %b258, i32 %4
  %t1061 = add nsw i32 %blur_x.s0.x.v1.base.s567, %t2065
  %12983 = sext i32 %t1061 to i64
  %12984 = getelementptr inbounds i16, i16* %read_input, i64 %12983
  %12985 = getelementptr inbounds i16, i16* %12984, i64 1
  %12986 = bitcast i16* %12985 to <16 x i16>*
  %12987 = load <16 x i16>, <16 x i16>* %12986, align 2, !tbaa !396
  %12988 = getelementptr inbounds i16, i16* %12984, i64 17
  %12989 = bitcast i16* %12988 to <16 x i16>*
  %12990 = load <16 x i16>, <16 x i16>* %12989, align 2, !tbaa !396
  %12991 = bitcast i16* %12984 to <16 x i16>*
  %12992 = load <16 x i16>, <16 x i16>* %12991, align 2, !tbaa !396
  %12993 = getelementptr inbounds i16, i16* %12984, i64 16
  %12994 = bitcast i16* %12993 to <16 x i16>*
  %12995 = load <16 x i16>, <16 x i16>* %12994, align 2, !tbaa !396
  %12996 = getelementptr inbounds i16, i16* %12984, i64 2
  %12997 = bitcast i16* %12996 to <16 x i16>*
  %12998 = load <16 x i16>, <16 x i16>* %12997, align 2, !tbaa !396
  %12999 = getelementptr inbounds i16, i16* %12984, i64 18
  %13000 = bitcast i16* %12999 to <16 x i16>*
  %13001 = load <16 x i16>, <16 x i16>* %13000, align 2, !tbaa !396
  %13002 = getelementptr inbounds i16, i16* %12984, i64 3
  %13003 = bitcast i16* %13002 to <16 x i16>*
  %13004 = load <16 x i16>, <16 x i16>* %13003, align 2, !tbaa !396
  %13005 = getelementptr inbounds i16, i16* %12984, i64 19
  %13006 = bitcast i16* %13005 to <16 x i16>*
  %13007 = load <16 x i16>, <16 x i16>* %13006, align 2, !tbaa !396
  %13008 = getelementptr inbounds i16, i16* %12984, i64 4
  %13009 = bitcast i16* %13008 to <16 x i16>*
  %13010 = load <16 x i16>, <16 x i16>* %13009, align 2, !tbaa !396
  %13011 = getelementptr inbounds i16, i16* %12984, i64 20
  %13012 = bitcast i16* %13011 to <16 x i16>*
  %13013 = load <16 x i16>, <16 x i16>* %13012, align 2, !tbaa !396
  %13014 = getelementptr inbounds i16, i16* %12984, i64 6
  %13015 = bitcast i16* %13014 to <16 x i16>*
  %13016 = load <16 x i16>, <16 x i16>* %13015, align 2, !tbaa !396
  %13017 = getelementptr inbounds i16, i16* %12984, i64 22
  %13018 = bitcast i16* %13017 to <16 x i16>*
  %13019 = load <16 x i16>, <16 x i16>* %13018, align 2, !tbaa !396
  %13020 = getelementptr inbounds i16, i16* %12984, i64 5
  %13021 = bitcast i16* %13020 to <16 x i16>*
  %13022 = load <16 x i16>, <16 x i16>* %13021, align 2, !tbaa !396
  %13023 = getelementptr inbounds i16, i16* %12984, i64 21
  %13024 = bitcast i16* %13023 to <16 x i16>*
  %13025 = load <16 x i16>, <16 x i16>* %13024, align 2, !tbaa !396
  %13026 = add <16 x i16> %12992, %12987
  %13027 = add <16 x i16> %13026, %12998
  %13028 = add <16 x i16> %13027, %13004
  %13029 = add <16 x i16> %13028, %13010
  %13030 = add <16 x i16> %13029, %13016
  %13031 = add <16 x i16> %13030, %13022
  %13032 = add <16 x i16> %12995, %12990
  %13033 = add <16 x i16> %13032, %13001
  %13034 = add <16 x i16> %13033, %13007
  %13035 = add <16 x i16> %13034, %13013
  %13036 = add <16 x i16> %13035, %13019
  %13037 = add <16 x i16> %13036, %13025
  %13038 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13031, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13039 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13037, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13040 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13038, <16 x i16> %13031)
  %13041 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13039, <16 x i16> %13037)
  %13042 = shufflevector <16 x i16> %13040, <16 x i16> %13041, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13043 = lshr <32 x i16> %13042, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13044 = shufflevector <32 x i16> %13043, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13045 = sext i32 %blur_x.s0.x.v1.base.s567 to i64
  %13046 = add nsw i64 %13045, %12808
  %13047 = getelementptr inbounds i16, i16* %blur_x, i64 %13046
  %13048 = bitcast i16* %13047 to <16 x i16>*
  store <16 x i16> %13044, <16 x i16>* %13048, align 2, !tbaa !399
  %13049 = shufflevector <32 x i16> %13043, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13050 = getelementptr inbounds i16, i16* %13047, i64 16
  %13051 = bitcast i16* %13050 to <16 x i16>*
  store <16 x i16> %13049, <16 x i16>* %13051, align 2, !tbaa !399
  br label %"consume blur_x568"

"consume blur_x568":                              ; preds = %"for blur_y.s0.x.x.rebased560", %"produce blur_x566"
  %13052 = sext i32 %b258 to i64
  %13053 = add nsw i64 %12811, %13052
  %13054 = getelementptr inbounds i16, i16* %blur_x, i64 %13053
  %13055 = bitcast i16* %13054 to <16 x i16>*
  %13056 = load <16 x i16>, <16 x i16>* %13055, align 2, !tbaa !399
  %13057 = getelementptr inbounds i16, i16* %13054, i64 16
  %13058 = bitcast i16* %13057 to <16 x i16>*
  %13059 = load <16 x i16>, <16 x i16>* %13058, align 2, !tbaa !399
  %13060 = add nsw i64 %12814, %13052
  %13061 = getelementptr inbounds i16, i16* %blur_x, i64 %13060
  %13062 = bitcast i16* %13061 to <16 x i16>*
  %13063 = load <16 x i16>, <16 x i16>* %13062, align 2, !tbaa !399
  %13064 = getelementptr inbounds i16, i16* %13061, i64 16
  %13065 = bitcast i16* %13064 to <16 x i16>*
  %13066 = load <16 x i16>, <16 x i16>* %13065, align 2, !tbaa !399
  %13067 = add nsw i64 %12817, %13052
  %13068 = getelementptr inbounds i16, i16* %blur_x, i64 %13067
  %13069 = bitcast i16* %13068 to <16 x i16>*
  %13070 = load <16 x i16>, <16 x i16>* %13069, align 2, !tbaa !399
  %13071 = getelementptr inbounds i16, i16* %13068, i64 16
  %13072 = bitcast i16* %13071 to <16 x i16>*
  %13073 = load <16 x i16>, <16 x i16>* %13072, align 2, !tbaa !399
  %13074 = add nsw i64 %12820, %13052
  %13075 = getelementptr inbounds i16, i16* %blur_x, i64 %13074
  %13076 = bitcast i16* %13075 to <16 x i16>*
  %13077 = load <16 x i16>, <16 x i16>* %13076, align 2, !tbaa !399
  %13078 = getelementptr inbounds i16, i16* %13075, i64 16
  %13079 = bitcast i16* %13078 to <16 x i16>*
  %13080 = load <16 x i16>, <16 x i16>* %13079, align 2, !tbaa !399
  %13081 = add nsw i64 %12823, %13052
  %13082 = getelementptr inbounds i16, i16* %blur_x, i64 %13081
  %13083 = bitcast i16* %13082 to <16 x i16>*
  %13084 = load <16 x i16>, <16 x i16>* %13083, align 2, !tbaa !399
  %13085 = getelementptr inbounds i16, i16* %13082, i64 16
  %13086 = bitcast i16* %13085 to <16 x i16>*
  %13087 = load <16 x i16>, <16 x i16>* %13086, align 2, !tbaa !399
  %13088 = add nsw i64 %12826, %13052
  %13089 = getelementptr inbounds i16, i16* %blur_x, i64 %13088
  %13090 = bitcast i16* %13089 to <16 x i16>*
  %13091 = load <16 x i16>, <16 x i16>* %13090, align 2, !tbaa !399
  %13092 = getelementptr inbounds i16, i16* %13089, i64 16
  %13093 = bitcast i16* %13092 to <16 x i16>*
  %13094 = load <16 x i16>, <16 x i16>* %13093, align 2, !tbaa !399
  %13095 = add nsw i64 %12829, %13052
  %13096 = getelementptr inbounds i16, i16* %blur_x, i64 %13095
  %13097 = bitcast i16* %13096 to <16 x i16>*
  %13098 = load <16 x i16>, <16 x i16>* %13097, align 2, !tbaa !399
  %13099 = getelementptr inbounds i16, i16* %13096, i64 16
  %13100 = bitcast i16* %13099 to <16 x i16>*
  %13101 = load <16 x i16>, <16 x i16>* %13100, align 2, !tbaa !399
  %13102 = add <16 x i16> %13063, %13056
  %13103 = add <16 x i16> %13102, %13070
  %13104 = add <16 x i16> %13103, %13077
  %13105 = add <16 x i16> %13104, %13084
  %13106 = add <16 x i16> %13105, %13091
  %13107 = add <16 x i16> %13106, %13098
  %13108 = add <16 x i16> %13066, %13059
  %13109 = add <16 x i16> %13108, %13073
  %13110 = add <16 x i16> %13109, %13080
  %13111 = add <16 x i16> %13110, %13087
  %13112 = add <16 x i16> %13111, %13094
  %13113 = add <16 x i16> %13112, %13101
  %13114 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13107, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13115 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13113, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13116 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13114, <16 x i16> %13107)
  %13117 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13115, <16 x i16> %13113)
  %13118 = shufflevector <16 x i16> %13116, <16 x i16> %13117, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13119 = lshr <32 x i16> %13118, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13120 = shufflevector <32 x i16> %13119, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13121 = add nsw i64 %12833, %13052
  %13122 = getelementptr inbounds i16, i16* %66, i64 %13121
  %13123 = bitcast i16* %13122 to <16 x i16>*
  store <16 x i16> %13120, <16 x i16>* %13123, align 2, !tbaa !401
  %13124 = shufflevector <32 x i16> %13119, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13125 = getelementptr inbounds i16, i16* %13122, i64 16
  %13126 = bitcast i16* %13125 to <16 x i16>*
  store <16 x i16> %13124, <16 x i16>* %13126, align 2, !tbaa !401
  %13127 = add nuw nsw i32 %blur_y.s0.x.x.rebased562, 1
  %.not2761 = icmp eq i32 %13127, %t1727
  br i1 %.not2761, label %"end for blur_y.s0.x.x.rebased561", label %"for blur_y.s0.x.x.rebased560"

after_bb569:                                      ; preds = %"end for blur_y.s0.x.x.rebased561", %"produce blur_x572"
  br i1 %100, label %"for blur_y.s0.x.x.rebased574.preheader", label %"end for blur_y.s0.x.x.rebased575", !prof !386

"for blur_y.s0.x.x.rebased574.preheader":         ; preds = %after_bb569
  %13128 = sext i32 %t1738 to i64
  %13129 = zext i32 %.pre-phi3524 to i64
  %13130 = mul nsw i64 %13129, %116
  %13131 = sub nsw i64 %13130, %96
  %13132 = zext i32 %.pre-phi3520 to i64
  %13133 = mul nsw i64 %13132, %116
  %13134 = sub nsw i64 %13133, %96
  %13135 = zext i32 %.pre-phi3528 to i64
  %13136 = mul nsw i64 %13135, %116
  %13137 = sub nsw i64 %13136, %96
  %13138 = zext i32 %.pre-phi3534 to i64
  %13139 = mul nsw i64 %13138, %116
  %13140 = sub nsw i64 %13139, %96
  %13141 = zext i32 %.pre-phi to i64
  %13142 = mul nsw i64 %13141, %116
  %13143 = sub nsw i64 %13142, %96
  %13144 = zext i32 %.pre-phi3512 to i64
  %13145 = mul nsw i64 %13144, %116
  %13146 = sub nsw i64 %13145, %96
  %13147 = zext i32 %.pre-phi3508 to i64
  %13148 = mul nsw i64 %13147, %116
  %13149 = sub nsw i64 %13148, %96
  %13150 = sext i32 %a26 to i64
  %13151 = add nsw i64 %13150, 20
  %13152 = mul nsw i64 %13151, %117
  %13153 = add nsw i64 %13152, %120
  br label %"for blur_y.s0.x.x.rebased574"

"produce blur_x572":                              ; preds = %"end for blur_y.s0.x.x.rebased561"
  %13154 = getelementptr inbounds i16, i16* %read_input, i64 %159
  %13155 = getelementptr inbounds i16, i16* %13154, i64 -31
  %13156 = bitcast i16* %13155 to <16 x i16>*
  %13157 = load <16 x i16>, <16 x i16>* %13156, align 2, !tbaa !396
  %13158 = getelementptr inbounds i16, i16* %13154, i64 -15
  %13159 = bitcast i16* %13158 to <16 x i16>*
  %13160 = load <16 x i16>, <16 x i16>* %13159, align 2, !tbaa !396
  %13161 = getelementptr inbounds i16, i16* %13154, i64 -32
  %13162 = bitcast i16* %13161 to <16 x i16>*
  %13163 = load <16 x i16>, <16 x i16>* %13162, align 2, !tbaa !396
  %13164 = getelementptr inbounds i16, i16* %13154, i64 -16
  %13165 = bitcast i16* %13164 to <16 x i16>*
  %13166 = load <16 x i16>, <16 x i16>* %13165, align 2, !tbaa !396
  %13167 = getelementptr inbounds i16, i16* %13154, i64 -30
  %13168 = bitcast i16* %13167 to <16 x i16>*
  %13169 = load <16 x i16>, <16 x i16>* %13168, align 2, !tbaa !396
  %13170 = getelementptr inbounds i16, i16* %13154, i64 -14
  %13171 = bitcast i16* %13170 to <16 x i16>*
  %13172 = load <16 x i16>, <16 x i16>* %13171, align 2, !tbaa !396
  %13173 = getelementptr inbounds i16, i16* %13154, i64 -29
  %13174 = bitcast i16* %13173 to <16 x i16>*
  %13175 = load <16 x i16>, <16 x i16>* %13174, align 2, !tbaa !396
  %13176 = getelementptr inbounds i16, i16* %13154, i64 -13
  %13177 = bitcast i16* %13176 to <16 x i16>*
  %13178 = load <16 x i16>, <16 x i16>* %13177, align 2, !tbaa !396
  %13179 = getelementptr inbounds i16, i16* %13154, i64 -28
  %13180 = bitcast i16* %13179 to <16 x i16>*
  %13181 = load <16 x i16>, <16 x i16>* %13180, align 2, !tbaa !396
  %13182 = getelementptr inbounds i16, i16* %13154, i64 -12
  %13183 = bitcast i16* %13182 to <16 x i16>*
  %13184 = load <16 x i16>, <16 x i16>* %13183, align 2, !tbaa !396
  %13185 = getelementptr inbounds i16, i16* %13154, i64 -26
  %13186 = bitcast i16* %13185 to <16 x i16>*
  %13187 = load <16 x i16>, <16 x i16>* %13186, align 2, !tbaa !396
  %13188 = getelementptr inbounds i16, i16* %13154, i64 -10
  %13189 = bitcast i16* %13188 to <16 x i16>*
  %13190 = load <16 x i16>, <16 x i16>* %13189, align 2, !tbaa !396
  %13191 = getelementptr inbounds i16, i16* %13154, i64 -27
  %13192 = bitcast i16* %13191 to <16 x i16>*
  %13193 = load <16 x i16>, <16 x i16>* %13192, align 2, !tbaa !396
  %13194 = getelementptr inbounds i16, i16* %13154, i64 -11
  %13195 = bitcast i16* %13194 to <16 x i16>*
  %13196 = load <16 x i16>, <16 x i16>* %13195, align 2, !tbaa !396
  %13197 = add <16 x i16> %13163, %13157
  %13198 = add <16 x i16> %13197, %13169
  %13199 = add <16 x i16> %13198, %13175
  %13200 = add <16 x i16> %13199, %13181
  %13201 = add <16 x i16> %13200, %13187
  %13202 = add <16 x i16> %13201, %13193
  %13203 = add <16 x i16> %13166, %13160
  %13204 = add <16 x i16> %13203, %13172
  %13205 = add <16 x i16> %13204, %13178
  %13206 = add <16 x i16> %13205, %13184
  %13207 = add <16 x i16> %13206, %13190
  %13208 = add <16 x i16> %13207, %13196
  %13209 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13202, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13210 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13208, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13211 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13209, <16 x i16> %13202)
  %13212 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13210, <16 x i16> %13208)
  %13213 = shufflevector <16 x i16> %13211, <16 x i16> %13212, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13214 = lshr <32 x i16> %13213, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13215 = shufflevector <32 x i16> %13214, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13216 = zext i32 %.pre-phi3512 to i64
  %13217 = mul nsw i64 %97, %13216
  %13218 = add nsw i64 %99, %13217
  %13219 = getelementptr inbounds i16, i16* %blur_x, i64 %13218
  %13220 = getelementptr inbounds i16, i16* %13219, i64 -32
  %13221 = bitcast i16* %13220 to <16 x i16>*
  store <16 x i16> %13215, <16 x i16>* %13221, align 2, !tbaa !399
  %13222 = shufflevector <32 x i16> %13214, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13223 = getelementptr inbounds i16, i16* %13219, i64 -16
  %13224 = bitcast i16* %13223 to <16 x i16>*
  store <16 x i16> %13222, <16 x i16>* %13224, align 2, !tbaa !399
  %13225 = zext i32 %.pre-phi3524 to i64
  %13226 = mul nsw i64 %13225, %116
  %13227 = add nsw i64 %13226, %94
  %13228 = getelementptr inbounds i16, i16* %blur_x, i64 %13227
  %13229 = getelementptr inbounds i16, i16* %13228, i64 -32
  %13230 = bitcast i16* %13229 to <16 x i16>*
  %13231 = load <16 x i16>, <16 x i16>* %13230, align 2, !tbaa !399
  %13232 = getelementptr inbounds i16, i16* %13228, i64 -16
  %13233 = bitcast i16* %13232 to <16 x i16>*
  %13234 = load <16 x i16>, <16 x i16>* %13233, align 2, !tbaa !399
  %13235 = zext i32 %.pre-phi3520 to i64
  %13236 = mul nsw i64 %13235, %116
  %13237 = add nsw i64 %13236, %94
  %13238 = getelementptr inbounds i16, i16* %blur_x, i64 %13237
  %13239 = getelementptr inbounds i16, i16* %13238, i64 -32
  %13240 = bitcast i16* %13239 to <16 x i16>*
  %13241 = load <16 x i16>, <16 x i16>* %13240, align 2, !tbaa !399
  %13242 = getelementptr inbounds i16, i16* %13238, i64 -16
  %13243 = bitcast i16* %13242 to <16 x i16>*
  %13244 = load <16 x i16>, <16 x i16>* %13243, align 2, !tbaa !399
  %13245 = zext i32 %.pre-phi3528 to i64
  %13246 = mul nsw i64 %13245, %116
  %13247 = add nsw i64 %13246, %94
  %13248 = getelementptr inbounds i16, i16* %blur_x, i64 %13247
  %13249 = getelementptr inbounds i16, i16* %13248, i64 -32
  %13250 = bitcast i16* %13249 to <16 x i16>*
  %13251 = load <16 x i16>, <16 x i16>* %13250, align 2, !tbaa !399
  %13252 = getelementptr inbounds i16, i16* %13248, i64 -16
  %13253 = bitcast i16* %13252 to <16 x i16>*
  %13254 = load <16 x i16>, <16 x i16>* %13253, align 2, !tbaa !399
  %13255 = zext i32 %.pre-phi3534 to i64
  %13256 = mul nsw i64 %13255, %116
  %13257 = add nsw i64 %13256, %94
  %13258 = getelementptr inbounds i16, i16* %blur_x, i64 %13257
  %13259 = getelementptr inbounds i16, i16* %13258, i64 -32
  %13260 = bitcast i16* %13259 to <16 x i16>*
  %13261 = load <16 x i16>, <16 x i16>* %13260, align 2, !tbaa !399
  %13262 = getelementptr inbounds i16, i16* %13258, i64 -16
  %13263 = bitcast i16* %13262 to <16 x i16>*
  %13264 = load <16 x i16>, <16 x i16>* %13263, align 2, !tbaa !399
  %13265 = zext i32 %.pre-phi to i64
  %13266 = mul nsw i64 %13265, %116
  %13267 = add nsw i64 %13266, %94
  %13268 = getelementptr inbounds i16, i16* %blur_x, i64 %13267
  %13269 = getelementptr inbounds i16, i16* %13268, i64 -32
  %13270 = bitcast i16* %13269 to <16 x i16>*
  %13271 = load <16 x i16>, <16 x i16>* %13270, align 2, !tbaa !399
  %13272 = getelementptr inbounds i16, i16* %13268, i64 -16
  %13273 = bitcast i16* %13272 to <16 x i16>*
  %13274 = load <16 x i16>, <16 x i16>* %13273, align 2, !tbaa !399
  %13275 = mul nsw i64 %13216, %116
  %13276 = add nsw i64 %13275, %94
  %13277 = getelementptr inbounds i16, i16* %blur_x, i64 %13276
  %13278 = getelementptr inbounds i16, i16* %13277, i64 -32
  %13279 = bitcast i16* %13278 to <16 x i16>*
  %13280 = load <16 x i16>, <16 x i16>* %13279, align 2, !tbaa !399
  %13281 = getelementptr inbounds i16, i16* %13277, i64 -16
  %13282 = bitcast i16* %13281 to <16 x i16>*
  %13283 = load <16 x i16>, <16 x i16>* %13282, align 2, !tbaa !399
  %13284 = zext i32 %.pre-phi3508 to i64
  %13285 = mul nsw i64 %13284, %116
  %13286 = add nsw i64 %13285, %94
  %13287 = getelementptr inbounds i16, i16* %blur_x, i64 %13286
  %13288 = getelementptr inbounds i16, i16* %13287, i64 -32
  %13289 = bitcast i16* %13288 to <16 x i16>*
  %13290 = load <16 x i16>, <16 x i16>* %13289, align 2, !tbaa !399
  %13291 = getelementptr inbounds i16, i16* %13287, i64 -16
  %13292 = bitcast i16* %13291 to <16 x i16>*
  %13293 = load <16 x i16>, <16 x i16>* %13292, align 2, !tbaa !399
  %13294 = add <16 x i16> %13241, %13231
  %13295 = add <16 x i16> %13294, %13251
  %13296 = add <16 x i16> %13295, %13261
  %13297 = add <16 x i16> %13296, %13271
  %13298 = add <16 x i16> %13297, %13280
  %13299 = add <16 x i16> %13298, %13290
  %13300 = add <16 x i16> %13244, %13234
  %13301 = add <16 x i16> %13300, %13254
  %13302 = add <16 x i16> %13301, %13264
  %13303 = add <16 x i16> %13302, %13274
  %13304 = add <16 x i16> %13303, %13283
  %13305 = add <16 x i16> %13304, %13293
  %13306 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13299, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13307 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13305, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13308 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13306, <16 x i16> %13299)
  %13309 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13307, <16 x i16> %13305)
  %13310 = shufflevector <16 x i16> %13308, <16 x i16> %13309, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13311 = lshr <32 x i16> %13310, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13312 = shufflevector <32 x i16> %13311, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13313 = sext i32 %a26 to i64
  %13314 = add nsw i64 %13313, 20
  %13315 = mul nsw i64 %13314, %117
  %13316 = add nsw i64 %119, %13315
  %13317 = getelementptr inbounds i16, i16* %66, i64 %13316
  %13318 = getelementptr inbounds i16, i16* %13317, i64 -32
  %13319 = bitcast i16* %13318 to <16 x i16>*
  store <16 x i16> %13312, <16 x i16>* %13319, align 2, !tbaa !401
  %13320 = shufflevector <32 x i16> %13311, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13321 = getelementptr inbounds i16, i16* %13317, i64 -16
  %13322 = bitcast i16* %13321 to <16 x i16>*
  store <16 x i16> %13320, <16 x i16>* %13322, align 2, !tbaa !401
  br label %after_bb569

"for blur_y.s0.x.x.rebased574":                   ; preds = %"for blur_y.s0.x.x.rebased574.preheader", %"consume blur_x581"
  %indvars.iv3339 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased574.preheader" ], [ %indvars.iv.next3340, %"consume blur_x581" ]
  %13323 = add nsw i64 %indvars.iv3339, %101
  %13324 = icmp slt i64 %13323, 1
  %13325 = trunc i64 %13323 to i32
  %13326 = shl nsw i32 %13325, 5
  %13327 = icmp sgt i32 %4, %13326
  %13328 = or i1 %13324, %13327
  br i1 %13328, label %"produce blur_x580", label %"for blur_y.s0.x.x.rebased574.consume blur_x581_crit_edge"

"for blur_y.s0.x.x.rebased574.consume blur_x581_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased574"
  %.pre3573 = shl nsw i64 %13323, 5
  br label %"consume blur_x581"

"end for blur_y.s0.x.x.rebased575":               ; preds = %"consume blur_x581", %after_bb569
  br i1 %102, label %"for blur_y.s0.x.x.rebased582.preheader", label %"end for blur_y.s0.x.x.rebased583", !prof !386

"for blur_y.s0.x.x.rebased582.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased575"
  %13329 = sext i32 %t1738 to i64
  %13330 = zext i32 %.pre-phi3524 to i64
  %13331 = mul nsw i64 %13330, %116
  %13332 = sub nsw i64 %13331, %96
  %13333 = zext i32 %.pre-phi3520 to i64
  %13334 = mul nsw i64 %13333, %116
  %13335 = sub nsw i64 %13334, %96
  %13336 = zext i32 %.pre-phi3528 to i64
  %13337 = mul nsw i64 %13336, %116
  %13338 = sub nsw i64 %13337, %96
  %13339 = zext i32 %.pre-phi3534 to i64
  %13340 = mul nsw i64 %13339, %116
  %13341 = sub nsw i64 %13340, %96
  %13342 = zext i32 %.pre-phi to i64
  %13343 = mul nsw i64 %13342, %116
  %13344 = sub nsw i64 %13343, %96
  %13345 = zext i32 %.pre-phi3512 to i64
  %13346 = mul nsw i64 %13345, %116
  %13347 = sub nsw i64 %13346, %96
  %13348 = zext i32 %.pre-phi3508 to i64
  %13349 = mul nsw i64 %13348, %116
  %13350 = sub nsw i64 %13349, %96
  %13351 = sext i32 %a26 to i64
  %13352 = add nsw i64 %13351, 20
  %13353 = mul nsw i64 %13352, %117
  %13354 = add nsw i64 %13353, %120
  br label %"for blur_y.s0.x.x.rebased582"

"produce blur_x580":                              ; preds = %"for blur_y.s0.x.x.rebased574"
  %t1072 = add nsw i32 %13326, %t2081
  %13355 = sext i32 %t1072 to i64
  %13356 = getelementptr inbounds i16, i16* %read_input, i64 %13355
  %13357 = getelementptr inbounds i16, i16* %13356, i64 1
  %13358 = bitcast i16* %13357 to <16 x i16>*
  %13359 = load <16 x i16>, <16 x i16>* %13358, align 2, !tbaa !396
  %13360 = getelementptr inbounds i16, i16* %13356, i64 17
  %13361 = bitcast i16* %13360 to <16 x i16>*
  %13362 = load <16 x i16>, <16 x i16>* %13361, align 2, !tbaa !396
  %13363 = bitcast i16* %13356 to <16 x i16>*
  %13364 = load <16 x i16>, <16 x i16>* %13363, align 2, !tbaa !396
  %13365 = getelementptr inbounds i16, i16* %13356, i64 16
  %13366 = bitcast i16* %13365 to <16 x i16>*
  %13367 = load <16 x i16>, <16 x i16>* %13366, align 2, !tbaa !396
  %13368 = getelementptr inbounds i16, i16* %13356, i64 2
  %13369 = bitcast i16* %13368 to <16 x i16>*
  %13370 = load <16 x i16>, <16 x i16>* %13369, align 2, !tbaa !396
  %13371 = getelementptr inbounds i16, i16* %13356, i64 18
  %13372 = bitcast i16* %13371 to <16 x i16>*
  %13373 = load <16 x i16>, <16 x i16>* %13372, align 2, !tbaa !396
  %13374 = getelementptr inbounds i16, i16* %13356, i64 3
  %13375 = bitcast i16* %13374 to <16 x i16>*
  %13376 = load <16 x i16>, <16 x i16>* %13375, align 2, !tbaa !396
  %13377 = getelementptr inbounds i16, i16* %13356, i64 19
  %13378 = bitcast i16* %13377 to <16 x i16>*
  %13379 = load <16 x i16>, <16 x i16>* %13378, align 2, !tbaa !396
  %13380 = getelementptr inbounds i16, i16* %13356, i64 4
  %13381 = bitcast i16* %13380 to <16 x i16>*
  %13382 = load <16 x i16>, <16 x i16>* %13381, align 2, !tbaa !396
  %13383 = getelementptr inbounds i16, i16* %13356, i64 20
  %13384 = bitcast i16* %13383 to <16 x i16>*
  %13385 = load <16 x i16>, <16 x i16>* %13384, align 2, !tbaa !396
  %13386 = getelementptr inbounds i16, i16* %13356, i64 6
  %13387 = bitcast i16* %13386 to <16 x i16>*
  %13388 = load <16 x i16>, <16 x i16>* %13387, align 2, !tbaa !396
  %13389 = getelementptr inbounds i16, i16* %13356, i64 22
  %13390 = bitcast i16* %13389 to <16 x i16>*
  %13391 = load <16 x i16>, <16 x i16>* %13390, align 2, !tbaa !396
  %13392 = getelementptr inbounds i16, i16* %13356, i64 5
  %13393 = bitcast i16* %13392 to <16 x i16>*
  %13394 = load <16 x i16>, <16 x i16>* %13393, align 2, !tbaa !396
  %13395 = getelementptr inbounds i16, i16* %13356, i64 21
  %13396 = bitcast i16* %13395 to <16 x i16>*
  %13397 = load <16 x i16>, <16 x i16>* %13396, align 2, !tbaa !396
  %13398 = add <16 x i16> %13364, %13359
  %13399 = add <16 x i16> %13398, %13370
  %13400 = add <16 x i16> %13399, %13376
  %13401 = add <16 x i16> %13400, %13382
  %13402 = add <16 x i16> %13401, %13388
  %13403 = add <16 x i16> %13402, %13394
  %13404 = add <16 x i16> %13367, %13362
  %13405 = add <16 x i16> %13404, %13373
  %13406 = add <16 x i16> %13405, %13379
  %13407 = add <16 x i16> %13406, %13385
  %13408 = add <16 x i16> %13407, %13391
  %13409 = add <16 x i16> %13408, %13397
  %13410 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13403, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13411 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13409, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13412 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13410, <16 x i16> %13403)
  %13413 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13411, <16 x i16> %13409)
  %13414 = shufflevector <16 x i16> %13412, <16 x i16> %13413, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13415 = lshr <32 x i16> %13414, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13416 = shufflevector <32 x i16> %13415, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13417 = shl nsw i64 %13323, 5
  %13418 = add nsw i64 %13417, %13128
  %13419 = getelementptr inbounds i16, i16* %blur_x, i64 %13418
  %13420 = bitcast i16* %13419 to <16 x i16>*
  store <16 x i16> %13416, <16 x i16>* %13420, align 2, !tbaa !399
  %13421 = shufflevector <32 x i16> %13415, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13422 = getelementptr inbounds i16, i16* %13419, i64 16
  %13423 = bitcast i16* %13422 to <16 x i16>*
  store <16 x i16> %13421, <16 x i16>* %13423, align 2, !tbaa !399
  br label %"consume blur_x581"

"consume blur_x581":                              ; preds = %"for blur_y.s0.x.x.rebased574.consume blur_x581_crit_edge", %"produce blur_x580"
  %.pre-phi3574 = phi i64 [ %.pre3573, %"for blur_y.s0.x.x.rebased574.consume blur_x581_crit_edge" ], [ %13417, %"produce blur_x580" ]
  %13424 = add nsw i64 %13131, %.pre-phi3574
  %13425 = getelementptr inbounds i16, i16* %blur_x, i64 %13424
  %13426 = bitcast i16* %13425 to <16 x i16>*
  %13427 = load <16 x i16>, <16 x i16>* %13426, align 2, !tbaa !399
  %13428 = getelementptr inbounds i16, i16* %13425, i64 16
  %13429 = bitcast i16* %13428 to <16 x i16>*
  %13430 = load <16 x i16>, <16 x i16>* %13429, align 2, !tbaa !399
  %13431 = add nsw i64 %13134, %.pre-phi3574
  %13432 = getelementptr inbounds i16, i16* %blur_x, i64 %13431
  %13433 = bitcast i16* %13432 to <16 x i16>*
  %13434 = load <16 x i16>, <16 x i16>* %13433, align 2, !tbaa !399
  %13435 = getelementptr inbounds i16, i16* %13432, i64 16
  %13436 = bitcast i16* %13435 to <16 x i16>*
  %13437 = load <16 x i16>, <16 x i16>* %13436, align 2, !tbaa !399
  %13438 = add nsw i64 %13137, %.pre-phi3574
  %13439 = getelementptr inbounds i16, i16* %blur_x, i64 %13438
  %13440 = bitcast i16* %13439 to <16 x i16>*
  %13441 = load <16 x i16>, <16 x i16>* %13440, align 2, !tbaa !399
  %13442 = getelementptr inbounds i16, i16* %13439, i64 16
  %13443 = bitcast i16* %13442 to <16 x i16>*
  %13444 = load <16 x i16>, <16 x i16>* %13443, align 2, !tbaa !399
  %13445 = add nsw i64 %13140, %.pre-phi3574
  %13446 = getelementptr inbounds i16, i16* %blur_x, i64 %13445
  %13447 = bitcast i16* %13446 to <16 x i16>*
  %13448 = load <16 x i16>, <16 x i16>* %13447, align 2, !tbaa !399
  %13449 = getelementptr inbounds i16, i16* %13446, i64 16
  %13450 = bitcast i16* %13449 to <16 x i16>*
  %13451 = load <16 x i16>, <16 x i16>* %13450, align 2, !tbaa !399
  %13452 = add nsw i64 %13143, %.pre-phi3574
  %13453 = getelementptr inbounds i16, i16* %blur_x, i64 %13452
  %13454 = bitcast i16* %13453 to <16 x i16>*
  %13455 = load <16 x i16>, <16 x i16>* %13454, align 2, !tbaa !399
  %13456 = getelementptr inbounds i16, i16* %13453, i64 16
  %13457 = bitcast i16* %13456 to <16 x i16>*
  %13458 = load <16 x i16>, <16 x i16>* %13457, align 2, !tbaa !399
  %13459 = add nsw i64 %13146, %.pre-phi3574
  %13460 = getelementptr inbounds i16, i16* %blur_x, i64 %13459
  %13461 = bitcast i16* %13460 to <16 x i16>*
  %13462 = load <16 x i16>, <16 x i16>* %13461, align 2, !tbaa !399
  %13463 = getelementptr inbounds i16, i16* %13460, i64 16
  %13464 = bitcast i16* %13463 to <16 x i16>*
  %13465 = load <16 x i16>, <16 x i16>* %13464, align 2, !tbaa !399
  %13466 = add nsw i64 %13149, %.pre-phi3574
  %13467 = getelementptr inbounds i16, i16* %blur_x, i64 %13466
  %13468 = bitcast i16* %13467 to <16 x i16>*
  %13469 = load <16 x i16>, <16 x i16>* %13468, align 2, !tbaa !399
  %13470 = getelementptr inbounds i16, i16* %13467, i64 16
  %13471 = bitcast i16* %13470 to <16 x i16>*
  %13472 = load <16 x i16>, <16 x i16>* %13471, align 2, !tbaa !399
  %13473 = add <16 x i16> %13434, %13427
  %13474 = add <16 x i16> %13473, %13441
  %13475 = add <16 x i16> %13474, %13448
  %13476 = add <16 x i16> %13475, %13455
  %13477 = add <16 x i16> %13476, %13462
  %13478 = add <16 x i16> %13477, %13469
  %13479 = add <16 x i16> %13437, %13430
  %13480 = add <16 x i16> %13479, %13444
  %13481 = add <16 x i16> %13480, %13451
  %13482 = add <16 x i16> %13481, %13458
  %13483 = add <16 x i16> %13482, %13465
  %13484 = add <16 x i16> %13483, %13472
  %13485 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13478, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13486 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13484, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13487 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13485, <16 x i16> %13478)
  %13488 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13486, <16 x i16> %13484)
  %13489 = shufflevector <16 x i16> %13487, <16 x i16> %13488, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13490 = lshr <32 x i16> %13489, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13491 = shufflevector <32 x i16> %13490, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13492 = add nsw i64 %13153, %.pre-phi3574
  %13493 = getelementptr inbounds i16, i16* %66, i64 %13492
  %13494 = bitcast i16* %13493 to <16 x i16>*
  store <16 x i16> %13491, <16 x i16>* %13494, align 2, !tbaa !401
  %13495 = shufflevector <32 x i16> %13490, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13496 = getelementptr inbounds i16, i16* %13493, i64 16
  %13497 = bitcast i16* %13496 to <16 x i16>*
  store <16 x i16> %13495, <16 x i16>* %13497, align 2, !tbaa !401
  %indvars.iv.next3340 = add nuw nsw i64 %indvars.iv3339, 1
  %.not2760 = icmp eq i64 %indvars.iv.next3340, %188
  br i1 %.not2760, label %"end for blur_y.s0.x.x.rebased575", label %"for blur_y.s0.x.x.rebased574"

"for blur_y.s0.x.x.rebased582":                   ; preds = %"for blur_y.s0.x.x.rebased582.preheader", %"consume blur_x590"
  %blur_y.s0.x.x.rebased584 = phi i32 [ %13648, %"consume blur_x590" ], [ 0, %"for blur_y.s0.x.x.rebased582.preheader" ]
  %13498 = add nsw i32 %blur_y.s0.x.x.rebased584, %t1670
  %a259 = shl nsw i32 %13498, 5
  %13499 = icmp sgt i32 %a14, %a259
  %b265 = select i1 %13499, i32 %a259, i32 %a14
  %13500 = icmp slt i32 %13498, 1
  %13501 = icmp sgt i32 %4, %a259
  %13502 = or i1 %13500, %13501
  br i1 %13502, label %"produce blur_x588", label %"consume blur_x590"

"end for blur_y.s0.x.x.rebased583":               ; preds = %"consume blur_x590", %"end for blur_y.s0.x.x.rebased575"
  br i1 %34, label %"produce blur_x594", label %after_bb591

"produce blur_x588":                              ; preds = %"for blur_y.s0.x.x.rebased582"
  %13503 = icmp slt i32 %b265, %4
  %blur_x.s0.x.v1.base.s589 = select i1 %13503, i32 %b265, i32 %4
  %t1077 = add nsw i32 %blur_x.s0.x.v1.base.s589, %t2081
  %13504 = sext i32 %t1077 to i64
  %13505 = getelementptr inbounds i16, i16* %read_input, i64 %13504
  %13506 = getelementptr inbounds i16, i16* %13505, i64 1
  %13507 = bitcast i16* %13506 to <16 x i16>*
  %13508 = load <16 x i16>, <16 x i16>* %13507, align 2, !tbaa !396
  %13509 = getelementptr inbounds i16, i16* %13505, i64 17
  %13510 = bitcast i16* %13509 to <16 x i16>*
  %13511 = load <16 x i16>, <16 x i16>* %13510, align 2, !tbaa !396
  %13512 = bitcast i16* %13505 to <16 x i16>*
  %13513 = load <16 x i16>, <16 x i16>* %13512, align 2, !tbaa !396
  %13514 = getelementptr inbounds i16, i16* %13505, i64 16
  %13515 = bitcast i16* %13514 to <16 x i16>*
  %13516 = load <16 x i16>, <16 x i16>* %13515, align 2, !tbaa !396
  %13517 = getelementptr inbounds i16, i16* %13505, i64 2
  %13518 = bitcast i16* %13517 to <16 x i16>*
  %13519 = load <16 x i16>, <16 x i16>* %13518, align 2, !tbaa !396
  %13520 = getelementptr inbounds i16, i16* %13505, i64 18
  %13521 = bitcast i16* %13520 to <16 x i16>*
  %13522 = load <16 x i16>, <16 x i16>* %13521, align 2, !tbaa !396
  %13523 = getelementptr inbounds i16, i16* %13505, i64 3
  %13524 = bitcast i16* %13523 to <16 x i16>*
  %13525 = load <16 x i16>, <16 x i16>* %13524, align 2, !tbaa !396
  %13526 = getelementptr inbounds i16, i16* %13505, i64 19
  %13527 = bitcast i16* %13526 to <16 x i16>*
  %13528 = load <16 x i16>, <16 x i16>* %13527, align 2, !tbaa !396
  %13529 = getelementptr inbounds i16, i16* %13505, i64 4
  %13530 = bitcast i16* %13529 to <16 x i16>*
  %13531 = load <16 x i16>, <16 x i16>* %13530, align 2, !tbaa !396
  %13532 = getelementptr inbounds i16, i16* %13505, i64 20
  %13533 = bitcast i16* %13532 to <16 x i16>*
  %13534 = load <16 x i16>, <16 x i16>* %13533, align 2, !tbaa !396
  %13535 = getelementptr inbounds i16, i16* %13505, i64 6
  %13536 = bitcast i16* %13535 to <16 x i16>*
  %13537 = load <16 x i16>, <16 x i16>* %13536, align 2, !tbaa !396
  %13538 = getelementptr inbounds i16, i16* %13505, i64 22
  %13539 = bitcast i16* %13538 to <16 x i16>*
  %13540 = load <16 x i16>, <16 x i16>* %13539, align 2, !tbaa !396
  %13541 = getelementptr inbounds i16, i16* %13505, i64 5
  %13542 = bitcast i16* %13541 to <16 x i16>*
  %13543 = load <16 x i16>, <16 x i16>* %13542, align 2, !tbaa !396
  %13544 = getelementptr inbounds i16, i16* %13505, i64 21
  %13545 = bitcast i16* %13544 to <16 x i16>*
  %13546 = load <16 x i16>, <16 x i16>* %13545, align 2, !tbaa !396
  %13547 = add <16 x i16> %13513, %13508
  %13548 = add <16 x i16> %13547, %13519
  %13549 = add <16 x i16> %13548, %13525
  %13550 = add <16 x i16> %13549, %13531
  %13551 = add <16 x i16> %13550, %13537
  %13552 = add <16 x i16> %13551, %13543
  %13553 = add <16 x i16> %13516, %13511
  %13554 = add <16 x i16> %13553, %13522
  %13555 = add <16 x i16> %13554, %13528
  %13556 = add <16 x i16> %13555, %13534
  %13557 = add <16 x i16> %13556, %13540
  %13558 = add <16 x i16> %13557, %13546
  %13559 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13552, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13560 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13558, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13561 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13559, <16 x i16> %13552)
  %13562 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13560, <16 x i16> %13558)
  %13563 = shufflevector <16 x i16> %13561, <16 x i16> %13562, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13564 = lshr <32 x i16> %13563, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13565 = shufflevector <32 x i16> %13564, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13566 = sext i32 %blur_x.s0.x.v1.base.s589 to i64
  %13567 = add nsw i64 %13566, %13329
  %13568 = getelementptr inbounds i16, i16* %blur_x, i64 %13567
  %13569 = bitcast i16* %13568 to <16 x i16>*
  store <16 x i16> %13565, <16 x i16>* %13569, align 2, !tbaa !399
  %13570 = shufflevector <32 x i16> %13564, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13571 = getelementptr inbounds i16, i16* %13568, i64 16
  %13572 = bitcast i16* %13571 to <16 x i16>*
  store <16 x i16> %13570, <16 x i16>* %13572, align 2, !tbaa !399
  br label %"consume blur_x590"

"consume blur_x590":                              ; preds = %"for blur_y.s0.x.x.rebased582", %"produce blur_x588"
  %13573 = sext i32 %b265 to i64
  %13574 = add nsw i64 %13332, %13573
  %13575 = getelementptr inbounds i16, i16* %blur_x, i64 %13574
  %13576 = bitcast i16* %13575 to <16 x i16>*
  %13577 = load <16 x i16>, <16 x i16>* %13576, align 2, !tbaa !399
  %13578 = getelementptr inbounds i16, i16* %13575, i64 16
  %13579 = bitcast i16* %13578 to <16 x i16>*
  %13580 = load <16 x i16>, <16 x i16>* %13579, align 2, !tbaa !399
  %13581 = add nsw i64 %13335, %13573
  %13582 = getelementptr inbounds i16, i16* %blur_x, i64 %13581
  %13583 = bitcast i16* %13582 to <16 x i16>*
  %13584 = load <16 x i16>, <16 x i16>* %13583, align 2, !tbaa !399
  %13585 = getelementptr inbounds i16, i16* %13582, i64 16
  %13586 = bitcast i16* %13585 to <16 x i16>*
  %13587 = load <16 x i16>, <16 x i16>* %13586, align 2, !tbaa !399
  %13588 = add nsw i64 %13338, %13573
  %13589 = getelementptr inbounds i16, i16* %blur_x, i64 %13588
  %13590 = bitcast i16* %13589 to <16 x i16>*
  %13591 = load <16 x i16>, <16 x i16>* %13590, align 2, !tbaa !399
  %13592 = getelementptr inbounds i16, i16* %13589, i64 16
  %13593 = bitcast i16* %13592 to <16 x i16>*
  %13594 = load <16 x i16>, <16 x i16>* %13593, align 2, !tbaa !399
  %13595 = add nsw i64 %13341, %13573
  %13596 = getelementptr inbounds i16, i16* %blur_x, i64 %13595
  %13597 = bitcast i16* %13596 to <16 x i16>*
  %13598 = load <16 x i16>, <16 x i16>* %13597, align 2, !tbaa !399
  %13599 = getelementptr inbounds i16, i16* %13596, i64 16
  %13600 = bitcast i16* %13599 to <16 x i16>*
  %13601 = load <16 x i16>, <16 x i16>* %13600, align 2, !tbaa !399
  %13602 = add nsw i64 %13344, %13573
  %13603 = getelementptr inbounds i16, i16* %blur_x, i64 %13602
  %13604 = bitcast i16* %13603 to <16 x i16>*
  %13605 = load <16 x i16>, <16 x i16>* %13604, align 2, !tbaa !399
  %13606 = getelementptr inbounds i16, i16* %13603, i64 16
  %13607 = bitcast i16* %13606 to <16 x i16>*
  %13608 = load <16 x i16>, <16 x i16>* %13607, align 2, !tbaa !399
  %13609 = add nsw i64 %13347, %13573
  %13610 = getelementptr inbounds i16, i16* %blur_x, i64 %13609
  %13611 = bitcast i16* %13610 to <16 x i16>*
  %13612 = load <16 x i16>, <16 x i16>* %13611, align 2, !tbaa !399
  %13613 = getelementptr inbounds i16, i16* %13610, i64 16
  %13614 = bitcast i16* %13613 to <16 x i16>*
  %13615 = load <16 x i16>, <16 x i16>* %13614, align 2, !tbaa !399
  %13616 = add nsw i64 %13350, %13573
  %13617 = getelementptr inbounds i16, i16* %blur_x, i64 %13616
  %13618 = bitcast i16* %13617 to <16 x i16>*
  %13619 = load <16 x i16>, <16 x i16>* %13618, align 2, !tbaa !399
  %13620 = getelementptr inbounds i16, i16* %13617, i64 16
  %13621 = bitcast i16* %13620 to <16 x i16>*
  %13622 = load <16 x i16>, <16 x i16>* %13621, align 2, !tbaa !399
  %13623 = add <16 x i16> %13584, %13577
  %13624 = add <16 x i16> %13623, %13591
  %13625 = add <16 x i16> %13624, %13598
  %13626 = add <16 x i16> %13625, %13605
  %13627 = add <16 x i16> %13626, %13612
  %13628 = add <16 x i16> %13627, %13619
  %13629 = add <16 x i16> %13587, %13580
  %13630 = add <16 x i16> %13629, %13594
  %13631 = add <16 x i16> %13630, %13601
  %13632 = add <16 x i16> %13631, %13608
  %13633 = add <16 x i16> %13632, %13615
  %13634 = add <16 x i16> %13633, %13622
  %13635 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13628, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13636 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13634, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13637 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13635, <16 x i16> %13628)
  %13638 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13636, <16 x i16> %13634)
  %13639 = shufflevector <16 x i16> %13637, <16 x i16> %13638, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13640 = lshr <32 x i16> %13639, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13641 = shufflevector <32 x i16> %13640, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13642 = add nsw i64 %13354, %13573
  %13643 = getelementptr inbounds i16, i16* %66, i64 %13642
  %13644 = bitcast i16* %13643 to <16 x i16>*
  store <16 x i16> %13641, <16 x i16>* %13644, align 2, !tbaa !401
  %13645 = shufflevector <32 x i16> %13640, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13646 = getelementptr inbounds i16, i16* %13643, i64 16
  %13647 = bitcast i16* %13646 to <16 x i16>*
  store <16 x i16> %13645, <16 x i16>* %13647, align 2, !tbaa !401
  %13648 = add nuw nsw i32 %blur_y.s0.x.x.rebased584, 1
  %.not2759 = icmp eq i32 %13648, %t1727
  br i1 %.not2759, label %"end for blur_y.s0.x.x.rebased583", label %"for blur_y.s0.x.x.rebased582"

after_bb591:                                      ; preds = %"end for blur_y.s0.x.x.rebased583", %"produce blur_x594"
  br i1 %100, label %"for blur_y.s0.x.x.rebased596.preheader", label %"end for blur_y.s0.x.x.rebased597", !prof !386

"for blur_y.s0.x.x.rebased596.preheader":         ; preds = %after_bb591
  %13649 = sext i32 %t1744 to i64
  %13650 = zext i32 %.pre-phi3528 to i64
  %13651 = mul nsw i64 %13650, %116
  %13652 = sub nsw i64 %13651, %96
  %13653 = zext i32 %.pre-phi3524 to i64
  %13654 = mul nsw i64 %13653, %116
  %13655 = sub nsw i64 %13654, %96
  %13656 = zext i32 %.pre-phi3534 to i64
  %13657 = mul nsw i64 %13656, %116
  %13658 = sub nsw i64 %13657, %96
  %13659 = zext i32 %.pre-phi to i64
  %13660 = mul nsw i64 %13659, %116
  %13661 = sub nsw i64 %13660, %96
  %13662 = zext i32 %.pre-phi3508 to i64
  %13663 = mul nsw i64 %13662, %116
  %13664 = sub nsw i64 %13663, %96
  %13665 = zext i32 %.pre-phi3516 to i64
  %13666 = mul nsw i64 %13665, %116
  %13667 = sub nsw i64 %13666, %96
  %13668 = zext i32 %.pre-phi3512 to i64
  %13669 = mul nsw i64 %13668, %116
  %13670 = sub nsw i64 %13669, %96
  %13671 = sext i32 %a26 to i64
  %13672 = add nsw i64 %13671, 21
  %13673 = mul nsw i64 %13672, %117
  %13674 = add nsw i64 %13673, %120
  br label %"for blur_y.s0.x.x.rebased596"

"produce blur_x594":                              ; preds = %"end for blur_y.s0.x.x.rebased583"
  %13675 = getelementptr inbounds i16, i16* %read_input, i64 %161
  %13676 = getelementptr inbounds i16, i16* %13675, i64 -31
  %13677 = bitcast i16* %13676 to <16 x i16>*
  %13678 = load <16 x i16>, <16 x i16>* %13677, align 2, !tbaa !396
  %13679 = getelementptr inbounds i16, i16* %13675, i64 -15
  %13680 = bitcast i16* %13679 to <16 x i16>*
  %13681 = load <16 x i16>, <16 x i16>* %13680, align 2, !tbaa !396
  %13682 = getelementptr inbounds i16, i16* %13675, i64 -32
  %13683 = bitcast i16* %13682 to <16 x i16>*
  %13684 = load <16 x i16>, <16 x i16>* %13683, align 2, !tbaa !396
  %13685 = getelementptr inbounds i16, i16* %13675, i64 -16
  %13686 = bitcast i16* %13685 to <16 x i16>*
  %13687 = load <16 x i16>, <16 x i16>* %13686, align 2, !tbaa !396
  %13688 = getelementptr inbounds i16, i16* %13675, i64 -30
  %13689 = bitcast i16* %13688 to <16 x i16>*
  %13690 = load <16 x i16>, <16 x i16>* %13689, align 2, !tbaa !396
  %13691 = getelementptr inbounds i16, i16* %13675, i64 -14
  %13692 = bitcast i16* %13691 to <16 x i16>*
  %13693 = load <16 x i16>, <16 x i16>* %13692, align 2, !tbaa !396
  %13694 = getelementptr inbounds i16, i16* %13675, i64 -29
  %13695 = bitcast i16* %13694 to <16 x i16>*
  %13696 = load <16 x i16>, <16 x i16>* %13695, align 2, !tbaa !396
  %13697 = getelementptr inbounds i16, i16* %13675, i64 -13
  %13698 = bitcast i16* %13697 to <16 x i16>*
  %13699 = load <16 x i16>, <16 x i16>* %13698, align 2, !tbaa !396
  %13700 = getelementptr inbounds i16, i16* %13675, i64 -28
  %13701 = bitcast i16* %13700 to <16 x i16>*
  %13702 = load <16 x i16>, <16 x i16>* %13701, align 2, !tbaa !396
  %13703 = getelementptr inbounds i16, i16* %13675, i64 -12
  %13704 = bitcast i16* %13703 to <16 x i16>*
  %13705 = load <16 x i16>, <16 x i16>* %13704, align 2, !tbaa !396
  %13706 = getelementptr inbounds i16, i16* %13675, i64 -26
  %13707 = bitcast i16* %13706 to <16 x i16>*
  %13708 = load <16 x i16>, <16 x i16>* %13707, align 2, !tbaa !396
  %13709 = getelementptr inbounds i16, i16* %13675, i64 -10
  %13710 = bitcast i16* %13709 to <16 x i16>*
  %13711 = load <16 x i16>, <16 x i16>* %13710, align 2, !tbaa !396
  %13712 = getelementptr inbounds i16, i16* %13675, i64 -27
  %13713 = bitcast i16* %13712 to <16 x i16>*
  %13714 = load <16 x i16>, <16 x i16>* %13713, align 2, !tbaa !396
  %13715 = getelementptr inbounds i16, i16* %13675, i64 -11
  %13716 = bitcast i16* %13715 to <16 x i16>*
  %13717 = load <16 x i16>, <16 x i16>* %13716, align 2, !tbaa !396
  %13718 = add <16 x i16> %13684, %13678
  %13719 = add <16 x i16> %13718, %13690
  %13720 = add <16 x i16> %13719, %13696
  %13721 = add <16 x i16> %13720, %13702
  %13722 = add <16 x i16> %13721, %13708
  %13723 = add <16 x i16> %13722, %13714
  %13724 = add <16 x i16> %13687, %13681
  %13725 = add <16 x i16> %13724, %13693
  %13726 = add <16 x i16> %13725, %13699
  %13727 = add <16 x i16> %13726, %13705
  %13728 = add <16 x i16> %13727, %13711
  %13729 = add <16 x i16> %13728, %13717
  %13730 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13723, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13731 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13729, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13732 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13730, <16 x i16> %13723)
  %13733 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13731, <16 x i16> %13729)
  %13734 = shufflevector <16 x i16> %13732, <16 x i16> %13733, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13735 = lshr <32 x i16> %13734, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13736 = shufflevector <32 x i16> %13735, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13737 = zext i32 %.pre-phi3516 to i64
  %13738 = mul nsw i64 %97, %13737
  %13739 = add nsw i64 %99, %13738
  %13740 = getelementptr inbounds i16, i16* %blur_x, i64 %13739
  %13741 = getelementptr inbounds i16, i16* %13740, i64 -32
  %13742 = bitcast i16* %13741 to <16 x i16>*
  store <16 x i16> %13736, <16 x i16>* %13742, align 2, !tbaa !399
  %13743 = shufflevector <32 x i16> %13735, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13744 = getelementptr inbounds i16, i16* %13740, i64 -16
  %13745 = bitcast i16* %13744 to <16 x i16>*
  store <16 x i16> %13743, <16 x i16>* %13745, align 2, !tbaa !399
  %13746 = zext i32 %.pre-phi3528 to i64
  %13747 = mul nsw i64 %13746, %116
  %13748 = add nsw i64 %13747, %94
  %13749 = getelementptr inbounds i16, i16* %blur_x, i64 %13748
  %13750 = getelementptr inbounds i16, i16* %13749, i64 -32
  %13751 = bitcast i16* %13750 to <16 x i16>*
  %13752 = load <16 x i16>, <16 x i16>* %13751, align 2, !tbaa !399
  %13753 = getelementptr inbounds i16, i16* %13749, i64 -16
  %13754 = bitcast i16* %13753 to <16 x i16>*
  %13755 = load <16 x i16>, <16 x i16>* %13754, align 2, !tbaa !399
  %13756 = zext i32 %.pre-phi3524 to i64
  %13757 = mul nsw i64 %13756, %116
  %13758 = add nsw i64 %13757, %94
  %13759 = getelementptr inbounds i16, i16* %blur_x, i64 %13758
  %13760 = getelementptr inbounds i16, i16* %13759, i64 -32
  %13761 = bitcast i16* %13760 to <16 x i16>*
  %13762 = load <16 x i16>, <16 x i16>* %13761, align 2, !tbaa !399
  %13763 = getelementptr inbounds i16, i16* %13759, i64 -16
  %13764 = bitcast i16* %13763 to <16 x i16>*
  %13765 = load <16 x i16>, <16 x i16>* %13764, align 2, !tbaa !399
  %13766 = zext i32 %.pre-phi3534 to i64
  %13767 = mul nsw i64 %13766, %116
  %13768 = add nsw i64 %13767, %94
  %13769 = getelementptr inbounds i16, i16* %blur_x, i64 %13768
  %13770 = getelementptr inbounds i16, i16* %13769, i64 -32
  %13771 = bitcast i16* %13770 to <16 x i16>*
  %13772 = load <16 x i16>, <16 x i16>* %13771, align 2, !tbaa !399
  %13773 = getelementptr inbounds i16, i16* %13769, i64 -16
  %13774 = bitcast i16* %13773 to <16 x i16>*
  %13775 = load <16 x i16>, <16 x i16>* %13774, align 2, !tbaa !399
  %13776 = zext i32 %.pre-phi to i64
  %13777 = mul nsw i64 %13776, %116
  %13778 = add nsw i64 %13777, %94
  %13779 = getelementptr inbounds i16, i16* %blur_x, i64 %13778
  %13780 = getelementptr inbounds i16, i16* %13779, i64 -32
  %13781 = bitcast i16* %13780 to <16 x i16>*
  %13782 = load <16 x i16>, <16 x i16>* %13781, align 2, !tbaa !399
  %13783 = getelementptr inbounds i16, i16* %13779, i64 -16
  %13784 = bitcast i16* %13783 to <16 x i16>*
  %13785 = load <16 x i16>, <16 x i16>* %13784, align 2, !tbaa !399
  %13786 = zext i32 %.pre-phi3508 to i64
  %13787 = mul nsw i64 %13786, %116
  %13788 = add nsw i64 %13787, %94
  %13789 = getelementptr inbounds i16, i16* %blur_x, i64 %13788
  %13790 = getelementptr inbounds i16, i16* %13789, i64 -32
  %13791 = bitcast i16* %13790 to <16 x i16>*
  %13792 = load <16 x i16>, <16 x i16>* %13791, align 2, !tbaa !399
  %13793 = getelementptr inbounds i16, i16* %13789, i64 -16
  %13794 = bitcast i16* %13793 to <16 x i16>*
  %13795 = load <16 x i16>, <16 x i16>* %13794, align 2, !tbaa !399
  %13796 = mul nsw i64 %13737, %116
  %13797 = add nsw i64 %13796, %94
  %13798 = getelementptr inbounds i16, i16* %blur_x, i64 %13797
  %13799 = getelementptr inbounds i16, i16* %13798, i64 -32
  %13800 = bitcast i16* %13799 to <16 x i16>*
  %13801 = load <16 x i16>, <16 x i16>* %13800, align 2, !tbaa !399
  %13802 = getelementptr inbounds i16, i16* %13798, i64 -16
  %13803 = bitcast i16* %13802 to <16 x i16>*
  %13804 = load <16 x i16>, <16 x i16>* %13803, align 2, !tbaa !399
  %13805 = zext i32 %.pre-phi3512 to i64
  %13806 = mul nsw i64 %13805, %116
  %13807 = add nsw i64 %13806, %94
  %13808 = getelementptr inbounds i16, i16* %blur_x, i64 %13807
  %13809 = getelementptr inbounds i16, i16* %13808, i64 -32
  %13810 = bitcast i16* %13809 to <16 x i16>*
  %13811 = load <16 x i16>, <16 x i16>* %13810, align 2, !tbaa !399
  %13812 = getelementptr inbounds i16, i16* %13808, i64 -16
  %13813 = bitcast i16* %13812 to <16 x i16>*
  %13814 = load <16 x i16>, <16 x i16>* %13813, align 2, !tbaa !399
  %13815 = add <16 x i16> %13762, %13752
  %13816 = add <16 x i16> %13815, %13772
  %13817 = add <16 x i16> %13816, %13782
  %13818 = add <16 x i16> %13817, %13792
  %13819 = add <16 x i16> %13818, %13801
  %13820 = add <16 x i16> %13819, %13811
  %13821 = add <16 x i16> %13765, %13755
  %13822 = add <16 x i16> %13821, %13775
  %13823 = add <16 x i16> %13822, %13785
  %13824 = add <16 x i16> %13823, %13795
  %13825 = add <16 x i16> %13824, %13804
  %13826 = add <16 x i16> %13825, %13814
  %13827 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13820, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13828 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13826, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13829 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13827, <16 x i16> %13820)
  %13830 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13828, <16 x i16> %13826)
  %13831 = shufflevector <16 x i16> %13829, <16 x i16> %13830, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13832 = lshr <32 x i16> %13831, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13833 = shufflevector <32 x i16> %13832, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13834 = sext i32 %a26 to i64
  %13835 = add nsw i64 %13834, 21
  %13836 = mul nsw i64 %13835, %117
  %13837 = add nsw i64 %119, %13836
  %13838 = getelementptr inbounds i16, i16* %66, i64 %13837
  %13839 = getelementptr inbounds i16, i16* %13838, i64 -32
  %13840 = bitcast i16* %13839 to <16 x i16>*
  store <16 x i16> %13833, <16 x i16>* %13840, align 2, !tbaa !401
  %13841 = shufflevector <32 x i16> %13832, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13842 = getelementptr inbounds i16, i16* %13838, i64 -16
  %13843 = bitcast i16* %13842 to <16 x i16>*
  store <16 x i16> %13841, <16 x i16>* %13843, align 2, !tbaa !401
  br label %after_bb591

"for blur_y.s0.x.x.rebased596":                   ; preds = %"for blur_y.s0.x.x.rebased596.preheader", %"consume blur_x603"
  %indvars.iv3342 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased596.preheader" ], [ %indvars.iv.next3343, %"consume blur_x603" ]
  %13844 = add nsw i64 %indvars.iv3342, %101
  %13845 = icmp slt i64 %13844, 1
  %13846 = trunc i64 %13844 to i32
  %13847 = shl nsw i32 %13846, 5
  %13848 = icmp sgt i32 %4, %13847
  %13849 = or i1 %13845, %13848
  br i1 %13849, label %"produce blur_x602", label %"for blur_y.s0.x.x.rebased596.consume blur_x603_crit_edge"

"for blur_y.s0.x.x.rebased596.consume blur_x603_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased596"
  %.pre3575 = shl nsw i64 %13844, 5
  br label %"consume blur_x603"

"end for blur_y.s0.x.x.rebased597":               ; preds = %"consume blur_x603", %after_bb591
  br i1 %102, label %"for blur_y.s0.x.x.rebased604.preheader", label %"end for blur_y.s0.x.x.rebased605", !prof !386

"for blur_y.s0.x.x.rebased604.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased597"
  %13850 = sext i32 %t1744 to i64
  %13851 = zext i32 %.pre-phi3528 to i64
  %13852 = mul nsw i64 %13851, %116
  %13853 = sub nsw i64 %13852, %96
  %13854 = zext i32 %.pre-phi3524 to i64
  %13855 = mul nsw i64 %13854, %116
  %13856 = sub nsw i64 %13855, %96
  %13857 = zext i32 %.pre-phi3534 to i64
  %13858 = mul nsw i64 %13857, %116
  %13859 = sub nsw i64 %13858, %96
  %13860 = zext i32 %.pre-phi to i64
  %13861 = mul nsw i64 %13860, %116
  %13862 = sub nsw i64 %13861, %96
  %13863 = zext i32 %.pre-phi3508 to i64
  %13864 = mul nsw i64 %13863, %116
  %13865 = sub nsw i64 %13864, %96
  %13866 = zext i32 %.pre-phi3516 to i64
  %13867 = mul nsw i64 %13866, %116
  %13868 = sub nsw i64 %13867, %96
  %13869 = zext i32 %.pre-phi3512 to i64
  %13870 = mul nsw i64 %13869, %116
  %13871 = sub nsw i64 %13870, %96
  %13872 = sext i32 %a26 to i64
  %13873 = add nsw i64 %13872, 21
  %13874 = mul nsw i64 %13873, %117
  %13875 = add nsw i64 %13874, %120
  br label %"for blur_y.s0.x.x.rebased604"

"produce blur_x602":                              ; preds = %"for blur_y.s0.x.x.rebased596"
  %t1088 = add nsw i32 %13847, %t2097
  %13876 = sext i32 %t1088 to i64
  %13877 = getelementptr inbounds i16, i16* %read_input, i64 %13876
  %13878 = getelementptr inbounds i16, i16* %13877, i64 1
  %13879 = bitcast i16* %13878 to <16 x i16>*
  %13880 = load <16 x i16>, <16 x i16>* %13879, align 2, !tbaa !396
  %13881 = getelementptr inbounds i16, i16* %13877, i64 17
  %13882 = bitcast i16* %13881 to <16 x i16>*
  %13883 = load <16 x i16>, <16 x i16>* %13882, align 2, !tbaa !396
  %13884 = bitcast i16* %13877 to <16 x i16>*
  %13885 = load <16 x i16>, <16 x i16>* %13884, align 2, !tbaa !396
  %13886 = getelementptr inbounds i16, i16* %13877, i64 16
  %13887 = bitcast i16* %13886 to <16 x i16>*
  %13888 = load <16 x i16>, <16 x i16>* %13887, align 2, !tbaa !396
  %13889 = getelementptr inbounds i16, i16* %13877, i64 2
  %13890 = bitcast i16* %13889 to <16 x i16>*
  %13891 = load <16 x i16>, <16 x i16>* %13890, align 2, !tbaa !396
  %13892 = getelementptr inbounds i16, i16* %13877, i64 18
  %13893 = bitcast i16* %13892 to <16 x i16>*
  %13894 = load <16 x i16>, <16 x i16>* %13893, align 2, !tbaa !396
  %13895 = getelementptr inbounds i16, i16* %13877, i64 3
  %13896 = bitcast i16* %13895 to <16 x i16>*
  %13897 = load <16 x i16>, <16 x i16>* %13896, align 2, !tbaa !396
  %13898 = getelementptr inbounds i16, i16* %13877, i64 19
  %13899 = bitcast i16* %13898 to <16 x i16>*
  %13900 = load <16 x i16>, <16 x i16>* %13899, align 2, !tbaa !396
  %13901 = getelementptr inbounds i16, i16* %13877, i64 4
  %13902 = bitcast i16* %13901 to <16 x i16>*
  %13903 = load <16 x i16>, <16 x i16>* %13902, align 2, !tbaa !396
  %13904 = getelementptr inbounds i16, i16* %13877, i64 20
  %13905 = bitcast i16* %13904 to <16 x i16>*
  %13906 = load <16 x i16>, <16 x i16>* %13905, align 2, !tbaa !396
  %13907 = getelementptr inbounds i16, i16* %13877, i64 6
  %13908 = bitcast i16* %13907 to <16 x i16>*
  %13909 = load <16 x i16>, <16 x i16>* %13908, align 2, !tbaa !396
  %13910 = getelementptr inbounds i16, i16* %13877, i64 22
  %13911 = bitcast i16* %13910 to <16 x i16>*
  %13912 = load <16 x i16>, <16 x i16>* %13911, align 2, !tbaa !396
  %13913 = getelementptr inbounds i16, i16* %13877, i64 5
  %13914 = bitcast i16* %13913 to <16 x i16>*
  %13915 = load <16 x i16>, <16 x i16>* %13914, align 2, !tbaa !396
  %13916 = getelementptr inbounds i16, i16* %13877, i64 21
  %13917 = bitcast i16* %13916 to <16 x i16>*
  %13918 = load <16 x i16>, <16 x i16>* %13917, align 2, !tbaa !396
  %13919 = add <16 x i16> %13885, %13880
  %13920 = add <16 x i16> %13919, %13891
  %13921 = add <16 x i16> %13920, %13897
  %13922 = add <16 x i16> %13921, %13903
  %13923 = add <16 x i16> %13922, %13909
  %13924 = add <16 x i16> %13923, %13915
  %13925 = add <16 x i16> %13888, %13883
  %13926 = add <16 x i16> %13925, %13894
  %13927 = add <16 x i16> %13926, %13900
  %13928 = add <16 x i16> %13927, %13906
  %13929 = add <16 x i16> %13928, %13912
  %13930 = add <16 x i16> %13929, %13918
  %13931 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13924, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13932 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13930, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %13933 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13931, <16 x i16> %13924)
  %13934 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %13932, <16 x i16> %13930)
  %13935 = shufflevector <16 x i16> %13933, <16 x i16> %13934, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13936 = lshr <32 x i16> %13935, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13937 = shufflevector <32 x i16> %13936, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13938 = shl nsw i64 %13844, 5
  %13939 = add nsw i64 %13938, %13649
  %13940 = getelementptr inbounds i16, i16* %blur_x, i64 %13939
  %13941 = bitcast i16* %13940 to <16 x i16>*
  store <16 x i16> %13937, <16 x i16>* %13941, align 2, !tbaa !399
  %13942 = shufflevector <32 x i16> %13936, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13943 = getelementptr inbounds i16, i16* %13940, i64 16
  %13944 = bitcast i16* %13943 to <16 x i16>*
  store <16 x i16> %13942, <16 x i16>* %13944, align 2, !tbaa !399
  br label %"consume blur_x603"

"consume blur_x603":                              ; preds = %"for blur_y.s0.x.x.rebased596.consume blur_x603_crit_edge", %"produce blur_x602"
  %.pre-phi3576 = phi i64 [ %.pre3575, %"for blur_y.s0.x.x.rebased596.consume blur_x603_crit_edge" ], [ %13938, %"produce blur_x602" ]
  %13945 = add nsw i64 %13652, %.pre-phi3576
  %13946 = getelementptr inbounds i16, i16* %blur_x, i64 %13945
  %13947 = bitcast i16* %13946 to <16 x i16>*
  %13948 = load <16 x i16>, <16 x i16>* %13947, align 2, !tbaa !399
  %13949 = getelementptr inbounds i16, i16* %13946, i64 16
  %13950 = bitcast i16* %13949 to <16 x i16>*
  %13951 = load <16 x i16>, <16 x i16>* %13950, align 2, !tbaa !399
  %13952 = add nsw i64 %13655, %.pre-phi3576
  %13953 = getelementptr inbounds i16, i16* %blur_x, i64 %13952
  %13954 = bitcast i16* %13953 to <16 x i16>*
  %13955 = load <16 x i16>, <16 x i16>* %13954, align 2, !tbaa !399
  %13956 = getelementptr inbounds i16, i16* %13953, i64 16
  %13957 = bitcast i16* %13956 to <16 x i16>*
  %13958 = load <16 x i16>, <16 x i16>* %13957, align 2, !tbaa !399
  %13959 = add nsw i64 %13658, %.pre-phi3576
  %13960 = getelementptr inbounds i16, i16* %blur_x, i64 %13959
  %13961 = bitcast i16* %13960 to <16 x i16>*
  %13962 = load <16 x i16>, <16 x i16>* %13961, align 2, !tbaa !399
  %13963 = getelementptr inbounds i16, i16* %13960, i64 16
  %13964 = bitcast i16* %13963 to <16 x i16>*
  %13965 = load <16 x i16>, <16 x i16>* %13964, align 2, !tbaa !399
  %13966 = add nsw i64 %13661, %.pre-phi3576
  %13967 = getelementptr inbounds i16, i16* %blur_x, i64 %13966
  %13968 = bitcast i16* %13967 to <16 x i16>*
  %13969 = load <16 x i16>, <16 x i16>* %13968, align 2, !tbaa !399
  %13970 = getelementptr inbounds i16, i16* %13967, i64 16
  %13971 = bitcast i16* %13970 to <16 x i16>*
  %13972 = load <16 x i16>, <16 x i16>* %13971, align 2, !tbaa !399
  %13973 = add nsw i64 %13664, %.pre-phi3576
  %13974 = getelementptr inbounds i16, i16* %blur_x, i64 %13973
  %13975 = bitcast i16* %13974 to <16 x i16>*
  %13976 = load <16 x i16>, <16 x i16>* %13975, align 2, !tbaa !399
  %13977 = getelementptr inbounds i16, i16* %13974, i64 16
  %13978 = bitcast i16* %13977 to <16 x i16>*
  %13979 = load <16 x i16>, <16 x i16>* %13978, align 2, !tbaa !399
  %13980 = add nsw i64 %13667, %.pre-phi3576
  %13981 = getelementptr inbounds i16, i16* %blur_x, i64 %13980
  %13982 = bitcast i16* %13981 to <16 x i16>*
  %13983 = load <16 x i16>, <16 x i16>* %13982, align 2, !tbaa !399
  %13984 = getelementptr inbounds i16, i16* %13981, i64 16
  %13985 = bitcast i16* %13984 to <16 x i16>*
  %13986 = load <16 x i16>, <16 x i16>* %13985, align 2, !tbaa !399
  %13987 = add nsw i64 %13670, %.pre-phi3576
  %13988 = getelementptr inbounds i16, i16* %blur_x, i64 %13987
  %13989 = bitcast i16* %13988 to <16 x i16>*
  %13990 = load <16 x i16>, <16 x i16>* %13989, align 2, !tbaa !399
  %13991 = getelementptr inbounds i16, i16* %13988, i64 16
  %13992 = bitcast i16* %13991 to <16 x i16>*
  %13993 = load <16 x i16>, <16 x i16>* %13992, align 2, !tbaa !399
  %13994 = add <16 x i16> %13955, %13948
  %13995 = add <16 x i16> %13994, %13962
  %13996 = add <16 x i16> %13995, %13969
  %13997 = add <16 x i16> %13996, %13976
  %13998 = add <16 x i16> %13997, %13983
  %13999 = add <16 x i16> %13998, %13990
  %14000 = add <16 x i16> %13958, %13951
  %14001 = add <16 x i16> %14000, %13965
  %14002 = add <16 x i16> %14001, %13972
  %14003 = add <16 x i16> %14002, %13979
  %14004 = add <16 x i16> %14003, %13986
  %14005 = add <16 x i16> %14004, %13993
  %14006 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13999, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14007 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14005, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14008 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14006, <16 x i16> %13999)
  %14009 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14007, <16 x i16> %14005)
  %14010 = shufflevector <16 x i16> %14008, <16 x i16> %14009, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14011 = lshr <32 x i16> %14010, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14012 = shufflevector <32 x i16> %14011, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14013 = add nsw i64 %13674, %.pre-phi3576
  %14014 = getelementptr inbounds i16, i16* %66, i64 %14013
  %14015 = bitcast i16* %14014 to <16 x i16>*
  store <16 x i16> %14012, <16 x i16>* %14015, align 2, !tbaa !401
  %14016 = shufflevector <32 x i16> %14011, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14017 = getelementptr inbounds i16, i16* %14014, i64 16
  %14018 = bitcast i16* %14017 to <16 x i16>*
  store <16 x i16> %14016, <16 x i16>* %14018, align 2, !tbaa !401
  %indvars.iv.next3343 = add nuw nsw i64 %indvars.iv3342, 1
  %.not2758 = icmp eq i64 %indvars.iv.next3343, %188
  br i1 %.not2758, label %"end for blur_y.s0.x.x.rebased597", label %"for blur_y.s0.x.x.rebased596"

"for blur_y.s0.x.x.rebased604":                   ; preds = %"for blur_y.s0.x.x.rebased604.preheader", %"consume blur_x612"
  %blur_y.s0.x.x.rebased606 = phi i32 [ %14169, %"consume blur_x612" ], [ 0, %"for blur_y.s0.x.x.rebased604.preheader" ]
  %14019 = add nsw i32 %blur_y.s0.x.x.rebased606, %t1670
  %a266 = shl nsw i32 %14019, 5
  %14020 = icmp sgt i32 %a14, %a266
  %b272 = select i1 %14020, i32 %a266, i32 %a14
  %14021 = icmp slt i32 %14019, 1
  %14022 = icmp sgt i32 %4, %a266
  %14023 = or i1 %14021, %14022
  br i1 %14023, label %"produce blur_x610", label %"consume blur_x612"

"end for blur_y.s0.x.x.rebased605":               ; preds = %"consume blur_x612", %"end for blur_y.s0.x.x.rebased597"
  br i1 %34, label %"produce blur_x616", label %after_bb613

"produce blur_x610":                              ; preds = %"for blur_y.s0.x.x.rebased604"
  %14024 = icmp slt i32 %b272, %4
  %blur_x.s0.x.v1.base.s611 = select i1 %14024, i32 %b272, i32 %4
  %t1093 = add nsw i32 %blur_x.s0.x.v1.base.s611, %t2097
  %14025 = sext i32 %t1093 to i64
  %14026 = getelementptr inbounds i16, i16* %read_input, i64 %14025
  %14027 = getelementptr inbounds i16, i16* %14026, i64 1
  %14028 = bitcast i16* %14027 to <16 x i16>*
  %14029 = load <16 x i16>, <16 x i16>* %14028, align 2, !tbaa !396
  %14030 = getelementptr inbounds i16, i16* %14026, i64 17
  %14031 = bitcast i16* %14030 to <16 x i16>*
  %14032 = load <16 x i16>, <16 x i16>* %14031, align 2, !tbaa !396
  %14033 = bitcast i16* %14026 to <16 x i16>*
  %14034 = load <16 x i16>, <16 x i16>* %14033, align 2, !tbaa !396
  %14035 = getelementptr inbounds i16, i16* %14026, i64 16
  %14036 = bitcast i16* %14035 to <16 x i16>*
  %14037 = load <16 x i16>, <16 x i16>* %14036, align 2, !tbaa !396
  %14038 = getelementptr inbounds i16, i16* %14026, i64 2
  %14039 = bitcast i16* %14038 to <16 x i16>*
  %14040 = load <16 x i16>, <16 x i16>* %14039, align 2, !tbaa !396
  %14041 = getelementptr inbounds i16, i16* %14026, i64 18
  %14042 = bitcast i16* %14041 to <16 x i16>*
  %14043 = load <16 x i16>, <16 x i16>* %14042, align 2, !tbaa !396
  %14044 = getelementptr inbounds i16, i16* %14026, i64 3
  %14045 = bitcast i16* %14044 to <16 x i16>*
  %14046 = load <16 x i16>, <16 x i16>* %14045, align 2, !tbaa !396
  %14047 = getelementptr inbounds i16, i16* %14026, i64 19
  %14048 = bitcast i16* %14047 to <16 x i16>*
  %14049 = load <16 x i16>, <16 x i16>* %14048, align 2, !tbaa !396
  %14050 = getelementptr inbounds i16, i16* %14026, i64 4
  %14051 = bitcast i16* %14050 to <16 x i16>*
  %14052 = load <16 x i16>, <16 x i16>* %14051, align 2, !tbaa !396
  %14053 = getelementptr inbounds i16, i16* %14026, i64 20
  %14054 = bitcast i16* %14053 to <16 x i16>*
  %14055 = load <16 x i16>, <16 x i16>* %14054, align 2, !tbaa !396
  %14056 = getelementptr inbounds i16, i16* %14026, i64 6
  %14057 = bitcast i16* %14056 to <16 x i16>*
  %14058 = load <16 x i16>, <16 x i16>* %14057, align 2, !tbaa !396
  %14059 = getelementptr inbounds i16, i16* %14026, i64 22
  %14060 = bitcast i16* %14059 to <16 x i16>*
  %14061 = load <16 x i16>, <16 x i16>* %14060, align 2, !tbaa !396
  %14062 = getelementptr inbounds i16, i16* %14026, i64 5
  %14063 = bitcast i16* %14062 to <16 x i16>*
  %14064 = load <16 x i16>, <16 x i16>* %14063, align 2, !tbaa !396
  %14065 = getelementptr inbounds i16, i16* %14026, i64 21
  %14066 = bitcast i16* %14065 to <16 x i16>*
  %14067 = load <16 x i16>, <16 x i16>* %14066, align 2, !tbaa !396
  %14068 = add <16 x i16> %14034, %14029
  %14069 = add <16 x i16> %14068, %14040
  %14070 = add <16 x i16> %14069, %14046
  %14071 = add <16 x i16> %14070, %14052
  %14072 = add <16 x i16> %14071, %14058
  %14073 = add <16 x i16> %14072, %14064
  %14074 = add <16 x i16> %14037, %14032
  %14075 = add <16 x i16> %14074, %14043
  %14076 = add <16 x i16> %14075, %14049
  %14077 = add <16 x i16> %14076, %14055
  %14078 = add <16 x i16> %14077, %14061
  %14079 = add <16 x i16> %14078, %14067
  %14080 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14073, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14081 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14079, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14082 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14080, <16 x i16> %14073)
  %14083 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14081, <16 x i16> %14079)
  %14084 = shufflevector <16 x i16> %14082, <16 x i16> %14083, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14085 = lshr <32 x i16> %14084, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14086 = shufflevector <32 x i16> %14085, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14087 = sext i32 %blur_x.s0.x.v1.base.s611 to i64
  %14088 = add nsw i64 %14087, %13850
  %14089 = getelementptr inbounds i16, i16* %blur_x, i64 %14088
  %14090 = bitcast i16* %14089 to <16 x i16>*
  store <16 x i16> %14086, <16 x i16>* %14090, align 2, !tbaa !399
  %14091 = shufflevector <32 x i16> %14085, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14092 = getelementptr inbounds i16, i16* %14089, i64 16
  %14093 = bitcast i16* %14092 to <16 x i16>*
  store <16 x i16> %14091, <16 x i16>* %14093, align 2, !tbaa !399
  br label %"consume blur_x612"

"consume blur_x612":                              ; preds = %"for blur_y.s0.x.x.rebased604", %"produce blur_x610"
  %14094 = sext i32 %b272 to i64
  %14095 = add nsw i64 %13853, %14094
  %14096 = getelementptr inbounds i16, i16* %blur_x, i64 %14095
  %14097 = bitcast i16* %14096 to <16 x i16>*
  %14098 = load <16 x i16>, <16 x i16>* %14097, align 2, !tbaa !399
  %14099 = getelementptr inbounds i16, i16* %14096, i64 16
  %14100 = bitcast i16* %14099 to <16 x i16>*
  %14101 = load <16 x i16>, <16 x i16>* %14100, align 2, !tbaa !399
  %14102 = add nsw i64 %13856, %14094
  %14103 = getelementptr inbounds i16, i16* %blur_x, i64 %14102
  %14104 = bitcast i16* %14103 to <16 x i16>*
  %14105 = load <16 x i16>, <16 x i16>* %14104, align 2, !tbaa !399
  %14106 = getelementptr inbounds i16, i16* %14103, i64 16
  %14107 = bitcast i16* %14106 to <16 x i16>*
  %14108 = load <16 x i16>, <16 x i16>* %14107, align 2, !tbaa !399
  %14109 = add nsw i64 %13859, %14094
  %14110 = getelementptr inbounds i16, i16* %blur_x, i64 %14109
  %14111 = bitcast i16* %14110 to <16 x i16>*
  %14112 = load <16 x i16>, <16 x i16>* %14111, align 2, !tbaa !399
  %14113 = getelementptr inbounds i16, i16* %14110, i64 16
  %14114 = bitcast i16* %14113 to <16 x i16>*
  %14115 = load <16 x i16>, <16 x i16>* %14114, align 2, !tbaa !399
  %14116 = add nsw i64 %13862, %14094
  %14117 = getelementptr inbounds i16, i16* %blur_x, i64 %14116
  %14118 = bitcast i16* %14117 to <16 x i16>*
  %14119 = load <16 x i16>, <16 x i16>* %14118, align 2, !tbaa !399
  %14120 = getelementptr inbounds i16, i16* %14117, i64 16
  %14121 = bitcast i16* %14120 to <16 x i16>*
  %14122 = load <16 x i16>, <16 x i16>* %14121, align 2, !tbaa !399
  %14123 = add nsw i64 %13865, %14094
  %14124 = getelementptr inbounds i16, i16* %blur_x, i64 %14123
  %14125 = bitcast i16* %14124 to <16 x i16>*
  %14126 = load <16 x i16>, <16 x i16>* %14125, align 2, !tbaa !399
  %14127 = getelementptr inbounds i16, i16* %14124, i64 16
  %14128 = bitcast i16* %14127 to <16 x i16>*
  %14129 = load <16 x i16>, <16 x i16>* %14128, align 2, !tbaa !399
  %14130 = add nsw i64 %13868, %14094
  %14131 = getelementptr inbounds i16, i16* %blur_x, i64 %14130
  %14132 = bitcast i16* %14131 to <16 x i16>*
  %14133 = load <16 x i16>, <16 x i16>* %14132, align 2, !tbaa !399
  %14134 = getelementptr inbounds i16, i16* %14131, i64 16
  %14135 = bitcast i16* %14134 to <16 x i16>*
  %14136 = load <16 x i16>, <16 x i16>* %14135, align 2, !tbaa !399
  %14137 = add nsw i64 %13871, %14094
  %14138 = getelementptr inbounds i16, i16* %blur_x, i64 %14137
  %14139 = bitcast i16* %14138 to <16 x i16>*
  %14140 = load <16 x i16>, <16 x i16>* %14139, align 2, !tbaa !399
  %14141 = getelementptr inbounds i16, i16* %14138, i64 16
  %14142 = bitcast i16* %14141 to <16 x i16>*
  %14143 = load <16 x i16>, <16 x i16>* %14142, align 2, !tbaa !399
  %14144 = add <16 x i16> %14105, %14098
  %14145 = add <16 x i16> %14144, %14112
  %14146 = add <16 x i16> %14145, %14119
  %14147 = add <16 x i16> %14146, %14126
  %14148 = add <16 x i16> %14147, %14133
  %14149 = add <16 x i16> %14148, %14140
  %14150 = add <16 x i16> %14108, %14101
  %14151 = add <16 x i16> %14150, %14115
  %14152 = add <16 x i16> %14151, %14122
  %14153 = add <16 x i16> %14152, %14129
  %14154 = add <16 x i16> %14153, %14136
  %14155 = add <16 x i16> %14154, %14143
  %14156 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14149, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14157 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14155, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14158 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14156, <16 x i16> %14149)
  %14159 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14157, <16 x i16> %14155)
  %14160 = shufflevector <16 x i16> %14158, <16 x i16> %14159, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14161 = lshr <32 x i16> %14160, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14162 = shufflevector <32 x i16> %14161, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14163 = add nsw i64 %13875, %14094
  %14164 = getelementptr inbounds i16, i16* %66, i64 %14163
  %14165 = bitcast i16* %14164 to <16 x i16>*
  store <16 x i16> %14162, <16 x i16>* %14165, align 2, !tbaa !401
  %14166 = shufflevector <32 x i16> %14161, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14167 = getelementptr inbounds i16, i16* %14164, i64 16
  %14168 = bitcast i16* %14167 to <16 x i16>*
  store <16 x i16> %14166, <16 x i16>* %14168, align 2, !tbaa !401
  %14169 = add nuw nsw i32 %blur_y.s0.x.x.rebased606, 1
  %.not2757 = icmp eq i32 %14169, %t1727
  br i1 %.not2757, label %"end for blur_y.s0.x.x.rebased605", label %"for blur_y.s0.x.x.rebased604"

after_bb613:                                      ; preds = %"end for blur_y.s0.x.x.rebased605", %"produce blur_x616"
  br i1 %100, label %"for blur_y.s0.x.x.rebased618.preheader", label %"end for blur_y.s0.x.x.rebased619", !prof !386

"for blur_y.s0.x.x.rebased618.preheader":         ; preds = %after_bb613
  %14170 = sext i32 %t1750 to i64
  %14171 = zext i32 %.pre-phi3534 to i64
  %14172 = mul nsw i64 %14171, %116
  %14173 = sub nsw i64 %14172, %96
  %14174 = zext i32 %.pre-phi3528 to i64
  %14175 = mul nsw i64 %14174, %116
  %14176 = sub nsw i64 %14175, %96
  %14177 = zext i32 %.pre-phi to i64
  %14178 = mul nsw i64 %14177, %116
  %14179 = sub nsw i64 %14178, %96
  %14180 = zext i32 %.pre-phi3508 to i64
  %14181 = mul nsw i64 %14180, %116
  %14182 = sub nsw i64 %14181, %96
  %14183 = zext i32 %.pre-phi3512 to i64
  %14184 = mul nsw i64 %14183, %116
  %14185 = sub nsw i64 %14184, %96
  %14186 = zext i32 %.pre-phi3520 to i64
  %14187 = mul nsw i64 %14186, %116
  %14188 = sub nsw i64 %14187, %96
  %14189 = zext i32 %.pre-phi3516 to i64
  %14190 = mul nsw i64 %14189, %116
  %14191 = sub nsw i64 %14190, %96
  %14192 = sext i32 %a26 to i64
  %14193 = add nsw i64 %14192, 22
  %14194 = mul nsw i64 %14193, %117
  %14195 = add nsw i64 %14194, %120
  br label %"for blur_y.s0.x.x.rebased618"

"produce blur_x616":                              ; preds = %"end for blur_y.s0.x.x.rebased605"
  %14196 = getelementptr inbounds i16, i16* %read_input, i64 %163
  %14197 = getelementptr inbounds i16, i16* %14196, i64 -31
  %14198 = bitcast i16* %14197 to <16 x i16>*
  %14199 = load <16 x i16>, <16 x i16>* %14198, align 2, !tbaa !396
  %14200 = getelementptr inbounds i16, i16* %14196, i64 -15
  %14201 = bitcast i16* %14200 to <16 x i16>*
  %14202 = load <16 x i16>, <16 x i16>* %14201, align 2, !tbaa !396
  %14203 = getelementptr inbounds i16, i16* %14196, i64 -32
  %14204 = bitcast i16* %14203 to <16 x i16>*
  %14205 = load <16 x i16>, <16 x i16>* %14204, align 2, !tbaa !396
  %14206 = getelementptr inbounds i16, i16* %14196, i64 -16
  %14207 = bitcast i16* %14206 to <16 x i16>*
  %14208 = load <16 x i16>, <16 x i16>* %14207, align 2, !tbaa !396
  %14209 = getelementptr inbounds i16, i16* %14196, i64 -30
  %14210 = bitcast i16* %14209 to <16 x i16>*
  %14211 = load <16 x i16>, <16 x i16>* %14210, align 2, !tbaa !396
  %14212 = getelementptr inbounds i16, i16* %14196, i64 -14
  %14213 = bitcast i16* %14212 to <16 x i16>*
  %14214 = load <16 x i16>, <16 x i16>* %14213, align 2, !tbaa !396
  %14215 = getelementptr inbounds i16, i16* %14196, i64 -29
  %14216 = bitcast i16* %14215 to <16 x i16>*
  %14217 = load <16 x i16>, <16 x i16>* %14216, align 2, !tbaa !396
  %14218 = getelementptr inbounds i16, i16* %14196, i64 -13
  %14219 = bitcast i16* %14218 to <16 x i16>*
  %14220 = load <16 x i16>, <16 x i16>* %14219, align 2, !tbaa !396
  %14221 = getelementptr inbounds i16, i16* %14196, i64 -28
  %14222 = bitcast i16* %14221 to <16 x i16>*
  %14223 = load <16 x i16>, <16 x i16>* %14222, align 2, !tbaa !396
  %14224 = getelementptr inbounds i16, i16* %14196, i64 -12
  %14225 = bitcast i16* %14224 to <16 x i16>*
  %14226 = load <16 x i16>, <16 x i16>* %14225, align 2, !tbaa !396
  %14227 = getelementptr inbounds i16, i16* %14196, i64 -26
  %14228 = bitcast i16* %14227 to <16 x i16>*
  %14229 = load <16 x i16>, <16 x i16>* %14228, align 2, !tbaa !396
  %14230 = getelementptr inbounds i16, i16* %14196, i64 -10
  %14231 = bitcast i16* %14230 to <16 x i16>*
  %14232 = load <16 x i16>, <16 x i16>* %14231, align 2, !tbaa !396
  %14233 = getelementptr inbounds i16, i16* %14196, i64 -27
  %14234 = bitcast i16* %14233 to <16 x i16>*
  %14235 = load <16 x i16>, <16 x i16>* %14234, align 2, !tbaa !396
  %14236 = getelementptr inbounds i16, i16* %14196, i64 -11
  %14237 = bitcast i16* %14236 to <16 x i16>*
  %14238 = load <16 x i16>, <16 x i16>* %14237, align 2, !tbaa !396
  %14239 = add <16 x i16> %14205, %14199
  %14240 = add <16 x i16> %14239, %14211
  %14241 = add <16 x i16> %14240, %14217
  %14242 = add <16 x i16> %14241, %14223
  %14243 = add <16 x i16> %14242, %14229
  %14244 = add <16 x i16> %14243, %14235
  %14245 = add <16 x i16> %14208, %14202
  %14246 = add <16 x i16> %14245, %14214
  %14247 = add <16 x i16> %14246, %14220
  %14248 = add <16 x i16> %14247, %14226
  %14249 = add <16 x i16> %14248, %14232
  %14250 = add <16 x i16> %14249, %14238
  %14251 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14244, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14252 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14250, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14253 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14251, <16 x i16> %14244)
  %14254 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14252, <16 x i16> %14250)
  %14255 = shufflevector <16 x i16> %14253, <16 x i16> %14254, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14256 = lshr <32 x i16> %14255, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14257 = shufflevector <32 x i16> %14256, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14258 = zext i32 %.pre-phi3520 to i64
  %14259 = mul nsw i64 %97, %14258
  %14260 = add nsw i64 %99, %14259
  %14261 = getelementptr inbounds i16, i16* %blur_x, i64 %14260
  %14262 = getelementptr inbounds i16, i16* %14261, i64 -32
  %14263 = bitcast i16* %14262 to <16 x i16>*
  store <16 x i16> %14257, <16 x i16>* %14263, align 2, !tbaa !399
  %14264 = shufflevector <32 x i16> %14256, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14265 = getelementptr inbounds i16, i16* %14261, i64 -16
  %14266 = bitcast i16* %14265 to <16 x i16>*
  store <16 x i16> %14264, <16 x i16>* %14266, align 2, !tbaa !399
  %14267 = zext i32 %.pre-phi3534 to i64
  %14268 = mul nsw i64 %14267, %116
  %14269 = add nsw i64 %14268, %94
  %14270 = getelementptr inbounds i16, i16* %blur_x, i64 %14269
  %14271 = getelementptr inbounds i16, i16* %14270, i64 -32
  %14272 = bitcast i16* %14271 to <16 x i16>*
  %14273 = load <16 x i16>, <16 x i16>* %14272, align 2, !tbaa !399
  %14274 = getelementptr inbounds i16, i16* %14270, i64 -16
  %14275 = bitcast i16* %14274 to <16 x i16>*
  %14276 = load <16 x i16>, <16 x i16>* %14275, align 2, !tbaa !399
  %14277 = zext i32 %.pre-phi3528 to i64
  %14278 = mul nsw i64 %14277, %116
  %14279 = add nsw i64 %14278, %94
  %14280 = getelementptr inbounds i16, i16* %blur_x, i64 %14279
  %14281 = getelementptr inbounds i16, i16* %14280, i64 -32
  %14282 = bitcast i16* %14281 to <16 x i16>*
  %14283 = load <16 x i16>, <16 x i16>* %14282, align 2, !tbaa !399
  %14284 = getelementptr inbounds i16, i16* %14280, i64 -16
  %14285 = bitcast i16* %14284 to <16 x i16>*
  %14286 = load <16 x i16>, <16 x i16>* %14285, align 2, !tbaa !399
  %14287 = zext i32 %.pre-phi to i64
  %14288 = mul nsw i64 %14287, %116
  %14289 = add nsw i64 %14288, %94
  %14290 = getelementptr inbounds i16, i16* %blur_x, i64 %14289
  %14291 = getelementptr inbounds i16, i16* %14290, i64 -32
  %14292 = bitcast i16* %14291 to <16 x i16>*
  %14293 = load <16 x i16>, <16 x i16>* %14292, align 2, !tbaa !399
  %14294 = getelementptr inbounds i16, i16* %14290, i64 -16
  %14295 = bitcast i16* %14294 to <16 x i16>*
  %14296 = load <16 x i16>, <16 x i16>* %14295, align 2, !tbaa !399
  %14297 = zext i32 %.pre-phi3508 to i64
  %14298 = mul nsw i64 %14297, %116
  %14299 = add nsw i64 %14298, %94
  %14300 = getelementptr inbounds i16, i16* %blur_x, i64 %14299
  %14301 = getelementptr inbounds i16, i16* %14300, i64 -32
  %14302 = bitcast i16* %14301 to <16 x i16>*
  %14303 = load <16 x i16>, <16 x i16>* %14302, align 2, !tbaa !399
  %14304 = getelementptr inbounds i16, i16* %14300, i64 -16
  %14305 = bitcast i16* %14304 to <16 x i16>*
  %14306 = load <16 x i16>, <16 x i16>* %14305, align 2, !tbaa !399
  %14307 = zext i32 %.pre-phi3512 to i64
  %14308 = mul nsw i64 %14307, %116
  %14309 = add nsw i64 %14308, %94
  %14310 = getelementptr inbounds i16, i16* %blur_x, i64 %14309
  %14311 = getelementptr inbounds i16, i16* %14310, i64 -32
  %14312 = bitcast i16* %14311 to <16 x i16>*
  %14313 = load <16 x i16>, <16 x i16>* %14312, align 2, !tbaa !399
  %14314 = getelementptr inbounds i16, i16* %14310, i64 -16
  %14315 = bitcast i16* %14314 to <16 x i16>*
  %14316 = load <16 x i16>, <16 x i16>* %14315, align 2, !tbaa !399
  %14317 = mul nsw i64 %14258, %116
  %14318 = add nsw i64 %14317, %94
  %14319 = getelementptr inbounds i16, i16* %blur_x, i64 %14318
  %14320 = getelementptr inbounds i16, i16* %14319, i64 -32
  %14321 = bitcast i16* %14320 to <16 x i16>*
  %14322 = load <16 x i16>, <16 x i16>* %14321, align 2, !tbaa !399
  %14323 = getelementptr inbounds i16, i16* %14319, i64 -16
  %14324 = bitcast i16* %14323 to <16 x i16>*
  %14325 = load <16 x i16>, <16 x i16>* %14324, align 2, !tbaa !399
  %14326 = zext i32 %.pre-phi3516 to i64
  %14327 = mul nsw i64 %14326, %116
  %14328 = add nsw i64 %14327, %94
  %14329 = getelementptr inbounds i16, i16* %blur_x, i64 %14328
  %14330 = getelementptr inbounds i16, i16* %14329, i64 -32
  %14331 = bitcast i16* %14330 to <16 x i16>*
  %14332 = load <16 x i16>, <16 x i16>* %14331, align 2, !tbaa !399
  %14333 = getelementptr inbounds i16, i16* %14329, i64 -16
  %14334 = bitcast i16* %14333 to <16 x i16>*
  %14335 = load <16 x i16>, <16 x i16>* %14334, align 2, !tbaa !399
  %14336 = add <16 x i16> %14283, %14273
  %14337 = add <16 x i16> %14336, %14293
  %14338 = add <16 x i16> %14337, %14303
  %14339 = add <16 x i16> %14338, %14313
  %14340 = add <16 x i16> %14339, %14322
  %14341 = add <16 x i16> %14340, %14332
  %14342 = add <16 x i16> %14286, %14276
  %14343 = add <16 x i16> %14342, %14296
  %14344 = add <16 x i16> %14343, %14306
  %14345 = add <16 x i16> %14344, %14316
  %14346 = add <16 x i16> %14345, %14325
  %14347 = add <16 x i16> %14346, %14335
  %14348 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14341, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14349 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14347, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14350 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14348, <16 x i16> %14341)
  %14351 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14349, <16 x i16> %14347)
  %14352 = shufflevector <16 x i16> %14350, <16 x i16> %14351, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14353 = lshr <32 x i16> %14352, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14354 = shufflevector <32 x i16> %14353, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14355 = sext i32 %a26 to i64
  %14356 = add nsw i64 %14355, 22
  %14357 = mul nsw i64 %14356, %117
  %14358 = add nsw i64 %119, %14357
  %14359 = getelementptr inbounds i16, i16* %66, i64 %14358
  %14360 = getelementptr inbounds i16, i16* %14359, i64 -32
  %14361 = bitcast i16* %14360 to <16 x i16>*
  store <16 x i16> %14354, <16 x i16>* %14361, align 2, !tbaa !401
  %14362 = shufflevector <32 x i16> %14353, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14363 = getelementptr inbounds i16, i16* %14359, i64 -16
  %14364 = bitcast i16* %14363 to <16 x i16>*
  store <16 x i16> %14362, <16 x i16>* %14364, align 2, !tbaa !401
  br label %after_bb613

"for blur_y.s0.x.x.rebased618":                   ; preds = %"for blur_y.s0.x.x.rebased618.preheader", %"consume blur_x625"
  %indvars.iv3345 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased618.preheader" ], [ %indvars.iv.next3346, %"consume blur_x625" ]
  %14365 = add nsw i64 %indvars.iv3345, %101
  %14366 = icmp slt i64 %14365, 1
  %14367 = trunc i64 %14365 to i32
  %14368 = shl nsw i32 %14367, 5
  %14369 = icmp sgt i32 %4, %14368
  %14370 = or i1 %14366, %14369
  br i1 %14370, label %"produce blur_x624", label %"for blur_y.s0.x.x.rebased618.consume blur_x625_crit_edge"

"for blur_y.s0.x.x.rebased618.consume blur_x625_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased618"
  %.pre3577 = shl nsw i64 %14365, 5
  br label %"consume blur_x625"

"end for blur_y.s0.x.x.rebased619":               ; preds = %"consume blur_x625", %after_bb613
  br i1 %102, label %"for blur_y.s0.x.x.rebased626.preheader", label %"end for blur_y.s0.x.x.rebased627", !prof !386

"for blur_y.s0.x.x.rebased626.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased619"
  %14371 = sext i32 %t1750 to i64
  %14372 = zext i32 %.pre-phi3534 to i64
  %14373 = mul nsw i64 %14372, %116
  %14374 = sub nsw i64 %14373, %96
  %14375 = zext i32 %.pre-phi3528 to i64
  %14376 = mul nsw i64 %14375, %116
  %14377 = sub nsw i64 %14376, %96
  %14378 = zext i32 %.pre-phi to i64
  %14379 = mul nsw i64 %14378, %116
  %14380 = sub nsw i64 %14379, %96
  %14381 = zext i32 %.pre-phi3508 to i64
  %14382 = mul nsw i64 %14381, %116
  %14383 = sub nsw i64 %14382, %96
  %14384 = zext i32 %.pre-phi3512 to i64
  %14385 = mul nsw i64 %14384, %116
  %14386 = sub nsw i64 %14385, %96
  %14387 = zext i32 %.pre-phi3520 to i64
  %14388 = mul nsw i64 %14387, %116
  %14389 = sub nsw i64 %14388, %96
  %14390 = zext i32 %.pre-phi3516 to i64
  %14391 = mul nsw i64 %14390, %116
  %14392 = sub nsw i64 %14391, %96
  %14393 = sext i32 %a26 to i64
  %14394 = add nsw i64 %14393, 22
  %14395 = mul nsw i64 %14394, %117
  %14396 = add nsw i64 %14395, %120
  br label %"for blur_y.s0.x.x.rebased626"

"produce blur_x624":                              ; preds = %"for blur_y.s0.x.x.rebased618"
  %t1104 = add nsw i32 %14368, %t2113
  %14397 = sext i32 %t1104 to i64
  %14398 = getelementptr inbounds i16, i16* %read_input, i64 %14397
  %14399 = getelementptr inbounds i16, i16* %14398, i64 1
  %14400 = bitcast i16* %14399 to <16 x i16>*
  %14401 = load <16 x i16>, <16 x i16>* %14400, align 2, !tbaa !396
  %14402 = getelementptr inbounds i16, i16* %14398, i64 17
  %14403 = bitcast i16* %14402 to <16 x i16>*
  %14404 = load <16 x i16>, <16 x i16>* %14403, align 2, !tbaa !396
  %14405 = bitcast i16* %14398 to <16 x i16>*
  %14406 = load <16 x i16>, <16 x i16>* %14405, align 2, !tbaa !396
  %14407 = getelementptr inbounds i16, i16* %14398, i64 16
  %14408 = bitcast i16* %14407 to <16 x i16>*
  %14409 = load <16 x i16>, <16 x i16>* %14408, align 2, !tbaa !396
  %14410 = getelementptr inbounds i16, i16* %14398, i64 2
  %14411 = bitcast i16* %14410 to <16 x i16>*
  %14412 = load <16 x i16>, <16 x i16>* %14411, align 2, !tbaa !396
  %14413 = getelementptr inbounds i16, i16* %14398, i64 18
  %14414 = bitcast i16* %14413 to <16 x i16>*
  %14415 = load <16 x i16>, <16 x i16>* %14414, align 2, !tbaa !396
  %14416 = getelementptr inbounds i16, i16* %14398, i64 3
  %14417 = bitcast i16* %14416 to <16 x i16>*
  %14418 = load <16 x i16>, <16 x i16>* %14417, align 2, !tbaa !396
  %14419 = getelementptr inbounds i16, i16* %14398, i64 19
  %14420 = bitcast i16* %14419 to <16 x i16>*
  %14421 = load <16 x i16>, <16 x i16>* %14420, align 2, !tbaa !396
  %14422 = getelementptr inbounds i16, i16* %14398, i64 4
  %14423 = bitcast i16* %14422 to <16 x i16>*
  %14424 = load <16 x i16>, <16 x i16>* %14423, align 2, !tbaa !396
  %14425 = getelementptr inbounds i16, i16* %14398, i64 20
  %14426 = bitcast i16* %14425 to <16 x i16>*
  %14427 = load <16 x i16>, <16 x i16>* %14426, align 2, !tbaa !396
  %14428 = getelementptr inbounds i16, i16* %14398, i64 6
  %14429 = bitcast i16* %14428 to <16 x i16>*
  %14430 = load <16 x i16>, <16 x i16>* %14429, align 2, !tbaa !396
  %14431 = getelementptr inbounds i16, i16* %14398, i64 22
  %14432 = bitcast i16* %14431 to <16 x i16>*
  %14433 = load <16 x i16>, <16 x i16>* %14432, align 2, !tbaa !396
  %14434 = getelementptr inbounds i16, i16* %14398, i64 5
  %14435 = bitcast i16* %14434 to <16 x i16>*
  %14436 = load <16 x i16>, <16 x i16>* %14435, align 2, !tbaa !396
  %14437 = getelementptr inbounds i16, i16* %14398, i64 21
  %14438 = bitcast i16* %14437 to <16 x i16>*
  %14439 = load <16 x i16>, <16 x i16>* %14438, align 2, !tbaa !396
  %14440 = add <16 x i16> %14406, %14401
  %14441 = add <16 x i16> %14440, %14412
  %14442 = add <16 x i16> %14441, %14418
  %14443 = add <16 x i16> %14442, %14424
  %14444 = add <16 x i16> %14443, %14430
  %14445 = add <16 x i16> %14444, %14436
  %14446 = add <16 x i16> %14409, %14404
  %14447 = add <16 x i16> %14446, %14415
  %14448 = add <16 x i16> %14447, %14421
  %14449 = add <16 x i16> %14448, %14427
  %14450 = add <16 x i16> %14449, %14433
  %14451 = add <16 x i16> %14450, %14439
  %14452 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14445, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14453 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14451, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14454 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14452, <16 x i16> %14445)
  %14455 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14453, <16 x i16> %14451)
  %14456 = shufflevector <16 x i16> %14454, <16 x i16> %14455, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14457 = lshr <32 x i16> %14456, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14458 = shufflevector <32 x i16> %14457, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14459 = shl nsw i64 %14365, 5
  %14460 = add nsw i64 %14459, %14170
  %14461 = getelementptr inbounds i16, i16* %blur_x, i64 %14460
  %14462 = bitcast i16* %14461 to <16 x i16>*
  store <16 x i16> %14458, <16 x i16>* %14462, align 2, !tbaa !399
  %14463 = shufflevector <32 x i16> %14457, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14464 = getelementptr inbounds i16, i16* %14461, i64 16
  %14465 = bitcast i16* %14464 to <16 x i16>*
  store <16 x i16> %14463, <16 x i16>* %14465, align 2, !tbaa !399
  br label %"consume blur_x625"

"consume blur_x625":                              ; preds = %"for blur_y.s0.x.x.rebased618.consume blur_x625_crit_edge", %"produce blur_x624"
  %.pre-phi3578 = phi i64 [ %.pre3577, %"for blur_y.s0.x.x.rebased618.consume blur_x625_crit_edge" ], [ %14459, %"produce blur_x624" ]
  %14466 = add nsw i64 %14173, %.pre-phi3578
  %14467 = getelementptr inbounds i16, i16* %blur_x, i64 %14466
  %14468 = bitcast i16* %14467 to <16 x i16>*
  %14469 = load <16 x i16>, <16 x i16>* %14468, align 2, !tbaa !399
  %14470 = getelementptr inbounds i16, i16* %14467, i64 16
  %14471 = bitcast i16* %14470 to <16 x i16>*
  %14472 = load <16 x i16>, <16 x i16>* %14471, align 2, !tbaa !399
  %14473 = add nsw i64 %14176, %.pre-phi3578
  %14474 = getelementptr inbounds i16, i16* %blur_x, i64 %14473
  %14475 = bitcast i16* %14474 to <16 x i16>*
  %14476 = load <16 x i16>, <16 x i16>* %14475, align 2, !tbaa !399
  %14477 = getelementptr inbounds i16, i16* %14474, i64 16
  %14478 = bitcast i16* %14477 to <16 x i16>*
  %14479 = load <16 x i16>, <16 x i16>* %14478, align 2, !tbaa !399
  %14480 = add nsw i64 %14179, %.pre-phi3578
  %14481 = getelementptr inbounds i16, i16* %blur_x, i64 %14480
  %14482 = bitcast i16* %14481 to <16 x i16>*
  %14483 = load <16 x i16>, <16 x i16>* %14482, align 2, !tbaa !399
  %14484 = getelementptr inbounds i16, i16* %14481, i64 16
  %14485 = bitcast i16* %14484 to <16 x i16>*
  %14486 = load <16 x i16>, <16 x i16>* %14485, align 2, !tbaa !399
  %14487 = add nsw i64 %14182, %.pre-phi3578
  %14488 = getelementptr inbounds i16, i16* %blur_x, i64 %14487
  %14489 = bitcast i16* %14488 to <16 x i16>*
  %14490 = load <16 x i16>, <16 x i16>* %14489, align 2, !tbaa !399
  %14491 = getelementptr inbounds i16, i16* %14488, i64 16
  %14492 = bitcast i16* %14491 to <16 x i16>*
  %14493 = load <16 x i16>, <16 x i16>* %14492, align 2, !tbaa !399
  %14494 = add nsw i64 %14185, %.pre-phi3578
  %14495 = getelementptr inbounds i16, i16* %blur_x, i64 %14494
  %14496 = bitcast i16* %14495 to <16 x i16>*
  %14497 = load <16 x i16>, <16 x i16>* %14496, align 2, !tbaa !399
  %14498 = getelementptr inbounds i16, i16* %14495, i64 16
  %14499 = bitcast i16* %14498 to <16 x i16>*
  %14500 = load <16 x i16>, <16 x i16>* %14499, align 2, !tbaa !399
  %14501 = add nsw i64 %14188, %.pre-phi3578
  %14502 = getelementptr inbounds i16, i16* %blur_x, i64 %14501
  %14503 = bitcast i16* %14502 to <16 x i16>*
  %14504 = load <16 x i16>, <16 x i16>* %14503, align 2, !tbaa !399
  %14505 = getelementptr inbounds i16, i16* %14502, i64 16
  %14506 = bitcast i16* %14505 to <16 x i16>*
  %14507 = load <16 x i16>, <16 x i16>* %14506, align 2, !tbaa !399
  %14508 = add nsw i64 %14191, %.pre-phi3578
  %14509 = getelementptr inbounds i16, i16* %blur_x, i64 %14508
  %14510 = bitcast i16* %14509 to <16 x i16>*
  %14511 = load <16 x i16>, <16 x i16>* %14510, align 2, !tbaa !399
  %14512 = getelementptr inbounds i16, i16* %14509, i64 16
  %14513 = bitcast i16* %14512 to <16 x i16>*
  %14514 = load <16 x i16>, <16 x i16>* %14513, align 2, !tbaa !399
  %14515 = add <16 x i16> %14476, %14469
  %14516 = add <16 x i16> %14515, %14483
  %14517 = add <16 x i16> %14516, %14490
  %14518 = add <16 x i16> %14517, %14497
  %14519 = add <16 x i16> %14518, %14504
  %14520 = add <16 x i16> %14519, %14511
  %14521 = add <16 x i16> %14479, %14472
  %14522 = add <16 x i16> %14521, %14486
  %14523 = add <16 x i16> %14522, %14493
  %14524 = add <16 x i16> %14523, %14500
  %14525 = add <16 x i16> %14524, %14507
  %14526 = add <16 x i16> %14525, %14514
  %14527 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14520, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14528 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14526, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14529 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14527, <16 x i16> %14520)
  %14530 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14528, <16 x i16> %14526)
  %14531 = shufflevector <16 x i16> %14529, <16 x i16> %14530, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14532 = lshr <32 x i16> %14531, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14533 = shufflevector <32 x i16> %14532, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14534 = add nsw i64 %14195, %.pre-phi3578
  %14535 = getelementptr inbounds i16, i16* %66, i64 %14534
  %14536 = bitcast i16* %14535 to <16 x i16>*
  store <16 x i16> %14533, <16 x i16>* %14536, align 2, !tbaa !401
  %14537 = shufflevector <32 x i16> %14532, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14538 = getelementptr inbounds i16, i16* %14535, i64 16
  %14539 = bitcast i16* %14538 to <16 x i16>*
  store <16 x i16> %14537, <16 x i16>* %14539, align 2, !tbaa !401
  %indvars.iv.next3346 = add nuw nsw i64 %indvars.iv3345, 1
  %.not2756 = icmp eq i64 %indvars.iv.next3346, %188
  br i1 %.not2756, label %"end for blur_y.s0.x.x.rebased619", label %"for blur_y.s0.x.x.rebased618"

"for blur_y.s0.x.x.rebased626":                   ; preds = %"for blur_y.s0.x.x.rebased626.preheader", %"consume blur_x634"
  %blur_y.s0.x.x.rebased628 = phi i32 [ %14690, %"consume blur_x634" ], [ 0, %"for blur_y.s0.x.x.rebased626.preheader" ]
  %14540 = add nsw i32 %blur_y.s0.x.x.rebased628, %t1670
  %a273 = shl nsw i32 %14540, 5
  %14541 = icmp sgt i32 %a14, %a273
  %b279 = select i1 %14541, i32 %a273, i32 %a14
  %14542 = icmp slt i32 %14540, 1
  %14543 = icmp sgt i32 %4, %a273
  %14544 = or i1 %14542, %14543
  br i1 %14544, label %"produce blur_x632", label %"consume blur_x634"

"end for blur_y.s0.x.x.rebased627":               ; preds = %"consume blur_x634", %"end for blur_y.s0.x.x.rebased619"
  br i1 %34, label %"produce blur_x638", label %after_bb635

"produce blur_x632":                              ; preds = %"for blur_y.s0.x.x.rebased626"
  %14545 = icmp slt i32 %b279, %4
  %blur_x.s0.x.v1.base.s633 = select i1 %14545, i32 %b279, i32 %4
  %t1109 = add nsw i32 %blur_x.s0.x.v1.base.s633, %t2113
  %14546 = sext i32 %t1109 to i64
  %14547 = getelementptr inbounds i16, i16* %read_input, i64 %14546
  %14548 = getelementptr inbounds i16, i16* %14547, i64 1
  %14549 = bitcast i16* %14548 to <16 x i16>*
  %14550 = load <16 x i16>, <16 x i16>* %14549, align 2, !tbaa !396
  %14551 = getelementptr inbounds i16, i16* %14547, i64 17
  %14552 = bitcast i16* %14551 to <16 x i16>*
  %14553 = load <16 x i16>, <16 x i16>* %14552, align 2, !tbaa !396
  %14554 = bitcast i16* %14547 to <16 x i16>*
  %14555 = load <16 x i16>, <16 x i16>* %14554, align 2, !tbaa !396
  %14556 = getelementptr inbounds i16, i16* %14547, i64 16
  %14557 = bitcast i16* %14556 to <16 x i16>*
  %14558 = load <16 x i16>, <16 x i16>* %14557, align 2, !tbaa !396
  %14559 = getelementptr inbounds i16, i16* %14547, i64 2
  %14560 = bitcast i16* %14559 to <16 x i16>*
  %14561 = load <16 x i16>, <16 x i16>* %14560, align 2, !tbaa !396
  %14562 = getelementptr inbounds i16, i16* %14547, i64 18
  %14563 = bitcast i16* %14562 to <16 x i16>*
  %14564 = load <16 x i16>, <16 x i16>* %14563, align 2, !tbaa !396
  %14565 = getelementptr inbounds i16, i16* %14547, i64 3
  %14566 = bitcast i16* %14565 to <16 x i16>*
  %14567 = load <16 x i16>, <16 x i16>* %14566, align 2, !tbaa !396
  %14568 = getelementptr inbounds i16, i16* %14547, i64 19
  %14569 = bitcast i16* %14568 to <16 x i16>*
  %14570 = load <16 x i16>, <16 x i16>* %14569, align 2, !tbaa !396
  %14571 = getelementptr inbounds i16, i16* %14547, i64 4
  %14572 = bitcast i16* %14571 to <16 x i16>*
  %14573 = load <16 x i16>, <16 x i16>* %14572, align 2, !tbaa !396
  %14574 = getelementptr inbounds i16, i16* %14547, i64 20
  %14575 = bitcast i16* %14574 to <16 x i16>*
  %14576 = load <16 x i16>, <16 x i16>* %14575, align 2, !tbaa !396
  %14577 = getelementptr inbounds i16, i16* %14547, i64 6
  %14578 = bitcast i16* %14577 to <16 x i16>*
  %14579 = load <16 x i16>, <16 x i16>* %14578, align 2, !tbaa !396
  %14580 = getelementptr inbounds i16, i16* %14547, i64 22
  %14581 = bitcast i16* %14580 to <16 x i16>*
  %14582 = load <16 x i16>, <16 x i16>* %14581, align 2, !tbaa !396
  %14583 = getelementptr inbounds i16, i16* %14547, i64 5
  %14584 = bitcast i16* %14583 to <16 x i16>*
  %14585 = load <16 x i16>, <16 x i16>* %14584, align 2, !tbaa !396
  %14586 = getelementptr inbounds i16, i16* %14547, i64 21
  %14587 = bitcast i16* %14586 to <16 x i16>*
  %14588 = load <16 x i16>, <16 x i16>* %14587, align 2, !tbaa !396
  %14589 = add <16 x i16> %14555, %14550
  %14590 = add <16 x i16> %14589, %14561
  %14591 = add <16 x i16> %14590, %14567
  %14592 = add <16 x i16> %14591, %14573
  %14593 = add <16 x i16> %14592, %14579
  %14594 = add <16 x i16> %14593, %14585
  %14595 = add <16 x i16> %14558, %14553
  %14596 = add <16 x i16> %14595, %14564
  %14597 = add <16 x i16> %14596, %14570
  %14598 = add <16 x i16> %14597, %14576
  %14599 = add <16 x i16> %14598, %14582
  %14600 = add <16 x i16> %14599, %14588
  %14601 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14594, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14602 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14600, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14603 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14601, <16 x i16> %14594)
  %14604 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14602, <16 x i16> %14600)
  %14605 = shufflevector <16 x i16> %14603, <16 x i16> %14604, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14606 = lshr <32 x i16> %14605, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14607 = shufflevector <32 x i16> %14606, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14608 = sext i32 %blur_x.s0.x.v1.base.s633 to i64
  %14609 = add nsw i64 %14608, %14371
  %14610 = getelementptr inbounds i16, i16* %blur_x, i64 %14609
  %14611 = bitcast i16* %14610 to <16 x i16>*
  store <16 x i16> %14607, <16 x i16>* %14611, align 2, !tbaa !399
  %14612 = shufflevector <32 x i16> %14606, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14613 = getelementptr inbounds i16, i16* %14610, i64 16
  %14614 = bitcast i16* %14613 to <16 x i16>*
  store <16 x i16> %14612, <16 x i16>* %14614, align 2, !tbaa !399
  br label %"consume blur_x634"

"consume blur_x634":                              ; preds = %"for blur_y.s0.x.x.rebased626", %"produce blur_x632"
  %14615 = sext i32 %b279 to i64
  %14616 = add nsw i64 %14374, %14615
  %14617 = getelementptr inbounds i16, i16* %blur_x, i64 %14616
  %14618 = bitcast i16* %14617 to <16 x i16>*
  %14619 = load <16 x i16>, <16 x i16>* %14618, align 2, !tbaa !399
  %14620 = getelementptr inbounds i16, i16* %14617, i64 16
  %14621 = bitcast i16* %14620 to <16 x i16>*
  %14622 = load <16 x i16>, <16 x i16>* %14621, align 2, !tbaa !399
  %14623 = add nsw i64 %14377, %14615
  %14624 = getelementptr inbounds i16, i16* %blur_x, i64 %14623
  %14625 = bitcast i16* %14624 to <16 x i16>*
  %14626 = load <16 x i16>, <16 x i16>* %14625, align 2, !tbaa !399
  %14627 = getelementptr inbounds i16, i16* %14624, i64 16
  %14628 = bitcast i16* %14627 to <16 x i16>*
  %14629 = load <16 x i16>, <16 x i16>* %14628, align 2, !tbaa !399
  %14630 = add nsw i64 %14380, %14615
  %14631 = getelementptr inbounds i16, i16* %blur_x, i64 %14630
  %14632 = bitcast i16* %14631 to <16 x i16>*
  %14633 = load <16 x i16>, <16 x i16>* %14632, align 2, !tbaa !399
  %14634 = getelementptr inbounds i16, i16* %14631, i64 16
  %14635 = bitcast i16* %14634 to <16 x i16>*
  %14636 = load <16 x i16>, <16 x i16>* %14635, align 2, !tbaa !399
  %14637 = add nsw i64 %14383, %14615
  %14638 = getelementptr inbounds i16, i16* %blur_x, i64 %14637
  %14639 = bitcast i16* %14638 to <16 x i16>*
  %14640 = load <16 x i16>, <16 x i16>* %14639, align 2, !tbaa !399
  %14641 = getelementptr inbounds i16, i16* %14638, i64 16
  %14642 = bitcast i16* %14641 to <16 x i16>*
  %14643 = load <16 x i16>, <16 x i16>* %14642, align 2, !tbaa !399
  %14644 = add nsw i64 %14386, %14615
  %14645 = getelementptr inbounds i16, i16* %blur_x, i64 %14644
  %14646 = bitcast i16* %14645 to <16 x i16>*
  %14647 = load <16 x i16>, <16 x i16>* %14646, align 2, !tbaa !399
  %14648 = getelementptr inbounds i16, i16* %14645, i64 16
  %14649 = bitcast i16* %14648 to <16 x i16>*
  %14650 = load <16 x i16>, <16 x i16>* %14649, align 2, !tbaa !399
  %14651 = add nsw i64 %14389, %14615
  %14652 = getelementptr inbounds i16, i16* %blur_x, i64 %14651
  %14653 = bitcast i16* %14652 to <16 x i16>*
  %14654 = load <16 x i16>, <16 x i16>* %14653, align 2, !tbaa !399
  %14655 = getelementptr inbounds i16, i16* %14652, i64 16
  %14656 = bitcast i16* %14655 to <16 x i16>*
  %14657 = load <16 x i16>, <16 x i16>* %14656, align 2, !tbaa !399
  %14658 = add nsw i64 %14392, %14615
  %14659 = getelementptr inbounds i16, i16* %blur_x, i64 %14658
  %14660 = bitcast i16* %14659 to <16 x i16>*
  %14661 = load <16 x i16>, <16 x i16>* %14660, align 2, !tbaa !399
  %14662 = getelementptr inbounds i16, i16* %14659, i64 16
  %14663 = bitcast i16* %14662 to <16 x i16>*
  %14664 = load <16 x i16>, <16 x i16>* %14663, align 2, !tbaa !399
  %14665 = add <16 x i16> %14626, %14619
  %14666 = add <16 x i16> %14665, %14633
  %14667 = add <16 x i16> %14666, %14640
  %14668 = add <16 x i16> %14667, %14647
  %14669 = add <16 x i16> %14668, %14654
  %14670 = add <16 x i16> %14669, %14661
  %14671 = add <16 x i16> %14629, %14622
  %14672 = add <16 x i16> %14671, %14636
  %14673 = add <16 x i16> %14672, %14643
  %14674 = add <16 x i16> %14673, %14650
  %14675 = add <16 x i16> %14674, %14657
  %14676 = add <16 x i16> %14675, %14664
  %14677 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14670, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14678 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14676, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14679 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14677, <16 x i16> %14670)
  %14680 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14678, <16 x i16> %14676)
  %14681 = shufflevector <16 x i16> %14679, <16 x i16> %14680, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14682 = lshr <32 x i16> %14681, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14683 = shufflevector <32 x i16> %14682, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14684 = add nsw i64 %14396, %14615
  %14685 = getelementptr inbounds i16, i16* %66, i64 %14684
  %14686 = bitcast i16* %14685 to <16 x i16>*
  store <16 x i16> %14683, <16 x i16>* %14686, align 2, !tbaa !401
  %14687 = shufflevector <32 x i16> %14682, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14688 = getelementptr inbounds i16, i16* %14685, i64 16
  %14689 = bitcast i16* %14688 to <16 x i16>*
  store <16 x i16> %14687, <16 x i16>* %14689, align 2, !tbaa !401
  %14690 = add nuw nsw i32 %blur_y.s0.x.x.rebased628, 1
  %.not2755 = icmp eq i32 %14690, %t1727
  br i1 %.not2755, label %"end for blur_y.s0.x.x.rebased627", label %"for blur_y.s0.x.x.rebased626"

after_bb635:                                      ; preds = %"end for blur_y.s0.x.x.rebased627", %"produce blur_x638"
  br i1 %100, label %"for blur_y.s0.x.x.rebased640.preheader", label %"end for blur_y.s0.x.x.rebased641", !prof !386

"for blur_y.s0.x.x.rebased640.preheader":         ; preds = %after_bb635
  %14691 = sext i32 %t1756 to i64
  %14692 = zext i32 %.pre-phi to i64
  %14693 = mul nsw i64 %14692, %116
  %14694 = sub nsw i64 %14693, %96
  %14695 = zext i32 %.pre-phi3534 to i64
  %14696 = mul nsw i64 %14695, %116
  %14697 = sub nsw i64 %14696, %96
  %14698 = zext i32 %.pre-phi3508 to i64
  %14699 = mul nsw i64 %14698, %116
  %14700 = sub nsw i64 %14699, %96
  %14701 = zext i32 %.pre-phi3512 to i64
  %14702 = mul nsw i64 %14701, %116
  %14703 = sub nsw i64 %14702, %96
  %14704 = zext i32 %.pre-phi3516 to i64
  %14705 = mul nsw i64 %14704, %116
  %14706 = sub nsw i64 %14705, %96
  %14707 = zext i32 %.pre-phi3524 to i64
  %14708 = mul nsw i64 %14707, %116
  %14709 = sub nsw i64 %14708, %96
  %14710 = zext i32 %.pre-phi3520 to i64
  %14711 = mul nsw i64 %14710, %116
  %14712 = sub nsw i64 %14711, %96
  %14713 = sext i32 %a26 to i64
  %14714 = add nsw i64 %14713, 23
  %14715 = mul nsw i64 %14714, %117
  %14716 = add nsw i64 %14715, %120
  br label %"for blur_y.s0.x.x.rebased640"

"produce blur_x638":                              ; preds = %"end for blur_y.s0.x.x.rebased627"
  %14717 = getelementptr inbounds i16, i16* %read_input, i64 %165
  %14718 = getelementptr inbounds i16, i16* %14717, i64 -31
  %14719 = bitcast i16* %14718 to <16 x i16>*
  %14720 = load <16 x i16>, <16 x i16>* %14719, align 2, !tbaa !396
  %14721 = getelementptr inbounds i16, i16* %14717, i64 -15
  %14722 = bitcast i16* %14721 to <16 x i16>*
  %14723 = load <16 x i16>, <16 x i16>* %14722, align 2, !tbaa !396
  %14724 = getelementptr inbounds i16, i16* %14717, i64 -32
  %14725 = bitcast i16* %14724 to <16 x i16>*
  %14726 = load <16 x i16>, <16 x i16>* %14725, align 2, !tbaa !396
  %14727 = getelementptr inbounds i16, i16* %14717, i64 -16
  %14728 = bitcast i16* %14727 to <16 x i16>*
  %14729 = load <16 x i16>, <16 x i16>* %14728, align 2, !tbaa !396
  %14730 = getelementptr inbounds i16, i16* %14717, i64 -30
  %14731 = bitcast i16* %14730 to <16 x i16>*
  %14732 = load <16 x i16>, <16 x i16>* %14731, align 2, !tbaa !396
  %14733 = getelementptr inbounds i16, i16* %14717, i64 -14
  %14734 = bitcast i16* %14733 to <16 x i16>*
  %14735 = load <16 x i16>, <16 x i16>* %14734, align 2, !tbaa !396
  %14736 = getelementptr inbounds i16, i16* %14717, i64 -29
  %14737 = bitcast i16* %14736 to <16 x i16>*
  %14738 = load <16 x i16>, <16 x i16>* %14737, align 2, !tbaa !396
  %14739 = getelementptr inbounds i16, i16* %14717, i64 -13
  %14740 = bitcast i16* %14739 to <16 x i16>*
  %14741 = load <16 x i16>, <16 x i16>* %14740, align 2, !tbaa !396
  %14742 = getelementptr inbounds i16, i16* %14717, i64 -28
  %14743 = bitcast i16* %14742 to <16 x i16>*
  %14744 = load <16 x i16>, <16 x i16>* %14743, align 2, !tbaa !396
  %14745 = getelementptr inbounds i16, i16* %14717, i64 -12
  %14746 = bitcast i16* %14745 to <16 x i16>*
  %14747 = load <16 x i16>, <16 x i16>* %14746, align 2, !tbaa !396
  %14748 = getelementptr inbounds i16, i16* %14717, i64 -26
  %14749 = bitcast i16* %14748 to <16 x i16>*
  %14750 = load <16 x i16>, <16 x i16>* %14749, align 2, !tbaa !396
  %14751 = getelementptr inbounds i16, i16* %14717, i64 -10
  %14752 = bitcast i16* %14751 to <16 x i16>*
  %14753 = load <16 x i16>, <16 x i16>* %14752, align 2, !tbaa !396
  %14754 = getelementptr inbounds i16, i16* %14717, i64 -27
  %14755 = bitcast i16* %14754 to <16 x i16>*
  %14756 = load <16 x i16>, <16 x i16>* %14755, align 2, !tbaa !396
  %14757 = getelementptr inbounds i16, i16* %14717, i64 -11
  %14758 = bitcast i16* %14757 to <16 x i16>*
  %14759 = load <16 x i16>, <16 x i16>* %14758, align 2, !tbaa !396
  %14760 = add <16 x i16> %14726, %14720
  %14761 = add <16 x i16> %14760, %14732
  %14762 = add <16 x i16> %14761, %14738
  %14763 = add <16 x i16> %14762, %14744
  %14764 = add <16 x i16> %14763, %14750
  %14765 = add <16 x i16> %14764, %14756
  %14766 = add <16 x i16> %14729, %14723
  %14767 = add <16 x i16> %14766, %14735
  %14768 = add <16 x i16> %14767, %14741
  %14769 = add <16 x i16> %14768, %14747
  %14770 = add <16 x i16> %14769, %14753
  %14771 = add <16 x i16> %14770, %14759
  %14772 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14765, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14773 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14771, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14774 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14772, <16 x i16> %14765)
  %14775 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14773, <16 x i16> %14771)
  %14776 = shufflevector <16 x i16> %14774, <16 x i16> %14775, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14777 = lshr <32 x i16> %14776, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14778 = shufflevector <32 x i16> %14777, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14779 = zext i32 %.pre-phi3524 to i64
  %14780 = mul nsw i64 %97, %14779
  %14781 = add nsw i64 %99, %14780
  %14782 = getelementptr inbounds i16, i16* %blur_x, i64 %14781
  %14783 = getelementptr inbounds i16, i16* %14782, i64 -32
  %14784 = bitcast i16* %14783 to <16 x i16>*
  store <16 x i16> %14778, <16 x i16>* %14784, align 2, !tbaa !399
  %14785 = shufflevector <32 x i16> %14777, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14786 = getelementptr inbounds i16, i16* %14782, i64 -16
  %14787 = bitcast i16* %14786 to <16 x i16>*
  store <16 x i16> %14785, <16 x i16>* %14787, align 2, !tbaa !399
  %14788 = zext i32 %.pre-phi to i64
  %14789 = mul nsw i64 %14788, %116
  %14790 = add nsw i64 %14789, %94
  %14791 = getelementptr inbounds i16, i16* %blur_x, i64 %14790
  %14792 = getelementptr inbounds i16, i16* %14791, i64 -32
  %14793 = bitcast i16* %14792 to <16 x i16>*
  %14794 = load <16 x i16>, <16 x i16>* %14793, align 2, !tbaa !399
  %14795 = getelementptr inbounds i16, i16* %14791, i64 -16
  %14796 = bitcast i16* %14795 to <16 x i16>*
  %14797 = load <16 x i16>, <16 x i16>* %14796, align 2, !tbaa !399
  %14798 = zext i32 %.pre-phi3534 to i64
  %14799 = mul nsw i64 %14798, %116
  %14800 = add nsw i64 %14799, %94
  %14801 = getelementptr inbounds i16, i16* %blur_x, i64 %14800
  %14802 = getelementptr inbounds i16, i16* %14801, i64 -32
  %14803 = bitcast i16* %14802 to <16 x i16>*
  %14804 = load <16 x i16>, <16 x i16>* %14803, align 2, !tbaa !399
  %14805 = getelementptr inbounds i16, i16* %14801, i64 -16
  %14806 = bitcast i16* %14805 to <16 x i16>*
  %14807 = load <16 x i16>, <16 x i16>* %14806, align 2, !tbaa !399
  %14808 = zext i32 %.pre-phi3508 to i64
  %14809 = mul nsw i64 %14808, %116
  %14810 = add nsw i64 %14809, %94
  %14811 = getelementptr inbounds i16, i16* %blur_x, i64 %14810
  %14812 = getelementptr inbounds i16, i16* %14811, i64 -32
  %14813 = bitcast i16* %14812 to <16 x i16>*
  %14814 = load <16 x i16>, <16 x i16>* %14813, align 2, !tbaa !399
  %14815 = getelementptr inbounds i16, i16* %14811, i64 -16
  %14816 = bitcast i16* %14815 to <16 x i16>*
  %14817 = load <16 x i16>, <16 x i16>* %14816, align 2, !tbaa !399
  %14818 = zext i32 %.pre-phi3512 to i64
  %14819 = mul nsw i64 %14818, %116
  %14820 = add nsw i64 %14819, %94
  %14821 = getelementptr inbounds i16, i16* %blur_x, i64 %14820
  %14822 = getelementptr inbounds i16, i16* %14821, i64 -32
  %14823 = bitcast i16* %14822 to <16 x i16>*
  %14824 = load <16 x i16>, <16 x i16>* %14823, align 2, !tbaa !399
  %14825 = getelementptr inbounds i16, i16* %14821, i64 -16
  %14826 = bitcast i16* %14825 to <16 x i16>*
  %14827 = load <16 x i16>, <16 x i16>* %14826, align 2, !tbaa !399
  %14828 = zext i32 %.pre-phi3516 to i64
  %14829 = mul nsw i64 %14828, %116
  %14830 = add nsw i64 %14829, %94
  %14831 = getelementptr inbounds i16, i16* %blur_x, i64 %14830
  %14832 = getelementptr inbounds i16, i16* %14831, i64 -32
  %14833 = bitcast i16* %14832 to <16 x i16>*
  %14834 = load <16 x i16>, <16 x i16>* %14833, align 2, !tbaa !399
  %14835 = getelementptr inbounds i16, i16* %14831, i64 -16
  %14836 = bitcast i16* %14835 to <16 x i16>*
  %14837 = load <16 x i16>, <16 x i16>* %14836, align 2, !tbaa !399
  %14838 = mul nsw i64 %14779, %116
  %14839 = add nsw i64 %14838, %94
  %14840 = getelementptr inbounds i16, i16* %blur_x, i64 %14839
  %14841 = getelementptr inbounds i16, i16* %14840, i64 -32
  %14842 = bitcast i16* %14841 to <16 x i16>*
  %14843 = load <16 x i16>, <16 x i16>* %14842, align 2, !tbaa !399
  %14844 = getelementptr inbounds i16, i16* %14840, i64 -16
  %14845 = bitcast i16* %14844 to <16 x i16>*
  %14846 = load <16 x i16>, <16 x i16>* %14845, align 2, !tbaa !399
  %14847 = zext i32 %.pre-phi3520 to i64
  %14848 = mul nsw i64 %14847, %116
  %14849 = add nsw i64 %14848, %94
  %14850 = getelementptr inbounds i16, i16* %blur_x, i64 %14849
  %14851 = getelementptr inbounds i16, i16* %14850, i64 -32
  %14852 = bitcast i16* %14851 to <16 x i16>*
  %14853 = load <16 x i16>, <16 x i16>* %14852, align 2, !tbaa !399
  %14854 = getelementptr inbounds i16, i16* %14850, i64 -16
  %14855 = bitcast i16* %14854 to <16 x i16>*
  %14856 = load <16 x i16>, <16 x i16>* %14855, align 2, !tbaa !399
  %14857 = add <16 x i16> %14804, %14794
  %14858 = add <16 x i16> %14857, %14814
  %14859 = add <16 x i16> %14858, %14824
  %14860 = add <16 x i16> %14859, %14834
  %14861 = add <16 x i16> %14860, %14843
  %14862 = add <16 x i16> %14861, %14853
  %14863 = add <16 x i16> %14807, %14797
  %14864 = add <16 x i16> %14863, %14817
  %14865 = add <16 x i16> %14864, %14827
  %14866 = add <16 x i16> %14865, %14837
  %14867 = add <16 x i16> %14866, %14846
  %14868 = add <16 x i16> %14867, %14856
  %14869 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14862, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14870 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14868, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14871 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14869, <16 x i16> %14862)
  %14872 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14870, <16 x i16> %14868)
  %14873 = shufflevector <16 x i16> %14871, <16 x i16> %14872, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14874 = lshr <32 x i16> %14873, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14875 = shufflevector <32 x i16> %14874, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14876 = sext i32 %a26 to i64
  %14877 = add nsw i64 %14876, 23
  %14878 = mul nsw i64 %14877, %117
  %14879 = add nsw i64 %119, %14878
  %14880 = getelementptr inbounds i16, i16* %66, i64 %14879
  %14881 = getelementptr inbounds i16, i16* %14880, i64 -32
  %14882 = bitcast i16* %14881 to <16 x i16>*
  store <16 x i16> %14875, <16 x i16>* %14882, align 2, !tbaa !401
  %14883 = shufflevector <32 x i16> %14874, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14884 = getelementptr inbounds i16, i16* %14880, i64 -16
  %14885 = bitcast i16* %14884 to <16 x i16>*
  store <16 x i16> %14883, <16 x i16>* %14885, align 2, !tbaa !401
  br label %after_bb635

"for blur_y.s0.x.x.rebased640":                   ; preds = %"for blur_y.s0.x.x.rebased640.preheader", %"consume blur_x647"
  %indvars.iv3348 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased640.preheader" ], [ %indvars.iv.next3349, %"consume blur_x647" ]
  %14886 = add nsw i64 %indvars.iv3348, %101
  %14887 = icmp slt i64 %14886, 1
  %14888 = trunc i64 %14886 to i32
  %14889 = shl nsw i32 %14888, 5
  %14890 = icmp sgt i32 %4, %14889
  %14891 = or i1 %14887, %14890
  br i1 %14891, label %"produce blur_x646", label %"for blur_y.s0.x.x.rebased640.consume blur_x647_crit_edge"

"for blur_y.s0.x.x.rebased640.consume blur_x647_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased640"
  %.pre3579 = shl nsw i64 %14886, 5
  br label %"consume blur_x647"

"end for blur_y.s0.x.x.rebased641":               ; preds = %"consume blur_x647", %after_bb635
  br i1 %102, label %"for blur_y.s0.x.x.rebased648.preheader", label %"end for blur_y.s0.x.x.rebased649", !prof !386

"for blur_y.s0.x.x.rebased648.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased641"
  %14892 = sext i32 %t1756 to i64
  %14893 = zext i32 %.pre-phi to i64
  %14894 = mul nsw i64 %14893, %116
  %14895 = sub nsw i64 %14894, %96
  %14896 = zext i32 %.pre-phi3534 to i64
  %14897 = mul nsw i64 %14896, %116
  %14898 = sub nsw i64 %14897, %96
  %14899 = zext i32 %.pre-phi3508 to i64
  %14900 = mul nsw i64 %14899, %116
  %14901 = sub nsw i64 %14900, %96
  %14902 = zext i32 %.pre-phi3512 to i64
  %14903 = mul nsw i64 %14902, %116
  %14904 = sub nsw i64 %14903, %96
  %14905 = zext i32 %.pre-phi3516 to i64
  %14906 = mul nsw i64 %14905, %116
  %14907 = sub nsw i64 %14906, %96
  %14908 = zext i32 %.pre-phi3524 to i64
  %14909 = mul nsw i64 %14908, %116
  %14910 = sub nsw i64 %14909, %96
  %14911 = zext i32 %.pre-phi3520 to i64
  %14912 = mul nsw i64 %14911, %116
  %14913 = sub nsw i64 %14912, %96
  %14914 = sext i32 %a26 to i64
  %14915 = add nsw i64 %14914, 23
  %14916 = mul nsw i64 %14915, %117
  %14917 = add nsw i64 %14916, %120
  br label %"for blur_y.s0.x.x.rebased648"

"produce blur_x646":                              ; preds = %"for blur_y.s0.x.x.rebased640"
  %t1120 = add nsw i32 %14889, %t2129
  %14918 = sext i32 %t1120 to i64
  %14919 = getelementptr inbounds i16, i16* %read_input, i64 %14918
  %14920 = getelementptr inbounds i16, i16* %14919, i64 1
  %14921 = bitcast i16* %14920 to <16 x i16>*
  %14922 = load <16 x i16>, <16 x i16>* %14921, align 2, !tbaa !396
  %14923 = getelementptr inbounds i16, i16* %14919, i64 17
  %14924 = bitcast i16* %14923 to <16 x i16>*
  %14925 = load <16 x i16>, <16 x i16>* %14924, align 2, !tbaa !396
  %14926 = bitcast i16* %14919 to <16 x i16>*
  %14927 = load <16 x i16>, <16 x i16>* %14926, align 2, !tbaa !396
  %14928 = getelementptr inbounds i16, i16* %14919, i64 16
  %14929 = bitcast i16* %14928 to <16 x i16>*
  %14930 = load <16 x i16>, <16 x i16>* %14929, align 2, !tbaa !396
  %14931 = getelementptr inbounds i16, i16* %14919, i64 2
  %14932 = bitcast i16* %14931 to <16 x i16>*
  %14933 = load <16 x i16>, <16 x i16>* %14932, align 2, !tbaa !396
  %14934 = getelementptr inbounds i16, i16* %14919, i64 18
  %14935 = bitcast i16* %14934 to <16 x i16>*
  %14936 = load <16 x i16>, <16 x i16>* %14935, align 2, !tbaa !396
  %14937 = getelementptr inbounds i16, i16* %14919, i64 3
  %14938 = bitcast i16* %14937 to <16 x i16>*
  %14939 = load <16 x i16>, <16 x i16>* %14938, align 2, !tbaa !396
  %14940 = getelementptr inbounds i16, i16* %14919, i64 19
  %14941 = bitcast i16* %14940 to <16 x i16>*
  %14942 = load <16 x i16>, <16 x i16>* %14941, align 2, !tbaa !396
  %14943 = getelementptr inbounds i16, i16* %14919, i64 4
  %14944 = bitcast i16* %14943 to <16 x i16>*
  %14945 = load <16 x i16>, <16 x i16>* %14944, align 2, !tbaa !396
  %14946 = getelementptr inbounds i16, i16* %14919, i64 20
  %14947 = bitcast i16* %14946 to <16 x i16>*
  %14948 = load <16 x i16>, <16 x i16>* %14947, align 2, !tbaa !396
  %14949 = getelementptr inbounds i16, i16* %14919, i64 6
  %14950 = bitcast i16* %14949 to <16 x i16>*
  %14951 = load <16 x i16>, <16 x i16>* %14950, align 2, !tbaa !396
  %14952 = getelementptr inbounds i16, i16* %14919, i64 22
  %14953 = bitcast i16* %14952 to <16 x i16>*
  %14954 = load <16 x i16>, <16 x i16>* %14953, align 2, !tbaa !396
  %14955 = getelementptr inbounds i16, i16* %14919, i64 5
  %14956 = bitcast i16* %14955 to <16 x i16>*
  %14957 = load <16 x i16>, <16 x i16>* %14956, align 2, !tbaa !396
  %14958 = getelementptr inbounds i16, i16* %14919, i64 21
  %14959 = bitcast i16* %14958 to <16 x i16>*
  %14960 = load <16 x i16>, <16 x i16>* %14959, align 2, !tbaa !396
  %14961 = add <16 x i16> %14927, %14922
  %14962 = add <16 x i16> %14961, %14933
  %14963 = add <16 x i16> %14962, %14939
  %14964 = add <16 x i16> %14963, %14945
  %14965 = add <16 x i16> %14964, %14951
  %14966 = add <16 x i16> %14965, %14957
  %14967 = add <16 x i16> %14930, %14925
  %14968 = add <16 x i16> %14967, %14936
  %14969 = add <16 x i16> %14968, %14942
  %14970 = add <16 x i16> %14969, %14948
  %14971 = add <16 x i16> %14970, %14954
  %14972 = add <16 x i16> %14971, %14960
  %14973 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14966, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14974 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14972, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %14975 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14973, <16 x i16> %14966)
  %14976 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %14974, <16 x i16> %14972)
  %14977 = shufflevector <16 x i16> %14975, <16 x i16> %14976, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14978 = lshr <32 x i16> %14977, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14979 = shufflevector <32 x i16> %14978, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14980 = shl nsw i64 %14886, 5
  %14981 = add nsw i64 %14980, %14691
  %14982 = getelementptr inbounds i16, i16* %blur_x, i64 %14981
  %14983 = bitcast i16* %14982 to <16 x i16>*
  store <16 x i16> %14979, <16 x i16>* %14983, align 2, !tbaa !399
  %14984 = shufflevector <32 x i16> %14978, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14985 = getelementptr inbounds i16, i16* %14982, i64 16
  %14986 = bitcast i16* %14985 to <16 x i16>*
  store <16 x i16> %14984, <16 x i16>* %14986, align 2, !tbaa !399
  br label %"consume blur_x647"

"consume blur_x647":                              ; preds = %"for blur_y.s0.x.x.rebased640.consume blur_x647_crit_edge", %"produce blur_x646"
  %.pre-phi3580 = phi i64 [ %.pre3579, %"for blur_y.s0.x.x.rebased640.consume blur_x647_crit_edge" ], [ %14980, %"produce blur_x646" ]
  %14987 = add nsw i64 %14694, %.pre-phi3580
  %14988 = getelementptr inbounds i16, i16* %blur_x, i64 %14987
  %14989 = bitcast i16* %14988 to <16 x i16>*
  %14990 = load <16 x i16>, <16 x i16>* %14989, align 2, !tbaa !399
  %14991 = getelementptr inbounds i16, i16* %14988, i64 16
  %14992 = bitcast i16* %14991 to <16 x i16>*
  %14993 = load <16 x i16>, <16 x i16>* %14992, align 2, !tbaa !399
  %14994 = add nsw i64 %14697, %.pre-phi3580
  %14995 = getelementptr inbounds i16, i16* %blur_x, i64 %14994
  %14996 = bitcast i16* %14995 to <16 x i16>*
  %14997 = load <16 x i16>, <16 x i16>* %14996, align 2, !tbaa !399
  %14998 = getelementptr inbounds i16, i16* %14995, i64 16
  %14999 = bitcast i16* %14998 to <16 x i16>*
  %15000 = load <16 x i16>, <16 x i16>* %14999, align 2, !tbaa !399
  %15001 = add nsw i64 %14700, %.pre-phi3580
  %15002 = getelementptr inbounds i16, i16* %blur_x, i64 %15001
  %15003 = bitcast i16* %15002 to <16 x i16>*
  %15004 = load <16 x i16>, <16 x i16>* %15003, align 2, !tbaa !399
  %15005 = getelementptr inbounds i16, i16* %15002, i64 16
  %15006 = bitcast i16* %15005 to <16 x i16>*
  %15007 = load <16 x i16>, <16 x i16>* %15006, align 2, !tbaa !399
  %15008 = add nsw i64 %14703, %.pre-phi3580
  %15009 = getelementptr inbounds i16, i16* %blur_x, i64 %15008
  %15010 = bitcast i16* %15009 to <16 x i16>*
  %15011 = load <16 x i16>, <16 x i16>* %15010, align 2, !tbaa !399
  %15012 = getelementptr inbounds i16, i16* %15009, i64 16
  %15013 = bitcast i16* %15012 to <16 x i16>*
  %15014 = load <16 x i16>, <16 x i16>* %15013, align 2, !tbaa !399
  %15015 = add nsw i64 %14706, %.pre-phi3580
  %15016 = getelementptr inbounds i16, i16* %blur_x, i64 %15015
  %15017 = bitcast i16* %15016 to <16 x i16>*
  %15018 = load <16 x i16>, <16 x i16>* %15017, align 2, !tbaa !399
  %15019 = getelementptr inbounds i16, i16* %15016, i64 16
  %15020 = bitcast i16* %15019 to <16 x i16>*
  %15021 = load <16 x i16>, <16 x i16>* %15020, align 2, !tbaa !399
  %15022 = add nsw i64 %14709, %.pre-phi3580
  %15023 = getelementptr inbounds i16, i16* %blur_x, i64 %15022
  %15024 = bitcast i16* %15023 to <16 x i16>*
  %15025 = load <16 x i16>, <16 x i16>* %15024, align 2, !tbaa !399
  %15026 = getelementptr inbounds i16, i16* %15023, i64 16
  %15027 = bitcast i16* %15026 to <16 x i16>*
  %15028 = load <16 x i16>, <16 x i16>* %15027, align 2, !tbaa !399
  %15029 = add nsw i64 %14712, %.pre-phi3580
  %15030 = getelementptr inbounds i16, i16* %blur_x, i64 %15029
  %15031 = bitcast i16* %15030 to <16 x i16>*
  %15032 = load <16 x i16>, <16 x i16>* %15031, align 2, !tbaa !399
  %15033 = getelementptr inbounds i16, i16* %15030, i64 16
  %15034 = bitcast i16* %15033 to <16 x i16>*
  %15035 = load <16 x i16>, <16 x i16>* %15034, align 2, !tbaa !399
  %15036 = add <16 x i16> %14997, %14990
  %15037 = add <16 x i16> %15036, %15004
  %15038 = add <16 x i16> %15037, %15011
  %15039 = add <16 x i16> %15038, %15018
  %15040 = add <16 x i16> %15039, %15025
  %15041 = add <16 x i16> %15040, %15032
  %15042 = add <16 x i16> %15000, %14993
  %15043 = add <16 x i16> %15042, %15007
  %15044 = add <16 x i16> %15043, %15014
  %15045 = add <16 x i16> %15044, %15021
  %15046 = add <16 x i16> %15045, %15028
  %15047 = add <16 x i16> %15046, %15035
  %15048 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15041, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15049 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15047, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15050 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15048, <16 x i16> %15041)
  %15051 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15049, <16 x i16> %15047)
  %15052 = shufflevector <16 x i16> %15050, <16 x i16> %15051, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15053 = lshr <32 x i16> %15052, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15054 = shufflevector <32 x i16> %15053, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15055 = add nsw i64 %14716, %.pre-phi3580
  %15056 = getelementptr inbounds i16, i16* %66, i64 %15055
  %15057 = bitcast i16* %15056 to <16 x i16>*
  store <16 x i16> %15054, <16 x i16>* %15057, align 2, !tbaa !401
  %15058 = shufflevector <32 x i16> %15053, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15059 = getelementptr inbounds i16, i16* %15056, i64 16
  %15060 = bitcast i16* %15059 to <16 x i16>*
  store <16 x i16> %15058, <16 x i16>* %15060, align 2, !tbaa !401
  %indvars.iv.next3349 = add nuw nsw i64 %indvars.iv3348, 1
  %.not2754 = icmp eq i64 %indvars.iv.next3349, %188
  br i1 %.not2754, label %"end for blur_y.s0.x.x.rebased641", label %"for blur_y.s0.x.x.rebased640"

"for blur_y.s0.x.x.rebased648":                   ; preds = %"for blur_y.s0.x.x.rebased648.preheader", %"consume blur_x656"
  %blur_y.s0.x.x.rebased650 = phi i32 [ %15211, %"consume blur_x656" ], [ 0, %"for blur_y.s0.x.x.rebased648.preheader" ]
  %15061 = add nsw i32 %blur_y.s0.x.x.rebased650, %t1670
  %a280 = shl nsw i32 %15061, 5
  %15062 = icmp sgt i32 %a14, %a280
  %b286 = select i1 %15062, i32 %a280, i32 %a14
  %15063 = icmp slt i32 %15061, 1
  %15064 = icmp sgt i32 %4, %a280
  %15065 = or i1 %15063, %15064
  br i1 %15065, label %"produce blur_x654", label %"consume blur_x656"

"end for blur_y.s0.x.x.rebased649":               ; preds = %"consume blur_x656", %"end for blur_y.s0.x.x.rebased641"
  br i1 %34, label %"produce blur_x660", label %after_bb657

"produce blur_x654":                              ; preds = %"for blur_y.s0.x.x.rebased648"
  %15066 = icmp slt i32 %b286, %4
  %blur_x.s0.x.v1.base.s655 = select i1 %15066, i32 %b286, i32 %4
  %t1125 = add nsw i32 %blur_x.s0.x.v1.base.s655, %t2129
  %15067 = sext i32 %t1125 to i64
  %15068 = getelementptr inbounds i16, i16* %read_input, i64 %15067
  %15069 = getelementptr inbounds i16, i16* %15068, i64 1
  %15070 = bitcast i16* %15069 to <16 x i16>*
  %15071 = load <16 x i16>, <16 x i16>* %15070, align 2, !tbaa !396
  %15072 = getelementptr inbounds i16, i16* %15068, i64 17
  %15073 = bitcast i16* %15072 to <16 x i16>*
  %15074 = load <16 x i16>, <16 x i16>* %15073, align 2, !tbaa !396
  %15075 = bitcast i16* %15068 to <16 x i16>*
  %15076 = load <16 x i16>, <16 x i16>* %15075, align 2, !tbaa !396
  %15077 = getelementptr inbounds i16, i16* %15068, i64 16
  %15078 = bitcast i16* %15077 to <16 x i16>*
  %15079 = load <16 x i16>, <16 x i16>* %15078, align 2, !tbaa !396
  %15080 = getelementptr inbounds i16, i16* %15068, i64 2
  %15081 = bitcast i16* %15080 to <16 x i16>*
  %15082 = load <16 x i16>, <16 x i16>* %15081, align 2, !tbaa !396
  %15083 = getelementptr inbounds i16, i16* %15068, i64 18
  %15084 = bitcast i16* %15083 to <16 x i16>*
  %15085 = load <16 x i16>, <16 x i16>* %15084, align 2, !tbaa !396
  %15086 = getelementptr inbounds i16, i16* %15068, i64 3
  %15087 = bitcast i16* %15086 to <16 x i16>*
  %15088 = load <16 x i16>, <16 x i16>* %15087, align 2, !tbaa !396
  %15089 = getelementptr inbounds i16, i16* %15068, i64 19
  %15090 = bitcast i16* %15089 to <16 x i16>*
  %15091 = load <16 x i16>, <16 x i16>* %15090, align 2, !tbaa !396
  %15092 = getelementptr inbounds i16, i16* %15068, i64 4
  %15093 = bitcast i16* %15092 to <16 x i16>*
  %15094 = load <16 x i16>, <16 x i16>* %15093, align 2, !tbaa !396
  %15095 = getelementptr inbounds i16, i16* %15068, i64 20
  %15096 = bitcast i16* %15095 to <16 x i16>*
  %15097 = load <16 x i16>, <16 x i16>* %15096, align 2, !tbaa !396
  %15098 = getelementptr inbounds i16, i16* %15068, i64 6
  %15099 = bitcast i16* %15098 to <16 x i16>*
  %15100 = load <16 x i16>, <16 x i16>* %15099, align 2, !tbaa !396
  %15101 = getelementptr inbounds i16, i16* %15068, i64 22
  %15102 = bitcast i16* %15101 to <16 x i16>*
  %15103 = load <16 x i16>, <16 x i16>* %15102, align 2, !tbaa !396
  %15104 = getelementptr inbounds i16, i16* %15068, i64 5
  %15105 = bitcast i16* %15104 to <16 x i16>*
  %15106 = load <16 x i16>, <16 x i16>* %15105, align 2, !tbaa !396
  %15107 = getelementptr inbounds i16, i16* %15068, i64 21
  %15108 = bitcast i16* %15107 to <16 x i16>*
  %15109 = load <16 x i16>, <16 x i16>* %15108, align 2, !tbaa !396
  %15110 = add <16 x i16> %15076, %15071
  %15111 = add <16 x i16> %15110, %15082
  %15112 = add <16 x i16> %15111, %15088
  %15113 = add <16 x i16> %15112, %15094
  %15114 = add <16 x i16> %15113, %15100
  %15115 = add <16 x i16> %15114, %15106
  %15116 = add <16 x i16> %15079, %15074
  %15117 = add <16 x i16> %15116, %15085
  %15118 = add <16 x i16> %15117, %15091
  %15119 = add <16 x i16> %15118, %15097
  %15120 = add <16 x i16> %15119, %15103
  %15121 = add <16 x i16> %15120, %15109
  %15122 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15115, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15123 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15121, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15124 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15122, <16 x i16> %15115)
  %15125 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15123, <16 x i16> %15121)
  %15126 = shufflevector <16 x i16> %15124, <16 x i16> %15125, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15127 = lshr <32 x i16> %15126, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15128 = shufflevector <32 x i16> %15127, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15129 = sext i32 %blur_x.s0.x.v1.base.s655 to i64
  %15130 = add nsw i64 %15129, %14892
  %15131 = getelementptr inbounds i16, i16* %blur_x, i64 %15130
  %15132 = bitcast i16* %15131 to <16 x i16>*
  store <16 x i16> %15128, <16 x i16>* %15132, align 2, !tbaa !399
  %15133 = shufflevector <32 x i16> %15127, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15134 = getelementptr inbounds i16, i16* %15131, i64 16
  %15135 = bitcast i16* %15134 to <16 x i16>*
  store <16 x i16> %15133, <16 x i16>* %15135, align 2, !tbaa !399
  br label %"consume blur_x656"

"consume blur_x656":                              ; preds = %"for blur_y.s0.x.x.rebased648", %"produce blur_x654"
  %15136 = sext i32 %b286 to i64
  %15137 = add nsw i64 %14895, %15136
  %15138 = getelementptr inbounds i16, i16* %blur_x, i64 %15137
  %15139 = bitcast i16* %15138 to <16 x i16>*
  %15140 = load <16 x i16>, <16 x i16>* %15139, align 2, !tbaa !399
  %15141 = getelementptr inbounds i16, i16* %15138, i64 16
  %15142 = bitcast i16* %15141 to <16 x i16>*
  %15143 = load <16 x i16>, <16 x i16>* %15142, align 2, !tbaa !399
  %15144 = add nsw i64 %14898, %15136
  %15145 = getelementptr inbounds i16, i16* %blur_x, i64 %15144
  %15146 = bitcast i16* %15145 to <16 x i16>*
  %15147 = load <16 x i16>, <16 x i16>* %15146, align 2, !tbaa !399
  %15148 = getelementptr inbounds i16, i16* %15145, i64 16
  %15149 = bitcast i16* %15148 to <16 x i16>*
  %15150 = load <16 x i16>, <16 x i16>* %15149, align 2, !tbaa !399
  %15151 = add nsw i64 %14901, %15136
  %15152 = getelementptr inbounds i16, i16* %blur_x, i64 %15151
  %15153 = bitcast i16* %15152 to <16 x i16>*
  %15154 = load <16 x i16>, <16 x i16>* %15153, align 2, !tbaa !399
  %15155 = getelementptr inbounds i16, i16* %15152, i64 16
  %15156 = bitcast i16* %15155 to <16 x i16>*
  %15157 = load <16 x i16>, <16 x i16>* %15156, align 2, !tbaa !399
  %15158 = add nsw i64 %14904, %15136
  %15159 = getelementptr inbounds i16, i16* %blur_x, i64 %15158
  %15160 = bitcast i16* %15159 to <16 x i16>*
  %15161 = load <16 x i16>, <16 x i16>* %15160, align 2, !tbaa !399
  %15162 = getelementptr inbounds i16, i16* %15159, i64 16
  %15163 = bitcast i16* %15162 to <16 x i16>*
  %15164 = load <16 x i16>, <16 x i16>* %15163, align 2, !tbaa !399
  %15165 = add nsw i64 %14907, %15136
  %15166 = getelementptr inbounds i16, i16* %blur_x, i64 %15165
  %15167 = bitcast i16* %15166 to <16 x i16>*
  %15168 = load <16 x i16>, <16 x i16>* %15167, align 2, !tbaa !399
  %15169 = getelementptr inbounds i16, i16* %15166, i64 16
  %15170 = bitcast i16* %15169 to <16 x i16>*
  %15171 = load <16 x i16>, <16 x i16>* %15170, align 2, !tbaa !399
  %15172 = add nsw i64 %14910, %15136
  %15173 = getelementptr inbounds i16, i16* %blur_x, i64 %15172
  %15174 = bitcast i16* %15173 to <16 x i16>*
  %15175 = load <16 x i16>, <16 x i16>* %15174, align 2, !tbaa !399
  %15176 = getelementptr inbounds i16, i16* %15173, i64 16
  %15177 = bitcast i16* %15176 to <16 x i16>*
  %15178 = load <16 x i16>, <16 x i16>* %15177, align 2, !tbaa !399
  %15179 = add nsw i64 %14913, %15136
  %15180 = getelementptr inbounds i16, i16* %blur_x, i64 %15179
  %15181 = bitcast i16* %15180 to <16 x i16>*
  %15182 = load <16 x i16>, <16 x i16>* %15181, align 2, !tbaa !399
  %15183 = getelementptr inbounds i16, i16* %15180, i64 16
  %15184 = bitcast i16* %15183 to <16 x i16>*
  %15185 = load <16 x i16>, <16 x i16>* %15184, align 2, !tbaa !399
  %15186 = add <16 x i16> %15147, %15140
  %15187 = add <16 x i16> %15186, %15154
  %15188 = add <16 x i16> %15187, %15161
  %15189 = add <16 x i16> %15188, %15168
  %15190 = add <16 x i16> %15189, %15175
  %15191 = add <16 x i16> %15190, %15182
  %15192 = add <16 x i16> %15150, %15143
  %15193 = add <16 x i16> %15192, %15157
  %15194 = add <16 x i16> %15193, %15164
  %15195 = add <16 x i16> %15194, %15171
  %15196 = add <16 x i16> %15195, %15178
  %15197 = add <16 x i16> %15196, %15185
  %15198 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15191, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15199 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15197, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15200 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15198, <16 x i16> %15191)
  %15201 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15199, <16 x i16> %15197)
  %15202 = shufflevector <16 x i16> %15200, <16 x i16> %15201, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15203 = lshr <32 x i16> %15202, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15204 = shufflevector <32 x i16> %15203, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15205 = add nsw i64 %14917, %15136
  %15206 = getelementptr inbounds i16, i16* %66, i64 %15205
  %15207 = bitcast i16* %15206 to <16 x i16>*
  store <16 x i16> %15204, <16 x i16>* %15207, align 2, !tbaa !401
  %15208 = shufflevector <32 x i16> %15203, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15209 = getelementptr inbounds i16, i16* %15206, i64 16
  %15210 = bitcast i16* %15209 to <16 x i16>*
  store <16 x i16> %15208, <16 x i16>* %15210, align 2, !tbaa !401
  %15211 = add nuw nsw i32 %blur_y.s0.x.x.rebased650, 1
  %.not2753 = icmp eq i32 %15211, %t1727
  br i1 %.not2753, label %"end for blur_y.s0.x.x.rebased649", label %"for blur_y.s0.x.x.rebased648"

after_bb657:                                      ; preds = %"end for blur_y.s0.x.x.rebased649", %"produce blur_x660"
  br i1 %100, label %"for blur_y.s0.x.x.rebased662.preheader", label %"end for blur_y.s0.x.x.rebased663", !prof !386

"for blur_y.s0.x.x.rebased662.preheader":         ; preds = %after_bb657
  %15212 = sext i32 %t1762 to i64
  %15213 = zext i32 %.pre-phi3508 to i64
  %15214 = mul nsw i64 %15213, %116
  %15215 = sub nsw i64 %15214, %96
  %15216 = zext i32 %.pre-phi to i64
  %15217 = mul nsw i64 %15216, %116
  %15218 = sub nsw i64 %15217, %96
  %15219 = zext i32 %.pre-phi3512 to i64
  %15220 = mul nsw i64 %15219, %116
  %15221 = sub nsw i64 %15220, %96
  %15222 = zext i32 %.pre-phi3516 to i64
  %15223 = mul nsw i64 %15222, %116
  %15224 = sub nsw i64 %15223, %96
  %15225 = zext i32 %.pre-phi3520 to i64
  %15226 = mul nsw i64 %15225, %116
  %15227 = sub nsw i64 %15226, %96
  %15228 = zext i32 %.pre-phi3528 to i64
  %15229 = mul nsw i64 %15228, %116
  %15230 = sub nsw i64 %15229, %96
  %15231 = zext i32 %.pre-phi3524 to i64
  %15232 = mul nsw i64 %15231, %116
  %15233 = sub nsw i64 %15232, %96
  %15234 = sext i32 %a26 to i64
  %15235 = add nsw i64 %15234, 24
  %15236 = mul nsw i64 %15235, %117
  %15237 = add nsw i64 %15236, %120
  br label %"for blur_y.s0.x.x.rebased662"

"produce blur_x660":                              ; preds = %"end for blur_y.s0.x.x.rebased649"
  %15238 = getelementptr inbounds i16, i16* %read_input, i64 %167
  %15239 = getelementptr inbounds i16, i16* %15238, i64 -31
  %15240 = bitcast i16* %15239 to <16 x i16>*
  %15241 = load <16 x i16>, <16 x i16>* %15240, align 2, !tbaa !396
  %15242 = getelementptr inbounds i16, i16* %15238, i64 -15
  %15243 = bitcast i16* %15242 to <16 x i16>*
  %15244 = load <16 x i16>, <16 x i16>* %15243, align 2, !tbaa !396
  %15245 = getelementptr inbounds i16, i16* %15238, i64 -32
  %15246 = bitcast i16* %15245 to <16 x i16>*
  %15247 = load <16 x i16>, <16 x i16>* %15246, align 2, !tbaa !396
  %15248 = getelementptr inbounds i16, i16* %15238, i64 -16
  %15249 = bitcast i16* %15248 to <16 x i16>*
  %15250 = load <16 x i16>, <16 x i16>* %15249, align 2, !tbaa !396
  %15251 = getelementptr inbounds i16, i16* %15238, i64 -30
  %15252 = bitcast i16* %15251 to <16 x i16>*
  %15253 = load <16 x i16>, <16 x i16>* %15252, align 2, !tbaa !396
  %15254 = getelementptr inbounds i16, i16* %15238, i64 -14
  %15255 = bitcast i16* %15254 to <16 x i16>*
  %15256 = load <16 x i16>, <16 x i16>* %15255, align 2, !tbaa !396
  %15257 = getelementptr inbounds i16, i16* %15238, i64 -29
  %15258 = bitcast i16* %15257 to <16 x i16>*
  %15259 = load <16 x i16>, <16 x i16>* %15258, align 2, !tbaa !396
  %15260 = getelementptr inbounds i16, i16* %15238, i64 -13
  %15261 = bitcast i16* %15260 to <16 x i16>*
  %15262 = load <16 x i16>, <16 x i16>* %15261, align 2, !tbaa !396
  %15263 = getelementptr inbounds i16, i16* %15238, i64 -28
  %15264 = bitcast i16* %15263 to <16 x i16>*
  %15265 = load <16 x i16>, <16 x i16>* %15264, align 2, !tbaa !396
  %15266 = getelementptr inbounds i16, i16* %15238, i64 -12
  %15267 = bitcast i16* %15266 to <16 x i16>*
  %15268 = load <16 x i16>, <16 x i16>* %15267, align 2, !tbaa !396
  %15269 = getelementptr inbounds i16, i16* %15238, i64 -26
  %15270 = bitcast i16* %15269 to <16 x i16>*
  %15271 = load <16 x i16>, <16 x i16>* %15270, align 2, !tbaa !396
  %15272 = getelementptr inbounds i16, i16* %15238, i64 -10
  %15273 = bitcast i16* %15272 to <16 x i16>*
  %15274 = load <16 x i16>, <16 x i16>* %15273, align 2, !tbaa !396
  %15275 = getelementptr inbounds i16, i16* %15238, i64 -27
  %15276 = bitcast i16* %15275 to <16 x i16>*
  %15277 = load <16 x i16>, <16 x i16>* %15276, align 2, !tbaa !396
  %15278 = getelementptr inbounds i16, i16* %15238, i64 -11
  %15279 = bitcast i16* %15278 to <16 x i16>*
  %15280 = load <16 x i16>, <16 x i16>* %15279, align 2, !tbaa !396
  %15281 = add <16 x i16> %15247, %15241
  %15282 = add <16 x i16> %15281, %15253
  %15283 = add <16 x i16> %15282, %15259
  %15284 = add <16 x i16> %15283, %15265
  %15285 = add <16 x i16> %15284, %15271
  %15286 = add <16 x i16> %15285, %15277
  %15287 = add <16 x i16> %15250, %15244
  %15288 = add <16 x i16> %15287, %15256
  %15289 = add <16 x i16> %15288, %15262
  %15290 = add <16 x i16> %15289, %15268
  %15291 = add <16 x i16> %15290, %15274
  %15292 = add <16 x i16> %15291, %15280
  %15293 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15286, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15294 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15292, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15295 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15293, <16 x i16> %15286)
  %15296 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15294, <16 x i16> %15292)
  %15297 = shufflevector <16 x i16> %15295, <16 x i16> %15296, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15298 = lshr <32 x i16> %15297, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15299 = shufflevector <32 x i16> %15298, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15300 = zext i32 %.pre-phi3528 to i64
  %15301 = mul nsw i64 %97, %15300
  %15302 = add nsw i64 %99, %15301
  %15303 = getelementptr inbounds i16, i16* %blur_x, i64 %15302
  %15304 = getelementptr inbounds i16, i16* %15303, i64 -32
  %15305 = bitcast i16* %15304 to <16 x i16>*
  store <16 x i16> %15299, <16 x i16>* %15305, align 2, !tbaa !399
  %15306 = shufflevector <32 x i16> %15298, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15307 = getelementptr inbounds i16, i16* %15303, i64 -16
  %15308 = bitcast i16* %15307 to <16 x i16>*
  store <16 x i16> %15306, <16 x i16>* %15308, align 2, !tbaa !399
  %15309 = zext i32 %.pre-phi3508 to i64
  %15310 = mul nsw i64 %15309, %116
  %15311 = add nsw i64 %15310, %94
  %15312 = getelementptr inbounds i16, i16* %blur_x, i64 %15311
  %15313 = getelementptr inbounds i16, i16* %15312, i64 -32
  %15314 = bitcast i16* %15313 to <16 x i16>*
  %15315 = load <16 x i16>, <16 x i16>* %15314, align 2, !tbaa !399
  %15316 = getelementptr inbounds i16, i16* %15312, i64 -16
  %15317 = bitcast i16* %15316 to <16 x i16>*
  %15318 = load <16 x i16>, <16 x i16>* %15317, align 2, !tbaa !399
  %15319 = zext i32 %.pre-phi to i64
  %15320 = mul nsw i64 %15319, %116
  %15321 = add nsw i64 %15320, %94
  %15322 = getelementptr inbounds i16, i16* %blur_x, i64 %15321
  %15323 = getelementptr inbounds i16, i16* %15322, i64 -32
  %15324 = bitcast i16* %15323 to <16 x i16>*
  %15325 = load <16 x i16>, <16 x i16>* %15324, align 2, !tbaa !399
  %15326 = getelementptr inbounds i16, i16* %15322, i64 -16
  %15327 = bitcast i16* %15326 to <16 x i16>*
  %15328 = load <16 x i16>, <16 x i16>* %15327, align 2, !tbaa !399
  %15329 = zext i32 %.pre-phi3512 to i64
  %15330 = mul nsw i64 %15329, %116
  %15331 = add nsw i64 %15330, %94
  %15332 = getelementptr inbounds i16, i16* %blur_x, i64 %15331
  %15333 = getelementptr inbounds i16, i16* %15332, i64 -32
  %15334 = bitcast i16* %15333 to <16 x i16>*
  %15335 = load <16 x i16>, <16 x i16>* %15334, align 2, !tbaa !399
  %15336 = getelementptr inbounds i16, i16* %15332, i64 -16
  %15337 = bitcast i16* %15336 to <16 x i16>*
  %15338 = load <16 x i16>, <16 x i16>* %15337, align 2, !tbaa !399
  %15339 = zext i32 %.pre-phi3516 to i64
  %15340 = mul nsw i64 %15339, %116
  %15341 = add nsw i64 %15340, %94
  %15342 = getelementptr inbounds i16, i16* %blur_x, i64 %15341
  %15343 = getelementptr inbounds i16, i16* %15342, i64 -32
  %15344 = bitcast i16* %15343 to <16 x i16>*
  %15345 = load <16 x i16>, <16 x i16>* %15344, align 2, !tbaa !399
  %15346 = getelementptr inbounds i16, i16* %15342, i64 -16
  %15347 = bitcast i16* %15346 to <16 x i16>*
  %15348 = load <16 x i16>, <16 x i16>* %15347, align 2, !tbaa !399
  %15349 = zext i32 %.pre-phi3520 to i64
  %15350 = mul nsw i64 %15349, %116
  %15351 = add nsw i64 %15350, %94
  %15352 = getelementptr inbounds i16, i16* %blur_x, i64 %15351
  %15353 = getelementptr inbounds i16, i16* %15352, i64 -32
  %15354 = bitcast i16* %15353 to <16 x i16>*
  %15355 = load <16 x i16>, <16 x i16>* %15354, align 2, !tbaa !399
  %15356 = getelementptr inbounds i16, i16* %15352, i64 -16
  %15357 = bitcast i16* %15356 to <16 x i16>*
  %15358 = load <16 x i16>, <16 x i16>* %15357, align 2, !tbaa !399
  %15359 = mul nsw i64 %15300, %116
  %15360 = add nsw i64 %15359, %94
  %15361 = getelementptr inbounds i16, i16* %blur_x, i64 %15360
  %15362 = getelementptr inbounds i16, i16* %15361, i64 -32
  %15363 = bitcast i16* %15362 to <16 x i16>*
  %15364 = load <16 x i16>, <16 x i16>* %15363, align 2, !tbaa !399
  %15365 = getelementptr inbounds i16, i16* %15361, i64 -16
  %15366 = bitcast i16* %15365 to <16 x i16>*
  %15367 = load <16 x i16>, <16 x i16>* %15366, align 2, !tbaa !399
  %15368 = zext i32 %.pre-phi3524 to i64
  %15369 = mul nsw i64 %15368, %116
  %15370 = add nsw i64 %15369, %94
  %15371 = getelementptr inbounds i16, i16* %blur_x, i64 %15370
  %15372 = getelementptr inbounds i16, i16* %15371, i64 -32
  %15373 = bitcast i16* %15372 to <16 x i16>*
  %15374 = load <16 x i16>, <16 x i16>* %15373, align 2, !tbaa !399
  %15375 = getelementptr inbounds i16, i16* %15371, i64 -16
  %15376 = bitcast i16* %15375 to <16 x i16>*
  %15377 = load <16 x i16>, <16 x i16>* %15376, align 2, !tbaa !399
  %15378 = add <16 x i16> %15325, %15315
  %15379 = add <16 x i16> %15378, %15335
  %15380 = add <16 x i16> %15379, %15345
  %15381 = add <16 x i16> %15380, %15355
  %15382 = add <16 x i16> %15381, %15364
  %15383 = add <16 x i16> %15382, %15374
  %15384 = add <16 x i16> %15328, %15318
  %15385 = add <16 x i16> %15384, %15338
  %15386 = add <16 x i16> %15385, %15348
  %15387 = add <16 x i16> %15386, %15358
  %15388 = add <16 x i16> %15387, %15367
  %15389 = add <16 x i16> %15388, %15377
  %15390 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15383, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15391 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15389, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15392 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15390, <16 x i16> %15383)
  %15393 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15391, <16 x i16> %15389)
  %15394 = shufflevector <16 x i16> %15392, <16 x i16> %15393, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15395 = lshr <32 x i16> %15394, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15396 = shufflevector <32 x i16> %15395, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15397 = sext i32 %a26 to i64
  %15398 = add nsw i64 %15397, 24
  %15399 = mul nsw i64 %15398, %117
  %15400 = add nsw i64 %119, %15399
  %15401 = getelementptr inbounds i16, i16* %66, i64 %15400
  %15402 = getelementptr inbounds i16, i16* %15401, i64 -32
  %15403 = bitcast i16* %15402 to <16 x i16>*
  store <16 x i16> %15396, <16 x i16>* %15403, align 2, !tbaa !401
  %15404 = shufflevector <32 x i16> %15395, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15405 = getelementptr inbounds i16, i16* %15401, i64 -16
  %15406 = bitcast i16* %15405 to <16 x i16>*
  store <16 x i16> %15404, <16 x i16>* %15406, align 2, !tbaa !401
  br label %after_bb657

"for blur_y.s0.x.x.rebased662":                   ; preds = %"for blur_y.s0.x.x.rebased662.preheader", %"consume blur_x669"
  %indvars.iv3351 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased662.preheader" ], [ %indvars.iv.next3352, %"consume blur_x669" ]
  %15407 = add nsw i64 %indvars.iv3351, %101
  %15408 = icmp slt i64 %15407, 1
  %15409 = trunc i64 %15407 to i32
  %15410 = shl nsw i32 %15409, 5
  %15411 = icmp sgt i32 %4, %15410
  %15412 = or i1 %15408, %15411
  br i1 %15412, label %"produce blur_x668", label %"for blur_y.s0.x.x.rebased662.consume blur_x669_crit_edge"

"for blur_y.s0.x.x.rebased662.consume blur_x669_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased662"
  %.pre3581 = shl nsw i64 %15407, 5
  br label %"consume blur_x669"

"end for blur_y.s0.x.x.rebased663":               ; preds = %"consume blur_x669", %after_bb657
  br i1 %102, label %"for blur_y.s0.x.x.rebased670.preheader", label %"end for blur_y.s0.x.x.rebased671", !prof !386

"for blur_y.s0.x.x.rebased670.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased663"
  %15413 = sext i32 %t1762 to i64
  %15414 = zext i32 %.pre-phi3508 to i64
  %15415 = mul nsw i64 %15414, %116
  %15416 = sub nsw i64 %15415, %96
  %15417 = zext i32 %.pre-phi to i64
  %15418 = mul nsw i64 %15417, %116
  %15419 = sub nsw i64 %15418, %96
  %15420 = zext i32 %.pre-phi3512 to i64
  %15421 = mul nsw i64 %15420, %116
  %15422 = sub nsw i64 %15421, %96
  %15423 = zext i32 %.pre-phi3516 to i64
  %15424 = mul nsw i64 %15423, %116
  %15425 = sub nsw i64 %15424, %96
  %15426 = zext i32 %.pre-phi3520 to i64
  %15427 = mul nsw i64 %15426, %116
  %15428 = sub nsw i64 %15427, %96
  %15429 = zext i32 %.pre-phi3528 to i64
  %15430 = mul nsw i64 %15429, %116
  %15431 = sub nsw i64 %15430, %96
  %15432 = zext i32 %.pre-phi3524 to i64
  %15433 = mul nsw i64 %15432, %116
  %15434 = sub nsw i64 %15433, %96
  %15435 = sext i32 %a26 to i64
  %15436 = add nsw i64 %15435, 24
  %15437 = mul nsw i64 %15436, %117
  %15438 = add nsw i64 %15437, %120
  br label %"for blur_y.s0.x.x.rebased670"

"produce blur_x668":                              ; preds = %"for blur_y.s0.x.x.rebased662"
  %t1136 = add nsw i32 %15410, %t2145
  %15439 = sext i32 %t1136 to i64
  %15440 = getelementptr inbounds i16, i16* %read_input, i64 %15439
  %15441 = getelementptr inbounds i16, i16* %15440, i64 1
  %15442 = bitcast i16* %15441 to <16 x i16>*
  %15443 = load <16 x i16>, <16 x i16>* %15442, align 2, !tbaa !396
  %15444 = getelementptr inbounds i16, i16* %15440, i64 17
  %15445 = bitcast i16* %15444 to <16 x i16>*
  %15446 = load <16 x i16>, <16 x i16>* %15445, align 2, !tbaa !396
  %15447 = bitcast i16* %15440 to <16 x i16>*
  %15448 = load <16 x i16>, <16 x i16>* %15447, align 2, !tbaa !396
  %15449 = getelementptr inbounds i16, i16* %15440, i64 16
  %15450 = bitcast i16* %15449 to <16 x i16>*
  %15451 = load <16 x i16>, <16 x i16>* %15450, align 2, !tbaa !396
  %15452 = getelementptr inbounds i16, i16* %15440, i64 2
  %15453 = bitcast i16* %15452 to <16 x i16>*
  %15454 = load <16 x i16>, <16 x i16>* %15453, align 2, !tbaa !396
  %15455 = getelementptr inbounds i16, i16* %15440, i64 18
  %15456 = bitcast i16* %15455 to <16 x i16>*
  %15457 = load <16 x i16>, <16 x i16>* %15456, align 2, !tbaa !396
  %15458 = getelementptr inbounds i16, i16* %15440, i64 3
  %15459 = bitcast i16* %15458 to <16 x i16>*
  %15460 = load <16 x i16>, <16 x i16>* %15459, align 2, !tbaa !396
  %15461 = getelementptr inbounds i16, i16* %15440, i64 19
  %15462 = bitcast i16* %15461 to <16 x i16>*
  %15463 = load <16 x i16>, <16 x i16>* %15462, align 2, !tbaa !396
  %15464 = getelementptr inbounds i16, i16* %15440, i64 4
  %15465 = bitcast i16* %15464 to <16 x i16>*
  %15466 = load <16 x i16>, <16 x i16>* %15465, align 2, !tbaa !396
  %15467 = getelementptr inbounds i16, i16* %15440, i64 20
  %15468 = bitcast i16* %15467 to <16 x i16>*
  %15469 = load <16 x i16>, <16 x i16>* %15468, align 2, !tbaa !396
  %15470 = getelementptr inbounds i16, i16* %15440, i64 6
  %15471 = bitcast i16* %15470 to <16 x i16>*
  %15472 = load <16 x i16>, <16 x i16>* %15471, align 2, !tbaa !396
  %15473 = getelementptr inbounds i16, i16* %15440, i64 22
  %15474 = bitcast i16* %15473 to <16 x i16>*
  %15475 = load <16 x i16>, <16 x i16>* %15474, align 2, !tbaa !396
  %15476 = getelementptr inbounds i16, i16* %15440, i64 5
  %15477 = bitcast i16* %15476 to <16 x i16>*
  %15478 = load <16 x i16>, <16 x i16>* %15477, align 2, !tbaa !396
  %15479 = getelementptr inbounds i16, i16* %15440, i64 21
  %15480 = bitcast i16* %15479 to <16 x i16>*
  %15481 = load <16 x i16>, <16 x i16>* %15480, align 2, !tbaa !396
  %15482 = add <16 x i16> %15448, %15443
  %15483 = add <16 x i16> %15482, %15454
  %15484 = add <16 x i16> %15483, %15460
  %15485 = add <16 x i16> %15484, %15466
  %15486 = add <16 x i16> %15485, %15472
  %15487 = add <16 x i16> %15486, %15478
  %15488 = add <16 x i16> %15451, %15446
  %15489 = add <16 x i16> %15488, %15457
  %15490 = add <16 x i16> %15489, %15463
  %15491 = add <16 x i16> %15490, %15469
  %15492 = add <16 x i16> %15491, %15475
  %15493 = add <16 x i16> %15492, %15481
  %15494 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15487, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15495 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15493, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15496 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15494, <16 x i16> %15487)
  %15497 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15495, <16 x i16> %15493)
  %15498 = shufflevector <16 x i16> %15496, <16 x i16> %15497, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15499 = lshr <32 x i16> %15498, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15500 = shufflevector <32 x i16> %15499, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15501 = shl nsw i64 %15407, 5
  %15502 = add nsw i64 %15501, %15212
  %15503 = getelementptr inbounds i16, i16* %blur_x, i64 %15502
  %15504 = bitcast i16* %15503 to <16 x i16>*
  store <16 x i16> %15500, <16 x i16>* %15504, align 2, !tbaa !399
  %15505 = shufflevector <32 x i16> %15499, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15506 = getelementptr inbounds i16, i16* %15503, i64 16
  %15507 = bitcast i16* %15506 to <16 x i16>*
  store <16 x i16> %15505, <16 x i16>* %15507, align 2, !tbaa !399
  br label %"consume blur_x669"

"consume blur_x669":                              ; preds = %"for blur_y.s0.x.x.rebased662.consume blur_x669_crit_edge", %"produce blur_x668"
  %.pre-phi3582 = phi i64 [ %.pre3581, %"for blur_y.s0.x.x.rebased662.consume blur_x669_crit_edge" ], [ %15501, %"produce blur_x668" ]
  %15508 = add nsw i64 %15215, %.pre-phi3582
  %15509 = getelementptr inbounds i16, i16* %blur_x, i64 %15508
  %15510 = bitcast i16* %15509 to <16 x i16>*
  %15511 = load <16 x i16>, <16 x i16>* %15510, align 2, !tbaa !399
  %15512 = getelementptr inbounds i16, i16* %15509, i64 16
  %15513 = bitcast i16* %15512 to <16 x i16>*
  %15514 = load <16 x i16>, <16 x i16>* %15513, align 2, !tbaa !399
  %15515 = add nsw i64 %15218, %.pre-phi3582
  %15516 = getelementptr inbounds i16, i16* %blur_x, i64 %15515
  %15517 = bitcast i16* %15516 to <16 x i16>*
  %15518 = load <16 x i16>, <16 x i16>* %15517, align 2, !tbaa !399
  %15519 = getelementptr inbounds i16, i16* %15516, i64 16
  %15520 = bitcast i16* %15519 to <16 x i16>*
  %15521 = load <16 x i16>, <16 x i16>* %15520, align 2, !tbaa !399
  %15522 = add nsw i64 %15221, %.pre-phi3582
  %15523 = getelementptr inbounds i16, i16* %blur_x, i64 %15522
  %15524 = bitcast i16* %15523 to <16 x i16>*
  %15525 = load <16 x i16>, <16 x i16>* %15524, align 2, !tbaa !399
  %15526 = getelementptr inbounds i16, i16* %15523, i64 16
  %15527 = bitcast i16* %15526 to <16 x i16>*
  %15528 = load <16 x i16>, <16 x i16>* %15527, align 2, !tbaa !399
  %15529 = add nsw i64 %15224, %.pre-phi3582
  %15530 = getelementptr inbounds i16, i16* %blur_x, i64 %15529
  %15531 = bitcast i16* %15530 to <16 x i16>*
  %15532 = load <16 x i16>, <16 x i16>* %15531, align 2, !tbaa !399
  %15533 = getelementptr inbounds i16, i16* %15530, i64 16
  %15534 = bitcast i16* %15533 to <16 x i16>*
  %15535 = load <16 x i16>, <16 x i16>* %15534, align 2, !tbaa !399
  %15536 = add nsw i64 %15227, %.pre-phi3582
  %15537 = getelementptr inbounds i16, i16* %blur_x, i64 %15536
  %15538 = bitcast i16* %15537 to <16 x i16>*
  %15539 = load <16 x i16>, <16 x i16>* %15538, align 2, !tbaa !399
  %15540 = getelementptr inbounds i16, i16* %15537, i64 16
  %15541 = bitcast i16* %15540 to <16 x i16>*
  %15542 = load <16 x i16>, <16 x i16>* %15541, align 2, !tbaa !399
  %15543 = add nsw i64 %15230, %.pre-phi3582
  %15544 = getelementptr inbounds i16, i16* %blur_x, i64 %15543
  %15545 = bitcast i16* %15544 to <16 x i16>*
  %15546 = load <16 x i16>, <16 x i16>* %15545, align 2, !tbaa !399
  %15547 = getelementptr inbounds i16, i16* %15544, i64 16
  %15548 = bitcast i16* %15547 to <16 x i16>*
  %15549 = load <16 x i16>, <16 x i16>* %15548, align 2, !tbaa !399
  %15550 = add nsw i64 %15233, %.pre-phi3582
  %15551 = getelementptr inbounds i16, i16* %blur_x, i64 %15550
  %15552 = bitcast i16* %15551 to <16 x i16>*
  %15553 = load <16 x i16>, <16 x i16>* %15552, align 2, !tbaa !399
  %15554 = getelementptr inbounds i16, i16* %15551, i64 16
  %15555 = bitcast i16* %15554 to <16 x i16>*
  %15556 = load <16 x i16>, <16 x i16>* %15555, align 2, !tbaa !399
  %15557 = add <16 x i16> %15518, %15511
  %15558 = add <16 x i16> %15557, %15525
  %15559 = add <16 x i16> %15558, %15532
  %15560 = add <16 x i16> %15559, %15539
  %15561 = add <16 x i16> %15560, %15546
  %15562 = add <16 x i16> %15561, %15553
  %15563 = add <16 x i16> %15521, %15514
  %15564 = add <16 x i16> %15563, %15528
  %15565 = add <16 x i16> %15564, %15535
  %15566 = add <16 x i16> %15565, %15542
  %15567 = add <16 x i16> %15566, %15549
  %15568 = add <16 x i16> %15567, %15556
  %15569 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15562, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15570 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15568, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15571 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15569, <16 x i16> %15562)
  %15572 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15570, <16 x i16> %15568)
  %15573 = shufflevector <16 x i16> %15571, <16 x i16> %15572, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15574 = lshr <32 x i16> %15573, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15575 = shufflevector <32 x i16> %15574, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15576 = add nsw i64 %15237, %.pre-phi3582
  %15577 = getelementptr inbounds i16, i16* %66, i64 %15576
  %15578 = bitcast i16* %15577 to <16 x i16>*
  store <16 x i16> %15575, <16 x i16>* %15578, align 2, !tbaa !401
  %15579 = shufflevector <32 x i16> %15574, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15580 = getelementptr inbounds i16, i16* %15577, i64 16
  %15581 = bitcast i16* %15580 to <16 x i16>*
  store <16 x i16> %15579, <16 x i16>* %15581, align 2, !tbaa !401
  %indvars.iv.next3352 = add nuw nsw i64 %indvars.iv3351, 1
  %.not2752 = icmp eq i64 %indvars.iv.next3352, %188
  br i1 %.not2752, label %"end for blur_y.s0.x.x.rebased663", label %"for blur_y.s0.x.x.rebased662"

"for blur_y.s0.x.x.rebased670":                   ; preds = %"for blur_y.s0.x.x.rebased670.preheader", %"consume blur_x678"
  %blur_y.s0.x.x.rebased672 = phi i32 [ %15732, %"consume blur_x678" ], [ 0, %"for blur_y.s0.x.x.rebased670.preheader" ]
  %15582 = add nsw i32 %blur_y.s0.x.x.rebased672, %t1670
  %a287 = shl nsw i32 %15582, 5
  %15583 = icmp sgt i32 %a14, %a287
  %b293 = select i1 %15583, i32 %a287, i32 %a14
  %15584 = icmp slt i32 %15582, 1
  %15585 = icmp sgt i32 %4, %a287
  %15586 = or i1 %15584, %15585
  br i1 %15586, label %"produce blur_x676", label %"consume blur_x678"

"end for blur_y.s0.x.x.rebased671":               ; preds = %"consume blur_x678", %"end for blur_y.s0.x.x.rebased663"
  br i1 %34, label %"produce blur_x682", label %after_bb679

"produce blur_x676":                              ; preds = %"for blur_y.s0.x.x.rebased670"
  %15587 = icmp slt i32 %b293, %4
  %blur_x.s0.x.v1.base.s677 = select i1 %15587, i32 %b293, i32 %4
  %t1141 = add nsw i32 %blur_x.s0.x.v1.base.s677, %t2145
  %15588 = sext i32 %t1141 to i64
  %15589 = getelementptr inbounds i16, i16* %read_input, i64 %15588
  %15590 = getelementptr inbounds i16, i16* %15589, i64 1
  %15591 = bitcast i16* %15590 to <16 x i16>*
  %15592 = load <16 x i16>, <16 x i16>* %15591, align 2, !tbaa !396
  %15593 = getelementptr inbounds i16, i16* %15589, i64 17
  %15594 = bitcast i16* %15593 to <16 x i16>*
  %15595 = load <16 x i16>, <16 x i16>* %15594, align 2, !tbaa !396
  %15596 = bitcast i16* %15589 to <16 x i16>*
  %15597 = load <16 x i16>, <16 x i16>* %15596, align 2, !tbaa !396
  %15598 = getelementptr inbounds i16, i16* %15589, i64 16
  %15599 = bitcast i16* %15598 to <16 x i16>*
  %15600 = load <16 x i16>, <16 x i16>* %15599, align 2, !tbaa !396
  %15601 = getelementptr inbounds i16, i16* %15589, i64 2
  %15602 = bitcast i16* %15601 to <16 x i16>*
  %15603 = load <16 x i16>, <16 x i16>* %15602, align 2, !tbaa !396
  %15604 = getelementptr inbounds i16, i16* %15589, i64 18
  %15605 = bitcast i16* %15604 to <16 x i16>*
  %15606 = load <16 x i16>, <16 x i16>* %15605, align 2, !tbaa !396
  %15607 = getelementptr inbounds i16, i16* %15589, i64 3
  %15608 = bitcast i16* %15607 to <16 x i16>*
  %15609 = load <16 x i16>, <16 x i16>* %15608, align 2, !tbaa !396
  %15610 = getelementptr inbounds i16, i16* %15589, i64 19
  %15611 = bitcast i16* %15610 to <16 x i16>*
  %15612 = load <16 x i16>, <16 x i16>* %15611, align 2, !tbaa !396
  %15613 = getelementptr inbounds i16, i16* %15589, i64 4
  %15614 = bitcast i16* %15613 to <16 x i16>*
  %15615 = load <16 x i16>, <16 x i16>* %15614, align 2, !tbaa !396
  %15616 = getelementptr inbounds i16, i16* %15589, i64 20
  %15617 = bitcast i16* %15616 to <16 x i16>*
  %15618 = load <16 x i16>, <16 x i16>* %15617, align 2, !tbaa !396
  %15619 = getelementptr inbounds i16, i16* %15589, i64 6
  %15620 = bitcast i16* %15619 to <16 x i16>*
  %15621 = load <16 x i16>, <16 x i16>* %15620, align 2, !tbaa !396
  %15622 = getelementptr inbounds i16, i16* %15589, i64 22
  %15623 = bitcast i16* %15622 to <16 x i16>*
  %15624 = load <16 x i16>, <16 x i16>* %15623, align 2, !tbaa !396
  %15625 = getelementptr inbounds i16, i16* %15589, i64 5
  %15626 = bitcast i16* %15625 to <16 x i16>*
  %15627 = load <16 x i16>, <16 x i16>* %15626, align 2, !tbaa !396
  %15628 = getelementptr inbounds i16, i16* %15589, i64 21
  %15629 = bitcast i16* %15628 to <16 x i16>*
  %15630 = load <16 x i16>, <16 x i16>* %15629, align 2, !tbaa !396
  %15631 = add <16 x i16> %15597, %15592
  %15632 = add <16 x i16> %15631, %15603
  %15633 = add <16 x i16> %15632, %15609
  %15634 = add <16 x i16> %15633, %15615
  %15635 = add <16 x i16> %15634, %15621
  %15636 = add <16 x i16> %15635, %15627
  %15637 = add <16 x i16> %15600, %15595
  %15638 = add <16 x i16> %15637, %15606
  %15639 = add <16 x i16> %15638, %15612
  %15640 = add <16 x i16> %15639, %15618
  %15641 = add <16 x i16> %15640, %15624
  %15642 = add <16 x i16> %15641, %15630
  %15643 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15636, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15644 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15642, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15645 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15643, <16 x i16> %15636)
  %15646 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15644, <16 x i16> %15642)
  %15647 = shufflevector <16 x i16> %15645, <16 x i16> %15646, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15648 = lshr <32 x i16> %15647, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15649 = shufflevector <32 x i16> %15648, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15650 = sext i32 %blur_x.s0.x.v1.base.s677 to i64
  %15651 = add nsw i64 %15650, %15413
  %15652 = getelementptr inbounds i16, i16* %blur_x, i64 %15651
  %15653 = bitcast i16* %15652 to <16 x i16>*
  store <16 x i16> %15649, <16 x i16>* %15653, align 2, !tbaa !399
  %15654 = shufflevector <32 x i16> %15648, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15655 = getelementptr inbounds i16, i16* %15652, i64 16
  %15656 = bitcast i16* %15655 to <16 x i16>*
  store <16 x i16> %15654, <16 x i16>* %15656, align 2, !tbaa !399
  br label %"consume blur_x678"

"consume blur_x678":                              ; preds = %"for blur_y.s0.x.x.rebased670", %"produce blur_x676"
  %15657 = sext i32 %b293 to i64
  %15658 = add nsw i64 %15416, %15657
  %15659 = getelementptr inbounds i16, i16* %blur_x, i64 %15658
  %15660 = bitcast i16* %15659 to <16 x i16>*
  %15661 = load <16 x i16>, <16 x i16>* %15660, align 2, !tbaa !399
  %15662 = getelementptr inbounds i16, i16* %15659, i64 16
  %15663 = bitcast i16* %15662 to <16 x i16>*
  %15664 = load <16 x i16>, <16 x i16>* %15663, align 2, !tbaa !399
  %15665 = add nsw i64 %15419, %15657
  %15666 = getelementptr inbounds i16, i16* %blur_x, i64 %15665
  %15667 = bitcast i16* %15666 to <16 x i16>*
  %15668 = load <16 x i16>, <16 x i16>* %15667, align 2, !tbaa !399
  %15669 = getelementptr inbounds i16, i16* %15666, i64 16
  %15670 = bitcast i16* %15669 to <16 x i16>*
  %15671 = load <16 x i16>, <16 x i16>* %15670, align 2, !tbaa !399
  %15672 = add nsw i64 %15422, %15657
  %15673 = getelementptr inbounds i16, i16* %blur_x, i64 %15672
  %15674 = bitcast i16* %15673 to <16 x i16>*
  %15675 = load <16 x i16>, <16 x i16>* %15674, align 2, !tbaa !399
  %15676 = getelementptr inbounds i16, i16* %15673, i64 16
  %15677 = bitcast i16* %15676 to <16 x i16>*
  %15678 = load <16 x i16>, <16 x i16>* %15677, align 2, !tbaa !399
  %15679 = add nsw i64 %15425, %15657
  %15680 = getelementptr inbounds i16, i16* %blur_x, i64 %15679
  %15681 = bitcast i16* %15680 to <16 x i16>*
  %15682 = load <16 x i16>, <16 x i16>* %15681, align 2, !tbaa !399
  %15683 = getelementptr inbounds i16, i16* %15680, i64 16
  %15684 = bitcast i16* %15683 to <16 x i16>*
  %15685 = load <16 x i16>, <16 x i16>* %15684, align 2, !tbaa !399
  %15686 = add nsw i64 %15428, %15657
  %15687 = getelementptr inbounds i16, i16* %blur_x, i64 %15686
  %15688 = bitcast i16* %15687 to <16 x i16>*
  %15689 = load <16 x i16>, <16 x i16>* %15688, align 2, !tbaa !399
  %15690 = getelementptr inbounds i16, i16* %15687, i64 16
  %15691 = bitcast i16* %15690 to <16 x i16>*
  %15692 = load <16 x i16>, <16 x i16>* %15691, align 2, !tbaa !399
  %15693 = add nsw i64 %15431, %15657
  %15694 = getelementptr inbounds i16, i16* %blur_x, i64 %15693
  %15695 = bitcast i16* %15694 to <16 x i16>*
  %15696 = load <16 x i16>, <16 x i16>* %15695, align 2, !tbaa !399
  %15697 = getelementptr inbounds i16, i16* %15694, i64 16
  %15698 = bitcast i16* %15697 to <16 x i16>*
  %15699 = load <16 x i16>, <16 x i16>* %15698, align 2, !tbaa !399
  %15700 = add nsw i64 %15434, %15657
  %15701 = getelementptr inbounds i16, i16* %blur_x, i64 %15700
  %15702 = bitcast i16* %15701 to <16 x i16>*
  %15703 = load <16 x i16>, <16 x i16>* %15702, align 2, !tbaa !399
  %15704 = getelementptr inbounds i16, i16* %15701, i64 16
  %15705 = bitcast i16* %15704 to <16 x i16>*
  %15706 = load <16 x i16>, <16 x i16>* %15705, align 2, !tbaa !399
  %15707 = add <16 x i16> %15668, %15661
  %15708 = add <16 x i16> %15707, %15675
  %15709 = add <16 x i16> %15708, %15682
  %15710 = add <16 x i16> %15709, %15689
  %15711 = add <16 x i16> %15710, %15696
  %15712 = add <16 x i16> %15711, %15703
  %15713 = add <16 x i16> %15671, %15664
  %15714 = add <16 x i16> %15713, %15678
  %15715 = add <16 x i16> %15714, %15685
  %15716 = add <16 x i16> %15715, %15692
  %15717 = add <16 x i16> %15716, %15699
  %15718 = add <16 x i16> %15717, %15706
  %15719 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15712, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15720 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15718, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15721 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15719, <16 x i16> %15712)
  %15722 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15720, <16 x i16> %15718)
  %15723 = shufflevector <16 x i16> %15721, <16 x i16> %15722, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15724 = lshr <32 x i16> %15723, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15725 = shufflevector <32 x i16> %15724, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15726 = add nsw i64 %15438, %15657
  %15727 = getelementptr inbounds i16, i16* %66, i64 %15726
  %15728 = bitcast i16* %15727 to <16 x i16>*
  store <16 x i16> %15725, <16 x i16>* %15728, align 2, !tbaa !401
  %15729 = shufflevector <32 x i16> %15724, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15730 = getelementptr inbounds i16, i16* %15727, i64 16
  %15731 = bitcast i16* %15730 to <16 x i16>*
  store <16 x i16> %15729, <16 x i16>* %15731, align 2, !tbaa !401
  %15732 = add nuw nsw i32 %blur_y.s0.x.x.rebased672, 1
  %.not2751 = icmp eq i32 %15732, %t1727
  br i1 %.not2751, label %"end for blur_y.s0.x.x.rebased671", label %"for blur_y.s0.x.x.rebased670"

after_bb679:                                      ; preds = %"end for blur_y.s0.x.x.rebased671", %"produce blur_x682"
  br i1 %100, label %"for blur_y.s0.x.x.rebased684.preheader", label %"end for blur_y.s0.x.x.rebased685", !prof !386

"for blur_y.s0.x.x.rebased684.preheader":         ; preds = %after_bb679
  %15733 = sext i32 %t1778 to i64
  %15734 = zext i32 %.pre-phi3512 to i64
  %15735 = mul nsw i64 %15734, %116
  %15736 = sub nsw i64 %15735, %96
  %15737 = zext i32 %.pre-phi3508 to i64
  %15738 = mul nsw i64 %15737, %116
  %15739 = sub nsw i64 %15738, %96
  %15740 = zext i32 %.pre-phi3516 to i64
  %15741 = mul nsw i64 %15740, %116
  %15742 = sub nsw i64 %15741, %96
  %15743 = zext i32 %.pre-phi3520 to i64
  %15744 = mul nsw i64 %15743, %116
  %15745 = sub nsw i64 %15744, %96
  %15746 = zext i32 %.pre-phi3524 to i64
  %15747 = mul nsw i64 %15746, %116
  %15748 = sub nsw i64 %15747, %96
  %15749 = zext i32 %.pre-phi3534 to i64
  %15750 = mul nsw i64 %15749, %116
  %15751 = sub nsw i64 %15750, %96
  %15752 = zext i32 %.pre-phi3528 to i64
  %15753 = mul nsw i64 %15752, %116
  %15754 = sub nsw i64 %15753, %96
  %15755 = sext i32 %a26 to i64
  %15756 = add nsw i64 %15755, 25
  %15757 = mul nsw i64 %15756, %117
  %15758 = add nsw i64 %15757, %120
  br label %"for blur_y.s0.x.x.rebased684"

"produce blur_x682":                              ; preds = %"end for blur_y.s0.x.x.rebased671"
  %15759 = getelementptr inbounds i16, i16* %read_input, i64 %169
  %15760 = getelementptr inbounds i16, i16* %15759, i64 -31
  %15761 = bitcast i16* %15760 to <16 x i16>*
  %15762 = load <16 x i16>, <16 x i16>* %15761, align 2, !tbaa !396
  %15763 = getelementptr inbounds i16, i16* %15759, i64 -15
  %15764 = bitcast i16* %15763 to <16 x i16>*
  %15765 = load <16 x i16>, <16 x i16>* %15764, align 2, !tbaa !396
  %15766 = getelementptr inbounds i16, i16* %15759, i64 -32
  %15767 = bitcast i16* %15766 to <16 x i16>*
  %15768 = load <16 x i16>, <16 x i16>* %15767, align 2, !tbaa !396
  %15769 = getelementptr inbounds i16, i16* %15759, i64 -16
  %15770 = bitcast i16* %15769 to <16 x i16>*
  %15771 = load <16 x i16>, <16 x i16>* %15770, align 2, !tbaa !396
  %15772 = getelementptr inbounds i16, i16* %15759, i64 -30
  %15773 = bitcast i16* %15772 to <16 x i16>*
  %15774 = load <16 x i16>, <16 x i16>* %15773, align 2, !tbaa !396
  %15775 = getelementptr inbounds i16, i16* %15759, i64 -14
  %15776 = bitcast i16* %15775 to <16 x i16>*
  %15777 = load <16 x i16>, <16 x i16>* %15776, align 2, !tbaa !396
  %15778 = getelementptr inbounds i16, i16* %15759, i64 -29
  %15779 = bitcast i16* %15778 to <16 x i16>*
  %15780 = load <16 x i16>, <16 x i16>* %15779, align 2, !tbaa !396
  %15781 = getelementptr inbounds i16, i16* %15759, i64 -13
  %15782 = bitcast i16* %15781 to <16 x i16>*
  %15783 = load <16 x i16>, <16 x i16>* %15782, align 2, !tbaa !396
  %15784 = getelementptr inbounds i16, i16* %15759, i64 -28
  %15785 = bitcast i16* %15784 to <16 x i16>*
  %15786 = load <16 x i16>, <16 x i16>* %15785, align 2, !tbaa !396
  %15787 = getelementptr inbounds i16, i16* %15759, i64 -12
  %15788 = bitcast i16* %15787 to <16 x i16>*
  %15789 = load <16 x i16>, <16 x i16>* %15788, align 2, !tbaa !396
  %15790 = getelementptr inbounds i16, i16* %15759, i64 -26
  %15791 = bitcast i16* %15790 to <16 x i16>*
  %15792 = load <16 x i16>, <16 x i16>* %15791, align 2, !tbaa !396
  %15793 = getelementptr inbounds i16, i16* %15759, i64 -10
  %15794 = bitcast i16* %15793 to <16 x i16>*
  %15795 = load <16 x i16>, <16 x i16>* %15794, align 2, !tbaa !396
  %15796 = getelementptr inbounds i16, i16* %15759, i64 -27
  %15797 = bitcast i16* %15796 to <16 x i16>*
  %15798 = load <16 x i16>, <16 x i16>* %15797, align 2, !tbaa !396
  %15799 = getelementptr inbounds i16, i16* %15759, i64 -11
  %15800 = bitcast i16* %15799 to <16 x i16>*
  %15801 = load <16 x i16>, <16 x i16>* %15800, align 2, !tbaa !396
  %15802 = add <16 x i16> %15768, %15762
  %15803 = add <16 x i16> %15802, %15774
  %15804 = add <16 x i16> %15803, %15780
  %15805 = add <16 x i16> %15804, %15786
  %15806 = add <16 x i16> %15805, %15792
  %15807 = add <16 x i16> %15806, %15798
  %15808 = add <16 x i16> %15771, %15765
  %15809 = add <16 x i16> %15808, %15777
  %15810 = add <16 x i16> %15809, %15783
  %15811 = add <16 x i16> %15810, %15789
  %15812 = add <16 x i16> %15811, %15795
  %15813 = add <16 x i16> %15812, %15801
  %15814 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15807, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15815 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15813, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15816 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15814, <16 x i16> %15807)
  %15817 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15815, <16 x i16> %15813)
  %15818 = shufflevector <16 x i16> %15816, <16 x i16> %15817, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15819 = lshr <32 x i16> %15818, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15820 = shufflevector <32 x i16> %15819, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15821 = zext i32 %.pre-phi3534 to i64
  %15822 = mul nsw i64 %97, %15821
  %15823 = add nsw i64 %99, %15822
  %15824 = getelementptr inbounds i16, i16* %blur_x, i64 %15823
  %15825 = getelementptr inbounds i16, i16* %15824, i64 -32
  %15826 = bitcast i16* %15825 to <16 x i16>*
  store <16 x i16> %15820, <16 x i16>* %15826, align 2, !tbaa !399
  %15827 = shufflevector <32 x i16> %15819, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15828 = getelementptr inbounds i16, i16* %15824, i64 -16
  %15829 = bitcast i16* %15828 to <16 x i16>*
  store <16 x i16> %15827, <16 x i16>* %15829, align 2, !tbaa !399
  %15830 = zext i32 %.pre-phi3512 to i64
  %15831 = mul nsw i64 %15830, %116
  %15832 = add nsw i64 %15831, %94
  %15833 = getelementptr inbounds i16, i16* %blur_x, i64 %15832
  %15834 = getelementptr inbounds i16, i16* %15833, i64 -32
  %15835 = bitcast i16* %15834 to <16 x i16>*
  %15836 = load <16 x i16>, <16 x i16>* %15835, align 2, !tbaa !399
  %15837 = getelementptr inbounds i16, i16* %15833, i64 -16
  %15838 = bitcast i16* %15837 to <16 x i16>*
  %15839 = load <16 x i16>, <16 x i16>* %15838, align 2, !tbaa !399
  %15840 = zext i32 %.pre-phi3508 to i64
  %15841 = mul nsw i64 %15840, %116
  %15842 = add nsw i64 %15841, %94
  %15843 = getelementptr inbounds i16, i16* %blur_x, i64 %15842
  %15844 = getelementptr inbounds i16, i16* %15843, i64 -32
  %15845 = bitcast i16* %15844 to <16 x i16>*
  %15846 = load <16 x i16>, <16 x i16>* %15845, align 2, !tbaa !399
  %15847 = getelementptr inbounds i16, i16* %15843, i64 -16
  %15848 = bitcast i16* %15847 to <16 x i16>*
  %15849 = load <16 x i16>, <16 x i16>* %15848, align 2, !tbaa !399
  %15850 = zext i32 %.pre-phi3516 to i64
  %15851 = mul nsw i64 %15850, %116
  %15852 = add nsw i64 %15851, %94
  %15853 = getelementptr inbounds i16, i16* %blur_x, i64 %15852
  %15854 = getelementptr inbounds i16, i16* %15853, i64 -32
  %15855 = bitcast i16* %15854 to <16 x i16>*
  %15856 = load <16 x i16>, <16 x i16>* %15855, align 2, !tbaa !399
  %15857 = getelementptr inbounds i16, i16* %15853, i64 -16
  %15858 = bitcast i16* %15857 to <16 x i16>*
  %15859 = load <16 x i16>, <16 x i16>* %15858, align 2, !tbaa !399
  %15860 = zext i32 %.pre-phi3520 to i64
  %15861 = mul nsw i64 %15860, %116
  %15862 = add nsw i64 %15861, %94
  %15863 = getelementptr inbounds i16, i16* %blur_x, i64 %15862
  %15864 = getelementptr inbounds i16, i16* %15863, i64 -32
  %15865 = bitcast i16* %15864 to <16 x i16>*
  %15866 = load <16 x i16>, <16 x i16>* %15865, align 2, !tbaa !399
  %15867 = getelementptr inbounds i16, i16* %15863, i64 -16
  %15868 = bitcast i16* %15867 to <16 x i16>*
  %15869 = load <16 x i16>, <16 x i16>* %15868, align 2, !tbaa !399
  %15870 = zext i32 %.pre-phi3524 to i64
  %15871 = mul nsw i64 %15870, %116
  %15872 = add nsw i64 %15871, %94
  %15873 = getelementptr inbounds i16, i16* %blur_x, i64 %15872
  %15874 = getelementptr inbounds i16, i16* %15873, i64 -32
  %15875 = bitcast i16* %15874 to <16 x i16>*
  %15876 = load <16 x i16>, <16 x i16>* %15875, align 2, !tbaa !399
  %15877 = getelementptr inbounds i16, i16* %15873, i64 -16
  %15878 = bitcast i16* %15877 to <16 x i16>*
  %15879 = load <16 x i16>, <16 x i16>* %15878, align 2, !tbaa !399
  %15880 = mul nsw i64 %15821, %116
  %15881 = add nsw i64 %15880, %94
  %15882 = getelementptr inbounds i16, i16* %blur_x, i64 %15881
  %15883 = getelementptr inbounds i16, i16* %15882, i64 -32
  %15884 = bitcast i16* %15883 to <16 x i16>*
  %15885 = load <16 x i16>, <16 x i16>* %15884, align 2, !tbaa !399
  %15886 = getelementptr inbounds i16, i16* %15882, i64 -16
  %15887 = bitcast i16* %15886 to <16 x i16>*
  %15888 = load <16 x i16>, <16 x i16>* %15887, align 2, !tbaa !399
  %15889 = zext i32 %.pre-phi3528 to i64
  %15890 = mul nsw i64 %15889, %116
  %15891 = add nsw i64 %15890, %94
  %15892 = getelementptr inbounds i16, i16* %blur_x, i64 %15891
  %15893 = getelementptr inbounds i16, i16* %15892, i64 -32
  %15894 = bitcast i16* %15893 to <16 x i16>*
  %15895 = load <16 x i16>, <16 x i16>* %15894, align 2, !tbaa !399
  %15896 = getelementptr inbounds i16, i16* %15892, i64 -16
  %15897 = bitcast i16* %15896 to <16 x i16>*
  %15898 = load <16 x i16>, <16 x i16>* %15897, align 2, !tbaa !399
  %15899 = add <16 x i16> %15846, %15836
  %15900 = add <16 x i16> %15899, %15856
  %15901 = add <16 x i16> %15900, %15866
  %15902 = add <16 x i16> %15901, %15876
  %15903 = add <16 x i16> %15902, %15885
  %15904 = add <16 x i16> %15903, %15895
  %15905 = add <16 x i16> %15849, %15839
  %15906 = add <16 x i16> %15905, %15859
  %15907 = add <16 x i16> %15906, %15869
  %15908 = add <16 x i16> %15907, %15879
  %15909 = add <16 x i16> %15908, %15888
  %15910 = add <16 x i16> %15909, %15898
  %15911 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15904, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15912 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15910, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %15913 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15911, <16 x i16> %15904)
  %15914 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %15912, <16 x i16> %15910)
  %15915 = shufflevector <16 x i16> %15913, <16 x i16> %15914, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15916 = lshr <32 x i16> %15915, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15917 = shufflevector <32 x i16> %15916, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15918 = sext i32 %a26 to i64
  %15919 = add nsw i64 %15918, 25
  %15920 = mul nsw i64 %15919, %117
  %15921 = add nsw i64 %119, %15920
  %15922 = getelementptr inbounds i16, i16* %66, i64 %15921
  %15923 = getelementptr inbounds i16, i16* %15922, i64 -32
  %15924 = bitcast i16* %15923 to <16 x i16>*
  store <16 x i16> %15917, <16 x i16>* %15924, align 2, !tbaa !401
  %15925 = shufflevector <32 x i16> %15916, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15926 = getelementptr inbounds i16, i16* %15922, i64 -16
  %15927 = bitcast i16* %15926 to <16 x i16>*
  store <16 x i16> %15925, <16 x i16>* %15927, align 2, !tbaa !401
  br label %after_bb679

"for blur_y.s0.x.x.rebased684":                   ; preds = %"for blur_y.s0.x.x.rebased684.preheader", %"consume blur_x691"
  %indvars.iv3354 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased684.preheader" ], [ %indvars.iv.next3355, %"consume blur_x691" ]
  %15928 = add nsw i64 %indvars.iv3354, %101
  %15929 = icmp slt i64 %15928, 1
  %15930 = trunc i64 %15928 to i32
  %15931 = shl nsw i32 %15930, 5
  %15932 = icmp sgt i32 %4, %15931
  %15933 = or i1 %15929, %15932
  br i1 %15933, label %"produce blur_x690", label %"for blur_y.s0.x.x.rebased684.consume blur_x691_crit_edge"

"for blur_y.s0.x.x.rebased684.consume blur_x691_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased684"
  %.pre3583 = shl nsw i64 %15928, 5
  br label %"consume blur_x691"

"end for blur_y.s0.x.x.rebased685":               ; preds = %"consume blur_x691", %after_bb679
  br i1 %102, label %"for blur_y.s0.x.x.rebased692.preheader", label %"end for blur_y.s0.x.x.rebased693", !prof !386

"for blur_y.s0.x.x.rebased692.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased685"
  %15934 = sext i32 %t1778 to i64
  %15935 = zext i32 %.pre-phi3512 to i64
  %15936 = mul nsw i64 %15935, %116
  %15937 = sub nsw i64 %15936, %96
  %15938 = zext i32 %.pre-phi3508 to i64
  %15939 = mul nsw i64 %15938, %116
  %15940 = sub nsw i64 %15939, %96
  %15941 = zext i32 %.pre-phi3516 to i64
  %15942 = mul nsw i64 %15941, %116
  %15943 = sub nsw i64 %15942, %96
  %15944 = zext i32 %.pre-phi3520 to i64
  %15945 = mul nsw i64 %15944, %116
  %15946 = sub nsw i64 %15945, %96
  %15947 = zext i32 %.pre-phi3524 to i64
  %15948 = mul nsw i64 %15947, %116
  %15949 = sub nsw i64 %15948, %96
  %15950 = zext i32 %.pre-phi3534 to i64
  %15951 = mul nsw i64 %15950, %116
  %15952 = sub nsw i64 %15951, %96
  %15953 = zext i32 %.pre-phi3528 to i64
  %15954 = mul nsw i64 %15953, %116
  %15955 = sub nsw i64 %15954, %96
  %15956 = sext i32 %a26 to i64
  %15957 = add nsw i64 %15956, 25
  %15958 = mul nsw i64 %15957, %117
  %15959 = add nsw i64 %15958, %120
  br label %"for blur_y.s0.x.x.rebased692"

"produce blur_x690":                              ; preds = %"for blur_y.s0.x.x.rebased684"
  %t1152 = add nsw i32 %15931, %t2161
  %15960 = sext i32 %t1152 to i64
  %15961 = getelementptr inbounds i16, i16* %read_input, i64 %15960
  %15962 = getelementptr inbounds i16, i16* %15961, i64 1
  %15963 = bitcast i16* %15962 to <16 x i16>*
  %15964 = load <16 x i16>, <16 x i16>* %15963, align 2, !tbaa !396
  %15965 = getelementptr inbounds i16, i16* %15961, i64 17
  %15966 = bitcast i16* %15965 to <16 x i16>*
  %15967 = load <16 x i16>, <16 x i16>* %15966, align 2, !tbaa !396
  %15968 = bitcast i16* %15961 to <16 x i16>*
  %15969 = load <16 x i16>, <16 x i16>* %15968, align 2, !tbaa !396
  %15970 = getelementptr inbounds i16, i16* %15961, i64 16
  %15971 = bitcast i16* %15970 to <16 x i16>*
  %15972 = load <16 x i16>, <16 x i16>* %15971, align 2, !tbaa !396
  %15973 = getelementptr inbounds i16, i16* %15961, i64 2
  %15974 = bitcast i16* %15973 to <16 x i16>*
  %15975 = load <16 x i16>, <16 x i16>* %15974, align 2, !tbaa !396
  %15976 = getelementptr inbounds i16, i16* %15961, i64 18
  %15977 = bitcast i16* %15976 to <16 x i16>*
  %15978 = load <16 x i16>, <16 x i16>* %15977, align 2, !tbaa !396
  %15979 = getelementptr inbounds i16, i16* %15961, i64 3
  %15980 = bitcast i16* %15979 to <16 x i16>*
  %15981 = load <16 x i16>, <16 x i16>* %15980, align 2, !tbaa !396
  %15982 = getelementptr inbounds i16, i16* %15961, i64 19
  %15983 = bitcast i16* %15982 to <16 x i16>*
  %15984 = load <16 x i16>, <16 x i16>* %15983, align 2, !tbaa !396
  %15985 = getelementptr inbounds i16, i16* %15961, i64 4
  %15986 = bitcast i16* %15985 to <16 x i16>*
  %15987 = load <16 x i16>, <16 x i16>* %15986, align 2, !tbaa !396
  %15988 = getelementptr inbounds i16, i16* %15961, i64 20
  %15989 = bitcast i16* %15988 to <16 x i16>*
  %15990 = load <16 x i16>, <16 x i16>* %15989, align 2, !tbaa !396
  %15991 = getelementptr inbounds i16, i16* %15961, i64 6
  %15992 = bitcast i16* %15991 to <16 x i16>*
  %15993 = load <16 x i16>, <16 x i16>* %15992, align 2, !tbaa !396
  %15994 = getelementptr inbounds i16, i16* %15961, i64 22
  %15995 = bitcast i16* %15994 to <16 x i16>*
  %15996 = load <16 x i16>, <16 x i16>* %15995, align 2, !tbaa !396
  %15997 = getelementptr inbounds i16, i16* %15961, i64 5
  %15998 = bitcast i16* %15997 to <16 x i16>*
  %15999 = load <16 x i16>, <16 x i16>* %15998, align 2, !tbaa !396
  %16000 = getelementptr inbounds i16, i16* %15961, i64 21
  %16001 = bitcast i16* %16000 to <16 x i16>*
  %16002 = load <16 x i16>, <16 x i16>* %16001, align 2, !tbaa !396
  %16003 = add <16 x i16> %15969, %15964
  %16004 = add <16 x i16> %16003, %15975
  %16005 = add <16 x i16> %16004, %15981
  %16006 = add <16 x i16> %16005, %15987
  %16007 = add <16 x i16> %16006, %15993
  %16008 = add <16 x i16> %16007, %15999
  %16009 = add <16 x i16> %15972, %15967
  %16010 = add <16 x i16> %16009, %15978
  %16011 = add <16 x i16> %16010, %15984
  %16012 = add <16 x i16> %16011, %15990
  %16013 = add <16 x i16> %16012, %15996
  %16014 = add <16 x i16> %16013, %16002
  %16015 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16008, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16016 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16014, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16017 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16015, <16 x i16> %16008)
  %16018 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16016, <16 x i16> %16014)
  %16019 = shufflevector <16 x i16> %16017, <16 x i16> %16018, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16020 = lshr <32 x i16> %16019, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16021 = shufflevector <32 x i16> %16020, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16022 = shl nsw i64 %15928, 5
  %16023 = add nsw i64 %16022, %15733
  %16024 = getelementptr inbounds i16, i16* %blur_x, i64 %16023
  %16025 = bitcast i16* %16024 to <16 x i16>*
  store <16 x i16> %16021, <16 x i16>* %16025, align 2, !tbaa !399
  %16026 = shufflevector <32 x i16> %16020, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16027 = getelementptr inbounds i16, i16* %16024, i64 16
  %16028 = bitcast i16* %16027 to <16 x i16>*
  store <16 x i16> %16026, <16 x i16>* %16028, align 2, !tbaa !399
  br label %"consume blur_x691"

"consume blur_x691":                              ; preds = %"for blur_y.s0.x.x.rebased684.consume blur_x691_crit_edge", %"produce blur_x690"
  %.pre-phi3584 = phi i64 [ %.pre3583, %"for blur_y.s0.x.x.rebased684.consume blur_x691_crit_edge" ], [ %16022, %"produce blur_x690" ]
  %16029 = add nsw i64 %15736, %.pre-phi3584
  %16030 = getelementptr inbounds i16, i16* %blur_x, i64 %16029
  %16031 = bitcast i16* %16030 to <16 x i16>*
  %16032 = load <16 x i16>, <16 x i16>* %16031, align 2, !tbaa !399
  %16033 = getelementptr inbounds i16, i16* %16030, i64 16
  %16034 = bitcast i16* %16033 to <16 x i16>*
  %16035 = load <16 x i16>, <16 x i16>* %16034, align 2, !tbaa !399
  %16036 = add nsw i64 %15739, %.pre-phi3584
  %16037 = getelementptr inbounds i16, i16* %blur_x, i64 %16036
  %16038 = bitcast i16* %16037 to <16 x i16>*
  %16039 = load <16 x i16>, <16 x i16>* %16038, align 2, !tbaa !399
  %16040 = getelementptr inbounds i16, i16* %16037, i64 16
  %16041 = bitcast i16* %16040 to <16 x i16>*
  %16042 = load <16 x i16>, <16 x i16>* %16041, align 2, !tbaa !399
  %16043 = add nsw i64 %15742, %.pre-phi3584
  %16044 = getelementptr inbounds i16, i16* %blur_x, i64 %16043
  %16045 = bitcast i16* %16044 to <16 x i16>*
  %16046 = load <16 x i16>, <16 x i16>* %16045, align 2, !tbaa !399
  %16047 = getelementptr inbounds i16, i16* %16044, i64 16
  %16048 = bitcast i16* %16047 to <16 x i16>*
  %16049 = load <16 x i16>, <16 x i16>* %16048, align 2, !tbaa !399
  %16050 = add nsw i64 %15745, %.pre-phi3584
  %16051 = getelementptr inbounds i16, i16* %blur_x, i64 %16050
  %16052 = bitcast i16* %16051 to <16 x i16>*
  %16053 = load <16 x i16>, <16 x i16>* %16052, align 2, !tbaa !399
  %16054 = getelementptr inbounds i16, i16* %16051, i64 16
  %16055 = bitcast i16* %16054 to <16 x i16>*
  %16056 = load <16 x i16>, <16 x i16>* %16055, align 2, !tbaa !399
  %16057 = add nsw i64 %15748, %.pre-phi3584
  %16058 = getelementptr inbounds i16, i16* %blur_x, i64 %16057
  %16059 = bitcast i16* %16058 to <16 x i16>*
  %16060 = load <16 x i16>, <16 x i16>* %16059, align 2, !tbaa !399
  %16061 = getelementptr inbounds i16, i16* %16058, i64 16
  %16062 = bitcast i16* %16061 to <16 x i16>*
  %16063 = load <16 x i16>, <16 x i16>* %16062, align 2, !tbaa !399
  %16064 = add nsw i64 %15751, %.pre-phi3584
  %16065 = getelementptr inbounds i16, i16* %blur_x, i64 %16064
  %16066 = bitcast i16* %16065 to <16 x i16>*
  %16067 = load <16 x i16>, <16 x i16>* %16066, align 2, !tbaa !399
  %16068 = getelementptr inbounds i16, i16* %16065, i64 16
  %16069 = bitcast i16* %16068 to <16 x i16>*
  %16070 = load <16 x i16>, <16 x i16>* %16069, align 2, !tbaa !399
  %16071 = add nsw i64 %15754, %.pre-phi3584
  %16072 = getelementptr inbounds i16, i16* %blur_x, i64 %16071
  %16073 = bitcast i16* %16072 to <16 x i16>*
  %16074 = load <16 x i16>, <16 x i16>* %16073, align 2, !tbaa !399
  %16075 = getelementptr inbounds i16, i16* %16072, i64 16
  %16076 = bitcast i16* %16075 to <16 x i16>*
  %16077 = load <16 x i16>, <16 x i16>* %16076, align 2, !tbaa !399
  %16078 = add <16 x i16> %16039, %16032
  %16079 = add <16 x i16> %16078, %16046
  %16080 = add <16 x i16> %16079, %16053
  %16081 = add <16 x i16> %16080, %16060
  %16082 = add <16 x i16> %16081, %16067
  %16083 = add <16 x i16> %16082, %16074
  %16084 = add <16 x i16> %16042, %16035
  %16085 = add <16 x i16> %16084, %16049
  %16086 = add <16 x i16> %16085, %16056
  %16087 = add <16 x i16> %16086, %16063
  %16088 = add <16 x i16> %16087, %16070
  %16089 = add <16 x i16> %16088, %16077
  %16090 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16083, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16091 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16089, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16092 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16090, <16 x i16> %16083)
  %16093 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16091, <16 x i16> %16089)
  %16094 = shufflevector <16 x i16> %16092, <16 x i16> %16093, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16095 = lshr <32 x i16> %16094, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16096 = shufflevector <32 x i16> %16095, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16097 = add nsw i64 %15758, %.pre-phi3584
  %16098 = getelementptr inbounds i16, i16* %66, i64 %16097
  %16099 = bitcast i16* %16098 to <16 x i16>*
  store <16 x i16> %16096, <16 x i16>* %16099, align 2, !tbaa !401
  %16100 = shufflevector <32 x i16> %16095, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16101 = getelementptr inbounds i16, i16* %16098, i64 16
  %16102 = bitcast i16* %16101 to <16 x i16>*
  store <16 x i16> %16100, <16 x i16>* %16102, align 2, !tbaa !401
  %indvars.iv.next3355 = add nuw nsw i64 %indvars.iv3354, 1
  %.not2750 = icmp eq i64 %indvars.iv.next3355, %188
  br i1 %.not2750, label %"end for blur_y.s0.x.x.rebased685", label %"for blur_y.s0.x.x.rebased684"

"for blur_y.s0.x.x.rebased692":                   ; preds = %"for blur_y.s0.x.x.rebased692.preheader", %"consume blur_x700"
  %blur_y.s0.x.x.rebased694 = phi i32 [ %16253, %"consume blur_x700" ], [ 0, %"for blur_y.s0.x.x.rebased692.preheader" ]
  %16103 = add nsw i32 %blur_y.s0.x.x.rebased694, %t1670
  %a294 = shl nsw i32 %16103, 5
  %16104 = icmp sgt i32 %a14, %a294
  %b300 = select i1 %16104, i32 %a294, i32 %a14
  %16105 = icmp slt i32 %16103, 1
  %16106 = icmp sgt i32 %4, %a294
  %16107 = or i1 %16105, %16106
  br i1 %16107, label %"produce blur_x698", label %"consume blur_x700"

"end for blur_y.s0.x.x.rebased693":               ; preds = %"consume blur_x700", %"end for blur_y.s0.x.x.rebased685"
  br i1 %34, label %"produce blur_x704", label %after_bb701

"produce blur_x698":                              ; preds = %"for blur_y.s0.x.x.rebased692"
  %16108 = icmp slt i32 %b300, %4
  %blur_x.s0.x.v1.base.s699 = select i1 %16108, i32 %b300, i32 %4
  %t1157 = add nsw i32 %blur_x.s0.x.v1.base.s699, %t2161
  %16109 = sext i32 %t1157 to i64
  %16110 = getelementptr inbounds i16, i16* %read_input, i64 %16109
  %16111 = getelementptr inbounds i16, i16* %16110, i64 1
  %16112 = bitcast i16* %16111 to <16 x i16>*
  %16113 = load <16 x i16>, <16 x i16>* %16112, align 2, !tbaa !396
  %16114 = getelementptr inbounds i16, i16* %16110, i64 17
  %16115 = bitcast i16* %16114 to <16 x i16>*
  %16116 = load <16 x i16>, <16 x i16>* %16115, align 2, !tbaa !396
  %16117 = bitcast i16* %16110 to <16 x i16>*
  %16118 = load <16 x i16>, <16 x i16>* %16117, align 2, !tbaa !396
  %16119 = getelementptr inbounds i16, i16* %16110, i64 16
  %16120 = bitcast i16* %16119 to <16 x i16>*
  %16121 = load <16 x i16>, <16 x i16>* %16120, align 2, !tbaa !396
  %16122 = getelementptr inbounds i16, i16* %16110, i64 2
  %16123 = bitcast i16* %16122 to <16 x i16>*
  %16124 = load <16 x i16>, <16 x i16>* %16123, align 2, !tbaa !396
  %16125 = getelementptr inbounds i16, i16* %16110, i64 18
  %16126 = bitcast i16* %16125 to <16 x i16>*
  %16127 = load <16 x i16>, <16 x i16>* %16126, align 2, !tbaa !396
  %16128 = getelementptr inbounds i16, i16* %16110, i64 3
  %16129 = bitcast i16* %16128 to <16 x i16>*
  %16130 = load <16 x i16>, <16 x i16>* %16129, align 2, !tbaa !396
  %16131 = getelementptr inbounds i16, i16* %16110, i64 19
  %16132 = bitcast i16* %16131 to <16 x i16>*
  %16133 = load <16 x i16>, <16 x i16>* %16132, align 2, !tbaa !396
  %16134 = getelementptr inbounds i16, i16* %16110, i64 4
  %16135 = bitcast i16* %16134 to <16 x i16>*
  %16136 = load <16 x i16>, <16 x i16>* %16135, align 2, !tbaa !396
  %16137 = getelementptr inbounds i16, i16* %16110, i64 20
  %16138 = bitcast i16* %16137 to <16 x i16>*
  %16139 = load <16 x i16>, <16 x i16>* %16138, align 2, !tbaa !396
  %16140 = getelementptr inbounds i16, i16* %16110, i64 6
  %16141 = bitcast i16* %16140 to <16 x i16>*
  %16142 = load <16 x i16>, <16 x i16>* %16141, align 2, !tbaa !396
  %16143 = getelementptr inbounds i16, i16* %16110, i64 22
  %16144 = bitcast i16* %16143 to <16 x i16>*
  %16145 = load <16 x i16>, <16 x i16>* %16144, align 2, !tbaa !396
  %16146 = getelementptr inbounds i16, i16* %16110, i64 5
  %16147 = bitcast i16* %16146 to <16 x i16>*
  %16148 = load <16 x i16>, <16 x i16>* %16147, align 2, !tbaa !396
  %16149 = getelementptr inbounds i16, i16* %16110, i64 21
  %16150 = bitcast i16* %16149 to <16 x i16>*
  %16151 = load <16 x i16>, <16 x i16>* %16150, align 2, !tbaa !396
  %16152 = add <16 x i16> %16118, %16113
  %16153 = add <16 x i16> %16152, %16124
  %16154 = add <16 x i16> %16153, %16130
  %16155 = add <16 x i16> %16154, %16136
  %16156 = add <16 x i16> %16155, %16142
  %16157 = add <16 x i16> %16156, %16148
  %16158 = add <16 x i16> %16121, %16116
  %16159 = add <16 x i16> %16158, %16127
  %16160 = add <16 x i16> %16159, %16133
  %16161 = add <16 x i16> %16160, %16139
  %16162 = add <16 x i16> %16161, %16145
  %16163 = add <16 x i16> %16162, %16151
  %16164 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16157, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16165 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16163, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16166 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16164, <16 x i16> %16157)
  %16167 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16165, <16 x i16> %16163)
  %16168 = shufflevector <16 x i16> %16166, <16 x i16> %16167, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16169 = lshr <32 x i16> %16168, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16170 = shufflevector <32 x i16> %16169, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16171 = sext i32 %blur_x.s0.x.v1.base.s699 to i64
  %16172 = add nsw i64 %16171, %15934
  %16173 = getelementptr inbounds i16, i16* %blur_x, i64 %16172
  %16174 = bitcast i16* %16173 to <16 x i16>*
  store <16 x i16> %16170, <16 x i16>* %16174, align 2, !tbaa !399
  %16175 = shufflevector <32 x i16> %16169, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16176 = getelementptr inbounds i16, i16* %16173, i64 16
  %16177 = bitcast i16* %16176 to <16 x i16>*
  store <16 x i16> %16175, <16 x i16>* %16177, align 2, !tbaa !399
  br label %"consume blur_x700"

"consume blur_x700":                              ; preds = %"for blur_y.s0.x.x.rebased692", %"produce blur_x698"
  %16178 = sext i32 %b300 to i64
  %16179 = add nsw i64 %15937, %16178
  %16180 = getelementptr inbounds i16, i16* %blur_x, i64 %16179
  %16181 = bitcast i16* %16180 to <16 x i16>*
  %16182 = load <16 x i16>, <16 x i16>* %16181, align 2, !tbaa !399
  %16183 = getelementptr inbounds i16, i16* %16180, i64 16
  %16184 = bitcast i16* %16183 to <16 x i16>*
  %16185 = load <16 x i16>, <16 x i16>* %16184, align 2, !tbaa !399
  %16186 = add nsw i64 %15940, %16178
  %16187 = getelementptr inbounds i16, i16* %blur_x, i64 %16186
  %16188 = bitcast i16* %16187 to <16 x i16>*
  %16189 = load <16 x i16>, <16 x i16>* %16188, align 2, !tbaa !399
  %16190 = getelementptr inbounds i16, i16* %16187, i64 16
  %16191 = bitcast i16* %16190 to <16 x i16>*
  %16192 = load <16 x i16>, <16 x i16>* %16191, align 2, !tbaa !399
  %16193 = add nsw i64 %15943, %16178
  %16194 = getelementptr inbounds i16, i16* %blur_x, i64 %16193
  %16195 = bitcast i16* %16194 to <16 x i16>*
  %16196 = load <16 x i16>, <16 x i16>* %16195, align 2, !tbaa !399
  %16197 = getelementptr inbounds i16, i16* %16194, i64 16
  %16198 = bitcast i16* %16197 to <16 x i16>*
  %16199 = load <16 x i16>, <16 x i16>* %16198, align 2, !tbaa !399
  %16200 = add nsw i64 %15946, %16178
  %16201 = getelementptr inbounds i16, i16* %blur_x, i64 %16200
  %16202 = bitcast i16* %16201 to <16 x i16>*
  %16203 = load <16 x i16>, <16 x i16>* %16202, align 2, !tbaa !399
  %16204 = getelementptr inbounds i16, i16* %16201, i64 16
  %16205 = bitcast i16* %16204 to <16 x i16>*
  %16206 = load <16 x i16>, <16 x i16>* %16205, align 2, !tbaa !399
  %16207 = add nsw i64 %15949, %16178
  %16208 = getelementptr inbounds i16, i16* %blur_x, i64 %16207
  %16209 = bitcast i16* %16208 to <16 x i16>*
  %16210 = load <16 x i16>, <16 x i16>* %16209, align 2, !tbaa !399
  %16211 = getelementptr inbounds i16, i16* %16208, i64 16
  %16212 = bitcast i16* %16211 to <16 x i16>*
  %16213 = load <16 x i16>, <16 x i16>* %16212, align 2, !tbaa !399
  %16214 = add nsw i64 %15952, %16178
  %16215 = getelementptr inbounds i16, i16* %blur_x, i64 %16214
  %16216 = bitcast i16* %16215 to <16 x i16>*
  %16217 = load <16 x i16>, <16 x i16>* %16216, align 2, !tbaa !399
  %16218 = getelementptr inbounds i16, i16* %16215, i64 16
  %16219 = bitcast i16* %16218 to <16 x i16>*
  %16220 = load <16 x i16>, <16 x i16>* %16219, align 2, !tbaa !399
  %16221 = add nsw i64 %15955, %16178
  %16222 = getelementptr inbounds i16, i16* %blur_x, i64 %16221
  %16223 = bitcast i16* %16222 to <16 x i16>*
  %16224 = load <16 x i16>, <16 x i16>* %16223, align 2, !tbaa !399
  %16225 = getelementptr inbounds i16, i16* %16222, i64 16
  %16226 = bitcast i16* %16225 to <16 x i16>*
  %16227 = load <16 x i16>, <16 x i16>* %16226, align 2, !tbaa !399
  %16228 = add <16 x i16> %16189, %16182
  %16229 = add <16 x i16> %16228, %16196
  %16230 = add <16 x i16> %16229, %16203
  %16231 = add <16 x i16> %16230, %16210
  %16232 = add <16 x i16> %16231, %16217
  %16233 = add <16 x i16> %16232, %16224
  %16234 = add <16 x i16> %16192, %16185
  %16235 = add <16 x i16> %16234, %16199
  %16236 = add <16 x i16> %16235, %16206
  %16237 = add <16 x i16> %16236, %16213
  %16238 = add <16 x i16> %16237, %16220
  %16239 = add <16 x i16> %16238, %16227
  %16240 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16233, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16241 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16239, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16242 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16240, <16 x i16> %16233)
  %16243 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16241, <16 x i16> %16239)
  %16244 = shufflevector <16 x i16> %16242, <16 x i16> %16243, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16245 = lshr <32 x i16> %16244, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16246 = shufflevector <32 x i16> %16245, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16247 = add nsw i64 %15959, %16178
  %16248 = getelementptr inbounds i16, i16* %66, i64 %16247
  %16249 = bitcast i16* %16248 to <16 x i16>*
  store <16 x i16> %16246, <16 x i16>* %16249, align 2, !tbaa !401
  %16250 = shufflevector <32 x i16> %16245, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16251 = getelementptr inbounds i16, i16* %16248, i64 16
  %16252 = bitcast i16* %16251 to <16 x i16>*
  store <16 x i16> %16250, <16 x i16>* %16252, align 2, !tbaa !401
  %16253 = add nuw nsw i32 %blur_y.s0.x.x.rebased694, 1
  %.not2749 = icmp eq i32 %16253, %t1727
  br i1 %.not2749, label %"end for blur_y.s0.x.x.rebased693", label %"for blur_y.s0.x.x.rebased692"

after_bb701:                                      ; preds = %"end for blur_y.s0.x.x.rebased693", %"produce blur_x704"
  br i1 %100, label %"for blur_y.s0.x.x.rebased706.preheader", label %"end for blur_y.s0.x.x.rebased707", !prof !386

"for blur_y.s0.x.x.rebased706.preheader":         ; preds = %after_bb701
  %16254 = sext i32 %t1726 to i64
  %16255 = zext i32 %.pre-phi3516 to i64
  %16256 = mul nsw i64 %16255, %116
  %16257 = sub nsw i64 %16256, %96
  %16258 = zext i32 %.pre-phi3512 to i64
  %16259 = mul nsw i64 %16258, %116
  %16260 = sub nsw i64 %16259, %96
  %16261 = zext i32 %.pre-phi3520 to i64
  %16262 = mul nsw i64 %16261, %116
  %16263 = sub nsw i64 %16262, %96
  %16264 = zext i32 %.pre-phi3524 to i64
  %16265 = mul nsw i64 %16264, %116
  %16266 = sub nsw i64 %16265, %96
  %16267 = zext i32 %.pre-phi3528 to i64
  %16268 = mul nsw i64 %16267, %116
  %16269 = sub nsw i64 %16268, %96
  %16270 = zext i32 %.pre-phi to i64
  %16271 = mul nsw i64 %16270, %116
  %16272 = sub nsw i64 %16271, %96
  %16273 = zext i32 %.pre-phi3534 to i64
  %16274 = mul nsw i64 %16273, %116
  %16275 = sub nsw i64 %16274, %96
  %16276 = sext i32 %a26 to i64
  %16277 = add nsw i64 %16276, 26
  %16278 = mul nsw i64 %16277, %117
  %16279 = add nsw i64 %16278, %120
  br label %"for blur_y.s0.x.x.rebased706"

"produce blur_x704":                              ; preds = %"end for blur_y.s0.x.x.rebased693"
  %16280 = getelementptr inbounds i16, i16* %read_input, i64 %171
  %16281 = getelementptr inbounds i16, i16* %16280, i64 -31
  %16282 = bitcast i16* %16281 to <16 x i16>*
  %16283 = load <16 x i16>, <16 x i16>* %16282, align 2, !tbaa !396
  %16284 = getelementptr inbounds i16, i16* %16280, i64 -15
  %16285 = bitcast i16* %16284 to <16 x i16>*
  %16286 = load <16 x i16>, <16 x i16>* %16285, align 2, !tbaa !396
  %16287 = getelementptr inbounds i16, i16* %16280, i64 -32
  %16288 = bitcast i16* %16287 to <16 x i16>*
  %16289 = load <16 x i16>, <16 x i16>* %16288, align 2, !tbaa !396
  %16290 = getelementptr inbounds i16, i16* %16280, i64 -16
  %16291 = bitcast i16* %16290 to <16 x i16>*
  %16292 = load <16 x i16>, <16 x i16>* %16291, align 2, !tbaa !396
  %16293 = getelementptr inbounds i16, i16* %16280, i64 -30
  %16294 = bitcast i16* %16293 to <16 x i16>*
  %16295 = load <16 x i16>, <16 x i16>* %16294, align 2, !tbaa !396
  %16296 = getelementptr inbounds i16, i16* %16280, i64 -14
  %16297 = bitcast i16* %16296 to <16 x i16>*
  %16298 = load <16 x i16>, <16 x i16>* %16297, align 2, !tbaa !396
  %16299 = getelementptr inbounds i16, i16* %16280, i64 -29
  %16300 = bitcast i16* %16299 to <16 x i16>*
  %16301 = load <16 x i16>, <16 x i16>* %16300, align 2, !tbaa !396
  %16302 = getelementptr inbounds i16, i16* %16280, i64 -13
  %16303 = bitcast i16* %16302 to <16 x i16>*
  %16304 = load <16 x i16>, <16 x i16>* %16303, align 2, !tbaa !396
  %16305 = getelementptr inbounds i16, i16* %16280, i64 -28
  %16306 = bitcast i16* %16305 to <16 x i16>*
  %16307 = load <16 x i16>, <16 x i16>* %16306, align 2, !tbaa !396
  %16308 = getelementptr inbounds i16, i16* %16280, i64 -12
  %16309 = bitcast i16* %16308 to <16 x i16>*
  %16310 = load <16 x i16>, <16 x i16>* %16309, align 2, !tbaa !396
  %16311 = getelementptr inbounds i16, i16* %16280, i64 -26
  %16312 = bitcast i16* %16311 to <16 x i16>*
  %16313 = load <16 x i16>, <16 x i16>* %16312, align 2, !tbaa !396
  %16314 = getelementptr inbounds i16, i16* %16280, i64 -10
  %16315 = bitcast i16* %16314 to <16 x i16>*
  %16316 = load <16 x i16>, <16 x i16>* %16315, align 2, !tbaa !396
  %16317 = getelementptr inbounds i16, i16* %16280, i64 -27
  %16318 = bitcast i16* %16317 to <16 x i16>*
  %16319 = load <16 x i16>, <16 x i16>* %16318, align 2, !tbaa !396
  %16320 = getelementptr inbounds i16, i16* %16280, i64 -11
  %16321 = bitcast i16* %16320 to <16 x i16>*
  %16322 = load <16 x i16>, <16 x i16>* %16321, align 2, !tbaa !396
  %16323 = add <16 x i16> %16289, %16283
  %16324 = add <16 x i16> %16323, %16295
  %16325 = add <16 x i16> %16324, %16301
  %16326 = add <16 x i16> %16325, %16307
  %16327 = add <16 x i16> %16326, %16313
  %16328 = add <16 x i16> %16327, %16319
  %16329 = add <16 x i16> %16292, %16286
  %16330 = add <16 x i16> %16329, %16298
  %16331 = add <16 x i16> %16330, %16304
  %16332 = add <16 x i16> %16331, %16310
  %16333 = add <16 x i16> %16332, %16316
  %16334 = add <16 x i16> %16333, %16322
  %16335 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16328, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16336 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16334, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16337 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16335, <16 x i16> %16328)
  %16338 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16336, <16 x i16> %16334)
  %16339 = shufflevector <16 x i16> %16337, <16 x i16> %16338, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16340 = lshr <32 x i16> %16339, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16341 = shufflevector <32 x i16> %16340, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16342 = zext i32 %.pre-phi to i64
  %16343 = mul nsw i64 %97, %16342
  %16344 = add nsw i64 %99, %16343
  %16345 = getelementptr inbounds i16, i16* %blur_x, i64 %16344
  %16346 = getelementptr inbounds i16, i16* %16345, i64 -32
  %16347 = bitcast i16* %16346 to <16 x i16>*
  store <16 x i16> %16341, <16 x i16>* %16347, align 2, !tbaa !399
  %16348 = shufflevector <32 x i16> %16340, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16349 = getelementptr inbounds i16, i16* %16345, i64 -16
  %16350 = bitcast i16* %16349 to <16 x i16>*
  store <16 x i16> %16348, <16 x i16>* %16350, align 2, !tbaa !399
  %16351 = zext i32 %.pre-phi3516 to i64
  %16352 = mul nsw i64 %16351, %116
  %16353 = add nsw i64 %16352, %94
  %16354 = getelementptr inbounds i16, i16* %blur_x, i64 %16353
  %16355 = getelementptr inbounds i16, i16* %16354, i64 -32
  %16356 = bitcast i16* %16355 to <16 x i16>*
  %16357 = load <16 x i16>, <16 x i16>* %16356, align 2, !tbaa !399
  %16358 = getelementptr inbounds i16, i16* %16354, i64 -16
  %16359 = bitcast i16* %16358 to <16 x i16>*
  %16360 = load <16 x i16>, <16 x i16>* %16359, align 2, !tbaa !399
  %16361 = zext i32 %.pre-phi3512 to i64
  %16362 = mul nsw i64 %16361, %116
  %16363 = add nsw i64 %16362, %94
  %16364 = getelementptr inbounds i16, i16* %blur_x, i64 %16363
  %16365 = getelementptr inbounds i16, i16* %16364, i64 -32
  %16366 = bitcast i16* %16365 to <16 x i16>*
  %16367 = load <16 x i16>, <16 x i16>* %16366, align 2, !tbaa !399
  %16368 = getelementptr inbounds i16, i16* %16364, i64 -16
  %16369 = bitcast i16* %16368 to <16 x i16>*
  %16370 = load <16 x i16>, <16 x i16>* %16369, align 2, !tbaa !399
  %16371 = zext i32 %.pre-phi3520 to i64
  %16372 = mul nsw i64 %16371, %116
  %16373 = add nsw i64 %16372, %94
  %16374 = getelementptr inbounds i16, i16* %blur_x, i64 %16373
  %16375 = getelementptr inbounds i16, i16* %16374, i64 -32
  %16376 = bitcast i16* %16375 to <16 x i16>*
  %16377 = load <16 x i16>, <16 x i16>* %16376, align 2, !tbaa !399
  %16378 = getelementptr inbounds i16, i16* %16374, i64 -16
  %16379 = bitcast i16* %16378 to <16 x i16>*
  %16380 = load <16 x i16>, <16 x i16>* %16379, align 2, !tbaa !399
  %16381 = zext i32 %.pre-phi3524 to i64
  %16382 = mul nsw i64 %16381, %116
  %16383 = add nsw i64 %16382, %94
  %16384 = getelementptr inbounds i16, i16* %blur_x, i64 %16383
  %16385 = getelementptr inbounds i16, i16* %16384, i64 -32
  %16386 = bitcast i16* %16385 to <16 x i16>*
  %16387 = load <16 x i16>, <16 x i16>* %16386, align 2, !tbaa !399
  %16388 = getelementptr inbounds i16, i16* %16384, i64 -16
  %16389 = bitcast i16* %16388 to <16 x i16>*
  %16390 = load <16 x i16>, <16 x i16>* %16389, align 2, !tbaa !399
  %16391 = zext i32 %.pre-phi3528 to i64
  %16392 = mul nsw i64 %16391, %116
  %16393 = add nsw i64 %16392, %94
  %16394 = getelementptr inbounds i16, i16* %blur_x, i64 %16393
  %16395 = getelementptr inbounds i16, i16* %16394, i64 -32
  %16396 = bitcast i16* %16395 to <16 x i16>*
  %16397 = load <16 x i16>, <16 x i16>* %16396, align 2, !tbaa !399
  %16398 = getelementptr inbounds i16, i16* %16394, i64 -16
  %16399 = bitcast i16* %16398 to <16 x i16>*
  %16400 = load <16 x i16>, <16 x i16>* %16399, align 2, !tbaa !399
  %16401 = mul nsw i64 %16342, %116
  %16402 = add nsw i64 %16401, %94
  %16403 = getelementptr inbounds i16, i16* %blur_x, i64 %16402
  %16404 = getelementptr inbounds i16, i16* %16403, i64 -32
  %16405 = bitcast i16* %16404 to <16 x i16>*
  %16406 = load <16 x i16>, <16 x i16>* %16405, align 2, !tbaa !399
  %16407 = getelementptr inbounds i16, i16* %16403, i64 -16
  %16408 = bitcast i16* %16407 to <16 x i16>*
  %16409 = load <16 x i16>, <16 x i16>* %16408, align 2, !tbaa !399
  %16410 = zext i32 %.pre-phi3534 to i64
  %16411 = mul nsw i64 %16410, %116
  %16412 = add nsw i64 %16411, %94
  %16413 = getelementptr inbounds i16, i16* %blur_x, i64 %16412
  %16414 = getelementptr inbounds i16, i16* %16413, i64 -32
  %16415 = bitcast i16* %16414 to <16 x i16>*
  %16416 = load <16 x i16>, <16 x i16>* %16415, align 2, !tbaa !399
  %16417 = getelementptr inbounds i16, i16* %16413, i64 -16
  %16418 = bitcast i16* %16417 to <16 x i16>*
  %16419 = load <16 x i16>, <16 x i16>* %16418, align 2, !tbaa !399
  %16420 = add <16 x i16> %16367, %16357
  %16421 = add <16 x i16> %16420, %16377
  %16422 = add <16 x i16> %16421, %16387
  %16423 = add <16 x i16> %16422, %16397
  %16424 = add <16 x i16> %16423, %16406
  %16425 = add <16 x i16> %16424, %16416
  %16426 = add <16 x i16> %16370, %16360
  %16427 = add <16 x i16> %16426, %16380
  %16428 = add <16 x i16> %16427, %16390
  %16429 = add <16 x i16> %16428, %16400
  %16430 = add <16 x i16> %16429, %16409
  %16431 = add <16 x i16> %16430, %16419
  %16432 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16425, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16433 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16431, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16434 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16432, <16 x i16> %16425)
  %16435 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16433, <16 x i16> %16431)
  %16436 = shufflevector <16 x i16> %16434, <16 x i16> %16435, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16437 = lshr <32 x i16> %16436, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16438 = shufflevector <32 x i16> %16437, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16439 = sext i32 %a26 to i64
  %16440 = add nsw i64 %16439, 26
  %16441 = mul nsw i64 %16440, %117
  %16442 = add nsw i64 %119, %16441
  %16443 = getelementptr inbounds i16, i16* %66, i64 %16442
  %16444 = getelementptr inbounds i16, i16* %16443, i64 -32
  %16445 = bitcast i16* %16444 to <16 x i16>*
  store <16 x i16> %16438, <16 x i16>* %16445, align 2, !tbaa !401
  %16446 = shufflevector <32 x i16> %16437, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16447 = getelementptr inbounds i16, i16* %16443, i64 -16
  %16448 = bitcast i16* %16447 to <16 x i16>*
  store <16 x i16> %16446, <16 x i16>* %16448, align 2, !tbaa !401
  br label %after_bb701

"for blur_y.s0.x.x.rebased706":                   ; preds = %"for blur_y.s0.x.x.rebased706.preheader", %"consume blur_x713"
  %indvars.iv3357 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased706.preheader" ], [ %indvars.iv.next3358, %"consume blur_x713" ]
  %16449 = add nsw i64 %indvars.iv3357, %101
  %16450 = icmp slt i64 %16449, 1
  %16451 = trunc i64 %16449 to i32
  %16452 = shl nsw i32 %16451, 5
  %16453 = icmp sgt i32 %4, %16452
  %16454 = or i1 %16450, %16453
  br i1 %16454, label %"produce blur_x712", label %"for blur_y.s0.x.x.rebased706.consume blur_x713_crit_edge"

"for blur_y.s0.x.x.rebased706.consume blur_x713_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased706"
  %.pre3585 = shl nsw i64 %16449, 5
  br label %"consume blur_x713"

"end for blur_y.s0.x.x.rebased707":               ; preds = %"consume blur_x713", %after_bb701
  br i1 %102, label %"for blur_y.s0.x.x.rebased714.preheader", label %"end for blur_y.s0.x.x.rebased715", !prof !386

"for blur_y.s0.x.x.rebased714.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased707"
  %16455 = sext i32 %t1726 to i64
  %16456 = zext i32 %.pre-phi3516 to i64
  %16457 = mul nsw i64 %16456, %116
  %16458 = sub nsw i64 %16457, %96
  %16459 = zext i32 %.pre-phi3512 to i64
  %16460 = mul nsw i64 %16459, %116
  %16461 = sub nsw i64 %16460, %96
  %16462 = zext i32 %.pre-phi3520 to i64
  %16463 = mul nsw i64 %16462, %116
  %16464 = sub nsw i64 %16463, %96
  %16465 = zext i32 %.pre-phi3524 to i64
  %16466 = mul nsw i64 %16465, %116
  %16467 = sub nsw i64 %16466, %96
  %16468 = zext i32 %.pre-phi3528 to i64
  %16469 = mul nsw i64 %16468, %116
  %16470 = sub nsw i64 %16469, %96
  %16471 = zext i32 %.pre-phi to i64
  %16472 = mul nsw i64 %16471, %116
  %16473 = sub nsw i64 %16472, %96
  %16474 = zext i32 %.pre-phi3534 to i64
  %16475 = mul nsw i64 %16474, %116
  %16476 = sub nsw i64 %16475, %96
  %16477 = sext i32 %a26 to i64
  %16478 = add nsw i64 %16477, 26
  %16479 = mul nsw i64 %16478, %117
  %16480 = add nsw i64 %16479, %120
  br label %"for blur_y.s0.x.x.rebased714"

"produce blur_x712":                              ; preds = %"for blur_y.s0.x.x.rebased706"
  %t1168 = add nsw i32 %16452, %t2177
  %16481 = sext i32 %t1168 to i64
  %16482 = getelementptr inbounds i16, i16* %read_input, i64 %16481
  %16483 = getelementptr inbounds i16, i16* %16482, i64 1
  %16484 = bitcast i16* %16483 to <16 x i16>*
  %16485 = load <16 x i16>, <16 x i16>* %16484, align 2, !tbaa !396
  %16486 = getelementptr inbounds i16, i16* %16482, i64 17
  %16487 = bitcast i16* %16486 to <16 x i16>*
  %16488 = load <16 x i16>, <16 x i16>* %16487, align 2, !tbaa !396
  %16489 = bitcast i16* %16482 to <16 x i16>*
  %16490 = load <16 x i16>, <16 x i16>* %16489, align 2, !tbaa !396
  %16491 = getelementptr inbounds i16, i16* %16482, i64 16
  %16492 = bitcast i16* %16491 to <16 x i16>*
  %16493 = load <16 x i16>, <16 x i16>* %16492, align 2, !tbaa !396
  %16494 = getelementptr inbounds i16, i16* %16482, i64 2
  %16495 = bitcast i16* %16494 to <16 x i16>*
  %16496 = load <16 x i16>, <16 x i16>* %16495, align 2, !tbaa !396
  %16497 = getelementptr inbounds i16, i16* %16482, i64 18
  %16498 = bitcast i16* %16497 to <16 x i16>*
  %16499 = load <16 x i16>, <16 x i16>* %16498, align 2, !tbaa !396
  %16500 = getelementptr inbounds i16, i16* %16482, i64 3
  %16501 = bitcast i16* %16500 to <16 x i16>*
  %16502 = load <16 x i16>, <16 x i16>* %16501, align 2, !tbaa !396
  %16503 = getelementptr inbounds i16, i16* %16482, i64 19
  %16504 = bitcast i16* %16503 to <16 x i16>*
  %16505 = load <16 x i16>, <16 x i16>* %16504, align 2, !tbaa !396
  %16506 = getelementptr inbounds i16, i16* %16482, i64 4
  %16507 = bitcast i16* %16506 to <16 x i16>*
  %16508 = load <16 x i16>, <16 x i16>* %16507, align 2, !tbaa !396
  %16509 = getelementptr inbounds i16, i16* %16482, i64 20
  %16510 = bitcast i16* %16509 to <16 x i16>*
  %16511 = load <16 x i16>, <16 x i16>* %16510, align 2, !tbaa !396
  %16512 = getelementptr inbounds i16, i16* %16482, i64 6
  %16513 = bitcast i16* %16512 to <16 x i16>*
  %16514 = load <16 x i16>, <16 x i16>* %16513, align 2, !tbaa !396
  %16515 = getelementptr inbounds i16, i16* %16482, i64 22
  %16516 = bitcast i16* %16515 to <16 x i16>*
  %16517 = load <16 x i16>, <16 x i16>* %16516, align 2, !tbaa !396
  %16518 = getelementptr inbounds i16, i16* %16482, i64 5
  %16519 = bitcast i16* %16518 to <16 x i16>*
  %16520 = load <16 x i16>, <16 x i16>* %16519, align 2, !tbaa !396
  %16521 = getelementptr inbounds i16, i16* %16482, i64 21
  %16522 = bitcast i16* %16521 to <16 x i16>*
  %16523 = load <16 x i16>, <16 x i16>* %16522, align 2, !tbaa !396
  %16524 = add <16 x i16> %16490, %16485
  %16525 = add <16 x i16> %16524, %16496
  %16526 = add <16 x i16> %16525, %16502
  %16527 = add <16 x i16> %16526, %16508
  %16528 = add <16 x i16> %16527, %16514
  %16529 = add <16 x i16> %16528, %16520
  %16530 = add <16 x i16> %16493, %16488
  %16531 = add <16 x i16> %16530, %16499
  %16532 = add <16 x i16> %16531, %16505
  %16533 = add <16 x i16> %16532, %16511
  %16534 = add <16 x i16> %16533, %16517
  %16535 = add <16 x i16> %16534, %16523
  %16536 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16529, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16537 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16535, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16538 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16536, <16 x i16> %16529)
  %16539 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16537, <16 x i16> %16535)
  %16540 = shufflevector <16 x i16> %16538, <16 x i16> %16539, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16541 = lshr <32 x i16> %16540, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16542 = shufflevector <32 x i16> %16541, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16543 = shl nsw i64 %16449, 5
  %16544 = add nsw i64 %16543, %16254
  %16545 = getelementptr inbounds i16, i16* %blur_x, i64 %16544
  %16546 = bitcast i16* %16545 to <16 x i16>*
  store <16 x i16> %16542, <16 x i16>* %16546, align 2, !tbaa !399
  %16547 = shufflevector <32 x i16> %16541, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16548 = getelementptr inbounds i16, i16* %16545, i64 16
  %16549 = bitcast i16* %16548 to <16 x i16>*
  store <16 x i16> %16547, <16 x i16>* %16549, align 2, !tbaa !399
  br label %"consume blur_x713"

"consume blur_x713":                              ; preds = %"for blur_y.s0.x.x.rebased706.consume blur_x713_crit_edge", %"produce blur_x712"
  %.pre-phi3586 = phi i64 [ %.pre3585, %"for blur_y.s0.x.x.rebased706.consume blur_x713_crit_edge" ], [ %16543, %"produce blur_x712" ]
  %16550 = add nsw i64 %16257, %.pre-phi3586
  %16551 = getelementptr inbounds i16, i16* %blur_x, i64 %16550
  %16552 = bitcast i16* %16551 to <16 x i16>*
  %16553 = load <16 x i16>, <16 x i16>* %16552, align 2, !tbaa !399
  %16554 = getelementptr inbounds i16, i16* %16551, i64 16
  %16555 = bitcast i16* %16554 to <16 x i16>*
  %16556 = load <16 x i16>, <16 x i16>* %16555, align 2, !tbaa !399
  %16557 = add nsw i64 %16260, %.pre-phi3586
  %16558 = getelementptr inbounds i16, i16* %blur_x, i64 %16557
  %16559 = bitcast i16* %16558 to <16 x i16>*
  %16560 = load <16 x i16>, <16 x i16>* %16559, align 2, !tbaa !399
  %16561 = getelementptr inbounds i16, i16* %16558, i64 16
  %16562 = bitcast i16* %16561 to <16 x i16>*
  %16563 = load <16 x i16>, <16 x i16>* %16562, align 2, !tbaa !399
  %16564 = add nsw i64 %16263, %.pre-phi3586
  %16565 = getelementptr inbounds i16, i16* %blur_x, i64 %16564
  %16566 = bitcast i16* %16565 to <16 x i16>*
  %16567 = load <16 x i16>, <16 x i16>* %16566, align 2, !tbaa !399
  %16568 = getelementptr inbounds i16, i16* %16565, i64 16
  %16569 = bitcast i16* %16568 to <16 x i16>*
  %16570 = load <16 x i16>, <16 x i16>* %16569, align 2, !tbaa !399
  %16571 = add nsw i64 %16266, %.pre-phi3586
  %16572 = getelementptr inbounds i16, i16* %blur_x, i64 %16571
  %16573 = bitcast i16* %16572 to <16 x i16>*
  %16574 = load <16 x i16>, <16 x i16>* %16573, align 2, !tbaa !399
  %16575 = getelementptr inbounds i16, i16* %16572, i64 16
  %16576 = bitcast i16* %16575 to <16 x i16>*
  %16577 = load <16 x i16>, <16 x i16>* %16576, align 2, !tbaa !399
  %16578 = add nsw i64 %16269, %.pre-phi3586
  %16579 = getelementptr inbounds i16, i16* %blur_x, i64 %16578
  %16580 = bitcast i16* %16579 to <16 x i16>*
  %16581 = load <16 x i16>, <16 x i16>* %16580, align 2, !tbaa !399
  %16582 = getelementptr inbounds i16, i16* %16579, i64 16
  %16583 = bitcast i16* %16582 to <16 x i16>*
  %16584 = load <16 x i16>, <16 x i16>* %16583, align 2, !tbaa !399
  %16585 = add nsw i64 %16272, %.pre-phi3586
  %16586 = getelementptr inbounds i16, i16* %blur_x, i64 %16585
  %16587 = bitcast i16* %16586 to <16 x i16>*
  %16588 = load <16 x i16>, <16 x i16>* %16587, align 2, !tbaa !399
  %16589 = getelementptr inbounds i16, i16* %16586, i64 16
  %16590 = bitcast i16* %16589 to <16 x i16>*
  %16591 = load <16 x i16>, <16 x i16>* %16590, align 2, !tbaa !399
  %16592 = add nsw i64 %16275, %.pre-phi3586
  %16593 = getelementptr inbounds i16, i16* %blur_x, i64 %16592
  %16594 = bitcast i16* %16593 to <16 x i16>*
  %16595 = load <16 x i16>, <16 x i16>* %16594, align 2, !tbaa !399
  %16596 = getelementptr inbounds i16, i16* %16593, i64 16
  %16597 = bitcast i16* %16596 to <16 x i16>*
  %16598 = load <16 x i16>, <16 x i16>* %16597, align 2, !tbaa !399
  %16599 = add <16 x i16> %16560, %16553
  %16600 = add <16 x i16> %16599, %16567
  %16601 = add <16 x i16> %16600, %16574
  %16602 = add <16 x i16> %16601, %16581
  %16603 = add <16 x i16> %16602, %16588
  %16604 = add <16 x i16> %16603, %16595
  %16605 = add <16 x i16> %16563, %16556
  %16606 = add <16 x i16> %16605, %16570
  %16607 = add <16 x i16> %16606, %16577
  %16608 = add <16 x i16> %16607, %16584
  %16609 = add <16 x i16> %16608, %16591
  %16610 = add <16 x i16> %16609, %16598
  %16611 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16604, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16612 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16610, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16613 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16611, <16 x i16> %16604)
  %16614 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16612, <16 x i16> %16610)
  %16615 = shufflevector <16 x i16> %16613, <16 x i16> %16614, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16616 = lshr <32 x i16> %16615, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16617 = shufflevector <32 x i16> %16616, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16618 = add nsw i64 %16279, %.pre-phi3586
  %16619 = getelementptr inbounds i16, i16* %66, i64 %16618
  %16620 = bitcast i16* %16619 to <16 x i16>*
  store <16 x i16> %16617, <16 x i16>* %16620, align 2, !tbaa !401
  %16621 = shufflevector <32 x i16> %16616, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16622 = getelementptr inbounds i16, i16* %16619, i64 16
  %16623 = bitcast i16* %16622 to <16 x i16>*
  store <16 x i16> %16621, <16 x i16>* %16623, align 2, !tbaa !401
  %indvars.iv.next3358 = add nuw nsw i64 %indvars.iv3357, 1
  %.not2748 = icmp eq i64 %indvars.iv.next3358, %188
  br i1 %.not2748, label %"end for blur_y.s0.x.x.rebased707", label %"for blur_y.s0.x.x.rebased706"

"for blur_y.s0.x.x.rebased714":                   ; preds = %"for blur_y.s0.x.x.rebased714.preheader", %"consume blur_x722"
  %blur_y.s0.x.x.rebased716 = phi i32 [ %16774, %"consume blur_x722" ], [ 0, %"for blur_y.s0.x.x.rebased714.preheader" ]
  %16624 = add nsw i32 %blur_y.s0.x.x.rebased716, %t1670
  %a301 = shl nsw i32 %16624, 5
  %16625 = icmp sgt i32 %a14, %a301
  %b307 = select i1 %16625, i32 %a301, i32 %a14
  %16626 = icmp slt i32 %16624, 1
  %16627 = icmp sgt i32 %4, %a301
  %16628 = or i1 %16626, %16627
  br i1 %16628, label %"produce blur_x720", label %"consume blur_x722"

"end for blur_y.s0.x.x.rebased715":               ; preds = %"consume blur_x722", %"end for blur_y.s0.x.x.rebased707"
  br i1 %34, label %"produce blur_x726", label %after_bb723

"produce blur_x720":                              ; preds = %"for blur_y.s0.x.x.rebased714"
  %16629 = icmp slt i32 %b307, %4
  %blur_x.s0.x.v1.base.s721 = select i1 %16629, i32 %b307, i32 %4
  %t1173 = add nsw i32 %blur_x.s0.x.v1.base.s721, %t2177
  %16630 = sext i32 %t1173 to i64
  %16631 = getelementptr inbounds i16, i16* %read_input, i64 %16630
  %16632 = getelementptr inbounds i16, i16* %16631, i64 1
  %16633 = bitcast i16* %16632 to <16 x i16>*
  %16634 = load <16 x i16>, <16 x i16>* %16633, align 2, !tbaa !396
  %16635 = getelementptr inbounds i16, i16* %16631, i64 17
  %16636 = bitcast i16* %16635 to <16 x i16>*
  %16637 = load <16 x i16>, <16 x i16>* %16636, align 2, !tbaa !396
  %16638 = bitcast i16* %16631 to <16 x i16>*
  %16639 = load <16 x i16>, <16 x i16>* %16638, align 2, !tbaa !396
  %16640 = getelementptr inbounds i16, i16* %16631, i64 16
  %16641 = bitcast i16* %16640 to <16 x i16>*
  %16642 = load <16 x i16>, <16 x i16>* %16641, align 2, !tbaa !396
  %16643 = getelementptr inbounds i16, i16* %16631, i64 2
  %16644 = bitcast i16* %16643 to <16 x i16>*
  %16645 = load <16 x i16>, <16 x i16>* %16644, align 2, !tbaa !396
  %16646 = getelementptr inbounds i16, i16* %16631, i64 18
  %16647 = bitcast i16* %16646 to <16 x i16>*
  %16648 = load <16 x i16>, <16 x i16>* %16647, align 2, !tbaa !396
  %16649 = getelementptr inbounds i16, i16* %16631, i64 3
  %16650 = bitcast i16* %16649 to <16 x i16>*
  %16651 = load <16 x i16>, <16 x i16>* %16650, align 2, !tbaa !396
  %16652 = getelementptr inbounds i16, i16* %16631, i64 19
  %16653 = bitcast i16* %16652 to <16 x i16>*
  %16654 = load <16 x i16>, <16 x i16>* %16653, align 2, !tbaa !396
  %16655 = getelementptr inbounds i16, i16* %16631, i64 4
  %16656 = bitcast i16* %16655 to <16 x i16>*
  %16657 = load <16 x i16>, <16 x i16>* %16656, align 2, !tbaa !396
  %16658 = getelementptr inbounds i16, i16* %16631, i64 20
  %16659 = bitcast i16* %16658 to <16 x i16>*
  %16660 = load <16 x i16>, <16 x i16>* %16659, align 2, !tbaa !396
  %16661 = getelementptr inbounds i16, i16* %16631, i64 6
  %16662 = bitcast i16* %16661 to <16 x i16>*
  %16663 = load <16 x i16>, <16 x i16>* %16662, align 2, !tbaa !396
  %16664 = getelementptr inbounds i16, i16* %16631, i64 22
  %16665 = bitcast i16* %16664 to <16 x i16>*
  %16666 = load <16 x i16>, <16 x i16>* %16665, align 2, !tbaa !396
  %16667 = getelementptr inbounds i16, i16* %16631, i64 5
  %16668 = bitcast i16* %16667 to <16 x i16>*
  %16669 = load <16 x i16>, <16 x i16>* %16668, align 2, !tbaa !396
  %16670 = getelementptr inbounds i16, i16* %16631, i64 21
  %16671 = bitcast i16* %16670 to <16 x i16>*
  %16672 = load <16 x i16>, <16 x i16>* %16671, align 2, !tbaa !396
  %16673 = add <16 x i16> %16639, %16634
  %16674 = add <16 x i16> %16673, %16645
  %16675 = add <16 x i16> %16674, %16651
  %16676 = add <16 x i16> %16675, %16657
  %16677 = add <16 x i16> %16676, %16663
  %16678 = add <16 x i16> %16677, %16669
  %16679 = add <16 x i16> %16642, %16637
  %16680 = add <16 x i16> %16679, %16648
  %16681 = add <16 x i16> %16680, %16654
  %16682 = add <16 x i16> %16681, %16660
  %16683 = add <16 x i16> %16682, %16666
  %16684 = add <16 x i16> %16683, %16672
  %16685 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16678, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16686 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16684, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16687 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16685, <16 x i16> %16678)
  %16688 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16686, <16 x i16> %16684)
  %16689 = shufflevector <16 x i16> %16687, <16 x i16> %16688, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16690 = lshr <32 x i16> %16689, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16691 = shufflevector <32 x i16> %16690, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16692 = sext i32 %blur_x.s0.x.v1.base.s721 to i64
  %16693 = add nsw i64 %16692, %16455
  %16694 = getelementptr inbounds i16, i16* %blur_x, i64 %16693
  %16695 = bitcast i16* %16694 to <16 x i16>*
  store <16 x i16> %16691, <16 x i16>* %16695, align 2, !tbaa !399
  %16696 = shufflevector <32 x i16> %16690, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16697 = getelementptr inbounds i16, i16* %16694, i64 16
  %16698 = bitcast i16* %16697 to <16 x i16>*
  store <16 x i16> %16696, <16 x i16>* %16698, align 2, !tbaa !399
  br label %"consume blur_x722"

"consume blur_x722":                              ; preds = %"for blur_y.s0.x.x.rebased714", %"produce blur_x720"
  %16699 = sext i32 %b307 to i64
  %16700 = add nsw i64 %16458, %16699
  %16701 = getelementptr inbounds i16, i16* %blur_x, i64 %16700
  %16702 = bitcast i16* %16701 to <16 x i16>*
  %16703 = load <16 x i16>, <16 x i16>* %16702, align 2, !tbaa !399
  %16704 = getelementptr inbounds i16, i16* %16701, i64 16
  %16705 = bitcast i16* %16704 to <16 x i16>*
  %16706 = load <16 x i16>, <16 x i16>* %16705, align 2, !tbaa !399
  %16707 = add nsw i64 %16461, %16699
  %16708 = getelementptr inbounds i16, i16* %blur_x, i64 %16707
  %16709 = bitcast i16* %16708 to <16 x i16>*
  %16710 = load <16 x i16>, <16 x i16>* %16709, align 2, !tbaa !399
  %16711 = getelementptr inbounds i16, i16* %16708, i64 16
  %16712 = bitcast i16* %16711 to <16 x i16>*
  %16713 = load <16 x i16>, <16 x i16>* %16712, align 2, !tbaa !399
  %16714 = add nsw i64 %16464, %16699
  %16715 = getelementptr inbounds i16, i16* %blur_x, i64 %16714
  %16716 = bitcast i16* %16715 to <16 x i16>*
  %16717 = load <16 x i16>, <16 x i16>* %16716, align 2, !tbaa !399
  %16718 = getelementptr inbounds i16, i16* %16715, i64 16
  %16719 = bitcast i16* %16718 to <16 x i16>*
  %16720 = load <16 x i16>, <16 x i16>* %16719, align 2, !tbaa !399
  %16721 = add nsw i64 %16467, %16699
  %16722 = getelementptr inbounds i16, i16* %blur_x, i64 %16721
  %16723 = bitcast i16* %16722 to <16 x i16>*
  %16724 = load <16 x i16>, <16 x i16>* %16723, align 2, !tbaa !399
  %16725 = getelementptr inbounds i16, i16* %16722, i64 16
  %16726 = bitcast i16* %16725 to <16 x i16>*
  %16727 = load <16 x i16>, <16 x i16>* %16726, align 2, !tbaa !399
  %16728 = add nsw i64 %16470, %16699
  %16729 = getelementptr inbounds i16, i16* %blur_x, i64 %16728
  %16730 = bitcast i16* %16729 to <16 x i16>*
  %16731 = load <16 x i16>, <16 x i16>* %16730, align 2, !tbaa !399
  %16732 = getelementptr inbounds i16, i16* %16729, i64 16
  %16733 = bitcast i16* %16732 to <16 x i16>*
  %16734 = load <16 x i16>, <16 x i16>* %16733, align 2, !tbaa !399
  %16735 = add nsw i64 %16473, %16699
  %16736 = getelementptr inbounds i16, i16* %blur_x, i64 %16735
  %16737 = bitcast i16* %16736 to <16 x i16>*
  %16738 = load <16 x i16>, <16 x i16>* %16737, align 2, !tbaa !399
  %16739 = getelementptr inbounds i16, i16* %16736, i64 16
  %16740 = bitcast i16* %16739 to <16 x i16>*
  %16741 = load <16 x i16>, <16 x i16>* %16740, align 2, !tbaa !399
  %16742 = add nsw i64 %16476, %16699
  %16743 = getelementptr inbounds i16, i16* %blur_x, i64 %16742
  %16744 = bitcast i16* %16743 to <16 x i16>*
  %16745 = load <16 x i16>, <16 x i16>* %16744, align 2, !tbaa !399
  %16746 = getelementptr inbounds i16, i16* %16743, i64 16
  %16747 = bitcast i16* %16746 to <16 x i16>*
  %16748 = load <16 x i16>, <16 x i16>* %16747, align 2, !tbaa !399
  %16749 = add <16 x i16> %16710, %16703
  %16750 = add <16 x i16> %16749, %16717
  %16751 = add <16 x i16> %16750, %16724
  %16752 = add <16 x i16> %16751, %16731
  %16753 = add <16 x i16> %16752, %16738
  %16754 = add <16 x i16> %16753, %16745
  %16755 = add <16 x i16> %16713, %16706
  %16756 = add <16 x i16> %16755, %16720
  %16757 = add <16 x i16> %16756, %16727
  %16758 = add <16 x i16> %16757, %16734
  %16759 = add <16 x i16> %16758, %16741
  %16760 = add <16 x i16> %16759, %16748
  %16761 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16754, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16762 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16760, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16763 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16761, <16 x i16> %16754)
  %16764 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16762, <16 x i16> %16760)
  %16765 = shufflevector <16 x i16> %16763, <16 x i16> %16764, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16766 = lshr <32 x i16> %16765, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16767 = shufflevector <32 x i16> %16766, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16768 = add nsw i64 %16480, %16699
  %16769 = getelementptr inbounds i16, i16* %66, i64 %16768
  %16770 = bitcast i16* %16769 to <16 x i16>*
  store <16 x i16> %16767, <16 x i16>* %16770, align 2, !tbaa !401
  %16771 = shufflevector <32 x i16> %16766, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16772 = getelementptr inbounds i16, i16* %16769, i64 16
  %16773 = bitcast i16* %16772 to <16 x i16>*
  store <16 x i16> %16771, <16 x i16>* %16773, align 2, !tbaa !401
  %16774 = add nuw nsw i32 %blur_y.s0.x.x.rebased716, 1
  %.not2747 = icmp eq i32 %16774, %t1727
  br i1 %.not2747, label %"end for blur_y.s0.x.x.rebased715", label %"for blur_y.s0.x.x.rebased714"

after_bb723:                                      ; preds = %"end for blur_y.s0.x.x.rebased715", %"produce blur_x726"
  br i1 %100, label %"for blur_y.s0.x.x.rebased728.preheader", label %"end for blur_y.s0.x.x.rebased729", !prof !386

"for blur_y.s0.x.x.rebased728.preheader":         ; preds = %after_bb723
  %16775 = sext i32 %t1732 to i64
  %16776 = zext i32 %.pre-phi3520 to i64
  %16777 = mul nsw i64 %16776, %116
  %16778 = sub nsw i64 %16777, %96
  %16779 = zext i32 %.pre-phi3516 to i64
  %16780 = mul nsw i64 %16779, %116
  %16781 = sub nsw i64 %16780, %96
  %16782 = zext i32 %.pre-phi3524 to i64
  %16783 = mul nsw i64 %16782, %116
  %16784 = sub nsw i64 %16783, %96
  %16785 = zext i32 %.pre-phi3528 to i64
  %16786 = mul nsw i64 %16785, %116
  %16787 = sub nsw i64 %16786, %96
  %16788 = zext i32 %.pre-phi3534 to i64
  %16789 = mul nsw i64 %16788, %116
  %16790 = sub nsw i64 %16789, %96
  %16791 = zext i32 %.pre-phi3508 to i64
  %16792 = mul nsw i64 %16791, %116
  %16793 = sub nsw i64 %16792, %96
  %16794 = zext i32 %.pre-phi to i64
  %16795 = mul nsw i64 %16794, %116
  %16796 = sub nsw i64 %16795, %96
  %16797 = sext i32 %a26 to i64
  %16798 = add nsw i64 %16797, 27
  %16799 = mul nsw i64 %16798, %117
  %16800 = add nsw i64 %16799, %120
  br label %"for blur_y.s0.x.x.rebased728"

"produce blur_x726":                              ; preds = %"end for blur_y.s0.x.x.rebased715"
  %16801 = getelementptr inbounds i16, i16* %read_input, i64 %173
  %16802 = getelementptr inbounds i16, i16* %16801, i64 -31
  %16803 = bitcast i16* %16802 to <16 x i16>*
  %16804 = load <16 x i16>, <16 x i16>* %16803, align 2, !tbaa !396
  %16805 = getelementptr inbounds i16, i16* %16801, i64 -15
  %16806 = bitcast i16* %16805 to <16 x i16>*
  %16807 = load <16 x i16>, <16 x i16>* %16806, align 2, !tbaa !396
  %16808 = getelementptr inbounds i16, i16* %16801, i64 -32
  %16809 = bitcast i16* %16808 to <16 x i16>*
  %16810 = load <16 x i16>, <16 x i16>* %16809, align 2, !tbaa !396
  %16811 = getelementptr inbounds i16, i16* %16801, i64 -16
  %16812 = bitcast i16* %16811 to <16 x i16>*
  %16813 = load <16 x i16>, <16 x i16>* %16812, align 2, !tbaa !396
  %16814 = getelementptr inbounds i16, i16* %16801, i64 -30
  %16815 = bitcast i16* %16814 to <16 x i16>*
  %16816 = load <16 x i16>, <16 x i16>* %16815, align 2, !tbaa !396
  %16817 = getelementptr inbounds i16, i16* %16801, i64 -14
  %16818 = bitcast i16* %16817 to <16 x i16>*
  %16819 = load <16 x i16>, <16 x i16>* %16818, align 2, !tbaa !396
  %16820 = getelementptr inbounds i16, i16* %16801, i64 -29
  %16821 = bitcast i16* %16820 to <16 x i16>*
  %16822 = load <16 x i16>, <16 x i16>* %16821, align 2, !tbaa !396
  %16823 = getelementptr inbounds i16, i16* %16801, i64 -13
  %16824 = bitcast i16* %16823 to <16 x i16>*
  %16825 = load <16 x i16>, <16 x i16>* %16824, align 2, !tbaa !396
  %16826 = getelementptr inbounds i16, i16* %16801, i64 -28
  %16827 = bitcast i16* %16826 to <16 x i16>*
  %16828 = load <16 x i16>, <16 x i16>* %16827, align 2, !tbaa !396
  %16829 = getelementptr inbounds i16, i16* %16801, i64 -12
  %16830 = bitcast i16* %16829 to <16 x i16>*
  %16831 = load <16 x i16>, <16 x i16>* %16830, align 2, !tbaa !396
  %16832 = getelementptr inbounds i16, i16* %16801, i64 -26
  %16833 = bitcast i16* %16832 to <16 x i16>*
  %16834 = load <16 x i16>, <16 x i16>* %16833, align 2, !tbaa !396
  %16835 = getelementptr inbounds i16, i16* %16801, i64 -10
  %16836 = bitcast i16* %16835 to <16 x i16>*
  %16837 = load <16 x i16>, <16 x i16>* %16836, align 2, !tbaa !396
  %16838 = getelementptr inbounds i16, i16* %16801, i64 -27
  %16839 = bitcast i16* %16838 to <16 x i16>*
  %16840 = load <16 x i16>, <16 x i16>* %16839, align 2, !tbaa !396
  %16841 = getelementptr inbounds i16, i16* %16801, i64 -11
  %16842 = bitcast i16* %16841 to <16 x i16>*
  %16843 = load <16 x i16>, <16 x i16>* %16842, align 2, !tbaa !396
  %16844 = add <16 x i16> %16810, %16804
  %16845 = add <16 x i16> %16844, %16816
  %16846 = add <16 x i16> %16845, %16822
  %16847 = add <16 x i16> %16846, %16828
  %16848 = add <16 x i16> %16847, %16834
  %16849 = add <16 x i16> %16848, %16840
  %16850 = add <16 x i16> %16813, %16807
  %16851 = add <16 x i16> %16850, %16819
  %16852 = add <16 x i16> %16851, %16825
  %16853 = add <16 x i16> %16852, %16831
  %16854 = add <16 x i16> %16853, %16837
  %16855 = add <16 x i16> %16854, %16843
  %16856 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16849, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16857 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16855, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16858 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16856, <16 x i16> %16849)
  %16859 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16857, <16 x i16> %16855)
  %16860 = shufflevector <16 x i16> %16858, <16 x i16> %16859, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16861 = lshr <32 x i16> %16860, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16862 = shufflevector <32 x i16> %16861, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16863 = zext i32 %.pre-phi3508 to i64
  %16864 = mul nsw i64 %97, %16863
  %16865 = add nsw i64 %99, %16864
  %16866 = getelementptr inbounds i16, i16* %blur_x, i64 %16865
  %16867 = getelementptr inbounds i16, i16* %16866, i64 -32
  %16868 = bitcast i16* %16867 to <16 x i16>*
  store <16 x i16> %16862, <16 x i16>* %16868, align 2, !tbaa !399
  %16869 = shufflevector <32 x i16> %16861, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16870 = getelementptr inbounds i16, i16* %16866, i64 -16
  %16871 = bitcast i16* %16870 to <16 x i16>*
  store <16 x i16> %16869, <16 x i16>* %16871, align 2, !tbaa !399
  %16872 = zext i32 %.pre-phi3520 to i64
  %16873 = mul nsw i64 %16872, %116
  %16874 = add nsw i64 %16873, %94
  %16875 = getelementptr inbounds i16, i16* %blur_x, i64 %16874
  %16876 = getelementptr inbounds i16, i16* %16875, i64 -32
  %16877 = bitcast i16* %16876 to <16 x i16>*
  %16878 = load <16 x i16>, <16 x i16>* %16877, align 2, !tbaa !399
  %16879 = getelementptr inbounds i16, i16* %16875, i64 -16
  %16880 = bitcast i16* %16879 to <16 x i16>*
  %16881 = load <16 x i16>, <16 x i16>* %16880, align 2, !tbaa !399
  %16882 = zext i32 %.pre-phi3516 to i64
  %16883 = mul nsw i64 %16882, %116
  %16884 = add nsw i64 %16883, %94
  %16885 = getelementptr inbounds i16, i16* %blur_x, i64 %16884
  %16886 = getelementptr inbounds i16, i16* %16885, i64 -32
  %16887 = bitcast i16* %16886 to <16 x i16>*
  %16888 = load <16 x i16>, <16 x i16>* %16887, align 2, !tbaa !399
  %16889 = getelementptr inbounds i16, i16* %16885, i64 -16
  %16890 = bitcast i16* %16889 to <16 x i16>*
  %16891 = load <16 x i16>, <16 x i16>* %16890, align 2, !tbaa !399
  %16892 = zext i32 %.pre-phi3524 to i64
  %16893 = mul nsw i64 %16892, %116
  %16894 = add nsw i64 %16893, %94
  %16895 = getelementptr inbounds i16, i16* %blur_x, i64 %16894
  %16896 = getelementptr inbounds i16, i16* %16895, i64 -32
  %16897 = bitcast i16* %16896 to <16 x i16>*
  %16898 = load <16 x i16>, <16 x i16>* %16897, align 2, !tbaa !399
  %16899 = getelementptr inbounds i16, i16* %16895, i64 -16
  %16900 = bitcast i16* %16899 to <16 x i16>*
  %16901 = load <16 x i16>, <16 x i16>* %16900, align 2, !tbaa !399
  %16902 = zext i32 %.pre-phi3528 to i64
  %16903 = mul nsw i64 %16902, %116
  %16904 = add nsw i64 %16903, %94
  %16905 = getelementptr inbounds i16, i16* %blur_x, i64 %16904
  %16906 = getelementptr inbounds i16, i16* %16905, i64 -32
  %16907 = bitcast i16* %16906 to <16 x i16>*
  %16908 = load <16 x i16>, <16 x i16>* %16907, align 2, !tbaa !399
  %16909 = getelementptr inbounds i16, i16* %16905, i64 -16
  %16910 = bitcast i16* %16909 to <16 x i16>*
  %16911 = load <16 x i16>, <16 x i16>* %16910, align 2, !tbaa !399
  %16912 = zext i32 %.pre-phi3534 to i64
  %16913 = mul nsw i64 %16912, %116
  %16914 = add nsw i64 %16913, %94
  %16915 = getelementptr inbounds i16, i16* %blur_x, i64 %16914
  %16916 = getelementptr inbounds i16, i16* %16915, i64 -32
  %16917 = bitcast i16* %16916 to <16 x i16>*
  %16918 = load <16 x i16>, <16 x i16>* %16917, align 2, !tbaa !399
  %16919 = getelementptr inbounds i16, i16* %16915, i64 -16
  %16920 = bitcast i16* %16919 to <16 x i16>*
  %16921 = load <16 x i16>, <16 x i16>* %16920, align 2, !tbaa !399
  %16922 = mul nsw i64 %16863, %116
  %16923 = add nsw i64 %16922, %94
  %16924 = getelementptr inbounds i16, i16* %blur_x, i64 %16923
  %16925 = getelementptr inbounds i16, i16* %16924, i64 -32
  %16926 = bitcast i16* %16925 to <16 x i16>*
  %16927 = load <16 x i16>, <16 x i16>* %16926, align 2, !tbaa !399
  %16928 = getelementptr inbounds i16, i16* %16924, i64 -16
  %16929 = bitcast i16* %16928 to <16 x i16>*
  %16930 = load <16 x i16>, <16 x i16>* %16929, align 2, !tbaa !399
  %16931 = zext i32 %.pre-phi to i64
  %16932 = mul nsw i64 %16931, %116
  %16933 = add nsw i64 %16932, %94
  %16934 = getelementptr inbounds i16, i16* %blur_x, i64 %16933
  %16935 = getelementptr inbounds i16, i16* %16934, i64 -32
  %16936 = bitcast i16* %16935 to <16 x i16>*
  %16937 = load <16 x i16>, <16 x i16>* %16936, align 2, !tbaa !399
  %16938 = getelementptr inbounds i16, i16* %16934, i64 -16
  %16939 = bitcast i16* %16938 to <16 x i16>*
  %16940 = load <16 x i16>, <16 x i16>* %16939, align 2, !tbaa !399
  %16941 = add <16 x i16> %16888, %16878
  %16942 = add <16 x i16> %16941, %16898
  %16943 = add <16 x i16> %16942, %16908
  %16944 = add <16 x i16> %16943, %16918
  %16945 = add <16 x i16> %16944, %16927
  %16946 = add <16 x i16> %16945, %16937
  %16947 = add <16 x i16> %16891, %16881
  %16948 = add <16 x i16> %16947, %16901
  %16949 = add <16 x i16> %16948, %16911
  %16950 = add <16 x i16> %16949, %16921
  %16951 = add <16 x i16> %16950, %16930
  %16952 = add <16 x i16> %16951, %16940
  %16953 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16946, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16954 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16952, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %16955 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16953, <16 x i16> %16946)
  %16956 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %16954, <16 x i16> %16952)
  %16957 = shufflevector <16 x i16> %16955, <16 x i16> %16956, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16958 = lshr <32 x i16> %16957, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16959 = shufflevector <32 x i16> %16958, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16960 = sext i32 %a26 to i64
  %16961 = add nsw i64 %16960, 27
  %16962 = mul nsw i64 %16961, %117
  %16963 = add nsw i64 %119, %16962
  %16964 = getelementptr inbounds i16, i16* %66, i64 %16963
  %16965 = getelementptr inbounds i16, i16* %16964, i64 -32
  %16966 = bitcast i16* %16965 to <16 x i16>*
  store <16 x i16> %16959, <16 x i16>* %16966, align 2, !tbaa !401
  %16967 = shufflevector <32 x i16> %16958, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16968 = getelementptr inbounds i16, i16* %16964, i64 -16
  %16969 = bitcast i16* %16968 to <16 x i16>*
  store <16 x i16> %16967, <16 x i16>* %16969, align 2, !tbaa !401
  br label %after_bb723

"for blur_y.s0.x.x.rebased728":                   ; preds = %"for blur_y.s0.x.x.rebased728.preheader", %"consume blur_x735"
  %indvars.iv3360 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased728.preheader" ], [ %indvars.iv.next3361, %"consume blur_x735" ]
  %16970 = add nsw i64 %indvars.iv3360, %101
  %16971 = icmp slt i64 %16970, 1
  %16972 = trunc i64 %16970 to i32
  %16973 = shl nsw i32 %16972, 5
  %16974 = icmp sgt i32 %4, %16973
  %16975 = or i1 %16971, %16974
  br i1 %16975, label %"produce blur_x734", label %"for blur_y.s0.x.x.rebased728.consume blur_x735_crit_edge"

"for blur_y.s0.x.x.rebased728.consume blur_x735_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased728"
  %.pre3587 = shl nsw i64 %16970, 5
  br label %"consume blur_x735"

"end for blur_y.s0.x.x.rebased729":               ; preds = %"consume blur_x735", %after_bb723
  br i1 %102, label %"for blur_y.s0.x.x.rebased736.preheader", label %"end for blur_y.s0.x.x.rebased737", !prof !386

"for blur_y.s0.x.x.rebased736.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased729"
  %16976 = sext i32 %t1732 to i64
  %16977 = zext i32 %.pre-phi3520 to i64
  %16978 = mul nsw i64 %16977, %116
  %16979 = sub nsw i64 %16978, %96
  %16980 = zext i32 %.pre-phi3516 to i64
  %16981 = mul nsw i64 %16980, %116
  %16982 = sub nsw i64 %16981, %96
  %16983 = zext i32 %.pre-phi3524 to i64
  %16984 = mul nsw i64 %16983, %116
  %16985 = sub nsw i64 %16984, %96
  %16986 = zext i32 %.pre-phi3528 to i64
  %16987 = mul nsw i64 %16986, %116
  %16988 = sub nsw i64 %16987, %96
  %16989 = zext i32 %.pre-phi3534 to i64
  %16990 = mul nsw i64 %16989, %116
  %16991 = sub nsw i64 %16990, %96
  %16992 = zext i32 %.pre-phi3508 to i64
  %16993 = mul nsw i64 %16992, %116
  %16994 = sub nsw i64 %16993, %96
  %16995 = zext i32 %.pre-phi to i64
  %16996 = mul nsw i64 %16995, %116
  %16997 = sub nsw i64 %16996, %96
  %16998 = sext i32 %a26 to i64
  %16999 = add nsw i64 %16998, 27
  %17000 = mul nsw i64 %16999, %117
  %17001 = add nsw i64 %17000, %120
  br label %"for blur_y.s0.x.x.rebased736"

"produce blur_x734":                              ; preds = %"for blur_y.s0.x.x.rebased728"
  %t1184 = add nsw i32 %16973, %t2193
  %17002 = sext i32 %t1184 to i64
  %17003 = getelementptr inbounds i16, i16* %read_input, i64 %17002
  %17004 = getelementptr inbounds i16, i16* %17003, i64 1
  %17005 = bitcast i16* %17004 to <16 x i16>*
  %17006 = load <16 x i16>, <16 x i16>* %17005, align 2, !tbaa !396
  %17007 = getelementptr inbounds i16, i16* %17003, i64 17
  %17008 = bitcast i16* %17007 to <16 x i16>*
  %17009 = load <16 x i16>, <16 x i16>* %17008, align 2, !tbaa !396
  %17010 = bitcast i16* %17003 to <16 x i16>*
  %17011 = load <16 x i16>, <16 x i16>* %17010, align 2, !tbaa !396
  %17012 = getelementptr inbounds i16, i16* %17003, i64 16
  %17013 = bitcast i16* %17012 to <16 x i16>*
  %17014 = load <16 x i16>, <16 x i16>* %17013, align 2, !tbaa !396
  %17015 = getelementptr inbounds i16, i16* %17003, i64 2
  %17016 = bitcast i16* %17015 to <16 x i16>*
  %17017 = load <16 x i16>, <16 x i16>* %17016, align 2, !tbaa !396
  %17018 = getelementptr inbounds i16, i16* %17003, i64 18
  %17019 = bitcast i16* %17018 to <16 x i16>*
  %17020 = load <16 x i16>, <16 x i16>* %17019, align 2, !tbaa !396
  %17021 = getelementptr inbounds i16, i16* %17003, i64 3
  %17022 = bitcast i16* %17021 to <16 x i16>*
  %17023 = load <16 x i16>, <16 x i16>* %17022, align 2, !tbaa !396
  %17024 = getelementptr inbounds i16, i16* %17003, i64 19
  %17025 = bitcast i16* %17024 to <16 x i16>*
  %17026 = load <16 x i16>, <16 x i16>* %17025, align 2, !tbaa !396
  %17027 = getelementptr inbounds i16, i16* %17003, i64 4
  %17028 = bitcast i16* %17027 to <16 x i16>*
  %17029 = load <16 x i16>, <16 x i16>* %17028, align 2, !tbaa !396
  %17030 = getelementptr inbounds i16, i16* %17003, i64 20
  %17031 = bitcast i16* %17030 to <16 x i16>*
  %17032 = load <16 x i16>, <16 x i16>* %17031, align 2, !tbaa !396
  %17033 = getelementptr inbounds i16, i16* %17003, i64 6
  %17034 = bitcast i16* %17033 to <16 x i16>*
  %17035 = load <16 x i16>, <16 x i16>* %17034, align 2, !tbaa !396
  %17036 = getelementptr inbounds i16, i16* %17003, i64 22
  %17037 = bitcast i16* %17036 to <16 x i16>*
  %17038 = load <16 x i16>, <16 x i16>* %17037, align 2, !tbaa !396
  %17039 = getelementptr inbounds i16, i16* %17003, i64 5
  %17040 = bitcast i16* %17039 to <16 x i16>*
  %17041 = load <16 x i16>, <16 x i16>* %17040, align 2, !tbaa !396
  %17042 = getelementptr inbounds i16, i16* %17003, i64 21
  %17043 = bitcast i16* %17042 to <16 x i16>*
  %17044 = load <16 x i16>, <16 x i16>* %17043, align 2, !tbaa !396
  %17045 = add <16 x i16> %17011, %17006
  %17046 = add <16 x i16> %17045, %17017
  %17047 = add <16 x i16> %17046, %17023
  %17048 = add <16 x i16> %17047, %17029
  %17049 = add <16 x i16> %17048, %17035
  %17050 = add <16 x i16> %17049, %17041
  %17051 = add <16 x i16> %17014, %17009
  %17052 = add <16 x i16> %17051, %17020
  %17053 = add <16 x i16> %17052, %17026
  %17054 = add <16 x i16> %17053, %17032
  %17055 = add <16 x i16> %17054, %17038
  %17056 = add <16 x i16> %17055, %17044
  %17057 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17050, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17058 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17056, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17059 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17057, <16 x i16> %17050)
  %17060 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17058, <16 x i16> %17056)
  %17061 = shufflevector <16 x i16> %17059, <16 x i16> %17060, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17062 = lshr <32 x i16> %17061, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17063 = shufflevector <32 x i16> %17062, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17064 = shl nsw i64 %16970, 5
  %17065 = add nsw i64 %17064, %16775
  %17066 = getelementptr inbounds i16, i16* %blur_x, i64 %17065
  %17067 = bitcast i16* %17066 to <16 x i16>*
  store <16 x i16> %17063, <16 x i16>* %17067, align 2, !tbaa !399
  %17068 = shufflevector <32 x i16> %17062, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17069 = getelementptr inbounds i16, i16* %17066, i64 16
  %17070 = bitcast i16* %17069 to <16 x i16>*
  store <16 x i16> %17068, <16 x i16>* %17070, align 2, !tbaa !399
  br label %"consume blur_x735"

"consume blur_x735":                              ; preds = %"for blur_y.s0.x.x.rebased728.consume blur_x735_crit_edge", %"produce blur_x734"
  %.pre-phi3588 = phi i64 [ %.pre3587, %"for blur_y.s0.x.x.rebased728.consume blur_x735_crit_edge" ], [ %17064, %"produce blur_x734" ]
  %17071 = add nsw i64 %16778, %.pre-phi3588
  %17072 = getelementptr inbounds i16, i16* %blur_x, i64 %17071
  %17073 = bitcast i16* %17072 to <16 x i16>*
  %17074 = load <16 x i16>, <16 x i16>* %17073, align 2, !tbaa !399
  %17075 = getelementptr inbounds i16, i16* %17072, i64 16
  %17076 = bitcast i16* %17075 to <16 x i16>*
  %17077 = load <16 x i16>, <16 x i16>* %17076, align 2, !tbaa !399
  %17078 = add nsw i64 %16781, %.pre-phi3588
  %17079 = getelementptr inbounds i16, i16* %blur_x, i64 %17078
  %17080 = bitcast i16* %17079 to <16 x i16>*
  %17081 = load <16 x i16>, <16 x i16>* %17080, align 2, !tbaa !399
  %17082 = getelementptr inbounds i16, i16* %17079, i64 16
  %17083 = bitcast i16* %17082 to <16 x i16>*
  %17084 = load <16 x i16>, <16 x i16>* %17083, align 2, !tbaa !399
  %17085 = add nsw i64 %16784, %.pre-phi3588
  %17086 = getelementptr inbounds i16, i16* %blur_x, i64 %17085
  %17087 = bitcast i16* %17086 to <16 x i16>*
  %17088 = load <16 x i16>, <16 x i16>* %17087, align 2, !tbaa !399
  %17089 = getelementptr inbounds i16, i16* %17086, i64 16
  %17090 = bitcast i16* %17089 to <16 x i16>*
  %17091 = load <16 x i16>, <16 x i16>* %17090, align 2, !tbaa !399
  %17092 = add nsw i64 %16787, %.pre-phi3588
  %17093 = getelementptr inbounds i16, i16* %blur_x, i64 %17092
  %17094 = bitcast i16* %17093 to <16 x i16>*
  %17095 = load <16 x i16>, <16 x i16>* %17094, align 2, !tbaa !399
  %17096 = getelementptr inbounds i16, i16* %17093, i64 16
  %17097 = bitcast i16* %17096 to <16 x i16>*
  %17098 = load <16 x i16>, <16 x i16>* %17097, align 2, !tbaa !399
  %17099 = add nsw i64 %16790, %.pre-phi3588
  %17100 = getelementptr inbounds i16, i16* %blur_x, i64 %17099
  %17101 = bitcast i16* %17100 to <16 x i16>*
  %17102 = load <16 x i16>, <16 x i16>* %17101, align 2, !tbaa !399
  %17103 = getelementptr inbounds i16, i16* %17100, i64 16
  %17104 = bitcast i16* %17103 to <16 x i16>*
  %17105 = load <16 x i16>, <16 x i16>* %17104, align 2, !tbaa !399
  %17106 = add nsw i64 %16793, %.pre-phi3588
  %17107 = getelementptr inbounds i16, i16* %blur_x, i64 %17106
  %17108 = bitcast i16* %17107 to <16 x i16>*
  %17109 = load <16 x i16>, <16 x i16>* %17108, align 2, !tbaa !399
  %17110 = getelementptr inbounds i16, i16* %17107, i64 16
  %17111 = bitcast i16* %17110 to <16 x i16>*
  %17112 = load <16 x i16>, <16 x i16>* %17111, align 2, !tbaa !399
  %17113 = add nsw i64 %16796, %.pre-phi3588
  %17114 = getelementptr inbounds i16, i16* %blur_x, i64 %17113
  %17115 = bitcast i16* %17114 to <16 x i16>*
  %17116 = load <16 x i16>, <16 x i16>* %17115, align 2, !tbaa !399
  %17117 = getelementptr inbounds i16, i16* %17114, i64 16
  %17118 = bitcast i16* %17117 to <16 x i16>*
  %17119 = load <16 x i16>, <16 x i16>* %17118, align 2, !tbaa !399
  %17120 = add <16 x i16> %17081, %17074
  %17121 = add <16 x i16> %17120, %17088
  %17122 = add <16 x i16> %17121, %17095
  %17123 = add <16 x i16> %17122, %17102
  %17124 = add <16 x i16> %17123, %17109
  %17125 = add <16 x i16> %17124, %17116
  %17126 = add <16 x i16> %17084, %17077
  %17127 = add <16 x i16> %17126, %17091
  %17128 = add <16 x i16> %17127, %17098
  %17129 = add <16 x i16> %17128, %17105
  %17130 = add <16 x i16> %17129, %17112
  %17131 = add <16 x i16> %17130, %17119
  %17132 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17125, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17133 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17131, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17134 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17132, <16 x i16> %17125)
  %17135 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17133, <16 x i16> %17131)
  %17136 = shufflevector <16 x i16> %17134, <16 x i16> %17135, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17137 = lshr <32 x i16> %17136, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17138 = shufflevector <32 x i16> %17137, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17139 = add nsw i64 %16800, %.pre-phi3588
  %17140 = getelementptr inbounds i16, i16* %66, i64 %17139
  %17141 = bitcast i16* %17140 to <16 x i16>*
  store <16 x i16> %17138, <16 x i16>* %17141, align 2, !tbaa !401
  %17142 = shufflevector <32 x i16> %17137, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17143 = getelementptr inbounds i16, i16* %17140, i64 16
  %17144 = bitcast i16* %17143 to <16 x i16>*
  store <16 x i16> %17142, <16 x i16>* %17144, align 2, !tbaa !401
  %indvars.iv.next3361 = add nuw nsw i64 %indvars.iv3360, 1
  %.not2746 = icmp eq i64 %indvars.iv.next3361, %188
  br i1 %.not2746, label %"end for blur_y.s0.x.x.rebased729", label %"for blur_y.s0.x.x.rebased728"

"for blur_y.s0.x.x.rebased736":                   ; preds = %"for blur_y.s0.x.x.rebased736.preheader", %"consume blur_x744"
  %blur_y.s0.x.x.rebased738 = phi i32 [ %17295, %"consume blur_x744" ], [ 0, %"for blur_y.s0.x.x.rebased736.preheader" ]
  %17145 = add nsw i32 %blur_y.s0.x.x.rebased738, %t1670
  %a308 = shl nsw i32 %17145, 5
  %17146 = icmp sgt i32 %a14, %a308
  %b314 = select i1 %17146, i32 %a308, i32 %a14
  %17147 = icmp slt i32 %17145, 1
  %17148 = icmp sgt i32 %4, %a308
  %17149 = or i1 %17147, %17148
  br i1 %17149, label %"produce blur_x742", label %"consume blur_x744"

"end for blur_y.s0.x.x.rebased737":               ; preds = %"consume blur_x744", %"end for blur_y.s0.x.x.rebased729"
  br i1 %34, label %"produce blur_x748", label %after_bb745

"produce blur_x742":                              ; preds = %"for blur_y.s0.x.x.rebased736"
  %17150 = icmp slt i32 %b314, %4
  %blur_x.s0.x.v1.base.s743 = select i1 %17150, i32 %b314, i32 %4
  %t1189 = add nsw i32 %blur_x.s0.x.v1.base.s743, %t2193
  %17151 = sext i32 %t1189 to i64
  %17152 = getelementptr inbounds i16, i16* %read_input, i64 %17151
  %17153 = getelementptr inbounds i16, i16* %17152, i64 1
  %17154 = bitcast i16* %17153 to <16 x i16>*
  %17155 = load <16 x i16>, <16 x i16>* %17154, align 2, !tbaa !396
  %17156 = getelementptr inbounds i16, i16* %17152, i64 17
  %17157 = bitcast i16* %17156 to <16 x i16>*
  %17158 = load <16 x i16>, <16 x i16>* %17157, align 2, !tbaa !396
  %17159 = bitcast i16* %17152 to <16 x i16>*
  %17160 = load <16 x i16>, <16 x i16>* %17159, align 2, !tbaa !396
  %17161 = getelementptr inbounds i16, i16* %17152, i64 16
  %17162 = bitcast i16* %17161 to <16 x i16>*
  %17163 = load <16 x i16>, <16 x i16>* %17162, align 2, !tbaa !396
  %17164 = getelementptr inbounds i16, i16* %17152, i64 2
  %17165 = bitcast i16* %17164 to <16 x i16>*
  %17166 = load <16 x i16>, <16 x i16>* %17165, align 2, !tbaa !396
  %17167 = getelementptr inbounds i16, i16* %17152, i64 18
  %17168 = bitcast i16* %17167 to <16 x i16>*
  %17169 = load <16 x i16>, <16 x i16>* %17168, align 2, !tbaa !396
  %17170 = getelementptr inbounds i16, i16* %17152, i64 3
  %17171 = bitcast i16* %17170 to <16 x i16>*
  %17172 = load <16 x i16>, <16 x i16>* %17171, align 2, !tbaa !396
  %17173 = getelementptr inbounds i16, i16* %17152, i64 19
  %17174 = bitcast i16* %17173 to <16 x i16>*
  %17175 = load <16 x i16>, <16 x i16>* %17174, align 2, !tbaa !396
  %17176 = getelementptr inbounds i16, i16* %17152, i64 4
  %17177 = bitcast i16* %17176 to <16 x i16>*
  %17178 = load <16 x i16>, <16 x i16>* %17177, align 2, !tbaa !396
  %17179 = getelementptr inbounds i16, i16* %17152, i64 20
  %17180 = bitcast i16* %17179 to <16 x i16>*
  %17181 = load <16 x i16>, <16 x i16>* %17180, align 2, !tbaa !396
  %17182 = getelementptr inbounds i16, i16* %17152, i64 6
  %17183 = bitcast i16* %17182 to <16 x i16>*
  %17184 = load <16 x i16>, <16 x i16>* %17183, align 2, !tbaa !396
  %17185 = getelementptr inbounds i16, i16* %17152, i64 22
  %17186 = bitcast i16* %17185 to <16 x i16>*
  %17187 = load <16 x i16>, <16 x i16>* %17186, align 2, !tbaa !396
  %17188 = getelementptr inbounds i16, i16* %17152, i64 5
  %17189 = bitcast i16* %17188 to <16 x i16>*
  %17190 = load <16 x i16>, <16 x i16>* %17189, align 2, !tbaa !396
  %17191 = getelementptr inbounds i16, i16* %17152, i64 21
  %17192 = bitcast i16* %17191 to <16 x i16>*
  %17193 = load <16 x i16>, <16 x i16>* %17192, align 2, !tbaa !396
  %17194 = add <16 x i16> %17160, %17155
  %17195 = add <16 x i16> %17194, %17166
  %17196 = add <16 x i16> %17195, %17172
  %17197 = add <16 x i16> %17196, %17178
  %17198 = add <16 x i16> %17197, %17184
  %17199 = add <16 x i16> %17198, %17190
  %17200 = add <16 x i16> %17163, %17158
  %17201 = add <16 x i16> %17200, %17169
  %17202 = add <16 x i16> %17201, %17175
  %17203 = add <16 x i16> %17202, %17181
  %17204 = add <16 x i16> %17203, %17187
  %17205 = add <16 x i16> %17204, %17193
  %17206 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17199, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17207 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17205, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17208 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17206, <16 x i16> %17199)
  %17209 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17207, <16 x i16> %17205)
  %17210 = shufflevector <16 x i16> %17208, <16 x i16> %17209, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17211 = lshr <32 x i16> %17210, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17212 = shufflevector <32 x i16> %17211, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17213 = sext i32 %blur_x.s0.x.v1.base.s743 to i64
  %17214 = add nsw i64 %17213, %16976
  %17215 = getelementptr inbounds i16, i16* %blur_x, i64 %17214
  %17216 = bitcast i16* %17215 to <16 x i16>*
  store <16 x i16> %17212, <16 x i16>* %17216, align 2, !tbaa !399
  %17217 = shufflevector <32 x i16> %17211, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17218 = getelementptr inbounds i16, i16* %17215, i64 16
  %17219 = bitcast i16* %17218 to <16 x i16>*
  store <16 x i16> %17217, <16 x i16>* %17219, align 2, !tbaa !399
  br label %"consume blur_x744"

"consume blur_x744":                              ; preds = %"for blur_y.s0.x.x.rebased736", %"produce blur_x742"
  %17220 = sext i32 %b314 to i64
  %17221 = add nsw i64 %16979, %17220
  %17222 = getelementptr inbounds i16, i16* %blur_x, i64 %17221
  %17223 = bitcast i16* %17222 to <16 x i16>*
  %17224 = load <16 x i16>, <16 x i16>* %17223, align 2, !tbaa !399
  %17225 = getelementptr inbounds i16, i16* %17222, i64 16
  %17226 = bitcast i16* %17225 to <16 x i16>*
  %17227 = load <16 x i16>, <16 x i16>* %17226, align 2, !tbaa !399
  %17228 = add nsw i64 %16982, %17220
  %17229 = getelementptr inbounds i16, i16* %blur_x, i64 %17228
  %17230 = bitcast i16* %17229 to <16 x i16>*
  %17231 = load <16 x i16>, <16 x i16>* %17230, align 2, !tbaa !399
  %17232 = getelementptr inbounds i16, i16* %17229, i64 16
  %17233 = bitcast i16* %17232 to <16 x i16>*
  %17234 = load <16 x i16>, <16 x i16>* %17233, align 2, !tbaa !399
  %17235 = add nsw i64 %16985, %17220
  %17236 = getelementptr inbounds i16, i16* %blur_x, i64 %17235
  %17237 = bitcast i16* %17236 to <16 x i16>*
  %17238 = load <16 x i16>, <16 x i16>* %17237, align 2, !tbaa !399
  %17239 = getelementptr inbounds i16, i16* %17236, i64 16
  %17240 = bitcast i16* %17239 to <16 x i16>*
  %17241 = load <16 x i16>, <16 x i16>* %17240, align 2, !tbaa !399
  %17242 = add nsw i64 %16988, %17220
  %17243 = getelementptr inbounds i16, i16* %blur_x, i64 %17242
  %17244 = bitcast i16* %17243 to <16 x i16>*
  %17245 = load <16 x i16>, <16 x i16>* %17244, align 2, !tbaa !399
  %17246 = getelementptr inbounds i16, i16* %17243, i64 16
  %17247 = bitcast i16* %17246 to <16 x i16>*
  %17248 = load <16 x i16>, <16 x i16>* %17247, align 2, !tbaa !399
  %17249 = add nsw i64 %16991, %17220
  %17250 = getelementptr inbounds i16, i16* %blur_x, i64 %17249
  %17251 = bitcast i16* %17250 to <16 x i16>*
  %17252 = load <16 x i16>, <16 x i16>* %17251, align 2, !tbaa !399
  %17253 = getelementptr inbounds i16, i16* %17250, i64 16
  %17254 = bitcast i16* %17253 to <16 x i16>*
  %17255 = load <16 x i16>, <16 x i16>* %17254, align 2, !tbaa !399
  %17256 = add nsw i64 %16994, %17220
  %17257 = getelementptr inbounds i16, i16* %blur_x, i64 %17256
  %17258 = bitcast i16* %17257 to <16 x i16>*
  %17259 = load <16 x i16>, <16 x i16>* %17258, align 2, !tbaa !399
  %17260 = getelementptr inbounds i16, i16* %17257, i64 16
  %17261 = bitcast i16* %17260 to <16 x i16>*
  %17262 = load <16 x i16>, <16 x i16>* %17261, align 2, !tbaa !399
  %17263 = add nsw i64 %16997, %17220
  %17264 = getelementptr inbounds i16, i16* %blur_x, i64 %17263
  %17265 = bitcast i16* %17264 to <16 x i16>*
  %17266 = load <16 x i16>, <16 x i16>* %17265, align 2, !tbaa !399
  %17267 = getelementptr inbounds i16, i16* %17264, i64 16
  %17268 = bitcast i16* %17267 to <16 x i16>*
  %17269 = load <16 x i16>, <16 x i16>* %17268, align 2, !tbaa !399
  %17270 = add <16 x i16> %17231, %17224
  %17271 = add <16 x i16> %17270, %17238
  %17272 = add <16 x i16> %17271, %17245
  %17273 = add <16 x i16> %17272, %17252
  %17274 = add <16 x i16> %17273, %17259
  %17275 = add <16 x i16> %17274, %17266
  %17276 = add <16 x i16> %17234, %17227
  %17277 = add <16 x i16> %17276, %17241
  %17278 = add <16 x i16> %17277, %17248
  %17279 = add <16 x i16> %17278, %17255
  %17280 = add <16 x i16> %17279, %17262
  %17281 = add <16 x i16> %17280, %17269
  %17282 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17275, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17283 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17281, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17284 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17282, <16 x i16> %17275)
  %17285 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17283, <16 x i16> %17281)
  %17286 = shufflevector <16 x i16> %17284, <16 x i16> %17285, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17287 = lshr <32 x i16> %17286, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17288 = shufflevector <32 x i16> %17287, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17289 = add nsw i64 %17001, %17220
  %17290 = getelementptr inbounds i16, i16* %66, i64 %17289
  %17291 = bitcast i16* %17290 to <16 x i16>*
  store <16 x i16> %17288, <16 x i16>* %17291, align 2, !tbaa !401
  %17292 = shufflevector <32 x i16> %17287, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17293 = getelementptr inbounds i16, i16* %17290, i64 16
  %17294 = bitcast i16* %17293 to <16 x i16>*
  store <16 x i16> %17292, <16 x i16>* %17294, align 2, !tbaa !401
  %17295 = add nuw nsw i32 %blur_y.s0.x.x.rebased738, 1
  %.not2745 = icmp eq i32 %17295, %t1727
  br i1 %.not2745, label %"end for blur_y.s0.x.x.rebased737", label %"for blur_y.s0.x.x.rebased736"

after_bb745:                                      ; preds = %"end for blur_y.s0.x.x.rebased737", %"produce blur_x748"
  br i1 %100, label %"for blur_y.s0.x.x.rebased750.preheader", label %"end for blur_y.s0.x.x.rebased751", !prof !386

"for blur_y.s0.x.x.rebased750.preheader":         ; preds = %after_bb745
  %17296 = sext i32 %t1738 to i64
  %17297 = zext i32 %.pre-phi3524 to i64
  %17298 = mul nsw i64 %17297, %116
  %17299 = sub nsw i64 %17298, %96
  %17300 = zext i32 %.pre-phi3520 to i64
  %17301 = mul nsw i64 %17300, %116
  %17302 = sub nsw i64 %17301, %96
  %17303 = zext i32 %.pre-phi3528 to i64
  %17304 = mul nsw i64 %17303, %116
  %17305 = sub nsw i64 %17304, %96
  %17306 = zext i32 %.pre-phi3534 to i64
  %17307 = mul nsw i64 %17306, %116
  %17308 = sub nsw i64 %17307, %96
  %17309 = zext i32 %.pre-phi to i64
  %17310 = mul nsw i64 %17309, %116
  %17311 = sub nsw i64 %17310, %96
  %17312 = zext i32 %.pre-phi3512 to i64
  %17313 = mul nsw i64 %17312, %116
  %17314 = sub nsw i64 %17313, %96
  %17315 = zext i32 %.pre-phi3508 to i64
  %17316 = mul nsw i64 %17315, %116
  %17317 = sub nsw i64 %17316, %96
  %17318 = sext i32 %a26 to i64
  %17319 = add nsw i64 %17318, 28
  %17320 = mul nsw i64 %17319, %117
  %17321 = add nsw i64 %17320, %120
  br label %"for blur_y.s0.x.x.rebased750"

"produce blur_x748":                              ; preds = %"end for blur_y.s0.x.x.rebased737"
  %17322 = getelementptr inbounds i16, i16* %read_input, i64 %175
  %17323 = getelementptr inbounds i16, i16* %17322, i64 -31
  %17324 = bitcast i16* %17323 to <16 x i16>*
  %17325 = load <16 x i16>, <16 x i16>* %17324, align 2, !tbaa !396
  %17326 = getelementptr inbounds i16, i16* %17322, i64 -15
  %17327 = bitcast i16* %17326 to <16 x i16>*
  %17328 = load <16 x i16>, <16 x i16>* %17327, align 2, !tbaa !396
  %17329 = getelementptr inbounds i16, i16* %17322, i64 -32
  %17330 = bitcast i16* %17329 to <16 x i16>*
  %17331 = load <16 x i16>, <16 x i16>* %17330, align 2, !tbaa !396
  %17332 = getelementptr inbounds i16, i16* %17322, i64 -16
  %17333 = bitcast i16* %17332 to <16 x i16>*
  %17334 = load <16 x i16>, <16 x i16>* %17333, align 2, !tbaa !396
  %17335 = getelementptr inbounds i16, i16* %17322, i64 -30
  %17336 = bitcast i16* %17335 to <16 x i16>*
  %17337 = load <16 x i16>, <16 x i16>* %17336, align 2, !tbaa !396
  %17338 = getelementptr inbounds i16, i16* %17322, i64 -14
  %17339 = bitcast i16* %17338 to <16 x i16>*
  %17340 = load <16 x i16>, <16 x i16>* %17339, align 2, !tbaa !396
  %17341 = getelementptr inbounds i16, i16* %17322, i64 -29
  %17342 = bitcast i16* %17341 to <16 x i16>*
  %17343 = load <16 x i16>, <16 x i16>* %17342, align 2, !tbaa !396
  %17344 = getelementptr inbounds i16, i16* %17322, i64 -13
  %17345 = bitcast i16* %17344 to <16 x i16>*
  %17346 = load <16 x i16>, <16 x i16>* %17345, align 2, !tbaa !396
  %17347 = getelementptr inbounds i16, i16* %17322, i64 -28
  %17348 = bitcast i16* %17347 to <16 x i16>*
  %17349 = load <16 x i16>, <16 x i16>* %17348, align 2, !tbaa !396
  %17350 = getelementptr inbounds i16, i16* %17322, i64 -12
  %17351 = bitcast i16* %17350 to <16 x i16>*
  %17352 = load <16 x i16>, <16 x i16>* %17351, align 2, !tbaa !396
  %17353 = getelementptr inbounds i16, i16* %17322, i64 -26
  %17354 = bitcast i16* %17353 to <16 x i16>*
  %17355 = load <16 x i16>, <16 x i16>* %17354, align 2, !tbaa !396
  %17356 = getelementptr inbounds i16, i16* %17322, i64 -10
  %17357 = bitcast i16* %17356 to <16 x i16>*
  %17358 = load <16 x i16>, <16 x i16>* %17357, align 2, !tbaa !396
  %17359 = getelementptr inbounds i16, i16* %17322, i64 -27
  %17360 = bitcast i16* %17359 to <16 x i16>*
  %17361 = load <16 x i16>, <16 x i16>* %17360, align 2, !tbaa !396
  %17362 = getelementptr inbounds i16, i16* %17322, i64 -11
  %17363 = bitcast i16* %17362 to <16 x i16>*
  %17364 = load <16 x i16>, <16 x i16>* %17363, align 2, !tbaa !396
  %17365 = add <16 x i16> %17331, %17325
  %17366 = add <16 x i16> %17365, %17337
  %17367 = add <16 x i16> %17366, %17343
  %17368 = add <16 x i16> %17367, %17349
  %17369 = add <16 x i16> %17368, %17355
  %17370 = add <16 x i16> %17369, %17361
  %17371 = add <16 x i16> %17334, %17328
  %17372 = add <16 x i16> %17371, %17340
  %17373 = add <16 x i16> %17372, %17346
  %17374 = add <16 x i16> %17373, %17352
  %17375 = add <16 x i16> %17374, %17358
  %17376 = add <16 x i16> %17375, %17364
  %17377 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17370, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17378 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17376, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17379 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17377, <16 x i16> %17370)
  %17380 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17378, <16 x i16> %17376)
  %17381 = shufflevector <16 x i16> %17379, <16 x i16> %17380, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17382 = lshr <32 x i16> %17381, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17383 = shufflevector <32 x i16> %17382, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17384 = zext i32 %.pre-phi3512 to i64
  %17385 = mul nsw i64 %97, %17384
  %17386 = add nsw i64 %99, %17385
  %17387 = getelementptr inbounds i16, i16* %blur_x, i64 %17386
  %17388 = getelementptr inbounds i16, i16* %17387, i64 -32
  %17389 = bitcast i16* %17388 to <16 x i16>*
  store <16 x i16> %17383, <16 x i16>* %17389, align 2, !tbaa !399
  %17390 = shufflevector <32 x i16> %17382, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17391 = getelementptr inbounds i16, i16* %17387, i64 -16
  %17392 = bitcast i16* %17391 to <16 x i16>*
  store <16 x i16> %17390, <16 x i16>* %17392, align 2, !tbaa !399
  %17393 = zext i32 %.pre-phi3524 to i64
  %17394 = mul nsw i64 %17393, %116
  %17395 = add nsw i64 %17394, %94
  %17396 = getelementptr inbounds i16, i16* %blur_x, i64 %17395
  %17397 = getelementptr inbounds i16, i16* %17396, i64 -32
  %17398 = bitcast i16* %17397 to <16 x i16>*
  %17399 = load <16 x i16>, <16 x i16>* %17398, align 2, !tbaa !399
  %17400 = getelementptr inbounds i16, i16* %17396, i64 -16
  %17401 = bitcast i16* %17400 to <16 x i16>*
  %17402 = load <16 x i16>, <16 x i16>* %17401, align 2, !tbaa !399
  %17403 = zext i32 %.pre-phi3520 to i64
  %17404 = mul nsw i64 %17403, %116
  %17405 = add nsw i64 %17404, %94
  %17406 = getelementptr inbounds i16, i16* %blur_x, i64 %17405
  %17407 = getelementptr inbounds i16, i16* %17406, i64 -32
  %17408 = bitcast i16* %17407 to <16 x i16>*
  %17409 = load <16 x i16>, <16 x i16>* %17408, align 2, !tbaa !399
  %17410 = getelementptr inbounds i16, i16* %17406, i64 -16
  %17411 = bitcast i16* %17410 to <16 x i16>*
  %17412 = load <16 x i16>, <16 x i16>* %17411, align 2, !tbaa !399
  %17413 = zext i32 %.pre-phi3528 to i64
  %17414 = mul nsw i64 %17413, %116
  %17415 = add nsw i64 %17414, %94
  %17416 = getelementptr inbounds i16, i16* %blur_x, i64 %17415
  %17417 = getelementptr inbounds i16, i16* %17416, i64 -32
  %17418 = bitcast i16* %17417 to <16 x i16>*
  %17419 = load <16 x i16>, <16 x i16>* %17418, align 2, !tbaa !399
  %17420 = getelementptr inbounds i16, i16* %17416, i64 -16
  %17421 = bitcast i16* %17420 to <16 x i16>*
  %17422 = load <16 x i16>, <16 x i16>* %17421, align 2, !tbaa !399
  %17423 = zext i32 %.pre-phi3534 to i64
  %17424 = mul nsw i64 %17423, %116
  %17425 = add nsw i64 %17424, %94
  %17426 = getelementptr inbounds i16, i16* %blur_x, i64 %17425
  %17427 = getelementptr inbounds i16, i16* %17426, i64 -32
  %17428 = bitcast i16* %17427 to <16 x i16>*
  %17429 = load <16 x i16>, <16 x i16>* %17428, align 2, !tbaa !399
  %17430 = getelementptr inbounds i16, i16* %17426, i64 -16
  %17431 = bitcast i16* %17430 to <16 x i16>*
  %17432 = load <16 x i16>, <16 x i16>* %17431, align 2, !tbaa !399
  %17433 = zext i32 %.pre-phi to i64
  %17434 = mul nsw i64 %17433, %116
  %17435 = add nsw i64 %17434, %94
  %17436 = getelementptr inbounds i16, i16* %blur_x, i64 %17435
  %17437 = getelementptr inbounds i16, i16* %17436, i64 -32
  %17438 = bitcast i16* %17437 to <16 x i16>*
  %17439 = load <16 x i16>, <16 x i16>* %17438, align 2, !tbaa !399
  %17440 = getelementptr inbounds i16, i16* %17436, i64 -16
  %17441 = bitcast i16* %17440 to <16 x i16>*
  %17442 = load <16 x i16>, <16 x i16>* %17441, align 2, !tbaa !399
  %17443 = mul nsw i64 %17384, %116
  %17444 = add nsw i64 %17443, %94
  %17445 = getelementptr inbounds i16, i16* %blur_x, i64 %17444
  %17446 = getelementptr inbounds i16, i16* %17445, i64 -32
  %17447 = bitcast i16* %17446 to <16 x i16>*
  %17448 = load <16 x i16>, <16 x i16>* %17447, align 2, !tbaa !399
  %17449 = getelementptr inbounds i16, i16* %17445, i64 -16
  %17450 = bitcast i16* %17449 to <16 x i16>*
  %17451 = load <16 x i16>, <16 x i16>* %17450, align 2, !tbaa !399
  %17452 = zext i32 %.pre-phi3508 to i64
  %17453 = mul nsw i64 %17452, %116
  %17454 = add nsw i64 %17453, %94
  %17455 = getelementptr inbounds i16, i16* %blur_x, i64 %17454
  %17456 = getelementptr inbounds i16, i16* %17455, i64 -32
  %17457 = bitcast i16* %17456 to <16 x i16>*
  %17458 = load <16 x i16>, <16 x i16>* %17457, align 2, !tbaa !399
  %17459 = getelementptr inbounds i16, i16* %17455, i64 -16
  %17460 = bitcast i16* %17459 to <16 x i16>*
  %17461 = load <16 x i16>, <16 x i16>* %17460, align 2, !tbaa !399
  %17462 = add <16 x i16> %17409, %17399
  %17463 = add <16 x i16> %17462, %17419
  %17464 = add <16 x i16> %17463, %17429
  %17465 = add <16 x i16> %17464, %17439
  %17466 = add <16 x i16> %17465, %17448
  %17467 = add <16 x i16> %17466, %17458
  %17468 = add <16 x i16> %17412, %17402
  %17469 = add <16 x i16> %17468, %17422
  %17470 = add <16 x i16> %17469, %17432
  %17471 = add <16 x i16> %17470, %17442
  %17472 = add <16 x i16> %17471, %17451
  %17473 = add <16 x i16> %17472, %17461
  %17474 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17467, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17475 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17473, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17476 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17474, <16 x i16> %17467)
  %17477 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17475, <16 x i16> %17473)
  %17478 = shufflevector <16 x i16> %17476, <16 x i16> %17477, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17479 = lshr <32 x i16> %17478, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17480 = shufflevector <32 x i16> %17479, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17481 = sext i32 %a26 to i64
  %17482 = add nsw i64 %17481, 28
  %17483 = mul nsw i64 %17482, %117
  %17484 = add nsw i64 %119, %17483
  %17485 = getelementptr inbounds i16, i16* %66, i64 %17484
  %17486 = getelementptr inbounds i16, i16* %17485, i64 -32
  %17487 = bitcast i16* %17486 to <16 x i16>*
  store <16 x i16> %17480, <16 x i16>* %17487, align 2, !tbaa !401
  %17488 = shufflevector <32 x i16> %17479, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17489 = getelementptr inbounds i16, i16* %17485, i64 -16
  %17490 = bitcast i16* %17489 to <16 x i16>*
  store <16 x i16> %17488, <16 x i16>* %17490, align 2, !tbaa !401
  br label %after_bb745

"for blur_y.s0.x.x.rebased750":                   ; preds = %"for blur_y.s0.x.x.rebased750.preheader", %"consume blur_x757"
  %indvars.iv3363 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased750.preheader" ], [ %indvars.iv.next3364, %"consume blur_x757" ]
  %17491 = add nsw i64 %indvars.iv3363, %101
  %17492 = icmp slt i64 %17491, 1
  %17493 = trunc i64 %17491 to i32
  %17494 = shl nsw i32 %17493, 5
  %17495 = icmp sgt i32 %4, %17494
  %17496 = or i1 %17492, %17495
  br i1 %17496, label %"produce blur_x756", label %"for blur_y.s0.x.x.rebased750.consume blur_x757_crit_edge"

"for blur_y.s0.x.x.rebased750.consume blur_x757_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased750"
  %.pre3589 = shl nsw i64 %17491, 5
  br label %"consume blur_x757"

"end for blur_y.s0.x.x.rebased751":               ; preds = %"consume blur_x757", %after_bb745
  br i1 %102, label %"for blur_y.s0.x.x.rebased758.preheader", label %"end for blur_y.s0.x.x.rebased759", !prof !386

"for blur_y.s0.x.x.rebased758.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased751"
  %17497 = sext i32 %t1738 to i64
  %17498 = zext i32 %.pre-phi3524 to i64
  %17499 = mul nsw i64 %17498, %116
  %17500 = sub nsw i64 %17499, %96
  %17501 = zext i32 %.pre-phi3520 to i64
  %17502 = mul nsw i64 %17501, %116
  %17503 = sub nsw i64 %17502, %96
  %17504 = zext i32 %.pre-phi3528 to i64
  %17505 = mul nsw i64 %17504, %116
  %17506 = sub nsw i64 %17505, %96
  %17507 = zext i32 %.pre-phi3534 to i64
  %17508 = mul nsw i64 %17507, %116
  %17509 = sub nsw i64 %17508, %96
  %17510 = zext i32 %.pre-phi to i64
  %17511 = mul nsw i64 %17510, %116
  %17512 = sub nsw i64 %17511, %96
  %17513 = zext i32 %.pre-phi3512 to i64
  %17514 = mul nsw i64 %17513, %116
  %17515 = sub nsw i64 %17514, %96
  %17516 = zext i32 %.pre-phi3508 to i64
  %17517 = mul nsw i64 %17516, %116
  %17518 = sub nsw i64 %17517, %96
  %17519 = sext i32 %a26 to i64
  %17520 = add nsw i64 %17519, 28
  %17521 = mul nsw i64 %17520, %117
  %17522 = add nsw i64 %17521, %120
  br label %"for blur_y.s0.x.x.rebased758"

"produce blur_x756":                              ; preds = %"for blur_y.s0.x.x.rebased750"
  %t1200 = add nsw i32 %17494, %t2209
  %17523 = sext i32 %t1200 to i64
  %17524 = getelementptr inbounds i16, i16* %read_input, i64 %17523
  %17525 = getelementptr inbounds i16, i16* %17524, i64 1
  %17526 = bitcast i16* %17525 to <16 x i16>*
  %17527 = load <16 x i16>, <16 x i16>* %17526, align 2, !tbaa !396
  %17528 = getelementptr inbounds i16, i16* %17524, i64 17
  %17529 = bitcast i16* %17528 to <16 x i16>*
  %17530 = load <16 x i16>, <16 x i16>* %17529, align 2, !tbaa !396
  %17531 = bitcast i16* %17524 to <16 x i16>*
  %17532 = load <16 x i16>, <16 x i16>* %17531, align 2, !tbaa !396
  %17533 = getelementptr inbounds i16, i16* %17524, i64 16
  %17534 = bitcast i16* %17533 to <16 x i16>*
  %17535 = load <16 x i16>, <16 x i16>* %17534, align 2, !tbaa !396
  %17536 = getelementptr inbounds i16, i16* %17524, i64 2
  %17537 = bitcast i16* %17536 to <16 x i16>*
  %17538 = load <16 x i16>, <16 x i16>* %17537, align 2, !tbaa !396
  %17539 = getelementptr inbounds i16, i16* %17524, i64 18
  %17540 = bitcast i16* %17539 to <16 x i16>*
  %17541 = load <16 x i16>, <16 x i16>* %17540, align 2, !tbaa !396
  %17542 = getelementptr inbounds i16, i16* %17524, i64 3
  %17543 = bitcast i16* %17542 to <16 x i16>*
  %17544 = load <16 x i16>, <16 x i16>* %17543, align 2, !tbaa !396
  %17545 = getelementptr inbounds i16, i16* %17524, i64 19
  %17546 = bitcast i16* %17545 to <16 x i16>*
  %17547 = load <16 x i16>, <16 x i16>* %17546, align 2, !tbaa !396
  %17548 = getelementptr inbounds i16, i16* %17524, i64 4
  %17549 = bitcast i16* %17548 to <16 x i16>*
  %17550 = load <16 x i16>, <16 x i16>* %17549, align 2, !tbaa !396
  %17551 = getelementptr inbounds i16, i16* %17524, i64 20
  %17552 = bitcast i16* %17551 to <16 x i16>*
  %17553 = load <16 x i16>, <16 x i16>* %17552, align 2, !tbaa !396
  %17554 = getelementptr inbounds i16, i16* %17524, i64 6
  %17555 = bitcast i16* %17554 to <16 x i16>*
  %17556 = load <16 x i16>, <16 x i16>* %17555, align 2, !tbaa !396
  %17557 = getelementptr inbounds i16, i16* %17524, i64 22
  %17558 = bitcast i16* %17557 to <16 x i16>*
  %17559 = load <16 x i16>, <16 x i16>* %17558, align 2, !tbaa !396
  %17560 = getelementptr inbounds i16, i16* %17524, i64 5
  %17561 = bitcast i16* %17560 to <16 x i16>*
  %17562 = load <16 x i16>, <16 x i16>* %17561, align 2, !tbaa !396
  %17563 = getelementptr inbounds i16, i16* %17524, i64 21
  %17564 = bitcast i16* %17563 to <16 x i16>*
  %17565 = load <16 x i16>, <16 x i16>* %17564, align 2, !tbaa !396
  %17566 = add <16 x i16> %17532, %17527
  %17567 = add <16 x i16> %17566, %17538
  %17568 = add <16 x i16> %17567, %17544
  %17569 = add <16 x i16> %17568, %17550
  %17570 = add <16 x i16> %17569, %17556
  %17571 = add <16 x i16> %17570, %17562
  %17572 = add <16 x i16> %17535, %17530
  %17573 = add <16 x i16> %17572, %17541
  %17574 = add <16 x i16> %17573, %17547
  %17575 = add <16 x i16> %17574, %17553
  %17576 = add <16 x i16> %17575, %17559
  %17577 = add <16 x i16> %17576, %17565
  %17578 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17571, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17579 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17577, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17580 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17578, <16 x i16> %17571)
  %17581 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17579, <16 x i16> %17577)
  %17582 = shufflevector <16 x i16> %17580, <16 x i16> %17581, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17583 = lshr <32 x i16> %17582, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17584 = shufflevector <32 x i16> %17583, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17585 = shl nsw i64 %17491, 5
  %17586 = add nsw i64 %17585, %17296
  %17587 = getelementptr inbounds i16, i16* %blur_x, i64 %17586
  %17588 = bitcast i16* %17587 to <16 x i16>*
  store <16 x i16> %17584, <16 x i16>* %17588, align 2, !tbaa !399
  %17589 = shufflevector <32 x i16> %17583, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17590 = getelementptr inbounds i16, i16* %17587, i64 16
  %17591 = bitcast i16* %17590 to <16 x i16>*
  store <16 x i16> %17589, <16 x i16>* %17591, align 2, !tbaa !399
  br label %"consume blur_x757"

"consume blur_x757":                              ; preds = %"for blur_y.s0.x.x.rebased750.consume blur_x757_crit_edge", %"produce blur_x756"
  %.pre-phi3590 = phi i64 [ %.pre3589, %"for blur_y.s0.x.x.rebased750.consume blur_x757_crit_edge" ], [ %17585, %"produce blur_x756" ]
  %17592 = add nsw i64 %17299, %.pre-phi3590
  %17593 = getelementptr inbounds i16, i16* %blur_x, i64 %17592
  %17594 = bitcast i16* %17593 to <16 x i16>*
  %17595 = load <16 x i16>, <16 x i16>* %17594, align 2, !tbaa !399
  %17596 = getelementptr inbounds i16, i16* %17593, i64 16
  %17597 = bitcast i16* %17596 to <16 x i16>*
  %17598 = load <16 x i16>, <16 x i16>* %17597, align 2, !tbaa !399
  %17599 = add nsw i64 %17302, %.pre-phi3590
  %17600 = getelementptr inbounds i16, i16* %blur_x, i64 %17599
  %17601 = bitcast i16* %17600 to <16 x i16>*
  %17602 = load <16 x i16>, <16 x i16>* %17601, align 2, !tbaa !399
  %17603 = getelementptr inbounds i16, i16* %17600, i64 16
  %17604 = bitcast i16* %17603 to <16 x i16>*
  %17605 = load <16 x i16>, <16 x i16>* %17604, align 2, !tbaa !399
  %17606 = add nsw i64 %17305, %.pre-phi3590
  %17607 = getelementptr inbounds i16, i16* %blur_x, i64 %17606
  %17608 = bitcast i16* %17607 to <16 x i16>*
  %17609 = load <16 x i16>, <16 x i16>* %17608, align 2, !tbaa !399
  %17610 = getelementptr inbounds i16, i16* %17607, i64 16
  %17611 = bitcast i16* %17610 to <16 x i16>*
  %17612 = load <16 x i16>, <16 x i16>* %17611, align 2, !tbaa !399
  %17613 = add nsw i64 %17308, %.pre-phi3590
  %17614 = getelementptr inbounds i16, i16* %blur_x, i64 %17613
  %17615 = bitcast i16* %17614 to <16 x i16>*
  %17616 = load <16 x i16>, <16 x i16>* %17615, align 2, !tbaa !399
  %17617 = getelementptr inbounds i16, i16* %17614, i64 16
  %17618 = bitcast i16* %17617 to <16 x i16>*
  %17619 = load <16 x i16>, <16 x i16>* %17618, align 2, !tbaa !399
  %17620 = add nsw i64 %17311, %.pre-phi3590
  %17621 = getelementptr inbounds i16, i16* %blur_x, i64 %17620
  %17622 = bitcast i16* %17621 to <16 x i16>*
  %17623 = load <16 x i16>, <16 x i16>* %17622, align 2, !tbaa !399
  %17624 = getelementptr inbounds i16, i16* %17621, i64 16
  %17625 = bitcast i16* %17624 to <16 x i16>*
  %17626 = load <16 x i16>, <16 x i16>* %17625, align 2, !tbaa !399
  %17627 = add nsw i64 %17314, %.pre-phi3590
  %17628 = getelementptr inbounds i16, i16* %blur_x, i64 %17627
  %17629 = bitcast i16* %17628 to <16 x i16>*
  %17630 = load <16 x i16>, <16 x i16>* %17629, align 2, !tbaa !399
  %17631 = getelementptr inbounds i16, i16* %17628, i64 16
  %17632 = bitcast i16* %17631 to <16 x i16>*
  %17633 = load <16 x i16>, <16 x i16>* %17632, align 2, !tbaa !399
  %17634 = add nsw i64 %17317, %.pre-phi3590
  %17635 = getelementptr inbounds i16, i16* %blur_x, i64 %17634
  %17636 = bitcast i16* %17635 to <16 x i16>*
  %17637 = load <16 x i16>, <16 x i16>* %17636, align 2, !tbaa !399
  %17638 = getelementptr inbounds i16, i16* %17635, i64 16
  %17639 = bitcast i16* %17638 to <16 x i16>*
  %17640 = load <16 x i16>, <16 x i16>* %17639, align 2, !tbaa !399
  %17641 = add <16 x i16> %17602, %17595
  %17642 = add <16 x i16> %17641, %17609
  %17643 = add <16 x i16> %17642, %17616
  %17644 = add <16 x i16> %17643, %17623
  %17645 = add <16 x i16> %17644, %17630
  %17646 = add <16 x i16> %17645, %17637
  %17647 = add <16 x i16> %17605, %17598
  %17648 = add <16 x i16> %17647, %17612
  %17649 = add <16 x i16> %17648, %17619
  %17650 = add <16 x i16> %17649, %17626
  %17651 = add <16 x i16> %17650, %17633
  %17652 = add <16 x i16> %17651, %17640
  %17653 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17646, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17654 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17652, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17655 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17653, <16 x i16> %17646)
  %17656 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17654, <16 x i16> %17652)
  %17657 = shufflevector <16 x i16> %17655, <16 x i16> %17656, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17658 = lshr <32 x i16> %17657, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17659 = shufflevector <32 x i16> %17658, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17660 = add nsw i64 %17321, %.pre-phi3590
  %17661 = getelementptr inbounds i16, i16* %66, i64 %17660
  %17662 = bitcast i16* %17661 to <16 x i16>*
  store <16 x i16> %17659, <16 x i16>* %17662, align 2, !tbaa !401
  %17663 = shufflevector <32 x i16> %17658, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17664 = getelementptr inbounds i16, i16* %17661, i64 16
  %17665 = bitcast i16* %17664 to <16 x i16>*
  store <16 x i16> %17663, <16 x i16>* %17665, align 2, !tbaa !401
  %indvars.iv.next3364 = add nuw nsw i64 %indvars.iv3363, 1
  %.not2744 = icmp eq i64 %indvars.iv.next3364, %188
  br i1 %.not2744, label %"end for blur_y.s0.x.x.rebased751", label %"for blur_y.s0.x.x.rebased750"

"for blur_y.s0.x.x.rebased758":                   ; preds = %"for blur_y.s0.x.x.rebased758.preheader", %"consume blur_x766"
  %blur_y.s0.x.x.rebased760 = phi i32 [ %17816, %"consume blur_x766" ], [ 0, %"for blur_y.s0.x.x.rebased758.preheader" ]
  %17666 = add nsw i32 %blur_y.s0.x.x.rebased760, %t1670
  %a315 = shl nsw i32 %17666, 5
  %17667 = icmp sgt i32 %a14, %a315
  %b321 = select i1 %17667, i32 %a315, i32 %a14
  %17668 = icmp slt i32 %17666, 1
  %17669 = icmp sgt i32 %4, %a315
  %17670 = or i1 %17668, %17669
  br i1 %17670, label %"produce blur_x764", label %"consume blur_x766"

"end for blur_y.s0.x.x.rebased759":               ; preds = %"consume blur_x766", %"end for blur_y.s0.x.x.rebased751"
  br i1 %34, label %"produce blur_x770", label %after_bb767

"produce blur_x764":                              ; preds = %"for blur_y.s0.x.x.rebased758"
  %17671 = icmp slt i32 %b321, %4
  %blur_x.s0.x.v1.base.s765 = select i1 %17671, i32 %b321, i32 %4
  %t1205 = add nsw i32 %blur_x.s0.x.v1.base.s765, %t2209
  %17672 = sext i32 %t1205 to i64
  %17673 = getelementptr inbounds i16, i16* %read_input, i64 %17672
  %17674 = getelementptr inbounds i16, i16* %17673, i64 1
  %17675 = bitcast i16* %17674 to <16 x i16>*
  %17676 = load <16 x i16>, <16 x i16>* %17675, align 2, !tbaa !396
  %17677 = getelementptr inbounds i16, i16* %17673, i64 17
  %17678 = bitcast i16* %17677 to <16 x i16>*
  %17679 = load <16 x i16>, <16 x i16>* %17678, align 2, !tbaa !396
  %17680 = bitcast i16* %17673 to <16 x i16>*
  %17681 = load <16 x i16>, <16 x i16>* %17680, align 2, !tbaa !396
  %17682 = getelementptr inbounds i16, i16* %17673, i64 16
  %17683 = bitcast i16* %17682 to <16 x i16>*
  %17684 = load <16 x i16>, <16 x i16>* %17683, align 2, !tbaa !396
  %17685 = getelementptr inbounds i16, i16* %17673, i64 2
  %17686 = bitcast i16* %17685 to <16 x i16>*
  %17687 = load <16 x i16>, <16 x i16>* %17686, align 2, !tbaa !396
  %17688 = getelementptr inbounds i16, i16* %17673, i64 18
  %17689 = bitcast i16* %17688 to <16 x i16>*
  %17690 = load <16 x i16>, <16 x i16>* %17689, align 2, !tbaa !396
  %17691 = getelementptr inbounds i16, i16* %17673, i64 3
  %17692 = bitcast i16* %17691 to <16 x i16>*
  %17693 = load <16 x i16>, <16 x i16>* %17692, align 2, !tbaa !396
  %17694 = getelementptr inbounds i16, i16* %17673, i64 19
  %17695 = bitcast i16* %17694 to <16 x i16>*
  %17696 = load <16 x i16>, <16 x i16>* %17695, align 2, !tbaa !396
  %17697 = getelementptr inbounds i16, i16* %17673, i64 4
  %17698 = bitcast i16* %17697 to <16 x i16>*
  %17699 = load <16 x i16>, <16 x i16>* %17698, align 2, !tbaa !396
  %17700 = getelementptr inbounds i16, i16* %17673, i64 20
  %17701 = bitcast i16* %17700 to <16 x i16>*
  %17702 = load <16 x i16>, <16 x i16>* %17701, align 2, !tbaa !396
  %17703 = getelementptr inbounds i16, i16* %17673, i64 6
  %17704 = bitcast i16* %17703 to <16 x i16>*
  %17705 = load <16 x i16>, <16 x i16>* %17704, align 2, !tbaa !396
  %17706 = getelementptr inbounds i16, i16* %17673, i64 22
  %17707 = bitcast i16* %17706 to <16 x i16>*
  %17708 = load <16 x i16>, <16 x i16>* %17707, align 2, !tbaa !396
  %17709 = getelementptr inbounds i16, i16* %17673, i64 5
  %17710 = bitcast i16* %17709 to <16 x i16>*
  %17711 = load <16 x i16>, <16 x i16>* %17710, align 2, !tbaa !396
  %17712 = getelementptr inbounds i16, i16* %17673, i64 21
  %17713 = bitcast i16* %17712 to <16 x i16>*
  %17714 = load <16 x i16>, <16 x i16>* %17713, align 2, !tbaa !396
  %17715 = add <16 x i16> %17681, %17676
  %17716 = add <16 x i16> %17715, %17687
  %17717 = add <16 x i16> %17716, %17693
  %17718 = add <16 x i16> %17717, %17699
  %17719 = add <16 x i16> %17718, %17705
  %17720 = add <16 x i16> %17719, %17711
  %17721 = add <16 x i16> %17684, %17679
  %17722 = add <16 x i16> %17721, %17690
  %17723 = add <16 x i16> %17722, %17696
  %17724 = add <16 x i16> %17723, %17702
  %17725 = add <16 x i16> %17724, %17708
  %17726 = add <16 x i16> %17725, %17714
  %17727 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17720, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17728 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17726, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17729 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17727, <16 x i16> %17720)
  %17730 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17728, <16 x i16> %17726)
  %17731 = shufflevector <16 x i16> %17729, <16 x i16> %17730, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17732 = lshr <32 x i16> %17731, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17733 = shufflevector <32 x i16> %17732, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17734 = sext i32 %blur_x.s0.x.v1.base.s765 to i64
  %17735 = add nsw i64 %17734, %17497
  %17736 = getelementptr inbounds i16, i16* %blur_x, i64 %17735
  %17737 = bitcast i16* %17736 to <16 x i16>*
  store <16 x i16> %17733, <16 x i16>* %17737, align 2, !tbaa !399
  %17738 = shufflevector <32 x i16> %17732, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17739 = getelementptr inbounds i16, i16* %17736, i64 16
  %17740 = bitcast i16* %17739 to <16 x i16>*
  store <16 x i16> %17738, <16 x i16>* %17740, align 2, !tbaa !399
  br label %"consume blur_x766"

"consume blur_x766":                              ; preds = %"for blur_y.s0.x.x.rebased758", %"produce blur_x764"
  %17741 = sext i32 %b321 to i64
  %17742 = add nsw i64 %17500, %17741
  %17743 = getelementptr inbounds i16, i16* %blur_x, i64 %17742
  %17744 = bitcast i16* %17743 to <16 x i16>*
  %17745 = load <16 x i16>, <16 x i16>* %17744, align 2, !tbaa !399
  %17746 = getelementptr inbounds i16, i16* %17743, i64 16
  %17747 = bitcast i16* %17746 to <16 x i16>*
  %17748 = load <16 x i16>, <16 x i16>* %17747, align 2, !tbaa !399
  %17749 = add nsw i64 %17503, %17741
  %17750 = getelementptr inbounds i16, i16* %blur_x, i64 %17749
  %17751 = bitcast i16* %17750 to <16 x i16>*
  %17752 = load <16 x i16>, <16 x i16>* %17751, align 2, !tbaa !399
  %17753 = getelementptr inbounds i16, i16* %17750, i64 16
  %17754 = bitcast i16* %17753 to <16 x i16>*
  %17755 = load <16 x i16>, <16 x i16>* %17754, align 2, !tbaa !399
  %17756 = add nsw i64 %17506, %17741
  %17757 = getelementptr inbounds i16, i16* %blur_x, i64 %17756
  %17758 = bitcast i16* %17757 to <16 x i16>*
  %17759 = load <16 x i16>, <16 x i16>* %17758, align 2, !tbaa !399
  %17760 = getelementptr inbounds i16, i16* %17757, i64 16
  %17761 = bitcast i16* %17760 to <16 x i16>*
  %17762 = load <16 x i16>, <16 x i16>* %17761, align 2, !tbaa !399
  %17763 = add nsw i64 %17509, %17741
  %17764 = getelementptr inbounds i16, i16* %blur_x, i64 %17763
  %17765 = bitcast i16* %17764 to <16 x i16>*
  %17766 = load <16 x i16>, <16 x i16>* %17765, align 2, !tbaa !399
  %17767 = getelementptr inbounds i16, i16* %17764, i64 16
  %17768 = bitcast i16* %17767 to <16 x i16>*
  %17769 = load <16 x i16>, <16 x i16>* %17768, align 2, !tbaa !399
  %17770 = add nsw i64 %17512, %17741
  %17771 = getelementptr inbounds i16, i16* %blur_x, i64 %17770
  %17772 = bitcast i16* %17771 to <16 x i16>*
  %17773 = load <16 x i16>, <16 x i16>* %17772, align 2, !tbaa !399
  %17774 = getelementptr inbounds i16, i16* %17771, i64 16
  %17775 = bitcast i16* %17774 to <16 x i16>*
  %17776 = load <16 x i16>, <16 x i16>* %17775, align 2, !tbaa !399
  %17777 = add nsw i64 %17515, %17741
  %17778 = getelementptr inbounds i16, i16* %blur_x, i64 %17777
  %17779 = bitcast i16* %17778 to <16 x i16>*
  %17780 = load <16 x i16>, <16 x i16>* %17779, align 2, !tbaa !399
  %17781 = getelementptr inbounds i16, i16* %17778, i64 16
  %17782 = bitcast i16* %17781 to <16 x i16>*
  %17783 = load <16 x i16>, <16 x i16>* %17782, align 2, !tbaa !399
  %17784 = add nsw i64 %17518, %17741
  %17785 = getelementptr inbounds i16, i16* %blur_x, i64 %17784
  %17786 = bitcast i16* %17785 to <16 x i16>*
  %17787 = load <16 x i16>, <16 x i16>* %17786, align 2, !tbaa !399
  %17788 = getelementptr inbounds i16, i16* %17785, i64 16
  %17789 = bitcast i16* %17788 to <16 x i16>*
  %17790 = load <16 x i16>, <16 x i16>* %17789, align 2, !tbaa !399
  %17791 = add <16 x i16> %17752, %17745
  %17792 = add <16 x i16> %17791, %17759
  %17793 = add <16 x i16> %17792, %17766
  %17794 = add <16 x i16> %17793, %17773
  %17795 = add <16 x i16> %17794, %17780
  %17796 = add <16 x i16> %17795, %17787
  %17797 = add <16 x i16> %17755, %17748
  %17798 = add <16 x i16> %17797, %17762
  %17799 = add <16 x i16> %17798, %17769
  %17800 = add <16 x i16> %17799, %17776
  %17801 = add <16 x i16> %17800, %17783
  %17802 = add <16 x i16> %17801, %17790
  %17803 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17796, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17804 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17802, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17805 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17803, <16 x i16> %17796)
  %17806 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17804, <16 x i16> %17802)
  %17807 = shufflevector <16 x i16> %17805, <16 x i16> %17806, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17808 = lshr <32 x i16> %17807, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17809 = shufflevector <32 x i16> %17808, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17810 = add nsw i64 %17522, %17741
  %17811 = getelementptr inbounds i16, i16* %66, i64 %17810
  %17812 = bitcast i16* %17811 to <16 x i16>*
  store <16 x i16> %17809, <16 x i16>* %17812, align 2, !tbaa !401
  %17813 = shufflevector <32 x i16> %17808, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17814 = getelementptr inbounds i16, i16* %17811, i64 16
  %17815 = bitcast i16* %17814 to <16 x i16>*
  store <16 x i16> %17813, <16 x i16>* %17815, align 2, !tbaa !401
  %17816 = add nuw nsw i32 %blur_y.s0.x.x.rebased760, 1
  %.not2743 = icmp eq i32 %17816, %t1727
  br i1 %.not2743, label %"end for blur_y.s0.x.x.rebased759", label %"for blur_y.s0.x.x.rebased758"

after_bb767:                                      ; preds = %"end for blur_y.s0.x.x.rebased759", %"produce blur_x770"
  br i1 %100, label %"for blur_y.s0.x.x.rebased772.preheader", label %"end for blur_y.s0.x.x.rebased773", !prof !386

"for blur_y.s0.x.x.rebased772.preheader":         ; preds = %after_bb767
  %17817 = sext i32 %t1744 to i64
  %17818 = zext i32 %.pre-phi3528 to i64
  %17819 = mul nsw i64 %17818, %116
  %17820 = sub nsw i64 %17819, %96
  %17821 = zext i32 %.pre-phi3524 to i64
  %17822 = mul nsw i64 %17821, %116
  %17823 = sub nsw i64 %17822, %96
  %17824 = zext i32 %.pre-phi3534 to i64
  %17825 = mul nsw i64 %17824, %116
  %17826 = sub nsw i64 %17825, %96
  %17827 = zext i32 %.pre-phi to i64
  %17828 = mul nsw i64 %17827, %116
  %17829 = sub nsw i64 %17828, %96
  %17830 = zext i32 %.pre-phi3508 to i64
  %17831 = mul nsw i64 %17830, %116
  %17832 = sub nsw i64 %17831, %96
  %17833 = zext i32 %.pre-phi3516 to i64
  %17834 = mul nsw i64 %17833, %116
  %17835 = sub nsw i64 %17834, %96
  %17836 = zext i32 %.pre-phi3512 to i64
  %17837 = mul nsw i64 %17836, %116
  %17838 = sub nsw i64 %17837, %96
  %17839 = sext i32 %a26 to i64
  %17840 = add nsw i64 %17839, 29
  %17841 = mul nsw i64 %17840, %117
  %17842 = add nsw i64 %17841, %120
  br label %"for blur_y.s0.x.x.rebased772"

"produce blur_x770":                              ; preds = %"end for blur_y.s0.x.x.rebased759"
  %17843 = getelementptr inbounds i16, i16* %read_input, i64 %177
  %17844 = getelementptr inbounds i16, i16* %17843, i64 -31
  %17845 = bitcast i16* %17844 to <16 x i16>*
  %17846 = load <16 x i16>, <16 x i16>* %17845, align 2, !tbaa !396
  %17847 = getelementptr inbounds i16, i16* %17843, i64 -15
  %17848 = bitcast i16* %17847 to <16 x i16>*
  %17849 = load <16 x i16>, <16 x i16>* %17848, align 2, !tbaa !396
  %17850 = getelementptr inbounds i16, i16* %17843, i64 -32
  %17851 = bitcast i16* %17850 to <16 x i16>*
  %17852 = load <16 x i16>, <16 x i16>* %17851, align 2, !tbaa !396
  %17853 = getelementptr inbounds i16, i16* %17843, i64 -16
  %17854 = bitcast i16* %17853 to <16 x i16>*
  %17855 = load <16 x i16>, <16 x i16>* %17854, align 2, !tbaa !396
  %17856 = getelementptr inbounds i16, i16* %17843, i64 -30
  %17857 = bitcast i16* %17856 to <16 x i16>*
  %17858 = load <16 x i16>, <16 x i16>* %17857, align 2, !tbaa !396
  %17859 = getelementptr inbounds i16, i16* %17843, i64 -14
  %17860 = bitcast i16* %17859 to <16 x i16>*
  %17861 = load <16 x i16>, <16 x i16>* %17860, align 2, !tbaa !396
  %17862 = getelementptr inbounds i16, i16* %17843, i64 -29
  %17863 = bitcast i16* %17862 to <16 x i16>*
  %17864 = load <16 x i16>, <16 x i16>* %17863, align 2, !tbaa !396
  %17865 = getelementptr inbounds i16, i16* %17843, i64 -13
  %17866 = bitcast i16* %17865 to <16 x i16>*
  %17867 = load <16 x i16>, <16 x i16>* %17866, align 2, !tbaa !396
  %17868 = getelementptr inbounds i16, i16* %17843, i64 -28
  %17869 = bitcast i16* %17868 to <16 x i16>*
  %17870 = load <16 x i16>, <16 x i16>* %17869, align 2, !tbaa !396
  %17871 = getelementptr inbounds i16, i16* %17843, i64 -12
  %17872 = bitcast i16* %17871 to <16 x i16>*
  %17873 = load <16 x i16>, <16 x i16>* %17872, align 2, !tbaa !396
  %17874 = getelementptr inbounds i16, i16* %17843, i64 -26
  %17875 = bitcast i16* %17874 to <16 x i16>*
  %17876 = load <16 x i16>, <16 x i16>* %17875, align 2, !tbaa !396
  %17877 = getelementptr inbounds i16, i16* %17843, i64 -10
  %17878 = bitcast i16* %17877 to <16 x i16>*
  %17879 = load <16 x i16>, <16 x i16>* %17878, align 2, !tbaa !396
  %17880 = getelementptr inbounds i16, i16* %17843, i64 -27
  %17881 = bitcast i16* %17880 to <16 x i16>*
  %17882 = load <16 x i16>, <16 x i16>* %17881, align 2, !tbaa !396
  %17883 = getelementptr inbounds i16, i16* %17843, i64 -11
  %17884 = bitcast i16* %17883 to <16 x i16>*
  %17885 = load <16 x i16>, <16 x i16>* %17884, align 2, !tbaa !396
  %17886 = add <16 x i16> %17852, %17846
  %17887 = add <16 x i16> %17886, %17858
  %17888 = add <16 x i16> %17887, %17864
  %17889 = add <16 x i16> %17888, %17870
  %17890 = add <16 x i16> %17889, %17876
  %17891 = add <16 x i16> %17890, %17882
  %17892 = add <16 x i16> %17855, %17849
  %17893 = add <16 x i16> %17892, %17861
  %17894 = add <16 x i16> %17893, %17867
  %17895 = add <16 x i16> %17894, %17873
  %17896 = add <16 x i16> %17895, %17879
  %17897 = add <16 x i16> %17896, %17885
  %17898 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17891, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17899 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17897, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17900 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17898, <16 x i16> %17891)
  %17901 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17899, <16 x i16> %17897)
  %17902 = shufflevector <16 x i16> %17900, <16 x i16> %17901, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17903 = lshr <32 x i16> %17902, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17904 = shufflevector <32 x i16> %17903, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17905 = zext i32 %.pre-phi3516 to i64
  %17906 = mul nsw i64 %97, %17905
  %17907 = add nsw i64 %99, %17906
  %17908 = getelementptr inbounds i16, i16* %blur_x, i64 %17907
  %17909 = getelementptr inbounds i16, i16* %17908, i64 -32
  %17910 = bitcast i16* %17909 to <16 x i16>*
  store <16 x i16> %17904, <16 x i16>* %17910, align 2, !tbaa !399
  %17911 = shufflevector <32 x i16> %17903, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17912 = getelementptr inbounds i16, i16* %17908, i64 -16
  %17913 = bitcast i16* %17912 to <16 x i16>*
  store <16 x i16> %17911, <16 x i16>* %17913, align 2, !tbaa !399
  %17914 = zext i32 %.pre-phi3528 to i64
  %17915 = mul nsw i64 %17914, %116
  %17916 = add nsw i64 %17915, %94
  %17917 = getelementptr inbounds i16, i16* %blur_x, i64 %17916
  %17918 = getelementptr inbounds i16, i16* %17917, i64 -32
  %17919 = bitcast i16* %17918 to <16 x i16>*
  %17920 = load <16 x i16>, <16 x i16>* %17919, align 2, !tbaa !399
  %17921 = getelementptr inbounds i16, i16* %17917, i64 -16
  %17922 = bitcast i16* %17921 to <16 x i16>*
  %17923 = load <16 x i16>, <16 x i16>* %17922, align 2, !tbaa !399
  %17924 = zext i32 %.pre-phi3524 to i64
  %17925 = mul nsw i64 %17924, %116
  %17926 = add nsw i64 %17925, %94
  %17927 = getelementptr inbounds i16, i16* %blur_x, i64 %17926
  %17928 = getelementptr inbounds i16, i16* %17927, i64 -32
  %17929 = bitcast i16* %17928 to <16 x i16>*
  %17930 = load <16 x i16>, <16 x i16>* %17929, align 2, !tbaa !399
  %17931 = getelementptr inbounds i16, i16* %17927, i64 -16
  %17932 = bitcast i16* %17931 to <16 x i16>*
  %17933 = load <16 x i16>, <16 x i16>* %17932, align 2, !tbaa !399
  %17934 = zext i32 %.pre-phi3534 to i64
  %17935 = mul nsw i64 %17934, %116
  %17936 = add nsw i64 %17935, %94
  %17937 = getelementptr inbounds i16, i16* %blur_x, i64 %17936
  %17938 = getelementptr inbounds i16, i16* %17937, i64 -32
  %17939 = bitcast i16* %17938 to <16 x i16>*
  %17940 = load <16 x i16>, <16 x i16>* %17939, align 2, !tbaa !399
  %17941 = getelementptr inbounds i16, i16* %17937, i64 -16
  %17942 = bitcast i16* %17941 to <16 x i16>*
  %17943 = load <16 x i16>, <16 x i16>* %17942, align 2, !tbaa !399
  %17944 = zext i32 %.pre-phi to i64
  %17945 = mul nsw i64 %17944, %116
  %17946 = add nsw i64 %17945, %94
  %17947 = getelementptr inbounds i16, i16* %blur_x, i64 %17946
  %17948 = getelementptr inbounds i16, i16* %17947, i64 -32
  %17949 = bitcast i16* %17948 to <16 x i16>*
  %17950 = load <16 x i16>, <16 x i16>* %17949, align 2, !tbaa !399
  %17951 = getelementptr inbounds i16, i16* %17947, i64 -16
  %17952 = bitcast i16* %17951 to <16 x i16>*
  %17953 = load <16 x i16>, <16 x i16>* %17952, align 2, !tbaa !399
  %17954 = zext i32 %.pre-phi3508 to i64
  %17955 = mul nsw i64 %17954, %116
  %17956 = add nsw i64 %17955, %94
  %17957 = getelementptr inbounds i16, i16* %blur_x, i64 %17956
  %17958 = getelementptr inbounds i16, i16* %17957, i64 -32
  %17959 = bitcast i16* %17958 to <16 x i16>*
  %17960 = load <16 x i16>, <16 x i16>* %17959, align 2, !tbaa !399
  %17961 = getelementptr inbounds i16, i16* %17957, i64 -16
  %17962 = bitcast i16* %17961 to <16 x i16>*
  %17963 = load <16 x i16>, <16 x i16>* %17962, align 2, !tbaa !399
  %17964 = mul nsw i64 %17905, %116
  %17965 = add nsw i64 %17964, %94
  %17966 = getelementptr inbounds i16, i16* %blur_x, i64 %17965
  %17967 = getelementptr inbounds i16, i16* %17966, i64 -32
  %17968 = bitcast i16* %17967 to <16 x i16>*
  %17969 = load <16 x i16>, <16 x i16>* %17968, align 2, !tbaa !399
  %17970 = getelementptr inbounds i16, i16* %17966, i64 -16
  %17971 = bitcast i16* %17970 to <16 x i16>*
  %17972 = load <16 x i16>, <16 x i16>* %17971, align 2, !tbaa !399
  %17973 = zext i32 %.pre-phi3512 to i64
  %17974 = mul nsw i64 %17973, %116
  %17975 = add nsw i64 %17974, %94
  %17976 = getelementptr inbounds i16, i16* %blur_x, i64 %17975
  %17977 = getelementptr inbounds i16, i16* %17976, i64 -32
  %17978 = bitcast i16* %17977 to <16 x i16>*
  %17979 = load <16 x i16>, <16 x i16>* %17978, align 2, !tbaa !399
  %17980 = getelementptr inbounds i16, i16* %17976, i64 -16
  %17981 = bitcast i16* %17980 to <16 x i16>*
  %17982 = load <16 x i16>, <16 x i16>* %17981, align 2, !tbaa !399
  %17983 = add <16 x i16> %17930, %17920
  %17984 = add <16 x i16> %17983, %17940
  %17985 = add <16 x i16> %17984, %17950
  %17986 = add <16 x i16> %17985, %17960
  %17987 = add <16 x i16> %17986, %17969
  %17988 = add <16 x i16> %17987, %17979
  %17989 = add <16 x i16> %17933, %17923
  %17990 = add <16 x i16> %17989, %17943
  %17991 = add <16 x i16> %17990, %17953
  %17992 = add <16 x i16> %17991, %17963
  %17993 = add <16 x i16> %17992, %17972
  %17994 = add <16 x i16> %17993, %17982
  %17995 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17988, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17996 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17994, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %17997 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17995, <16 x i16> %17988)
  %17998 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %17996, <16 x i16> %17994)
  %17999 = shufflevector <16 x i16> %17997, <16 x i16> %17998, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18000 = lshr <32 x i16> %17999, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18001 = shufflevector <32 x i16> %18000, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18002 = sext i32 %a26 to i64
  %18003 = add nsw i64 %18002, 29
  %18004 = mul nsw i64 %18003, %117
  %18005 = add nsw i64 %119, %18004
  %18006 = getelementptr inbounds i16, i16* %66, i64 %18005
  %18007 = getelementptr inbounds i16, i16* %18006, i64 -32
  %18008 = bitcast i16* %18007 to <16 x i16>*
  store <16 x i16> %18001, <16 x i16>* %18008, align 2, !tbaa !401
  %18009 = shufflevector <32 x i16> %18000, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18010 = getelementptr inbounds i16, i16* %18006, i64 -16
  %18011 = bitcast i16* %18010 to <16 x i16>*
  store <16 x i16> %18009, <16 x i16>* %18011, align 2, !tbaa !401
  br label %after_bb767

"for blur_y.s0.x.x.rebased772":                   ; preds = %"for blur_y.s0.x.x.rebased772.preheader", %"consume blur_x779"
  %indvars.iv3366 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased772.preheader" ], [ %indvars.iv.next3367, %"consume blur_x779" ]
  %18012 = add nsw i64 %indvars.iv3366, %101
  %18013 = icmp slt i64 %18012, 1
  %18014 = trunc i64 %18012 to i32
  %18015 = shl nsw i32 %18014, 5
  %18016 = icmp sgt i32 %4, %18015
  %18017 = or i1 %18013, %18016
  br i1 %18017, label %"produce blur_x778", label %"for blur_y.s0.x.x.rebased772.consume blur_x779_crit_edge"

"for blur_y.s0.x.x.rebased772.consume blur_x779_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased772"
  %.pre3591 = shl nsw i64 %18012, 5
  br label %"consume blur_x779"

"end for blur_y.s0.x.x.rebased773":               ; preds = %"consume blur_x779", %after_bb767
  br i1 %102, label %"for blur_y.s0.x.x.rebased780.preheader", label %"end for blur_y.s0.x.x.rebased781", !prof !386

"for blur_y.s0.x.x.rebased780.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased773"
  %18018 = sext i32 %t1744 to i64
  %18019 = zext i32 %.pre-phi3528 to i64
  %18020 = mul nsw i64 %18019, %116
  %18021 = sub nsw i64 %18020, %96
  %18022 = zext i32 %.pre-phi3524 to i64
  %18023 = mul nsw i64 %18022, %116
  %18024 = sub nsw i64 %18023, %96
  %18025 = zext i32 %.pre-phi3534 to i64
  %18026 = mul nsw i64 %18025, %116
  %18027 = sub nsw i64 %18026, %96
  %18028 = zext i32 %.pre-phi to i64
  %18029 = mul nsw i64 %18028, %116
  %18030 = sub nsw i64 %18029, %96
  %18031 = zext i32 %.pre-phi3508 to i64
  %18032 = mul nsw i64 %18031, %116
  %18033 = sub nsw i64 %18032, %96
  %18034 = zext i32 %.pre-phi3516 to i64
  %18035 = mul nsw i64 %18034, %116
  %18036 = sub nsw i64 %18035, %96
  %18037 = zext i32 %.pre-phi3512 to i64
  %18038 = mul nsw i64 %18037, %116
  %18039 = sub nsw i64 %18038, %96
  %18040 = sext i32 %a26 to i64
  %18041 = add nsw i64 %18040, 29
  %18042 = mul nsw i64 %18041, %117
  %18043 = add nsw i64 %18042, %120
  br label %"for blur_y.s0.x.x.rebased780"

"produce blur_x778":                              ; preds = %"for blur_y.s0.x.x.rebased772"
  %t1216 = add nsw i32 %18015, %t2225
  %18044 = sext i32 %t1216 to i64
  %18045 = getelementptr inbounds i16, i16* %read_input, i64 %18044
  %18046 = getelementptr inbounds i16, i16* %18045, i64 1
  %18047 = bitcast i16* %18046 to <16 x i16>*
  %18048 = load <16 x i16>, <16 x i16>* %18047, align 2, !tbaa !396
  %18049 = getelementptr inbounds i16, i16* %18045, i64 17
  %18050 = bitcast i16* %18049 to <16 x i16>*
  %18051 = load <16 x i16>, <16 x i16>* %18050, align 2, !tbaa !396
  %18052 = bitcast i16* %18045 to <16 x i16>*
  %18053 = load <16 x i16>, <16 x i16>* %18052, align 2, !tbaa !396
  %18054 = getelementptr inbounds i16, i16* %18045, i64 16
  %18055 = bitcast i16* %18054 to <16 x i16>*
  %18056 = load <16 x i16>, <16 x i16>* %18055, align 2, !tbaa !396
  %18057 = getelementptr inbounds i16, i16* %18045, i64 2
  %18058 = bitcast i16* %18057 to <16 x i16>*
  %18059 = load <16 x i16>, <16 x i16>* %18058, align 2, !tbaa !396
  %18060 = getelementptr inbounds i16, i16* %18045, i64 18
  %18061 = bitcast i16* %18060 to <16 x i16>*
  %18062 = load <16 x i16>, <16 x i16>* %18061, align 2, !tbaa !396
  %18063 = getelementptr inbounds i16, i16* %18045, i64 3
  %18064 = bitcast i16* %18063 to <16 x i16>*
  %18065 = load <16 x i16>, <16 x i16>* %18064, align 2, !tbaa !396
  %18066 = getelementptr inbounds i16, i16* %18045, i64 19
  %18067 = bitcast i16* %18066 to <16 x i16>*
  %18068 = load <16 x i16>, <16 x i16>* %18067, align 2, !tbaa !396
  %18069 = getelementptr inbounds i16, i16* %18045, i64 4
  %18070 = bitcast i16* %18069 to <16 x i16>*
  %18071 = load <16 x i16>, <16 x i16>* %18070, align 2, !tbaa !396
  %18072 = getelementptr inbounds i16, i16* %18045, i64 20
  %18073 = bitcast i16* %18072 to <16 x i16>*
  %18074 = load <16 x i16>, <16 x i16>* %18073, align 2, !tbaa !396
  %18075 = getelementptr inbounds i16, i16* %18045, i64 6
  %18076 = bitcast i16* %18075 to <16 x i16>*
  %18077 = load <16 x i16>, <16 x i16>* %18076, align 2, !tbaa !396
  %18078 = getelementptr inbounds i16, i16* %18045, i64 22
  %18079 = bitcast i16* %18078 to <16 x i16>*
  %18080 = load <16 x i16>, <16 x i16>* %18079, align 2, !tbaa !396
  %18081 = getelementptr inbounds i16, i16* %18045, i64 5
  %18082 = bitcast i16* %18081 to <16 x i16>*
  %18083 = load <16 x i16>, <16 x i16>* %18082, align 2, !tbaa !396
  %18084 = getelementptr inbounds i16, i16* %18045, i64 21
  %18085 = bitcast i16* %18084 to <16 x i16>*
  %18086 = load <16 x i16>, <16 x i16>* %18085, align 2, !tbaa !396
  %18087 = add <16 x i16> %18053, %18048
  %18088 = add <16 x i16> %18087, %18059
  %18089 = add <16 x i16> %18088, %18065
  %18090 = add <16 x i16> %18089, %18071
  %18091 = add <16 x i16> %18090, %18077
  %18092 = add <16 x i16> %18091, %18083
  %18093 = add <16 x i16> %18056, %18051
  %18094 = add <16 x i16> %18093, %18062
  %18095 = add <16 x i16> %18094, %18068
  %18096 = add <16 x i16> %18095, %18074
  %18097 = add <16 x i16> %18096, %18080
  %18098 = add <16 x i16> %18097, %18086
  %18099 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18092, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18100 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18098, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18101 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18099, <16 x i16> %18092)
  %18102 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18100, <16 x i16> %18098)
  %18103 = shufflevector <16 x i16> %18101, <16 x i16> %18102, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18104 = lshr <32 x i16> %18103, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18105 = shufflevector <32 x i16> %18104, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18106 = shl nsw i64 %18012, 5
  %18107 = add nsw i64 %18106, %17817
  %18108 = getelementptr inbounds i16, i16* %blur_x, i64 %18107
  %18109 = bitcast i16* %18108 to <16 x i16>*
  store <16 x i16> %18105, <16 x i16>* %18109, align 2, !tbaa !399
  %18110 = shufflevector <32 x i16> %18104, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18111 = getelementptr inbounds i16, i16* %18108, i64 16
  %18112 = bitcast i16* %18111 to <16 x i16>*
  store <16 x i16> %18110, <16 x i16>* %18112, align 2, !tbaa !399
  br label %"consume blur_x779"

"consume blur_x779":                              ; preds = %"for blur_y.s0.x.x.rebased772.consume blur_x779_crit_edge", %"produce blur_x778"
  %.pre-phi3592 = phi i64 [ %.pre3591, %"for blur_y.s0.x.x.rebased772.consume blur_x779_crit_edge" ], [ %18106, %"produce blur_x778" ]
  %18113 = add nsw i64 %17820, %.pre-phi3592
  %18114 = getelementptr inbounds i16, i16* %blur_x, i64 %18113
  %18115 = bitcast i16* %18114 to <16 x i16>*
  %18116 = load <16 x i16>, <16 x i16>* %18115, align 2, !tbaa !399
  %18117 = getelementptr inbounds i16, i16* %18114, i64 16
  %18118 = bitcast i16* %18117 to <16 x i16>*
  %18119 = load <16 x i16>, <16 x i16>* %18118, align 2, !tbaa !399
  %18120 = add nsw i64 %17823, %.pre-phi3592
  %18121 = getelementptr inbounds i16, i16* %blur_x, i64 %18120
  %18122 = bitcast i16* %18121 to <16 x i16>*
  %18123 = load <16 x i16>, <16 x i16>* %18122, align 2, !tbaa !399
  %18124 = getelementptr inbounds i16, i16* %18121, i64 16
  %18125 = bitcast i16* %18124 to <16 x i16>*
  %18126 = load <16 x i16>, <16 x i16>* %18125, align 2, !tbaa !399
  %18127 = add nsw i64 %17826, %.pre-phi3592
  %18128 = getelementptr inbounds i16, i16* %blur_x, i64 %18127
  %18129 = bitcast i16* %18128 to <16 x i16>*
  %18130 = load <16 x i16>, <16 x i16>* %18129, align 2, !tbaa !399
  %18131 = getelementptr inbounds i16, i16* %18128, i64 16
  %18132 = bitcast i16* %18131 to <16 x i16>*
  %18133 = load <16 x i16>, <16 x i16>* %18132, align 2, !tbaa !399
  %18134 = add nsw i64 %17829, %.pre-phi3592
  %18135 = getelementptr inbounds i16, i16* %blur_x, i64 %18134
  %18136 = bitcast i16* %18135 to <16 x i16>*
  %18137 = load <16 x i16>, <16 x i16>* %18136, align 2, !tbaa !399
  %18138 = getelementptr inbounds i16, i16* %18135, i64 16
  %18139 = bitcast i16* %18138 to <16 x i16>*
  %18140 = load <16 x i16>, <16 x i16>* %18139, align 2, !tbaa !399
  %18141 = add nsw i64 %17832, %.pre-phi3592
  %18142 = getelementptr inbounds i16, i16* %blur_x, i64 %18141
  %18143 = bitcast i16* %18142 to <16 x i16>*
  %18144 = load <16 x i16>, <16 x i16>* %18143, align 2, !tbaa !399
  %18145 = getelementptr inbounds i16, i16* %18142, i64 16
  %18146 = bitcast i16* %18145 to <16 x i16>*
  %18147 = load <16 x i16>, <16 x i16>* %18146, align 2, !tbaa !399
  %18148 = add nsw i64 %17835, %.pre-phi3592
  %18149 = getelementptr inbounds i16, i16* %blur_x, i64 %18148
  %18150 = bitcast i16* %18149 to <16 x i16>*
  %18151 = load <16 x i16>, <16 x i16>* %18150, align 2, !tbaa !399
  %18152 = getelementptr inbounds i16, i16* %18149, i64 16
  %18153 = bitcast i16* %18152 to <16 x i16>*
  %18154 = load <16 x i16>, <16 x i16>* %18153, align 2, !tbaa !399
  %18155 = add nsw i64 %17838, %.pre-phi3592
  %18156 = getelementptr inbounds i16, i16* %blur_x, i64 %18155
  %18157 = bitcast i16* %18156 to <16 x i16>*
  %18158 = load <16 x i16>, <16 x i16>* %18157, align 2, !tbaa !399
  %18159 = getelementptr inbounds i16, i16* %18156, i64 16
  %18160 = bitcast i16* %18159 to <16 x i16>*
  %18161 = load <16 x i16>, <16 x i16>* %18160, align 2, !tbaa !399
  %18162 = add <16 x i16> %18123, %18116
  %18163 = add <16 x i16> %18162, %18130
  %18164 = add <16 x i16> %18163, %18137
  %18165 = add <16 x i16> %18164, %18144
  %18166 = add <16 x i16> %18165, %18151
  %18167 = add <16 x i16> %18166, %18158
  %18168 = add <16 x i16> %18126, %18119
  %18169 = add <16 x i16> %18168, %18133
  %18170 = add <16 x i16> %18169, %18140
  %18171 = add <16 x i16> %18170, %18147
  %18172 = add <16 x i16> %18171, %18154
  %18173 = add <16 x i16> %18172, %18161
  %18174 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18167, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18175 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18173, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18176 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18174, <16 x i16> %18167)
  %18177 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18175, <16 x i16> %18173)
  %18178 = shufflevector <16 x i16> %18176, <16 x i16> %18177, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18179 = lshr <32 x i16> %18178, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18180 = shufflevector <32 x i16> %18179, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18181 = add nsw i64 %17842, %.pre-phi3592
  %18182 = getelementptr inbounds i16, i16* %66, i64 %18181
  %18183 = bitcast i16* %18182 to <16 x i16>*
  store <16 x i16> %18180, <16 x i16>* %18183, align 2, !tbaa !401
  %18184 = shufflevector <32 x i16> %18179, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18185 = getelementptr inbounds i16, i16* %18182, i64 16
  %18186 = bitcast i16* %18185 to <16 x i16>*
  store <16 x i16> %18184, <16 x i16>* %18186, align 2, !tbaa !401
  %indvars.iv.next3367 = add nuw nsw i64 %indvars.iv3366, 1
  %.not2742 = icmp eq i64 %indvars.iv.next3367, %188
  br i1 %.not2742, label %"end for blur_y.s0.x.x.rebased773", label %"for blur_y.s0.x.x.rebased772"

"for blur_y.s0.x.x.rebased780":                   ; preds = %"for blur_y.s0.x.x.rebased780.preheader", %"consume blur_x788"
  %blur_y.s0.x.x.rebased782 = phi i32 [ %18337, %"consume blur_x788" ], [ 0, %"for blur_y.s0.x.x.rebased780.preheader" ]
  %18187 = add nsw i32 %blur_y.s0.x.x.rebased782, %t1670
  %a322 = shl nsw i32 %18187, 5
  %18188 = icmp sgt i32 %a14, %a322
  %b328 = select i1 %18188, i32 %a322, i32 %a14
  %18189 = icmp slt i32 %18187, 1
  %18190 = icmp sgt i32 %4, %a322
  %18191 = or i1 %18189, %18190
  br i1 %18191, label %"produce blur_x786", label %"consume blur_x788"

"end for blur_y.s0.x.x.rebased781":               ; preds = %"consume blur_x788", %"end for blur_y.s0.x.x.rebased773"
  br i1 %34, label %"produce blur_x792", label %after_bb789

"produce blur_x786":                              ; preds = %"for blur_y.s0.x.x.rebased780"
  %18192 = icmp slt i32 %b328, %4
  %blur_x.s0.x.v1.base.s787 = select i1 %18192, i32 %b328, i32 %4
  %t1221 = add nsw i32 %blur_x.s0.x.v1.base.s787, %t2225
  %18193 = sext i32 %t1221 to i64
  %18194 = getelementptr inbounds i16, i16* %read_input, i64 %18193
  %18195 = getelementptr inbounds i16, i16* %18194, i64 1
  %18196 = bitcast i16* %18195 to <16 x i16>*
  %18197 = load <16 x i16>, <16 x i16>* %18196, align 2, !tbaa !396
  %18198 = getelementptr inbounds i16, i16* %18194, i64 17
  %18199 = bitcast i16* %18198 to <16 x i16>*
  %18200 = load <16 x i16>, <16 x i16>* %18199, align 2, !tbaa !396
  %18201 = bitcast i16* %18194 to <16 x i16>*
  %18202 = load <16 x i16>, <16 x i16>* %18201, align 2, !tbaa !396
  %18203 = getelementptr inbounds i16, i16* %18194, i64 16
  %18204 = bitcast i16* %18203 to <16 x i16>*
  %18205 = load <16 x i16>, <16 x i16>* %18204, align 2, !tbaa !396
  %18206 = getelementptr inbounds i16, i16* %18194, i64 2
  %18207 = bitcast i16* %18206 to <16 x i16>*
  %18208 = load <16 x i16>, <16 x i16>* %18207, align 2, !tbaa !396
  %18209 = getelementptr inbounds i16, i16* %18194, i64 18
  %18210 = bitcast i16* %18209 to <16 x i16>*
  %18211 = load <16 x i16>, <16 x i16>* %18210, align 2, !tbaa !396
  %18212 = getelementptr inbounds i16, i16* %18194, i64 3
  %18213 = bitcast i16* %18212 to <16 x i16>*
  %18214 = load <16 x i16>, <16 x i16>* %18213, align 2, !tbaa !396
  %18215 = getelementptr inbounds i16, i16* %18194, i64 19
  %18216 = bitcast i16* %18215 to <16 x i16>*
  %18217 = load <16 x i16>, <16 x i16>* %18216, align 2, !tbaa !396
  %18218 = getelementptr inbounds i16, i16* %18194, i64 4
  %18219 = bitcast i16* %18218 to <16 x i16>*
  %18220 = load <16 x i16>, <16 x i16>* %18219, align 2, !tbaa !396
  %18221 = getelementptr inbounds i16, i16* %18194, i64 20
  %18222 = bitcast i16* %18221 to <16 x i16>*
  %18223 = load <16 x i16>, <16 x i16>* %18222, align 2, !tbaa !396
  %18224 = getelementptr inbounds i16, i16* %18194, i64 6
  %18225 = bitcast i16* %18224 to <16 x i16>*
  %18226 = load <16 x i16>, <16 x i16>* %18225, align 2, !tbaa !396
  %18227 = getelementptr inbounds i16, i16* %18194, i64 22
  %18228 = bitcast i16* %18227 to <16 x i16>*
  %18229 = load <16 x i16>, <16 x i16>* %18228, align 2, !tbaa !396
  %18230 = getelementptr inbounds i16, i16* %18194, i64 5
  %18231 = bitcast i16* %18230 to <16 x i16>*
  %18232 = load <16 x i16>, <16 x i16>* %18231, align 2, !tbaa !396
  %18233 = getelementptr inbounds i16, i16* %18194, i64 21
  %18234 = bitcast i16* %18233 to <16 x i16>*
  %18235 = load <16 x i16>, <16 x i16>* %18234, align 2, !tbaa !396
  %18236 = add <16 x i16> %18202, %18197
  %18237 = add <16 x i16> %18236, %18208
  %18238 = add <16 x i16> %18237, %18214
  %18239 = add <16 x i16> %18238, %18220
  %18240 = add <16 x i16> %18239, %18226
  %18241 = add <16 x i16> %18240, %18232
  %18242 = add <16 x i16> %18205, %18200
  %18243 = add <16 x i16> %18242, %18211
  %18244 = add <16 x i16> %18243, %18217
  %18245 = add <16 x i16> %18244, %18223
  %18246 = add <16 x i16> %18245, %18229
  %18247 = add <16 x i16> %18246, %18235
  %18248 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18241, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18249 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18247, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18250 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18248, <16 x i16> %18241)
  %18251 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18249, <16 x i16> %18247)
  %18252 = shufflevector <16 x i16> %18250, <16 x i16> %18251, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18253 = lshr <32 x i16> %18252, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18254 = shufflevector <32 x i16> %18253, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18255 = sext i32 %blur_x.s0.x.v1.base.s787 to i64
  %18256 = add nsw i64 %18255, %18018
  %18257 = getelementptr inbounds i16, i16* %blur_x, i64 %18256
  %18258 = bitcast i16* %18257 to <16 x i16>*
  store <16 x i16> %18254, <16 x i16>* %18258, align 2, !tbaa !399
  %18259 = shufflevector <32 x i16> %18253, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18260 = getelementptr inbounds i16, i16* %18257, i64 16
  %18261 = bitcast i16* %18260 to <16 x i16>*
  store <16 x i16> %18259, <16 x i16>* %18261, align 2, !tbaa !399
  br label %"consume blur_x788"

"consume blur_x788":                              ; preds = %"for blur_y.s0.x.x.rebased780", %"produce blur_x786"
  %18262 = sext i32 %b328 to i64
  %18263 = add nsw i64 %18021, %18262
  %18264 = getelementptr inbounds i16, i16* %blur_x, i64 %18263
  %18265 = bitcast i16* %18264 to <16 x i16>*
  %18266 = load <16 x i16>, <16 x i16>* %18265, align 2, !tbaa !399
  %18267 = getelementptr inbounds i16, i16* %18264, i64 16
  %18268 = bitcast i16* %18267 to <16 x i16>*
  %18269 = load <16 x i16>, <16 x i16>* %18268, align 2, !tbaa !399
  %18270 = add nsw i64 %18024, %18262
  %18271 = getelementptr inbounds i16, i16* %blur_x, i64 %18270
  %18272 = bitcast i16* %18271 to <16 x i16>*
  %18273 = load <16 x i16>, <16 x i16>* %18272, align 2, !tbaa !399
  %18274 = getelementptr inbounds i16, i16* %18271, i64 16
  %18275 = bitcast i16* %18274 to <16 x i16>*
  %18276 = load <16 x i16>, <16 x i16>* %18275, align 2, !tbaa !399
  %18277 = add nsw i64 %18027, %18262
  %18278 = getelementptr inbounds i16, i16* %blur_x, i64 %18277
  %18279 = bitcast i16* %18278 to <16 x i16>*
  %18280 = load <16 x i16>, <16 x i16>* %18279, align 2, !tbaa !399
  %18281 = getelementptr inbounds i16, i16* %18278, i64 16
  %18282 = bitcast i16* %18281 to <16 x i16>*
  %18283 = load <16 x i16>, <16 x i16>* %18282, align 2, !tbaa !399
  %18284 = add nsw i64 %18030, %18262
  %18285 = getelementptr inbounds i16, i16* %blur_x, i64 %18284
  %18286 = bitcast i16* %18285 to <16 x i16>*
  %18287 = load <16 x i16>, <16 x i16>* %18286, align 2, !tbaa !399
  %18288 = getelementptr inbounds i16, i16* %18285, i64 16
  %18289 = bitcast i16* %18288 to <16 x i16>*
  %18290 = load <16 x i16>, <16 x i16>* %18289, align 2, !tbaa !399
  %18291 = add nsw i64 %18033, %18262
  %18292 = getelementptr inbounds i16, i16* %blur_x, i64 %18291
  %18293 = bitcast i16* %18292 to <16 x i16>*
  %18294 = load <16 x i16>, <16 x i16>* %18293, align 2, !tbaa !399
  %18295 = getelementptr inbounds i16, i16* %18292, i64 16
  %18296 = bitcast i16* %18295 to <16 x i16>*
  %18297 = load <16 x i16>, <16 x i16>* %18296, align 2, !tbaa !399
  %18298 = add nsw i64 %18036, %18262
  %18299 = getelementptr inbounds i16, i16* %blur_x, i64 %18298
  %18300 = bitcast i16* %18299 to <16 x i16>*
  %18301 = load <16 x i16>, <16 x i16>* %18300, align 2, !tbaa !399
  %18302 = getelementptr inbounds i16, i16* %18299, i64 16
  %18303 = bitcast i16* %18302 to <16 x i16>*
  %18304 = load <16 x i16>, <16 x i16>* %18303, align 2, !tbaa !399
  %18305 = add nsw i64 %18039, %18262
  %18306 = getelementptr inbounds i16, i16* %blur_x, i64 %18305
  %18307 = bitcast i16* %18306 to <16 x i16>*
  %18308 = load <16 x i16>, <16 x i16>* %18307, align 2, !tbaa !399
  %18309 = getelementptr inbounds i16, i16* %18306, i64 16
  %18310 = bitcast i16* %18309 to <16 x i16>*
  %18311 = load <16 x i16>, <16 x i16>* %18310, align 2, !tbaa !399
  %18312 = add <16 x i16> %18273, %18266
  %18313 = add <16 x i16> %18312, %18280
  %18314 = add <16 x i16> %18313, %18287
  %18315 = add <16 x i16> %18314, %18294
  %18316 = add <16 x i16> %18315, %18301
  %18317 = add <16 x i16> %18316, %18308
  %18318 = add <16 x i16> %18276, %18269
  %18319 = add <16 x i16> %18318, %18283
  %18320 = add <16 x i16> %18319, %18290
  %18321 = add <16 x i16> %18320, %18297
  %18322 = add <16 x i16> %18321, %18304
  %18323 = add <16 x i16> %18322, %18311
  %18324 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18317, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18325 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18323, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18326 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18324, <16 x i16> %18317)
  %18327 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18325, <16 x i16> %18323)
  %18328 = shufflevector <16 x i16> %18326, <16 x i16> %18327, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18329 = lshr <32 x i16> %18328, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18330 = shufflevector <32 x i16> %18329, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18331 = add nsw i64 %18043, %18262
  %18332 = getelementptr inbounds i16, i16* %66, i64 %18331
  %18333 = bitcast i16* %18332 to <16 x i16>*
  store <16 x i16> %18330, <16 x i16>* %18333, align 2, !tbaa !401
  %18334 = shufflevector <32 x i16> %18329, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18335 = getelementptr inbounds i16, i16* %18332, i64 16
  %18336 = bitcast i16* %18335 to <16 x i16>*
  store <16 x i16> %18334, <16 x i16>* %18336, align 2, !tbaa !401
  %18337 = add nuw nsw i32 %blur_y.s0.x.x.rebased782, 1
  %.not2741 = icmp eq i32 %18337, %t1727
  br i1 %.not2741, label %"end for blur_y.s0.x.x.rebased781", label %"for blur_y.s0.x.x.rebased780"

after_bb789:                                      ; preds = %"end for blur_y.s0.x.x.rebased781", %"produce blur_x792"
  br i1 %100, label %"for blur_y.s0.x.x.rebased794.preheader", label %"end for blur_y.s0.x.x.rebased795", !prof !386

"for blur_y.s0.x.x.rebased794.preheader":         ; preds = %after_bb789
  %18338 = sext i32 %t1750 to i64
  %18339 = zext i32 %.pre-phi3534 to i64
  %18340 = mul nsw i64 %18339, %116
  %18341 = sub nsw i64 %18340, %96
  %18342 = zext i32 %.pre-phi3528 to i64
  %18343 = mul nsw i64 %18342, %116
  %18344 = sub nsw i64 %18343, %96
  %18345 = zext i32 %.pre-phi to i64
  %18346 = mul nsw i64 %18345, %116
  %18347 = sub nsw i64 %18346, %96
  %18348 = zext i32 %.pre-phi3508 to i64
  %18349 = mul nsw i64 %18348, %116
  %18350 = sub nsw i64 %18349, %96
  %18351 = zext i32 %.pre-phi3512 to i64
  %18352 = mul nsw i64 %18351, %116
  %18353 = sub nsw i64 %18352, %96
  %18354 = zext i32 %.pre-phi3520 to i64
  %18355 = mul nsw i64 %18354, %116
  %18356 = sub nsw i64 %18355, %96
  %18357 = zext i32 %.pre-phi3516 to i64
  %18358 = mul nsw i64 %18357, %116
  %18359 = sub nsw i64 %18358, %96
  %18360 = sext i32 %a26 to i64
  %18361 = add nsw i64 %18360, 30
  %18362 = mul nsw i64 %18361, %117
  %18363 = add nsw i64 %18362, %120
  br label %"for blur_y.s0.x.x.rebased794"

"produce blur_x792":                              ; preds = %"end for blur_y.s0.x.x.rebased781"
  %18364 = getelementptr inbounds i16, i16* %read_input, i64 %179
  %18365 = getelementptr inbounds i16, i16* %18364, i64 -31
  %18366 = bitcast i16* %18365 to <16 x i16>*
  %18367 = load <16 x i16>, <16 x i16>* %18366, align 2, !tbaa !396
  %18368 = getelementptr inbounds i16, i16* %18364, i64 -15
  %18369 = bitcast i16* %18368 to <16 x i16>*
  %18370 = load <16 x i16>, <16 x i16>* %18369, align 2, !tbaa !396
  %18371 = getelementptr inbounds i16, i16* %18364, i64 -32
  %18372 = bitcast i16* %18371 to <16 x i16>*
  %18373 = load <16 x i16>, <16 x i16>* %18372, align 2, !tbaa !396
  %18374 = getelementptr inbounds i16, i16* %18364, i64 -16
  %18375 = bitcast i16* %18374 to <16 x i16>*
  %18376 = load <16 x i16>, <16 x i16>* %18375, align 2, !tbaa !396
  %18377 = getelementptr inbounds i16, i16* %18364, i64 -30
  %18378 = bitcast i16* %18377 to <16 x i16>*
  %18379 = load <16 x i16>, <16 x i16>* %18378, align 2, !tbaa !396
  %18380 = getelementptr inbounds i16, i16* %18364, i64 -14
  %18381 = bitcast i16* %18380 to <16 x i16>*
  %18382 = load <16 x i16>, <16 x i16>* %18381, align 2, !tbaa !396
  %18383 = getelementptr inbounds i16, i16* %18364, i64 -29
  %18384 = bitcast i16* %18383 to <16 x i16>*
  %18385 = load <16 x i16>, <16 x i16>* %18384, align 2, !tbaa !396
  %18386 = getelementptr inbounds i16, i16* %18364, i64 -13
  %18387 = bitcast i16* %18386 to <16 x i16>*
  %18388 = load <16 x i16>, <16 x i16>* %18387, align 2, !tbaa !396
  %18389 = getelementptr inbounds i16, i16* %18364, i64 -28
  %18390 = bitcast i16* %18389 to <16 x i16>*
  %18391 = load <16 x i16>, <16 x i16>* %18390, align 2, !tbaa !396
  %18392 = getelementptr inbounds i16, i16* %18364, i64 -12
  %18393 = bitcast i16* %18392 to <16 x i16>*
  %18394 = load <16 x i16>, <16 x i16>* %18393, align 2, !tbaa !396
  %18395 = getelementptr inbounds i16, i16* %18364, i64 -26
  %18396 = bitcast i16* %18395 to <16 x i16>*
  %18397 = load <16 x i16>, <16 x i16>* %18396, align 2, !tbaa !396
  %18398 = getelementptr inbounds i16, i16* %18364, i64 -10
  %18399 = bitcast i16* %18398 to <16 x i16>*
  %18400 = load <16 x i16>, <16 x i16>* %18399, align 2, !tbaa !396
  %18401 = getelementptr inbounds i16, i16* %18364, i64 -27
  %18402 = bitcast i16* %18401 to <16 x i16>*
  %18403 = load <16 x i16>, <16 x i16>* %18402, align 2, !tbaa !396
  %18404 = getelementptr inbounds i16, i16* %18364, i64 -11
  %18405 = bitcast i16* %18404 to <16 x i16>*
  %18406 = load <16 x i16>, <16 x i16>* %18405, align 2, !tbaa !396
  %18407 = add <16 x i16> %18373, %18367
  %18408 = add <16 x i16> %18407, %18379
  %18409 = add <16 x i16> %18408, %18385
  %18410 = add <16 x i16> %18409, %18391
  %18411 = add <16 x i16> %18410, %18397
  %18412 = add <16 x i16> %18411, %18403
  %18413 = add <16 x i16> %18376, %18370
  %18414 = add <16 x i16> %18413, %18382
  %18415 = add <16 x i16> %18414, %18388
  %18416 = add <16 x i16> %18415, %18394
  %18417 = add <16 x i16> %18416, %18400
  %18418 = add <16 x i16> %18417, %18406
  %18419 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18412, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18420 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18418, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18421 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18419, <16 x i16> %18412)
  %18422 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18420, <16 x i16> %18418)
  %18423 = shufflevector <16 x i16> %18421, <16 x i16> %18422, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18424 = lshr <32 x i16> %18423, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18425 = shufflevector <32 x i16> %18424, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18426 = zext i32 %.pre-phi3520 to i64
  %18427 = mul nsw i64 %97, %18426
  %18428 = add nsw i64 %99, %18427
  %18429 = getelementptr inbounds i16, i16* %blur_x, i64 %18428
  %18430 = getelementptr inbounds i16, i16* %18429, i64 -32
  %18431 = bitcast i16* %18430 to <16 x i16>*
  store <16 x i16> %18425, <16 x i16>* %18431, align 2, !tbaa !399
  %18432 = shufflevector <32 x i16> %18424, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18433 = getelementptr inbounds i16, i16* %18429, i64 -16
  %18434 = bitcast i16* %18433 to <16 x i16>*
  store <16 x i16> %18432, <16 x i16>* %18434, align 2, !tbaa !399
  %18435 = zext i32 %.pre-phi3534 to i64
  %18436 = mul nsw i64 %18435, %116
  %18437 = add nsw i64 %18436, %94
  %18438 = getelementptr inbounds i16, i16* %blur_x, i64 %18437
  %18439 = getelementptr inbounds i16, i16* %18438, i64 -32
  %18440 = bitcast i16* %18439 to <16 x i16>*
  %18441 = load <16 x i16>, <16 x i16>* %18440, align 2, !tbaa !399
  %18442 = getelementptr inbounds i16, i16* %18438, i64 -16
  %18443 = bitcast i16* %18442 to <16 x i16>*
  %18444 = load <16 x i16>, <16 x i16>* %18443, align 2, !tbaa !399
  %18445 = zext i32 %.pre-phi3528 to i64
  %18446 = mul nsw i64 %18445, %116
  %18447 = add nsw i64 %18446, %94
  %18448 = getelementptr inbounds i16, i16* %blur_x, i64 %18447
  %18449 = getelementptr inbounds i16, i16* %18448, i64 -32
  %18450 = bitcast i16* %18449 to <16 x i16>*
  %18451 = load <16 x i16>, <16 x i16>* %18450, align 2, !tbaa !399
  %18452 = getelementptr inbounds i16, i16* %18448, i64 -16
  %18453 = bitcast i16* %18452 to <16 x i16>*
  %18454 = load <16 x i16>, <16 x i16>* %18453, align 2, !tbaa !399
  %18455 = zext i32 %.pre-phi to i64
  %18456 = mul nsw i64 %18455, %116
  %18457 = add nsw i64 %18456, %94
  %18458 = getelementptr inbounds i16, i16* %blur_x, i64 %18457
  %18459 = getelementptr inbounds i16, i16* %18458, i64 -32
  %18460 = bitcast i16* %18459 to <16 x i16>*
  %18461 = load <16 x i16>, <16 x i16>* %18460, align 2, !tbaa !399
  %18462 = getelementptr inbounds i16, i16* %18458, i64 -16
  %18463 = bitcast i16* %18462 to <16 x i16>*
  %18464 = load <16 x i16>, <16 x i16>* %18463, align 2, !tbaa !399
  %18465 = zext i32 %.pre-phi3508 to i64
  %18466 = mul nsw i64 %18465, %116
  %18467 = add nsw i64 %18466, %94
  %18468 = getelementptr inbounds i16, i16* %blur_x, i64 %18467
  %18469 = getelementptr inbounds i16, i16* %18468, i64 -32
  %18470 = bitcast i16* %18469 to <16 x i16>*
  %18471 = load <16 x i16>, <16 x i16>* %18470, align 2, !tbaa !399
  %18472 = getelementptr inbounds i16, i16* %18468, i64 -16
  %18473 = bitcast i16* %18472 to <16 x i16>*
  %18474 = load <16 x i16>, <16 x i16>* %18473, align 2, !tbaa !399
  %18475 = zext i32 %.pre-phi3512 to i64
  %18476 = mul nsw i64 %18475, %116
  %18477 = add nsw i64 %18476, %94
  %18478 = getelementptr inbounds i16, i16* %blur_x, i64 %18477
  %18479 = getelementptr inbounds i16, i16* %18478, i64 -32
  %18480 = bitcast i16* %18479 to <16 x i16>*
  %18481 = load <16 x i16>, <16 x i16>* %18480, align 2, !tbaa !399
  %18482 = getelementptr inbounds i16, i16* %18478, i64 -16
  %18483 = bitcast i16* %18482 to <16 x i16>*
  %18484 = load <16 x i16>, <16 x i16>* %18483, align 2, !tbaa !399
  %18485 = mul nsw i64 %18426, %116
  %18486 = add nsw i64 %18485, %94
  %18487 = getelementptr inbounds i16, i16* %blur_x, i64 %18486
  %18488 = getelementptr inbounds i16, i16* %18487, i64 -32
  %18489 = bitcast i16* %18488 to <16 x i16>*
  %18490 = load <16 x i16>, <16 x i16>* %18489, align 2, !tbaa !399
  %18491 = getelementptr inbounds i16, i16* %18487, i64 -16
  %18492 = bitcast i16* %18491 to <16 x i16>*
  %18493 = load <16 x i16>, <16 x i16>* %18492, align 2, !tbaa !399
  %18494 = zext i32 %.pre-phi3516 to i64
  %18495 = mul nsw i64 %18494, %116
  %18496 = add nsw i64 %18495, %94
  %18497 = getelementptr inbounds i16, i16* %blur_x, i64 %18496
  %18498 = getelementptr inbounds i16, i16* %18497, i64 -32
  %18499 = bitcast i16* %18498 to <16 x i16>*
  %18500 = load <16 x i16>, <16 x i16>* %18499, align 2, !tbaa !399
  %18501 = getelementptr inbounds i16, i16* %18497, i64 -16
  %18502 = bitcast i16* %18501 to <16 x i16>*
  %18503 = load <16 x i16>, <16 x i16>* %18502, align 2, !tbaa !399
  %18504 = add <16 x i16> %18451, %18441
  %18505 = add <16 x i16> %18504, %18461
  %18506 = add <16 x i16> %18505, %18471
  %18507 = add <16 x i16> %18506, %18481
  %18508 = add <16 x i16> %18507, %18490
  %18509 = add <16 x i16> %18508, %18500
  %18510 = add <16 x i16> %18454, %18444
  %18511 = add <16 x i16> %18510, %18464
  %18512 = add <16 x i16> %18511, %18474
  %18513 = add <16 x i16> %18512, %18484
  %18514 = add <16 x i16> %18513, %18493
  %18515 = add <16 x i16> %18514, %18503
  %18516 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18509, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18517 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18515, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18518 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18516, <16 x i16> %18509)
  %18519 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18517, <16 x i16> %18515)
  %18520 = shufflevector <16 x i16> %18518, <16 x i16> %18519, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18521 = lshr <32 x i16> %18520, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18522 = shufflevector <32 x i16> %18521, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18523 = sext i32 %a26 to i64
  %18524 = add nsw i64 %18523, 30
  %18525 = mul nsw i64 %18524, %117
  %18526 = add nsw i64 %119, %18525
  %18527 = getelementptr inbounds i16, i16* %66, i64 %18526
  %18528 = getelementptr inbounds i16, i16* %18527, i64 -32
  %18529 = bitcast i16* %18528 to <16 x i16>*
  store <16 x i16> %18522, <16 x i16>* %18529, align 2, !tbaa !401
  %18530 = shufflevector <32 x i16> %18521, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18531 = getelementptr inbounds i16, i16* %18527, i64 -16
  %18532 = bitcast i16* %18531 to <16 x i16>*
  store <16 x i16> %18530, <16 x i16>* %18532, align 2, !tbaa !401
  br label %after_bb789

"for blur_y.s0.x.x.rebased794":                   ; preds = %"for blur_y.s0.x.x.rebased794.preheader", %"consume blur_x801"
  %indvars.iv3369 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased794.preheader" ], [ %indvars.iv.next3370, %"consume blur_x801" ]
  %18533 = add nsw i64 %indvars.iv3369, %101
  %18534 = icmp slt i64 %18533, 1
  %18535 = trunc i64 %18533 to i32
  %18536 = shl nsw i32 %18535, 5
  %18537 = icmp sgt i32 %4, %18536
  %18538 = or i1 %18534, %18537
  br i1 %18538, label %"produce blur_x800", label %"for blur_y.s0.x.x.rebased794.consume blur_x801_crit_edge"

"for blur_y.s0.x.x.rebased794.consume blur_x801_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased794"
  %.pre3593 = shl nsw i64 %18533, 5
  br label %"consume blur_x801"

"end for blur_y.s0.x.x.rebased795":               ; preds = %"consume blur_x801", %after_bb789
  br i1 %102, label %"for blur_y.s0.x.x.rebased802.preheader", label %"end for blur_y.s0.x.x.rebased803", !prof !386

"for blur_y.s0.x.x.rebased802.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased795"
  %18539 = sext i32 %t1750 to i64
  %18540 = zext i32 %.pre-phi3534 to i64
  %18541 = mul nsw i64 %18540, %116
  %18542 = sub nsw i64 %18541, %96
  %18543 = zext i32 %.pre-phi3528 to i64
  %18544 = mul nsw i64 %18543, %116
  %18545 = sub nsw i64 %18544, %96
  %18546 = zext i32 %.pre-phi to i64
  %18547 = mul nsw i64 %18546, %116
  %18548 = sub nsw i64 %18547, %96
  %18549 = zext i32 %.pre-phi3508 to i64
  %18550 = mul nsw i64 %18549, %116
  %18551 = sub nsw i64 %18550, %96
  %18552 = zext i32 %.pre-phi3512 to i64
  %18553 = mul nsw i64 %18552, %116
  %18554 = sub nsw i64 %18553, %96
  %18555 = zext i32 %.pre-phi3520 to i64
  %18556 = mul nsw i64 %18555, %116
  %18557 = sub nsw i64 %18556, %96
  %18558 = zext i32 %.pre-phi3516 to i64
  %18559 = mul nsw i64 %18558, %116
  %18560 = sub nsw i64 %18559, %96
  %18561 = sext i32 %a26 to i64
  %18562 = add nsw i64 %18561, 30
  %18563 = mul nsw i64 %18562, %117
  %18564 = add nsw i64 %18563, %120
  br label %"for blur_y.s0.x.x.rebased802"

"produce blur_x800":                              ; preds = %"for blur_y.s0.x.x.rebased794"
  %t1232 = add nsw i32 %18536, %t2241
  %18565 = sext i32 %t1232 to i64
  %18566 = getelementptr inbounds i16, i16* %read_input, i64 %18565
  %18567 = getelementptr inbounds i16, i16* %18566, i64 1
  %18568 = bitcast i16* %18567 to <16 x i16>*
  %18569 = load <16 x i16>, <16 x i16>* %18568, align 2, !tbaa !396
  %18570 = getelementptr inbounds i16, i16* %18566, i64 17
  %18571 = bitcast i16* %18570 to <16 x i16>*
  %18572 = load <16 x i16>, <16 x i16>* %18571, align 2, !tbaa !396
  %18573 = bitcast i16* %18566 to <16 x i16>*
  %18574 = load <16 x i16>, <16 x i16>* %18573, align 2, !tbaa !396
  %18575 = getelementptr inbounds i16, i16* %18566, i64 16
  %18576 = bitcast i16* %18575 to <16 x i16>*
  %18577 = load <16 x i16>, <16 x i16>* %18576, align 2, !tbaa !396
  %18578 = getelementptr inbounds i16, i16* %18566, i64 2
  %18579 = bitcast i16* %18578 to <16 x i16>*
  %18580 = load <16 x i16>, <16 x i16>* %18579, align 2, !tbaa !396
  %18581 = getelementptr inbounds i16, i16* %18566, i64 18
  %18582 = bitcast i16* %18581 to <16 x i16>*
  %18583 = load <16 x i16>, <16 x i16>* %18582, align 2, !tbaa !396
  %18584 = getelementptr inbounds i16, i16* %18566, i64 3
  %18585 = bitcast i16* %18584 to <16 x i16>*
  %18586 = load <16 x i16>, <16 x i16>* %18585, align 2, !tbaa !396
  %18587 = getelementptr inbounds i16, i16* %18566, i64 19
  %18588 = bitcast i16* %18587 to <16 x i16>*
  %18589 = load <16 x i16>, <16 x i16>* %18588, align 2, !tbaa !396
  %18590 = getelementptr inbounds i16, i16* %18566, i64 4
  %18591 = bitcast i16* %18590 to <16 x i16>*
  %18592 = load <16 x i16>, <16 x i16>* %18591, align 2, !tbaa !396
  %18593 = getelementptr inbounds i16, i16* %18566, i64 20
  %18594 = bitcast i16* %18593 to <16 x i16>*
  %18595 = load <16 x i16>, <16 x i16>* %18594, align 2, !tbaa !396
  %18596 = getelementptr inbounds i16, i16* %18566, i64 6
  %18597 = bitcast i16* %18596 to <16 x i16>*
  %18598 = load <16 x i16>, <16 x i16>* %18597, align 2, !tbaa !396
  %18599 = getelementptr inbounds i16, i16* %18566, i64 22
  %18600 = bitcast i16* %18599 to <16 x i16>*
  %18601 = load <16 x i16>, <16 x i16>* %18600, align 2, !tbaa !396
  %18602 = getelementptr inbounds i16, i16* %18566, i64 5
  %18603 = bitcast i16* %18602 to <16 x i16>*
  %18604 = load <16 x i16>, <16 x i16>* %18603, align 2, !tbaa !396
  %18605 = getelementptr inbounds i16, i16* %18566, i64 21
  %18606 = bitcast i16* %18605 to <16 x i16>*
  %18607 = load <16 x i16>, <16 x i16>* %18606, align 2, !tbaa !396
  %18608 = add <16 x i16> %18574, %18569
  %18609 = add <16 x i16> %18608, %18580
  %18610 = add <16 x i16> %18609, %18586
  %18611 = add <16 x i16> %18610, %18592
  %18612 = add <16 x i16> %18611, %18598
  %18613 = add <16 x i16> %18612, %18604
  %18614 = add <16 x i16> %18577, %18572
  %18615 = add <16 x i16> %18614, %18583
  %18616 = add <16 x i16> %18615, %18589
  %18617 = add <16 x i16> %18616, %18595
  %18618 = add <16 x i16> %18617, %18601
  %18619 = add <16 x i16> %18618, %18607
  %18620 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18613, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18621 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18619, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18622 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18620, <16 x i16> %18613)
  %18623 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18621, <16 x i16> %18619)
  %18624 = shufflevector <16 x i16> %18622, <16 x i16> %18623, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18625 = lshr <32 x i16> %18624, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18626 = shufflevector <32 x i16> %18625, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18627 = shl nsw i64 %18533, 5
  %18628 = add nsw i64 %18627, %18338
  %18629 = getelementptr inbounds i16, i16* %blur_x, i64 %18628
  %18630 = bitcast i16* %18629 to <16 x i16>*
  store <16 x i16> %18626, <16 x i16>* %18630, align 2, !tbaa !399
  %18631 = shufflevector <32 x i16> %18625, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18632 = getelementptr inbounds i16, i16* %18629, i64 16
  %18633 = bitcast i16* %18632 to <16 x i16>*
  store <16 x i16> %18631, <16 x i16>* %18633, align 2, !tbaa !399
  br label %"consume blur_x801"

"consume blur_x801":                              ; preds = %"for blur_y.s0.x.x.rebased794.consume blur_x801_crit_edge", %"produce blur_x800"
  %.pre-phi3594 = phi i64 [ %.pre3593, %"for blur_y.s0.x.x.rebased794.consume blur_x801_crit_edge" ], [ %18627, %"produce blur_x800" ]
  %18634 = add nsw i64 %18341, %.pre-phi3594
  %18635 = getelementptr inbounds i16, i16* %blur_x, i64 %18634
  %18636 = bitcast i16* %18635 to <16 x i16>*
  %18637 = load <16 x i16>, <16 x i16>* %18636, align 2, !tbaa !399
  %18638 = getelementptr inbounds i16, i16* %18635, i64 16
  %18639 = bitcast i16* %18638 to <16 x i16>*
  %18640 = load <16 x i16>, <16 x i16>* %18639, align 2, !tbaa !399
  %18641 = add nsw i64 %18344, %.pre-phi3594
  %18642 = getelementptr inbounds i16, i16* %blur_x, i64 %18641
  %18643 = bitcast i16* %18642 to <16 x i16>*
  %18644 = load <16 x i16>, <16 x i16>* %18643, align 2, !tbaa !399
  %18645 = getelementptr inbounds i16, i16* %18642, i64 16
  %18646 = bitcast i16* %18645 to <16 x i16>*
  %18647 = load <16 x i16>, <16 x i16>* %18646, align 2, !tbaa !399
  %18648 = add nsw i64 %18347, %.pre-phi3594
  %18649 = getelementptr inbounds i16, i16* %blur_x, i64 %18648
  %18650 = bitcast i16* %18649 to <16 x i16>*
  %18651 = load <16 x i16>, <16 x i16>* %18650, align 2, !tbaa !399
  %18652 = getelementptr inbounds i16, i16* %18649, i64 16
  %18653 = bitcast i16* %18652 to <16 x i16>*
  %18654 = load <16 x i16>, <16 x i16>* %18653, align 2, !tbaa !399
  %18655 = add nsw i64 %18350, %.pre-phi3594
  %18656 = getelementptr inbounds i16, i16* %blur_x, i64 %18655
  %18657 = bitcast i16* %18656 to <16 x i16>*
  %18658 = load <16 x i16>, <16 x i16>* %18657, align 2, !tbaa !399
  %18659 = getelementptr inbounds i16, i16* %18656, i64 16
  %18660 = bitcast i16* %18659 to <16 x i16>*
  %18661 = load <16 x i16>, <16 x i16>* %18660, align 2, !tbaa !399
  %18662 = add nsw i64 %18353, %.pre-phi3594
  %18663 = getelementptr inbounds i16, i16* %blur_x, i64 %18662
  %18664 = bitcast i16* %18663 to <16 x i16>*
  %18665 = load <16 x i16>, <16 x i16>* %18664, align 2, !tbaa !399
  %18666 = getelementptr inbounds i16, i16* %18663, i64 16
  %18667 = bitcast i16* %18666 to <16 x i16>*
  %18668 = load <16 x i16>, <16 x i16>* %18667, align 2, !tbaa !399
  %18669 = add nsw i64 %18356, %.pre-phi3594
  %18670 = getelementptr inbounds i16, i16* %blur_x, i64 %18669
  %18671 = bitcast i16* %18670 to <16 x i16>*
  %18672 = load <16 x i16>, <16 x i16>* %18671, align 2, !tbaa !399
  %18673 = getelementptr inbounds i16, i16* %18670, i64 16
  %18674 = bitcast i16* %18673 to <16 x i16>*
  %18675 = load <16 x i16>, <16 x i16>* %18674, align 2, !tbaa !399
  %18676 = add nsw i64 %18359, %.pre-phi3594
  %18677 = getelementptr inbounds i16, i16* %blur_x, i64 %18676
  %18678 = bitcast i16* %18677 to <16 x i16>*
  %18679 = load <16 x i16>, <16 x i16>* %18678, align 2, !tbaa !399
  %18680 = getelementptr inbounds i16, i16* %18677, i64 16
  %18681 = bitcast i16* %18680 to <16 x i16>*
  %18682 = load <16 x i16>, <16 x i16>* %18681, align 2, !tbaa !399
  %18683 = add <16 x i16> %18644, %18637
  %18684 = add <16 x i16> %18683, %18651
  %18685 = add <16 x i16> %18684, %18658
  %18686 = add <16 x i16> %18685, %18665
  %18687 = add <16 x i16> %18686, %18672
  %18688 = add <16 x i16> %18687, %18679
  %18689 = add <16 x i16> %18647, %18640
  %18690 = add <16 x i16> %18689, %18654
  %18691 = add <16 x i16> %18690, %18661
  %18692 = add <16 x i16> %18691, %18668
  %18693 = add <16 x i16> %18692, %18675
  %18694 = add <16 x i16> %18693, %18682
  %18695 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18688, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18696 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18694, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18697 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18695, <16 x i16> %18688)
  %18698 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18696, <16 x i16> %18694)
  %18699 = shufflevector <16 x i16> %18697, <16 x i16> %18698, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18700 = lshr <32 x i16> %18699, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18701 = shufflevector <32 x i16> %18700, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18702 = add nsw i64 %18363, %.pre-phi3594
  %18703 = getelementptr inbounds i16, i16* %66, i64 %18702
  %18704 = bitcast i16* %18703 to <16 x i16>*
  store <16 x i16> %18701, <16 x i16>* %18704, align 2, !tbaa !401
  %18705 = shufflevector <32 x i16> %18700, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18706 = getelementptr inbounds i16, i16* %18703, i64 16
  %18707 = bitcast i16* %18706 to <16 x i16>*
  store <16 x i16> %18705, <16 x i16>* %18707, align 2, !tbaa !401
  %indvars.iv.next3370 = add nuw nsw i64 %indvars.iv3369, 1
  %.not2740 = icmp eq i64 %indvars.iv.next3370, %188
  br i1 %.not2740, label %"end for blur_y.s0.x.x.rebased795", label %"for blur_y.s0.x.x.rebased794"

"for blur_y.s0.x.x.rebased802":                   ; preds = %"for blur_y.s0.x.x.rebased802.preheader", %"consume blur_x810"
  %blur_y.s0.x.x.rebased804 = phi i32 [ %18858, %"consume blur_x810" ], [ 0, %"for blur_y.s0.x.x.rebased802.preheader" ]
  %18708 = add nsw i32 %blur_y.s0.x.x.rebased804, %t1670
  %a329 = shl nsw i32 %18708, 5
  %18709 = icmp sgt i32 %a14, %a329
  %b335 = select i1 %18709, i32 %a329, i32 %a14
  %18710 = icmp slt i32 %18708, 1
  %18711 = icmp sgt i32 %4, %a329
  %18712 = or i1 %18710, %18711
  br i1 %18712, label %"produce blur_x808", label %"consume blur_x810"

"end for blur_y.s0.x.x.rebased803":               ; preds = %"consume blur_x810", %"end for blur_y.s0.x.x.rebased795"
  br i1 %34, label %"produce blur_x814", label %after_bb811

"produce blur_x808":                              ; preds = %"for blur_y.s0.x.x.rebased802"
  %18713 = icmp slt i32 %b335, %4
  %blur_x.s0.x.v1.base.s809 = select i1 %18713, i32 %b335, i32 %4
  %t1237 = add nsw i32 %blur_x.s0.x.v1.base.s809, %t2241
  %18714 = sext i32 %t1237 to i64
  %18715 = getelementptr inbounds i16, i16* %read_input, i64 %18714
  %18716 = getelementptr inbounds i16, i16* %18715, i64 1
  %18717 = bitcast i16* %18716 to <16 x i16>*
  %18718 = load <16 x i16>, <16 x i16>* %18717, align 2, !tbaa !396
  %18719 = getelementptr inbounds i16, i16* %18715, i64 17
  %18720 = bitcast i16* %18719 to <16 x i16>*
  %18721 = load <16 x i16>, <16 x i16>* %18720, align 2, !tbaa !396
  %18722 = bitcast i16* %18715 to <16 x i16>*
  %18723 = load <16 x i16>, <16 x i16>* %18722, align 2, !tbaa !396
  %18724 = getelementptr inbounds i16, i16* %18715, i64 16
  %18725 = bitcast i16* %18724 to <16 x i16>*
  %18726 = load <16 x i16>, <16 x i16>* %18725, align 2, !tbaa !396
  %18727 = getelementptr inbounds i16, i16* %18715, i64 2
  %18728 = bitcast i16* %18727 to <16 x i16>*
  %18729 = load <16 x i16>, <16 x i16>* %18728, align 2, !tbaa !396
  %18730 = getelementptr inbounds i16, i16* %18715, i64 18
  %18731 = bitcast i16* %18730 to <16 x i16>*
  %18732 = load <16 x i16>, <16 x i16>* %18731, align 2, !tbaa !396
  %18733 = getelementptr inbounds i16, i16* %18715, i64 3
  %18734 = bitcast i16* %18733 to <16 x i16>*
  %18735 = load <16 x i16>, <16 x i16>* %18734, align 2, !tbaa !396
  %18736 = getelementptr inbounds i16, i16* %18715, i64 19
  %18737 = bitcast i16* %18736 to <16 x i16>*
  %18738 = load <16 x i16>, <16 x i16>* %18737, align 2, !tbaa !396
  %18739 = getelementptr inbounds i16, i16* %18715, i64 4
  %18740 = bitcast i16* %18739 to <16 x i16>*
  %18741 = load <16 x i16>, <16 x i16>* %18740, align 2, !tbaa !396
  %18742 = getelementptr inbounds i16, i16* %18715, i64 20
  %18743 = bitcast i16* %18742 to <16 x i16>*
  %18744 = load <16 x i16>, <16 x i16>* %18743, align 2, !tbaa !396
  %18745 = getelementptr inbounds i16, i16* %18715, i64 6
  %18746 = bitcast i16* %18745 to <16 x i16>*
  %18747 = load <16 x i16>, <16 x i16>* %18746, align 2, !tbaa !396
  %18748 = getelementptr inbounds i16, i16* %18715, i64 22
  %18749 = bitcast i16* %18748 to <16 x i16>*
  %18750 = load <16 x i16>, <16 x i16>* %18749, align 2, !tbaa !396
  %18751 = getelementptr inbounds i16, i16* %18715, i64 5
  %18752 = bitcast i16* %18751 to <16 x i16>*
  %18753 = load <16 x i16>, <16 x i16>* %18752, align 2, !tbaa !396
  %18754 = getelementptr inbounds i16, i16* %18715, i64 21
  %18755 = bitcast i16* %18754 to <16 x i16>*
  %18756 = load <16 x i16>, <16 x i16>* %18755, align 2, !tbaa !396
  %18757 = add <16 x i16> %18723, %18718
  %18758 = add <16 x i16> %18757, %18729
  %18759 = add <16 x i16> %18758, %18735
  %18760 = add <16 x i16> %18759, %18741
  %18761 = add <16 x i16> %18760, %18747
  %18762 = add <16 x i16> %18761, %18753
  %18763 = add <16 x i16> %18726, %18721
  %18764 = add <16 x i16> %18763, %18732
  %18765 = add <16 x i16> %18764, %18738
  %18766 = add <16 x i16> %18765, %18744
  %18767 = add <16 x i16> %18766, %18750
  %18768 = add <16 x i16> %18767, %18756
  %18769 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18762, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18770 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18768, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18771 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18769, <16 x i16> %18762)
  %18772 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18770, <16 x i16> %18768)
  %18773 = shufflevector <16 x i16> %18771, <16 x i16> %18772, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18774 = lshr <32 x i16> %18773, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18775 = shufflevector <32 x i16> %18774, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18776 = sext i32 %blur_x.s0.x.v1.base.s809 to i64
  %18777 = add nsw i64 %18776, %18539
  %18778 = getelementptr inbounds i16, i16* %blur_x, i64 %18777
  %18779 = bitcast i16* %18778 to <16 x i16>*
  store <16 x i16> %18775, <16 x i16>* %18779, align 2, !tbaa !399
  %18780 = shufflevector <32 x i16> %18774, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18781 = getelementptr inbounds i16, i16* %18778, i64 16
  %18782 = bitcast i16* %18781 to <16 x i16>*
  store <16 x i16> %18780, <16 x i16>* %18782, align 2, !tbaa !399
  br label %"consume blur_x810"

"consume blur_x810":                              ; preds = %"for blur_y.s0.x.x.rebased802", %"produce blur_x808"
  %18783 = sext i32 %b335 to i64
  %18784 = add nsw i64 %18542, %18783
  %18785 = getelementptr inbounds i16, i16* %blur_x, i64 %18784
  %18786 = bitcast i16* %18785 to <16 x i16>*
  %18787 = load <16 x i16>, <16 x i16>* %18786, align 2, !tbaa !399
  %18788 = getelementptr inbounds i16, i16* %18785, i64 16
  %18789 = bitcast i16* %18788 to <16 x i16>*
  %18790 = load <16 x i16>, <16 x i16>* %18789, align 2, !tbaa !399
  %18791 = add nsw i64 %18545, %18783
  %18792 = getelementptr inbounds i16, i16* %blur_x, i64 %18791
  %18793 = bitcast i16* %18792 to <16 x i16>*
  %18794 = load <16 x i16>, <16 x i16>* %18793, align 2, !tbaa !399
  %18795 = getelementptr inbounds i16, i16* %18792, i64 16
  %18796 = bitcast i16* %18795 to <16 x i16>*
  %18797 = load <16 x i16>, <16 x i16>* %18796, align 2, !tbaa !399
  %18798 = add nsw i64 %18548, %18783
  %18799 = getelementptr inbounds i16, i16* %blur_x, i64 %18798
  %18800 = bitcast i16* %18799 to <16 x i16>*
  %18801 = load <16 x i16>, <16 x i16>* %18800, align 2, !tbaa !399
  %18802 = getelementptr inbounds i16, i16* %18799, i64 16
  %18803 = bitcast i16* %18802 to <16 x i16>*
  %18804 = load <16 x i16>, <16 x i16>* %18803, align 2, !tbaa !399
  %18805 = add nsw i64 %18551, %18783
  %18806 = getelementptr inbounds i16, i16* %blur_x, i64 %18805
  %18807 = bitcast i16* %18806 to <16 x i16>*
  %18808 = load <16 x i16>, <16 x i16>* %18807, align 2, !tbaa !399
  %18809 = getelementptr inbounds i16, i16* %18806, i64 16
  %18810 = bitcast i16* %18809 to <16 x i16>*
  %18811 = load <16 x i16>, <16 x i16>* %18810, align 2, !tbaa !399
  %18812 = add nsw i64 %18554, %18783
  %18813 = getelementptr inbounds i16, i16* %blur_x, i64 %18812
  %18814 = bitcast i16* %18813 to <16 x i16>*
  %18815 = load <16 x i16>, <16 x i16>* %18814, align 2, !tbaa !399
  %18816 = getelementptr inbounds i16, i16* %18813, i64 16
  %18817 = bitcast i16* %18816 to <16 x i16>*
  %18818 = load <16 x i16>, <16 x i16>* %18817, align 2, !tbaa !399
  %18819 = add nsw i64 %18557, %18783
  %18820 = getelementptr inbounds i16, i16* %blur_x, i64 %18819
  %18821 = bitcast i16* %18820 to <16 x i16>*
  %18822 = load <16 x i16>, <16 x i16>* %18821, align 2, !tbaa !399
  %18823 = getelementptr inbounds i16, i16* %18820, i64 16
  %18824 = bitcast i16* %18823 to <16 x i16>*
  %18825 = load <16 x i16>, <16 x i16>* %18824, align 2, !tbaa !399
  %18826 = add nsw i64 %18560, %18783
  %18827 = getelementptr inbounds i16, i16* %blur_x, i64 %18826
  %18828 = bitcast i16* %18827 to <16 x i16>*
  %18829 = load <16 x i16>, <16 x i16>* %18828, align 2, !tbaa !399
  %18830 = getelementptr inbounds i16, i16* %18827, i64 16
  %18831 = bitcast i16* %18830 to <16 x i16>*
  %18832 = load <16 x i16>, <16 x i16>* %18831, align 2, !tbaa !399
  %18833 = add <16 x i16> %18794, %18787
  %18834 = add <16 x i16> %18833, %18801
  %18835 = add <16 x i16> %18834, %18808
  %18836 = add <16 x i16> %18835, %18815
  %18837 = add <16 x i16> %18836, %18822
  %18838 = add <16 x i16> %18837, %18829
  %18839 = add <16 x i16> %18797, %18790
  %18840 = add <16 x i16> %18839, %18804
  %18841 = add <16 x i16> %18840, %18811
  %18842 = add <16 x i16> %18841, %18818
  %18843 = add <16 x i16> %18842, %18825
  %18844 = add <16 x i16> %18843, %18832
  %18845 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18838, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18846 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18844, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18847 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18845, <16 x i16> %18838)
  %18848 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18846, <16 x i16> %18844)
  %18849 = shufflevector <16 x i16> %18847, <16 x i16> %18848, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18850 = lshr <32 x i16> %18849, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18851 = shufflevector <32 x i16> %18850, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18852 = add nsw i64 %18564, %18783
  %18853 = getelementptr inbounds i16, i16* %66, i64 %18852
  %18854 = bitcast i16* %18853 to <16 x i16>*
  store <16 x i16> %18851, <16 x i16>* %18854, align 2, !tbaa !401
  %18855 = shufflevector <32 x i16> %18850, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18856 = getelementptr inbounds i16, i16* %18853, i64 16
  %18857 = bitcast i16* %18856 to <16 x i16>*
  store <16 x i16> %18855, <16 x i16>* %18857, align 2, !tbaa !401
  %18858 = add nuw nsw i32 %blur_y.s0.x.x.rebased804, 1
  %.not2739 = icmp eq i32 %18858, %t1727
  br i1 %.not2739, label %"end for blur_y.s0.x.x.rebased803", label %"for blur_y.s0.x.x.rebased802"

after_bb811:                                      ; preds = %"end for blur_y.s0.x.x.rebased803", %"produce blur_x814"
  br i1 %100, label %"for blur_y.s0.x.x.rebased816.preheader", label %"end for blur_y.s0.x.x.rebased817", !prof !386

"for blur_y.s0.x.x.rebased816.preheader":         ; preds = %after_bb811
  %18859 = sext i32 %t1756 to i64
  %18860 = zext i32 %.pre-phi to i64
  %18861 = mul nsw i64 %18860, %116
  %18862 = sub nsw i64 %18861, %96
  %18863 = zext i32 %.pre-phi3534 to i64
  %18864 = mul nsw i64 %18863, %116
  %18865 = sub nsw i64 %18864, %96
  %18866 = zext i32 %.pre-phi3508 to i64
  %18867 = mul nsw i64 %18866, %116
  %18868 = sub nsw i64 %18867, %96
  %18869 = zext i32 %.pre-phi3512 to i64
  %18870 = mul nsw i64 %18869, %116
  %18871 = sub nsw i64 %18870, %96
  %18872 = zext i32 %.pre-phi3516 to i64
  %18873 = mul nsw i64 %18872, %116
  %18874 = sub nsw i64 %18873, %96
  %18875 = zext i32 %.pre-phi3524 to i64
  %18876 = mul nsw i64 %18875, %116
  %18877 = sub nsw i64 %18876, %96
  %18878 = zext i32 %.pre-phi3520 to i64
  %18879 = mul nsw i64 %18878, %116
  %18880 = sub nsw i64 %18879, %96
  %18881 = sext i32 %a26 to i64
  %18882 = add nsw i64 %18881, 31
  %18883 = mul nsw i64 %18882, %117
  %18884 = add nsw i64 %18883, %120
  br label %"for blur_y.s0.x.x.rebased816"

"produce blur_x814":                              ; preds = %"end for blur_y.s0.x.x.rebased803"
  %18885 = getelementptr inbounds i16, i16* %read_input, i64 %181
  %18886 = getelementptr inbounds i16, i16* %18885, i64 -31
  %18887 = bitcast i16* %18886 to <16 x i16>*
  %18888 = load <16 x i16>, <16 x i16>* %18887, align 2, !tbaa !396
  %18889 = getelementptr inbounds i16, i16* %18885, i64 -15
  %18890 = bitcast i16* %18889 to <16 x i16>*
  %18891 = load <16 x i16>, <16 x i16>* %18890, align 2, !tbaa !396
  %18892 = getelementptr inbounds i16, i16* %18885, i64 -32
  %18893 = bitcast i16* %18892 to <16 x i16>*
  %18894 = load <16 x i16>, <16 x i16>* %18893, align 2, !tbaa !396
  %18895 = getelementptr inbounds i16, i16* %18885, i64 -16
  %18896 = bitcast i16* %18895 to <16 x i16>*
  %18897 = load <16 x i16>, <16 x i16>* %18896, align 2, !tbaa !396
  %18898 = getelementptr inbounds i16, i16* %18885, i64 -30
  %18899 = bitcast i16* %18898 to <16 x i16>*
  %18900 = load <16 x i16>, <16 x i16>* %18899, align 2, !tbaa !396
  %18901 = getelementptr inbounds i16, i16* %18885, i64 -14
  %18902 = bitcast i16* %18901 to <16 x i16>*
  %18903 = load <16 x i16>, <16 x i16>* %18902, align 2, !tbaa !396
  %18904 = getelementptr inbounds i16, i16* %18885, i64 -29
  %18905 = bitcast i16* %18904 to <16 x i16>*
  %18906 = load <16 x i16>, <16 x i16>* %18905, align 2, !tbaa !396
  %18907 = getelementptr inbounds i16, i16* %18885, i64 -13
  %18908 = bitcast i16* %18907 to <16 x i16>*
  %18909 = load <16 x i16>, <16 x i16>* %18908, align 2, !tbaa !396
  %18910 = getelementptr inbounds i16, i16* %18885, i64 -28
  %18911 = bitcast i16* %18910 to <16 x i16>*
  %18912 = load <16 x i16>, <16 x i16>* %18911, align 2, !tbaa !396
  %18913 = getelementptr inbounds i16, i16* %18885, i64 -12
  %18914 = bitcast i16* %18913 to <16 x i16>*
  %18915 = load <16 x i16>, <16 x i16>* %18914, align 2, !tbaa !396
  %18916 = getelementptr inbounds i16, i16* %18885, i64 -26
  %18917 = bitcast i16* %18916 to <16 x i16>*
  %18918 = load <16 x i16>, <16 x i16>* %18917, align 2, !tbaa !396
  %18919 = getelementptr inbounds i16, i16* %18885, i64 -10
  %18920 = bitcast i16* %18919 to <16 x i16>*
  %18921 = load <16 x i16>, <16 x i16>* %18920, align 2, !tbaa !396
  %18922 = getelementptr inbounds i16, i16* %18885, i64 -27
  %18923 = bitcast i16* %18922 to <16 x i16>*
  %18924 = load <16 x i16>, <16 x i16>* %18923, align 2, !tbaa !396
  %18925 = getelementptr inbounds i16, i16* %18885, i64 -11
  %18926 = bitcast i16* %18925 to <16 x i16>*
  %18927 = load <16 x i16>, <16 x i16>* %18926, align 2, !tbaa !396
  %18928 = add <16 x i16> %18894, %18888
  %18929 = add <16 x i16> %18928, %18900
  %18930 = add <16 x i16> %18929, %18906
  %18931 = add <16 x i16> %18930, %18912
  %18932 = add <16 x i16> %18931, %18918
  %18933 = add <16 x i16> %18932, %18924
  %18934 = add <16 x i16> %18897, %18891
  %18935 = add <16 x i16> %18934, %18903
  %18936 = add <16 x i16> %18935, %18909
  %18937 = add <16 x i16> %18936, %18915
  %18938 = add <16 x i16> %18937, %18921
  %18939 = add <16 x i16> %18938, %18927
  %18940 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18933, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18941 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18939, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %18942 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18940, <16 x i16> %18933)
  %18943 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %18941, <16 x i16> %18939)
  %18944 = shufflevector <16 x i16> %18942, <16 x i16> %18943, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18945 = lshr <32 x i16> %18944, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18946 = shufflevector <32 x i16> %18945, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18947 = zext i32 %.pre-phi3524 to i64
  %18948 = mul nsw i64 %97, %18947
  %18949 = add nsw i64 %99, %18948
  %18950 = getelementptr inbounds i16, i16* %blur_x, i64 %18949
  %18951 = getelementptr inbounds i16, i16* %18950, i64 -32
  %18952 = bitcast i16* %18951 to <16 x i16>*
  store <16 x i16> %18946, <16 x i16>* %18952, align 2, !tbaa !399
  %18953 = shufflevector <32 x i16> %18945, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18954 = getelementptr inbounds i16, i16* %18950, i64 -16
  %18955 = bitcast i16* %18954 to <16 x i16>*
  store <16 x i16> %18953, <16 x i16>* %18955, align 2, !tbaa !399
  %18956 = zext i32 %.pre-phi to i64
  %18957 = mul nsw i64 %18956, %116
  %18958 = add nsw i64 %18957, %94
  %18959 = getelementptr inbounds i16, i16* %blur_x, i64 %18958
  %18960 = getelementptr inbounds i16, i16* %18959, i64 -32
  %18961 = bitcast i16* %18960 to <16 x i16>*
  %18962 = load <16 x i16>, <16 x i16>* %18961, align 2, !tbaa !399
  %18963 = getelementptr inbounds i16, i16* %18959, i64 -16
  %18964 = bitcast i16* %18963 to <16 x i16>*
  %18965 = load <16 x i16>, <16 x i16>* %18964, align 2, !tbaa !399
  %18966 = zext i32 %.pre-phi3534 to i64
  %18967 = mul nsw i64 %18966, %116
  %18968 = add nsw i64 %18967, %94
  %18969 = getelementptr inbounds i16, i16* %blur_x, i64 %18968
  %18970 = getelementptr inbounds i16, i16* %18969, i64 -32
  %18971 = bitcast i16* %18970 to <16 x i16>*
  %18972 = load <16 x i16>, <16 x i16>* %18971, align 2, !tbaa !399
  %18973 = getelementptr inbounds i16, i16* %18969, i64 -16
  %18974 = bitcast i16* %18973 to <16 x i16>*
  %18975 = load <16 x i16>, <16 x i16>* %18974, align 2, !tbaa !399
  %18976 = zext i32 %.pre-phi3508 to i64
  %18977 = mul nsw i64 %18976, %116
  %18978 = add nsw i64 %18977, %94
  %18979 = getelementptr inbounds i16, i16* %blur_x, i64 %18978
  %18980 = getelementptr inbounds i16, i16* %18979, i64 -32
  %18981 = bitcast i16* %18980 to <16 x i16>*
  %18982 = load <16 x i16>, <16 x i16>* %18981, align 2, !tbaa !399
  %18983 = getelementptr inbounds i16, i16* %18979, i64 -16
  %18984 = bitcast i16* %18983 to <16 x i16>*
  %18985 = load <16 x i16>, <16 x i16>* %18984, align 2, !tbaa !399
  %18986 = zext i32 %.pre-phi3512 to i64
  %18987 = mul nsw i64 %18986, %116
  %18988 = add nsw i64 %18987, %94
  %18989 = getelementptr inbounds i16, i16* %blur_x, i64 %18988
  %18990 = getelementptr inbounds i16, i16* %18989, i64 -32
  %18991 = bitcast i16* %18990 to <16 x i16>*
  %18992 = load <16 x i16>, <16 x i16>* %18991, align 2, !tbaa !399
  %18993 = getelementptr inbounds i16, i16* %18989, i64 -16
  %18994 = bitcast i16* %18993 to <16 x i16>*
  %18995 = load <16 x i16>, <16 x i16>* %18994, align 2, !tbaa !399
  %18996 = zext i32 %.pre-phi3516 to i64
  %18997 = mul nsw i64 %18996, %116
  %18998 = add nsw i64 %18997, %94
  %18999 = getelementptr inbounds i16, i16* %blur_x, i64 %18998
  %19000 = getelementptr inbounds i16, i16* %18999, i64 -32
  %19001 = bitcast i16* %19000 to <16 x i16>*
  %19002 = load <16 x i16>, <16 x i16>* %19001, align 2, !tbaa !399
  %19003 = getelementptr inbounds i16, i16* %18999, i64 -16
  %19004 = bitcast i16* %19003 to <16 x i16>*
  %19005 = load <16 x i16>, <16 x i16>* %19004, align 2, !tbaa !399
  %19006 = mul nsw i64 %18947, %116
  %19007 = add nsw i64 %19006, %94
  %19008 = getelementptr inbounds i16, i16* %blur_x, i64 %19007
  %19009 = getelementptr inbounds i16, i16* %19008, i64 -32
  %19010 = bitcast i16* %19009 to <16 x i16>*
  %19011 = load <16 x i16>, <16 x i16>* %19010, align 2, !tbaa !399
  %19012 = getelementptr inbounds i16, i16* %19008, i64 -16
  %19013 = bitcast i16* %19012 to <16 x i16>*
  %19014 = load <16 x i16>, <16 x i16>* %19013, align 2, !tbaa !399
  %19015 = zext i32 %.pre-phi3520 to i64
  %19016 = mul nsw i64 %19015, %116
  %19017 = add nsw i64 %19016, %94
  %19018 = getelementptr inbounds i16, i16* %blur_x, i64 %19017
  %19019 = getelementptr inbounds i16, i16* %19018, i64 -32
  %19020 = bitcast i16* %19019 to <16 x i16>*
  %19021 = load <16 x i16>, <16 x i16>* %19020, align 2, !tbaa !399
  %19022 = getelementptr inbounds i16, i16* %19018, i64 -16
  %19023 = bitcast i16* %19022 to <16 x i16>*
  %19024 = load <16 x i16>, <16 x i16>* %19023, align 2, !tbaa !399
  %19025 = add <16 x i16> %18972, %18962
  %19026 = add <16 x i16> %19025, %18982
  %19027 = add <16 x i16> %19026, %18992
  %19028 = add <16 x i16> %19027, %19002
  %19029 = add <16 x i16> %19028, %19011
  %19030 = add <16 x i16> %19029, %19021
  %19031 = add <16 x i16> %18975, %18965
  %19032 = add <16 x i16> %19031, %18985
  %19033 = add <16 x i16> %19032, %18995
  %19034 = add <16 x i16> %19033, %19005
  %19035 = add <16 x i16> %19034, %19014
  %19036 = add <16 x i16> %19035, %19024
  %19037 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19030, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19038 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19036, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19039 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19037, <16 x i16> %19030)
  %19040 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19038, <16 x i16> %19036)
  %19041 = shufflevector <16 x i16> %19039, <16 x i16> %19040, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19042 = lshr <32 x i16> %19041, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19043 = shufflevector <32 x i16> %19042, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19044 = sext i32 %a26 to i64
  %19045 = add nsw i64 %19044, 31
  %19046 = mul nsw i64 %19045, %117
  %19047 = add nsw i64 %119, %19046
  %19048 = getelementptr inbounds i16, i16* %66, i64 %19047
  %19049 = getelementptr inbounds i16, i16* %19048, i64 -32
  %19050 = bitcast i16* %19049 to <16 x i16>*
  store <16 x i16> %19043, <16 x i16>* %19050, align 2, !tbaa !401
  %19051 = shufflevector <32 x i16> %19042, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19052 = getelementptr inbounds i16, i16* %19048, i64 -16
  %19053 = bitcast i16* %19052 to <16 x i16>*
  store <16 x i16> %19051, <16 x i16>* %19053, align 2, !tbaa !401
  br label %after_bb811

"for blur_y.s0.x.x.rebased816":                   ; preds = %"for blur_y.s0.x.x.rebased816.preheader", %"consume blur_x823"
  %indvars.iv3372 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased816.preheader" ], [ %indvars.iv.next3373, %"consume blur_x823" ]
  %19054 = add nsw i64 %indvars.iv3372, %101
  %19055 = icmp slt i64 %19054, 1
  %19056 = trunc i64 %19054 to i32
  %19057 = shl nsw i32 %19056, 5
  %19058 = icmp sgt i32 %4, %19057
  %19059 = or i1 %19055, %19058
  br i1 %19059, label %"produce blur_x822", label %"for blur_y.s0.x.x.rebased816.consume blur_x823_crit_edge"

"for blur_y.s0.x.x.rebased816.consume blur_x823_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased816"
  %.pre3595 = shl nsw i64 %19054, 5
  br label %"consume blur_x823"

"end for blur_y.s0.x.x.rebased817":               ; preds = %"consume blur_x823", %after_bb811
  br i1 %102, label %"for blur_y.s0.x.x.rebased824.preheader", label %"end for blur_y.s0.x.x.rebased825", !prof !386

"for blur_y.s0.x.x.rebased824.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased817"
  %19060 = sext i32 %t1756 to i64
  %19061 = zext i32 %.pre-phi to i64
  %19062 = mul nsw i64 %19061, %116
  %19063 = sub nsw i64 %19062, %96
  %19064 = zext i32 %.pre-phi3534 to i64
  %19065 = mul nsw i64 %19064, %116
  %19066 = sub nsw i64 %19065, %96
  %19067 = zext i32 %.pre-phi3508 to i64
  %19068 = mul nsw i64 %19067, %116
  %19069 = sub nsw i64 %19068, %96
  %19070 = zext i32 %.pre-phi3512 to i64
  %19071 = mul nsw i64 %19070, %116
  %19072 = sub nsw i64 %19071, %96
  %19073 = zext i32 %.pre-phi3516 to i64
  %19074 = mul nsw i64 %19073, %116
  %19075 = sub nsw i64 %19074, %96
  %19076 = zext i32 %.pre-phi3524 to i64
  %19077 = mul nsw i64 %19076, %116
  %19078 = sub nsw i64 %19077, %96
  %19079 = zext i32 %.pre-phi3520 to i64
  %19080 = mul nsw i64 %19079, %116
  %19081 = sub nsw i64 %19080, %96
  %19082 = sext i32 %a26 to i64
  %19083 = add nsw i64 %19082, 31
  %19084 = mul nsw i64 %19083, %117
  %19085 = add nsw i64 %19084, %120
  br label %"for blur_y.s0.x.x.rebased824"

"produce blur_x822":                              ; preds = %"for blur_y.s0.x.x.rebased816"
  %t1248 = add nsw i32 %19057, %t2257
  %19086 = sext i32 %t1248 to i64
  %19087 = getelementptr inbounds i16, i16* %read_input, i64 %19086
  %19088 = getelementptr inbounds i16, i16* %19087, i64 1
  %19089 = bitcast i16* %19088 to <16 x i16>*
  %19090 = load <16 x i16>, <16 x i16>* %19089, align 2, !tbaa !396
  %19091 = getelementptr inbounds i16, i16* %19087, i64 17
  %19092 = bitcast i16* %19091 to <16 x i16>*
  %19093 = load <16 x i16>, <16 x i16>* %19092, align 2, !tbaa !396
  %19094 = bitcast i16* %19087 to <16 x i16>*
  %19095 = load <16 x i16>, <16 x i16>* %19094, align 2, !tbaa !396
  %19096 = getelementptr inbounds i16, i16* %19087, i64 16
  %19097 = bitcast i16* %19096 to <16 x i16>*
  %19098 = load <16 x i16>, <16 x i16>* %19097, align 2, !tbaa !396
  %19099 = getelementptr inbounds i16, i16* %19087, i64 2
  %19100 = bitcast i16* %19099 to <16 x i16>*
  %19101 = load <16 x i16>, <16 x i16>* %19100, align 2, !tbaa !396
  %19102 = getelementptr inbounds i16, i16* %19087, i64 18
  %19103 = bitcast i16* %19102 to <16 x i16>*
  %19104 = load <16 x i16>, <16 x i16>* %19103, align 2, !tbaa !396
  %19105 = getelementptr inbounds i16, i16* %19087, i64 3
  %19106 = bitcast i16* %19105 to <16 x i16>*
  %19107 = load <16 x i16>, <16 x i16>* %19106, align 2, !tbaa !396
  %19108 = getelementptr inbounds i16, i16* %19087, i64 19
  %19109 = bitcast i16* %19108 to <16 x i16>*
  %19110 = load <16 x i16>, <16 x i16>* %19109, align 2, !tbaa !396
  %19111 = getelementptr inbounds i16, i16* %19087, i64 4
  %19112 = bitcast i16* %19111 to <16 x i16>*
  %19113 = load <16 x i16>, <16 x i16>* %19112, align 2, !tbaa !396
  %19114 = getelementptr inbounds i16, i16* %19087, i64 20
  %19115 = bitcast i16* %19114 to <16 x i16>*
  %19116 = load <16 x i16>, <16 x i16>* %19115, align 2, !tbaa !396
  %19117 = getelementptr inbounds i16, i16* %19087, i64 6
  %19118 = bitcast i16* %19117 to <16 x i16>*
  %19119 = load <16 x i16>, <16 x i16>* %19118, align 2, !tbaa !396
  %19120 = getelementptr inbounds i16, i16* %19087, i64 22
  %19121 = bitcast i16* %19120 to <16 x i16>*
  %19122 = load <16 x i16>, <16 x i16>* %19121, align 2, !tbaa !396
  %19123 = getelementptr inbounds i16, i16* %19087, i64 5
  %19124 = bitcast i16* %19123 to <16 x i16>*
  %19125 = load <16 x i16>, <16 x i16>* %19124, align 2, !tbaa !396
  %19126 = getelementptr inbounds i16, i16* %19087, i64 21
  %19127 = bitcast i16* %19126 to <16 x i16>*
  %19128 = load <16 x i16>, <16 x i16>* %19127, align 2, !tbaa !396
  %19129 = add <16 x i16> %19095, %19090
  %19130 = add <16 x i16> %19129, %19101
  %19131 = add <16 x i16> %19130, %19107
  %19132 = add <16 x i16> %19131, %19113
  %19133 = add <16 x i16> %19132, %19119
  %19134 = add <16 x i16> %19133, %19125
  %19135 = add <16 x i16> %19098, %19093
  %19136 = add <16 x i16> %19135, %19104
  %19137 = add <16 x i16> %19136, %19110
  %19138 = add <16 x i16> %19137, %19116
  %19139 = add <16 x i16> %19138, %19122
  %19140 = add <16 x i16> %19139, %19128
  %19141 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19134, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19142 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19140, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19143 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19141, <16 x i16> %19134)
  %19144 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19142, <16 x i16> %19140)
  %19145 = shufflevector <16 x i16> %19143, <16 x i16> %19144, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19146 = lshr <32 x i16> %19145, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19147 = shufflevector <32 x i16> %19146, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19148 = shl nsw i64 %19054, 5
  %19149 = add nsw i64 %19148, %18859
  %19150 = getelementptr inbounds i16, i16* %blur_x, i64 %19149
  %19151 = bitcast i16* %19150 to <16 x i16>*
  store <16 x i16> %19147, <16 x i16>* %19151, align 2, !tbaa !399
  %19152 = shufflevector <32 x i16> %19146, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19153 = getelementptr inbounds i16, i16* %19150, i64 16
  %19154 = bitcast i16* %19153 to <16 x i16>*
  store <16 x i16> %19152, <16 x i16>* %19154, align 2, !tbaa !399
  br label %"consume blur_x823"

"consume blur_x823":                              ; preds = %"for blur_y.s0.x.x.rebased816.consume blur_x823_crit_edge", %"produce blur_x822"
  %.pre-phi3596 = phi i64 [ %.pre3595, %"for blur_y.s0.x.x.rebased816.consume blur_x823_crit_edge" ], [ %19148, %"produce blur_x822" ]
  %19155 = add nsw i64 %18862, %.pre-phi3596
  %19156 = getelementptr inbounds i16, i16* %blur_x, i64 %19155
  %19157 = bitcast i16* %19156 to <16 x i16>*
  %19158 = load <16 x i16>, <16 x i16>* %19157, align 2, !tbaa !399
  %19159 = getelementptr inbounds i16, i16* %19156, i64 16
  %19160 = bitcast i16* %19159 to <16 x i16>*
  %19161 = load <16 x i16>, <16 x i16>* %19160, align 2, !tbaa !399
  %19162 = add nsw i64 %18865, %.pre-phi3596
  %19163 = getelementptr inbounds i16, i16* %blur_x, i64 %19162
  %19164 = bitcast i16* %19163 to <16 x i16>*
  %19165 = load <16 x i16>, <16 x i16>* %19164, align 2, !tbaa !399
  %19166 = getelementptr inbounds i16, i16* %19163, i64 16
  %19167 = bitcast i16* %19166 to <16 x i16>*
  %19168 = load <16 x i16>, <16 x i16>* %19167, align 2, !tbaa !399
  %19169 = add nsw i64 %18868, %.pre-phi3596
  %19170 = getelementptr inbounds i16, i16* %blur_x, i64 %19169
  %19171 = bitcast i16* %19170 to <16 x i16>*
  %19172 = load <16 x i16>, <16 x i16>* %19171, align 2, !tbaa !399
  %19173 = getelementptr inbounds i16, i16* %19170, i64 16
  %19174 = bitcast i16* %19173 to <16 x i16>*
  %19175 = load <16 x i16>, <16 x i16>* %19174, align 2, !tbaa !399
  %19176 = add nsw i64 %18871, %.pre-phi3596
  %19177 = getelementptr inbounds i16, i16* %blur_x, i64 %19176
  %19178 = bitcast i16* %19177 to <16 x i16>*
  %19179 = load <16 x i16>, <16 x i16>* %19178, align 2, !tbaa !399
  %19180 = getelementptr inbounds i16, i16* %19177, i64 16
  %19181 = bitcast i16* %19180 to <16 x i16>*
  %19182 = load <16 x i16>, <16 x i16>* %19181, align 2, !tbaa !399
  %19183 = add nsw i64 %18874, %.pre-phi3596
  %19184 = getelementptr inbounds i16, i16* %blur_x, i64 %19183
  %19185 = bitcast i16* %19184 to <16 x i16>*
  %19186 = load <16 x i16>, <16 x i16>* %19185, align 2, !tbaa !399
  %19187 = getelementptr inbounds i16, i16* %19184, i64 16
  %19188 = bitcast i16* %19187 to <16 x i16>*
  %19189 = load <16 x i16>, <16 x i16>* %19188, align 2, !tbaa !399
  %19190 = add nsw i64 %18877, %.pre-phi3596
  %19191 = getelementptr inbounds i16, i16* %blur_x, i64 %19190
  %19192 = bitcast i16* %19191 to <16 x i16>*
  %19193 = load <16 x i16>, <16 x i16>* %19192, align 2, !tbaa !399
  %19194 = getelementptr inbounds i16, i16* %19191, i64 16
  %19195 = bitcast i16* %19194 to <16 x i16>*
  %19196 = load <16 x i16>, <16 x i16>* %19195, align 2, !tbaa !399
  %19197 = add nsw i64 %18880, %.pre-phi3596
  %19198 = getelementptr inbounds i16, i16* %blur_x, i64 %19197
  %19199 = bitcast i16* %19198 to <16 x i16>*
  %19200 = load <16 x i16>, <16 x i16>* %19199, align 2, !tbaa !399
  %19201 = getelementptr inbounds i16, i16* %19198, i64 16
  %19202 = bitcast i16* %19201 to <16 x i16>*
  %19203 = load <16 x i16>, <16 x i16>* %19202, align 2, !tbaa !399
  %19204 = add <16 x i16> %19165, %19158
  %19205 = add <16 x i16> %19204, %19172
  %19206 = add <16 x i16> %19205, %19179
  %19207 = add <16 x i16> %19206, %19186
  %19208 = add <16 x i16> %19207, %19193
  %19209 = add <16 x i16> %19208, %19200
  %19210 = add <16 x i16> %19168, %19161
  %19211 = add <16 x i16> %19210, %19175
  %19212 = add <16 x i16> %19211, %19182
  %19213 = add <16 x i16> %19212, %19189
  %19214 = add <16 x i16> %19213, %19196
  %19215 = add <16 x i16> %19214, %19203
  %19216 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19209, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19217 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19215, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19218 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19216, <16 x i16> %19209)
  %19219 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19217, <16 x i16> %19215)
  %19220 = shufflevector <16 x i16> %19218, <16 x i16> %19219, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19221 = lshr <32 x i16> %19220, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19222 = shufflevector <32 x i16> %19221, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19223 = add nsw i64 %18884, %.pre-phi3596
  %19224 = getelementptr inbounds i16, i16* %66, i64 %19223
  %19225 = bitcast i16* %19224 to <16 x i16>*
  store <16 x i16> %19222, <16 x i16>* %19225, align 2, !tbaa !401
  %19226 = shufflevector <32 x i16> %19221, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19227 = getelementptr inbounds i16, i16* %19224, i64 16
  %19228 = bitcast i16* %19227 to <16 x i16>*
  store <16 x i16> %19226, <16 x i16>* %19228, align 2, !tbaa !401
  %indvars.iv.next3373 = add nuw nsw i64 %indvars.iv3372, 1
  %.not2738 = icmp eq i64 %indvars.iv.next3373, %188
  br i1 %.not2738, label %"end for blur_y.s0.x.x.rebased817", label %"for blur_y.s0.x.x.rebased816"

"for blur_y.s0.x.x.rebased824":                   ; preds = %"for blur_y.s0.x.x.rebased824.preheader", %"consume blur_x832"
  %blur_y.s0.x.x.rebased826 = phi i32 [ %19380, %"consume blur_x832" ], [ 0, %"for blur_y.s0.x.x.rebased824.preheader" ]
  %19229 = add nsw i32 %blur_y.s0.x.x.rebased826, %t1670
  %a336 = shl nsw i32 %19229, 5
  %19230 = icmp sgt i32 %a14, %a336
  %b342 = select i1 %19230, i32 %a336, i32 %a14
  %19231 = icmp slt i32 %19229, 1
  %19232 = icmp sgt i32 %4, %a336
  %19233 = or i1 %19231, %19232
  br i1 %19233, label %"produce blur_x830", label %"consume blur_x832"

"end for blur_y.s0.x.x.rebased825":               ; preds = %"consume blur_x832", %"end for blur_y.s0.x.x.rebased817"
  %19234 = add nuw nsw i32 %blur_y.s0.y.y, 1
  %.not2736 = icmp eq i32 %19234, %t1656
  br i1 %.not2736, label %"end for blur_y.s0.y.y.loopexit", label %"for blur_y.s0.y.y"

"produce blur_x830":                              ; preds = %"for blur_y.s0.x.x.rebased824"
  %19235 = icmp slt i32 %b342, %4
  %blur_x.s0.x.v1.base.s831 = select i1 %19235, i32 %b342, i32 %4
  %t1253 = add nsw i32 %blur_x.s0.x.v1.base.s831, %t2257
  %19236 = sext i32 %t1253 to i64
  %19237 = getelementptr inbounds i16, i16* %read_input, i64 %19236
  %19238 = getelementptr inbounds i16, i16* %19237, i64 1
  %19239 = bitcast i16* %19238 to <16 x i16>*
  %19240 = load <16 x i16>, <16 x i16>* %19239, align 2, !tbaa !396
  %19241 = getelementptr inbounds i16, i16* %19237, i64 17
  %19242 = bitcast i16* %19241 to <16 x i16>*
  %19243 = load <16 x i16>, <16 x i16>* %19242, align 2, !tbaa !396
  %19244 = bitcast i16* %19237 to <16 x i16>*
  %19245 = load <16 x i16>, <16 x i16>* %19244, align 2, !tbaa !396
  %19246 = getelementptr inbounds i16, i16* %19237, i64 16
  %19247 = bitcast i16* %19246 to <16 x i16>*
  %19248 = load <16 x i16>, <16 x i16>* %19247, align 2, !tbaa !396
  %19249 = getelementptr inbounds i16, i16* %19237, i64 2
  %19250 = bitcast i16* %19249 to <16 x i16>*
  %19251 = load <16 x i16>, <16 x i16>* %19250, align 2, !tbaa !396
  %19252 = getelementptr inbounds i16, i16* %19237, i64 18
  %19253 = bitcast i16* %19252 to <16 x i16>*
  %19254 = load <16 x i16>, <16 x i16>* %19253, align 2, !tbaa !396
  %19255 = getelementptr inbounds i16, i16* %19237, i64 3
  %19256 = bitcast i16* %19255 to <16 x i16>*
  %19257 = load <16 x i16>, <16 x i16>* %19256, align 2, !tbaa !396
  %19258 = getelementptr inbounds i16, i16* %19237, i64 19
  %19259 = bitcast i16* %19258 to <16 x i16>*
  %19260 = load <16 x i16>, <16 x i16>* %19259, align 2, !tbaa !396
  %19261 = getelementptr inbounds i16, i16* %19237, i64 4
  %19262 = bitcast i16* %19261 to <16 x i16>*
  %19263 = load <16 x i16>, <16 x i16>* %19262, align 2, !tbaa !396
  %19264 = getelementptr inbounds i16, i16* %19237, i64 20
  %19265 = bitcast i16* %19264 to <16 x i16>*
  %19266 = load <16 x i16>, <16 x i16>* %19265, align 2, !tbaa !396
  %19267 = getelementptr inbounds i16, i16* %19237, i64 6
  %19268 = bitcast i16* %19267 to <16 x i16>*
  %19269 = load <16 x i16>, <16 x i16>* %19268, align 2, !tbaa !396
  %19270 = getelementptr inbounds i16, i16* %19237, i64 22
  %19271 = bitcast i16* %19270 to <16 x i16>*
  %19272 = load <16 x i16>, <16 x i16>* %19271, align 2, !tbaa !396
  %19273 = getelementptr inbounds i16, i16* %19237, i64 5
  %19274 = bitcast i16* %19273 to <16 x i16>*
  %19275 = load <16 x i16>, <16 x i16>* %19274, align 2, !tbaa !396
  %19276 = getelementptr inbounds i16, i16* %19237, i64 21
  %19277 = bitcast i16* %19276 to <16 x i16>*
  %19278 = load <16 x i16>, <16 x i16>* %19277, align 2, !tbaa !396
  %19279 = add <16 x i16> %19245, %19240
  %19280 = add <16 x i16> %19279, %19251
  %19281 = add <16 x i16> %19280, %19257
  %19282 = add <16 x i16> %19281, %19263
  %19283 = add <16 x i16> %19282, %19269
  %19284 = add <16 x i16> %19283, %19275
  %19285 = add <16 x i16> %19248, %19243
  %19286 = add <16 x i16> %19285, %19254
  %19287 = add <16 x i16> %19286, %19260
  %19288 = add <16 x i16> %19287, %19266
  %19289 = add <16 x i16> %19288, %19272
  %19290 = add <16 x i16> %19289, %19278
  %19291 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19284, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19292 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19290, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19293 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19291, <16 x i16> %19284)
  %19294 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19292, <16 x i16> %19290)
  %19295 = shufflevector <16 x i16> %19293, <16 x i16> %19294, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19296 = lshr <32 x i16> %19295, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19297 = shufflevector <32 x i16> %19296, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19298 = sext i32 %blur_x.s0.x.v1.base.s831 to i64
  %19299 = add nsw i64 %19298, %19060
  %19300 = getelementptr inbounds i16, i16* %blur_x, i64 %19299
  %19301 = bitcast i16* %19300 to <16 x i16>*
  store <16 x i16> %19297, <16 x i16>* %19301, align 2, !tbaa !399
  %19302 = shufflevector <32 x i16> %19296, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19303 = getelementptr inbounds i16, i16* %19300, i64 16
  %19304 = bitcast i16* %19303 to <16 x i16>*
  store <16 x i16> %19302, <16 x i16>* %19304, align 2, !tbaa !399
  br label %"consume blur_x832"

"consume blur_x832":                              ; preds = %"for blur_y.s0.x.x.rebased824", %"produce blur_x830"
  %19305 = sext i32 %b342 to i64
  %19306 = add nsw i64 %19063, %19305
  %19307 = getelementptr inbounds i16, i16* %blur_x, i64 %19306
  %19308 = bitcast i16* %19307 to <16 x i16>*
  %19309 = load <16 x i16>, <16 x i16>* %19308, align 2, !tbaa !399
  %19310 = getelementptr inbounds i16, i16* %19307, i64 16
  %19311 = bitcast i16* %19310 to <16 x i16>*
  %19312 = load <16 x i16>, <16 x i16>* %19311, align 2, !tbaa !399
  %19313 = add nsw i64 %19066, %19305
  %19314 = getelementptr inbounds i16, i16* %blur_x, i64 %19313
  %19315 = bitcast i16* %19314 to <16 x i16>*
  %19316 = load <16 x i16>, <16 x i16>* %19315, align 2, !tbaa !399
  %19317 = getelementptr inbounds i16, i16* %19314, i64 16
  %19318 = bitcast i16* %19317 to <16 x i16>*
  %19319 = load <16 x i16>, <16 x i16>* %19318, align 2, !tbaa !399
  %19320 = add nsw i64 %19069, %19305
  %19321 = getelementptr inbounds i16, i16* %blur_x, i64 %19320
  %19322 = bitcast i16* %19321 to <16 x i16>*
  %19323 = load <16 x i16>, <16 x i16>* %19322, align 2, !tbaa !399
  %19324 = getelementptr inbounds i16, i16* %19321, i64 16
  %19325 = bitcast i16* %19324 to <16 x i16>*
  %19326 = load <16 x i16>, <16 x i16>* %19325, align 2, !tbaa !399
  %19327 = add nsw i64 %19072, %19305
  %19328 = getelementptr inbounds i16, i16* %blur_x, i64 %19327
  %19329 = bitcast i16* %19328 to <16 x i16>*
  %19330 = load <16 x i16>, <16 x i16>* %19329, align 2, !tbaa !399
  %19331 = getelementptr inbounds i16, i16* %19328, i64 16
  %19332 = bitcast i16* %19331 to <16 x i16>*
  %19333 = load <16 x i16>, <16 x i16>* %19332, align 2, !tbaa !399
  %19334 = add nsw i64 %19075, %19305
  %19335 = getelementptr inbounds i16, i16* %blur_x, i64 %19334
  %19336 = bitcast i16* %19335 to <16 x i16>*
  %19337 = load <16 x i16>, <16 x i16>* %19336, align 2, !tbaa !399
  %19338 = getelementptr inbounds i16, i16* %19335, i64 16
  %19339 = bitcast i16* %19338 to <16 x i16>*
  %19340 = load <16 x i16>, <16 x i16>* %19339, align 2, !tbaa !399
  %19341 = add nsw i64 %19078, %19305
  %19342 = getelementptr inbounds i16, i16* %blur_x, i64 %19341
  %19343 = bitcast i16* %19342 to <16 x i16>*
  %19344 = load <16 x i16>, <16 x i16>* %19343, align 2, !tbaa !399
  %19345 = getelementptr inbounds i16, i16* %19342, i64 16
  %19346 = bitcast i16* %19345 to <16 x i16>*
  %19347 = load <16 x i16>, <16 x i16>* %19346, align 2, !tbaa !399
  %19348 = add nsw i64 %19081, %19305
  %19349 = getelementptr inbounds i16, i16* %blur_x, i64 %19348
  %19350 = bitcast i16* %19349 to <16 x i16>*
  %19351 = load <16 x i16>, <16 x i16>* %19350, align 2, !tbaa !399
  %19352 = getelementptr inbounds i16, i16* %19349, i64 16
  %19353 = bitcast i16* %19352 to <16 x i16>*
  %19354 = load <16 x i16>, <16 x i16>* %19353, align 2, !tbaa !399
  %19355 = add <16 x i16> %19316, %19309
  %19356 = add <16 x i16> %19355, %19323
  %19357 = add <16 x i16> %19356, %19330
  %19358 = add <16 x i16> %19357, %19337
  %19359 = add <16 x i16> %19358, %19344
  %19360 = add <16 x i16> %19359, %19351
  %19361 = add <16 x i16> %19319, %19312
  %19362 = add <16 x i16> %19361, %19326
  %19363 = add <16 x i16> %19362, %19333
  %19364 = add <16 x i16> %19363, %19340
  %19365 = add <16 x i16> %19364, %19347
  %19366 = add <16 x i16> %19365, %19354
  %19367 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19360, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19368 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19366, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %19369 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19367, <16 x i16> %19360)
  %19370 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19368, <16 x i16> %19366)
  %19371 = shufflevector <16 x i16> %19369, <16 x i16> %19370, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19372 = lshr <32 x i16> %19371, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19373 = shufflevector <32 x i16> %19372, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19374 = add nsw i64 %19085, %19305
  %19375 = getelementptr inbounds i16, i16* %66, i64 %19374
  %19376 = bitcast i16* %19375 to <16 x i16>*
  store <16 x i16> %19373, <16 x i16>* %19376, align 2, !tbaa !401
  %19377 = shufflevector <32 x i16> %19372, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19378 = getelementptr inbounds i16, i16* %19375, i64 16
  %19379 = bitcast i16* %19378 to <16 x i16>*
  store <16 x i16> %19377, <16 x i16>* %19379, align 2, !tbaa !401
  %19380 = add nuw nsw i32 %blur_y.s0.x.x.rebased826, 1
  %.not2737 = icmp eq i32 %19380, %t1727
  br i1 %.not2737, label %"end for blur_y.s0.x.x.rebased825", label %"for blur_y.s0.x.x.rebased824"

"for blur_y.s0.y.y854":                           ; preds = %"for blur_y.s0.y.y854.preheader", %"end for blur_y.s0.x.x.rebased2465"
  %blur_y.s0.y.y856 = phi i32 [ %38241, %"end for blur_y.s0.x.x.rebased2465" ], [ 0, %"for blur_y.s0.y.y854.preheader" ]
  %a363 = shl nsw i32 %blur_y.s0.y.y856, 5
  %19381 = icmp sgt i32 %b365, %a363
  %blur_y.s0.y.yi.base.s857 = select i1 %19381, i32 %a363, i32 %b365
  %19382 = load i64, i64* %.fca.1.gep, align 8, !tbaa !387
  %cmp.i2889 = icmp ult i64 %19382, %267
  %19383 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !389
  br i1 %cmp.i2889, label %if.then.i2892, label %pseudostack_alloc.exit2905, !prof !390

if.then.i2892:                                    ; preds = %"for blur_y.s0.y.y854"
  %tobool1.not.i2891 = icmp ne i8* %19383, null
  %19384 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i2894 = icmp ugt i64 %19384, 16384
  %or.cond2959 = and i1 %tobool1.not.i2891, %cmp2.i2894
  br i1 %or.cond2959, label %if.then3.i2896, label %if.end.i2900

if.then3.i2896:                                   ; preds = %if.then.i2892
  call void @halide_free(i8* null, i8* nonnull %19383) #16
  %.pre3502 = load i64, i64* %.fca.2.gep, align 8, !tbaa !391
  br label %if.end.i2900

if.end.i2900:                                     ; preds = %if.then3.i2896, %if.then.i2892
  %19385 = phi i64 [ %.pre3502, %if.then3.i2896 ], [ %19384, %if.then.i2892 ]
  %add.i2898 = add i64 %19385, %267
  store i64 %add.i2898, i64* %.fca.2.gep, align 8, !tbaa !391
  %cmp7.i2899 = icmp ugt i64 %add.i2898, 16384
  br i1 %cmp7.i2899, label %if.then8.i2902, label %if.end11.i2904

if.then8.i2902:                                   ; preds = %if.end.i2900
  %call.i2901 = call i8* @halide_malloc(i8* null, i64 %267) #16
  br label %if.end11.i2904

if.end11.i2904:                                   ; preds = %if.then8.i2902, %if.end.i2900
  %storemerge.i2903 = phi i8* [ %call.i2901, %if.then8.i2902 ], [ null, %if.end.i2900 ]
  store i8* %storemerge.i2903, i8** %.fca.0.gep, align 8, !tbaa !389
  store i64 %267, i64* %.fca.1.gep, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2905

pseudostack_alloc.exit2905:                       ; preds = %"for blur_y.s0.y.y854", %if.end11.i2904
  %19386 = phi i8* [ %storemerge.i2903, %if.end11.i2904 ], [ %19383, %"for blur_y.s0.y.y854" ]
  %19387 = bitcast i8* %19386 to i16*
  %.not2644 = icmp eq i8* %19386, null
  br i1 %.not2644, label %then_bb859, label %"produce read_input861", !prof !392

"end for blur_y.s0.y.y855":                       ; preds = %"end for blur_y.s0.y.y"
  %tobool.not.i.not = icmp eq i8* %.02948, null
  br i1 %tobool.not.i.not, label %call_destructor.exit, label %if.then.i2906

if.then.i2906.loopexit:                           ; preds = %"end for blur_y.s0.x.x.rebased2465"
  %19388 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  %19389 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  br label %if.then.i2906

if.then.i2906:                                    ; preds = %if.then.i2906.loopexit, %"end for blur_y.s0.y.y855"
  %.12956 = phi i8* [ %.0, %"end for blur_y.s0.y.y855" ], [ %19388, %if.then.i2906.loopexit ]
  %.129492953 = phi i8* [ %.02948, %"end for blur_y.s0.y.y855" ], [ %19389, %if.then.i2906.loopexit ]
  %ptr1.i = bitcast i8* %.129492953 to i8**
  %19390 = load i8*, i8** %ptr1.i, align 8, !tbaa !389
  %tobool.not.i2930 = icmp eq i8* %19390, null
  br i1 %tobool.not.i2930, label %pseudostack_free.exit, label %land.lhs.true.i2933

land.lhs.true.i2933:                              ; preds = %if.then.i2906
  %cumulative_size.i2931 = getelementptr inbounds i8, i8* %.129492953, i64 16
  %19391 = bitcast i8* %cumulative_size.i2931 to i64*
  %19392 = load i64, i64* %19391, align 8, !tbaa !391
  %cmp.i2932 = icmp ugt i64 %19392, 16384
  br i1 %cmp.i2932, label %if.then.i2934, label %pseudostack_free.exit

if.then.i2934:                                    ; preds = %land.lhs.true.i2933
  call void @halide_free(i8* null, i8* nonnull %19390) #16
  br label %pseudostack_free.exit

pseudostack_free.exit:                            ; preds = %if.then.i2906, %land.lhs.true.i2933, %if.then.i2934
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %.129492953, i8 0, i64 24, i1 false)
  br label %call_destructor.exit

call_destructor.exit:                             ; preds = %"end for blur_y.s0.y.y855", %pseudostack_free.exit
  %.12955 = phi i8* [ %.0, %"end for blur_y.s0.y.y855" ], [ %.12956, %pseudostack_free.exit ]
  %tobool.not.i2908.not = icmp eq i8* %.12955, null
  br i1 %tobool.not.i2908.not, label %call_destructor.exit2911, label %if.then.i2909

if.then.i2909:                                    ; preds = %call_destructor.exit
  %ptr1.i2937 = bitcast i8* %.12955 to i8**
  %19393 = load i8*, i8** %ptr1.i2937, align 8, !tbaa !389
  %tobool.not.i2938 = icmp eq i8* %19393, null
  br i1 %tobool.not.i2938, label %pseudostack_free.exit2946, label %land.lhs.true.i2941

land.lhs.true.i2941:                              ; preds = %if.then.i2909
  %cumulative_size.i2939 = getelementptr inbounds i8, i8* %.12955, i64 16
  %19394 = bitcast i8* %cumulative_size.i2939 to i64*
  %19395 = load i64, i64* %19394, align 8, !tbaa !391
  %cmp.i2940 = icmp ugt i64 %19395, 16384
  br i1 %cmp.i2940, label %if.then.i2942, label %pseudostack_free.exit2946

if.then.i2942:                                    ; preds = %land.lhs.true.i2941
  call void @halide_free(i8* null, i8* nonnull %19393) #16
  br label %pseudostack_free.exit2946

pseudostack_free.exit2946:                        ; preds = %if.then.i2909, %land.lhs.true.i2941, %if.then.i2942
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %.12955, i8 0, i64 24, i1 false)
  br label %call_destructor.exit2911

call_destructor.exit2911:                         ; preds = %call_destructor.exit, %pseudostack_free.exit2946
  ret i32 0

then_bb859:                                       ; preds = %pseudostack_alloc.exit2905
  %19396 = alloca i8*, i64 %267, align 32
  %19397 = bitcast i8** %19396 to i16*
  store i8** %19396, i8*** %268, align 8
  br label %"produce read_input861"

"produce read_input861":                          ; preds = %pseudostack_alloc.exit2905, %then_bb859
  %read_input860 = phi i16* [ %19397, %then_bb859 ], [ %19387, %pseudostack_alloc.exit2905 ]
  %a367 = add nsw i32 %blur_y.s0.y.yi.base.s857, %203
  %19398 = icmp sgt i32 %a367, %209
  %a366 = select i1 %19398, i32 %a367, i32 %209
  %b368 = add nsw i32 %a367, 38
  %19399 = icmp sgt i32 %b368, %a366
  %read_input.s0.y.prologue862 = select i1 %19399, i32 %a366, i32 %b368
  %19400 = icmp sgt i32 %a366, %b371
  %a368 = select i1 %19400, i32 %a366, i32 %b371
  %19401 = icmp sgt i32 %b368, %a368
  %read_input.s0.y.epilogue863 = select i1 %19401, i32 %a368, i32 %b368
  %a372 = sub i32 %269, %blur_y.s0.y.yi.base.s857
  %19402 = icmp sgt i32 %a372, 0
  br i1 %19402, label %"for read_input.s0.y.rebased868.preheader", label %"end for read_input.s0.y.rebased869", !prof !386

"for read_input.s0.y.rebased868.preheader":       ; preds = %"produce read_input861"
  %t1695865 = add nsw i32 %270, %blur_y.s0.y.yi.base.s857
  %19403 = icmp slt i32 %a372, 38
  %a371 = select i1 %19403, i32 %a372, i32 38
  %19404 = sext i32 %t1695865 to i64
  %19405 = zext i32 %a371 to i64
  br label %"for read_input.s0.y.rebased868"

"for read_input.s0.y.rebased868":                 ; preds = %"for read_input.s0.y.rebased868.preheader", %"end for read_input.s0.x.x874"
  %indvars.iv3375 = phi i64 [ 0, %"for read_input.s0.y.rebased868.preheader" ], [ %indvars.iv.next3376, %"end for read_input.s0.x.x874" ]
  %19406 = add nsw i64 %indvars.iv3375, %19404
  %19407 = icmp slt i64 %19406, %380
  %19408 = trunc i64 %19406 to i32
  %a374 = select i1 %19407, i32 %19408, i32 %b377
  %19409 = mul nsw i64 %indvars.iv3375, %280
  %19410 = sub nsw i64 %19409, %281
  %19411 = icmp sgt i32 %a374, 0
  %19412 = select i1 %19411, i32 %a374, i32 0
  %19413 = mul nsw i32 %19412, %211
  %t1697871 = sub nsw i32 %19413, %207
  %19414 = insertelement <32 x i32> undef, i32 %t1697871, i32 0
  %19415 = shufflevector <32 x i32> %19414, <32 x i32> undef, <32 x i32> zeroinitializer
  br label %"for read_input.s0.x.x873"

"end for read_input.s0.y.rebased869":             ; preds = %"end for read_input.s0.x.x874", %"produce read_input861"
  %19416 = icmp sgt i32 %a381, %a367
  %a380 = select i1 %19416, i32 %a381, i32 %a367
  %19417 = icmp sgt i32 %b368, %a380
  %19418 = select i1 %19417, i32 %a380, i32 %b368
  %t1699878 = sub nsw i32 %19418, %read_input.s0.y.prologue862
  %19419 = icmp sgt i32 %t1699878, 0
  br i1 %19419, label %"for read_input.s0.y.rebased883.preheader", label %"end for read_input.s0.y.rebased884", !prof !386

"for read_input.s0.y.rebased883.preheader":       ; preds = %"end for read_input.s0.y.rebased869"
  %t1702880 = sub i32 %read_input.s0.y.prologue862, %209
  %19420 = sext i32 %blur_y.s0.y.yi.base.s857 to i64
  %a388 = sub nsw i64 %279, %19420
  %19421 = icmp slt i64 %a388, 38
  %a387 = select i1 %19421, i64 %a388, i64 38
  %19422 = icmp sgt i64 %a387, 0
  %19423 = select i1 %19422, i64 %a387, i64 0
  %19424 = sext i32 %t1702880 to i64
  %19425 = zext i32 %t1699878 to i64
  br label %"for read_input.s0.y.rebased883"

"for read_input.s0.x.x873":                       ; preds = %"for read_input.s0.y.rebased868", %"for read_input.s0.x.x873"
  %read_input.s0.x.x875 = phi i32 [ %19624, %"for read_input.s0.x.x873" ], [ 0, %"for read_input.s0.y.rebased868" ]
  %19426 = shl nsw i32 %read_input.s0.x.x875, 5
  %a376 = add nsw i32 %19426, %t1694867
  %19427 = icmp sgt i32 %b378, %a376
  %read_input.s0.x.v2.base.s876 = select i1 %19427, i32 %a376, i32 %b378
  %19428 = add nsw i32 %read_input.s0.x.v2.base.s876, -32
  %19429 = insertelement <32 x i32> undef, i32 %19428, i32 0
  %19430 = shufflevector <32 x i32> %19429, <32 x i32> undef, <32 x i32> zeroinitializer
  %a378 = add nsw <32 x i32> %19430, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19431 = shufflevector <32 x i32> %a378, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19432 = icmp sgt <8 x i32> %273, %19431
  %19433 = shufflevector <32 x i32> %a378, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19434 = icmp sgt <8 x i32> %273, %19433
  %19435 = shufflevector <32 x i32> %a378, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %19436 = icmp sgt <8 x i32> %273, %19435
  %19437 = shufflevector <32 x i32> %a378, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19438 = icmp sgt <8 x i32> %273, %19437
  %19439 = select <8 x i1> %19432, <8 x i32> %19431, <8 x i32> %273
  %19440 = select <8 x i1> %19434, <8 x i32> %19433, <8 x i32> %273
  %19441 = select <8 x i1> %19436, <8 x i32> %19435, <8 x i32> %273
  %19442 = select <8 x i1> %19438, <8 x i32> %19437, <8 x i32> %273
  %19443 = icmp sgt <8 x i32> %19439, %275
  %19444 = icmp sgt <8 x i32> %19440, %275
  %19445 = icmp sgt <8 x i32> %19441, %275
  %19446 = icmp sgt <8 x i32> %19442, %275
  %19447 = select <8 x i1> %19443, <8 x i32> %19439, <8 x i32> %275
  %19448 = select <8 x i1> %19444, <8 x i32> %19440, <8 x i32> %275
  %19449 = select <8 x i1> %19445, <8 x i32> %19441, <8 x i32> %275
  %19450 = select <8 x i1> %19446, <8 x i32> %19442, <8 x i32> %275
  %19451 = shufflevector <8 x i32> %19447, <8 x i32> %19448, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19452 = shufflevector <8 x i32> %19449, <8 x i32> %19450, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19453 = shufflevector <16 x i32> %19451, <16 x i32> %19452, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19454 = add nsw <32 x i32> %19453, %19415
  %19455 = extractelement <32 x i32> %19454, i32 0
  %19456 = sext i32 %19455 to i64
  %19457 = getelementptr inbounds i16, i16* %262, i64 %19456
  %19458 = load i16, i16* %19457, align 2, !tbaa !393
  %19459 = insertelement <32 x i16> undef, i16 %19458, i32 0
  %19460 = extractelement <32 x i32> %19454, i32 1
  %19461 = sext i32 %19460 to i64
  %19462 = getelementptr inbounds i16, i16* %262, i64 %19461
  %19463 = load i16, i16* %19462, align 2, !tbaa !393
  %19464 = insertelement <32 x i16> %19459, i16 %19463, i32 1
  %19465 = extractelement <32 x i32> %19454, i32 2
  %19466 = sext i32 %19465 to i64
  %19467 = getelementptr inbounds i16, i16* %262, i64 %19466
  %19468 = load i16, i16* %19467, align 2, !tbaa !393
  %19469 = insertelement <32 x i16> %19464, i16 %19468, i32 2
  %19470 = extractelement <32 x i32> %19454, i32 3
  %19471 = sext i32 %19470 to i64
  %19472 = getelementptr inbounds i16, i16* %262, i64 %19471
  %19473 = load i16, i16* %19472, align 2, !tbaa !393
  %19474 = insertelement <32 x i16> %19469, i16 %19473, i32 3
  %19475 = extractelement <32 x i32> %19454, i32 4
  %19476 = sext i32 %19475 to i64
  %19477 = getelementptr inbounds i16, i16* %262, i64 %19476
  %19478 = load i16, i16* %19477, align 2, !tbaa !393
  %19479 = insertelement <32 x i16> %19474, i16 %19478, i32 4
  %19480 = extractelement <32 x i32> %19454, i32 5
  %19481 = sext i32 %19480 to i64
  %19482 = getelementptr inbounds i16, i16* %262, i64 %19481
  %19483 = load i16, i16* %19482, align 2, !tbaa !393
  %19484 = insertelement <32 x i16> %19479, i16 %19483, i32 5
  %19485 = extractelement <32 x i32> %19454, i32 6
  %19486 = sext i32 %19485 to i64
  %19487 = getelementptr inbounds i16, i16* %262, i64 %19486
  %19488 = load i16, i16* %19487, align 2, !tbaa !393
  %19489 = insertelement <32 x i16> %19484, i16 %19488, i32 6
  %19490 = extractelement <32 x i32> %19454, i32 7
  %19491 = sext i32 %19490 to i64
  %19492 = getelementptr inbounds i16, i16* %262, i64 %19491
  %19493 = load i16, i16* %19492, align 2, !tbaa !393
  %19494 = insertelement <32 x i16> %19489, i16 %19493, i32 7
  %19495 = extractelement <32 x i32> %19454, i32 8
  %19496 = sext i32 %19495 to i64
  %19497 = getelementptr inbounds i16, i16* %262, i64 %19496
  %19498 = load i16, i16* %19497, align 2, !tbaa !393
  %19499 = insertelement <32 x i16> %19494, i16 %19498, i32 8
  %19500 = extractelement <32 x i32> %19454, i32 9
  %19501 = sext i32 %19500 to i64
  %19502 = getelementptr inbounds i16, i16* %262, i64 %19501
  %19503 = load i16, i16* %19502, align 2, !tbaa !393
  %19504 = insertelement <32 x i16> %19499, i16 %19503, i32 9
  %19505 = extractelement <32 x i32> %19454, i32 10
  %19506 = sext i32 %19505 to i64
  %19507 = getelementptr inbounds i16, i16* %262, i64 %19506
  %19508 = load i16, i16* %19507, align 2, !tbaa !393
  %19509 = insertelement <32 x i16> %19504, i16 %19508, i32 10
  %19510 = extractelement <32 x i32> %19454, i32 11
  %19511 = sext i32 %19510 to i64
  %19512 = getelementptr inbounds i16, i16* %262, i64 %19511
  %19513 = load i16, i16* %19512, align 2, !tbaa !393
  %19514 = insertelement <32 x i16> %19509, i16 %19513, i32 11
  %19515 = extractelement <32 x i32> %19454, i32 12
  %19516 = sext i32 %19515 to i64
  %19517 = getelementptr inbounds i16, i16* %262, i64 %19516
  %19518 = load i16, i16* %19517, align 2, !tbaa !393
  %19519 = insertelement <32 x i16> %19514, i16 %19518, i32 12
  %19520 = extractelement <32 x i32> %19454, i32 13
  %19521 = sext i32 %19520 to i64
  %19522 = getelementptr inbounds i16, i16* %262, i64 %19521
  %19523 = load i16, i16* %19522, align 2, !tbaa !393
  %19524 = insertelement <32 x i16> %19519, i16 %19523, i32 13
  %19525 = extractelement <32 x i32> %19454, i32 14
  %19526 = sext i32 %19525 to i64
  %19527 = getelementptr inbounds i16, i16* %262, i64 %19526
  %19528 = load i16, i16* %19527, align 2, !tbaa !393
  %19529 = insertelement <32 x i16> %19524, i16 %19528, i32 14
  %19530 = extractelement <32 x i32> %19454, i32 15
  %19531 = sext i32 %19530 to i64
  %19532 = getelementptr inbounds i16, i16* %262, i64 %19531
  %19533 = load i16, i16* %19532, align 2, !tbaa !393
  %19534 = insertelement <32 x i16> %19529, i16 %19533, i32 15
  %19535 = extractelement <32 x i32> %19454, i32 16
  %19536 = sext i32 %19535 to i64
  %19537 = getelementptr inbounds i16, i16* %262, i64 %19536
  %19538 = load i16, i16* %19537, align 2, !tbaa !393
  %19539 = insertelement <32 x i16> %19534, i16 %19538, i32 16
  %19540 = extractelement <32 x i32> %19454, i32 17
  %19541 = sext i32 %19540 to i64
  %19542 = getelementptr inbounds i16, i16* %262, i64 %19541
  %19543 = load i16, i16* %19542, align 2, !tbaa !393
  %19544 = insertelement <32 x i16> %19539, i16 %19543, i32 17
  %19545 = extractelement <32 x i32> %19454, i32 18
  %19546 = sext i32 %19545 to i64
  %19547 = getelementptr inbounds i16, i16* %262, i64 %19546
  %19548 = load i16, i16* %19547, align 2, !tbaa !393
  %19549 = insertelement <32 x i16> %19544, i16 %19548, i32 18
  %19550 = extractelement <32 x i32> %19454, i32 19
  %19551 = sext i32 %19550 to i64
  %19552 = getelementptr inbounds i16, i16* %262, i64 %19551
  %19553 = load i16, i16* %19552, align 2, !tbaa !393
  %19554 = insertelement <32 x i16> %19549, i16 %19553, i32 19
  %19555 = extractelement <32 x i32> %19454, i32 20
  %19556 = sext i32 %19555 to i64
  %19557 = getelementptr inbounds i16, i16* %262, i64 %19556
  %19558 = load i16, i16* %19557, align 2, !tbaa !393
  %19559 = insertelement <32 x i16> %19554, i16 %19558, i32 20
  %19560 = extractelement <32 x i32> %19454, i32 21
  %19561 = sext i32 %19560 to i64
  %19562 = getelementptr inbounds i16, i16* %262, i64 %19561
  %19563 = load i16, i16* %19562, align 2, !tbaa !393
  %19564 = insertelement <32 x i16> %19559, i16 %19563, i32 21
  %19565 = extractelement <32 x i32> %19454, i32 22
  %19566 = sext i32 %19565 to i64
  %19567 = getelementptr inbounds i16, i16* %262, i64 %19566
  %19568 = load i16, i16* %19567, align 2, !tbaa !393
  %19569 = insertelement <32 x i16> %19564, i16 %19568, i32 22
  %19570 = extractelement <32 x i32> %19454, i32 23
  %19571 = sext i32 %19570 to i64
  %19572 = getelementptr inbounds i16, i16* %262, i64 %19571
  %19573 = load i16, i16* %19572, align 2, !tbaa !393
  %19574 = insertelement <32 x i16> %19569, i16 %19573, i32 23
  %19575 = extractelement <32 x i32> %19454, i32 24
  %19576 = sext i32 %19575 to i64
  %19577 = getelementptr inbounds i16, i16* %262, i64 %19576
  %19578 = load i16, i16* %19577, align 2, !tbaa !393
  %19579 = insertelement <32 x i16> %19574, i16 %19578, i32 24
  %19580 = extractelement <32 x i32> %19454, i32 25
  %19581 = sext i32 %19580 to i64
  %19582 = getelementptr inbounds i16, i16* %262, i64 %19581
  %19583 = load i16, i16* %19582, align 2, !tbaa !393
  %19584 = insertelement <32 x i16> %19579, i16 %19583, i32 25
  %19585 = extractelement <32 x i32> %19454, i32 26
  %19586 = sext i32 %19585 to i64
  %19587 = getelementptr inbounds i16, i16* %262, i64 %19586
  %19588 = load i16, i16* %19587, align 2, !tbaa !393
  %19589 = insertelement <32 x i16> %19584, i16 %19588, i32 26
  %19590 = extractelement <32 x i32> %19454, i32 27
  %19591 = sext i32 %19590 to i64
  %19592 = getelementptr inbounds i16, i16* %262, i64 %19591
  %19593 = load i16, i16* %19592, align 2, !tbaa !393
  %19594 = insertelement <32 x i16> %19589, i16 %19593, i32 27
  %19595 = extractelement <32 x i32> %19454, i32 28
  %19596 = sext i32 %19595 to i64
  %19597 = getelementptr inbounds i16, i16* %262, i64 %19596
  %19598 = load i16, i16* %19597, align 2, !tbaa !393
  %19599 = insertelement <32 x i16> %19594, i16 %19598, i32 28
  %19600 = extractelement <32 x i32> %19454, i32 29
  %19601 = sext i32 %19600 to i64
  %19602 = getelementptr inbounds i16, i16* %262, i64 %19601
  %19603 = load i16, i16* %19602, align 2, !tbaa !393
  %19604 = insertelement <32 x i16> %19599, i16 %19603, i32 29
  %19605 = extractelement <32 x i32> %19454, i32 30
  %19606 = sext i32 %19605 to i64
  %19607 = getelementptr inbounds i16, i16* %262, i64 %19606
  %19608 = load i16, i16* %19607, align 2, !tbaa !393
  %19609 = insertelement <32 x i16> %19604, i16 %19608, i32 30
  %19610 = extractelement <32 x i32> %19454, i32 31
  %19611 = sext i32 %19610 to i64
  %19612 = getelementptr inbounds i16, i16* %262, i64 %19611
  %19613 = load i16, i16* %19612, align 2, !tbaa !393
  %19614 = insertelement <32 x i16> %19609, i16 %19613, i32 31
  %19615 = shufflevector <32 x i16> %19614, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19616 = sext i32 %read_input.s0.x.v2.base.s876 to i64
  %19617 = add nsw i64 %19410, %19616
  %19618 = getelementptr inbounds i16, i16* %read_input860, i64 %19617
  %19619 = getelementptr inbounds i16, i16* %19618, i64 -32
  %19620 = bitcast i16* %19619 to <16 x i16>*
  store <16 x i16> %19615, <16 x i16>* %19620, align 2, !tbaa !396
  %19621 = shufflevector <32 x i16> %19614, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19622 = getelementptr inbounds i16, i16* %19618, i64 -16
  %19623 = bitcast i16* %19622 to <16 x i16>*
  store <16 x i16> %19621, <16 x i16>* %19623, align 2, !tbaa !396
  %19624 = add nuw nsw i32 %read_input.s0.x.x875, 1
  %.not2732 = icmp eq i32 %19624, %218
  br i1 %.not2732, label %"end for read_input.s0.x.x874", label %"for read_input.s0.x.x873"

"end for read_input.s0.x.x874":                   ; preds = %"for read_input.s0.x.x873"
  %indvars.iv.next3376 = add nuw nsw i64 %indvars.iv3375, 1
  %.not2731 = icmp eq i64 %indvars.iv.next3376, %19405
  br i1 %.not2731, label %"end for read_input.s0.y.rebased869", label %"for read_input.s0.y.rebased868"

"for read_input.s0.y.rebased883":                 ; preds = %"for read_input.s0.y.rebased883.preheader", %"end for read_input.s0.x.x.rebased899"
  %indvars.iv3382 = phi i64 [ 0, %"for read_input.s0.y.rebased883.preheader" ], [ %indvars.iv.next3383, %"end for read_input.s0.x.x.rebased899" ]
  %19625 = add nsw i64 %indvars.iv3382, %19424
  %19626 = mul nsw i64 %19625, %384
  %19627 = sub nsw i64 %19626, %385
  br i1 %276, label %"for read_input.s0.x.x887.preheader", label %"end for read_input.s0.x.x888", !prof !386

"for read_input.s0.x.x887.preheader":             ; preds = %"for read_input.s0.y.rebased883"
  %19628 = trunc i64 %19627 to i32
  %19629 = insertelement <32 x i32> undef, i32 %19628, i32 0
  %19630 = shufflevector <32 x i32> %19629, <32 x i32> undef, <32 x i32> zeroinitializer
  %19631 = add nuw nsw i64 %19423, %indvars.iv3382
  %19632 = mul nsw i64 %19631, %280
  %19633 = sub i64 %19632, %281
  br label %"for read_input.s0.x.x887"

"end for read_input.s0.y.rebased884":             ; preds = %"end for read_input.s0.x.x.rebased899", %"end for read_input.s0.y.rebased869"
  %a404 = add nsw i32 %blur_y.s0.y.yi.base.s857, %284
  %19634 = icmp slt i32 %a404, 0
  %a403 = select i1 %19634, i32 %a404, i32 0
  %19635 = icmp sgt i32 %a403, -38
  %t1719904 = sub nsw i32 %read_input.s0.y.epilogue863, %209
  br i1 %19635, label %"for read_input.s0.y.rebased907.preheader", label %"end for read_input.s0.y.rebased908", !prof !386

"for read_input.s0.y.rebased907.preheader":       ; preds = %"end for read_input.s0.y.rebased884"
  %19636 = sext i32 %blur_y.s0.y.yi.base.s857 to i64
  %a411 = sub nsw i64 %286, %19636
  %19637 = icmp slt i64 %a411, 38
  %a410 = select i1 %19637, i64 %a411, i64 38
  %19638 = icmp sgt i64 %a410, 0
  %19639 = select i1 %19638, i64 %a410, i64 0
  %a403.op = add nsw i32 %a403, 37
  %19640 = zext i32 %a403.op to i64
  br label %"for read_input.s0.y.rebased907"

"for read_input.s0.x.x887":                       ; preds = %"for read_input.s0.x.x887.preheader", %"for read_input.s0.x.x887"
  %read_input.s0.x.x889 = phi i32 [ %19839, %"for read_input.s0.x.x887" ], [ 0, %"for read_input.s0.x.x887.preheader" ]
  %19641 = shl nsw i32 %read_input.s0.x.x889, 5
  %a384 = add nsw i32 %19641, %t1694867
  %19642 = icmp sgt i32 %b378, %a384
  %read_input.s0.x.v2.base.s890 = select i1 %19642, i32 %a384, i32 %b378
  %19643 = add nsw i32 %read_input.s0.x.v2.base.s890, -32
  %19644 = insertelement <32 x i32> undef, i32 %19643, i32 0
  %19645 = shufflevector <32 x i32> %19644, <32 x i32> undef, <32 x i32> zeroinitializer
  %a386 = add nsw <32 x i32> %19645, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19646 = shufflevector <32 x i32> %a386, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19647 = icmp sgt <8 x i32> %273, %19646
  %19648 = shufflevector <32 x i32> %a386, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19649 = icmp sgt <8 x i32> %273, %19648
  %19650 = shufflevector <32 x i32> %a386, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %19651 = icmp sgt <8 x i32> %273, %19650
  %19652 = shufflevector <32 x i32> %a386, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19653 = icmp sgt <8 x i32> %273, %19652
  %19654 = select <8 x i1> %19647, <8 x i32> %19646, <8 x i32> %273
  %19655 = select <8 x i1> %19649, <8 x i32> %19648, <8 x i32> %273
  %19656 = select <8 x i1> %19651, <8 x i32> %19650, <8 x i32> %273
  %19657 = select <8 x i1> %19653, <8 x i32> %19652, <8 x i32> %273
  %19658 = icmp sgt <8 x i32> %19654, %275
  %19659 = icmp sgt <8 x i32> %19655, %275
  %19660 = icmp sgt <8 x i32> %19656, %275
  %19661 = icmp sgt <8 x i32> %19657, %275
  %19662 = select <8 x i1> %19658, <8 x i32> %19654, <8 x i32> %275
  %19663 = select <8 x i1> %19659, <8 x i32> %19655, <8 x i32> %275
  %19664 = select <8 x i1> %19660, <8 x i32> %19656, <8 x i32> %275
  %19665 = select <8 x i1> %19661, <8 x i32> %19657, <8 x i32> %275
  %19666 = shufflevector <8 x i32> %19662, <8 x i32> %19663, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19667 = shufflevector <8 x i32> %19664, <8 x i32> %19665, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19668 = shufflevector <16 x i32> %19666, <16 x i32> %19667, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19669 = add nsw <32 x i32> %19668, %19630
  %19670 = extractelement <32 x i32> %19669, i32 0
  %19671 = sext i32 %19670 to i64
  %19672 = getelementptr inbounds i16, i16* %262, i64 %19671
  %19673 = load i16, i16* %19672, align 2, !tbaa !393
  %19674 = insertelement <32 x i16> undef, i16 %19673, i32 0
  %19675 = extractelement <32 x i32> %19669, i32 1
  %19676 = sext i32 %19675 to i64
  %19677 = getelementptr inbounds i16, i16* %262, i64 %19676
  %19678 = load i16, i16* %19677, align 2, !tbaa !393
  %19679 = insertelement <32 x i16> %19674, i16 %19678, i32 1
  %19680 = extractelement <32 x i32> %19669, i32 2
  %19681 = sext i32 %19680 to i64
  %19682 = getelementptr inbounds i16, i16* %262, i64 %19681
  %19683 = load i16, i16* %19682, align 2, !tbaa !393
  %19684 = insertelement <32 x i16> %19679, i16 %19683, i32 2
  %19685 = extractelement <32 x i32> %19669, i32 3
  %19686 = sext i32 %19685 to i64
  %19687 = getelementptr inbounds i16, i16* %262, i64 %19686
  %19688 = load i16, i16* %19687, align 2, !tbaa !393
  %19689 = insertelement <32 x i16> %19684, i16 %19688, i32 3
  %19690 = extractelement <32 x i32> %19669, i32 4
  %19691 = sext i32 %19690 to i64
  %19692 = getelementptr inbounds i16, i16* %262, i64 %19691
  %19693 = load i16, i16* %19692, align 2, !tbaa !393
  %19694 = insertelement <32 x i16> %19689, i16 %19693, i32 4
  %19695 = extractelement <32 x i32> %19669, i32 5
  %19696 = sext i32 %19695 to i64
  %19697 = getelementptr inbounds i16, i16* %262, i64 %19696
  %19698 = load i16, i16* %19697, align 2, !tbaa !393
  %19699 = insertelement <32 x i16> %19694, i16 %19698, i32 5
  %19700 = extractelement <32 x i32> %19669, i32 6
  %19701 = sext i32 %19700 to i64
  %19702 = getelementptr inbounds i16, i16* %262, i64 %19701
  %19703 = load i16, i16* %19702, align 2, !tbaa !393
  %19704 = insertelement <32 x i16> %19699, i16 %19703, i32 6
  %19705 = extractelement <32 x i32> %19669, i32 7
  %19706 = sext i32 %19705 to i64
  %19707 = getelementptr inbounds i16, i16* %262, i64 %19706
  %19708 = load i16, i16* %19707, align 2, !tbaa !393
  %19709 = insertelement <32 x i16> %19704, i16 %19708, i32 7
  %19710 = extractelement <32 x i32> %19669, i32 8
  %19711 = sext i32 %19710 to i64
  %19712 = getelementptr inbounds i16, i16* %262, i64 %19711
  %19713 = load i16, i16* %19712, align 2, !tbaa !393
  %19714 = insertelement <32 x i16> %19709, i16 %19713, i32 8
  %19715 = extractelement <32 x i32> %19669, i32 9
  %19716 = sext i32 %19715 to i64
  %19717 = getelementptr inbounds i16, i16* %262, i64 %19716
  %19718 = load i16, i16* %19717, align 2, !tbaa !393
  %19719 = insertelement <32 x i16> %19714, i16 %19718, i32 9
  %19720 = extractelement <32 x i32> %19669, i32 10
  %19721 = sext i32 %19720 to i64
  %19722 = getelementptr inbounds i16, i16* %262, i64 %19721
  %19723 = load i16, i16* %19722, align 2, !tbaa !393
  %19724 = insertelement <32 x i16> %19719, i16 %19723, i32 10
  %19725 = extractelement <32 x i32> %19669, i32 11
  %19726 = sext i32 %19725 to i64
  %19727 = getelementptr inbounds i16, i16* %262, i64 %19726
  %19728 = load i16, i16* %19727, align 2, !tbaa !393
  %19729 = insertelement <32 x i16> %19724, i16 %19728, i32 11
  %19730 = extractelement <32 x i32> %19669, i32 12
  %19731 = sext i32 %19730 to i64
  %19732 = getelementptr inbounds i16, i16* %262, i64 %19731
  %19733 = load i16, i16* %19732, align 2, !tbaa !393
  %19734 = insertelement <32 x i16> %19729, i16 %19733, i32 12
  %19735 = extractelement <32 x i32> %19669, i32 13
  %19736 = sext i32 %19735 to i64
  %19737 = getelementptr inbounds i16, i16* %262, i64 %19736
  %19738 = load i16, i16* %19737, align 2, !tbaa !393
  %19739 = insertelement <32 x i16> %19734, i16 %19738, i32 13
  %19740 = extractelement <32 x i32> %19669, i32 14
  %19741 = sext i32 %19740 to i64
  %19742 = getelementptr inbounds i16, i16* %262, i64 %19741
  %19743 = load i16, i16* %19742, align 2, !tbaa !393
  %19744 = insertelement <32 x i16> %19739, i16 %19743, i32 14
  %19745 = extractelement <32 x i32> %19669, i32 15
  %19746 = sext i32 %19745 to i64
  %19747 = getelementptr inbounds i16, i16* %262, i64 %19746
  %19748 = load i16, i16* %19747, align 2, !tbaa !393
  %19749 = insertelement <32 x i16> %19744, i16 %19748, i32 15
  %19750 = extractelement <32 x i32> %19669, i32 16
  %19751 = sext i32 %19750 to i64
  %19752 = getelementptr inbounds i16, i16* %262, i64 %19751
  %19753 = load i16, i16* %19752, align 2, !tbaa !393
  %19754 = insertelement <32 x i16> %19749, i16 %19753, i32 16
  %19755 = extractelement <32 x i32> %19669, i32 17
  %19756 = sext i32 %19755 to i64
  %19757 = getelementptr inbounds i16, i16* %262, i64 %19756
  %19758 = load i16, i16* %19757, align 2, !tbaa !393
  %19759 = insertelement <32 x i16> %19754, i16 %19758, i32 17
  %19760 = extractelement <32 x i32> %19669, i32 18
  %19761 = sext i32 %19760 to i64
  %19762 = getelementptr inbounds i16, i16* %262, i64 %19761
  %19763 = load i16, i16* %19762, align 2, !tbaa !393
  %19764 = insertelement <32 x i16> %19759, i16 %19763, i32 18
  %19765 = extractelement <32 x i32> %19669, i32 19
  %19766 = sext i32 %19765 to i64
  %19767 = getelementptr inbounds i16, i16* %262, i64 %19766
  %19768 = load i16, i16* %19767, align 2, !tbaa !393
  %19769 = insertelement <32 x i16> %19764, i16 %19768, i32 19
  %19770 = extractelement <32 x i32> %19669, i32 20
  %19771 = sext i32 %19770 to i64
  %19772 = getelementptr inbounds i16, i16* %262, i64 %19771
  %19773 = load i16, i16* %19772, align 2, !tbaa !393
  %19774 = insertelement <32 x i16> %19769, i16 %19773, i32 20
  %19775 = extractelement <32 x i32> %19669, i32 21
  %19776 = sext i32 %19775 to i64
  %19777 = getelementptr inbounds i16, i16* %262, i64 %19776
  %19778 = load i16, i16* %19777, align 2, !tbaa !393
  %19779 = insertelement <32 x i16> %19774, i16 %19778, i32 21
  %19780 = extractelement <32 x i32> %19669, i32 22
  %19781 = sext i32 %19780 to i64
  %19782 = getelementptr inbounds i16, i16* %262, i64 %19781
  %19783 = load i16, i16* %19782, align 2, !tbaa !393
  %19784 = insertelement <32 x i16> %19779, i16 %19783, i32 22
  %19785 = extractelement <32 x i32> %19669, i32 23
  %19786 = sext i32 %19785 to i64
  %19787 = getelementptr inbounds i16, i16* %262, i64 %19786
  %19788 = load i16, i16* %19787, align 2, !tbaa !393
  %19789 = insertelement <32 x i16> %19784, i16 %19788, i32 23
  %19790 = extractelement <32 x i32> %19669, i32 24
  %19791 = sext i32 %19790 to i64
  %19792 = getelementptr inbounds i16, i16* %262, i64 %19791
  %19793 = load i16, i16* %19792, align 2, !tbaa !393
  %19794 = insertelement <32 x i16> %19789, i16 %19793, i32 24
  %19795 = extractelement <32 x i32> %19669, i32 25
  %19796 = sext i32 %19795 to i64
  %19797 = getelementptr inbounds i16, i16* %262, i64 %19796
  %19798 = load i16, i16* %19797, align 2, !tbaa !393
  %19799 = insertelement <32 x i16> %19794, i16 %19798, i32 25
  %19800 = extractelement <32 x i32> %19669, i32 26
  %19801 = sext i32 %19800 to i64
  %19802 = getelementptr inbounds i16, i16* %262, i64 %19801
  %19803 = load i16, i16* %19802, align 2, !tbaa !393
  %19804 = insertelement <32 x i16> %19799, i16 %19803, i32 26
  %19805 = extractelement <32 x i32> %19669, i32 27
  %19806 = sext i32 %19805 to i64
  %19807 = getelementptr inbounds i16, i16* %262, i64 %19806
  %19808 = load i16, i16* %19807, align 2, !tbaa !393
  %19809 = insertelement <32 x i16> %19804, i16 %19808, i32 27
  %19810 = extractelement <32 x i32> %19669, i32 28
  %19811 = sext i32 %19810 to i64
  %19812 = getelementptr inbounds i16, i16* %262, i64 %19811
  %19813 = load i16, i16* %19812, align 2, !tbaa !393
  %19814 = insertelement <32 x i16> %19809, i16 %19813, i32 28
  %19815 = extractelement <32 x i32> %19669, i32 29
  %19816 = sext i32 %19815 to i64
  %19817 = getelementptr inbounds i16, i16* %262, i64 %19816
  %19818 = load i16, i16* %19817, align 2, !tbaa !393
  %19819 = insertelement <32 x i16> %19814, i16 %19818, i32 29
  %19820 = extractelement <32 x i32> %19669, i32 30
  %19821 = sext i32 %19820 to i64
  %19822 = getelementptr inbounds i16, i16* %262, i64 %19821
  %19823 = load i16, i16* %19822, align 2, !tbaa !393
  %19824 = insertelement <32 x i16> %19819, i16 %19823, i32 30
  %19825 = extractelement <32 x i32> %19669, i32 31
  %19826 = sext i32 %19825 to i64
  %19827 = getelementptr inbounds i16, i16* %262, i64 %19826
  %19828 = load i16, i16* %19827, align 2, !tbaa !393
  %19829 = insertelement <32 x i16> %19824, i16 %19828, i32 31
  %19830 = shufflevector <32 x i16> %19829, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19831 = sext i32 %read_input.s0.x.v2.base.s890 to i64
  %19832 = add nsw i64 %19633, %19831
  %19833 = getelementptr inbounds i16, i16* %read_input860, i64 %19832
  %19834 = getelementptr inbounds i16, i16* %19833, i64 -32
  %19835 = bitcast i16* %19834 to <16 x i16>*
  store <16 x i16> %19830, <16 x i16>* %19835, align 2, !tbaa !396
  %19836 = shufflevector <32 x i16> %19829, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19837 = getelementptr inbounds i16, i16* %19833, i64 -16
  %19838 = bitcast i16* %19837 to <16 x i16>*
  store <16 x i16> %19836, <16 x i16>* %19838, align 2, !tbaa !396
  %19839 = add nuw nsw i32 %read_input.s0.x.x889, 1
  %.not2729 = icmp eq i32 %19839, %b359
  br i1 %.not2729, label %"end for read_input.s0.x.x888", label %"for read_input.s0.x.x887"

"end for read_input.s0.x.x888":                   ; preds = %"for read_input.s0.x.x887", %"for read_input.s0.y.rebased883"
  br i1 %282, label %"for read_input.s0.x.x.rebased893.preheader", label %"end for read_input.s0.x.x.rebased894", !prof !386

"for read_input.s0.x.x.rebased893.preheader":     ; preds = %"end for read_input.s0.x.x888"
  %19840 = add nuw nsw i64 %19423, %indvars.iv3382
  %19841 = mul nsw i64 %19840, %280
  %19842 = sub i64 %19841, %281
  br i1 %388, label %"end for read_input.s0.x.x.rebased894.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased893"

"for read_input.s0.x.x.rebased893":               ; preds = %"for read_input.s0.x.x.rebased893.preheader", %"for read_input.s0.x.x.rebased893"
  %indvars.iv3379 = phi i64 [ %indvars.iv.next3380.3, %"for read_input.s0.x.x.rebased893" ], [ 0, %"for read_input.s0.x.x.rebased893.preheader" ]
  %niter3695 = phi i64 [ %niter3695.nsub.3, %"for read_input.s0.x.x.rebased893" ], [ %unroll_iter3694, %"for read_input.s0.x.x.rebased893.preheader" ]
  %19843 = add nuw nsw i64 %indvars.iv3379, %381
  %19844 = shl nsw i64 %19843, 5
  %19845 = add nsw i64 %19844, %382
  %19846 = add nsw i64 %19845, %19627
  %19847 = getelementptr inbounds i16, i16* %262, i64 %19846
  %19848 = getelementptr inbounds i16, i16* %19847, i64 -32
  %19849 = bitcast i16* %19848 to <16 x i16>*
  %19850 = load <16 x i16>, <16 x i16>* %19849, align 2, !tbaa !393
  %19851 = getelementptr inbounds i16, i16* %19847, i64 -16
  %19852 = bitcast i16* %19851 to <16 x i16>*
  %19853 = load <16 x i16>, <16 x i16>* %19852, align 2, !tbaa !393
  %19854 = add nsw i64 %19842, %19845
  %19855 = getelementptr inbounds i16, i16* %read_input860, i64 %19854
  %19856 = getelementptr inbounds i16, i16* %19855, i64 -32
  %19857 = bitcast i16* %19856 to <16 x i16>*
  store <16 x i16> %19850, <16 x i16>* %19857, align 2, !tbaa !396
  %19858 = getelementptr inbounds i16, i16* %19855, i64 -16
  %19859 = bitcast i16* %19858 to <16 x i16>*
  store <16 x i16> %19853, <16 x i16>* %19859, align 2, !tbaa !396
  %indvars.iv.next3380 = or i64 %indvars.iv3379, 1
  %19860 = add nuw nsw i64 %indvars.iv.next3380, %381
  %19861 = shl nsw i64 %19860, 5
  %19862 = add nsw i64 %19861, %382
  %19863 = add nsw i64 %19862, %19627
  %19864 = getelementptr inbounds i16, i16* %262, i64 %19863
  %19865 = getelementptr inbounds i16, i16* %19864, i64 -32
  %19866 = bitcast i16* %19865 to <16 x i16>*
  %19867 = load <16 x i16>, <16 x i16>* %19866, align 2, !tbaa !393
  %19868 = getelementptr inbounds i16, i16* %19864, i64 -16
  %19869 = bitcast i16* %19868 to <16 x i16>*
  %19870 = load <16 x i16>, <16 x i16>* %19869, align 2, !tbaa !393
  %19871 = add nsw i64 %19842, %19862
  %19872 = getelementptr inbounds i16, i16* %read_input860, i64 %19871
  %19873 = getelementptr inbounds i16, i16* %19872, i64 -32
  %19874 = bitcast i16* %19873 to <16 x i16>*
  store <16 x i16> %19867, <16 x i16>* %19874, align 2, !tbaa !396
  %19875 = getelementptr inbounds i16, i16* %19872, i64 -16
  %19876 = bitcast i16* %19875 to <16 x i16>*
  store <16 x i16> %19870, <16 x i16>* %19876, align 2, !tbaa !396
  %indvars.iv.next3380.1 = or i64 %indvars.iv3379, 2
  %19877 = add nuw nsw i64 %indvars.iv.next3380.1, %381
  %19878 = shl nsw i64 %19877, 5
  %19879 = add nsw i64 %19878, %382
  %19880 = add nsw i64 %19879, %19627
  %19881 = getelementptr inbounds i16, i16* %262, i64 %19880
  %19882 = getelementptr inbounds i16, i16* %19881, i64 -32
  %19883 = bitcast i16* %19882 to <16 x i16>*
  %19884 = load <16 x i16>, <16 x i16>* %19883, align 2, !tbaa !393
  %19885 = getelementptr inbounds i16, i16* %19881, i64 -16
  %19886 = bitcast i16* %19885 to <16 x i16>*
  %19887 = load <16 x i16>, <16 x i16>* %19886, align 2, !tbaa !393
  %19888 = add nsw i64 %19842, %19879
  %19889 = getelementptr inbounds i16, i16* %read_input860, i64 %19888
  %19890 = getelementptr inbounds i16, i16* %19889, i64 -32
  %19891 = bitcast i16* %19890 to <16 x i16>*
  store <16 x i16> %19884, <16 x i16>* %19891, align 2, !tbaa !396
  %19892 = getelementptr inbounds i16, i16* %19889, i64 -16
  %19893 = bitcast i16* %19892 to <16 x i16>*
  store <16 x i16> %19887, <16 x i16>* %19893, align 2, !tbaa !396
  %indvars.iv.next3380.2 = or i64 %indvars.iv3379, 3
  %19894 = add nuw nsw i64 %indvars.iv.next3380.2, %381
  %19895 = shl nsw i64 %19894, 5
  %19896 = add nsw i64 %19895, %382
  %19897 = add nsw i64 %19896, %19627
  %19898 = getelementptr inbounds i16, i16* %262, i64 %19897
  %19899 = getelementptr inbounds i16, i16* %19898, i64 -32
  %19900 = bitcast i16* %19899 to <16 x i16>*
  %19901 = load <16 x i16>, <16 x i16>* %19900, align 2, !tbaa !393
  %19902 = getelementptr inbounds i16, i16* %19898, i64 -16
  %19903 = bitcast i16* %19902 to <16 x i16>*
  %19904 = load <16 x i16>, <16 x i16>* %19903, align 2, !tbaa !393
  %19905 = add nsw i64 %19842, %19896
  %19906 = getelementptr inbounds i16, i16* %read_input860, i64 %19905
  %19907 = getelementptr inbounds i16, i16* %19906, i64 -32
  %19908 = bitcast i16* %19907 to <16 x i16>*
  store <16 x i16> %19901, <16 x i16>* %19908, align 2, !tbaa !396
  %19909 = getelementptr inbounds i16, i16* %19906, i64 -16
  %19910 = bitcast i16* %19909 to <16 x i16>*
  store <16 x i16> %19904, <16 x i16>* %19910, align 2, !tbaa !396
  %indvars.iv.next3380.3 = add nuw nsw i64 %indvars.iv3379, 4
  %niter3695.nsub.3 = add i64 %niter3695, -4
  %niter3695.ncmp.3 = icmp eq i64 %niter3695.nsub.3, 0
  br i1 %niter3695.ncmp.3, label %"end for read_input.s0.x.x.rebased894.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased893"

"end for read_input.s0.x.x.rebased894.loopexit.unr-lcssa": ; preds = %"for read_input.s0.x.x.rebased893", %"for read_input.s0.x.x.rebased893.preheader"
  %indvars.iv3379.unr = phi i64 [ 0, %"for read_input.s0.x.x.rebased893.preheader" ], [ %indvars.iv.next3380.3, %"for read_input.s0.x.x.rebased893" ]
  br i1 %lcmp.mod3693.not, label %"end for read_input.s0.x.x.rebased894", label %"for read_input.s0.x.x.rebased893.epil"

"for read_input.s0.x.x.rebased893.epil":          ; preds = %"end for read_input.s0.x.x.rebased894.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased893.epil"
  %indvars.iv3379.epil = phi i64 [ %indvars.iv.next3380.epil, %"for read_input.s0.x.x.rebased893.epil" ], [ %indvars.iv3379.unr, %"end for read_input.s0.x.x.rebased894.loopexit.unr-lcssa" ]
  %epil.iter3692 = phi i64 [ %epil.iter3692.sub, %"for read_input.s0.x.x.rebased893.epil" ], [ %xtraiter3691, %"end for read_input.s0.x.x.rebased894.loopexit.unr-lcssa" ]
  %19911 = add nuw nsw i64 %indvars.iv3379.epil, %381
  %19912 = shl nsw i64 %19911, 5
  %19913 = add nsw i64 %19912, %382
  %19914 = add nsw i64 %19913, %19627
  %19915 = getelementptr inbounds i16, i16* %262, i64 %19914
  %19916 = getelementptr inbounds i16, i16* %19915, i64 -32
  %19917 = bitcast i16* %19916 to <16 x i16>*
  %19918 = load <16 x i16>, <16 x i16>* %19917, align 2, !tbaa !393
  %19919 = getelementptr inbounds i16, i16* %19915, i64 -16
  %19920 = bitcast i16* %19919 to <16 x i16>*
  %19921 = load <16 x i16>, <16 x i16>* %19920, align 2, !tbaa !393
  %19922 = add nsw i64 %19842, %19913
  %19923 = getelementptr inbounds i16, i16* %read_input860, i64 %19922
  %19924 = getelementptr inbounds i16, i16* %19923, i64 -32
  %19925 = bitcast i16* %19924 to <16 x i16>*
  store <16 x i16> %19918, <16 x i16>* %19925, align 2, !tbaa !396
  %19926 = getelementptr inbounds i16, i16* %19923, i64 -16
  %19927 = bitcast i16* %19926 to <16 x i16>*
  store <16 x i16> %19921, <16 x i16>* %19927, align 2, !tbaa !396
  %indvars.iv.next3380.epil = add nuw nsw i64 %indvars.iv3379.epil, 1
  %epil.iter3692.sub = add i64 %epil.iter3692, -1
  %epil.iter3692.cmp.not = icmp eq i64 %epil.iter3692.sub, 0
  br i1 %epil.iter3692.cmp.not, label %"end for read_input.s0.x.x.rebased894", label %"for read_input.s0.x.x.rebased893.epil", !llvm.loop !403

"end for read_input.s0.x.x.rebased894":           ; preds = %"end for read_input.s0.x.x.rebased894.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased893.epil", %"end for read_input.s0.x.x888"
  br i1 %283, label %"for read_input.s0.x.x.rebased898.preheader", label %"end for read_input.s0.x.x.rebased899", !prof !386

"for read_input.s0.x.x.rebased898.preheader":     ; preds = %"end for read_input.s0.x.x.rebased894"
  %19928 = trunc i64 %19627 to i32
  %19929 = insertelement <32 x i32> undef, i32 %19928, i32 0
  %19930 = shufflevector <32 x i32> %19929, <32 x i32> undef, <32 x i32> zeroinitializer
  %19931 = add nuw nsw i64 %19423, %indvars.iv3382
  %19932 = mul nsw i64 %19931, %280
  %19933 = sub i64 %19932, %281
  br label %"for read_input.s0.x.x.rebased898"

"for read_input.s0.x.x.rebased898":               ; preds = %"for read_input.s0.x.x.rebased898.preheader", %"for read_input.s0.x.x.rebased898"
  %read_input.s0.x.x.rebased900 = phi i32 [ %20133, %"for read_input.s0.x.x.rebased898" ], [ 0, %"for read_input.s0.x.x.rebased898.preheader" ]
  %19934 = add nsw i32 %read_input.s0.x.x.rebased900, %t1668851
  %19935 = shl nsw i32 %19934, 5
  %a395 = add nsw i32 %19935, %t1694867
  %19936 = icmp sgt i32 %b378, %a395
  %read_input.s0.x.v2.base.s901 = select i1 %19936, i32 %a395, i32 %b378
  %19937 = add nsw i32 %read_input.s0.x.v2.base.s901, -32
  %19938 = insertelement <32 x i32> undef, i32 %19937, i32 0
  %19939 = shufflevector <32 x i32> %19938, <32 x i32> undef, <32 x i32> zeroinitializer
  %a397 = add nsw <32 x i32> %19939, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19940 = shufflevector <32 x i32> %a397, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %19941 = icmp sgt <8 x i32> %273, %19940
  %19942 = shufflevector <32 x i32> %a397, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19943 = icmp sgt <8 x i32> %273, %19942
  %19944 = shufflevector <32 x i32> %a397, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %19945 = icmp sgt <8 x i32> %273, %19944
  %19946 = shufflevector <32 x i32> %a397, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19947 = icmp sgt <8 x i32> %273, %19946
  %19948 = select <8 x i1> %19941, <8 x i32> %19940, <8 x i32> %273
  %19949 = select <8 x i1> %19943, <8 x i32> %19942, <8 x i32> %273
  %19950 = select <8 x i1> %19945, <8 x i32> %19944, <8 x i32> %273
  %19951 = select <8 x i1> %19947, <8 x i32> %19946, <8 x i32> %273
  %19952 = icmp sgt <8 x i32> %19948, %275
  %19953 = icmp sgt <8 x i32> %19949, %275
  %19954 = icmp sgt <8 x i32> %19950, %275
  %19955 = icmp sgt <8 x i32> %19951, %275
  %19956 = select <8 x i1> %19952, <8 x i32> %19948, <8 x i32> %275
  %19957 = select <8 x i1> %19953, <8 x i32> %19949, <8 x i32> %275
  %19958 = select <8 x i1> %19954, <8 x i32> %19950, <8 x i32> %275
  %19959 = select <8 x i1> %19955, <8 x i32> %19951, <8 x i32> %275
  %19960 = shufflevector <8 x i32> %19956, <8 x i32> %19957, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19961 = shufflevector <8 x i32> %19958, <8 x i32> %19959, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19962 = shufflevector <16 x i32> %19960, <16 x i32> %19961, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19963 = add nsw <32 x i32> %19962, %19930
  %19964 = extractelement <32 x i32> %19963, i32 0
  %19965 = sext i32 %19964 to i64
  %19966 = getelementptr inbounds i16, i16* %262, i64 %19965
  %19967 = load i16, i16* %19966, align 2, !tbaa !393
  %19968 = insertelement <32 x i16> undef, i16 %19967, i32 0
  %19969 = extractelement <32 x i32> %19963, i32 1
  %19970 = sext i32 %19969 to i64
  %19971 = getelementptr inbounds i16, i16* %262, i64 %19970
  %19972 = load i16, i16* %19971, align 2, !tbaa !393
  %19973 = insertelement <32 x i16> %19968, i16 %19972, i32 1
  %19974 = extractelement <32 x i32> %19963, i32 2
  %19975 = sext i32 %19974 to i64
  %19976 = getelementptr inbounds i16, i16* %262, i64 %19975
  %19977 = load i16, i16* %19976, align 2, !tbaa !393
  %19978 = insertelement <32 x i16> %19973, i16 %19977, i32 2
  %19979 = extractelement <32 x i32> %19963, i32 3
  %19980 = sext i32 %19979 to i64
  %19981 = getelementptr inbounds i16, i16* %262, i64 %19980
  %19982 = load i16, i16* %19981, align 2, !tbaa !393
  %19983 = insertelement <32 x i16> %19978, i16 %19982, i32 3
  %19984 = extractelement <32 x i32> %19963, i32 4
  %19985 = sext i32 %19984 to i64
  %19986 = getelementptr inbounds i16, i16* %262, i64 %19985
  %19987 = load i16, i16* %19986, align 2, !tbaa !393
  %19988 = insertelement <32 x i16> %19983, i16 %19987, i32 4
  %19989 = extractelement <32 x i32> %19963, i32 5
  %19990 = sext i32 %19989 to i64
  %19991 = getelementptr inbounds i16, i16* %262, i64 %19990
  %19992 = load i16, i16* %19991, align 2, !tbaa !393
  %19993 = insertelement <32 x i16> %19988, i16 %19992, i32 5
  %19994 = extractelement <32 x i32> %19963, i32 6
  %19995 = sext i32 %19994 to i64
  %19996 = getelementptr inbounds i16, i16* %262, i64 %19995
  %19997 = load i16, i16* %19996, align 2, !tbaa !393
  %19998 = insertelement <32 x i16> %19993, i16 %19997, i32 6
  %19999 = extractelement <32 x i32> %19963, i32 7
  %20000 = sext i32 %19999 to i64
  %20001 = getelementptr inbounds i16, i16* %262, i64 %20000
  %20002 = load i16, i16* %20001, align 2, !tbaa !393
  %20003 = insertelement <32 x i16> %19998, i16 %20002, i32 7
  %20004 = extractelement <32 x i32> %19963, i32 8
  %20005 = sext i32 %20004 to i64
  %20006 = getelementptr inbounds i16, i16* %262, i64 %20005
  %20007 = load i16, i16* %20006, align 2, !tbaa !393
  %20008 = insertelement <32 x i16> %20003, i16 %20007, i32 8
  %20009 = extractelement <32 x i32> %19963, i32 9
  %20010 = sext i32 %20009 to i64
  %20011 = getelementptr inbounds i16, i16* %262, i64 %20010
  %20012 = load i16, i16* %20011, align 2, !tbaa !393
  %20013 = insertelement <32 x i16> %20008, i16 %20012, i32 9
  %20014 = extractelement <32 x i32> %19963, i32 10
  %20015 = sext i32 %20014 to i64
  %20016 = getelementptr inbounds i16, i16* %262, i64 %20015
  %20017 = load i16, i16* %20016, align 2, !tbaa !393
  %20018 = insertelement <32 x i16> %20013, i16 %20017, i32 10
  %20019 = extractelement <32 x i32> %19963, i32 11
  %20020 = sext i32 %20019 to i64
  %20021 = getelementptr inbounds i16, i16* %262, i64 %20020
  %20022 = load i16, i16* %20021, align 2, !tbaa !393
  %20023 = insertelement <32 x i16> %20018, i16 %20022, i32 11
  %20024 = extractelement <32 x i32> %19963, i32 12
  %20025 = sext i32 %20024 to i64
  %20026 = getelementptr inbounds i16, i16* %262, i64 %20025
  %20027 = load i16, i16* %20026, align 2, !tbaa !393
  %20028 = insertelement <32 x i16> %20023, i16 %20027, i32 12
  %20029 = extractelement <32 x i32> %19963, i32 13
  %20030 = sext i32 %20029 to i64
  %20031 = getelementptr inbounds i16, i16* %262, i64 %20030
  %20032 = load i16, i16* %20031, align 2, !tbaa !393
  %20033 = insertelement <32 x i16> %20028, i16 %20032, i32 13
  %20034 = extractelement <32 x i32> %19963, i32 14
  %20035 = sext i32 %20034 to i64
  %20036 = getelementptr inbounds i16, i16* %262, i64 %20035
  %20037 = load i16, i16* %20036, align 2, !tbaa !393
  %20038 = insertelement <32 x i16> %20033, i16 %20037, i32 14
  %20039 = extractelement <32 x i32> %19963, i32 15
  %20040 = sext i32 %20039 to i64
  %20041 = getelementptr inbounds i16, i16* %262, i64 %20040
  %20042 = load i16, i16* %20041, align 2, !tbaa !393
  %20043 = insertelement <32 x i16> %20038, i16 %20042, i32 15
  %20044 = extractelement <32 x i32> %19963, i32 16
  %20045 = sext i32 %20044 to i64
  %20046 = getelementptr inbounds i16, i16* %262, i64 %20045
  %20047 = load i16, i16* %20046, align 2, !tbaa !393
  %20048 = insertelement <32 x i16> %20043, i16 %20047, i32 16
  %20049 = extractelement <32 x i32> %19963, i32 17
  %20050 = sext i32 %20049 to i64
  %20051 = getelementptr inbounds i16, i16* %262, i64 %20050
  %20052 = load i16, i16* %20051, align 2, !tbaa !393
  %20053 = insertelement <32 x i16> %20048, i16 %20052, i32 17
  %20054 = extractelement <32 x i32> %19963, i32 18
  %20055 = sext i32 %20054 to i64
  %20056 = getelementptr inbounds i16, i16* %262, i64 %20055
  %20057 = load i16, i16* %20056, align 2, !tbaa !393
  %20058 = insertelement <32 x i16> %20053, i16 %20057, i32 18
  %20059 = extractelement <32 x i32> %19963, i32 19
  %20060 = sext i32 %20059 to i64
  %20061 = getelementptr inbounds i16, i16* %262, i64 %20060
  %20062 = load i16, i16* %20061, align 2, !tbaa !393
  %20063 = insertelement <32 x i16> %20058, i16 %20062, i32 19
  %20064 = extractelement <32 x i32> %19963, i32 20
  %20065 = sext i32 %20064 to i64
  %20066 = getelementptr inbounds i16, i16* %262, i64 %20065
  %20067 = load i16, i16* %20066, align 2, !tbaa !393
  %20068 = insertelement <32 x i16> %20063, i16 %20067, i32 20
  %20069 = extractelement <32 x i32> %19963, i32 21
  %20070 = sext i32 %20069 to i64
  %20071 = getelementptr inbounds i16, i16* %262, i64 %20070
  %20072 = load i16, i16* %20071, align 2, !tbaa !393
  %20073 = insertelement <32 x i16> %20068, i16 %20072, i32 21
  %20074 = extractelement <32 x i32> %19963, i32 22
  %20075 = sext i32 %20074 to i64
  %20076 = getelementptr inbounds i16, i16* %262, i64 %20075
  %20077 = load i16, i16* %20076, align 2, !tbaa !393
  %20078 = insertelement <32 x i16> %20073, i16 %20077, i32 22
  %20079 = extractelement <32 x i32> %19963, i32 23
  %20080 = sext i32 %20079 to i64
  %20081 = getelementptr inbounds i16, i16* %262, i64 %20080
  %20082 = load i16, i16* %20081, align 2, !tbaa !393
  %20083 = insertelement <32 x i16> %20078, i16 %20082, i32 23
  %20084 = extractelement <32 x i32> %19963, i32 24
  %20085 = sext i32 %20084 to i64
  %20086 = getelementptr inbounds i16, i16* %262, i64 %20085
  %20087 = load i16, i16* %20086, align 2, !tbaa !393
  %20088 = insertelement <32 x i16> %20083, i16 %20087, i32 24
  %20089 = extractelement <32 x i32> %19963, i32 25
  %20090 = sext i32 %20089 to i64
  %20091 = getelementptr inbounds i16, i16* %262, i64 %20090
  %20092 = load i16, i16* %20091, align 2, !tbaa !393
  %20093 = insertelement <32 x i16> %20088, i16 %20092, i32 25
  %20094 = extractelement <32 x i32> %19963, i32 26
  %20095 = sext i32 %20094 to i64
  %20096 = getelementptr inbounds i16, i16* %262, i64 %20095
  %20097 = load i16, i16* %20096, align 2, !tbaa !393
  %20098 = insertelement <32 x i16> %20093, i16 %20097, i32 26
  %20099 = extractelement <32 x i32> %19963, i32 27
  %20100 = sext i32 %20099 to i64
  %20101 = getelementptr inbounds i16, i16* %262, i64 %20100
  %20102 = load i16, i16* %20101, align 2, !tbaa !393
  %20103 = insertelement <32 x i16> %20098, i16 %20102, i32 27
  %20104 = extractelement <32 x i32> %19963, i32 28
  %20105 = sext i32 %20104 to i64
  %20106 = getelementptr inbounds i16, i16* %262, i64 %20105
  %20107 = load i16, i16* %20106, align 2, !tbaa !393
  %20108 = insertelement <32 x i16> %20103, i16 %20107, i32 28
  %20109 = extractelement <32 x i32> %19963, i32 29
  %20110 = sext i32 %20109 to i64
  %20111 = getelementptr inbounds i16, i16* %262, i64 %20110
  %20112 = load i16, i16* %20111, align 2, !tbaa !393
  %20113 = insertelement <32 x i16> %20108, i16 %20112, i32 29
  %20114 = extractelement <32 x i32> %19963, i32 30
  %20115 = sext i32 %20114 to i64
  %20116 = getelementptr inbounds i16, i16* %262, i64 %20115
  %20117 = load i16, i16* %20116, align 2, !tbaa !393
  %20118 = insertelement <32 x i16> %20113, i16 %20117, i32 30
  %20119 = extractelement <32 x i32> %19963, i32 31
  %20120 = sext i32 %20119 to i64
  %20121 = getelementptr inbounds i16, i16* %262, i64 %20120
  %20122 = load i16, i16* %20121, align 2, !tbaa !393
  %20123 = insertelement <32 x i16> %20118, i16 %20122, i32 31
  %20124 = shufflevector <32 x i16> %20123, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20125 = sext i32 %read_input.s0.x.v2.base.s901 to i64
  %20126 = add nsw i64 %19933, %20125
  %20127 = getelementptr inbounds i16, i16* %read_input860, i64 %20126
  %20128 = getelementptr inbounds i16, i16* %20127, i64 -32
  %20129 = bitcast i16* %20128 to <16 x i16>*
  store <16 x i16> %20124, <16 x i16>* %20129, align 2, !tbaa !396
  %20130 = shufflevector <32 x i16> %20123, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20131 = getelementptr inbounds i16, i16* %20127, i64 -16
  %20132 = bitcast i16* %20131 to <16 x i16>*
  store <16 x i16> %20130, <16 x i16>* %20132, align 2, !tbaa !396
  %20133 = add nuw nsw i32 %read_input.s0.x.x.rebased900, 1
  %.not2727 = icmp eq i32 %20133, %t1705879
  br i1 %.not2727, label %"end for read_input.s0.x.x.rebased899", label %"for read_input.s0.x.x.rebased898"

"end for read_input.s0.x.x.rebased899":           ; preds = %"for read_input.s0.x.x.rebased898", %"end for read_input.s0.x.x.rebased894"
  %indvars.iv.next3383 = add nuw nsw i64 %indvars.iv3382, 1
  %.not2726 = icmp eq i64 %indvars.iv.next3383, %19425
  br i1 %.not2726, label %"end for read_input.s0.y.rebased884", label %"for read_input.s0.y.rebased883"

"for read_input.s0.y.rebased907":                 ; preds = %"for read_input.s0.y.rebased907.preheader", %"end for read_input.s0.x.x912"
  %indvars.iv3385 = phi i64 [ 0, %"for read_input.s0.y.rebased907.preheader" ], [ %indvars.iv.next3386, %"end for read_input.s0.x.x912" ]
  %20134 = trunc i64 %indvars.iv3385 to i32
  %a406 = add nsw i32 %t1719904, %20134
  %20135 = icmp sgt i32 %b377, %a406
  %a405 = select i1 %20135, i32 %a406, i32 %b377
  %20136 = icmp sgt i32 %a405, 0
  %20137 = select i1 %20136, i32 %a405, i32 0
  %20138 = mul nsw i32 %20137, %211
  %t1723910 = sub nsw i32 %20138, %207
  %20139 = insertelement <32 x i32> undef, i32 %t1723910, i32 0
  %20140 = shufflevector <32 x i32> %20139, <32 x i32> undef, <32 x i32> zeroinitializer
  %20141 = add nuw nsw i64 %19639, %indvars.iv3385
  %20142 = mul nsw i64 %20141, %280
  %20143 = sub i64 %20142, %281
  br label %"for read_input.s0.x.x911"

"end for read_input.s0.y.rebased908":             ; preds = %"end for read_input.s0.x.x912", %"end for read_input.s0.y.rebased884"
  %20144 = load i64, i64* %.fca.1.gep2476, align 8, !tbaa !387
  %cmp.i2913 = icmp ult i64 %20144, %290
  %20145 = load i8*, i8** %.fca.0.gep2475, align 8, !tbaa !389
  br i1 %cmp.i2913, label %if.then.i2916, label %pseudostack_alloc.exit2929, !prof !390

if.then.i2916:                                    ; preds = %"end for read_input.s0.y.rebased908"
  %tobool1.not.i2915 = icmp ne i8* %20145, null
  %20146 = load i64, i64* %.fca.2.gep2477, align 8
  %cmp2.i2918 = icmp ugt i64 %20146, 16384
  %or.cond2960 = and i1 %tobool1.not.i2915, %cmp2.i2918
  br i1 %or.cond2960, label %if.then3.i2920, label %if.end.i2924

if.then3.i2920:                                   ; preds = %if.then.i2916
  call void @halide_free(i8* null, i8* nonnull %20145) #16
  %.pre3503 = load i64, i64* %.fca.2.gep2477, align 8, !tbaa !391
  br label %if.end.i2924

if.end.i2924:                                     ; preds = %if.then3.i2920, %if.then.i2916
  %20147 = phi i64 [ %.pre3503, %if.then3.i2920 ], [ %20146, %if.then.i2916 ]
  %add.i2922 = add i64 %20147, %290
  store i64 %add.i2922, i64* %.fca.2.gep2477, align 8, !tbaa !391
  %cmp7.i2923 = icmp ugt i64 %add.i2922, 16384
  br i1 %cmp7.i2923, label %if.then8.i2926, label %if.end11.i2928

if.then8.i2926:                                   ; preds = %if.end.i2924
  %call.i2925 = call i8* @halide_malloc(i8* null, i64 %290) #16
  br label %if.end11.i2928

if.end11.i2928:                                   ; preds = %if.then8.i2926, %if.end.i2924
  %storemerge.i2927 = phi i8* [ %call.i2925, %if.then8.i2926 ], [ null, %if.end.i2924 ]
  store i8* %storemerge.i2927, i8** %.fca.0.gep2475, align 8, !tbaa !389
  store i64 %290, i64* %.fca.1.gep2476, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2929

pseudostack_alloc.exit2929:                       ; preds = %"end for read_input.s0.y.rebased908", %if.end11.i2928
  %20148 = phi i8* [ %storemerge.i2927, %if.end11.i2928 ], [ %20145, %"end for read_input.s0.y.rebased908" ]
  %20149 = bitcast i8* %20148 to i16*
  %.not2645 = icmp eq i8* %20148, null
  br i1 %.not2645, label %then_bb916, label %"consume read_input918", !prof !392

"for read_input.s0.x.x911":                       ; preds = %"for read_input.s0.y.rebased907", %"for read_input.s0.x.x911"
  %read_input.s0.x.x913 = phi i32 [ %20348, %"for read_input.s0.x.x911" ], [ 0, %"for read_input.s0.y.rebased907" ]
  %20150 = shl nsw i32 %read_input.s0.x.x913, 5
  %a407 = add nsw i32 %20150, %t1694867
  %20151 = icmp sgt i32 %b378, %a407
  %read_input.s0.x.v2.base.s914 = select i1 %20151, i32 %a407, i32 %b378
  %20152 = add nsw i32 %read_input.s0.x.v2.base.s914, -32
  %20153 = insertelement <32 x i32> undef, i32 %20152, i32 0
  %20154 = shufflevector <32 x i32> %20153, <32 x i32> undef, <32 x i32> zeroinitializer
  %a409 = add nsw <32 x i32> %20154, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20155 = shufflevector <32 x i32> %a409, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %20156 = icmp sgt <8 x i32> %273, %20155
  %20157 = shufflevector <32 x i32> %a409, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20158 = icmp sgt <8 x i32> %273, %20157
  %20159 = shufflevector <32 x i32> %a409, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %20160 = icmp sgt <8 x i32> %273, %20159
  %20161 = shufflevector <32 x i32> %a409, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20162 = icmp sgt <8 x i32> %273, %20161
  %20163 = select <8 x i1> %20156, <8 x i32> %20155, <8 x i32> %273
  %20164 = select <8 x i1> %20158, <8 x i32> %20157, <8 x i32> %273
  %20165 = select <8 x i1> %20160, <8 x i32> %20159, <8 x i32> %273
  %20166 = select <8 x i1> %20162, <8 x i32> %20161, <8 x i32> %273
  %20167 = icmp sgt <8 x i32> %20163, %275
  %20168 = icmp sgt <8 x i32> %20164, %275
  %20169 = icmp sgt <8 x i32> %20165, %275
  %20170 = icmp sgt <8 x i32> %20166, %275
  %20171 = select <8 x i1> %20167, <8 x i32> %20163, <8 x i32> %275
  %20172 = select <8 x i1> %20168, <8 x i32> %20164, <8 x i32> %275
  %20173 = select <8 x i1> %20169, <8 x i32> %20165, <8 x i32> %275
  %20174 = select <8 x i1> %20170, <8 x i32> %20166, <8 x i32> %275
  %20175 = shufflevector <8 x i32> %20171, <8 x i32> %20172, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20176 = shufflevector <8 x i32> %20173, <8 x i32> %20174, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20177 = shufflevector <16 x i32> %20175, <16 x i32> %20176, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20178 = add nsw <32 x i32> %20177, %20140
  %20179 = extractelement <32 x i32> %20178, i32 0
  %20180 = sext i32 %20179 to i64
  %20181 = getelementptr inbounds i16, i16* %262, i64 %20180
  %20182 = load i16, i16* %20181, align 2, !tbaa !393
  %20183 = insertelement <32 x i16> undef, i16 %20182, i32 0
  %20184 = extractelement <32 x i32> %20178, i32 1
  %20185 = sext i32 %20184 to i64
  %20186 = getelementptr inbounds i16, i16* %262, i64 %20185
  %20187 = load i16, i16* %20186, align 2, !tbaa !393
  %20188 = insertelement <32 x i16> %20183, i16 %20187, i32 1
  %20189 = extractelement <32 x i32> %20178, i32 2
  %20190 = sext i32 %20189 to i64
  %20191 = getelementptr inbounds i16, i16* %262, i64 %20190
  %20192 = load i16, i16* %20191, align 2, !tbaa !393
  %20193 = insertelement <32 x i16> %20188, i16 %20192, i32 2
  %20194 = extractelement <32 x i32> %20178, i32 3
  %20195 = sext i32 %20194 to i64
  %20196 = getelementptr inbounds i16, i16* %262, i64 %20195
  %20197 = load i16, i16* %20196, align 2, !tbaa !393
  %20198 = insertelement <32 x i16> %20193, i16 %20197, i32 3
  %20199 = extractelement <32 x i32> %20178, i32 4
  %20200 = sext i32 %20199 to i64
  %20201 = getelementptr inbounds i16, i16* %262, i64 %20200
  %20202 = load i16, i16* %20201, align 2, !tbaa !393
  %20203 = insertelement <32 x i16> %20198, i16 %20202, i32 4
  %20204 = extractelement <32 x i32> %20178, i32 5
  %20205 = sext i32 %20204 to i64
  %20206 = getelementptr inbounds i16, i16* %262, i64 %20205
  %20207 = load i16, i16* %20206, align 2, !tbaa !393
  %20208 = insertelement <32 x i16> %20203, i16 %20207, i32 5
  %20209 = extractelement <32 x i32> %20178, i32 6
  %20210 = sext i32 %20209 to i64
  %20211 = getelementptr inbounds i16, i16* %262, i64 %20210
  %20212 = load i16, i16* %20211, align 2, !tbaa !393
  %20213 = insertelement <32 x i16> %20208, i16 %20212, i32 6
  %20214 = extractelement <32 x i32> %20178, i32 7
  %20215 = sext i32 %20214 to i64
  %20216 = getelementptr inbounds i16, i16* %262, i64 %20215
  %20217 = load i16, i16* %20216, align 2, !tbaa !393
  %20218 = insertelement <32 x i16> %20213, i16 %20217, i32 7
  %20219 = extractelement <32 x i32> %20178, i32 8
  %20220 = sext i32 %20219 to i64
  %20221 = getelementptr inbounds i16, i16* %262, i64 %20220
  %20222 = load i16, i16* %20221, align 2, !tbaa !393
  %20223 = insertelement <32 x i16> %20218, i16 %20222, i32 8
  %20224 = extractelement <32 x i32> %20178, i32 9
  %20225 = sext i32 %20224 to i64
  %20226 = getelementptr inbounds i16, i16* %262, i64 %20225
  %20227 = load i16, i16* %20226, align 2, !tbaa !393
  %20228 = insertelement <32 x i16> %20223, i16 %20227, i32 9
  %20229 = extractelement <32 x i32> %20178, i32 10
  %20230 = sext i32 %20229 to i64
  %20231 = getelementptr inbounds i16, i16* %262, i64 %20230
  %20232 = load i16, i16* %20231, align 2, !tbaa !393
  %20233 = insertelement <32 x i16> %20228, i16 %20232, i32 10
  %20234 = extractelement <32 x i32> %20178, i32 11
  %20235 = sext i32 %20234 to i64
  %20236 = getelementptr inbounds i16, i16* %262, i64 %20235
  %20237 = load i16, i16* %20236, align 2, !tbaa !393
  %20238 = insertelement <32 x i16> %20233, i16 %20237, i32 11
  %20239 = extractelement <32 x i32> %20178, i32 12
  %20240 = sext i32 %20239 to i64
  %20241 = getelementptr inbounds i16, i16* %262, i64 %20240
  %20242 = load i16, i16* %20241, align 2, !tbaa !393
  %20243 = insertelement <32 x i16> %20238, i16 %20242, i32 12
  %20244 = extractelement <32 x i32> %20178, i32 13
  %20245 = sext i32 %20244 to i64
  %20246 = getelementptr inbounds i16, i16* %262, i64 %20245
  %20247 = load i16, i16* %20246, align 2, !tbaa !393
  %20248 = insertelement <32 x i16> %20243, i16 %20247, i32 13
  %20249 = extractelement <32 x i32> %20178, i32 14
  %20250 = sext i32 %20249 to i64
  %20251 = getelementptr inbounds i16, i16* %262, i64 %20250
  %20252 = load i16, i16* %20251, align 2, !tbaa !393
  %20253 = insertelement <32 x i16> %20248, i16 %20252, i32 14
  %20254 = extractelement <32 x i32> %20178, i32 15
  %20255 = sext i32 %20254 to i64
  %20256 = getelementptr inbounds i16, i16* %262, i64 %20255
  %20257 = load i16, i16* %20256, align 2, !tbaa !393
  %20258 = insertelement <32 x i16> %20253, i16 %20257, i32 15
  %20259 = extractelement <32 x i32> %20178, i32 16
  %20260 = sext i32 %20259 to i64
  %20261 = getelementptr inbounds i16, i16* %262, i64 %20260
  %20262 = load i16, i16* %20261, align 2, !tbaa !393
  %20263 = insertelement <32 x i16> %20258, i16 %20262, i32 16
  %20264 = extractelement <32 x i32> %20178, i32 17
  %20265 = sext i32 %20264 to i64
  %20266 = getelementptr inbounds i16, i16* %262, i64 %20265
  %20267 = load i16, i16* %20266, align 2, !tbaa !393
  %20268 = insertelement <32 x i16> %20263, i16 %20267, i32 17
  %20269 = extractelement <32 x i32> %20178, i32 18
  %20270 = sext i32 %20269 to i64
  %20271 = getelementptr inbounds i16, i16* %262, i64 %20270
  %20272 = load i16, i16* %20271, align 2, !tbaa !393
  %20273 = insertelement <32 x i16> %20268, i16 %20272, i32 18
  %20274 = extractelement <32 x i32> %20178, i32 19
  %20275 = sext i32 %20274 to i64
  %20276 = getelementptr inbounds i16, i16* %262, i64 %20275
  %20277 = load i16, i16* %20276, align 2, !tbaa !393
  %20278 = insertelement <32 x i16> %20273, i16 %20277, i32 19
  %20279 = extractelement <32 x i32> %20178, i32 20
  %20280 = sext i32 %20279 to i64
  %20281 = getelementptr inbounds i16, i16* %262, i64 %20280
  %20282 = load i16, i16* %20281, align 2, !tbaa !393
  %20283 = insertelement <32 x i16> %20278, i16 %20282, i32 20
  %20284 = extractelement <32 x i32> %20178, i32 21
  %20285 = sext i32 %20284 to i64
  %20286 = getelementptr inbounds i16, i16* %262, i64 %20285
  %20287 = load i16, i16* %20286, align 2, !tbaa !393
  %20288 = insertelement <32 x i16> %20283, i16 %20287, i32 21
  %20289 = extractelement <32 x i32> %20178, i32 22
  %20290 = sext i32 %20289 to i64
  %20291 = getelementptr inbounds i16, i16* %262, i64 %20290
  %20292 = load i16, i16* %20291, align 2, !tbaa !393
  %20293 = insertelement <32 x i16> %20288, i16 %20292, i32 22
  %20294 = extractelement <32 x i32> %20178, i32 23
  %20295 = sext i32 %20294 to i64
  %20296 = getelementptr inbounds i16, i16* %262, i64 %20295
  %20297 = load i16, i16* %20296, align 2, !tbaa !393
  %20298 = insertelement <32 x i16> %20293, i16 %20297, i32 23
  %20299 = extractelement <32 x i32> %20178, i32 24
  %20300 = sext i32 %20299 to i64
  %20301 = getelementptr inbounds i16, i16* %262, i64 %20300
  %20302 = load i16, i16* %20301, align 2, !tbaa !393
  %20303 = insertelement <32 x i16> %20298, i16 %20302, i32 24
  %20304 = extractelement <32 x i32> %20178, i32 25
  %20305 = sext i32 %20304 to i64
  %20306 = getelementptr inbounds i16, i16* %262, i64 %20305
  %20307 = load i16, i16* %20306, align 2, !tbaa !393
  %20308 = insertelement <32 x i16> %20303, i16 %20307, i32 25
  %20309 = extractelement <32 x i32> %20178, i32 26
  %20310 = sext i32 %20309 to i64
  %20311 = getelementptr inbounds i16, i16* %262, i64 %20310
  %20312 = load i16, i16* %20311, align 2, !tbaa !393
  %20313 = insertelement <32 x i16> %20308, i16 %20312, i32 26
  %20314 = extractelement <32 x i32> %20178, i32 27
  %20315 = sext i32 %20314 to i64
  %20316 = getelementptr inbounds i16, i16* %262, i64 %20315
  %20317 = load i16, i16* %20316, align 2, !tbaa !393
  %20318 = insertelement <32 x i16> %20313, i16 %20317, i32 27
  %20319 = extractelement <32 x i32> %20178, i32 28
  %20320 = sext i32 %20319 to i64
  %20321 = getelementptr inbounds i16, i16* %262, i64 %20320
  %20322 = load i16, i16* %20321, align 2, !tbaa !393
  %20323 = insertelement <32 x i16> %20318, i16 %20322, i32 28
  %20324 = extractelement <32 x i32> %20178, i32 29
  %20325 = sext i32 %20324 to i64
  %20326 = getelementptr inbounds i16, i16* %262, i64 %20325
  %20327 = load i16, i16* %20326, align 2, !tbaa !393
  %20328 = insertelement <32 x i16> %20323, i16 %20327, i32 29
  %20329 = extractelement <32 x i32> %20178, i32 30
  %20330 = sext i32 %20329 to i64
  %20331 = getelementptr inbounds i16, i16* %262, i64 %20330
  %20332 = load i16, i16* %20331, align 2, !tbaa !393
  %20333 = insertelement <32 x i16> %20328, i16 %20332, i32 30
  %20334 = extractelement <32 x i32> %20178, i32 31
  %20335 = sext i32 %20334 to i64
  %20336 = getelementptr inbounds i16, i16* %262, i64 %20335
  %20337 = load i16, i16* %20336, align 2, !tbaa !393
  %20338 = insertelement <32 x i16> %20333, i16 %20337, i32 31
  %20339 = shufflevector <32 x i16> %20338, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20340 = sext i32 %read_input.s0.x.v2.base.s914 to i64
  %20341 = add nsw i64 %20143, %20340
  %20342 = getelementptr inbounds i16, i16* %read_input860, i64 %20341
  %20343 = getelementptr inbounds i16, i16* %20342, i64 -32
  %20344 = bitcast i16* %20343 to <16 x i16>*
  store <16 x i16> %20339, <16 x i16>* %20344, align 2, !tbaa !396
  %20345 = shufflevector <32 x i16> %20338, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20346 = getelementptr inbounds i16, i16* %20342, i64 -16
  %20347 = bitcast i16* %20346 to <16 x i16>*
  store <16 x i16> %20345, <16 x i16>* %20347, align 2, !tbaa !396
  %20348 = add nuw nsw i32 %read_input.s0.x.x913, 1
  %.not2725 = icmp eq i32 %20348, %218
  br i1 %.not2725, label %"end for read_input.s0.x.x912", label %"for read_input.s0.x.x911"

"end for read_input.s0.x.x912":                   ; preds = %"for read_input.s0.x.x911"
  %indvars.iv.next3386 = add nuw nsw i64 %indvars.iv3385, 1
  %.not2724 = icmp eq i64 %indvars.iv3385, %19640
  br i1 %.not2724, label %"end for read_input.s0.y.rebased908", label %"for read_input.s0.y.rebased907"

then_bb916:                                       ; preds = %pseudostack_alloc.exit2929
  %20349 = alloca i8*, i64 %290, align 32
  %20350 = bitcast i8** %20349 to i16*
  store i8** %20349, i8*** %291, align 8
  br label %"consume read_input918"

"consume read_input918":                          ; preds = %pseudostack_alloc.exit2929, %then_bb916
  %blur_x917 = phi i16* [ %20350, %then_bb916 ], [ %20149, %pseudostack_alloc.exit2929 ]
  br i1 %232, label %"produce blur_x922", label %"consume read_input918.after_bb919_crit_edge"

"consume read_input918.after_bb919_crit_edge":    ; preds = %"consume read_input918"
  %.pre3597 = and i32 %a367, 7
  br label %after_bb919

after_bb919:                                      ; preds = %"consume read_input918.after_bb919_crit_edge", %"produce blur_x922"
  %.pre-phi3598 = phi i32 [ %.pre3597, %"consume read_input918.after_bb919_crit_edge" ], [ %20415, %"produce blur_x922" ]
  %20351 = mul nsw i32 %.pre-phi3598, %a414
  %t1726924 = sub nsw i32 %20351, %t1689849
  br i1 %298, label %"for blur_y.s0.x.x.rebased927.preheader", label %"end for blur_y.s0.x.x.rebased928", !prof !386

"for blur_y.s0.x.x.rebased927.preheader":         ; preds = %after_bb919
  %20352 = sext i32 %t1726924 to i64
  br label %"for blur_y.s0.x.x.rebased927"

"produce blur_x922":                              ; preds = %"consume read_input918"
  %20353 = getelementptr inbounds i16, i16* %read_input860, i64 %292
  %20354 = getelementptr inbounds i16, i16* %20353, i64 -31
  %20355 = bitcast i16* %20354 to <16 x i16>*
  %20356 = load <16 x i16>, <16 x i16>* %20355, align 2, !tbaa !396
  %20357 = getelementptr inbounds i16, i16* %20353, i64 -15
  %20358 = bitcast i16* %20357 to <16 x i16>*
  %20359 = load <16 x i16>, <16 x i16>* %20358, align 2, !tbaa !396
  %20360 = getelementptr inbounds i16, i16* %20353, i64 -32
  %20361 = bitcast i16* %20360 to <16 x i16>*
  %20362 = load <16 x i16>, <16 x i16>* %20361, align 2, !tbaa !396
  %20363 = getelementptr inbounds i16, i16* %20353, i64 -16
  %20364 = bitcast i16* %20363 to <16 x i16>*
  %20365 = load <16 x i16>, <16 x i16>* %20364, align 2, !tbaa !396
  %20366 = getelementptr inbounds i16, i16* %20353, i64 -30
  %20367 = bitcast i16* %20366 to <16 x i16>*
  %20368 = load <16 x i16>, <16 x i16>* %20367, align 2, !tbaa !396
  %20369 = getelementptr inbounds i16, i16* %20353, i64 -14
  %20370 = bitcast i16* %20369 to <16 x i16>*
  %20371 = load <16 x i16>, <16 x i16>* %20370, align 2, !tbaa !396
  %20372 = getelementptr inbounds i16, i16* %20353, i64 -29
  %20373 = bitcast i16* %20372 to <16 x i16>*
  %20374 = load <16 x i16>, <16 x i16>* %20373, align 2, !tbaa !396
  %20375 = getelementptr inbounds i16, i16* %20353, i64 -13
  %20376 = bitcast i16* %20375 to <16 x i16>*
  %20377 = load <16 x i16>, <16 x i16>* %20376, align 2, !tbaa !396
  %20378 = getelementptr inbounds i16, i16* %20353, i64 -28
  %20379 = bitcast i16* %20378 to <16 x i16>*
  %20380 = load <16 x i16>, <16 x i16>* %20379, align 2, !tbaa !396
  %20381 = getelementptr inbounds i16, i16* %20353, i64 -12
  %20382 = bitcast i16* %20381 to <16 x i16>*
  %20383 = load <16 x i16>, <16 x i16>* %20382, align 2, !tbaa !396
  %20384 = getelementptr inbounds i16, i16* %20353, i64 -26
  %20385 = bitcast i16* %20384 to <16 x i16>*
  %20386 = load <16 x i16>, <16 x i16>* %20385, align 2, !tbaa !396
  %20387 = getelementptr inbounds i16, i16* %20353, i64 -10
  %20388 = bitcast i16* %20387 to <16 x i16>*
  %20389 = load <16 x i16>, <16 x i16>* %20388, align 2, !tbaa !396
  %20390 = getelementptr inbounds i16, i16* %20353, i64 -27
  %20391 = bitcast i16* %20390 to <16 x i16>*
  %20392 = load <16 x i16>, <16 x i16>* %20391, align 2, !tbaa !396
  %20393 = getelementptr inbounds i16, i16* %20353, i64 -11
  %20394 = bitcast i16* %20393 to <16 x i16>*
  %20395 = load <16 x i16>, <16 x i16>* %20394, align 2, !tbaa !396
  %20396 = add <16 x i16> %20362, %20356
  %20397 = add <16 x i16> %20396, %20368
  %20398 = add <16 x i16> %20397, %20374
  %20399 = add <16 x i16> %20398, %20380
  %20400 = add <16 x i16> %20399, %20386
  %20401 = add <16 x i16> %20400, %20392
  %20402 = add <16 x i16> %20365, %20359
  %20403 = add <16 x i16> %20402, %20371
  %20404 = add <16 x i16> %20403, %20377
  %20405 = add <16 x i16> %20404, %20383
  %20406 = add <16 x i16> %20405, %20389
  %20407 = add <16 x i16> %20406, %20395
  %20408 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20401, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %20409 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20407, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %20410 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %20408, <16 x i16> %20401)
  %20411 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %20409, <16 x i16> %20407)
  %20412 = shufflevector <16 x i16> %20410, <16 x i16> %20411, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20413 = lshr <32 x i16> %20412, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20414 = shufflevector <32 x i16> %20413, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20415 = and i32 %a367, 7
  %20416 = zext i32 %20415 to i64
  %20417 = mul nsw i64 %295, %20416
  %20418 = add nsw i64 %297, %20417
  %20419 = getelementptr inbounds i16, i16* %blur_x917, i64 %20418
  %20420 = getelementptr inbounds i16, i16* %20419, i64 -32
  %20421 = bitcast i16* %20420 to <16 x i16>*
  store <16 x i16> %20414, <16 x i16>* %20421, align 2, !tbaa !399
  %20422 = shufflevector <32 x i16> %20413, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20423 = getelementptr inbounds i16, i16* %20419, i64 -16
  %20424 = bitcast i16* %20423 to <16 x i16>*
  store <16 x i16> %20422, <16 x i16>* %20424, align 2, !tbaa !399
  br label %after_bb919

"for blur_y.s0.x.x.rebased927":                   ; preds = %"for blur_y.s0.x.x.rebased927.preheader", %after_bb930
  %indvars.iv3387 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased927.preheader" ], [ %indvars.iv.next3388, %after_bb930 ]
  %20425 = add nsw i64 %indvars.iv3387, %299
  %20426 = icmp slt i64 %20425, 1
  %20427 = trunc i64 %20425 to i32
  %20428 = shl nsw i32 %20427, 5
  %20429 = icmp sgt i32 %202, %20428
  %20430 = or i1 %20426, %20429
  br i1 %20430, label %"produce blur_x934", label %after_bb930

"end for blur_y.s0.x.x.rebased928":               ; preds = %after_bb930, %after_bb919
  br i1 %300, label %"for blur_y.s0.x.x.rebased939.preheader", label %"end for blur_y.s0.x.x.rebased940", !prof !386

"for blur_y.s0.x.x.rebased939.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased928"
  %20431 = sext i32 %t1726924 to i64
  br label %"for blur_y.s0.x.x.rebased939"

after_bb930:                                      ; preds = %"for blur_y.s0.x.x.rebased927", %"produce blur_x934"
  %indvars.iv.next3388 = add nuw nsw i64 %indvars.iv3387, 1
  %.not2722 = icmp eq i64 %indvars.iv.next3388, %386
  br i1 %.not2722, label %"end for blur_y.s0.x.x.rebased928", label %"for blur_y.s0.x.x.rebased927"

"produce blur_x934":                              ; preds = %"for blur_y.s0.x.x.rebased927"
  %t712935 = sub i32 %20428, %t1689849
  %20432 = sext i32 %t712935 to i64
  %20433 = getelementptr inbounds i16, i16* %read_input860, i64 %20432
  %20434 = getelementptr inbounds i16, i16* %20433, i64 1
  %20435 = bitcast i16* %20434 to <16 x i16>*
  %20436 = load <16 x i16>, <16 x i16>* %20435, align 2, !tbaa !396
  %20437 = getelementptr inbounds i16, i16* %20433, i64 17
  %20438 = bitcast i16* %20437 to <16 x i16>*
  %20439 = load <16 x i16>, <16 x i16>* %20438, align 2, !tbaa !396
  %20440 = bitcast i16* %20433 to <16 x i16>*
  %20441 = load <16 x i16>, <16 x i16>* %20440, align 2, !tbaa !396
  %20442 = getelementptr inbounds i16, i16* %20433, i64 16
  %20443 = bitcast i16* %20442 to <16 x i16>*
  %20444 = load <16 x i16>, <16 x i16>* %20443, align 2, !tbaa !396
  %20445 = getelementptr inbounds i16, i16* %20433, i64 2
  %20446 = bitcast i16* %20445 to <16 x i16>*
  %20447 = load <16 x i16>, <16 x i16>* %20446, align 2, !tbaa !396
  %20448 = getelementptr inbounds i16, i16* %20433, i64 18
  %20449 = bitcast i16* %20448 to <16 x i16>*
  %20450 = load <16 x i16>, <16 x i16>* %20449, align 2, !tbaa !396
  %20451 = getelementptr inbounds i16, i16* %20433, i64 3
  %20452 = bitcast i16* %20451 to <16 x i16>*
  %20453 = load <16 x i16>, <16 x i16>* %20452, align 2, !tbaa !396
  %20454 = getelementptr inbounds i16, i16* %20433, i64 19
  %20455 = bitcast i16* %20454 to <16 x i16>*
  %20456 = load <16 x i16>, <16 x i16>* %20455, align 2, !tbaa !396
  %20457 = getelementptr inbounds i16, i16* %20433, i64 4
  %20458 = bitcast i16* %20457 to <16 x i16>*
  %20459 = load <16 x i16>, <16 x i16>* %20458, align 2, !tbaa !396
  %20460 = getelementptr inbounds i16, i16* %20433, i64 20
  %20461 = bitcast i16* %20460 to <16 x i16>*
  %20462 = load <16 x i16>, <16 x i16>* %20461, align 2, !tbaa !396
  %20463 = getelementptr inbounds i16, i16* %20433, i64 6
  %20464 = bitcast i16* %20463 to <16 x i16>*
  %20465 = load <16 x i16>, <16 x i16>* %20464, align 2, !tbaa !396
  %20466 = getelementptr inbounds i16, i16* %20433, i64 22
  %20467 = bitcast i16* %20466 to <16 x i16>*
  %20468 = load <16 x i16>, <16 x i16>* %20467, align 2, !tbaa !396
  %20469 = getelementptr inbounds i16, i16* %20433, i64 5
  %20470 = bitcast i16* %20469 to <16 x i16>*
  %20471 = load <16 x i16>, <16 x i16>* %20470, align 2, !tbaa !396
  %20472 = getelementptr inbounds i16, i16* %20433, i64 21
  %20473 = bitcast i16* %20472 to <16 x i16>*
  %20474 = load <16 x i16>, <16 x i16>* %20473, align 2, !tbaa !396
  %20475 = add <16 x i16> %20441, %20436
  %20476 = add <16 x i16> %20475, %20447
  %20477 = add <16 x i16> %20476, %20453
  %20478 = add <16 x i16> %20477, %20459
  %20479 = add <16 x i16> %20478, %20465
  %20480 = add <16 x i16> %20479, %20471
  %20481 = add <16 x i16> %20444, %20439
  %20482 = add <16 x i16> %20481, %20450
  %20483 = add <16 x i16> %20482, %20456
  %20484 = add <16 x i16> %20483, %20462
  %20485 = add <16 x i16> %20484, %20468
  %20486 = add <16 x i16> %20485, %20474
  %20487 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20480, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %20488 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20486, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %20489 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %20487, <16 x i16> %20480)
  %20490 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %20488, <16 x i16> %20486)
  %20491 = shufflevector <16 x i16> %20489, <16 x i16> %20490, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20492 = lshr <32 x i16> %20491, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20493 = shufflevector <32 x i16> %20492, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20494 = shl nsw i64 %20425, 5
  %20495 = add nsw i64 %20494, %20352
  %20496 = getelementptr inbounds i16, i16* %blur_x917, i64 %20495
  %20497 = bitcast i16* %20496 to <16 x i16>*
  store <16 x i16> %20493, <16 x i16>* %20497, align 2, !tbaa !399
  %20498 = shufflevector <32 x i16> %20492, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20499 = getelementptr inbounds i16, i16* %20496, i64 16
  %20500 = bitcast i16* %20499 to <16 x i16>*
  store <16 x i16> %20498, <16 x i16>* %20500, align 2, !tbaa !399
  br label %after_bb930

"for blur_y.s0.x.x.rebased939":                   ; preds = %"for blur_y.s0.x.x.rebased939.preheader", %after_bb942
  %blur_y.s0.x.x.rebased941 = phi i32 [ %20505, %after_bb942 ], [ 0, %"for blur_y.s0.x.x.rebased939.preheader" ]
  %t2275945 = add nsw i32 %blur_y.s0.x.x.rebased941, %t1670852
  %20501 = icmp slt i32 %t2275945, 1
  %20502 = shl nsw i32 %t2275945, 5
  %20503 = icmp sgt i32 %202, %20502
  %20504 = or i1 %20501, %20503
  br i1 %20504, label %then_bb943, label %after_bb942

"end for blur_y.s0.x.x.rebased940":               ; preds = %after_bb942, %"end for blur_y.s0.x.x.rebased928"
  br i1 %232, label %"produce blur_x952", label %"end for blur_y.s0.x.x.rebased940.after_bb949_crit_edge"

"end for blur_y.s0.x.x.rebased940.after_bb949_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased940"
  %.pre3599 = add nsw i32 %a367, 1
  %.pre3601 = and i32 %.pre3599, 7
  br label %after_bb949

after_bb942:                                      ; preds = %"for blur_y.s0.x.x.rebased939", %then_bb943
  %20505 = add nuw nsw i32 %blur_y.s0.x.x.rebased941, 1
  %.not2721 = icmp eq i32 %20505, %t1727937
  br i1 %.not2721, label %"end for blur_y.s0.x.x.rebased940", label %"for blur_y.s0.x.x.rebased939"

then_bb943:                                       ; preds = %"for blur_y.s0.x.x.rebased939"
  %20506 = icmp sgt i32 %a355, %20502
  %b424 = select i1 %20506, i32 %20502, i32 %a355
  %20507 = icmp slt i32 %b424, %202
  %blur_x.s0.x.v1.base.s947 = select i1 %20507, i32 %b424, i32 %202
  %t714948 = sub i32 %blur_x.s0.x.v1.base.s947, %t1689849
  %20508 = sext i32 %t714948 to i64
  %20509 = getelementptr inbounds i16, i16* %read_input860, i64 %20508
  %20510 = getelementptr inbounds i16, i16* %20509, i64 1
  %20511 = bitcast i16* %20510 to <16 x i16>*
  %20512 = load <16 x i16>, <16 x i16>* %20511, align 2, !tbaa !396
  %20513 = getelementptr inbounds i16, i16* %20509, i64 17
  %20514 = bitcast i16* %20513 to <16 x i16>*
  %20515 = load <16 x i16>, <16 x i16>* %20514, align 2, !tbaa !396
  %20516 = bitcast i16* %20509 to <16 x i16>*
  %20517 = load <16 x i16>, <16 x i16>* %20516, align 2, !tbaa !396
  %20518 = getelementptr inbounds i16, i16* %20509, i64 16
  %20519 = bitcast i16* %20518 to <16 x i16>*
  %20520 = load <16 x i16>, <16 x i16>* %20519, align 2, !tbaa !396
  %20521 = getelementptr inbounds i16, i16* %20509, i64 2
  %20522 = bitcast i16* %20521 to <16 x i16>*
  %20523 = load <16 x i16>, <16 x i16>* %20522, align 2, !tbaa !396
  %20524 = getelementptr inbounds i16, i16* %20509, i64 18
  %20525 = bitcast i16* %20524 to <16 x i16>*
  %20526 = load <16 x i16>, <16 x i16>* %20525, align 2, !tbaa !396
  %20527 = getelementptr inbounds i16, i16* %20509, i64 3
  %20528 = bitcast i16* %20527 to <16 x i16>*
  %20529 = load <16 x i16>, <16 x i16>* %20528, align 2, !tbaa !396
  %20530 = getelementptr inbounds i16, i16* %20509, i64 19
  %20531 = bitcast i16* %20530 to <16 x i16>*
  %20532 = load <16 x i16>, <16 x i16>* %20531, align 2, !tbaa !396
  %20533 = getelementptr inbounds i16, i16* %20509, i64 4
  %20534 = bitcast i16* %20533 to <16 x i16>*
  %20535 = load <16 x i16>, <16 x i16>* %20534, align 2, !tbaa !396
  %20536 = getelementptr inbounds i16, i16* %20509, i64 20
  %20537 = bitcast i16* %20536 to <16 x i16>*
  %20538 = load <16 x i16>, <16 x i16>* %20537, align 2, !tbaa !396
  %20539 = getelementptr inbounds i16, i16* %20509, i64 6
  %20540 = bitcast i16* %20539 to <16 x i16>*
  %20541 = load <16 x i16>, <16 x i16>* %20540, align 2, !tbaa !396
  %20542 = getelementptr inbounds i16, i16* %20509, i64 22
  %20543 = bitcast i16* %20542 to <16 x i16>*
  %20544 = load <16 x i16>, <16 x i16>* %20543, align 2, !tbaa !396
  %20545 = getelementptr inbounds i16, i16* %20509, i64 5
  %20546 = bitcast i16* %20545 to <16 x i16>*
  %20547 = load <16 x i16>, <16 x i16>* %20546, align 2, !tbaa !396
  %20548 = getelementptr inbounds i16, i16* %20509, i64 21
  %20549 = bitcast i16* %20548 to <16 x i16>*
  %20550 = load <16 x i16>, <16 x i16>* %20549, align 2, !tbaa !396
  %20551 = add <16 x i16> %20517, %20512
  %20552 = add <16 x i16> %20551, %20523
  %20553 = add <16 x i16> %20552, %20529
  %20554 = add <16 x i16> %20553, %20535
  %20555 = add <16 x i16> %20554, %20541
  %20556 = add <16 x i16> %20555, %20547
  %20557 = add <16 x i16> %20520, %20515
  %20558 = add <16 x i16> %20557, %20526
  %20559 = add <16 x i16> %20558, %20532
  %20560 = add <16 x i16> %20559, %20538
  %20561 = add <16 x i16> %20560, %20544
  %20562 = add <16 x i16> %20561, %20550
  %20563 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20556, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %20564 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20562, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %20565 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %20563, <16 x i16> %20556)
  %20566 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %20564, <16 x i16> %20562)
  %20567 = shufflevector <16 x i16> %20565, <16 x i16> %20566, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20568 = lshr <32 x i16> %20567, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20569 = shufflevector <32 x i16> %20568, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20570 = sext i32 %blur_x.s0.x.v1.base.s947 to i64
  %20571 = add nsw i64 %20570, %20431
  %20572 = getelementptr inbounds i16, i16* %blur_x917, i64 %20571
  %20573 = bitcast i16* %20572 to <16 x i16>*
  store <16 x i16> %20569, <16 x i16>* %20573, align 2, !tbaa !399
  %20574 = shufflevector <32 x i16> %20568, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20575 = getelementptr inbounds i16, i16* %20572, i64 16
  %20576 = bitcast i16* %20575 to <16 x i16>*
  store <16 x i16> %20574, <16 x i16>* %20576, align 2, !tbaa !399
  br label %after_bb942

after_bb949:                                      ; preds = %"end for blur_y.s0.x.x.rebased940.after_bb949_crit_edge", %"produce blur_x952"
  %.pre-phi3602 = phi i32 [ %.pre3601, %"end for blur_y.s0.x.x.rebased940.after_bb949_crit_edge" ], [ %20642, %"produce blur_x952" ]
  %20577 = mul nsw i32 %.pre-phi3602, %a414
  %t1732954 = sub nsw i32 %20577, %t1689849
  br i1 %298, label %"for blur_y.s0.x.x.rebased957.preheader", label %"end for blur_y.s0.x.x.rebased958", !prof !386

"for blur_y.s0.x.x.rebased957.preheader":         ; preds = %after_bb949
  %20578 = sext i32 %t1732954 to i64
  br label %"for blur_y.s0.x.x.rebased957"

"produce blur_x952":                              ; preds = %"end for blur_y.s0.x.x.rebased940"
  %20579 = getelementptr inbounds i16, i16* %read_input860, i64 %301
  %20580 = getelementptr inbounds i16, i16* %20579, i64 -31
  %20581 = bitcast i16* %20580 to <16 x i16>*
  %20582 = load <16 x i16>, <16 x i16>* %20581, align 2, !tbaa !396
  %20583 = getelementptr inbounds i16, i16* %20579, i64 -15
  %20584 = bitcast i16* %20583 to <16 x i16>*
  %20585 = load <16 x i16>, <16 x i16>* %20584, align 2, !tbaa !396
  %20586 = getelementptr inbounds i16, i16* %20579, i64 -32
  %20587 = bitcast i16* %20586 to <16 x i16>*
  %20588 = load <16 x i16>, <16 x i16>* %20587, align 2, !tbaa !396
  %20589 = getelementptr inbounds i16, i16* %20579, i64 -16
  %20590 = bitcast i16* %20589 to <16 x i16>*
  %20591 = load <16 x i16>, <16 x i16>* %20590, align 2, !tbaa !396
  %20592 = getelementptr inbounds i16, i16* %20579, i64 -30
  %20593 = bitcast i16* %20592 to <16 x i16>*
  %20594 = load <16 x i16>, <16 x i16>* %20593, align 2, !tbaa !396
  %20595 = getelementptr inbounds i16, i16* %20579, i64 -14
  %20596 = bitcast i16* %20595 to <16 x i16>*
  %20597 = load <16 x i16>, <16 x i16>* %20596, align 2, !tbaa !396
  %20598 = getelementptr inbounds i16, i16* %20579, i64 -29
  %20599 = bitcast i16* %20598 to <16 x i16>*
  %20600 = load <16 x i16>, <16 x i16>* %20599, align 2, !tbaa !396
  %20601 = getelementptr inbounds i16, i16* %20579, i64 -13
  %20602 = bitcast i16* %20601 to <16 x i16>*
  %20603 = load <16 x i16>, <16 x i16>* %20602, align 2, !tbaa !396
  %20604 = getelementptr inbounds i16, i16* %20579, i64 -28
  %20605 = bitcast i16* %20604 to <16 x i16>*
  %20606 = load <16 x i16>, <16 x i16>* %20605, align 2, !tbaa !396
  %20607 = getelementptr inbounds i16, i16* %20579, i64 -12
  %20608 = bitcast i16* %20607 to <16 x i16>*
  %20609 = load <16 x i16>, <16 x i16>* %20608, align 2, !tbaa !396
  %20610 = getelementptr inbounds i16, i16* %20579, i64 -26
  %20611 = bitcast i16* %20610 to <16 x i16>*
  %20612 = load <16 x i16>, <16 x i16>* %20611, align 2, !tbaa !396
  %20613 = getelementptr inbounds i16, i16* %20579, i64 -10
  %20614 = bitcast i16* %20613 to <16 x i16>*
  %20615 = load <16 x i16>, <16 x i16>* %20614, align 2, !tbaa !396
  %20616 = getelementptr inbounds i16, i16* %20579, i64 -27
  %20617 = bitcast i16* %20616 to <16 x i16>*
  %20618 = load <16 x i16>, <16 x i16>* %20617, align 2, !tbaa !396
  %20619 = getelementptr inbounds i16, i16* %20579, i64 -11
  %20620 = bitcast i16* %20619 to <16 x i16>*
  %20621 = load <16 x i16>, <16 x i16>* %20620, align 2, !tbaa !396
  %20622 = add <16 x i16> %20588, %20582
  %20623 = add <16 x i16> %20622, %20594
  %20624 = add <16 x i16> %20623, %20600
  %20625 = add <16 x i16> %20624, %20606
  %20626 = add <16 x i16> %20625, %20612
  %20627 = add <16 x i16> %20626, %20618
  %20628 = add <16 x i16> %20591, %20585
  %20629 = add <16 x i16> %20628, %20597
  %20630 = add <16 x i16> %20629, %20603
  %20631 = add <16 x i16> %20630, %20609
  %20632 = add <16 x i16> %20631, %20615
  %20633 = add <16 x i16> %20632, %20621
  %20634 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20627, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %20635 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20633, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %20636 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %20634, <16 x i16> %20627)
  %20637 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %20635, <16 x i16> %20633)
  %20638 = shufflevector <16 x i16> %20636, <16 x i16> %20637, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20639 = lshr <32 x i16> %20638, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20640 = shufflevector <32 x i16> %20639, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20641 = add nsw i32 %a367, 1
  %20642 = and i32 %20641, 7
  %20643 = zext i32 %20642 to i64
  %20644 = mul nsw i64 %295, %20643
  %20645 = add nsw i64 %297, %20644
  %20646 = getelementptr inbounds i16, i16* %blur_x917, i64 %20645
  %20647 = getelementptr inbounds i16, i16* %20646, i64 -32
  %20648 = bitcast i16* %20647 to <16 x i16>*
  store <16 x i16> %20640, <16 x i16>* %20648, align 2, !tbaa !399
  %20649 = shufflevector <32 x i16> %20639, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20650 = getelementptr inbounds i16, i16* %20646, i64 -16
  %20651 = bitcast i16* %20650 to <16 x i16>*
  store <16 x i16> %20649, <16 x i16>* %20651, align 2, !tbaa !399
  br label %after_bb949

"for blur_y.s0.x.x.rebased957":                   ; preds = %"for blur_y.s0.x.x.rebased957.preheader", %after_bb960
  %indvars.iv3390 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased957.preheader" ], [ %indvars.iv.next3391, %after_bb960 ]
  %20652 = add nsw i64 %indvars.iv3390, %299
  %20653 = icmp slt i64 %20652, 1
  %20654 = trunc i64 %20652 to i32
  %20655 = shl nsw i32 %20654, 5
  %20656 = icmp sgt i32 %202, %20655
  %20657 = or i1 %20653, %20656
  br i1 %20657, label %"produce blur_x964", label %after_bb960

"end for blur_y.s0.x.x.rebased958":               ; preds = %after_bb960, %after_bb949
  br i1 %300, label %"for blur_y.s0.x.x.rebased969.preheader", label %"end for blur_y.s0.x.x.rebased970", !prof !386

"for blur_y.s0.x.x.rebased969.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased958"
  %20658 = sext i32 %t1732954 to i64
  br label %"for blur_y.s0.x.x.rebased969"

after_bb960:                                      ; preds = %"for blur_y.s0.x.x.rebased957", %"produce blur_x964"
  %indvars.iv.next3391 = add nuw nsw i64 %indvars.iv3390, 1
  %.not2720 = icmp eq i64 %indvars.iv.next3391, %386
  br i1 %.not2720, label %"end for blur_y.s0.x.x.rebased958", label %"for blur_y.s0.x.x.rebased957"

"produce blur_x964":                              ; preds = %"for blur_y.s0.x.x.rebased957"
  %t718965 = add nsw i32 %20655, %t1731956
  %20659 = sext i32 %t718965 to i64
  %20660 = getelementptr inbounds i16, i16* %read_input860, i64 %20659
  %20661 = getelementptr inbounds i16, i16* %20660, i64 1
  %20662 = bitcast i16* %20661 to <16 x i16>*
  %20663 = load <16 x i16>, <16 x i16>* %20662, align 2, !tbaa !396
  %20664 = getelementptr inbounds i16, i16* %20660, i64 17
  %20665 = bitcast i16* %20664 to <16 x i16>*
  %20666 = load <16 x i16>, <16 x i16>* %20665, align 2, !tbaa !396
  %20667 = bitcast i16* %20660 to <16 x i16>*
  %20668 = load <16 x i16>, <16 x i16>* %20667, align 2, !tbaa !396
  %20669 = getelementptr inbounds i16, i16* %20660, i64 16
  %20670 = bitcast i16* %20669 to <16 x i16>*
  %20671 = load <16 x i16>, <16 x i16>* %20670, align 2, !tbaa !396
  %20672 = getelementptr inbounds i16, i16* %20660, i64 2
  %20673 = bitcast i16* %20672 to <16 x i16>*
  %20674 = load <16 x i16>, <16 x i16>* %20673, align 2, !tbaa !396
  %20675 = getelementptr inbounds i16, i16* %20660, i64 18
  %20676 = bitcast i16* %20675 to <16 x i16>*
  %20677 = load <16 x i16>, <16 x i16>* %20676, align 2, !tbaa !396
  %20678 = getelementptr inbounds i16, i16* %20660, i64 3
  %20679 = bitcast i16* %20678 to <16 x i16>*
  %20680 = load <16 x i16>, <16 x i16>* %20679, align 2, !tbaa !396
  %20681 = getelementptr inbounds i16, i16* %20660, i64 19
  %20682 = bitcast i16* %20681 to <16 x i16>*
  %20683 = load <16 x i16>, <16 x i16>* %20682, align 2, !tbaa !396
  %20684 = getelementptr inbounds i16, i16* %20660, i64 4
  %20685 = bitcast i16* %20684 to <16 x i16>*
  %20686 = load <16 x i16>, <16 x i16>* %20685, align 2, !tbaa !396
  %20687 = getelementptr inbounds i16, i16* %20660, i64 20
  %20688 = bitcast i16* %20687 to <16 x i16>*
  %20689 = load <16 x i16>, <16 x i16>* %20688, align 2, !tbaa !396
  %20690 = getelementptr inbounds i16, i16* %20660, i64 6
  %20691 = bitcast i16* %20690 to <16 x i16>*
  %20692 = load <16 x i16>, <16 x i16>* %20691, align 2, !tbaa !396
  %20693 = getelementptr inbounds i16, i16* %20660, i64 22
  %20694 = bitcast i16* %20693 to <16 x i16>*
  %20695 = load <16 x i16>, <16 x i16>* %20694, align 2, !tbaa !396
  %20696 = getelementptr inbounds i16, i16* %20660, i64 5
  %20697 = bitcast i16* %20696 to <16 x i16>*
  %20698 = load <16 x i16>, <16 x i16>* %20697, align 2, !tbaa !396
  %20699 = getelementptr inbounds i16, i16* %20660, i64 21
  %20700 = bitcast i16* %20699 to <16 x i16>*
  %20701 = load <16 x i16>, <16 x i16>* %20700, align 2, !tbaa !396
  %20702 = add <16 x i16> %20668, %20663
  %20703 = add <16 x i16> %20702, %20674
  %20704 = add <16 x i16> %20703, %20680
  %20705 = add <16 x i16> %20704, %20686
  %20706 = add <16 x i16> %20705, %20692
  %20707 = add <16 x i16> %20706, %20698
  %20708 = add <16 x i16> %20671, %20666
  %20709 = add <16 x i16> %20708, %20677
  %20710 = add <16 x i16> %20709, %20683
  %20711 = add <16 x i16> %20710, %20689
  %20712 = add <16 x i16> %20711, %20695
  %20713 = add <16 x i16> %20712, %20701
  %20714 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20707, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %20715 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20713, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %20716 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %20714, <16 x i16> %20707)
  %20717 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %20715, <16 x i16> %20713)
  %20718 = shufflevector <16 x i16> %20716, <16 x i16> %20717, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20719 = lshr <32 x i16> %20718, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20720 = shufflevector <32 x i16> %20719, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20721 = shl nsw i64 %20652, 5
  %20722 = add nsw i64 %20721, %20578
  %20723 = getelementptr inbounds i16, i16* %blur_x917, i64 %20722
  %20724 = bitcast i16* %20723 to <16 x i16>*
  store <16 x i16> %20720, <16 x i16>* %20724, align 2, !tbaa !399
  %20725 = shufflevector <32 x i16> %20719, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20726 = getelementptr inbounds i16, i16* %20723, i64 16
  %20727 = bitcast i16* %20726 to <16 x i16>*
  store <16 x i16> %20725, <16 x i16>* %20727, align 2, !tbaa !399
  br label %after_bb960

"for blur_y.s0.x.x.rebased969":                   ; preds = %"for blur_y.s0.x.x.rebased969.preheader", %after_bb972
  %blur_y.s0.x.x.rebased971 = phi i32 [ %20732, %after_bb972 ], [ 0, %"for blur_y.s0.x.x.rebased969.preheader" ]
  %t2277975 = add nsw i32 %blur_y.s0.x.x.rebased971, %t1670852
  %20728 = icmp slt i32 %t2277975, 1
  %20729 = shl nsw i32 %t2277975, 5
  %20730 = icmp sgt i32 %202, %20729
  %20731 = or i1 %20728, %20730
  br i1 %20731, label %then_bb973, label %after_bb972

"end for blur_y.s0.x.x.rebased970":               ; preds = %after_bb972, %"end for blur_y.s0.x.x.rebased958"
  br i1 %232, label %"produce blur_x982", label %"end for blur_y.s0.x.x.rebased970.after_bb979_crit_edge"

"end for blur_y.s0.x.x.rebased970.after_bb979_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased970"
  %.pre3603 = add nsw i32 %a367, 2
  %.pre3605 = and i32 %.pre3603, 7
  br label %after_bb979

after_bb972:                                      ; preds = %"for blur_y.s0.x.x.rebased969", %then_bb973
  %20732 = add nuw nsw i32 %blur_y.s0.x.x.rebased971, 1
  %.not2719 = icmp eq i32 %20732, %t1727937
  br i1 %.not2719, label %"end for blur_y.s0.x.x.rebased970", label %"for blur_y.s0.x.x.rebased969"

then_bb973:                                       ; preds = %"for blur_y.s0.x.x.rebased969"
  %20733 = icmp sgt i32 %a355, %20729
  %b431 = select i1 %20733, i32 %20729, i32 %a355
  %20734 = icmp slt i32 %b431, %202
  %blur_x.s0.x.v1.base.s977 = select i1 %20734, i32 %b431, i32 %202
  %t720978 = add nsw i32 %blur_x.s0.x.v1.base.s977, %t1731956
  %20735 = sext i32 %t720978 to i64
  %20736 = getelementptr inbounds i16, i16* %read_input860, i64 %20735
  %20737 = getelementptr inbounds i16, i16* %20736, i64 1
  %20738 = bitcast i16* %20737 to <16 x i16>*
  %20739 = load <16 x i16>, <16 x i16>* %20738, align 2, !tbaa !396
  %20740 = getelementptr inbounds i16, i16* %20736, i64 17
  %20741 = bitcast i16* %20740 to <16 x i16>*
  %20742 = load <16 x i16>, <16 x i16>* %20741, align 2, !tbaa !396
  %20743 = bitcast i16* %20736 to <16 x i16>*
  %20744 = load <16 x i16>, <16 x i16>* %20743, align 2, !tbaa !396
  %20745 = getelementptr inbounds i16, i16* %20736, i64 16
  %20746 = bitcast i16* %20745 to <16 x i16>*
  %20747 = load <16 x i16>, <16 x i16>* %20746, align 2, !tbaa !396
  %20748 = getelementptr inbounds i16, i16* %20736, i64 2
  %20749 = bitcast i16* %20748 to <16 x i16>*
  %20750 = load <16 x i16>, <16 x i16>* %20749, align 2, !tbaa !396
  %20751 = getelementptr inbounds i16, i16* %20736, i64 18
  %20752 = bitcast i16* %20751 to <16 x i16>*
  %20753 = load <16 x i16>, <16 x i16>* %20752, align 2, !tbaa !396
  %20754 = getelementptr inbounds i16, i16* %20736, i64 3
  %20755 = bitcast i16* %20754 to <16 x i16>*
  %20756 = load <16 x i16>, <16 x i16>* %20755, align 2, !tbaa !396
  %20757 = getelementptr inbounds i16, i16* %20736, i64 19
  %20758 = bitcast i16* %20757 to <16 x i16>*
  %20759 = load <16 x i16>, <16 x i16>* %20758, align 2, !tbaa !396
  %20760 = getelementptr inbounds i16, i16* %20736, i64 4
  %20761 = bitcast i16* %20760 to <16 x i16>*
  %20762 = load <16 x i16>, <16 x i16>* %20761, align 2, !tbaa !396
  %20763 = getelementptr inbounds i16, i16* %20736, i64 20
  %20764 = bitcast i16* %20763 to <16 x i16>*
  %20765 = load <16 x i16>, <16 x i16>* %20764, align 2, !tbaa !396
  %20766 = getelementptr inbounds i16, i16* %20736, i64 6
  %20767 = bitcast i16* %20766 to <16 x i16>*
  %20768 = load <16 x i16>, <16 x i16>* %20767, align 2, !tbaa !396
  %20769 = getelementptr inbounds i16, i16* %20736, i64 22
  %20770 = bitcast i16* %20769 to <16 x i16>*
  %20771 = load <16 x i16>, <16 x i16>* %20770, align 2, !tbaa !396
  %20772 = getelementptr inbounds i16, i16* %20736, i64 5
  %20773 = bitcast i16* %20772 to <16 x i16>*
  %20774 = load <16 x i16>, <16 x i16>* %20773, align 2, !tbaa !396
  %20775 = getelementptr inbounds i16, i16* %20736, i64 21
  %20776 = bitcast i16* %20775 to <16 x i16>*
  %20777 = load <16 x i16>, <16 x i16>* %20776, align 2, !tbaa !396
  %20778 = add <16 x i16> %20744, %20739
  %20779 = add <16 x i16> %20778, %20750
  %20780 = add <16 x i16> %20779, %20756
  %20781 = add <16 x i16> %20780, %20762
  %20782 = add <16 x i16> %20781, %20768
  %20783 = add <16 x i16> %20782, %20774
  %20784 = add <16 x i16> %20747, %20742
  %20785 = add <16 x i16> %20784, %20753
  %20786 = add <16 x i16> %20785, %20759
  %20787 = add <16 x i16> %20786, %20765
  %20788 = add <16 x i16> %20787, %20771
  %20789 = add <16 x i16> %20788, %20777
  %20790 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20783, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %20791 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20789, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %20792 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %20790, <16 x i16> %20783)
  %20793 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %20791, <16 x i16> %20789)
  %20794 = shufflevector <16 x i16> %20792, <16 x i16> %20793, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20795 = lshr <32 x i16> %20794, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20796 = shufflevector <32 x i16> %20795, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20797 = sext i32 %blur_x.s0.x.v1.base.s977 to i64
  %20798 = add nsw i64 %20797, %20658
  %20799 = getelementptr inbounds i16, i16* %blur_x917, i64 %20798
  %20800 = bitcast i16* %20799 to <16 x i16>*
  store <16 x i16> %20796, <16 x i16>* %20800, align 2, !tbaa !399
  %20801 = shufflevector <32 x i16> %20795, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20802 = getelementptr inbounds i16, i16* %20799, i64 16
  %20803 = bitcast i16* %20802 to <16 x i16>*
  store <16 x i16> %20801, <16 x i16>* %20803, align 2, !tbaa !399
  br label %after_bb972

after_bb979:                                      ; preds = %"end for blur_y.s0.x.x.rebased970.after_bb979_crit_edge", %"produce blur_x982"
  %.pre-phi3606 = phi i32 [ %.pre3605, %"end for blur_y.s0.x.x.rebased970.after_bb979_crit_edge" ], [ %20869, %"produce blur_x982" ]
  %20804 = mul nsw i32 %.pre-phi3606, %a414
  %t1738984 = sub nsw i32 %20804, %t1689849
  br i1 %298, label %"for blur_y.s0.x.x.rebased987.preheader", label %"end for blur_y.s0.x.x.rebased988", !prof !386

"for blur_y.s0.x.x.rebased987.preheader":         ; preds = %after_bb979
  %20805 = sext i32 %t1738984 to i64
  br label %"for blur_y.s0.x.x.rebased987"

"produce blur_x982":                              ; preds = %"end for blur_y.s0.x.x.rebased970"
  %20806 = getelementptr inbounds i16, i16* %read_input860, i64 %303
  %20807 = getelementptr inbounds i16, i16* %20806, i64 -31
  %20808 = bitcast i16* %20807 to <16 x i16>*
  %20809 = load <16 x i16>, <16 x i16>* %20808, align 2, !tbaa !396
  %20810 = getelementptr inbounds i16, i16* %20806, i64 -15
  %20811 = bitcast i16* %20810 to <16 x i16>*
  %20812 = load <16 x i16>, <16 x i16>* %20811, align 2, !tbaa !396
  %20813 = getelementptr inbounds i16, i16* %20806, i64 -32
  %20814 = bitcast i16* %20813 to <16 x i16>*
  %20815 = load <16 x i16>, <16 x i16>* %20814, align 2, !tbaa !396
  %20816 = getelementptr inbounds i16, i16* %20806, i64 -16
  %20817 = bitcast i16* %20816 to <16 x i16>*
  %20818 = load <16 x i16>, <16 x i16>* %20817, align 2, !tbaa !396
  %20819 = getelementptr inbounds i16, i16* %20806, i64 -30
  %20820 = bitcast i16* %20819 to <16 x i16>*
  %20821 = load <16 x i16>, <16 x i16>* %20820, align 2, !tbaa !396
  %20822 = getelementptr inbounds i16, i16* %20806, i64 -14
  %20823 = bitcast i16* %20822 to <16 x i16>*
  %20824 = load <16 x i16>, <16 x i16>* %20823, align 2, !tbaa !396
  %20825 = getelementptr inbounds i16, i16* %20806, i64 -29
  %20826 = bitcast i16* %20825 to <16 x i16>*
  %20827 = load <16 x i16>, <16 x i16>* %20826, align 2, !tbaa !396
  %20828 = getelementptr inbounds i16, i16* %20806, i64 -13
  %20829 = bitcast i16* %20828 to <16 x i16>*
  %20830 = load <16 x i16>, <16 x i16>* %20829, align 2, !tbaa !396
  %20831 = getelementptr inbounds i16, i16* %20806, i64 -28
  %20832 = bitcast i16* %20831 to <16 x i16>*
  %20833 = load <16 x i16>, <16 x i16>* %20832, align 2, !tbaa !396
  %20834 = getelementptr inbounds i16, i16* %20806, i64 -12
  %20835 = bitcast i16* %20834 to <16 x i16>*
  %20836 = load <16 x i16>, <16 x i16>* %20835, align 2, !tbaa !396
  %20837 = getelementptr inbounds i16, i16* %20806, i64 -26
  %20838 = bitcast i16* %20837 to <16 x i16>*
  %20839 = load <16 x i16>, <16 x i16>* %20838, align 2, !tbaa !396
  %20840 = getelementptr inbounds i16, i16* %20806, i64 -10
  %20841 = bitcast i16* %20840 to <16 x i16>*
  %20842 = load <16 x i16>, <16 x i16>* %20841, align 2, !tbaa !396
  %20843 = getelementptr inbounds i16, i16* %20806, i64 -27
  %20844 = bitcast i16* %20843 to <16 x i16>*
  %20845 = load <16 x i16>, <16 x i16>* %20844, align 2, !tbaa !396
  %20846 = getelementptr inbounds i16, i16* %20806, i64 -11
  %20847 = bitcast i16* %20846 to <16 x i16>*
  %20848 = load <16 x i16>, <16 x i16>* %20847, align 2, !tbaa !396
  %20849 = add <16 x i16> %20815, %20809
  %20850 = add <16 x i16> %20849, %20821
  %20851 = add <16 x i16> %20850, %20827
  %20852 = add <16 x i16> %20851, %20833
  %20853 = add <16 x i16> %20852, %20839
  %20854 = add <16 x i16> %20853, %20845
  %20855 = add <16 x i16> %20818, %20812
  %20856 = add <16 x i16> %20855, %20824
  %20857 = add <16 x i16> %20856, %20830
  %20858 = add <16 x i16> %20857, %20836
  %20859 = add <16 x i16> %20858, %20842
  %20860 = add <16 x i16> %20859, %20848
  %20861 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20854, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %20862 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20860, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %20863 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %20861, <16 x i16> %20854)
  %20864 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %20862, <16 x i16> %20860)
  %20865 = shufflevector <16 x i16> %20863, <16 x i16> %20864, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20866 = lshr <32 x i16> %20865, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20867 = shufflevector <32 x i16> %20866, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20868 = add nsw i32 %a367, 2
  %20869 = and i32 %20868, 7
  %20870 = zext i32 %20869 to i64
  %20871 = mul nsw i64 %295, %20870
  %20872 = add nsw i64 %297, %20871
  %20873 = getelementptr inbounds i16, i16* %blur_x917, i64 %20872
  %20874 = getelementptr inbounds i16, i16* %20873, i64 -32
  %20875 = bitcast i16* %20874 to <16 x i16>*
  store <16 x i16> %20867, <16 x i16>* %20875, align 2, !tbaa !399
  %20876 = shufflevector <32 x i16> %20866, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20877 = getelementptr inbounds i16, i16* %20873, i64 -16
  %20878 = bitcast i16* %20877 to <16 x i16>*
  store <16 x i16> %20876, <16 x i16>* %20878, align 2, !tbaa !399
  br label %after_bb979

"for blur_y.s0.x.x.rebased987":                   ; preds = %"for blur_y.s0.x.x.rebased987.preheader", %after_bb990
  %indvars.iv3393 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased987.preheader" ], [ %indvars.iv.next3394, %after_bb990 ]
  %20879 = add nsw i64 %indvars.iv3393, %299
  %20880 = icmp slt i64 %20879, 1
  %20881 = trunc i64 %20879 to i32
  %20882 = shl nsw i32 %20881, 5
  %20883 = icmp sgt i32 %202, %20882
  %20884 = or i1 %20880, %20883
  br i1 %20884, label %"produce blur_x994", label %after_bb990

"end for blur_y.s0.x.x.rebased988":               ; preds = %after_bb990, %after_bb979
  br i1 %300, label %"for blur_y.s0.x.x.rebased999.preheader", label %"end for blur_y.s0.x.x.rebased1000", !prof !386

"for blur_y.s0.x.x.rebased999.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased988"
  %20885 = sext i32 %t1738984 to i64
  br label %"for blur_y.s0.x.x.rebased999"

after_bb990:                                      ; preds = %"for blur_y.s0.x.x.rebased987", %"produce blur_x994"
  %indvars.iv.next3394 = add nuw nsw i64 %indvars.iv3393, 1
  %.not2718 = icmp eq i64 %indvars.iv.next3394, %386
  br i1 %.not2718, label %"end for blur_y.s0.x.x.rebased988", label %"for blur_y.s0.x.x.rebased987"

"produce blur_x994":                              ; preds = %"for blur_y.s0.x.x.rebased987"
  %t724995 = add nsw i32 %20882, %t1737985
  %20886 = sext i32 %t724995 to i64
  %20887 = getelementptr inbounds i16, i16* %read_input860, i64 %20886
  %20888 = getelementptr inbounds i16, i16* %20887, i64 1
  %20889 = bitcast i16* %20888 to <16 x i16>*
  %20890 = load <16 x i16>, <16 x i16>* %20889, align 2, !tbaa !396
  %20891 = getelementptr inbounds i16, i16* %20887, i64 17
  %20892 = bitcast i16* %20891 to <16 x i16>*
  %20893 = load <16 x i16>, <16 x i16>* %20892, align 2, !tbaa !396
  %20894 = bitcast i16* %20887 to <16 x i16>*
  %20895 = load <16 x i16>, <16 x i16>* %20894, align 2, !tbaa !396
  %20896 = getelementptr inbounds i16, i16* %20887, i64 16
  %20897 = bitcast i16* %20896 to <16 x i16>*
  %20898 = load <16 x i16>, <16 x i16>* %20897, align 2, !tbaa !396
  %20899 = getelementptr inbounds i16, i16* %20887, i64 2
  %20900 = bitcast i16* %20899 to <16 x i16>*
  %20901 = load <16 x i16>, <16 x i16>* %20900, align 2, !tbaa !396
  %20902 = getelementptr inbounds i16, i16* %20887, i64 18
  %20903 = bitcast i16* %20902 to <16 x i16>*
  %20904 = load <16 x i16>, <16 x i16>* %20903, align 2, !tbaa !396
  %20905 = getelementptr inbounds i16, i16* %20887, i64 3
  %20906 = bitcast i16* %20905 to <16 x i16>*
  %20907 = load <16 x i16>, <16 x i16>* %20906, align 2, !tbaa !396
  %20908 = getelementptr inbounds i16, i16* %20887, i64 19
  %20909 = bitcast i16* %20908 to <16 x i16>*
  %20910 = load <16 x i16>, <16 x i16>* %20909, align 2, !tbaa !396
  %20911 = getelementptr inbounds i16, i16* %20887, i64 4
  %20912 = bitcast i16* %20911 to <16 x i16>*
  %20913 = load <16 x i16>, <16 x i16>* %20912, align 2, !tbaa !396
  %20914 = getelementptr inbounds i16, i16* %20887, i64 20
  %20915 = bitcast i16* %20914 to <16 x i16>*
  %20916 = load <16 x i16>, <16 x i16>* %20915, align 2, !tbaa !396
  %20917 = getelementptr inbounds i16, i16* %20887, i64 6
  %20918 = bitcast i16* %20917 to <16 x i16>*
  %20919 = load <16 x i16>, <16 x i16>* %20918, align 2, !tbaa !396
  %20920 = getelementptr inbounds i16, i16* %20887, i64 22
  %20921 = bitcast i16* %20920 to <16 x i16>*
  %20922 = load <16 x i16>, <16 x i16>* %20921, align 2, !tbaa !396
  %20923 = getelementptr inbounds i16, i16* %20887, i64 5
  %20924 = bitcast i16* %20923 to <16 x i16>*
  %20925 = load <16 x i16>, <16 x i16>* %20924, align 2, !tbaa !396
  %20926 = getelementptr inbounds i16, i16* %20887, i64 21
  %20927 = bitcast i16* %20926 to <16 x i16>*
  %20928 = load <16 x i16>, <16 x i16>* %20927, align 2, !tbaa !396
  %20929 = add <16 x i16> %20895, %20890
  %20930 = add <16 x i16> %20929, %20901
  %20931 = add <16 x i16> %20930, %20907
  %20932 = add <16 x i16> %20931, %20913
  %20933 = add <16 x i16> %20932, %20919
  %20934 = add <16 x i16> %20933, %20925
  %20935 = add <16 x i16> %20898, %20893
  %20936 = add <16 x i16> %20935, %20904
  %20937 = add <16 x i16> %20936, %20910
  %20938 = add <16 x i16> %20937, %20916
  %20939 = add <16 x i16> %20938, %20922
  %20940 = add <16 x i16> %20939, %20928
  %20941 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20934, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %20942 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20940, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %20943 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %20941, <16 x i16> %20934)
  %20944 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %20942, <16 x i16> %20940)
  %20945 = shufflevector <16 x i16> %20943, <16 x i16> %20944, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20946 = lshr <32 x i16> %20945, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20947 = shufflevector <32 x i16> %20946, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20948 = shl nsw i64 %20879, 5
  %20949 = add nsw i64 %20948, %20805
  %20950 = getelementptr inbounds i16, i16* %blur_x917, i64 %20949
  %20951 = bitcast i16* %20950 to <16 x i16>*
  store <16 x i16> %20947, <16 x i16>* %20951, align 2, !tbaa !399
  %20952 = shufflevector <32 x i16> %20946, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20953 = getelementptr inbounds i16, i16* %20950, i64 16
  %20954 = bitcast i16* %20953 to <16 x i16>*
  store <16 x i16> %20952, <16 x i16>* %20954, align 2, !tbaa !399
  br label %after_bb990

"for blur_y.s0.x.x.rebased999":                   ; preds = %"for blur_y.s0.x.x.rebased999.preheader", %after_bb1002
  %blur_y.s0.x.x.rebased1001 = phi i32 [ %20959, %after_bb1002 ], [ 0, %"for blur_y.s0.x.x.rebased999.preheader" ]
  %t22791005 = add nsw i32 %blur_y.s0.x.x.rebased1001, %t1670852
  %20955 = icmp slt i32 %t22791005, 1
  %20956 = shl nsw i32 %t22791005, 5
  %20957 = icmp sgt i32 %202, %20956
  %20958 = or i1 %20955, %20957
  br i1 %20958, label %then_bb1003, label %after_bb1002

"end for blur_y.s0.x.x.rebased1000":              ; preds = %after_bb1002, %"end for blur_y.s0.x.x.rebased988"
  br i1 %232, label %"produce blur_x1012", label %"end for blur_y.s0.x.x.rebased1000.after_bb1009_crit_edge"

"end for blur_y.s0.x.x.rebased1000.after_bb1009_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased1000"
  %.pre3607 = add nsw i32 %a367, 3
  %.pre3609 = and i32 %.pre3607, 7
  br label %after_bb1009

after_bb1002:                                     ; preds = %"for blur_y.s0.x.x.rebased999", %then_bb1003
  %20959 = add nuw nsw i32 %blur_y.s0.x.x.rebased1001, 1
  %.not2717 = icmp eq i32 %20959, %t1727937
  br i1 %.not2717, label %"end for blur_y.s0.x.x.rebased1000", label %"for blur_y.s0.x.x.rebased999"

then_bb1003:                                      ; preds = %"for blur_y.s0.x.x.rebased999"
  %20960 = icmp sgt i32 %a355, %20956
  %b438 = select i1 %20960, i32 %20956, i32 %a355
  %20961 = icmp slt i32 %b438, %202
  %blur_x.s0.x.v1.base.s1007 = select i1 %20961, i32 %b438, i32 %202
  %t7261008 = add nsw i32 %blur_x.s0.x.v1.base.s1007, %t1737985
  %20962 = sext i32 %t7261008 to i64
  %20963 = getelementptr inbounds i16, i16* %read_input860, i64 %20962
  %20964 = getelementptr inbounds i16, i16* %20963, i64 1
  %20965 = bitcast i16* %20964 to <16 x i16>*
  %20966 = load <16 x i16>, <16 x i16>* %20965, align 2, !tbaa !396
  %20967 = getelementptr inbounds i16, i16* %20963, i64 17
  %20968 = bitcast i16* %20967 to <16 x i16>*
  %20969 = load <16 x i16>, <16 x i16>* %20968, align 2, !tbaa !396
  %20970 = bitcast i16* %20963 to <16 x i16>*
  %20971 = load <16 x i16>, <16 x i16>* %20970, align 2, !tbaa !396
  %20972 = getelementptr inbounds i16, i16* %20963, i64 16
  %20973 = bitcast i16* %20972 to <16 x i16>*
  %20974 = load <16 x i16>, <16 x i16>* %20973, align 2, !tbaa !396
  %20975 = getelementptr inbounds i16, i16* %20963, i64 2
  %20976 = bitcast i16* %20975 to <16 x i16>*
  %20977 = load <16 x i16>, <16 x i16>* %20976, align 2, !tbaa !396
  %20978 = getelementptr inbounds i16, i16* %20963, i64 18
  %20979 = bitcast i16* %20978 to <16 x i16>*
  %20980 = load <16 x i16>, <16 x i16>* %20979, align 2, !tbaa !396
  %20981 = getelementptr inbounds i16, i16* %20963, i64 3
  %20982 = bitcast i16* %20981 to <16 x i16>*
  %20983 = load <16 x i16>, <16 x i16>* %20982, align 2, !tbaa !396
  %20984 = getelementptr inbounds i16, i16* %20963, i64 19
  %20985 = bitcast i16* %20984 to <16 x i16>*
  %20986 = load <16 x i16>, <16 x i16>* %20985, align 2, !tbaa !396
  %20987 = getelementptr inbounds i16, i16* %20963, i64 4
  %20988 = bitcast i16* %20987 to <16 x i16>*
  %20989 = load <16 x i16>, <16 x i16>* %20988, align 2, !tbaa !396
  %20990 = getelementptr inbounds i16, i16* %20963, i64 20
  %20991 = bitcast i16* %20990 to <16 x i16>*
  %20992 = load <16 x i16>, <16 x i16>* %20991, align 2, !tbaa !396
  %20993 = getelementptr inbounds i16, i16* %20963, i64 6
  %20994 = bitcast i16* %20993 to <16 x i16>*
  %20995 = load <16 x i16>, <16 x i16>* %20994, align 2, !tbaa !396
  %20996 = getelementptr inbounds i16, i16* %20963, i64 22
  %20997 = bitcast i16* %20996 to <16 x i16>*
  %20998 = load <16 x i16>, <16 x i16>* %20997, align 2, !tbaa !396
  %20999 = getelementptr inbounds i16, i16* %20963, i64 5
  %21000 = bitcast i16* %20999 to <16 x i16>*
  %21001 = load <16 x i16>, <16 x i16>* %21000, align 2, !tbaa !396
  %21002 = getelementptr inbounds i16, i16* %20963, i64 21
  %21003 = bitcast i16* %21002 to <16 x i16>*
  %21004 = load <16 x i16>, <16 x i16>* %21003, align 2, !tbaa !396
  %21005 = add <16 x i16> %20971, %20966
  %21006 = add <16 x i16> %21005, %20977
  %21007 = add <16 x i16> %21006, %20983
  %21008 = add <16 x i16> %21007, %20989
  %21009 = add <16 x i16> %21008, %20995
  %21010 = add <16 x i16> %21009, %21001
  %21011 = add <16 x i16> %20974, %20969
  %21012 = add <16 x i16> %21011, %20980
  %21013 = add <16 x i16> %21012, %20986
  %21014 = add <16 x i16> %21013, %20992
  %21015 = add <16 x i16> %21014, %20998
  %21016 = add <16 x i16> %21015, %21004
  %21017 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21010, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21018 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21016, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21019 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21017, <16 x i16> %21010)
  %21020 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21018, <16 x i16> %21016)
  %21021 = shufflevector <16 x i16> %21019, <16 x i16> %21020, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21022 = lshr <32 x i16> %21021, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21023 = shufflevector <32 x i16> %21022, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21024 = sext i32 %blur_x.s0.x.v1.base.s1007 to i64
  %21025 = add nsw i64 %21024, %20885
  %21026 = getelementptr inbounds i16, i16* %blur_x917, i64 %21025
  %21027 = bitcast i16* %21026 to <16 x i16>*
  store <16 x i16> %21023, <16 x i16>* %21027, align 2, !tbaa !399
  %21028 = shufflevector <32 x i16> %21022, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21029 = getelementptr inbounds i16, i16* %21026, i64 16
  %21030 = bitcast i16* %21029 to <16 x i16>*
  store <16 x i16> %21028, <16 x i16>* %21030, align 2, !tbaa !399
  br label %after_bb1002

after_bb1009:                                     ; preds = %"end for blur_y.s0.x.x.rebased1000.after_bb1009_crit_edge", %"produce blur_x1012"
  %.pre-phi3610 = phi i32 [ %.pre3609, %"end for blur_y.s0.x.x.rebased1000.after_bb1009_crit_edge" ], [ %21096, %"produce blur_x1012" ]
  %21031 = mul nsw i32 %.pre-phi3610, %a414
  %t17441014 = sub nsw i32 %21031, %t1689849
  br i1 %298, label %"for blur_y.s0.x.x.rebased1017.preheader", label %"end for blur_y.s0.x.x.rebased1018", !prof !386

"for blur_y.s0.x.x.rebased1017.preheader":        ; preds = %after_bb1009
  %21032 = sext i32 %t17441014 to i64
  br label %"for blur_y.s0.x.x.rebased1017"

"produce blur_x1012":                             ; preds = %"end for blur_y.s0.x.x.rebased1000"
  %21033 = getelementptr inbounds i16, i16* %read_input860, i64 %305
  %21034 = getelementptr inbounds i16, i16* %21033, i64 -31
  %21035 = bitcast i16* %21034 to <16 x i16>*
  %21036 = load <16 x i16>, <16 x i16>* %21035, align 2, !tbaa !396
  %21037 = getelementptr inbounds i16, i16* %21033, i64 -15
  %21038 = bitcast i16* %21037 to <16 x i16>*
  %21039 = load <16 x i16>, <16 x i16>* %21038, align 2, !tbaa !396
  %21040 = getelementptr inbounds i16, i16* %21033, i64 -32
  %21041 = bitcast i16* %21040 to <16 x i16>*
  %21042 = load <16 x i16>, <16 x i16>* %21041, align 2, !tbaa !396
  %21043 = getelementptr inbounds i16, i16* %21033, i64 -16
  %21044 = bitcast i16* %21043 to <16 x i16>*
  %21045 = load <16 x i16>, <16 x i16>* %21044, align 2, !tbaa !396
  %21046 = getelementptr inbounds i16, i16* %21033, i64 -30
  %21047 = bitcast i16* %21046 to <16 x i16>*
  %21048 = load <16 x i16>, <16 x i16>* %21047, align 2, !tbaa !396
  %21049 = getelementptr inbounds i16, i16* %21033, i64 -14
  %21050 = bitcast i16* %21049 to <16 x i16>*
  %21051 = load <16 x i16>, <16 x i16>* %21050, align 2, !tbaa !396
  %21052 = getelementptr inbounds i16, i16* %21033, i64 -29
  %21053 = bitcast i16* %21052 to <16 x i16>*
  %21054 = load <16 x i16>, <16 x i16>* %21053, align 2, !tbaa !396
  %21055 = getelementptr inbounds i16, i16* %21033, i64 -13
  %21056 = bitcast i16* %21055 to <16 x i16>*
  %21057 = load <16 x i16>, <16 x i16>* %21056, align 2, !tbaa !396
  %21058 = getelementptr inbounds i16, i16* %21033, i64 -28
  %21059 = bitcast i16* %21058 to <16 x i16>*
  %21060 = load <16 x i16>, <16 x i16>* %21059, align 2, !tbaa !396
  %21061 = getelementptr inbounds i16, i16* %21033, i64 -12
  %21062 = bitcast i16* %21061 to <16 x i16>*
  %21063 = load <16 x i16>, <16 x i16>* %21062, align 2, !tbaa !396
  %21064 = getelementptr inbounds i16, i16* %21033, i64 -26
  %21065 = bitcast i16* %21064 to <16 x i16>*
  %21066 = load <16 x i16>, <16 x i16>* %21065, align 2, !tbaa !396
  %21067 = getelementptr inbounds i16, i16* %21033, i64 -10
  %21068 = bitcast i16* %21067 to <16 x i16>*
  %21069 = load <16 x i16>, <16 x i16>* %21068, align 2, !tbaa !396
  %21070 = getelementptr inbounds i16, i16* %21033, i64 -27
  %21071 = bitcast i16* %21070 to <16 x i16>*
  %21072 = load <16 x i16>, <16 x i16>* %21071, align 2, !tbaa !396
  %21073 = getelementptr inbounds i16, i16* %21033, i64 -11
  %21074 = bitcast i16* %21073 to <16 x i16>*
  %21075 = load <16 x i16>, <16 x i16>* %21074, align 2, !tbaa !396
  %21076 = add <16 x i16> %21042, %21036
  %21077 = add <16 x i16> %21076, %21048
  %21078 = add <16 x i16> %21077, %21054
  %21079 = add <16 x i16> %21078, %21060
  %21080 = add <16 x i16> %21079, %21066
  %21081 = add <16 x i16> %21080, %21072
  %21082 = add <16 x i16> %21045, %21039
  %21083 = add <16 x i16> %21082, %21051
  %21084 = add <16 x i16> %21083, %21057
  %21085 = add <16 x i16> %21084, %21063
  %21086 = add <16 x i16> %21085, %21069
  %21087 = add <16 x i16> %21086, %21075
  %21088 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21081, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21089 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21087, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21090 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21088, <16 x i16> %21081)
  %21091 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21089, <16 x i16> %21087)
  %21092 = shufflevector <16 x i16> %21090, <16 x i16> %21091, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21093 = lshr <32 x i16> %21092, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21094 = shufflevector <32 x i16> %21093, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21095 = add nsw i32 %a367, 3
  %21096 = and i32 %21095, 7
  %21097 = zext i32 %21096 to i64
  %21098 = mul nsw i64 %295, %21097
  %21099 = add nsw i64 %297, %21098
  %21100 = getelementptr inbounds i16, i16* %blur_x917, i64 %21099
  %21101 = getelementptr inbounds i16, i16* %21100, i64 -32
  %21102 = bitcast i16* %21101 to <16 x i16>*
  store <16 x i16> %21094, <16 x i16>* %21102, align 2, !tbaa !399
  %21103 = shufflevector <32 x i16> %21093, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21104 = getelementptr inbounds i16, i16* %21100, i64 -16
  %21105 = bitcast i16* %21104 to <16 x i16>*
  store <16 x i16> %21103, <16 x i16>* %21105, align 2, !tbaa !399
  br label %after_bb1009

"for blur_y.s0.x.x.rebased1017":                  ; preds = %"for blur_y.s0.x.x.rebased1017.preheader", %after_bb1020
  %indvars.iv3396 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1017.preheader" ], [ %indvars.iv.next3397, %after_bb1020 ]
  %21106 = add nsw i64 %indvars.iv3396, %299
  %21107 = icmp slt i64 %21106, 1
  %21108 = trunc i64 %21106 to i32
  %21109 = shl nsw i32 %21108, 5
  %21110 = icmp sgt i32 %202, %21109
  %21111 = or i1 %21107, %21110
  br i1 %21111, label %"produce blur_x1024", label %after_bb1020

"end for blur_y.s0.x.x.rebased1018":              ; preds = %after_bb1020, %after_bb1009
  br i1 %300, label %"for blur_y.s0.x.x.rebased1029.preheader", label %"end for blur_y.s0.x.x.rebased1030", !prof !386

"for blur_y.s0.x.x.rebased1029.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1018"
  %21112 = sext i32 %t17441014 to i64
  br label %"for blur_y.s0.x.x.rebased1029"

after_bb1020:                                     ; preds = %"for blur_y.s0.x.x.rebased1017", %"produce blur_x1024"
  %indvars.iv.next3397 = add nuw nsw i64 %indvars.iv3396, 1
  %.not2716 = icmp eq i64 %indvars.iv.next3397, %386
  br i1 %.not2716, label %"end for blur_y.s0.x.x.rebased1018", label %"for blur_y.s0.x.x.rebased1017"

"produce blur_x1024":                             ; preds = %"for blur_y.s0.x.x.rebased1017"
  %t7301025 = add nsw i32 %21109, %t17431015
  %21113 = sext i32 %t7301025 to i64
  %21114 = getelementptr inbounds i16, i16* %read_input860, i64 %21113
  %21115 = getelementptr inbounds i16, i16* %21114, i64 1
  %21116 = bitcast i16* %21115 to <16 x i16>*
  %21117 = load <16 x i16>, <16 x i16>* %21116, align 2, !tbaa !396
  %21118 = getelementptr inbounds i16, i16* %21114, i64 17
  %21119 = bitcast i16* %21118 to <16 x i16>*
  %21120 = load <16 x i16>, <16 x i16>* %21119, align 2, !tbaa !396
  %21121 = bitcast i16* %21114 to <16 x i16>*
  %21122 = load <16 x i16>, <16 x i16>* %21121, align 2, !tbaa !396
  %21123 = getelementptr inbounds i16, i16* %21114, i64 16
  %21124 = bitcast i16* %21123 to <16 x i16>*
  %21125 = load <16 x i16>, <16 x i16>* %21124, align 2, !tbaa !396
  %21126 = getelementptr inbounds i16, i16* %21114, i64 2
  %21127 = bitcast i16* %21126 to <16 x i16>*
  %21128 = load <16 x i16>, <16 x i16>* %21127, align 2, !tbaa !396
  %21129 = getelementptr inbounds i16, i16* %21114, i64 18
  %21130 = bitcast i16* %21129 to <16 x i16>*
  %21131 = load <16 x i16>, <16 x i16>* %21130, align 2, !tbaa !396
  %21132 = getelementptr inbounds i16, i16* %21114, i64 3
  %21133 = bitcast i16* %21132 to <16 x i16>*
  %21134 = load <16 x i16>, <16 x i16>* %21133, align 2, !tbaa !396
  %21135 = getelementptr inbounds i16, i16* %21114, i64 19
  %21136 = bitcast i16* %21135 to <16 x i16>*
  %21137 = load <16 x i16>, <16 x i16>* %21136, align 2, !tbaa !396
  %21138 = getelementptr inbounds i16, i16* %21114, i64 4
  %21139 = bitcast i16* %21138 to <16 x i16>*
  %21140 = load <16 x i16>, <16 x i16>* %21139, align 2, !tbaa !396
  %21141 = getelementptr inbounds i16, i16* %21114, i64 20
  %21142 = bitcast i16* %21141 to <16 x i16>*
  %21143 = load <16 x i16>, <16 x i16>* %21142, align 2, !tbaa !396
  %21144 = getelementptr inbounds i16, i16* %21114, i64 6
  %21145 = bitcast i16* %21144 to <16 x i16>*
  %21146 = load <16 x i16>, <16 x i16>* %21145, align 2, !tbaa !396
  %21147 = getelementptr inbounds i16, i16* %21114, i64 22
  %21148 = bitcast i16* %21147 to <16 x i16>*
  %21149 = load <16 x i16>, <16 x i16>* %21148, align 2, !tbaa !396
  %21150 = getelementptr inbounds i16, i16* %21114, i64 5
  %21151 = bitcast i16* %21150 to <16 x i16>*
  %21152 = load <16 x i16>, <16 x i16>* %21151, align 2, !tbaa !396
  %21153 = getelementptr inbounds i16, i16* %21114, i64 21
  %21154 = bitcast i16* %21153 to <16 x i16>*
  %21155 = load <16 x i16>, <16 x i16>* %21154, align 2, !tbaa !396
  %21156 = add <16 x i16> %21122, %21117
  %21157 = add <16 x i16> %21156, %21128
  %21158 = add <16 x i16> %21157, %21134
  %21159 = add <16 x i16> %21158, %21140
  %21160 = add <16 x i16> %21159, %21146
  %21161 = add <16 x i16> %21160, %21152
  %21162 = add <16 x i16> %21125, %21120
  %21163 = add <16 x i16> %21162, %21131
  %21164 = add <16 x i16> %21163, %21137
  %21165 = add <16 x i16> %21164, %21143
  %21166 = add <16 x i16> %21165, %21149
  %21167 = add <16 x i16> %21166, %21155
  %21168 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21161, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21169 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21167, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21170 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21168, <16 x i16> %21161)
  %21171 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21169, <16 x i16> %21167)
  %21172 = shufflevector <16 x i16> %21170, <16 x i16> %21171, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21173 = lshr <32 x i16> %21172, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21174 = shufflevector <32 x i16> %21173, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21175 = shl nsw i64 %21106, 5
  %21176 = add nsw i64 %21175, %21032
  %21177 = getelementptr inbounds i16, i16* %blur_x917, i64 %21176
  %21178 = bitcast i16* %21177 to <16 x i16>*
  store <16 x i16> %21174, <16 x i16>* %21178, align 2, !tbaa !399
  %21179 = shufflevector <32 x i16> %21173, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21180 = getelementptr inbounds i16, i16* %21177, i64 16
  %21181 = bitcast i16* %21180 to <16 x i16>*
  store <16 x i16> %21179, <16 x i16>* %21181, align 2, !tbaa !399
  br label %after_bb1020

"for blur_y.s0.x.x.rebased1029":                  ; preds = %"for blur_y.s0.x.x.rebased1029.preheader", %after_bb1032
  %blur_y.s0.x.x.rebased1031 = phi i32 [ %21186, %after_bb1032 ], [ 0, %"for blur_y.s0.x.x.rebased1029.preheader" ]
  %t22811035 = add nsw i32 %blur_y.s0.x.x.rebased1031, %t1670852
  %21182 = icmp slt i32 %t22811035, 1
  %21183 = shl nsw i32 %t22811035, 5
  %21184 = icmp sgt i32 %202, %21183
  %21185 = or i1 %21182, %21184
  br i1 %21185, label %then_bb1033, label %after_bb1032

"end for blur_y.s0.x.x.rebased1030":              ; preds = %after_bb1032, %"end for blur_y.s0.x.x.rebased1018"
  br i1 %232, label %"produce blur_x1042", label %"end for blur_y.s0.x.x.rebased1030.after_bb1039_crit_edge"

"end for blur_y.s0.x.x.rebased1030.after_bb1039_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased1030"
  %.pre3611 = add nsw i32 %a367, 4
  %.pre3613 = and i32 %.pre3611, 7
  br label %after_bb1039

after_bb1032:                                     ; preds = %"for blur_y.s0.x.x.rebased1029", %then_bb1033
  %21186 = add nuw nsw i32 %blur_y.s0.x.x.rebased1031, 1
  %.not2715 = icmp eq i32 %21186, %t1727937
  br i1 %.not2715, label %"end for blur_y.s0.x.x.rebased1030", label %"for blur_y.s0.x.x.rebased1029"

then_bb1033:                                      ; preds = %"for blur_y.s0.x.x.rebased1029"
  %21187 = icmp sgt i32 %a355, %21183
  %b445 = select i1 %21187, i32 %21183, i32 %a355
  %21188 = icmp slt i32 %b445, %202
  %blur_x.s0.x.v1.base.s1037 = select i1 %21188, i32 %b445, i32 %202
  %t7321038 = add nsw i32 %blur_x.s0.x.v1.base.s1037, %t17431015
  %21189 = sext i32 %t7321038 to i64
  %21190 = getelementptr inbounds i16, i16* %read_input860, i64 %21189
  %21191 = getelementptr inbounds i16, i16* %21190, i64 1
  %21192 = bitcast i16* %21191 to <16 x i16>*
  %21193 = load <16 x i16>, <16 x i16>* %21192, align 2, !tbaa !396
  %21194 = getelementptr inbounds i16, i16* %21190, i64 17
  %21195 = bitcast i16* %21194 to <16 x i16>*
  %21196 = load <16 x i16>, <16 x i16>* %21195, align 2, !tbaa !396
  %21197 = bitcast i16* %21190 to <16 x i16>*
  %21198 = load <16 x i16>, <16 x i16>* %21197, align 2, !tbaa !396
  %21199 = getelementptr inbounds i16, i16* %21190, i64 16
  %21200 = bitcast i16* %21199 to <16 x i16>*
  %21201 = load <16 x i16>, <16 x i16>* %21200, align 2, !tbaa !396
  %21202 = getelementptr inbounds i16, i16* %21190, i64 2
  %21203 = bitcast i16* %21202 to <16 x i16>*
  %21204 = load <16 x i16>, <16 x i16>* %21203, align 2, !tbaa !396
  %21205 = getelementptr inbounds i16, i16* %21190, i64 18
  %21206 = bitcast i16* %21205 to <16 x i16>*
  %21207 = load <16 x i16>, <16 x i16>* %21206, align 2, !tbaa !396
  %21208 = getelementptr inbounds i16, i16* %21190, i64 3
  %21209 = bitcast i16* %21208 to <16 x i16>*
  %21210 = load <16 x i16>, <16 x i16>* %21209, align 2, !tbaa !396
  %21211 = getelementptr inbounds i16, i16* %21190, i64 19
  %21212 = bitcast i16* %21211 to <16 x i16>*
  %21213 = load <16 x i16>, <16 x i16>* %21212, align 2, !tbaa !396
  %21214 = getelementptr inbounds i16, i16* %21190, i64 4
  %21215 = bitcast i16* %21214 to <16 x i16>*
  %21216 = load <16 x i16>, <16 x i16>* %21215, align 2, !tbaa !396
  %21217 = getelementptr inbounds i16, i16* %21190, i64 20
  %21218 = bitcast i16* %21217 to <16 x i16>*
  %21219 = load <16 x i16>, <16 x i16>* %21218, align 2, !tbaa !396
  %21220 = getelementptr inbounds i16, i16* %21190, i64 6
  %21221 = bitcast i16* %21220 to <16 x i16>*
  %21222 = load <16 x i16>, <16 x i16>* %21221, align 2, !tbaa !396
  %21223 = getelementptr inbounds i16, i16* %21190, i64 22
  %21224 = bitcast i16* %21223 to <16 x i16>*
  %21225 = load <16 x i16>, <16 x i16>* %21224, align 2, !tbaa !396
  %21226 = getelementptr inbounds i16, i16* %21190, i64 5
  %21227 = bitcast i16* %21226 to <16 x i16>*
  %21228 = load <16 x i16>, <16 x i16>* %21227, align 2, !tbaa !396
  %21229 = getelementptr inbounds i16, i16* %21190, i64 21
  %21230 = bitcast i16* %21229 to <16 x i16>*
  %21231 = load <16 x i16>, <16 x i16>* %21230, align 2, !tbaa !396
  %21232 = add <16 x i16> %21198, %21193
  %21233 = add <16 x i16> %21232, %21204
  %21234 = add <16 x i16> %21233, %21210
  %21235 = add <16 x i16> %21234, %21216
  %21236 = add <16 x i16> %21235, %21222
  %21237 = add <16 x i16> %21236, %21228
  %21238 = add <16 x i16> %21201, %21196
  %21239 = add <16 x i16> %21238, %21207
  %21240 = add <16 x i16> %21239, %21213
  %21241 = add <16 x i16> %21240, %21219
  %21242 = add <16 x i16> %21241, %21225
  %21243 = add <16 x i16> %21242, %21231
  %21244 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21237, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21245 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21243, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21246 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21244, <16 x i16> %21237)
  %21247 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21245, <16 x i16> %21243)
  %21248 = shufflevector <16 x i16> %21246, <16 x i16> %21247, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21249 = lshr <32 x i16> %21248, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21250 = shufflevector <32 x i16> %21249, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21251 = sext i32 %blur_x.s0.x.v1.base.s1037 to i64
  %21252 = add nsw i64 %21251, %21112
  %21253 = getelementptr inbounds i16, i16* %blur_x917, i64 %21252
  %21254 = bitcast i16* %21253 to <16 x i16>*
  store <16 x i16> %21250, <16 x i16>* %21254, align 2, !tbaa !399
  %21255 = shufflevector <32 x i16> %21249, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21256 = getelementptr inbounds i16, i16* %21253, i64 16
  %21257 = bitcast i16* %21256 to <16 x i16>*
  store <16 x i16> %21255, <16 x i16>* %21257, align 2, !tbaa !399
  br label %after_bb1032

after_bb1039:                                     ; preds = %"end for blur_y.s0.x.x.rebased1030.after_bb1039_crit_edge", %"produce blur_x1042"
  %.pre-phi3614 = phi i32 [ %.pre3613, %"end for blur_y.s0.x.x.rebased1030.after_bb1039_crit_edge" ], [ %21323, %"produce blur_x1042" ]
  %21258 = mul nsw i32 %.pre-phi3614, %a414
  %t17501044 = sub nsw i32 %21258, %t1689849
  br i1 %298, label %"for blur_y.s0.x.x.rebased1047.preheader", label %"end for blur_y.s0.x.x.rebased1048", !prof !386

"for blur_y.s0.x.x.rebased1047.preheader":        ; preds = %after_bb1039
  %21259 = sext i32 %t17501044 to i64
  br label %"for blur_y.s0.x.x.rebased1047"

"produce blur_x1042":                             ; preds = %"end for blur_y.s0.x.x.rebased1030"
  %21260 = getelementptr inbounds i16, i16* %read_input860, i64 %307
  %21261 = getelementptr inbounds i16, i16* %21260, i64 -31
  %21262 = bitcast i16* %21261 to <16 x i16>*
  %21263 = load <16 x i16>, <16 x i16>* %21262, align 2, !tbaa !396
  %21264 = getelementptr inbounds i16, i16* %21260, i64 -15
  %21265 = bitcast i16* %21264 to <16 x i16>*
  %21266 = load <16 x i16>, <16 x i16>* %21265, align 2, !tbaa !396
  %21267 = getelementptr inbounds i16, i16* %21260, i64 -32
  %21268 = bitcast i16* %21267 to <16 x i16>*
  %21269 = load <16 x i16>, <16 x i16>* %21268, align 2, !tbaa !396
  %21270 = getelementptr inbounds i16, i16* %21260, i64 -16
  %21271 = bitcast i16* %21270 to <16 x i16>*
  %21272 = load <16 x i16>, <16 x i16>* %21271, align 2, !tbaa !396
  %21273 = getelementptr inbounds i16, i16* %21260, i64 -30
  %21274 = bitcast i16* %21273 to <16 x i16>*
  %21275 = load <16 x i16>, <16 x i16>* %21274, align 2, !tbaa !396
  %21276 = getelementptr inbounds i16, i16* %21260, i64 -14
  %21277 = bitcast i16* %21276 to <16 x i16>*
  %21278 = load <16 x i16>, <16 x i16>* %21277, align 2, !tbaa !396
  %21279 = getelementptr inbounds i16, i16* %21260, i64 -29
  %21280 = bitcast i16* %21279 to <16 x i16>*
  %21281 = load <16 x i16>, <16 x i16>* %21280, align 2, !tbaa !396
  %21282 = getelementptr inbounds i16, i16* %21260, i64 -13
  %21283 = bitcast i16* %21282 to <16 x i16>*
  %21284 = load <16 x i16>, <16 x i16>* %21283, align 2, !tbaa !396
  %21285 = getelementptr inbounds i16, i16* %21260, i64 -28
  %21286 = bitcast i16* %21285 to <16 x i16>*
  %21287 = load <16 x i16>, <16 x i16>* %21286, align 2, !tbaa !396
  %21288 = getelementptr inbounds i16, i16* %21260, i64 -12
  %21289 = bitcast i16* %21288 to <16 x i16>*
  %21290 = load <16 x i16>, <16 x i16>* %21289, align 2, !tbaa !396
  %21291 = getelementptr inbounds i16, i16* %21260, i64 -26
  %21292 = bitcast i16* %21291 to <16 x i16>*
  %21293 = load <16 x i16>, <16 x i16>* %21292, align 2, !tbaa !396
  %21294 = getelementptr inbounds i16, i16* %21260, i64 -10
  %21295 = bitcast i16* %21294 to <16 x i16>*
  %21296 = load <16 x i16>, <16 x i16>* %21295, align 2, !tbaa !396
  %21297 = getelementptr inbounds i16, i16* %21260, i64 -27
  %21298 = bitcast i16* %21297 to <16 x i16>*
  %21299 = load <16 x i16>, <16 x i16>* %21298, align 2, !tbaa !396
  %21300 = getelementptr inbounds i16, i16* %21260, i64 -11
  %21301 = bitcast i16* %21300 to <16 x i16>*
  %21302 = load <16 x i16>, <16 x i16>* %21301, align 2, !tbaa !396
  %21303 = add <16 x i16> %21269, %21263
  %21304 = add <16 x i16> %21303, %21275
  %21305 = add <16 x i16> %21304, %21281
  %21306 = add <16 x i16> %21305, %21287
  %21307 = add <16 x i16> %21306, %21293
  %21308 = add <16 x i16> %21307, %21299
  %21309 = add <16 x i16> %21272, %21266
  %21310 = add <16 x i16> %21309, %21278
  %21311 = add <16 x i16> %21310, %21284
  %21312 = add <16 x i16> %21311, %21290
  %21313 = add <16 x i16> %21312, %21296
  %21314 = add <16 x i16> %21313, %21302
  %21315 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21308, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21316 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21314, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21317 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21315, <16 x i16> %21308)
  %21318 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21316, <16 x i16> %21314)
  %21319 = shufflevector <16 x i16> %21317, <16 x i16> %21318, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21320 = lshr <32 x i16> %21319, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21321 = shufflevector <32 x i16> %21320, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21322 = add nsw i32 %a367, 4
  %21323 = and i32 %21322, 7
  %21324 = zext i32 %21323 to i64
  %21325 = mul nsw i64 %295, %21324
  %21326 = add nsw i64 %297, %21325
  %21327 = getelementptr inbounds i16, i16* %blur_x917, i64 %21326
  %21328 = getelementptr inbounds i16, i16* %21327, i64 -32
  %21329 = bitcast i16* %21328 to <16 x i16>*
  store <16 x i16> %21321, <16 x i16>* %21329, align 2, !tbaa !399
  %21330 = shufflevector <32 x i16> %21320, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21331 = getelementptr inbounds i16, i16* %21327, i64 -16
  %21332 = bitcast i16* %21331 to <16 x i16>*
  store <16 x i16> %21330, <16 x i16>* %21332, align 2, !tbaa !399
  br label %after_bb1039

"for blur_y.s0.x.x.rebased1047":                  ; preds = %"for blur_y.s0.x.x.rebased1047.preheader", %after_bb1050
  %indvars.iv3399 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1047.preheader" ], [ %indvars.iv.next3400, %after_bb1050 ]
  %21333 = add nsw i64 %indvars.iv3399, %299
  %21334 = icmp slt i64 %21333, 1
  %21335 = trunc i64 %21333 to i32
  %21336 = shl nsw i32 %21335, 5
  %21337 = icmp sgt i32 %202, %21336
  %21338 = or i1 %21334, %21337
  br i1 %21338, label %"produce blur_x1054", label %after_bb1050

"end for blur_y.s0.x.x.rebased1048":              ; preds = %after_bb1050, %after_bb1039
  br i1 %300, label %"for blur_y.s0.x.x.rebased1059.preheader", label %"end for blur_y.s0.x.x.rebased1060", !prof !386

"for blur_y.s0.x.x.rebased1059.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1048"
  %21339 = sext i32 %t17501044 to i64
  br label %"for blur_y.s0.x.x.rebased1059"

after_bb1050:                                     ; preds = %"for blur_y.s0.x.x.rebased1047", %"produce blur_x1054"
  %indvars.iv.next3400 = add nuw nsw i64 %indvars.iv3399, 1
  %.not2714 = icmp eq i64 %indvars.iv.next3400, %386
  br i1 %.not2714, label %"end for blur_y.s0.x.x.rebased1048", label %"for blur_y.s0.x.x.rebased1047"

"produce blur_x1054":                             ; preds = %"for blur_y.s0.x.x.rebased1047"
  %t7361055 = add nsw i32 %21336, %t17491045
  %21340 = sext i32 %t7361055 to i64
  %21341 = getelementptr inbounds i16, i16* %read_input860, i64 %21340
  %21342 = getelementptr inbounds i16, i16* %21341, i64 1
  %21343 = bitcast i16* %21342 to <16 x i16>*
  %21344 = load <16 x i16>, <16 x i16>* %21343, align 2, !tbaa !396
  %21345 = getelementptr inbounds i16, i16* %21341, i64 17
  %21346 = bitcast i16* %21345 to <16 x i16>*
  %21347 = load <16 x i16>, <16 x i16>* %21346, align 2, !tbaa !396
  %21348 = bitcast i16* %21341 to <16 x i16>*
  %21349 = load <16 x i16>, <16 x i16>* %21348, align 2, !tbaa !396
  %21350 = getelementptr inbounds i16, i16* %21341, i64 16
  %21351 = bitcast i16* %21350 to <16 x i16>*
  %21352 = load <16 x i16>, <16 x i16>* %21351, align 2, !tbaa !396
  %21353 = getelementptr inbounds i16, i16* %21341, i64 2
  %21354 = bitcast i16* %21353 to <16 x i16>*
  %21355 = load <16 x i16>, <16 x i16>* %21354, align 2, !tbaa !396
  %21356 = getelementptr inbounds i16, i16* %21341, i64 18
  %21357 = bitcast i16* %21356 to <16 x i16>*
  %21358 = load <16 x i16>, <16 x i16>* %21357, align 2, !tbaa !396
  %21359 = getelementptr inbounds i16, i16* %21341, i64 3
  %21360 = bitcast i16* %21359 to <16 x i16>*
  %21361 = load <16 x i16>, <16 x i16>* %21360, align 2, !tbaa !396
  %21362 = getelementptr inbounds i16, i16* %21341, i64 19
  %21363 = bitcast i16* %21362 to <16 x i16>*
  %21364 = load <16 x i16>, <16 x i16>* %21363, align 2, !tbaa !396
  %21365 = getelementptr inbounds i16, i16* %21341, i64 4
  %21366 = bitcast i16* %21365 to <16 x i16>*
  %21367 = load <16 x i16>, <16 x i16>* %21366, align 2, !tbaa !396
  %21368 = getelementptr inbounds i16, i16* %21341, i64 20
  %21369 = bitcast i16* %21368 to <16 x i16>*
  %21370 = load <16 x i16>, <16 x i16>* %21369, align 2, !tbaa !396
  %21371 = getelementptr inbounds i16, i16* %21341, i64 6
  %21372 = bitcast i16* %21371 to <16 x i16>*
  %21373 = load <16 x i16>, <16 x i16>* %21372, align 2, !tbaa !396
  %21374 = getelementptr inbounds i16, i16* %21341, i64 22
  %21375 = bitcast i16* %21374 to <16 x i16>*
  %21376 = load <16 x i16>, <16 x i16>* %21375, align 2, !tbaa !396
  %21377 = getelementptr inbounds i16, i16* %21341, i64 5
  %21378 = bitcast i16* %21377 to <16 x i16>*
  %21379 = load <16 x i16>, <16 x i16>* %21378, align 2, !tbaa !396
  %21380 = getelementptr inbounds i16, i16* %21341, i64 21
  %21381 = bitcast i16* %21380 to <16 x i16>*
  %21382 = load <16 x i16>, <16 x i16>* %21381, align 2, !tbaa !396
  %21383 = add <16 x i16> %21349, %21344
  %21384 = add <16 x i16> %21383, %21355
  %21385 = add <16 x i16> %21384, %21361
  %21386 = add <16 x i16> %21385, %21367
  %21387 = add <16 x i16> %21386, %21373
  %21388 = add <16 x i16> %21387, %21379
  %21389 = add <16 x i16> %21352, %21347
  %21390 = add <16 x i16> %21389, %21358
  %21391 = add <16 x i16> %21390, %21364
  %21392 = add <16 x i16> %21391, %21370
  %21393 = add <16 x i16> %21392, %21376
  %21394 = add <16 x i16> %21393, %21382
  %21395 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21388, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21396 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21394, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21397 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21395, <16 x i16> %21388)
  %21398 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21396, <16 x i16> %21394)
  %21399 = shufflevector <16 x i16> %21397, <16 x i16> %21398, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21400 = lshr <32 x i16> %21399, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21401 = shufflevector <32 x i16> %21400, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21402 = shl nsw i64 %21333, 5
  %21403 = add nsw i64 %21402, %21259
  %21404 = getelementptr inbounds i16, i16* %blur_x917, i64 %21403
  %21405 = bitcast i16* %21404 to <16 x i16>*
  store <16 x i16> %21401, <16 x i16>* %21405, align 2, !tbaa !399
  %21406 = shufflevector <32 x i16> %21400, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21407 = getelementptr inbounds i16, i16* %21404, i64 16
  %21408 = bitcast i16* %21407 to <16 x i16>*
  store <16 x i16> %21406, <16 x i16>* %21408, align 2, !tbaa !399
  br label %after_bb1050

"for blur_y.s0.x.x.rebased1059":                  ; preds = %"for blur_y.s0.x.x.rebased1059.preheader", %after_bb1062
  %blur_y.s0.x.x.rebased1061 = phi i32 [ %21413, %after_bb1062 ], [ 0, %"for blur_y.s0.x.x.rebased1059.preheader" ]
  %t22831065 = add nsw i32 %blur_y.s0.x.x.rebased1061, %t1670852
  %21409 = icmp slt i32 %t22831065, 1
  %21410 = shl nsw i32 %t22831065, 5
  %21411 = icmp sgt i32 %202, %21410
  %21412 = or i1 %21409, %21411
  br i1 %21412, label %then_bb1063, label %after_bb1062

"end for blur_y.s0.x.x.rebased1060":              ; preds = %after_bb1062, %"end for blur_y.s0.x.x.rebased1048"
  br i1 %232, label %"produce blur_x1072", label %"end for blur_y.s0.x.x.rebased1060.after_bb1069_crit_edge"

"end for blur_y.s0.x.x.rebased1060.after_bb1069_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased1060"
  %.pre3615 = add nsw i32 %a367, 5
  %.pre3617 = and i32 %.pre3615, 7
  br label %after_bb1069

after_bb1062:                                     ; preds = %"for blur_y.s0.x.x.rebased1059", %then_bb1063
  %21413 = add nuw nsw i32 %blur_y.s0.x.x.rebased1061, 1
  %.not2713 = icmp eq i32 %21413, %t1727937
  br i1 %.not2713, label %"end for blur_y.s0.x.x.rebased1060", label %"for blur_y.s0.x.x.rebased1059"

then_bb1063:                                      ; preds = %"for blur_y.s0.x.x.rebased1059"
  %21414 = icmp sgt i32 %a355, %21410
  %b452 = select i1 %21414, i32 %21410, i32 %a355
  %21415 = icmp slt i32 %b452, %202
  %blur_x.s0.x.v1.base.s1067 = select i1 %21415, i32 %b452, i32 %202
  %t7381068 = add nsw i32 %blur_x.s0.x.v1.base.s1067, %t17491045
  %21416 = sext i32 %t7381068 to i64
  %21417 = getelementptr inbounds i16, i16* %read_input860, i64 %21416
  %21418 = getelementptr inbounds i16, i16* %21417, i64 1
  %21419 = bitcast i16* %21418 to <16 x i16>*
  %21420 = load <16 x i16>, <16 x i16>* %21419, align 2, !tbaa !396
  %21421 = getelementptr inbounds i16, i16* %21417, i64 17
  %21422 = bitcast i16* %21421 to <16 x i16>*
  %21423 = load <16 x i16>, <16 x i16>* %21422, align 2, !tbaa !396
  %21424 = bitcast i16* %21417 to <16 x i16>*
  %21425 = load <16 x i16>, <16 x i16>* %21424, align 2, !tbaa !396
  %21426 = getelementptr inbounds i16, i16* %21417, i64 16
  %21427 = bitcast i16* %21426 to <16 x i16>*
  %21428 = load <16 x i16>, <16 x i16>* %21427, align 2, !tbaa !396
  %21429 = getelementptr inbounds i16, i16* %21417, i64 2
  %21430 = bitcast i16* %21429 to <16 x i16>*
  %21431 = load <16 x i16>, <16 x i16>* %21430, align 2, !tbaa !396
  %21432 = getelementptr inbounds i16, i16* %21417, i64 18
  %21433 = bitcast i16* %21432 to <16 x i16>*
  %21434 = load <16 x i16>, <16 x i16>* %21433, align 2, !tbaa !396
  %21435 = getelementptr inbounds i16, i16* %21417, i64 3
  %21436 = bitcast i16* %21435 to <16 x i16>*
  %21437 = load <16 x i16>, <16 x i16>* %21436, align 2, !tbaa !396
  %21438 = getelementptr inbounds i16, i16* %21417, i64 19
  %21439 = bitcast i16* %21438 to <16 x i16>*
  %21440 = load <16 x i16>, <16 x i16>* %21439, align 2, !tbaa !396
  %21441 = getelementptr inbounds i16, i16* %21417, i64 4
  %21442 = bitcast i16* %21441 to <16 x i16>*
  %21443 = load <16 x i16>, <16 x i16>* %21442, align 2, !tbaa !396
  %21444 = getelementptr inbounds i16, i16* %21417, i64 20
  %21445 = bitcast i16* %21444 to <16 x i16>*
  %21446 = load <16 x i16>, <16 x i16>* %21445, align 2, !tbaa !396
  %21447 = getelementptr inbounds i16, i16* %21417, i64 6
  %21448 = bitcast i16* %21447 to <16 x i16>*
  %21449 = load <16 x i16>, <16 x i16>* %21448, align 2, !tbaa !396
  %21450 = getelementptr inbounds i16, i16* %21417, i64 22
  %21451 = bitcast i16* %21450 to <16 x i16>*
  %21452 = load <16 x i16>, <16 x i16>* %21451, align 2, !tbaa !396
  %21453 = getelementptr inbounds i16, i16* %21417, i64 5
  %21454 = bitcast i16* %21453 to <16 x i16>*
  %21455 = load <16 x i16>, <16 x i16>* %21454, align 2, !tbaa !396
  %21456 = getelementptr inbounds i16, i16* %21417, i64 21
  %21457 = bitcast i16* %21456 to <16 x i16>*
  %21458 = load <16 x i16>, <16 x i16>* %21457, align 2, !tbaa !396
  %21459 = add <16 x i16> %21425, %21420
  %21460 = add <16 x i16> %21459, %21431
  %21461 = add <16 x i16> %21460, %21437
  %21462 = add <16 x i16> %21461, %21443
  %21463 = add <16 x i16> %21462, %21449
  %21464 = add <16 x i16> %21463, %21455
  %21465 = add <16 x i16> %21428, %21423
  %21466 = add <16 x i16> %21465, %21434
  %21467 = add <16 x i16> %21466, %21440
  %21468 = add <16 x i16> %21467, %21446
  %21469 = add <16 x i16> %21468, %21452
  %21470 = add <16 x i16> %21469, %21458
  %21471 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21464, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21472 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21470, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21473 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21471, <16 x i16> %21464)
  %21474 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21472, <16 x i16> %21470)
  %21475 = shufflevector <16 x i16> %21473, <16 x i16> %21474, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21476 = lshr <32 x i16> %21475, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21477 = shufflevector <32 x i16> %21476, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21478 = sext i32 %blur_x.s0.x.v1.base.s1067 to i64
  %21479 = add nsw i64 %21478, %21339
  %21480 = getelementptr inbounds i16, i16* %blur_x917, i64 %21479
  %21481 = bitcast i16* %21480 to <16 x i16>*
  store <16 x i16> %21477, <16 x i16>* %21481, align 2, !tbaa !399
  %21482 = shufflevector <32 x i16> %21476, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21483 = getelementptr inbounds i16, i16* %21480, i64 16
  %21484 = bitcast i16* %21483 to <16 x i16>*
  store <16 x i16> %21482, <16 x i16>* %21484, align 2, !tbaa !399
  br label %after_bb1062

after_bb1069:                                     ; preds = %"end for blur_y.s0.x.x.rebased1060.after_bb1069_crit_edge", %"produce blur_x1072"
  %.pre-phi3618 = phi i32 [ %.pre3617, %"end for blur_y.s0.x.x.rebased1060.after_bb1069_crit_edge" ], [ %21550, %"produce blur_x1072" ]
  %21485 = mul nsw i32 %.pre-phi3618, %a414
  %t17561074 = sub nsw i32 %21485, %t1689849
  br i1 %298, label %"for blur_y.s0.x.x.rebased1077.preheader", label %"end for blur_y.s0.x.x.rebased1078", !prof !386

"for blur_y.s0.x.x.rebased1077.preheader":        ; preds = %after_bb1069
  %21486 = sext i32 %t17561074 to i64
  br label %"for blur_y.s0.x.x.rebased1077"

"produce blur_x1072":                             ; preds = %"end for blur_y.s0.x.x.rebased1060"
  %21487 = getelementptr inbounds i16, i16* %read_input860, i64 %310
  %21488 = getelementptr inbounds i16, i16* %21487, i64 -31
  %21489 = bitcast i16* %21488 to <16 x i16>*
  %21490 = load <16 x i16>, <16 x i16>* %21489, align 2, !tbaa !396
  %21491 = getelementptr inbounds i16, i16* %21487, i64 -15
  %21492 = bitcast i16* %21491 to <16 x i16>*
  %21493 = load <16 x i16>, <16 x i16>* %21492, align 2, !tbaa !396
  %21494 = getelementptr inbounds i16, i16* %21487, i64 -32
  %21495 = bitcast i16* %21494 to <16 x i16>*
  %21496 = load <16 x i16>, <16 x i16>* %21495, align 2, !tbaa !396
  %21497 = getelementptr inbounds i16, i16* %21487, i64 -16
  %21498 = bitcast i16* %21497 to <16 x i16>*
  %21499 = load <16 x i16>, <16 x i16>* %21498, align 2, !tbaa !396
  %21500 = getelementptr inbounds i16, i16* %21487, i64 -30
  %21501 = bitcast i16* %21500 to <16 x i16>*
  %21502 = load <16 x i16>, <16 x i16>* %21501, align 2, !tbaa !396
  %21503 = getelementptr inbounds i16, i16* %21487, i64 -14
  %21504 = bitcast i16* %21503 to <16 x i16>*
  %21505 = load <16 x i16>, <16 x i16>* %21504, align 2, !tbaa !396
  %21506 = getelementptr inbounds i16, i16* %21487, i64 -29
  %21507 = bitcast i16* %21506 to <16 x i16>*
  %21508 = load <16 x i16>, <16 x i16>* %21507, align 2, !tbaa !396
  %21509 = getelementptr inbounds i16, i16* %21487, i64 -13
  %21510 = bitcast i16* %21509 to <16 x i16>*
  %21511 = load <16 x i16>, <16 x i16>* %21510, align 2, !tbaa !396
  %21512 = getelementptr inbounds i16, i16* %21487, i64 -28
  %21513 = bitcast i16* %21512 to <16 x i16>*
  %21514 = load <16 x i16>, <16 x i16>* %21513, align 2, !tbaa !396
  %21515 = getelementptr inbounds i16, i16* %21487, i64 -12
  %21516 = bitcast i16* %21515 to <16 x i16>*
  %21517 = load <16 x i16>, <16 x i16>* %21516, align 2, !tbaa !396
  %21518 = getelementptr inbounds i16, i16* %21487, i64 -26
  %21519 = bitcast i16* %21518 to <16 x i16>*
  %21520 = load <16 x i16>, <16 x i16>* %21519, align 2, !tbaa !396
  %21521 = getelementptr inbounds i16, i16* %21487, i64 -10
  %21522 = bitcast i16* %21521 to <16 x i16>*
  %21523 = load <16 x i16>, <16 x i16>* %21522, align 2, !tbaa !396
  %21524 = getelementptr inbounds i16, i16* %21487, i64 -27
  %21525 = bitcast i16* %21524 to <16 x i16>*
  %21526 = load <16 x i16>, <16 x i16>* %21525, align 2, !tbaa !396
  %21527 = getelementptr inbounds i16, i16* %21487, i64 -11
  %21528 = bitcast i16* %21527 to <16 x i16>*
  %21529 = load <16 x i16>, <16 x i16>* %21528, align 2, !tbaa !396
  %21530 = add <16 x i16> %21496, %21490
  %21531 = add <16 x i16> %21530, %21502
  %21532 = add <16 x i16> %21531, %21508
  %21533 = add <16 x i16> %21532, %21514
  %21534 = add <16 x i16> %21533, %21520
  %21535 = add <16 x i16> %21534, %21526
  %21536 = add <16 x i16> %21499, %21493
  %21537 = add <16 x i16> %21536, %21505
  %21538 = add <16 x i16> %21537, %21511
  %21539 = add <16 x i16> %21538, %21517
  %21540 = add <16 x i16> %21539, %21523
  %21541 = add <16 x i16> %21540, %21529
  %21542 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21535, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21543 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21541, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21544 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21542, <16 x i16> %21535)
  %21545 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21543, <16 x i16> %21541)
  %21546 = shufflevector <16 x i16> %21544, <16 x i16> %21545, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21547 = lshr <32 x i16> %21546, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21548 = shufflevector <32 x i16> %21547, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21549 = add nsw i32 %a367, 5
  %21550 = and i32 %21549, 7
  %21551 = zext i32 %21550 to i64
  %21552 = mul nsw i64 %295, %21551
  %21553 = add nsw i64 %297, %21552
  %21554 = getelementptr inbounds i16, i16* %blur_x917, i64 %21553
  %21555 = getelementptr inbounds i16, i16* %21554, i64 -32
  %21556 = bitcast i16* %21555 to <16 x i16>*
  store <16 x i16> %21548, <16 x i16>* %21556, align 2, !tbaa !399
  %21557 = shufflevector <32 x i16> %21547, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21558 = getelementptr inbounds i16, i16* %21554, i64 -16
  %21559 = bitcast i16* %21558 to <16 x i16>*
  store <16 x i16> %21557, <16 x i16>* %21559, align 2, !tbaa !399
  br label %after_bb1069

"for blur_y.s0.x.x.rebased1077":                  ; preds = %"for blur_y.s0.x.x.rebased1077.preheader", %after_bb1080
  %indvars.iv3402 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1077.preheader" ], [ %indvars.iv.next3403, %after_bb1080 ]
  %21560 = add nsw i64 %indvars.iv3402, %299
  %21561 = icmp slt i64 %21560, 1
  %21562 = trunc i64 %21560 to i32
  %21563 = shl nsw i32 %21562, 5
  %21564 = icmp sgt i32 %202, %21563
  %21565 = or i1 %21561, %21564
  br i1 %21565, label %"produce blur_x1084", label %after_bb1080

"end for blur_y.s0.x.x.rebased1078":              ; preds = %after_bb1080, %after_bb1069
  br i1 %300, label %"for blur_y.s0.x.x.rebased1089.preheader", label %"end for blur_y.s0.x.x.rebased1090", !prof !386

"for blur_y.s0.x.x.rebased1089.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1078"
  %21566 = sext i32 %t17561074 to i64
  br label %"for blur_y.s0.x.x.rebased1089"

after_bb1080:                                     ; preds = %"for blur_y.s0.x.x.rebased1077", %"produce blur_x1084"
  %indvars.iv.next3403 = add nuw nsw i64 %indvars.iv3402, 1
  %.not2712 = icmp eq i64 %indvars.iv.next3403, %386
  br i1 %.not2712, label %"end for blur_y.s0.x.x.rebased1078", label %"for blur_y.s0.x.x.rebased1077"

"produce blur_x1084":                             ; preds = %"for blur_y.s0.x.x.rebased1077"
  %t7421085 = add nsw i32 %21563, %t17551075
  %21567 = sext i32 %t7421085 to i64
  %21568 = getelementptr inbounds i16, i16* %read_input860, i64 %21567
  %21569 = getelementptr inbounds i16, i16* %21568, i64 1
  %21570 = bitcast i16* %21569 to <16 x i16>*
  %21571 = load <16 x i16>, <16 x i16>* %21570, align 2, !tbaa !396
  %21572 = getelementptr inbounds i16, i16* %21568, i64 17
  %21573 = bitcast i16* %21572 to <16 x i16>*
  %21574 = load <16 x i16>, <16 x i16>* %21573, align 2, !tbaa !396
  %21575 = bitcast i16* %21568 to <16 x i16>*
  %21576 = load <16 x i16>, <16 x i16>* %21575, align 2, !tbaa !396
  %21577 = getelementptr inbounds i16, i16* %21568, i64 16
  %21578 = bitcast i16* %21577 to <16 x i16>*
  %21579 = load <16 x i16>, <16 x i16>* %21578, align 2, !tbaa !396
  %21580 = getelementptr inbounds i16, i16* %21568, i64 2
  %21581 = bitcast i16* %21580 to <16 x i16>*
  %21582 = load <16 x i16>, <16 x i16>* %21581, align 2, !tbaa !396
  %21583 = getelementptr inbounds i16, i16* %21568, i64 18
  %21584 = bitcast i16* %21583 to <16 x i16>*
  %21585 = load <16 x i16>, <16 x i16>* %21584, align 2, !tbaa !396
  %21586 = getelementptr inbounds i16, i16* %21568, i64 3
  %21587 = bitcast i16* %21586 to <16 x i16>*
  %21588 = load <16 x i16>, <16 x i16>* %21587, align 2, !tbaa !396
  %21589 = getelementptr inbounds i16, i16* %21568, i64 19
  %21590 = bitcast i16* %21589 to <16 x i16>*
  %21591 = load <16 x i16>, <16 x i16>* %21590, align 2, !tbaa !396
  %21592 = getelementptr inbounds i16, i16* %21568, i64 4
  %21593 = bitcast i16* %21592 to <16 x i16>*
  %21594 = load <16 x i16>, <16 x i16>* %21593, align 2, !tbaa !396
  %21595 = getelementptr inbounds i16, i16* %21568, i64 20
  %21596 = bitcast i16* %21595 to <16 x i16>*
  %21597 = load <16 x i16>, <16 x i16>* %21596, align 2, !tbaa !396
  %21598 = getelementptr inbounds i16, i16* %21568, i64 6
  %21599 = bitcast i16* %21598 to <16 x i16>*
  %21600 = load <16 x i16>, <16 x i16>* %21599, align 2, !tbaa !396
  %21601 = getelementptr inbounds i16, i16* %21568, i64 22
  %21602 = bitcast i16* %21601 to <16 x i16>*
  %21603 = load <16 x i16>, <16 x i16>* %21602, align 2, !tbaa !396
  %21604 = getelementptr inbounds i16, i16* %21568, i64 5
  %21605 = bitcast i16* %21604 to <16 x i16>*
  %21606 = load <16 x i16>, <16 x i16>* %21605, align 2, !tbaa !396
  %21607 = getelementptr inbounds i16, i16* %21568, i64 21
  %21608 = bitcast i16* %21607 to <16 x i16>*
  %21609 = load <16 x i16>, <16 x i16>* %21608, align 2, !tbaa !396
  %21610 = add <16 x i16> %21576, %21571
  %21611 = add <16 x i16> %21610, %21582
  %21612 = add <16 x i16> %21611, %21588
  %21613 = add <16 x i16> %21612, %21594
  %21614 = add <16 x i16> %21613, %21600
  %21615 = add <16 x i16> %21614, %21606
  %21616 = add <16 x i16> %21579, %21574
  %21617 = add <16 x i16> %21616, %21585
  %21618 = add <16 x i16> %21617, %21591
  %21619 = add <16 x i16> %21618, %21597
  %21620 = add <16 x i16> %21619, %21603
  %21621 = add <16 x i16> %21620, %21609
  %21622 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21615, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21623 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21621, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21624 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21622, <16 x i16> %21615)
  %21625 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21623, <16 x i16> %21621)
  %21626 = shufflevector <16 x i16> %21624, <16 x i16> %21625, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21627 = lshr <32 x i16> %21626, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21628 = shufflevector <32 x i16> %21627, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21629 = shl nsw i64 %21560, 5
  %21630 = add nsw i64 %21629, %21486
  %21631 = getelementptr inbounds i16, i16* %blur_x917, i64 %21630
  %21632 = bitcast i16* %21631 to <16 x i16>*
  store <16 x i16> %21628, <16 x i16>* %21632, align 2, !tbaa !399
  %21633 = shufflevector <32 x i16> %21627, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21634 = getelementptr inbounds i16, i16* %21631, i64 16
  %21635 = bitcast i16* %21634 to <16 x i16>*
  store <16 x i16> %21633, <16 x i16>* %21635, align 2, !tbaa !399
  br label %after_bb1080

"for blur_y.s0.x.x.rebased1089":                  ; preds = %"for blur_y.s0.x.x.rebased1089.preheader", %after_bb1092
  %blur_y.s0.x.x.rebased1091 = phi i32 [ %21640, %after_bb1092 ], [ 0, %"for blur_y.s0.x.x.rebased1089.preheader" ]
  %t22851095 = add nsw i32 %blur_y.s0.x.x.rebased1091, %t1670852
  %21636 = icmp slt i32 %t22851095, 1
  %21637 = shl nsw i32 %t22851095, 5
  %21638 = icmp sgt i32 %202, %21637
  %21639 = or i1 %21636, %21638
  br i1 %21639, label %then_bb1093, label %after_bb1092

"end for blur_y.s0.x.x.rebased1090":              ; preds = %after_bb1092, %"end for blur_y.s0.x.x.rebased1078"
  br i1 %232, label %"produce blur_x1102", label %"end for blur_y.s0.x.x.rebased1090.after_bb1099_crit_edge"

"end for blur_y.s0.x.x.rebased1090.after_bb1099_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased1090"
  %.pre3619 = add nsw i32 %a367, 6
  %.pre3621 = and i32 %.pre3619, 7
  br label %after_bb1099

after_bb1092:                                     ; preds = %"for blur_y.s0.x.x.rebased1089", %then_bb1093
  %21640 = add nuw nsw i32 %blur_y.s0.x.x.rebased1091, 1
  %.not2711 = icmp eq i32 %21640, %t1727937
  br i1 %.not2711, label %"end for blur_y.s0.x.x.rebased1090", label %"for blur_y.s0.x.x.rebased1089"

then_bb1093:                                      ; preds = %"for blur_y.s0.x.x.rebased1089"
  %21641 = icmp sgt i32 %a355, %21637
  %b459 = select i1 %21641, i32 %21637, i32 %a355
  %21642 = icmp slt i32 %b459, %202
  %blur_x.s0.x.v1.base.s1097 = select i1 %21642, i32 %b459, i32 %202
  %t7441098 = add nsw i32 %blur_x.s0.x.v1.base.s1097, %t17551075
  %21643 = sext i32 %t7441098 to i64
  %21644 = getelementptr inbounds i16, i16* %read_input860, i64 %21643
  %21645 = getelementptr inbounds i16, i16* %21644, i64 1
  %21646 = bitcast i16* %21645 to <16 x i16>*
  %21647 = load <16 x i16>, <16 x i16>* %21646, align 2, !tbaa !396
  %21648 = getelementptr inbounds i16, i16* %21644, i64 17
  %21649 = bitcast i16* %21648 to <16 x i16>*
  %21650 = load <16 x i16>, <16 x i16>* %21649, align 2, !tbaa !396
  %21651 = bitcast i16* %21644 to <16 x i16>*
  %21652 = load <16 x i16>, <16 x i16>* %21651, align 2, !tbaa !396
  %21653 = getelementptr inbounds i16, i16* %21644, i64 16
  %21654 = bitcast i16* %21653 to <16 x i16>*
  %21655 = load <16 x i16>, <16 x i16>* %21654, align 2, !tbaa !396
  %21656 = getelementptr inbounds i16, i16* %21644, i64 2
  %21657 = bitcast i16* %21656 to <16 x i16>*
  %21658 = load <16 x i16>, <16 x i16>* %21657, align 2, !tbaa !396
  %21659 = getelementptr inbounds i16, i16* %21644, i64 18
  %21660 = bitcast i16* %21659 to <16 x i16>*
  %21661 = load <16 x i16>, <16 x i16>* %21660, align 2, !tbaa !396
  %21662 = getelementptr inbounds i16, i16* %21644, i64 3
  %21663 = bitcast i16* %21662 to <16 x i16>*
  %21664 = load <16 x i16>, <16 x i16>* %21663, align 2, !tbaa !396
  %21665 = getelementptr inbounds i16, i16* %21644, i64 19
  %21666 = bitcast i16* %21665 to <16 x i16>*
  %21667 = load <16 x i16>, <16 x i16>* %21666, align 2, !tbaa !396
  %21668 = getelementptr inbounds i16, i16* %21644, i64 4
  %21669 = bitcast i16* %21668 to <16 x i16>*
  %21670 = load <16 x i16>, <16 x i16>* %21669, align 2, !tbaa !396
  %21671 = getelementptr inbounds i16, i16* %21644, i64 20
  %21672 = bitcast i16* %21671 to <16 x i16>*
  %21673 = load <16 x i16>, <16 x i16>* %21672, align 2, !tbaa !396
  %21674 = getelementptr inbounds i16, i16* %21644, i64 6
  %21675 = bitcast i16* %21674 to <16 x i16>*
  %21676 = load <16 x i16>, <16 x i16>* %21675, align 2, !tbaa !396
  %21677 = getelementptr inbounds i16, i16* %21644, i64 22
  %21678 = bitcast i16* %21677 to <16 x i16>*
  %21679 = load <16 x i16>, <16 x i16>* %21678, align 2, !tbaa !396
  %21680 = getelementptr inbounds i16, i16* %21644, i64 5
  %21681 = bitcast i16* %21680 to <16 x i16>*
  %21682 = load <16 x i16>, <16 x i16>* %21681, align 2, !tbaa !396
  %21683 = getelementptr inbounds i16, i16* %21644, i64 21
  %21684 = bitcast i16* %21683 to <16 x i16>*
  %21685 = load <16 x i16>, <16 x i16>* %21684, align 2, !tbaa !396
  %21686 = add <16 x i16> %21652, %21647
  %21687 = add <16 x i16> %21686, %21658
  %21688 = add <16 x i16> %21687, %21664
  %21689 = add <16 x i16> %21688, %21670
  %21690 = add <16 x i16> %21689, %21676
  %21691 = add <16 x i16> %21690, %21682
  %21692 = add <16 x i16> %21655, %21650
  %21693 = add <16 x i16> %21692, %21661
  %21694 = add <16 x i16> %21693, %21667
  %21695 = add <16 x i16> %21694, %21673
  %21696 = add <16 x i16> %21695, %21679
  %21697 = add <16 x i16> %21696, %21685
  %21698 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21691, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21699 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21697, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21700 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21698, <16 x i16> %21691)
  %21701 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21699, <16 x i16> %21697)
  %21702 = shufflevector <16 x i16> %21700, <16 x i16> %21701, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21703 = lshr <32 x i16> %21702, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21704 = shufflevector <32 x i16> %21703, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21705 = sext i32 %blur_x.s0.x.v1.base.s1097 to i64
  %21706 = add nsw i64 %21705, %21566
  %21707 = getelementptr inbounds i16, i16* %blur_x917, i64 %21706
  %21708 = bitcast i16* %21707 to <16 x i16>*
  store <16 x i16> %21704, <16 x i16>* %21708, align 2, !tbaa !399
  %21709 = shufflevector <32 x i16> %21703, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21710 = getelementptr inbounds i16, i16* %21707, i64 16
  %21711 = bitcast i16* %21710 to <16 x i16>*
  store <16 x i16> %21709, <16 x i16>* %21711, align 2, !tbaa !399
  br label %after_bb1092

after_bb1099:                                     ; preds = %"end for blur_y.s0.x.x.rebased1090.after_bb1099_crit_edge", %"produce blur_x1102"
  %.pre-phi3622 = phi i32 [ %.pre3621, %"end for blur_y.s0.x.x.rebased1090.after_bb1099_crit_edge" ], [ %21801, %"produce blur_x1102" ]
  %21712 = mul nsw i32 %.pre-phi3622, %a414
  %t17621110 = sub nsw i32 %21712, %t1689849
  br i1 %298, label %"for blur_y.s0.x.x.rebased1114.preheader", label %"end for blur_y.s0.x.x.rebased1115", !prof !386

"for blur_y.s0.x.x.rebased1114.preheader":        ; preds = %after_bb1099
  %21713 = sext i32 %t17621110 to i64
  %21714 = zext i32 %.pre-phi3602 to i64
  %21715 = mul nsw i64 %21714, %314
  %21716 = sub nsw i64 %21715, %294
  %21717 = zext i32 %.pre-phi3598 to i64
  %21718 = mul nsw i64 %21717, %314
  %21719 = sub nsw i64 %21718, %294
  %21720 = zext i32 %.pre-phi3606 to i64
  %21721 = mul nsw i64 %21720, %314
  %21722 = sub nsw i64 %21721, %294
  %21723 = zext i32 %.pre-phi3610 to i64
  %21724 = mul nsw i64 %21723, %314
  %21725 = sub nsw i64 %21724, %294
  %21726 = zext i32 %.pre-phi3614 to i64
  %21727 = mul nsw i64 %21726, %314
  %21728 = sub nsw i64 %21727, %294
  %21729 = zext i32 %.pre-phi3622 to i64
  %21730 = mul nsw i64 %21729, %314
  %21731 = sub nsw i64 %21730, %294
  %21732 = zext i32 %.pre-phi3618 to i64
  %21733 = mul nsw i64 %21732, %314
  %21734 = sub nsw i64 %21733, %294
  %21735 = sext i32 %a367 to i64
  %21736 = mul nsw i64 %21735, %315
  %21737 = add nsw i64 %21736, %318
  br label %"for blur_y.s0.x.x.rebased1114"

"produce blur_x1102":                             ; preds = %"end for blur_y.s0.x.x.rebased1090"
  %21738 = getelementptr inbounds i16, i16* %read_input860, i64 %313
  %21739 = getelementptr inbounds i16, i16* %21738, i64 -31
  %21740 = bitcast i16* %21739 to <16 x i16>*
  %21741 = load <16 x i16>, <16 x i16>* %21740, align 2, !tbaa !396
  %21742 = getelementptr inbounds i16, i16* %21738, i64 -15
  %21743 = bitcast i16* %21742 to <16 x i16>*
  %21744 = load <16 x i16>, <16 x i16>* %21743, align 2, !tbaa !396
  %21745 = getelementptr inbounds i16, i16* %21738, i64 -32
  %21746 = bitcast i16* %21745 to <16 x i16>*
  %21747 = load <16 x i16>, <16 x i16>* %21746, align 2, !tbaa !396
  %21748 = getelementptr inbounds i16, i16* %21738, i64 -16
  %21749 = bitcast i16* %21748 to <16 x i16>*
  %21750 = load <16 x i16>, <16 x i16>* %21749, align 2, !tbaa !396
  %21751 = getelementptr inbounds i16, i16* %21738, i64 -30
  %21752 = bitcast i16* %21751 to <16 x i16>*
  %21753 = load <16 x i16>, <16 x i16>* %21752, align 2, !tbaa !396
  %21754 = getelementptr inbounds i16, i16* %21738, i64 -14
  %21755 = bitcast i16* %21754 to <16 x i16>*
  %21756 = load <16 x i16>, <16 x i16>* %21755, align 2, !tbaa !396
  %21757 = getelementptr inbounds i16, i16* %21738, i64 -29
  %21758 = bitcast i16* %21757 to <16 x i16>*
  %21759 = load <16 x i16>, <16 x i16>* %21758, align 2, !tbaa !396
  %21760 = getelementptr inbounds i16, i16* %21738, i64 -13
  %21761 = bitcast i16* %21760 to <16 x i16>*
  %21762 = load <16 x i16>, <16 x i16>* %21761, align 2, !tbaa !396
  %21763 = getelementptr inbounds i16, i16* %21738, i64 -28
  %21764 = bitcast i16* %21763 to <16 x i16>*
  %21765 = load <16 x i16>, <16 x i16>* %21764, align 2, !tbaa !396
  %21766 = getelementptr inbounds i16, i16* %21738, i64 -12
  %21767 = bitcast i16* %21766 to <16 x i16>*
  %21768 = load <16 x i16>, <16 x i16>* %21767, align 2, !tbaa !396
  %21769 = getelementptr inbounds i16, i16* %21738, i64 -26
  %21770 = bitcast i16* %21769 to <16 x i16>*
  %21771 = load <16 x i16>, <16 x i16>* %21770, align 2, !tbaa !396
  %21772 = getelementptr inbounds i16, i16* %21738, i64 -10
  %21773 = bitcast i16* %21772 to <16 x i16>*
  %21774 = load <16 x i16>, <16 x i16>* %21773, align 2, !tbaa !396
  %21775 = getelementptr inbounds i16, i16* %21738, i64 -27
  %21776 = bitcast i16* %21775 to <16 x i16>*
  %21777 = load <16 x i16>, <16 x i16>* %21776, align 2, !tbaa !396
  %21778 = getelementptr inbounds i16, i16* %21738, i64 -11
  %21779 = bitcast i16* %21778 to <16 x i16>*
  %21780 = load <16 x i16>, <16 x i16>* %21779, align 2, !tbaa !396
  %21781 = add <16 x i16> %21747, %21741
  %21782 = add <16 x i16> %21781, %21753
  %21783 = add <16 x i16> %21782, %21759
  %21784 = add <16 x i16> %21783, %21765
  %21785 = add <16 x i16> %21784, %21771
  %21786 = add <16 x i16> %21785, %21777
  %21787 = add <16 x i16> %21750, %21744
  %21788 = add <16 x i16> %21787, %21756
  %21789 = add <16 x i16> %21788, %21762
  %21790 = add <16 x i16> %21789, %21768
  %21791 = add <16 x i16> %21790, %21774
  %21792 = add <16 x i16> %21791, %21780
  %21793 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21786, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21794 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21792, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21795 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21793, <16 x i16> %21786)
  %21796 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21794, <16 x i16> %21792)
  %21797 = shufflevector <16 x i16> %21795, <16 x i16> %21796, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21798 = lshr <32 x i16> %21797, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21799 = shufflevector <32 x i16> %21798, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21800 = add nsw i32 %a367, 6
  %21801 = and i32 %21800, 7
  %21802 = zext i32 %21801 to i64
  %21803 = mul nsw i64 %295, %21802
  %21804 = add nsw i64 %297, %21803
  %21805 = getelementptr inbounds i16, i16* %blur_x917, i64 %21804
  %21806 = getelementptr inbounds i16, i16* %21805, i64 -32
  %21807 = bitcast i16* %21806 to <16 x i16>*
  store <16 x i16> %21799, <16 x i16>* %21807, align 2, !tbaa !399
  %21808 = shufflevector <32 x i16> %21798, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21809 = getelementptr inbounds i16, i16* %21805, i64 -16
  %21810 = bitcast i16* %21809 to <16 x i16>*
  store <16 x i16> %21808, <16 x i16>* %21810, align 2, !tbaa !399
  %21811 = zext i32 %.pre-phi3602 to i64
  %21812 = mul nsw i64 %21811, %314
  %21813 = add nsw i64 %21812, %292
  %21814 = getelementptr inbounds i16, i16* %blur_x917, i64 %21813
  %21815 = getelementptr inbounds i16, i16* %21814, i64 -32
  %21816 = bitcast i16* %21815 to <16 x i16>*
  %21817 = load <16 x i16>, <16 x i16>* %21816, align 2, !tbaa !399
  %21818 = getelementptr inbounds i16, i16* %21814, i64 -16
  %21819 = bitcast i16* %21818 to <16 x i16>*
  %21820 = load <16 x i16>, <16 x i16>* %21819, align 2, !tbaa !399
  %21821 = zext i32 %.pre-phi3598 to i64
  %21822 = mul nsw i64 %21821, %314
  %21823 = add nsw i64 %21822, %292
  %21824 = getelementptr inbounds i16, i16* %blur_x917, i64 %21823
  %21825 = getelementptr inbounds i16, i16* %21824, i64 -32
  %21826 = bitcast i16* %21825 to <16 x i16>*
  %21827 = load <16 x i16>, <16 x i16>* %21826, align 2, !tbaa !399
  %21828 = getelementptr inbounds i16, i16* %21824, i64 -16
  %21829 = bitcast i16* %21828 to <16 x i16>*
  %21830 = load <16 x i16>, <16 x i16>* %21829, align 2, !tbaa !399
  %21831 = zext i32 %.pre-phi3606 to i64
  %21832 = mul nsw i64 %21831, %314
  %21833 = add nsw i64 %21832, %292
  %21834 = getelementptr inbounds i16, i16* %blur_x917, i64 %21833
  %21835 = getelementptr inbounds i16, i16* %21834, i64 -32
  %21836 = bitcast i16* %21835 to <16 x i16>*
  %21837 = load <16 x i16>, <16 x i16>* %21836, align 2, !tbaa !399
  %21838 = getelementptr inbounds i16, i16* %21834, i64 -16
  %21839 = bitcast i16* %21838 to <16 x i16>*
  %21840 = load <16 x i16>, <16 x i16>* %21839, align 2, !tbaa !399
  %21841 = zext i32 %.pre-phi3610 to i64
  %21842 = mul nsw i64 %21841, %314
  %21843 = add nsw i64 %21842, %292
  %21844 = getelementptr inbounds i16, i16* %blur_x917, i64 %21843
  %21845 = getelementptr inbounds i16, i16* %21844, i64 -32
  %21846 = bitcast i16* %21845 to <16 x i16>*
  %21847 = load <16 x i16>, <16 x i16>* %21846, align 2, !tbaa !399
  %21848 = getelementptr inbounds i16, i16* %21844, i64 -16
  %21849 = bitcast i16* %21848 to <16 x i16>*
  %21850 = load <16 x i16>, <16 x i16>* %21849, align 2, !tbaa !399
  %21851 = zext i32 %.pre-phi3614 to i64
  %21852 = mul nsw i64 %21851, %314
  %21853 = add nsw i64 %21852, %292
  %21854 = getelementptr inbounds i16, i16* %blur_x917, i64 %21853
  %21855 = getelementptr inbounds i16, i16* %21854, i64 -32
  %21856 = bitcast i16* %21855 to <16 x i16>*
  %21857 = load <16 x i16>, <16 x i16>* %21856, align 2, !tbaa !399
  %21858 = getelementptr inbounds i16, i16* %21854, i64 -16
  %21859 = bitcast i16* %21858 to <16 x i16>*
  %21860 = load <16 x i16>, <16 x i16>* %21859, align 2, !tbaa !399
  %21861 = mul nsw i64 %21802, %314
  %21862 = add nsw i64 %21861, %292
  %21863 = getelementptr inbounds i16, i16* %blur_x917, i64 %21862
  %21864 = getelementptr inbounds i16, i16* %21863, i64 -32
  %21865 = bitcast i16* %21864 to <16 x i16>*
  %21866 = load <16 x i16>, <16 x i16>* %21865, align 2, !tbaa !399
  %21867 = getelementptr inbounds i16, i16* %21863, i64 -16
  %21868 = bitcast i16* %21867 to <16 x i16>*
  %21869 = load <16 x i16>, <16 x i16>* %21868, align 2, !tbaa !399
  %21870 = zext i32 %.pre-phi3618 to i64
  %21871 = mul nsw i64 %21870, %314
  %21872 = add nsw i64 %21871, %292
  %21873 = getelementptr inbounds i16, i16* %blur_x917, i64 %21872
  %21874 = getelementptr inbounds i16, i16* %21873, i64 -32
  %21875 = bitcast i16* %21874 to <16 x i16>*
  %21876 = load <16 x i16>, <16 x i16>* %21875, align 2, !tbaa !399
  %21877 = getelementptr inbounds i16, i16* %21873, i64 -16
  %21878 = bitcast i16* %21877 to <16 x i16>*
  %21879 = load <16 x i16>, <16 x i16>* %21878, align 2, !tbaa !399
  %21880 = add <16 x i16> %21827, %21817
  %21881 = add <16 x i16> %21880, %21837
  %21882 = add <16 x i16> %21881, %21847
  %21883 = add <16 x i16> %21882, %21857
  %21884 = add <16 x i16> %21883, %21866
  %21885 = add <16 x i16> %21884, %21876
  %21886 = add <16 x i16> %21830, %21820
  %21887 = add <16 x i16> %21886, %21840
  %21888 = add <16 x i16> %21887, %21850
  %21889 = add <16 x i16> %21888, %21860
  %21890 = add <16 x i16> %21889, %21869
  %21891 = add <16 x i16> %21890, %21879
  %21892 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21885, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21893 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21891, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21894 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21892, <16 x i16> %21885)
  %21895 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21893, <16 x i16> %21891)
  %21896 = shufflevector <16 x i16> %21894, <16 x i16> %21895, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21897 = lshr <32 x i16> %21896, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21898 = shufflevector <32 x i16> %21897, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21899 = sext i32 %a367 to i64
  %21900 = mul nsw i64 %21899, %315
  %21901 = add nsw i64 %317, %21900
  %21902 = getelementptr inbounds i16, i16* %264, i64 %21901
  %21903 = getelementptr inbounds i16, i16* %21902, i64 -32
  %21904 = bitcast i16* %21903 to <16 x i16>*
  store <16 x i16> %21898, <16 x i16>* %21904, align 2, !tbaa !401
  %21905 = shufflevector <32 x i16> %21897, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21906 = getelementptr inbounds i16, i16* %21902, i64 -16
  %21907 = bitcast i16* %21906 to <16 x i16>*
  store <16 x i16> %21905, <16 x i16>* %21907, align 2, !tbaa !401
  br label %after_bb1099

"for blur_y.s0.x.x.rebased1114":                  ; preds = %"for blur_y.s0.x.x.rebased1114.preheader", %"consume blur_x1123"
  %indvars.iv3405 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1114.preheader" ], [ %indvars.iv.next3406, %"consume blur_x1123" ]
  %21908 = add nsw i64 %indvars.iv3405, %299
  %21909 = icmp slt i64 %21908, 1
  %21910 = trunc i64 %21908 to i32
  %21911 = shl nsw i32 %21910, 5
  %21912 = icmp sgt i32 %202, %21911
  %21913 = or i1 %21909, %21912
  br i1 %21913, label %"produce blur_x1121", label %"for blur_y.s0.x.x.rebased1114.consume blur_x1123_crit_edge"

"for blur_y.s0.x.x.rebased1114.consume blur_x1123_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1114"
  %.pre3623 = shl nsw i64 %21908, 5
  br label %"consume blur_x1123"

"end for blur_y.s0.x.x.rebased1115":              ; preds = %"consume blur_x1123", %after_bb1099
  br i1 %300, label %"for blur_y.s0.x.x.rebased1131.preheader", label %"end for blur_y.s0.x.x.rebased1132", !prof !386

"for blur_y.s0.x.x.rebased1131.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1115"
  %21914 = sext i32 %t17621110 to i64
  %21915 = zext i32 %.pre-phi3602 to i64
  %21916 = mul nsw i64 %21915, %314
  %21917 = sub nsw i64 %21916, %294
  %21918 = zext i32 %.pre-phi3598 to i64
  %21919 = mul nsw i64 %21918, %314
  %21920 = sub nsw i64 %21919, %294
  %21921 = zext i32 %.pre-phi3606 to i64
  %21922 = mul nsw i64 %21921, %314
  %21923 = sub nsw i64 %21922, %294
  %21924 = zext i32 %.pre-phi3610 to i64
  %21925 = mul nsw i64 %21924, %314
  %21926 = sub nsw i64 %21925, %294
  %21927 = zext i32 %.pre-phi3614 to i64
  %21928 = mul nsw i64 %21927, %314
  %21929 = sub nsw i64 %21928, %294
  %21930 = zext i32 %.pre-phi3622 to i64
  %21931 = mul nsw i64 %21930, %314
  %21932 = sub nsw i64 %21931, %294
  %21933 = zext i32 %.pre-phi3618 to i64
  %21934 = mul nsw i64 %21933, %314
  %21935 = sub nsw i64 %21934, %294
  %21936 = sext i32 %a367 to i64
  %21937 = mul nsw i64 %21936, %315
  %21938 = add nsw i64 %21937, %318
  br label %"for blur_y.s0.x.x.rebased1131"

"produce blur_x1121":                             ; preds = %"for blur_y.s0.x.x.rebased1114"
  %t7521122 = add nsw i32 %21911, %311
  %21939 = sext i32 %t7521122 to i64
  %21940 = getelementptr inbounds i16, i16* %read_input860, i64 %21939
  %21941 = getelementptr inbounds i16, i16* %21940, i64 1
  %21942 = bitcast i16* %21941 to <16 x i16>*
  %21943 = load <16 x i16>, <16 x i16>* %21942, align 2, !tbaa !396
  %21944 = getelementptr inbounds i16, i16* %21940, i64 17
  %21945 = bitcast i16* %21944 to <16 x i16>*
  %21946 = load <16 x i16>, <16 x i16>* %21945, align 2, !tbaa !396
  %21947 = bitcast i16* %21940 to <16 x i16>*
  %21948 = load <16 x i16>, <16 x i16>* %21947, align 2, !tbaa !396
  %21949 = getelementptr inbounds i16, i16* %21940, i64 16
  %21950 = bitcast i16* %21949 to <16 x i16>*
  %21951 = load <16 x i16>, <16 x i16>* %21950, align 2, !tbaa !396
  %21952 = getelementptr inbounds i16, i16* %21940, i64 2
  %21953 = bitcast i16* %21952 to <16 x i16>*
  %21954 = load <16 x i16>, <16 x i16>* %21953, align 2, !tbaa !396
  %21955 = getelementptr inbounds i16, i16* %21940, i64 18
  %21956 = bitcast i16* %21955 to <16 x i16>*
  %21957 = load <16 x i16>, <16 x i16>* %21956, align 2, !tbaa !396
  %21958 = getelementptr inbounds i16, i16* %21940, i64 3
  %21959 = bitcast i16* %21958 to <16 x i16>*
  %21960 = load <16 x i16>, <16 x i16>* %21959, align 2, !tbaa !396
  %21961 = getelementptr inbounds i16, i16* %21940, i64 19
  %21962 = bitcast i16* %21961 to <16 x i16>*
  %21963 = load <16 x i16>, <16 x i16>* %21962, align 2, !tbaa !396
  %21964 = getelementptr inbounds i16, i16* %21940, i64 4
  %21965 = bitcast i16* %21964 to <16 x i16>*
  %21966 = load <16 x i16>, <16 x i16>* %21965, align 2, !tbaa !396
  %21967 = getelementptr inbounds i16, i16* %21940, i64 20
  %21968 = bitcast i16* %21967 to <16 x i16>*
  %21969 = load <16 x i16>, <16 x i16>* %21968, align 2, !tbaa !396
  %21970 = getelementptr inbounds i16, i16* %21940, i64 6
  %21971 = bitcast i16* %21970 to <16 x i16>*
  %21972 = load <16 x i16>, <16 x i16>* %21971, align 2, !tbaa !396
  %21973 = getelementptr inbounds i16, i16* %21940, i64 22
  %21974 = bitcast i16* %21973 to <16 x i16>*
  %21975 = load <16 x i16>, <16 x i16>* %21974, align 2, !tbaa !396
  %21976 = getelementptr inbounds i16, i16* %21940, i64 5
  %21977 = bitcast i16* %21976 to <16 x i16>*
  %21978 = load <16 x i16>, <16 x i16>* %21977, align 2, !tbaa !396
  %21979 = getelementptr inbounds i16, i16* %21940, i64 21
  %21980 = bitcast i16* %21979 to <16 x i16>*
  %21981 = load <16 x i16>, <16 x i16>* %21980, align 2, !tbaa !396
  %21982 = add <16 x i16> %21948, %21943
  %21983 = add <16 x i16> %21982, %21954
  %21984 = add <16 x i16> %21983, %21960
  %21985 = add <16 x i16> %21984, %21966
  %21986 = add <16 x i16> %21985, %21972
  %21987 = add <16 x i16> %21986, %21978
  %21988 = add <16 x i16> %21951, %21946
  %21989 = add <16 x i16> %21988, %21957
  %21990 = add <16 x i16> %21989, %21963
  %21991 = add <16 x i16> %21990, %21969
  %21992 = add <16 x i16> %21991, %21975
  %21993 = add <16 x i16> %21992, %21981
  %21994 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21987, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21995 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21993, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %21996 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21994, <16 x i16> %21987)
  %21997 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %21995, <16 x i16> %21993)
  %21998 = shufflevector <16 x i16> %21996, <16 x i16> %21997, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21999 = lshr <32 x i16> %21998, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22000 = shufflevector <32 x i16> %21999, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22001 = shl nsw i64 %21908, 5
  %22002 = add nsw i64 %22001, %21713
  %22003 = getelementptr inbounds i16, i16* %blur_x917, i64 %22002
  %22004 = bitcast i16* %22003 to <16 x i16>*
  store <16 x i16> %22000, <16 x i16>* %22004, align 2, !tbaa !399
  %22005 = shufflevector <32 x i16> %21999, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22006 = getelementptr inbounds i16, i16* %22003, i64 16
  %22007 = bitcast i16* %22006 to <16 x i16>*
  store <16 x i16> %22005, <16 x i16>* %22007, align 2, !tbaa !399
  br label %"consume blur_x1123"

"consume blur_x1123":                             ; preds = %"for blur_y.s0.x.x.rebased1114.consume blur_x1123_crit_edge", %"produce blur_x1121"
  %.pre-phi3624 = phi i64 [ %.pre3623, %"for blur_y.s0.x.x.rebased1114.consume blur_x1123_crit_edge" ], [ %22001, %"produce blur_x1121" ]
  %22008 = add nsw i64 %21716, %.pre-phi3624
  %22009 = getelementptr inbounds i16, i16* %blur_x917, i64 %22008
  %22010 = bitcast i16* %22009 to <16 x i16>*
  %22011 = load <16 x i16>, <16 x i16>* %22010, align 2, !tbaa !399
  %22012 = getelementptr inbounds i16, i16* %22009, i64 16
  %22013 = bitcast i16* %22012 to <16 x i16>*
  %22014 = load <16 x i16>, <16 x i16>* %22013, align 2, !tbaa !399
  %22015 = add nsw i64 %21719, %.pre-phi3624
  %22016 = getelementptr inbounds i16, i16* %blur_x917, i64 %22015
  %22017 = bitcast i16* %22016 to <16 x i16>*
  %22018 = load <16 x i16>, <16 x i16>* %22017, align 2, !tbaa !399
  %22019 = getelementptr inbounds i16, i16* %22016, i64 16
  %22020 = bitcast i16* %22019 to <16 x i16>*
  %22021 = load <16 x i16>, <16 x i16>* %22020, align 2, !tbaa !399
  %22022 = add nsw i64 %21722, %.pre-phi3624
  %22023 = getelementptr inbounds i16, i16* %blur_x917, i64 %22022
  %22024 = bitcast i16* %22023 to <16 x i16>*
  %22025 = load <16 x i16>, <16 x i16>* %22024, align 2, !tbaa !399
  %22026 = getelementptr inbounds i16, i16* %22023, i64 16
  %22027 = bitcast i16* %22026 to <16 x i16>*
  %22028 = load <16 x i16>, <16 x i16>* %22027, align 2, !tbaa !399
  %22029 = add nsw i64 %21725, %.pre-phi3624
  %22030 = getelementptr inbounds i16, i16* %blur_x917, i64 %22029
  %22031 = bitcast i16* %22030 to <16 x i16>*
  %22032 = load <16 x i16>, <16 x i16>* %22031, align 2, !tbaa !399
  %22033 = getelementptr inbounds i16, i16* %22030, i64 16
  %22034 = bitcast i16* %22033 to <16 x i16>*
  %22035 = load <16 x i16>, <16 x i16>* %22034, align 2, !tbaa !399
  %22036 = add nsw i64 %21728, %.pre-phi3624
  %22037 = getelementptr inbounds i16, i16* %blur_x917, i64 %22036
  %22038 = bitcast i16* %22037 to <16 x i16>*
  %22039 = load <16 x i16>, <16 x i16>* %22038, align 2, !tbaa !399
  %22040 = getelementptr inbounds i16, i16* %22037, i64 16
  %22041 = bitcast i16* %22040 to <16 x i16>*
  %22042 = load <16 x i16>, <16 x i16>* %22041, align 2, !tbaa !399
  %22043 = add nsw i64 %21731, %.pre-phi3624
  %22044 = getelementptr inbounds i16, i16* %blur_x917, i64 %22043
  %22045 = bitcast i16* %22044 to <16 x i16>*
  %22046 = load <16 x i16>, <16 x i16>* %22045, align 2, !tbaa !399
  %22047 = getelementptr inbounds i16, i16* %22044, i64 16
  %22048 = bitcast i16* %22047 to <16 x i16>*
  %22049 = load <16 x i16>, <16 x i16>* %22048, align 2, !tbaa !399
  %22050 = add nsw i64 %21734, %.pre-phi3624
  %22051 = getelementptr inbounds i16, i16* %blur_x917, i64 %22050
  %22052 = bitcast i16* %22051 to <16 x i16>*
  %22053 = load <16 x i16>, <16 x i16>* %22052, align 2, !tbaa !399
  %22054 = getelementptr inbounds i16, i16* %22051, i64 16
  %22055 = bitcast i16* %22054 to <16 x i16>*
  %22056 = load <16 x i16>, <16 x i16>* %22055, align 2, !tbaa !399
  %22057 = add <16 x i16> %22018, %22011
  %22058 = add <16 x i16> %22057, %22025
  %22059 = add <16 x i16> %22058, %22032
  %22060 = add <16 x i16> %22059, %22039
  %22061 = add <16 x i16> %22060, %22046
  %22062 = add <16 x i16> %22061, %22053
  %22063 = add <16 x i16> %22021, %22014
  %22064 = add <16 x i16> %22063, %22028
  %22065 = add <16 x i16> %22064, %22035
  %22066 = add <16 x i16> %22065, %22042
  %22067 = add <16 x i16> %22066, %22049
  %22068 = add <16 x i16> %22067, %22056
  %22069 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22062, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22070 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22068, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22071 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22069, <16 x i16> %22062)
  %22072 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22070, <16 x i16> %22068)
  %22073 = shufflevector <16 x i16> %22071, <16 x i16> %22072, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22074 = lshr <32 x i16> %22073, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22075 = shufflevector <32 x i16> %22074, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22076 = add nsw i64 %21737, %.pre-phi3624
  %22077 = getelementptr inbounds i16, i16* %264, i64 %22076
  %22078 = bitcast i16* %22077 to <16 x i16>*
  store <16 x i16> %22075, <16 x i16>* %22078, align 2, !tbaa !401
  %22079 = shufflevector <32 x i16> %22074, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22080 = getelementptr inbounds i16, i16* %22077, i64 16
  %22081 = bitcast i16* %22080 to <16 x i16>*
  store <16 x i16> %22079, <16 x i16>* %22081, align 2, !tbaa !401
  %indvars.iv.next3406 = add nuw nsw i64 %indvars.iv3405, 1
  %.not2710 = icmp eq i64 %indvars.iv.next3406, %386
  br i1 %.not2710, label %"end for blur_y.s0.x.x.rebased1115", label %"for blur_y.s0.x.x.rebased1114"

"for blur_y.s0.x.x.rebased1131":                  ; preds = %"for blur_y.s0.x.x.rebased1131.preheader", %"consume blur_x1141"
  %blur_y.s0.x.x.rebased1133 = phi i32 [ %22232, %"consume blur_x1141" ], [ 0, %"for blur_y.s0.x.x.rebased1131.preheader" ]
  %22082 = add nsw i32 %blur_y.s0.x.x.rebased1133, %t1670852
  %a460 = shl nsw i32 %22082, 5
  %22083 = icmp sgt i32 %a355, %a460
  %b466 = select i1 %22083, i32 %a460, i32 %a355
  %22084 = icmp slt i32 %22082, 1
  %22085 = icmp sgt i32 %202, %a460
  %22086 = or i1 %22084, %22085
  br i1 %22086, label %"produce blur_x1138", label %"consume blur_x1141"

"end for blur_y.s0.x.x.rebased1132":              ; preds = %"consume blur_x1141", %"end for blur_y.s0.x.x.rebased1115"
  br i1 %232, label %"produce blur_x1145", label %"end for blur_y.s0.x.x.rebased1132.after_bb1142_crit_edge"

"end for blur_y.s0.x.x.rebased1132.after_bb1142_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased1132"
  %.pre3625 = add nsw i32 %a367, 7
  %.pre3627 = and i32 %.pre3625, 7
  br label %after_bb1142

"produce blur_x1138":                             ; preds = %"for blur_y.s0.x.x.rebased1131"
  %22087 = icmp slt i32 %b466, %202
  %blur_x.s0.x.v1.base.s1139 = select i1 %22087, i32 %b466, i32 %202
  %t7571140 = add nsw i32 %blur_x.s0.x.v1.base.s1139, %311
  %22088 = sext i32 %t7571140 to i64
  %22089 = getelementptr inbounds i16, i16* %read_input860, i64 %22088
  %22090 = getelementptr inbounds i16, i16* %22089, i64 1
  %22091 = bitcast i16* %22090 to <16 x i16>*
  %22092 = load <16 x i16>, <16 x i16>* %22091, align 2, !tbaa !396
  %22093 = getelementptr inbounds i16, i16* %22089, i64 17
  %22094 = bitcast i16* %22093 to <16 x i16>*
  %22095 = load <16 x i16>, <16 x i16>* %22094, align 2, !tbaa !396
  %22096 = bitcast i16* %22089 to <16 x i16>*
  %22097 = load <16 x i16>, <16 x i16>* %22096, align 2, !tbaa !396
  %22098 = getelementptr inbounds i16, i16* %22089, i64 16
  %22099 = bitcast i16* %22098 to <16 x i16>*
  %22100 = load <16 x i16>, <16 x i16>* %22099, align 2, !tbaa !396
  %22101 = getelementptr inbounds i16, i16* %22089, i64 2
  %22102 = bitcast i16* %22101 to <16 x i16>*
  %22103 = load <16 x i16>, <16 x i16>* %22102, align 2, !tbaa !396
  %22104 = getelementptr inbounds i16, i16* %22089, i64 18
  %22105 = bitcast i16* %22104 to <16 x i16>*
  %22106 = load <16 x i16>, <16 x i16>* %22105, align 2, !tbaa !396
  %22107 = getelementptr inbounds i16, i16* %22089, i64 3
  %22108 = bitcast i16* %22107 to <16 x i16>*
  %22109 = load <16 x i16>, <16 x i16>* %22108, align 2, !tbaa !396
  %22110 = getelementptr inbounds i16, i16* %22089, i64 19
  %22111 = bitcast i16* %22110 to <16 x i16>*
  %22112 = load <16 x i16>, <16 x i16>* %22111, align 2, !tbaa !396
  %22113 = getelementptr inbounds i16, i16* %22089, i64 4
  %22114 = bitcast i16* %22113 to <16 x i16>*
  %22115 = load <16 x i16>, <16 x i16>* %22114, align 2, !tbaa !396
  %22116 = getelementptr inbounds i16, i16* %22089, i64 20
  %22117 = bitcast i16* %22116 to <16 x i16>*
  %22118 = load <16 x i16>, <16 x i16>* %22117, align 2, !tbaa !396
  %22119 = getelementptr inbounds i16, i16* %22089, i64 6
  %22120 = bitcast i16* %22119 to <16 x i16>*
  %22121 = load <16 x i16>, <16 x i16>* %22120, align 2, !tbaa !396
  %22122 = getelementptr inbounds i16, i16* %22089, i64 22
  %22123 = bitcast i16* %22122 to <16 x i16>*
  %22124 = load <16 x i16>, <16 x i16>* %22123, align 2, !tbaa !396
  %22125 = getelementptr inbounds i16, i16* %22089, i64 5
  %22126 = bitcast i16* %22125 to <16 x i16>*
  %22127 = load <16 x i16>, <16 x i16>* %22126, align 2, !tbaa !396
  %22128 = getelementptr inbounds i16, i16* %22089, i64 21
  %22129 = bitcast i16* %22128 to <16 x i16>*
  %22130 = load <16 x i16>, <16 x i16>* %22129, align 2, !tbaa !396
  %22131 = add <16 x i16> %22097, %22092
  %22132 = add <16 x i16> %22131, %22103
  %22133 = add <16 x i16> %22132, %22109
  %22134 = add <16 x i16> %22133, %22115
  %22135 = add <16 x i16> %22134, %22121
  %22136 = add <16 x i16> %22135, %22127
  %22137 = add <16 x i16> %22100, %22095
  %22138 = add <16 x i16> %22137, %22106
  %22139 = add <16 x i16> %22138, %22112
  %22140 = add <16 x i16> %22139, %22118
  %22141 = add <16 x i16> %22140, %22124
  %22142 = add <16 x i16> %22141, %22130
  %22143 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22136, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22144 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22142, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22145 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22143, <16 x i16> %22136)
  %22146 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22144, <16 x i16> %22142)
  %22147 = shufflevector <16 x i16> %22145, <16 x i16> %22146, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22148 = lshr <32 x i16> %22147, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22149 = shufflevector <32 x i16> %22148, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22150 = sext i32 %blur_x.s0.x.v1.base.s1139 to i64
  %22151 = add nsw i64 %22150, %21914
  %22152 = getelementptr inbounds i16, i16* %blur_x917, i64 %22151
  %22153 = bitcast i16* %22152 to <16 x i16>*
  store <16 x i16> %22149, <16 x i16>* %22153, align 2, !tbaa !399
  %22154 = shufflevector <32 x i16> %22148, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22155 = getelementptr inbounds i16, i16* %22152, i64 16
  %22156 = bitcast i16* %22155 to <16 x i16>*
  store <16 x i16> %22154, <16 x i16>* %22156, align 2, !tbaa !399
  br label %"consume blur_x1141"

"consume blur_x1141":                             ; preds = %"for blur_y.s0.x.x.rebased1131", %"produce blur_x1138"
  %22157 = sext i32 %b466 to i64
  %22158 = add nsw i64 %21917, %22157
  %22159 = getelementptr inbounds i16, i16* %blur_x917, i64 %22158
  %22160 = bitcast i16* %22159 to <16 x i16>*
  %22161 = load <16 x i16>, <16 x i16>* %22160, align 2, !tbaa !399
  %22162 = getelementptr inbounds i16, i16* %22159, i64 16
  %22163 = bitcast i16* %22162 to <16 x i16>*
  %22164 = load <16 x i16>, <16 x i16>* %22163, align 2, !tbaa !399
  %22165 = add nsw i64 %21920, %22157
  %22166 = getelementptr inbounds i16, i16* %blur_x917, i64 %22165
  %22167 = bitcast i16* %22166 to <16 x i16>*
  %22168 = load <16 x i16>, <16 x i16>* %22167, align 2, !tbaa !399
  %22169 = getelementptr inbounds i16, i16* %22166, i64 16
  %22170 = bitcast i16* %22169 to <16 x i16>*
  %22171 = load <16 x i16>, <16 x i16>* %22170, align 2, !tbaa !399
  %22172 = add nsw i64 %21923, %22157
  %22173 = getelementptr inbounds i16, i16* %blur_x917, i64 %22172
  %22174 = bitcast i16* %22173 to <16 x i16>*
  %22175 = load <16 x i16>, <16 x i16>* %22174, align 2, !tbaa !399
  %22176 = getelementptr inbounds i16, i16* %22173, i64 16
  %22177 = bitcast i16* %22176 to <16 x i16>*
  %22178 = load <16 x i16>, <16 x i16>* %22177, align 2, !tbaa !399
  %22179 = add nsw i64 %21926, %22157
  %22180 = getelementptr inbounds i16, i16* %blur_x917, i64 %22179
  %22181 = bitcast i16* %22180 to <16 x i16>*
  %22182 = load <16 x i16>, <16 x i16>* %22181, align 2, !tbaa !399
  %22183 = getelementptr inbounds i16, i16* %22180, i64 16
  %22184 = bitcast i16* %22183 to <16 x i16>*
  %22185 = load <16 x i16>, <16 x i16>* %22184, align 2, !tbaa !399
  %22186 = add nsw i64 %21929, %22157
  %22187 = getelementptr inbounds i16, i16* %blur_x917, i64 %22186
  %22188 = bitcast i16* %22187 to <16 x i16>*
  %22189 = load <16 x i16>, <16 x i16>* %22188, align 2, !tbaa !399
  %22190 = getelementptr inbounds i16, i16* %22187, i64 16
  %22191 = bitcast i16* %22190 to <16 x i16>*
  %22192 = load <16 x i16>, <16 x i16>* %22191, align 2, !tbaa !399
  %22193 = add nsw i64 %21932, %22157
  %22194 = getelementptr inbounds i16, i16* %blur_x917, i64 %22193
  %22195 = bitcast i16* %22194 to <16 x i16>*
  %22196 = load <16 x i16>, <16 x i16>* %22195, align 2, !tbaa !399
  %22197 = getelementptr inbounds i16, i16* %22194, i64 16
  %22198 = bitcast i16* %22197 to <16 x i16>*
  %22199 = load <16 x i16>, <16 x i16>* %22198, align 2, !tbaa !399
  %22200 = add nsw i64 %21935, %22157
  %22201 = getelementptr inbounds i16, i16* %blur_x917, i64 %22200
  %22202 = bitcast i16* %22201 to <16 x i16>*
  %22203 = load <16 x i16>, <16 x i16>* %22202, align 2, !tbaa !399
  %22204 = getelementptr inbounds i16, i16* %22201, i64 16
  %22205 = bitcast i16* %22204 to <16 x i16>*
  %22206 = load <16 x i16>, <16 x i16>* %22205, align 2, !tbaa !399
  %22207 = add <16 x i16> %22168, %22161
  %22208 = add <16 x i16> %22207, %22175
  %22209 = add <16 x i16> %22208, %22182
  %22210 = add <16 x i16> %22209, %22189
  %22211 = add <16 x i16> %22210, %22196
  %22212 = add <16 x i16> %22211, %22203
  %22213 = add <16 x i16> %22171, %22164
  %22214 = add <16 x i16> %22213, %22178
  %22215 = add <16 x i16> %22214, %22185
  %22216 = add <16 x i16> %22215, %22192
  %22217 = add <16 x i16> %22216, %22199
  %22218 = add <16 x i16> %22217, %22206
  %22219 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22212, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22220 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22218, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22221 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22219, <16 x i16> %22212)
  %22222 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22220, <16 x i16> %22218)
  %22223 = shufflevector <16 x i16> %22221, <16 x i16> %22222, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22224 = lshr <32 x i16> %22223, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22225 = shufflevector <32 x i16> %22224, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22226 = add nsw i64 %21938, %22157
  %22227 = getelementptr inbounds i16, i16* %264, i64 %22226
  %22228 = bitcast i16* %22227 to <16 x i16>*
  store <16 x i16> %22225, <16 x i16>* %22228, align 2, !tbaa !401
  %22229 = shufflevector <32 x i16> %22224, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22230 = getelementptr inbounds i16, i16* %22227, i64 16
  %22231 = bitcast i16* %22230 to <16 x i16>*
  store <16 x i16> %22229, <16 x i16>* %22231, align 2, !tbaa !401
  %22232 = add nuw nsw i32 %blur_y.s0.x.x.rebased1133, 1
  %.not2709 = icmp eq i32 %22232, %t1727937
  br i1 %.not2709, label %"end for blur_y.s0.x.x.rebased1132", label %"for blur_y.s0.x.x.rebased1131"

after_bb1142:                                     ; preds = %"end for blur_y.s0.x.x.rebased1132.after_bb1142_crit_edge", %"produce blur_x1145"
  %.pre-phi3628 = phi i32 [ %.pre3627, %"end for blur_y.s0.x.x.rebased1132.after_bb1142_crit_edge" ], [ %22323, %"produce blur_x1145" ]
  %22233 = mul nsw i32 %.pre-phi3628, %a414
  %t17781153 = sub nsw i32 %22233, %t1689849
  br i1 %298, label %"for blur_y.s0.x.x.rebased1157.preheader", label %"end for blur_y.s0.x.x.rebased1158", !prof !386

"for blur_y.s0.x.x.rebased1157.preheader":        ; preds = %after_bb1142
  %22234 = sext i32 %t17781153 to i64
  %22235 = zext i32 %.pre-phi3606 to i64
  %22236 = mul nsw i64 %22235, %314
  %22237 = sub nsw i64 %22236, %294
  %22238 = zext i32 %.pre-phi3602 to i64
  %22239 = mul nsw i64 %22238, %314
  %22240 = sub nsw i64 %22239, %294
  %22241 = zext i32 %.pre-phi3610 to i64
  %22242 = mul nsw i64 %22241, %314
  %22243 = sub nsw i64 %22242, %294
  %22244 = zext i32 %.pre-phi3614 to i64
  %22245 = mul nsw i64 %22244, %314
  %22246 = sub nsw i64 %22245, %294
  %22247 = zext i32 %.pre-phi3618 to i64
  %22248 = mul nsw i64 %22247, %314
  %22249 = sub nsw i64 %22248, %294
  %22250 = zext i32 %.pre-phi3628 to i64
  %22251 = mul nsw i64 %22250, %314
  %22252 = sub nsw i64 %22251, %294
  %22253 = zext i32 %.pre-phi3622 to i64
  %22254 = mul nsw i64 %22253, %314
  %22255 = sub nsw i64 %22254, %294
  %22256 = sext i32 %a367 to i64
  %22257 = add nsw i64 %22256, 1
  %22258 = mul nsw i64 %22257, %315
  %22259 = add nsw i64 %22258, %318
  br label %"for blur_y.s0.x.x.rebased1157"

"produce blur_x1145":                             ; preds = %"end for blur_y.s0.x.x.rebased1132"
  %22260 = getelementptr inbounds i16, i16* %read_input860, i64 %319
  %22261 = getelementptr inbounds i16, i16* %22260, i64 -31
  %22262 = bitcast i16* %22261 to <16 x i16>*
  %22263 = load <16 x i16>, <16 x i16>* %22262, align 2, !tbaa !396
  %22264 = getelementptr inbounds i16, i16* %22260, i64 -15
  %22265 = bitcast i16* %22264 to <16 x i16>*
  %22266 = load <16 x i16>, <16 x i16>* %22265, align 2, !tbaa !396
  %22267 = getelementptr inbounds i16, i16* %22260, i64 -32
  %22268 = bitcast i16* %22267 to <16 x i16>*
  %22269 = load <16 x i16>, <16 x i16>* %22268, align 2, !tbaa !396
  %22270 = getelementptr inbounds i16, i16* %22260, i64 -16
  %22271 = bitcast i16* %22270 to <16 x i16>*
  %22272 = load <16 x i16>, <16 x i16>* %22271, align 2, !tbaa !396
  %22273 = getelementptr inbounds i16, i16* %22260, i64 -30
  %22274 = bitcast i16* %22273 to <16 x i16>*
  %22275 = load <16 x i16>, <16 x i16>* %22274, align 2, !tbaa !396
  %22276 = getelementptr inbounds i16, i16* %22260, i64 -14
  %22277 = bitcast i16* %22276 to <16 x i16>*
  %22278 = load <16 x i16>, <16 x i16>* %22277, align 2, !tbaa !396
  %22279 = getelementptr inbounds i16, i16* %22260, i64 -29
  %22280 = bitcast i16* %22279 to <16 x i16>*
  %22281 = load <16 x i16>, <16 x i16>* %22280, align 2, !tbaa !396
  %22282 = getelementptr inbounds i16, i16* %22260, i64 -13
  %22283 = bitcast i16* %22282 to <16 x i16>*
  %22284 = load <16 x i16>, <16 x i16>* %22283, align 2, !tbaa !396
  %22285 = getelementptr inbounds i16, i16* %22260, i64 -28
  %22286 = bitcast i16* %22285 to <16 x i16>*
  %22287 = load <16 x i16>, <16 x i16>* %22286, align 2, !tbaa !396
  %22288 = getelementptr inbounds i16, i16* %22260, i64 -12
  %22289 = bitcast i16* %22288 to <16 x i16>*
  %22290 = load <16 x i16>, <16 x i16>* %22289, align 2, !tbaa !396
  %22291 = getelementptr inbounds i16, i16* %22260, i64 -26
  %22292 = bitcast i16* %22291 to <16 x i16>*
  %22293 = load <16 x i16>, <16 x i16>* %22292, align 2, !tbaa !396
  %22294 = getelementptr inbounds i16, i16* %22260, i64 -10
  %22295 = bitcast i16* %22294 to <16 x i16>*
  %22296 = load <16 x i16>, <16 x i16>* %22295, align 2, !tbaa !396
  %22297 = getelementptr inbounds i16, i16* %22260, i64 -27
  %22298 = bitcast i16* %22297 to <16 x i16>*
  %22299 = load <16 x i16>, <16 x i16>* %22298, align 2, !tbaa !396
  %22300 = getelementptr inbounds i16, i16* %22260, i64 -11
  %22301 = bitcast i16* %22300 to <16 x i16>*
  %22302 = load <16 x i16>, <16 x i16>* %22301, align 2, !tbaa !396
  %22303 = add <16 x i16> %22269, %22263
  %22304 = add <16 x i16> %22303, %22275
  %22305 = add <16 x i16> %22304, %22281
  %22306 = add <16 x i16> %22305, %22287
  %22307 = add <16 x i16> %22306, %22293
  %22308 = add <16 x i16> %22307, %22299
  %22309 = add <16 x i16> %22272, %22266
  %22310 = add <16 x i16> %22309, %22278
  %22311 = add <16 x i16> %22310, %22284
  %22312 = add <16 x i16> %22311, %22290
  %22313 = add <16 x i16> %22312, %22296
  %22314 = add <16 x i16> %22313, %22302
  %22315 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22308, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22316 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22314, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22317 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22315, <16 x i16> %22308)
  %22318 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22316, <16 x i16> %22314)
  %22319 = shufflevector <16 x i16> %22317, <16 x i16> %22318, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22320 = lshr <32 x i16> %22319, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22321 = shufflevector <32 x i16> %22320, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22322 = add nsw i32 %a367, 7
  %22323 = and i32 %22322, 7
  %22324 = zext i32 %22323 to i64
  %22325 = mul nsw i64 %295, %22324
  %22326 = add nsw i64 %297, %22325
  %22327 = getelementptr inbounds i16, i16* %blur_x917, i64 %22326
  %22328 = getelementptr inbounds i16, i16* %22327, i64 -32
  %22329 = bitcast i16* %22328 to <16 x i16>*
  store <16 x i16> %22321, <16 x i16>* %22329, align 2, !tbaa !399
  %22330 = shufflevector <32 x i16> %22320, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22331 = getelementptr inbounds i16, i16* %22327, i64 -16
  %22332 = bitcast i16* %22331 to <16 x i16>*
  store <16 x i16> %22330, <16 x i16>* %22332, align 2, !tbaa !399
  %22333 = zext i32 %.pre-phi3606 to i64
  %22334 = mul nsw i64 %22333, %314
  %22335 = add nsw i64 %22334, %292
  %22336 = getelementptr inbounds i16, i16* %blur_x917, i64 %22335
  %22337 = getelementptr inbounds i16, i16* %22336, i64 -32
  %22338 = bitcast i16* %22337 to <16 x i16>*
  %22339 = load <16 x i16>, <16 x i16>* %22338, align 2, !tbaa !399
  %22340 = getelementptr inbounds i16, i16* %22336, i64 -16
  %22341 = bitcast i16* %22340 to <16 x i16>*
  %22342 = load <16 x i16>, <16 x i16>* %22341, align 2, !tbaa !399
  %22343 = zext i32 %.pre-phi3602 to i64
  %22344 = mul nsw i64 %22343, %314
  %22345 = add nsw i64 %22344, %292
  %22346 = getelementptr inbounds i16, i16* %blur_x917, i64 %22345
  %22347 = getelementptr inbounds i16, i16* %22346, i64 -32
  %22348 = bitcast i16* %22347 to <16 x i16>*
  %22349 = load <16 x i16>, <16 x i16>* %22348, align 2, !tbaa !399
  %22350 = getelementptr inbounds i16, i16* %22346, i64 -16
  %22351 = bitcast i16* %22350 to <16 x i16>*
  %22352 = load <16 x i16>, <16 x i16>* %22351, align 2, !tbaa !399
  %22353 = zext i32 %.pre-phi3610 to i64
  %22354 = mul nsw i64 %22353, %314
  %22355 = add nsw i64 %22354, %292
  %22356 = getelementptr inbounds i16, i16* %blur_x917, i64 %22355
  %22357 = getelementptr inbounds i16, i16* %22356, i64 -32
  %22358 = bitcast i16* %22357 to <16 x i16>*
  %22359 = load <16 x i16>, <16 x i16>* %22358, align 2, !tbaa !399
  %22360 = getelementptr inbounds i16, i16* %22356, i64 -16
  %22361 = bitcast i16* %22360 to <16 x i16>*
  %22362 = load <16 x i16>, <16 x i16>* %22361, align 2, !tbaa !399
  %22363 = zext i32 %.pre-phi3614 to i64
  %22364 = mul nsw i64 %22363, %314
  %22365 = add nsw i64 %22364, %292
  %22366 = getelementptr inbounds i16, i16* %blur_x917, i64 %22365
  %22367 = getelementptr inbounds i16, i16* %22366, i64 -32
  %22368 = bitcast i16* %22367 to <16 x i16>*
  %22369 = load <16 x i16>, <16 x i16>* %22368, align 2, !tbaa !399
  %22370 = getelementptr inbounds i16, i16* %22366, i64 -16
  %22371 = bitcast i16* %22370 to <16 x i16>*
  %22372 = load <16 x i16>, <16 x i16>* %22371, align 2, !tbaa !399
  %22373 = zext i32 %.pre-phi3618 to i64
  %22374 = mul nsw i64 %22373, %314
  %22375 = add nsw i64 %22374, %292
  %22376 = getelementptr inbounds i16, i16* %blur_x917, i64 %22375
  %22377 = getelementptr inbounds i16, i16* %22376, i64 -32
  %22378 = bitcast i16* %22377 to <16 x i16>*
  %22379 = load <16 x i16>, <16 x i16>* %22378, align 2, !tbaa !399
  %22380 = getelementptr inbounds i16, i16* %22376, i64 -16
  %22381 = bitcast i16* %22380 to <16 x i16>*
  %22382 = load <16 x i16>, <16 x i16>* %22381, align 2, !tbaa !399
  %22383 = mul nsw i64 %22324, %314
  %22384 = add nsw i64 %22383, %292
  %22385 = getelementptr inbounds i16, i16* %blur_x917, i64 %22384
  %22386 = getelementptr inbounds i16, i16* %22385, i64 -32
  %22387 = bitcast i16* %22386 to <16 x i16>*
  %22388 = load <16 x i16>, <16 x i16>* %22387, align 2, !tbaa !399
  %22389 = getelementptr inbounds i16, i16* %22385, i64 -16
  %22390 = bitcast i16* %22389 to <16 x i16>*
  %22391 = load <16 x i16>, <16 x i16>* %22390, align 2, !tbaa !399
  %22392 = zext i32 %.pre-phi3622 to i64
  %22393 = mul nsw i64 %22392, %314
  %22394 = add nsw i64 %22393, %292
  %22395 = getelementptr inbounds i16, i16* %blur_x917, i64 %22394
  %22396 = getelementptr inbounds i16, i16* %22395, i64 -32
  %22397 = bitcast i16* %22396 to <16 x i16>*
  %22398 = load <16 x i16>, <16 x i16>* %22397, align 2, !tbaa !399
  %22399 = getelementptr inbounds i16, i16* %22395, i64 -16
  %22400 = bitcast i16* %22399 to <16 x i16>*
  %22401 = load <16 x i16>, <16 x i16>* %22400, align 2, !tbaa !399
  %22402 = add <16 x i16> %22349, %22339
  %22403 = add <16 x i16> %22402, %22359
  %22404 = add <16 x i16> %22403, %22369
  %22405 = add <16 x i16> %22404, %22379
  %22406 = add <16 x i16> %22405, %22388
  %22407 = add <16 x i16> %22406, %22398
  %22408 = add <16 x i16> %22352, %22342
  %22409 = add <16 x i16> %22408, %22362
  %22410 = add <16 x i16> %22409, %22372
  %22411 = add <16 x i16> %22410, %22382
  %22412 = add <16 x i16> %22411, %22391
  %22413 = add <16 x i16> %22412, %22401
  %22414 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22407, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22415 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22413, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22416 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22414, <16 x i16> %22407)
  %22417 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22415, <16 x i16> %22413)
  %22418 = shufflevector <16 x i16> %22416, <16 x i16> %22417, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22419 = lshr <32 x i16> %22418, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22420 = shufflevector <32 x i16> %22419, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22421 = sext i32 %a367 to i64
  %22422 = add nsw i64 %22421, 1
  %22423 = mul nsw i64 %22422, %315
  %22424 = add nsw i64 %317, %22423
  %22425 = getelementptr inbounds i16, i16* %264, i64 %22424
  %22426 = getelementptr inbounds i16, i16* %22425, i64 -32
  %22427 = bitcast i16* %22426 to <16 x i16>*
  store <16 x i16> %22420, <16 x i16>* %22427, align 2, !tbaa !401
  %22428 = shufflevector <32 x i16> %22419, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22429 = getelementptr inbounds i16, i16* %22425, i64 -16
  %22430 = bitcast i16* %22429 to <16 x i16>*
  store <16 x i16> %22428, <16 x i16>* %22430, align 2, !tbaa !401
  br label %after_bb1142

"for blur_y.s0.x.x.rebased1157":                  ; preds = %"for blur_y.s0.x.x.rebased1157.preheader", %"consume blur_x1166"
  %indvars.iv3408 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1157.preheader" ], [ %indvars.iv.next3409, %"consume blur_x1166" ]
  %22431 = add nsw i64 %indvars.iv3408, %299
  %22432 = icmp slt i64 %22431, 1
  %22433 = trunc i64 %22431 to i32
  %22434 = shl nsw i32 %22433, 5
  %22435 = icmp sgt i32 %202, %22434
  %22436 = or i1 %22432, %22435
  br i1 %22436, label %"produce blur_x1164", label %"for blur_y.s0.x.x.rebased1157.consume blur_x1166_crit_edge"

"for blur_y.s0.x.x.rebased1157.consume blur_x1166_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1157"
  %.pre3629 = shl nsw i64 %22431, 5
  br label %"consume blur_x1166"

"end for blur_y.s0.x.x.rebased1158":              ; preds = %"consume blur_x1166", %after_bb1142
  br i1 %300, label %"for blur_y.s0.x.x.rebased1174.preheader", label %"end for blur_y.s0.x.x.rebased1175", !prof !386

"for blur_y.s0.x.x.rebased1174.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1158"
  %22437 = sext i32 %t17781153 to i64
  %22438 = zext i32 %.pre-phi3606 to i64
  %22439 = mul nsw i64 %22438, %314
  %22440 = sub nsw i64 %22439, %294
  %22441 = zext i32 %.pre-phi3602 to i64
  %22442 = mul nsw i64 %22441, %314
  %22443 = sub nsw i64 %22442, %294
  %22444 = zext i32 %.pre-phi3610 to i64
  %22445 = mul nsw i64 %22444, %314
  %22446 = sub nsw i64 %22445, %294
  %22447 = zext i32 %.pre-phi3614 to i64
  %22448 = mul nsw i64 %22447, %314
  %22449 = sub nsw i64 %22448, %294
  %22450 = zext i32 %.pre-phi3618 to i64
  %22451 = mul nsw i64 %22450, %314
  %22452 = sub nsw i64 %22451, %294
  %22453 = zext i32 %.pre-phi3628 to i64
  %22454 = mul nsw i64 %22453, %314
  %22455 = sub nsw i64 %22454, %294
  %22456 = zext i32 %.pre-phi3622 to i64
  %22457 = mul nsw i64 %22456, %314
  %22458 = sub nsw i64 %22457, %294
  %22459 = sext i32 %a367 to i64
  %22460 = add nsw i64 %22459, 1
  %22461 = mul nsw i64 %22460, %315
  %22462 = add nsw i64 %22461, %318
  br label %"for blur_y.s0.x.x.rebased1174"

"produce blur_x1164":                             ; preds = %"for blur_y.s0.x.x.rebased1157"
  %t7681165 = add nsw i32 %22434, %t17771156
  %22463 = sext i32 %t7681165 to i64
  %22464 = getelementptr inbounds i16, i16* %read_input860, i64 %22463
  %22465 = getelementptr inbounds i16, i16* %22464, i64 1
  %22466 = bitcast i16* %22465 to <16 x i16>*
  %22467 = load <16 x i16>, <16 x i16>* %22466, align 2, !tbaa !396
  %22468 = getelementptr inbounds i16, i16* %22464, i64 17
  %22469 = bitcast i16* %22468 to <16 x i16>*
  %22470 = load <16 x i16>, <16 x i16>* %22469, align 2, !tbaa !396
  %22471 = bitcast i16* %22464 to <16 x i16>*
  %22472 = load <16 x i16>, <16 x i16>* %22471, align 2, !tbaa !396
  %22473 = getelementptr inbounds i16, i16* %22464, i64 16
  %22474 = bitcast i16* %22473 to <16 x i16>*
  %22475 = load <16 x i16>, <16 x i16>* %22474, align 2, !tbaa !396
  %22476 = getelementptr inbounds i16, i16* %22464, i64 2
  %22477 = bitcast i16* %22476 to <16 x i16>*
  %22478 = load <16 x i16>, <16 x i16>* %22477, align 2, !tbaa !396
  %22479 = getelementptr inbounds i16, i16* %22464, i64 18
  %22480 = bitcast i16* %22479 to <16 x i16>*
  %22481 = load <16 x i16>, <16 x i16>* %22480, align 2, !tbaa !396
  %22482 = getelementptr inbounds i16, i16* %22464, i64 3
  %22483 = bitcast i16* %22482 to <16 x i16>*
  %22484 = load <16 x i16>, <16 x i16>* %22483, align 2, !tbaa !396
  %22485 = getelementptr inbounds i16, i16* %22464, i64 19
  %22486 = bitcast i16* %22485 to <16 x i16>*
  %22487 = load <16 x i16>, <16 x i16>* %22486, align 2, !tbaa !396
  %22488 = getelementptr inbounds i16, i16* %22464, i64 4
  %22489 = bitcast i16* %22488 to <16 x i16>*
  %22490 = load <16 x i16>, <16 x i16>* %22489, align 2, !tbaa !396
  %22491 = getelementptr inbounds i16, i16* %22464, i64 20
  %22492 = bitcast i16* %22491 to <16 x i16>*
  %22493 = load <16 x i16>, <16 x i16>* %22492, align 2, !tbaa !396
  %22494 = getelementptr inbounds i16, i16* %22464, i64 6
  %22495 = bitcast i16* %22494 to <16 x i16>*
  %22496 = load <16 x i16>, <16 x i16>* %22495, align 2, !tbaa !396
  %22497 = getelementptr inbounds i16, i16* %22464, i64 22
  %22498 = bitcast i16* %22497 to <16 x i16>*
  %22499 = load <16 x i16>, <16 x i16>* %22498, align 2, !tbaa !396
  %22500 = getelementptr inbounds i16, i16* %22464, i64 5
  %22501 = bitcast i16* %22500 to <16 x i16>*
  %22502 = load <16 x i16>, <16 x i16>* %22501, align 2, !tbaa !396
  %22503 = getelementptr inbounds i16, i16* %22464, i64 21
  %22504 = bitcast i16* %22503 to <16 x i16>*
  %22505 = load <16 x i16>, <16 x i16>* %22504, align 2, !tbaa !396
  %22506 = add <16 x i16> %22472, %22467
  %22507 = add <16 x i16> %22506, %22478
  %22508 = add <16 x i16> %22507, %22484
  %22509 = add <16 x i16> %22508, %22490
  %22510 = add <16 x i16> %22509, %22496
  %22511 = add <16 x i16> %22510, %22502
  %22512 = add <16 x i16> %22475, %22470
  %22513 = add <16 x i16> %22512, %22481
  %22514 = add <16 x i16> %22513, %22487
  %22515 = add <16 x i16> %22514, %22493
  %22516 = add <16 x i16> %22515, %22499
  %22517 = add <16 x i16> %22516, %22505
  %22518 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22511, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22519 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22517, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22520 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22518, <16 x i16> %22511)
  %22521 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22519, <16 x i16> %22517)
  %22522 = shufflevector <16 x i16> %22520, <16 x i16> %22521, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22523 = lshr <32 x i16> %22522, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22524 = shufflevector <32 x i16> %22523, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22525 = shl nsw i64 %22431, 5
  %22526 = add nsw i64 %22525, %22234
  %22527 = getelementptr inbounds i16, i16* %blur_x917, i64 %22526
  %22528 = bitcast i16* %22527 to <16 x i16>*
  store <16 x i16> %22524, <16 x i16>* %22528, align 2, !tbaa !399
  %22529 = shufflevector <32 x i16> %22523, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22530 = getelementptr inbounds i16, i16* %22527, i64 16
  %22531 = bitcast i16* %22530 to <16 x i16>*
  store <16 x i16> %22529, <16 x i16>* %22531, align 2, !tbaa !399
  br label %"consume blur_x1166"

"consume blur_x1166":                             ; preds = %"for blur_y.s0.x.x.rebased1157.consume blur_x1166_crit_edge", %"produce blur_x1164"
  %.pre-phi3630 = phi i64 [ %.pre3629, %"for blur_y.s0.x.x.rebased1157.consume blur_x1166_crit_edge" ], [ %22525, %"produce blur_x1164" ]
  %22532 = add nsw i64 %22237, %.pre-phi3630
  %22533 = getelementptr inbounds i16, i16* %blur_x917, i64 %22532
  %22534 = bitcast i16* %22533 to <16 x i16>*
  %22535 = load <16 x i16>, <16 x i16>* %22534, align 2, !tbaa !399
  %22536 = getelementptr inbounds i16, i16* %22533, i64 16
  %22537 = bitcast i16* %22536 to <16 x i16>*
  %22538 = load <16 x i16>, <16 x i16>* %22537, align 2, !tbaa !399
  %22539 = add nsw i64 %22240, %.pre-phi3630
  %22540 = getelementptr inbounds i16, i16* %blur_x917, i64 %22539
  %22541 = bitcast i16* %22540 to <16 x i16>*
  %22542 = load <16 x i16>, <16 x i16>* %22541, align 2, !tbaa !399
  %22543 = getelementptr inbounds i16, i16* %22540, i64 16
  %22544 = bitcast i16* %22543 to <16 x i16>*
  %22545 = load <16 x i16>, <16 x i16>* %22544, align 2, !tbaa !399
  %22546 = add nsw i64 %22243, %.pre-phi3630
  %22547 = getelementptr inbounds i16, i16* %blur_x917, i64 %22546
  %22548 = bitcast i16* %22547 to <16 x i16>*
  %22549 = load <16 x i16>, <16 x i16>* %22548, align 2, !tbaa !399
  %22550 = getelementptr inbounds i16, i16* %22547, i64 16
  %22551 = bitcast i16* %22550 to <16 x i16>*
  %22552 = load <16 x i16>, <16 x i16>* %22551, align 2, !tbaa !399
  %22553 = add nsw i64 %22246, %.pre-phi3630
  %22554 = getelementptr inbounds i16, i16* %blur_x917, i64 %22553
  %22555 = bitcast i16* %22554 to <16 x i16>*
  %22556 = load <16 x i16>, <16 x i16>* %22555, align 2, !tbaa !399
  %22557 = getelementptr inbounds i16, i16* %22554, i64 16
  %22558 = bitcast i16* %22557 to <16 x i16>*
  %22559 = load <16 x i16>, <16 x i16>* %22558, align 2, !tbaa !399
  %22560 = add nsw i64 %22249, %.pre-phi3630
  %22561 = getelementptr inbounds i16, i16* %blur_x917, i64 %22560
  %22562 = bitcast i16* %22561 to <16 x i16>*
  %22563 = load <16 x i16>, <16 x i16>* %22562, align 2, !tbaa !399
  %22564 = getelementptr inbounds i16, i16* %22561, i64 16
  %22565 = bitcast i16* %22564 to <16 x i16>*
  %22566 = load <16 x i16>, <16 x i16>* %22565, align 2, !tbaa !399
  %22567 = add nsw i64 %22252, %.pre-phi3630
  %22568 = getelementptr inbounds i16, i16* %blur_x917, i64 %22567
  %22569 = bitcast i16* %22568 to <16 x i16>*
  %22570 = load <16 x i16>, <16 x i16>* %22569, align 2, !tbaa !399
  %22571 = getelementptr inbounds i16, i16* %22568, i64 16
  %22572 = bitcast i16* %22571 to <16 x i16>*
  %22573 = load <16 x i16>, <16 x i16>* %22572, align 2, !tbaa !399
  %22574 = add nsw i64 %22255, %.pre-phi3630
  %22575 = getelementptr inbounds i16, i16* %blur_x917, i64 %22574
  %22576 = bitcast i16* %22575 to <16 x i16>*
  %22577 = load <16 x i16>, <16 x i16>* %22576, align 2, !tbaa !399
  %22578 = getelementptr inbounds i16, i16* %22575, i64 16
  %22579 = bitcast i16* %22578 to <16 x i16>*
  %22580 = load <16 x i16>, <16 x i16>* %22579, align 2, !tbaa !399
  %22581 = add <16 x i16> %22542, %22535
  %22582 = add <16 x i16> %22581, %22549
  %22583 = add <16 x i16> %22582, %22556
  %22584 = add <16 x i16> %22583, %22563
  %22585 = add <16 x i16> %22584, %22570
  %22586 = add <16 x i16> %22585, %22577
  %22587 = add <16 x i16> %22545, %22538
  %22588 = add <16 x i16> %22587, %22552
  %22589 = add <16 x i16> %22588, %22559
  %22590 = add <16 x i16> %22589, %22566
  %22591 = add <16 x i16> %22590, %22573
  %22592 = add <16 x i16> %22591, %22580
  %22593 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22586, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22594 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22592, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22595 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22593, <16 x i16> %22586)
  %22596 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22594, <16 x i16> %22592)
  %22597 = shufflevector <16 x i16> %22595, <16 x i16> %22596, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22598 = lshr <32 x i16> %22597, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22599 = shufflevector <32 x i16> %22598, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22600 = add nsw i64 %22259, %.pre-phi3630
  %22601 = getelementptr inbounds i16, i16* %264, i64 %22600
  %22602 = bitcast i16* %22601 to <16 x i16>*
  store <16 x i16> %22599, <16 x i16>* %22602, align 2, !tbaa !401
  %22603 = shufflevector <32 x i16> %22598, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22604 = getelementptr inbounds i16, i16* %22601, i64 16
  %22605 = bitcast i16* %22604 to <16 x i16>*
  store <16 x i16> %22603, <16 x i16>* %22605, align 2, !tbaa !401
  %indvars.iv.next3409 = add nuw nsw i64 %indvars.iv3408, 1
  %.not2708 = icmp eq i64 %indvars.iv.next3409, %386
  br i1 %.not2708, label %"end for blur_y.s0.x.x.rebased1158", label %"for blur_y.s0.x.x.rebased1157"

"for blur_y.s0.x.x.rebased1174":                  ; preds = %"for blur_y.s0.x.x.rebased1174.preheader", %"consume blur_x1184"
  %blur_y.s0.x.x.rebased1176 = phi i32 [ %22756, %"consume blur_x1184" ], [ 0, %"for blur_y.s0.x.x.rebased1174.preheader" ]
  %22606 = add nsw i32 %blur_y.s0.x.x.rebased1176, %t1670852
  %a467 = shl nsw i32 %22606, 5
  %22607 = icmp sgt i32 %a355, %a467
  %b473 = select i1 %22607, i32 %a467, i32 %a355
  %22608 = icmp slt i32 %22606, 1
  %22609 = icmp sgt i32 %202, %a467
  %22610 = or i1 %22608, %22609
  br i1 %22610, label %"produce blur_x1181", label %"consume blur_x1184"

"end for blur_y.s0.x.x.rebased1175":              ; preds = %"consume blur_x1184", %"end for blur_y.s0.x.x.rebased1158"
  br i1 %232, label %"produce blur_x1188", label %after_bb1185

"produce blur_x1181":                             ; preds = %"for blur_y.s0.x.x.rebased1174"
  %22611 = icmp slt i32 %b473, %202
  %blur_x.s0.x.v1.base.s1182 = select i1 %22611, i32 %b473, i32 %202
  %t7731183 = add nsw i32 %blur_x.s0.x.v1.base.s1182, %t17771156
  %22612 = sext i32 %t7731183 to i64
  %22613 = getelementptr inbounds i16, i16* %read_input860, i64 %22612
  %22614 = getelementptr inbounds i16, i16* %22613, i64 1
  %22615 = bitcast i16* %22614 to <16 x i16>*
  %22616 = load <16 x i16>, <16 x i16>* %22615, align 2, !tbaa !396
  %22617 = getelementptr inbounds i16, i16* %22613, i64 17
  %22618 = bitcast i16* %22617 to <16 x i16>*
  %22619 = load <16 x i16>, <16 x i16>* %22618, align 2, !tbaa !396
  %22620 = bitcast i16* %22613 to <16 x i16>*
  %22621 = load <16 x i16>, <16 x i16>* %22620, align 2, !tbaa !396
  %22622 = getelementptr inbounds i16, i16* %22613, i64 16
  %22623 = bitcast i16* %22622 to <16 x i16>*
  %22624 = load <16 x i16>, <16 x i16>* %22623, align 2, !tbaa !396
  %22625 = getelementptr inbounds i16, i16* %22613, i64 2
  %22626 = bitcast i16* %22625 to <16 x i16>*
  %22627 = load <16 x i16>, <16 x i16>* %22626, align 2, !tbaa !396
  %22628 = getelementptr inbounds i16, i16* %22613, i64 18
  %22629 = bitcast i16* %22628 to <16 x i16>*
  %22630 = load <16 x i16>, <16 x i16>* %22629, align 2, !tbaa !396
  %22631 = getelementptr inbounds i16, i16* %22613, i64 3
  %22632 = bitcast i16* %22631 to <16 x i16>*
  %22633 = load <16 x i16>, <16 x i16>* %22632, align 2, !tbaa !396
  %22634 = getelementptr inbounds i16, i16* %22613, i64 19
  %22635 = bitcast i16* %22634 to <16 x i16>*
  %22636 = load <16 x i16>, <16 x i16>* %22635, align 2, !tbaa !396
  %22637 = getelementptr inbounds i16, i16* %22613, i64 4
  %22638 = bitcast i16* %22637 to <16 x i16>*
  %22639 = load <16 x i16>, <16 x i16>* %22638, align 2, !tbaa !396
  %22640 = getelementptr inbounds i16, i16* %22613, i64 20
  %22641 = bitcast i16* %22640 to <16 x i16>*
  %22642 = load <16 x i16>, <16 x i16>* %22641, align 2, !tbaa !396
  %22643 = getelementptr inbounds i16, i16* %22613, i64 6
  %22644 = bitcast i16* %22643 to <16 x i16>*
  %22645 = load <16 x i16>, <16 x i16>* %22644, align 2, !tbaa !396
  %22646 = getelementptr inbounds i16, i16* %22613, i64 22
  %22647 = bitcast i16* %22646 to <16 x i16>*
  %22648 = load <16 x i16>, <16 x i16>* %22647, align 2, !tbaa !396
  %22649 = getelementptr inbounds i16, i16* %22613, i64 5
  %22650 = bitcast i16* %22649 to <16 x i16>*
  %22651 = load <16 x i16>, <16 x i16>* %22650, align 2, !tbaa !396
  %22652 = getelementptr inbounds i16, i16* %22613, i64 21
  %22653 = bitcast i16* %22652 to <16 x i16>*
  %22654 = load <16 x i16>, <16 x i16>* %22653, align 2, !tbaa !396
  %22655 = add <16 x i16> %22621, %22616
  %22656 = add <16 x i16> %22655, %22627
  %22657 = add <16 x i16> %22656, %22633
  %22658 = add <16 x i16> %22657, %22639
  %22659 = add <16 x i16> %22658, %22645
  %22660 = add <16 x i16> %22659, %22651
  %22661 = add <16 x i16> %22624, %22619
  %22662 = add <16 x i16> %22661, %22630
  %22663 = add <16 x i16> %22662, %22636
  %22664 = add <16 x i16> %22663, %22642
  %22665 = add <16 x i16> %22664, %22648
  %22666 = add <16 x i16> %22665, %22654
  %22667 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22660, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22668 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22666, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22669 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22667, <16 x i16> %22660)
  %22670 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22668, <16 x i16> %22666)
  %22671 = shufflevector <16 x i16> %22669, <16 x i16> %22670, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22672 = lshr <32 x i16> %22671, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22673 = shufflevector <32 x i16> %22672, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22674 = sext i32 %blur_x.s0.x.v1.base.s1182 to i64
  %22675 = add nsw i64 %22674, %22437
  %22676 = getelementptr inbounds i16, i16* %blur_x917, i64 %22675
  %22677 = bitcast i16* %22676 to <16 x i16>*
  store <16 x i16> %22673, <16 x i16>* %22677, align 2, !tbaa !399
  %22678 = shufflevector <32 x i16> %22672, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22679 = getelementptr inbounds i16, i16* %22676, i64 16
  %22680 = bitcast i16* %22679 to <16 x i16>*
  store <16 x i16> %22678, <16 x i16>* %22680, align 2, !tbaa !399
  br label %"consume blur_x1184"

"consume blur_x1184":                             ; preds = %"for blur_y.s0.x.x.rebased1174", %"produce blur_x1181"
  %22681 = sext i32 %b473 to i64
  %22682 = add nsw i64 %22440, %22681
  %22683 = getelementptr inbounds i16, i16* %blur_x917, i64 %22682
  %22684 = bitcast i16* %22683 to <16 x i16>*
  %22685 = load <16 x i16>, <16 x i16>* %22684, align 2, !tbaa !399
  %22686 = getelementptr inbounds i16, i16* %22683, i64 16
  %22687 = bitcast i16* %22686 to <16 x i16>*
  %22688 = load <16 x i16>, <16 x i16>* %22687, align 2, !tbaa !399
  %22689 = add nsw i64 %22443, %22681
  %22690 = getelementptr inbounds i16, i16* %blur_x917, i64 %22689
  %22691 = bitcast i16* %22690 to <16 x i16>*
  %22692 = load <16 x i16>, <16 x i16>* %22691, align 2, !tbaa !399
  %22693 = getelementptr inbounds i16, i16* %22690, i64 16
  %22694 = bitcast i16* %22693 to <16 x i16>*
  %22695 = load <16 x i16>, <16 x i16>* %22694, align 2, !tbaa !399
  %22696 = add nsw i64 %22446, %22681
  %22697 = getelementptr inbounds i16, i16* %blur_x917, i64 %22696
  %22698 = bitcast i16* %22697 to <16 x i16>*
  %22699 = load <16 x i16>, <16 x i16>* %22698, align 2, !tbaa !399
  %22700 = getelementptr inbounds i16, i16* %22697, i64 16
  %22701 = bitcast i16* %22700 to <16 x i16>*
  %22702 = load <16 x i16>, <16 x i16>* %22701, align 2, !tbaa !399
  %22703 = add nsw i64 %22449, %22681
  %22704 = getelementptr inbounds i16, i16* %blur_x917, i64 %22703
  %22705 = bitcast i16* %22704 to <16 x i16>*
  %22706 = load <16 x i16>, <16 x i16>* %22705, align 2, !tbaa !399
  %22707 = getelementptr inbounds i16, i16* %22704, i64 16
  %22708 = bitcast i16* %22707 to <16 x i16>*
  %22709 = load <16 x i16>, <16 x i16>* %22708, align 2, !tbaa !399
  %22710 = add nsw i64 %22452, %22681
  %22711 = getelementptr inbounds i16, i16* %blur_x917, i64 %22710
  %22712 = bitcast i16* %22711 to <16 x i16>*
  %22713 = load <16 x i16>, <16 x i16>* %22712, align 2, !tbaa !399
  %22714 = getelementptr inbounds i16, i16* %22711, i64 16
  %22715 = bitcast i16* %22714 to <16 x i16>*
  %22716 = load <16 x i16>, <16 x i16>* %22715, align 2, !tbaa !399
  %22717 = add nsw i64 %22455, %22681
  %22718 = getelementptr inbounds i16, i16* %blur_x917, i64 %22717
  %22719 = bitcast i16* %22718 to <16 x i16>*
  %22720 = load <16 x i16>, <16 x i16>* %22719, align 2, !tbaa !399
  %22721 = getelementptr inbounds i16, i16* %22718, i64 16
  %22722 = bitcast i16* %22721 to <16 x i16>*
  %22723 = load <16 x i16>, <16 x i16>* %22722, align 2, !tbaa !399
  %22724 = add nsw i64 %22458, %22681
  %22725 = getelementptr inbounds i16, i16* %blur_x917, i64 %22724
  %22726 = bitcast i16* %22725 to <16 x i16>*
  %22727 = load <16 x i16>, <16 x i16>* %22726, align 2, !tbaa !399
  %22728 = getelementptr inbounds i16, i16* %22725, i64 16
  %22729 = bitcast i16* %22728 to <16 x i16>*
  %22730 = load <16 x i16>, <16 x i16>* %22729, align 2, !tbaa !399
  %22731 = add <16 x i16> %22692, %22685
  %22732 = add <16 x i16> %22731, %22699
  %22733 = add <16 x i16> %22732, %22706
  %22734 = add <16 x i16> %22733, %22713
  %22735 = add <16 x i16> %22734, %22720
  %22736 = add <16 x i16> %22735, %22727
  %22737 = add <16 x i16> %22695, %22688
  %22738 = add <16 x i16> %22737, %22702
  %22739 = add <16 x i16> %22738, %22709
  %22740 = add <16 x i16> %22739, %22716
  %22741 = add <16 x i16> %22740, %22723
  %22742 = add <16 x i16> %22741, %22730
  %22743 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22736, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22744 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22742, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22745 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22743, <16 x i16> %22736)
  %22746 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22744, <16 x i16> %22742)
  %22747 = shufflevector <16 x i16> %22745, <16 x i16> %22746, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22748 = lshr <32 x i16> %22747, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22749 = shufflevector <32 x i16> %22748, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22750 = add nsw i64 %22462, %22681
  %22751 = getelementptr inbounds i16, i16* %264, i64 %22750
  %22752 = bitcast i16* %22751 to <16 x i16>*
  store <16 x i16> %22749, <16 x i16>* %22752, align 2, !tbaa !401
  %22753 = shufflevector <32 x i16> %22748, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22754 = getelementptr inbounds i16, i16* %22751, i64 16
  %22755 = bitcast i16* %22754 to <16 x i16>*
  store <16 x i16> %22753, <16 x i16>* %22755, align 2, !tbaa !401
  %22756 = add nuw nsw i32 %blur_y.s0.x.x.rebased1176, 1
  %.not2707 = icmp eq i32 %22756, %t1727937
  br i1 %.not2707, label %"end for blur_y.s0.x.x.rebased1175", label %"for blur_y.s0.x.x.rebased1174"

after_bb1185:                                     ; preds = %"end for blur_y.s0.x.x.rebased1175", %"produce blur_x1188"
  br i1 %298, label %"for blur_y.s0.x.x.rebased1200.preheader", label %"end for blur_y.s0.x.x.rebased1201", !prof !386

"for blur_y.s0.x.x.rebased1200.preheader":        ; preds = %after_bb1185
  %22757 = sext i32 %t1726924 to i64
  %22758 = zext i32 %.pre-phi3610 to i64
  %22759 = mul nsw i64 %22758, %314
  %22760 = sub nsw i64 %22759, %294
  %22761 = zext i32 %.pre-phi3606 to i64
  %22762 = mul nsw i64 %22761, %314
  %22763 = sub nsw i64 %22762, %294
  %22764 = zext i32 %.pre-phi3614 to i64
  %22765 = mul nsw i64 %22764, %314
  %22766 = sub nsw i64 %22765, %294
  %22767 = zext i32 %.pre-phi3618 to i64
  %22768 = mul nsw i64 %22767, %314
  %22769 = sub nsw i64 %22768, %294
  %22770 = zext i32 %.pre-phi3622 to i64
  %22771 = mul nsw i64 %22770, %314
  %22772 = sub nsw i64 %22771, %294
  %22773 = zext i32 %.pre-phi3598 to i64
  %22774 = mul nsw i64 %22773, %314
  %22775 = sub nsw i64 %22774, %294
  %22776 = zext i32 %.pre-phi3628 to i64
  %22777 = mul nsw i64 %22776, %314
  %22778 = sub nsw i64 %22777, %294
  %22779 = sext i32 %a367 to i64
  %22780 = add nsw i64 %22779, 2
  %22781 = mul nsw i64 %22780, %315
  %22782 = add nsw i64 %22781, %318
  br label %"for blur_y.s0.x.x.rebased1200"

"produce blur_x1188":                             ; preds = %"end for blur_y.s0.x.x.rebased1175"
  %22783 = getelementptr inbounds i16, i16* %read_input860, i64 %321
  %22784 = getelementptr inbounds i16, i16* %22783, i64 -31
  %22785 = bitcast i16* %22784 to <16 x i16>*
  %22786 = load <16 x i16>, <16 x i16>* %22785, align 2, !tbaa !396
  %22787 = getelementptr inbounds i16, i16* %22783, i64 -15
  %22788 = bitcast i16* %22787 to <16 x i16>*
  %22789 = load <16 x i16>, <16 x i16>* %22788, align 2, !tbaa !396
  %22790 = getelementptr inbounds i16, i16* %22783, i64 -32
  %22791 = bitcast i16* %22790 to <16 x i16>*
  %22792 = load <16 x i16>, <16 x i16>* %22791, align 2, !tbaa !396
  %22793 = getelementptr inbounds i16, i16* %22783, i64 -16
  %22794 = bitcast i16* %22793 to <16 x i16>*
  %22795 = load <16 x i16>, <16 x i16>* %22794, align 2, !tbaa !396
  %22796 = getelementptr inbounds i16, i16* %22783, i64 -30
  %22797 = bitcast i16* %22796 to <16 x i16>*
  %22798 = load <16 x i16>, <16 x i16>* %22797, align 2, !tbaa !396
  %22799 = getelementptr inbounds i16, i16* %22783, i64 -14
  %22800 = bitcast i16* %22799 to <16 x i16>*
  %22801 = load <16 x i16>, <16 x i16>* %22800, align 2, !tbaa !396
  %22802 = getelementptr inbounds i16, i16* %22783, i64 -29
  %22803 = bitcast i16* %22802 to <16 x i16>*
  %22804 = load <16 x i16>, <16 x i16>* %22803, align 2, !tbaa !396
  %22805 = getelementptr inbounds i16, i16* %22783, i64 -13
  %22806 = bitcast i16* %22805 to <16 x i16>*
  %22807 = load <16 x i16>, <16 x i16>* %22806, align 2, !tbaa !396
  %22808 = getelementptr inbounds i16, i16* %22783, i64 -28
  %22809 = bitcast i16* %22808 to <16 x i16>*
  %22810 = load <16 x i16>, <16 x i16>* %22809, align 2, !tbaa !396
  %22811 = getelementptr inbounds i16, i16* %22783, i64 -12
  %22812 = bitcast i16* %22811 to <16 x i16>*
  %22813 = load <16 x i16>, <16 x i16>* %22812, align 2, !tbaa !396
  %22814 = getelementptr inbounds i16, i16* %22783, i64 -26
  %22815 = bitcast i16* %22814 to <16 x i16>*
  %22816 = load <16 x i16>, <16 x i16>* %22815, align 2, !tbaa !396
  %22817 = getelementptr inbounds i16, i16* %22783, i64 -10
  %22818 = bitcast i16* %22817 to <16 x i16>*
  %22819 = load <16 x i16>, <16 x i16>* %22818, align 2, !tbaa !396
  %22820 = getelementptr inbounds i16, i16* %22783, i64 -27
  %22821 = bitcast i16* %22820 to <16 x i16>*
  %22822 = load <16 x i16>, <16 x i16>* %22821, align 2, !tbaa !396
  %22823 = getelementptr inbounds i16, i16* %22783, i64 -11
  %22824 = bitcast i16* %22823 to <16 x i16>*
  %22825 = load <16 x i16>, <16 x i16>* %22824, align 2, !tbaa !396
  %22826 = add <16 x i16> %22792, %22786
  %22827 = add <16 x i16> %22826, %22798
  %22828 = add <16 x i16> %22827, %22804
  %22829 = add <16 x i16> %22828, %22810
  %22830 = add <16 x i16> %22829, %22816
  %22831 = add <16 x i16> %22830, %22822
  %22832 = add <16 x i16> %22795, %22789
  %22833 = add <16 x i16> %22832, %22801
  %22834 = add <16 x i16> %22833, %22807
  %22835 = add <16 x i16> %22834, %22813
  %22836 = add <16 x i16> %22835, %22819
  %22837 = add <16 x i16> %22836, %22825
  %22838 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22831, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22839 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22837, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22840 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22838, <16 x i16> %22831)
  %22841 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22839, <16 x i16> %22837)
  %22842 = shufflevector <16 x i16> %22840, <16 x i16> %22841, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22843 = lshr <32 x i16> %22842, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22844 = shufflevector <32 x i16> %22843, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22845 = zext i32 %.pre-phi3598 to i64
  %22846 = mul nsw i64 %295, %22845
  %22847 = add nsw i64 %297, %22846
  %22848 = getelementptr inbounds i16, i16* %blur_x917, i64 %22847
  %22849 = getelementptr inbounds i16, i16* %22848, i64 -32
  %22850 = bitcast i16* %22849 to <16 x i16>*
  store <16 x i16> %22844, <16 x i16>* %22850, align 2, !tbaa !399
  %22851 = shufflevector <32 x i16> %22843, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22852 = getelementptr inbounds i16, i16* %22848, i64 -16
  %22853 = bitcast i16* %22852 to <16 x i16>*
  store <16 x i16> %22851, <16 x i16>* %22853, align 2, !tbaa !399
  %22854 = zext i32 %.pre-phi3610 to i64
  %22855 = mul nsw i64 %22854, %314
  %22856 = add nsw i64 %22855, %292
  %22857 = getelementptr inbounds i16, i16* %blur_x917, i64 %22856
  %22858 = getelementptr inbounds i16, i16* %22857, i64 -32
  %22859 = bitcast i16* %22858 to <16 x i16>*
  %22860 = load <16 x i16>, <16 x i16>* %22859, align 2, !tbaa !399
  %22861 = getelementptr inbounds i16, i16* %22857, i64 -16
  %22862 = bitcast i16* %22861 to <16 x i16>*
  %22863 = load <16 x i16>, <16 x i16>* %22862, align 2, !tbaa !399
  %22864 = zext i32 %.pre-phi3606 to i64
  %22865 = mul nsw i64 %22864, %314
  %22866 = add nsw i64 %22865, %292
  %22867 = getelementptr inbounds i16, i16* %blur_x917, i64 %22866
  %22868 = getelementptr inbounds i16, i16* %22867, i64 -32
  %22869 = bitcast i16* %22868 to <16 x i16>*
  %22870 = load <16 x i16>, <16 x i16>* %22869, align 2, !tbaa !399
  %22871 = getelementptr inbounds i16, i16* %22867, i64 -16
  %22872 = bitcast i16* %22871 to <16 x i16>*
  %22873 = load <16 x i16>, <16 x i16>* %22872, align 2, !tbaa !399
  %22874 = zext i32 %.pre-phi3614 to i64
  %22875 = mul nsw i64 %22874, %314
  %22876 = add nsw i64 %22875, %292
  %22877 = getelementptr inbounds i16, i16* %blur_x917, i64 %22876
  %22878 = getelementptr inbounds i16, i16* %22877, i64 -32
  %22879 = bitcast i16* %22878 to <16 x i16>*
  %22880 = load <16 x i16>, <16 x i16>* %22879, align 2, !tbaa !399
  %22881 = getelementptr inbounds i16, i16* %22877, i64 -16
  %22882 = bitcast i16* %22881 to <16 x i16>*
  %22883 = load <16 x i16>, <16 x i16>* %22882, align 2, !tbaa !399
  %22884 = zext i32 %.pre-phi3618 to i64
  %22885 = mul nsw i64 %22884, %314
  %22886 = add nsw i64 %22885, %292
  %22887 = getelementptr inbounds i16, i16* %blur_x917, i64 %22886
  %22888 = getelementptr inbounds i16, i16* %22887, i64 -32
  %22889 = bitcast i16* %22888 to <16 x i16>*
  %22890 = load <16 x i16>, <16 x i16>* %22889, align 2, !tbaa !399
  %22891 = getelementptr inbounds i16, i16* %22887, i64 -16
  %22892 = bitcast i16* %22891 to <16 x i16>*
  %22893 = load <16 x i16>, <16 x i16>* %22892, align 2, !tbaa !399
  %22894 = zext i32 %.pre-phi3622 to i64
  %22895 = mul nsw i64 %22894, %314
  %22896 = add nsw i64 %22895, %292
  %22897 = getelementptr inbounds i16, i16* %blur_x917, i64 %22896
  %22898 = getelementptr inbounds i16, i16* %22897, i64 -32
  %22899 = bitcast i16* %22898 to <16 x i16>*
  %22900 = load <16 x i16>, <16 x i16>* %22899, align 2, !tbaa !399
  %22901 = getelementptr inbounds i16, i16* %22897, i64 -16
  %22902 = bitcast i16* %22901 to <16 x i16>*
  %22903 = load <16 x i16>, <16 x i16>* %22902, align 2, !tbaa !399
  %22904 = mul nsw i64 %22845, %314
  %22905 = add nsw i64 %22904, %292
  %22906 = getelementptr inbounds i16, i16* %blur_x917, i64 %22905
  %22907 = getelementptr inbounds i16, i16* %22906, i64 -32
  %22908 = bitcast i16* %22907 to <16 x i16>*
  %22909 = load <16 x i16>, <16 x i16>* %22908, align 2, !tbaa !399
  %22910 = getelementptr inbounds i16, i16* %22906, i64 -16
  %22911 = bitcast i16* %22910 to <16 x i16>*
  %22912 = load <16 x i16>, <16 x i16>* %22911, align 2, !tbaa !399
  %22913 = zext i32 %.pre-phi3628 to i64
  %22914 = mul nsw i64 %22913, %314
  %22915 = add nsw i64 %22914, %292
  %22916 = getelementptr inbounds i16, i16* %blur_x917, i64 %22915
  %22917 = getelementptr inbounds i16, i16* %22916, i64 -32
  %22918 = bitcast i16* %22917 to <16 x i16>*
  %22919 = load <16 x i16>, <16 x i16>* %22918, align 2, !tbaa !399
  %22920 = getelementptr inbounds i16, i16* %22916, i64 -16
  %22921 = bitcast i16* %22920 to <16 x i16>*
  %22922 = load <16 x i16>, <16 x i16>* %22921, align 2, !tbaa !399
  %22923 = add <16 x i16> %22870, %22860
  %22924 = add <16 x i16> %22923, %22880
  %22925 = add <16 x i16> %22924, %22890
  %22926 = add <16 x i16> %22925, %22900
  %22927 = add <16 x i16> %22926, %22909
  %22928 = add <16 x i16> %22927, %22919
  %22929 = add <16 x i16> %22873, %22863
  %22930 = add <16 x i16> %22929, %22883
  %22931 = add <16 x i16> %22930, %22893
  %22932 = add <16 x i16> %22931, %22903
  %22933 = add <16 x i16> %22932, %22912
  %22934 = add <16 x i16> %22933, %22922
  %22935 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22928, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22936 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22934, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %22937 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22935, <16 x i16> %22928)
  %22938 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22936, <16 x i16> %22934)
  %22939 = shufflevector <16 x i16> %22937, <16 x i16> %22938, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22940 = lshr <32 x i16> %22939, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22941 = shufflevector <32 x i16> %22940, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22942 = sext i32 %a367 to i64
  %22943 = add nsw i64 %22942, 2
  %22944 = mul nsw i64 %22943, %315
  %22945 = add nsw i64 %317, %22944
  %22946 = getelementptr inbounds i16, i16* %264, i64 %22945
  %22947 = getelementptr inbounds i16, i16* %22946, i64 -32
  %22948 = bitcast i16* %22947 to <16 x i16>*
  store <16 x i16> %22941, <16 x i16>* %22948, align 2, !tbaa !401
  %22949 = shufflevector <32 x i16> %22940, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22950 = getelementptr inbounds i16, i16* %22946, i64 -16
  %22951 = bitcast i16* %22950 to <16 x i16>*
  store <16 x i16> %22949, <16 x i16>* %22951, align 2, !tbaa !401
  br label %after_bb1185

"for blur_y.s0.x.x.rebased1200":                  ; preds = %"for blur_y.s0.x.x.rebased1200.preheader", %"consume blur_x1209"
  %indvars.iv3411 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1200.preheader" ], [ %indvars.iv.next3412, %"consume blur_x1209" ]
  %22952 = add nsw i64 %indvars.iv3411, %299
  %22953 = icmp slt i64 %22952, 1
  %22954 = trunc i64 %22952 to i32
  %22955 = shl nsw i32 %22954, 5
  %22956 = icmp sgt i32 %202, %22955
  %22957 = or i1 %22953, %22956
  br i1 %22957, label %"produce blur_x1207", label %"for blur_y.s0.x.x.rebased1200.consume blur_x1209_crit_edge"

"for blur_y.s0.x.x.rebased1200.consume blur_x1209_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1200"
  %.pre3631 = shl nsw i64 %22952, 5
  br label %"consume blur_x1209"

"end for blur_y.s0.x.x.rebased1201":              ; preds = %"consume blur_x1209", %after_bb1185
  br i1 %300, label %"for blur_y.s0.x.x.rebased1217.preheader", label %"end for blur_y.s0.x.x.rebased1218", !prof !386

"for blur_y.s0.x.x.rebased1217.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1201"
  %22958 = sext i32 %t1726924 to i64
  %22959 = zext i32 %.pre-phi3610 to i64
  %22960 = mul nsw i64 %22959, %314
  %22961 = sub nsw i64 %22960, %294
  %22962 = zext i32 %.pre-phi3606 to i64
  %22963 = mul nsw i64 %22962, %314
  %22964 = sub nsw i64 %22963, %294
  %22965 = zext i32 %.pre-phi3614 to i64
  %22966 = mul nsw i64 %22965, %314
  %22967 = sub nsw i64 %22966, %294
  %22968 = zext i32 %.pre-phi3618 to i64
  %22969 = mul nsw i64 %22968, %314
  %22970 = sub nsw i64 %22969, %294
  %22971 = zext i32 %.pre-phi3622 to i64
  %22972 = mul nsw i64 %22971, %314
  %22973 = sub nsw i64 %22972, %294
  %22974 = zext i32 %.pre-phi3598 to i64
  %22975 = mul nsw i64 %22974, %314
  %22976 = sub nsw i64 %22975, %294
  %22977 = zext i32 %.pre-phi3628 to i64
  %22978 = mul nsw i64 %22977, %314
  %22979 = sub nsw i64 %22978, %294
  %22980 = sext i32 %a367 to i64
  %22981 = add nsw i64 %22980, 2
  %22982 = mul nsw i64 %22981, %315
  %22983 = add nsw i64 %22982, %318
  br label %"for blur_y.s0.x.x.rebased1217"

"produce blur_x1207":                             ; preds = %"for blur_y.s0.x.x.rebased1200"
  %t7841208 = add nsw i32 %22955, %t17931197
  %22984 = sext i32 %t7841208 to i64
  %22985 = getelementptr inbounds i16, i16* %read_input860, i64 %22984
  %22986 = getelementptr inbounds i16, i16* %22985, i64 1
  %22987 = bitcast i16* %22986 to <16 x i16>*
  %22988 = load <16 x i16>, <16 x i16>* %22987, align 2, !tbaa !396
  %22989 = getelementptr inbounds i16, i16* %22985, i64 17
  %22990 = bitcast i16* %22989 to <16 x i16>*
  %22991 = load <16 x i16>, <16 x i16>* %22990, align 2, !tbaa !396
  %22992 = bitcast i16* %22985 to <16 x i16>*
  %22993 = load <16 x i16>, <16 x i16>* %22992, align 2, !tbaa !396
  %22994 = getelementptr inbounds i16, i16* %22985, i64 16
  %22995 = bitcast i16* %22994 to <16 x i16>*
  %22996 = load <16 x i16>, <16 x i16>* %22995, align 2, !tbaa !396
  %22997 = getelementptr inbounds i16, i16* %22985, i64 2
  %22998 = bitcast i16* %22997 to <16 x i16>*
  %22999 = load <16 x i16>, <16 x i16>* %22998, align 2, !tbaa !396
  %23000 = getelementptr inbounds i16, i16* %22985, i64 18
  %23001 = bitcast i16* %23000 to <16 x i16>*
  %23002 = load <16 x i16>, <16 x i16>* %23001, align 2, !tbaa !396
  %23003 = getelementptr inbounds i16, i16* %22985, i64 3
  %23004 = bitcast i16* %23003 to <16 x i16>*
  %23005 = load <16 x i16>, <16 x i16>* %23004, align 2, !tbaa !396
  %23006 = getelementptr inbounds i16, i16* %22985, i64 19
  %23007 = bitcast i16* %23006 to <16 x i16>*
  %23008 = load <16 x i16>, <16 x i16>* %23007, align 2, !tbaa !396
  %23009 = getelementptr inbounds i16, i16* %22985, i64 4
  %23010 = bitcast i16* %23009 to <16 x i16>*
  %23011 = load <16 x i16>, <16 x i16>* %23010, align 2, !tbaa !396
  %23012 = getelementptr inbounds i16, i16* %22985, i64 20
  %23013 = bitcast i16* %23012 to <16 x i16>*
  %23014 = load <16 x i16>, <16 x i16>* %23013, align 2, !tbaa !396
  %23015 = getelementptr inbounds i16, i16* %22985, i64 6
  %23016 = bitcast i16* %23015 to <16 x i16>*
  %23017 = load <16 x i16>, <16 x i16>* %23016, align 2, !tbaa !396
  %23018 = getelementptr inbounds i16, i16* %22985, i64 22
  %23019 = bitcast i16* %23018 to <16 x i16>*
  %23020 = load <16 x i16>, <16 x i16>* %23019, align 2, !tbaa !396
  %23021 = getelementptr inbounds i16, i16* %22985, i64 5
  %23022 = bitcast i16* %23021 to <16 x i16>*
  %23023 = load <16 x i16>, <16 x i16>* %23022, align 2, !tbaa !396
  %23024 = getelementptr inbounds i16, i16* %22985, i64 21
  %23025 = bitcast i16* %23024 to <16 x i16>*
  %23026 = load <16 x i16>, <16 x i16>* %23025, align 2, !tbaa !396
  %23027 = add <16 x i16> %22993, %22988
  %23028 = add <16 x i16> %23027, %22999
  %23029 = add <16 x i16> %23028, %23005
  %23030 = add <16 x i16> %23029, %23011
  %23031 = add <16 x i16> %23030, %23017
  %23032 = add <16 x i16> %23031, %23023
  %23033 = add <16 x i16> %22996, %22991
  %23034 = add <16 x i16> %23033, %23002
  %23035 = add <16 x i16> %23034, %23008
  %23036 = add <16 x i16> %23035, %23014
  %23037 = add <16 x i16> %23036, %23020
  %23038 = add <16 x i16> %23037, %23026
  %23039 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23032, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23040 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23038, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23041 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23039, <16 x i16> %23032)
  %23042 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23040, <16 x i16> %23038)
  %23043 = shufflevector <16 x i16> %23041, <16 x i16> %23042, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23044 = lshr <32 x i16> %23043, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23045 = shufflevector <32 x i16> %23044, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23046 = shl nsw i64 %22952, 5
  %23047 = add nsw i64 %23046, %22757
  %23048 = getelementptr inbounds i16, i16* %blur_x917, i64 %23047
  %23049 = bitcast i16* %23048 to <16 x i16>*
  store <16 x i16> %23045, <16 x i16>* %23049, align 2, !tbaa !399
  %23050 = shufflevector <32 x i16> %23044, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23051 = getelementptr inbounds i16, i16* %23048, i64 16
  %23052 = bitcast i16* %23051 to <16 x i16>*
  store <16 x i16> %23050, <16 x i16>* %23052, align 2, !tbaa !399
  br label %"consume blur_x1209"

"consume blur_x1209":                             ; preds = %"for blur_y.s0.x.x.rebased1200.consume blur_x1209_crit_edge", %"produce blur_x1207"
  %.pre-phi3632 = phi i64 [ %.pre3631, %"for blur_y.s0.x.x.rebased1200.consume blur_x1209_crit_edge" ], [ %23046, %"produce blur_x1207" ]
  %23053 = add nsw i64 %22760, %.pre-phi3632
  %23054 = getelementptr inbounds i16, i16* %blur_x917, i64 %23053
  %23055 = bitcast i16* %23054 to <16 x i16>*
  %23056 = load <16 x i16>, <16 x i16>* %23055, align 2, !tbaa !399
  %23057 = getelementptr inbounds i16, i16* %23054, i64 16
  %23058 = bitcast i16* %23057 to <16 x i16>*
  %23059 = load <16 x i16>, <16 x i16>* %23058, align 2, !tbaa !399
  %23060 = add nsw i64 %22763, %.pre-phi3632
  %23061 = getelementptr inbounds i16, i16* %blur_x917, i64 %23060
  %23062 = bitcast i16* %23061 to <16 x i16>*
  %23063 = load <16 x i16>, <16 x i16>* %23062, align 2, !tbaa !399
  %23064 = getelementptr inbounds i16, i16* %23061, i64 16
  %23065 = bitcast i16* %23064 to <16 x i16>*
  %23066 = load <16 x i16>, <16 x i16>* %23065, align 2, !tbaa !399
  %23067 = add nsw i64 %22766, %.pre-phi3632
  %23068 = getelementptr inbounds i16, i16* %blur_x917, i64 %23067
  %23069 = bitcast i16* %23068 to <16 x i16>*
  %23070 = load <16 x i16>, <16 x i16>* %23069, align 2, !tbaa !399
  %23071 = getelementptr inbounds i16, i16* %23068, i64 16
  %23072 = bitcast i16* %23071 to <16 x i16>*
  %23073 = load <16 x i16>, <16 x i16>* %23072, align 2, !tbaa !399
  %23074 = add nsw i64 %22769, %.pre-phi3632
  %23075 = getelementptr inbounds i16, i16* %blur_x917, i64 %23074
  %23076 = bitcast i16* %23075 to <16 x i16>*
  %23077 = load <16 x i16>, <16 x i16>* %23076, align 2, !tbaa !399
  %23078 = getelementptr inbounds i16, i16* %23075, i64 16
  %23079 = bitcast i16* %23078 to <16 x i16>*
  %23080 = load <16 x i16>, <16 x i16>* %23079, align 2, !tbaa !399
  %23081 = add nsw i64 %22772, %.pre-phi3632
  %23082 = getelementptr inbounds i16, i16* %blur_x917, i64 %23081
  %23083 = bitcast i16* %23082 to <16 x i16>*
  %23084 = load <16 x i16>, <16 x i16>* %23083, align 2, !tbaa !399
  %23085 = getelementptr inbounds i16, i16* %23082, i64 16
  %23086 = bitcast i16* %23085 to <16 x i16>*
  %23087 = load <16 x i16>, <16 x i16>* %23086, align 2, !tbaa !399
  %23088 = add nsw i64 %22775, %.pre-phi3632
  %23089 = getelementptr inbounds i16, i16* %blur_x917, i64 %23088
  %23090 = bitcast i16* %23089 to <16 x i16>*
  %23091 = load <16 x i16>, <16 x i16>* %23090, align 2, !tbaa !399
  %23092 = getelementptr inbounds i16, i16* %23089, i64 16
  %23093 = bitcast i16* %23092 to <16 x i16>*
  %23094 = load <16 x i16>, <16 x i16>* %23093, align 2, !tbaa !399
  %23095 = add nsw i64 %22778, %.pre-phi3632
  %23096 = getelementptr inbounds i16, i16* %blur_x917, i64 %23095
  %23097 = bitcast i16* %23096 to <16 x i16>*
  %23098 = load <16 x i16>, <16 x i16>* %23097, align 2, !tbaa !399
  %23099 = getelementptr inbounds i16, i16* %23096, i64 16
  %23100 = bitcast i16* %23099 to <16 x i16>*
  %23101 = load <16 x i16>, <16 x i16>* %23100, align 2, !tbaa !399
  %23102 = add <16 x i16> %23063, %23056
  %23103 = add <16 x i16> %23102, %23070
  %23104 = add <16 x i16> %23103, %23077
  %23105 = add <16 x i16> %23104, %23084
  %23106 = add <16 x i16> %23105, %23091
  %23107 = add <16 x i16> %23106, %23098
  %23108 = add <16 x i16> %23066, %23059
  %23109 = add <16 x i16> %23108, %23073
  %23110 = add <16 x i16> %23109, %23080
  %23111 = add <16 x i16> %23110, %23087
  %23112 = add <16 x i16> %23111, %23094
  %23113 = add <16 x i16> %23112, %23101
  %23114 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23107, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23115 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23113, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23116 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23114, <16 x i16> %23107)
  %23117 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23115, <16 x i16> %23113)
  %23118 = shufflevector <16 x i16> %23116, <16 x i16> %23117, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23119 = lshr <32 x i16> %23118, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23120 = shufflevector <32 x i16> %23119, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23121 = add nsw i64 %22782, %.pre-phi3632
  %23122 = getelementptr inbounds i16, i16* %264, i64 %23121
  %23123 = bitcast i16* %23122 to <16 x i16>*
  store <16 x i16> %23120, <16 x i16>* %23123, align 2, !tbaa !401
  %23124 = shufflevector <32 x i16> %23119, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23125 = getelementptr inbounds i16, i16* %23122, i64 16
  %23126 = bitcast i16* %23125 to <16 x i16>*
  store <16 x i16> %23124, <16 x i16>* %23126, align 2, !tbaa !401
  %indvars.iv.next3412 = add nuw nsw i64 %indvars.iv3411, 1
  %.not2706 = icmp eq i64 %indvars.iv.next3412, %386
  br i1 %.not2706, label %"end for blur_y.s0.x.x.rebased1201", label %"for blur_y.s0.x.x.rebased1200"

"for blur_y.s0.x.x.rebased1217":                  ; preds = %"for blur_y.s0.x.x.rebased1217.preheader", %"consume blur_x1227"
  %blur_y.s0.x.x.rebased1219 = phi i32 [ %23277, %"consume blur_x1227" ], [ 0, %"for blur_y.s0.x.x.rebased1217.preheader" ]
  %23127 = add nsw i32 %blur_y.s0.x.x.rebased1219, %t1670852
  %a474 = shl nsw i32 %23127, 5
  %23128 = icmp sgt i32 %a355, %a474
  %b480 = select i1 %23128, i32 %a474, i32 %a355
  %23129 = icmp slt i32 %23127, 1
  %23130 = icmp sgt i32 %202, %a474
  %23131 = or i1 %23129, %23130
  br i1 %23131, label %"produce blur_x1224", label %"consume blur_x1227"

"end for blur_y.s0.x.x.rebased1218":              ; preds = %"consume blur_x1227", %"end for blur_y.s0.x.x.rebased1201"
  br i1 %232, label %"produce blur_x1231", label %after_bb1228

"produce blur_x1224":                             ; preds = %"for blur_y.s0.x.x.rebased1217"
  %23132 = icmp slt i32 %b480, %202
  %blur_x.s0.x.v1.base.s1225 = select i1 %23132, i32 %b480, i32 %202
  %t7891226 = add nsw i32 %blur_x.s0.x.v1.base.s1225, %t17931197
  %23133 = sext i32 %t7891226 to i64
  %23134 = getelementptr inbounds i16, i16* %read_input860, i64 %23133
  %23135 = getelementptr inbounds i16, i16* %23134, i64 1
  %23136 = bitcast i16* %23135 to <16 x i16>*
  %23137 = load <16 x i16>, <16 x i16>* %23136, align 2, !tbaa !396
  %23138 = getelementptr inbounds i16, i16* %23134, i64 17
  %23139 = bitcast i16* %23138 to <16 x i16>*
  %23140 = load <16 x i16>, <16 x i16>* %23139, align 2, !tbaa !396
  %23141 = bitcast i16* %23134 to <16 x i16>*
  %23142 = load <16 x i16>, <16 x i16>* %23141, align 2, !tbaa !396
  %23143 = getelementptr inbounds i16, i16* %23134, i64 16
  %23144 = bitcast i16* %23143 to <16 x i16>*
  %23145 = load <16 x i16>, <16 x i16>* %23144, align 2, !tbaa !396
  %23146 = getelementptr inbounds i16, i16* %23134, i64 2
  %23147 = bitcast i16* %23146 to <16 x i16>*
  %23148 = load <16 x i16>, <16 x i16>* %23147, align 2, !tbaa !396
  %23149 = getelementptr inbounds i16, i16* %23134, i64 18
  %23150 = bitcast i16* %23149 to <16 x i16>*
  %23151 = load <16 x i16>, <16 x i16>* %23150, align 2, !tbaa !396
  %23152 = getelementptr inbounds i16, i16* %23134, i64 3
  %23153 = bitcast i16* %23152 to <16 x i16>*
  %23154 = load <16 x i16>, <16 x i16>* %23153, align 2, !tbaa !396
  %23155 = getelementptr inbounds i16, i16* %23134, i64 19
  %23156 = bitcast i16* %23155 to <16 x i16>*
  %23157 = load <16 x i16>, <16 x i16>* %23156, align 2, !tbaa !396
  %23158 = getelementptr inbounds i16, i16* %23134, i64 4
  %23159 = bitcast i16* %23158 to <16 x i16>*
  %23160 = load <16 x i16>, <16 x i16>* %23159, align 2, !tbaa !396
  %23161 = getelementptr inbounds i16, i16* %23134, i64 20
  %23162 = bitcast i16* %23161 to <16 x i16>*
  %23163 = load <16 x i16>, <16 x i16>* %23162, align 2, !tbaa !396
  %23164 = getelementptr inbounds i16, i16* %23134, i64 6
  %23165 = bitcast i16* %23164 to <16 x i16>*
  %23166 = load <16 x i16>, <16 x i16>* %23165, align 2, !tbaa !396
  %23167 = getelementptr inbounds i16, i16* %23134, i64 22
  %23168 = bitcast i16* %23167 to <16 x i16>*
  %23169 = load <16 x i16>, <16 x i16>* %23168, align 2, !tbaa !396
  %23170 = getelementptr inbounds i16, i16* %23134, i64 5
  %23171 = bitcast i16* %23170 to <16 x i16>*
  %23172 = load <16 x i16>, <16 x i16>* %23171, align 2, !tbaa !396
  %23173 = getelementptr inbounds i16, i16* %23134, i64 21
  %23174 = bitcast i16* %23173 to <16 x i16>*
  %23175 = load <16 x i16>, <16 x i16>* %23174, align 2, !tbaa !396
  %23176 = add <16 x i16> %23142, %23137
  %23177 = add <16 x i16> %23176, %23148
  %23178 = add <16 x i16> %23177, %23154
  %23179 = add <16 x i16> %23178, %23160
  %23180 = add <16 x i16> %23179, %23166
  %23181 = add <16 x i16> %23180, %23172
  %23182 = add <16 x i16> %23145, %23140
  %23183 = add <16 x i16> %23182, %23151
  %23184 = add <16 x i16> %23183, %23157
  %23185 = add <16 x i16> %23184, %23163
  %23186 = add <16 x i16> %23185, %23169
  %23187 = add <16 x i16> %23186, %23175
  %23188 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23181, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23189 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23187, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23190 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23188, <16 x i16> %23181)
  %23191 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23189, <16 x i16> %23187)
  %23192 = shufflevector <16 x i16> %23190, <16 x i16> %23191, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23193 = lshr <32 x i16> %23192, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23194 = shufflevector <32 x i16> %23193, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23195 = sext i32 %blur_x.s0.x.v1.base.s1225 to i64
  %23196 = add nsw i64 %23195, %22958
  %23197 = getelementptr inbounds i16, i16* %blur_x917, i64 %23196
  %23198 = bitcast i16* %23197 to <16 x i16>*
  store <16 x i16> %23194, <16 x i16>* %23198, align 2, !tbaa !399
  %23199 = shufflevector <32 x i16> %23193, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23200 = getelementptr inbounds i16, i16* %23197, i64 16
  %23201 = bitcast i16* %23200 to <16 x i16>*
  store <16 x i16> %23199, <16 x i16>* %23201, align 2, !tbaa !399
  br label %"consume blur_x1227"

"consume blur_x1227":                             ; preds = %"for blur_y.s0.x.x.rebased1217", %"produce blur_x1224"
  %23202 = sext i32 %b480 to i64
  %23203 = add nsw i64 %22961, %23202
  %23204 = getelementptr inbounds i16, i16* %blur_x917, i64 %23203
  %23205 = bitcast i16* %23204 to <16 x i16>*
  %23206 = load <16 x i16>, <16 x i16>* %23205, align 2, !tbaa !399
  %23207 = getelementptr inbounds i16, i16* %23204, i64 16
  %23208 = bitcast i16* %23207 to <16 x i16>*
  %23209 = load <16 x i16>, <16 x i16>* %23208, align 2, !tbaa !399
  %23210 = add nsw i64 %22964, %23202
  %23211 = getelementptr inbounds i16, i16* %blur_x917, i64 %23210
  %23212 = bitcast i16* %23211 to <16 x i16>*
  %23213 = load <16 x i16>, <16 x i16>* %23212, align 2, !tbaa !399
  %23214 = getelementptr inbounds i16, i16* %23211, i64 16
  %23215 = bitcast i16* %23214 to <16 x i16>*
  %23216 = load <16 x i16>, <16 x i16>* %23215, align 2, !tbaa !399
  %23217 = add nsw i64 %22967, %23202
  %23218 = getelementptr inbounds i16, i16* %blur_x917, i64 %23217
  %23219 = bitcast i16* %23218 to <16 x i16>*
  %23220 = load <16 x i16>, <16 x i16>* %23219, align 2, !tbaa !399
  %23221 = getelementptr inbounds i16, i16* %23218, i64 16
  %23222 = bitcast i16* %23221 to <16 x i16>*
  %23223 = load <16 x i16>, <16 x i16>* %23222, align 2, !tbaa !399
  %23224 = add nsw i64 %22970, %23202
  %23225 = getelementptr inbounds i16, i16* %blur_x917, i64 %23224
  %23226 = bitcast i16* %23225 to <16 x i16>*
  %23227 = load <16 x i16>, <16 x i16>* %23226, align 2, !tbaa !399
  %23228 = getelementptr inbounds i16, i16* %23225, i64 16
  %23229 = bitcast i16* %23228 to <16 x i16>*
  %23230 = load <16 x i16>, <16 x i16>* %23229, align 2, !tbaa !399
  %23231 = add nsw i64 %22973, %23202
  %23232 = getelementptr inbounds i16, i16* %blur_x917, i64 %23231
  %23233 = bitcast i16* %23232 to <16 x i16>*
  %23234 = load <16 x i16>, <16 x i16>* %23233, align 2, !tbaa !399
  %23235 = getelementptr inbounds i16, i16* %23232, i64 16
  %23236 = bitcast i16* %23235 to <16 x i16>*
  %23237 = load <16 x i16>, <16 x i16>* %23236, align 2, !tbaa !399
  %23238 = add nsw i64 %22976, %23202
  %23239 = getelementptr inbounds i16, i16* %blur_x917, i64 %23238
  %23240 = bitcast i16* %23239 to <16 x i16>*
  %23241 = load <16 x i16>, <16 x i16>* %23240, align 2, !tbaa !399
  %23242 = getelementptr inbounds i16, i16* %23239, i64 16
  %23243 = bitcast i16* %23242 to <16 x i16>*
  %23244 = load <16 x i16>, <16 x i16>* %23243, align 2, !tbaa !399
  %23245 = add nsw i64 %22979, %23202
  %23246 = getelementptr inbounds i16, i16* %blur_x917, i64 %23245
  %23247 = bitcast i16* %23246 to <16 x i16>*
  %23248 = load <16 x i16>, <16 x i16>* %23247, align 2, !tbaa !399
  %23249 = getelementptr inbounds i16, i16* %23246, i64 16
  %23250 = bitcast i16* %23249 to <16 x i16>*
  %23251 = load <16 x i16>, <16 x i16>* %23250, align 2, !tbaa !399
  %23252 = add <16 x i16> %23213, %23206
  %23253 = add <16 x i16> %23252, %23220
  %23254 = add <16 x i16> %23253, %23227
  %23255 = add <16 x i16> %23254, %23234
  %23256 = add <16 x i16> %23255, %23241
  %23257 = add <16 x i16> %23256, %23248
  %23258 = add <16 x i16> %23216, %23209
  %23259 = add <16 x i16> %23258, %23223
  %23260 = add <16 x i16> %23259, %23230
  %23261 = add <16 x i16> %23260, %23237
  %23262 = add <16 x i16> %23261, %23244
  %23263 = add <16 x i16> %23262, %23251
  %23264 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23257, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23265 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23263, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23266 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23264, <16 x i16> %23257)
  %23267 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23265, <16 x i16> %23263)
  %23268 = shufflevector <16 x i16> %23266, <16 x i16> %23267, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23269 = lshr <32 x i16> %23268, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23270 = shufflevector <32 x i16> %23269, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23271 = add nsw i64 %22983, %23202
  %23272 = getelementptr inbounds i16, i16* %264, i64 %23271
  %23273 = bitcast i16* %23272 to <16 x i16>*
  store <16 x i16> %23270, <16 x i16>* %23273, align 2, !tbaa !401
  %23274 = shufflevector <32 x i16> %23269, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23275 = getelementptr inbounds i16, i16* %23272, i64 16
  %23276 = bitcast i16* %23275 to <16 x i16>*
  store <16 x i16> %23274, <16 x i16>* %23276, align 2, !tbaa !401
  %23277 = add nuw nsw i32 %blur_y.s0.x.x.rebased1219, 1
  %.not2705 = icmp eq i32 %23277, %t1727937
  br i1 %.not2705, label %"end for blur_y.s0.x.x.rebased1218", label %"for blur_y.s0.x.x.rebased1217"

after_bb1228:                                     ; preds = %"end for blur_y.s0.x.x.rebased1218", %"produce blur_x1231"
  br i1 %298, label %"for blur_y.s0.x.x.rebased1243.preheader", label %"end for blur_y.s0.x.x.rebased1244", !prof !386

"for blur_y.s0.x.x.rebased1243.preheader":        ; preds = %after_bb1228
  %23278 = sext i32 %t1732954 to i64
  %23279 = zext i32 %.pre-phi3614 to i64
  %23280 = mul nsw i64 %23279, %314
  %23281 = sub nsw i64 %23280, %294
  %23282 = zext i32 %.pre-phi3610 to i64
  %23283 = mul nsw i64 %23282, %314
  %23284 = sub nsw i64 %23283, %294
  %23285 = zext i32 %.pre-phi3618 to i64
  %23286 = mul nsw i64 %23285, %314
  %23287 = sub nsw i64 %23286, %294
  %23288 = zext i32 %.pre-phi3622 to i64
  %23289 = mul nsw i64 %23288, %314
  %23290 = sub nsw i64 %23289, %294
  %23291 = zext i32 %.pre-phi3628 to i64
  %23292 = mul nsw i64 %23291, %314
  %23293 = sub nsw i64 %23292, %294
  %23294 = zext i32 %.pre-phi3602 to i64
  %23295 = mul nsw i64 %23294, %314
  %23296 = sub nsw i64 %23295, %294
  %23297 = zext i32 %.pre-phi3598 to i64
  %23298 = mul nsw i64 %23297, %314
  %23299 = sub nsw i64 %23298, %294
  %23300 = sext i32 %a367 to i64
  %23301 = add nsw i64 %23300, 3
  %23302 = mul nsw i64 %23301, %315
  %23303 = add nsw i64 %23302, %318
  br label %"for blur_y.s0.x.x.rebased1243"

"produce blur_x1231":                             ; preds = %"end for blur_y.s0.x.x.rebased1218"
  %23304 = getelementptr inbounds i16, i16* %read_input860, i64 %323
  %23305 = getelementptr inbounds i16, i16* %23304, i64 -31
  %23306 = bitcast i16* %23305 to <16 x i16>*
  %23307 = load <16 x i16>, <16 x i16>* %23306, align 2, !tbaa !396
  %23308 = getelementptr inbounds i16, i16* %23304, i64 -15
  %23309 = bitcast i16* %23308 to <16 x i16>*
  %23310 = load <16 x i16>, <16 x i16>* %23309, align 2, !tbaa !396
  %23311 = getelementptr inbounds i16, i16* %23304, i64 -32
  %23312 = bitcast i16* %23311 to <16 x i16>*
  %23313 = load <16 x i16>, <16 x i16>* %23312, align 2, !tbaa !396
  %23314 = getelementptr inbounds i16, i16* %23304, i64 -16
  %23315 = bitcast i16* %23314 to <16 x i16>*
  %23316 = load <16 x i16>, <16 x i16>* %23315, align 2, !tbaa !396
  %23317 = getelementptr inbounds i16, i16* %23304, i64 -30
  %23318 = bitcast i16* %23317 to <16 x i16>*
  %23319 = load <16 x i16>, <16 x i16>* %23318, align 2, !tbaa !396
  %23320 = getelementptr inbounds i16, i16* %23304, i64 -14
  %23321 = bitcast i16* %23320 to <16 x i16>*
  %23322 = load <16 x i16>, <16 x i16>* %23321, align 2, !tbaa !396
  %23323 = getelementptr inbounds i16, i16* %23304, i64 -29
  %23324 = bitcast i16* %23323 to <16 x i16>*
  %23325 = load <16 x i16>, <16 x i16>* %23324, align 2, !tbaa !396
  %23326 = getelementptr inbounds i16, i16* %23304, i64 -13
  %23327 = bitcast i16* %23326 to <16 x i16>*
  %23328 = load <16 x i16>, <16 x i16>* %23327, align 2, !tbaa !396
  %23329 = getelementptr inbounds i16, i16* %23304, i64 -28
  %23330 = bitcast i16* %23329 to <16 x i16>*
  %23331 = load <16 x i16>, <16 x i16>* %23330, align 2, !tbaa !396
  %23332 = getelementptr inbounds i16, i16* %23304, i64 -12
  %23333 = bitcast i16* %23332 to <16 x i16>*
  %23334 = load <16 x i16>, <16 x i16>* %23333, align 2, !tbaa !396
  %23335 = getelementptr inbounds i16, i16* %23304, i64 -26
  %23336 = bitcast i16* %23335 to <16 x i16>*
  %23337 = load <16 x i16>, <16 x i16>* %23336, align 2, !tbaa !396
  %23338 = getelementptr inbounds i16, i16* %23304, i64 -10
  %23339 = bitcast i16* %23338 to <16 x i16>*
  %23340 = load <16 x i16>, <16 x i16>* %23339, align 2, !tbaa !396
  %23341 = getelementptr inbounds i16, i16* %23304, i64 -27
  %23342 = bitcast i16* %23341 to <16 x i16>*
  %23343 = load <16 x i16>, <16 x i16>* %23342, align 2, !tbaa !396
  %23344 = getelementptr inbounds i16, i16* %23304, i64 -11
  %23345 = bitcast i16* %23344 to <16 x i16>*
  %23346 = load <16 x i16>, <16 x i16>* %23345, align 2, !tbaa !396
  %23347 = add <16 x i16> %23313, %23307
  %23348 = add <16 x i16> %23347, %23319
  %23349 = add <16 x i16> %23348, %23325
  %23350 = add <16 x i16> %23349, %23331
  %23351 = add <16 x i16> %23350, %23337
  %23352 = add <16 x i16> %23351, %23343
  %23353 = add <16 x i16> %23316, %23310
  %23354 = add <16 x i16> %23353, %23322
  %23355 = add <16 x i16> %23354, %23328
  %23356 = add <16 x i16> %23355, %23334
  %23357 = add <16 x i16> %23356, %23340
  %23358 = add <16 x i16> %23357, %23346
  %23359 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23352, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23360 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23358, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23361 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23359, <16 x i16> %23352)
  %23362 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23360, <16 x i16> %23358)
  %23363 = shufflevector <16 x i16> %23361, <16 x i16> %23362, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23364 = lshr <32 x i16> %23363, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23365 = shufflevector <32 x i16> %23364, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23366 = zext i32 %.pre-phi3602 to i64
  %23367 = mul nsw i64 %295, %23366
  %23368 = add nsw i64 %297, %23367
  %23369 = getelementptr inbounds i16, i16* %blur_x917, i64 %23368
  %23370 = getelementptr inbounds i16, i16* %23369, i64 -32
  %23371 = bitcast i16* %23370 to <16 x i16>*
  store <16 x i16> %23365, <16 x i16>* %23371, align 2, !tbaa !399
  %23372 = shufflevector <32 x i16> %23364, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23373 = getelementptr inbounds i16, i16* %23369, i64 -16
  %23374 = bitcast i16* %23373 to <16 x i16>*
  store <16 x i16> %23372, <16 x i16>* %23374, align 2, !tbaa !399
  %23375 = zext i32 %.pre-phi3614 to i64
  %23376 = mul nsw i64 %23375, %314
  %23377 = add nsw i64 %23376, %292
  %23378 = getelementptr inbounds i16, i16* %blur_x917, i64 %23377
  %23379 = getelementptr inbounds i16, i16* %23378, i64 -32
  %23380 = bitcast i16* %23379 to <16 x i16>*
  %23381 = load <16 x i16>, <16 x i16>* %23380, align 2, !tbaa !399
  %23382 = getelementptr inbounds i16, i16* %23378, i64 -16
  %23383 = bitcast i16* %23382 to <16 x i16>*
  %23384 = load <16 x i16>, <16 x i16>* %23383, align 2, !tbaa !399
  %23385 = zext i32 %.pre-phi3610 to i64
  %23386 = mul nsw i64 %23385, %314
  %23387 = add nsw i64 %23386, %292
  %23388 = getelementptr inbounds i16, i16* %blur_x917, i64 %23387
  %23389 = getelementptr inbounds i16, i16* %23388, i64 -32
  %23390 = bitcast i16* %23389 to <16 x i16>*
  %23391 = load <16 x i16>, <16 x i16>* %23390, align 2, !tbaa !399
  %23392 = getelementptr inbounds i16, i16* %23388, i64 -16
  %23393 = bitcast i16* %23392 to <16 x i16>*
  %23394 = load <16 x i16>, <16 x i16>* %23393, align 2, !tbaa !399
  %23395 = zext i32 %.pre-phi3618 to i64
  %23396 = mul nsw i64 %23395, %314
  %23397 = add nsw i64 %23396, %292
  %23398 = getelementptr inbounds i16, i16* %blur_x917, i64 %23397
  %23399 = getelementptr inbounds i16, i16* %23398, i64 -32
  %23400 = bitcast i16* %23399 to <16 x i16>*
  %23401 = load <16 x i16>, <16 x i16>* %23400, align 2, !tbaa !399
  %23402 = getelementptr inbounds i16, i16* %23398, i64 -16
  %23403 = bitcast i16* %23402 to <16 x i16>*
  %23404 = load <16 x i16>, <16 x i16>* %23403, align 2, !tbaa !399
  %23405 = zext i32 %.pre-phi3622 to i64
  %23406 = mul nsw i64 %23405, %314
  %23407 = add nsw i64 %23406, %292
  %23408 = getelementptr inbounds i16, i16* %blur_x917, i64 %23407
  %23409 = getelementptr inbounds i16, i16* %23408, i64 -32
  %23410 = bitcast i16* %23409 to <16 x i16>*
  %23411 = load <16 x i16>, <16 x i16>* %23410, align 2, !tbaa !399
  %23412 = getelementptr inbounds i16, i16* %23408, i64 -16
  %23413 = bitcast i16* %23412 to <16 x i16>*
  %23414 = load <16 x i16>, <16 x i16>* %23413, align 2, !tbaa !399
  %23415 = zext i32 %.pre-phi3628 to i64
  %23416 = mul nsw i64 %23415, %314
  %23417 = add nsw i64 %23416, %292
  %23418 = getelementptr inbounds i16, i16* %blur_x917, i64 %23417
  %23419 = getelementptr inbounds i16, i16* %23418, i64 -32
  %23420 = bitcast i16* %23419 to <16 x i16>*
  %23421 = load <16 x i16>, <16 x i16>* %23420, align 2, !tbaa !399
  %23422 = getelementptr inbounds i16, i16* %23418, i64 -16
  %23423 = bitcast i16* %23422 to <16 x i16>*
  %23424 = load <16 x i16>, <16 x i16>* %23423, align 2, !tbaa !399
  %23425 = mul nsw i64 %23366, %314
  %23426 = add nsw i64 %23425, %292
  %23427 = getelementptr inbounds i16, i16* %blur_x917, i64 %23426
  %23428 = getelementptr inbounds i16, i16* %23427, i64 -32
  %23429 = bitcast i16* %23428 to <16 x i16>*
  %23430 = load <16 x i16>, <16 x i16>* %23429, align 2, !tbaa !399
  %23431 = getelementptr inbounds i16, i16* %23427, i64 -16
  %23432 = bitcast i16* %23431 to <16 x i16>*
  %23433 = load <16 x i16>, <16 x i16>* %23432, align 2, !tbaa !399
  %23434 = zext i32 %.pre-phi3598 to i64
  %23435 = mul nsw i64 %23434, %314
  %23436 = add nsw i64 %23435, %292
  %23437 = getelementptr inbounds i16, i16* %blur_x917, i64 %23436
  %23438 = getelementptr inbounds i16, i16* %23437, i64 -32
  %23439 = bitcast i16* %23438 to <16 x i16>*
  %23440 = load <16 x i16>, <16 x i16>* %23439, align 2, !tbaa !399
  %23441 = getelementptr inbounds i16, i16* %23437, i64 -16
  %23442 = bitcast i16* %23441 to <16 x i16>*
  %23443 = load <16 x i16>, <16 x i16>* %23442, align 2, !tbaa !399
  %23444 = add <16 x i16> %23391, %23381
  %23445 = add <16 x i16> %23444, %23401
  %23446 = add <16 x i16> %23445, %23411
  %23447 = add <16 x i16> %23446, %23421
  %23448 = add <16 x i16> %23447, %23430
  %23449 = add <16 x i16> %23448, %23440
  %23450 = add <16 x i16> %23394, %23384
  %23451 = add <16 x i16> %23450, %23404
  %23452 = add <16 x i16> %23451, %23414
  %23453 = add <16 x i16> %23452, %23424
  %23454 = add <16 x i16> %23453, %23433
  %23455 = add <16 x i16> %23454, %23443
  %23456 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23449, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23457 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23455, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23458 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23456, <16 x i16> %23449)
  %23459 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23457, <16 x i16> %23455)
  %23460 = shufflevector <16 x i16> %23458, <16 x i16> %23459, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23461 = lshr <32 x i16> %23460, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23462 = shufflevector <32 x i16> %23461, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23463 = sext i32 %a367 to i64
  %23464 = add nsw i64 %23463, 3
  %23465 = mul nsw i64 %23464, %315
  %23466 = add nsw i64 %317, %23465
  %23467 = getelementptr inbounds i16, i16* %264, i64 %23466
  %23468 = getelementptr inbounds i16, i16* %23467, i64 -32
  %23469 = bitcast i16* %23468 to <16 x i16>*
  store <16 x i16> %23462, <16 x i16>* %23469, align 2, !tbaa !401
  %23470 = shufflevector <32 x i16> %23461, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23471 = getelementptr inbounds i16, i16* %23467, i64 -16
  %23472 = bitcast i16* %23471 to <16 x i16>*
  store <16 x i16> %23470, <16 x i16>* %23472, align 2, !tbaa !401
  br label %after_bb1228

"for blur_y.s0.x.x.rebased1243":                  ; preds = %"for blur_y.s0.x.x.rebased1243.preheader", %"consume blur_x1252"
  %indvars.iv3414 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1243.preheader" ], [ %indvars.iv.next3415, %"consume blur_x1252" ]
  %23473 = add nsw i64 %indvars.iv3414, %299
  %23474 = icmp slt i64 %23473, 1
  %23475 = trunc i64 %23473 to i32
  %23476 = shl nsw i32 %23475, 5
  %23477 = icmp sgt i32 %202, %23476
  %23478 = or i1 %23474, %23477
  br i1 %23478, label %"produce blur_x1250", label %"for blur_y.s0.x.x.rebased1243.consume blur_x1252_crit_edge"

"for blur_y.s0.x.x.rebased1243.consume blur_x1252_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1243"
  %.pre3633 = shl nsw i64 %23473, 5
  br label %"consume blur_x1252"

"end for blur_y.s0.x.x.rebased1244":              ; preds = %"consume blur_x1252", %after_bb1228
  br i1 %300, label %"for blur_y.s0.x.x.rebased1260.preheader", label %"end for blur_y.s0.x.x.rebased1261", !prof !386

"for blur_y.s0.x.x.rebased1260.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1244"
  %23479 = sext i32 %t1732954 to i64
  %23480 = zext i32 %.pre-phi3614 to i64
  %23481 = mul nsw i64 %23480, %314
  %23482 = sub nsw i64 %23481, %294
  %23483 = zext i32 %.pre-phi3610 to i64
  %23484 = mul nsw i64 %23483, %314
  %23485 = sub nsw i64 %23484, %294
  %23486 = zext i32 %.pre-phi3618 to i64
  %23487 = mul nsw i64 %23486, %314
  %23488 = sub nsw i64 %23487, %294
  %23489 = zext i32 %.pre-phi3622 to i64
  %23490 = mul nsw i64 %23489, %314
  %23491 = sub nsw i64 %23490, %294
  %23492 = zext i32 %.pre-phi3628 to i64
  %23493 = mul nsw i64 %23492, %314
  %23494 = sub nsw i64 %23493, %294
  %23495 = zext i32 %.pre-phi3602 to i64
  %23496 = mul nsw i64 %23495, %314
  %23497 = sub nsw i64 %23496, %294
  %23498 = zext i32 %.pre-phi3598 to i64
  %23499 = mul nsw i64 %23498, %314
  %23500 = sub nsw i64 %23499, %294
  %23501 = sext i32 %a367 to i64
  %23502 = add nsw i64 %23501, 3
  %23503 = mul nsw i64 %23502, %315
  %23504 = add nsw i64 %23503, %318
  br label %"for blur_y.s0.x.x.rebased1260"

"produce blur_x1250":                             ; preds = %"for blur_y.s0.x.x.rebased1243"
  %t8001251 = add nsw i32 %23476, %t18091240
  %23505 = sext i32 %t8001251 to i64
  %23506 = getelementptr inbounds i16, i16* %read_input860, i64 %23505
  %23507 = getelementptr inbounds i16, i16* %23506, i64 1
  %23508 = bitcast i16* %23507 to <16 x i16>*
  %23509 = load <16 x i16>, <16 x i16>* %23508, align 2, !tbaa !396
  %23510 = getelementptr inbounds i16, i16* %23506, i64 17
  %23511 = bitcast i16* %23510 to <16 x i16>*
  %23512 = load <16 x i16>, <16 x i16>* %23511, align 2, !tbaa !396
  %23513 = bitcast i16* %23506 to <16 x i16>*
  %23514 = load <16 x i16>, <16 x i16>* %23513, align 2, !tbaa !396
  %23515 = getelementptr inbounds i16, i16* %23506, i64 16
  %23516 = bitcast i16* %23515 to <16 x i16>*
  %23517 = load <16 x i16>, <16 x i16>* %23516, align 2, !tbaa !396
  %23518 = getelementptr inbounds i16, i16* %23506, i64 2
  %23519 = bitcast i16* %23518 to <16 x i16>*
  %23520 = load <16 x i16>, <16 x i16>* %23519, align 2, !tbaa !396
  %23521 = getelementptr inbounds i16, i16* %23506, i64 18
  %23522 = bitcast i16* %23521 to <16 x i16>*
  %23523 = load <16 x i16>, <16 x i16>* %23522, align 2, !tbaa !396
  %23524 = getelementptr inbounds i16, i16* %23506, i64 3
  %23525 = bitcast i16* %23524 to <16 x i16>*
  %23526 = load <16 x i16>, <16 x i16>* %23525, align 2, !tbaa !396
  %23527 = getelementptr inbounds i16, i16* %23506, i64 19
  %23528 = bitcast i16* %23527 to <16 x i16>*
  %23529 = load <16 x i16>, <16 x i16>* %23528, align 2, !tbaa !396
  %23530 = getelementptr inbounds i16, i16* %23506, i64 4
  %23531 = bitcast i16* %23530 to <16 x i16>*
  %23532 = load <16 x i16>, <16 x i16>* %23531, align 2, !tbaa !396
  %23533 = getelementptr inbounds i16, i16* %23506, i64 20
  %23534 = bitcast i16* %23533 to <16 x i16>*
  %23535 = load <16 x i16>, <16 x i16>* %23534, align 2, !tbaa !396
  %23536 = getelementptr inbounds i16, i16* %23506, i64 6
  %23537 = bitcast i16* %23536 to <16 x i16>*
  %23538 = load <16 x i16>, <16 x i16>* %23537, align 2, !tbaa !396
  %23539 = getelementptr inbounds i16, i16* %23506, i64 22
  %23540 = bitcast i16* %23539 to <16 x i16>*
  %23541 = load <16 x i16>, <16 x i16>* %23540, align 2, !tbaa !396
  %23542 = getelementptr inbounds i16, i16* %23506, i64 5
  %23543 = bitcast i16* %23542 to <16 x i16>*
  %23544 = load <16 x i16>, <16 x i16>* %23543, align 2, !tbaa !396
  %23545 = getelementptr inbounds i16, i16* %23506, i64 21
  %23546 = bitcast i16* %23545 to <16 x i16>*
  %23547 = load <16 x i16>, <16 x i16>* %23546, align 2, !tbaa !396
  %23548 = add <16 x i16> %23514, %23509
  %23549 = add <16 x i16> %23548, %23520
  %23550 = add <16 x i16> %23549, %23526
  %23551 = add <16 x i16> %23550, %23532
  %23552 = add <16 x i16> %23551, %23538
  %23553 = add <16 x i16> %23552, %23544
  %23554 = add <16 x i16> %23517, %23512
  %23555 = add <16 x i16> %23554, %23523
  %23556 = add <16 x i16> %23555, %23529
  %23557 = add <16 x i16> %23556, %23535
  %23558 = add <16 x i16> %23557, %23541
  %23559 = add <16 x i16> %23558, %23547
  %23560 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23553, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23561 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23559, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23562 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23560, <16 x i16> %23553)
  %23563 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23561, <16 x i16> %23559)
  %23564 = shufflevector <16 x i16> %23562, <16 x i16> %23563, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23565 = lshr <32 x i16> %23564, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23566 = shufflevector <32 x i16> %23565, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23567 = shl nsw i64 %23473, 5
  %23568 = add nsw i64 %23567, %23278
  %23569 = getelementptr inbounds i16, i16* %blur_x917, i64 %23568
  %23570 = bitcast i16* %23569 to <16 x i16>*
  store <16 x i16> %23566, <16 x i16>* %23570, align 2, !tbaa !399
  %23571 = shufflevector <32 x i16> %23565, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23572 = getelementptr inbounds i16, i16* %23569, i64 16
  %23573 = bitcast i16* %23572 to <16 x i16>*
  store <16 x i16> %23571, <16 x i16>* %23573, align 2, !tbaa !399
  br label %"consume blur_x1252"

"consume blur_x1252":                             ; preds = %"for blur_y.s0.x.x.rebased1243.consume blur_x1252_crit_edge", %"produce blur_x1250"
  %.pre-phi3634 = phi i64 [ %.pre3633, %"for blur_y.s0.x.x.rebased1243.consume blur_x1252_crit_edge" ], [ %23567, %"produce blur_x1250" ]
  %23574 = add nsw i64 %23281, %.pre-phi3634
  %23575 = getelementptr inbounds i16, i16* %blur_x917, i64 %23574
  %23576 = bitcast i16* %23575 to <16 x i16>*
  %23577 = load <16 x i16>, <16 x i16>* %23576, align 2, !tbaa !399
  %23578 = getelementptr inbounds i16, i16* %23575, i64 16
  %23579 = bitcast i16* %23578 to <16 x i16>*
  %23580 = load <16 x i16>, <16 x i16>* %23579, align 2, !tbaa !399
  %23581 = add nsw i64 %23284, %.pre-phi3634
  %23582 = getelementptr inbounds i16, i16* %blur_x917, i64 %23581
  %23583 = bitcast i16* %23582 to <16 x i16>*
  %23584 = load <16 x i16>, <16 x i16>* %23583, align 2, !tbaa !399
  %23585 = getelementptr inbounds i16, i16* %23582, i64 16
  %23586 = bitcast i16* %23585 to <16 x i16>*
  %23587 = load <16 x i16>, <16 x i16>* %23586, align 2, !tbaa !399
  %23588 = add nsw i64 %23287, %.pre-phi3634
  %23589 = getelementptr inbounds i16, i16* %blur_x917, i64 %23588
  %23590 = bitcast i16* %23589 to <16 x i16>*
  %23591 = load <16 x i16>, <16 x i16>* %23590, align 2, !tbaa !399
  %23592 = getelementptr inbounds i16, i16* %23589, i64 16
  %23593 = bitcast i16* %23592 to <16 x i16>*
  %23594 = load <16 x i16>, <16 x i16>* %23593, align 2, !tbaa !399
  %23595 = add nsw i64 %23290, %.pre-phi3634
  %23596 = getelementptr inbounds i16, i16* %blur_x917, i64 %23595
  %23597 = bitcast i16* %23596 to <16 x i16>*
  %23598 = load <16 x i16>, <16 x i16>* %23597, align 2, !tbaa !399
  %23599 = getelementptr inbounds i16, i16* %23596, i64 16
  %23600 = bitcast i16* %23599 to <16 x i16>*
  %23601 = load <16 x i16>, <16 x i16>* %23600, align 2, !tbaa !399
  %23602 = add nsw i64 %23293, %.pre-phi3634
  %23603 = getelementptr inbounds i16, i16* %blur_x917, i64 %23602
  %23604 = bitcast i16* %23603 to <16 x i16>*
  %23605 = load <16 x i16>, <16 x i16>* %23604, align 2, !tbaa !399
  %23606 = getelementptr inbounds i16, i16* %23603, i64 16
  %23607 = bitcast i16* %23606 to <16 x i16>*
  %23608 = load <16 x i16>, <16 x i16>* %23607, align 2, !tbaa !399
  %23609 = add nsw i64 %23296, %.pre-phi3634
  %23610 = getelementptr inbounds i16, i16* %blur_x917, i64 %23609
  %23611 = bitcast i16* %23610 to <16 x i16>*
  %23612 = load <16 x i16>, <16 x i16>* %23611, align 2, !tbaa !399
  %23613 = getelementptr inbounds i16, i16* %23610, i64 16
  %23614 = bitcast i16* %23613 to <16 x i16>*
  %23615 = load <16 x i16>, <16 x i16>* %23614, align 2, !tbaa !399
  %23616 = add nsw i64 %23299, %.pre-phi3634
  %23617 = getelementptr inbounds i16, i16* %blur_x917, i64 %23616
  %23618 = bitcast i16* %23617 to <16 x i16>*
  %23619 = load <16 x i16>, <16 x i16>* %23618, align 2, !tbaa !399
  %23620 = getelementptr inbounds i16, i16* %23617, i64 16
  %23621 = bitcast i16* %23620 to <16 x i16>*
  %23622 = load <16 x i16>, <16 x i16>* %23621, align 2, !tbaa !399
  %23623 = add <16 x i16> %23584, %23577
  %23624 = add <16 x i16> %23623, %23591
  %23625 = add <16 x i16> %23624, %23598
  %23626 = add <16 x i16> %23625, %23605
  %23627 = add <16 x i16> %23626, %23612
  %23628 = add <16 x i16> %23627, %23619
  %23629 = add <16 x i16> %23587, %23580
  %23630 = add <16 x i16> %23629, %23594
  %23631 = add <16 x i16> %23630, %23601
  %23632 = add <16 x i16> %23631, %23608
  %23633 = add <16 x i16> %23632, %23615
  %23634 = add <16 x i16> %23633, %23622
  %23635 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23628, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23636 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23634, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23637 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23635, <16 x i16> %23628)
  %23638 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23636, <16 x i16> %23634)
  %23639 = shufflevector <16 x i16> %23637, <16 x i16> %23638, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23640 = lshr <32 x i16> %23639, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23641 = shufflevector <32 x i16> %23640, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23642 = add nsw i64 %23303, %.pre-phi3634
  %23643 = getelementptr inbounds i16, i16* %264, i64 %23642
  %23644 = bitcast i16* %23643 to <16 x i16>*
  store <16 x i16> %23641, <16 x i16>* %23644, align 2, !tbaa !401
  %23645 = shufflevector <32 x i16> %23640, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23646 = getelementptr inbounds i16, i16* %23643, i64 16
  %23647 = bitcast i16* %23646 to <16 x i16>*
  store <16 x i16> %23645, <16 x i16>* %23647, align 2, !tbaa !401
  %indvars.iv.next3415 = add nuw nsw i64 %indvars.iv3414, 1
  %.not2704 = icmp eq i64 %indvars.iv.next3415, %386
  br i1 %.not2704, label %"end for blur_y.s0.x.x.rebased1244", label %"for blur_y.s0.x.x.rebased1243"

"for blur_y.s0.x.x.rebased1260":                  ; preds = %"for blur_y.s0.x.x.rebased1260.preheader", %"consume blur_x1270"
  %blur_y.s0.x.x.rebased1262 = phi i32 [ %23798, %"consume blur_x1270" ], [ 0, %"for blur_y.s0.x.x.rebased1260.preheader" ]
  %23648 = add nsw i32 %blur_y.s0.x.x.rebased1262, %t1670852
  %a481 = shl nsw i32 %23648, 5
  %23649 = icmp sgt i32 %a355, %a481
  %b487 = select i1 %23649, i32 %a481, i32 %a355
  %23650 = icmp slt i32 %23648, 1
  %23651 = icmp sgt i32 %202, %a481
  %23652 = or i1 %23650, %23651
  br i1 %23652, label %"produce blur_x1267", label %"consume blur_x1270"

"end for blur_y.s0.x.x.rebased1261":              ; preds = %"consume blur_x1270", %"end for blur_y.s0.x.x.rebased1244"
  br i1 %232, label %"produce blur_x1274", label %after_bb1271

"produce blur_x1267":                             ; preds = %"for blur_y.s0.x.x.rebased1260"
  %23653 = icmp slt i32 %b487, %202
  %blur_x.s0.x.v1.base.s1268 = select i1 %23653, i32 %b487, i32 %202
  %t8051269 = add nsw i32 %blur_x.s0.x.v1.base.s1268, %t18091240
  %23654 = sext i32 %t8051269 to i64
  %23655 = getelementptr inbounds i16, i16* %read_input860, i64 %23654
  %23656 = getelementptr inbounds i16, i16* %23655, i64 1
  %23657 = bitcast i16* %23656 to <16 x i16>*
  %23658 = load <16 x i16>, <16 x i16>* %23657, align 2, !tbaa !396
  %23659 = getelementptr inbounds i16, i16* %23655, i64 17
  %23660 = bitcast i16* %23659 to <16 x i16>*
  %23661 = load <16 x i16>, <16 x i16>* %23660, align 2, !tbaa !396
  %23662 = bitcast i16* %23655 to <16 x i16>*
  %23663 = load <16 x i16>, <16 x i16>* %23662, align 2, !tbaa !396
  %23664 = getelementptr inbounds i16, i16* %23655, i64 16
  %23665 = bitcast i16* %23664 to <16 x i16>*
  %23666 = load <16 x i16>, <16 x i16>* %23665, align 2, !tbaa !396
  %23667 = getelementptr inbounds i16, i16* %23655, i64 2
  %23668 = bitcast i16* %23667 to <16 x i16>*
  %23669 = load <16 x i16>, <16 x i16>* %23668, align 2, !tbaa !396
  %23670 = getelementptr inbounds i16, i16* %23655, i64 18
  %23671 = bitcast i16* %23670 to <16 x i16>*
  %23672 = load <16 x i16>, <16 x i16>* %23671, align 2, !tbaa !396
  %23673 = getelementptr inbounds i16, i16* %23655, i64 3
  %23674 = bitcast i16* %23673 to <16 x i16>*
  %23675 = load <16 x i16>, <16 x i16>* %23674, align 2, !tbaa !396
  %23676 = getelementptr inbounds i16, i16* %23655, i64 19
  %23677 = bitcast i16* %23676 to <16 x i16>*
  %23678 = load <16 x i16>, <16 x i16>* %23677, align 2, !tbaa !396
  %23679 = getelementptr inbounds i16, i16* %23655, i64 4
  %23680 = bitcast i16* %23679 to <16 x i16>*
  %23681 = load <16 x i16>, <16 x i16>* %23680, align 2, !tbaa !396
  %23682 = getelementptr inbounds i16, i16* %23655, i64 20
  %23683 = bitcast i16* %23682 to <16 x i16>*
  %23684 = load <16 x i16>, <16 x i16>* %23683, align 2, !tbaa !396
  %23685 = getelementptr inbounds i16, i16* %23655, i64 6
  %23686 = bitcast i16* %23685 to <16 x i16>*
  %23687 = load <16 x i16>, <16 x i16>* %23686, align 2, !tbaa !396
  %23688 = getelementptr inbounds i16, i16* %23655, i64 22
  %23689 = bitcast i16* %23688 to <16 x i16>*
  %23690 = load <16 x i16>, <16 x i16>* %23689, align 2, !tbaa !396
  %23691 = getelementptr inbounds i16, i16* %23655, i64 5
  %23692 = bitcast i16* %23691 to <16 x i16>*
  %23693 = load <16 x i16>, <16 x i16>* %23692, align 2, !tbaa !396
  %23694 = getelementptr inbounds i16, i16* %23655, i64 21
  %23695 = bitcast i16* %23694 to <16 x i16>*
  %23696 = load <16 x i16>, <16 x i16>* %23695, align 2, !tbaa !396
  %23697 = add <16 x i16> %23663, %23658
  %23698 = add <16 x i16> %23697, %23669
  %23699 = add <16 x i16> %23698, %23675
  %23700 = add <16 x i16> %23699, %23681
  %23701 = add <16 x i16> %23700, %23687
  %23702 = add <16 x i16> %23701, %23693
  %23703 = add <16 x i16> %23666, %23661
  %23704 = add <16 x i16> %23703, %23672
  %23705 = add <16 x i16> %23704, %23678
  %23706 = add <16 x i16> %23705, %23684
  %23707 = add <16 x i16> %23706, %23690
  %23708 = add <16 x i16> %23707, %23696
  %23709 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23702, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23710 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23708, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23711 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23709, <16 x i16> %23702)
  %23712 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23710, <16 x i16> %23708)
  %23713 = shufflevector <16 x i16> %23711, <16 x i16> %23712, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23714 = lshr <32 x i16> %23713, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23715 = shufflevector <32 x i16> %23714, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23716 = sext i32 %blur_x.s0.x.v1.base.s1268 to i64
  %23717 = add nsw i64 %23716, %23479
  %23718 = getelementptr inbounds i16, i16* %blur_x917, i64 %23717
  %23719 = bitcast i16* %23718 to <16 x i16>*
  store <16 x i16> %23715, <16 x i16>* %23719, align 2, !tbaa !399
  %23720 = shufflevector <32 x i16> %23714, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23721 = getelementptr inbounds i16, i16* %23718, i64 16
  %23722 = bitcast i16* %23721 to <16 x i16>*
  store <16 x i16> %23720, <16 x i16>* %23722, align 2, !tbaa !399
  br label %"consume blur_x1270"

"consume blur_x1270":                             ; preds = %"for blur_y.s0.x.x.rebased1260", %"produce blur_x1267"
  %23723 = sext i32 %b487 to i64
  %23724 = add nsw i64 %23482, %23723
  %23725 = getelementptr inbounds i16, i16* %blur_x917, i64 %23724
  %23726 = bitcast i16* %23725 to <16 x i16>*
  %23727 = load <16 x i16>, <16 x i16>* %23726, align 2, !tbaa !399
  %23728 = getelementptr inbounds i16, i16* %23725, i64 16
  %23729 = bitcast i16* %23728 to <16 x i16>*
  %23730 = load <16 x i16>, <16 x i16>* %23729, align 2, !tbaa !399
  %23731 = add nsw i64 %23485, %23723
  %23732 = getelementptr inbounds i16, i16* %blur_x917, i64 %23731
  %23733 = bitcast i16* %23732 to <16 x i16>*
  %23734 = load <16 x i16>, <16 x i16>* %23733, align 2, !tbaa !399
  %23735 = getelementptr inbounds i16, i16* %23732, i64 16
  %23736 = bitcast i16* %23735 to <16 x i16>*
  %23737 = load <16 x i16>, <16 x i16>* %23736, align 2, !tbaa !399
  %23738 = add nsw i64 %23488, %23723
  %23739 = getelementptr inbounds i16, i16* %blur_x917, i64 %23738
  %23740 = bitcast i16* %23739 to <16 x i16>*
  %23741 = load <16 x i16>, <16 x i16>* %23740, align 2, !tbaa !399
  %23742 = getelementptr inbounds i16, i16* %23739, i64 16
  %23743 = bitcast i16* %23742 to <16 x i16>*
  %23744 = load <16 x i16>, <16 x i16>* %23743, align 2, !tbaa !399
  %23745 = add nsw i64 %23491, %23723
  %23746 = getelementptr inbounds i16, i16* %blur_x917, i64 %23745
  %23747 = bitcast i16* %23746 to <16 x i16>*
  %23748 = load <16 x i16>, <16 x i16>* %23747, align 2, !tbaa !399
  %23749 = getelementptr inbounds i16, i16* %23746, i64 16
  %23750 = bitcast i16* %23749 to <16 x i16>*
  %23751 = load <16 x i16>, <16 x i16>* %23750, align 2, !tbaa !399
  %23752 = add nsw i64 %23494, %23723
  %23753 = getelementptr inbounds i16, i16* %blur_x917, i64 %23752
  %23754 = bitcast i16* %23753 to <16 x i16>*
  %23755 = load <16 x i16>, <16 x i16>* %23754, align 2, !tbaa !399
  %23756 = getelementptr inbounds i16, i16* %23753, i64 16
  %23757 = bitcast i16* %23756 to <16 x i16>*
  %23758 = load <16 x i16>, <16 x i16>* %23757, align 2, !tbaa !399
  %23759 = add nsw i64 %23497, %23723
  %23760 = getelementptr inbounds i16, i16* %blur_x917, i64 %23759
  %23761 = bitcast i16* %23760 to <16 x i16>*
  %23762 = load <16 x i16>, <16 x i16>* %23761, align 2, !tbaa !399
  %23763 = getelementptr inbounds i16, i16* %23760, i64 16
  %23764 = bitcast i16* %23763 to <16 x i16>*
  %23765 = load <16 x i16>, <16 x i16>* %23764, align 2, !tbaa !399
  %23766 = add nsw i64 %23500, %23723
  %23767 = getelementptr inbounds i16, i16* %blur_x917, i64 %23766
  %23768 = bitcast i16* %23767 to <16 x i16>*
  %23769 = load <16 x i16>, <16 x i16>* %23768, align 2, !tbaa !399
  %23770 = getelementptr inbounds i16, i16* %23767, i64 16
  %23771 = bitcast i16* %23770 to <16 x i16>*
  %23772 = load <16 x i16>, <16 x i16>* %23771, align 2, !tbaa !399
  %23773 = add <16 x i16> %23734, %23727
  %23774 = add <16 x i16> %23773, %23741
  %23775 = add <16 x i16> %23774, %23748
  %23776 = add <16 x i16> %23775, %23755
  %23777 = add <16 x i16> %23776, %23762
  %23778 = add <16 x i16> %23777, %23769
  %23779 = add <16 x i16> %23737, %23730
  %23780 = add <16 x i16> %23779, %23744
  %23781 = add <16 x i16> %23780, %23751
  %23782 = add <16 x i16> %23781, %23758
  %23783 = add <16 x i16> %23782, %23765
  %23784 = add <16 x i16> %23783, %23772
  %23785 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23778, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23786 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23784, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23787 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23785, <16 x i16> %23778)
  %23788 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23786, <16 x i16> %23784)
  %23789 = shufflevector <16 x i16> %23787, <16 x i16> %23788, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23790 = lshr <32 x i16> %23789, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23791 = shufflevector <32 x i16> %23790, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23792 = add nsw i64 %23504, %23723
  %23793 = getelementptr inbounds i16, i16* %264, i64 %23792
  %23794 = bitcast i16* %23793 to <16 x i16>*
  store <16 x i16> %23791, <16 x i16>* %23794, align 2, !tbaa !401
  %23795 = shufflevector <32 x i16> %23790, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23796 = getelementptr inbounds i16, i16* %23793, i64 16
  %23797 = bitcast i16* %23796 to <16 x i16>*
  store <16 x i16> %23795, <16 x i16>* %23797, align 2, !tbaa !401
  %23798 = add nuw nsw i32 %blur_y.s0.x.x.rebased1262, 1
  %.not2703 = icmp eq i32 %23798, %t1727937
  br i1 %.not2703, label %"end for blur_y.s0.x.x.rebased1261", label %"for blur_y.s0.x.x.rebased1260"

after_bb1271:                                     ; preds = %"end for blur_y.s0.x.x.rebased1261", %"produce blur_x1274"
  br i1 %298, label %"for blur_y.s0.x.x.rebased1286.preheader", label %"end for blur_y.s0.x.x.rebased1287", !prof !386

"for blur_y.s0.x.x.rebased1286.preheader":        ; preds = %after_bb1271
  %23799 = sext i32 %t1738984 to i64
  %23800 = zext i32 %.pre-phi3618 to i64
  %23801 = mul nsw i64 %23800, %314
  %23802 = sub nsw i64 %23801, %294
  %23803 = zext i32 %.pre-phi3614 to i64
  %23804 = mul nsw i64 %23803, %314
  %23805 = sub nsw i64 %23804, %294
  %23806 = zext i32 %.pre-phi3622 to i64
  %23807 = mul nsw i64 %23806, %314
  %23808 = sub nsw i64 %23807, %294
  %23809 = zext i32 %.pre-phi3628 to i64
  %23810 = mul nsw i64 %23809, %314
  %23811 = sub nsw i64 %23810, %294
  %23812 = zext i32 %.pre-phi3598 to i64
  %23813 = mul nsw i64 %23812, %314
  %23814 = sub nsw i64 %23813, %294
  %23815 = zext i32 %.pre-phi3606 to i64
  %23816 = mul nsw i64 %23815, %314
  %23817 = sub nsw i64 %23816, %294
  %23818 = zext i32 %.pre-phi3602 to i64
  %23819 = mul nsw i64 %23818, %314
  %23820 = sub nsw i64 %23819, %294
  %23821 = sext i32 %a367 to i64
  %23822 = add nsw i64 %23821, 4
  %23823 = mul nsw i64 %23822, %315
  %23824 = add nsw i64 %23823, %318
  br label %"for blur_y.s0.x.x.rebased1286"

"produce blur_x1274":                             ; preds = %"end for blur_y.s0.x.x.rebased1261"
  %23825 = getelementptr inbounds i16, i16* %read_input860, i64 %325
  %23826 = getelementptr inbounds i16, i16* %23825, i64 -31
  %23827 = bitcast i16* %23826 to <16 x i16>*
  %23828 = load <16 x i16>, <16 x i16>* %23827, align 2, !tbaa !396
  %23829 = getelementptr inbounds i16, i16* %23825, i64 -15
  %23830 = bitcast i16* %23829 to <16 x i16>*
  %23831 = load <16 x i16>, <16 x i16>* %23830, align 2, !tbaa !396
  %23832 = getelementptr inbounds i16, i16* %23825, i64 -32
  %23833 = bitcast i16* %23832 to <16 x i16>*
  %23834 = load <16 x i16>, <16 x i16>* %23833, align 2, !tbaa !396
  %23835 = getelementptr inbounds i16, i16* %23825, i64 -16
  %23836 = bitcast i16* %23835 to <16 x i16>*
  %23837 = load <16 x i16>, <16 x i16>* %23836, align 2, !tbaa !396
  %23838 = getelementptr inbounds i16, i16* %23825, i64 -30
  %23839 = bitcast i16* %23838 to <16 x i16>*
  %23840 = load <16 x i16>, <16 x i16>* %23839, align 2, !tbaa !396
  %23841 = getelementptr inbounds i16, i16* %23825, i64 -14
  %23842 = bitcast i16* %23841 to <16 x i16>*
  %23843 = load <16 x i16>, <16 x i16>* %23842, align 2, !tbaa !396
  %23844 = getelementptr inbounds i16, i16* %23825, i64 -29
  %23845 = bitcast i16* %23844 to <16 x i16>*
  %23846 = load <16 x i16>, <16 x i16>* %23845, align 2, !tbaa !396
  %23847 = getelementptr inbounds i16, i16* %23825, i64 -13
  %23848 = bitcast i16* %23847 to <16 x i16>*
  %23849 = load <16 x i16>, <16 x i16>* %23848, align 2, !tbaa !396
  %23850 = getelementptr inbounds i16, i16* %23825, i64 -28
  %23851 = bitcast i16* %23850 to <16 x i16>*
  %23852 = load <16 x i16>, <16 x i16>* %23851, align 2, !tbaa !396
  %23853 = getelementptr inbounds i16, i16* %23825, i64 -12
  %23854 = bitcast i16* %23853 to <16 x i16>*
  %23855 = load <16 x i16>, <16 x i16>* %23854, align 2, !tbaa !396
  %23856 = getelementptr inbounds i16, i16* %23825, i64 -26
  %23857 = bitcast i16* %23856 to <16 x i16>*
  %23858 = load <16 x i16>, <16 x i16>* %23857, align 2, !tbaa !396
  %23859 = getelementptr inbounds i16, i16* %23825, i64 -10
  %23860 = bitcast i16* %23859 to <16 x i16>*
  %23861 = load <16 x i16>, <16 x i16>* %23860, align 2, !tbaa !396
  %23862 = getelementptr inbounds i16, i16* %23825, i64 -27
  %23863 = bitcast i16* %23862 to <16 x i16>*
  %23864 = load <16 x i16>, <16 x i16>* %23863, align 2, !tbaa !396
  %23865 = getelementptr inbounds i16, i16* %23825, i64 -11
  %23866 = bitcast i16* %23865 to <16 x i16>*
  %23867 = load <16 x i16>, <16 x i16>* %23866, align 2, !tbaa !396
  %23868 = add <16 x i16> %23834, %23828
  %23869 = add <16 x i16> %23868, %23840
  %23870 = add <16 x i16> %23869, %23846
  %23871 = add <16 x i16> %23870, %23852
  %23872 = add <16 x i16> %23871, %23858
  %23873 = add <16 x i16> %23872, %23864
  %23874 = add <16 x i16> %23837, %23831
  %23875 = add <16 x i16> %23874, %23843
  %23876 = add <16 x i16> %23875, %23849
  %23877 = add <16 x i16> %23876, %23855
  %23878 = add <16 x i16> %23877, %23861
  %23879 = add <16 x i16> %23878, %23867
  %23880 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23873, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23881 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23879, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23882 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23880, <16 x i16> %23873)
  %23883 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23881, <16 x i16> %23879)
  %23884 = shufflevector <16 x i16> %23882, <16 x i16> %23883, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23885 = lshr <32 x i16> %23884, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23886 = shufflevector <32 x i16> %23885, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23887 = zext i32 %.pre-phi3606 to i64
  %23888 = mul nsw i64 %295, %23887
  %23889 = add nsw i64 %297, %23888
  %23890 = getelementptr inbounds i16, i16* %blur_x917, i64 %23889
  %23891 = getelementptr inbounds i16, i16* %23890, i64 -32
  %23892 = bitcast i16* %23891 to <16 x i16>*
  store <16 x i16> %23886, <16 x i16>* %23892, align 2, !tbaa !399
  %23893 = shufflevector <32 x i16> %23885, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23894 = getelementptr inbounds i16, i16* %23890, i64 -16
  %23895 = bitcast i16* %23894 to <16 x i16>*
  store <16 x i16> %23893, <16 x i16>* %23895, align 2, !tbaa !399
  %23896 = zext i32 %.pre-phi3618 to i64
  %23897 = mul nsw i64 %23896, %314
  %23898 = add nsw i64 %23897, %292
  %23899 = getelementptr inbounds i16, i16* %blur_x917, i64 %23898
  %23900 = getelementptr inbounds i16, i16* %23899, i64 -32
  %23901 = bitcast i16* %23900 to <16 x i16>*
  %23902 = load <16 x i16>, <16 x i16>* %23901, align 2, !tbaa !399
  %23903 = getelementptr inbounds i16, i16* %23899, i64 -16
  %23904 = bitcast i16* %23903 to <16 x i16>*
  %23905 = load <16 x i16>, <16 x i16>* %23904, align 2, !tbaa !399
  %23906 = zext i32 %.pre-phi3614 to i64
  %23907 = mul nsw i64 %23906, %314
  %23908 = add nsw i64 %23907, %292
  %23909 = getelementptr inbounds i16, i16* %blur_x917, i64 %23908
  %23910 = getelementptr inbounds i16, i16* %23909, i64 -32
  %23911 = bitcast i16* %23910 to <16 x i16>*
  %23912 = load <16 x i16>, <16 x i16>* %23911, align 2, !tbaa !399
  %23913 = getelementptr inbounds i16, i16* %23909, i64 -16
  %23914 = bitcast i16* %23913 to <16 x i16>*
  %23915 = load <16 x i16>, <16 x i16>* %23914, align 2, !tbaa !399
  %23916 = zext i32 %.pre-phi3622 to i64
  %23917 = mul nsw i64 %23916, %314
  %23918 = add nsw i64 %23917, %292
  %23919 = getelementptr inbounds i16, i16* %blur_x917, i64 %23918
  %23920 = getelementptr inbounds i16, i16* %23919, i64 -32
  %23921 = bitcast i16* %23920 to <16 x i16>*
  %23922 = load <16 x i16>, <16 x i16>* %23921, align 2, !tbaa !399
  %23923 = getelementptr inbounds i16, i16* %23919, i64 -16
  %23924 = bitcast i16* %23923 to <16 x i16>*
  %23925 = load <16 x i16>, <16 x i16>* %23924, align 2, !tbaa !399
  %23926 = zext i32 %.pre-phi3628 to i64
  %23927 = mul nsw i64 %23926, %314
  %23928 = add nsw i64 %23927, %292
  %23929 = getelementptr inbounds i16, i16* %blur_x917, i64 %23928
  %23930 = getelementptr inbounds i16, i16* %23929, i64 -32
  %23931 = bitcast i16* %23930 to <16 x i16>*
  %23932 = load <16 x i16>, <16 x i16>* %23931, align 2, !tbaa !399
  %23933 = getelementptr inbounds i16, i16* %23929, i64 -16
  %23934 = bitcast i16* %23933 to <16 x i16>*
  %23935 = load <16 x i16>, <16 x i16>* %23934, align 2, !tbaa !399
  %23936 = zext i32 %.pre-phi3598 to i64
  %23937 = mul nsw i64 %23936, %314
  %23938 = add nsw i64 %23937, %292
  %23939 = getelementptr inbounds i16, i16* %blur_x917, i64 %23938
  %23940 = getelementptr inbounds i16, i16* %23939, i64 -32
  %23941 = bitcast i16* %23940 to <16 x i16>*
  %23942 = load <16 x i16>, <16 x i16>* %23941, align 2, !tbaa !399
  %23943 = getelementptr inbounds i16, i16* %23939, i64 -16
  %23944 = bitcast i16* %23943 to <16 x i16>*
  %23945 = load <16 x i16>, <16 x i16>* %23944, align 2, !tbaa !399
  %23946 = mul nsw i64 %23887, %314
  %23947 = add nsw i64 %23946, %292
  %23948 = getelementptr inbounds i16, i16* %blur_x917, i64 %23947
  %23949 = getelementptr inbounds i16, i16* %23948, i64 -32
  %23950 = bitcast i16* %23949 to <16 x i16>*
  %23951 = load <16 x i16>, <16 x i16>* %23950, align 2, !tbaa !399
  %23952 = getelementptr inbounds i16, i16* %23948, i64 -16
  %23953 = bitcast i16* %23952 to <16 x i16>*
  %23954 = load <16 x i16>, <16 x i16>* %23953, align 2, !tbaa !399
  %23955 = zext i32 %.pre-phi3602 to i64
  %23956 = mul nsw i64 %23955, %314
  %23957 = add nsw i64 %23956, %292
  %23958 = getelementptr inbounds i16, i16* %blur_x917, i64 %23957
  %23959 = getelementptr inbounds i16, i16* %23958, i64 -32
  %23960 = bitcast i16* %23959 to <16 x i16>*
  %23961 = load <16 x i16>, <16 x i16>* %23960, align 2, !tbaa !399
  %23962 = getelementptr inbounds i16, i16* %23958, i64 -16
  %23963 = bitcast i16* %23962 to <16 x i16>*
  %23964 = load <16 x i16>, <16 x i16>* %23963, align 2, !tbaa !399
  %23965 = add <16 x i16> %23912, %23902
  %23966 = add <16 x i16> %23965, %23922
  %23967 = add <16 x i16> %23966, %23932
  %23968 = add <16 x i16> %23967, %23942
  %23969 = add <16 x i16> %23968, %23951
  %23970 = add <16 x i16> %23969, %23961
  %23971 = add <16 x i16> %23915, %23905
  %23972 = add <16 x i16> %23971, %23925
  %23973 = add <16 x i16> %23972, %23935
  %23974 = add <16 x i16> %23973, %23945
  %23975 = add <16 x i16> %23974, %23954
  %23976 = add <16 x i16> %23975, %23964
  %23977 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23970, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23978 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23976, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %23979 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23977, <16 x i16> %23970)
  %23980 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %23978, <16 x i16> %23976)
  %23981 = shufflevector <16 x i16> %23979, <16 x i16> %23980, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23982 = lshr <32 x i16> %23981, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23983 = shufflevector <32 x i16> %23982, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23984 = sext i32 %a367 to i64
  %23985 = add nsw i64 %23984, 4
  %23986 = mul nsw i64 %23985, %315
  %23987 = add nsw i64 %317, %23986
  %23988 = getelementptr inbounds i16, i16* %264, i64 %23987
  %23989 = getelementptr inbounds i16, i16* %23988, i64 -32
  %23990 = bitcast i16* %23989 to <16 x i16>*
  store <16 x i16> %23983, <16 x i16>* %23990, align 2, !tbaa !401
  %23991 = shufflevector <32 x i16> %23982, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23992 = getelementptr inbounds i16, i16* %23988, i64 -16
  %23993 = bitcast i16* %23992 to <16 x i16>*
  store <16 x i16> %23991, <16 x i16>* %23993, align 2, !tbaa !401
  br label %after_bb1271

"for blur_y.s0.x.x.rebased1286":                  ; preds = %"for blur_y.s0.x.x.rebased1286.preheader", %"consume blur_x1295"
  %indvars.iv3417 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1286.preheader" ], [ %indvars.iv.next3418, %"consume blur_x1295" ]
  %23994 = add nsw i64 %indvars.iv3417, %299
  %23995 = icmp slt i64 %23994, 1
  %23996 = trunc i64 %23994 to i32
  %23997 = shl nsw i32 %23996, 5
  %23998 = icmp sgt i32 %202, %23997
  %23999 = or i1 %23995, %23998
  br i1 %23999, label %"produce blur_x1293", label %"for blur_y.s0.x.x.rebased1286.consume blur_x1295_crit_edge"

"for blur_y.s0.x.x.rebased1286.consume blur_x1295_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1286"
  %.pre3635 = shl nsw i64 %23994, 5
  br label %"consume blur_x1295"

"end for blur_y.s0.x.x.rebased1287":              ; preds = %"consume blur_x1295", %after_bb1271
  br i1 %300, label %"for blur_y.s0.x.x.rebased1303.preheader", label %"end for blur_y.s0.x.x.rebased1304", !prof !386

"for blur_y.s0.x.x.rebased1303.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1287"
  %24000 = sext i32 %t1738984 to i64
  %24001 = zext i32 %.pre-phi3618 to i64
  %24002 = mul nsw i64 %24001, %314
  %24003 = sub nsw i64 %24002, %294
  %24004 = zext i32 %.pre-phi3614 to i64
  %24005 = mul nsw i64 %24004, %314
  %24006 = sub nsw i64 %24005, %294
  %24007 = zext i32 %.pre-phi3622 to i64
  %24008 = mul nsw i64 %24007, %314
  %24009 = sub nsw i64 %24008, %294
  %24010 = zext i32 %.pre-phi3628 to i64
  %24011 = mul nsw i64 %24010, %314
  %24012 = sub nsw i64 %24011, %294
  %24013 = zext i32 %.pre-phi3598 to i64
  %24014 = mul nsw i64 %24013, %314
  %24015 = sub nsw i64 %24014, %294
  %24016 = zext i32 %.pre-phi3606 to i64
  %24017 = mul nsw i64 %24016, %314
  %24018 = sub nsw i64 %24017, %294
  %24019 = zext i32 %.pre-phi3602 to i64
  %24020 = mul nsw i64 %24019, %314
  %24021 = sub nsw i64 %24020, %294
  %24022 = sext i32 %a367 to i64
  %24023 = add nsw i64 %24022, 4
  %24024 = mul nsw i64 %24023, %315
  %24025 = add nsw i64 %24024, %318
  br label %"for blur_y.s0.x.x.rebased1303"

"produce blur_x1293":                             ; preds = %"for blur_y.s0.x.x.rebased1286"
  %t8161294 = add nsw i32 %23997, %t18251283
  %24026 = sext i32 %t8161294 to i64
  %24027 = getelementptr inbounds i16, i16* %read_input860, i64 %24026
  %24028 = getelementptr inbounds i16, i16* %24027, i64 1
  %24029 = bitcast i16* %24028 to <16 x i16>*
  %24030 = load <16 x i16>, <16 x i16>* %24029, align 2, !tbaa !396
  %24031 = getelementptr inbounds i16, i16* %24027, i64 17
  %24032 = bitcast i16* %24031 to <16 x i16>*
  %24033 = load <16 x i16>, <16 x i16>* %24032, align 2, !tbaa !396
  %24034 = bitcast i16* %24027 to <16 x i16>*
  %24035 = load <16 x i16>, <16 x i16>* %24034, align 2, !tbaa !396
  %24036 = getelementptr inbounds i16, i16* %24027, i64 16
  %24037 = bitcast i16* %24036 to <16 x i16>*
  %24038 = load <16 x i16>, <16 x i16>* %24037, align 2, !tbaa !396
  %24039 = getelementptr inbounds i16, i16* %24027, i64 2
  %24040 = bitcast i16* %24039 to <16 x i16>*
  %24041 = load <16 x i16>, <16 x i16>* %24040, align 2, !tbaa !396
  %24042 = getelementptr inbounds i16, i16* %24027, i64 18
  %24043 = bitcast i16* %24042 to <16 x i16>*
  %24044 = load <16 x i16>, <16 x i16>* %24043, align 2, !tbaa !396
  %24045 = getelementptr inbounds i16, i16* %24027, i64 3
  %24046 = bitcast i16* %24045 to <16 x i16>*
  %24047 = load <16 x i16>, <16 x i16>* %24046, align 2, !tbaa !396
  %24048 = getelementptr inbounds i16, i16* %24027, i64 19
  %24049 = bitcast i16* %24048 to <16 x i16>*
  %24050 = load <16 x i16>, <16 x i16>* %24049, align 2, !tbaa !396
  %24051 = getelementptr inbounds i16, i16* %24027, i64 4
  %24052 = bitcast i16* %24051 to <16 x i16>*
  %24053 = load <16 x i16>, <16 x i16>* %24052, align 2, !tbaa !396
  %24054 = getelementptr inbounds i16, i16* %24027, i64 20
  %24055 = bitcast i16* %24054 to <16 x i16>*
  %24056 = load <16 x i16>, <16 x i16>* %24055, align 2, !tbaa !396
  %24057 = getelementptr inbounds i16, i16* %24027, i64 6
  %24058 = bitcast i16* %24057 to <16 x i16>*
  %24059 = load <16 x i16>, <16 x i16>* %24058, align 2, !tbaa !396
  %24060 = getelementptr inbounds i16, i16* %24027, i64 22
  %24061 = bitcast i16* %24060 to <16 x i16>*
  %24062 = load <16 x i16>, <16 x i16>* %24061, align 2, !tbaa !396
  %24063 = getelementptr inbounds i16, i16* %24027, i64 5
  %24064 = bitcast i16* %24063 to <16 x i16>*
  %24065 = load <16 x i16>, <16 x i16>* %24064, align 2, !tbaa !396
  %24066 = getelementptr inbounds i16, i16* %24027, i64 21
  %24067 = bitcast i16* %24066 to <16 x i16>*
  %24068 = load <16 x i16>, <16 x i16>* %24067, align 2, !tbaa !396
  %24069 = add <16 x i16> %24035, %24030
  %24070 = add <16 x i16> %24069, %24041
  %24071 = add <16 x i16> %24070, %24047
  %24072 = add <16 x i16> %24071, %24053
  %24073 = add <16 x i16> %24072, %24059
  %24074 = add <16 x i16> %24073, %24065
  %24075 = add <16 x i16> %24038, %24033
  %24076 = add <16 x i16> %24075, %24044
  %24077 = add <16 x i16> %24076, %24050
  %24078 = add <16 x i16> %24077, %24056
  %24079 = add <16 x i16> %24078, %24062
  %24080 = add <16 x i16> %24079, %24068
  %24081 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24074, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24082 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24080, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24083 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24081, <16 x i16> %24074)
  %24084 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24082, <16 x i16> %24080)
  %24085 = shufflevector <16 x i16> %24083, <16 x i16> %24084, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24086 = lshr <32 x i16> %24085, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24087 = shufflevector <32 x i16> %24086, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24088 = shl nsw i64 %23994, 5
  %24089 = add nsw i64 %24088, %23799
  %24090 = getelementptr inbounds i16, i16* %blur_x917, i64 %24089
  %24091 = bitcast i16* %24090 to <16 x i16>*
  store <16 x i16> %24087, <16 x i16>* %24091, align 2, !tbaa !399
  %24092 = shufflevector <32 x i16> %24086, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24093 = getelementptr inbounds i16, i16* %24090, i64 16
  %24094 = bitcast i16* %24093 to <16 x i16>*
  store <16 x i16> %24092, <16 x i16>* %24094, align 2, !tbaa !399
  br label %"consume blur_x1295"

"consume blur_x1295":                             ; preds = %"for blur_y.s0.x.x.rebased1286.consume blur_x1295_crit_edge", %"produce blur_x1293"
  %.pre-phi3636 = phi i64 [ %.pre3635, %"for blur_y.s0.x.x.rebased1286.consume blur_x1295_crit_edge" ], [ %24088, %"produce blur_x1293" ]
  %24095 = add nsw i64 %23802, %.pre-phi3636
  %24096 = getelementptr inbounds i16, i16* %blur_x917, i64 %24095
  %24097 = bitcast i16* %24096 to <16 x i16>*
  %24098 = load <16 x i16>, <16 x i16>* %24097, align 2, !tbaa !399
  %24099 = getelementptr inbounds i16, i16* %24096, i64 16
  %24100 = bitcast i16* %24099 to <16 x i16>*
  %24101 = load <16 x i16>, <16 x i16>* %24100, align 2, !tbaa !399
  %24102 = add nsw i64 %23805, %.pre-phi3636
  %24103 = getelementptr inbounds i16, i16* %blur_x917, i64 %24102
  %24104 = bitcast i16* %24103 to <16 x i16>*
  %24105 = load <16 x i16>, <16 x i16>* %24104, align 2, !tbaa !399
  %24106 = getelementptr inbounds i16, i16* %24103, i64 16
  %24107 = bitcast i16* %24106 to <16 x i16>*
  %24108 = load <16 x i16>, <16 x i16>* %24107, align 2, !tbaa !399
  %24109 = add nsw i64 %23808, %.pre-phi3636
  %24110 = getelementptr inbounds i16, i16* %blur_x917, i64 %24109
  %24111 = bitcast i16* %24110 to <16 x i16>*
  %24112 = load <16 x i16>, <16 x i16>* %24111, align 2, !tbaa !399
  %24113 = getelementptr inbounds i16, i16* %24110, i64 16
  %24114 = bitcast i16* %24113 to <16 x i16>*
  %24115 = load <16 x i16>, <16 x i16>* %24114, align 2, !tbaa !399
  %24116 = add nsw i64 %23811, %.pre-phi3636
  %24117 = getelementptr inbounds i16, i16* %blur_x917, i64 %24116
  %24118 = bitcast i16* %24117 to <16 x i16>*
  %24119 = load <16 x i16>, <16 x i16>* %24118, align 2, !tbaa !399
  %24120 = getelementptr inbounds i16, i16* %24117, i64 16
  %24121 = bitcast i16* %24120 to <16 x i16>*
  %24122 = load <16 x i16>, <16 x i16>* %24121, align 2, !tbaa !399
  %24123 = add nsw i64 %23814, %.pre-phi3636
  %24124 = getelementptr inbounds i16, i16* %blur_x917, i64 %24123
  %24125 = bitcast i16* %24124 to <16 x i16>*
  %24126 = load <16 x i16>, <16 x i16>* %24125, align 2, !tbaa !399
  %24127 = getelementptr inbounds i16, i16* %24124, i64 16
  %24128 = bitcast i16* %24127 to <16 x i16>*
  %24129 = load <16 x i16>, <16 x i16>* %24128, align 2, !tbaa !399
  %24130 = add nsw i64 %23817, %.pre-phi3636
  %24131 = getelementptr inbounds i16, i16* %blur_x917, i64 %24130
  %24132 = bitcast i16* %24131 to <16 x i16>*
  %24133 = load <16 x i16>, <16 x i16>* %24132, align 2, !tbaa !399
  %24134 = getelementptr inbounds i16, i16* %24131, i64 16
  %24135 = bitcast i16* %24134 to <16 x i16>*
  %24136 = load <16 x i16>, <16 x i16>* %24135, align 2, !tbaa !399
  %24137 = add nsw i64 %23820, %.pre-phi3636
  %24138 = getelementptr inbounds i16, i16* %blur_x917, i64 %24137
  %24139 = bitcast i16* %24138 to <16 x i16>*
  %24140 = load <16 x i16>, <16 x i16>* %24139, align 2, !tbaa !399
  %24141 = getelementptr inbounds i16, i16* %24138, i64 16
  %24142 = bitcast i16* %24141 to <16 x i16>*
  %24143 = load <16 x i16>, <16 x i16>* %24142, align 2, !tbaa !399
  %24144 = add <16 x i16> %24105, %24098
  %24145 = add <16 x i16> %24144, %24112
  %24146 = add <16 x i16> %24145, %24119
  %24147 = add <16 x i16> %24146, %24126
  %24148 = add <16 x i16> %24147, %24133
  %24149 = add <16 x i16> %24148, %24140
  %24150 = add <16 x i16> %24108, %24101
  %24151 = add <16 x i16> %24150, %24115
  %24152 = add <16 x i16> %24151, %24122
  %24153 = add <16 x i16> %24152, %24129
  %24154 = add <16 x i16> %24153, %24136
  %24155 = add <16 x i16> %24154, %24143
  %24156 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24149, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24157 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24155, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24158 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24156, <16 x i16> %24149)
  %24159 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24157, <16 x i16> %24155)
  %24160 = shufflevector <16 x i16> %24158, <16 x i16> %24159, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24161 = lshr <32 x i16> %24160, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24162 = shufflevector <32 x i16> %24161, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24163 = add nsw i64 %23824, %.pre-phi3636
  %24164 = getelementptr inbounds i16, i16* %264, i64 %24163
  %24165 = bitcast i16* %24164 to <16 x i16>*
  store <16 x i16> %24162, <16 x i16>* %24165, align 2, !tbaa !401
  %24166 = shufflevector <32 x i16> %24161, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24167 = getelementptr inbounds i16, i16* %24164, i64 16
  %24168 = bitcast i16* %24167 to <16 x i16>*
  store <16 x i16> %24166, <16 x i16>* %24168, align 2, !tbaa !401
  %indvars.iv.next3418 = add nuw nsw i64 %indvars.iv3417, 1
  %.not2702 = icmp eq i64 %indvars.iv.next3418, %386
  br i1 %.not2702, label %"end for blur_y.s0.x.x.rebased1287", label %"for blur_y.s0.x.x.rebased1286"

"for blur_y.s0.x.x.rebased1303":                  ; preds = %"for blur_y.s0.x.x.rebased1303.preheader", %"consume blur_x1313"
  %blur_y.s0.x.x.rebased1305 = phi i32 [ %24319, %"consume blur_x1313" ], [ 0, %"for blur_y.s0.x.x.rebased1303.preheader" ]
  %24169 = add nsw i32 %blur_y.s0.x.x.rebased1305, %t1670852
  %a488 = shl nsw i32 %24169, 5
  %24170 = icmp sgt i32 %a355, %a488
  %b494 = select i1 %24170, i32 %a488, i32 %a355
  %24171 = icmp slt i32 %24169, 1
  %24172 = icmp sgt i32 %202, %a488
  %24173 = or i1 %24171, %24172
  br i1 %24173, label %"produce blur_x1310", label %"consume blur_x1313"

"end for blur_y.s0.x.x.rebased1304":              ; preds = %"consume blur_x1313", %"end for blur_y.s0.x.x.rebased1287"
  br i1 %232, label %"produce blur_x1317", label %after_bb1314

"produce blur_x1310":                             ; preds = %"for blur_y.s0.x.x.rebased1303"
  %24174 = icmp slt i32 %b494, %202
  %blur_x.s0.x.v1.base.s1311 = select i1 %24174, i32 %b494, i32 %202
  %t8211312 = add nsw i32 %blur_x.s0.x.v1.base.s1311, %t18251283
  %24175 = sext i32 %t8211312 to i64
  %24176 = getelementptr inbounds i16, i16* %read_input860, i64 %24175
  %24177 = getelementptr inbounds i16, i16* %24176, i64 1
  %24178 = bitcast i16* %24177 to <16 x i16>*
  %24179 = load <16 x i16>, <16 x i16>* %24178, align 2, !tbaa !396
  %24180 = getelementptr inbounds i16, i16* %24176, i64 17
  %24181 = bitcast i16* %24180 to <16 x i16>*
  %24182 = load <16 x i16>, <16 x i16>* %24181, align 2, !tbaa !396
  %24183 = bitcast i16* %24176 to <16 x i16>*
  %24184 = load <16 x i16>, <16 x i16>* %24183, align 2, !tbaa !396
  %24185 = getelementptr inbounds i16, i16* %24176, i64 16
  %24186 = bitcast i16* %24185 to <16 x i16>*
  %24187 = load <16 x i16>, <16 x i16>* %24186, align 2, !tbaa !396
  %24188 = getelementptr inbounds i16, i16* %24176, i64 2
  %24189 = bitcast i16* %24188 to <16 x i16>*
  %24190 = load <16 x i16>, <16 x i16>* %24189, align 2, !tbaa !396
  %24191 = getelementptr inbounds i16, i16* %24176, i64 18
  %24192 = bitcast i16* %24191 to <16 x i16>*
  %24193 = load <16 x i16>, <16 x i16>* %24192, align 2, !tbaa !396
  %24194 = getelementptr inbounds i16, i16* %24176, i64 3
  %24195 = bitcast i16* %24194 to <16 x i16>*
  %24196 = load <16 x i16>, <16 x i16>* %24195, align 2, !tbaa !396
  %24197 = getelementptr inbounds i16, i16* %24176, i64 19
  %24198 = bitcast i16* %24197 to <16 x i16>*
  %24199 = load <16 x i16>, <16 x i16>* %24198, align 2, !tbaa !396
  %24200 = getelementptr inbounds i16, i16* %24176, i64 4
  %24201 = bitcast i16* %24200 to <16 x i16>*
  %24202 = load <16 x i16>, <16 x i16>* %24201, align 2, !tbaa !396
  %24203 = getelementptr inbounds i16, i16* %24176, i64 20
  %24204 = bitcast i16* %24203 to <16 x i16>*
  %24205 = load <16 x i16>, <16 x i16>* %24204, align 2, !tbaa !396
  %24206 = getelementptr inbounds i16, i16* %24176, i64 6
  %24207 = bitcast i16* %24206 to <16 x i16>*
  %24208 = load <16 x i16>, <16 x i16>* %24207, align 2, !tbaa !396
  %24209 = getelementptr inbounds i16, i16* %24176, i64 22
  %24210 = bitcast i16* %24209 to <16 x i16>*
  %24211 = load <16 x i16>, <16 x i16>* %24210, align 2, !tbaa !396
  %24212 = getelementptr inbounds i16, i16* %24176, i64 5
  %24213 = bitcast i16* %24212 to <16 x i16>*
  %24214 = load <16 x i16>, <16 x i16>* %24213, align 2, !tbaa !396
  %24215 = getelementptr inbounds i16, i16* %24176, i64 21
  %24216 = bitcast i16* %24215 to <16 x i16>*
  %24217 = load <16 x i16>, <16 x i16>* %24216, align 2, !tbaa !396
  %24218 = add <16 x i16> %24184, %24179
  %24219 = add <16 x i16> %24218, %24190
  %24220 = add <16 x i16> %24219, %24196
  %24221 = add <16 x i16> %24220, %24202
  %24222 = add <16 x i16> %24221, %24208
  %24223 = add <16 x i16> %24222, %24214
  %24224 = add <16 x i16> %24187, %24182
  %24225 = add <16 x i16> %24224, %24193
  %24226 = add <16 x i16> %24225, %24199
  %24227 = add <16 x i16> %24226, %24205
  %24228 = add <16 x i16> %24227, %24211
  %24229 = add <16 x i16> %24228, %24217
  %24230 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24223, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24231 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24229, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24232 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24230, <16 x i16> %24223)
  %24233 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24231, <16 x i16> %24229)
  %24234 = shufflevector <16 x i16> %24232, <16 x i16> %24233, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24235 = lshr <32 x i16> %24234, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24236 = shufflevector <32 x i16> %24235, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24237 = sext i32 %blur_x.s0.x.v1.base.s1311 to i64
  %24238 = add nsw i64 %24237, %24000
  %24239 = getelementptr inbounds i16, i16* %blur_x917, i64 %24238
  %24240 = bitcast i16* %24239 to <16 x i16>*
  store <16 x i16> %24236, <16 x i16>* %24240, align 2, !tbaa !399
  %24241 = shufflevector <32 x i16> %24235, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24242 = getelementptr inbounds i16, i16* %24239, i64 16
  %24243 = bitcast i16* %24242 to <16 x i16>*
  store <16 x i16> %24241, <16 x i16>* %24243, align 2, !tbaa !399
  br label %"consume blur_x1313"

"consume blur_x1313":                             ; preds = %"for blur_y.s0.x.x.rebased1303", %"produce blur_x1310"
  %24244 = sext i32 %b494 to i64
  %24245 = add nsw i64 %24003, %24244
  %24246 = getelementptr inbounds i16, i16* %blur_x917, i64 %24245
  %24247 = bitcast i16* %24246 to <16 x i16>*
  %24248 = load <16 x i16>, <16 x i16>* %24247, align 2, !tbaa !399
  %24249 = getelementptr inbounds i16, i16* %24246, i64 16
  %24250 = bitcast i16* %24249 to <16 x i16>*
  %24251 = load <16 x i16>, <16 x i16>* %24250, align 2, !tbaa !399
  %24252 = add nsw i64 %24006, %24244
  %24253 = getelementptr inbounds i16, i16* %blur_x917, i64 %24252
  %24254 = bitcast i16* %24253 to <16 x i16>*
  %24255 = load <16 x i16>, <16 x i16>* %24254, align 2, !tbaa !399
  %24256 = getelementptr inbounds i16, i16* %24253, i64 16
  %24257 = bitcast i16* %24256 to <16 x i16>*
  %24258 = load <16 x i16>, <16 x i16>* %24257, align 2, !tbaa !399
  %24259 = add nsw i64 %24009, %24244
  %24260 = getelementptr inbounds i16, i16* %blur_x917, i64 %24259
  %24261 = bitcast i16* %24260 to <16 x i16>*
  %24262 = load <16 x i16>, <16 x i16>* %24261, align 2, !tbaa !399
  %24263 = getelementptr inbounds i16, i16* %24260, i64 16
  %24264 = bitcast i16* %24263 to <16 x i16>*
  %24265 = load <16 x i16>, <16 x i16>* %24264, align 2, !tbaa !399
  %24266 = add nsw i64 %24012, %24244
  %24267 = getelementptr inbounds i16, i16* %blur_x917, i64 %24266
  %24268 = bitcast i16* %24267 to <16 x i16>*
  %24269 = load <16 x i16>, <16 x i16>* %24268, align 2, !tbaa !399
  %24270 = getelementptr inbounds i16, i16* %24267, i64 16
  %24271 = bitcast i16* %24270 to <16 x i16>*
  %24272 = load <16 x i16>, <16 x i16>* %24271, align 2, !tbaa !399
  %24273 = add nsw i64 %24015, %24244
  %24274 = getelementptr inbounds i16, i16* %blur_x917, i64 %24273
  %24275 = bitcast i16* %24274 to <16 x i16>*
  %24276 = load <16 x i16>, <16 x i16>* %24275, align 2, !tbaa !399
  %24277 = getelementptr inbounds i16, i16* %24274, i64 16
  %24278 = bitcast i16* %24277 to <16 x i16>*
  %24279 = load <16 x i16>, <16 x i16>* %24278, align 2, !tbaa !399
  %24280 = add nsw i64 %24018, %24244
  %24281 = getelementptr inbounds i16, i16* %blur_x917, i64 %24280
  %24282 = bitcast i16* %24281 to <16 x i16>*
  %24283 = load <16 x i16>, <16 x i16>* %24282, align 2, !tbaa !399
  %24284 = getelementptr inbounds i16, i16* %24281, i64 16
  %24285 = bitcast i16* %24284 to <16 x i16>*
  %24286 = load <16 x i16>, <16 x i16>* %24285, align 2, !tbaa !399
  %24287 = add nsw i64 %24021, %24244
  %24288 = getelementptr inbounds i16, i16* %blur_x917, i64 %24287
  %24289 = bitcast i16* %24288 to <16 x i16>*
  %24290 = load <16 x i16>, <16 x i16>* %24289, align 2, !tbaa !399
  %24291 = getelementptr inbounds i16, i16* %24288, i64 16
  %24292 = bitcast i16* %24291 to <16 x i16>*
  %24293 = load <16 x i16>, <16 x i16>* %24292, align 2, !tbaa !399
  %24294 = add <16 x i16> %24255, %24248
  %24295 = add <16 x i16> %24294, %24262
  %24296 = add <16 x i16> %24295, %24269
  %24297 = add <16 x i16> %24296, %24276
  %24298 = add <16 x i16> %24297, %24283
  %24299 = add <16 x i16> %24298, %24290
  %24300 = add <16 x i16> %24258, %24251
  %24301 = add <16 x i16> %24300, %24265
  %24302 = add <16 x i16> %24301, %24272
  %24303 = add <16 x i16> %24302, %24279
  %24304 = add <16 x i16> %24303, %24286
  %24305 = add <16 x i16> %24304, %24293
  %24306 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24299, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24307 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24305, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24308 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24306, <16 x i16> %24299)
  %24309 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24307, <16 x i16> %24305)
  %24310 = shufflevector <16 x i16> %24308, <16 x i16> %24309, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24311 = lshr <32 x i16> %24310, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24312 = shufflevector <32 x i16> %24311, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24313 = add nsw i64 %24025, %24244
  %24314 = getelementptr inbounds i16, i16* %264, i64 %24313
  %24315 = bitcast i16* %24314 to <16 x i16>*
  store <16 x i16> %24312, <16 x i16>* %24315, align 2, !tbaa !401
  %24316 = shufflevector <32 x i16> %24311, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24317 = getelementptr inbounds i16, i16* %24314, i64 16
  %24318 = bitcast i16* %24317 to <16 x i16>*
  store <16 x i16> %24316, <16 x i16>* %24318, align 2, !tbaa !401
  %24319 = add nuw nsw i32 %blur_y.s0.x.x.rebased1305, 1
  %.not2701 = icmp eq i32 %24319, %t1727937
  br i1 %.not2701, label %"end for blur_y.s0.x.x.rebased1304", label %"for blur_y.s0.x.x.rebased1303"

after_bb1314:                                     ; preds = %"end for blur_y.s0.x.x.rebased1304", %"produce blur_x1317"
  br i1 %298, label %"for blur_y.s0.x.x.rebased1329.preheader", label %"end for blur_y.s0.x.x.rebased1330", !prof !386

"for blur_y.s0.x.x.rebased1329.preheader":        ; preds = %after_bb1314
  %24320 = sext i32 %t17441014 to i64
  %24321 = zext i32 %.pre-phi3622 to i64
  %24322 = mul nsw i64 %24321, %314
  %24323 = sub nsw i64 %24322, %294
  %24324 = zext i32 %.pre-phi3618 to i64
  %24325 = mul nsw i64 %24324, %314
  %24326 = sub nsw i64 %24325, %294
  %24327 = zext i32 %.pre-phi3628 to i64
  %24328 = mul nsw i64 %24327, %314
  %24329 = sub nsw i64 %24328, %294
  %24330 = zext i32 %.pre-phi3598 to i64
  %24331 = mul nsw i64 %24330, %314
  %24332 = sub nsw i64 %24331, %294
  %24333 = zext i32 %.pre-phi3602 to i64
  %24334 = mul nsw i64 %24333, %314
  %24335 = sub nsw i64 %24334, %294
  %24336 = zext i32 %.pre-phi3610 to i64
  %24337 = mul nsw i64 %24336, %314
  %24338 = sub nsw i64 %24337, %294
  %24339 = zext i32 %.pre-phi3606 to i64
  %24340 = mul nsw i64 %24339, %314
  %24341 = sub nsw i64 %24340, %294
  %24342 = sext i32 %a367 to i64
  %24343 = add nsw i64 %24342, 5
  %24344 = mul nsw i64 %24343, %315
  %24345 = add nsw i64 %24344, %318
  br label %"for blur_y.s0.x.x.rebased1329"

"produce blur_x1317":                             ; preds = %"end for blur_y.s0.x.x.rebased1304"
  %24346 = getelementptr inbounds i16, i16* %read_input860, i64 %327
  %24347 = getelementptr inbounds i16, i16* %24346, i64 -31
  %24348 = bitcast i16* %24347 to <16 x i16>*
  %24349 = load <16 x i16>, <16 x i16>* %24348, align 2, !tbaa !396
  %24350 = getelementptr inbounds i16, i16* %24346, i64 -15
  %24351 = bitcast i16* %24350 to <16 x i16>*
  %24352 = load <16 x i16>, <16 x i16>* %24351, align 2, !tbaa !396
  %24353 = getelementptr inbounds i16, i16* %24346, i64 -32
  %24354 = bitcast i16* %24353 to <16 x i16>*
  %24355 = load <16 x i16>, <16 x i16>* %24354, align 2, !tbaa !396
  %24356 = getelementptr inbounds i16, i16* %24346, i64 -16
  %24357 = bitcast i16* %24356 to <16 x i16>*
  %24358 = load <16 x i16>, <16 x i16>* %24357, align 2, !tbaa !396
  %24359 = getelementptr inbounds i16, i16* %24346, i64 -30
  %24360 = bitcast i16* %24359 to <16 x i16>*
  %24361 = load <16 x i16>, <16 x i16>* %24360, align 2, !tbaa !396
  %24362 = getelementptr inbounds i16, i16* %24346, i64 -14
  %24363 = bitcast i16* %24362 to <16 x i16>*
  %24364 = load <16 x i16>, <16 x i16>* %24363, align 2, !tbaa !396
  %24365 = getelementptr inbounds i16, i16* %24346, i64 -29
  %24366 = bitcast i16* %24365 to <16 x i16>*
  %24367 = load <16 x i16>, <16 x i16>* %24366, align 2, !tbaa !396
  %24368 = getelementptr inbounds i16, i16* %24346, i64 -13
  %24369 = bitcast i16* %24368 to <16 x i16>*
  %24370 = load <16 x i16>, <16 x i16>* %24369, align 2, !tbaa !396
  %24371 = getelementptr inbounds i16, i16* %24346, i64 -28
  %24372 = bitcast i16* %24371 to <16 x i16>*
  %24373 = load <16 x i16>, <16 x i16>* %24372, align 2, !tbaa !396
  %24374 = getelementptr inbounds i16, i16* %24346, i64 -12
  %24375 = bitcast i16* %24374 to <16 x i16>*
  %24376 = load <16 x i16>, <16 x i16>* %24375, align 2, !tbaa !396
  %24377 = getelementptr inbounds i16, i16* %24346, i64 -26
  %24378 = bitcast i16* %24377 to <16 x i16>*
  %24379 = load <16 x i16>, <16 x i16>* %24378, align 2, !tbaa !396
  %24380 = getelementptr inbounds i16, i16* %24346, i64 -10
  %24381 = bitcast i16* %24380 to <16 x i16>*
  %24382 = load <16 x i16>, <16 x i16>* %24381, align 2, !tbaa !396
  %24383 = getelementptr inbounds i16, i16* %24346, i64 -27
  %24384 = bitcast i16* %24383 to <16 x i16>*
  %24385 = load <16 x i16>, <16 x i16>* %24384, align 2, !tbaa !396
  %24386 = getelementptr inbounds i16, i16* %24346, i64 -11
  %24387 = bitcast i16* %24386 to <16 x i16>*
  %24388 = load <16 x i16>, <16 x i16>* %24387, align 2, !tbaa !396
  %24389 = add <16 x i16> %24355, %24349
  %24390 = add <16 x i16> %24389, %24361
  %24391 = add <16 x i16> %24390, %24367
  %24392 = add <16 x i16> %24391, %24373
  %24393 = add <16 x i16> %24392, %24379
  %24394 = add <16 x i16> %24393, %24385
  %24395 = add <16 x i16> %24358, %24352
  %24396 = add <16 x i16> %24395, %24364
  %24397 = add <16 x i16> %24396, %24370
  %24398 = add <16 x i16> %24397, %24376
  %24399 = add <16 x i16> %24398, %24382
  %24400 = add <16 x i16> %24399, %24388
  %24401 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24394, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24402 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24400, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24403 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24401, <16 x i16> %24394)
  %24404 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24402, <16 x i16> %24400)
  %24405 = shufflevector <16 x i16> %24403, <16 x i16> %24404, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24406 = lshr <32 x i16> %24405, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24407 = shufflevector <32 x i16> %24406, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24408 = zext i32 %.pre-phi3610 to i64
  %24409 = mul nsw i64 %295, %24408
  %24410 = add nsw i64 %297, %24409
  %24411 = getelementptr inbounds i16, i16* %blur_x917, i64 %24410
  %24412 = getelementptr inbounds i16, i16* %24411, i64 -32
  %24413 = bitcast i16* %24412 to <16 x i16>*
  store <16 x i16> %24407, <16 x i16>* %24413, align 2, !tbaa !399
  %24414 = shufflevector <32 x i16> %24406, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24415 = getelementptr inbounds i16, i16* %24411, i64 -16
  %24416 = bitcast i16* %24415 to <16 x i16>*
  store <16 x i16> %24414, <16 x i16>* %24416, align 2, !tbaa !399
  %24417 = zext i32 %.pre-phi3622 to i64
  %24418 = mul nsw i64 %24417, %314
  %24419 = add nsw i64 %24418, %292
  %24420 = getelementptr inbounds i16, i16* %blur_x917, i64 %24419
  %24421 = getelementptr inbounds i16, i16* %24420, i64 -32
  %24422 = bitcast i16* %24421 to <16 x i16>*
  %24423 = load <16 x i16>, <16 x i16>* %24422, align 2, !tbaa !399
  %24424 = getelementptr inbounds i16, i16* %24420, i64 -16
  %24425 = bitcast i16* %24424 to <16 x i16>*
  %24426 = load <16 x i16>, <16 x i16>* %24425, align 2, !tbaa !399
  %24427 = zext i32 %.pre-phi3618 to i64
  %24428 = mul nsw i64 %24427, %314
  %24429 = add nsw i64 %24428, %292
  %24430 = getelementptr inbounds i16, i16* %blur_x917, i64 %24429
  %24431 = getelementptr inbounds i16, i16* %24430, i64 -32
  %24432 = bitcast i16* %24431 to <16 x i16>*
  %24433 = load <16 x i16>, <16 x i16>* %24432, align 2, !tbaa !399
  %24434 = getelementptr inbounds i16, i16* %24430, i64 -16
  %24435 = bitcast i16* %24434 to <16 x i16>*
  %24436 = load <16 x i16>, <16 x i16>* %24435, align 2, !tbaa !399
  %24437 = zext i32 %.pre-phi3628 to i64
  %24438 = mul nsw i64 %24437, %314
  %24439 = add nsw i64 %24438, %292
  %24440 = getelementptr inbounds i16, i16* %blur_x917, i64 %24439
  %24441 = getelementptr inbounds i16, i16* %24440, i64 -32
  %24442 = bitcast i16* %24441 to <16 x i16>*
  %24443 = load <16 x i16>, <16 x i16>* %24442, align 2, !tbaa !399
  %24444 = getelementptr inbounds i16, i16* %24440, i64 -16
  %24445 = bitcast i16* %24444 to <16 x i16>*
  %24446 = load <16 x i16>, <16 x i16>* %24445, align 2, !tbaa !399
  %24447 = zext i32 %.pre-phi3598 to i64
  %24448 = mul nsw i64 %24447, %314
  %24449 = add nsw i64 %24448, %292
  %24450 = getelementptr inbounds i16, i16* %blur_x917, i64 %24449
  %24451 = getelementptr inbounds i16, i16* %24450, i64 -32
  %24452 = bitcast i16* %24451 to <16 x i16>*
  %24453 = load <16 x i16>, <16 x i16>* %24452, align 2, !tbaa !399
  %24454 = getelementptr inbounds i16, i16* %24450, i64 -16
  %24455 = bitcast i16* %24454 to <16 x i16>*
  %24456 = load <16 x i16>, <16 x i16>* %24455, align 2, !tbaa !399
  %24457 = zext i32 %.pre-phi3602 to i64
  %24458 = mul nsw i64 %24457, %314
  %24459 = add nsw i64 %24458, %292
  %24460 = getelementptr inbounds i16, i16* %blur_x917, i64 %24459
  %24461 = getelementptr inbounds i16, i16* %24460, i64 -32
  %24462 = bitcast i16* %24461 to <16 x i16>*
  %24463 = load <16 x i16>, <16 x i16>* %24462, align 2, !tbaa !399
  %24464 = getelementptr inbounds i16, i16* %24460, i64 -16
  %24465 = bitcast i16* %24464 to <16 x i16>*
  %24466 = load <16 x i16>, <16 x i16>* %24465, align 2, !tbaa !399
  %24467 = mul nsw i64 %24408, %314
  %24468 = add nsw i64 %24467, %292
  %24469 = getelementptr inbounds i16, i16* %blur_x917, i64 %24468
  %24470 = getelementptr inbounds i16, i16* %24469, i64 -32
  %24471 = bitcast i16* %24470 to <16 x i16>*
  %24472 = load <16 x i16>, <16 x i16>* %24471, align 2, !tbaa !399
  %24473 = getelementptr inbounds i16, i16* %24469, i64 -16
  %24474 = bitcast i16* %24473 to <16 x i16>*
  %24475 = load <16 x i16>, <16 x i16>* %24474, align 2, !tbaa !399
  %24476 = zext i32 %.pre-phi3606 to i64
  %24477 = mul nsw i64 %24476, %314
  %24478 = add nsw i64 %24477, %292
  %24479 = getelementptr inbounds i16, i16* %blur_x917, i64 %24478
  %24480 = getelementptr inbounds i16, i16* %24479, i64 -32
  %24481 = bitcast i16* %24480 to <16 x i16>*
  %24482 = load <16 x i16>, <16 x i16>* %24481, align 2, !tbaa !399
  %24483 = getelementptr inbounds i16, i16* %24479, i64 -16
  %24484 = bitcast i16* %24483 to <16 x i16>*
  %24485 = load <16 x i16>, <16 x i16>* %24484, align 2, !tbaa !399
  %24486 = add <16 x i16> %24433, %24423
  %24487 = add <16 x i16> %24486, %24443
  %24488 = add <16 x i16> %24487, %24453
  %24489 = add <16 x i16> %24488, %24463
  %24490 = add <16 x i16> %24489, %24472
  %24491 = add <16 x i16> %24490, %24482
  %24492 = add <16 x i16> %24436, %24426
  %24493 = add <16 x i16> %24492, %24446
  %24494 = add <16 x i16> %24493, %24456
  %24495 = add <16 x i16> %24494, %24466
  %24496 = add <16 x i16> %24495, %24475
  %24497 = add <16 x i16> %24496, %24485
  %24498 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24491, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24499 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24497, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24500 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24498, <16 x i16> %24491)
  %24501 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24499, <16 x i16> %24497)
  %24502 = shufflevector <16 x i16> %24500, <16 x i16> %24501, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24503 = lshr <32 x i16> %24502, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24504 = shufflevector <32 x i16> %24503, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24505 = sext i32 %a367 to i64
  %24506 = add nsw i64 %24505, 5
  %24507 = mul nsw i64 %24506, %315
  %24508 = add nsw i64 %317, %24507
  %24509 = getelementptr inbounds i16, i16* %264, i64 %24508
  %24510 = getelementptr inbounds i16, i16* %24509, i64 -32
  %24511 = bitcast i16* %24510 to <16 x i16>*
  store <16 x i16> %24504, <16 x i16>* %24511, align 2, !tbaa !401
  %24512 = shufflevector <32 x i16> %24503, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24513 = getelementptr inbounds i16, i16* %24509, i64 -16
  %24514 = bitcast i16* %24513 to <16 x i16>*
  store <16 x i16> %24512, <16 x i16>* %24514, align 2, !tbaa !401
  br label %after_bb1314

"for blur_y.s0.x.x.rebased1329":                  ; preds = %"for blur_y.s0.x.x.rebased1329.preheader", %"consume blur_x1338"
  %indvars.iv3420 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1329.preheader" ], [ %indvars.iv.next3421, %"consume blur_x1338" ]
  %24515 = add nsw i64 %indvars.iv3420, %299
  %24516 = icmp slt i64 %24515, 1
  %24517 = trunc i64 %24515 to i32
  %24518 = shl nsw i32 %24517, 5
  %24519 = icmp sgt i32 %202, %24518
  %24520 = or i1 %24516, %24519
  br i1 %24520, label %"produce blur_x1336", label %"for blur_y.s0.x.x.rebased1329.consume blur_x1338_crit_edge"

"for blur_y.s0.x.x.rebased1329.consume blur_x1338_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1329"
  %.pre3637 = shl nsw i64 %24515, 5
  br label %"consume blur_x1338"

"end for blur_y.s0.x.x.rebased1330":              ; preds = %"consume blur_x1338", %after_bb1314
  br i1 %300, label %"for blur_y.s0.x.x.rebased1346.preheader", label %"end for blur_y.s0.x.x.rebased1347", !prof !386

"for blur_y.s0.x.x.rebased1346.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1330"
  %24521 = sext i32 %t17441014 to i64
  %24522 = zext i32 %.pre-phi3622 to i64
  %24523 = mul nsw i64 %24522, %314
  %24524 = sub nsw i64 %24523, %294
  %24525 = zext i32 %.pre-phi3618 to i64
  %24526 = mul nsw i64 %24525, %314
  %24527 = sub nsw i64 %24526, %294
  %24528 = zext i32 %.pre-phi3628 to i64
  %24529 = mul nsw i64 %24528, %314
  %24530 = sub nsw i64 %24529, %294
  %24531 = zext i32 %.pre-phi3598 to i64
  %24532 = mul nsw i64 %24531, %314
  %24533 = sub nsw i64 %24532, %294
  %24534 = zext i32 %.pre-phi3602 to i64
  %24535 = mul nsw i64 %24534, %314
  %24536 = sub nsw i64 %24535, %294
  %24537 = zext i32 %.pre-phi3610 to i64
  %24538 = mul nsw i64 %24537, %314
  %24539 = sub nsw i64 %24538, %294
  %24540 = zext i32 %.pre-phi3606 to i64
  %24541 = mul nsw i64 %24540, %314
  %24542 = sub nsw i64 %24541, %294
  %24543 = sext i32 %a367 to i64
  %24544 = add nsw i64 %24543, 5
  %24545 = mul nsw i64 %24544, %315
  %24546 = add nsw i64 %24545, %318
  br label %"for blur_y.s0.x.x.rebased1346"

"produce blur_x1336":                             ; preds = %"for blur_y.s0.x.x.rebased1329"
  %t8321337 = add nsw i32 %24518, %t18411326
  %24547 = sext i32 %t8321337 to i64
  %24548 = getelementptr inbounds i16, i16* %read_input860, i64 %24547
  %24549 = getelementptr inbounds i16, i16* %24548, i64 1
  %24550 = bitcast i16* %24549 to <16 x i16>*
  %24551 = load <16 x i16>, <16 x i16>* %24550, align 2, !tbaa !396
  %24552 = getelementptr inbounds i16, i16* %24548, i64 17
  %24553 = bitcast i16* %24552 to <16 x i16>*
  %24554 = load <16 x i16>, <16 x i16>* %24553, align 2, !tbaa !396
  %24555 = bitcast i16* %24548 to <16 x i16>*
  %24556 = load <16 x i16>, <16 x i16>* %24555, align 2, !tbaa !396
  %24557 = getelementptr inbounds i16, i16* %24548, i64 16
  %24558 = bitcast i16* %24557 to <16 x i16>*
  %24559 = load <16 x i16>, <16 x i16>* %24558, align 2, !tbaa !396
  %24560 = getelementptr inbounds i16, i16* %24548, i64 2
  %24561 = bitcast i16* %24560 to <16 x i16>*
  %24562 = load <16 x i16>, <16 x i16>* %24561, align 2, !tbaa !396
  %24563 = getelementptr inbounds i16, i16* %24548, i64 18
  %24564 = bitcast i16* %24563 to <16 x i16>*
  %24565 = load <16 x i16>, <16 x i16>* %24564, align 2, !tbaa !396
  %24566 = getelementptr inbounds i16, i16* %24548, i64 3
  %24567 = bitcast i16* %24566 to <16 x i16>*
  %24568 = load <16 x i16>, <16 x i16>* %24567, align 2, !tbaa !396
  %24569 = getelementptr inbounds i16, i16* %24548, i64 19
  %24570 = bitcast i16* %24569 to <16 x i16>*
  %24571 = load <16 x i16>, <16 x i16>* %24570, align 2, !tbaa !396
  %24572 = getelementptr inbounds i16, i16* %24548, i64 4
  %24573 = bitcast i16* %24572 to <16 x i16>*
  %24574 = load <16 x i16>, <16 x i16>* %24573, align 2, !tbaa !396
  %24575 = getelementptr inbounds i16, i16* %24548, i64 20
  %24576 = bitcast i16* %24575 to <16 x i16>*
  %24577 = load <16 x i16>, <16 x i16>* %24576, align 2, !tbaa !396
  %24578 = getelementptr inbounds i16, i16* %24548, i64 6
  %24579 = bitcast i16* %24578 to <16 x i16>*
  %24580 = load <16 x i16>, <16 x i16>* %24579, align 2, !tbaa !396
  %24581 = getelementptr inbounds i16, i16* %24548, i64 22
  %24582 = bitcast i16* %24581 to <16 x i16>*
  %24583 = load <16 x i16>, <16 x i16>* %24582, align 2, !tbaa !396
  %24584 = getelementptr inbounds i16, i16* %24548, i64 5
  %24585 = bitcast i16* %24584 to <16 x i16>*
  %24586 = load <16 x i16>, <16 x i16>* %24585, align 2, !tbaa !396
  %24587 = getelementptr inbounds i16, i16* %24548, i64 21
  %24588 = bitcast i16* %24587 to <16 x i16>*
  %24589 = load <16 x i16>, <16 x i16>* %24588, align 2, !tbaa !396
  %24590 = add <16 x i16> %24556, %24551
  %24591 = add <16 x i16> %24590, %24562
  %24592 = add <16 x i16> %24591, %24568
  %24593 = add <16 x i16> %24592, %24574
  %24594 = add <16 x i16> %24593, %24580
  %24595 = add <16 x i16> %24594, %24586
  %24596 = add <16 x i16> %24559, %24554
  %24597 = add <16 x i16> %24596, %24565
  %24598 = add <16 x i16> %24597, %24571
  %24599 = add <16 x i16> %24598, %24577
  %24600 = add <16 x i16> %24599, %24583
  %24601 = add <16 x i16> %24600, %24589
  %24602 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24595, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24603 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24601, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24604 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24602, <16 x i16> %24595)
  %24605 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24603, <16 x i16> %24601)
  %24606 = shufflevector <16 x i16> %24604, <16 x i16> %24605, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24607 = lshr <32 x i16> %24606, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24608 = shufflevector <32 x i16> %24607, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24609 = shl nsw i64 %24515, 5
  %24610 = add nsw i64 %24609, %24320
  %24611 = getelementptr inbounds i16, i16* %blur_x917, i64 %24610
  %24612 = bitcast i16* %24611 to <16 x i16>*
  store <16 x i16> %24608, <16 x i16>* %24612, align 2, !tbaa !399
  %24613 = shufflevector <32 x i16> %24607, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24614 = getelementptr inbounds i16, i16* %24611, i64 16
  %24615 = bitcast i16* %24614 to <16 x i16>*
  store <16 x i16> %24613, <16 x i16>* %24615, align 2, !tbaa !399
  br label %"consume blur_x1338"

"consume blur_x1338":                             ; preds = %"for blur_y.s0.x.x.rebased1329.consume blur_x1338_crit_edge", %"produce blur_x1336"
  %.pre-phi3638 = phi i64 [ %.pre3637, %"for blur_y.s0.x.x.rebased1329.consume blur_x1338_crit_edge" ], [ %24609, %"produce blur_x1336" ]
  %24616 = add nsw i64 %24323, %.pre-phi3638
  %24617 = getelementptr inbounds i16, i16* %blur_x917, i64 %24616
  %24618 = bitcast i16* %24617 to <16 x i16>*
  %24619 = load <16 x i16>, <16 x i16>* %24618, align 2, !tbaa !399
  %24620 = getelementptr inbounds i16, i16* %24617, i64 16
  %24621 = bitcast i16* %24620 to <16 x i16>*
  %24622 = load <16 x i16>, <16 x i16>* %24621, align 2, !tbaa !399
  %24623 = add nsw i64 %24326, %.pre-phi3638
  %24624 = getelementptr inbounds i16, i16* %blur_x917, i64 %24623
  %24625 = bitcast i16* %24624 to <16 x i16>*
  %24626 = load <16 x i16>, <16 x i16>* %24625, align 2, !tbaa !399
  %24627 = getelementptr inbounds i16, i16* %24624, i64 16
  %24628 = bitcast i16* %24627 to <16 x i16>*
  %24629 = load <16 x i16>, <16 x i16>* %24628, align 2, !tbaa !399
  %24630 = add nsw i64 %24329, %.pre-phi3638
  %24631 = getelementptr inbounds i16, i16* %blur_x917, i64 %24630
  %24632 = bitcast i16* %24631 to <16 x i16>*
  %24633 = load <16 x i16>, <16 x i16>* %24632, align 2, !tbaa !399
  %24634 = getelementptr inbounds i16, i16* %24631, i64 16
  %24635 = bitcast i16* %24634 to <16 x i16>*
  %24636 = load <16 x i16>, <16 x i16>* %24635, align 2, !tbaa !399
  %24637 = add nsw i64 %24332, %.pre-phi3638
  %24638 = getelementptr inbounds i16, i16* %blur_x917, i64 %24637
  %24639 = bitcast i16* %24638 to <16 x i16>*
  %24640 = load <16 x i16>, <16 x i16>* %24639, align 2, !tbaa !399
  %24641 = getelementptr inbounds i16, i16* %24638, i64 16
  %24642 = bitcast i16* %24641 to <16 x i16>*
  %24643 = load <16 x i16>, <16 x i16>* %24642, align 2, !tbaa !399
  %24644 = add nsw i64 %24335, %.pre-phi3638
  %24645 = getelementptr inbounds i16, i16* %blur_x917, i64 %24644
  %24646 = bitcast i16* %24645 to <16 x i16>*
  %24647 = load <16 x i16>, <16 x i16>* %24646, align 2, !tbaa !399
  %24648 = getelementptr inbounds i16, i16* %24645, i64 16
  %24649 = bitcast i16* %24648 to <16 x i16>*
  %24650 = load <16 x i16>, <16 x i16>* %24649, align 2, !tbaa !399
  %24651 = add nsw i64 %24338, %.pre-phi3638
  %24652 = getelementptr inbounds i16, i16* %blur_x917, i64 %24651
  %24653 = bitcast i16* %24652 to <16 x i16>*
  %24654 = load <16 x i16>, <16 x i16>* %24653, align 2, !tbaa !399
  %24655 = getelementptr inbounds i16, i16* %24652, i64 16
  %24656 = bitcast i16* %24655 to <16 x i16>*
  %24657 = load <16 x i16>, <16 x i16>* %24656, align 2, !tbaa !399
  %24658 = add nsw i64 %24341, %.pre-phi3638
  %24659 = getelementptr inbounds i16, i16* %blur_x917, i64 %24658
  %24660 = bitcast i16* %24659 to <16 x i16>*
  %24661 = load <16 x i16>, <16 x i16>* %24660, align 2, !tbaa !399
  %24662 = getelementptr inbounds i16, i16* %24659, i64 16
  %24663 = bitcast i16* %24662 to <16 x i16>*
  %24664 = load <16 x i16>, <16 x i16>* %24663, align 2, !tbaa !399
  %24665 = add <16 x i16> %24626, %24619
  %24666 = add <16 x i16> %24665, %24633
  %24667 = add <16 x i16> %24666, %24640
  %24668 = add <16 x i16> %24667, %24647
  %24669 = add <16 x i16> %24668, %24654
  %24670 = add <16 x i16> %24669, %24661
  %24671 = add <16 x i16> %24629, %24622
  %24672 = add <16 x i16> %24671, %24636
  %24673 = add <16 x i16> %24672, %24643
  %24674 = add <16 x i16> %24673, %24650
  %24675 = add <16 x i16> %24674, %24657
  %24676 = add <16 x i16> %24675, %24664
  %24677 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24670, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24678 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24676, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24679 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24677, <16 x i16> %24670)
  %24680 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24678, <16 x i16> %24676)
  %24681 = shufflevector <16 x i16> %24679, <16 x i16> %24680, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24682 = lshr <32 x i16> %24681, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24683 = shufflevector <32 x i16> %24682, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24684 = add nsw i64 %24345, %.pre-phi3638
  %24685 = getelementptr inbounds i16, i16* %264, i64 %24684
  %24686 = bitcast i16* %24685 to <16 x i16>*
  store <16 x i16> %24683, <16 x i16>* %24686, align 2, !tbaa !401
  %24687 = shufflevector <32 x i16> %24682, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24688 = getelementptr inbounds i16, i16* %24685, i64 16
  %24689 = bitcast i16* %24688 to <16 x i16>*
  store <16 x i16> %24687, <16 x i16>* %24689, align 2, !tbaa !401
  %indvars.iv.next3421 = add nuw nsw i64 %indvars.iv3420, 1
  %.not2700 = icmp eq i64 %indvars.iv.next3421, %386
  br i1 %.not2700, label %"end for blur_y.s0.x.x.rebased1330", label %"for blur_y.s0.x.x.rebased1329"

"for blur_y.s0.x.x.rebased1346":                  ; preds = %"for blur_y.s0.x.x.rebased1346.preheader", %"consume blur_x1356"
  %blur_y.s0.x.x.rebased1348 = phi i32 [ %24840, %"consume blur_x1356" ], [ 0, %"for blur_y.s0.x.x.rebased1346.preheader" ]
  %24690 = add nsw i32 %blur_y.s0.x.x.rebased1348, %t1670852
  %a495 = shl nsw i32 %24690, 5
  %24691 = icmp sgt i32 %a355, %a495
  %b501 = select i1 %24691, i32 %a495, i32 %a355
  %24692 = icmp slt i32 %24690, 1
  %24693 = icmp sgt i32 %202, %a495
  %24694 = or i1 %24692, %24693
  br i1 %24694, label %"produce blur_x1353", label %"consume blur_x1356"

"end for blur_y.s0.x.x.rebased1347":              ; preds = %"consume blur_x1356", %"end for blur_y.s0.x.x.rebased1330"
  br i1 %232, label %"produce blur_x1360", label %after_bb1357

"produce blur_x1353":                             ; preds = %"for blur_y.s0.x.x.rebased1346"
  %24695 = icmp slt i32 %b501, %202
  %blur_x.s0.x.v1.base.s1354 = select i1 %24695, i32 %b501, i32 %202
  %t8371355 = add nsw i32 %blur_x.s0.x.v1.base.s1354, %t18411326
  %24696 = sext i32 %t8371355 to i64
  %24697 = getelementptr inbounds i16, i16* %read_input860, i64 %24696
  %24698 = getelementptr inbounds i16, i16* %24697, i64 1
  %24699 = bitcast i16* %24698 to <16 x i16>*
  %24700 = load <16 x i16>, <16 x i16>* %24699, align 2, !tbaa !396
  %24701 = getelementptr inbounds i16, i16* %24697, i64 17
  %24702 = bitcast i16* %24701 to <16 x i16>*
  %24703 = load <16 x i16>, <16 x i16>* %24702, align 2, !tbaa !396
  %24704 = bitcast i16* %24697 to <16 x i16>*
  %24705 = load <16 x i16>, <16 x i16>* %24704, align 2, !tbaa !396
  %24706 = getelementptr inbounds i16, i16* %24697, i64 16
  %24707 = bitcast i16* %24706 to <16 x i16>*
  %24708 = load <16 x i16>, <16 x i16>* %24707, align 2, !tbaa !396
  %24709 = getelementptr inbounds i16, i16* %24697, i64 2
  %24710 = bitcast i16* %24709 to <16 x i16>*
  %24711 = load <16 x i16>, <16 x i16>* %24710, align 2, !tbaa !396
  %24712 = getelementptr inbounds i16, i16* %24697, i64 18
  %24713 = bitcast i16* %24712 to <16 x i16>*
  %24714 = load <16 x i16>, <16 x i16>* %24713, align 2, !tbaa !396
  %24715 = getelementptr inbounds i16, i16* %24697, i64 3
  %24716 = bitcast i16* %24715 to <16 x i16>*
  %24717 = load <16 x i16>, <16 x i16>* %24716, align 2, !tbaa !396
  %24718 = getelementptr inbounds i16, i16* %24697, i64 19
  %24719 = bitcast i16* %24718 to <16 x i16>*
  %24720 = load <16 x i16>, <16 x i16>* %24719, align 2, !tbaa !396
  %24721 = getelementptr inbounds i16, i16* %24697, i64 4
  %24722 = bitcast i16* %24721 to <16 x i16>*
  %24723 = load <16 x i16>, <16 x i16>* %24722, align 2, !tbaa !396
  %24724 = getelementptr inbounds i16, i16* %24697, i64 20
  %24725 = bitcast i16* %24724 to <16 x i16>*
  %24726 = load <16 x i16>, <16 x i16>* %24725, align 2, !tbaa !396
  %24727 = getelementptr inbounds i16, i16* %24697, i64 6
  %24728 = bitcast i16* %24727 to <16 x i16>*
  %24729 = load <16 x i16>, <16 x i16>* %24728, align 2, !tbaa !396
  %24730 = getelementptr inbounds i16, i16* %24697, i64 22
  %24731 = bitcast i16* %24730 to <16 x i16>*
  %24732 = load <16 x i16>, <16 x i16>* %24731, align 2, !tbaa !396
  %24733 = getelementptr inbounds i16, i16* %24697, i64 5
  %24734 = bitcast i16* %24733 to <16 x i16>*
  %24735 = load <16 x i16>, <16 x i16>* %24734, align 2, !tbaa !396
  %24736 = getelementptr inbounds i16, i16* %24697, i64 21
  %24737 = bitcast i16* %24736 to <16 x i16>*
  %24738 = load <16 x i16>, <16 x i16>* %24737, align 2, !tbaa !396
  %24739 = add <16 x i16> %24705, %24700
  %24740 = add <16 x i16> %24739, %24711
  %24741 = add <16 x i16> %24740, %24717
  %24742 = add <16 x i16> %24741, %24723
  %24743 = add <16 x i16> %24742, %24729
  %24744 = add <16 x i16> %24743, %24735
  %24745 = add <16 x i16> %24708, %24703
  %24746 = add <16 x i16> %24745, %24714
  %24747 = add <16 x i16> %24746, %24720
  %24748 = add <16 x i16> %24747, %24726
  %24749 = add <16 x i16> %24748, %24732
  %24750 = add <16 x i16> %24749, %24738
  %24751 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24744, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24752 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24750, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24753 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24751, <16 x i16> %24744)
  %24754 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24752, <16 x i16> %24750)
  %24755 = shufflevector <16 x i16> %24753, <16 x i16> %24754, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24756 = lshr <32 x i16> %24755, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24757 = shufflevector <32 x i16> %24756, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24758 = sext i32 %blur_x.s0.x.v1.base.s1354 to i64
  %24759 = add nsw i64 %24758, %24521
  %24760 = getelementptr inbounds i16, i16* %blur_x917, i64 %24759
  %24761 = bitcast i16* %24760 to <16 x i16>*
  store <16 x i16> %24757, <16 x i16>* %24761, align 2, !tbaa !399
  %24762 = shufflevector <32 x i16> %24756, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24763 = getelementptr inbounds i16, i16* %24760, i64 16
  %24764 = bitcast i16* %24763 to <16 x i16>*
  store <16 x i16> %24762, <16 x i16>* %24764, align 2, !tbaa !399
  br label %"consume blur_x1356"

"consume blur_x1356":                             ; preds = %"for blur_y.s0.x.x.rebased1346", %"produce blur_x1353"
  %24765 = sext i32 %b501 to i64
  %24766 = add nsw i64 %24524, %24765
  %24767 = getelementptr inbounds i16, i16* %blur_x917, i64 %24766
  %24768 = bitcast i16* %24767 to <16 x i16>*
  %24769 = load <16 x i16>, <16 x i16>* %24768, align 2, !tbaa !399
  %24770 = getelementptr inbounds i16, i16* %24767, i64 16
  %24771 = bitcast i16* %24770 to <16 x i16>*
  %24772 = load <16 x i16>, <16 x i16>* %24771, align 2, !tbaa !399
  %24773 = add nsw i64 %24527, %24765
  %24774 = getelementptr inbounds i16, i16* %blur_x917, i64 %24773
  %24775 = bitcast i16* %24774 to <16 x i16>*
  %24776 = load <16 x i16>, <16 x i16>* %24775, align 2, !tbaa !399
  %24777 = getelementptr inbounds i16, i16* %24774, i64 16
  %24778 = bitcast i16* %24777 to <16 x i16>*
  %24779 = load <16 x i16>, <16 x i16>* %24778, align 2, !tbaa !399
  %24780 = add nsw i64 %24530, %24765
  %24781 = getelementptr inbounds i16, i16* %blur_x917, i64 %24780
  %24782 = bitcast i16* %24781 to <16 x i16>*
  %24783 = load <16 x i16>, <16 x i16>* %24782, align 2, !tbaa !399
  %24784 = getelementptr inbounds i16, i16* %24781, i64 16
  %24785 = bitcast i16* %24784 to <16 x i16>*
  %24786 = load <16 x i16>, <16 x i16>* %24785, align 2, !tbaa !399
  %24787 = add nsw i64 %24533, %24765
  %24788 = getelementptr inbounds i16, i16* %blur_x917, i64 %24787
  %24789 = bitcast i16* %24788 to <16 x i16>*
  %24790 = load <16 x i16>, <16 x i16>* %24789, align 2, !tbaa !399
  %24791 = getelementptr inbounds i16, i16* %24788, i64 16
  %24792 = bitcast i16* %24791 to <16 x i16>*
  %24793 = load <16 x i16>, <16 x i16>* %24792, align 2, !tbaa !399
  %24794 = add nsw i64 %24536, %24765
  %24795 = getelementptr inbounds i16, i16* %blur_x917, i64 %24794
  %24796 = bitcast i16* %24795 to <16 x i16>*
  %24797 = load <16 x i16>, <16 x i16>* %24796, align 2, !tbaa !399
  %24798 = getelementptr inbounds i16, i16* %24795, i64 16
  %24799 = bitcast i16* %24798 to <16 x i16>*
  %24800 = load <16 x i16>, <16 x i16>* %24799, align 2, !tbaa !399
  %24801 = add nsw i64 %24539, %24765
  %24802 = getelementptr inbounds i16, i16* %blur_x917, i64 %24801
  %24803 = bitcast i16* %24802 to <16 x i16>*
  %24804 = load <16 x i16>, <16 x i16>* %24803, align 2, !tbaa !399
  %24805 = getelementptr inbounds i16, i16* %24802, i64 16
  %24806 = bitcast i16* %24805 to <16 x i16>*
  %24807 = load <16 x i16>, <16 x i16>* %24806, align 2, !tbaa !399
  %24808 = add nsw i64 %24542, %24765
  %24809 = getelementptr inbounds i16, i16* %blur_x917, i64 %24808
  %24810 = bitcast i16* %24809 to <16 x i16>*
  %24811 = load <16 x i16>, <16 x i16>* %24810, align 2, !tbaa !399
  %24812 = getelementptr inbounds i16, i16* %24809, i64 16
  %24813 = bitcast i16* %24812 to <16 x i16>*
  %24814 = load <16 x i16>, <16 x i16>* %24813, align 2, !tbaa !399
  %24815 = add <16 x i16> %24776, %24769
  %24816 = add <16 x i16> %24815, %24783
  %24817 = add <16 x i16> %24816, %24790
  %24818 = add <16 x i16> %24817, %24797
  %24819 = add <16 x i16> %24818, %24804
  %24820 = add <16 x i16> %24819, %24811
  %24821 = add <16 x i16> %24779, %24772
  %24822 = add <16 x i16> %24821, %24786
  %24823 = add <16 x i16> %24822, %24793
  %24824 = add <16 x i16> %24823, %24800
  %24825 = add <16 x i16> %24824, %24807
  %24826 = add <16 x i16> %24825, %24814
  %24827 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24820, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24828 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24826, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24829 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24827, <16 x i16> %24820)
  %24830 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24828, <16 x i16> %24826)
  %24831 = shufflevector <16 x i16> %24829, <16 x i16> %24830, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24832 = lshr <32 x i16> %24831, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24833 = shufflevector <32 x i16> %24832, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24834 = add nsw i64 %24546, %24765
  %24835 = getelementptr inbounds i16, i16* %264, i64 %24834
  %24836 = bitcast i16* %24835 to <16 x i16>*
  store <16 x i16> %24833, <16 x i16>* %24836, align 2, !tbaa !401
  %24837 = shufflevector <32 x i16> %24832, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24838 = getelementptr inbounds i16, i16* %24835, i64 16
  %24839 = bitcast i16* %24838 to <16 x i16>*
  store <16 x i16> %24837, <16 x i16>* %24839, align 2, !tbaa !401
  %24840 = add nuw nsw i32 %blur_y.s0.x.x.rebased1348, 1
  %.not2699 = icmp eq i32 %24840, %t1727937
  br i1 %.not2699, label %"end for blur_y.s0.x.x.rebased1347", label %"for blur_y.s0.x.x.rebased1346"

after_bb1357:                                     ; preds = %"end for blur_y.s0.x.x.rebased1347", %"produce blur_x1360"
  br i1 %298, label %"for blur_y.s0.x.x.rebased1372.preheader", label %"end for blur_y.s0.x.x.rebased1373", !prof !386

"for blur_y.s0.x.x.rebased1372.preheader":        ; preds = %after_bb1357
  %24841 = sext i32 %t17501044 to i64
  %24842 = zext i32 %.pre-phi3628 to i64
  %24843 = mul nsw i64 %24842, %314
  %24844 = sub nsw i64 %24843, %294
  %24845 = zext i32 %.pre-phi3622 to i64
  %24846 = mul nsw i64 %24845, %314
  %24847 = sub nsw i64 %24846, %294
  %24848 = zext i32 %.pre-phi3598 to i64
  %24849 = mul nsw i64 %24848, %314
  %24850 = sub nsw i64 %24849, %294
  %24851 = zext i32 %.pre-phi3602 to i64
  %24852 = mul nsw i64 %24851, %314
  %24853 = sub nsw i64 %24852, %294
  %24854 = zext i32 %.pre-phi3606 to i64
  %24855 = mul nsw i64 %24854, %314
  %24856 = sub nsw i64 %24855, %294
  %24857 = zext i32 %.pre-phi3614 to i64
  %24858 = mul nsw i64 %24857, %314
  %24859 = sub nsw i64 %24858, %294
  %24860 = zext i32 %.pre-phi3610 to i64
  %24861 = mul nsw i64 %24860, %314
  %24862 = sub nsw i64 %24861, %294
  %24863 = sext i32 %a367 to i64
  %24864 = add nsw i64 %24863, 6
  %24865 = mul nsw i64 %24864, %315
  %24866 = add nsw i64 %24865, %318
  br label %"for blur_y.s0.x.x.rebased1372"

"produce blur_x1360":                             ; preds = %"end for blur_y.s0.x.x.rebased1347"
  %24867 = getelementptr inbounds i16, i16* %read_input860, i64 %329
  %24868 = getelementptr inbounds i16, i16* %24867, i64 -31
  %24869 = bitcast i16* %24868 to <16 x i16>*
  %24870 = load <16 x i16>, <16 x i16>* %24869, align 2, !tbaa !396
  %24871 = getelementptr inbounds i16, i16* %24867, i64 -15
  %24872 = bitcast i16* %24871 to <16 x i16>*
  %24873 = load <16 x i16>, <16 x i16>* %24872, align 2, !tbaa !396
  %24874 = getelementptr inbounds i16, i16* %24867, i64 -32
  %24875 = bitcast i16* %24874 to <16 x i16>*
  %24876 = load <16 x i16>, <16 x i16>* %24875, align 2, !tbaa !396
  %24877 = getelementptr inbounds i16, i16* %24867, i64 -16
  %24878 = bitcast i16* %24877 to <16 x i16>*
  %24879 = load <16 x i16>, <16 x i16>* %24878, align 2, !tbaa !396
  %24880 = getelementptr inbounds i16, i16* %24867, i64 -30
  %24881 = bitcast i16* %24880 to <16 x i16>*
  %24882 = load <16 x i16>, <16 x i16>* %24881, align 2, !tbaa !396
  %24883 = getelementptr inbounds i16, i16* %24867, i64 -14
  %24884 = bitcast i16* %24883 to <16 x i16>*
  %24885 = load <16 x i16>, <16 x i16>* %24884, align 2, !tbaa !396
  %24886 = getelementptr inbounds i16, i16* %24867, i64 -29
  %24887 = bitcast i16* %24886 to <16 x i16>*
  %24888 = load <16 x i16>, <16 x i16>* %24887, align 2, !tbaa !396
  %24889 = getelementptr inbounds i16, i16* %24867, i64 -13
  %24890 = bitcast i16* %24889 to <16 x i16>*
  %24891 = load <16 x i16>, <16 x i16>* %24890, align 2, !tbaa !396
  %24892 = getelementptr inbounds i16, i16* %24867, i64 -28
  %24893 = bitcast i16* %24892 to <16 x i16>*
  %24894 = load <16 x i16>, <16 x i16>* %24893, align 2, !tbaa !396
  %24895 = getelementptr inbounds i16, i16* %24867, i64 -12
  %24896 = bitcast i16* %24895 to <16 x i16>*
  %24897 = load <16 x i16>, <16 x i16>* %24896, align 2, !tbaa !396
  %24898 = getelementptr inbounds i16, i16* %24867, i64 -26
  %24899 = bitcast i16* %24898 to <16 x i16>*
  %24900 = load <16 x i16>, <16 x i16>* %24899, align 2, !tbaa !396
  %24901 = getelementptr inbounds i16, i16* %24867, i64 -10
  %24902 = bitcast i16* %24901 to <16 x i16>*
  %24903 = load <16 x i16>, <16 x i16>* %24902, align 2, !tbaa !396
  %24904 = getelementptr inbounds i16, i16* %24867, i64 -27
  %24905 = bitcast i16* %24904 to <16 x i16>*
  %24906 = load <16 x i16>, <16 x i16>* %24905, align 2, !tbaa !396
  %24907 = getelementptr inbounds i16, i16* %24867, i64 -11
  %24908 = bitcast i16* %24907 to <16 x i16>*
  %24909 = load <16 x i16>, <16 x i16>* %24908, align 2, !tbaa !396
  %24910 = add <16 x i16> %24876, %24870
  %24911 = add <16 x i16> %24910, %24882
  %24912 = add <16 x i16> %24911, %24888
  %24913 = add <16 x i16> %24912, %24894
  %24914 = add <16 x i16> %24913, %24900
  %24915 = add <16 x i16> %24914, %24906
  %24916 = add <16 x i16> %24879, %24873
  %24917 = add <16 x i16> %24916, %24885
  %24918 = add <16 x i16> %24917, %24891
  %24919 = add <16 x i16> %24918, %24897
  %24920 = add <16 x i16> %24919, %24903
  %24921 = add <16 x i16> %24920, %24909
  %24922 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24915, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24923 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24921, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %24924 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24922, <16 x i16> %24915)
  %24925 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %24923, <16 x i16> %24921)
  %24926 = shufflevector <16 x i16> %24924, <16 x i16> %24925, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24927 = lshr <32 x i16> %24926, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24928 = shufflevector <32 x i16> %24927, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24929 = zext i32 %.pre-phi3614 to i64
  %24930 = mul nsw i64 %295, %24929
  %24931 = add nsw i64 %297, %24930
  %24932 = getelementptr inbounds i16, i16* %blur_x917, i64 %24931
  %24933 = getelementptr inbounds i16, i16* %24932, i64 -32
  %24934 = bitcast i16* %24933 to <16 x i16>*
  store <16 x i16> %24928, <16 x i16>* %24934, align 2, !tbaa !399
  %24935 = shufflevector <32 x i16> %24927, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24936 = getelementptr inbounds i16, i16* %24932, i64 -16
  %24937 = bitcast i16* %24936 to <16 x i16>*
  store <16 x i16> %24935, <16 x i16>* %24937, align 2, !tbaa !399
  %24938 = zext i32 %.pre-phi3628 to i64
  %24939 = mul nsw i64 %24938, %314
  %24940 = add nsw i64 %24939, %292
  %24941 = getelementptr inbounds i16, i16* %blur_x917, i64 %24940
  %24942 = getelementptr inbounds i16, i16* %24941, i64 -32
  %24943 = bitcast i16* %24942 to <16 x i16>*
  %24944 = load <16 x i16>, <16 x i16>* %24943, align 2, !tbaa !399
  %24945 = getelementptr inbounds i16, i16* %24941, i64 -16
  %24946 = bitcast i16* %24945 to <16 x i16>*
  %24947 = load <16 x i16>, <16 x i16>* %24946, align 2, !tbaa !399
  %24948 = zext i32 %.pre-phi3622 to i64
  %24949 = mul nsw i64 %24948, %314
  %24950 = add nsw i64 %24949, %292
  %24951 = getelementptr inbounds i16, i16* %blur_x917, i64 %24950
  %24952 = getelementptr inbounds i16, i16* %24951, i64 -32
  %24953 = bitcast i16* %24952 to <16 x i16>*
  %24954 = load <16 x i16>, <16 x i16>* %24953, align 2, !tbaa !399
  %24955 = getelementptr inbounds i16, i16* %24951, i64 -16
  %24956 = bitcast i16* %24955 to <16 x i16>*
  %24957 = load <16 x i16>, <16 x i16>* %24956, align 2, !tbaa !399
  %24958 = zext i32 %.pre-phi3598 to i64
  %24959 = mul nsw i64 %24958, %314
  %24960 = add nsw i64 %24959, %292
  %24961 = getelementptr inbounds i16, i16* %blur_x917, i64 %24960
  %24962 = getelementptr inbounds i16, i16* %24961, i64 -32
  %24963 = bitcast i16* %24962 to <16 x i16>*
  %24964 = load <16 x i16>, <16 x i16>* %24963, align 2, !tbaa !399
  %24965 = getelementptr inbounds i16, i16* %24961, i64 -16
  %24966 = bitcast i16* %24965 to <16 x i16>*
  %24967 = load <16 x i16>, <16 x i16>* %24966, align 2, !tbaa !399
  %24968 = zext i32 %.pre-phi3602 to i64
  %24969 = mul nsw i64 %24968, %314
  %24970 = add nsw i64 %24969, %292
  %24971 = getelementptr inbounds i16, i16* %blur_x917, i64 %24970
  %24972 = getelementptr inbounds i16, i16* %24971, i64 -32
  %24973 = bitcast i16* %24972 to <16 x i16>*
  %24974 = load <16 x i16>, <16 x i16>* %24973, align 2, !tbaa !399
  %24975 = getelementptr inbounds i16, i16* %24971, i64 -16
  %24976 = bitcast i16* %24975 to <16 x i16>*
  %24977 = load <16 x i16>, <16 x i16>* %24976, align 2, !tbaa !399
  %24978 = zext i32 %.pre-phi3606 to i64
  %24979 = mul nsw i64 %24978, %314
  %24980 = add nsw i64 %24979, %292
  %24981 = getelementptr inbounds i16, i16* %blur_x917, i64 %24980
  %24982 = getelementptr inbounds i16, i16* %24981, i64 -32
  %24983 = bitcast i16* %24982 to <16 x i16>*
  %24984 = load <16 x i16>, <16 x i16>* %24983, align 2, !tbaa !399
  %24985 = getelementptr inbounds i16, i16* %24981, i64 -16
  %24986 = bitcast i16* %24985 to <16 x i16>*
  %24987 = load <16 x i16>, <16 x i16>* %24986, align 2, !tbaa !399
  %24988 = mul nsw i64 %24929, %314
  %24989 = add nsw i64 %24988, %292
  %24990 = getelementptr inbounds i16, i16* %blur_x917, i64 %24989
  %24991 = getelementptr inbounds i16, i16* %24990, i64 -32
  %24992 = bitcast i16* %24991 to <16 x i16>*
  %24993 = load <16 x i16>, <16 x i16>* %24992, align 2, !tbaa !399
  %24994 = getelementptr inbounds i16, i16* %24990, i64 -16
  %24995 = bitcast i16* %24994 to <16 x i16>*
  %24996 = load <16 x i16>, <16 x i16>* %24995, align 2, !tbaa !399
  %24997 = zext i32 %.pre-phi3610 to i64
  %24998 = mul nsw i64 %24997, %314
  %24999 = add nsw i64 %24998, %292
  %25000 = getelementptr inbounds i16, i16* %blur_x917, i64 %24999
  %25001 = getelementptr inbounds i16, i16* %25000, i64 -32
  %25002 = bitcast i16* %25001 to <16 x i16>*
  %25003 = load <16 x i16>, <16 x i16>* %25002, align 2, !tbaa !399
  %25004 = getelementptr inbounds i16, i16* %25000, i64 -16
  %25005 = bitcast i16* %25004 to <16 x i16>*
  %25006 = load <16 x i16>, <16 x i16>* %25005, align 2, !tbaa !399
  %25007 = add <16 x i16> %24954, %24944
  %25008 = add <16 x i16> %25007, %24964
  %25009 = add <16 x i16> %25008, %24974
  %25010 = add <16 x i16> %25009, %24984
  %25011 = add <16 x i16> %25010, %24993
  %25012 = add <16 x i16> %25011, %25003
  %25013 = add <16 x i16> %24957, %24947
  %25014 = add <16 x i16> %25013, %24967
  %25015 = add <16 x i16> %25014, %24977
  %25016 = add <16 x i16> %25015, %24987
  %25017 = add <16 x i16> %25016, %24996
  %25018 = add <16 x i16> %25017, %25006
  %25019 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25012, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25020 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25018, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25021 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25019, <16 x i16> %25012)
  %25022 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25020, <16 x i16> %25018)
  %25023 = shufflevector <16 x i16> %25021, <16 x i16> %25022, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25024 = lshr <32 x i16> %25023, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25025 = shufflevector <32 x i16> %25024, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25026 = sext i32 %a367 to i64
  %25027 = add nsw i64 %25026, 6
  %25028 = mul nsw i64 %25027, %315
  %25029 = add nsw i64 %317, %25028
  %25030 = getelementptr inbounds i16, i16* %264, i64 %25029
  %25031 = getelementptr inbounds i16, i16* %25030, i64 -32
  %25032 = bitcast i16* %25031 to <16 x i16>*
  store <16 x i16> %25025, <16 x i16>* %25032, align 2, !tbaa !401
  %25033 = shufflevector <32 x i16> %25024, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25034 = getelementptr inbounds i16, i16* %25030, i64 -16
  %25035 = bitcast i16* %25034 to <16 x i16>*
  store <16 x i16> %25033, <16 x i16>* %25035, align 2, !tbaa !401
  br label %after_bb1357

"for blur_y.s0.x.x.rebased1372":                  ; preds = %"for blur_y.s0.x.x.rebased1372.preheader", %"consume blur_x1381"
  %indvars.iv3423 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1372.preheader" ], [ %indvars.iv.next3424, %"consume blur_x1381" ]
  %25036 = add nsw i64 %indvars.iv3423, %299
  %25037 = icmp slt i64 %25036, 1
  %25038 = trunc i64 %25036 to i32
  %25039 = shl nsw i32 %25038, 5
  %25040 = icmp sgt i32 %202, %25039
  %25041 = or i1 %25037, %25040
  br i1 %25041, label %"produce blur_x1379", label %"for blur_y.s0.x.x.rebased1372.consume blur_x1381_crit_edge"

"for blur_y.s0.x.x.rebased1372.consume blur_x1381_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1372"
  %.pre3639 = shl nsw i64 %25036, 5
  br label %"consume blur_x1381"

"end for blur_y.s0.x.x.rebased1373":              ; preds = %"consume blur_x1381", %after_bb1357
  br i1 %300, label %"for blur_y.s0.x.x.rebased1389.preheader", label %"end for blur_y.s0.x.x.rebased1390", !prof !386

"for blur_y.s0.x.x.rebased1389.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1373"
  %25042 = sext i32 %t17501044 to i64
  %25043 = zext i32 %.pre-phi3628 to i64
  %25044 = mul nsw i64 %25043, %314
  %25045 = sub nsw i64 %25044, %294
  %25046 = zext i32 %.pre-phi3622 to i64
  %25047 = mul nsw i64 %25046, %314
  %25048 = sub nsw i64 %25047, %294
  %25049 = zext i32 %.pre-phi3598 to i64
  %25050 = mul nsw i64 %25049, %314
  %25051 = sub nsw i64 %25050, %294
  %25052 = zext i32 %.pre-phi3602 to i64
  %25053 = mul nsw i64 %25052, %314
  %25054 = sub nsw i64 %25053, %294
  %25055 = zext i32 %.pre-phi3606 to i64
  %25056 = mul nsw i64 %25055, %314
  %25057 = sub nsw i64 %25056, %294
  %25058 = zext i32 %.pre-phi3614 to i64
  %25059 = mul nsw i64 %25058, %314
  %25060 = sub nsw i64 %25059, %294
  %25061 = zext i32 %.pre-phi3610 to i64
  %25062 = mul nsw i64 %25061, %314
  %25063 = sub nsw i64 %25062, %294
  %25064 = sext i32 %a367 to i64
  %25065 = add nsw i64 %25064, 6
  %25066 = mul nsw i64 %25065, %315
  %25067 = add nsw i64 %25066, %318
  br label %"for blur_y.s0.x.x.rebased1389"

"produce blur_x1379":                             ; preds = %"for blur_y.s0.x.x.rebased1372"
  %t8481380 = add nsw i32 %25039, %t18571369
  %25068 = sext i32 %t8481380 to i64
  %25069 = getelementptr inbounds i16, i16* %read_input860, i64 %25068
  %25070 = getelementptr inbounds i16, i16* %25069, i64 1
  %25071 = bitcast i16* %25070 to <16 x i16>*
  %25072 = load <16 x i16>, <16 x i16>* %25071, align 2, !tbaa !396
  %25073 = getelementptr inbounds i16, i16* %25069, i64 17
  %25074 = bitcast i16* %25073 to <16 x i16>*
  %25075 = load <16 x i16>, <16 x i16>* %25074, align 2, !tbaa !396
  %25076 = bitcast i16* %25069 to <16 x i16>*
  %25077 = load <16 x i16>, <16 x i16>* %25076, align 2, !tbaa !396
  %25078 = getelementptr inbounds i16, i16* %25069, i64 16
  %25079 = bitcast i16* %25078 to <16 x i16>*
  %25080 = load <16 x i16>, <16 x i16>* %25079, align 2, !tbaa !396
  %25081 = getelementptr inbounds i16, i16* %25069, i64 2
  %25082 = bitcast i16* %25081 to <16 x i16>*
  %25083 = load <16 x i16>, <16 x i16>* %25082, align 2, !tbaa !396
  %25084 = getelementptr inbounds i16, i16* %25069, i64 18
  %25085 = bitcast i16* %25084 to <16 x i16>*
  %25086 = load <16 x i16>, <16 x i16>* %25085, align 2, !tbaa !396
  %25087 = getelementptr inbounds i16, i16* %25069, i64 3
  %25088 = bitcast i16* %25087 to <16 x i16>*
  %25089 = load <16 x i16>, <16 x i16>* %25088, align 2, !tbaa !396
  %25090 = getelementptr inbounds i16, i16* %25069, i64 19
  %25091 = bitcast i16* %25090 to <16 x i16>*
  %25092 = load <16 x i16>, <16 x i16>* %25091, align 2, !tbaa !396
  %25093 = getelementptr inbounds i16, i16* %25069, i64 4
  %25094 = bitcast i16* %25093 to <16 x i16>*
  %25095 = load <16 x i16>, <16 x i16>* %25094, align 2, !tbaa !396
  %25096 = getelementptr inbounds i16, i16* %25069, i64 20
  %25097 = bitcast i16* %25096 to <16 x i16>*
  %25098 = load <16 x i16>, <16 x i16>* %25097, align 2, !tbaa !396
  %25099 = getelementptr inbounds i16, i16* %25069, i64 6
  %25100 = bitcast i16* %25099 to <16 x i16>*
  %25101 = load <16 x i16>, <16 x i16>* %25100, align 2, !tbaa !396
  %25102 = getelementptr inbounds i16, i16* %25069, i64 22
  %25103 = bitcast i16* %25102 to <16 x i16>*
  %25104 = load <16 x i16>, <16 x i16>* %25103, align 2, !tbaa !396
  %25105 = getelementptr inbounds i16, i16* %25069, i64 5
  %25106 = bitcast i16* %25105 to <16 x i16>*
  %25107 = load <16 x i16>, <16 x i16>* %25106, align 2, !tbaa !396
  %25108 = getelementptr inbounds i16, i16* %25069, i64 21
  %25109 = bitcast i16* %25108 to <16 x i16>*
  %25110 = load <16 x i16>, <16 x i16>* %25109, align 2, !tbaa !396
  %25111 = add <16 x i16> %25077, %25072
  %25112 = add <16 x i16> %25111, %25083
  %25113 = add <16 x i16> %25112, %25089
  %25114 = add <16 x i16> %25113, %25095
  %25115 = add <16 x i16> %25114, %25101
  %25116 = add <16 x i16> %25115, %25107
  %25117 = add <16 x i16> %25080, %25075
  %25118 = add <16 x i16> %25117, %25086
  %25119 = add <16 x i16> %25118, %25092
  %25120 = add <16 x i16> %25119, %25098
  %25121 = add <16 x i16> %25120, %25104
  %25122 = add <16 x i16> %25121, %25110
  %25123 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25116, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25124 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25122, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25125 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25123, <16 x i16> %25116)
  %25126 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25124, <16 x i16> %25122)
  %25127 = shufflevector <16 x i16> %25125, <16 x i16> %25126, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25128 = lshr <32 x i16> %25127, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25129 = shufflevector <32 x i16> %25128, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25130 = shl nsw i64 %25036, 5
  %25131 = add nsw i64 %25130, %24841
  %25132 = getelementptr inbounds i16, i16* %blur_x917, i64 %25131
  %25133 = bitcast i16* %25132 to <16 x i16>*
  store <16 x i16> %25129, <16 x i16>* %25133, align 2, !tbaa !399
  %25134 = shufflevector <32 x i16> %25128, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25135 = getelementptr inbounds i16, i16* %25132, i64 16
  %25136 = bitcast i16* %25135 to <16 x i16>*
  store <16 x i16> %25134, <16 x i16>* %25136, align 2, !tbaa !399
  br label %"consume blur_x1381"

"consume blur_x1381":                             ; preds = %"for blur_y.s0.x.x.rebased1372.consume blur_x1381_crit_edge", %"produce blur_x1379"
  %.pre-phi3640 = phi i64 [ %.pre3639, %"for blur_y.s0.x.x.rebased1372.consume blur_x1381_crit_edge" ], [ %25130, %"produce blur_x1379" ]
  %25137 = add nsw i64 %24844, %.pre-phi3640
  %25138 = getelementptr inbounds i16, i16* %blur_x917, i64 %25137
  %25139 = bitcast i16* %25138 to <16 x i16>*
  %25140 = load <16 x i16>, <16 x i16>* %25139, align 2, !tbaa !399
  %25141 = getelementptr inbounds i16, i16* %25138, i64 16
  %25142 = bitcast i16* %25141 to <16 x i16>*
  %25143 = load <16 x i16>, <16 x i16>* %25142, align 2, !tbaa !399
  %25144 = add nsw i64 %24847, %.pre-phi3640
  %25145 = getelementptr inbounds i16, i16* %blur_x917, i64 %25144
  %25146 = bitcast i16* %25145 to <16 x i16>*
  %25147 = load <16 x i16>, <16 x i16>* %25146, align 2, !tbaa !399
  %25148 = getelementptr inbounds i16, i16* %25145, i64 16
  %25149 = bitcast i16* %25148 to <16 x i16>*
  %25150 = load <16 x i16>, <16 x i16>* %25149, align 2, !tbaa !399
  %25151 = add nsw i64 %24850, %.pre-phi3640
  %25152 = getelementptr inbounds i16, i16* %blur_x917, i64 %25151
  %25153 = bitcast i16* %25152 to <16 x i16>*
  %25154 = load <16 x i16>, <16 x i16>* %25153, align 2, !tbaa !399
  %25155 = getelementptr inbounds i16, i16* %25152, i64 16
  %25156 = bitcast i16* %25155 to <16 x i16>*
  %25157 = load <16 x i16>, <16 x i16>* %25156, align 2, !tbaa !399
  %25158 = add nsw i64 %24853, %.pre-phi3640
  %25159 = getelementptr inbounds i16, i16* %blur_x917, i64 %25158
  %25160 = bitcast i16* %25159 to <16 x i16>*
  %25161 = load <16 x i16>, <16 x i16>* %25160, align 2, !tbaa !399
  %25162 = getelementptr inbounds i16, i16* %25159, i64 16
  %25163 = bitcast i16* %25162 to <16 x i16>*
  %25164 = load <16 x i16>, <16 x i16>* %25163, align 2, !tbaa !399
  %25165 = add nsw i64 %24856, %.pre-phi3640
  %25166 = getelementptr inbounds i16, i16* %blur_x917, i64 %25165
  %25167 = bitcast i16* %25166 to <16 x i16>*
  %25168 = load <16 x i16>, <16 x i16>* %25167, align 2, !tbaa !399
  %25169 = getelementptr inbounds i16, i16* %25166, i64 16
  %25170 = bitcast i16* %25169 to <16 x i16>*
  %25171 = load <16 x i16>, <16 x i16>* %25170, align 2, !tbaa !399
  %25172 = add nsw i64 %24859, %.pre-phi3640
  %25173 = getelementptr inbounds i16, i16* %blur_x917, i64 %25172
  %25174 = bitcast i16* %25173 to <16 x i16>*
  %25175 = load <16 x i16>, <16 x i16>* %25174, align 2, !tbaa !399
  %25176 = getelementptr inbounds i16, i16* %25173, i64 16
  %25177 = bitcast i16* %25176 to <16 x i16>*
  %25178 = load <16 x i16>, <16 x i16>* %25177, align 2, !tbaa !399
  %25179 = add nsw i64 %24862, %.pre-phi3640
  %25180 = getelementptr inbounds i16, i16* %blur_x917, i64 %25179
  %25181 = bitcast i16* %25180 to <16 x i16>*
  %25182 = load <16 x i16>, <16 x i16>* %25181, align 2, !tbaa !399
  %25183 = getelementptr inbounds i16, i16* %25180, i64 16
  %25184 = bitcast i16* %25183 to <16 x i16>*
  %25185 = load <16 x i16>, <16 x i16>* %25184, align 2, !tbaa !399
  %25186 = add <16 x i16> %25147, %25140
  %25187 = add <16 x i16> %25186, %25154
  %25188 = add <16 x i16> %25187, %25161
  %25189 = add <16 x i16> %25188, %25168
  %25190 = add <16 x i16> %25189, %25175
  %25191 = add <16 x i16> %25190, %25182
  %25192 = add <16 x i16> %25150, %25143
  %25193 = add <16 x i16> %25192, %25157
  %25194 = add <16 x i16> %25193, %25164
  %25195 = add <16 x i16> %25194, %25171
  %25196 = add <16 x i16> %25195, %25178
  %25197 = add <16 x i16> %25196, %25185
  %25198 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25191, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25199 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25197, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25200 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25198, <16 x i16> %25191)
  %25201 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25199, <16 x i16> %25197)
  %25202 = shufflevector <16 x i16> %25200, <16 x i16> %25201, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25203 = lshr <32 x i16> %25202, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25204 = shufflevector <32 x i16> %25203, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25205 = add nsw i64 %24866, %.pre-phi3640
  %25206 = getelementptr inbounds i16, i16* %264, i64 %25205
  %25207 = bitcast i16* %25206 to <16 x i16>*
  store <16 x i16> %25204, <16 x i16>* %25207, align 2, !tbaa !401
  %25208 = shufflevector <32 x i16> %25203, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25209 = getelementptr inbounds i16, i16* %25206, i64 16
  %25210 = bitcast i16* %25209 to <16 x i16>*
  store <16 x i16> %25208, <16 x i16>* %25210, align 2, !tbaa !401
  %indvars.iv.next3424 = add nuw nsw i64 %indvars.iv3423, 1
  %.not2698 = icmp eq i64 %indvars.iv.next3424, %386
  br i1 %.not2698, label %"end for blur_y.s0.x.x.rebased1373", label %"for blur_y.s0.x.x.rebased1372"

"for blur_y.s0.x.x.rebased1389":                  ; preds = %"for blur_y.s0.x.x.rebased1389.preheader", %"consume blur_x1399"
  %blur_y.s0.x.x.rebased1391 = phi i32 [ %25361, %"consume blur_x1399" ], [ 0, %"for blur_y.s0.x.x.rebased1389.preheader" ]
  %25211 = add nsw i32 %blur_y.s0.x.x.rebased1391, %t1670852
  %a502 = shl nsw i32 %25211, 5
  %25212 = icmp sgt i32 %a355, %a502
  %b508 = select i1 %25212, i32 %a502, i32 %a355
  %25213 = icmp slt i32 %25211, 1
  %25214 = icmp sgt i32 %202, %a502
  %25215 = or i1 %25213, %25214
  br i1 %25215, label %"produce blur_x1396", label %"consume blur_x1399"

"end for blur_y.s0.x.x.rebased1390":              ; preds = %"consume blur_x1399", %"end for blur_y.s0.x.x.rebased1373"
  br i1 %232, label %"produce blur_x1403", label %after_bb1400

"produce blur_x1396":                             ; preds = %"for blur_y.s0.x.x.rebased1389"
  %25216 = icmp slt i32 %b508, %202
  %blur_x.s0.x.v1.base.s1397 = select i1 %25216, i32 %b508, i32 %202
  %t8531398 = add nsw i32 %blur_x.s0.x.v1.base.s1397, %t18571369
  %25217 = sext i32 %t8531398 to i64
  %25218 = getelementptr inbounds i16, i16* %read_input860, i64 %25217
  %25219 = getelementptr inbounds i16, i16* %25218, i64 1
  %25220 = bitcast i16* %25219 to <16 x i16>*
  %25221 = load <16 x i16>, <16 x i16>* %25220, align 2, !tbaa !396
  %25222 = getelementptr inbounds i16, i16* %25218, i64 17
  %25223 = bitcast i16* %25222 to <16 x i16>*
  %25224 = load <16 x i16>, <16 x i16>* %25223, align 2, !tbaa !396
  %25225 = bitcast i16* %25218 to <16 x i16>*
  %25226 = load <16 x i16>, <16 x i16>* %25225, align 2, !tbaa !396
  %25227 = getelementptr inbounds i16, i16* %25218, i64 16
  %25228 = bitcast i16* %25227 to <16 x i16>*
  %25229 = load <16 x i16>, <16 x i16>* %25228, align 2, !tbaa !396
  %25230 = getelementptr inbounds i16, i16* %25218, i64 2
  %25231 = bitcast i16* %25230 to <16 x i16>*
  %25232 = load <16 x i16>, <16 x i16>* %25231, align 2, !tbaa !396
  %25233 = getelementptr inbounds i16, i16* %25218, i64 18
  %25234 = bitcast i16* %25233 to <16 x i16>*
  %25235 = load <16 x i16>, <16 x i16>* %25234, align 2, !tbaa !396
  %25236 = getelementptr inbounds i16, i16* %25218, i64 3
  %25237 = bitcast i16* %25236 to <16 x i16>*
  %25238 = load <16 x i16>, <16 x i16>* %25237, align 2, !tbaa !396
  %25239 = getelementptr inbounds i16, i16* %25218, i64 19
  %25240 = bitcast i16* %25239 to <16 x i16>*
  %25241 = load <16 x i16>, <16 x i16>* %25240, align 2, !tbaa !396
  %25242 = getelementptr inbounds i16, i16* %25218, i64 4
  %25243 = bitcast i16* %25242 to <16 x i16>*
  %25244 = load <16 x i16>, <16 x i16>* %25243, align 2, !tbaa !396
  %25245 = getelementptr inbounds i16, i16* %25218, i64 20
  %25246 = bitcast i16* %25245 to <16 x i16>*
  %25247 = load <16 x i16>, <16 x i16>* %25246, align 2, !tbaa !396
  %25248 = getelementptr inbounds i16, i16* %25218, i64 6
  %25249 = bitcast i16* %25248 to <16 x i16>*
  %25250 = load <16 x i16>, <16 x i16>* %25249, align 2, !tbaa !396
  %25251 = getelementptr inbounds i16, i16* %25218, i64 22
  %25252 = bitcast i16* %25251 to <16 x i16>*
  %25253 = load <16 x i16>, <16 x i16>* %25252, align 2, !tbaa !396
  %25254 = getelementptr inbounds i16, i16* %25218, i64 5
  %25255 = bitcast i16* %25254 to <16 x i16>*
  %25256 = load <16 x i16>, <16 x i16>* %25255, align 2, !tbaa !396
  %25257 = getelementptr inbounds i16, i16* %25218, i64 21
  %25258 = bitcast i16* %25257 to <16 x i16>*
  %25259 = load <16 x i16>, <16 x i16>* %25258, align 2, !tbaa !396
  %25260 = add <16 x i16> %25226, %25221
  %25261 = add <16 x i16> %25260, %25232
  %25262 = add <16 x i16> %25261, %25238
  %25263 = add <16 x i16> %25262, %25244
  %25264 = add <16 x i16> %25263, %25250
  %25265 = add <16 x i16> %25264, %25256
  %25266 = add <16 x i16> %25229, %25224
  %25267 = add <16 x i16> %25266, %25235
  %25268 = add <16 x i16> %25267, %25241
  %25269 = add <16 x i16> %25268, %25247
  %25270 = add <16 x i16> %25269, %25253
  %25271 = add <16 x i16> %25270, %25259
  %25272 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25265, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25273 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25271, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25274 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25272, <16 x i16> %25265)
  %25275 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25273, <16 x i16> %25271)
  %25276 = shufflevector <16 x i16> %25274, <16 x i16> %25275, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25277 = lshr <32 x i16> %25276, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25278 = shufflevector <32 x i16> %25277, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25279 = sext i32 %blur_x.s0.x.v1.base.s1397 to i64
  %25280 = add nsw i64 %25279, %25042
  %25281 = getelementptr inbounds i16, i16* %blur_x917, i64 %25280
  %25282 = bitcast i16* %25281 to <16 x i16>*
  store <16 x i16> %25278, <16 x i16>* %25282, align 2, !tbaa !399
  %25283 = shufflevector <32 x i16> %25277, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25284 = getelementptr inbounds i16, i16* %25281, i64 16
  %25285 = bitcast i16* %25284 to <16 x i16>*
  store <16 x i16> %25283, <16 x i16>* %25285, align 2, !tbaa !399
  br label %"consume blur_x1399"

"consume blur_x1399":                             ; preds = %"for blur_y.s0.x.x.rebased1389", %"produce blur_x1396"
  %25286 = sext i32 %b508 to i64
  %25287 = add nsw i64 %25045, %25286
  %25288 = getelementptr inbounds i16, i16* %blur_x917, i64 %25287
  %25289 = bitcast i16* %25288 to <16 x i16>*
  %25290 = load <16 x i16>, <16 x i16>* %25289, align 2, !tbaa !399
  %25291 = getelementptr inbounds i16, i16* %25288, i64 16
  %25292 = bitcast i16* %25291 to <16 x i16>*
  %25293 = load <16 x i16>, <16 x i16>* %25292, align 2, !tbaa !399
  %25294 = add nsw i64 %25048, %25286
  %25295 = getelementptr inbounds i16, i16* %blur_x917, i64 %25294
  %25296 = bitcast i16* %25295 to <16 x i16>*
  %25297 = load <16 x i16>, <16 x i16>* %25296, align 2, !tbaa !399
  %25298 = getelementptr inbounds i16, i16* %25295, i64 16
  %25299 = bitcast i16* %25298 to <16 x i16>*
  %25300 = load <16 x i16>, <16 x i16>* %25299, align 2, !tbaa !399
  %25301 = add nsw i64 %25051, %25286
  %25302 = getelementptr inbounds i16, i16* %blur_x917, i64 %25301
  %25303 = bitcast i16* %25302 to <16 x i16>*
  %25304 = load <16 x i16>, <16 x i16>* %25303, align 2, !tbaa !399
  %25305 = getelementptr inbounds i16, i16* %25302, i64 16
  %25306 = bitcast i16* %25305 to <16 x i16>*
  %25307 = load <16 x i16>, <16 x i16>* %25306, align 2, !tbaa !399
  %25308 = add nsw i64 %25054, %25286
  %25309 = getelementptr inbounds i16, i16* %blur_x917, i64 %25308
  %25310 = bitcast i16* %25309 to <16 x i16>*
  %25311 = load <16 x i16>, <16 x i16>* %25310, align 2, !tbaa !399
  %25312 = getelementptr inbounds i16, i16* %25309, i64 16
  %25313 = bitcast i16* %25312 to <16 x i16>*
  %25314 = load <16 x i16>, <16 x i16>* %25313, align 2, !tbaa !399
  %25315 = add nsw i64 %25057, %25286
  %25316 = getelementptr inbounds i16, i16* %blur_x917, i64 %25315
  %25317 = bitcast i16* %25316 to <16 x i16>*
  %25318 = load <16 x i16>, <16 x i16>* %25317, align 2, !tbaa !399
  %25319 = getelementptr inbounds i16, i16* %25316, i64 16
  %25320 = bitcast i16* %25319 to <16 x i16>*
  %25321 = load <16 x i16>, <16 x i16>* %25320, align 2, !tbaa !399
  %25322 = add nsw i64 %25060, %25286
  %25323 = getelementptr inbounds i16, i16* %blur_x917, i64 %25322
  %25324 = bitcast i16* %25323 to <16 x i16>*
  %25325 = load <16 x i16>, <16 x i16>* %25324, align 2, !tbaa !399
  %25326 = getelementptr inbounds i16, i16* %25323, i64 16
  %25327 = bitcast i16* %25326 to <16 x i16>*
  %25328 = load <16 x i16>, <16 x i16>* %25327, align 2, !tbaa !399
  %25329 = add nsw i64 %25063, %25286
  %25330 = getelementptr inbounds i16, i16* %blur_x917, i64 %25329
  %25331 = bitcast i16* %25330 to <16 x i16>*
  %25332 = load <16 x i16>, <16 x i16>* %25331, align 2, !tbaa !399
  %25333 = getelementptr inbounds i16, i16* %25330, i64 16
  %25334 = bitcast i16* %25333 to <16 x i16>*
  %25335 = load <16 x i16>, <16 x i16>* %25334, align 2, !tbaa !399
  %25336 = add <16 x i16> %25297, %25290
  %25337 = add <16 x i16> %25336, %25304
  %25338 = add <16 x i16> %25337, %25311
  %25339 = add <16 x i16> %25338, %25318
  %25340 = add <16 x i16> %25339, %25325
  %25341 = add <16 x i16> %25340, %25332
  %25342 = add <16 x i16> %25300, %25293
  %25343 = add <16 x i16> %25342, %25307
  %25344 = add <16 x i16> %25343, %25314
  %25345 = add <16 x i16> %25344, %25321
  %25346 = add <16 x i16> %25345, %25328
  %25347 = add <16 x i16> %25346, %25335
  %25348 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25341, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25349 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25347, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25350 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25348, <16 x i16> %25341)
  %25351 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25349, <16 x i16> %25347)
  %25352 = shufflevector <16 x i16> %25350, <16 x i16> %25351, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25353 = lshr <32 x i16> %25352, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25354 = shufflevector <32 x i16> %25353, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25355 = add nsw i64 %25067, %25286
  %25356 = getelementptr inbounds i16, i16* %264, i64 %25355
  %25357 = bitcast i16* %25356 to <16 x i16>*
  store <16 x i16> %25354, <16 x i16>* %25357, align 2, !tbaa !401
  %25358 = shufflevector <32 x i16> %25353, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25359 = getelementptr inbounds i16, i16* %25356, i64 16
  %25360 = bitcast i16* %25359 to <16 x i16>*
  store <16 x i16> %25358, <16 x i16>* %25360, align 2, !tbaa !401
  %25361 = add nuw nsw i32 %blur_y.s0.x.x.rebased1391, 1
  %.not2697 = icmp eq i32 %25361, %t1727937
  br i1 %.not2697, label %"end for blur_y.s0.x.x.rebased1390", label %"for blur_y.s0.x.x.rebased1389"

after_bb1400:                                     ; preds = %"end for blur_y.s0.x.x.rebased1390", %"produce blur_x1403"
  br i1 %298, label %"for blur_y.s0.x.x.rebased1415.preheader", label %"end for blur_y.s0.x.x.rebased1416", !prof !386

"for blur_y.s0.x.x.rebased1415.preheader":        ; preds = %after_bb1400
  %25362 = sext i32 %t17561074 to i64
  %25363 = zext i32 %.pre-phi3598 to i64
  %25364 = mul nsw i64 %25363, %314
  %25365 = sub nsw i64 %25364, %294
  %25366 = zext i32 %.pre-phi3628 to i64
  %25367 = mul nsw i64 %25366, %314
  %25368 = sub nsw i64 %25367, %294
  %25369 = zext i32 %.pre-phi3602 to i64
  %25370 = mul nsw i64 %25369, %314
  %25371 = sub nsw i64 %25370, %294
  %25372 = zext i32 %.pre-phi3606 to i64
  %25373 = mul nsw i64 %25372, %314
  %25374 = sub nsw i64 %25373, %294
  %25375 = zext i32 %.pre-phi3610 to i64
  %25376 = mul nsw i64 %25375, %314
  %25377 = sub nsw i64 %25376, %294
  %25378 = zext i32 %.pre-phi3618 to i64
  %25379 = mul nsw i64 %25378, %314
  %25380 = sub nsw i64 %25379, %294
  %25381 = zext i32 %.pre-phi3614 to i64
  %25382 = mul nsw i64 %25381, %314
  %25383 = sub nsw i64 %25382, %294
  %25384 = sext i32 %a367 to i64
  %25385 = add nsw i64 %25384, 7
  %25386 = mul nsw i64 %25385, %315
  %25387 = add nsw i64 %25386, %318
  br label %"for blur_y.s0.x.x.rebased1415"

"produce blur_x1403":                             ; preds = %"end for blur_y.s0.x.x.rebased1390"
  %25388 = getelementptr inbounds i16, i16* %read_input860, i64 %331
  %25389 = getelementptr inbounds i16, i16* %25388, i64 -31
  %25390 = bitcast i16* %25389 to <16 x i16>*
  %25391 = load <16 x i16>, <16 x i16>* %25390, align 2, !tbaa !396
  %25392 = getelementptr inbounds i16, i16* %25388, i64 -15
  %25393 = bitcast i16* %25392 to <16 x i16>*
  %25394 = load <16 x i16>, <16 x i16>* %25393, align 2, !tbaa !396
  %25395 = getelementptr inbounds i16, i16* %25388, i64 -32
  %25396 = bitcast i16* %25395 to <16 x i16>*
  %25397 = load <16 x i16>, <16 x i16>* %25396, align 2, !tbaa !396
  %25398 = getelementptr inbounds i16, i16* %25388, i64 -16
  %25399 = bitcast i16* %25398 to <16 x i16>*
  %25400 = load <16 x i16>, <16 x i16>* %25399, align 2, !tbaa !396
  %25401 = getelementptr inbounds i16, i16* %25388, i64 -30
  %25402 = bitcast i16* %25401 to <16 x i16>*
  %25403 = load <16 x i16>, <16 x i16>* %25402, align 2, !tbaa !396
  %25404 = getelementptr inbounds i16, i16* %25388, i64 -14
  %25405 = bitcast i16* %25404 to <16 x i16>*
  %25406 = load <16 x i16>, <16 x i16>* %25405, align 2, !tbaa !396
  %25407 = getelementptr inbounds i16, i16* %25388, i64 -29
  %25408 = bitcast i16* %25407 to <16 x i16>*
  %25409 = load <16 x i16>, <16 x i16>* %25408, align 2, !tbaa !396
  %25410 = getelementptr inbounds i16, i16* %25388, i64 -13
  %25411 = bitcast i16* %25410 to <16 x i16>*
  %25412 = load <16 x i16>, <16 x i16>* %25411, align 2, !tbaa !396
  %25413 = getelementptr inbounds i16, i16* %25388, i64 -28
  %25414 = bitcast i16* %25413 to <16 x i16>*
  %25415 = load <16 x i16>, <16 x i16>* %25414, align 2, !tbaa !396
  %25416 = getelementptr inbounds i16, i16* %25388, i64 -12
  %25417 = bitcast i16* %25416 to <16 x i16>*
  %25418 = load <16 x i16>, <16 x i16>* %25417, align 2, !tbaa !396
  %25419 = getelementptr inbounds i16, i16* %25388, i64 -26
  %25420 = bitcast i16* %25419 to <16 x i16>*
  %25421 = load <16 x i16>, <16 x i16>* %25420, align 2, !tbaa !396
  %25422 = getelementptr inbounds i16, i16* %25388, i64 -10
  %25423 = bitcast i16* %25422 to <16 x i16>*
  %25424 = load <16 x i16>, <16 x i16>* %25423, align 2, !tbaa !396
  %25425 = getelementptr inbounds i16, i16* %25388, i64 -27
  %25426 = bitcast i16* %25425 to <16 x i16>*
  %25427 = load <16 x i16>, <16 x i16>* %25426, align 2, !tbaa !396
  %25428 = getelementptr inbounds i16, i16* %25388, i64 -11
  %25429 = bitcast i16* %25428 to <16 x i16>*
  %25430 = load <16 x i16>, <16 x i16>* %25429, align 2, !tbaa !396
  %25431 = add <16 x i16> %25397, %25391
  %25432 = add <16 x i16> %25431, %25403
  %25433 = add <16 x i16> %25432, %25409
  %25434 = add <16 x i16> %25433, %25415
  %25435 = add <16 x i16> %25434, %25421
  %25436 = add <16 x i16> %25435, %25427
  %25437 = add <16 x i16> %25400, %25394
  %25438 = add <16 x i16> %25437, %25406
  %25439 = add <16 x i16> %25438, %25412
  %25440 = add <16 x i16> %25439, %25418
  %25441 = add <16 x i16> %25440, %25424
  %25442 = add <16 x i16> %25441, %25430
  %25443 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25436, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25444 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25442, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25445 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25443, <16 x i16> %25436)
  %25446 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25444, <16 x i16> %25442)
  %25447 = shufflevector <16 x i16> %25445, <16 x i16> %25446, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25448 = lshr <32 x i16> %25447, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25449 = shufflevector <32 x i16> %25448, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25450 = zext i32 %.pre-phi3618 to i64
  %25451 = mul nsw i64 %295, %25450
  %25452 = add nsw i64 %297, %25451
  %25453 = getelementptr inbounds i16, i16* %blur_x917, i64 %25452
  %25454 = getelementptr inbounds i16, i16* %25453, i64 -32
  %25455 = bitcast i16* %25454 to <16 x i16>*
  store <16 x i16> %25449, <16 x i16>* %25455, align 2, !tbaa !399
  %25456 = shufflevector <32 x i16> %25448, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25457 = getelementptr inbounds i16, i16* %25453, i64 -16
  %25458 = bitcast i16* %25457 to <16 x i16>*
  store <16 x i16> %25456, <16 x i16>* %25458, align 2, !tbaa !399
  %25459 = zext i32 %.pre-phi3598 to i64
  %25460 = mul nsw i64 %25459, %314
  %25461 = add nsw i64 %25460, %292
  %25462 = getelementptr inbounds i16, i16* %blur_x917, i64 %25461
  %25463 = getelementptr inbounds i16, i16* %25462, i64 -32
  %25464 = bitcast i16* %25463 to <16 x i16>*
  %25465 = load <16 x i16>, <16 x i16>* %25464, align 2, !tbaa !399
  %25466 = getelementptr inbounds i16, i16* %25462, i64 -16
  %25467 = bitcast i16* %25466 to <16 x i16>*
  %25468 = load <16 x i16>, <16 x i16>* %25467, align 2, !tbaa !399
  %25469 = zext i32 %.pre-phi3628 to i64
  %25470 = mul nsw i64 %25469, %314
  %25471 = add nsw i64 %25470, %292
  %25472 = getelementptr inbounds i16, i16* %blur_x917, i64 %25471
  %25473 = getelementptr inbounds i16, i16* %25472, i64 -32
  %25474 = bitcast i16* %25473 to <16 x i16>*
  %25475 = load <16 x i16>, <16 x i16>* %25474, align 2, !tbaa !399
  %25476 = getelementptr inbounds i16, i16* %25472, i64 -16
  %25477 = bitcast i16* %25476 to <16 x i16>*
  %25478 = load <16 x i16>, <16 x i16>* %25477, align 2, !tbaa !399
  %25479 = zext i32 %.pre-phi3602 to i64
  %25480 = mul nsw i64 %25479, %314
  %25481 = add nsw i64 %25480, %292
  %25482 = getelementptr inbounds i16, i16* %blur_x917, i64 %25481
  %25483 = getelementptr inbounds i16, i16* %25482, i64 -32
  %25484 = bitcast i16* %25483 to <16 x i16>*
  %25485 = load <16 x i16>, <16 x i16>* %25484, align 2, !tbaa !399
  %25486 = getelementptr inbounds i16, i16* %25482, i64 -16
  %25487 = bitcast i16* %25486 to <16 x i16>*
  %25488 = load <16 x i16>, <16 x i16>* %25487, align 2, !tbaa !399
  %25489 = zext i32 %.pre-phi3606 to i64
  %25490 = mul nsw i64 %25489, %314
  %25491 = add nsw i64 %25490, %292
  %25492 = getelementptr inbounds i16, i16* %blur_x917, i64 %25491
  %25493 = getelementptr inbounds i16, i16* %25492, i64 -32
  %25494 = bitcast i16* %25493 to <16 x i16>*
  %25495 = load <16 x i16>, <16 x i16>* %25494, align 2, !tbaa !399
  %25496 = getelementptr inbounds i16, i16* %25492, i64 -16
  %25497 = bitcast i16* %25496 to <16 x i16>*
  %25498 = load <16 x i16>, <16 x i16>* %25497, align 2, !tbaa !399
  %25499 = zext i32 %.pre-phi3610 to i64
  %25500 = mul nsw i64 %25499, %314
  %25501 = add nsw i64 %25500, %292
  %25502 = getelementptr inbounds i16, i16* %blur_x917, i64 %25501
  %25503 = getelementptr inbounds i16, i16* %25502, i64 -32
  %25504 = bitcast i16* %25503 to <16 x i16>*
  %25505 = load <16 x i16>, <16 x i16>* %25504, align 2, !tbaa !399
  %25506 = getelementptr inbounds i16, i16* %25502, i64 -16
  %25507 = bitcast i16* %25506 to <16 x i16>*
  %25508 = load <16 x i16>, <16 x i16>* %25507, align 2, !tbaa !399
  %25509 = mul nsw i64 %25450, %314
  %25510 = add nsw i64 %25509, %292
  %25511 = getelementptr inbounds i16, i16* %blur_x917, i64 %25510
  %25512 = getelementptr inbounds i16, i16* %25511, i64 -32
  %25513 = bitcast i16* %25512 to <16 x i16>*
  %25514 = load <16 x i16>, <16 x i16>* %25513, align 2, !tbaa !399
  %25515 = getelementptr inbounds i16, i16* %25511, i64 -16
  %25516 = bitcast i16* %25515 to <16 x i16>*
  %25517 = load <16 x i16>, <16 x i16>* %25516, align 2, !tbaa !399
  %25518 = zext i32 %.pre-phi3614 to i64
  %25519 = mul nsw i64 %25518, %314
  %25520 = add nsw i64 %25519, %292
  %25521 = getelementptr inbounds i16, i16* %blur_x917, i64 %25520
  %25522 = getelementptr inbounds i16, i16* %25521, i64 -32
  %25523 = bitcast i16* %25522 to <16 x i16>*
  %25524 = load <16 x i16>, <16 x i16>* %25523, align 2, !tbaa !399
  %25525 = getelementptr inbounds i16, i16* %25521, i64 -16
  %25526 = bitcast i16* %25525 to <16 x i16>*
  %25527 = load <16 x i16>, <16 x i16>* %25526, align 2, !tbaa !399
  %25528 = add <16 x i16> %25475, %25465
  %25529 = add <16 x i16> %25528, %25485
  %25530 = add <16 x i16> %25529, %25495
  %25531 = add <16 x i16> %25530, %25505
  %25532 = add <16 x i16> %25531, %25514
  %25533 = add <16 x i16> %25532, %25524
  %25534 = add <16 x i16> %25478, %25468
  %25535 = add <16 x i16> %25534, %25488
  %25536 = add <16 x i16> %25535, %25498
  %25537 = add <16 x i16> %25536, %25508
  %25538 = add <16 x i16> %25537, %25517
  %25539 = add <16 x i16> %25538, %25527
  %25540 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25533, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25541 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25539, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25542 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25540, <16 x i16> %25533)
  %25543 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25541, <16 x i16> %25539)
  %25544 = shufflevector <16 x i16> %25542, <16 x i16> %25543, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25545 = lshr <32 x i16> %25544, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25546 = shufflevector <32 x i16> %25545, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25547 = sext i32 %a367 to i64
  %25548 = add nsw i64 %25547, 7
  %25549 = mul nsw i64 %25548, %315
  %25550 = add nsw i64 %317, %25549
  %25551 = getelementptr inbounds i16, i16* %264, i64 %25550
  %25552 = getelementptr inbounds i16, i16* %25551, i64 -32
  %25553 = bitcast i16* %25552 to <16 x i16>*
  store <16 x i16> %25546, <16 x i16>* %25553, align 2, !tbaa !401
  %25554 = shufflevector <32 x i16> %25545, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25555 = getelementptr inbounds i16, i16* %25551, i64 -16
  %25556 = bitcast i16* %25555 to <16 x i16>*
  store <16 x i16> %25554, <16 x i16>* %25556, align 2, !tbaa !401
  br label %after_bb1400

"for blur_y.s0.x.x.rebased1415":                  ; preds = %"for blur_y.s0.x.x.rebased1415.preheader", %"consume blur_x1424"
  %indvars.iv3426 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1415.preheader" ], [ %indvars.iv.next3427, %"consume blur_x1424" ]
  %25557 = add nsw i64 %indvars.iv3426, %299
  %25558 = icmp slt i64 %25557, 1
  %25559 = trunc i64 %25557 to i32
  %25560 = shl nsw i32 %25559, 5
  %25561 = icmp sgt i32 %202, %25560
  %25562 = or i1 %25558, %25561
  br i1 %25562, label %"produce blur_x1422", label %"for blur_y.s0.x.x.rebased1415.consume blur_x1424_crit_edge"

"for blur_y.s0.x.x.rebased1415.consume blur_x1424_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1415"
  %.pre3641 = shl nsw i64 %25557, 5
  br label %"consume blur_x1424"

"end for blur_y.s0.x.x.rebased1416":              ; preds = %"consume blur_x1424", %after_bb1400
  br i1 %300, label %"for blur_y.s0.x.x.rebased1432.preheader", label %"end for blur_y.s0.x.x.rebased1433", !prof !386

"for blur_y.s0.x.x.rebased1432.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1416"
  %25563 = sext i32 %t17561074 to i64
  %25564 = zext i32 %.pre-phi3598 to i64
  %25565 = mul nsw i64 %25564, %314
  %25566 = sub nsw i64 %25565, %294
  %25567 = zext i32 %.pre-phi3628 to i64
  %25568 = mul nsw i64 %25567, %314
  %25569 = sub nsw i64 %25568, %294
  %25570 = zext i32 %.pre-phi3602 to i64
  %25571 = mul nsw i64 %25570, %314
  %25572 = sub nsw i64 %25571, %294
  %25573 = zext i32 %.pre-phi3606 to i64
  %25574 = mul nsw i64 %25573, %314
  %25575 = sub nsw i64 %25574, %294
  %25576 = zext i32 %.pre-phi3610 to i64
  %25577 = mul nsw i64 %25576, %314
  %25578 = sub nsw i64 %25577, %294
  %25579 = zext i32 %.pre-phi3618 to i64
  %25580 = mul nsw i64 %25579, %314
  %25581 = sub nsw i64 %25580, %294
  %25582 = zext i32 %.pre-phi3614 to i64
  %25583 = mul nsw i64 %25582, %314
  %25584 = sub nsw i64 %25583, %294
  %25585 = sext i32 %a367 to i64
  %25586 = add nsw i64 %25585, 7
  %25587 = mul nsw i64 %25586, %315
  %25588 = add nsw i64 %25587, %318
  br label %"for blur_y.s0.x.x.rebased1432"

"produce blur_x1422":                             ; preds = %"for blur_y.s0.x.x.rebased1415"
  %t8641423 = add nsw i32 %25560, %t18731412
  %25589 = sext i32 %t8641423 to i64
  %25590 = getelementptr inbounds i16, i16* %read_input860, i64 %25589
  %25591 = getelementptr inbounds i16, i16* %25590, i64 1
  %25592 = bitcast i16* %25591 to <16 x i16>*
  %25593 = load <16 x i16>, <16 x i16>* %25592, align 2, !tbaa !396
  %25594 = getelementptr inbounds i16, i16* %25590, i64 17
  %25595 = bitcast i16* %25594 to <16 x i16>*
  %25596 = load <16 x i16>, <16 x i16>* %25595, align 2, !tbaa !396
  %25597 = bitcast i16* %25590 to <16 x i16>*
  %25598 = load <16 x i16>, <16 x i16>* %25597, align 2, !tbaa !396
  %25599 = getelementptr inbounds i16, i16* %25590, i64 16
  %25600 = bitcast i16* %25599 to <16 x i16>*
  %25601 = load <16 x i16>, <16 x i16>* %25600, align 2, !tbaa !396
  %25602 = getelementptr inbounds i16, i16* %25590, i64 2
  %25603 = bitcast i16* %25602 to <16 x i16>*
  %25604 = load <16 x i16>, <16 x i16>* %25603, align 2, !tbaa !396
  %25605 = getelementptr inbounds i16, i16* %25590, i64 18
  %25606 = bitcast i16* %25605 to <16 x i16>*
  %25607 = load <16 x i16>, <16 x i16>* %25606, align 2, !tbaa !396
  %25608 = getelementptr inbounds i16, i16* %25590, i64 3
  %25609 = bitcast i16* %25608 to <16 x i16>*
  %25610 = load <16 x i16>, <16 x i16>* %25609, align 2, !tbaa !396
  %25611 = getelementptr inbounds i16, i16* %25590, i64 19
  %25612 = bitcast i16* %25611 to <16 x i16>*
  %25613 = load <16 x i16>, <16 x i16>* %25612, align 2, !tbaa !396
  %25614 = getelementptr inbounds i16, i16* %25590, i64 4
  %25615 = bitcast i16* %25614 to <16 x i16>*
  %25616 = load <16 x i16>, <16 x i16>* %25615, align 2, !tbaa !396
  %25617 = getelementptr inbounds i16, i16* %25590, i64 20
  %25618 = bitcast i16* %25617 to <16 x i16>*
  %25619 = load <16 x i16>, <16 x i16>* %25618, align 2, !tbaa !396
  %25620 = getelementptr inbounds i16, i16* %25590, i64 6
  %25621 = bitcast i16* %25620 to <16 x i16>*
  %25622 = load <16 x i16>, <16 x i16>* %25621, align 2, !tbaa !396
  %25623 = getelementptr inbounds i16, i16* %25590, i64 22
  %25624 = bitcast i16* %25623 to <16 x i16>*
  %25625 = load <16 x i16>, <16 x i16>* %25624, align 2, !tbaa !396
  %25626 = getelementptr inbounds i16, i16* %25590, i64 5
  %25627 = bitcast i16* %25626 to <16 x i16>*
  %25628 = load <16 x i16>, <16 x i16>* %25627, align 2, !tbaa !396
  %25629 = getelementptr inbounds i16, i16* %25590, i64 21
  %25630 = bitcast i16* %25629 to <16 x i16>*
  %25631 = load <16 x i16>, <16 x i16>* %25630, align 2, !tbaa !396
  %25632 = add <16 x i16> %25598, %25593
  %25633 = add <16 x i16> %25632, %25604
  %25634 = add <16 x i16> %25633, %25610
  %25635 = add <16 x i16> %25634, %25616
  %25636 = add <16 x i16> %25635, %25622
  %25637 = add <16 x i16> %25636, %25628
  %25638 = add <16 x i16> %25601, %25596
  %25639 = add <16 x i16> %25638, %25607
  %25640 = add <16 x i16> %25639, %25613
  %25641 = add <16 x i16> %25640, %25619
  %25642 = add <16 x i16> %25641, %25625
  %25643 = add <16 x i16> %25642, %25631
  %25644 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25637, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25645 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25643, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25646 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25644, <16 x i16> %25637)
  %25647 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25645, <16 x i16> %25643)
  %25648 = shufflevector <16 x i16> %25646, <16 x i16> %25647, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25649 = lshr <32 x i16> %25648, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25650 = shufflevector <32 x i16> %25649, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25651 = shl nsw i64 %25557, 5
  %25652 = add nsw i64 %25651, %25362
  %25653 = getelementptr inbounds i16, i16* %blur_x917, i64 %25652
  %25654 = bitcast i16* %25653 to <16 x i16>*
  store <16 x i16> %25650, <16 x i16>* %25654, align 2, !tbaa !399
  %25655 = shufflevector <32 x i16> %25649, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25656 = getelementptr inbounds i16, i16* %25653, i64 16
  %25657 = bitcast i16* %25656 to <16 x i16>*
  store <16 x i16> %25655, <16 x i16>* %25657, align 2, !tbaa !399
  br label %"consume blur_x1424"

"consume blur_x1424":                             ; preds = %"for blur_y.s0.x.x.rebased1415.consume blur_x1424_crit_edge", %"produce blur_x1422"
  %.pre-phi3642 = phi i64 [ %.pre3641, %"for blur_y.s0.x.x.rebased1415.consume blur_x1424_crit_edge" ], [ %25651, %"produce blur_x1422" ]
  %25658 = add nsw i64 %25365, %.pre-phi3642
  %25659 = getelementptr inbounds i16, i16* %blur_x917, i64 %25658
  %25660 = bitcast i16* %25659 to <16 x i16>*
  %25661 = load <16 x i16>, <16 x i16>* %25660, align 2, !tbaa !399
  %25662 = getelementptr inbounds i16, i16* %25659, i64 16
  %25663 = bitcast i16* %25662 to <16 x i16>*
  %25664 = load <16 x i16>, <16 x i16>* %25663, align 2, !tbaa !399
  %25665 = add nsw i64 %25368, %.pre-phi3642
  %25666 = getelementptr inbounds i16, i16* %blur_x917, i64 %25665
  %25667 = bitcast i16* %25666 to <16 x i16>*
  %25668 = load <16 x i16>, <16 x i16>* %25667, align 2, !tbaa !399
  %25669 = getelementptr inbounds i16, i16* %25666, i64 16
  %25670 = bitcast i16* %25669 to <16 x i16>*
  %25671 = load <16 x i16>, <16 x i16>* %25670, align 2, !tbaa !399
  %25672 = add nsw i64 %25371, %.pre-phi3642
  %25673 = getelementptr inbounds i16, i16* %blur_x917, i64 %25672
  %25674 = bitcast i16* %25673 to <16 x i16>*
  %25675 = load <16 x i16>, <16 x i16>* %25674, align 2, !tbaa !399
  %25676 = getelementptr inbounds i16, i16* %25673, i64 16
  %25677 = bitcast i16* %25676 to <16 x i16>*
  %25678 = load <16 x i16>, <16 x i16>* %25677, align 2, !tbaa !399
  %25679 = add nsw i64 %25374, %.pre-phi3642
  %25680 = getelementptr inbounds i16, i16* %blur_x917, i64 %25679
  %25681 = bitcast i16* %25680 to <16 x i16>*
  %25682 = load <16 x i16>, <16 x i16>* %25681, align 2, !tbaa !399
  %25683 = getelementptr inbounds i16, i16* %25680, i64 16
  %25684 = bitcast i16* %25683 to <16 x i16>*
  %25685 = load <16 x i16>, <16 x i16>* %25684, align 2, !tbaa !399
  %25686 = add nsw i64 %25377, %.pre-phi3642
  %25687 = getelementptr inbounds i16, i16* %blur_x917, i64 %25686
  %25688 = bitcast i16* %25687 to <16 x i16>*
  %25689 = load <16 x i16>, <16 x i16>* %25688, align 2, !tbaa !399
  %25690 = getelementptr inbounds i16, i16* %25687, i64 16
  %25691 = bitcast i16* %25690 to <16 x i16>*
  %25692 = load <16 x i16>, <16 x i16>* %25691, align 2, !tbaa !399
  %25693 = add nsw i64 %25380, %.pre-phi3642
  %25694 = getelementptr inbounds i16, i16* %blur_x917, i64 %25693
  %25695 = bitcast i16* %25694 to <16 x i16>*
  %25696 = load <16 x i16>, <16 x i16>* %25695, align 2, !tbaa !399
  %25697 = getelementptr inbounds i16, i16* %25694, i64 16
  %25698 = bitcast i16* %25697 to <16 x i16>*
  %25699 = load <16 x i16>, <16 x i16>* %25698, align 2, !tbaa !399
  %25700 = add nsw i64 %25383, %.pre-phi3642
  %25701 = getelementptr inbounds i16, i16* %blur_x917, i64 %25700
  %25702 = bitcast i16* %25701 to <16 x i16>*
  %25703 = load <16 x i16>, <16 x i16>* %25702, align 2, !tbaa !399
  %25704 = getelementptr inbounds i16, i16* %25701, i64 16
  %25705 = bitcast i16* %25704 to <16 x i16>*
  %25706 = load <16 x i16>, <16 x i16>* %25705, align 2, !tbaa !399
  %25707 = add <16 x i16> %25668, %25661
  %25708 = add <16 x i16> %25707, %25675
  %25709 = add <16 x i16> %25708, %25682
  %25710 = add <16 x i16> %25709, %25689
  %25711 = add <16 x i16> %25710, %25696
  %25712 = add <16 x i16> %25711, %25703
  %25713 = add <16 x i16> %25671, %25664
  %25714 = add <16 x i16> %25713, %25678
  %25715 = add <16 x i16> %25714, %25685
  %25716 = add <16 x i16> %25715, %25692
  %25717 = add <16 x i16> %25716, %25699
  %25718 = add <16 x i16> %25717, %25706
  %25719 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25712, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25720 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25718, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25721 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25719, <16 x i16> %25712)
  %25722 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25720, <16 x i16> %25718)
  %25723 = shufflevector <16 x i16> %25721, <16 x i16> %25722, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25724 = lshr <32 x i16> %25723, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25725 = shufflevector <32 x i16> %25724, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25726 = add nsw i64 %25387, %.pre-phi3642
  %25727 = getelementptr inbounds i16, i16* %264, i64 %25726
  %25728 = bitcast i16* %25727 to <16 x i16>*
  store <16 x i16> %25725, <16 x i16>* %25728, align 2, !tbaa !401
  %25729 = shufflevector <32 x i16> %25724, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25730 = getelementptr inbounds i16, i16* %25727, i64 16
  %25731 = bitcast i16* %25730 to <16 x i16>*
  store <16 x i16> %25729, <16 x i16>* %25731, align 2, !tbaa !401
  %indvars.iv.next3427 = add nuw nsw i64 %indvars.iv3426, 1
  %.not2696 = icmp eq i64 %indvars.iv.next3427, %386
  br i1 %.not2696, label %"end for blur_y.s0.x.x.rebased1416", label %"for blur_y.s0.x.x.rebased1415"

"for blur_y.s0.x.x.rebased1432":                  ; preds = %"for blur_y.s0.x.x.rebased1432.preheader", %"consume blur_x1442"
  %blur_y.s0.x.x.rebased1434 = phi i32 [ %25882, %"consume blur_x1442" ], [ 0, %"for blur_y.s0.x.x.rebased1432.preheader" ]
  %25732 = add nsw i32 %blur_y.s0.x.x.rebased1434, %t1670852
  %a509 = shl nsw i32 %25732, 5
  %25733 = icmp sgt i32 %a355, %a509
  %b515 = select i1 %25733, i32 %a509, i32 %a355
  %25734 = icmp slt i32 %25732, 1
  %25735 = icmp sgt i32 %202, %a509
  %25736 = or i1 %25734, %25735
  br i1 %25736, label %"produce blur_x1439", label %"consume blur_x1442"

"end for blur_y.s0.x.x.rebased1433":              ; preds = %"consume blur_x1442", %"end for blur_y.s0.x.x.rebased1416"
  br i1 %232, label %"produce blur_x1446", label %after_bb1443

"produce blur_x1439":                             ; preds = %"for blur_y.s0.x.x.rebased1432"
  %25737 = icmp slt i32 %b515, %202
  %blur_x.s0.x.v1.base.s1440 = select i1 %25737, i32 %b515, i32 %202
  %t8691441 = add nsw i32 %blur_x.s0.x.v1.base.s1440, %t18731412
  %25738 = sext i32 %t8691441 to i64
  %25739 = getelementptr inbounds i16, i16* %read_input860, i64 %25738
  %25740 = getelementptr inbounds i16, i16* %25739, i64 1
  %25741 = bitcast i16* %25740 to <16 x i16>*
  %25742 = load <16 x i16>, <16 x i16>* %25741, align 2, !tbaa !396
  %25743 = getelementptr inbounds i16, i16* %25739, i64 17
  %25744 = bitcast i16* %25743 to <16 x i16>*
  %25745 = load <16 x i16>, <16 x i16>* %25744, align 2, !tbaa !396
  %25746 = bitcast i16* %25739 to <16 x i16>*
  %25747 = load <16 x i16>, <16 x i16>* %25746, align 2, !tbaa !396
  %25748 = getelementptr inbounds i16, i16* %25739, i64 16
  %25749 = bitcast i16* %25748 to <16 x i16>*
  %25750 = load <16 x i16>, <16 x i16>* %25749, align 2, !tbaa !396
  %25751 = getelementptr inbounds i16, i16* %25739, i64 2
  %25752 = bitcast i16* %25751 to <16 x i16>*
  %25753 = load <16 x i16>, <16 x i16>* %25752, align 2, !tbaa !396
  %25754 = getelementptr inbounds i16, i16* %25739, i64 18
  %25755 = bitcast i16* %25754 to <16 x i16>*
  %25756 = load <16 x i16>, <16 x i16>* %25755, align 2, !tbaa !396
  %25757 = getelementptr inbounds i16, i16* %25739, i64 3
  %25758 = bitcast i16* %25757 to <16 x i16>*
  %25759 = load <16 x i16>, <16 x i16>* %25758, align 2, !tbaa !396
  %25760 = getelementptr inbounds i16, i16* %25739, i64 19
  %25761 = bitcast i16* %25760 to <16 x i16>*
  %25762 = load <16 x i16>, <16 x i16>* %25761, align 2, !tbaa !396
  %25763 = getelementptr inbounds i16, i16* %25739, i64 4
  %25764 = bitcast i16* %25763 to <16 x i16>*
  %25765 = load <16 x i16>, <16 x i16>* %25764, align 2, !tbaa !396
  %25766 = getelementptr inbounds i16, i16* %25739, i64 20
  %25767 = bitcast i16* %25766 to <16 x i16>*
  %25768 = load <16 x i16>, <16 x i16>* %25767, align 2, !tbaa !396
  %25769 = getelementptr inbounds i16, i16* %25739, i64 6
  %25770 = bitcast i16* %25769 to <16 x i16>*
  %25771 = load <16 x i16>, <16 x i16>* %25770, align 2, !tbaa !396
  %25772 = getelementptr inbounds i16, i16* %25739, i64 22
  %25773 = bitcast i16* %25772 to <16 x i16>*
  %25774 = load <16 x i16>, <16 x i16>* %25773, align 2, !tbaa !396
  %25775 = getelementptr inbounds i16, i16* %25739, i64 5
  %25776 = bitcast i16* %25775 to <16 x i16>*
  %25777 = load <16 x i16>, <16 x i16>* %25776, align 2, !tbaa !396
  %25778 = getelementptr inbounds i16, i16* %25739, i64 21
  %25779 = bitcast i16* %25778 to <16 x i16>*
  %25780 = load <16 x i16>, <16 x i16>* %25779, align 2, !tbaa !396
  %25781 = add <16 x i16> %25747, %25742
  %25782 = add <16 x i16> %25781, %25753
  %25783 = add <16 x i16> %25782, %25759
  %25784 = add <16 x i16> %25783, %25765
  %25785 = add <16 x i16> %25784, %25771
  %25786 = add <16 x i16> %25785, %25777
  %25787 = add <16 x i16> %25750, %25745
  %25788 = add <16 x i16> %25787, %25756
  %25789 = add <16 x i16> %25788, %25762
  %25790 = add <16 x i16> %25789, %25768
  %25791 = add <16 x i16> %25790, %25774
  %25792 = add <16 x i16> %25791, %25780
  %25793 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25786, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25794 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25792, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25795 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25793, <16 x i16> %25786)
  %25796 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25794, <16 x i16> %25792)
  %25797 = shufflevector <16 x i16> %25795, <16 x i16> %25796, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25798 = lshr <32 x i16> %25797, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25799 = shufflevector <32 x i16> %25798, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25800 = sext i32 %blur_x.s0.x.v1.base.s1440 to i64
  %25801 = add nsw i64 %25800, %25563
  %25802 = getelementptr inbounds i16, i16* %blur_x917, i64 %25801
  %25803 = bitcast i16* %25802 to <16 x i16>*
  store <16 x i16> %25799, <16 x i16>* %25803, align 2, !tbaa !399
  %25804 = shufflevector <32 x i16> %25798, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25805 = getelementptr inbounds i16, i16* %25802, i64 16
  %25806 = bitcast i16* %25805 to <16 x i16>*
  store <16 x i16> %25804, <16 x i16>* %25806, align 2, !tbaa !399
  br label %"consume blur_x1442"

"consume blur_x1442":                             ; preds = %"for blur_y.s0.x.x.rebased1432", %"produce blur_x1439"
  %25807 = sext i32 %b515 to i64
  %25808 = add nsw i64 %25566, %25807
  %25809 = getelementptr inbounds i16, i16* %blur_x917, i64 %25808
  %25810 = bitcast i16* %25809 to <16 x i16>*
  %25811 = load <16 x i16>, <16 x i16>* %25810, align 2, !tbaa !399
  %25812 = getelementptr inbounds i16, i16* %25809, i64 16
  %25813 = bitcast i16* %25812 to <16 x i16>*
  %25814 = load <16 x i16>, <16 x i16>* %25813, align 2, !tbaa !399
  %25815 = add nsw i64 %25569, %25807
  %25816 = getelementptr inbounds i16, i16* %blur_x917, i64 %25815
  %25817 = bitcast i16* %25816 to <16 x i16>*
  %25818 = load <16 x i16>, <16 x i16>* %25817, align 2, !tbaa !399
  %25819 = getelementptr inbounds i16, i16* %25816, i64 16
  %25820 = bitcast i16* %25819 to <16 x i16>*
  %25821 = load <16 x i16>, <16 x i16>* %25820, align 2, !tbaa !399
  %25822 = add nsw i64 %25572, %25807
  %25823 = getelementptr inbounds i16, i16* %blur_x917, i64 %25822
  %25824 = bitcast i16* %25823 to <16 x i16>*
  %25825 = load <16 x i16>, <16 x i16>* %25824, align 2, !tbaa !399
  %25826 = getelementptr inbounds i16, i16* %25823, i64 16
  %25827 = bitcast i16* %25826 to <16 x i16>*
  %25828 = load <16 x i16>, <16 x i16>* %25827, align 2, !tbaa !399
  %25829 = add nsw i64 %25575, %25807
  %25830 = getelementptr inbounds i16, i16* %blur_x917, i64 %25829
  %25831 = bitcast i16* %25830 to <16 x i16>*
  %25832 = load <16 x i16>, <16 x i16>* %25831, align 2, !tbaa !399
  %25833 = getelementptr inbounds i16, i16* %25830, i64 16
  %25834 = bitcast i16* %25833 to <16 x i16>*
  %25835 = load <16 x i16>, <16 x i16>* %25834, align 2, !tbaa !399
  %25836 = add nsw i64 %25578, %25807
  %25837 = getelementptr inbounds i16, i16* %blur_x917, i64 %25836
  %25838 = bitcast i16* %25837 to <16 x i16>*
  %25839 = load <16 x i16>, <16 x i16>* %25838, align 2, !tbaa !399
  %25840 = getelementptr inbounds i16, i16* %25837, i64 16
  %25841 = bitcast i16* %25840 to <16 x i16>*
  %25842 = load <16 x i16>, <16 x i16>* %25841, align 2, !tbaa !399
  %25843 = add nsw i64 %25581, %25807
  %25844 = getelementptr inbounds i16, i16* %blur_x917, i64 %25843
  %25845 = bitcast i16* %25844 to <16 x i16>*
  %25846 = load <16 x i16>, <16 x i16>* %25845, align 2, !tbaa !399
  %25847 = getelementptr inbounds i16, i16* %25844, i64 16
  %25848 = bitcast i16* %25847 to <16 x i16>*
  %25849 = load <16 x i16>, <16 x i16>* %25848, align 2, !tbaa !399
  %25850 = add nsw i64 %25584, %25807
  %25851 = getelementptr inbounds i16, i16* %blur_x917, i64 %25850
  %25852 = bitcast i16* %25851 to <16 x i16>*
  %25853 = load <16 x i16>, <16 x i16>* %25852, align 2, !tbaa !399
  %25854 = getelementptr inbounds i16, i16* %25851, i64 16
  %25855 = bitcast i16* %25854 to <16 x i16>*
  %25856 = load <16 x i16>, <16 x i16>* %25855, align 2, !tbaa !399
  %25857 = add <16 x i16> %25818, %25811
  %25858 = add <16 x i16> %25857, %25825
  %25859 = add <16 x i16> %25858, %25832
  %25860 = add <16 x i16> %25859, %25839
  %25861 = add <16 x i16> %25860, %25846
  %25862 = add <16 x i16> %25861, %25853
  %25863 = add <16 x i16> %25821, %25814
  %25864 = add <16 x i16> %25863, %25828
  %25865 = add <16 x i16> %25864, %25835
  %25866 = add <16 x i16> %25865, %25842
  %25867 = add <16 x i16> %25866, %25849
  %25868 = add <16 x i16> %25867, %25856
  %25869 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25862, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25870 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25868, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25871 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25869, <16 x i16> %25862)
  %25872 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25870, <16 x i16> %25868)
  %25873 = shufflevector <16 x i16> %25871, <16 x i16> %25872, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25874 = lshr <32 x i16> %25873, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25875 = shufflevector <32 x i16> %25874, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25876 = add nsw i64 %25588, %25807
  %25877 = getelementptr inbounds i16, i16* %264, i64 %25876
  %25878 = bitcast i16* %25877 to <16 x i16>*
  store <16 x i16> %25875, <16 x i16>* %25878, align 2, !tbaa !401
  %25879 = shufflevector <32 x i16> %25874, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25880 = getelementptr inbounds i16, i16* %25877, i64 16
  %25881 = bitcast i16* %25880 to <16 x i16>*
  store <16 x i16> %25879, <16 x i16>* %25881, align 2, !tbaa !401
  %25882 = add nuw nsw i32 %blur_y.s0.x.x.rebased1434, 1
  %.not2695 = icmp eq i32 %25882, %t1727937
  br i1 %.not2695, label %"end for blur_y.s0.x.x.rebased1433", label %"for blur_y.s0.x.x.rebased1432"

after_bb1443:                                     ; preds = %"end for blur_y.s0.x.x.rebased1433", %"produce blur_x1446"
  br i1 %298, label %"for blur_y.s0.x.x.rebased1458.preheader", label %"end for blur_y.s0.x.x.rebased1459", !prof !386

"for blur_y.s0.x.x.rebased1458.preheader":        ; preds = %after_bb1443
  %25883 = sext i32 %t17621110 to i64
  %25884 = zext i32 %.pre-phi3602 to i64
  %25885 = mul nsw i64 %25884, %314
  %25886 = sub nsw i64 %25885, %294
  %25887 = zext i32 %.pre-phi3598 to i64
  %25888 = mul nsw i64 %25887, %314
  %25889 = sub nsw i64 %25888, %294
  %25890 = zext i32 %.pre-phi3606 to i64
  %25891 = mul nsw i64 %25890, %314
  %25892 = sub nsw i64 %25891, %294
  %25893 = zext i32 %.pre-phi3610 to i64
  %25894 = mul nsw i64 %25893, %314
  %25895 = sub nsw i64 %25894, %294
  %25896 = zext i32 %.pre-phi3614 to i64
  %25897 = mul nsw i64 %25896, %314
  %25898 = sub nsw i64 %25897, %294
  %25899 = zext i32 %.pre-phi3622 to i64
  %25900 = mul nsw i64 %25899, %314
  %25901 = sub nsw i64 %25900, %294
  %25902 = zext i32 %.pre-phi3618 to i64
  %25903 = mul nsw i64 %25902, %314
  %25904 = sub nsw i64 %25903, %294
  %25905 = sext i32 %a367 to i64
  %25906 = add nsw i64 %25905, 8
  %25907 = mul nsw i64 %25906, %315
  %25908 = add nsw i64 %25907, %318
  br label %"for blur_y.s0.x.x.rebased1458"

"produce blur_x1446":                             ; preds = %"end for blur_y.s0.x.x.rebased1433"
  %25909 = getelementptr inbounds i16, i16* %read_input860, i64 %333
  %25910 = getelementptr inbounds i16, i16* %25909, i64 -31
  %25911 = bitcast i16* %25910 to <16 x i16>*
  %25912 = load <16 x i16>, <16 x i16>* %25911, align 2, !tbaa !396
  %25913 = getelementptr inbounds i16, i16* %25909, i64 -15
  %25914 = bitcast i16* %25913 to <16 x i16>*
  %25915 = load <16 x i16>, <16 x i16>* %25914, align 2, !tbaa !396
  %25916 = getelementptr inbounds i16, i16* %25909, i64 -32
  %25917 = bitcast i16* %25916 to <16 x i16>*
  %25918 = load <16 x i16>, <16 x i16>* %25917, align 2, !tbaa !396
  %25919 = getelementptr inbounds i16, i16* %25909, i64 -16
  %25920 = bitcast i16* %25919 to <16 x i16>*
  %25921 = load <16 x i16>, <16 x i16>* %25920, align 2, !tbaa !396
  %25922 = getelementptr inbounds i16, i16* %25909, i64 -30
  %25923 = bitcast i16* %25922 to <16 x i16>*
  %25924 = load <16 x i16>, <16 x i16>* %25923, align 2, !tbaa !396
  %25925 = getelementptr inbounds i16, i16* %25909, i64 -14
  %25926 = bitcast i16* %25925 to <16 x i16>*
  %25927 = load <16 x i16>, <16 x i16>* %25926, align 2, !tbaa !396
  %25928 = getelementptr inbounds i16, i16* %25909, i64 -29
  %25929 = bitcast i16* %25928 to <16 x i16>*
  %25930 = load <16 x i16>, <16 x i16>* %25929, align 2, !tbaa !396
  %25931 = getelementptr inbounds i16, i16* %25909, i64 -13
  %25932 = bitcast i16* %25931 to <16 x i16>*
  %25933 = load <16 x i16>, <16 x i16>* %25932, align 2, !tbaa !396
  %25934 = getelementptr inbounds i16, i16* %25909, i64 -28
  %25935 = bitcast i16* %25934 to <16 x i16>*
  %25936 = load <16 x i16>, <16 x i16>* %25935, align 2, !tbaa !396
  %25937 = getelementptr inbounds i16, i16* %25909, i64 -12
  %25938 = bitcast i16* %25937 to <16 x i16>*
  %25939 = load <16 x i16>, <16 x i16>* %25938, align 2, !tbaa !396
  %25940 = getelementptr inbounds i16, i16* %25909, i64 -26
  %25941 = bitcast i16* %25940 to <16 x i16>*
  %25942 = load <16 x i16>, <16 x i16>* %25941, align 2, !tbaa !396
  %25943 = getelementptr inbounds i16, i16* %25909, i64 -10
  %25944 = bitcast i16* %25943 to <16 x i16>*
  %25945 = load <16 x i16>, <16 x i16>* %25944, align 2, !tbaa !396
  %25946 = getelementptr inbounds i16, i16* %25909, i64 -27
  %25947 = bitcast i16* %25946 to <16 x i16>*
  %25948 = load <16 x i16>, <16 x i16>* %25947, align 2, !tbaa !396
  %25949 = getelementptr inbounds i16, i16* %25909, i64 -11
  %25950 = bitcast i16* %25949 to <16 x i16>*
  %25951 = load <16 x i16>, <16 x i16>* %25950, align 2, !tbaa !396
  %25952 = add <16 x i16> %25918, %25912
  %25953 = add <16 x i16> %25952, %25924
  %25954 = add <16 x i16> %25953, %25930
  %25955 = add <16 x i16> %25954, %25936
  %25956 = add <16 x i16> %25955, %25942
  %25957 = add <16 x i16> %25956, %25948
  %25958 = add <16 x i16> %25921, %25915
  %25959 = add <16 x i16> %25958, %25927
  %25960 = add <16 x i16> %25959, %25933
  %25961 = add <16 x i16> %25960, %25939
  %25962 = add <16 x i16> %25961, %25945
  %25963 = add <16 x i16> %25962, %25951
  %25964 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25957, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25965 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25963, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %25966 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25964, <16 x i16> %25957)
  %25967 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25965, <16 x i16> %25963)
  %25968 = shufflevector <16 x i16> %25966, <16 x i16> %25967, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25969 = lshr <32 x i16> %25968, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25970 = shufflevector <32 x i16> %25969, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25971 = zext i32 %.pre-phi3622 to i64
  %25972 = mul nsw i64 %295, %25971
  %25973 = add nsw i64 %297, %25972
  %25974 = getelementptr inbounds i16, i16* %blur_x917, i64 %25973
  %25975 = getelementptr inbounds i16, i16* %25974, i64 -32
  %25976 = bitcast i16* %25975 to <16 x i16>*
  store <16 x i16> %25970, <16 x i16>* %25976, align 2, !tbaa !399
  %25977 = shufflevector <32 x i16> %25969, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25978 = getelementptr inbounds i16, i16* %25974, i64 -16
  %25979 = bitcast i16* %25978 to <16 x i16>*
  store <16 x i16> %25977, <16 x i16>* %25979, align 2, !tbaa !399
  %25980 = zext i32 %.pre-phi3602 to i64
  %25981 = mul nsw i64 %25980, %314
  %25982 = add nsw i64 %25981, %292
  %25983 = getelementptr inbounds i16, i16* %blur_x917, i64 %25982
  %25984 = getelementptr inbounds i16, i16* %25983, i64 -32
  %25985 = bitcast i16* %25984 to <16 x i16>*
  %25986 = load <16 x i16>, <16 x i16>* %25985, align 2, !tbaa !399
  %25987 = getelementptr inbounds i16, i16* %25983, i64 -16
  %25988 = bitcast i16* %25987 to <16 x i16>*
  %25989 = load <16 x i16>, <16 x i16>* %25988, align 2, !tbaa !399
  %25990 = zext i32 %.pre-phi3598 to i64
  %25991 = mul nsw i64 %25990, %314
  %25992 = add nsw i64 %25991, %292
  %25993 = getelementptr inbounds i16, i16* %blur_x917, i64 %25992
  %25994 = getelementptr inbounds i16, i16* %25993, i64 -32
  %25995 = bitcast i16* %25994 to <16 x i16>*
  %25996 = load <16 x i16>, <16 x i16>* %25995, align 2, !tbaa !399
  %25997 = getelementptr inbounds i16, i16* %25993, i64 -16
  %25998 = bitcast i16* %25997 to <16 x i16>*
  %25999 = load <16 x i16>, <16 x i16>* %25998, align 2, !tbaa !399
  %26000 = zext i32 %.pre-phi3606 to i64
  %26001 = mul nsw i64 %26000, %314
  %26002 = add nsw i64 %26001, %292
  %26003 = getelementptr inbounds i16, i16* %blur_x917, i64 %26002
  %26004 = getelementptr inbounds i16, i16* %26003, i64 -32
  %26005 = bitcast i16* %26004 to <16 x i16>*
  %26006 = load <16 x i16>, <16 x i16>* %26005, align 2, !tbaa !399
  %26007 = getelementptr inbounds i16, i16* %26003, i64 -16
  %26008 = bitcast i16* %26007 to <16 x i16>*
  %26009 = load <16 x i16>, <16 x i16>* %26008, align 2, !tbaa !399
  %26010 = zext i32 %.pre-phi3610 to i64
  %26011 = mul nsw i64 %26010, %314
  %26012 = add nsw i64 %26011, %292
  %26013 = getelementptr inbounds i16, i16* %blur_x917, i64 %26012
  %26014 = getelementptr inbounds i16, i16* %26013, i64 -32
  %26015 = bitcast i16* %26014 to <16 x i16>*
  %26016 = load <16 x i16>, <16 x i16>* %26015, align 2, !tbaa !399
  %26017 = getelementptr inbounds i16, i16* %26013, i64 -16
  %26018 = bitcast i16* %26017 to <16 x i16>*
  %26019 = load <16 x i16>, <16 x i16>* %26018, align 2, !tbaa !399
  %26020 = zext i32 %.pre-phi3614 to i64
  %26021 = mul nsw i64 %26020, %314
  %26022 = add nsw i64 %26021, %292
  %26023 = getelementptr inbounds i16, i16* %blur_x917, i64 %26022
  %26024 = getelementptr inbounds i16, i16* %26023, i64 -32
  %26025 = bitcast i16* %26024 to <16 x i16>*
  %26026 = load <16 x i16>, <16 x i16>* %26025, align 2, !tbaa !399
  %26027 = getelementptr inbounds i16, i16* %26023, i64 -16
  %26028 = bitcast i16* %26027 to <16 x i16>*
  %26029 = load <16 x i16>, <16 x i16>* %26028, align 2, !tbaa !399
  %26030 = mul nsw i64 %25971, %314
  %26031 = add nsw i64 %26030, %292
  %26032 = getelementptr inbounds i16, i16* %blur_x917, i64 %26031
  %26033 = getelementptr inbounds i16, i16* %26032, i64 -32
  %26034 = bitcast i16* %26033 to <16 x i16>*
  %26035 = load <16 x i16>, <16 x i16>* %26034, align 2, !tbaa !399
  %26036 = getelementptr inbounds i16, i16* %26032, i64 -16
  %26037 = bitcast i16* %26036 to <16 x i16>*
  %26038 = load <16 x i16>, <16 x i16>* %26037, align 2, !tbaa !399
  %26039 = zext i32 %.pre-phi3618 to i64
  %26040 = mul nsw i64 %26039, %314
  %26041 = add nsw i64 %26040, %292
  %26042 = getelementptr inbounds i16, i16* %blur_x917, i64 %26041
  %26043 = getelementptr inbounds i16, i16* %26042, i64 -32
  %26044 = bitcast i16* %26043 to <16 x i16>*
  %26045 = load <16 x i16>, <16 x i16>* %26044, align 2, !tbaa !399
  %26046 = getelementptr inbounds i16, i16* %26042, i64 -16
  %26047 = bitcast i16* %26046 to <16 x i16>*
  %26048 = load <16 x i16>, <16 x i16>* %26047, align 2, !tbaa !399
  %26049 = add <16 x i16> %25996, %25986
  %26050 = add <16 x i16> %26049, %26006
  %26051 = add <16 x i16> %26050, %26016
  %26052 = add <16 x i16> %26051, %26026
  %26053 = add <16 x i16> %26052, %26035
  %26054 = add <16 x i16> %26053, %26045
  %26055 = add <16 x i16> %25999, %25989
  %26056 = add <16 x i16> %26055, %26009
  %26057 = add <16 x i16> %26056, %26019
  %26058 = add <16 x i16> %26057, %26029
  %26059 = add <16 x i16> %26058, %26038
  %26060 = add <16 x i16> %26059, %26048
  %26061 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26054, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26062 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26060, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26063 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26061, <16 x i16> %26054)
  %26064 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26062, <16 x i16> %26060)
  %26065 = shufflevector <16 x i16> %26063, <16 x i16> %26064, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26066 = lshr <32 x i16> %26065, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26067 = shufflevector <32 x i16> %26066, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26068 = sext i32 %a367 to i64
  %26069 = add nsw i64 %26068, 8
  %26070 = mul nsw i64 %26069, %315
  %26071 = add nsw i64 %317, %26070
  %26072 = getelementptr inbounds i16, i16* %264, i64 %26071
  %26073 = getelementptr inbounds i16, i16* %26072, i64 -32
  %26074 = bitcast i16* %26073 to <16 x i16>*
  store <16 x i16> %26067, <16 x i16>* %26074, align 2, !tbaa !401
  %26075 = shufflevector <32 x i16> %26066, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26076 = getelementptr inbounds i16, i16* %26072, i64 -16
  %26077 = bitcast i16* %26076 to <16 x i16>*
  store <16 x i16> %26075, <16 x i16>* %26077, align 2, !tbaa !401
  br label %after_bb1443

"for blur_y.s0.x.x.rebased1458":                  ; preds = %"for blur_y.s0.x.x.rebased1458.preheader", %"consume blur_x1467"
  %indvars.iv3429 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1458.preheader" ], [ %indvars.iv.next3430, %"consume blur_x1467" ]
  %26078 = add nsw i64 %indvars.iv3429, %299
  %26079 = icmp slt i64 %26078, 1
  %26080 = trunc i64 %26078 to i32
  %26081 = shl nsw i32 %26080, 5
  %26082 = icmp sgt i32 %202, %26081
  %26083 = or i1 %26079, %26082
  br i1 %26083, label %"produce blur_x1465", label %"for blur_y.s0.x.x.rebased1458.consume blur_x1467_crit_edge"

"for blur_y.s0.x.x.rebased1458.consume blur_x1467_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1458"
  %.pre3643 = shl nsw i64 %26078, 5
  br label %"consume blur_x1467"

"end for blur_y.s0.x.x.rebased1459":              ; preds = %"consume blur_x1467", %after_bb1443
  br i1 %300, label %"for blur_y.s0.x.x.rebased1475.preheader", label %"end for blur_y.s0.x.x.rebased1476", !prof !386

"for blur_y.s0.x.x.rebased1475.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1459"
  %26084 = sext i32 %t17621110 to i64
  %26085 = zext i32 %.pre-phi3602 to i64
  %26086 = mul nsw i64 %26085, %314
  %26087 = sub nsw i64 %26086, %294
  %26088 = zext i32 %.pre-phi3598 to i64
  %26089 = mul nsw i64 %26088, %314
  %26090 = sub nsw i64 %26089, %294
  %26091 = zext i32 %.pre-phi3606 to i64
  %26092 = mul nsw i64 %26091, %314
  %26093 = sub nsw i64 %26092, %294
  %26094 = zext i32 %.pre-phi3610 to i64
  %26095 = mul nsw i64 %26094, %314
  %26096 = sub nsw i64 %26095, %294
  %26097 = zext i32 %.pre-phi3614 to i64
  %26098 = mul nsw i64 %26097, %314
  %26099 = sub nsw i64 %26098, %294
  %26100 = zext i32 %.pre-phi3622 to i64
  %26101 = mul nsw i64 %26100, %314
  %26102 = sub nsw i64 %26101, %294
  %26103 = zext i32 %.pre-phi3618 to i64
  %26104 = mul nsw i64 %26103, %314
  %26105 = sub nsw i64 %26104, %294
  %26106 = sext i32 %a367 to i64
  %26107 = add nsw i64 %26106, 8
  %26108 = mul nsw i64 %26107, %315
  %26109 = add nsw i64 %26108, %318
  br label %"for blur_y.s0.x.x.rebased1475"

"produce blur_x1465":                             ; preds = %"for blur_y.s0.x.x.rebased1458"
  %t8801466 = add nsw i32 %26081, %t18891455
  %26110 = sext i32 %t8801466 to i64
  %26111 = getelementptr inbounds i16, i16* %read_input860, i64 %26110
  %26112 = getelementptr inbounds i16, i16* %26111, i64 1
  %26113 = bitcast i16* %26112 to <16 x i16>*
  %26114 = load <16 x i16>, <16 x i16>* %26113, align 2, !tbaa !396
  %26115 = getelementptr inbounds i16, i16* %26111, i64 17
  %26116 = bitcast i16* %26115 to <16 x i16>*
  %26117 = load <16 x i16>, <16 x i16>* %26116, align 2, !tbaa !396
  %26118 = bitcast i16* %26111 to <16 x i16>*
  %26119 = load <16 x i16>, <16 x i16>* %26118, align 2, !tbaa !396
  %26120 = getelementptr inbounds i16, i16* %26111, i64 16
  %26121 = bitcast i16* %26120 to <16 x i16>*
  %26122 = load <16 x i16>, <16 x i16>* %26121, align 2, !tbaa !396
  %26123 = getelementptr inbounds i16, i16* %26111, i64 2
  %26124 = bitcast i16* %26123 to <16 x i16>*
  %26125 = load <16 x i16>, <16 x i16>* %26124, align 2, !tbaa !396
  %26126 = getelementptr inbounds i16, i16* %26111, i64 18
  %26127 = bitcast i16* %26126 to <16 x i16>*
  %26128 = load <16 x i16>, <16 x i16>* %26127, align 2, !tbaa !396
  %26129 = getelementptr inbounds i16, i16* %26111, i64 3
  %26130 = bitcast i16* %26129 to <16 x i16>*
  %26131 = load <16 x i16>, <16 x i16>* %26130, align 2, !tbaa !396
  %26132 = getelementptr inbounds i16, i16* %26111, i64 19
  %26133 = bitcast i16* %26132 to <16 x i16>*
  %26134 = load <16 x i16>, <16 x i16>* %26133, align 2, !tbaa !396
  %26135 = getelementptr inbounds i16, i16* %26111, i64 4
  %26136 = bitcast i16* %26135 to <16 x i16>*
  %26137 = load <16 x i16>, <16 x i16>* %26136, align 2, !tbaa !396
  %26138 = getelementptr inbounds i16, i16* %26111, i64 20
  %26139 = bitcast i16* %26138 to <16 x i16>*
  %26140 = load <16 x i16>, <16 x i16>* %26139, align 2, !tbaa !396
  %26141 = getelementptr inbounds i16, i16* %26111, i64 6
  %26142 = bitcast i16* %26141 to <16 x i16>*
  %26143 = load <16 x i16>, <16 x i16>* %26142, align 2, !tbaa !396
  %26144 = getelementptr inbounds i16, i16* %26111, i64 22
  %26145 = bitcast i16* %26144 to <16 x i16>*
  %26146 = load <16 x i16>, <16 x i16>* %26145, align 2, !tbaa !396
  %26147 = getelementptr inbounds i16, i16* %26111, i64 5
  %26148 = bitcast i16* %26147 to <16 x i16>*
  %26149 = load <16 x i16>, <16 x i16>* %26148, align 2, !tbaa !396
  %26150 = getelementptr inbounds i16, i16* %26111, i64 21
  %26151 = bitcast i16* %26150 to <16 x i16>*
  %26152 = load <16 x i16>, <16 x i16>* %26151, align 2, !tbaa !396
  %26153 = add <16 x i16> %26119, %26114
  %26154 = add <16 x i16> %26153, %26125
  %26155 = add <16 x i16> %26154, %26131
  %26156 = add <16 x i16> %26155, %26137
  %26157 = add <16 x i16> %26156, %26143
  %26158 = add <16 x i16> %26157, %26149
  %26159 = add <16 x i16> %26122, %26117
  %26160 = add <16 x i16> %26159, %26128
  %26161 = add <16 x i16> %26160, %26134
  %26162 = add <16 x i16> %26161, %26140
  %26163 = add <16 x i16> %26162, %26146
  %26164 = add <16 x i16> %26163, %26152
  %26165 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26158, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26166 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26164, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26167 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26165, <16 x i16> %26158)
  %26168 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26166, <16 x i16> %26164)
  %26169 = shufflevector <16 x i16> %26167, <16 x i16> %26168, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26170 = lshr <32 x i16> %26169, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26171 = shufflevector <32 x i16> %26170, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26172 = shl nsw i64 %26078, 5
  %26173 = add nsw i64 %26172, %25883
  %26174 = getelementptr inbounds i16, i16* %blur_x917, i64 %26173
  %26175 = bitcast i16* %26174 to <16 x i16>*
  store <16 x i16> %26171, <16 x i16>* %26175, align 2, !tbaa !399
  %26176 = shufflevector <32 x i16> %26170, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26177 = getelementptr inbounds i16, i16* %26174, i64 16
  %26178 = bitcast i16* %26177 to <16 x i16>*
  store <16 x i16> %26176, <16 x i16>* %26178, align 2, !tbaa !399
  br label %"consume blur_x1467"

"consume blur_x1467":                             ; preds = %"for blur_y.s0.x.x.rebased1458.consume blur_x1467_crit_edge", %"produce blur_x1465"
  %.pre-phi3644 = phi i64 [ %.pre3643, %"for blur_y.s0.x.x.rebased1458.consume blur_x1467_crit_edge" ], [ %26172, %"produce blur_x1465" ]
  %26179 = add nsw i64 %25886, %.pre-phi3644
  %26180 = getelementptr inbounds i16, i16* %blur_x917, i64 %26179
  %26181 = bitcast i16* %26180 to <16 x i16>*
  %26182 = load <16 x i16>, <16 x i16>* %26181, align 2, !tbaa !399
  %26183 = getelementptr inbounds i16, i16* %26180, i64 16
  %26184 = bitcast i16* %26183 to <16 x i16>*
  %26185 = load <16 x i16>, <16 x i16>* %26184, align 2, !tbaa !399
  %26186 = add nsw i64 %25889, %.pre-phi3644
  %26187 = getelementptr inbounds i16, i16* %blur_x917, i64 %26186
  %26188 = bitcast i16* %26187 to <16 x i16>*
  %26189 = load <16 x i16>, <16 x i16>* %26188, align 2, !tbaa !399
  %26190 = getelementptr inbounds i16, i16* %26187, i64 16
  %26191 = bitcast i16* %26190 to <16 x i16>*
  %26192 = load <16 x i16>, <16 x i16>* %26191, align 2, !tbaa !399
  %26193 = add nsw i64 %25892, %.pre-phi3644
  %26194 = getelementptr inbounds i16, i16* %blur_x917, i64 %26193
  %26195 = bitcast i16* %26194 to <16 x i16>*
  %26196 = load <16 x i16>, <16 x i16>* %26195, align 2, !tbaa !399
  %26197 = getelementptr inbounds i16, i16* %26194, i64 16
  %26198 = bitcast i16* %26197 to <16 x i16>*
  %26199 = load <16 x i16>, <16 x i16>* %26198, align 2, !tbaa !399
  %26200 = add nsw i64 %25895, %.pre-phi3644
  %26201 = getelementptr inbounds i16, i16* %blur_x917, i64 %26200
  %26202 = bitcast i16* %26201 to <16 x i16>*
  %26203 = load <16 x i16>, <16 x i16>* %26202, align 2, !tbaa !399
  %26204 = getelementptr inbounds i16, i16* %26201, i64 16
  %26205 = bitcast i16* %26204 to <16 x i16>*
  %26206 = load <16 x i16>, <16 x i16>* %26205, align 2, !tbaa !399
  %26207 = add nsw i64 %25898, %.pre-phi3644
  %26208 = getelementptr inbounds i16, i16* %blur_x917, i64 %26207
  %26209 = bitcast i16* %26208 to <16 x i16>*
  %26210 = load <16 x i16>, <16 x i16>* %26209, align 2, !tbaa !399
  %26211 = getelementptr inbounds i16, i16* %26208, i64 16
  %26212 = bitcast i16* %26211 to <16 x i16>*
  %26213 = load <16 x i16>, <16 x i16>* %26212, align 2, !tbaa !399
  %26214 = add nsw i64 %25901, %.pre-phi3644
  %26215 = getelementptr inbounds i16, i16* %blur_x917, i64 %26214
  %26216 = bitcast i16* %26215 to <16 x i16>*
  %26217 = load <16 x i16>, <16 x i16>* %26216, align 2, !tbaa !399
  %26218 = getelementptr inbounds i16, i16* %26215, i64 16
  %26219 = bitcast i16* %26218 to <16 x i16>*
  %26220 = load <16 x i16>, <16 x i16>* %26219, align 2, !tbaa !399
  %26221 = add nsw i64 %25904, %.pre-phi3644
  %26222 = getelementptr inbounds i16, i16* %blur_x917, i64 %26221
  %26223 = bitcast i16* %26222 to <16 x i16>*
  %26224 = load <16 x i16>, <16 x i16>* %26223, align 2, !tbaa !399
  %26225 = getelementptr inbounds i16, i16* %26222, i64 16
  %26226 = bitcast i16* %26225 to <16 x i16>*
  %26227 = load <16 x i16>, <16 x i16>* %26226, align 2, !tbaa !399
  %26228 = add <16 x i16> %26189, %26182
  %26229 = add <16 x i16> %26228, %26196
  %26230 = add <16 x i16> %26229, %26203
  %26231 = add <16 x i16> %26230, %26210
  %26232 = add <16 x i16> %26231, %26217
  %26233 = add <16 x i16> %26232, %26224
  %26234 = add <16 x i16> %26192, %26185
  %26235 = add <16 x i16> %26234, %26199
  %26236 = add <16 x i16> %26235, %26206
  %26237 = add <16 x i16> %26236, %26213
  %26238 = add <16 x i16> %26237, %26220
  %26239 = add <16 x i16> %26238, %26227
  %26240 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26233, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26241 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26239, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26242 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26240, <16 x i16> %26233)
  %26243 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26241, <16 x i16> %26239)
  %26244 = shufflevector <16 x i16> %26242, <16 x i16> %26243, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26245 = lshr <32 x i16> %26244, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26246 = shufflevector <32 x i16> %26245, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26247 = add nsw i64 %25908, %.pre-phi3644
  %26248 = getelementptr inbounds i16, i16* %264, i64 %26247
  %26249 = bitcast i16* %26248 to <16 x i16>*
  store <16 x i16> %26246, <16 x i16>* %26249, align 2, !tbaa !401
  %26250 = shufflevector <32 x i16> %26245, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26251 = getelementptr inbounds i16, i16* %26248, i64 16
  %26252 = bitcast i16* %26251 to <16 x i16>*
  store <16 x i16> %26250, <16 x i16>* %26252, align 2, !tbaa !401
  %indvars.iv.next3430 = add nuw nsw i64 %indvars.iv3429, 1
  %.not2694 = icmp eq i64 %indvars.iv.next3430, %386
  br i1 %.not2694, label %"end for blur_y.s0.x.x.rebased1459", label %"for blur_y.s0.x.x.rebased1458"

"for blur_y.s0.x.x.rebased1475":                  ; preds = %"for blur_y.s0.x.x.rebased1475.preheader", %"consume blur_x1485"
  %blur_y.s0.x.x.rebased1477 = phi i32 [ %26403, %"consume blur_x1485" ], [ 0, %"for blur_y.s0.x.x.rebased1475.preheader" ]
  %26253 = add nsw i32 %blur_y.s0.x.x.rebased1477, %t1670852
  %a516 = shl nsw i32 %26253, 5
  %26254 = icmp sgt i32 %a355, %a516
  %b522 = select i1 %26254, i32 %a516, i32 %a355
  %26255 = icmp slt i32 %26253, 1
  %26256 = icmp sgt i32 %202, %a516
  %26257 = or i1 %26255, %26256
  br i1 %26257, label %"produce blur_x1482", label %"consume blur_x1485"

"end for blur_y.s0.x.x.rebased1476":              ; preds = %"consume blur_x1485", %"end for blur_y.s0.x.x.rebased1459"
  br i1 %232, label %"produce blur_x1489", label %after_bb1486

"produce blur_x1482":                             ; preds = %"for blur_y.s0.x.x.rebased1475"
  %26258 = icmp slt i32 %b522, %202
  %blur_x.s0.x.v1.base.s1483 = select i1 %26258, i32 %b522, i32 %202
  %t8851484 = add nsw i32 %blur_x.s0.x.v1.base.s1483, %t18891455
  %26259 = sext i32 %t8851484 to i64
  %26260 = getelementptr inbounds i16, i16* %read_input860, i64 %26259
  %26261 = getelementptr inbounds i16, i16* %26260, i64 1
  %26262 = bitcast i16* %26261 to <16 x i16>*
  %26263 = load <16 x i16>, <16 x i16>* %26262, align 2, !tbaa !396
  %26264 = getelementptr inbounds i16, i16* %26260, i64 17
  %26265 = bitcast i16* %26264 to <16 x i16>*
  %26266 = load <16 x i16>, <16 x i16>* %26265, align 2, !tbaa !396
  %26267 = bitcast i16* %26260 to <16 x i16>*
  %26268 = load <16 x i16>, <16 x i16>* %26267, align 2, !tbaa !396
  %26269 = getelementptr inbounds i16, i16* %26260, i64 16
  %26270 = bitcast i16* %26269 to <16 x i16>*
  %26271 = load <16 x i16>, <16 x i16>* %26270, align 2, !tbaa !396
  %26272 = getelementptr inbounds i16, i16* %26260, i64 2
  %26273 = bitcast i16* %26272 to <16 x i16>*
  %26274 = load <16 x i16>, <16 x i16>* %26273, align 2, !tbaa !396
  %26275 = getelementptr inbounds i16, i16* %26260, i64 18
  %26276 = bitcast i16* %26275 to <16 x i16>*
  %26277 = load <16 x i16>, <16 x i16>* %26276, align 2, !tbaa !396
  %26278 = getelementptr inbounds i16, i16* %26260, i64 3
  %26279 = bitcast i16* %26278 to <16 x i16>*
  %26280 = load <16 x i16>, <16 x i16>* %26279, align 2, !tbaa !396
  %26281 = getelementptr inbounds i16, i16* %26260, i64 19
  %26282 = bitcast i16* %26281 to <16 x i16>*
  %26283 = load <16 x i16>, <16 x i16>* %26282, align 2, !tbaa !396
  %26284 = getelementptr inbounds i16, i16* %26260, i64 4
  %26285 = bitcast i16* %26284 to <16 x i16>*
  %26286 = load <16 x i16>, <16 x i16>* %26285, align 2, !tbaa !396
  %26287 = getelementptr inbounds i16, i16* %26260, i64 20
  %26288 = bitcast i16* %26287 to <16 x i16>*
  %26289 = load <16 x i16>, <16 x i16>* %26288, align 2, !tbaa !396
  %26290 = getelementptr inbounds i16, i16* %26260, i64 6
  %26291 = bitcast i16* %26290 to <16 x i16>*
  %26292 = load <16 x i16>, <16 x i16>* %26291, align 2, !tbaa !396
  %26293 = getelementptr inbounds i16, i16* %26260, i64 22
  %26294 = bitcast i16* %26293 to <16 x i16>*
  %26295 = load <16 x i16>, <16 x i16>* %26294, align 2, !tbaa !396
  %26296 = getelementptr inbounds i16, i16* %26260, i64 5
  %26297 = bitcast i16* %26296 to <16 x i16>*
  %26298 = load <16 x i16>, <16 x i16>* %26297, align 2, !tbaa !396
  %26299 = getelementptr inbounds i16, i16* %26260, i64 21
  %26300 = bitcast i16* %26299 to <16 x i16>*
  %26301 = load <16 x i16>, <16 x i16>* %26300, align 2, !tbaa !396
  %26302 = add <16 x i16> %26268, %26263
  %26303 = add <16 x i16> %26302, %26274
  %26304 = add <16 x i16> %26303, %26280
  %26305 = add <16 x i16> %26304, %26286
  %26306 = add <16 x i16> %26305, %26292
  %26307 = add <16 x i16> %26306, %26298
  %26308 = add <16 x i16> %26271, %26266
  %26309 = add <16 x i16> %26308, %26277
  %26310 = add <16 x i16> %26309, %26283
  %26311 = add <16 x i16> %26310, %26289
  %26312 = add <16 x i16> %26311, %26295
  %26313 = add <16 x i16> %26312, %26301
  %26314 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26307, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26315 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26313, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26316 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26314, <16 x i16> %26307)
  %26317 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26315, <16 x i16> %26313)
  %26318 = shufflevector <16 x i16> %26316, <16 x i16> %26317, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26319 = lshr <32 x i16> %26318, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26320 = shufflevector <32 x i16> %26319, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26321 = sext i32 %blur_x.s0.x.v1.base.s1483 to i64
  %26322 = add nsw i64 %26321, %26084
  %26323 = getelementptr inbounds i16, i16* %blur_x917, i64 %26322
  %26324 = bitcast i16* %26323 to <16 x i16>*
  store <16 x i16> %26320, <16 x i16>* %26324, align 2, !tbaa !399
  %26325 = shufflevector <32 x i16> %26319, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26326 = getelementptr inbounds i16, i16* %26323, i64 16
  %26327 = bitcast i16* %26326 to <16 x i16>*
  store <16 x i16> %26325, <16 x i16>* %26327, align 2, !tbaa !399
  br label %"consume blur_x1485"

"consume blur_x1485":                             ; preds = %"for blur_y.s0.x.x.rebased1475", %"produce blur_x1482"
  %26328 = sext i32 %b522 to i64
  %26329 = add nsw i64 %26087, %26328
  %26330 = getelementptr inbounds i16, i16* %blur_x917, i64 %26329
  %26331 = bitcast i16* %26330 to <16 x i16>*
  %26332 = load <16 x i16>, <16 x i16>* %26331, align 2, !tbaa !399
  %26333 = getelementptr inbounds i16, i16* %26330, i64 16
  %26334 = bitcast i16* %26333 to <16 x i16>*
  %26335 = load <16 x i16>, <16 x i16>* %26334, align 2, !tbaa !399
  %26336 = add nsw i64 %26090, %26328
  %26337 = getelementptr inbounds i16, i16* %blur_x917, i64 %26336
  %26338 = bitcast i16* %26337 to <16 x i16>*
  %26339 = load <16 x i16>, <16 x i16>* %26338, align 2, !tbaa !399
  %26340 = getelementptr inbounds i16, i16* %26337, i64 16
  %26341 = bitcast i16* %26340 to <16 x i16>*
  %26342 = load <16 x i16>, <16 x i16>* %26341, align 2, !tbaa !399
  %26343 = add nsw i64 %26093, %26328
  %26344 = getelementptr inbounds i16, i16* %blur_x917, i64 %26343
  %26345 = bitcast i16* %26344 to <16 x i16>*
  %26346 = load <16 x i16>, <16 x i16>* %26345, align 2, !tbaa !399
  %26347 = getelementptr inbounds i16, i16* %26344, i64 16
  %26348 = bitcast i16* %26347 to <16 x i16>*
  %26349 = load <16 x i16>, <16 x i16>* %26348, align 2, !tbaa !399
  %26350 = add nsw i64 %26096, %26328
  %26351 = getelementptr inbounds i16, i16* %blur_x917, i64 %26350
  %26352 = bitcast i16* %26351 to <16 x i16>*
  %26353 = load <16 x i16>, <16 x i16>* %26352, align 2, !tbaa !399
  %26354 = getelementptr inbounds i16, i16* %26351, i64 16
  %26355 = bitcast i16* %26354 to <16 x i16>*
  %26356 = load <16 x i16>, <16 x i16>* %26355, align 2, !tbaa !399
  %26357 = add nsw i64 %26099, %26328
  %26358 = getelementptr inbounds i16, i16* %blur_x917, i64 %26357
  %26359 = bitcast i16* %26358 to <16 x i16>*
  %26360 = load <16 x i16>, <16 x i16>* %26359, align 2, !tbaa !399
  %26361 = getelementptr inbounds i16, i16* %26358, i64 16
  %26362 = bitcast i16* %26361 to <16 x i16>*
  %26363 = load <16 x i16>, <16 x i16>* %26362, align 2, !tbaa !399
  %26364 = add nsw i64 %26102, %26328
  %26365 = getelementptr inbounds i16, i16* %blur_x917, i64 %26364
  %26366 = bitcast i16* %26365 to <16 x i16>*
  %26367 = load <16 x i16>, <16 x i16>* %26366, align 2, !tbaa !399
  %26368 = getelementptr inbounds i16, i16* %26365, i64 16
  %26369 = bitcast i16* %26368 to <16 x i16>*
  %26370 = load <16 x i16>, <16 x i16>* %26369, align 2, !tbaa !399
  %26371 = add nsw i64 %26105, %26328
  %26372 = getelementptr inbounds i16, i16* %blur_x917, i64 %26371
  %26373 = bitcast i16* %26372 to <16 x i16>*
  %26374 = load <16 x i16>, <16 x i16>* %26373, align 2, !tbaa !399
  %26375 = getelementptr inbounds i16, i16* %26372, i64 16
  %26376 = bitcast i16* %26375 to <16 x i16>*
  %26377 = load <16 x i16>, <16 x i16>* %26376, align 2, !tbaa !399
  %26378 = add <16 x i16> %26339, %26332
  %26379 = add <16 x i16> %26378, %26346
  %26380 = add <16 x i16> %26379, %26353
  %26381 = add <16 x i16> %26380, %26360
  %26382 = add <16 x i16> %26381, %26367
  %26383 = add <16 x i16> %26382, %26374
  %26384 = add <16 x i16> %26342, %26335
  %26385 = add <16 x i16> %26384, %26349
  %26386 = add <16 x i16> %26385, %26356
  %26387 = add <16 x i16> %26386, %26363
  %26388 = add <16 x i16> %26387, %26370
  %26389 = add <16 x i16> %26388, %26377
  %26390 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26383, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26391 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26389, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26392 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26390, <16 x i16> %26383)
  %26393 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26391, <16 x i16> %26389)
  %26394 = shufflevector <16 x i16> %26392, <16 x i16> %26393, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26395 = lshr <32 x i16> %26394, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26396 = shufflevector <32 x i16> %26395, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26397 = add nsw i64 %26109, %26328
  %26398 = getelementptr inbounds i16, i16* %264, i64 %26397
  %26399 = bitcast i16* %26398 to <16 x i16>*
  store <16 x i16> %26396, <16 x i16>* %26399, align 2, !tbaa !401
  %26400 = shufflevector <32 x i16> %26395, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26401 = getelementptr inbounds i16, i16* %26398, i64 16
  %26402 = bitcast i16* %26401 to <16 x i16>*
  store <16 x i16> %26400, <16 x i16>* %26402, align 2, !tbaa !401
  %26403 = add nuw nsw i32 %blur_y.s0.x.x.rebased1477, 1
  %.not2693 = icmp eq i32 %26403, %t1727937
  br i1 %.not2693, label %"end for blur_y.s0.x.x.rebased1476", label %"for blur_y.s0.x.x.rebased1475"

after_bb1486:                                     ; preds = %"end for blur_y.s0.x.x.rebased1476", %"produce blur_x1489"
  br i1 %298, label %"for blur_y.s0.x.x.rebased1501.preheader", label %"end for blur_y.s0.x.x.rebased1502", !prof !386

"for blur_y.s0.x.x.rebased1501.preheader":        ; preds = %after_bb1486
  %26404 = sext i32 %t17781153 to i64
  %26405 = zext i32 %.pre-phi3606 to i64
  %26406 = mul nsw i64 %26405, %314
  %26407 = sub nsw i64 %26406, %294
  %26408 = zext i32 %.pre-phi3602 to i64
  %26409 = mul nsw i64 %26408, %314
  %26410 = sub nsw i64 %26409, %294
  %26411 = zext i32 %.pre-phi3610 to i64
  %26412 = mul nsw i64 %26411, %314
  %26413 = sub nsw i64 %26412, %294
  %26414 = zext i32 %.pre-phi3614 to i64
  %26415 = mul nsw i64 %26414, %314
  %26416 = sub nsw i64 %26415, %294
  %26417 = zext i32 %.pre-phi3618 to i64
  %26418 = mul nsw i64 %26417, %314
  %26419 = sub nsw i64 %26418, %294
  %26420 = zext i32 %.pre-phi3628 to i64
  %26421 = mul nsw i64 %26420, %314
  %26422 = sub nsw i64 %26421, %294
  %26423 = zext i32 %.pre-phi3622 to i64
  %26424 = mul nsw i64 %26423, %314
  %26425 = sub nsw i64 %26424, %294
  %26426 = sext i32 %a367 to i64
  %26427 = add nsw i64 %26426, 9
  %26428 = mul nsw i64 %26427, %315
  %26429 = add nsw i64 %26428, %318
  br label %"for blur_y.s0.x.x.rebased1501"

"produce blur_x1489":                             ; preds = %"end for blur_y.s0.x.x.rebased1476"
  %26430 = getelementptr inbounds i16, i16* %read_input860, i64 %335
  %26431 = getelementptr inbounds i16, i16* %26430, i64 -31
  %26432 = bitcast i16* %26431 to <16 x i16>*
  %26433 = load <16 x i16>, <16 x i16>* %26432, align 2, !tbaa !396
  %26434 = getelementptr inbounds i16, i16* %26430, i64 -15
  %26435 = bitcast i16* %26434 to <16 x i16>*
  %26436 = load <16 x i16>, <16 x i16>* %26435, align 2, !tbaa !396
  %26437 = getelementptr inbounds i16, i16* %26430, i64 -32
  %26438 = bitcast i16* %26437 to <16 x i16>*
  %26439 = load <16 x i16>, <16 x i16>* %26438, align 2, !tbaa !396
  %26440 = getelementptr inbounds i16, i16* %26430, i64 -16
  %26441 = bitcast i16* %26440 to <16 x i16>*
  %26442 = load <16 x i16>, <16 x i16>* %26441, align 2, !tbaa !396
  %26443 = getelementptr inbounds i16, i16* %26430, i64 -30
  %26444 = bitcast i16* %26443 to <16 x i16>*
  %26445 = load <16 x i16>, <16 x i16>* %26444, align 2, !tbaa !396
  %26446 = getelementptr inbounds i16, i16* %26430, i64 -14
  %26447 = bitcast i16* %26446 to <16 x i16>*
  %26448 = load <16 x i16>, <16 x i16>* %26447, align 2, !tbaa !396
  %26449 = getelementptr inbounds i16, i16* %26430, i64 -29
  %26450 = bitcast i16* %26449 to <16 x i16>*
  %26451 = load <16 x i16>, <16 x i16>* %26450, align 2, !tbaa !396
  %26452 = getelementptr inbounds i16, i16* %26430, i64 -13
  %26453 = bitcast i16* %26452 to <16 x i16>*
  %26454 = load <16 x i16>, <16 x i16>* %26453, align 2, !tbaa !396
  %26455 = getelementptr inbounds i16, i16* %26430, i64 -28
  %26456 = bitcast i16* %26455 to <16 x i16>*
  %26457 = load <16 x i16>, <16 x i16>* %26456, align 2, !tbaa !396
  %26458 = getelementptr inbounds i16, i16* %26430, i64 -12
  %26459 = bitcast i16* %26458 to <16 x i16>*
  %26460 = load <16 x i16>, <16 x i16>* %26459, align 2, !tbaa !396
  %26461 = getelementptr inbounds i16, i16* %26430, i64 -26
  %26462 = bitcast i16* %26461 to <16 x i16>*
  %26463 = load <16 x i16>, <16 x i16>* %26462, align 2, !tbaa !396
  %26464 = getelementptr inbounds i16, i16* %26430, i64 -10
  %26465 = bitcast i16* %26464 to <16 x i16>*
  %26466 = load <16 x i16>, <16 x i16>* %26465, align 2, !tbaa !396
  %26467 = getelementptr inbounds i16, i16* %26430, i64 -27
  %26468 = bitcast i16* %26467 to <16 x i16>*
  %26469 = load <16 x i16>, <16 x i16>* %26468, align 2, !tbaa !396
  %26470 = getelementptr inbounds i16, i16* %26430, i64 -11
  %26471 = bitcast i16* %26470 to <16 x i16>*
  %26472 = load <16 x i16>, <16 x i16>* %26471, align 2, !tbaa !396
  %26473 = add <16 x i16> %26439, %26433
  %26474 = add <16 x i16> %26473, %26445
  %26475 = add <16 x i16> %26474, %26451
  %26476 = add <16 x i16> %26475, %26457
  %26477 = add <16 x i16> %26476, %26463
  %26478 = add <16 x i16> %26477, %26469
  %26479 = add <16 x i16> %26442, %26436
  %26480 = add <16 x i16> %26479, %26448
  %26481 = add <16 x i16> %26480, %26454
  %26482 = add <16 x i16> %26481, %26460
  %26483 = add <16 x i16> %26482, %26466
  %26484 = add <16 x i16> %26483, %26472
  %26485 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26478, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26486 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26484, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26487 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26485, <16 x i16> %26478)
  %26488 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26486, <16 x i16> %26484)
  %26489 = shufflevector <16 x i16> %26487, <16 x i16> %26488, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26490 = lshr <32 x i16> %26489, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26491 = shufflevector <32 x i16> %26490, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26492 = zext i32 %.pre-phi3628 to i64
  %26493 = mul nsw i64 %295, %26492
  %26494 = add nsw i64 %297, %26493
  %26495 = getelementptr inbounds i16, i16* %blur_x917, i64 %26494
  %26496 = getelementptr inbounds i16, i16* %26495, i64 -32
  %26497 = bitcast i16* %26496 to <16 x i16>*
  store <16 x i16> %26491, <16 x i16>* %26497, align 2, !tbaa !399
  %26498 = shufflevector <32 x i16> %26490, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26499 = getelementptr inbounds i16, i16* %26495, i64 -16
  %26500 = bitcast i16* %26499 to <16 x i16>*
  store <16 x i16> %26498, <16 x i16>* %26500, align 2, !tbaa !399
  %26501 = zext i32 %.pre-phi3606 to i64
  %26502 = mul nsw i64 %26501, %314
  %26503 = add nsw i64 %26502, %292
  %26504 = getelementptr inbounds i16, i16* %blur_x917, i64 %26503
  %26505 = getelementptr inbounds i16, i16* %26504, i64 -32
  %26506 = bitcast i16* %26505 to <16 x i16>*
  %26507 = load <16 x i16>, <16 x i16>* %26506, align 2, !tbaa !399
  %26508 = getelementptr inbounds i16, i16* %26504, i64 -16
  %26509 = bitcast i16* %26508 to <16 x i16>*
  %26510 = load <16 x i16>, <16 x i16>* %26509, align 2, !tbaa !399
  %26511 = zext i32 %.pre-phi3602 to i64
  %26512 = mul nsw i64 %26511, %314
  %26513 = add nsw i64 %26512, %292
  %26514 = getelementptr inbounds i16, i16* %blur_x917, i64 %26513
  %26515 = getelementptr inbounds i16, i16* %26514, i64 -32
  %26516 = bitcast i16* %26515 to <16 x i16>*
  %26517 = load <16 x i16>, <16 x i16>* %26516, align 2, !tbaa !399
  %26518 = getelementptr inbounds i16, i16* %26514, i64 -16
  %26519 = bitcast i16* %26518 to <16 x i16>*
  %26520 = load <16 x i16>, <16 x i16>* %26519, align 2, !tbaa !399
  %26521 = zext i32 %.pre-phi3610 to i64
  %26522 = mul nsw i64 %26521, %314
  %26523 = add nsw i64 %26522, %292
  %26524 = getelementptr inbounds i16, i16* %blur_x917, i64 %26523
  %26525 = getelementptr inbounds i16, i16* %26524, i64 -32
  %26526 = bitcast i16* %26525 to <16 x i16>*
  %26527 = load <16 x i16>, <16 x i16>* %26526, align 2, !tbaa !399
  %26528 = getelementptr inbounds i16, i16* %26524, i64 -16
  %26529 = bitcast i16* %26528 to <16 x i16>*
  %26530 = load <16 x i16>, <16 x i16>* %26529, align 2, !tbaa !399
  %26531 = zext i32 %.pre-phi3614 to i64
  %26532 = mul nsw i64 %26531, %314
  %26533 = add nsw i64 %26532, %292
  %26534 = getelementptr inbounds i16, i16* %blur_x917, i64 %26533
  %26535 = getelementptr inbounds i16, i16* %26534, i64 -32
  %26536 = bitcast i16* %26535 to <16 x i16>*
  %26537 = load <16 x i16>, <16 x i16>* %26536, align 2, !tbaa !399
  %26538 = getelementptr inbounds i16, i16* %26534, i64 -16
  %26539 = bitcast i16* %26538 to <16 x i16>*
  %26540 = load <16 x i16>, <16 x i16>* %26539, align 2, !tbaa !399
  %26541 = zext i32 %.pre-phi3618 to i64
  %26542 = mul nsw i64 %26541, %314
  %26543 = add nsw i64 %26542, %292
  %26544 = getelementptr inbounds i16, i16* %blur_x917, i64 %26543
  %26545 = getelementptr inbounds i16, i16* %26544, i64 -32
  %26546 = bitcast i16* %26545 to <16 x i16>*
  %26547 = load <16 x i16>, <16 x i16>* %26546, align 2, !tbaa !399
  %26548 = getelementptr inbounds i16, i16* %26544, i64 -16
  %26549 = bitcast i16* %26548 to <16 x i16>*
  %26550 = load <16 x i16>, <16 x i16>* %26549, align 2, !tbaa !399
  %26551 = mul nsw i64 %26492, %314
  %26552 = add nsw i64 %26551, %292
  %26553 = getelementptr inbounds i16, i16* %blur_x917, i64 %26552
  %26554 = getelementptr inbounds i16, i16* %26553, i64 -32
  %26555 = bitcast i16* %26554 to <16 x i16>*
  %26556 = load <16 x i16>, <16 x i16>* %26555, align 2, !tbaa !399
  %26557 = getelementptr inbounds i16, i16* %26553, i64 -16
  %26558 = bitcast i16* %26557 to <16 x i16>*
  %26559 = load <16 x i16>, <16 x i16>* %26558, align 2, !tbaa !399
  %26560 = zext i32 %.pre-phi3622 to i64
  %26561 = mul nsw i64 %26560, %314
  %26562 = add nsw i64 %26561, %292
  %26563 = getelementptr inbounds i16, i16* %blur_x917, i64 %26562
  %26564 = getelementptr inbounds i16, i16* %26563, i64 -32
  %26565 = bitcast i16* %26564 to <16 x i16>*
  %26566 = load <16 x i16>, <16 x i16>* %26565, align 2, !tbaa !399
  %26567 = getelementptr inbounds i16, i16* %26563, i64 -16
  %26568 = bitcast i16* %26567 to <16 x i16>*
  %26569 = load <16 x i16>, <16 x i16>* %26568, align 2, !tbaa !399
  %26570 = add <16 x i16> %26517, %26507
  %26571 = add <16 x i16> %26570, %26527
  %26572 = add <16 x i16> %26571, %26537
  %26573 = add <16 x i16> %26572, %26547
  %26574 = add <16 x i16> %26573, %26556
  %26575 = add <16 x i16> %26574, %26566
  %26576 = add <16 x i16> %26520, %26510
  %26577 = add <16 x i16> %26576, %26530
  %26578 = add <16 x i16> %26577, %26540
  %26579 = add <16 x i16> %26578, %26550
  %26580 = add <16 x i16> %26579, %26559
  %26581 = add <16 x i16> %26580, %26569
  %26582 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26575, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26583 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26581, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26584 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26582, <16 x i16> %26575)
  %26585 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26583, <16 x i16> %26581)
  %26586 = shufflevector <16 x i16> %26584, <16 x i16> %26585, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26587 = lshr <32 x i16> %26586, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26588 = shufflevector <32 x i16> %26587, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26589 = sext i32 %a367 to i64
  %26590 = add nsw i64 %26589, 9
  %26591 = mul nsw i64 %26590, %315
  %26592 = add nsw i64 %317, %26591
  %26593 = getelementptr inbounds i16, i16* %264, i64 %26592
  %26594 = getelementptr inbounds i16, i16* %26593, i64 -32
  %26595 = bitcast i16* %26594 to <16 x i16>*
  store <16 x i16> %26588, <16 x i16>* %26595, align 2, !tbaa !401
  %26596 = shufflevector <32 x i16> %26587, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26597 = getelementptr inbounds i16, i16* %26593, i64 -16
  %26598 = bitcast i16* %26597 to <16 x i16>*
  store <16 x i16> %26596, <16 x i16>* %26598, align 2, !tbaa !401
  br label %after_bb1486

"for blur_y.s0.x.x.rebased1501":                  ; preds = %"for blur_y.s0.x.x.rebased1501.preheader", %"consume blur_x1510"
  %indvars.iv3432 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1501.preheader" ], [ %indvars.iv.next3433, %"consume blur_x1510" ]
  %26599 = add nsw i64 %indvars.iv3432, %299
  %26600 = icmp slt i64 %26599, 1
  %26601 = trunc i64 %26599 to i32
  %26602 = shl nsw i32 %26601, 5
  %26603 = icmp sgt i32 %202, %26602
  %26604 = or i1 %26600, %26603
  br i1 %26604, label %"produce blur_x1508", label %"for blur_y.s0.x.x.rebased1501.consume blur_x1510_crit_edge"

"for blur_y.s0.x.x.rebased1501.consume blur_x1510_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1501"
  %.pre3645 = shl nsw i64 %26599, 5
  br label %"consume blur_x1510"

"end for blur_y.s0.x.x.rebased1502":              ; preds = %"consume blur_x1510", %after_bb1486
  br i1 %300, label %"for blur_y.s0.x.x.rebased1518.preheader", label %"end for blur_y.s0.x.x.rebased1519", !prof !386

"for blur_y.s0.x.x.rebased1518.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1502"
  %26605 = sext i32 %t17781153 to i64
  %26606 = zext i32 %.pre-phi3606 to i64
  %26607 = mul nsw i64 %26606, %314
  %26608 = sub nsw i64 %26607, %294
  %26609 = zext i32 %.pre-phi3602 to i64
  %26610 = mul nsw i64 %26609, %314
  %26611 = sub nsw i64 %26610, %294
  %26612 = zext i32 %.pre-phi3610 to i64
  %26613 = mul nsw i64 %26612, %314
  %26614 = sub nsw i64 %26613, %294
  %26615 = zext i32 %.pre-phi3614 to i64
  %26616 = mul nsw i64 %26615, %314
  %26617 = sub nsw i64 %26616, %294
  %26618 = zext i32 %.pre-phi3618 to i64
  %26619 = mul nsw i64 %26618, %314
  %26620 = sub nsw i64 %26619, %294
  %26621 = zext i32 %.pre-phi3628 to i64
  %26622 = mul nsw i64 %26621, %314
  %26623 = sub nsw i64 %26622, %294
  %26624 = zext i32 %.pre-phi3622 to i64
  %26625 = mul nsw i64 %26624, %314
  %26626 = sub nsw i64 %26625, %294
  %26627 = sext i32 %a367 to i64
  %26628 = add nsw i64 %26627, 9
  %26629 = mul nsw i64 %26628, %315
  %26630 = add nsw i64 %26629, %318
  br label %"for blur_y.s0.x.x.rebased1518"

"produce blur_x1508":                             ; preds = %"for blur_y.s0.x.x.rebased1501"
  %t8961509 = add nsw i32 %26602, %t19051498
  %26631 = sext i32 %t8961509 to i64
  %26632 = getelementptr inbounds i16, i16* %read_input860, i64 %26631
  %26633 = getelementptr inbounds i16, i16* %26632, i64 1
  %26634 = bitcast i16* %26633 to <16 x i16>*
  %26635 = load <16 x i16>, <16 x i16>* %26634, align 2, !tbaa !396
  %26636 = getelementptr inbounds i16, i16* %26632, i64 17
  %26637 = bitcast i16* %26636 to <16 x i16>*
  %26638 = load <16 x i16>, <16 x i16>* %26637, align 2, !tbaa !396
  %26639 = bitcast i16* %26632 to <16 x i16>*
  %26640 = load <16 x i16>, <16 x i16>* %26639, align 2, !tbaa !396
  %26641 = getelementptr inbounds i16, i16* %26632, i64 16
  %26642 = bitcast i16* %26641 to <16 x i16>*
  %26643 = load <16 x i16>, <16 x i16>* %26642, align 2, !tbaa !396
  %26644 = getelementptr inbounds i16, i16* %26632, i64 2
  %26645 = bitcast i16* %26644 to <16 x i16>*
  %26646 = load <16 x i16>, <16 x i16>* %26645, align 2, !tbaa !396
  %26647 = getelementptr inbounds i16, i16* %26632, i64 18
  %26648 = bitcast i16* %26647 to <16 x i16>*
  %26649 = load <16 x i16>, <16 x i16>* %26648, align 2, !tbaa !396
  %26650 = getelementptr inbounds i16, i16* %26632, i64 3
  %26651 = bitcast i16* %26650 to <16 x i16>*
  %26652 = load <16 x i16>, <16 x i16>* %26651, align 2, !tbaa !396
  %26653 = getelementptr inbounds i16, i16* %26632, i64 19
  %26654 = bitcast i16* %26653 to <16 x i16>*
  %26655 = load <16 x i16>, <16 x i16>* %26654, align 2, !tbaa !396
  %26656 = getelementptr inbounds i16, i16* %26632, i64 4
  %26657 = bitcast i16* %26656 to <16 x i16>*
  %26658 = load <16 x i16>, <16 x i16>* %26657, align 2, !tbaa !396
  %26659 = getelementptr inbounds i16, i16* %26632, i64 20
  %26660 = bitcast i16* %26659 to <16 x i16>*
  %26661 = load <16 x i16>, <16 x i16>* %26660, align 2, !tbaa !396
  %26662 = getelementptr inbounds i16, i16* %26632, i64 6
  %26663 = bitcast i16* %26662 to <16 x i16>*
  %26664 = load <16 x i16>, <16 x i16>* %26663, align 2, !tbaa !396
  %26665 = getelementptr inbounds i16, i16* %26632, i64 22
  %26666 = bitcast i16* %26665 to <16 x i16>*
  %26667 = load <16 x i16>, <16 x i16>* %26666, align 2, !tbaa !396
  %26668 = getelementptr inbounds i16, i16* %26632, i64 5
  %26669 = bitcast i16* %26668 to <16 x i16>*
  %26670 = load <16 x i16>, <16 x i16>* %26669, align 2, !tbaa !396
  %26671 = getelementptr inbounds i16, i16* %26632, i64 21
  %26672 = bitcast i16* %26671 to <16 x i16>*
  %26673 = load <16 x i16>, <16 x i16>* %26672, align 2, !tbaa !396
  %26674 = add <16 x i16> %26640, %26635
  %26675 = add <16 x i16> %26674, %26646
  %26676 = add <16 x i16> %26675, %26652
  %26677 = add <16 x i16> %26676, %26658
  %26678 = add <16 x i16> %26677, %26664
  %26679 = add <16 x i16> %26678, %26670
  %26680 = add <16 x i16> %26643, %26638
  %26681 = add <16 x i16> %26680, %26649
  %26682 = add <16 x i16> %26681, %26655
  %26683 = add <16 x i16> %26682, %26661
  %26684 = add <16 x i16> %26683, %26667
  %26685 = add <16 x i16> %26684, %26673
  %26686 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26679, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26687 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26685, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26688 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26686, <16 x i16> %26679)
  %26689 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26687, <16 x i16> %26685)
  %26690 = shufflevector <16 x i16> %26688, <16 x i16> %26689, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26691 = lshr <32 x i16> %26690, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26692 = shufflevector <32 x i16> %26691, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26693 = shl nsw i64 %26599, 5
  %26694 = add nsw i64 %26693, %26404
  %26695 = getelementptr inbounds i16, i16* %blur_x917, i64 %26694
  %26696 = bitcast i16* %26695 to <16 x i16>*
  store <16 x i16> %26692, <16 x i16>* %26696, align 2, !tbaa !399
  %26697 = shufflevector <32 x i16> %26691, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26698 = getelementptr inbounds i16, i16* %26695, i64 16
  %26699 = bitcast i16* %26698 to <16 x i16>*
  store <16 x i16> %26697, <16 x i16>* %26699, align 2, !tbaa !399
  br label %"consume blur_x1510"

"consume blur_x1510":                             ; preds = %"for blur_y.s0.x.x.rebased1501.consume blur_x1510_crit_edge", %"produce blur_x1508"
  %.pre-phi3646 = phi i64 [ %.pre3645, %"for blur_y.s0.x.x.rebased1501.consume blur_x1510_crit_edge" ], [ %26693, %"produce blur_x1508" ]
  %26700 = add nsw i64 %26407, %.pre-phi3646
  %26701 = getelementptr inbounds i16, i16* %blur_x917, i64 %26700
  %26702 = bitcast i16* %26701 to <16 x i16>*
  %26703 = load <16 x i16>, <16 x i16>* %26702, align 2, !tbaa !399
  %26704 = getelementptr inbounds i16, i16* %26701, i64 16
  %26705 = bitcast i16* %26704 to <16 x i16>*
  %26706 = load <16 x i16>, <16 x i16>* %26705, align 2, !tbaa !399
  %26707 = add nsw i64 %26410, %.pre-phi3646
  %26708 = getelementptr inbounds i16, i16* %blur_x917, i64 %26707
  %26709 = bitcast i16* %26708 to <16 x i16>*
  %26710 = load <16 x i16>, <16 x i16>* %26709, align 2, !tbaa !399
  %26711 = getelementptr inbounds i16, i16* %26708, i64 16
  %26712 = bitcast i16* %26711 to <16 x i16>*
  %26713 = load <16 x i16>, <16 x i16>* %26712, align 2, !tbaa !399
  %26714 = add nsw i64 %26413, %.pre-phi3646
  %26715 = getelementptr inbounds i16, i16* %blur_x917, i64 %26714
  %26716 = bitcast i16* %26715 to <16 x i16>*
  %26717 = load <16 x i16>, <16 x i16>* %26716, align 2, !tbaa !399
  %26718 = getelementptr inbounds i16, i16* %26715, i64 16
  %26719 = bitcast i16* %26718 to <16 x i16>*
  %26720 = load <16 x i16>, <16 x i16>* %26719, align 2, !tbaa !399
  %26721 = add nsw i64 %26416, %.pre-phi3646
  %26722 = getelementptr inbounds i16, i16* %blur_x917, i64 %26721
  %26723 = bitcast i16* %26722 to <16 x i16>*
  %26724 = load <16 x i16>, <16 x i16>* %26723, align 2, !tbaa !399
  %26725 = getelementptr inbounds i16, i16* %26722, i64 16
  %26726 = bitcast i16* %26725 to <16 x i16>*
  %26727 = load <16 x i16>, <16 x i16>* %26726, align 2, !tbaa !399
  %26728 = add nsw i64 %26419, %.pre-phi3646
  %26729 = getelementptr inbounds i16, i16* %blur_x917, i64 %26728
  %26730 = bitcast i16* %26729 to <16 x i16>*
  %26731 = load <16 x i16>, <16 x i16>* %26730, align 2, !tbaa !399
  %26732 = getelementptr inbounds i16, i16* %26729, i64 16
  %26733 = bitcast i16* %26732 to <16 x i16>*
  %26734 = load <16 x i16>, <16 x i16>* %26733, align 2, !tbaa !399
  %26735 = add nsw i64 %26422, %.pre-phi3646
  %26736 = getelementptr inbounds i16, i16* %blur_x917, i64 %26735
  %26737 = bitcast i16* %26736 to <16 x i16>*
  %26738 = load <16 x i16>, <16 x i16>* %26737, align 2, !tbaa !399
  %26739 = getelementptr inbounds i16, i16* %26736, i64 16
  %26740 = bitcast i16* %26739 to <16 x i16>*
  %26741 = load <16 x i16>, <16 x i16>* %26740, align 2, !tbaa !399
  %26742 = add nsw i64 %26425, %.pre-phi3646
  %26743 = getelementptr inbounds i16, i16* %blur_x917, i64 %26742
  %26744 = bitcast i16* %26743 to <16 x i16>*
  %26745 = load <16 x i16>, <16 x i16>* %26744, align 2, !tbaa !399
  %26746 = getelementptr inbounds i16, i16* %26743, i64 16
  %26747 = bitcast i16* %26746 to <16 x i16>*
  %26748 = load <16 x i16>, <16 x i16>* %26747, align 2, !tbaa !399
  %26749 = add <16 x i16> %26710, %26703
  %26750 = add <16 x i16> %26749, %26717
  %26751 = add <16 x i16> %26750, %26724
  %26752 = add <16 x i16> %26751, %26731
  %26753 = add <16 x i16> %26752, %26738
  %26754 = add <16 x i16> %26753, %26745
  %26755 = add <16 x i16> %26713, %26706
  %26756 = add <16 x i16> %26755, %26720
  %26757 = add <16 x i16> %26756, %26727
  %26758 = add <16 x i16> %26757, %26734
  %26759 = add <16 x i16> %26758, %26741
  %26760 = add <16 x i16> %26759, %26748
  %26761 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26754, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26762 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26760, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26763 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26761, <16 x i16> %26754)
  %26764 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26762, <16 x i16> %26760)
  %26765 = shufflevector <16 x i16> %26763, <16 x i16> %26764, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26766 = lshr <32 x i16> %26765, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26767 = shufflevector <32 x i16> %26766, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26768 = add nsw i64 %26429, %.pre-phi3646
  %26769 = getelementptr inbounds i16, i16* %264, i64 %26768
  %26770 = bitcast i16* %26769 to <16 x i16>*
  store <16 x i16> %26767, <16 x i16>* %26770, align 2, !tbaa !401
  %26771 = shufflevector <32 x i16> %26766, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26772 = getelementptr inbounds i16, i16* %26769, i64 16
  %26773 = bitcast i16* %26772 to <16 x i16>*
  store <16 x i16> %26771, <16 x i16>* %26773, align 2, !tbaa !401
  %indvars.iv.next3433 = add nuw nsw i64 %indvars.iv3432, 1
  %.not2692 = icmp eq i64 %indvars.iv.next3433, %386
  br i1 %.not2692, label %"end for blur_y.s0.x.x.rebased1502", label %"for blur_y.s0.x.x.rebased1501"

"for blur_y.s0.x.x.rebased1518":                  ; preds = %"for blur_y.s0.x.x.rebased1518.preheader", %"consume blur_x1528"
  %blur_y.s0.x.x.rebased1520 = phi i32 [ %26924, %"consume blur_x1528" ], [ 0, %"for blur_y.s0.x.x.rebased1518.preheader" ]
  %26774 = add nsw i32 %blur_y.s0.x.x.rebased1520, %t1670852
  %a523 = shl nsw i32 %26774, 5
  %26775 = icmp sgt i32 %a355, %a523
  %b529 = select i1 %26775, i32 %a523, i32 %a355
  %26776 = icmp slt i32 %26774, 1
  %26777 = icmp sgt i32 %202, %a523
  %26778 = or i1 %26776, %26777
  br i1 %26778, label %"produce blur_x1525", label %"consume blur_x1528"

"end for blur_y.s0.x.x.rebased1519":              ; preds = %"consume blur_x1528", %"end for blur_y.s0.x.x.rebased1502"
  br i1 %232, label %"produce blur_x1532", label %after_bb1529

"produce blur_x1525":                             ; preds = %"for blur_y.s0.x.x.rebased1518"
  %26779 = icmp slt i32 %b529, %202
  %blur_x.s0.x.v1.base.s1526 = select i1 %26779, i32 %b529, i32 %202
  %t9011527 = add nsw i32 %blur_x.s0.x.v1.base.s1526, %t19051498
  %26780 = sext i32 %t9011527 to i64
  %26781 = getelementptr inbounds i16, i16* %read_input860, i64 %26780
  %26782 = getelementptr inbounds i16, i16* %26781, i64 1
  %26783 = bitcast i16* %26782 to <16 x i16>*
  %26784 = load <16 x i16>, <16 x i16>* %26783, align 2, !tbaa !396
  %26785 = getelementptr inbounds i16, i16* %26781, i64 17
  %26786 = bitcast i16* %26785 to <16 x i16>*
  %26787 = load <16 x i16>, <16 x i16>* %26786, align 2, !tbaa !396
  %26788 = bitcast i16* %26781 to <16 x i16>*
  %26789 = load <16 x i16>, <16 x i16>* %26788, align 2, !tbaa !396
  %26790 = getelementptr inbounds i16, i16* %26781, i64 16
  %26791 = bitcast i16* %26790 to <16 x i16>*
  %26792 = load <16 x i16>, <16 x i16>* %26791, align 2, !tbaa !396
  %26793 = getelementptr inbounds i16, i16* %26781, i64 2
  %26794 = bitcast i16* %26793 to <16 x i16>*
  %26795 = load <16 x i16>, <16 x i16>* %26794, align 2, !tbaa !396
  %26796 = getelementptr inbounds i16, i16* %26781, i64 18
  %26797 = bitcast i16* %26796 to <16 x i16>*
  %26798 = load <16 x i16>, <16 x i16>* %26797, align 2, !tbaa !396
  %26799 = getelementptr inbounds i16, i16* %26781, i64 3
  %26800 = bitcast i16* %26799 to <16 x i16>*
  %26801 = load <16 x i16>, <16 x i16>* %26800, align 2, !tbaa !396
  %26802 = getelementptr inbounds i16, i16* %26781, i64 19
  %26803 = bitcast i16* %26802 to <16 x i16>*
  %26804 = load <16 x i16>, <16 x i16>* %26803, align 2, !tbaa !396
  %26805 = getelementptr inbounds i16, i16* %26781, i64 4
  %26806 = bitcast i16* %26805 to <16 x i16>*
  %26807 = load <16 x i16>, <16 x i16>* %26806, align 2, !tbaa !396
  %26808 = getelementptr inbounds i16, i16* %26781, i64 20
  %26809 = bitcast i16* %26808 to <16 x i16>*
  %26810 = load <16 x i16>, <16 x i16>* %26809, align 2, !tbaa !396
  %26811 = getelementptr inbounds i16, i16* %26781, i64 6
  %26812 = bitcast i16* %26811 to <16 x i16>*
  %26813 = load <16 x i16>, <16 x i16>* %26812, align 2, !tbaa !396
  %26814 = getelementptr inbounds i16, i16* %26781, i64 22
  %26815 = bitcast i16* %26814 to <16 x i16>*
  %26816 = load <16 x i16>, <16 x i16>* %26815, align 2, !tbaa !396
  %26817 = getelementptr inbounds i16, i16* %26781, i64 5
  %26818 = bitcast i16* %26817 to <16 x i16>*
  %26819 = load <16 x i16>, <16 x i16>* %26818, align 2, !tbaa !396
  %26820 = getelementptr inbounds i16, i16* %26781, i64 21
  %26821 = bitcast i16* %26820 to <16 x i16>*
  %26822 = load <16 x i16>, <16 x i16>* %26821, align 2, !tbaa !396
  %26823 = add <16 x i16> %26789, %26784
  %26824 = add <16 x i16> %26823, %26795
  %26825 = add <16 x i16> %26824, %26801
  %26826 = add <16 x i16> %26825, %26807
  %26827 = add <16 x i16> %26826, %26813
  %26828 = add <16 x i16> %26827, %26819
  %26829 = add <16 x i16> %26792, %26787
  %26830 = add <16 x i16> %26829, %26798
  %26831 = add <16 x i16> %26830, %26804
  %26832 = add <16 x i16> %26831, %26810
  %26833 = add <16 x i16> %26832, %26816
  %26834 = add <16 x i16> %26833, %26822
  %26835 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26828, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26836 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26834, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26837 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26835, <16 x i16> %26828)
  %26838 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26836, <16 x i16> %26834)
  %26839 = shufflevector <16 x i16> %26837, <16 x i16> %26838, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26840 = lshr <32 x i16> %26839, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26841 = shufflevector <32 x i16> %26840, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26842 = sext i32 %blur_x.s0.x.v1.base.s1526 to i64
  %26843 = add nsw i64 %26842, %26605
  %26844 = getelementptr inbounds i16, i16* %blur_x917, i64 %26843
  %26845 = bitcast i16* %26844 to <16 x i16>*
  store <16 x i16> %26841, <16 x i16>* %26845, align 2, !tbaa !399
  %26846 = shufflevector <32 x i16> %26840, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26847 = getelementptr inbounds i16, i16* %26844, i64 16
  %26848 = bitcast i16* %26847 to <16 x i16>*
  store <16 x i16> %26846, <16 x i16>* %26848, align 2, !tbaa !399
  br label %"consume blur_x1528"

"consume blur_x1528":                             ; preds = %"for blur_y.s0.x.x.rebased1518", %"produce blur_x1525"
  %26849 = sext i32 %b529 to i64
  %26850 = add nsw i64 %26608, %26849
  %26851 = getelementptr inbounds i16, i16* %blur_x917, i64 %26850
  %26852 = bitcast i16* %26851 to <16 x i16>*
  %26853 = load <16 x i16>, <16 x i16>* %26852, align 2, !tbaa !399
  %26854 = getelementptr inbounds i16, i16* %26851, i64 16
  %26855 = bitcast i16* %26854 to <16 x i16>*
  %26856 = load <16 x i16>, <16 x i16>* %26855, align 2, !tbaa !399
  %26857 = add nsw i64 %26611, %26849
  %26858 = getelementptr inbounds i16, i16* %blur_x917, i64 %26857
  %26859 = bitcast i16* %26858 to <16 x i16>*
  %26860 = load <16 x i16>, <16 x i16>* %26859, align 2, !tbaa !399
  %26861 = getelementptr inbounds i16, i16* %26858, i64 16
  %26862 = bitcast i16* %26861 to <16 x i16>*
  %26863 = load <16 x i16>, <16 x i16>* %26862, align 2, !tbaa !399
  %26864 = add nsw i64 %26614, %26849
  %26865 = getelementptr inbounds i16, i16* %blur_x917, i64 %26864
  %26866 = bitcast i16* %26865 to <16 x i16>*
  %26867 = load <16 x i16>, <16 x i16>* %26866, align 2, !tbaa !399
  %26868 = getelementptr inbounds i16, i16* %26865, i64 16
  %26869 = bitcast i16* %26868 to <16 x i16>*
  %26870 = load <16 x i16>, <16 x i16>* %26869, align 2, !tbaa !399
  %26871 = add nsw i64 %26617, %26849
  %26872 = getelementptr inbounds i16, i16* %blur_x917, i64 %26871
  %26873 = bitcast i16* %26872 to <16 x i16>*
  %26874 = load <16 x i16>, <16 x i16>* %26873, align 2, !tbaa !399
  %26875 = getelementptr inbounds i16, i16* %26872, i64 16
  %26876 = bitcast i16* %26875 to <16 x i16>*
  %26877 = load <16 x i16>, <16 x i16>* %26876, align 2, !tbaa !399
  %26878 = add nsw i64 %26620, %26849
  %26879 = getelementptr inbounds i16, i16* %blur_x917, i64 %26878
  %26880 = bitcast i16* %26879 to <16 x i16>*
  %26881 = load <16 x i16>, <16 x i16>* %26880, align 2, !tbaa !399
  %26882 = getelementptr inbounds i16, i16* %26879, i64 16
  %26883 = bitcast i16* %26882 to <16 x i16>*
  %26884 = load <16 x i16>, <16 x i16>* %26883, align 2, !tbaa !399
  %26885 = add nsw i64 %26623, %26849
  %26886 = getelementptr inbounds i16, i16* %blur_x917, i64 %26885
  %26887 = bitcast i16* %26886 to <16 x i16>*
  %26888 = load <16 x i16>, <16 x i16>* %26887, align 2, !tbaa !399
  %26889 = getelementptr inbounds i16, i16* %26886, i64 16
  %26890 = bitcast i16* %26889 to <16 x i16>*
  %26891 = load <16 x i16>, <16 x i16>* %26890, align 2, !tbaa !399
  %26892 = add nsw i64 %26626, %26849
  %26893 = getelementptr inbounds i16, i16* %blur_x917, i64 %26892
  %26894 = bitcast i16* %26893 to <16 x i16>*
  %26895 = load <16 x i16>, <16 x i16>* %26894, align 2, !tbaa !399
  %26896 = getelementptr inbounds i16, i16* %26893, i64 16
  %26897 = bitcast i16* %26896 to <16 x i16>*
  %26898 = load <16 x i16>, <16 x i16>* %26897, align 2, !tbaa !399
  %26899 = add <16 x i16> %26860, %26853
  %26900 = add <16 x i16> %26899, %26867
  %26901 = add <16 x i16> %26900, %26874
  %26902 = add <16 x i16> %26901, %26881
  %26903 = add <16 x i16> %26902, %26888
  %26904 = add <16 x i16> %26903, %26895
  %26905 = add <16 x i16> %26863, %26856
  %26906 = add <16 x i16> %26905, %26870
  %26907 = add <16 x i16> %26906, %26877
  %26908 = add <16 x i16> %26907, %26884
  %26909 = add <16 x i16> %26908, %26891
  %26910 = add <16 x i16> %26909, %26898
  %26911 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26904, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26912 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26910, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %26913 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26911, <16 x i16> %26904)
  %26914 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %26912, <16 x i16> %26910)
  %26915 = shufflevector <16 x i16> %26913, <16 x i16> %26914, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26916 = lshr <32 x i16> %26915, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26917 = shufflevector <32 x i16> %26916, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26918 = add nsw i64 %26630, %26849
  %26919 = getelementptr inbounds i16, i16* %264, i64 %26918
  %26920 = bitcast i16* %26919 to <16 x i16>*
  store <16 x i16> %26917, <16 x i16>* %26920, align 2, !tbaa !401
  %26921 = shufflevector <32 x i16> %26916, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26922 = getelementptr inbounds i16, i16* %26919, i64 16
  %26923 = bitcast i16* %26922 to <16 x i16>*
  store <16 x i16> %26921, <16 x i16>* %26923, align 2, !tbaa !401
  %26924 = add nuw nsw i32 %blur_y.s0.x.x.rebased1520, 1
  %.not2691 = icmp eq i32 %26924, %t1727937
  br i1 %.not2691, label %"end for blur_y.s0.x.x.rebased1519", label %"for blur_y.s0.x.x.rebased1518"

after_bb1529:                                     ; preds = %"end for blur_y.s0.x.x.rebased1519", %"produce blur_x1532"
  br i1 %298, label %"for blur_y.s0.x.x.rebased1544.preheader", label %"end for blur_y.s0.x.x.rebased1545", !prof !386

"for blur_y.s0.x.x.rebased1544.preheader":        ; preds = %after_bb1529
  %26925 = sext i32 %t1726924 to i64
  %26926 = zext i32 %.pre-phi3610 to i64
  %26927 = mul nsw i64 %26926, %314
  %26928 = sub nsw i64 %26927, %294
  %26929 = zext i32 %.pre-phi3606 to i64
  %26930 = mul nsw i64 %26929, %314
  %26931 = sub nsw i64 %26930, %294
  %26932 = zext i32 %.pre-phi3614 to i64
  %26933 = mul nsw i64 %26932, %314
  %26934 = sub nsw i64 %26933, %294
  %26935 = zext i32 %.pre-phi3618 to i64
  %26936 = mul nsw i64 %26935, %314
  %26937 = sub nsw i64 %26936, %294
  %26938 = zext i32 %.pre-phi3622 to i64
  %26939 = mul nsw i64 %26938, %314
  %26940 = sub nsw i64 %26939, %294
  %26941 = zext i32 %.pre-phi3598 to i64
  %26942 = mul nsw i64 %26941, %314
  %26943 = sub nsw i64 %26942, %294
  %26944 = zext i32 %.pre-phi3628 to i64
  %26945 = mul nsw i64 %26944, %314
  %26946 = sub nsw i64 %26945, %294
  %26947 = sext i32 %a367 to i64
  %26948 = add nsw i64 %26947, 10
  %26949 = mul nsw i64 %26948, %315
  %26950 = add nsw i64 %26949, %318
  br label %"for blur_y.s0.x.x.rebased1544"

"produce blur_x1532":                             ; preds = %"end for blur_y.s0.x.x.rebased1519"
  %26951 = getelementptr inbounds i16, i16* %read_input860, i64 %337
  %26952 = getelementptr inbounds i16, i16* %26951, i64 -31
  %26953 = bitcast i16* %26952 to <16 x i16>*
  %26954 = load <16 x i16>, <16 x i16>* %26953, align 2, !tbaa !396
  %26955 = getelementptr inbounds i16, i16* %26951, i64 -15
  %26956 = bitcast i16* %26955 to <16 x i16>*
  %26957 = load <16 x i16>, <16 x i16>* %26956, align 2, !tbaa !396
  %26958 = getelementptr inbounds i16, i16* %26951, i64 -32
  %26959 = bitcast i16* %26958 to <16 x i16>*
  %26960 = load <16 x i16>, <16 x i16>* %26959, align 2, !tbaa !396
  %26961 = getelementptr inbounds i16, i16* %26951, i64 -16
  %26962 = bitcast i16* %26961 to <16 x i16>*
  %26963 = load <16 x i16>, <16 x i16>* %26962, align 2, !tbaa !396
  %26964 = getelementptr inbounds i16, i16* %26951, i64 -30
  %26965 = bitcast i16* %26964 to <16 x i16>*
  %26966 = load <16 x i16>, <16 x i16>* %26965, align 2, !tbaa !396
  %26967 = getelementptr inbounds i16, i16* %26951, i64 -14
  %26968 = bitcast i16* %26967 to <16 x i16>*
  %26969 = load <16 x i16>, <16 x i16>* %26968, align 2, !tbaa !396
  %26970 = getelementptr inbounds i16, i16* %26951, i64 -29
  %26971 = bitcast i16* %26970 to <16 x i16>*
  %26972 = load <16 x i16>, <16 x i16>* %26971, align 2, !tbaa !396
  %26973 = getelementptr inbounds i16, i16* %26951, i64 -13
  %26974 = bitcast i16* %26973 to <16 x i16>*
  %26975 = load <16 x i16>, <16 x i16>* %26974, align 2, !tbaa !396
  %26976 = getelementptr inbounds i16, i16* %26951, i64 -28
  %26977 = bitcast i16* %26976 to <16 x i16>*
  %26978 = load <16 x i16>, <16 x i16>* %26977, align 2, !tbaa !396
  %26979 = getelementptr inbounds i16, i16* %26951, i64 -12
  %26980 = bitcast i16* %26979 to <16 x i16>*
  %26981 = load <16 x i16>, <16 x i16>* %26980, align 2, !tbaa !396
  %26982 = getelementptr inbounds i16, i16* %26951, i64 -26
  %26983 = bitcast i16* %26982 to <16 x i16>*
  %26984 = load <16 x i16>, <16 x i16>* %26983, align 2, !tbaa !396
  %26985 = getelementptr inbounds i16, i16* %26951, i64 -10
  %26986 = bitcast i16* %26985 to <16 x i16>*
  %26987 = load <16 x i16>, <16 x i16>* %26986, align 2, !tbaa !396
  %26988 = getelementptr inbounds i16, i16* %26951, i64 -27
  %26989 = bitcast i16* %26988 to <16 x i16>*
  %26990 = load <16 x i16>, <16 x i16>* %26989, align 2, !tbaa !396
  %26991 = getelementptr inbounds i16, i16* %26951, i64 -11
  %26992 = bitcast i16* %26991 to <16 x i16>*
  %26993 = load <16 x i16>, <16 x i16>* %26992, align 2, !tbaa !396
  %26994 = add <16 x i16> %26960, %26954
  %26995 = add <16 x i16> %26994, %26966
  %26996 = add <16 x i16> %26995, %26972
  %26997 = add <16 x i16> %26996, %26978
  %26998 = add <16 x i16> %26997, %26984
  %26999 = add <16 x i16> %26998, %26990
  %27000 = add <16 x i16> %26963, %26957
  %27001 = add <16 x i16> %27000, %26969
  %27002 = add <16 x i16> %27001, %26975
  %27003 = add <16 x i16> %27002, %26981
  %27004 = add <16 x i16> %27003, %26987
  %27005 = add <16 x i16> %27004, %26993
  %27006 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26999, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27007 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27005, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27008 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27006, <16 x i16> %26999)
  %27009 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27007, <16 x i16> %27005)
  %27010 = shufflevector <16 x i16> %27008, <16 x i16> %27009, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27011 = lshr <32 x i16> %27010, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27012 = shufflevector <32 x i16> %27011, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27013 = zext i32 %.pre-phi3598 to i64
  %27014 = mul nsw i64 %295, %27013
  %27015 = add nsw i64 %297, %27014
  %27016 = getelementptr inbounds i16, i16* %blur_x917, i64 %27015
  %27017 = getelementptr inbounds i16, i16* %27016, i64 -32
  %27018 = bitcast i16* %27017 to <16 x i16>*
  store <16 x i16> %27012, <16 x i16>* %27018, align 2, !tbaa !399
  %27019 = shufflevector <32 x i16> %27011, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27020 = getelementptr inbounds i16, i16* %27016, i64 -16
  %27021 = bitcast i16* %27020 to <16 x i16>*
  store <16 x i16> %27019, <16 x i16>* %27021, align 2, !tbaa !399
  %27022 = zext i32 %.pre-phi3610 to i64
  %27023 = mul nsw i64 %27022, %314
  %27024 = add nsw i64 %27023, %292
  %27025 = getelementptr inbounds i16, i16* %blur_x917, i64 %27024
  %27026 = getelementptr inbounds i16, i16* %27025, i64 -32
  %27027 = bitcast i16* %27026 to <16 x i16>*
  %27028 = load <16 x i16>, <16 x i16>* %27027, align 2, !tbaa !399
  %27029 = getelementptr inbounds i16, i16* %27025, i64 -16
  %27030 = bitcast i16* %27029 to <16 x i16>*
  %27031 = load <16 x i16>, <16 x i16>* %27030, align 2, !tbaa !399
  %27032 = zext i32 %.pre-phi3606 to i64
  %27033 = mul nsw i64 %27032, %314
  %27034 = add nsw i64 %27033, %292
  %27035 = getelementptr inbounds i16, i16* %blur_x917, i64 %27034
  %27036 = getelementptr inbounds i16, i16* %27035, i64 -32
  %27037 = bitcast i16* %27036 to <16 x i16>*
  %27038 = load <16 x i16>, <16 x i16>* %27037, align 2, !tbaa !399
  %27039 = getelementptr inbounds i16, i16* %27035, i64 -16
  %27040 = bitcast i16* %27039 to <16 x i16>*
  %27041 = load <16 x i16>, <16 x i16>* %27040, align 2, !tbaa !399
  %27042 = zext i32 %.pre-phi3614 to i64
  %27043 = mul nsw i64 %27042, %314
  %27044 = add nsw i64 %27043, %292
  %27045 = getelementptr inbounds i16, i16* %blur_x917, i64 %27044
  %27046 = getelementptr inbounds i16, i16* %27045, i64 -32
  %27047 = bitcast i16* %27046 to <16 x i16>*
  %27048 = load <16 x i16>, <16 x i16>* %27047, align 2, !tbaa !399
  %27049 = getelementptr inbounds i16, i16* %27045, i64 -16
  %27050 = bitcast i16* %27049 to <16 x i16>*
  %27051 = load <16 x i16>, <16 x i16>* %27050, align 2, !tbaa !399
  %27052 = zext i32 %.pre-phi3618 to i64
  %27053 = mul nsw i64 %27052, %314
  %27054 = add nsw i64 %27053, %292
  %27055 = getelementptr inbounds i16, i16* %blur_x917, i64 %27054
  %27056 = getelementptr inbounds i16, i16* %27055, i64 -32
  %27057 = bitcast i16* %27056 to <16 x i16>*
  %27058 = load <16 x i16>, <16 x i16>* %27057, align 2, !tbaa !399
  %27059 = getelementptr inbounds i16, i16* %27055, i64 -16
  %27060 = bitcast i16* %27059 to <16 x i16>*
  %27061 = load <16 x i16>, <16 x i16>* %27060, align 2, !tbaa !399
  %27062 = zext i32 %.pre-phi3622 to i64
  %27063 = mul nsw i64 %27062, %314
  %27064 = add nsw i64 %27063, %292
  %27065 = getelementptr inbounds i16, i16* %blur_x917, i64 %27064
  %27066 = getelementptr inbounds i16, i16* %27065, i64 -32
  %27067 = bitcast i16* %27066 to <16 x i16>*
  %27068 = load <16 x i16>, <16 x i16>* %27067, align 2, !tbaa !399
  %27069 = getelementptr inbounds i16, i16* %27065, i64 -16
  %27070 = bitcast i16* %27069 to <16 x i16>*
  %27071 = load <16 x i16>, <16 x i16>* %27070, align 2, !tbaa !399
  %27072 = mul nsw i64 %27013, %314
  %27073 = add nsw i64 %27072, %292
  %27074 = getelementptr inbounds i16, i16* %blur_x917, i64 %27073
  %27075 = getelementptr inbounds i16, i16* %27074, i64 -32
  %27076 = bitcast i16* %27075 to <16 x i16>*
  %27077 = load <16 x i16>, <16 x i16>* %27076, align 2, !tbaa !399
  %27078 = getelementptr inbounds i16, i16* %27074, i64 -16
  %27079 = bitcast i16* %27078 to <16 x i16>*
  %27080 = load <16 x i16>, <16 x i16>* %27079, align 2, !tbaa !399
  %27081 = zext i32 %.pre-phi3628 to i64
  %27082 = mul nsw i64 %27081, %314
  %27083 = add nsw i64 %27082, %292
  %27084 = getelementptr inbounds i16, i16* %blur_x917, i64 %27083
  %27085 = getelementptr inbounds i16, i16* %27084, i64 -32
  %27086 = bitcast i16* %27085 to <16 x i16>*
  %27087 = load <16 x i16>, <16 x i16>* %27086, align 2, !tbaa !399
  %27088 = getelementptr inbounds i16, i16* %27084, i64 -16
  %27089 = bitcast i16* %27088 to <16 x i16>*
  %27090 = load <16 x i16>, <16 x i16>* %27089, align 2, !tbaa !399
  %27091 = add <16 x i16> %27038, %27028
  %27092 = add <16 x i16> %27091, %27048
  %27093 = add <16 x i16> %27092, %27058
  %27094 = add <16 x i16> %27093, %27068
  %27095 = add <16 x i16> %27094, %27077
  %27096 = add <16 x i16> %27095, %27087
  %27097 = add <16 x i16> %27041, %27031
  %27098 = add <16 x i16> %27097, %27051
  %27099 = add <16 x i16> %27098, %27061
  %27100 = add <16 x i16> %27099, %27071
  %27101 = add <16 x i16> %27100, %27080
  %27102 = add <16 x i16> %27101, %27090
  %27103 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27096, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27104 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27102, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27105 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27103, <16 x i16> %27096)
  %27106 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27104, <16 x i16> %27102)
  %27107 = shufflevector <16 x i16> %27105, <16 x i16> %27106, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27108 = lshr <32 x i16> %27107, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27109 = shufflevector <32 x i16> %27108, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27110 = sext i32 %a367 to i64
  %27111 = add nsw i64 %27110, 10
  %27112 = mul nsw i64 %27111, %315
  %27113 = add nsw i64 %317, %27112
  %27114 = getelementptr inbounds i16, i16* %264, i64 %27113
  %27115 = getelementptr inbounds i16, i16* %27114, i64 -32
  %27116 = bitcast i16* %27115 to <16 x i16>*
  store <16 x i16> %27109, <16 x i16>* %27116, align 2, !tbaa !401
  %27117 = shufflevector <32 x i16> %27108, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27118 = getelementptr inbounds i16, i16* %27114, i64 -16
  %27119 = bitcast i16* %27118 to <16 x i16>*
  store <16 x i16> %27117, <16 x i16>* %27119, align 2, !tbaa !401
  br label %after_bb1529

"for blur_y.s0.x.x.rebased1544":                  ; preds = %"for blur_y.s0.x.x.rebased1544.preheader", %"consume blur_x1553"
  %indvars.iv3435 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1544.preheader" ], [ %indvars.iv.next3436, %"consume blur_x1553" ]
  %27120 = add nsw i64 %indvars.iv3435, %299
  %27121 = icmp slt i64 %27120, 1
  %27122 = trunc i64 %27120 to i32
  %27123 = shl nsw i32 %27122, 5
  %27124 = icmp sgt i32 %202, %27123
  %27125 = or i1 %27121, %27124
  br i1 %27125, label %"produce blur_x1551", label %"for blur_y.s0.x.x.rebased1544.consume blur_x1553_crit_edge"

"for blur_y.s0.x.x.rebased1544.consume blur_x1553_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1544"
  %.pre3647 = shl nsw i64 %27120, 5
  br label %"consume blur_x1553"

"end for blur_y.s0.x.x.rebased1545":              ; preds = %"consume blur_x1553", %after_bb1529
  br i1 %300, label %"for blur_y.s0.x.x.rebased1561.preheader", label %"end for blur_y.s0.x.x.rebased1562", !prof !386

"for blur_y.s0.x.x.rebased1561.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1545"
  %27126 = sext i32 %t1726924 to i64
  %27127 = zext i32 %.pre-phi3610 to i64
  %27128 = mul nsw i64 %27127, %314
  %27129 = sub nsw i64 %27128, %294
  %27130 = zext i32 %.pre-phi3606 to i64
  %27131 = mul nsw i64 %27130, %314
  %27132 = sub nsw i64 %27131, %294
  %27133 = zext i32 %.pre-phi3614 to i64
  %27134 = mul nsw i64 %27133, %314
  %27135 = sub nsw i64 %27134, %294
  %27136 = zext i32 %.pre-phi3618 to i64
  %27137 = mul nsw i64 %27136, %314
  %27138 = sub nsw i64 %27137, %294
  %27139 = zext i32 %.pre-phi3622 to i64
  %27140 = mul nsw i64 %27139, %314
  %27141 = sub nsw i64 %27140, %294
  %27142 = zext i32 %.pre-phi3598 to i64
  %27143 = mul nsw i64 %27142, %314
  %27144 = sub nsw i64 %27143, %294
  %27145 = zext i32 %.pre-phi3628 to i64
  %27146 = mul nsw i64 %27145, %314
  %27147 = sub nsw i64 %27146, %294
  %27148 = sext i32 %a367 to i64
  %27149 = add nsw i64 %27148, 10
  %27150 = mul nsw i64 %27149, %315
  %27151 = add nsw i64 %27150, %318
  br label %"for blur_y.s0.x.x.rebased1561"

"produce blur_x1551":                             ; preds = %"for blur_y.s0.x.x.rebased1544"
  %t9121552 = add nsw i32 %27123, %t19211541
  %27152 = sext i32 %t9121552 to i64
  %27153 = getelementptr inbounds i16, i16* %read_input860, i64 %27152
  %27154 = getelementptr inbounds i16, i16* %27153, i64 1
  %27155 = bitcast i16* %27154 to <16 x i16>*
  %27156 = load <16 x i16>, <16 x i16>* %27155, align 2, !tbaa !396
  %27157 = getelementptr inbounds i16, i16* %27153, i64 17
  %27158 = bitcast i16* %27157 to <16 x i16>*
  %27159 = load <16 x i16>, <16 x i16>* %27158, align 2, !tbaa !396
  %27160 = bitcast i16* %27153 to <16 x i16>*
  %27161 = load <16 x i16>, <16 x i16>* %27160, align 2, !tbaa !396
  %27162 = getelementptr inbounds i16, i16* %27153, i64 16
  %27163 = bitcast i16* %27162 to <16 x i16>*
  %27164 = load <16 x i16>, <16 x i16>* %27163, align 2, !tbaa !396
  %27165 = getelementptr inbounds i16, i16* %27153, i64 2
  %27166 = bitcast i16* %27165 to <16 x i16>*
  %27167 = load <16 x i16>, <16 x i16>* %27166, align 2, !tbaa !396
  %27168 = getelementptr inbounds i16, i16* %27153, i64 18
  %27169 = bitcast i16* %27168 to <16 x i16>*
  %27170 = load <16 x i16>, <16 x i16>* %27169, align 2, !tbaa !396
  %27171 = getelementptr inbounds i16, i16* %27153, i64 3
  %27172 = bitcast i16* %27171 to <16 x i16>*
  %27173 = load <16 x i16>, <16 x i16>* %27172, align 2, !tbaa !396
  %27174 = getelementptr inbounds i16, i16* %27153, i64 19
  %27175 = bitcast i16* %27174 to <16 x i16>*
  %27176 = load <16 x i16>, <16 x i16>* %27175, align 2, !tbaa !396
  %27177 = getelementptr inbounds i16, i16* %27153, i64 4
  %27178 = bitcast i16* %27177 to <16 x i16>*
  %27179 = load <16 x i16>, <16 x i16>* %27178, align 2, !tbaa !396
  %27180 = getelementptr inbounds i16, i16* %27153, i64 20
  %27181 = bitcast i16* %27180 to <16 x i16>*
  %27182 = load <16 x i16>, <16 x i16>* %27181, align 2, !tbaa !396
  %27183 = getelementptr inbounds i16, i16* %27153, i64 6
  %27184 = bitcast i16* %27183 to <16 x i16>*
  %27185 = load <16 x i16>, <16 x i16>* %27184, align 2, !tbaa !396
  %27186 = getelementptr inbounds i16, i16* %27153, i64 22
  %27187 = bitcast i16* %27186 to <16 x i16>*
  %27188 = load <16 x i16>, <16 x i16>* %27187, align 2, !tbaa !396
  %27189 = getelementptr inbounds i16, i16* %27153, i64 5
  %27190 = bitcast i16* %27189 to <16 x i16>*
  %27191 = load <16 x i16>, <16 x i16>* %27190, align 2, !tbaa !396
  %27192 = getelementptr inbounds i16, i16* %27153, i64 21
  %27193 = bitcast i16* %27192 to <16 x i16>*
  %27194 = load <16 x i16>, <16 x i16>* %27193, align 2, !tbaa !396
  %27195 = add <16 x i16> %27161, %27156
  %27196 = add <16 x i16> %27195, %27167
  %27197 = add <16 x i16> %27196, %27173
  %27198 = add <16 x i16> %27197, %27179
  %27199 = add <16 x i16> %27198, %27185
  %27200 = add <16 x i16> %27199, %27191
  %27201 = add <16 x i16> %27164, %27159
  %27202 = add <16 x i16> %27201, %27170
  %27203 = add <16 x i16> %27202, %27176
  %27204 = add <16 x i16> %27203, %27182
  %27205 = add <16 x i16> %27204, %27188
  %27206 = add <16 x i16> %27205, %27194
  %27207 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27200, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27208 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27206, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27209 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27207, <16 x i16> %27200)
  %27210 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27208, <16 x i16> %27206)
  %27211 = shufflevector <16 x i16> %27209, <16 x i16> %27210, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27212 = lshr <32 x i16> %27211, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27213 = shufflevector <32 x i16> %27212, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27214 = shl nsw i64 %27120, 5
  %27215 = add nsw i64 %27214, %26925
  %27216 = getelementptr inbounds i16, i16* %blur_x917, i64 %27215
  %27217 = bitcast i16* %27216 to <16 x i16>*
  store <16 x i16> %27213, <16 x i16>* %27217, align 2, !tbaa !399
  %27218 = shufflevector <32 x i16> %27212, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27219 = getelementptr inbounds i16, i16* %27216, i64 16
  %27220 = bitcast i16* %27219 to <16 x i16>*
  store <16 x i16> %27218, <16 x i16>* %27220, align 2, !tbaa !399
  br label %"consume blur_x1553"

"consume blur_x1553":                             ; preds = %"for blur_y.s0.x.x.rebased1544.consume blur_x1553_crit_edge", %"produce blur_x1551"
  %.pre-phi3648 = phi i64 [ %.pre3647, %"for blur_y.s0.x.x.rebased1544.consume blur_x1553_crit_edge" ], [ %27214, %"produce blur_x1551" ]
  %27221 = add nsw i64 %26928, %.pre-phi3648
  %27222 = getelementptr inbounds i16, i16* %blur_x917, i64 %27221
  %27223 = bitcast i16* %27222 to <16 x i16>*
  %27224 = load <16 x i16>, <16 x i16>* %27223, align 2, !tbaa !399
  %27225 = getelementptr inbounds i16, i16* %27222, i64 16
  %27226 = bitcast i16* %27225 to <16 x i16>*
  %27227 = load <16 x i16>, <16 x i16>* %27226, align 2, !tbaa !399
  %27228 = add nsw i64 %26931, %.pre-phi3648
  %27229 = getelementptr inbounds i16, i16* %blur_x917, i64 %27228
  %27230 = bitcast i16* %27229 to <16 x i16>*
  %27231 = load <16 x i16>, <16 x i16>* %27230, align 2, !tbaa !399
  %27232 = getelementptr inbounds i16, i16* %27229, i64 16
  %27233 = bitcast i16* %27232 to <16 x i16>*
  %27234 = load <16 x i16>, <16 x i16>* %27233, align 2, !tbaa !399
  %27235 = add nsw i64 %26934, %.pre-phi3648
  %27236 = getelementptr inbounds i16, i16* %blur_x917, i64 %27235
  %27237 = bitcast i16* %27236 to <16 x i16>*
  %27238 = load <16 x i16>, <16 x i16>* %27237, align 2, !tbaa !399
  %27239 = getelementptr inbounds i16, i16* %27236, i64 16
  %27240 = bitcast i16* %27239 to <16 x i16>*
  %27241 = load <16 x i16>, <16 x i16>* %27240, align 2, !tbaa !399
  %27242 = add nsw i64 %26937, %.pre-phi3648
  %27243 = getelementptr inbounds i16, i16* %blur_x917, i64 %27242
  %27244 = bitcast i16* %27243 to <16 x i16>*
  %27245 = load <16 x i16>, <16 x i16>* %27244, align 2, !tbaa !399
  %27246 = getelementptr inbounds i16, i16* %27243, i64 16
  %27247 = bitcast i16* %27246 to <16 x i16>*
  %27248 = load <16 x i16>, <16 x i16>* %27247, align 2, !tbaa !399
  %27249 = add nsw i64 %26940, %.pre-phi3648
  %27250 = getelementptr inbounds i16, i16* %blur_x917, i64 %27249
  %27251 = bitcast i16* %27250 to <16 x i16>*
  %27252 = load <16 x i16>, <16 x i16>* %27251, align 2, !tbaa !399
  %27253 = getelementptr inbounds i16, i16* %27250, i64 16
  %27254 = bitcast i16* %27253 to <16 x i16>*
  %27255 = load <16 x i16>, <16 x i16>* %27254, align 2, !tbaa !399
  %27256 = add nsw i64 %26943, %.pre-phi3648
  %27257 = getelementptr inbounds i16, i16* %blur_x917, i64 %27256
  %27258 = bitcast i16* %27257 to <16 x i16>*
  %27259 = load <16 x i16>, <16 x i16>* %27258, align 2, !tbaa !399
  %27260 = getelementptr inbounds i16, i16* %27257, i64 16
  %27261 = bitcast i16* %27260 to <16 x i16>*
  %27262 = load <16 x i16>, <16 x i16>* %27261, align 2, !tbaa !399
  %27263 = add nsw i64 %26946, %.pre-phi3648
  %27264 = getelementptr inbounds i16, i16* %blur_x917, i64 %27263
  %27265 = bitcast i16* %27264 to <16 x i16>*
  %27266 = load <16 x i16>, <16 x i16>* %27265, align 2, !tbaa !399
  %27267 = getelementptr inbounds i16, i16* %27264, i64 16
  %27268 = bitcast i16* %27267 to <16 x i16>*
  %27269 = load <16 x i16>, <16 x i16>* %27268, align 2, !tbaa !399
  %27270 = add <16 x i16> %27231, %27224
  %27271 = add <16 x i16> %27270, %27238
  %27272 = add <16 x i16> %27271, %27245
  %27273 = add <16 x i16> %27272, %27252
  %27274 = add <16 x i16> %27273, %27259
  %27275 = add <16 x i16> %27274, %27266
  %27276 = add <16 x i16> %27234, %27227
  %27277 = add <16 x i16> %27276, %27241
  %27278 = add <16 x i16> %27277, %27248
  %27279 = add <16 x i16> %27278, %27255
  %27280 = add <16 x i16> %27279, %27262
  %27281 = add <16 x i16> %27280, %27269
  %27282 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27275, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27283 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27281, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27284 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27282, <16 x i16> %27275)
  %27285 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27283, <16 x i16> %27281)
  %27286 = shufflevector <16 x i16> %27284, <16 x i16> %27285, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27287 = lshr <32 x i16> %27286, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27288 = shufflevector <32 x i16> %27287, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27289 = add nsw i64 %26950, %.pre-phi3648
  %27290 = getelementptr inbounds i16, i16* %264, i64 %27289
  %27291 = bitcast i16* %27290 to <16 x i16>*
  store <16 x i16> %27288, <16 x i16>* %27291, align 2, !tbaa !401
  %27292 = shufflevector <32 x i16> %27287, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27293 = getelementptr inbounds i16, i16* %27290, i64 16
  %27294 = bitcast i16* %27293 to <16 x i16>*
  store <16 x i16> %27292, <16 x i16>* %27294, align 2, !tbaa !401
  %indvars.iv.next3436 = add nuw nsw i64 %indvars.iv3435, 1
  %.not2690 = icmp eq i64 %indvars.iv.next3436, %386
  br i1 %.not2690, label %"end for blur_y.s0.x.x.rebased1545", label %"for blur_y.s0.x.x.rebased1544"

"for blur_y.s0.x.x.rebased1561":                  ; preds = %"for blur_y.s0.x.x.rebased1561.preheader", %"consume blur_x1571"
  %blur_y.s0.x.x.rebased1563 = phi i32 [ %27445, %"consume blur_x1571" ], [ 0, %"for blur_y.s0.x.x.rebased1561.preheader" ]
  %27295 = add nsw i32 %blur_y.s0.x.x.rebased1563, %t1670852
  %a530 = shl nsw i32 %27295, 5
  %27296 = icmp sgt i32 %a355, %a530
  %b536 = select i1 %27296, i32 %a530, i32 %a355
  %27297 = icmp slt i32 %27295, 1
  %27298 = icmp sgt i32 %202, %a530
  %27299 = or i1 %27297, %27298
  br i1 %27299, label %"produce blur_x1568", label %"consume blur_x1571"

"end for blur_y.s0.x.x.rebased1562":              ; preds = %"consume blur_x1571", %"end for blur_y.s0.x.x.rebased1545"
  br i1 %232, label %"produce blur_x1575", label %after_bb1572

"produce blur_x1568":                             ; preds = %"for blur_y.s0.x.x.rebased1561"
  %27300 = icmp slt i32 %b536, %202
  %blur_x.s0.x.v1.base.s1569 = select i1 %27300, i32 %b536, i32 %202
  %t9171570 = add nsw i32 %blur_x.s0.x.v1.base.s1569, %t19211541
  %27301 = sext i32 %t9171570 to i64
  %27302 = getelementptr inbounds i16, i16* %read_input860, i64 %27301
  %27303 = getelementptr inbounds i16, i16* %27302, i64 1
  %27304 = bitcast i16* %27303 to <16 x i16>*
  %27305 = load <16 x i16>, <16 x i16>* %27304, align 2, !tbaa !396
  %27306 = getelementptr inbounds i16, i16* %27302, i64 17
  %27307 = bitcast i16* %27306 to <16 x i16>*
  %27308 = load <16 x i16>, <16 x i16>* %27307, align 2, !tbaa !396
  %27309 = bitcast i16* %27302 to <16 x i16>*
  %27310 = load <16 x i16>, <16 x i16>* %27309, align 2, !tbaa !396
  %27311 = getelementptr inbounds i16, i16* %27302, i64 16
  %27312 = bitcast i16* %27311 to <16 x i16>*
  %27313 = load <16 x i16>, <16 x i16>* %27312, align 2, !tbaa !396
  %27314 = getelementptr inbounds i16, i16* %27302, i64 2
  %27315 = bitcast i16* %27314 to <16 x i16>*
  %27316 = load <16 x i16>, <16 x i16>* %27315, align 2, !tbaa !396
  %27317 = getelementptr inbounds i16, i16* %27302, i64 18
  %27318 = bitcast i16* %27317 to <16 x i16>*
  %27319 = load <16 x i16>, <16 x i16>* %27318, align 2, !tbaa !396
  %27320 = getelementptr inbounds i16, i16* %27302, i64 3
  %27321 = bitcast i16* %27320 to <16 x i16>*
  %27322 = load <16 x i16>, <16 x i16>* %27321, align 2, !tbaa !396
  %27323 = getelementptr inbounds i16, i16* %27302, i64 19
  %27324 = bitcast i16* %27323 to <16 x i16>*
  %27325 = load <16 x i16>, <16 x i16>* %27324, align 2, !tbaa !396
  %27326 = getelementptr inbounds i16, i16* %27302, i64 4
  %27327 = bitcast i16* %27326 to <16 x i16>*
  %27328 = load <16 x i16>, <16 x i16>* %27327, align 2, !tbaa !396
  %27329 = getelementptr inbounds i16, i16* %27302, i64 20
  %27330 = bitcast i16* %27329 to <16 x i16>*
  %27331 = load <16 x i16>, <16 x i16>* %27330, align 2, !tbaa !396
  %27332 = getelementptr inbounds i16, i16* %27302, i64 6
  %27333 = bitcast i16* %27332 to <16 x i16>*
  %27334 = load <16 x i16>, <16 x i16>* %27333, align 2, !tbaa !396
  %27335 = getelementptr inbounds i16, i16* %27302, i64 22
  %27336 = bitcast i16* %27335 to <16 x i16>*
  %27337 = load <16 x i16>, <16 x i16>* %27336, align 2, !tbaa !396
  %27338 = getelementptr inbounds i16, i16* %27302, i64 5
  %27339 = bitcast i16* %27338 to <16 x i16>*
  %27340 = load <16 x i16>, <16 x i16>* %27339, align 2, !tbaa !396
  %27341 = getelementptr inbounds i16, i16* %27302, i64 21
  %27342 = bitcast i16* %27341 to <16 x i16>*
  %27343 = load <16 x i16>, <16 x i16>* %27342, align 2, !tbaa !396
  %27344 = add <16 x i16> %27310, %27305
  %27345 = add <16 x i16> %27344, %27316
  %27346 = add <16 x i16> %27345, %27322
  %27347 = add <16 x i16> %27346, %27328
  %27348 = add <16 x i16> %27347, %27334
  %27349 = add <16 x i16> %27348, %27340
  %27350 = add <16 x i16> %27313, %27308
  %27351 = add <16 x i16> %27350, %27319
  %27352 = add <16 x i16> %27351, %27325
  %27353 = add <16 x i16> %27352, %27331
  %27354 = add <16 x i16> %27353, %27337
  %27355 = add <16 x i16> %27354, %27343
  %27356 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27349, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27357 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27355, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27358 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27356, <16 x i16> %27349)
  %27359 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27357, <16 x i16> %27355)
  %27360 = shufflevector <16 x i16> %27358, <16 x i16> %27359, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27361 = lshr <32 x i16> %27360, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27362 = shufflevector <32 x i16> %27361, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27363 = sext i32 %blur_x.s0.x.v1.base.s1569 to i64
  %27364 = add nsw i64 %27363, %27126
  %27365 = getelementptr inbounds i16, i16* %blur_x917, i64 %27364
  %27366 = bitcast i16* %27365 to <16 x i16>*
  store <16 x i16> %27362, <16 x i16>* %27366, align 2, !tbaa !399
  %27367 = shufflevector <32 x i16> %27361, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27368 = getelementptr inbounds i16, i16* %27365, i64 16
  %27369 = bitcast i16* %27368 to <16 x i16>*
  store <16 x i16> %27367, <16 x i16>* %27369, align 2, !tbaa !399
  br label %"consume blur_x1571"

"consume blur_x1571":                             ; preds = %"for blur_y.s0.x.x.rebased1561", %"produce blur_x1568"
  %27370 = sext i32 %b536 to i64
  %27371 = add nsw i64 %27129, %27370
  %27372 = getelementptr inbounds i16, i16* %blur_x917, i64 %27371
  %27373 = bitcast i16* %27372 to <16 x i16>*
  %27374 = load <16 x i16>, <16 x i16>* %27373, align 2, !tbaa !399
  %27375 = getelementptr inbounds i16, i16* %27372, i64 16
  %27376 = bitcast i16* %27375 to <16 x i16>*
  %27377 = load <16 x i16>, <16 x i16>* %27376, align 2, !tbaa !399
  %27378 = add nsw i64 %27132, %27370
  %27379 = getelementptr inbounds i16, i16* %blur_x917, i64 %27378
  %27380 = bitcast i16* %27379 to <16 x i16>*
  %27381 = load <16 x i16>, <16 x i16>* %27380, align 2, !tbaa !399
  %27382 = getelementptr inbounds i16, i16* %27379, i64 16
  %27383 = bitcast i16* %27382 to <16 x i16>*
  %27384 = load <16 x i16>, <16 x i16>* %27383, align 2, !tbaa !399
  %27385 = add nsw i64 %27135, %27370
  %27386 = getelementptr inbounds i16, i16* %blur_x917, i64 %27385
  %27387 = bitcast i16* %27386 to <16 x i16>*
  %27388 = load <16 x i16>, <16 x i16>* %27387, align 2, !tbaa !399
  %27389 = getelementptr inbounds i16, i16* %27386, i64 16
  %27390 = bitcast i16* %27389 to <16 x i16>*
  %27391 = load <16 x i16>, <16 x i16>* %27390, align 2, !tbaa !399
  %27392 = add nsw i64 %27138, %27370
  %27393 = getelementptr inbounds i16, i16* %blur_x917, i64 %27392
  %27394 = bitcast i16* %27393 to <16 x i16>*
  %27395 = load <16 x i16>, <16 x i16>* %27394, align 2, !tbaa !399
  %27396 = getelementptr inbounds i16, i16* %27393, i64 16
  %27397 = bitcast i16* %27396 to <16 x i16>*
  %27398 = load <16 x i16>, <16 x i16>* %27397, align 2, !tbaa !399
  %27399 = add nsw i64 %27141, %27370
  %27400 = getelementptr inbounds i16, i16* %blur_x917, i64 %27399
  %27401 = bitcast i16* %27400 to <16 x i16>*
  %27402 = load <16 x i16>, <16 x i16>* %27401, align 2, !tbaa !399
  %27403 = getelementptr inbounds i16, i16* %27400, i64 16
  %27404 = bitcast i16* %27403 to <16 x i16>*
  %27405 = load <16 x i16>, <16 x i16>* %27404, align 2, !tbaa !399
  %27406 = add nsw i64 %27144, %27370
  %27407 = getelementptr inbounds i16, i16* %blur_x917, i64 %27406
  %27408 = bitcast i16* %27407 to <16 x i16>*
  %27409 = load <16 x i16>, <16 x i16>* %27408, align 2, !tbaa !399
  %27410 = getelementptr inbounds i16, i16* %27407, i64 16
  %27411 = bitcast i16* %27410 to <16 x i16>*
  %27412 = load <16 x i16>, <16 x i16>* %27411, align 2, !tbaa !399
  %27413 = add nsw i64 %27147, %27370
  %27414 = getelementptr inbounds i16, i16* %blur_x917, i64 %27413
  %27415 = bitcast i16* %27414 to <16 x i16>*
  %27416 = load <16 x i16>, <16 x i16>* %27415, align 2, !tbaa !399
  %27417 = getelementptr inbounds i16, i16* %27414, i64 16
  %27418 = bitcast i16* %27417 to <16 x i16>*
  %27419 = load <16 x i16>, <16 x i16>* %27418, align 2, !tbaa !399
  %27420 = add <16 x i16> %27381, %27374
  %27421 = add <16 x i16> %27420, %27388
  %27422 = add <16 x i16> %27421, %27395
  %27423 = add <16 x i16> %27422, %27402
  %27424 = add <16 x i16> %27423, %27409
  %27425 = add <16 x i16> %27424, %27416
  %27426 = add <16 x i16> %27384, %27377
  %27427 = add <16 x i16> %27426, %27391
  %27428 = add <16 x i16> %27427, %27398
  %27429 = add <16 x i16> %27428, %27405
  %27430 = add <16 x i16> %27429, %27412
  %27431 = add <16 x i16> %27430, %27419
  %27432 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27425, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27433 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27431, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27434 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27432, <16 x i16> %27425)
  %27435 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27433, <16 x i16> %27431)
  %27436 = shufflevector <16 x i16> %27434, <16 x i16> %27435, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27437 = lshr <32 x i16> %27436, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27438 = shufflevector <32 x i16> %27437, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27439 = add nsw i64 %27151, %27370
  %27440 = getelementptr inbounds i16, i16* %264, i64 %27439
  %27441 = bitcast i16* %27440 to <16 x i16>*
  store <16 x i16> %27438, <16 x i16>* %27441, align 2, !tbaa !401
  %27442 = shufflevector <32 x i16> %27437, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27443 = getelementptr inbounds i16, i16* %27440, i64 16
  %27444 = bitcast i16* %27443 to <16 x i16>*
  store <16 x i16> %27442, <16 x i16>* %27444, align 2, !tbaa !401
  %27445 = add nuw nsw i32 %blur_y.s0.x.x.rebased1563, 1
  %.not2689 = icmp eq i32 %27445, %t1727937
  br i1 %.not2689, label %"end for blur_y.s0.x.x.rebased1562", label %"for blur_y.s0.x.x.rebased1561"

after_bb1572:                                     ; preds = %"end for blur_y.s0.x.x.rebased1562", %"produce blur_x1575"
  br i1 %298, label %"for blur_y.s0.x.x.rebased1587.preheader", label %"end for blur_y.s0.x.x.rebased1588", !prof !386

"for blur_y.s0.x.x.rebased1587.preheader":        ; preds = %after_bb1572
  %27446 = sext i32 %t1732954 to i64
  %27447 = zext i32 %.pre-phi3614 to i64
  %27448 = mul nsw i64 %27447, %314
  %27449 = sub nsw i64 %27448, %294
  %27450 = zext i32 %.pre-phi3610 to i64
  %27451 = mul nsw i64 %27450, %314
  %27452 = sub nsw i64 %27451, %294
  %27453 = zext i32 %.pre-phi3618 to i64
  %27454 = mul nsw i64 %27453, %314
  %27455 = sub nsw i64 %27454, %294
  %27456 = zext i32 %.pre-phi3622 to i64
  %27457 = mul nsw i64 %27456, %314
  %27458 = sub nsw i64 %27457, %294
  %27459 = zext i32 %.pre-phi3628 to i64
  %27460 = mul nsw i64 %27459, %314
  %27461 = sub nsw i64 %27460, %294
  %27462 = zext i32 %.pre-phi3602 to i64
  %27463 = mul nsw i64 %27462, %314
  %27464 = sub nsw i64 %27463, %294
  %27465 = zext i32 %.pre-phi3598 to i64
  %27466 = mul nsw i64 %27465, %314
  %27467 = sub nsw i64 %27466, %294
  %27468 = sext i32 %a367 to i64
  %27469 = add nsw i64 %27468, 11
  %27470 = mul nsw i64 %27469, %315
  %27471 = add nsw i64 %27470, %318
  br label %"for blur_y.s0.x.x.rebased1587"

"produce blur_x1575":                             ; preds = %"end for blur_y.s0.x.x.rebased1562"
  %27472 = getelementptr inbounds i16, i16* %read_input860, i64 %339
  %27473 = getelementptr inbounds i16, i16* %27472, i64 -31
  %27474 = bitcast i16* %27473 to <16 x i16>*
  %27475 = load <16 x i16>, <16 x i16>* %27474, align 2, !tbaa !396
  %27476 = getelementptr inbounds i16, i16* %27472, i64 -15
  %27477 = bitcast i16* %27476 to <16 x i16>*
  %27478 = load <16 x i16>, <16 x i16>* %27477, align 2, !tbaa !396
  %27479 = getelementptr inbounds i16, i16* %27472, i64 -32
  %27480 = bitcast i16* %27479 to <16 x i16>*
  %27481 = load <16 x i16>, <16 x i16>* %27480, align 2, !tbaa !396
  %27482 = getelementptr inbounds i16, i16* %27472, i64 -16
  %27483 = bitcast i16* %27482 to <16 x i16>*
  %27484 = load <16 x i16>, <16 x i16>* %27483, align 2, !tbaa !396
  %27485 = getelementptr inbounds i16, i16* %27472, i64 -30
  %27486 = bitcast i16* %27485 to <16 x i16>*
  %27487 = load <16 x i16>, <16 x i16>* %27486, align 2, !tbaa !396
  %27488 = getelementptr inbounds i16, i16* %27472, i64 -14
  %27489 = bitcast i16* %27488 to <16 x i16>*
  %27490 = load <16 x i16>, <16 x i16>* %27489, align 2, !tbaa !396
  %27491 = getelementptr inbounds i16, i16* %27472, i64 -29
  %27492 = bitcast i16* %27491 to <16 x i16>*
  %27493 = load <16 x i16>, <16 x i16>* %27492, align 2, !tbaa !396
  %27494 = getelementptr inbounds i16, i16* %27472, i64 -13
  %27495 = bitcast i16* %27494 to <16 x i16>*
  %27496 = load <16 x i16>, <16 x i16>* %27495, align 2, !tbaa !396
  %27497 = getelementptr inbounds i16, i16* %27472, i64 -28
  %27498 = bitcast i16* %27497 to <16 x i16>*
  %27499 = load <16 x i16>, <16 x i16>* %27498, align 2, !tbaa !396
  %27500 = getelementptr inbounds i16, i16* %27472, i64 -12
  %27501 = bitcast i16* %27500 to <16 x i16>*
  %27502 = load <16 x i16>, <16 x i16>* %27501, align 2, !tbaa !396
  %27503 = getelementptr inbounds i16, i16* %27472, i64 -26
  %27504 = bitcast i16* %27503 to <16 x i16>*
  %27505 = load <16 x i16>, <16 x i16>* %27504, align 2, !tbaa !396
  %27506 = getelementptr inbounds i16, i16* %27472, i64 -10
  %27507 = bitcast i16* %27506 to <16 x i16>*
  %27508 = load <16 x i16>, <16 x i16>* %27507, align 2, !tbaa !396
  %27509 = getelementptr inbounds i16, i16* %27472, i64 -27
  %27510 = bitcast i16* %27509 to <16 x i16>*
  %27511 = load <16 x i16>, <16 x i16>* %27510, align 2, !tbaa !396
  %27512 = getelementptr inbounds i16, i16* %27472, i64 -11
  %27513 = bitcast i16* %27512 to <16 x i16>*
  %27514 = load <16 x i16>, <16 x i16>* %27513, align 2, !tbaa !396
  %27515 = add <16 x i16> %27481, %27475
  %27516 = add <16 x i16> %27515, %27487
  %27517 = add <16 x i16> %27516, %27493
  %27518 = add <16 x i16> %27517, %27499
  %27519 = add <16 x i16> %27518, %27505
  %27520 = add <16 x i16> %27519, %27511
  %27521 = add <16 x i16> %27484, %27478
  %27522 = add <16 x i16> %27521, %27490
  %27523 = add <16 x i16> %27522, %27496
  %27524 = add <16 x i16> %27523, %27502
  %27525 = add <16 x i16> %27524, %27508
  %27526 = add <16 x i16> %27525, %27514
  %27527 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27520, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27528 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27526, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27529 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27527, <16 x i16> %27520)
  %27530 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27528, <16 x i16> %27526)
  %27531 = shufflevector <16 x i16> %27529, <16 x i16> %27530, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27532 = lshr <32 x i16> %27531, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27533 = shufflevector <32 x i16> %27532, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27534 = zext i32 %.pre-phi3602 to i64
  %27535 = mul nsw i64 %295, %27534
  %27536 = add nsw i64 %297, %27535
  %27537 = getelementptr inbounds i16, i16* %blur_x917, i64 %27536
  %27538 = getelementptr inbounds i16, i16* %27537, i64 -32
  %27539 = bitcast i16* %27538 to <16 x i16>*
  store <16 x i16> %27533, <16 x i16>* %27539, align 2, !tbaa !399
  %27540 = shufflevector <32 x i16> %27532, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27541 = getelementptr inbounds i16, i16* %27537, i64 -16
  %27542 = bitcast i16* %27541 to <16 x i16>*
  store <16 x i16> %27540, <16 x i16>* %27542, align 2, !tbaa !399
  %27543 = zext i32 %.pre-phi3614 to i64
  %27544 = mul nsw i64 %27543, %314
  %27545 = add nsw i64 %27544, %292
  %27546 = getelementptr inbounds i16, i16* %blur_x917, i64 %27545
  %27547 = getelementptr inbounds i16, i16* %27546, i64 -32
  %27548 = bitcast i16* %27547 to <16 x i16>*
  %27549 = load <16 x i16>, <16 x i16>* %27548, align 2, !tbaa !399
  %27550 = getelementptr inbounds i16, i16* %27546, i64 -16
  %27551 = bitcast i16* %27550 to <16 x i16>*
  %27552 = load <16 x i16>, <16 x i16>* %27551, align 2, !tbaa !399
  %27553 = zext i32 %.pre-phi3610 to i64
  %27554 = mul nsw i64 %27553, %314
  %27555 = add nsw i64 %27554, %292
  %27556 = getelementptr inbounds i16, i16* %blur_x917, i64 %27555
  %27557 = getelementptr inbounds i16, i16* %27556, i64 -32
  %27558 = bitcast i16* %27557 to <16 x i16>*
  %27559 = load <16 x i16>, <16 x i16>* %27558, align 2, !tbaa !399
  %27560 = getelementptr inbounds i16, i16* %27556, i64 -16
  %27561 = bitcast i16* %27560 to <16 x i16>*
  %27562 = load <16 x i16>, <16 x i16>* %27561, align 2, !tbaa !399
  %27563 = zext i32 %.pre-phi3618 to i64
  %27564 = mul nsw i64 %27563, %314
  %27565 = add nsw i64 %27564, %292
  %27566 = getelementptr inbounds i16, i16* %blur_x917, i64 %27565
  %27567 = getelementptr inbounds i16, i16* %27566, i64 -32
  %27568 = bitcast i16* %27567 to <16 x i16>*
  %27569 = load <16 x i16>, <16 x i16>* %27568, align 2, !tbaa !399
  %27570 = getelementptr inbounds i16, i16* %27566, i64 -16
  %27571 = bitcast i16* %27570 to <16 x i16>*
  %27572 = load <16 x i16>, <16 x i16>* %27571, align 2, !tbaa !399
  %27573 = zext i32 %.pre-phi3622 to i64
  %27574 = mul nsw i64 %27573, %314
  %27575 = add nsw i64 %27574, %292
  %27576 = getelementptr inbounds i16, i16* %blur_x917, i64 %27575
  %27577 = getelementptr inbounds i16, i16* %27576, i64 -32
  %27578 = bitcast i16* %27577 to <16 x i16>*
  %27579 = load <16 x i16>, <16 x i16>* %27578, align 2, !tbaa !399
  %27580 = getelementptr inbounds i16, i16* %27576, i64 -16
  %27581 = bitcast i16* %27580 to <16 x i16>*
  %27582 = load <16 x i16>, <16 x i16>* %27581, align 2, !tbaa !399
  %27583 = zext i32 %.pre-phi3628 to i64
  %27584 = mul nsw i64 %27583, %314
  %27585 = add nsw i64 %27584, %292
  %27586 = getelementptr inbounds i16, i16* %blur_x917, i64 %27585
  %27587 = getelementptr inbounds i16, i16* %27586, i64 -32
  %27588 = bitcast i16* %27587 to <16 x i16>*
  %27589 = load <16 x i16>, <16 x i16>* %27588, align 2, !tbaa !399
  %27590 = getelementptr inbounds i16, i16* %27586, i64 -16
  %27591 = bitcast i16* %27590 to <16 x i16>*
  %27592 = load <16 x i16>, <16 x i16>* %27591, align 2, !tbaa !399
  %27593 = mul nsw i64 %27534, %314
  %27594 = add nsw i64 %27593, %292
  %27595 = getelementptr inbounds i16, i16* %blur_x917, i64 %27594
  %27596 = getelementptr inbounds i16, i16* %27595, i64 -32
  %27597 = bitcast i16* %27596 to <16 x i16>*
  %27598 = load <16 x i16>, <16 x i16>* %27597, align 2, !tbaa !399
  %27599 = getelementptr inbounds i16, i16* %27595, i64 -16
  %27600 = bitcast i16* %27599 to <16 x i16>*
  %27601 = load <16 x i16>, <16 x i16>* %27600, align 2, !tbaa !399
  %27602 = zext i32 %.pre-phi3598 to i64
  %27603 = mul nsw i64 %27602, %314
  %27604 = add nsw i64 %27603, %292
  %27605 = getelementptr inbounds i16, i16* %blur_x917, i64 %27604
  %27606 = getelementptr inbounds i16, i16* %27605, i64 -32
  %27607 = bitcast i16* %27606 to <16 x i16>*
  %27608 = load <16 x i16>, <16 x i16>* %27607, align 2, !tbaa !399
  %27609 = getelementptr inbounds i16, i16* %27605, i64 -16
  %27610 = bitcast i16* %27609 to <16 x i16>*
  %27611 = load <16 x i16>, <16 x i16>* %27610, align 2, !tbaa !399
  %27612 = add <16 x i16> %27559, %27549
  %27613 = add <16 x i16> %27612, %27569
  %27614 = add <16 x i16> %27613, %27579
  %27615 = add <16 x i16> %27614, %27589
  %27616 = add <16 x i16> %27615, %27598
  %27617 = add <16 x i16> %27616, %27608
  %27618 = add <16 x i16> %27562, %27552
  %27619 = add <16 x i16> %27618, %27572
  %27620 = add <16 x i16> %27619, %27582
  %27621 = add <16 x i16> %27620, %27592
  %27622 = add <16 x i16> %27621, %27601
  %27623 = add <16 x i16> %27622, %27611
  %27624 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27617, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27625 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27623, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27626 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27624, <16 x i16> %27617)
  %27627 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27625, <16 x i16> %27623)
  %27628 = shufflevector <16 x i16> %27626, <16 x i16> %27627, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27629 = lshr <32 x i16> %27628, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27630 = shufflevector <32 x i16> %27629, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27631 = sext i32 %a367 to i64
  %27632 = add nsw i64 %27631, 11
  %27633 = mul nsw i64 %27632, %315
  %27634 = add nsw i64 %317, %27633
  %27635 = getelementptr inbounds i16, i16* %264, i64 %27634
  %27636 = getelementptr inbounds i16, i16* %27635, i64 -32
  %27637 = bitcast i16* %27636 to <16 x i16>*
  store <16 x i16> %27630, <16 x i16>* %27637, align 2, !tbaa !401
  %27638 = shufflevector <32 x i16> %27629, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27639 = getelementptr inbounds i16, i16* %27635, i64 -16
  %27640 = bitcast i16* %27639 to <16 x i16>*
  store <16 x i16> %27638, <16 x i16>* %27640, align 2, !tbaa !401
  br label %after_bb1572

"for blur_y.s0.x.x.rebased1587":                  ; preds = %"for blur_y.s0.x.x.rebased1587.preheader", %"consume blur_x1596"
  %indvars.iv3438 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1587.preheader" ], [ %indvars.iv.next3439, %"consume blur_x1596" ]
  %27641 = add nsw i64 %indvars.iv3438, %299
  %27642 = icmp slt i64 %27641, 1
  %27643 = trunc i64 %27641 to i32
  %27644 = shl nsw i32 %27643, 5
  %27645 = icmp sgt i32 %202, %27644
  %27646 = or i1 %27642, %27645
  br i1 %27646, label %"produce blur_x1594", label %"for blur_y.s0.x.x.rebased1587.consume blur_x1596_crit_edge"

"for blur_y.s0.x.x.rebased1587.consume blur_x1596_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1587"
  %.pre3649 = shl nsw i64 %27641, 5
  br label %"consume blur_x1596"

"end for blur_y.s0.x.x.rebased1588":              ; preds = %"consume blur_x1596", %after_bb1572
  br i1 %300, label %"for blur_y.s0.x.x.rebased1604.preheader", label %"end for blur_y.s0.x.x.rebased1605", !prof !386

"for blur_y.s0.x.x.rebased1604.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1588"
  %27647 = sext i32 %t1732954 to i64
  %27648 = zext i32 %.pre-phi3614 to i64
  %27649 = mul nsw i64 %27648, %314
  %27650 = sub nsw i64 %27649, %294
  %27651 = zext i32 %.pre-phi3610 to i64
  %27652 = mul nsw i64 %27651, %314
  %27653 = sub nsw i64 %27652, %294
  %27654 = zext i32 %.pre-phi3618 to i64
  %27655 = mul nsw i64 %27654, %314
  %27656 = sub nsw i64 %27655, %294
  %27657 = zext i32 %.pre-phi3622 to i64
  %27658 = mul nsw i64 %27657, %314
  %27659 = sub nsw i64 %27658, %294
  %27660 = zext i32 %.pre-phi3628 to i64
  %27661 = mul nsw i64 %27660, %314
  %27662 = sub nsw i64 %27661, %294
  %27663 = zext i32 %.pre-phi3602 to i64
  %27664 = mul nsw i64 %27663, %314
  %27665 = sub nsw i64 %27664, %294
  %27666 = zext i32 %.pre-phi3598 to i64
  %27667 = mul nsw i64 %27666, %314
  %27668 = sub nsw i64 %27667, %294
  %27669 = sext i32 %a367 to i64
  %27670 = add nsw i64 %27669, 11
  %27671 = mul nsw i64 %27670, %315
  %27672 = add nsw i64 %27671, %318
  br label %"for blur_y.s0.x.x.rebased1604"

"produce blur_x1594":                             ; preds = %"for blur_y.s0.x.x.rebased1587"
  %t9281595 = add nsw i32 %27644, %t19371584
  %27673 = sext i32 %t9281595 to i64
  %27674 = getelementptr inbounds i16, i16* %read_input860, i64 %27673
  %27675 = getelementptr inbounds i16, i16* %27674, i64 1
  %27676 = bitcast i16* %27675 to <16 x i16>*
  %27677 = load <16 x i16>, <16 x i16>* %27676, align 2, !tbaa !396
  %27678 = getelementptr inbounds i16, i16* %27674, i64 17
  %27679 = bitcast i16* %27678 to <16 x i16>*
  %27680 = load <16 x i16>, <16 x i16>* %27679, align 2, !tbaa !396
  %27681 = bitcast i16* %27674 to <16 x i16>*
  %27682 = load <16 x i16>, <16 x i16>* %27681, align 2, !tbaa !396
  %27683 = getelementptr inbounds i16, i16* %27674, i64 16
  %27684 = bitcast i16* %27683 to <16 x i16>*
  %27685 = load <16 x i16>, <16 x i16>* %27684, align 2, !tbaa !396
  %27686 = getelementptr inbounds i16, i16* %27674, i64 2
  %27687 = bitcast i16* %27686 to <16 x i16>*
  %27688 = load <16 x i16>, <16 x i16>* %27687, align 2, !tbaa !396
  %27689 = getelementptr inbounds i16, i16* %27674, i64 18
  %27690 = bitcast i16* %27689 to <16 x i16>*
  %27691 = load <16 x i16>, <16 x i16>* %27690, align 2, !tbaa !396
  %27692 = getelementptr inbounds i16, i16* %27674, i64 3
  %27693 = bitcast i16* %27692 to <16 x i16>*
  %27694 = load <16 x i16>, <16 x i16>* %27693, align 2, !tbaa !396
  %27695 = getelementptr inbounds i16, i16* %27674, i64 19
  %27696 = bitcast i16* %27695 to <16 x i16>*
  %27697 = load <16 x i16>, <16 x i16>* %27696, align 2, !tbaa !396
  %27698 = getelementptr inbounds i16, i16* %27674, i64 4
  %27699 = bitcast i16* %27698 to <16 x i16>*
  %27700 = load <16 x i16>, <16 x i16>* %27699, align 2, !tbaa !396
  %27701 = getelementptr inbounds i16, i16* %27674, i64 20
  %27702 = bitcast i16* %27701 to <16 x i16>*
  %27703 = load <16 x i16>, <16 x i16>* %27702, align 2, !tbaa !396
  %27704 = getelementptr inbounds i16, i16* %27674, i64 6
  %27705 = bitcast i16* %27704 to <16 x i16>*
  %27706 = load <16 x i16>, <16 x i16>* %27705, align 2, !tbaa !396
  %27707 = getelementptr inbounds i16, i16* %27674, i64 22
  %27708 = bitcast i16* %27707 to <16 x i16>*
  %27709 = load <16 x i16>, <16 x i16>* %27708, align 2, !tbaa !396
  %27710 = getelementptr inbounds i16, i16* %27674, i64 5
  %27711 = bitcast i16* %27710 to <16 x i16>*
  %27712 = load <16 x i16>, <16 x i16>* %27711, align 2, !tbaa !396
  %27713 = getelementptr inbounds i16, i16* %27674, i64 21
  %27714 = bitcast i16* %27713 to <16 x i16>*
  %27715 = load <16 x i16>, <16 x i16>* %27714, align 2, !tbaa !396
  %27716 = add <16 x i16> %27682, %27677
  %27717 = add <16 x i16> %27716, %27688
  %27718 = add <16 x i16> %27717, %27694
  %27719 = add <16 x i16> %27718, %27700
  %27720 = add <16 x i16> %27719, %27706
  %27721 = add <16 x i16> %27720, %27712
  %27722 = add <16 x i16> %27685, %27680
  %27723 = add <16 x i16> %27722, %27691
  %27724 = add <16 x i16> %27723, %27697
  %27725 = add <16 x i16> %27724, %27703
  %27726 = add <16 x i16> %27725, %27709
  %27727 = add <16 x i16> %27726, %27715
  %27728 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27721, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27729 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27727, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27730 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27728, <16 x i16> %27721)
  %27731 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27729, <16 x i16> %27727)
  %27732 = shufflevector <16 x i16> %27730, <16 x i16> %27731, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27733 = lshr <32 x i16> %27732, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27734 = shufflevector <32 x i16> %27733, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27735 = shl nsw i64 %27641, 5
  %27736 = add nsw i64 %27735, %27446
  %27737 = getelementptr inbounds i16, i16* %blur_x917, i64 %27736
  %27738 = bitcast i16* %27737 to <16 x i16>*
  store <16 x i16> %27734, <16 x i16>* %27738, align 2, !tbaa !399
  %27739 = shufflevector <32 x i16> %27733, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27740 = getelementptr inbounds i16, i16* %27737, i64 16
  %27741 = bitcast i16* %27740 to <16 x i16>*
  store <16 x i16> %27739, <16 x i16>* %27741, align 2, !tbaa !399
  br label %"consume blur_x1596"

"consume blur_x1596":                             ; preds = %"for blur_y.s0.x.x.rebased1587.consume blur_x1596_crit_edge", %"produce blur_x1594"
  %.pre-phi3650 = phi i64 [ %.pre3649, %"for blur_y.s0.x.x.rebased1587.consume blur_x1596_crit_edge" ], [ %27735, %"produce blur_x1594" ]
  %27742 = add nsw i64 %27449, %.pre-phi3650
  %27743 = getelementptr inbounds i16, i16* %blur_x917, i64 %27742
  %27744 = bitcast i16* %27743 to <16 x i16>*
  %27745 = load <16 x i16>, <16 x i16>* %27744, align 2, !tbaa !399
  %27746 = getelementptr inbounds i16, i16* %27743, i64 16
  %27747 = bitcast i16* %27746 to <16 x i16>*
  %27748 = load <16 x i16>, <16 x i16>* %27747, align 2, !tbaa !399
  %27749 = add nsw i64 %27452, %.pre-phi3650
  %27750 = getelementptr inbounds i16, i16* %blur_x917, i64 %27749
  %27751 = bitcast i16* %27750 to <16 x i16>*
  %27752 = load <16 x i16>, <16 x i16>* %27751, align 2, !tbaa !399
  %27753 = getelementptr inbounds i16, i16* %27750, i64 16
  %27754 = bitcast i16* %27753 to <16 x i16>*
  %27755 = load <16 x i16>, <16 x i16>* %27754, align 2, !tbaa !399
  %27756 = add nsw i64 %27455, %.pre-phi3650
  %27757 = getelementptr inbounds i16, i16* %blur_x917, i64 %27756
  %27758 = bitcast i16* %27757 to <16 x i16>*
  %27759 = load <16 x i16>, <16 x i16>* %27758, align 2, !tbaa !399
  %27760 = getelementptr inbounds i16, i16* %27757, i64 16
  %27761 = bitcast i16* %27760 to <16 x i16>*
  %27762 = load <16 x i16>, <16 x i16>* %27761, align 2, !tbaa !399
  %27763 = add nsw i64 %27458, %.pre-phi3650
  %27764 = getelementptr inbounds i16, i16* %blur_x917, i64 %27763
  %27765 = bitcast i16* %27764 to <16 x i16>*
  %27766 = load <16 x i16>, <16 x i16>* %27765, align 2, !tbaa !399
  %27767 = getelementptr inbounds i16, i16* %27764, i64 16
  %27768 = bitcast i16* %27767 to <16 x i16>*
  %27769 = load <16 x i16>, <16 x i16>* %27768, align 2, !tbaa !399
  %27770 = add nsw i64 %27461, %.pre-phi3650
  %27771 = getelementptr inbounds i16, i16* %blur_x917, i64 %27770
  %27772 = bitcast i16* %27771 to <16 x i16>*
  %27773 = load <16 x i16>, <16 x i16>* %27772, align 2, !tbaa !399
  %27774 = getelementptr inbounds i16, i16* %27771, i64 16
  %27775 = bitcast i16* %27774 to <16 x i16>*
  %27776 = load <16 x i16>, <16 x i16>* %27775, align 2, !tbaa !399
  %27777 = add nsw i64 %27464, %.pre-phi3650
  %27778 = getelementptr inbounds i16, i16* %blur_x917, i64 %27777
  %27779 = bitcast i16* %27778 to <16 x i16>*
  %27780 = load <16 x i16>, <16 x i16>* %27779, align 2, !tbaa !399
  %27781 = getelementptr inbounds i16, i16* %27778, i64 16
  %27782 = bitcast i16* %27781 to <16 x i16>*
  %27783 = load <16 x i16>, <16 x i16>* %27782, align 2, !tbaa !399
  %27784 = add nsw i64 %27467, %.pre-phi3650
  %27785 = getelementptr inbounds i16, i16* %blur_x917, i64 %27784
  %27786 = bitcast i16* %27785 to <16 x i16>*
  %27787 = load <16 x i16>, <16 x i16>* %27786, align 2, !tbaa !399
  %27788 = getelementptr inbounds i16, i16* %27785, i64 16
  %27789 = bitcast i16* %27788 to <16 x i16>*
  %27790 = load <16 x i16>, <16 x i16>* %27789, align 2, !tbaa !399
  %27791 = add <16 x i16> %27752, %27745
  %27792 = add <16 x i16> %27791, %27759
  %27793 = add <16 x i16> %27792, %27766
  %27794 = add <16 x i16> %27793, %27773
  %27795 = add <16 x i16> %27794, %27780
  %27796 = add <16 x i16> %27795, %27787
  %27797 = add <16 x i16> %27755, %27748
  %27798 = add <16 x i16> %27797, %27762
  %27799 = add <16 x i16> %27798, %27769
  %27800 = add <16 x i16> %27799, %27776
  %27801 = add <16 x i16> %27800, %27783
  %27802 = add <16 x i16> %27801, %27790
  %27803 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27796, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27804 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27802, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27805 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27803, <16 x i16> %27796)
  %27806 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27804, <16 x i16> %27802)
  %27807 = shufflevector <16 x i16> %27805, <16 x i16> %27806, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27808 = lshr <32 x i16> %27807, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27809 = shufflevector <32 x i16> %27808, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27810 = add nsw i64 %27471, %.pre-phi3650
  %27811 = getelementptr inbounds i16, i16* %264, i64 %27810
  %27812 = bitcast i16* %27811 to <16 x i16>*
  store <16 x i16> %27809, <16 x i16>* %27812, align 2, !tbaa !401
  %27813 = shufflevector <32 x i16> %27808, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27814 = getelementptr inbounds i16, i16* %27811, i64 16
  %27815 = bitcast i16* %27814 to <16 x i16>*
  store <16 x i16> %27813, <16 x i16>* %27815, align 2, !tbaa !401
  %indvars.iv.next3439 = add nuw nsw i64 %indvars.iv3438, 1
  %.not2688 = icmp eq i64 %indvars.iv.next3439, %386
  br i1 %.not2688, label %"end for blur_y.s0.x.x.rebased1588", label %"for blur_y.s0.x.x.rebased1587"

"for blur_y.s0.x.x.rebased1604":                  ; preds = %"for blur_y.s0.x.x.rebased1604.preheader", %"consume blur_x1614"
  %blur_y.s0.x.x.rebased1606 = phi i32 [ %27966, %"consume blur_x1614" ], [ 0, %"for blur_y.s0.x.x.rebased1604.preheader" ]
  %27816 = add nsw i32 %blur_y.s0.x.x.rebased1606, %t1670852
  %a537 = shl nsw i32 %27816, 5
  %27817 = icmp sgt i32 %a355, %a537
  %b543 = select i1 %27817, i32 %a537, i32 %a355
  %27818 = icmp slt i32 %27816, 1
  %27819 = icmp sgt i32 %202, %a537
  %27820 = or i1 %27818, %27819
  br i1 %27820, label %"produce blur_x1611", label %"consume blur_x1614"

"end for blur_y.s0.x.x.rebased1605":              ; preds = %"consume blur_x1614", %"end for blur_y.s0.x.x.rebased1588"
  br i1 %232, label %"produce blur_x1618", label %after_bb1615

"produce blur_x1611":                             ; preds = %"for blur_y.s0.x.x.rebased1604"
  %27821 = icmp slt i32 %b543, %202
  %blur_x.s0.x.v1.base.s1612 = select i1 %27821, i32 %b543, i32 %202
  %t9331613 = add nsw i32 %blur_x.s0.x.v1.base.s1612, %t19371584
  %27822 = sext i32 %t9331613 to i64
  %27823 = getelementptr inbounds i16, i16* %read_input860, i64 %27822
  %27824 = getelementptr inbounds i16, i16* %27823, i64 1
  %27825 = bitcast i16* %27824 to <16 x i16>*
  %27826 = load <16 x i16>, <16 x i16>* %27825, align 2, !tbaa !396
  %27827 = getelementptr inbounds i16, i16* %27823, i64 17
  %27828 = bitcast i16* %27827 to <16 x i16>*
  %27829 = load <16 x i16>, <16 x i16>* %27828, align 2, !tbaa !396
  %27830 = bitcast i16* %27823 to <16 x i16>*
  %27831 = load <16 x i16>, <16 x i16>* %27830, align 2, !tbaa !396
  %27832 = getelementptr inbounds i16, i16* %27823, i64 16
  %27833 = bitcast i16* %27832 to <16 x i16>*
  %27834 = load <16 x i16>, <16 x i16>* %27833, align 2, !tbaa !396
  %27835 = getelementptr inbounds i16, i16* %27823, i64 2
  %27836 = bitcast i16* %27835 to <16 x i16>*
  %27837 = load <16 x i16>, <16 x i16>* %27836, align 2, !tbaa !396
  %27838 = getelementptr inbounds i16, i16* %27823, i64 18
  %27839 = bitcast i16* %27838 to <16 x i16>*
  %27840 = load <16 x i16>, <16 x i16>* %27839, align 2, !tbaa !396
  %27841 = getelementptr inbounds i16, i16* %27823, i64 3
  %27842 = bitcast i16* %27841 to <16 x i16>*
  %27843 = load <16 x i16>, <16 x i16>* %27842, align 2, !tbaa !396
  %27844 = getelementptr inbounds i16, i16* %27823, i64 19
  %27845 = bitcast i16* %27844 to <16 x i16>*
  %27846 = load <16 x i16>, <16 x i16>* %27845, align 2, !tbaa !396
  %27847 = getelementptr inbounds i16, i16* %27823, i64 4
  %27848 = bitcast i16* %27847 to <16 x i16>*
  %27849 = load <16 x i16>, <16 x i16>* %27848, align 2, !tbaa !396
  %27850 = getelementptr inbounds i16, i16* %27823, i64 20
  %27851 = bitcast i16* %27850 to <16 x i16>*
  %27852 = load <16 x i16>, <16 x i16>* %27851, align 2, !tbaa !396
  %27853 = getelementptr inbounds i16, i16* %27823, i64 6
  %27854 = bitcast i16* %27853 to <16 x i16>*
  %27855 = load <16 x i16>, <16 x i16>* %27854, align 2, !tbaa !396
  %27856 = getelementptr inbounds i16, i16* %27823, i64 22
  %27857 = bitcast i16* %27856 to <16 x i16>*
  %27858 = load <16 x i16>, <16 x i16>* %27857, align 2, !tbaa !396
  %27859 = getelementptr inbounds i16, i16* %27823, i64 5
  %27860 = bitcast i16* %27859 to <16 x i16>*
  %27861 = load <16 x i16>, <16 x i16>* %27860, align 2, !tbaa !396
  %27862 = getelementptr inbounds i16, i16* %27823, i64 21
  %27863 = bitcast i16* %27862 to <16 x i16>*
  %27864 = load <16 x i16>, <16 x i16>* %27863, align 2, !tbaa !396
  %27865 = add <16 x i16> %27831, %27826
  %27866 = add <16 x i16> %27865, %27837
  %27867 = add <16 x i16> %27866, %27843
  %27868 = add <16 x i16> %27867, %27849
  %27869 = add <16 x i16> %27868, %27855
  %27870 = add <16 x i16> %27869, %27861
  %27871 = add <16 x i16> %27834, %27829
  %27872 = add <16 x i16> %27871, %27840
  %27873 = add <16 x i16> %27872, %27846
  %27874 = add <16 x i16> %27873, %27852
  %27875 = add <16 x i16> %27874, %27858
  %27876 = add <16 x i16> %27875, %27864
  %27877 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27870, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27878 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27876, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27879 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27877, <16 x i16> %27870)
  %27880 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27878, <16 x i16> %27876)
  %27881 = shufflevector <16 x i16> %27879, <16 x i16> %27880, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27882 = lshr <32 x i16> %27881, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27883 = shufflevector <32 x i16> %27882, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27884 = sext i32 %blur_x.s0.x.v1.base.s1612 to i64
  %27885 = add nsw i64 %27884, %27647
  %27886 = getelementptr inbounds i16, i16* %blur_x917, i64 %27885
  %27887 = bitcast i16* %27886 to <16 x i16>*
  store <16 x i16> %27883, <16 x i16>* %27887, align 2, !tbaa !399
  %27888 = shufflevector <32 x i16> %27882, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27889 = getelementptr inbounds i16, i16* %27886, i64 16
  %27890 = bitcast i16* %27889 to <16 x i16>*
  store <16 x i16> %27888, <16 x i16>* %27890, align 2, !tbaa !399
  br label %"consume blur_x1614"

"consume blur_x1614":                             ; preds = %"for blur_y.s0.x.x.rebased1604", %"produce blur_x1611"
  %27891 = sext i32 %b543 to i64
  %27892 = add nsw i64 %27650, %27891
  %27893 = getelementptr inbounds i16, i16* %blur_x917, i64 %27892
  %27894 = bitcast i16* %27893 to <16 x i16>*
  %27895 = load <16 x i16>, <16 x i16>* %27894, align 2, !tbaa !399
  %27896 = getelementptr inbounds i16, i16* %27893, i64 16
  %27897 = bitcast i16* %27896 to <16 x i16>*
  %27898 = load <16 x i16>, <16 x i16>* %27897, align 2, !tbaa !399
  %27899 = add nsw i64 %27653, %27891
  %27900 = getelementptr inbounds i16, i16* %blur_x917, i64 %27899
  %27901 = bitcast i16* %27900 to <16 x i16>*
  %27902 = load <16 x i16>, <16 x i16>* %27901, align 2, !tbaa !399
  %27903 = getelementptr inbounds i16, i16* %27900, i64 16
  %27904 = bitcast i16* %27903 to <16 x i16>*
  %27905 = load <16 x i16>, <16 x i16>* %27904, align 2, !tbaa !399
  %27906 = add nsw i64 %27656, %27891
  %27907 = getelementptr inbounds i16, i16* %blur_x917, i64 %27906
  %27908 = bitcast i16* %27907 to <16 x i16>*
  %27909 = load <16 x i16>, <16 x i16>* %27908, align 2, !tbaa !399
  %27910 = getelementptr inbounds i16, i16* %27907, i64 16
  %27911 = bitcast i16* %27910 to <16 x i16>*
  %27912 = load <16 x i16>, <16 x i16>* %27911, align 2, !tbaa !399
  %27913 = add nsw i64 %27659, %27891
  %27914 = getelementptr inbounds i16, i16* %blur_x917, i64 %27913
  %27915 = bitcast i16* %27914 to <16 x i16>*
  %27916 = load <16 x i16>, <16 x i16>* %27915, align 2, !tbaa !399
  %27917 = getelementptr inbounds i16, i16* %27914, i64 16
  %27918 = bitcast i16* %27917 to <16 x i16>*
  %27919 = load <16 x i16>, <16 x i16>* %27918, align 2, !tbaa !399
  %27920 = add nsw i64 %27662, %27891
  %27921 = getelementptr inbounds i16, i16* %blur_x917, i64 %27920
  %27922 = bitcast i16* %27921 to <16 x i16>*
  %27923 = load <16 x i16>, <16 x i16>* %27922, align 2, !tbaa !399
  %27924 = getelementptr inbounds i16, i16* %27921, i64 16
  %27925 = bitcast i16* %27924 to <16 x i16>*
  %27926 = load <16 x i16>, <16 x i16>* %27925, align 2, !tbaa !399
  %27927 = add nsw i64 %27665, %27891
  %27928 = getelementptr inbounds i16, i16* %blur_x917, i64 %27927
  %27929 = bitcast i16* %27928 to <16 x i16>*
  %27930 = load <16 x i16>, <16 x i16>* %27929, align 2, !tbaa !399
  %27931 = getelementptr inbounds i16, i16* %27928, i64 16
  %27932 = bitcast i16* %27931 to <16 x i16>*
  %27933 = load <16 x i16>, <16 x i16>* %27932, align 2, !tbaa !399
  %27934 = add nsw i64 %27668, %27891
  %27935 = getelementptr inbounds i16, i16* %blur_x917, i64 %27934
  %27936 = bitcast i16* %27935 to <16 x i16>*
  %27937 = load <16 x i16>, <16 x i16>* %27936, align 2, !tbaa !399
  %27938 = getelementptr inbounds i16, i16* %27935, i64 16
  %27939 = bitcast i16* %27938 to <16 x i16>*
  %27940 = load <16 x i16>, <16 x i16>* %27939, align 2, !tbaa !399
  %27941 = add <16 x i16> %27902, %27895
  %27942 = add <16 x i16> %27941, %27909
  %27943 = add <16 x i16> %27942, %27916
  %27944 = add <16 x i16> %27943, %27923
  %27945 = add <16 x i16> %27944, %27930
  %27946 = add <16 x i16> %27945, %27937
  %27947 = add <16 x i16> %27905, %27898
  %27948 = add <16 x i16> %27947, %27912
  %27949 = add <16 x i16> %27948, %27919
  %27950 = add <16 x i16> %27949, %27926
  %27951 = add <16 x i16> %27950, %27933
  %27952 = add <16 x i16> %27951, %27940
  %27953 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27946, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27954 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27952, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %27955 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27953, <16 x i16> %27946)
  %27956 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %27954, <16 x i16> %27952)
  %27957 = shufflevector <16 x i16> %27955, <16 x i16> %27956, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27958 = lshr <32 x i16> %27957, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27959 = shufflevector <32 x i16> %27958, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27960 = add nsw i64 %27672, %27891
  %27961 = getelementptr inbounds i16, i16* %264, i64 %27960
  %27962 = bitcast i16* %27961 to <16 x i16>*
  store <16 x i16> %27959, <16 x i16>* %27962, align 2, !tbaa !401
  %27963 = shufflevector <32 x i16> %27958, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27964 = getelementptr inbounds i16, i16* %27961, i64 16
  %27965 = bitcast i16* %27964 to <16 x i16>*
  store <16 x i16> %27963, <16 x i16>* %27965, align 2, !tbaa !401
  %27966 = add nuw nsw i32 %blur_y.s0.x.x.rebased1606, 1
  %.not2687 = icmp eq i32 %27966, %t1727937
  br i1 %.not2687, label %"end for blur_y.s0.x.x.rebased1605", label %"for blur_y.s0.x.x.rebased1604"

after_bb1615:                                     ; preds = %"end for blur_y.s0.x.x.rebased1605", %"produce blur_x1618"
  br i1 %298, label %"for blur_y.s0.x.x.rebased1630.preheader", label %"end for blur_y.s0.x.x.rebased1631", !prof !386

"for blur_y.s0.x.x.rebased1630.preheader":        ; preds = %after_bb1615
  %27967 = sext i32 %t1738984 to i64
  %27968 = zext i32 %.pre-phi3618 to i64
  %27969 = mul nsw i64 %27968, %314
  %27970 = sub nsw i64 %27969, %294
  %27971 = zext i32 %.pre-phi3614 to i64
  %27972 = mul nsw i64 %27971, %314
  %27973 = sub nsw i64 %27972, %294
  %27974 = zext i32 %.pre-phi3622 to i64
  %27975 = mul nsw i64 %27974, %314
  %27976 = sub nsw i64 %27975, %294
  %27977 = zext i32 %.pre-phi3628 to i64
  %27978 = mul nsw i64 %27977, %314
  %27979 = sub nsw i64 %27978, %294
  %27980 = zext i32 %.pre-phi3598 to i64
  %27981 = mul nsw i64 %27980, %314
  %27982 = sub nsw i64 %27981, %294
  %27983 = zext i32 %.pre-phi3606 to i64
  %27984 = mul nsw i64 %27983, %314
  %27985 = sub nsw i64 %27984, %294
  %27986 = zext i32 %.pre-phi3602 to i64
  %27987 = mul nsw i64 %27986, %314
  %27988 = sub nsw i64 %27987, %294
  %27989 = sext i32 %a367 to i64
  %27990 = add nsw i64 %27989, 12
  %27991 = mul nsw i64 %27990, %315
  %27992 = add nsw i64 %27991, %318
  br label %"for blur_y.s0.x.x.rebased1630"

"produce blur_x1618":                             ; preds = %"end for blur_y.s0.x.x.rebased1605"
  %27993 = getelementptr inbounds i16, i16* %read_input860, i64 %341
  %27994 = getelementptr inbounds i16, i16* %27993, i64 -31
  %27995 = bitcast i16* %27994 to <16 x i16>*
  %27996 = load <16 x i16>, <16 x i16>* %27995, align 2, !tbaa !396
  %27997 = getelementptr inbounds i16, i16* %27993, i64 -15
  %27998 = bitcast i16* %27997 to <16 x i16>*
  %27999 = load <16 x i16>, <16 x i16>* %27998, align 2, !tbaa !396
  %28000 = getelementptr inbounds i16, i16* %27993, i64 -32
  %28001 = bitcast i16* %28000 to <16 x i16>*
  %28002 = load <16 x i16>, <16 x i16>* %28001, align 2, !tbaa !396
  %28003 = getelementptr inbounds i16, i16* %27993, i64 -16
  %28004 = bitcast i16* %28003 to <16 x i16>*
  %28005 = load <16 x i16>, <16 x i16>* %28004, align 2, !tbaa !396
  %28006 = getelementptr inbounds i16, i16* %27993, i64 -30
  %28007 = bitcast i16* %28006 to <16 x i16>*
  %28008 = load <16 x i16>, <16 x i16>* %28007, align 2, !tbaa !396
  %28009 = getelementptr inbounds i16, i16* %27993, i64 -14
  %28010 = bitcast i16* %28009 to <16 x i16>*
  %28011 = load <16 x i16>, <16 x i16>* %28010, align 2, !tbaa !396
  %28012 = getelementptr inbounds i16, i16* %27993, i64 -29
  %28013 = bitcast i16* %28012 to <16 x i16>*
  %28014 = load <16 x i16>, <16 x i16>* %28013, align 2, !tbaa !396
  %28015 = getelementptr inbounds i16, i16* %27993, i64 -13
  %28016 = bitcast i16* %28015 to <16 x i16>*
  %28017 = load <16 x i16>, <16 x i16>* %28016, align 2, !tbaa !396
  %28018 = getelementptr inbounds i16, i16* %27993, i64 -28
  %28019 = bitcast i16* %28018 to <16 x i16>*
  %28020 = load <16 x i16>, <16 x i16>* %28019, align 2, !tbaa !396
  %28021 = getelementptr inbounds i16, i16* %27993, i64 -12
  %28022 = bitcast i16* %28021 to <16 x i16>*
  %28023 = load <16 x i16>, <16 x i16>* %28022, align 2, !tbaa !396
  %28024 = getelementptr inbounds i16, i16* %27993, i64 -26
  %28025 = bitcast i16* %28024 to <16 x i16>*
  %28026 = load <16 x i16>, <16 x i16>* %28025, align 2, !tbaa !396
  %28027 = getelementptr inbounds i16, i16* %27993, i64 -10
  %28028 = bitcast i16* %28027 to <16 x i16>*
  %28029 = load <16 x i16>, <16 x i16>* %28028, align 2, !tbaa !396
  %28030 = getelementptr inbounds i16, i16* %27993, i64 -27
  %28031 = bitcast i16* %28030 to <16 x i16>*
  %28032 = load <16 x i16>, <16 x i16>* %28031, align 2, !tbaa !396
  %28033 = getelementptr inbounds i16, i16* %27993, i64 -11
  %28034 = bitcast i16* %28033 to <16 x i16>*
  %28035 = load <16 x i16>, <16 x i16>* %28034, align 2, !tbaa !396
  %28036 = add <16 x i16> %28002, %27996
  %28037 = add <16 x i16> %28036, %28008
  %28038 = add <16 x i16> %28037, %28014
  %28039 = add <16 x i16> %28038, %28020
  %28040 = add <16 x i16> %28039, %28026
  %28041 = add <16 x i16> %28040, %28032
  %28042 = add <16 x i16> %28005, %27999
  %28043 = add <16 x i16> %28042, %28011
  %28044 = add <16 x i16> %28043, %28017
  %28045 = add <16 x i16> %28044, %28023
  %28046 = add <16 x i16> %28045, %28029
  %28047 = add <16 x i16> %28046, %28035
  %28048 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28041, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28049 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28047, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28050 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28048, <16 x i16> %28041)
  %28051 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28049, <16 x i16> %28047)
  %28052 = shufflevector <16 x i16> %28050, <16 x i16> %28051, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28053 = lshr <32 x i16> %28052, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28054 = shufflevector <32 x i16> %28053, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28055 = zext i32 %.pre-phi3606 to i64
  %28056 = mul nsw i64 %295, %28055
  %28057 = add nsw i64 %297, %28056
  %28058 = getelementptr inbounds i16, i16* %blur_x917, i64 %28057
  %28059 = getelementptr inbounds i16, i16* %28058, i64 -32
  %28060 = bitcast i16* %28059 to <16 x i16>*
  store <16 x i16> %28054, <16 x i16>* %28060, align 2, !tbaa !399
  %28061 = shufflevector <32 x i16> %28053, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28062 = getelementptr inbounds i16, i16* %28058, i64 -16
  %28063 = bitcast i16* %28062 to <16 x i16>*
  store <16 x i16> %28061, <16 x i16>* %28063, align 2, !tbaa !399
  %28064 = zext i32 %.pre-phi3618 to i64
  %28065 = mul nsw i64 %28064, %314
  %28066 = add nsw i64 %28065, %292
  %28067 = getelementptr inbounds i16, i16* %blur_x917, i64 %28066
  %28068 = getelementptr inbounds i16, i16* %28067, i64 -32
  %28069 = bitcast i16* %28068 to <16 x i16>*
  %28070 = load <16 x i16>, <16 x i16>* %28069, align 2, !tbaa !399
  %28071 = getelementptr inbounds i16, i16* %28067, i64 -16
  %28072 = bitcast i16* %28071 to <16 x i16>*
  %28073 = load <16 x i16>, <16 x i16>* %28072, align 2, !tbaa !399
  %28074 = zext i32 %.pre-phi3614 to i64
  %28075 = mul nsw i64 %28074, %314
  %28076 = add nsw i64 %28075, %292
  %28077 = getelementptr inbounds i16, i16* %blur_x917, i64 %28076
  %28078 = getelementptr inbounds i16, i16* %28077, i64 -32
  %28079 = bitcast i16* %28078 to <16 x i16>*
  %28080 = load <16 x i16>, <16 x i16>* %28079, align 2, !tbaa !399
  %28081 = getelementptr inbounds i16, i16* %28077, i64 -16
  %28082 = bitcast i16* %28081 to <16 x i16>*
  %28083 = load <16 x i16>, <16 x i16>* %28082, align 2, !tbaa !399
  %28084 = zext i32 %.pre-phi3622 to i64
  %28085 = mul nsw i64 %28084, %314
  %28086 = add nsw i64 %28085, %292
  %28087 = getelementptr inbounds i16, i16* %blur_x917, i64 %28086
  %28088 = getelementptr inbounds i16, i16* %28087, i64 -32
  %28089 = bitcast i16* %28088 to <16 x i16>*
  %28090 = load <16 x i16>, <16 x i16>* %28089, align 2, !tbaa !399
  %28091 = getelementptr inbounds i16, i16* %28087, i64 -16
  %28092 = bitcast i16* %28091 to <16 x i16>*
  %28093 = load <16 x i16>, <16 x i16>* %28092, align 2, !tbaa !399
  %28094 = zext i32 %.pre-phi3628 to i64
  %28095 = mul nsw i64 %28094, %314
  %28096 = add nsw i64 %28095, %292
  %28097 = getelementptr inbounds i16, i16* %blur_x917, i64 %28096
  %28098 = getelementptr inbounds i16, i16* %28097, i64 -32
  %28099 = bitcast i16* %28098 to <16 x i16>*
  %28100 = load <16 x i16>, <16 x i16>* %28099, align 2, !tbaa !399
  %28101 = getelementptr inbounds i16, i16* %28097, i64 -16
  %28102 = bitcast i16* %28101 to <16 x i16>*
  %28103 = load <16 x i16>, <16 x i16>* %28102, align 2, !tbaa !399
  %28104 = zext i32 %.pre-phi3598 to i64
  %28105 = mul nsw i64 %28104, %314
  %28106 = add nsw i64 %28105, %292
  %28107 = getelementptr inbounds i16, i16* %blur_x917, i64 %28106
  %28108 = getelementptr inbounds i16, i16* %28107, i64 -32
  %28109 = bitcast i16* %28108 to <16 x i16>*
  %28110 = load <16 x i16>, <16 x i16>* %28109, align 2, !tbaa !399
  %28111 = getelementptr inbounds i16, i16* %28107, i64 -16
  %28112 = bitcast i16* %28111 to <16 x i16>*
  %28113 = load <16 x i16>, <16 x i16>* %28112, align 2, !tbaa !399
  %28114 = mul nsw i64 %28055, %314
  %28115 = add nsw i64 %28114, %292
  %28116 = getelementptr inbounds i16, i16* %blur_x917, i64 %28115
  %28117 = getelementptr inbounds i16, i16* %28116, i64 -32
  %28118 = bitcast i16* %28117 to <16 x i16>*
  %28119 = load <16 x i16>, <16 x i16>* %28118, align 2, !tbaa !399
  %28120 = getelementptr inbounds i16, i16* %28116, i64 -16
  %28121 = bitcast i16* %28120 to <16 x i16>*
  %28122 = load <16 x i16>, <16 x i16>* %28121, align 2, !tbaa !399
  %28123 = zext i32 %.pre-phi3602 to i64
  %28124 = mul nsw i64 %28123, %314
  %28125 = add nsw i64 %28124, %292
  %28126 = getelementptr inbounds i16, i16* %blur_x917, i64 %28125
  %28127 = getelementptr inbounds i16, i16* %28126, i64 -32
  %28128 = bitcast i16* %28127 to <16 x i16>*
  %28129 = load <16 x i16>, <16 x i16>* %28128, align 2, !tbaa !399
  %28130 = getelementptr inbounds i16, i16* %28126, i64 -16
  %28131 = bitcast i16* %28130 to <16 x i16>*
  %28132 = load <16 x i16>, <16 x i16>* %28131, align 2, !tbaa !399
  %28133 = add <16 x i16> %28080, %28070
  %28134 = add <16 x i16> %28133, %28090
  %28135 = add <16 x i16> %28134, %28100
  %28136 = add <16 x i16> %28135, %28110
  %28137 = add <16 x i16> %28136, %28119
  %28138 = add <16 x i16> %28137, %28129
  %28139 = add <16 x i16> %28083, %28073
  %28140 = add <16 x i16> %28139, %28093
  %28141 = add <16 x i16> %28140, %28103
  %28142 = add <16 x i16> %28141, %28113
  %28143 = add <16 x i16> %28142, %28122
  %28144 = add <16 x i16> %28143, %28132
  %28145 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28138, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28146 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28144, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28147 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28145, <16 x i16> %28138)
  %28148 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28146, <16 x i16> %28144)
  %28149 = shufflevector <16 x i16> %28147, <16 x i16> %28148, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28150 = lshr <32 x i16> %28149, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28151 = shufflevector <32 x i16> %28150, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28152 = sext i32 %a367 to i64
  %28153 = add nsw i64 %28152, 12
  %28154 = mul nsw i64 %28153, %315
  %28155 = add nsw i64 %317, %28154
  %28156 = getelementptr inbounds i16, i16* %264, i64 %28155
  %28157 = getelementptr inbounds i16, i16* %28156, i64 -32
  %28158 = bitcast i16* %28157 to <16 x i16>*
  store <16 x i16> %28151, <16 x i16>* %28158, align 2, !tbaa !401
  %28159 = shufflevector <32 x i16> %28150, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28160 = getelementptr inbounds i16, i16* %28156, i64 -16
  %28161 = bitcast i16* %28160 to <16 x i16>*
  store <16 x i16> %28159, <16 x i16>* %28161, align 2, !tbaa !401
  br label %after_bb1615

"for blur_y.s0.x.x.rebased1630":                  ; preds = %"for blur_y.s0.x.x.rebased1630.preheader", %"consume blur_x1639"
  %indvars.iv3441 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1630.preheader" ], [ %indvars.iv.next3442, %"consume blur_x1639" ]
  %28162 = add nsw i64 %indvars.iv3441, %299
  %28163 = icmp slt i64 %28162, 1
  %28164 = trunc i64 %28162 to i32
  %28165 = shl nsw i32 %28164, 5
  %28166 = icmp sgt i32 %202, %28165
  %28167 = or i1 %28163, %28166
  br i1 %28167, label %"produce blur_x1637", label %"for blur_y.s0.x.x.rebased1630.consume blur_x1639_crit_edge"

"for blur_y.s0.x.x.rebased1630.consume blur_x1639_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1630"
  %.pre3651 = shl nsw i64 %28162, 5
  br label %"consume blur_x1639"

"end for blur_y.s0.x.x.rebased1631":              ; preds = %"consume blur_x1639", %after_bb1615
  br i1 %300, label %"for blur_y.s0.x.x.rebased1647.preheader", label %"end for blur_y.s0.x.x.rebased1648", !prof !386

"for blur_y.s0.x.x.rebased1647.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1631"
  %28168 = sext i32 %t1738984 to i64
  %28169 = zext i32 %.pre-phi3618 to i64
  %28170 = mul nsw i64 %28169, %314
  %28171 = sub nsw i64 %28170, %294
  %28172 = zext i32 %.pre-phi3614 to i64
  %28173 = mul nsw i64 %28172, %314
  %28174 = sub nsw i64 %28173, %294
  %28175 = zext i32 %.pre-phi3622 to i64
  %28176 = mul nsw i64 %28175, %314
  %28177 = sub nsw i64 %28176, %294
  %28178 = zext i32 %.pre-phi3628 to i64
  %28179 = mul nsw i64 %28178, %314
  %28180 = sub nsw i64 %28179, %294
  %28181 = zext i32 %.pre-phi3598 to i64
  %28182 = mul nsw i64 %28181, %314
  %28183 = sub nsw i64 %28182, %294
  %28184 = zext i32 %.pre-phi3606 to i64
  %28185 = mul nsw i64 %28184, %314
  %28186 = sub nsw i64 %28185, %294
  %28187 = zext i32 %.pre-phi3602 to i64
  %28188 = mul nsw i64 %28187, %314
  %28189 = sub nsw i64 %28188, %294
  %28190 = sext i32 %a367 to i64
  %28191 = add nsw i64 %28190, 12
  %28192 = mul nsw i64 %28191, %315
  %28193 = add nsw i64 %28192, %318
  br label %"for blur_y.s0.x.x.rebased1647"

"produce blur_x1637":                             ; preds = %"for blur_y.s0.x.x.rebased1630"
  %t9441638 = add nsw i32 %28165, %t19531627
  %28194 = sext i32 %t9441638 to i64
  %28195 = getelementptr inbounds i16, i16* %read_input860, i64 %28194
  %28196 = getelementptr inbounds i16, i16* %28195, i64 1
  %28197 = bitcast i16* %28196 to <16 x i16>*
  %28198 = load <16 x i16>, <16 x i16>* %28197, align 2, !tbaa !396
  %28199 = getelementptr inbounds i16, i16* %28195, i64 17
  %28200 = bitcast i16* %28199 to <16 x i16>*
  %28201 = load <16 x i16>, <16 x i16>* %28200, align 2, !tbaa !396
  %28202 = bitcast i16* %28195 to <16 x i16>*
  %28203 = load <16 x i16>, <16 x i16>* %28202, align 2, !tbaa !396
  %28204 = getelementptr inbounds i16, i16* %28195, i64 16
  %28205 = bitcast i16* %28204 to <16 x i16>*
  %28206 = load <16 x i16>, <16 x i16>* %28205, align 2, !tbaa !396
  %28207 = getelementptr inbounds i16, i16* %28195, i64 2
  %28208 = bitcast i16* %28207 to <16 x i16>*
  %28209 = load <16 x i16>, <16 x i16>* %28208, align 2, !tbaa !396
  %28210 = getelementptr inbounds i16, i16* %28195, i64 18
  %28211 = bitcast i16* %28210 to <16 x i16>*
  %28212 = load <16 x i16>, <16 x i16>* %28211, align 2, !tbaa !396
  %28213 = getelementptr inbounds i16, i16* %28195, i64 3
  %28214 = bitcast i16* %28213 to <16 x i16>*
  %28215 = load <16 x i16>, <16 x i16>* %28214, align 2, !tbaa !396
  %28216 = getelementptr inbounds i16, i16* %28195, i64 19
  %28217 = bitcast i16* %28216 to <16 x i16>*
  %28218 = load <16 x i16>, <16 x i16>* %28217, align 2, !tbaa !396
  %28219 = getelementptr inbounds i16, i16* %28195, i64 4
  %28220 = bitcast i16* %28219 to <16 x i16>*
  %28221 = load <16 x i16>, <16 x i16>* %28220, align 2, !tbaa !396
  %28222 = getelementptr inbounds i16, i16* %28195, i64 20
  %28223 = bitcast i16* %28222 to <16 x i16>*
  %28224 = load <16 x i16>, <16 x i16>* %28223, align 2, !tbaa !396
  %28225 = getelementptr inbounds i16, i16* %28195, i64 6
  %28226 = bitcast i16* %28225 to <16 x i16>*
  %28227 = load <16 x i16>, <16 x i16>* %28226, align 2, !tbaa !396
  %28228 = getelementptr inbounds i16, i16* %28195, i64 22
  %28229 = bitcast i16* %28228 to <16 x i16>*
  %28230 = load <16 x i16>, <16 x i16>* %28229, align 2, !tbaa !396
  %28231 = getelementptr inbounds i16, i16* %28195, i64 5
  %28232 = bitcast i16* %28231 to <16 x i16>*
  %28233 = load <16 x i16>, <16 x i16>* %28232, align 2, !tbaa !396
  %28234 = getelementptr inbounds i16, i16* %28195, i64 21
  %28235 = bitcast i16* %28234 to <16 x i16>*
  %28236 = load <16 x i16>, <16 x i16>* %28235, align 2, !tbaa !396
  %28237 = add <16 x i16> %28203, %28198
  %28238 = add <16 x i16> %28237, %28209
  %28239 = add <16 x i16> %28238, %28215
  %28240 = add <16 x i16> %28239, %28221
  %28241 = add <16 x i16> %28240, %28227
  %28242 = add <16 x i16> %28241, %28233
  %28243 = add <16 x i16> %28206, %28201
  %28244 = add <16 x i16> %28243, %28212
  %28245 = add <16 x i16> %28244, %28218
  %28246 = add <16 x i16> %28245, %28224
  %28247 = add <16 x i16> %28246, %28230
  %28248 = add <16 x i16> %28247, %28236
  %28249 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28242, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28250 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28248, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28251 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28249, <16 x i16> %28242)
  %28252 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28250, <16 x i16> %28248)
  %28253 = shufflevector <16 x i16> %28251, <16 x i16> %28252, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28254 = lshr <32 x i16> %28253, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28255 = shufflevector <32 x i16> %28254, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28256 = shl nsw i64 %28162, 5
  %28257 = add nsw i64 %28256, %27967
  %28258 = getelementptr inbounds i16, i16* %blur_x917, i64 %28257
  %28259 = bitcast i16* %28258 to <16 x i16>*
  store <16 x i16> %28255, <16 x i16>* %28259, align 2, !tbaa !399
  %28260 = shufflevector <32 x i16> %28254, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28261 = getelementptr inbounds i16, i16* %28258, i64 16
  %28262 = bitcast i16* %28261 to <16 x i16>*
  store <16 x i16> %28260, <16 x i16>* %28262, align 2, !tbaa !399
  br label %"consume blur_x1639"

"consume blur_x1639":                             ; preds = %"for blur_y.s0.x.x.rebased1630.consume blur_x1639_crit_edge", %"produce blur_x1637"
  %.pre-phi3652 = phi i64 [ %.pre3651, %"for blur_y.s0.x.x.rebased1630.consume blur_x1639_crit_edge" ], [ %28256, %"produce blur_x1637" ]
  %28263 = add nsw i64 %27970, %.pre-phi3652
  %28264 = getelementptr inbounds i16, i16* %blur_x917, i64 %28263
  %28265 = bitcast i16* %28264 to <16 x i16>*
  %28266 = load <16 x i16>, <16 x i16>* %28265, align 2, !tbaa !399
  %28267 = getelementptr inbounds i16, i16* %28264, i64 16
  %28268 = bitcast i16* %28267 to <16 x i16>*
  %28269 = load <16 x i16>, <16 x i16>* %28268, align 2, !tbaa !399
  %28270 = add nsw i64 %27973, %.pre-phi3652
  %28271 = getelementptr inbounds i16, i16* %blur_x917, i64 %28270
  %28272 = bitcast i16* %28271 to <16 x i16>*
  %28273 = load <16 x i16>, <16 x i16>* %28272, align 2, !tbaa !399
  %28274 = getelementptr inbounds i16, i16* %28271, i64 16
  %28275 = bitcast i16* %28274 to <16 x i16>*
  %28276 = load <16 x i16>, <16 x i16>* %28275, align 2, !tbaa !399
  %28277 = add nsw i64 %27976, %.pre-phi3652
  %28278 = getelementptr inbounds i16, i16* %blur_x917, i64 %28277
  %28279 = bitcast i16* %28278 to <16 x i16>*
  %28280 = load <16 x i16>, <16 x i16>* %28279, align 2, !tbaa !399
  %28281 = getelementptr inbounds i16, i16* %28278, i64 16
  %28282 = bitcast i16* %28281 to <16 x i16>*
  %28283 = load <16 x i16>, <16 x i16>* %28282, align 2, !tbaa !399
  %28284 = add nsw i64 %27979, %.pre-phi3652
  %28285 = getelementptr inbounds i16, i16* %blur_x917, i64 %28284
  %28286 = bitcast i16* %28285 to <16 x i16>*
  %28287 = load <16 x i16>, <16 x i16>* %28286, align 2, !tbaa !399
  %28288 = getelementptr inbounds i16, i16* %28285, i64 16
  %28289 = bitcast i16* %28288 to <16 x i16>*
  %28290 = load <16 x i16>, <16 x i16>* %28289, align 2, !tbaa !399
  %28291 = add nsw i64 %27982, %.pre-phi3652
  %28292 = getelementptr inbounds i16, i16* %blur_x917, i64 %28291
  %28293 = bitcast i16* %28292 to <16 x i16>*
  %28294 = load <16 x i16>, <16 x i16>* %28293, align 2, !tbaa !399
  %28295 = getelementptr inbounds i16, i16* %28292, i64 16
  %28296 = bitcast i16* %28295 to <16 x i16>*
  %28297 = load <16 x i16>, <16 x i16>* %28296, align 2, !tbaa !399
  %28298 = add nsw i64 %27985, %.pre-phi3652
  %28299 = getelementptr inbounds i16, i16* %blur_x917, i64 %28298
  %28300 = bitcast i16* %28299 to <16 x i16>*
  %28301 = load <16 x i16>, <16 x i16>* %28300, align 2, !tbaa !399
  %28302 = getelementptr inbounds i16, i16* %28299, i64 16
  %28303 = bitcast i16* %28302 to <16 x i16>*
  %28304 = load <16 x i16>, <16 x i16>* %28303, align 2, !tbaa !399
  %28305 = add nsw i64 %27988, %.pre-phi3652
  %28306 = getelementptr inbounds i16, i16* %blur_x917, i64 %28305
  %28307 = bitcast i16* %28306 to <16 x i16>*
  %28308 = load <16 x i16>, <16 x i16>* %28307, align 2, !tbaa !399
  %28309 = getelementptr inbounds i16, i16* %28306, i64 16
  %28310 = bitcast i16* %28309 to <16 x i16>*
  %28311 = load <16 x i16>, <16 x i16>* %28310, align 2, !tbaa !399
  %28312 = add <16 x i16> %28273, %28266
  %28313 = add <16 x i16> %28312, %28280
  %28314 = add <16 x i16> %28313, %28287
  %28315 = add <16 x i16> %28314, %28294
  %28316 = add <16 x i16> %28315, %28301
  %28317 = add <16 x i16> %28316, %28308
  %28318 = add <16 x i16> %28276, %28269
  %28319 = add <16 x i16> %28318, %28283
  %28320 = add <16 x i16> %28319, %28290
  %28321 = add <16 x i16> %28320, %28297
  %28322 = add <16 x i16> %28321, %28304
  %28323 = add <16 x i16> %28322, %28311
  %28324 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28317, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28325 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28323, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28326 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28324, <16 x i16> %28317)
  %28327 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28325, <16 x i16> %28323)
  %28328 = shufflevector <16 x i16> %28326, <16 x i16> %28327, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28329 = lshr <32 x i16> %28328, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28330 = shufflevector <32 x i16> %28329, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28331 = add nsw i64 %27992, %.pre-phi3652
  %28332 = getelementptr inbounds i16, i16* %264, i64 %28331
  %28333 = bitcast i16* %28332 to <16 x i16>*
  store <16 x i16> %28330, <16 x i16>* %28333, align 2, !tbaa !401
  %28334 = shufflevector <32 x i16> %28329, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28335 = getelementptr inbounds i16, i16* %28332, i64 16
  %28336 = bitcast i16* %28335 to <16 x i16>*
  store <16 x i16> %28334, <16 x i16>* %28336, align 2, !tbaa !401
  %indvars.iv.next3442 = add nuw nsw i64 %indvars.iv3441, 1
  %.not2686 = icmp eq i64 %indvars.iv.next3442, %386
  br i1 %.not2686, label %"end for blur_y.s0.x.x.rebased1631", label %"for blur_y.s0.x.x.rebased1630"

"for blur_y.s0.x.x.rebased1647":                  ; preds = %"for blur_y.s0.x.x.rebased1647.preheader", %"consume blur_x1657"
  %blur_y.s0.x.x.rebased1649 = phi i32 [ %28487, %"consume blur_x1657" ], [ 0, %"for blur_y.s0.x.x.rebased1647.preheader" ]
  %28337 = add nsw i32 %blur_y.s0.x.x.rebased1649, %t1670852
  %a544 = shl nsw i32 %28337, 5
  %28338 = icmp sgt i32 %a355, %a544
  %b550 = select i1 %28338, i32 %a544, i32 %a355
  %28339 = icmp slt i32 %28337, 1
  %28340 = icmp sgt i32 %202, %a544
  %28341 = or i1 %28339, %28340
  br i1 %28341, label %"produce blur_x1654", label %"consume blur_x1657"

"end for blur_y.s0.x.x.rebased1648":              ; preds = %"consume blur_x1657", %"end for blur_y.s0.x.x.rebased1631"
  br i1 %232, label %"produce blur_x1661", label %after_bb1658

"produce blur_x1654":                             ; preds = %"for blur_y.s0.x.x.rebased1647"
  %28342 = icmp slt i32 %b550, %202
  %blur_x.s0.x.v1.base.s1655 = select i1 %28342, i32 %b550, i32 %202
  %t9491656 = add nsw i32 %blur_x.s0.x.v1.base.s1655, %t19531627
  %28343 = sext i32 %t9491656 to i64
  %28344 = getelementptr inbounds i16, i16* %read_input860, i64 %28343
  %28345 = getelementptr inbounds i16, i16* %28344, i64 1
  %28346 = bitcast i16* %28345 to <16 x i16>*
  %28347 = load <16 x i16>, <16 x i16>* %28346, align 2, !tbaa !396
  %28348 = getelementptr inbounds i16, i16* %28344, i64 17
  %28349 = bitcast i16* %28348 to <16 x i16>*
  %28350 = load <16 x i16>, <16 x i16>* %28349, align 2, !tbaa !396
  %28351 = bitcast i16* %28344 to <16 x i16>*
  %28352 = load <16 x i16>, <16 x i16>* %28351, align 2, !tbaa !396
  %28353 = getelementptr inbounds i16, i16* %28344, i64 16
  %28354 = bitcast i16* %28353 to <16 x i16>*
  %28355 = load <16 x i16>, <16 x i16>* %28354, align 2, !tbaa !396
  %28356 = getelementptr inbounds i16, i16* %28344, i64 2
  %28357 = bitcast i16* %28356 to <16 x i16>*
  %28358 = load <16 x i16>, <16 x i16>* %28357, align 2, !tbaa !396
  %28359 = getelementptr inbounds i16, i16* %28344, i64 18
  %28360 = bitcast i16* %28359 to <16 x i16>*
  %28361 = load <16 x i16>, <16 x i16>* %28360, align 2, !tbaa !396
  %28362 = getelementptr inbounds i16, i16* %28344, i64 3
  %28363 = bitcast i16* %28362 to <16 x i16>*
  %28364 = load <16 x i16>, <16 x i16>* %28363, align 2, !tbaa !396
  %28365 = getelementptr inbounds i16, i16* %28344, i64 19
  %28366 = bitcast i16* %28365 to <16 x i16>*
  %28367 = load <16 x i16>, <16 x i16>* %28366, align 2, !tbaa !396
  %28368 = getelementptr inbounds i16, i16* %28344, i64 4
  %28369 = bitcast i16* %28368 to <16 x i16>*
  %28370 = load <16 x i16>, <16 x i16>* %28369, align 2, !tbaa !396
  %28371 = getelementptr inbounds i16, i16* %28344, i64 20
  %28372 = bitcast i16* %28371 to <16 x i16>*
  %28373 = load <16 x i16>, <16 x i16>* %28372, align 2, !tbaa !396
  %28374 = getelementptr inbounds i16, i16* %28344, i64 6
  %28375 = bitcast i16* %28374 to <16 x i16>*
  %28376 = load <16 x i16>, <16 x i16>* %28375, align 2, !tbaa !396
  %28377 = getelementptr inbounds i16, i16* %28344, i64 22
  %28378 = bitcast i16* %28377 to <16 x i16>*
  %28379 = load <16 x i16>, <16 x i16>* %28378, align 2, !tbaa !396
  %28380 = getelementptr inbounds i16, i16* %28344, i64 5
  %28381 = bitcast i16* %28380 to <16 x i16>*
  %28382 = load <16 x i16>, <16 x i16>* %28381, align 2, !tbaa !396
  %28383 = getelementptr inbounds i16, i16* %28344, i64 21
  %28384 = bitcast i16* %28383 to <16 x i16>*
  %28385 = load <16 x i16>, <16 x i16>* %28384, align 2, !tbaa !396
  %28386 = add <16 x i16> %28352, %28347
  %28387 = add <16 x i16> %28386, %28358
  %28388 = add <16 x i16> %28387, %28364
  %28389 = add <16 x i16> %28388, %28370
  %28390 = add <16 x i16> %28389, %28376
  %28391 = add <16 x i16> %28390, %28382
  %28392 = add <16 x i16> %28355, %28350
  %28393 = add <16 x i16> %28392, %28361
  %28394 = add <16 x i16> %28393, %28367
  %28395 = add <16 x i16> %28394, %28373
  %28396 = add <16 x i16> %28395, %28379
  %28397 = add <16 x i16> %28396, %28385
  %28398 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28391, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28399 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28397, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28400 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28398, <16 x i16> %28391)
  %28401 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28399, <16 x i16> %28397)
  %28402 = shufflevector <16 x i16> %28400, <16 x i16> %28401, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28403 = lshr <32 x i16> %28402, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28404 = shufflevector <32 x i16> %28403, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28405 = sext i32 %blur_x.s0.x.v1.base.s1655 to i64
  %28406 = add nsw i64 %28405, %28168
  %28407 = getelementptr inbounds i16, i16* %blur_x917, i64 %28406
  %28408 = bitcast i16* %28407 to <16 x i16>*
  store <16 x i16> %28404, <16 x i16>* %28408, align 2, !tbaa !399
  %28409 = shufflevector <32 x i16> %28403, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28410 = getelementptr inbounds i16, i16* %28407, i64 16
  %28411 = bitcast i16* %28410 to <16 x i16>*
  store <16 x i16> %28409, <16 x i16>* %28411, align 2, !tbaa !399
  br label %"consume blur_x1657"

"consume blur_x1657":                             ; preds = %"for blur_y.s0.x.x.rebased1647", %"produce blur_x1654"
  %28412 = sext i32 %b550 to i64
  %28413 = add nsw i64 %28171, %28412
  %28414 = getelementptr inbounds i16, i16* %blur_x917, i64 %28413
  %28415 = bitcast i16* %28414 to <16 x i16>*
  %28416 = load <16 x i16>, <16 x i16>* %28415, align 2, !tbaa !399
  %28417 = getelementptr inbounds i16, i16* %28414, i64 16
  %28418 = bitcast i16* %28417 to <16 x i16>*
  %28419 = load <16 x i16>, <16 x i16>* %28418, align 2, !tbaa !399
  %28420 = add nsw i64 %28174, %28412
  %28421 = getelementptr inbounds i16, i16* %blur_x917, i64 %28420
  %28422 = bitcast i16* %28421 to <16 x i16>*
  %28423 = load <16 x i16>, <16 x i16>* %28422, align 2, !tbaa !399
  %28424 = getelementptr inbounds i16, i16* %28421, i64 16
  %28425 = bitcast i16* %28424 to <16 x i16>*
  %28426 = load <16 x i16>, <16 x i16>* %28425, align 2, !tbaa !399
  %28427 = add nsw i64 %28177, %28412
  %28428 = getelementptr inbounds i16, i16* %blur_x917, i64 %28427
  %28429 = bitcast i16* %28428 to <16 x i16>*
  %28430 = load <16 x i16>, <16 x i16>* %28429, align 2, !tbaa !399
  %28431 = getelementptr inbounds i16, i16* %28428, i64 16
  %28432 = bitcast i16* %28431 to <16 x i16>*
  %28433 = load <16 x i16>, <16 x i16>* %28432, align 2, !tbaa !399
  %28434 = add nsw i64 %28180, %28412
  %28435 = getelementptr inbounds i16, i16* %blur_x917, i64 %28434
  %28436 = bitcast i16* %28435 to <16 x i16>*
  %28437 = load <16 x i16>, <16 x i16>* %28436, align 2, !tbaa !399
  %28438 = getelementptr inbounds i16, i16* %28435, i64 16
  %28439 = bitcast i16* %28438 to <16 x i16>*
  %28440 = load <16 x i16>, <16 x i16>* %28439, align 2, !tbaa !399
  %28441 = add nsw i64 %28183, %28412
  %28442 = getelementptr inbounds i16, i16* %blur_x917, i64 %28441
  %28443 = bitcast i16* %28442 to <16 x i16>*
  %28444 = load <16 x i16>, <16 x i16>* %28443, align 2, !tbaa !399
  %28445 = getelementptr inbounds i16, i16* %28442, i64 16
  %28446 = bitcast i16* %28445 to <16 x i16>*
  %28447 = load <16 x i16>, <16 x i16>* %28446, align 2, !tbaa !399
  %28448 = add nsw i64 %28186, %28412
  %28449 = getelementptr inbounds i16, i16* %blur_x917, i64 %28448
  %28450 = bitcast i16* %28449 to <16 x i16>*
  %28451 = load <16 x i16>, <16 x i16>* %28450, align 2, !tbaa !399
  %28452 = getelementptr inbounds i16, i16* %28449, i64 16
  %28453 = bitcast i16* %28452 to <16 x i16>*
  %28454 = load <16 x i16>, <16 x i16>* %28453, align 2, !tbaa !399
  %28455 = add nsw i64 %28189, %28412
  %28456 = getelementptr inbounds i16, i16* %blur_x917, i64 %28455
  %28457 = bitcast i16* %28456 to <16 x i16>*
  %28458 = load <16 x i16>, <16 x i16>* %28457, align 2, !tbaa !399
  %28459 = getelementptr inbounds i16, i16* %28456, i64 16
  %28460 = bitcast i16* %28459 to <16 x i16>*
  %28461 = load <16 x i16>, <16 x i16>* %28460, align 2, !tbaa !399
  %28462 = add <16 x i16> %28423, %28416
  %28463 = add <16 x i16> %28462, %28430
  %28464 = add <16 x i16> %28463, %28437
  %28465 = add <16 x i16> %28464, %28444
  %28466 = add <16 x i16> %28465, %28451
  %28467 = add <16 x i16> %28466, %28458
  %28468 = add <16 x i16> %28426, %28419
  %28469 = add <16 x i16> %28468, %28433
  %28470 = add <16 x i16> %28469, %28440
  %28471 = add <16 x i16> %28470, %28447
  %28472 = add <16 x i16> %28471, %28454
  %28473 = add <16 x i16> %28472, %28461
  %28474 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28467, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28475 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28473, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28476 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28474, <16 x i16> %28467)
  %28477 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28475, <16 x i16> %28473)
  %28478 = shufflevector <16 x i16> %28476, <16 x i16> %28477, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28479 = lshr <32 x i16> %28478, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28480 = shufflevector <32 x i16> %28479, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28481 = add nsw i64 %28193, %28412
  %28482 = getelementptr inbounds i16, i16* %264, i64 %28481
  %28483 = bitcast i16* %28482 to <16 x i16>*
  store <16 x i16> %28480, <16 x i16>* %28483, align 2, !tbaa !401
  %28484 = shufflevector <32 x i16> %28479, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28485 = getelementptr inbounds i16, i16* %28482, i64 16
  %28486 = bitcast i16* %28485 to <16 x i16>*
  store <16 x i16> %28484, <16 x i16>* %28486, align 2, !tbaa !401
  %28487 = add nuw nsw i32 %blur_y.s0.x.x.rebased1649, 1
  %.not2685 = icmp eq i32 %28487, %t1727937
  br i1 %.not2685, label %"end for blur_y.s0.x.x.rebased1648", label %"for blur_y.s0.x.x.rebased1647"

after_bb1658:                                     ; preds = %"end for blur_y.s0.x.x.rebased1648", %"produce blur_x1661"
  br i1 %298, label %"for blur_y.s0.x.x.rebased1673.preheader", label %"end for blur_y.s0.x.x.rebased1674", !prof !386

"for blur_y.s0.x.x.rebased1673.preheader":        ; preds = %after_bb1658
  %28488 = sext i32 %t17441014 to i64
  %28489 = zext i32 %.pre-phi3622 to i64
  %28490 = mul nsw i64 %28489, %314
  %28491 = sub nsw i64 %28490, %294
  %28492 = zext i32 %.pre-phi3618 to i64
  %28493 = mul nsw i64 %28492, %314
  %28494 = sub nsw i64 %28493, %294
  %28495 = zext i32 %.pre-phi3628 to i64
  %28496 = mul nsw i64 %28495, %314
  %28497 = sub nsw i64 %28496, %294
  %28498 = zext i32 %.pre-phi3598 to i64
  %28499 = mul nsw i64 %28498, %314
  %28500 = sub nsw i64 %28499, %294
  %28501 = zext i32 %.pre-phi3602 to i64
  %28502 = mul nsw i64 %28501, %314
  %28503 = sub nsw i64 %28502, %294
  %28504 = zext i32 %.pre-phi3610 to i64
  %28505 = mul nsw i64 %28504, %314
  %28506 = sub nsw i64 %28505, %294
  %28507 = zext i32 %.pre-phi3606 to i64
  %28508 = mul nsw i64 %28507, %314
  %28509 = sub nsw i64 %28508, %294
  %28510 = sext i32 %a367 to i64
  %28511 = add nsw i64 %28510, 13
  %28512 = mul nsw i64 %28511, %315
  %28513 = add nsw i64 %28512, %318
  br label %"for blur_y.s0.x.x.rebased1673"

"produce blur_x1661":                             ; preds = %"end for blur_y.s0.x.x.rebased1648"
  %28514 = getelementptr inbounds i16, i16* %read_input860, i64 %343
  %28515 = getelementptr inbounds i16, i16* %28514, i64 -31
  %28516 = bitcast i16* %28515 to <16 x i16>*
  %28517 = load <16 x i16>, <16 x i16>* %28516, align 2, !tbaa !396
  %28518 = getelementptr inbounds i16, i16* %28514, i64 -15
  %28519 = bitcast i16* %28518 to <16 x i16>*
  %28520 = load <16 x i16>, <16 x i16>* %28519, align 2, !tbaa !396
  %28521 = getelementptr inbounds i16, i16* %28514, i64 -32
  %28522 = bitcast i16* %28521 to <16 x i16>*
  %28523 = load <16 x i16>, <16 x i16>* %28522, align 2, !tbaa !396
  %28524 = getelementptr inbounds i16, i16* %28514, i64 -16
  %28525 = bitcast i16* %28524 to <16 x i16>*
  %28526 = load <16 x i16>, <16 x i16>* %28525, align 2, !tbaa !396
  %28527 = getelementptr inbounds i16, i16* %28514, i64 -30
  %28528 = bitcast i16* %28527 to <16 x i16>*
  %28529 = load <16 x i16>, <16 x i16>* %28528, align 2, !tbaa !396
  %28530 = getelementptr inbounds i16, i16* %28514, i64 -14
  %28531 = bitcast i16* %28530 to <16 x i16>*
  %28532 = load <16 x i16>, <16 x i16>* %28531, align 2, !tbaa !396
  %28533 = getelementptr inbounds i16, i16* %28514, i64 -29
  %28534 = bitcast i16* %28533 to <16 x i16>*
  %28535 = load <16 x i16>, <16 x i16>* %28534, align 2, !tbaa !396
  %28536 = getelementptr inbounds i16, i16* %28514, i64 -13
  %28537 = bitcast i16* %28536 to <16 x i16>*
  %28538 = load <16 x i16>, <16 x i16>* %28537, align 2, !tbaa !396
  %28539 = getelementptr inbounds i16, i16* %28514, i64 -28
  %28540 = bitcast i16* %28539 to <16 x i16>*
  %28541 = load <16 x i16>, <16 x i16>* %28540, align 2, !tbaa !396
  %28542 = getelementptr inbounds i16, i16* %28514, i64 -12
  %28543 = bitcast i16* %28542 to <16 x i16>*
  %28544 = load <16 x i16>, <16 x i16>* %28543, align 2, !tbaa !396
  %28545 = getelementptr inbounds i16, i16* %28514, i64 -26
  %28546 = bitcast i16* %28545 to <16 x i16>*
  %28547 = load <16 x i16>, <16 x i16>* %28546, align 2, !tbaa !396
  %28548 = getelementptr inbounds i16, i16* %28514, i64 -10
  %28549 = bitcast i16* %28548 to <16 x i16>*
  %28550 = load <16 x i16>, <16 x i16>* %28549, align 2, !tbaa !396
  %28551 = getelementptr inbounds i16, i16* %28514, i64 -27
  %28552 = bitcast i16* %28551 to <16 x i16>*
  %28553 = load <16 x i16>, <16 x i16>* %28552, align 2, !tbaa !396
  %28554 = getelementptr inbounds i16, i16* %28514, i64 -11
  %28555 = bitcast i16* %28554 to <16 x i16>*
  %28556 = load <16 x i16>, <16 x i16>* %28555, align 2, !tbaa !396
  %28557 = add <16 x i16> %28523, %28517
  %28558 = add <16 x i16> %28557, %28529
  %28559 = add <16 x i16> %28558, %28535
  %28560 = add <16 x i16> %28559, %28541
  %28561 = add <16 x i16> %28560, %28547
  %28562 = add <16 x i16> %28561, %28553
  %28563 = add <16 x i16> %28526, %28520
  %28564 = add <16 x i16> %28563, %28532
  %28565 = add <16 x i16> %28564, %28538
  %28566 = add <16 x i16> %28565, %28544
  %28567 = add <16 x i16> %28566, %28550
  %28568 = add <16 x i16> %28567, %28556
  %28569 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28562, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28570 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28568, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28571 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28569, <16 x i16> %28562)
  %28572 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28570, <16 x i16> %28568)
  %28573 = shufflevector <16 x i16> %28571, <16 x i16> %28572, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28574 = lshr <32 x i16> %28573, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28575 = shufflevector <32 x i16> %28574, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28576 = zext i32 %.pre-phi3610 to i64
  %28577 = mul nsw i64 %295, %28576
  %28578 = add nsw i64 %297, %28577
  %28579 = getelementptr inbounds i16, i16* %blur_x917, i64 %28578
  %28580 = getelementptr inbounds i16, i16* %28579, i64 -32
  %28581 = bitcast i16* %28580 to <16 x i16>*
  store <16 x i16> %28575, <16 x i16>* %28581, align 2, !tbaa !399
  %28582 = shufflevector <32 x i16> %28574, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28583 = getelementptr inbounds i16, i16* %28579, i64 -16
  %28584 = bitcast i16* %28583 to <16 x i16>*
  store <16 x i16> %28582, <16 x i16>* %28584, align 2, !tbaa !399
  %28585 = zext i32 %.pre-phi3622 to i64
  %28586 = mul nsw i64 %28585, %314
  %28587 = add nsw i64 %28586, %292
  %28588 = getelementptr inbounds i16, i16* %blur_x917, i64 %28587
  %28589 = getelementptr inbounds i16, i16* %28588, i64 -32
  %28590 = bitcast i16* %28589 to <16 x i16>*
  %28591 = load <16 x i16>, <16 x i16>* %28590, align 2, !tbaa !399
  %28592 = getelementptr inbounds i16, i16* %28588, i64 -16
  %28593 = bitcast i16* %28592 to <16 x i16>*
  %28594 = load <16 x i16>, <16 x i16>* %28593, align 2, !tbaa !399
  %28595 = zext i32 %.pre-phi3618 to i64
  %28596 = mul nsw i64 %28595, %314
  %28597 = add nsw i64 %28596, %292
  %28598 = getelementptr inbounds i16, i16* %blur_x917, i64 %28597
  %28599 = getelementptr inbounds i16, i16* %28598, i64 -32
  %28600 = bitcast i16* %28599 to <16 x i16>*
  %28601 = load <16 x i16>, <16 x i16>* %28600, align 2, !tbaa !399
  %28602 = getelementptr inbounds i16, i16* %28598, i64 -16
  %28603 = bitcast i16* %28602 to <16 x i16>*
  %28604 = load <16 x i16>, <16 x i16>* %28603, align 2, !tbaa !399
  %28605 = zext i32 %.pre-phi3628 to i64
  %28606 = mul nsw i64 %28605, %314
  %28607 = add nsw i64 %28606, %292
  %28608 = getelementptr inbounds i16, i16* %blur_x917, i64 %28607
  %28609 = getelementptr inbounds i16, i16* %28608, i64 -32
  %28610 = bitcast i16* %28609 to <16 x i16>*
  %28611 = load <16 x i16>, <16 x i16>* %28610, align 2, !tbaa !399
  %28612 = getelementptr inbounds i16, i16* %28608, i64 -16
  %28613 = bitcast i16* %28612 to <16 x i16>*
  %28614 = load <16 x i16>, <16 x i16>* %28613, align 2, !tbaa !399
  %28615 = zext i32 %.pre-phi3598 to i64
  %28616 = mul nsw i64 %28615, %314
  %28617 = add nsw i64 %28616, %292
  %28618 = getelementptr inbounds i16, i16* %blur_x917, i64 %28617
  %28619 = getelementptr inbounds i16, i16* %28618, i64 -32
  %28620 = bitcast i16* %28619 to <16 x i16>*
  %28621 = load <16 x i16>, <16 x i16>* %28620, align 2, !tbaa !399
  %28622 = getelementptr inbounds i16, i16* %28618, i64 -16
  %28623 = bitcast i16* %28622 to <16 x i16>*
  %28624 = load <16 x i16>, <16 x i16>* %28623, align 2, !tbaa !399
  %28625 = zext i32 %.pre-phi3602 to i64
  %28626 = mul nsw i64 %28625, %314
  %28627 = add nsw i64 %28626, %292
  %28628 = getelementptr inbounds i16, i16* %blur_x917, i64 %28627
  %28629 = getelementptr inbounds i16, i16* %28628, i64 -32
  %28630 = bitcast i16* %28629 to <16 x i16>*
  %28631 = load <16 x i16>, <16 x i16>* %28630, align 2, !tbaa !399
  %28632 = getelementptr inbounds i16, i16* %28628, i64 -16
  %28633 = bitcast i16* %28632 to <16 x i16>*
  %28634 = load <16 x i16>, <16 x i16>* %28633, align 2, !tbaa !399
  %28635 = mul nsw i64 %28576, %314
  %28636 = add nsw i64 %28635, %292
  %28637 = getelementptr inbounds i16, i16* %blur_x917, i64 %28636
  %28638 = getelementptr inbounds i16, i16* %28637, i64 -32
  %28639 = bitcast i16* %28638 to <16 x i16>*
  %28640 = load <16 x i16>, <16 x i16>* %28639, align 2, !tbaa !399
  %28641 = getelementptr inbounds i16, i16* %28637, i64 -16
  %28642 = bitcast i16* %28641 to <16 x i16>*
  %28643 = load <16 x i16>, <16 x i16>* %28642, align 2, !tbaa !399
  %28644 = zext i32 %.pre-phi3606 to i64
  %28645 = mul nsw i64 %28644, %314
  %28646 = add nsw i64 %28645, %292
  %28647 = getelementptr inbounds i16, i16* %blur_x917, i64 %28646
  %28648 = getelementptr inbounds i16, i16* %28647, i64 -32
  %28649 = bitcast i16* %28648 to <16 x i16>*
  %28650 = load <16 x i16>, <16 x i16>* %28649, align 2, !tbaa !399
  %28651 = getelementptr inbounds i16, i16* %28647, i64 -16
  %28652 = bitcast i16* %28651 to <16 x i16>*
  %28653 = load <16 x i16>, <16 x i16>* %28652, align 2, !tbaa !399
  %28654 = add <16 x i16> %28601, %28591
  %28655 = add <16 x i16> %28654, %28611
  %28656 = add <16 x i16> %28655, %28621
  %28657 = add <16 x i16> %28656, %28631
  %28658 = add <16 x i16> %28657, %28640
  %28659 = add <16 x i16> %28658, %28650
  %28660 = add <16 x i16> %28604, %28594
  %28661 = add <16 x i16> %28660, %28614
  %28662 = add <16 x i16> %28661, %28624
  %28663 = add <16 x i16> %28662, %28634
  %28664 = add <16 x i16> %28663, %28643
  %28665 = add <16 x i16> %28664, %28653
  %28666 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28659, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28667 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28665, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28668 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28666, <16 x i16> %28659)
  %28669 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28667, <16 x i16> %28665)
  %28670 = shufflevector <16 x i16> %28668, <16 x i16> %28669, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28671 = lshr <32 x i16> %28670, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28672 = shufflevector <32 x i16> %28671, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28673 = sext i32 %a367 to i64
  %28674 = add nsw i64 %28673, 13
  %28675 = mul nsw i64 %28674, %315
  %28676 = add nsw i64 %317, %28675
  %28677 = getelementptr inbounds i16, i16* %264, i64 %28676
  %28678 = getelementptr inbounds i16, i16* %28677, i64 -32
  %28679 = bitcast i16* %28678 to <16 x i16>*
  store <16 x i16> %28672, <16 x i16>* %28679, align 2, !tbaa !401
  %28680 = shufflevector <32 x i16> %28671, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28681 = getelementptr inbounds i16, i16* %28677, i64 -16
  %28682 = bitcast i16* %28681 to <16 x i16>*
  store <16 x i16> %28680, <16 x i16>* %28682, align 2, !tbaa !401
  br label %after_bb1658

"for blur_y.s0.x.x.rebased1673":                  ; preds = %"for blur_y.s0.x.x.rebased1673.preheader", %"consume blur_x1682"
  %indvars.iv3444 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1673.preheader" ], [ %indvars.iv.next3445, %"consume blur_x1682" ]
  %28683 = add nsw i64 %indvars.iv3444, %299
  %28684 = icmp slt i64 %28683, 1
  %28685 = trunc i64 %28683 to i32
  %28686 = shl nsw i32 %28685, 5
  %28687 = icmp sgt i32 %202, %28686
  %28688 = or i1 %28684, %28687
  br i1 %28688, label %"produce blur_x1680", label %"for blur_y.s0.x.x.rebased1673.consume blur_x1682_crit_edge"

"for blur_y.s0.x.x.rebased1673.consume blur_x1682_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1673"
  %.pre3653 = shl nsw i64 %28683, 5
  br label %"consume blur_x1682"

"end for blur_y.s0.x.x.rebased1674":              ; preds = %"consume blur_x1682", %after_bb1658
  br i1 %300, label %"for blur_y.s0.x.x.rebased1690.preheader", label %"end for blur_y.s0.x.x.rebased1691", !prof !386

"for blur_y.s0.x.x.rebased1690.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1674"
  %28689 = sext i32 %t17441014 to i64
  %28690 = zext i32 %.pre-phi3622 to i64
  %28691 = mul nsw i64 %28690, %314
  %28692 = sub nsw i64 %28691, %294
  %28693 = zext i32 %.pre-phi3618 to i64
  %28694 = mul nsw i64 %28693, %314
  %28695 = sub nsw i64 %28694, %294
  %28696 = zext i32 %.pre-phi3628 to i64
  %28697 = mul nsw i64 %28696, %314
  %28698 = sub nsw i64 %28697, %294
  %28699 = zext i32 %.pre-phi3598 to i64
  %28700 = mul nsw i64 %28699, %314
  %28701 = sub nsw i64 %28700, %294
  %28702 = zext i32 %.pre-phi3602 to i64
  %28703 = mul nsw i64 %28702, %314
  %28704 = sub nsw i64 %28703, %294
  %28705 = zext i32 %.pre-phi3610 to i64
  %28706 = mul nsw i64 %28705, %314
  %28707 = sub nsw i64 %28706, %294
  %28708 = zext i32 %.pre-phi3606 to i64
  %28709 = mul nsw i64 %28708, %314
  %28710 = sub nsw i64 %28709, %294
  %28711 = sext i32 %a367 to i64
  %28712 = add nsw i64 %28711, 13
  %28713 = mul nsw i64 %28712, %315
  %28714 = add nsw i64 %28713, %318
  br label %"for blur_y.s0.x.x.rebased1690"

"produce blur_x1680":                             ; preds = %"for blur_y.s0.x.x.rebased1673"
  %t9601681 = add nsw i32 %28686, %t19691670
  %28715 = sext i32 %t9601681 to i64
  %28716 = getelementptr inbounds i16, i16* %read_input860, i64 %28715
  %28717 = getelementptr inbounds i16, i16* %28716, i64 1
  %28718 = bitcast i16* %28717 to <16 x i16>*
  %28719 = load <16 x i16>, <16 x i16>* %28718, align 2, !tbaa !396
  %28720 = getelementptr inbounds i16, i16* %28716, i64 17
  %28721 = bitcast i16* %28720 to <16 x i16>*
  %28722 = load <16 x i16>, <16 x i16>* %28721, align 2, !tbaa !396
  %28723 = bitcast i16* %28716 to <16 x i16>*
  %28724 = load <16 x i16>, <16 x i16>* %28723, align 2, !tbaa !396
  %28725 = getelementptr inbounds i16, i16* %28716, i64 16
  %28726 = bitcast i16* %28725 to <16 x i16>*
  %28727 = load <16 x i16>, <16 x i16>* %28726, align 2, !tbaa !396
  %28728 = getelementptr inbounds i16, i16* %28716, i64 2
  %28729 = bitcast i16* %28728 to <16 x i16>*
  %28730 = load <16 x i16>, <16 x i16>* %28729, align 2, !tbaa !396
  %28731 = getelementptr inbounds i16, i16* %28716, i64 18
  %28732 = bitcast i16* %28731 to <16 x i16>*
  %28733 = load <16 x i16>, <16 x i16>* %28732, align 2, !tbaa !396
  %28734 = getelementptr inbounds i16, i16* %28716, i64 3
  %28735 = bitcast i16* %28734 to <16 x i16>*
  %28736 = load <16 x i16>, <16 x i16>* %28735, align 2, !tbaa !396
  %28737 = getelementptr inbounds i16, i16* %28716, i64 19
  %28738 = bitcast i16* %28737 to <16 x i16>*
  %28739 = load <16 x i16>, <16 x i16>* %28738, align 2, !tbaa !396
  %28740 = getelementptr inbounds i16, i16* %28716, i64 4
  %28741 = bitcast i16* %28740 to <16 x i16>*
  %28742 = load <16 x i16>, <16 x i16>* %28741, align 2, !tbaa !396
  %28743 = getelementptr inbounds i16, i16* %28716, i64 20
  %28744 = bitcast i16* %28743 to <16 x i16>*
  %28745 = load <16 x i16>, <16 x i16>* %28744, align 2, !tbaa !396
  %28746 = getelementptr inbounds i16, i16* %28716, i64 6
  %28747 = bitcast i16* %28746 to <16 x i16>*
  %28748 = load <16 x i16>, <16 x i16>* %28747, align 2, !tbaa !396
  %28749 = getelementptr inbounds i16, i16* %28716, i64 22
  %28750 = bitcast i16* %28749 to <16 x i16>*
  %28751 = load <16 x i16>, <16 x i16>* %28750, align 2, !tbaa !396
  %28752 = getelementptr inbounds i16, i16* %28716, i64 5
  %28753 = bitcast i16* %28752 to <16 x i16>*
  %28754 = load <16 x i16>, <16 x i16>* %28753, align 2, !tbaa !396
  %28755 = getelementptr inbounds i16, i16* %28716, i64 21
  %28756 = bitcast i16* %28755 to <16 x i16>*
  %28757 = load <16 x i16>, <16 x i16>* %28756, align 2, !tbaa !396
  %28758 = add <16 x i16> %28724, %28719
  %28759 = add <16 x i16> %28758, %28730
  %28760 = add <16 x i16> %28759, %28736
  %28761 = add <16 x i16> %28760, %28742
  %28762 = add <16 x i16> %28761, %28748
  %28763 = add <16 x i16> %28762, %28754
  %28764 = add <16 x i16> %28727, %28722
  %28765 = add <16 x i16> %28764, %28733
  %28766 = add <16 x i16> %28765, %28739
  %28767 = add <16 x i16> %28766, %28745
  %28768 = add <16 x i16> %28767, %28751
  %28769 = add <16 x i16> %28768, %28757
  %28770 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28763, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28771 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28769, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28772 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28770, <16 x i16> %28763)
  %28773 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28771, <16 x i16> %28769)
  %28774 = shufflevector <16 x i16> %28772, <16 x i16> %28773, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28775 = lshr <32 x i16> %28774, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28776 = shufflevector <32 x i16> %28775, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28777 = shl nsw i64 %28683, 5
  %28778 = add nsw i64 %28777, %28488
  %28779 = getelementptr inbounds i16, i16* %blur_x917, i64 %28778
  %28780 = bitcast i16* %28779 to <16 x i16>*
  store <16 x i16> %28776, <16 x i16>* %28780, align 2, !tbaa !399
  %28781 = shufflevector <32 x i16> %28775, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28782 = getelementptr inbounds i16, i16* %28779, i64 16
  %28783 = bitcast i16* %28782 to <16 x i16>*
  store <16 x i16> %28781, <16 x i16>* %28783, align 2, !tbaa !399
  br label %"consume blur_x1682"

"consume blur_x1682":                             ; preds = %"for blur_y.s0.x.x.rebased1673.consume blur_x1682_crit_edge", %"produce blur_x1680"
  %.pre-phi3654 = phi i64 [ %.pre3653, %"for blur_y.s0.x.x.rebased1673.consume blur_x1682_crit_edge" ], [ %28777, %"produce blur_x1680" ]
  %28784 = add nsw i64 %28491, %.pre-phi3654
  %28785 = getelementptr inbounds i16, i16* %blur_x917, i64 %28784
  %28786 = bitcast i16* %28785 to <16 x i16>*
  %28787 = load <16 x i16>, <16 x i16>* %28786, align 2, !tbaa !399
  %28788 = getelementptr inbounds i16, i16* %28785, i64 16
  %28789 = bitcast i16* %28788 to <16 x i16>*
  %28790 = load <16 x i16>, <16 x i16>* %28789, align 2, !tbaa !399
  %28791 = add nsw i64 %28494, %.pre-phi3654
  %28792 = getelementptr inbounds i16, i16* %blur_x917, i64 %28791
  %28793 = bitcast i16* %28792 to <16 x i16>*
  %28794 = load <16 x i16>, <16 x i16>* %28793, align 2, !tbaa !399
  %28795 = getelementptr inbounds i16, i16* %28792, i64 16
  %28796 = bitcast i16* %28795 to <16 x i16>*
  %28797 = load <16 x i16>, <16 x i16>* %28796, align 2, !tbaa !399
  %28798 = add nsw i64 %28497, %.pre-phi3654
  %28799 = getelementptr inbounds i16, i16* %blur_x917, i64 %28798
  %28800 = bitcast i16* %28799 to <16 x i16>*
  %28801 = load <16 x i16>, <16 x i16>* %28800, align 2, !tbaa !399
  %28802 = getelementptr inbounds i16, i16* %28799, i64 16
  %28803 = bitcast i16* %28802 to <16 x i16>*
  %28804 = load <16 x i16>, <16 x i16>* %28803, align 2, !tbaa !399
  %28805 = add nsw i64 %28500, %.pre-phi3654
  %28806 = getelementptr inbounds i16, i16* %blur_x917, i64 %28805
  %28807 = bitcast i16* %28806 to <16 x i16>*
  %28808 = load <16 x i16>, <16 x i16>* %28807, align 2, !tbaa !399
  %28809 = getelementptr inbounds i16, i16* %28806, i64 16
  %28810 = bitcast i16* %28809 to <16 x i16>*
  %28811 = load <16 x i16>, <16 x i16>* %28810, align 2, !tbaa !399
  %28812 = add nsw i64 %28503, %.pre-phi3654
  %28813 = getelementptr inbounds i16, i16* %blur_x917, i64 %28812
  %28814 = bitcast i16* %28813 to <16 x i16>*
  %28815 = load <16 x i16>, <16 x i16>* %28814, align 2, !tbaa !399
  %28816 = getelementptr inbounds i16, i16* %28813, i64 16
  %28817 = bitcast i16* %28816 to <16 x i16>*
  %28818 = load <16 x i16>, <16 x i16>* %28817, align 2, !tbaa !399
  %28819 = add nsw i64 %28506, %.pre-phi3654
  %28820 = getelementptr inbounds i16, i16* %blur_x917, i64 %28819
  %28821 = bitcast i16* %28820 to <16 x i16>*
  %28822 = load <16 x i16>, <16 x i16>* %28821, align 2, !tbaa !399
  %28823 = getelementptr inbounds i16, i16* %28820, i64 16
  %28824 = bitcast i16* %28823 to <16 x i16>*
  %28825 = load <16 x i16>, <16 x i16>* %28824, align 2, !tbaa !399
  %28826 = add nsw i64 %28509, %.pre-phi3654
  %28827 = getelementptr inbounds i16, i16* %blur_x917, i64 %28826
  %28828 = bitcast i16* %28827 to <16 x i16>*
  %28829 = load <16 x i16>, <16 x i16>* %28828, align 2, !tbaa !399
  %28830 = getelementptr inbounds i16, i16* %28827, i64 16
  %28831 = bitcast i16* %28830 to <16 x i16>*
  %28832 = load <16 x i16>, <16 x i16>* %28831, align 2, !tbaa !399
  %28833 = add <16 x i16> %28794, %28787
  %28834 = add <16 x i16> %28833, %28801
  %28835 = add <16 x i16> %28834, %28808
  %28836 = add <16 x i16> %28835, %28815
  %28837 = add <16 x i16> %28836, %28822
  %28838 = add <16 x i16> %28837, %28829
  %28839 = add <16 x i16> %28797, %28790
  %28840 = add <16 x i16> %28839, %28804
  %28841 = add <16 x i16> %28840, %28811
  %28842 = add <16 x i16> %28841, %28818
  %28843 = add <16 x i16> %28842, %28825
  %28844 = add <16 x i16> %28843, %28832
  %28845 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28838, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28846 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28844, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28847 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28845, <16 x i16> %28838)
  %28848 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28846, <16 x i16> %28844)
  %28849 = shufflevector <16 x i16> %28847, <16 x i16> %28848, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28850 = lshr <32 x i16> %28849, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28851 = shufflevector <32 x i16> %28850, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28852 = add nsw i64 %28513, %.pre-phi3654
  %28853 = getelementptr inbounds i16, i16* %264, i64 %28852
  %28854 = bitcast i16* %28853 to <16 x i16>*
  store <16 x i16> %28851, <16 x i16>* %28854, align 2, !tbaa !401
  %28855 = shufflevector <32 x i16> %28850, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28856 = getelementptr inbounds i16, i16* %28853, i64 16
  %28857 = bitcast i16* %28856 to <16 x i16>*
  store <16 x i16> %28855, <16 x i16>* %28857, align 2, !tbaa !401
  %indvars.iv.next3445 = add nuw nsw i64 %indvars.iv3444, 1
  %.not2684 = icmp eq i64 %indvars.iv.next3445, %386
  br i1 %.not2684, label %"end for blur_y.s0.x.x.rebased1674", label %"for blur_y.s0.x.x.rebased1673"

"for blur_y.s0.x.x.rebased1690":                  ; preds = %"for blur_y.s0.x.x.rebased1690.preheader", %"consume blur_x1700"
  %blur_y.s0.x.x.rebased1692 = phi i32 [ %29008, %"consume blur_x1700" ], [ 0, %"for blur_y.s0.x.x.rebased1690.preheader" ]
  %28858 = add nsw i32 %blur_y.s0.x.x.rebased1692, %t1670852
  %a551 = shl nsw i32 %28858, 5
  %28859 = icmp sgt i32 %a355, %a551
  %b557 = select i1 %28859, i32 %a551, i32 %a355
  %28860 = icmp slt i32 %28858, 1
  %28861 = icmp sgt i32 %202, %a551
  %28862 = or i1 %28860, %28861
  br i1 %28862, label %"produce blur_x1697", label %"consume blur_x1700"

"end for blur_y.s0.x.x.rebased1691":              ; preds = %"consume blur_x1700", %"end for blur_y.s0.x.x.rebased1674"
  br i1 %232, label %"produce blur_x1704", label %after_bb1701

"produce blur_x1697":                             ; preds = %"for blur_y.s0.x.x.rebased1690"
  %28863 = icmp slt i32 %b557, %202
  %blur_x.s0.x.v1.base.s1698 = select i1 %28863, i32 %b557, i32 %202
  %t9651699 = add nsw i32 %blur_x.s0.x.v1.base.s1698, %t19691670
  %28864 = sext i32 %t9651699 to i64
  %28865 = getelementptr inbounds i16, i16* %read_input860, i64 %28864
  %28866 = getelementptr inbounds i16, i16* %28865, i64 1
  %28867 = bitcast i16* %28866 to <16 x i16>*
  %28868 = load <16 x i16>, <16 x i16>* %28867, align 2, !tbaa !396
  %28869 = getelementptr inbounds i16, i16* %28865, i64 17
  %28870 = bitcast i16* %28869 to <16 x i16>*
  %28871 = load <16 x i16>, <16 x i16>* %28870, align 2, !tbaa !396
  %28872 = bitcast i16* %28865 to <16 x i16>*
  %28873 = load <16 x i16>, <16 x i16>* %28872, align 2, !tbaa !396
  %28874 = getelementptr inbounds i16, i16* %28865, i64 16
  %28875 = bitcast i16* %28874 to <16 x i16>*
  %28876 = load <16 x i16>, <16 x i16>* %28875, align 2, !tbaa !396
  %28877 = getelementptr inbounds i16, i16* %28865, i64 2
  %28878 = bitcast i16* %28877 to <16 x i16>*
  %28879 = load <16 x i16>, <16 x i16>* %28878, align 2, !tbaa !396
  %28880 = getelementptr inbounds i16, i16* %28865, i64 18
  %28881 = bitcast i16* %28880 to <16 x i16>*
  %28882 = load <16 x i16>, <16 x i16>* %28881, align 2, !tbaa !396
  %28883 = getelementptr inbounds i16, i16* %28865, i64 3
  %28884 = bitcast i16* %28883 to <16 x i16>*
  %28885 = load <16 x i16>, <16 x i16>* %28884, align 2, !tbaa !396
  %28886 = getelementptr inbounds i16, i16* %28865, i64 19
  %28887 = bitcast i16* %28886 to <16 x i16>*
  %28888 = load <16 x i16>, <16 x i16>* %28887, align 2, !tbaa !396
  %28889 = getelementptr inbounds i16, i16* %28865, i64 4
  %28890 = bitcast i16* %28889 to <16 x i16>*
  %28891 = load <16 x i16>, <16 x i16>* %28890, align 2, !tbaa !396
  %28892 = getelementptr inbounds i16, i16* %28865, i64 20
  %28893 = bitcast i16* %28892 to <16 x i16>*
  %28894 = load <16 x i16>, <16 x i16>* %28893, align 2, !tbaa !396
  %28895 = getelementptr inbounds i16, i16* %28865, i64 6
  %28896 = bitcast i16* %28895 to <16 x i16>*
  %28897 = load <16 x i16>, <16 x i16>* %28896, align 2, !tbaa !396
  %28898 = getelementptr inbounds i16, i16* %28865, i64 22
  %28899 = bitcast i16* %28898 to <16 x i16>*
  %28900 = load <16 x i16>, <16 x i16>* %28899, align 2, !tbaa !396
  %28901 = getelementptr inbounds i16, i16* %28865, i64 5
  %28902 = bitcast i16* %28901 to <16 x i16>*
  %28903 = load <16 x i16>, <16 x i16>* %28902, align 2, !tbaa !396
  %28904 = getelementptr inbounds i16, i16* %28865, i64 21
  %28905 = bitcast i16* %28904 to <16 x i16>*
  %28906 = load <16 x i16>, <16 x i16>* %28905, align 2, !tbaa !396
  %28907 = add <16 x i16> %28873, %28868
  %28908 = add <16 x i16> %28907, %28879
  %28909 = add <16 x i16> %28908, %28885
  %28910 = add <16 x i16> %28909, %28891
  %28911 = add <16 x i16> %28910, %28897
  %28912 = add <16 x i16> %28911, %28903
  %28913 = add <16 x i16> %28876, %28871
  %28914 = add <16 x i16> %28913, %28882
  %28915 = add <16 x i16> %28914, %28888
  %28916 = add <16 x i16> %28915, %28894
  %28917 = add <16 x i16> %28916, %28900
  %28918 = add <16 x i16> %28917, %28906
  %28919 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28912, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28920 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28918, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28921 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28919, <16 x i16> %28912)
  %28922 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28920, <16 x i16> %28918)
  %28923 = shufflevector <16 x i16> %28921, <16 x i16> %28922, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28924 = lshr <32 x i16> %28923, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28925 = shufflevector <32 x i16> %28924, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28926 = sext i32 %blur_x.s0.x.v1.base.s1698 to i64
  %28927 = add nsw i64 %28926, %28689
  %28928 = getelementptr inbounds i16, i16* %blur_x917, i64 %28927
  %28929 = bitcast i16* %28928 to <16 x i16>*
  store <16 x i16> %28925, <16 x i16>* %28929, align 2, !tbaa !399
  %28930 = shufflevector <32 x i16> %28924, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28931 = getelementptr inbounds i16, i16* %28928, i64 16
  %28932 = bitcast i16* %28931 to <16 x i16>*
  store <16 x i16> %28930, <16 x i16>* %28932, align 2, !tbaa !399
  br label %"consume blur_x1700"

"consume blur_x1700":                             ; preds = %"for blur_y.s0.x.x.rebased1690", %"produce blur_x1697"
  %28933 = sext i32 %b557 to i64
  %28934 = add nsw i64 %28692, %28933
  %28935 = getelementptr inbounds i16, i16* %blur_x917, i64 %28934
  %28936 = bitcast i16* %28935 to <16 x i16>*
  %28937 = load <16 x i16>, <16 x i16>* %28936, align 2, !tbaa !399
  %28938 = getelementptr inbounds i16, i16* %28935, i64 16
  %28939 = bitcast i16* %28938 to <16 x i16>*
  %28940 = load <16 x i16>, <16 x i16>* %28939, align 2, !tbaa !399
  %28941 = add nsw i64 %28695, %28933
  %28942 = getelementptr inbounds i16, i16* %blur_x917, i64 %28941
  %28943 = bitcast i16* %28942 to <16 x i16>*
  %28944 = load <16 x i16>, <16 x i16>* %28943, align 2, !tbaa !399
  %28945 = getelementptr inbounds i16, i16* %28942, i64 16
  %28946 = bitcast i16* %28945 to <16 x i16>*
  %28947 = load <16 x i16>, <16 x i16>* %28946, align 2, !tbaa !399
  %28948 = add nsw i64 %28698, %28933
  %28949 = getelementptr inbounds i16, i16* %blur_x917, i64 %28948
  %28950 = bitcast i16* %28949 to <16 x i16>*
  %28951 = load <16 x i16>, <16 x i16>* %28950, align 2, !tbaa !399
  %28952 = getelementptr inbounds i16, i16* %28949, i64 16
  %28953 = bitcast i16* %28952 to <16 x i16>*
  %28954 = load <16 x i16>, <16 x i16>* %28953, align 2, !tbaa !399
  %28955 = add nsw i64 %28701, %28933
  %28956 = getelementptr inbounds i16, i16* %blur_x917, i64 %28955
  %28957 = bitcast i16* %28956 to <16 x i16>*
  %28958 = load <16 x i16>, <16 x i16>* %28957, align 2, !tbaa !399
  %28959 = getelementptr inbounds i16, i16* %28956, i64 16
  %28960 = bitcast i16* %28959 to <16 x i16>*
  %28961 = load <16 x i16>, <16 x i16>* %28960, align 2, !tbaa !399
  %28962 = add nsw i64 %28704, %28933
  %28963 = getelementptr inbounds i16, i16* %blur_x917, i64 %28962
  %28964 = bitcast i16* %28963 to <16 x i16>*
  %28965 = load <16 x i16>, <16 x i16>* %28964, align 2, !tbaa !399
  %28966 = getelementptr inbounds i16, i16* %28963, i64 16
  %28967 = bitcast i16* %28966 to <16 x i16>*
  %28968 = load <16 x i16>, <16 x i16>* %28967, align 2, !tbaa !399
  %28969 = add nsw i64 %28707, %28933
  %28970 = getelementptr inbounds i16, i16* %blur_x917, i64 %28969
  %28971 = bitcast i16* %28970 to <16 x i16>*
  %28972 = load <16 x i16>, <16 x i16>* %28971, align 2, !tbaa !399
  %28973 = getelementptr inbounds i16, i16* %28970, i64 16
  %28974 = bitcast i16* %28973 to <16 x i16>*
  %28975 = load <16 x i16>, <16 x i16>* %28974, align 2, !tbaa !399
  %28976 = add nsw i64 %28710, %28933
  %28977 = getelementptr inbounds i16, i16* %blur_x917, i64 %28976
  %28978 = bitcast i16* %28977 to <16 x i16>*
  %28979 = load <16 x i16>, <16 x i16>* %28978, align 2, !tbaa !399
  %28980 = getelementptr inbounds i16, i16* %28977, i64 16
  %28981 = bitcast i16* %28980 to <16 x i16>*
  %28982 = load <16 x i16>, <16 x i16>* %28981, align 2, !tbaa !399
  %28983 = add <16 x i16> %28944, %28937
  %28984 = add <16 x i16> %28983, %28951
  %28985 = add <16 x i16> %28984, %28958
  %28986 = add <16 x i16> %28985, %28965
  %28987 = add <16 x i16> %28986, %28972
  %28988 = add <16 x i16> %28987, %28979
  %28989 = add <16 x i16> %28947, %28940
  %28990 = add <16 x i16> %28989, %28954
  %28991 = add <16 x i16> %28990, %28961
  %28992 = add <16 x i16> %28991, %28968
  %28993 = add <16 x i16> %28992, %28975
  %28994 = add <16 x i16> %28993, %28982
  %28995 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28988, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28996 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28994, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %28997 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28995, <16 x i16> %28988)
  %28998 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28996, <16 x i16> %28994)
  %28999 = shufflevector <16 x i16> %28997, <16 x i16> %28998, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29000 = lshr <32 x i16> %28999, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %29001 = shufflevector <32 x i16> %29000, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29002 = add nsw i64 %28714, %28933
  %29003 = getelementptr inbounds i16, i16* %264, i64 %29002
  %29004 = bitcast i16* %29003 to <16 x i16>*
  store <16 x i16> %29001, <16 x i16>* %29004, align 2, !tbaa !401
  %29005 = shufflevector <32 x i16> %29000, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29006 = getelementptr inbounds i16, i16* %29003, i64 16
  %29007 = bitcast i16* %29006 to <16 x i16>*
  store <16 x i16> %29005, <16 x i16>* %29007, align 2, !tbaa !401
  %29008 = add nuw nsw i32 %blur_y.s0.x.x.rebased1692, 1
  %.not2683 = icmp eq i32 %29008, %t1727937
  br i1 %.not2683, label %"end for blur_y.s0.x.x.rebased1691", label %"for blur_y.s0.x.x.rebased1690"

after_bb1701:                                     ; preds = %"end for blur_y.s0.x.x.rebased1691", %"produce blur_x1704"
  br i1 %298, label %"for blur_y.s0.x.x.rebased1716.preheader", label %"end for blur_y.s0.x.x.rebased1717", !prof !386

"for blur_y.s0.x.x.rebased1716.preheader":        ; preds = %after_bb1701
  %29009 = sext i32 %t17501044 to i64
  %29010 = zext i32 %.pre-phi3628 to i64
  %29011 = mul nsw i64 %29010, %314
  %29012 = sub nsw i64 %29011, %294
  %29013 = zext i32 %.pre-phi3622 to i64
  %29014 = mul nsw i64 %29013, %314
  %29015 = sub nsw i64 %29014, %294
  %29016 = zext i32 %.pre-phi3598 to i64
  %29017 = mul nsw i64 %29016, %314
  %29018 = sub nsw i64 %29017, %294
  %29019 = zext i32 %.pre-phi3602 to i64
  %29020 = mul nsw i64 %29019, %314
  %29021 = sub nsw i64 %29020, %294
  %29022 = zext i32 %.pre-phi3606 to i64
  %29023 = mul nsw i64 %29022, %314
  %29024 = sub nsw i64 %29023, %294
  %29025 = zext i32 %.pre-phi3614 to i64
  %29026 = mul nsw i64 %29025, %314
  %29027 = sub nsw i64 %29026, %294
  %29028 = zext i32 %.pre-phi3610 to i64
  %29029 = mul nsw i64 %29028, %314
  %29030 = sub nsw i64 %29029, %294
  %29031 = sext i32 %a367 to i64
  %29032 = add nsw i64 %29031, 14
  %29033 = mul nsw i64 %29032, %315
  %29034 = add nsw i64 %29033, %318
  br label %"for blur_y.s0.x.x.rebased1716"

"produce blur_x1704":                             ; preds = %"end for blur_y.s0.x.x.rebased1691"
  %29035 = getelementptr inbounds i16, i16* %read_input860, i64 %345
  %29036 = getelementptr inbounds i16, i16* %29035, i64 -31
  %29037 = bitcast i16* %29036 to <16 x i16>*
  %29038 = load <16 x i16>, <16 x i16>* %29037, align 2, !tbaa !396
  %29039 = getelementptr inbounds i16, i16* %29035, i64 -15
  %29040 = bitcast i16* %29039 to <16 x i16>*
  %29041 = load <16 x i16>, <16 x i16>* %29040, align 2, !tbaa !396
  %29042 = getelementptr inbounds i16, i16* %29035, i64 -32
  %29043 = bitcast i16* %29042 to <16 x i16>*
  %29044 = load <16 x i16>, <16 x i16>* %29043, align 2, !tbaa !396
  %29045 = getelementptr inbounds i16, i16* %29035, i64 -16
  %29046 = bitcast i16* %29045 to <16 x i16>*
  %29047 = load <16 x i16>, <16 x i16>* %29046, align 2, !tbaa !396
  %29048 = getelementptr inbounds i16, i16* %29035, i64 -30
  %29049 = bitcast i16* %29048 to <16 x i16>*
  %29050 = load <16 x i16>, <16 x i16>* %29049, align 2, !tbaa !396
  %29051 = getelementptr inbounds i16, i16* %29035, i64 -14
  %29052 = bitcast i16* %29051 to <16 x i16>*
  %29053 = load <16 x i16>, <16 x i16>* %29052, align 2, !tbaa !396
  %29054 = getelementptr inbounds i16, i16* %29035, i64 -29
  %29055 = bitcast i16* %29054 to <16 x i16>*
  %29056 = load <16 x i16>, <16 x i16>* %29055, align 2, !tbaa !396
  %29057 = getelementptr inbounds i16, i16* %29035, i64 -13
  %29058 = bitcast i16* %29057 to <16 x i16>*
  %29059 = load <16 x i16>, <16 x i16>* %29058, align 2, !tbaa !396
  %29060 = getelementptr inbounds i16, i16* %29035, i64 -28
  %29061 = bitcast i16* %29060 to <16 x i16>*
  %29062 = load <16 x i16>, <16 x i16>* %29061, align 2, !tbaa !396
  %29063 = getelementptr inbounds i16, i16* %29035, i64 -12
  %29064 = bitcast i16* %29063 to <16 x i16>*
  %29065 = load <16 x i16>, <16 x i16>* %29064, align 2, !tbaa !396
  %29066 = getelementptr inbounds i16, i16* %29035, i64 -26
  %29067 = bitcast i16* %29066 to <16 x i16>*
  %29068 = load <16 x i16>, <16 x i16>* %29067, align 2, !tbaa !396
  %29069 = getelementptr inbounds i16, i16* %29035, i64 -10
  %29070 = bitcast i16* %29069 to <16 x i16>*
  %29071 = load <16 x i16>, <16 x i16>* %29070, align 2, !tbaa !396
  %29072 = getelementptr inbounds i16, i16* %29035, i64 -27
  %29073 = bitcast i16* %29072 to <16 x i16>*
  %29074 = load <16 x i16>, <16 x i16>* %29073, align 2, !tbaa !396
  %29075 = getelementptr inbounds i16, i16* %29035, i64 -11
  %29076 = bitcast i16* %29075 to <16 x i16>*
  %29077 = load <16 x i16>, <16 x i16>* %29076, align 2, !tbaa !396
  %29078 = add <16 x i16> %29044, %29038
  %29079 = add <16 x i16> %29078, %29050
  %29080 = add <16 x i16> %29079, %29056
  %29081 = add <16 x i16> %29080, %29062
  %29082 = add <16 x i16> %29081, %29068
  %29083 = add <16 x i16> %29082, %29074
  %29084 = add <16 x i16> %29047, %29041
  %29085 = add <16 x i16> %29084, %29053
  %29086 = add <16 x i16> %29085, %29059
  %29087 = add <16 x i16> %29086, %29065
  %29088 = add <16 x i16> %29087, %29071
  %29089 = add <16 x i16> %29088, %29077
  %29090 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29083, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29091 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29089, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29092 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29090, <16 x i16> %29083)
  %29093 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29091, <16 x i16> %29089)
  %29094 = shufflevector <16 x i16> %29092, <16 x i16> %29093, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29095 = lshr <32 x i16> %29094, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %29096 = shufflevector <32 x i16> %29095, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29097 = zext i32 %.pre-phi3614 to i64
  %29098 = mul nsw i64 %295, %29097
  %29099 = add nsw i64 %297, %29098
  %29100 = getelementptr inbounds i16, i16* %blur_x917, i64 %29099
  %29101 = getelementptr inbounds i16, i16* %29100, i64 -32
  %29102 = bitcast i16* %29101 to <16 x i16>*
  store <16 x i16> %29096, <16 x i16>* %29102, align 2, !tbaa !399
  %29103 = shufflevector <32 x i16> %29095, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29104 = getelementptr inbounds i16, i16* %29100, i64 -16
  %29105 = bitcast i16* %29104 to <16 x i16>*
  store <16 x i16> %29103, <16 x i16>* %29105, align 2, !tbaa !399
  %29106 = zext i32 %.pre-phi3628 to i64
  %29107 = mul nsw i64 %29106, %314
  %29108 = add nsw i64 %29107, %292
  %29109 = getelementptr inbounds i16, i16* %blur_x917, i64 %29108
  %29110 = getelementptr inbounds i16, i16* %29109, i64 -32
  %29111 = bitcast i16* %29110 to <16 x i16>*
  %29112 = load <16 x i16>, <16 x i16>* %29111, align 2, !tbaa !399
  %29113 = getelementptr inbounds i16, i16* %29109, i64 -16
  %29114 = bitcast i16* %29113 to <16 x i16>*
  %29115 = load <16 x i16>, <16 x i16>* %29114, align 2, !tbaa !399
  %29116 = zext i32 %.pre-phi3622 to i64
  %29117 = mul nsw i64 %29116, %314
  %29118 = add nsw i64 %29117, %292
  %29119 = getelementptr inbounds i16, i16* %blur_x917, i64 %29118
  %29120 = getelementptr inbounds i16, i16* %29119, i64 -32
  %29121 = bitcast i16* %29120 to <16 x i16>*
  %29122 = load <16 x i16>, <16 x i16>* %29121, align 2, !tbaa !399
  %29123 = getelementptr inbounds i16, i16* %29119, i64 -16
  %29124 = bitcast i16* %29123 to <16 x i16>*
  %29125 = load <16 x i16>, <16 x i16>* %29124, align 2, !tbaa !399
  %29126 = zext i32 %.pre-phi3598 to i64
  %29127 = mul nsw i64 %29126, %314
  %29128 = add nsw i64 %29127, %292
  %29129 = getelementptr inbounds i16, i16* %blur_x917, i64 %29128
  %29130 = getelementptr inbounds i16, i16* %29129, i64 -32
  %29131 = bitcast i16* %29130 to <16 x i16>*
  %29132 = load <16 x i16>, <16 x i16>* %29131, align 2, !tbaa !399
  %29133 = getelementptr inbounds i16, i16* %29129, i64 -16
  %29134 = bitcast i16* %29133 to <16 x i16>*
  %29135 = load <16 x i16>, <16 x i16>* %29134, align 2, !tbaa !399
  %29136 = zext i32 %.pre-phi3602 to i64
  %29137 = mul nsw i64 %29136, %314
  %29138 = add nsw i64 %29137, %292
  %29139 = getelementptr inbounds i16, i16* %blur_x917, i64 %29138
  %29140 = getelementptr inbounds i16, i16* %29139, i64 -32
  %29141 = bitcast i16* %29140 to <16 x i16>*
  %29142 = load <16 x i16>, <16 x i16>* %29141, align 2, !tbaa !399
  %29143 = getelementptr inbounds i16, i16* %29139, i64 -16
  %29144 = bitcast i16* %29143 to <16 x i16>*
  %29145 = load <16 x i16>, <16 x i16>* %29144, align 2, !tbaa !399
  %29146 = zext i32 %.pre-phi3606 to i64
  %29147 = mul nsw i64 %29146, %314
  %29148 = add nsw i64 %29147, %292
  %29149 = getelementptr inbounds i16, i16* %blur_x917, i64 %29148
  %29150 = getelementptr inbounds i16, i16* %29149, i64 -32
  %29151 = bitcast i16* %29150 to <16 x i16>*
  %29152 = load <16 x i16>, <16 x i16>* %29151, align 2, !tbaa !399
  %29153 = getelementptr inbounds i16, i16* %29149, i64 -16
  %29154 = bitcast i16* %29153 to <16 x i16>*
  %29155 = load <16 x i16>, <16 x i16>* %29154, align 2, !tbaa !399
  %29156 = mul nsw i64 %29097, %314
  %29157 = add nsw i64 %29156, %292
  %29158 = getelementptr inbounds i16, i16* %blur_x917, i64 %29157
  %29159 = getelementptr inbounds i16, i16* %29158, i64 -32
  %29160 = bitcast i16* %29159 to <16 x i16>*
  %29161 = load <16 x i16>, <16 x i16>* %29160, align 2, !tbaa !399
  %29162 = getelementptr inbounds i16, i16* %29158, i64 -16
  %29163 = bitcast i16* %29162 to <16 x i16>*
  %29164 = load <16 x i16>, <16 x i16>* %29163, align 2, !tbaa !399
  %29165 = zext i32 %.pre-phi3610 to i64
  %29166 = mul nsw i64 %29165, %314
  %29167 = add nsw i64 %29166, %292
  %29168 = getelementptr inbounds i16, i16* %blur_x917, i64 %29167
  %29169 = getelementptr inbounds i16, i16* %29168, i64 -32
  %29170 = bitcast i16* %29169 to <16 x i16>*
  %29171 = load <16 x i16>, <16 x i16>* %29170, align 2, !tbaa !399
  %29172 = getelementptr inbounds i16, i16* %29168, i64 -16
  %29173 = bitcast i16* %29172 to <16 x i16>*
  %29174 = load <16 x i16>, <16 x i16>* %29173, align 2, !tbaa !399
  %29175 = add <16 x i16> %29122, %29112
  %29176 = add <16 x i16> %29175, %29132
  %29177 = add <16 x i16> %29176, %29142
  %29178 = add <16 x i16> %29177, %29152
  %29179 = add <16 x i16> %29178, %29161
  %29180 = add <16 x i16> %29179, %29171
  %29181 = add <16 x i16> %29125, %29115
  %29182 = add <16 x i16> %29181, %29135
  %29183 = add <16 x i16> %29182, %29145
  %29184 = add <16 x i16> %29183, %29155
  %29185 = add <16 x i16> %29184, %29164
  %29186 = add <16 x i16> %29185, %29174
  %29187 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29180, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29188 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29186, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29189 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29187, <16 x i16> %29180)
  %29190 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29188, <16 x i16> %29186)
  %29191 = shufflevector <16 x i16> %29189, <16 x i16> %29190, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29192 = lshr <32 x i16> %29191, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %29193 = shufflevector <32 x i16> %29192, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29194 = sext i32 %a367 to i64
  %29195 = add nsw i64 %29194, 14
  %29196 = mul nsw i64 %29195, %315
  %29197 = add nsw i64 %317, %29196
  %29198 = getelementptr inbounds i16, i16* %264, i64 %29197
  %29199 = getelementptr inbounds i16, i16* %29198, i64 -32
  %29200 = bitcast i16* %29199 to <16 x i16>*
  store <16 x i16> %29193, <16 x i16>* %29200, align 2, !tbaa !401
  %29201 = shufflevector <32 x i16> %29192, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29202 = getelementptr inbounds i16, i16* %29198, i64 -16
  %29203 = bitcast i16* %29202 to <16 x i16>*
  store <16 x i16> %29201, <16 x i16>* %29203, align 2, !tbaa !401
  br label %after_bb1701

"for blur_y.s0.x.x.rebased1716":                  ; preds = %"for blur_y.s0.x.x.rebased1716.preheader", %"consume blur_x1725"
  %indvars.iv3447 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1716.preheader" ], [ %indvars.iv.next3448, %"consume blur_x1725" ]
  %29204 = add nsw i64 %indvars.iv3447, %299
  %29205 = icmp slt i64 %29204, 1
  %29206 = trunc i64 %29204 to i32
  %29207 = shl nsw i32 %29206, 5
  %29208 = icmp sgt i32 %202, %29207
  %29209 = or i1 %29205, %29208
  br i1 %29209, label %"produce blur_x1723", label %"for blur_y.s0.x.x.rebased1716.consume blur_x1725_crit_edge"

"for blur_y.s0.x.x.rebased1716.consume blur_x1725_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1716"
  %.pre3655 = shl nsw i64 %29204, 5
  br label %"consume blur_x1725"

"end for blur_y.s0.x.x.rebased1717":              ; preds = %"consume blur_x1725", %after_bb1701
  br i1 %300, label %"for blur_y.s0.x.x.rebased1733.preheader", label %"end for blur_y.s0.x.x.rebased1734", !prof !386

"for blur_y.s0.x.x.rebased1733.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1717"
  %29210 = sext i32 %t17501044 to i64
  %29211 = zext i32 %.pre-phi3628 to i64
  %29212 = mul nsw i64 %29211, %314
  %29213 = sub nsw i64 %29212, %294
  %29214 = zext i32 %.pre-phi3622 to i64
  %29215 = mul nsw i64 %29214, %314
  %29216 = sub nsw i64 %29215, %294
  %29217 = zext i32 %.pre-phi3598 to i64
  %29218 = mul nsw i64 %29217, %314
  %29219 = sub nsw i64 %29218, %294
  %29220 = zext i32 %.pre-phi3602 to i64
  %29221 = mul nsw i64 %29220, %314
  %29222 = sub nsw i64 %29221, %294
  %29223 = zext i32 %.pre-phi3606 to i64
  %29224 = mul nsw i64 %29223, %314
  %29225 = sub nsw i64 %29224, %294
  %29226 = zext i32 %.pre-phi3614 to i64
  %29227 = mul nsw i64 %29226, %314
  %29228 = sub nsw i64 %29227, %294
  %29229 = zext i32 %.pre-phi3610 to i64
  %29230 = mul nsw i64 %29229, %314
  %29231 = sub nsw i64 %29230, %294
  %29232 = sext i32 %a367 to i64
  %29233 = add nsw i64 %29232, 14
  %29234 = mul nsw i64 %29233, %315
  %29235 = add nsw i64 %29234, %318
  br label %"for blur_y.s0.x.x.rebased1733"

"produce blur_x1723":                             ; preds = %"for blur_y.s0.x.x.rebased1716"
  %t9761724 = add nsw i32 %29207, %t19851713
  %29236 = sext i32 %t9761724 to i64
  %29237 = getelementptr inbounds i16, i16* %read_input860, i64 %29236
  %29238 = getelementptr inbounds i16, i16* %29237, i64 1
  %29239 = bitcast i16* %29238 to <16 x i16>*
  %29240 = load <16 x i16>, <16 x i16>* %29239, align 2, !tbaa !396
  %29241 = getelementptr inbounds i16, i16* %29237, i64 17
  %29242 = bitcast i16* %29241 to <16 x i16>*
  %29243 = load <16 x i16>, <16 x i16>* %29242, align 2, !tbaa !396
  %29244 = bitcast i16* %29237 to <16 x i16>*
  %29245 = load <16 x i16>, <16 x i16>* %29244, align 2, !tbaa !396
  %29246 = getelementptr inbounds i16, i16* %29237, i64 16
  %29247 = bitcast i16* %29246 to <16 x i16>*
  %29248 = load <16 x i16>, <16 x i16>* %29247, align 2, !tbaa !396
  %29249 = getelementptr inbounds i16, i16* %29237, i64 2
  %29250 = bitcast i16* %29249 to <16 x i16>*
  %29251 = load <16 x i16>, <16 x i16>* %29250, align 2, !tbaa !396
  %29252 = getelementptr inbounds i16, i16* %29237, i64 18
  %29253 = bitcast i16* %29252 to <16 x i16>*
  %29254 = load <16 x i16>, <16 x i16>* %29253, align 2, !tbaa !396
  %29255 = getelementptr inbounds i16, i16* %29237, i64 3
  %29256 = bitcast i16* %29255 to <16 x i16>*
  %29257 = load <16 x i16>, <16 x i16>* %29256, align 2, !tbaa !396
  %29258 = getelementptr inbounds i16, i16* %29237, i64 19
  %29259 = bitcast i16* %29258 to <16 x i16>*
  %29260 = load <16 x i16>, <16 x i16>* %29259, align 2, !tbaa !396
  %29261 = getelementptr inbounds i16, i16* %29237, i64 4
  %29262 = bitcast i16* %29261 to <16 x i16>*
  %29263 = load <16 x i16>, <16 x i16>* %29262, align 2, !tbaa !396
  %29264 = getelementptr inbounds i16, i16* %29237, i64 20
  %29265 = bitcast i16* %29264 to <16 x i16>*
  %29266 = load <16 x i16>, <16 x i16>* %29265, align 2, !tbaa !396
  %29267 = getelementptr inbounds i16, i16* %29237, i64 6
  %29268 = bitcast i16* %29267 to <16 x i16>*
  %29269 = load <16 x i16>, <16 x i16>* %29268, align 2, !tbaa !396
  %29270 = getelementptr inbounds i16, i16* %29237, i64 22
  %29271 = bitcast i16* %29270 to <16 x i16>*
  %29272 = load <16 x i16>, <16 x i16>* %29271, align 2, !tbaa !396
  %29273 = getelementptr inbounds i16, i16* %29237, i64 5
  %29274 = bitcast i16* %29273 to <16 x i16>*
  %29275 = load <16 x i16>, <16 x i16>* %29274, align 2, !tbaa !396
  %29276 = getelementptr inbounds i16, i16* %29237, i64 21
  %29277 = bitcast i16* %29276 to <16 x i16>*
  %29278 = load <16 x i16>, <16 x i16>* %29277, align 2, !tbaa !396
  %29279 = add <16 x i16> %29245, %29240
  %29280 = add <16 x i16> %29279, %29251
  %29281 = add <16 x i16> %29280, %29257
  %29282 = add <16 x i16> %29281, %29263
  %29283 = add <16 x i16> %29282, %29269
  %29284 = add <16 x i16> %29283, %29275
  %29285 = add <16 x i16> %29248, %29243
  %29286 = add <16 x i16> %29285, %29254
  %29287 = add <16 x i16> %29286, %29260
  %29288 = add <16 x i16> %29287, %29266
  %29289 = add <16 x i16> %29288, %29272
  %29290 = add <16 x i16> %29289, %29278
  %29291 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29284, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29292 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29290, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29293 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29291, <16 x i16> %29284)
  %29294 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29292, <16 x i16> %29290)
  %29295 = shufflevector <16 x i16> %29293, <16 x i16> %29294, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29296 = lshr <32 x i16> %29295, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %29297 = shufflevector <32 x i16> %29296, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29298 = shl nsw i64 %29204, 5
  %29299 = add nsw i64 %29298, %29009
  %29300 = getelementptr inbounds i16, i16* %blur_x917, i64 %29299
  %29301 = bitcast i16* %29300 to <16 x i16>*
  store <16 x i16> %29297, <16 x i16>* %29301, align 2, !tbaa !399
  %29302 = shufflevector <32 x i16> %29296, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29303 = getelementptr inbounds i16, i16* %29300, i64 16
  %29304 = bitcast i16* %29303 to <16 x i16>*
  store <16 x i16> %29302, <16 x i16>* %29304, align 2, !tbaa !399
  br label %"consume blur_x1725"

"consume blur_x1725":                             ; preds = %"for blur_y.s0.x.x.rebased1716.consume blur_x1725_crit_edge", %"produce blur_x1723"
  %.pre-phi3656 = phi i64 [ %.pre3655, %"for blur_y.s0.x.x.rebased1716.consume blur_x1725_crit_edge" ], [ %29298, %"produce blur_x1723" ]
  %29305 = add nsw i64 %29012, %.pre-phi3656
  %29306 = getelementptr inbounds i16, i16* %blur_x917, i64 %29305
  %29307 = bitcast i16* %29306 to <16 x i16>*
  %29308 = load <16 x i16>, <16 x i16>* %29307, align 2, !tbaa !399
  %29309 = getelementptr inbounds i16, i16* %29306, i64 16
  %29310 = bitcast i16* %29309 to <16 x i16>*
  %29311 = load <16 x i16>, <16 x i16>* %29310, align 2, !tbaa !399
  %29312 = add nsw i64 %29015, %.pre-phi3656
  %29313 = getelementptr inbounds i16, i16* %blur_x917, i64 %29312
  %29314 = bitcast i16* %29313 to <16 x i16>*
  %29315 = load <16 x i16>, <16 x i16>* %29314, align 2, !tbaa !399
  %29316 = getelementptr inbounds i16, i16* %29313, i64 16
  %29317 = bitcast i16* %29316 to <16 x i16>*
  %29318 = load <16 x i16>, <16 x i16>* %29317, align 2, !tbaa !399
  %29319 = add nsw i64 %29018, %.pre-phi3656
  %29320 = getelementptr inbounds i16, i16* %blur_x917, i64 %29319
  %29321 = bitcast i16* %29320 to <16 x i16>*
  %29322 = load <16 x i16>, <16 x i16>* %29321, align 2, !tbaa !399
  %29323 = getelementptr inbounds i16, i16* %29320, i64 16
  %29324 = bitcast i16* %29323 to <16 x i16>*
  %29325 = load <16 x i16>, <16 x i16>* %29324, align 2, !tbaa !399
  %29326 = add nsw i64 %29021, %.pre-phi3656
  %29327 = getelementptr inbounds i16, i16* %blur_x917, i64 %29326
  %29328 = bitcast i16* %29327 to <16 x i16>*
  %29329 = load <16 x i16>, <16 x i16>* %29328, align 2, !tbaa !399
  %29330 = getelementptr inbounds i16, i16* %29327, i64 16
  %29331 = bitcast i16* %29330 to <16 x i16>*
  %29332 = load <16 x i16>, <16 x i16>* %29331, align 2, !tbaa !399
  %29333 = add nsw i64 %29024, %.pre-phi3656
  %29334 = getelementptr inbounds i16, i16* %blur_x917, i64 %29333
  %29335 = bitcast i16* %29334 to <16 x i16>*
  %29336 = load <16 x i16>, <16 x i16>* %29335, align 2, !tbaa !399
  %29337 = getelementptr inbounds i16, i16* %29334, i64 16
  %29338 = bitcast i16* %29337 to <16 x i16>*
  %29339 = load <16 x i16>, <16 x i16>* %29338, align 2, !tbaa !399
  %29340 = add nsw i64 %29027, %.pre-phi3656
  %29341 = getelementptr inbounds i16, i16* %blur_x917, i64 %29340
  %29342 = bitcast i16* %29341 to <16 x i16>*
  %29343 = load <16 x i16>, <16 x i16>* %29342, align 2, !tbaa !399
  %29344 = getelementptr inbounds i16, i16* %29341, i64 16
  %29345 = bitcast i16* %29344 to <16 x i16>*
  %29346 = load <16 x i16>, <16 x i16>* %29345, align 2, !tbaa !399
  %29347 = add nsw i64 %29030, %.pre-phi3656
  %29348 = getelementptr inbounds i16, i16* %blur_x917, i64 %29347
  %29349 = bitcast i16* %29348 to <16 x i16>*
  %29350 = load <16 x i16>, <16 x i16>* %29349, align 2, !tbaa !399
  %29351 = getelementptr inbounds i16, i16* %29348, i64 16
  %29352 = bitcast i16* %29351 to <16 x i16>*
  %29353 = load <16 x i16>, <16 x i16>* %29352, align 2, !tbaa !399
  %29354 = add <16 x i16> %29315, %29308
  %29355 = add <16 x i16> %29354, %29322
  %29356 = add <16 x i16> %29355, %29329
  %29357 = add <16 x i16> %29356, %29336
  %29358 = add <16 x i16> %29357, %29343
  %29359 = add <16 x i16> %29358, %29350
  %29360 = add <16 x i16> %29318, %29311
  %29361 = add <16 x i16> %29360, %29325
  %29362 = add <16 x i16> %29361, %29332
  %29363 = add <16 x i16> %29362, %29339
  %29364 = add <16 x i16> %29363, %29346
  %29365 = add <16 x i16> %29364, %29353
  %29366 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29359, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29367 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29365, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29368 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29366, <16 x i16> %29359)
  %29369 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29367, <16 x i16> %29365)
  %29370 = shufflevector <16 x i16> %29368, <16 x i16> %29369, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29371 = lshr <32 x i16> %29370, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %29372 = shufflevector <32 x i16> %29371, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29373 = add nsw i64 %29034, %.pre-phi3656
  %29374 = getelementptr inbounds i16, i16* %264, i64 %29373
  %29375 = bitcast i16* %29374 to <16 x i16>*
  store <16 x i16> %29372, <16 x i16>* %29375, align 2, !tbaa !401
  %29376 = shufflevector <32 x i16> %29371, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29377 = getelementptr inbounds i16, i16* %29374, i64 16
  %29378 = bitcast i16* %29377 to <16 x i16>*
  store <16 x i16> %29376, <16 x i16>* %29378, align 2, !tbaa !401
  %indvars.iv.next3448 = add nuw nsw i64 %indvars.iv3447, 1
  %.not2682 = icmp eq i64 %indvars.iv.next3448, %386
  br i1 %.not2682, label %"end for blur_y.s0.x.x.rebased1717", label %"for blur_y.s0.x.x.rebased1716"

"for blur_y.s0.x.x.rebased1733":                  ; preds = %"for blur_y.s0.x.x.rebased1733.preheader", %"consume blur_x1743"
  %blur_y.s0.x.x.rebased1735 = phi i32 [ %29529, %"consume blur_x1743" ], [ 0, %"for blur_y.s0.x.x.rebased1733.preheader" ]
  %29379 = add nsw i32 %blur_y.s0.x.x.rebased1735, %t1670852
  %a558 = shl nsw i32 %29379, 5
  %29380 = icmp sgt i32 %a355, %a558
  %b564 = select i1 %29380, i32 %a558, i32 %a355
  %29381 = icmp slt i32 %29379, 1
  %29382 = icmp sgt i32 %202, %a558
  %29383 = or i1 %29381, %29382
  br i1 %29383, label %"produce blur_x1740", label %"consume blur_x1743"

"end for blur_y.s0.x.x.rebased1734":              ; preds = %"consume blur_x1743", %"end for blur_y.s0.x.x.rebased1717"
  br i1 %232, label %"produce blur_x1747", label %after_bb1744

"produce blur_x1740":                             ; preds = %"for blur_y.s0.x.x.rebased1733"
  %29384 = icmp slt i32 %b564, %202
  %blur_x.s0.x.v1.base.s1741 = select i1 %29384, i32 %b564, i32 %202
  %t9811742 = add nsw i32 %blur_x.s0.x.v1.base.s1741, %t19851713
  %29385 = sext i32 %t9811742 to i64
  %29386 = getelementptr inbounds i16, i16* %read_input860, i64 %29385
  %29387 = getelementptr inbounds i16, i16* %29386, i64 1
  %29388 = bitcast i16* %29387 to <16 x i16>*
  %29389 = load <16 x i16>, <16 x i16>* %29388, align 2, !tbaa !396
  %29390 = getelementptr inbounds i16, i16* %29386, i64 17
  %29391 = bitcast i16* %29390 to <16 x i16>*
  %29392 = load <16 x i16>, <16 x i16>* %29391, align 2, !tbaa !396
  %29393 = bitcast i16* %29386 to <16 x i16>*
  %29394 = load <16 x i16>, <16 x i16>* %29393, align 2, !tbaa !396
  %29395 = getelementptr inbounds i16, i16* %29386, i64 16
  %29396 = bitcast i16* %29395 to <16 x i16>*
  %29397 = load <16 x i16>, <16 x i16>* %29396, align 2, !tbaa !396
  %29398 = getelementptr inbounds i16, i16* %29386, i64 2
  %29399 = bitcast i16* %29398 to <16 x i16>*
  %29400 = load <16 x i16>, <16 x i16>* %29399, align 2, !tbaa !396
  %29401 = getelementptr inbounds i16, i16* %29386, i64 18
  %29402 = bitcast i16* %29401 to <16 x i16>*
  %29403 = load <16 x i16>, <16 x i16>* %29402, align 2, !tbaa !396
  %29404 = getelementptr inbounds i16, i16* %29386, i64 3
  %29405 = bitcast i16* %29404 to <16 x i16>*
  %29406 = load <16 x i16>, <16 x i16>* %29405, align 2, !tbaa !396
  %29407 = getelementptr inbounds i16, i16* %29386, i64 19
  %29408 = bitcast i16* %29407 to <16 x i16>*
  %29409 = load <16 x i16>, <16 x i16>* %29408, align 2, !tbaa !396
  %29410 = getelementptr inbounds i16, i16* %29386, i64 4
  %29411 = bitcast i16* %29410 to <16 x i16>*
  %29412 = load <16 x i16>, <16 x i16>* %29411, align 2, !tbaa !396
  %29413 = getelementptr inbounds i16, i16* %29386, i64 20
  %29414 = bitcast i16* %29413 to <16 x i16>*
  %29415 = load <16 x i16>, <16 x i16>* %29414, align 2, !tbaa !396
  %29416 = getelementptr inbounds i16, i16* %29386, i64 6
  %29417 = bitcast i16* %29416 to <16 x i16>*
  %29418 = load <16 x i16>, <16 x i16>* %29417, align 2, !tbaa !396
  %29419 = getelementptr inbounds i16, i16* %29386, i64 22
  %29420 = bitcast i16* %29419 to <16 x i16>*
  %29421 = load <16 x i16>, <16 x i16>* %29420, align 2, !tbaa !396
  %29422 = getelementptr inbounds i16, i16* %29386, i64 5
  %29423 = bitcast i16* %29422 to <16 x i16>*
  %29424 = load <16 x i16>, <16 x i16>* %29423, align 2, !tbaa !396
  %29425 = getelementptr inbounds i16, i16* %29386, i64 21
  %29426 = bitcast i16* %29425 to <16 x i16>*
  %29427 = load <16 x i16>, <16 x i16>* %29426, align 2, !tbaa !396
  %29428 = add <16 x i16> %29394, %29389
  %29429 = add <16 x i16> %29428, %29400
  %29430 = add <16 x i16> %29429, %29406
  %29431 = add <16 x i16> %29430, %29412
  %29432 = add <16 x i16> %29431, %29418
  %29433 = add <16 x i16> %29432, %29424
  %29434 = add <16 x i16> %29397, %29392
  %29435 = add <16 x i16> %29434, %29403
  %29436 = add <16 x i16> %29435, %29409
  %29437 = add <16 x i16> %29436, %29415
  %29438 = add <16 x i16> %29437, %29421
  %29439 = add <16 x i16> %29438, %29427
  %29440 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29433, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29441 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29439, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29442 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29440, <16 x i16> %29433)
  %29443 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29441, <16 x i16> %29439)
  %29444 = shufflevector <16 x i16> %29442, <16 x i16> %29443, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29445 = lshr <32 x i16> %29444, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %29446 = shufflevector <32 x i16> %29445, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29447 = sext i32 %blur_x.s0.x.v1.base.s1741 to i64
  %29448 = add nsw i64 %29447, %29210
  %29449 = getelementptr inbounds i16, i16* %blur_x917, i64 %29448
  %29450 = bitcast i16* %29449 to <16 x i16>*
  store <16 x i16> %29446, <16 x i16>* %29450, align 2, !tbaa !399
  %29451 = shufflevector <32 x i16> %29445, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29452 = getelementptr inbounds i16, i16* %29449, i64 16
  %29453 = bitcast i16* %29452 to <16 x i16>*
  store <16 x i16> %29451, <16 x i16>* %29453, align 2, !tbaa !399
  br label %"consume blur_x1743"

"consume blur_x1743":                             ; preds = %"for blur_y.s0.x.x.rebased1733", %"produce blur_x1740"
  %29454 = sext i32 %b564 to i64
  %29455 = add nsw i64 %29213, %29454
  %29456 = getelementptr inbounds i16, i16* %blur_x917, i64 %29455
  %29457 = bitcast i16* %29456 to <16 x i16>*
  %29458 = load <16 x i16>, <16 x i16>* %29457, align 2, !tbaa !399
  %29459 = getelementptr inbounds i16, i16* %29456, i64 16
  %29460 = bitcast i16* %29459 to <16 x i16>*
  %29461 = load <16 x i16>, <16 x i16>* %29460, align 2, !tbaa !399
  %29462 = add nsw i64 %29216, %29454
  %29463 = getelementptr inbounds i16, i16* %blur_x917, i64 %29462
  %29464 = bitcast i16* %29463 to <16 x i16>*
  %29465 = load <16 x i16>, <16 x i16>* %29464, align 2, !tbaa !399
  %29466 = getelementptr inbounds i16, i16* %29463, i64 16
  %29467 = bitcast i16* %29466 to <16 x i16>*
  %29468 = load <16 x i16>, <16 x i16>* %29467, align 2, !tbaa !399
  %29469 = add nsw i64 %29219, %29454
  %29470 = getelementptr inbounds i16, i16* %blur_x917, i64 %29469
  %29471 = bitcast i16* %29470 to <16 x i16>*
  %29472 = load <16 x i16>, <16 x i16>* %29471, align 2, !tbaa !399
  %29473 = getelementptr inbounds i16, i16* %29470, i64 16
  %29474 = bitcast i16* %29473 to <16 x i16>*
  %29475 = load <16 x i16>, <16 x i16>* %29474, align 2, !tbaa !399
  %29476 = add nsw i64 %29222, %29454
  %29477 = getelementptr inbounds i16, i16* %blur_x917, i64 %29476
  %29478 = bitcast i16* %29477 to <16 x i16>*
  %29479 = load <16 x i16>, <16 x i16>* %29478, align 2, !tbaa !399
  %29480 = getelementptr inbounds i16, i16* %29477, i64 16
  %29481 = bitcast i16* %29480 to <16 x i16>*
  %29482 = load <16 x i16>, <16 x i16>* %29481, align 2, !tbaa !399
  %29483 = add nsw i64 %29225, %29454
  %29484 = getelementptr inbounds i16, i16* %blur_x917, i64 %29483
  %29485 = bitcast i16* %29484 to <16 x i16>*
  %29486 = load <16 x i16>, <16 x i16>* %29485, align 2, !tbaa !399
  %29487 = getelementptr inbounds i16, i16* %29484, i64 16
  %29488 = bitcast i16* %29487 to <16 x i16>*
  %29489 = load <16 x i16>, <16 x i16>* %29488, align 2, !tbaa !399
  %29490 = add nsw i64 %29228, %29454
  %29491 = getelementptr inbounds i16, i16* %blur_x917, i64 %29490
  %29492 = bitcast i16* %29491 to <16 x i16>*
  %29493 = load <16 x i16>, <16 x i16>* %29492, align 2, !tbaa !399
  %29494 = getelementptr inbounds i16, i16* %29491, i64 16
  %29495 = bitcast i16* %29494 to <16 x i16>*
  %29496 = load <16 x i16>, <16 x i16>* %29495, align 2, !tbaa !399
  %29497 = add nsw i64 %29231, %29454
  %29498 = getelementptr inbounds i16, i16* %blur_x917, i64 %29497
  %29499 = bitcast i16* %29498 to <16 x i16>*
  %29500 = load <16 x i16>, <16 x i16>* %29499, align 2, !tbaa !399
  %29501 = getelementptr inbounds i16, i16* %29498, i64 16
  %29502 = bitcast i16* %29501 to <16 x i16>*
  %29503 = load <16 x i16>, <16 x i16>* %29502, align 2, !tbaa !399
  %29504 = add <16 x i16> %29465, %29458
  %29505 = add <16 x i16> %29504, %29472
  %29506 = add <16 x i16> %29505, %29479
  %29507 = add <16 x i16> %29506, %29486
  %29508 = add <16 x i16> %29507, %29493
  %29509 = add <16 x i16> %29508, %29500
  %29510 = add <16 x i16> %29468, %29461
  %29511 = add <16 x i16> %29510, %29475
  %29512 = add <16 x i16> %29511, %29482
  %29513 = add <16 x i16> %29512, %29489
  %29514 = add <16 x i16> %29513, %29496
  %29515 = add <16 x i16> %29514, %29503
  %29516 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29509, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29517 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29515, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29518 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29516, <16 x i16> %29509)
  %29519 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29517, <16 x i16> %29515)
  %29520 = shufflevector <16 x i16> %29518, <16 x i16> %29519, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29521 = lshr <32 x i16> %29520, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %29522 = shufflevector <32 x i16> %29521, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29523 = add nsw i64 %29235, %29454
  %29524 = getelementptr inbounds i16, i16* %264, i64 %29523
  %29525 = bitcast i16* %29524 to <16 x i16>*
  store <16 x i16> %29522, <16 x i16>* %29525, align 2, !tbaa !401
  %29526 = shufflevector <32 x i16> %29521, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29527 = getelementptr inbounds i16, i16* %29524, i64 16
  %29528 = bitcast i16* %29527 to <16 x i16>*
  store <16 x i16> %29526, <16 x i16>* %29528, align 2, !tbaa !401
  %29529 = add nuw nsw i32 %blur_y.s0.x.x.rebased1735, 1
  %.not2681 = icmp eq i32 %29529, %t1727937
  br i1 %.not2681, label %"end for blur_y.s0.x.x.rebased1734", label %"for blur_y.s0.x.x.rebased1733"

after_bb1744:                                     ; preds = %"end for blur_y.s0.x.x.rebased1734", %"produce blur_x1747"
  br i1 %298, label %"for blur_y.s0.x.x.rebased1759.preheader", label %"end for blur_y.s0.x.x.rebased1760", !prof !386

"for blur_y.s0.x.x.rebased1759.preheader":        ; preds = %after_bb1744
  %29530 = sext i32 %t17561074 to i64
  %29531 = zext i32 %.pre-phi3598 to i64
  %29532 = mul nsw i64 %29531, %314
  %29533 = sub nsw i64 %29532, %294
  %29534 = zext i32 %.pre-phi3628 to i64
  %29535 = mul nsw i64 %29534, %314
  %29536 = sub nsw i64 %29535, %294
  %29537 = zext i32 %.pre-phi3602 to i64
  %29538 = mul nsw i64 %29537, %314
  %29539 = sub nsw i64 %29538, %294
  %29540 = zext i32 %.pre-phi3606 to i64
  %29541 = mul nsw i64 %29540, %314
  %29542 = sub nsw i64 %29541, %294
  %29543 = zext i32 %.pre-phi3610 to i64
  %29544 = mul nsw i64 %29543, %314
  %29545 = sub nsw i64 %29544, %294
  %29546 = zext i32 %.pre-phi3618 to i64
  %29547 = mul nsw i64 %29546, %314
  %29548 = sub nsw i64 %29547, %294
  %29549 = zext i32 %.pre-phi3614 to i64
  %29550 = mul nsw i64 %29549, %314
  %29551 = sub nsw i64 %29550, %294
  %29552 = sext i32 %a367 to i64
  %29553 = add nsw i64 %29552, 15
  %29554 = mul nsw i64 %29553, %315
  %29555 = add nsw i64 %29554, %318
  br label %"for blur_y.s0.x.x.rebased1759"

"produce blur_x1747":                             ; preds = %"end for blur_y.s0.x.x.rebased1734"
  %29556 = getelementptr inbounds i16, i16* %read_input860, i64 %347
  %29557 = getelementptr inbounds i16, i16* %29556, i64 -31
  %29558 = bitcast i16* %29557 to <16 x i16>*
  %29559 = load <16 x i16>, <16 x i16>* %29558, align 2, !tbaa !396
  %29560 = getelementptr inbounds i16, i16* %29556, i64 -15
  %29561 = bitcast i16* %29560 to <16 x i16>*
  %29562 = load <16 x i16>, <16 x i16>* %29561, align 2, !tbaa !396
  %29563 = getelementptr inbounds i16, i16* %29556, i64 -32
  %29564 = bitcast i16* %29563 to <16 x i16>*
  %29565 = load <16 x i16>, <16 x i16>* %29564, align 2, !tbaa !396
  %29566 = getelementptr inbounds i16, i16* %29556, i64 -16
  %29567 = bitcast i16* %29566 to <16 x i16>*
  %29568 = load <16 x i16>, <16 x i16>* %29567, align 2, !tbaa !396
  %29569 = getelementptr inbounds i16, i16* %29556, i64 -30
  %29570 = bitcast i16* %29569 to <16 x i16>*
  %29571 = load <16 x i16>, <16 x i16>* %29570, align 2, !tbaa !396
  %29572 = getelementptr inbounds i16, i16* %29556, i64 -14
  %29573 = bitcast i16* %29572 to <16 x i16>*
  %29574 = load <16 x i16>, <16 x i16>* %29573, align 2, !tbaa !396
  %29575 = getelementptr inbounds i16, i16* %29556, i64 -29
  %29576 = bitcast i16* %29575 to <16 x i16>*
  %29577 = load <16 x i16>, <16 x i16>* %29576, align 2, !tbaa !396
  %29578 = getelementptr inbounds i16, i16* %29556, i64 -13
  %29579 = bitcast i16* %29578 to <16 x i16>*
  %29580 = load <16 x i16>, <16 x i16>* %29579, align 2, !tbaa !396
  %29581 = getelementptr inbounds i16, i16* %29556, i64 -28
  %29582 = bitcast i16* %29581 to <16 x i16>*
  %29583 = load <16 x i16>, <16 x i16>* %29582, align 2, !tbaa !396
  %29584 = getelementptr inbounds i16, i16* %29556, i64 -12
  %29585 = bitcast i16* %29584 to <16 x i16>*
  %29586 = load <16 x i16>, <16 x i16>* %29585, align 2, !tbaa !396
  %29587 = getelementptr inbounds i16, i16* %29556, i64 -26
  %29588 = bitcast i16* %29587 to <16 x i16>*
  %29589 = load <16 x i16>, <16 x i16>* %29588, align 2, !tbaa !396
  %29590 = getelementptr inbounds i16, i16* %29556, i64 -10
  %29591 = bitcast i16* %29590 to <16 x i16>*
  %29592 = load <16 x i16>, <16 x i16>* %29591, align 2, !tbaa !396
  %29593 = getelementptr inbounds i16, i16* %29556, i64 -27
  %29594 = bitcast i16* %29593 to <16 x i16>*
  %29595 = load <16 x i16>, <16 x i16>* %29594, align 2, !tbaa !396
  %29596 = getelementptr inbounds i16, i16* %29556, i64 -11
  %29597 = bitcast i16* %29596 to <16 x i16>*
  %29598 = load <16 x i16>, <16 x i16>* %29597, align 2, !tbaa !396
  %29599 = add <16 x i16> %29565, %29559
  %29600 = add <16 x i16> %29599, %29571
  %29601 = add <16 x i16> %29600, %29577
  %29602 = add <16 x i16> %29601, %29583
  %29603 = add <16 x i16> %29602, %29589
  %29604 = add <16 x i16> %29603, %29595
  %29605 = add <16 x i16> %29568, %29562
  %29606 = add <16 x i16> %29605, %29574
  %29607 = add <16 x i16> %29606, %29580
  %29608 = add <16 x i16> %29607, %29586
  %29609 = add <16 x i16> %29608, %29592
  %29610 = add <16 x i16> %29609, %29598
  %29611 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29604, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29612 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29610, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29613 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29611, <16 x i16> %29604)
  %29614 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29612, <16 x i16> %29610)
  %29615 = shufflevector <16 x i16> %29613, <16 x i16> %29614, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29616 = lshr <32 x i16> %29615, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %29617 = shufflevector <32 x i16> %29616, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29618 = zext i32 %.pre-phi3618 to i64
  %29619 = mul nsw i64 %295, %29618
  %29620 = add nsw i64 %297, %29619
  %29621 = getelementptr inbounds i16, i16* %blur_x917, i64 %29620
  %29622 = getelementptr inbounds i16, i16* %29621, i64 -32
  %29623 = bitcast i16* %29622 to <16 x i16>*
  store <16 x i16> %29617, <16 x i16>* %29623, align 2, !tbaa !399
  %29624 = shufflevector <32 x i16> %29616, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29625 = getelementptr inbounds i16, i16* %29621, i64 -16
  %29626 = bitcast i16* %29625 to <16 x i16>*
  store <16 x i16> %29624, <16 x i16>* %29626, align 2, !tbaa !399
  %29627 = zext i32 %.pre-phi3598 to i64
  %29628 = mul nsw i64 %29627, %314
  %29629 = add nsw i64 %29628, %292
  %29630 = getelementptr inbounds i16, i16* %blur_x917, i64 %29629
  %29631 = getelementptr inbounds i16, i16* %29630, i64 -32
  %29632 = bitcast i16* %29631 to <16 x i16>*
  %29633 = load <16 x i16>, <16 x i16>* %29632, align 2, !tbaa !399
  %29634 = getelementptr inbounds i16, i16* %29630, i64 -16
  %29635 = bitcast i16* %29634 to <16 x i16>*
  %29636 = load <16 x i16>, <16 x i16>* %29635, align 2, !tbaa !399
  %29637 = zext i32 %.pre-phi3628 to i64
  %29638 = mul nsw i64 %29637, %314
  %29639 = add nsw i64 %29638, %292
  %29640 = getelementptr inbounds i16, i16* %blur_x917, i64 %29639
  %29641 = getelementptr inbounds i16, i16* %29640, i64 -32
  %29642 = bitcast i16* %29641 to <16 x i16>*
  %29643 = load <16 x i16>, <16 x i16>* %29642, align 2, !tbaa !399
  %29644 = getelementptr inbounds i16, i16* %29640, i64 -16
  %29645 = bitcast i16* %29644 to <16 x i16>*
  %29646 = load <16 x i16>, <16 x i16>* %29645, align 2, !tbaa !399
  %29647 = zext i32 %.pre-phi3602 to i64
  %29648 = mul nsw i64 %29647, %314
  %29649 = add nsw i64 %29648, %292
  %29650 = getelementptr inbounds i16, i16* %blur_x917, i64 %29649
  %29651 = getelementptr inbounds i16, i16* %29650, i64 -32
  %29652 = bitcast i16* %29651 to <16 x i16>*
  %29653 = load <16 x i16>, <16 x i16>* %29652, align 2, !tbaa !399
  %29654 = getelementptr inbounds i16, i16* %29650, i64 -16
  %29655 = bitcast i16* %29654 to <16 x i16>*
  %29656 = load <16 x i16>, <16 x i16>* %29655, align 2, !tbaa !399
  %29657 = zext i32 %.pre-phi3606 to i64
  %29658 = mul nsw i64 %29657, %314
  %29659 = add nsw i64 %29658, %292
  %29660 = getelementptr inbounds i16, i16* %blur_x917, i64 %29659
  %29661 = getelementptr inbounds i16, i16* %29660, i64 -32
  %29662 = bitcast i16* %29661 to <16 x i16>*
  %29663 = load <16 x i16>, <16 x i16>* %29662, align 2, !tbaa !399
  %29664 = getelementptr inbounds i16, i16* %29660, i64 -16
  %29665 = bitcast i16* %29664 to <16 x i16>*
  %29666 = load <16 x i16>, <16 x i16>* %29665, align 2, !tbaa !399
  %29667 = zext i32 %.pre-phi3610 to i64
  %29668 = mul nsw i64 %29667, %314
  %29669 = add nsw i64 %29668, %292
  %29670 = getelementptr inbounds i16, i16* %blur_x917, i64 %29669
  %29671 = getelementptr inbounds i16, i16* %29670, i64 -32
  %29672 = bitcast i16* %29671 to <16 x i16>*
  %29673 = load <16 x i16>, <16 x i16>* %29672, align 2, !tbaa !399
  %29674 = getelementptr inbounds i16, i16* %29670, i64 -16
  %29675 = bitcast i16* %29674 to <16 x i16>*
  %29676 = load <16 x i16>, <16 x i16>* %29675, align 2, !tbaa !399
  %29677 = mul nsw i64 %29618, %314
  %29678 = add nsw i64 %29677, %292
  %29679 = getelementptr inbounds i16, i16* %blur_x917, i64 %29678
  %29680 = getelementptr inbounds i16, i16* %29679, i64 -32
  %29681 = bitcast i16* %29680 to <16 x i16>*
  %29682 = load <16 x i16>, <16 x i16>* %29681, align 2, !tbaa !399
  %29683 = getelementptr inbounds i16, i16* %29679, i64 -16
  %29684 = bitcast i16* %29683 to <16 x i16>*
  %29685 = load <16 x i16>, <16 x i16>* %29684, align 2, !tbaa !399
  %29686 = zext i32 %.pre-phi3614 to i64
  %29687 = mul nsw i64 %29686, %314
  %29688 = add nsw i64 %29687, %292
  %29689 = getelementptr inbounds i16, i16* %blur_x917, i64 %29688
  %29690 = getelementptr inbounds i16, i16* %29689, i64 -32
  %29691 = bitcast i16* %29690 to <16 x i16>*
  %29692 = load <16 x i16>, <16 x i16>* %29691, align 2, !tbaa !399
  %29693 = getelementptr inbounds i16, i16* %29689, i64 -16
  %29694 = bitcast i16* %29693 to <16 x i16>*
  %29695 = load <16 x i16>, <16 x i16>* %29694, align 2, !tbaa !399
  %29696 = add <16 x i16> %29643, %29633
  %29697 = add <16 x i16> %29696, %29653
  %29698 = add <16 x i16> %29697, %29663
  %29699 = add <16 x i16> %29698, %29673
  %29700 = add <16 x i16> %29699, %29682
  %29701 = add <16 x i16> %29700, %29692
  %29702 = add <16 x i16> %29646, %29636
  %29703 = add <16 x i16> %29702, %29656
  %29704 = add <16 x i16> %29703, %29666
  %29705 = add <16 x i16> %29704, %29676
  %29706 = add <16 x i16> %29705, %29685
  %29707 = add <16 x i16> %29706, %29695
  %29708 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29701, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29709 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29707, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29710 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29708, <16 x i16> %29701)
  %29711 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29709, <16 x i16> %29707)
  %29712 = shufflevector <16 x i16> %29710, <16 x i16> %29711, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29713 = lshr <32 x i16> %29712, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %29714 = shufflevector <32 x i16> %29713, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29715 = sext i32 %a367 to i64
  %29716 = add nsw i64 %29715, 15
  %29717 = mul nsw i64 %29716, %315
  %29718 = add nsw i64 %317, %29717
  %29719 = getelementptr inbounds i16, i16* %264, i64 %29718
  %29720 = getelementptr inbounds i16, i16* %29719, i64 -32
  %29721 = bitcast i16* %29720 to <16 x i16>*
  store <16 x i16> %29714, <16 x i16>* %29721, align 2, !tbaa !401
  %29722 = shufflevector <32 x i16> %29713, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29723 = getelementptr inbounds i16, i16* %29719, i64 -16
  %29724 = bitcast i16* %29723 to <16 x i16>*
  store <16 x i16> %29722, <16 x i16>* %29724, align 2, !tbaa !401
  br label %after_bb1744

"for blur_y.s0.x.x.rebased1759":                  ; preds = %"for blur_y.s0.x.x.rebased1759.preheader", %"consume blur_x1768"
  %indvars.iv3450 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1759.preheader" ], [ %indvars.iv.next3451, %"consume blur_x1768" ]
  %29725 = add nsw i64 %indvars.iv3450, %299
  %29726 = icmp slt i64 %29725, 1
  %29727 = trunc i64 %29725 to i32
  %29728 = shl nsw i32 %29727, 5
  %29729 = icmp sgt i32 %202, %29728
  %29730 = or i1 %29726, %29729
  br i1 %29730, label %"produce blur_x1766", label %"for blur_y.s0.x.x.rebased1759.consume blur_x1768_crit_edge"

"for blur_y.s0.x.x.rebased1759.consume blur_x1768_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1759"
  %.pre3657 = shl nsw i64 %29725, 5
  br label %"consume blur_x1768"

"end for blur_y.s0.x.x.rebased1760":              ; preds = %"consume blur_x1768", %after_bb1744
  br i1 %300, label %"for blur_y.s0.x.x.rebased1776.preheader", label %"end for blur_y.s0.x.x.rebased1777", !prof !386

"for blur_y.s0.x.x.rebased1776.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1760"
  %29731 = sext i32 %t17561074 to i64
  %29732 = zext i32 %.pre-phi3598 to i64
  %29733 = mul nsw i64 %29732, %314
  %29734 = sub nsw i64 %29733, %294
  %29735 = zext i32 %.pre-phi3628 to i64
  %29736 = mul nsw i64 %29735, %314
  %29737 = sub nsw i64 %29736, %294
  %29738 = zext i32 %.pre-phi3602 to i64
  %29739 = mul nsw i64 %29738, %314
  %29740 = sub nsw i64 %29739, %294
  %29741 = zext i32 %.pre-phi3606 to i64
  %29742 = mul nsw i64 %29741, %314
  %29743 = sub nsw i64 %29742, %294
  %29744 = zext i32 %.pre-phi3610 to i64
  %29745 = mul nsw i64 %29744, %314
  %29746 = sub nsw i64 %29745, %294
  %29747 = zext i32 %.pre-phi3618 to i64
  %29748 = mul nsw i64 %29747, %314
  %29749 = sub nsw i64 %29748, %294
  %29750 = zext i32 %.pre-phi3614 to i64
  %29751 = mul nsw i64 %29750, %314
  %29752 = sub nsw i64 %29751, %294
  %29753 = sext i32 %a367 to i64
  %29754 = add nsw i64 %29753, 15
  %29755 = mul nsw i64 %29754, %315
  %29756 = add nsw i64 %29755, %318
  br label %"for blur_y.s0.x.x.rebased1776"

"produce blur_x1766":                             ; preds = %"for blur_y.s0.x.x.rebased1759"
  %t9921767 = add nsw i32 %29728, %t20011756
  %29757 = sext i32 %t9921767 to i64
  %29758 = getelementptr inbounds i16, i16* %read_input860, i64 %29757
  %29759 = getelementptr inbounds i16, i16* %29758, i64 1
  %29760 = bitcast i16* %29759 to <16 x i16>*
  %29761 = load <16 x i16>, <16 x i16>* %29760, align 2, !tbaa !396
  %29762 = getelementptr inbounds i16, i16* %29758, i64 17
  %29763 = bitcast i16* %29762 to <16 x i16>*
  %29764 = load <16 x i16>, <16 x i16>* %29763, align 2, !tbaa !396
  %29765 = bitcast i16* %29758 to <16 x i16>*
  %29766 = load <16 x i16>, <16 x i16>* %29765, align 2, !tbaa !396
  %29767 = getelementptr inbounds i16, i16* %29758, i64 16
  %29768 = bitcast i16* %29767 to <16 x i16>*
  %29769 = load <16 x i16>, <16 x i16>* %29768, align 2, !tbaa !396
  %29770 = getelementptr inbounds i16, i16* %29758, i64 2
  %29771 = bitcast i16* %29770 to <16 x i16>*
  %29772 = load <16 x i16>, <16 x i16>* %29771, align 2, !tbaa !396
  %29773 = getelementptr inbounds i16, i16* %29758, i64 18
  %29774 = bitcast i16* %29773 to <16 x i16>*
  %29775 = load <16 x i16>, <16 x i16>* %29774, align 2, !tbaa !396
  %29776 = getelementptr inbounds i16, i16* %29758, i64 3
  %29777 = bitcast i16* %29776 to <16 x i16>*
  %29778 = load <16 x i16>, <16 x i16>* %29777, align 2, !tbaa !396
  %29779 = getelementptr inbounds i16, i16* %29758, i64 19
  %29780 = bitcast i16* %29779 to <16 x i16>*
  %29781 = load <16 x i16>, <16 x i16>* %29780, align 2, !tbaa !396
  %29782 = getelementptr inbounds i16, i16* %29758, i64 4
  %29783 = bitcast i16* %29782 to <16 x i16>*
  %29784 = load <16 x i16>, <16 x i16>* %29783, align 2, !tbaa !396
  %29785 = getelementptr inbounds i16, i16* %29758, i64 20
  %29786 = bitcast i16* %29785 to <16 x i16>*
  %29787 = load <16 x i16>, <16 x i16>* %29786, align 2, !tbaa !396
  %29788 = getelementptr inbounds i16, i16* %29758, i64 6
  %29789 = bitcast i16* %29788 to <16 x i16>*
  %29790 = load <16 x i16>, <16 x i16>* %29789, align 2, !tbaa !396
  %29791 = getelementptr inbounds i16, i16* %29758, i64 22
  %29792 = bitcast i16* %29791 to <16 x i16>*
  %29793 = load <16 x i16>, <16 x i16>* %29792, align 2, !tbaa !396
  %29794 = getelementptr inbounds i16, i16* %29758, i64 5
  %29795 = bitcast i16* %29794 to <16 x i16>*
  %29796 = load <16 x i16>, <16 x i16>* %29795, align 2, !tbaa !396
  %29797 = getelementptr inbounds i16, i16* %29758, i64 21
  %29798 = bitcast i16* %29797 to <16 x i16>*
  %29799 = load <16 x i16>, <16 x i16>* %29798, align 2, !tbaa !396
  %29800 = add <16 x i16> %29766, %29761
  %29801 = add <16 x i16> %29800, %29772
  %29802 = add <16 x i16> %29801, %29778
  %29803 = add <16 x i16> %29802, %29784
  %29804 = add <16 x i16> %29803, %29790
  %29805 = add <16 x i16> %29804, %29796
  %29806 = add <16 x i16> %29769, %29764
  %29807 = add <16 x i16> %29806, %29775
  %29808 = add <16 x i16> %29807, %29781
  %29809 = add <16 x i16> %29808, %29787
  %29810 = add <16 x i16> %29809, %29793
  %29811 = add <16 x i16> %29810, %29799
  %29812 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29805, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29813 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29811, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29814 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29812, <16 x i16> %29805)
  %29815 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29813, <16 x i16> %29811)
  %29816 = shufflevector <16 x i16> %29814, <16 x i16> %29815, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29817 = lshr <32 x i16> %29816, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %29818 = shufflevector <32 x i16> %29817, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29819 = shl nsw i64 %29725, 5
  %29820 = add nsw i64 %29819, %29530
  %29821 = getelementptr inbounds i16, i16* %blur_x917, i64 %29820
  %29822 = bitcast i16* %29821 to <16 x i16>*
  store <16 x i16> %29818, <16 x i16>* %29822, align 2, !tbaa !399
  %29823 = shufflevector <32 x i16> %29817, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29824 = getelementptr inbounds i16, i16* %29821, i64 16
  %29825 = bitcast i16* %29824 to <16 x i16>*
  store <16 x i16> %29823, <16 x i16>* %29825, align 2, !tbaa !399
  br label %"consume blur_x1768"

"consume blur_x1768":                             ; preds = %"for blur_y.s0.x.x.rebased1759.consume blur_x1768_crit_edge", %"produce blur_x1766"
  %.pre-phi3658 = phi i64 [ %.pre3657, %"for blur_y.s0.x.x.rebased1759.consume blur_x1768_crit_edge" ], [ %29819, %"produce blur_x1766" ]
  %29826 = add nsw i64 %29533, %.pre-phi3658
  %29827 = getelementptr inbounds i16, i16* %blur_x917, i64 %29826
  %29828 = bitcast i16* %29827 to <16 x i16>*
  %29829 = load <16 x i16>, <16 x i16>* %29828, align 2, !tbaa !399
  %29830 = getelementptr inbounds i16, i16* %29827, i64 16
  %29831 = bitcast i16* %29830 to <16 x i16>*
  %29832 = load <16 x i16>, <16 x i16>* %29831, align 2, !tbaa !399
  %29833 = add nsw i64 %29536, %.pre-phi3658
  %29834 = getelementptr inbounds i16, i16* %blur_x917, i64 %29833
  %29835 = bitcast i16* %29834 to <16 x i16>*
  %29836 = load <16 x i16>, <16 x i16>* %29835, align 2, !tbaa !399
  %29837 = getelementptr inbounds i16, i16* %29834, i64 16
  %29838 = bitcast i16* %29837 to <16 x i16>*
  %29839 = load <16 x i16>, <16 x i16>* %29838, align 2, !tbaa !399
  %29840 = add nsw i64 %29539, %.pre-phi3658
  %29841 = getelementptr inbounds i16, i16* %blur_x917, i64 %29840
  %29842 = bitcast i16* %29841 to <16 x i16>*
  %29843 = load <16 x i16>, <16 x i16>* %29842, align 2, !tbaa !399
  %29844 = getelementptr inbounds i16, i16* %29841, i64 16
  %29845 = bitcast i16* %29844 to <16 x i16>*
  %29846 = load <16 x i16>, <16 x i16>* %29845, align 2, !tbaa !399
  %29847 = add nsw i64 %29542, %.pre-phi3658
  %29848 = getelementptr inbounds i16, i16* %blur_x917, i64 %29847
  %29849 = bitcast i16* %29848 to <16 x i16>*
  %29850 = load <16 x i16>, <16 x i16>* %29849, align 2, !tbaa !399
  %29851 = getelementptr inbounds i16, i16* %29848, i64 16
  %29852 = bitcast i16* %29851 to <16 x i16>*
  %29853 = load <16 x i16>, <16 x i16>* %29852, align 2, !tbaa !399
  %29854 = add nsw i64 %29545, %.pre-phi3658
  %29855 = getelementptr inbounds i16, i16* %blur_x917, i64 %29854
  %29856 = bitcast i16* %29855 to <16 x i16>*
  %29857 = load <16 x i16>, <16 x i16>* %29856, align 2, !tbaa !399
  %29858 = getelementptr inbounds i16, i16* %29855, i64 16
  %29859 = bitcast i16* %29858 to <16 x i16>*
  %29860 = load <16 x i16>, <16 x i16>* %29859, align 2, !tbaa !399
  %29861 = add nsw i64 %29548, %.pre-phi3658
  %29862 = getelementptr inbounds i16, i16* %blur_x917, i64 %29861
  %29863 = bitcast i16* %29862 to <16 x i16>*
  %29864 = load <16 x i16>, <16 x i16>* %29863, align 2, !tbaa !399
  %29865 = getelementptr inbounds i16, i16* %29862, i64 16
  %29866 = bitcast i16* %29865 to <16 x i16>*
  %29867 = load <16 x i16>, <16 x i16>* %29866, align 2, !tbaa !399
  %29868 = add nsw i64 %29551, %.pre-phi3658
  %29869 = getelementptr inbounds i16, i16* %blur_x917, i64 %29868
  %29870 = bitcast i16* %29869 to <16 x i16>*
  %29871 = load <16 x i16>, <16 x i16>* %29870, align 2, !tbaa !399
  %29872 = getelementptr inbounds i16, i16* %29869, i64 16
  %29873 = bitcast i16* %29872 to <16 x i16>*
  %29874 = load <16 x i16>, <16 x i16>* %29873, align 2, !tbaa !399
  %29875 = add <16 x i16> %29836, %29829
  %29876 = add <16 x i16> %29875, %29843
  %29877 = add <16 x i16> %29876, %29850
  %29878 = add <16 x i16> %29877, %29857
  %29879 = add <16 x i16> %29878, %29864
  %29880 = add <16 x i16> %29879, %29871
  %29881 = add <16 x i16> %29839, %29832
  %29882 = add <16 x i16> %29881, %29846
  %29883 = add <16 x i16> %29882, %29853
  %29884 = add <16 x i16> %29883, %29860
  %29885 = add <16 x i16> %29884, %29867
  %29886 = add <16 x i16> %29885, %29874
  %29887 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29880, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29888 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29886, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29889 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29887, <16 x i16> %29880)
  %29890 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29888, <16 x i16> %29886)
  %29891 = shufflevector <16 x i16> %29889, <16 x i16> %29890, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29892 = lshr <32 x i16> %29891, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %29893 = shufflevector <32 x i16> %29892, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29894 = add nsw i64 %29555, %.pre-phi3658
  %29895 = getelementptr inbounds i16, i16* %264, i64 %29894
  %29896 = bitcast i16* %29895 to <16 x i16>*
  store <16 x i16> %29893, <16 x i16>* %29896, align 2, !tbaa !401
  %29897 = shufflevector <32 x i16> %29892, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29898 = getelementptr inbounds i16, i16* %29895, i64 16
  %29899 = bitcast i16* %29898 to <16 x i16>*
  store <16 x i16> %29897, <16 x i16>* %29899, align 2, !tbaa !401
  %indvars.iv.next3451 = add nuw nsw i64 %indvars.iv3450, 1
  %.not2680 = icmp eq i64 %indvars.iv.next3451, %386
  br i1 %.not2680, label %"end for blur_y.s0.x.x.rebased1760", label %"for blur_y.s0.x.x.rebased1759"

"for blur_y.s0.x.x.rebased1776":                  ; preds = %"for blur_y.s0.x.x.rebased1776.preheader", %"consume blur_x1786"
  %blur_y.s0.x.x.rebased1778 = phi i32 [ %30050, %"consume blur_x1786" ], [ 0, %"for blur_y.s0.x.x.rebased1776.preheader" ]
  %29900 = add nsw i32 %blur_y.s0.x.x.rebased1778, %t1670852
  %a565 = shl nsw i32 %29900, 5
  %29901 = icmp sgt i32 %a355, %a565
  %b571 = select i1 %29901, i32 %a565, i32 %a355
  %29902 = icmp slt i32 %29900, 1
  %29903 = icmp sgt i32 %202, %a565
  %29904 = or i1 %29902, %29903
  br i1 %29904, label %"produce blur_x1783", label %"consume blur_x1786"

"end for blur_y.s0.x.x.rebased1777":              ; preds = %"consume blur_x1786", %"end for blur_y.s0.x.x.rebased1760"
  br i1 %232, label %"produce blur_x1790", label %after_bb1787

"produce blur_x1783":                             ; preds = %"for blur_y.s0.x.x.rebased1776"
  %29905 = icmp slt i32 %b571, %202
  %blur_x.s0.x.v1.base.s1784 = select i1 %29905, i32 %b571, i32 %202
  %t9971785 = add nsw i32 %blur_x.s0.x.v1.base.s1784, %t20011756
  %29906 = sext i32 %t9971785 to i64
  %29907 = getelementptr inbounds i16, i16* %read_input860, i64 %29906
  %29908 = getelementptr inbounds i16, i16* %29907, i64 1
  %29909 = bitcast i16* %29908 to <16 x i16>*
  %29910 = load <16 x i16>, <16 x i16>* %29909, align 2, !tbaa !396
  %29911 = getelementptr inbounds i16, i16* %29907, i64 17
  %29912 = bitcast i16* %29911 to <16 x i16>*
  %29913 = load <16 x i16>, <16 x i16>* %29912, align 2, !tbaa !396
  %29914 = bitcast i16* %29907 to <16 x i16>*
  %29915 = load <16 x i16>, <16 x i16>* %29914, align 2, !tbaa !396
  %29916 = getelementptr inbounds i16, i16* %29907, i64 16
  %29917 = bitcast i16* %29916 to <16 x i16>*
  %29918 = load <16 x i16>, <16 x i16>* %29917, align 2, !tbaa !396
  %29919 = getelementptr inbounds i16, i16* %29907, i64 2
  %29920 = bitcast i16* %29919 to <16 x i16>*
  %29921 = load <16 x i16>, <16 x i16>* %29920, align 2, !tbaa !396
  %29922 = getelementptr inbounds i16, i16* %29907, i64 18
  %29923 = bitcast i16* %29922 to <16 x i16>*
  %29924 = load <16 x i16>, <16 x i16>* %29923, align 2, !tbaa !396
  %29925 = getelementptr inbounds i16, i16* %29907, i64 3
  %29926 = bitcast i16* %29925 to <16 x i16>*
  %29927 = load <16 x i16>, <16 x i16>* %29926, align 2, !tbaa !396
  %29928 = getelementptr inbounds i16, i16* %29907, i64 19
  %29929 = bitcast i16* %29928 to <16 x i16>*
  %29930 = load <16 x i16>, <16 x i16>* %29929, align 2, !tbaa !396
  %29931 = getelementptr inbounds i16, i16* %29907, i64 4
  %29932 = bitcast i16* %29931 to <16 x i16>*
  %29933 = load <16 x i16>, <16 x i16>* %29932, align 2, !tbaa !396
  %29934 = getelementptr inbounds i16, i16* %29907, i64 20
  %29935 = bitcast i16* %29934 to <16 x i16>*
  %29936 = load <16 x i16>, <16 x i16>* %29935, align 2, !tbaa !396
  %29937 = getelementptr inbounds i16, i16* %29907, i64 6
  %29938 = bitcast i16* %29937 to <16 x i16>*
  %29939 = load <16 x i16>, <16 x i16>* %29938, align 2, !tbaa !396
  %29940 = getelementptr inbounds i16, i16* %29907, i64 22
  %29941 = bitcast i16* %29940 to <16 x i16>*
  %29942 = load <16 x i16>, <16 x i16>* %29941, align 2, !tbaa !396
  %29943 = getelementptr inbounds i16, i16* %29907, i64 5
  %29944 = bitcast i16* %29943 to <16 x i16>*
  %29945 = load <16 x i16>, <16 x i16>* %29944, align 2, !tbaa !396
  %29946 = getelementptr inbounds i16, i16* %29907, i64 21
  %29947 = bitcast i16* %29946 to <16 x i16>*
  %29948 = load <16 x i16>, <16 x i16>* %29947, align 2, !tbaa !396
  %29949 = add <16 x i16> %29915, %29910
  %29950 = add <16 x i16> %29949, %29921
  %29951 = add <16 x i16> %29950, %29927
  %29952 = add <16 x i16> %29951, %29933
  %29953 = add <16 x i16> %29952, %29939
  %29954 = add <16 x i16> %29953, %29945
  %29955 = add <16 x i16> %29918, %29913
  %29956 = add <16 x i16> %29955, %29924
  %29957 = add <16 x i16> %29956, %29930
  %29958 = add <16 x i16> %29957, %29936
  %29959 = add <16 x i16> %29958, %29942
  %29960 = add <16 x i16> %29959, %29948
  %29961 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29954, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29962 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %29960, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %29963 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29961, <16 x i16> %29954)
  %29964 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %29962, <16 x i16> %29960)
  %29965 = shufflevector <16 x i16> %29963, <16 x i16> %29964, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29966 = lshr <32 x i16> %29965, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %29967 = shufflevector <32 x i16> %29966, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %29968 = sext i32 %blur_x.s0.x.v1.base.s1784 to i64
  %29969 = add nsw i64 %29968, %29731
  %29970 = getelementptr inbounds i16, i16* %blur_x917, i64 %29969
  %29971 = bitcast i16* %29970 to <16 x i16>*
  store <16 x i16> %29967, <16 x i16>* %29971, align 2, !tbaa !399
  %29972 = shufflevector <32 x i16> %29966, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %29973 = getelementptr inbounds i16, i16* %29970, i64 16
  %29974 = bitcast i16* %29973 to <16 x i16>*
  store <16 x i16> %29972, <16 x i16>* %29974, align 2, !tbaa !399
  br label %"consume blur_x1786"

"consume blur_x1786":                             ; preds = %"for blur_y.s0.x.x.rebased1776", %"produce blur_x1783"
  %29975 = sext i32 %b571 to i64
  %29976 = add nsw i64 %29734, %29975
  %29977 = getelementptr inbounds i16, i16* %blur_x917, i64 %29976
  %29978 = bitcast i16* %29977 to <16 x i16>*
  %29979 = load <16 x i16>, <16 x i16>* %29978, align 2, !tbaa !399
  %29980 = getelementptr inbounds i16, i16* %29977, i64 16
  %29981 = bitcast i16* %29980 to <16 x i16>*
  %29982 = load <16 x i16>, <16 x i16>* %29981, align 2, !tbaa !399
  %29983 = add nsw i64 %29737, %29975
  %29984 = getelementptr inbounds i16, i16* %blur_x917, i64 %29983
  %29985 = bitcast i16* %29984 to <16 x i16>*
  %29986 = load <16 x i16>, <16 x i16>* %29985, align 2, !tbaa !399
  %29987 = getelementptr inbounds i16, i16* %29984, i64 16
  %29988 = bitcast i16* %29987 to <16 x i16>*
  %29989 = load <16 x i16>, <16 x i16>* %29988, align 2, !tbaa !399
  %29990 = add nsw i64 %29740, %29975
  %29991 = getelementptr inbounds i16, i16* %blur_x917, i64 %29990
  %29992 = bitcast i16* %29991 to <16 x i16>*
  %29993 = load <16 x i16>, <16 x i16>* %29992, align 2, !tbaa !399
  %29994 = getelementptr inbounds i16, i16* %29991, i64 16
  %29995 = bitcast i16* %29994 to <16 x i16>*
  %29996 = load <16 x i16>, <16 x i16>* %29995, align 2, !tbaa !399
  %29997 = add nsw i64 %29743, %29975
  %29998 = getelementptr inbounds i16, i16* %blur_x917, i64 %29997
  %29999 = bitcast i16* %29998 to <16 x i16>*
  %30000 = load <16 x i16>, <16 x i16>* %29999, align 2, !tbaa !399
  %30001 = getelementptr inbounds i16, i16* %29998, i64 16
  %30002 = bitcast i16* %30001 to <16 x i16>*
  %30003 = load <16 x i16>, <16 x i16>* %30002, align 2, !tbaa !399
  %30004 = add nsw i64 %29746, %29975
  %30005 = getelementptr inbounds i16, i16* %blur_x917, i64 %30004
  %30006 = bitcast i16* %30005 to <16 x i16>*
  %30007 = load <16 x i16>, <16 x i16>* %30006, align 2, !tbaa !399
  %30008 = getelementptr inbounds i16, i16* %30005, i64 16
  %30009 = bitcast i16* %30008 to <16 x i16>*
  %30010 = load <16 x i16>, <16 x i16>* %30009, align 2, !tbaa !399
  %30011 = add nsw i64 %29749, %29975
  %30012 = getelementptr inbounds i16, i16* %blur_x917, i64 %30011
  %30013 = bitcast i16* %30012 to <16 x i16>*
  %30014 = load <16 x i16>, <16 x i16>* %30013, align 2, !tbaa !399
  %30015 = getelementptr inbounds i16, i16* %30012, i64 16
  %30016 = bitcast i16* %30015 to <16 x i16>*
  %30017 = load <16 x i16>, <16 x i16>* %30016, align 2, !tbaa !399
  %30018 = add nsw i64 %29752, %29975
  %30019 = getelementptr inbounds i16, i16* %blur_x917, i64 %30018
  %30020 = bitcast i16* %30019 to <16 x i16>*
  %30021 = load <16 x i16>, <16 x i16>* %30020, align 2, !tbaa !399
  %30022 = getelementptr inbounds i16, i16* %30019, i64 16
  %30023 = bitcast i16* %30022 to <16 x i16>*
  %30024 = load <16 x i16>, <16 x i16>* %30023, align 2, !tbaa !399
  %30025 = add <16 x i16> %29986, %29979
  %30026 = add <16 x i16> %30025, %29993
  %30027 = add <16 x i16> %30026, %30000
  %30028 = add <16 x i16> %30027, %30007
  %30029 = add <16 x i16> %30028, %30014
  %30030 = add <16 x i16> %30029, %30021
  %30031 = add <16 x i16> %29989, %29982
  %30032 = add <16 x i16> %30031, %29996
  %30033 = add <16 x i16> %30032, %30003
  %30034 = add <16 x i16> %30033, %30010
  %30035 = add <16 x i16> %30034, %30017
  %30036 = add <16 x i16> %30035, %30024
  %30037 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30030, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30038 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30036, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30039 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30037, <16 x i16> %30030)
  %30040 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30038, <16 x i16> %30036)
  %30041 = shufflevector <16 x i16> %30039, <16 x i16> %30040, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30042 = lshr <32 x i16> %30041, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %30043 = shufflevector <32 x i16> %30042, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30044 = add nsw i64 %29756, %29975
  %30045 = getelementptr inbounds i16, i16* %264, i64 %30044
  %30046 = bitcast i16* %30045 to <16 x i16>*
  store <16 x i16> %30043, <16 x i16>* %30046, align 2, !tbaa !401
  %30047 = shufflevector <32 x i16> %30042, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30048 = getelementptr inbounds i16, i16* %30045, i64 16
  %30049 = bitcast i16* %30048 to <16 x i16>*
  store <16 x i16> %30047, <16 x i16>* %30049, align 2, !tbaa !401
  %30050 = add nuw nsw i32 %blur_y.s0.x.x.rebased1778, 1
  %.not2679 = icmp eq i32 %30050, %t1727937
  br i1 %.not2679, label %"end for blur_y.s0.x.x.rebased1777", label %"for blur_y.s0.x.x.rebased1776"

after_bb1787:                                     ; preds = %"end for blur_y.s0.x.x.rebased1777", %"produce blur_x1790"
  br i1 %298, label %"for blur_y.s0.x.x.rebased1802.preheader", label %"end for blur_y.s0.x.x.rebased1803", !prof !386

"for blur_y.s0.x.x.rebased1802.preheader":        ; preds = %after_bb1787
  %30051 = sext i32 %t17621110 to i64
  %30052 = zext i32 %.pre-phi3602 to i64
  %30053 = mul nsw i64 %30052, %314
  %30054 = sub nsw i64 %30053, %294
  %30055 = zext i32 %.pre-phi3598 to i64
  %30056 = mul nsw i64 %30055, %314
  %30057 = sub nsw i64 %30056, %294
  %30058 = zext i32 %.pre-phi3606 to i64
  %30059 = mul nsw i64 %30058, %314
  %30060 = sub nsw i64 %30059, %294
  %30061 = zext i32 %.pre-phi3610 to i64
  %30062 = mul nsw i64 %30061, %314
  %30063 = sub nsw i64 %30062, %294
  %30064 = zext i32 %.pre-phi3614 to i64
  %30065 = mul nsw i64 %30064, %314
  %30066 = sub nsw i64 %30065, %294
  %30067 = zext i32 %.pre-phi3622 to i64
  %30068 = mul nsw i64 %30067, %314
  %30069 = sub nsw i64 %30068, %294
  %30070 = zext i32 %.pre-phi3618 to i64
  %30071 = mul nsw i64 %30070, %314
  %30072 = sub nsw i64 %30071, %294
  %30073 = sext i32 %a367 to i64
  %30074 = add nsw i64 %30073, 16
  %30075 = mul nsw i64 %30074, %315
  %30076 = add nsw i64 %30075, %318
  br label %"for blur_y.s0.x.x.rebased1802"

"produce blur_x1790":                             ; preds = %"end for blur_y.s0.x.x.rebased1777"
  %30077 = getelementptr inbounds i16, i16* %read_input860, i64 %349
  %30078 = getelementptr inbounds i16, i16* %30077, i64 -31
  %30079 = bitcast i16* %30078 to <16 x i16>*
  %30080 = load <16 x i16>, <16 x i16>* %30079, align 2, !tbaa !396
  %30081 = getelementptr inbounds i16, i16* %30077, i64 -15
  %30082 = bitcast i16* %30081 to <16 x i16>*
  %30083 = load <16 x i16>, <16 x i16>* %30082, align 2, !tbaa !396
  %30084 = getelementptr inbounds i16, i16* %30077, i64 -32
  %30085 = bitcast i16* %30084 to <16 x i16>*
  %30086 = load <16 x i16>, <16 x i16>* %30085, align 2, !tbaa !396
  %30087 = getelementptr inbounds i16, i16* %30077, i64 -16
  %30088 = bitcast i16* %30087 to <16 x i16>*
  %30089 = load <16 x i16>, <16 x i16>* %30088, align 2, !tbaa !396
  %30090 = getelementptr inbounds i16, i16* %30077, i64 -30
  %30091 = bitcast i16* %30090 to <16 x i16>*
  %30092 = load <16 x i16>, <16 x i16>* %30091, align 2, !tbaa !396
  %30093 = getelementptr inbounds i16, i16* %30077, i64 -14
  %30094 = bitcast i16* %30093 to <16 x i16>*
  %30095 = load <16 x i16>, <16 x i16>* %30094, align 2, !tbaa !396
  %30096 = getelementptr inbounds i16, i16* %30077, i64 -29
  %30097 = bitcast i16* %30096 to <16 x i16>*
  %30098 = load <16 x i16>, <16 x i16>* %30097, align 2, !tbaa !396
  %30099 = getelementptr inbounds i16, i16* %30077, i64 -13
  %30100 = bitcast i16* %30099 to <16 x i16>*
  %30101 = load <16 x i16>, <16 x i16>* %30100, align 2, !tbaa !396
  %30102 = getelementptr inbounds i16, i16* %30077, i64 -28
  %30103 = bitcast i16* %30102 to <16 x i16>*
  %30104 = load <16 x i16>, <16 x i16>* %30103, align 2, !tbaa !396
  %30105 = getelementptr inbounds i16, i16* %30077, i64 -12
  %30106 = bitcast i16* %30105 to <16 x i16>*
  %30107 = load <16 x i16>, <16 x i16>* %30106, align 2, !tbaa !396
  %30108 = getelementptr inbounds i16, i16* %30077, i64 -26
  %30109 = bitcast i16* %30108 to <16 x i16>*
  %30110 = load <16 x i16>, <16 x i16>* %30109, align 2, !tbaa !396
  %30111 = getelementptr inbounds i16, i16* %30077, i64 -10
  %30112 = bitcast i16* %30111 to <16 x i16>*
  %30113 = load <16 x i16>, <16 x i16>* %30112, align 2, !tbaa !396
  %30114 = getelementptr inbounds i16, i16* %30077, i64 -27
  %30115 = bitcast i16* %30114 to <16 x i16>*
  %30116 = load <16 x i16>, <16 x i16>* %30115, align 2, !tbaa !396
  %30117 = getelementptr inbounds i16, i16* %30077, i64 -11
  %30118 = bitcast i16* %30117 to <16 x i16>*
  %30119 = load <16 x i16>, <16 x i16>* %30118, align 2, !tbaa !396
  %30120 = add <16 x i16> %30086, %30080
  %30121 = add <16 x i16> %30120, %30092
  %30122 = add <16 x i16> %30121, %30098
  %30123 = add <16 x i16> %30122, %30104
  %30124 = add <16 x i16> %30123, %30110
  %30125 = add <16 x i16> %30124, %30116
  %30126 = add <16 x i16> %30089, %30083
  %30127 = add <16 x i16> %30126, %30095
  %30128 = add <16 x i16> %30127, %30101
  %30129 = add <16 x i16> %30128, %30107
  %30130 = add <16 x i16> %30129, %30113
  %30131 = add <16 x i16> %30130, %30119
  %30132 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30125, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30133 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30131, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30134 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30132, <16 x i16> %30125)
  %30135 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30133, <16 x i16> %30131)
  %30136 = shufflevector <16 x i16> %30134, <16 x i16> %30135, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30137 = lshr <32 x i16> %30136, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %30138 = shufflevector <32 x i16> %30137, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30139 = zext i32 %.pre-phi3622 to i64
  %30140 = mul nsw i64 %295, %30139
  %30141 = add nsw i64 %297, %30140
  %30142 = getelementptr inbounds i16, i16* %blur_x917, i64 %30141
  %30143 = getelementptr inbounds i16, i16* %30142, i64 -32
  %30144 = bitcast i16* %30143 to <16 x i16>*
  store <16 x i16> %30138, <16 x i16>* %30144, align 2, !tbaa !399
  %30145 = shufflevector <32 x i16> %30137, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30146 = getelementptr inbounds i16, i16* %30142, i64 -16
  %30147 = bitcast i16* %30146 to <16 x i16>*
  store <16 x i16> %30145, <16 x i16>* %30147, align 2, !tbaa !399
  %30148 = zext i32 %.pre-phi3602 to i64
  %30149 = mul nsw i64 %30148, %314
  %30150 = add nsw i64 %30149, %292
  %30151 = getelementptr inbounds i16, i16* %blur_x917, i64 %30150
  %30152 = getelementptr inbounds i16, i16* %30151, i64 -32
  %30153 = bitcast i16* %30152 to <16 x i16>*
  %30154 = load <16 x i16>, <16 x i16>* %30153, align 2, !tbaa !399
  %30155 = getelementptr inbounds i16, i16* %30151, i64 -16
  %30156 = bitcast i16* %30155 to <16 x i16>*
  %30157 = load <16 x i16>, <16 x i16>* %30156, align 2, !tbaa !399
  %30158 = zext i32 %.pre-phi3598 to i64
  %30159 = mul nsw i64 %30158, %314
  %30160 = add nsw i64 %30159, %292
  %30161 = getelementptr inbounds i16, i16* %blur_x917, i64 %30160
  %30162 = getelementptr inbounds i16, i16* %30161, i64 -32
  %30163 = bitcast i16* %30162 to <16 x i16>*
  %30164 = load <16 x i16>, <16 x i16>* %30163, align 2, !tbaa !399
  %30165 = getelementptr inbounds i16, i16* %30161, i64 -16
  %30166 = bitcast i16* %30165 to <16 x i16>*
  %30167 = load <16 x i16>, <16 x i16>* %30166, align 2, !tbaa !399
  %30168 = zext i32 %.pre-phi3606 to i64
  %30169 = mul nsw i64 %30168, %314
  %30170 = add nsw i64 %30169, %292
  %30171 = getelementptr inbounds i16, i16* %blur_x917, i64 %30170
  %30172 = getelementptr inbounds i16, i16* %30171, i64 -32
  %30173 = bitcast i16* %30172 to <16 x i16>*
  %30174 = load <16 x i16>, <16 x i16>* %30173, align 2, !tbaa !399
  %30175 = getelementptr inbounds i16, i16* %30171, i64 -16
  %30176 = bitcast i16* %30175 to <16 x i16>*
  %30177 = load <16 x i16>, <16 x i16>* %30176, align 2, !tbaa !399
  %30178 = zext i32 %.pre-phi3610 to i64
  %30179 = mul nsw i64 %30178, %314
  %30180 = add nsw i64 %30179, %292
  %30181 = getelementptr inbounds i16, i16* %blur_x917, i64 %30180
  %30182 = getelementptr inbounds i16, i16* %30181, i64 -32
  %30183 = bitcast i16* %30182 to <16 x i16>*
  %30184 = load <16 x i16>, <16 x i16>* %30183, align 2, !tbaa !399
  %30185 = getelementptr inbounds i16, i16* %30181, i64 -16
  %30186 = bitcast i16* %30185 to <16 x i16>*
  %30187 = load <16 x i16>, <16 x i16>* %30186, align 2, !tbaa !399
  %30188 = zext i32 %.pre-phi3614 to i64
  %30189 = mul nsw i64 %30188, %314
  %30190 = add nsw i64 %30189, %292
  %30191 = getelementptr inbounds i16, i16* %blur_x917, i64 %30190
  %30192 = getelementptr inbounds i16, i16* %30191, i64 -32
  %30193 = bitcast i16* %30192 to <16 x i16>*
  %30194 = load <16 x i16>, <16 x i16>* %30193, align 2, !tbaa !399
  %30195 = getelementptr inbounds i16, i16* %30191, i64 -16
  %30196 = bitcast i16* %30195 to <16 x i16>*
  %30197 = load <16 x i16>, <16 x i16>* %30196, align 2, !tbaa !399
  %30198 = mul nsw i64 %30139, %314
  %30199 = add nsw i64 %30198, %292
  %30200 = getelementptr inbounds i16, i16* %blur_x917, i64 %30199
  %30201 = getelementptr inbounds i16, i16* %30200, i64 -32
  %30202 = bitcast i16* %30201 to <16 x i16>*
  %30203 = load <16 x i16>, <16 x i16>* %30202, align 2, !tbaa !399
  %30204 = getelementptr inbounds i16, i16* %30200, i64 -16
  %30205 = bitcast i16* %30204 to <16 x i16>*
  %30206 = load <16 x i16>, <16 x i16>* %30205, align 2, !tbaa !399
  %30207 = zext i32 %.pre-phi3618 to i64
  %30208 = mul nsw i64 %30207, %314
  %30209 = add nsw i64 %30208, %292
  %30210 = getelementptr inbounds i16, i16* %blur_x917, i64 %30209
  %30211 = getelementptr inbounds i16, i16* %30210, i64 -32
  %30212 = bitcast i16* %30211 to <16 x i16>*
  %30213 = load <16 x i16>, <16 x i16>* %30212, align 2, !tbaa !399
  %30214 = getelementptr inbounds i16, i16* %30210, i64 -16
  %30215 = bitcast i16* %30214 to <16 x i16>*
  %30216 = load <16 x i16>, <16 x i16>* %30215, align 2, !tbaa !399
  %30217 = add <16 x i16> %30164, %30154
  %30218 = add <16 x i16> %30217, %30174
  %30219 = add <16 x i16> %30218, %30184
  %30220 = add <16 x i16> %30219, %30194
  %30221 = add <16 x i16> %30220, %30203
  %30222 = add <16 x i16> %30221, %30213
  %30223 = add <16 x i16> %30167, %30157
  %30224 = add <16 x i16> %30223, %30177
  %30225 = add <16 x i16> %30224, %30187
  %30226 = add <16 x i16> %30225, %30197
  %30227 = add <16 x i16> %30226, %30206
  %30228 = add <16 x i16> %30227, %30216
  %30229 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30222, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30230 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30228, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30231 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30229, <16 x i16> %30222)
  %30232 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30230, <16 x i16> %30228)
  %30233 = shufflevector <16 x i16> %30231, <16 x i16> %30232, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30234 = lshr <32 x i16> %30233, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %30235 = shufflevector <32 x i16> %30234, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30236 = sext i32 %a367 to i64
  %30237 = add nsw i64 %30236, 16
  %30238 = mul nsw i64 %30237, %315
  %30239 = add nsw i64 %317, %30238
  %30240 = getelementptr inbounds i16, i16* %264, i64 %30239
  %30241 = getelementptr inbounds i16, i16* %30240, i64 -32
  %30242 = bitcast i16* %30241 to <16 x i16>*
  store <16 x i16> %30235, <16 x i16>* %30242, align 2, !tbaa !401
  %30243 = shufflevector <32 x i16> %30234, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30244 = getelementptr inbounds i16, i16* %30240, i64 -16
  %30245 = bitcast i16* %30244 to <16 x i16>*
  store <16 x i16> %30243, <16 x i16>* %30245, align 2, !tbaa !401
  br label %after_bb1787

"for blur_y.s0.x.x.rebased1802":                  ; preds = %"for blur_y.s0.x.x.rebased1802.preheader", %"consume blur_x1811"
  %indvars.iv3453 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1802.preheader" ], [ %indvars.iv.next3454, %"consume blur_x1811" ]
  %30246 = add nsw i64 %indvars.iv3453, %299
  %30247 = icmp slt i64 %30246, 1
  %30248 = trunc i64 %30246 to i32
  %30249 = shl nsw i32 %30248, 5
  %30250 = icmp sgt i32 %202, %30249
  %30251 = or i1 %30247, %30250
  br i1 %30251, label %"produce blur_x1809", label %"for blur_y.s0.x.x.rebased1802.consume blur_x1811_crit_edge"

"for blur_y.s0.x.x.rebased1802.consume blur_x1811_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1802"
  %.pre3659 = shl nsw i64 %30246, 5
  br label %"consume blur_x1811"

"end for blur_y.s0.x.x.rebased1803":              ; preds = %"consume blur_x1811", %after_bb1787
  br i1 %300, label %"for blur_y.s0.x.x.rebased1819.preheader", label %"end for blur_y.s0.x.x.rebased1820", !prof !386

"for blur_y.s0.x.x.rebased1819.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1803"
  %30252 = sext i32 %t17621110 to i64
  %30253 = zext i32 %.pre-phi3602 to i64
  %30254 = mul nsw i64 %30253, %314
  %30255 = sub nsw i64 %30254, %294
  %30256 = zext i32 %.pre-phi3598 to i64
  %30257 = mul nsw i64 %30256, %314
  %30258 = sub nsw i64 %30257, %294
  %30259 = zext i32 %.pre-phi3606 to i64
  %30260 = mul nsw i64 %30259, %314
  %30261 = sub nsw i64 %30260, %294
  %30262 = zext i32 %.pre-phi3610 to i64
  %30263 = mul nsw i64 %30262, %314
  %30264 = sub nsw i64 %30263, %294
  %30265 = zext i32 %.pre-phi3614 to i64
  %30266 = mul nsw i64 %30265, %314
  %30267 = sub nsw i64 %30266, %294
  %30268 = zext i32 %.pre-phi3622 to i64
  %30269 = mul nsw i64 %30268, %314
  %30270 = sub nsw i64 %30269, %294
  %30271 = zext i32 %.pre-phi3618 to i64
  %30272 = mul nsw i64 %30271, %314
  %30273 = sub nsw i64 %30272, %294
  %30274 = sext i32 %a367 to i64
  %30275 = add nsw i64 %30274, 16
  %30276 = mul nsw i64 %30275, %315
  %30277 = add nsw i64 %30276, %318
  br label %"for blur_y.s0.x.x.rebased1819"

"produce blur_x1809":                             ; preds = %"for blur_y.s0.x.x.rebased1802"
  %t10081810 = add nsw i32 %30249, %t20171799
  %30278 = sext i32 %t10081810 to i64
  %30279 = getelementptr inbounds i16, i16* %read_input860, i64 %30278
  %30280 = getelementptr inbounds i16, i16* %30279, i64 1
  %30281 = bitcast i16* %30280 to <16 x i16>*
  %30282 = load <16 x i16>, <16 x i16>* %30281, align 2, !tbaa !396
  %30283 = getelementptr inbounds i16, i16* %30279, i64 17
  %30284 = bitcast i16* %30283 to <16 x i16>*
  %30285 = load <16 x i16>, <16 x i16>* %30284, align 2, !tbaa !396
  %30286 = bitcast i16* %30279 to <16 x i16>*
  %30287 = load <16 x i16>, <16 x i16>* %30286, align 2, !tbaa !396
  %30288 = getelementptr inbounds i16, i16* %30279, i64 16
  %30289 = bitcast i16* %30288 to <16 x i16>*
  %30290 = load <16 x i16>, <16 x i16>* %30289, align 2, !tbaa !396
  %30291 = getelementptr inbounds i16, i16* %30279, i64 2
  %30292 = bitcast i16* %30291 to <16 x i16>*
  %30293 = load <16 x i16>, <16 x i16>* %30292, align 2, !tbaa !396
  %30294 = getelementptr inbounds i16, i16* %30279, i64 18
  %30295 = bitcast i16* %30294 to <16 x i16>*
  %30296 = load <16 x i16>, <16 x i16>* %30295, align 2, !tbaa !396
  %30297 = getelementptr inbounds i16, i16* %30279, i64 3
  %30298 = bitcast i16* %30297 to <16 x i16>*
  %30299 = load <16 x i16>, <16 x i16>* %30298, align 2, !tbaa !396
  %30300 = getelementptr inbounds i16, i16* %30279, i64 19
  %30301 = bitcast i16* %30300 to <16 x i16>*
  %30302 = load <16 x i16>, <16 x i16>* %30301, align 2, !tbaa !396
  %30303 = getelementptr inbounds i16, i16* %30279, i64 4
  %30304 = bitcast i16* %30303 to <16 x i16>*
  %30305 = load <16 x i16>, <16 x i16>* %30304, align 2, !tbaa !396
  %30306 = getelementptr inbounds i16, i16* %30279, i64 20
  %30307 = bitcast i16* %30306 to <16 x i16>*
  %30308 = load <16 x i16>, <16 x i16>* %30307, align 2, !tbaa !396
  %30309 = getelementptr inbounds i16, i16* %30279, i64 6
  %30310 = bitcast i16* %30309 to <16 x i16>*
  %30311 = load <16 x i16>, <16 x i16>* %30310, align 2, !tbaa !396
  %30312 = getelementptr inbounds i16, i16* %30279, i64 22
  %30313 = bitcast i16* %30312 to <16 x i16>*
  %30314 = load <16 x i16>, <16 x i16>* %30313, align 2, !tbaa !396
  %30315 = getelementptr inbounds i16, i16* %30279, i64 5
  %30316 = bitcast i16* %30315 to <16 x i16>*
  %30317 = load <16 x i16>, <16 x i16>* %30316, align 2, !tbaa !396
  %30318 = getelementptr inbounds i16, i16* %30279, i64 21
  %30319 = bitcast i16* %30318 to <16 x i16>*
  %30320 = load <16 x i16>, <16 x i16>* %30319, align 2, !tbaa !396
  %30321 = add <16 x i16> %30287, %30282
  %30322 = add <16 x i16> %30321, %30293
  %30323 = add <16 x i16> %30322, %30299
  %30324 = add <16 x i16> %30323, %30305
  %30325 = add <16 x i16> %30324, %30311
  %30326 = add <16 x i16> %30325, %30317
  %30327 = add <16 x i16> %30290, %30285
  %30328 = add <16 x i16> %30327, %30296
  %30329 = add <16 x i16> %30328, %30302
  %30330 = add <16 x i16> %30329, %30308
  %30331 = add <16 x i16> %30330, %30314
  %30332 = add <16 x i16> %30331, %30320
  %30333 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30326, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30334 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30332, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30335 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30333, <16 x i16> %30326)
  %30336 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30334, <16 x i16> %30332)
  %30337 = shufflevector <16 x i16> %30335, <16 x i16> %30336, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30338 = lshr <32 x i16> %30337, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %30339 = shufflevector <32 x i16> %30338, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30340 = shl nsw i64 %30246, 5
  %30341 = add nsw i64 %30340, %30051
  %30342 = getelementptr inbounds i16, i16* %blur_x917, i64 %30341
  %30343 = bitcast i16* %30342 to <16 x i16>*
  store <16 x i16> %30339, <16 x i16>* %30343, align 2, !tbaa !399
  %30344 = shufflevector <32 x i16> %30338, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30345 = getelementptr inbounds i16, i16* %30342, i64 16
  %30346 = bitcast i16* %30345 to <16 x i16>*
  store <16 x i16> %30344, <16 x i16>* %30346, align 2, !tbaa !399
  br label %"consume blur_x1811"

"consume blur_x1811":                             ; preds = %"for blur_y.s0.x.x.rebased1802.consume blur_x1811_crit_edge", %"produce blur_x1809"
  %.pre-phi3660 = phi i64 [ %.pre3659, %"for blur_y.s0.x.x.rebased1802.consume blur_x1811_crit_edge" ], [ %30340, %"produce blur_x1809" ]
  %30347 = add nsw i64 %30054, %.pre-phi3660
  %30348 = getelementptr inbounds i16, i16* %blur_x917, i64 %30347
  %30349 = bitcast i16* %30348 to <16 x i16>*
  %30350 = load <16 x i16>, <16 x i16>* %30349, align 2, !tbaa !399
  %30351 = getelementptr inbounds i16, i16* %30348, i64 16
  %30352 = bitcast i16* %30351 to <16 x i16>*
  %30353 = load <16 x i16>, <16 x i16>* %30352, align 2, !tbaa !399
  %30354 = add nsw i64 %30057, %.pre-phi3660
  %30355 = getelementptr inbounds i16, i16* %blur_x917, i64 %30354
  %30356 = bitcast i16* %30355 to <16 x i16>*
  %30357 = load <16 x i16>, <16 x i16>* %30356, align 2, !tbaa !399
  %30358 = getelementptr inbounds i16, i16* %30355, i64 16
  %30359 = bitcast i16* %30358 to <16 x i16>*
  %30360 = load <16 x i16>, <16 x i16>* %30359, align 2, !tbaa !399
  %30361 = add nsw i64 %30060, %.pre-phi3660
  %30362 = getelementptr inbounds i16, i16* %blur_x917, i64 %30361
  %30363 = bitcast i16* %30362 to <16 x i16>*
  %30364 = load <16 x i16>, <16 x i16>* %30363, align 2, !tbaa !399
  %30365 = getelementptr inbounds i16, i16* %30362, i64 16
  %30366 = bitcast i16* %30365 to <16 x i16>*
  %30367 = load <16 x i16>, <16 x i16>* %30366, align 2, !tbaa !399
  %30368 = add nsw i64 %30063, %.pre-phi3660
  %30369 = getelementptr inbounds i16, i16* %blur_x917, i64 %30368
  %30370 = bitcast i16* %30369 to <16 x i16>*
  %30371 = load <16 x i16>, <16 x i16>* %30370, align 2, !tbaa !399
  %30372 = getelementptr inbounds i16, i16* %30369, i64 16
  %30373 = bitcast i16* %30372 to <16 x i16>*
  %30374 = load <16 x i16>, <16 x i16>* %30373, align 2, !tbaa !399
  %30375 = add nsw i64 %30066, %.pre-phi3660
  %30376 = getelementptr inbounds i16, i16* %blur_x917, i64 %30375
  %30377 = bitcast i16* %30376 to <16 x i16>*
  %30378 = load <16 x i16>, <16 x i16>* %30377, align 2, !tbaa !399
  %30379 = getelementptr inbounds i16, i16* %30376, i64 16
  %30380 = bitcast i16* %30379 to <16 x i16>*
  %30381 = load <16 x i16>, <16 x i16>* %30380, align 2, !tbaa !399
  %30382 = add nsw i64 %30069, %.pre-phi3660
  %30383 = getelementptr inbounds i16, i16* %blur_x917, i64 %30382
  %30384 = bitcast i16* %30383 to <16 x i16>*
  %30385 = load <16 x i16>, <16 x i16>* %30384, align 2, !tbaa !399
  %30386 = getelementptr inbounds i16, i16* %30383, i64 16
  %30387 = bitcast i16* %30386 to <16 x i16>*
  %30388 = load <16 x i16>, <16 x i16>* %30387, align 2, !tbaa !399
  %30389 = add nsw i64 %30072, %.pre-phi3660
  %30390 = getelementptr inbounds i16, i16* %blur_x917, i64 %30389
  %30391 = bitcast i16* %30390 to <16 x i16>*
  %30392 = load <16 x i16>, <16 x i16>* %30391, align 2, !tbaa !399
  %30393 = getelementptr inbounds i16, i16* %30390, i64 16
  %30394 = bitcast i16* %30393 to <16 x i16>*
  %30395 = load <16 x i16>, <16 x i16>* %30394, align 2, !tbaa !399
  %30396 = add <16 x i16> %30357, %30350
  %30397 = add <16 x i16> %30396, %30364
  %30398 = add <16 x i16> %30397, %30371
  %30399 = add <16 x i16> %30398, %30378
  %30400 = add <16 x i16> %30399, %30385
  %30401 = add <16 x i16> %30400, %30392
  %30402 = add <16 x i16> %30360, %30353
  %30403 = add <16 x i16> %30402, %30367
  %30404 = add <16 x i16> %30403, %30374
  %30405 = add <16 x i16> %30404, %30381
  %30406 = add <16 x i16> %30405, %30388
  %30407 = add <16 x i16> %30406, %30395
  %30408 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30401, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30409 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30407, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30410 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30408, <16 x i16> %30401)
  %30411 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30409, <16 x i16> %30407)
  %30412 = shufflevector <16 x i16> %30410, <16 x i16> %30411, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30413 = lshr <32 x i16> %30412, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %30414 = shufflevector <32 x i16> %30413, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30415 = add nsw i64 %30076, %.pre-phi3660
  %30416 = getelementptr inbounds i16, i16* %264, i64 %30415
  %30417 = bitcast i16* %30416 to <16 x i16>*
  store <16 x i16> %30414, <16 x i16>* %30417, align 2, !tbaa !401
  %30418 = shufflevector <32 x i16> %30413, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30419 = getelementptr inbounds i16, i16* %30416, i64 16
  %30420 = bitcast i16* %30419 to <16 x i16>*
  store <16 x i16> %30418, <16 x i16>* %30420, align 2, !tbaa !401
  %indvars.iv.next3454 = add nuw nsw i64 %indvars.iv3453, 1
  %.not2678 = icmp eq i64 %indvars.iv.next3454, %386
  br i1 %.not2678, label %"end for blur_y.s0.x.x.rebased1803", label %"for blur_y.s0.x.x.rebased1802"

"for blur_y.s0.x.x.rebased1819":                  ; preds = %"for blur_y.s0.x.x.rebased1819.preheader", %"consume blur_x1829"
  %blur_y.s0.x.x.rebased1821 = phi i32 [ %30571, %"consume blur_x1829" ], [ 0, %"for blur_y.s0.x.x.rebased1819.preheader" ]
  %30421 = add nsw i32 %blur_y.s0.x.x.rebased1821, %t1670852
  %a572 = shl nsw i32 %30421, 5
  %30422 = icmp sgt i32 %a355, %a572
  %b578 = select i1 %30422, i32 %a572, i32 %a355
  %30423 = icmp slt i32 %30421, 1
  %30424 = icmp sgt i32 %202, %a572
  %30425 = or i1 %30423, %30424
  br i1 %30425, label %"produce blur_x1826", label %"consume blur_x1829"

"end for blur_y.s0.x.x.rebased1820":              ; preds = %"consume blur_x1829", %"end for blur_y.s0.x.x.rebased1803"
  br i1 %232, label %"produce blur_x1833", label %after_bb1830

"produce blur_x1826":                             ; preds = %"for blur_y.s0.x.x.rebased1819"
  %30426 = icmp slt i32 %b578, %202
  %blur_x.s0.x.v1.base.s1827 = select i1 %30426, i32 %b578, i32 %202
  %t10131828 = add nsw i32 %blur_x.s0.x.v1.base.s1827, %t20171799
  %30427 = sext i32 %t10131828 to i64
  %30428 = getelementptr inbounds i16, i16* %read_input860, i64 %30427
  %30429 = getelementptr inbounds i16, i16* %30428, i64 1
  %30430 = bitcast i16* %30429 to <16 x i16>*
  %30431 = load <16 x i16>, <16 x i16>* %30430, align 2, !tbaa !396
  %30432 = getelementptr inbounds i16, i16* %30428, i64 17
  %30433 = bitcast i16* %30432 to <16 x i16>*
  %30434 = load <16 x i16>, <16 x i16>* %30433, align 2, !tbaa !396
  %30435 = bitcast i16* %30428 to <16 x i16>*
  %30436 = load <16 x i16>, <16 x i16>* %30435, align 2, !tbaa !396
  %30437 = getelementptr inbounds i16, i16* %30428, i64 16
  %30438 = bitcast i16* %30437 to <16 x i16>*
  %30439 = load <16 x i16>, <16 x i16>* %30438, align 2, !tbaa !396
  %30440 = getelementptr inbounds i16, i16* %30428, i64 2
  %30441 = bitcast i16* %30440 to <16 x i16>*
  %30442 = load <16 x i16>, <16 x i16>* %30441, align 2, !tbaa !396
  %30443 = getelementptr inbounds i16, i16* %30428, i64 18
  %30444 = bitcast i16* %30443 to <16 x i16>*
  %30445 = load <16 x i16>, <16 x i16>* %30444, align 2, !tbaa !396
  %30446 = getelementptr inbounds i16, i16* %30428, i64 3
  %30447 = bitcast i16* %30446 to <16 x i16>*
  %30448 = load <16 x i16>, <16 x i16>* %30447, align 2, !tbaa !396
  %30449 = getelementptr inbounds i16, i16* %30428, i64 19
  %30450 = bitcast i16* %30449 to <16 x i16>*
  %30451 = load <16 x i16>, <16 x i16>* %30450, align 2, !tbaa !396
  %30452 = getelementptr inbounds i16, i16* %30428, i64 4
  %30453 = bitcast i16* %30452 to <16 x i16>*
  %30454 = load <16 x i16>, <16 x i16>* %30453, align 2, !tbaa !396
  %30455 = getelementptr inbounds i16, i16* %30428, i64 20
  %30456 = bitcast i16* %30455 to <16 x i16>*
  %30457 = load <16 x i16>, <16 x i16>* %30456, align 2, !tbaa !396
  %30458 = getelementptr inbounds i16, i16* %30428, i64 6
  %30459 = bitcast i16* %30458 to <16 x i16>*
  %30460 = load <16 x i16>, <16 x i16>* %30459, align 2, !tbaa !396
  %30461 = getelementptr inbounds i16, i16* %30428, i64 22
  %30462 = bitcast i16* %30461 to <16 x i16>*
  %30463 = load <16 x i16>, <16 x i16>* %30462, align 2, !tbaa !396
  %30464 = getelementptr inbounds i16, i16* %30428, i64 5
  %30465 = bitcast i16* %30464 to <16 x i16>*
  %30466 = load <16 x i16>, <16 x i16>* %30465, align 2, !tbaa !396
  %30467 = getelementptr inbounds i16, i16* %30428, i64 21
  %30468 = bitcast i16* %30467 to <16 x i16>*
  %30469 = load <16 x i16>, <16 x i16>* %30468, align 2, !tbaa !396
  %30470 = add <16 x i16> %30436, %30431
  %30471 = add <16 x i16> %30470, %30442
  %30472 = add <16 x i16> %30471, %30448
  %30473 = add <16 x i16> %30472, %30454
  %30474 = add <16 x i16> %30473, %30460
  %30475 = add <16 x i16> %30474, %30466
  %30476 = add <16 x i16> %30439, %30434
  %30477 = add <16 x i16> %30476, %30445
  %30478 = add <16 x i16> %30477, %30451
  %30479 = add <16 x i16> %30478, %30457
  %30480 = add <16 x i16> %30479, %30463
  %30481 = add <16 x i16> %30480, %30469
  %30482 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30475, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30483 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30481, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30484 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30482, <16 x i16> %30475)
  %30485 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30483, <16 x i16> %30481)
  %30486 = shufflevector <16 x i16> %30484, <16 x i16> %30485, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30487 = lshr <32 x i16> %30486, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %30488 = shufflevector <32 x i16> %30487, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30489 = sext i32 %blur_x.s0.x.v1.base.s1827 to i64
  %30490 = add nsw i64 %30489, %30252
  %30491 = getelementptr inbounds i16, i16* %blur_x917, i64 %30490
  %30492 = bitcast i16* %30491 to <16 x i16>*
  store <16 x i16> %30488, <16 x i16>* %30492, align 2, !tbaa !399
  %30493 = shufflevector <32 x i16> %30487, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30494 = getelementptr inbounds i16, i16* %30491, i64 16
  %30495 = bitcast i16* %30494 to <16 x i16>*
  store <16 x i16> %30493, <16 x i16>* %30495, align 2, !tbaa !399
  br label %"consume blur_x1829"

"consume blur_x1829":                             ; preds = %"for blur_y.s0.x.x.rebased1819", %"produce blur_x1826"
  %30496 = sext i32 %b578 to i64
  %30497 = add nsw i64 %30255, %30496
  %30498 = getelementptr inbounds i16, i16* %blur_x917, i64 %30497
  %30499 = bitcast i16* %30498 to <16 x i16>*
  %30500 = load <16 x i16>, <16 x i16>* %30499, align 2, !tbaa !399
  %30501 = getelementptr inbounds i16, i16* %30498, i64 16
  %30502 = bitcast i16* %30501 to <16 x i16>*
  %30503 = load <16 x i16>, <16 x i16>* %30502, align 2, !tbaa !399
  %30504 = add nsw i64 %30258, %30496
  %30505 = getelementptr inbounds i16, i16* %blur_x917, i64 %30504
  %30506 = bitcast i16* %30505 to <16 x i16>*
  %30507 = load <16 x i16>, <16 x i16>* %30506, align 2, !tbaa !399
  %30508 = getelementptr inbounds i16, i16* %30505, i64 16
  %30509 = bitcast i16* %30508 to <16 x i16>*
  %30510 = load <16 x i16>, <16 x i16>* %30509, align 2, !tbaa !399
  %30511 = add nsw i64 %30261, %30496
  %30512 = getelementptr inbounds i16, i16* %blur_x917, i64 %30511
  %30513 = bitcast i16* %30512 to <16 x i16>*
  %30514 = load <16 x i16>, <16 x i16>* %30513, align 2, !tbaa !399
  %30515 = getelementptr inbounds i16, i16* %30512, i64 16
  %30516 = bitcast i16* %30515 to <16 x i16>*
  %30517 = load <16 x i16>, <16 x i16>* %30516, align 2, !tbaa !399
  %30518 = add nsw i64 %30264, %30496
  %30519 = getelementptr inbounds i16, i16* %blur_x917, i64 %30518
  %30520 = bitcast i16* %30519 to <16 x i16>*
  %30521 = load <16 x i16>, <16 x i16>* %30520, align 2, !tbaa !399
  %30522 = getelementptr inbounds i16, i16* %30519, i64 16
  %30523 = bitcast i16* %30522 to <16 x i16>*
  %30524 = load <16 x i16>, <16 x i16>* %30523, align 2, !tbaa !399
  %30525 = add nsw i64 %30267, %30496
  %30526 = getelementptr inbounds i16, i16* %blur_x917, i64 %30525
  %30527 = bitcast i16* %30526 to <16 x i16>*
  %30528 = load <16 x i16>, <16 x i16>* %30527, align 2, !tbaa !399
  %30529 = getelementptr inbounds i16, i16* %30526, i64 16
  %30530 = bitcast i16* %30529 to <16 x i16>*
  %30531 = load <16 x i16>, <16 x i16>* %30530, align 2, !tbaa !399
  %30532 = add nsw i64 %30270, %30496
  %30533 = getelementptr inbounds i16, i16* %blur_x917, i64 %30532
  %30534 = bitcast i16* %30533 to <16 x i16>*
  %30535 = load <16 x i16>, <16 x i16>* %30534, align 2, !tbaa !399
  %30536 = getelementptr inbounds i16, i16* %30533, i64 16
  %30537 = bitcast i16* %30536 to <16 x i16>*
  %30538 = load <16 x i16>, <16 x i16>* %30537, align 2, !tbaa !399
  %30539 = add nsw i64 %30273, %30496
  %30540 = getelementptr inbounds i16, i16* %blur_x917, i64 %30539
  %30541 = bitcast i16* %30540 to <16 x i16>*
  %30542 = load <16 x i16>, <16 x i16>* %30541, align 2, !tbaa !399
  %30543 = getelementptr inbounds i16, i16* %30540, i64 16
  %30544 = bitcast i16* %30543 to <16 x i16>*
  %30545 = load <16 x i16>, <16 x i16>* %30544, align 2, !tbaa !399
  %30546 = add <16 x i16> %30507, %30500
  %30547 = add <16 x i16> %30546, %30514
  %30548 = add <16 x i16> %30547, %30521
  %30549 = add <16 x i16> %30548, %30528
  %30550 = add <16 x i16> %30549, %30535
  %30551 = add <16 x i16> %30550, %30542
  %30552 = add <16 x i16> %30510, %30503
  %30553 = add <16 x i16> %30552, %30517
  %30554 = add <16 x i16> %30553, %30524
  %30555 = add <16 x i16> %30554, %30531
  %30556 = add <16 x i16> %30555, %30538
  %30557 = add <16 x i16> %30556, %30545
  %30558 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30551, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30559 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30557, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30560 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30558, <16 x i16> %30551)
  %30561 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30559, <16 x i16> %30557)
  %30562 = shufflevector <16 x i16> %30560, <16 x i16> %30561, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30563 = lshr <32 x i16> %30562, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %30564 = shufflevector <32 x i16> %30563, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30565 = add nsw i64 %30277, %30496
  %30566 = getelementptr inbounds i16, i16* %264, i64 %30565
  %30567 = bitcast i16* %30566 to <16 x i16>*
  store <16 x i16> %30564, <16 x i16>* %30567, align 2, !tbaa !401
  %30568 = shufflevector <32 x i16> %30563, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30569 = getelementptr inbounds i16, i16* %30566, i64 16
  %30570 = bitcast i16* %30569 to <16 x i16>*
  store <16 x i16> %30568, <16 x i16>* %30570, align 2, !tbaa !401
  %30571 = add nuw nsw i32 %blur_y.s0.x.x.rebased1821, 1
  %.not2677 = icmp eq i32 %30571, %t1727937
  br i1 %.not2677, label %"end for blur_y.s0.x.x.rebased1820", label %"for blur_y.s0.x.x.rebased1819"

after_bb1830:                                     ; preds = %"end for blur_y.s0.x.x.rebased1820", %"produce blur_x1833"
  br i1 %298, label %"for blur_y.s0.x.x.rebased1845.preheader", label %"end for blur_y.s0.x.x.rebased1846", !prof !386

"for blur_y.s0.x.x.rebased1845.preheader":        ; preds = %after_bb1830
  %30572 = sext i32 %t17781153 to i64
  %30573 = zext i32 %.pre-phi3606 to i64
  %30574 = mul nsw i64 %30573, %314
  %30575 = sub nsw i64 %30574, %294
  %30576 = zext i32 %.pre-phi3602 to i64
  %30577 = mul nsw i64 %30576, %314
  %30578 = sub nsw i64 %30577, %294
  %30579 = zext i32 %.pre-phi3610 to i64
  %30580 = mul nsw i64 %30579, %314
  %30581 = sub nsw i64 %30580, %294
  %30582 = zext i32 %.pre-phi3614 to i64
  %30583 = mul nsw i64 %30582, %314
  %30584 = sub nsw i64 %30583, %294
  %30585 = zext i32 %.pre-phi3618 to i64
  %30586 = mul nsw i64 %30585, %314
  %30587 = sub nsw i64 %30586, %294
  %30588 = zext i32 %.pre-phi3628 to i64
  %30589 = mul nsw i64 %30588, %314
  %30590 = sub nsw i64 %30589, %294
  %30591 = zext i32 %.pre-phi3622 to i64
  %30592 = mul nsw i64 %30591, %314
  %30593 = sub nsw i64 %30592, %294
  %30594 = sext i32 %a367 to i64
  %30595 = add nsw i64 %30594, 17
  %30596 = mul nsw i64 %30595, %315
  %30597 = add nsw i64 %30596, %318
  br label %"for blur_y.s0.x.x.rebased1845"

"produce blur_x1833":                             ; preds = %"end for blur_y.s0.x.x.rebased1820"
  %30598 = getelementptr inbounds i16, i16* %read_input860, i64 %351
  %30599 = getelementptr inbounds i16, i16* %30598, i64 -31
  %30600 = bitcast i16* %30599 to <16 x i16>*
  %30601 = load <16 x i16>, <16 x i16>* %30600, align 2, !tbaa !396
  %30602 = getelementptr inbounds i16, i16* %30598, i64 -15
  %30603 = bitcast i16* %30602 to <16 x i16>*
  %30604 = load <16 x i16>, <16 x i16>* %30603, align 2, !tbaa !396
  %30605 = getelementptr inbounds i16, i16* %30598, i64 -32
  %30606 = bitcast i16* %30605 to <16 x i16>*
  %30607 = load <16 x i16>, <16 x i16>* %30606, align 2, !tbaa !396
  %30608 = getelementptr inbounds i16, i16* %30598, i64 -16
  %30609 = bitcast i16* %30608 to <16 x i16>*
  %30610 = load <16 x i16>, <16 x i16>* %30609, align 2, !tbaa !396
  %30611 = getelementptr inbounds i16, i16* %30598, i64 -30
  %30612 = bitcast i16* %30611 to <16 x i16>*
  %30613 = load <16 x i16>, <16 x i16>* %30612, align 2, !tbaa !396
  %30614 = getelementptr inbounds i16, i16* %30598, i64 -14
  %30615 = bitcast i16* %30614 to <16 x i16>*
  %30616 = load <16 x i16>, <16 x i16>* %30615, align 2, !tbaa !396
  %30617 = getelementptr inbounds i16, i16* %30598, i64 -29
  %30618 = bitcast i16* %30617 to <16 x i16>*
  %30619 = load <16 x i16>, <16 x i16>* %30618, align 2, !tbaa !396
  %30620 = getelementptr inbounds i16, i16* %30598, i64 -13
  %30621 = bitcast i16* %30620 to <16 x i16>*
  %30622 = load <16 x i16>, <16 x i16>* %30621, align 2, !tbaa !396
  %30623 = getelementptr inbounds i16, i16* %30598, i64 -28
  %30624 = bitcast i16* %30623 to <16 x i16>*
  %30625 = load <16 x i16>, <16 x i16>* %30624, align 2, !tbaa !396
  %30626 = getelementptr inbounds i16, i16* %30598, i64 -12
  %30627 = bitcast i16* %30626 to <16 x i16>*
  %30628 = load <16 x i16>, <16 x i16>* %30627, align 2, !tbaa !396
  %30629 = getelementptr inbounds i16, i16* %30598, i64 -26
  %30630 = bitcast i16* %30629 to <16 x i16>*
  %30631 = load <16 x i16>, <16 x i16>* %30630, align 2, !tbaa !396
  %30632 = getelementptr inbounds i16, i16* %30598, i64 -10
  %30633 = bitcast i16* %30632 to <16 x i16>*
  %30634 = load <16 x i16>, <16 x i16>* %30633, align 2, !tbaa !396
  %30635 = getelementptr inbounds i16, i16* %30598, i64 -27
  %30636 = bitcast i16* %30635 to <16 x i16>*
  %30637 = load <16 x i16>, <16 x i16>* %30636, align 2, !tbaa !396
  %30638 = getelementptr inbounds i16, i16* %30598, i64 -11
  %30639 = bitcast i16* %30638 to <16 x i16>*
  %30640 = load <16 x i16>, <16 x i16>* %30639, align 2, !tbaa !396
  %30641 = add <16 x i16> %30607, %30601
  %30642 = add <16 x i16> %30641, %30613
  %30643 = add <16 x i16> %30642, %30619
  %30644 = add <16 x i16> %30643, %30625
  %30645 = add <16 x i16> %30644, %30631
  %30646 = add <16 x i16> %30645, %30637
  %30647 = add <16 x i16> %30610, %30604
  %30648 = add <16 x i16> %30647, %30616
  %30649 = add <16 x i16> %30648, %30622
  %30650 = add <16 x i16> %30649, %30628
  %30651 = add <16 x i16> %30650, %30634
  %30652 = add <16 x i16> %30651, %30640
  %30653 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30646, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30654 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30652, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30655 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30653, <16 x i16> %30646)
  %30656 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30654, <16 x i16> %30652)
  %30657 = shufflevector <16 x i16> %30655, <16 x i16> %30656, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30658 = lshr <32 x i16> %30657, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %30659 = shufflevector <32 x i16> %30658, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30660 = zext i32 %.pre-phi3628 to i64
  %30661 = mul nsw i64 %295, %30660
  %30662 = add nsw i64 %297, %30661
  %30663 = getelementptr inbounds i16, i16* %blur_x917, i64 %30662
  %30664 = getelementptr inbounds i16, i16* %30663, i64 -32
  %30665 = bitcast i16* %30664 to <16 x i16>*
  store <16 x i16> %30659, <16 x i16>* %30665, align 2, !tbaa !399
  %30666 = shufflevector <32 x i16> %30658, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30667 = getelementptr inbounds i16, i16* %30663, i64 -16
  %30668 = bitcast i16* %30667 to <16 x i16>*
  store <16 x i16> %30666, <16 x i16>* %30668, align 2, !tbaa !399
  %30669 = zext i32 %.pre-phi3606 to i64
  %30670 = mul nsw i64 %30669, %314
  %30671 = add nsw i64 %30670, %292
  %30672 = getelementptr inbounds i16, i16* %blur_x917, i64 %30671
  %30673 = getelementptr inbounds i16, i16* %30672, i64 -32
  %30674 = bitcast i16* %30673 to <16 x i16>*
  %30675 = load <16 x i16>, <16 x i16>* %30674, align 2, !tbaa !399
  %30676 = getelementptr inbounds i16, i16* %30672, i64 -16
  %30677 = bitcast i16* %30676 to <16 x i16>*
  %30678 = load <16 x i16>, <16 x i16>* %30677, align 2, !tbaa !399
  %30679 = zext i32 %.pre-phi3602 to i64
  %30680 = mul nsw i64 %30679, %314
  %30681 = add nsw i64 %30680, %292
  %30682 = getelementptr inbounds i16, i16* %blur_x917, i64 %30681
  %30683 = getelementptr inbounds i16, i16* %30682, i64 -32
  %30684 = bitcast i16* %30683 to <16 x i16>*
  %30685 = load <16 x i16>, <16 x i16>* %30684, align 2, !tbaa !399
  %30686 = getelementptr inbounds i16, i16* %30682, i64 -16
  %30687 = bitcast i16* %30686 to <16 x i16>*
  %30688 = load <16 x i16>, <16 x i16>* %30687, align 2, !tbaa !399
  %30689 = zext i32 %.pre-phi3610 to i64
  %30690 = mul nsw i64 %30689, %314
  %30691 = add nsw i64 %30690, %292
  %30692 = getelementptr inbounds i16, i16* %blur_x917, i64 %30691
  %30693 = getelementptr inbounds i16, i16* %30692, i64 -32
  %30694 = bitcast i16* %30693 to <16 x i16>*
  %30695 = load <16 x i16>, <16 x i16>* %30694, align 2, !tbaa !399
  %30696 = getelementptr inbounds i16, i16* %30692, i64 -16
  %30697 = bitcast i16* %30696 to <16 x i16>*
  %30698 = load <16 x i16>, <16 x i16>* %30697, align 2, !tbaa !399
  %30699 = zext i32 %.pre-phi3614 to i64
  %30700 = mul nsw i64 %30699, %314
  %30701 = add nsw i64 %30700, %292
  %30702 = getelementptr inbounds i16, i16* %blur_x917, i64 %30701
  %30703 = getelementptr inbounds i16, i16* %30702, i64 -32
  %30704 = bitcast i16* %30703 to <16 x i16>*
  %30705 = load <16 x i16>, <16 x i16>* %30704, align 2, !tbaa !399
  %30706 = getelementptr inbounds i16, i16* %30702, i64 -16
  %30707 = bitcast i16* %30706 to <16 x i16>*
  %30708 = load <16 x i16>, <16 x i16>* %30707, align 2, !tbaa !399
  %30709 = zext i32 %.pre-phi3618 to i64
  %30710 = mul nsw i64 %30709, %314
  %30711 = add nsw i64 %30710, %292
  %30712 = getelementptr inbounds i16, i16* %blur_x917, i64 %30711
  %30713 = getelementptr inbounds i16, i16* %30712, i64 -32
  %30714 = bitcast i16* %30713 to <16 x i16>*
  %30715 = load <16 x i16>, <16 x i16>* %30714, align 2, !tbaa !399
  %30716 = getelementptr inbounds i16, i16* %30712, i64 -16
  %30717 = bitcast i16* %30716 to <16 x i16>*
  %30718 = load <16 x i16>, <16 x i16>* %30717, align 2, !tbaa !399
  %30719 = mul nsw i64 %30660, %314
  %30720 = add nsw i64 %30719, %292
  %30721 = getelementptr inbounds i16, i16* %blur_x917, i64 %30720
  %30722 = getelementptr inbounds i16, i16* %30721, i64 -32
  %30723 = bitcast i16* %30722 to <16 x i16>*
  %30724 = load <16 x i16>, <16 x i16>* %30723, align 2, !tbaa !399
  %30725 = getelementptr inbounds i16, i16* %30721, i64 -16
  %30726 = bitcast i16* %30725 to <16 x i16>*
  %30727 = load <16 x i16>, <16 x i16>* %30726, align 2, !tbaa !399
  %30728 = zext i32 %.pre-phi3622 to i64
  %30729 = mul nsw i64 %30728, %314
  %30730 = add nsw i64 %30729, %292
  %30731 = getelementptr inbounds i16, i16* %blur_x917, i64 %30730
  %30732 = getelementptr inbounds i16, i16* %30731, i64 -32
  %30733 = bitcast i16* %30732 to <16 x i16>*
  %30734 = load <16 x i16>, <16 x i16>* %30733, align 2, !tbaa !399
  %30735 = getelementptr inbounds i16, i16* %30731, i64 -16
  %30736 = bitcast i16* %30735 to <16 x i16>*
  %30737 = load <16 x i16>, <16 x i16>* %30736, align 2, !tbaa !399
  %30738 = add <16 x i16> %30685, %30675
  %30739 = add <16 x i16> %30738, %30695
  %30740 = add <16 x i16> %30739, %30705
  %30741 = add <16 x i16> %30740, %30715
  %30742 = add <16 x i16> %30741, %30724
  %30743 = add <16 x i16> %30742, %30734
  %30744 = add <16 x i16> %30688, %30678
  %30745 = add <16 x i16> %30744, %30698
  %30746 = add <16 x i16> %30745, %30708
  %30747 = add <16 x i16> %30746, %30718
  %30748 = add <16 x i16> %30747, %30727
  %30749 = add <16 x i16> %30748, %30737
  %30750 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30743, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30751 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30749, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30752 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30750, <16 x i16> %30743)
  %30753 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30751, <16 x i16> %30749)
  %30754 = shufflevector <16 x i16> %30752, <16 x i16> %30753, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30755 = lshr <32 x i16> %30754, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %30756 = shufflevector <32 x i16> %30755, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30757 = sext i32 %a367 to i64
  %30758 = add nsw i64 %30757, 17
  %30759 = mul nsw i64 %30758, %315
  %30760 = add nsw i64 %317, %30759
  %30761 = getelementptr inbounds i16, i16* %264, i64 %30760
  %30762 = getelementptr inbounds i16, i16* %30761, i64 -32
  %30763 = bitcast i16* %30762 to <16 x i16>*
  store <16 x i16> %30756, <16 x i16>* %30763, align 2, !tbaa !401
  %30764 = shufflevector <32 x i16> %30755, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30765 = getelementptr inbounds i16, i16* %30761, i64 -16
  %30766 = bitcast i16* %30765 to <16 x i16>*
  store <16 x i16> %30764, <16 x i16>* %30766, align 2, !tbaa !401
  br label %after_bb1830

"for blur_y.s0.x.x.rebased1845":                  ; preds = %"for blur_y.s0.x.x.rebased1845.preheader", %"consume blur_x1854"
  %indvars.iv3456 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1845.preheader" ], [ %indvars.iv.next3457, %"consume blur_x1854" ]
  %30767 = add nsw i64 %indvars.iv3456, %299
  %30768 = icmp slt i64 %30767, 1
  %30769 = trunc i64 %30767 to i32
  %30770 = shl nsw i32 %30769, 5
  %30771 = icmp sgt i32 %202, %30770
  %30772 = or i1 %30768, %30771
  br i1 %30772, label %"produce blur_x1852", label %"for blur_y.s0.x.x.rebased1845.consume blur_x1854_crit_edge"

"for blur_y.s0.x.x.rebased1845.consume blur_x1854_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1845"
  %.pre3661 = shl nsw i64 %30767, 5
  br label %"consume blur_x1854"

"end for blur_y.s0.x.x.rebased1846":              ; preds = %"consume blur_x1854", %after_bb1830
  br i1 %300, label %"for blur_y.s0.x.x.rebased1862.preheader", label %"end for blur_y.s0.x.x.rebased1863", !prof !386

"for blur_y.s0.x.x.rebased1862.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1846"
  %30773 = sext i32 %t17781153 to i64
  %30774 = zext i32 %.pre-phi3606 to i64
  %30775 = mul nsw i64 %30774, %314
  %30776 = sub nsw i64 %30775, %294
  %30777 = zext i32 %.pre-phi3602 to i64
  %30778 = mul nsw i64 %30777, %314
  %30779 = sub nsw i64 %30778, %294
  %30780 = zext i32 %.pre-phi3610 to i64
  %30781 = mul nsw i64 %30780, %314
  %30782 = sub nsw i64 %30781, %294
  %30783 = zext i32 %.pre-phi3614 to i64
  %30784 = mul nsw i64 %30783, %314
  %30785 = sub nsw i64 %30784, %294
  %30786 = zext i32 %.pre-phi3618 to i64
  %30787 = mul nsw i64 %30786, %314
  %30788 = sub nsw i64 %30787, %294
  %30789 = zext i32 %.pre-phi3628 to i64
  %30790 = mul nsw i64 %30789, %314
  %30791 = sub nsw i64 %30790, %294
  %30792 = zext i32 %.pre-phi3622 to i64
  %30793 = mul nsw i64 %30792, %314
  %30794 = sub nsw i64 %30793, %294
  %30795 = sext i32 %a367 to i64
  %30796 = add nsw i64 %30795, 17
  %30797 = mul nsw i64 %30796, %315
  %30798 = add nsw i64 %30797, %318
  br label %"for blur_y.s0.x.x.rebased1862"

"produce blur_x1852":                             ; preds = %"for blur_y.s0.x.x.rebased1845"
  %t10241853 = add nsw i32 %30770, %t20331842
  %30799 = sext i32 %t10241853 to i64
  %30800 = getelementptr inbounds i16, i16* %read_input860, i64 %30799
  %30801 = getelementptr inbounds i16, i16* %30800, i64 1
  %30802 = bitcast i16* %30801 to <16 x i16>*
  %30803 = load <16 x i16>, <16 x i16>* %30802, align 2, !tbaa !396
  %30804 = getelementptr inbounds i16, i16* %30800, i64 17
  %30805 = bitcast i16* %30804 to <16 x i16>*
  %30806 = load <16 x i16>, <16 x i16>* %30805, align 2, !tbaa !396
  %30807 = bitcast i16* %30800 to <16 x i16>*
  %30808 = load <16 x i16>, <16 x i16>* %30807, align 2, !tbaa !396
  %30809 = getelementptr inbounds i16, i16* %30800, i64 16
  %30810 = bitcast i16* %30809 to <16 x i16>*
  %30811 = load <16 x i16>, <16 x i16>* %30810, align 2, !tbaa !396
  %30812 = getelementptr inbounds i16, i16* %30800, i64 2
  %30813 = bitcast i16* %30812 to <16 x i16>*
  %30814 = load <16 x i16>, <16 x i16>* %30813, align 2, !tbaa !396
  %30815 = getelementptr inbounds i16, i16* %30800, i64 18
  %30816 = bitcast i16* %30815 to <16 x i16>*
  %30817 = load <16 x i16>, <16 x i16>* %30816, align 2, !tbaa !396
  %30818 = getelementptr inbounds i16, i16* %30800, i64 3
  %30819 = bitcast i16* %30818 to <16 x i16>*
  %30820 = load <16 x i16>, <16 x i16>* %30819, align 2, !tbaa !396
  %30821 = getelementptr inbounds i16, i16* %30800, i64 19
  %30822 = bitcast i16* %30821 to <16 x i16>*
  %30823 = load <16 x i16>, <16 x i16>* %30822, align 2, !tbaa !396
  %30824 = getelementptr inbounds i16, i16* %30800, i64 4
  %30825 = bitcast i16* %30824 to <16 x i16>*
  %30826 = load <16 x i16>, <16 x i16>* %30825, align 2, !tbaa !396
  %30827 = getelementptr inbounds i16, i16* %30800, i64 20
  %30828 = bitcast i16* %30827 to <16 x i16>*
  %30829 = load <16 x i16>, <16 x i16>* %30828, align 2, !tbaa !396
  %30830 = getelementptr inbounds i16, i16* %30800, i64 6
  %30831 = bitcast i16* %30830 to <16 x i16>*
  %30832 = load <16 x i16>, <16 x i16>* %30831, align 2, !tbaa !396
  %30833 = getelementptr inbounds i16, i16* %30800, i64 22
  %30834 = bitcast i16* %30833 to <16 x i16>*
  %30835 = load <16 x i16>, <16 x i16>* %30834, align 2, !tbaa !396
  %30836 = getelementptr inbounds i16, i16* %30800, i64 5
  %30837 = bitcast i16* %30836 to <16 x i16>*
  %30838 = load <16 x i16>, <16 x i16>* %30837, align 2, !tbaa !396
  %30839 = getelementptr inbounds i16, i16* %30800, i64 21
  %30840 = bitcast i16* %30839 to <16 x i16>*
  %30841 = load <16 x i16>, <16 x i16>* %30840, align 2, !tbaa !396
  %30842 = add <16 x i16> %30808, %30803
  %30843 = add <16 x i16> %30842, %30814
  %30844 = add <16 x i16> %30843, %30820
  %30845 = add <16 x i16> %30844, %30826
  %30846 = add <16 x i16> %30845, %30832
  %30847 = add <16 x i16> %30846, %30838
  %30848 = add <16 x i16> %30811, %30806
  %30849 = add <16 x i16> %30848, %30817
  %30850 = add <16 x i16> %30849, %30823
  %30851 = add <16 x i16> %30850, %30829
  %30852 = add <16 x i16> %30851, %30835
  %30853 = add <16 x i16> %30852, %30841
  %30854 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30847, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30855 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30853, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30856 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30854, <16 x i16> %30847)
  %30857 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30855, <16 x i16> %30853)
  %30858 = shufflevector <16 x i16> %30856, <16 x i16> %30857, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30859 = lshr <32 x i16> %30858, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %30860 = shufflevector <32 x i16> %30859, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30861 = shl nsw i64 %30767, 5
  %30862 = add nsw i64 %30861, %30572
  %30863 = getelementptr inbounds i16, i16* %blur_x917, i64 %30862
  %30864 = bitcast i16* %30863 to <16 x i16>*
  store <16 x i16> %30860, <16 x i16>* %30864, align 2, !tbaa !399
  %30865 = shufflevector <32 x i16> %30859, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30866 = getelementptr inbounds i16, i16* %30863, i64 16
  %30867 = bitcast i16* %30866 to <16 x i16>*
  store <16 x i16> %30865, <16 x i16>* %30867, align 2, !tbaa !399
  br label %"consume blur_x1854"

"consume blur_x1854":                             ; preds = %"for blur_y.s0.x.x.rebased1845.consume blur_x1854_crit_edge", %"produce blur_x1852"
  %.pre-phi3662 = phi i64 [ %.pre3661, %"for blur_y.s0.x.x.rebased1845.consume blur_x1854_crit_edge" ], [ %30861, %"produce blur_x1852" ]
  %30868 = add nsw i64 %30575, %.pre-phi3662
  %30869 = getelementptr inbounds i16, i16* %blur_x917, i64 %30868
  %30870 = bitcast i16* %30869 to <16 x i16>*
  %30871 = load <16 x i16>, <16 x i16>* %30870, align 2, !tbaa !399
  %30872 = getelementptr inbounds i16, i16* %30869, i64 16
  %30873 = bitcast i16* %30872 to <16 x i16>*
  %30874 = load <16 x i16>, <16 x i16>* %30873, align 2, !tbaa !399
  %30875 = add nsw i64 %30578, %.pre-phi3662
  %30876 = getelementptr inbounds i16, i16* %blur_x917, i64 %30875
  %30877 = bitcast i16* %30876 to <16 x i16>*
  %30878 = load <16 x i16>, <16 x i16>* %30877, align 2, !tbaa !399
  %30879 = getelementptr inbounds i16, i16* %30876, i64 16
  %30880 = bitcast i16* %30879 to <16 x i16>*
  %30881 = load <16 x i16>, <16 x i16>* %30880, align 2, !tbaa !399
  %30882 = add nsw i64 %30581, %.pre-phi3662
  %30883 = getelementptr inbounds i16, i16* %blur_x917, i64 %30882
  %30884 = bitcast i16* %30883 to <16 x i16>*
  %30885 = load <16 x i16>, <16 x i16>* %30884, align 2, !tbaa !399
  %30886 = getelementptr inbounds i16, i16* %30883, i64 16
  %30887 = bitcast i16* %30886 to <16 x i16>*
  %30888 = load <16 x i16>, <16 x i16>* %30887, align 2, !tbaa !399
  %30889 = add nsw i64 %30584, %.pre-phi3662
  %30890 = getelementptr inbounds i16, i16* %blur_x917, i64 %30889
  %30891 = bitcast i16* %30890 to <16 x i16>*
  %30892 = load <16 x i16>, <16 x i16>* %30891, align 2, !tbaa !399
  %30893 = getelementptr inbounds i16, i16* %30890, i64 16
  %30894 = bitcast i16* %30893 to <16 x i16>*
  %30895 = load <16 x i16>, <16 x i16>* %30894, align 2, !tbaa !399
  %30896 = add nsw i64 %30587, %.pre-phi3662
  %30897 = getelementptr inbounds i16, i16* %blur_x917, i64 %30896
  %30898 = bitcast i16* %30897 to <16 x i16>*
  %30899 = load <16 x i16>, <16 x i16>* %30898, align 2, !tbaa !399
  %30900 = getelementptr inbounds i16, i16* %30897, i64 16
  %30901 = bitcast i16* %30900 to <16 x i16>*
  %30902 = load <16 x i16>, <16 x i16>* %30901, align 2, !tbaa !399
  %30903 = add nsw i64 %30590, %.pre-phi3662
  %30904 = getelementptr inbounds i16, i16* %blur_x917, i64 %30903
  %30905 = bitcast i16* %30904 to <16 x i16>*
  %30906 = load <16 x i16>, <16 x i16>* %30905, align 2, !tbaa !399
  %30907 = getelementptr inbounds i16, i16* %30904, i64 16
  %30908 = bitcast i16* %30907 to <16 x i16>*
  %30909 = load <16 x i16>, <16 x i16>* %30908, align 2, !tbaa !399
  %30910 = add nsw i64 %30593, %.pre-phi3662
  %30911 = getelementptr inbounds i16, i16* %blur_x917, i64 %30910
  %30912 = bitcast i16* %30911 to <16 x i16>*
  %30913 = load <16 x i16>, <16 x i16>* %30912, align 2, !tbaa !399
  %30914 = getelementptr inbounds i16, i16* %30911, i64 16
  %30915 = bitcast i16* %30914 to <16 x i16>*
  %30916 = load <16 x i16>, <16 x i16>* %30915, align 2, !tbaa !399
  %30917 = add <16 x i16> %30878, %30871
  %30918 = add <16 x i16> %30917, %30885
  %30919 = add <16 x i16> %30918, %30892
  %30920 = add <16 x i16> %30919, %30899
  %30921 = add <16 x i16> %30920, %30906
  %30922 = add <16 x i16> %30921, %30913
  %30923 = add <16 x i16> %30881, %30874
  %30924 = add <16 x i16> %30923, %30888
  %30925 = add <16 x i16> %30924, %30895
  %30926 = add <16 x i16> %30925, %30902
  %30927 = add <16 x i16> %30926, %30909
  %30928 = add <16 x i16> %30927, %30916
  %30929 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30922, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30930 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30928, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %30931 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30929, <16 x i16> %30922)
  %30932 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %30930, <16 x i16> %30928)
  %30933 = shufflevector <16 x i16> %30931, <16 x i16> %30932, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30934 = lshr <32 x i16> %30933, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %30935 = shufflevector <32 x i16> %30934, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %30936 = add nsw i64 %30597, %.pre-phi3662
  %30937 = getelementptr inbounds i16, i16* %264, i64 %30936
  %30938 = bitcast i16* %30937 to <16 x i16>*
  store <16 x i16> %30935, <16 x i16>* %30938, align 2, !tbaa !401
  %30939 = shufflevector <32 x i16> %30934, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %30940 = getelementptr inbounds i16, i16* %30937, i64 16
  %30941 = bitcast i16* %30940 to <16 x i16>*
  store <16 x i16> %30939, <16 x i16>* %30941, align 2, !tbaa !401
  %indvars.iv.next3457 = add nuw nsw i64 %indvars.iv3456, 1
  %.not2676 = icmp eq i64 %indvars.iv.next3457, %386
  br i1 %.not2676, label %"end for blur_y.s0.x.x.rebased1846", label %"for blur_y.s0.x.x.rebased1845"

"for blur_y.s0.x.x.rebased1862":                  ; preds = %"for blur_y.s0.x.x.rebased1862.preheader", %"consume blur_x1872"
  %blur_y.s0.x.x.rebased1864 = phi i32 [ %31092, %"consume blur_x1872" ], [ 0, %"for blur_y.s0.x.x.rebased1862.preheader" ]
  %30942 = add nsw i32 %blur_y.s0.x.x.rebased1864, %t1670852
  %a579 = shl nsw i32 %30942, 5
  %30943 = icmp sgt i32 %a355, %a579
  %b585 = select i1 %30943, i32 %a579, i32 %a355
  %30944 = icmp slt i32 %30942, 1
  %30945 = icmp sgt i32 %202, %a579
  %30946 = or i1 %30944, %30945
  br i1 %30946, label %"produce blur_x1869", label %"consume blur_x1872"

"end for blur_y.s0.x.x.rebased1863":              ; preds = %"consume blur_x1872", %"end for blur_y.s0.x.x.rebased1846"
  br i1 %232, label %"produce blur_x1876", label %after_bb1873

"produce blur_x1869":                             ; preds = %"for blur_y.s0.x.x.rebased1862"
  %30947 = icmp slt i32 %b585, %202
  %blur_x.s0.x.v1.base.s1870 = select i1 %30947, i32 %b585, i32 %202
  %t10291871 = add nsw i32 %blur_x.s0.x.v1.base.s1870, %t20331842
  %30948 = sext i32 %t10291871 to i64
  %30949 = getelementptr inbounds i16, i16* %read_input860, i64 %30948
  %30950 = getelementptr inbounds i16, i16* %30949, i64 1
  %30951 = bitcast i16* %30950 to <16 x i16>*
  %30952 = load <16 x i16>, <16 x i16>* %30951, align 2, !tbaa !396
  %30953 = getelementptr inbounds i16, i16* %30949, i64 17
  %30954 = bitcast i16* %30953 to <16 x i16>*
  %30955 = load <16 x i16>, <16 x i16>* %30954, align 2, !tbaa !396
  %30956 = bitcast i16* %30949 to <16 x i16>*
  %30957 = load <16 x i16>, <16 x i16>* %30956, align 2, !tbaa !396
  %30958 = getelementptr inbounds i16, i16* %30949, i64 16
  %30959 = bitcast i16* %30958 to <16 x i16>*
  %30960 = load <16 x i16>, <16 x i16>* %30959, align 2, !tbaa !396
  %30961 = getelementptr inbounds i16, i16* %30949, i64 2
  %30962 = bitcast i16* %30961 to <16 x i16>*
  %30963 = load <16 x i16>, <16 x i16>* %30962, align 2, !tbaa !396
  %30964 = getelementptr inbounds i16, i16* %30949, i64 18
  %30965 = bitcast i16* %30964 to <16 x i16>*
  %30966 = load <16 x i16>, <16 x i16>* %30965, align 2, !tbaa !396
  %30967 = getelementptr inbounds i16, i16* %30949, i64 3
  %30968 = bitcast i16* %30967 to <16 x i16>*
  %30969 = load <16 x i16>, <16 x i16>* %30968, align 2, !tbaa !396
  %30970 = getelementptr inbounds i16, i16* %30949, i64 19
  %30971 = bitcast i16* %30970 to <16 x i16>*
  %30972 = load <16 x i16>, <16 x i16>* %30971, align 2, !tbaa !396
  %30973 = getelementptr inbounds i16, i16* %30949, i64 4
  %30974 = bitcast i16* %30973 to <16 x i16>*
  %30975 = load <16 x i16>, <16 x i16>* %30974, align 2, !tbaa !396
  %30976 = getelementptr inbounds i16, i16* %30949, i64 20
  %30977 = bitcast i16* %30976 to <16 x i16>*
  %30978 = load <16 x i16>, <16 x i16>* %30977, align 2, !tbaa !396
  %30979 = getelementptr inbounds i16, i16* %30949, i64 6
  %30980 = bitcast i16* %30979 to <16 x i16>*
  %30981 = load <16 x i16>, <16 x i16>* %30980, align 2, !tbaa !396
  %30982 = getelementptr inbounds i16, i16* %30949, i64 22
  %30983 = bitcast i16* %30982 to <16 x i16>*
  %30984 = load <16 x i16>, <16 x i16>* %30983, align 2, !tbaa !396
  %30985 = getelementptr inbounds i16, i16* %30949, i64 5
  %30986 = bitcast i16* %30985 to <16 x i16>*
  %30987 = load <16 x i16>, <16 x i16>* %30986, align 2, !tbaa !396
  %30988 = getelementptr inbounds i16, i16* %30949, i64 21
  %30989 = bitcast i16* %30988 to <16 x i16>*
  %30990 = load <16 x i16>, <16 x i16>* %30989, align 2, !tbaa !396
  %30991 = add <16 x i16> %30957, %30952
  %30992 = add <16 x i16> %30991, %30963
  %30993 = add <16 x i16> %30992, %30969
  %30994 = add <16 x i16> %30993, %30975
  %30995 = add <16 x i16> %30994, %30981
  %30996 = add <16 x i16> %30995, %30987
  %30997 = add <16 x i16> %30960, %30955
  %30998 = add <16 x i16> %30997, %30966
  %30999 = add <16 x i16> %30998, %30972
  %31000 = add <16 x i16> %30999, %30978
  %31001 = add <16 x i16> %31000, %30984
  %31002 = add <16 x i16> %31001, %30990
  %31003 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %30996, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31004 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31002, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31005 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31003, <16 x i16> %30996)
  %31006 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31004, <16 x i16> %31002)
  %31007 = shufflevector <16 x i16> %31005, <16 x i16> %31006, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31008 = lshr <32 x i16> %31007, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %31009 = shufflevector <32 x i16> %31008, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31010 = sext i32 %blur_x.s0.x.v1.base.s1870 to i64
  %31011 = add nsw i64 %31010, %30773
  %31012 = getelementptr inbounds i16, i16* %blur_x917, i64 %31011
  %31013 = bitcast i16* %31012 to <16 x i16>*
  store <16 x i16> %31009, <16 x i16>* %31013, align 2, !tbaa !399
  %31014 = shufflevector <32 x i16> %31008, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31015 = getelementptr inbounds i16, i16* %31012, i64 16
  %31016 = bitcast i16* %31015 to <16 x i16>*
  store <16 x i16> %31014, <16 x i16>* %31016, align 2, !tbaa !399
  br label %"consume blur_x1872"

"consume blur_x1872":                             ; preds = %"for blur_y.s0.x.x.rebased1862", %"produce blur_x1869"
  %31017 = sext i32 %b585 to i64
  %31018 = add nsw i64 %30776, %31017
  %31019 = getelementptr inbounds i16, i16* %blur_x917, i64 %31018
  %31020 = bitcast i16* %31019 to <16 x i16>*
  %31021 = load <16 x i16>, <16 x i16>* %31020, align 2, !tbaa !399
  %31022 = getelementptr inbounds i16, i16* %31019, i64 16
  %31023 = bitcast i16* %31022 to <16 x i16>*
  %31024 = load <16 x i16>, <16 x i16>* %31023, align 2, !tbaa !399
  %31025 = add nsw i64 %30779, %31017
  %31026 = getelementptr inbounds i16, i16* %blur_x917, i64 %31025
  %31027 = bitcast i16* %31026 to <16 x i16>*
  %31028 = load <16 x i16>, <16 x i16>* %31027, align 2, !tbaa !399
  %31029 = getelementptr inbounds i16, i16* %31026, i64 16
  %31030 = bitcast i16* %31029 to <16 x i16>*
  %31031 = load <16 x i16>, <16 x i16>* %31030, align 2, !tbaa !399
  %31032 = add nsw i64 %30782, %31017
  %31033 = getelementptr inbounds i16, i16* %blur_x917, i64 %31032
  %31034 = bitcast i16* %31033 to <16 x i16>*
  %31035 = load <16 x i16>, <16 x i16>* %31034, align 2, !tbaa !399
  %31036 = getelementptr inbounds i16, i16* %31033, i64 16
  %31037 = bitcast i16* %31036 to <16 x i16>*
  %31038 = load <16 x i16>, <16 x i16>* %31037, align 2, !tbaa !399
  %31039 = add nsw i64 %30785, %31017
  %31040 = getelementptr inbounds i16, i16* %blur_x917, i64 %31039
  %31041 = bitcast i16* %31040 to <16 x i16>*
  %31042 = load <16 x i16>, <16 x i16>* %31041, align 2, !tbaa !399
  %31043 = getelementptr inbounds i16, i16* %31040, i64 16
  %31044 = bitcast i16* %31043 to <16 x i16>*
  %31045 = load <16 x i16>, <16 x i16>* %31044, align 2, !tbaa !399
  %31046 = add nsw i64 %30788, %31017
  %31047 = getelementptr inbounds i16, i16* %blur_x917, i64 %31046
  %31048 = bitcast i16* %31047 to <16 x i16>*
  %31049 = load <16 x i16>, <16 x i16>* %31048, align 2, !tbaa !399
  %31050 = getelementptr inbounds i16, i16* %31047, i64 16
  %31051 = bitcast i16* %31050 to <16 x i16>*
  %31052 = load <16 x i16>, <16 x i16>* %31051, align 2, !tbaa !399
  %31053 = add nsw i64 %30791, %31017
  %31054 = getelementptr inbounds i16, i16* %blur_x917, i64 %31053
  %31055 = bitcast i16* %31054 to <16 x i16>*
  %31056 = load <16 x i16>, <16 x i16>* %31055, align 2, !tbaa !399
  %31057 = getelementptr inbounds i16, i16* %31054, i64 16
  %31058 = bitcast i16* %31057 to <16 x i16>*
  %31059 = load <16 x i16>, <16 x i16>* %31058, align 2, !tbaa !399
  %31060 = add nsw i64 %30794, %31017
  %31061 = getelementptr inbounds i16, i16* %blur_x917, i64 %31060
  %31062 = bitcast i16* %31061 to <16 x i16>*
  %31063 = load <16 x i16>, <16 x i16>* %31062, align 2, !tbaa !399
  %31064 = getelementptr inbounds i16, i16* %31061, i64 16
  %31065 = bitcast i16* %31064 to <16 x i16>*
  %31066 = load <16 x i16>, <16 x i16>* %31065, align 2, !tbaa !399
  %31067 = add <16 x i16> %31028, %31021
  %31068 = add <16 x i16> %31067, %31035
  %31069 = add <16 x i16> %31068, %31042
  %31070 = add <16 x i16> %31069, %31049
  %31071 = add <16 x i16> %31070, %31056
  %31072 = add <16 x i16> %31071, %31063
  %31073 = add <16 x i16> %31031, %31024
  %31074 = add <16 x i16> %31073, %31038
  %31075 = add <16 x i16> %31074, %31045
  %31076 = add <16 x i16> %31075, %31052
  %31077 = add <16 x i16> %31076, %31059
  %31078 = add <16 x i16> %31077, %31066
  %31079 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31072, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31080 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31078, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31081 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31079, <16 x i16> %31072)
  %31082 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31080, <16 x i16> %31078)
  %31083 = shufflevector <16 x i16> %31081, <16 x i16> %31082, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31084 = lshr <32 x i16> %31083, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %31085 = shufflevector <32 x i16> %31084, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31086 = add nsw i64 %30798, %31017
  %31087 = getelementptr inbounds i16, i16* %264, i64 %31086
  %31088 = bitcast i16* %31087 to <16 x i16>*
  store <16 x i16> %31085, <16 x i16>* %31088, align 2, !tbaa !401
  %31089 = shufflevector <32 x i16> %31084, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31090 = getelementptr inbounds i16, i16* %31087, i64 16
  %31091 = bitcast i16* %31090 to <16 x i16>*
  store <16 x i16> %31089, <16 x i16>* %31091, align 2, !tbaa !401
  %31092 = add nuw nsw i32 %blur_y.s0.x.x.rebased1864, 1
  %.not2675 = icmp eq i32 %31092, %t1727937
  br i1 %.not2675, label %"end for blur_y.s0.x.x.rebased1863", label %"for blur_y.s0.x.x.rebased1862"

after_bb1873:                                     ; preds = %"end for blur_y.s0.x.x.rebased1863", %"produce blur_x1876"
  br i1 %298, label %"for blur_y.s0.x.x.rebased1888.preheader", label %"end for blur_y.s0.x.x.rebased1889", !prof !386

"for blur_y.s0.x.x.rebased1888.preheader":        ; preds = %after_bb1873
  %31093 = sext i32 %t1726924 to i64
  %31094 = zext i32 %.pre-phi3610 to i64
  %31095 = mul nsw i64 %31094, %314
  %31096 = sub nsw i64 %31095, %294
  %31097 = zext i32 %.pre-phi3606 to i64
  %31098 = mul nsw i64 %31097, %314
  %31099 = sub nsw i64 %31098, %294
  %31100 = zext i32 %.pre-phi3614 to i64
  %31101 = mul nsw i64 %31100, %314
  %31102 = sub nsw i64 %31101, %294
  %31103 = zext i32 %.pre-phi3618 to i64
  %31104 = mul nsw i64 %31103, %314
  %31105 = sub nsw i64 %31104, %294
  %31106 = zext i32 %.pre-phi3622 to i64
  %31107 = mul nsw i64 %31106, %314
  %31108 = sub nsw i64 %31107, %294
  %31109 = zext i32 %.pre-phi3598 to i64
  %31110 = mul nsw i64 %31109, %314
  %31111 = sub nsw i64 %31110, %294
  %31112 = zext i32 %.pre-phi3628 to i64
  %31113 = mul nsw i64 %31112, %314
  %31114 = sub nsw i64 %31113, %294
  %31115 = sext i32 %a367 to i64
  %31116 = add nsw i64 %31115, 18
  %31117 = mul nsw i64 %31116, %315
  %31118 = add nsw i64 %31117, %318
  br label %"for blur_y.s0.x.x.rebased1888"

"produce blur_x1876":                             ; preds = %"end for blur_y.s0.x.x.rebased1863"
  %31119 = getelementptr inbounds i16, i16* %read_input860, i64 %353
  %31120 = getelementptr inbounds i16, i16* %31119, i64 -31
  %31121 = bitcast i16* %31120 to <16 x i16>*
  %31122 = load <16 x i16>, <16 x i16>* %31121, align 2, !tbaa !396
  %31123 = getelementptr inbounds i16, i16* %31119, i64 -15
  %31124 = bitcast i16* %31123 to <16 x i16>*
  %31125 = load <16 x i16>, <16 x i16>* %31124, align 2, !tbaa !396
  %31126 = getelementptr inbounds i16, i16* %31119, i64 -32
  %31127 = bitcast i16* %31126 to <16 x i16>*
  %31128 = load <16 x i16>, <16 x i16>* %31127, align 2, !tbaa !396
  %31129 = getelementptr inbounds i16, i16* %31119, i64 -16
  %31130 = bitcast i16* %31129 to <16 x i16>*
  %31131 = load <16 x i16>, <16 x i16>* %31130, align 2, !tbaa !396
  %31132 = getelementptr inbounds i16, i16* %31119, i64 -30
  %31133 = bitcast i16* %31132 to <16 x i16>*
  %31134 = load <16 x i16>, <16 x i16>* %31133, align 2, !tbaa !396
  %31135 = getelementptr inbounds i16, i16* %31119, i64 -14
  %31136 = bitcast i16* %31135 to <16 x i16>*
  %31137 = load <16 x i16>, <16 x i16>* %31136, align 2, !tbaa !396
  %31138 = getelementptr inbounds i16, i16* %31119, i64 -29
  %31139 = bitcast i16* %31138 to <16 x i16>*
  %31140 = load <16 x i16>, <16 x i16>* %31139, align 2, !tbaa !396
  %31141 = getelementptr inbounds i16, i16* %31119, i64 -13
  %31142 = bitcast i16* %31141 to <16 x i16>*
  %31143 = load <16 x i16>, <16 x i16>* %31142, align 2, !tbaa !396
  %31144 = getelementptr inbounds i16, i16* %31119, i64 -28
  %31145 = bitcast i16* %31144 to <16 x i16>*
  %31146 = load <16 x i16>, <16 x i16>* %31145, align 2, !tbaa !396
  %31147 = getelementptr inbounds i16, i16* %31119, i64 -12
  %31148 = bitcast i16* %31147 to <16 x i16>*
  %31149 = load <16 x i16>, <16 x i16>* %31148, align 2, !tbaa !396
  %31150 = getelementptr inbounds i16, i16* %31119, i64 -26
  %31151 = bitcast i16* %31150 to <16 x i16>*
  %31152 = load <16 x i16>, <16 x i16>* %31151, align 2, !tbaa !396
  %31153 = getelementptr inbounds i16, i16* %31119, i64 -10
  %31154 = bitcast i16* %31153 to <16 x i16>*
  %31155 = load <16 x i16>, <16 x i16>* %31154, align 2, !tbaa !396
  %31156 = getelementptr inbounds i16, i16* %31119, i64 -27
  %31157 = bitcast i16* %31156 to <16 x i16>*
  %31158 = load <16 x i16>, <16 x i16>* %31157, align 2, !tbaa !396
  %31159 = getelementptr inbounds i16, i16* %31119, i64 -11
  %31160 = bitcast i16* %31159 to <16 x i16>*
  %31161 = load <16 x i16>, <16 x i16>* %31160, align 2, !tbaa !396
  %31162 = add <16 x i16> %31128, %31122
  %31163 = add <16 x i16> %31162, %31134
  %31164 = add <16 x i16> %31163, %31140
  %31165 = add <16 x i16> %31164, %31146
  %31166 = add <16 x i16> %31165, %31152
  %31167 = add <16 x i16> %31166, %31158
  %31168 = add <16 x i16> %31131, %31125
  %31169 = add <16 x i16> %31168, %31137
  %31170 = add <16 x i16> %31169, %31143
  %31171 = add <16 x i16> %31170, %31149
  %31172 = add <16 x i16> %31171, %31155
  %31173 = add <16 x i16> %31172, %31161
  %31174 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31167, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31175 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31173, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31176 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31174, <16 x i16> %31167)
  %31177 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31175, <16 x i16> %31173)
  %31178 = shufflevector <16 x i16> %31176, <16 x i16> %31177, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31179 = lshr <32 x i16> %31178, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %31180 = shufflevector <32 x i16> %31179, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31181 = zext i32 %.pre-phi3598 to i64
  %31182 = mul nsw i64 %295, %31181
  %31183 = add nsw i64 %297, %31182
  %31184 = getelementptr inbounds i16, i16* %blur_x917, i64 %31183
  %31185 = getelementptr inbounds i16, i16* %31184, i64 -32
  %31186 = bitcast i16* %31185 to <16 x i16>*
  store <16 x i16> %31180, <16 x i16>* %31186, align 2, !tbaa !399
  %31187 = shufflevector <32 x i16> %31179, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31188 = getelementptr inbounds i16, i16* %31184, i64 -16
  %31189 = bitcast i16* %31188 to <16 x i16>*
  store <16 x i16> %31187, <16 x i16>* %31189, align 2, !tbaa !399
  %31190 = zext i32 %.pre-phi3610 to i64
  %31191 = mul nsw i64 %31190, %314
  %31192 = add nsw i64 %31191, %292
  %31193 = getelementptr inbounds i16, i16* %blur_x917, i64 %31192
  %31194 = getelementptr inbounds i16, i16* %31193, i64 -32
  %31195 = bitcast i16* %31194 to <16 x i16>*
  %31196 = load <16 x i16>, <16 x i16>* %31195, align 2, !tbaa !399
  %31197 = getelementptr inbounds i16, i16* %31193, i64 -16
  %31198 = bitcast i16* %31197 to <16 x i16>*
  %31199 = load <16 x i16>, <16 x i16>* %31198, align 2, !tbaa !399
  %31200 = zext i32 %.pre-phi3606 to i64
  %31201 = mul nsw i64 %31200, %314
  %31202 = add nsw i64 %31201, %292
  %31203 = getelementptr inbounds i16, i16* %blur_x917, i64 %31202
  %31204 = getelementptr inbounds i16, i16* %31203, i64 -32
  %31205 = bitcast i16* %31204 to <16 x i16>*
  %31206 = load <16 x i16>, <16 x i16>* %31205, align 2, !tbaa !399
  %31207 = getelementptr inbounds i16, i16* %31203, i64 -16
  %31208 = bitcast i16* %31207 to <16 x i16>*
  %31209 = load <16 x i16>, <16 x i16>* %31208, align 2, !tbaa !399
  %31210 = zext i32 %.pre-phi3614 to i64
  %31211 = mul nsw i64 %31210, %314
  %31212 = add nsw i64 %31211, %292
  %31213 = getelementptr inbounds i16, i16* %blur_x917, i64 %31212
  %31214 = getelementptr inbounds i16, i16* %31213, i64 -32
  %31215 = bitcast i16* %31214 to <16 x i16>*
  %31216 = load <16 x i16>, <16 x i16>* %31215, align 2, !tbaa !399
  %31217 = getelementptr inbounds i16, i16* %31213, i64 -16
  %31218 = bitcast i16* %31217 to <16 x i16>*
  %31219 = load <16 x i16>, <16 x i16>* %31218, align 2, !tbaa !399
  %31220 = zext i32 %.pre-phi3618 to i64
  %31221 = mul nsw i64 %31220, %314
  %31222 = add nsw i64 %31221, %292
  %31223 = getelementptr inbounds i16, i16* %blur_x917, i64 %31222
  %31224 = getelementptr inbounds i16, i16* %31223, i64 -32
  %31225 = bitcast i16* %31224 to <16 x i16>*
  %31226 = load <16 x i16>, <16 x i16>* %31225, align 2, !tbaa !399
  %31227 = getelementptr inbounds i16, i16* %31223, i64 -16
  %31228 = bitcast i16* %31227 to <16 x i16>*
  %31229 = load <16 x i16>, <16 x i16>* %31228, align 2, !tbaa !399
  %31230 = zext i32 %.pre-phi3622 to i64
  %31231 = mul nsw i64 %31230, %314
  %31232 = add nsw i64 %31231, %292
  %31233 = getelementptr inbounds i16, i16* %blur_x917, i64 %31232
  %31234 = getelementptr inbounds i16, i16* %31233, i64 -32
  %31235 = bitcast i16* %31234 to <16 x i16>*
  %31236 = load <16 x i16>, <16 x i16>* %31235, align 2, !tbaa !399
  %31237 = getelementptr inbounds i16, i16* %31233, i64 -16
  %31238 = bitcast i16* %31237 to <16 x i16>*
  %31239 = load <16 x i16>, <16 x i16>* %31238, align 2, !tbaa !399
  %31240 = mul nsw i64 %31181, %314
  %31241 = add nsw i64 %31240, %292
  %31242 = getelementptr inbounds i16, i16* %blur_x917, i64 %31241
  %31243 = getelementptr inbounds i16, i16* %31242, i64 -32
  %31244 = bitcast i16* %31243 to <16 x i16>*
  %31245 = load <16 x i16>, <16 x i16>* %31244, align 2, !tbaa !399
  %31246 = getelementptr inbounds i16, i16* %31242, i64 -16
  %31247 = bitcast i16* %31246 to <16 x i16>*
  %31248 = load <16 x i16>, <16 x i16>* %31247, align 2, !tbaa !399
  %31249 = zext i32 %.pre-phi3628 to i64
  %31250 = mul nsw i64 %31249, %314
  %31251 = add nsw i64 %31250, %292
  %31252 = getelementptr inbounds i16, i16* %blur_x917, i64 %31251
  %31253 = getelementptr inbounds i16, i16* %31252, i64 -32
  %31254 = bitcast i16* %31253 to <16 x i16>*
  %31255 = load <16 x i16>, <16 x i16>* %31254, align 2, !tbaa !399
  %31256 = getelementptr inbounds i16, i16* %31252, i64 -16
  %31257 = bitcast i16* %31256 to <16 x i16>*
  %31258 = load <16 x i16>, <16 x i16>* %31257, align 2, !tbaa !399
  %31259 = add <16 x i16> %31206, %31196
  %31260 = add <16 x i16> %31259, %31216
  %31261 = add <16 x i16> %31260, %31226
  %31262 = add <16 x i16> %31261, %31236
  %31263 = add <16 x i16> %31262, %31245
  %31264 = add <16 x i16> %31263, %31255
  %31265 = add <16 x i16> %31209, %31199
  %31266 = add <16 x i16> %31265, %31219
  %31267 = add <16 x i16> %31266, %31229
  %31268 = add <16 x i16> %31267, %31239
  %31269 = add <16 x i16> %31268, %31248
  %31270 = add <16 x i16> %31269, %31258
  %31271 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31264, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31272 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31270, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31273 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31271, <16 x i16> %31264)
  %31274 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31272, <16 x i16> %31270)
  %31275 = shufflevector <16 x i16> %31273, <16 x i16> %31274, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31276 = lshr <32 x i16> %31275, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %31277 = shufflevector <32 x i16> %31276, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31278 = sext i32 %a367 to i64
  %31279 = add nsw i64 %31278, 18
  %31280 = mul nsw i64 %31279, %315
  %31281 = add nsw i64 %317, %31280
  %31282 = getelementptr inbounds i16, i16* %264, i64 %31281
  %31283 = getelementptr inbounds i16, i16* %31282, i64 -32
  %31284 = bitcast i16* %31283 to <16 x i16>*
  store <16 x i16> %31277, <16 x i16>* %31284, align 2, !tbaa !401
  %31285 = shufflevector <32 x i16> %31276, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31286 = getelementptr inbounds i16, i16* %31282, i64 -16
  %31287 = bitcast i16* %31286 to <16 x i16>*
  store <16 x i16> %31285, <16 x i16>* %31287, align 2, !tbaa !401
  br label %after_bb1873

"for blur_y.s0.x.x.rebased1888":                  ; preds = %"for blur_y.s0.x.x.rebased1888.preheader", %"consume blur_x1897"
  %indvars.iv3459 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1888.preheader" ], [ %indvars.iv.next3460, %"consume blur_x1897" ]
  %31288 = add nsw i64 %indvars.iv3459, %299
  %31289 = icmp slt i64 %31288, 1
  %31290 = trunc i64 %31288 to i32
  %31291 = shl nsw i32 %31290, 5
  %31292 = icmp sgt i32 %202, %31291
  %31293 = or i1 %31289, %31292
  br i1 %31293, label %"produce blur_x1895", label %"for blur_y.s0.x.x.rebased1888.consume blur_x1897_crit_edge"

"for blur_y.s0.x.x.rebased1888.consume blur_x1897_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1888"
  %.pre3663 = shl nsw i64 %31288, 5
  br label %"consume blur_x1897"

"end for blur_y.s0.x.x.rebased1889":              ; preds = %"consume blur_x1897", %after_bb1873
  br i1 %300, label %"for blur_y.s0.x.x.rebased1905.preheader", label %"end for blur_y.s0.x.x.rebased1906", !prof !386

"for blur_y.s0.x.x.rebased1905.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1889"
  %31294 = sext i32 %t1726924 to i64
  %31295 = zext i32 %.pre-phi3610 to i64
  %31296 = mul nsw i64 %31295, %314
  %31297 = sub nsw i64 %31296, %294
  %31298 = zext i32 %.pre-phi3606 to i64
  %31299 = mul nsw i64 %31298, %314
  %31300 = sub nsw i64 %31299, %294
  %31301 = zext i32 %.pre-phi3614 to i64
  %31302 = mul nsw i64 %31301, %314
  %31303 = sub nsw i64 %31302, %294
  %31304 = zext i32 %.pre-phi3618 to i64
  %31305 = mul nsw i64 %31304, %314
  %31306 = sub nsw i64 %31305, %294
  %31307 = zext i32 %.pre-phi3622 to i64
  %31308 = mul nsw i64 %31307, %314
  %31309 = sub nsw i64 %31308, %294
  %31310 = zext i32 %.pre-phi3598 to i64
  %31311 = mul nsw i64 %31310, %314
  %31312 = sub nsw i64 %31311, %294
  %31313 = zext i32 %.pre-phi3628 to i64
  %31314 = mul nsw i64 %31313, %314
  %31315 = sub nsw i64 %31314, %294
  %31316 = sext i32 %a367 to i64
  %31317 = add nsw i64 %31316, 18
  %31318 = mul nsw i64 %31317, %315
  %31319 = add nsw i64 %31318, %318
  br label %"for blur_y.s0.x.x.rebased1905"

"produce blur_x1895":                             ; preds = %"for blur_y.s0.x.x.rebased1888"
  %t10401896 = add nsw i32 %31291, %t20491885
  %31320 = sext i32 %t10401896 to i64
  %31321 = getelementptr inbounds i16, i16* %read_input860, i64 %31320
  %31322 = getelementptr inbounds i16, i16* %31321, i64 1
  %31323 = bitcast i16* %31322 to <16 x i16>*
  %31324 = load <16 x i16>, <16 x i16>* %31323, align 2, !tbaa !396
  %31325 = getelementptr inbounds i16, i16* %31321, i64 17
  %31326 = bitcast i16* %31325 to <16 x i16>*
  %31327 = load <16 x i16>, <16 x i16>* %31326, align 2, !tbaa !396
  %31328 = bitcast i16* %31321 to <16 x i16>*
  %31329 = load <16 x i16>, <16 x i16>* %31328, align 2, !tbaa !396
  %31330 = getelementptr inbounds i16, i16* %31321, i64 16
  %31331 = bitcast i16* %31330 to <16 x i16>*
  %31332 = load <16 x i16>, <16 x i16>* %31331, align 2, !tbaa !396
  %31333 = getelementptr inbounds i16, i16* %31321, i64 2
  %31334 = bitcast i16* %31333 to <16 x i16>*
  %31335 = load <16 x i16>, <16 x i16>* %31334, align 2, !tbaa !396
  %31336 = getelementptr inbounds i16, i16* %31321, i64 18
  %31337 = bitcast i16* %31336 to <16 x i16>*
  %31338 = load <16 x i16>, <16 x i16>* %31337, align 2, !tbaa !396
  %31339 = getelementptr inbounds i16, i16* %31321, i64 3
  %31340 = bitcast i16* %31339 to <16 x i16>*
  %31341 = load <16 x i16>, <16 x i16>* %31340, align 2, !tbaa !396
  %31342 = getelementptr inbounds i16, i16* %31321, i64 19
  %31343 = bitcast i16* %31342 to <16 x i16>*
  %31344 = load <16 x i16>, <16 x i16>* %31343, align 2, !tbaa !396
  %31345 = getelementptr inbounds i16, i16* %31321, i64 4
  %31346 = bitcast i16* %31345 to <16 x i16>*
  %31347 = load <16 x i16>, <16 x i16>* %31346, align 2, !tbaa !396
  %31348 = getelementptr inbounds i16, i16* %31321, i64 20
  %31349 = bitcast i16* %31348 to <16 x i16>*
  %31350 = load <16 x i16>, <16 x i16>* %31349, align 2, !tbaa !396
  %31351 = getelementptr inbounds i16, i16* %31321, i64 6
  %31352 = bitcast i16* %31351 to <16 x i16>*
  %31353 = load <16 x i16>, <16 x i16>* %31352, align 2, !tbaa !396
  %31354 = getelementptr inbounds i16, i16* %31321, i64 22
  %31355 = bitcast i16* %31354 to <16 x i16>*
  %31356 = load <16 x i16>, <16 x i16>* %31355, align 2, !tbaa !396
  %31357 = getelementptr inbounds i16, i16* %31321, i64 5
  %31358 = bitcast i16* %31357 to <16 x i16>*
  %31359 = load <16 x i16>, <16 x i16>* %31358, align 2, !tbaa !396
  %31360 = getelementptr inbounds i16, i16* %31321, i64 21
  %31361 = bitcast i16* %31360 to <16 x i16>*
  %31362 = load <16 x i16>, <16 x i16>* %31361, align 2, !tbaa !396
  %31363 = add <16 x i16> %31329, %31324
  %31364 = add <16 x i16> %31363, %31335
  %31365 = add <16 x i16> %31364, %31341
  %31366 = add <16 x i16> %31365, %31347
  %31367 = add <16 x i16> %31366, %31353
  %31368 = add <16 x i16> %31367, %31359
  %31369 = add <16 x i16> %31332, %31327
  %31370 = add <16 x i16> %31369, %31338
  %31371 = add <16 x i16> %31370, %31344
  %31372 = add <16 x i16> %31371, %31350
  %31373 = add <16 x i16> %31372, %31356
  %31374 = add <16 x i16> %31373, %31362
  %31375 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31368, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31376 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31374, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31377 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31375, <16 x i16> %31368)
  %31378 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31376, <16 x i16> %31374)
  %31379 = shufflevector <16 x i16> %31377, <16 x i16> %31378, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31380 = lshr <32 x i16> %31379, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %31381 = shufflevector <32 x i16> %31380, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31382 = shl nsw i64 %31288, 5
  %31383 = add nsw i64 %31382, %31093
  %31384 = getelementptr inbounds i16, i16* %blur_x917, i64 %31383
  %31385 = bitcast i16* %31384 to <16 x i16>*
  store <16 x i16> %31381, <16 x i16>* %31385, align 2, !tbaa !399
  %31386 = shufflevector <32 x i16> %31380, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31387 = getelementptr inbounds i16, i16* %31384, i64 16
  %31388 = bitcast i16* %31387 to <16 x i16>*
  store <16 x i16> %31386, <16 x i16>* %31388, align 2, !tbaa !399
  br label %"consume blur_x1897"

"consume blur_x1897":                             ; preds = %"for blur_y.s0.x.x.rebased1888.consume blur_x1897_crit_edge", %"produce blur_x1895"
  %.pre-phi3664 = phi i64 [ %.pre3663, %"for blur_y.s0.x.x.rebased1888.consume blur_x1897_crit_edge" ], [ %31382, %"produce blur_x1895" ]
  %31389 = add nsw i64 %31096, %.pre-phi3664
  %31390 = getelementptr inbounds i16, i16* %blur_x917, i64 %31389
  %31391 = bitcast i16* %31390 to <16 x i16>*
  %31392 = load <16 x i16>, <16 x i16>* %31391, align 2, !tbaa !399
  %31393 = getelementptr inbounds i16, i16* %31390, i64 16
  %31394 = bitcast i16* %31393 to <16 x i16>*
  %31395 = load <16 x i16>, <16 x i16>* %31394, align 2, !tbaa !399
  %31396 = add nsw i64 %31099, %.pre-phi3664
  %31397 = getelementptr inbounds i16, i16* %blur_x917, i64 %31396
  %31398 = bitcast i16* %31397 to <16 x i16>*
  %31399 = load <16 x i16>, <16 x i16>* %31398, align 2, !tbaa !399
  %31400 = getelementptr inbounds i16, i16* %31397, i64 16
  %31401 = bitcast i16* %31400 to <16 x i16>*
  %31402 = load <16 x i16>, <16 x i16>* %31401, align 2, !tbaa !399
  %31403 = add nsw i64 %31102, %.pre-phi3664
  %31404 = getelementptr inbounds i16, i16* %blur_x917, i64 %31403
  %31405 = bitcast i16* %31404 to <16 x i16>*
  %31406 = load <16 x i16>, <16 x i16>* %31405, align 2, !tbaa !399
  %31407 = getelementptr inbounds i16, i16* %31404, i64 16
  %31408 = bitcast i16* %31407 to <16 x i16>*
  %31409 = load <16 x i16>, <16 x i16>* %31408, align 2, !tbaa !399
  %31410 = add nsw i64 %31105, %.pre-phi3664
  %31411 = getelementptr inbounds i16, i16* %blur_x917, i64 %31410
  %31412 = bitcast i16* %31411 to <16 x i16>*
  %31413 = load <16 x i16>, <16 x i16>* %31412, align 2, !tbaa !399
  %31414 = getelementptr inbounds i16, i16* %31411, i64 16
  %31415 = bitcast i16* %31414 to <16 x i16>*
  %31416 = load <16 x i16>, <16 x i16>* %31415, align 2, !tbaa !399
  %31417 = add nsw i64 %31108, %.pre-phi3664
  %31418 = getelementptr inbounds i16, i16* %blur_x917, i64 %31417
  %31419 = bitcast i16* %31418 to <16 x i16>*
  %31420 = load <16 x i16>, <16 x i16>* %31419, align 2, !tbaa !399
  %31421 = getelementptr inbounds i16, i16* %31418, i64 16
  %31422 = bitcast i16* %31421 to <16 x i16>*
  %31423 = load <16 x i16>, <16 x i16>* %31422, align 2, !tbaa !399
  %31424 = add nsw i64 %31111, %.pre-phi3664
  %31425 = getelementptr inbounds i16, i16* %blur_x917, i64 %31424
  %31426 = bitcast i16* %31425 to <16 x i16>*
  %31427 = load <16 x i16>, <16 x i16>* %31426, align 2, !tbaa !399
  %31428 = getelementptr inbounds i16, i16* %31425, i64 16
  %31429 = bitcast i16* %31428 to <16 x i16>*
  %31430 = load <16 x i16>, <16 x i16>* %31429, align 2, !tbaa !399
  %31431 = add nsw i64 %31114, %.pre-phi3664
  %31432 = getelementptr inbounds i16, i16* %blur_x917, i64 %31431
  %31433 = bitcast i16* %31432 to <16 x i16>*
  %31434 = load <16 x i16>, <16 x i16>* %31433, align 2, !tbaa !399
  %31435 = getelementptr inbounds i16, i16* %31432, i64 16
  %31436 = bitcast i16* %31435 to <16 x i16>*
  %31437 = load <16 x i16>, <16 x i16>* %31436, align 2, !tbaa !399
  %31438 = add <16 x i16> %31399, %31392
  %31439 = add <16 x i16> %31438, %31406
  %31440 = add <16 x i16> %31439, %31413
  %31441 = add <16 x i16> %31440, %31420
  %31442 = add <16 x i16> %31441, %31427
  %31443 = add <16 x i16> %31442, %31434
  %31444 = add <16 x i16> %31402, %31395
  %31445 = add <16 x i16> %31444, %31409
  %31446 = add <16 x i16> %31445, %31416
  %31447 = add <16 x i16> %31446, %31423
  %31448 = add <16 x i16> %31447, %31430
  %31449 = add <16 x i16> %31448, %31437
  %31450 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31443, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31451 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31449, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31452 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31450, <16 x i16> %31443)
  %31453 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31451, <16 x i16> %31449)
  %31454 = shufflevector <16 x i16> %31452, <16 x i16> %31453, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31455 = lshr <32 x i16> %31454, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %31456 = shufflevector <32 x i16> %31455, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31457 = add nsw i64 %31118, %.pre-phi3664
  %31458 = getelementptr inbounds i16, i16* %264, i64 %31457
  %31459 = bitcast i16* %31458 to <16 x i16>*
  store <16 x i16> %31456, <16 x i16>* %31459, align 2, !tbaa !401
  %31460 = shufflevector <32 x i16> %31455, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31461 = getelementptr inbounds i16, i16* %31458, i64 16
  %31462 = bitcast i16* %31461 to <16 x i16>*
  store <16 x i16> %31460, <16 x i16>* %31462, align 2, !tbaa !401
  %indvars.iv.next3460 = add nuw nsw i64 %indvars.iv3459, 1
  %.not2674 = icmp eq i64 %indvars.iv.next3460, %386
  br i1 %.not2674, label %"end for blur_y.s0.x.x.rebased1889", label %"for blur_y.s0.x.x.rebased1888"

"for blur_y.s0.x.x.rebased1905":                  ; preds = %"for blur_y.s0.x.x.rebased1905.preheader", %"consume blur_x1915"
  %blur_y.s0.x.x.rebased1907 = phi i32 [ %31613, %"consume blur_x1915" ], [ 0, %"for blur_y.s0.x.x.rebased1905.preheader" ]
  %31463 = add nsw i32 %blur_y.s0.x.x.rebased1907, %t1670852
  %a586 = shl nsw i32 %31463, 5
  %31464 = icmp sgt i32 %a355, %a586
  %b592 = select i1 %31464, i32 %a586, i32 %a355
  %31465 = icmp slt i32 %31463, 1
  %31466 = icmp sgt i32 %202, %a586
  %31467 = or i1 %31465, %31466
  br i1 %31467, label %"produce blur_x1912", label %"consume blur_x1915"

"end for blur_y.s0.x.x.rebased1906":              ; preds = %"consume blur_x1915", %"end for blur_y.s0.x.x.rebased1889"
  br i1 %232, label %"produce blur_x1919", label %after_bb1916

"produce blur_x1912":                             ; preds = %"for blur_y.s0.x.x.rebased1905"
  %31468 = icmp slt i32 %b592, %202
  %blur_x.s0.x.v1.base.s1913 = select i1 %31468, i32 %b592, i32 %202
  %t10451914 = add nsw i32 %blur_x.s0.x.v1.base.s1913, %t20491885
  %31469 = sext i32 %t10451914 to i64
  %31470 = getelementptr inbounds i16, i16* %read_input860, i64 %31469
  %31471 = getelementptr inbounds i16, i16* %31470, i64 1
  %31472 = bitcast i16* %31471 to <16 x i16>*
  %31473 = load <16 x i16>, <16 x i16>* %31472, align 2, !tbaa !396
  %31474 = getelementptr inbounds i16, i16* %31470, i64 17
  %31475 = bitcast i16* %31474 to <16 x i16>*
  %31476 = load <16 x i16>, <16 x i16>* %31475, align 2, !tbaa !396
  %31477 = bitcast i16* %31470 to <16 x i16>*
  %31478 = load <16 x i16>, <16 x i16>* %31477, align 2, !tbaa !396
  %31479 = getelementptr inbounds i16, i16* %31470, i64 16
  %31480 = bitcast i16* %31479 to <16 x i16>*
  %31481 = load <16 x i16>, <16 x i16>* %31480, align 2, !tbaa !396
  %31482 = getelementptr inbounds i16, i16* %31470, i64 2
  %31483 = bitcast i16* %31482 to <16 x i16>*
  %31484 = load <16 x i16>, <16 x i16>* %31483, align 2, !tbaa !396
  %31485 = getelementptr inbounds i16, i16* %31470, i64 18
  %31486 = bitcast i16* %31485 to <16 x i16>*
  %31487 = load <16 x i16>, <16 x i16>* %31486, align 2, !tbaa !396
  %31488 = getelementptr inbounds i16, i16* %31470, i64 3
  %31489 = bitcast i16* %31488 to <16 x i16>*
  %31490 = load <16 x i16>, <16 x i16>* %31489, align 2, !tbaa !396
  %31491 = getelementptr inbounds i16, i16* %31470, i64 19
  %31492 = bitcast i16* %31491 to <16 x i16>*
  %31493 = load <16 x i16>, <16 x i16>* %31492, align 2, !tbaa !396
  %31494 = getelementptr inbounds i16, i16* %31470, i64 4
  %31495 = bitcast i16* %31494 to <16 x i16>*
  %31496 = load <16 x i16>, <16 x i16>* %31495, align 2, !tbaa !396
  %31497 = getelementptr inbounds i16, i16* %31470, i64 20
  %31498 = bitcast i16* %31497 to <16 x i16>*
  %31499 = load <16 x i16>, <16 x i16>* %31498, align 2, !tbaa !396
  %31500 = getelementptr inbounds i16, i16* %31470, i64 6
  %31501 = bitcast i16* %31500 to <16 x i16>*
  %31502 = load <16 x i16>, <16 x i16>* %31501, align 2, !tbaa !396
  %31503 = getelementptr inbounds i16, i16* %31470, i64 22
  %31504 = bitcast i16* %31503 to <16 x i16>*
  %31505 = load <16 x i16>, <16 x i16>* %31504, align 2, !tbaa !396
  %31506 = getelementptr inbounds i16, i16* %31470, i64 5
  %31507 = bitcast i16* %31506 to <16 x i16>*
  %31508 = load <16 x i16>, <16 x i16>* %31507, align 2, !tbaa !396
  %31509 = getelementptr inbounds i16, i16* %31470, i64 21
  %31510 = bitcast i16* %31509 to <16 x i16>*
  %31511 = load <16 x i16>, <16 x i16>* %31510, align 2, !tbaa !396
  %31512 = add <16 x i16> %31478, %31473
  %31513 = add <16 x i16> %31512, %31484
  %31514 = add <16 x i16> %31513, %31490
  %31515 = add <16 x i16> %31514, %31496
  %31516 = add <16 x i16> %31515, %31502
  %31517 = add <16 x i16> %31516, %31508
  %31518 = add <16 x i16> %31481, %31476
  %31519 = add <16 x i16> %31518, %31487
  %31520 = add <16 x i16> %31519, %31493
  %31521 = add <16 x i16> %31520, %31499
  %31522 = add <16 x i16> %31521, %31505
  %31523 = add <16 x i16> %31522, %31511
  %31524 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31517, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31525 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31523, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31526 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31524, <16 x i16> %31517)
  %31527 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31525, <16 x i16> %31523)
  %31528 = shufflevector <16 x i16> %31526, <16 x i16> %31527, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31529 = lshr <32 x i16> %31528, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %31530 = shufflevector <32 x i16> %31529, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31531 = sext i32 %blur_x.s0.x.v1.base.s1913 to i64
  %31532 = add nsw i64 %31531, %31294
  %31533 = getelementptr inbounds i16, i16* %blur_x917, i64 %31532
  %31534 = bitcast i16* %31533 to <16 x i16>*
  store <16 x i16> %31530, <16 x i16>* %31534, align 2, !tbaa !399
  %31535 = shufflevector <32 x i16> %31529, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31536 = getelementptr inbounds i16, i16* %31533, i64 16
  %31537 = bitcast i16* %31536 to <16 x i16>*
  store <16 x i16> %31535, <16 x i16>* %31537, align 2, !tbaa !399
  br label %"consume blur_x1915"

"consume blur_x1915":                             ; preds = %"for blur_y.s0.x.x.rebased1905", %"produce blur_x1912"
  %31538 = sext i32 %b592 to i64
  %31539 = add nsw i64 %31297, %31538
  %31540 = getelementptr inbounds i16, i16* %blur_x917, i64 %31539
  %31541 = bitcast i16* %31540 to <16 x i16>*
  %31542 = load <16 x i16>, <16 x i16>* %31541, align 2, !tbaa !399
  %31543 = getelementptr inbounds i16, i16* %31540, i64 16
  %31544 = bitcast i16* %31543 to <16 x i16>*
  %31545 = load <16 x i16>, <16 x i16>* %31544, align 2, !tbaa !399
  %31546 = add nsw i64 %31300, %31538
  %31547 = getelementptr inbounds i16, i16* %blur_x917, i64 %31546
  %31548 = bitcast i16* %31547 to <16 x i16>*
  %31549 = load <16 x i16>, <16 x i16>* %31548, align 2, !tbaa !399
  %31550 = getelementptr inbounds i16, i16* %31547, i64 16
  %31551 = bitcast i16* %31550 to <16 x i16>*
  %31552 = load <16 x i16>, <16 x i16>* %31551, align 2, !tbaa !399
  %31553 = add nsw i64 %31303, %31538
  %31554 = getelementptr inbounds i16, i16* %blur_x917, i64 %31553
  %31555 = bitcast i16* %31554 to <16 x i16>*
  %31556 = load <16 x i16>, <16 x i16>* %31555, align 2, !tbaa !399
  %31557 = getelementptr inbounds i16, i16* %31554, i64 16
  %31558 = bitcast i16* %31557 to <16 x i16>*
  %31559 = load <16 x i16>, <16 x i16>* %31558, align 2, !tbaa !399
  %31560 = add nsw i64 %31306, %31538
  %31561 = getelementptr inbounds i16, i16* %blur_x917, i64 %31560
  %31562 = bitcast i16* %31561 to <16 x i16>*
  %31563 = load <16 x i16>, <16 x i16>* %31562, align 2, !tbaa !399
  %31564 = getelementptr inbounds i16, i16* %31561, i64 16
  %31565 = bitcast i16* %31564 to <16 x i16>*
  %31566 = load <16 x i16>, <16 x i16>* %31565, align 2, !tbaa !399
  %31567 = add nsw i64 %31309, %31538
  %31568 = getelementptr inbounds i16, i16* %blur_x917, i64 %31567
  %31569 = bitcast i16* %31568 to <16 x i16>*
  %31570 = load <16 x i16>, <16 x i16>* %31569, align 2, !tbaa !399
  %31571 = getelementptr inbounds i16, i16* %31568, i64 16
  %31572 = bitcast i16* %31571 to <16 x i16>*
  %31573 = load <16 x i16>, <16 x i16>* %31572, align 2, !tbaa !399
  %31574 = add nsw i64 %31312, %31538
  %31575 = getelementptr inbounds i16, i16* %blur_x917, i64 %31574
  %31576 = bitcast i16* %31575 to <16 x i16>*
  %31577 = load <16 x i16>, <16 x i16>* %31576, align 2, !tbaa !399
  %31578 = getelementptr inbounds i16, i16* %31575, i64 16
  %31579 = bitcast i16* %31578 to <16 x i16>*
  %31580 = load <16 x i16>, <16 x i16>* %31579, align 2, !tbaa !399
  %31581 = add nsw i64 %31315, %31538
  %31582 = getelementptr inbounds i16, i16* %blur_x917, i64 %31581
  %31583 = bitcast i16* %31582 to <16 x i16>*
  %31584 = load <16 x i16>, <16 x i16>* %31583, align 2, !tbaa !399
  %31585 = getelementptr inbounds i16, i16* %31582, i64 16
  %31586 = bitcast i16* %31585 to <16 x i16>*
  %31587 = load <16 x i16>, <16 x i16>* %31586, align 2, !tbaa !399
  %31588 = add <16 x i16> %31549, %31542
  %31589 = add <16 x i16> %31588, %31556
  %31590 = add <16 x i16> %31589, %31563
  %31591 = add <16 x i16> %31590, %31570
  %31592 = add <16 x i16> %31591, %31577
  %31593 = add <16 x i16> %31592, %31584
  %31594 = add <16 x i16> %31552, %31545
  %31595 = add <16 x i16> %31594, %31559
  %31596 = add <16 x i16> %31595, %31566
  %31597 = add <16 x i16> %31596, %31573
  %31598 = add <16 x i16> %31597, %31580
  %31599 = add <16 x i16> %31598, %31587
  %31600 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31593, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31601 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31599, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31602 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31600, <16 x i16> %31593)
  %31603 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31601, <16 x i16> %31599)
  %31604 = shufflevector <16 x i16> %31602, <16 x i16> %31603, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31605 = lshr <32 x i16> %31604, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %31606 = shufflevector <32 x i16> %31605, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31607 = add nsw i64 %31319, %31538
  %31608 = getelementptr inbounds i16, i16* %264, i64 %31607
  %31609 = bitcast i16* %31608 to <16 x i16>*
  store <16 x i16> %31606, <16 x i16>* %31609, align 2, !tbaa !401
  %31610 = shufflevector <32 x i16> %31605, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31611 = getelementptr inbounds i16, i16* %31608, i64 16
  %31612 = bitcast i16* %31611 to <16 x i16>*
  store <16 x i16> %31610, <16 x i16>* %31612, align 2, !tbaa !401
  %31613 = add nuw nsw i32 %blur_y.s0.x.x.rebased1907, 1
  %.not2673 = icmp eq i32 %31613, %t1727937
  br i1 %.not2673, label %"end for blur_y.s0.x.x.rebased1906", label %"for blur_y.s0.x.x.rebased1905"

after_bb1916:                                     ; preds = %"end for blur_y.s0.x.x.rebased1906", %"produce blur_x1919"
  br i1 %298, label %"for blur_y.s0.x.x.rebased1931.preheader", label %"end for blur_y.s0.x.x.rebased1932", !prof !386

"for blur_y.s0.x.x.rebased1931.preheader":        ; preds = %after_bb1916
  %31614 = sext i32 %t1732954 to i64
  %31615 = zext i32 %.pre-phi3614 to i64
  %31616 = mul nsw i64 %31615, %314
  %31617 = sub nsw i64 %31616, %294
  %31618 = zext i32 %.pre-phi3610 to i64
  %31619 = mul nsw i64 %31618, %314
  %31620 = sub nsw i64 %31619, %294
  %31621 = zext i32 %.pre-phi3618 to i64
  %31622 = mul nsw i64 %31621, %314
  %31623 = sub nsw i64 %31622, %294
  %31624 = zext i32 %.pre-phi3622 to i64
  %31625 = mul nsw i64 %31624, %314
  %31626 = sub nsw i64 %31625, %294
  %31627 = zext i32 %.pre-phi3628 to i64
  %31628 = mul nsw i64 %31627, %314
  %31629 = sub nsw i64 %31628, %294
  %31630 = zext i32 %.pre-phi3602 to i64
  %31631 = mul nsw i64 %31630, %314
  %31632 = sub nsw i64 %31631, %294
  %31633 = zext i32 %.pre-phi3598 to i64
  %31634 = mul nsw i64 %31633, %314
  %31635 = sub nsw i64 %31634, %294
  %31636 = sext i32 %a367 to i64
  %31637 = add nsw i64 %31636, 19
  %31638 = mul nsw i64 %31637, %315
  %31639 = add nsw i64 %31638, %318
  br label %"for blur_y.s0.x.x.rebased1931"

"produce blur_x1919":                             ; preds = %"end for blur_y.s0.x.x.rebased1906"
  %31640 = getelementptr inbounds i16, i16* %read_input860, i64 %355
  %31641 = getelementptr inbounds i16, i16* %31640, i64 -31
  %31642 = bitcast i16* %31641 to <16 x i16>*
  %31643 = load <16 x i16>, <16 x i16>* %31642, align 2, !tbaa !396
  %31644 = getelementptr inbounds i16, i16* %31640, i64 -15
  %31645 = bitcast i16* %31644 to <16 x i16>*
  %31646 = load <16 x i16>, <16 x i16>* %31645, align 2, !tbaa !396
  %31647 = getelementptr inbounds i16, i16* %31640, i64 -32
  %31648 = bitcast i16* %31647 to <16 x i16>*
  %31649 = load <16 x i16>, <16 x i16>* %31648, align 2, !tbaa !396
  %31650 = getelementptr inbounds i16, i16* %31640, i64 -16
  %31651 = bitcast i16* %31650 to <16 x i16>*
  %31652 = load <16 x i16>, <16 x i16>* %31651, align 2, !tbaa !396
  %31653 = getelementptr inbounds i16, i16* %31640, i64 -30
  %31654 = bitcast i16* %31653 to <16 x i16>*
  %31655 = load <16 x i16>, <16 x i16>* %31654, align 2, !tbaa !396
  %31656 = getelementptr inbounds i16, i16* %31640, i64 -14
  %31657 = bitcast i16* %31656 to <16 x i16>*
  %31658 = load <16 x i16>, <16 x i16>* %31657, align 2, !tbaa !396
  %31659 = getelementptr inbounds i16, i16* %31640, i64 -29
  %31660 = bitcast i16* %31659 to <16 x i16>*
  %31661 = load <16 x i16>, <16 x i16>* %31660, align 2, !tbaa !396
  %31662 = getelementptr inbounds i16, i16* %31640, i64 -13
  %31663 = bitcast i16* %31662 to <16 x i16>*
  %31664 = load <16 x i16>, <16 x i16>* %31663, align 2, !tbaa !396
  %31665 = getelementptr inbounds i16, i16* %31640, i64 -28
  %31666 = bitcast i16* %31665 to <16 x i16>*
  %31667 = load <16 x i16>, <16 x i16>* %31666, align 2, !tbaa !396
  %31668 = getelementptr inbounds i16, i16* %31640, i64 -12
  %31669 = bitcast i16* %31668 to <16 x i16>*
  %31670 = load <16 x i16>, <16 x i16>* %31669, align 2, !tbaa !396
  %31671 = getelementptr inbounds i16, i16* %31640, i64 -26
  %31672 = bitcast i16* %31671 to <16 x i16>*
  %31673 = load <16 x i16>, <16 x i16>* %31672, align 2, !tbaa !396
  %31674 = getelementptr inbounds i16, i16* %31640, i64 -10
  %31675 = bitcast i16* %31674 to <16 x i16>*
  %31676 = load <16 x i16>, <16 x i16>* %31675, align 2, !tbaa !396
  %31677 = getelementptr inbounds i16, i16* %31640, i64 -27
  %31678 = bitcast i16* %31677 to <16 x i16>*
  %31679 = load <16 x i16>, <16 x i16>* %31678, align 2, !tbaa !396
  %31680 = getelementptr inbounds i16, i16* %31640, i64 -11
  %31681 = bitcast i16* %31680 to <16 x i16>*
  %31682 = load <16 x i16>, <16 x i16>* %31681, align 2, !tbaa !396
  %31683 = add <16 x i16> %31649, %31643
  %31684 = add <16 x i16> %31683, %31655
  %31685 = add <16 x i16> %31684, %31661
  %31686 = add <16 x i16> %31685, %31667
  %31687 = add <16 x i16> %31686, %31673
  %31688 = add <16 x i16> %31687, %31679
  %31689 = add <16 x i16> %31652, %31646
  %31690 = add <16 x i16> %31689, %31658
  %31691 = add <16 x i16> %31690, %31664
  %31692 = add <16 x i16> %31691, %31670
  %31693 = add <16 x i16> %31692, %31676
  %31694 = add <16 x i16> %31693, %31682
  %31695 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31688, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31696 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31694, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31697 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31695, <16 x i16> %31688)
  %31698 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31696, <16 x i16> %31694)
  %31699 = shufflevector <16 x i16> %31697, <16 x i16> %31698, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31700 = lshr <32 x i16> %31699, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %31701 = shufflevector <32 x i16> %31700, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31702 = zext i32 %.pre-phi3602 to i64
  %31703 = mul nsw i64 %295, %31702
  %31704 = add nsw i64 %297, %31703
  %31705 = getelementptr inbounds i16, i16* %blur_x917, i64 %31704
  %31706 = getelementptr inbounds i16, i16* %31705, i64 -32
  %31707 = bitcast i16* %31706 to <16 x i16>*
  store <16 x i16> %31701, <16 x i16>* %31707, align 2, !tbaa !399
  %31708 = shufflevector <32 x i16> %31700, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31709 = getelementptr inbounds i16, i16* %31705, i64 -16
  %31710 = bitcast i16* %31709 to <16 x i16>*
  store <16 x i16> %31708, <16 x i16>* %31710, align 2, !tbaa !399
  %31711 = zext i32 %.pre-phi3614 to i64
  %31712 = mul nsw i64 %31711, %314
  %31713 = add nsw i64 %31712, %292
  %31714 = getelementptr inbounds i16, i16* %blur_x917, i64 %31713
  %31715 = getelementptr inbounds i16, i16* %31714, i64 -32
  %31716 = bitcast i16* %31715 to <16 x i16>*
  %31717 = load <16 x i16>, <16 x i16>* %31716, align 2, !tbaa !399
  %31718 = getelementptr inbounds i16, i16* %31714, i64 -16
  %31719 = bitcast i16* %31718 to <16 x i16>*
  %31720 = load <16 x i16>, <16 x i16>* %31719, align 2, !tbaa !399
  %31721 = zext i32 %.pre-phi3610 to i64
  %31722 = mul nsw i64 %31721, %314
  %31723 = add nsw i64 %31722, %292
  %31724 = getelementptr inbounds i16, i16* %blur_x917, i64 %31723
  %31725 = getelementptr inbounds i16, i16* %31724, i64 -32
  %31726 = bitcast i16* %31725 to <16 x i16>*
  %31727 = load <16 x i16>, <16 x i16>* %31726, align 2, !tbaa !399
  %31728 = getelementptr inbounds i16, i16* %31724, i64 -16
  %31729 = bitcast i16* %31728 to <16 x i16>*
  %31730 = load <16 x i16>, <16 x i16>* %31729, align 2, !tbaa !399
  %31731 = zext i32 %.pre-phi3618 to i64
  %31732 = mul nsw i64 %31731, %314
  %31733 = add nsw i64 %31732, %292
  %31734 = getelementptr inbounds i16, i16* %blur_x917, i64 %31733
  %31735 = getelementptr inbounds i16, i16* %31734, i64 -32
  %31736 = bitcast i16* %31735 to <16 x i16>*
  %31737 = load <16 x i16>, <16 x i16>* %31736, align 2, !tbaa !399
  %31738 = getelementptr inbounds i16, i16* %31734, i64 -16
  %31739 = bitcast i16* %31738 to <16 x i16>*
  %31740 = load <16 x i16>, <16 x i16>* %31739, align 2, !tbaa !399
  %31741 = zext i32 %.pre-phi3622 to i64
  %31742 = mul nsw i64 %31741, %314
  %31743 = add nsw i64 %31742, %292
  %31744 = getelementptr inbounds i16, i16* %blur_x917, i64 %31743
  %31745 = getelementptr inbounds i16, i16* %31744, i64 -32
  %31746 = bitcast i16* %31745 to <16 x i16>*
  %31747 = load <16 x i16>, <16 x i16>* %31746, align 2, !tbaa !399
  %31748 = getelementptr inbounds i16, i16* %31744, i64 -16
  %31749 = bitcast i16* %31748 to <16 x i16>*
  %31750 = load <16 x i16>, <16 x i16>* %31749, align 2, !tbaa !399
  %31751 = zext i32 %.pre-phi3628 to i64
  %31752 = mul nsw i64 %31751, %314
  %31753 = add nsw i64 %31752, %292
  %31754 = getelementptr inbounds i16, i16* %blur_x917, i64 %31753
  %31755 = getelementptr inbounds i16, i16* %31754, i64 -32
  %31756 = bitcast i16* %31755 to <16 x i16>*
  %31757 = load <16 x i16>, <16 x i16>* %31756, align 2, !tbaa !399
  %31758 = getelementptr inbounds i16, i16* %31754, i64 -16
  %31759 = bitcast i16* %31758 to <16 x i16>*
  %31760 = load <16 x i16>, <16 x i16>* %31759, align 2, !tbaa !399
  %31761 = mul nsw i64 %31702, %314
  %31762 = add nsw i64 %31761, %292
  %31763 = getelementptr inbounds i16, i16* %blur_x917, i64 %31762
  %31764 = getelementptr inbounds i16, i16* %31763, i64 -32
  %31765 = bitcast i16* %31764 to <16 x i16>*
  %31766 = load <16 x i16>, <16 x i16>* %31765, align 2, !tbaa !399
  %31767 = getelementptr inbounds i16, i16* %31763, i64 -16
  %31768 = bitcast i16* %31767 to <16 x i16>*
  %31769 = load <16 x i16>, <16 x i16>* %31768, align 2, !tbaa !399
  %31770 = zext i32 %.pre-phi3598 to i64
  %31771 = mul nsw i64 %31770, %314
  %31772 = add nsw i64 %31771, %292
  %31773 = getelementptr inbounds i16, i16* %blur_x917, i64 %31772
  %31774 = getelementptr inbounds i16, i16* %31773, i64 -32
  %31775 = bitcast i16* %31774 to <16 x i16>*
  %31776 = load <16 x i16>, <16 x i16>* %31775, align 2, !tbaa !399
  %31777 = getelementptr inbounds i16, i16* %31773, i64 -16
  %31778 = bitcast i16* %31777 to <16 x i16>*
  %31779 = load <16 x i16>, <16 x i16>* %31778, align 2, !tbaa !399
  %31780 = add <16 x i16> %31727, %31717
  %31781 = add <16 x i16> %31780, %31737
  %31782 = add <16 x i16> %31781, %31747
  %31783 = add <16 x i16> %31782, %31757
  %31784 = add <16 x i16> %31783, %31766
  %31785 = add <16 x i16> %31784, %31776
  %31786 = add <16 x i16> %31730, %31720
  %31787 = add <16 x i16> %31786, %31740
  %31788 = add <16 x i16> %31787, %31750
  %31789 = add <16 x i16> %31788, %31760
  %31790 = add <16 x i16> %31789, %31769
  %31791 = add <16 x i16> %31790, %31779
  %31792 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31785, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31793 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31791, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31794 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31792, <16 x i16> %31785)
  %31795 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31793, <16 x i16> %31791)
  %31796 = shufflevector <16 x i16> %31794, <16 x i16> %31795, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31797 = lshr <32 x i16> %31796, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %31798 = shufflevector <32 x i16> %31797, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31799 = sext i32 %a367 to i64
  %31800 = add nsw i64 %31799, 19
  %31801 = mul nsw i64 %31800, %315
  %31802 = add nsw i64 %317, %31801
  %31803 = getelementptr inbounds i16, i16* %264, i64 %31802
  %31804 = getelementptr inbounds i16, i16* %31803, i64 -32
  %31805 = bitcast i16* %31804 to <16 x i16>*
  store <16 x i16> %31798, <16 x i16>* %31805, align 2, !tbaa !401
  %31806 = shufflevector <32 x i16> %31797, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31807 = getelementptr inbounds i16, i16* %31803, i64 -16
  %31808 = bitcast i16* %31807 to <16 x i16>*
  store <16 x i16> %31806, <16 x i16>* %31808, align 2, !tbaa !401
  br label %after_bb1916

"for blur_y.s0.x.x.rebased1931":                  ; preds = %"for blur_y.s0.x.x.rebased1931.preheader", %"consume blur_x1940"
  %indvars.iv3462 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1931.preheader" ], [ %indvars.iv.next3463, %"consume blur_x1940" ]
  %31809 = add nsw i64 %indvars.iv3462, %299
  %31810 = icmp slt i64 %31809, 1
  %31811 = trunc i64 %31809 to i32
  %31812 = shl nsw i32 %31811, 5
  %31813 = icmp sgt i32 %202, %31812
  %31814 = or i1 %31810, %31813
  br i1 %31814, label %"produce blur_x1938", label %"for blur_y.s0.x.x.rebased1931.consume blur_x1940_crit_edge"

"for blur_y.s0.x.x.rebased1931.consume blur_x1940_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1931"
  %.pre3665 = shl nsw i64 %31809, 5
  br label %"consume blur_x1940"

"end for blur_y.s0.x.x.rebased1932":              ; preds = %"consume blur_x1940", %after_bb1916
  br i1 %300, label %"for blur_y.s0.x.x.rebased1948.preheader", label %"end for blur_y.s0.x.x.rebased1949", !prof !386

"for blur_y.s0.x.x.rebased1948.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1932"
  %31815 = sext i32 %t1732954 to i64
  %31816 = zext i32 %.pre-phi3614 to i64
  %31817 = mul nsw i64 %31816, %314
  %31818 = sub nsw i64 %31817, %294
  %31819 = zext i32 %.pre-phi3610 to i64
  %31820 = mul nsw i64 %31819, %314
  %31821 = sub nsw i64 %31820, %294
  %31822 = zext i32 %.pre-phi3618 to i64
  %31823 = mul nsw i64 %31822, %314
  %31824 = sub nsw i64 %31823, %294
  %31825 = zext i32 %.pre-phi3622 to i64
  %31826 = mul nsw i64 %31825, %314
  %31827 = sub nsw i64 %31826, %294
  %31828 = zext i32 %.pre-phi3628 to i64
  %31829 = mul nsw i64 %31828, %314
  %31830 = sub nsw i64 %31829, %294
  %31831 = zext i32 %.pre-phi3602 to i64
  %31832 = mul nsw i64 %31831, %314
  %31833 = sub nsw i64 %31832, %294
  %31834 = zext i32 %.pre-phi3598 to i64
  %31835 = mul nsw i64 %31834, %314
  %31836 = sub nsw i64 %31835, %294
  %31837 = sext i32 %a367 to i64
  %31838 = add nsw i64 %31837, 19
  %31839 = mul nsw i64 %31838, %315
  %31840 = add nsw i64 %31839, %318
  br label %"for blur_y.s0.x.x.rebased1948"

"produce blur_x1938":                             ; preds = %"for blur_y.s0.x.x.rebased1931"
  %t10561939 = add nsw i32 %31812, %t20651928
  %31841 = sext i32 %t10561939 to i64
  %31842 = getelementptr inbounds i16, i16* %read_input860, i64 %31841
  %31843 = getelementptr inbounds i16, i16* %31842, i64 1
  %31844 = bitcast i16* %31843 to <16 x i16>*
  %31845 = load <16 x i16>, <16 x i16>* %31844, align 2, !tbaa !396
  %31846 = getelementptr inbounds i16, i16* %31842, i64 17
  %31847 = bitcast i16* %31846 to <16 x i16>*
  %31848 = load <16 x i16>, <16 x i16>* %31847, align 2, !tbaa !396
  %31849 = bitcast i16* %31842 to <16 x i16>*
  %31850 = load <16 x i16>, <16 x i16>* %31849, align 2, !tbaa !396
  %31851 = getelementptr inbounds i16, i16* %31842, i64 16
  %31852 = bitcast i16* %31851 to <16 x i16>*
  %31853 = load <16 x i16>, <16 x i16>* %31852, align 2, !tbaa !396
  %31854 = getelementptr inbounds i16, i16* %31842, i64 2
  %31855 = bitcast i16* %31854 to <16 x i16>*
  %31856 = load <16 x i16>, <16 x i16>* %31855, align 2, !tbaa !396
  %31857 = getelementptr inbounds i16, i16* %31842, i64 18
  %31858 = bitcast i16* %31857 to <16 x i16>*
  %31859 = load <16 x i16>, <16 x i16>* %31858, align 2, !tbaa !396
  %31860 = getelementptr inbounds i16, i16* %31842, i64 3
  %31861 = bitcast i16* %31860 to <16 x i16>*
  %31862 = load <16 x i16>, <16 x i16>* %31861, align 2, !tbaa !396
  %31863 = getelementptr inbounds i16, i16* %31842, i64 19
  %31864 = bitcast i16* %31863 to <16 x i16>*
  %31865 = load <16 x i16>, <16 x i16>* %31864, align 2, !tbaa !396
  %31866 = getelementptr inbounds i16, i16* %31842, i64 4
  %31867 = bitcast i16* %31866 to <16 x i16>*
  %31868 = load <16 x i16>, <16 x i16>* %31867, align 2, !tbaa !396
  %31869 = getelementptr inbounds i16, i16* %31842, i64 20
  %31870 = bitcast i16* %31869 to <16 x i16>*
  %31871 = load <16 x i16>, <16 x i16>* %31870, align 2, !tbaa !396
  %31872 = getelementptr inbounds i16, i16* %31842, i64 6
  %31873 = bitcast i16* %31872 to <16 x i16>*
  %31874 = load <16 x i16>, <16 x i16>* %31873, align 2, !tbaa !396
  %31875 = getelementptr inbounds i16, i16* %31842, i64 22
  %31876 = bitcast i16* %31875 to <16 x i16>*
  %31877 = load <16 x i16>, <16 x i16>* %31876, align 2, !tbaa !396
  %31878 = getelementptr inbounds i16, i16* %31842, i64 5
  %31879 = bitcast i16* %31878 to <16 x i16>*
  %31880 = load <16 x i16>, <16 x i16>* %31879, align 2, !tbaa !396
  %31881 = getelementptr inbounds i16, i16* %31842, i64 21
  %31882 = bitcast i16* %31881 to <16 x i16>*
  %31883 = load <16 x i16>, <16 x i16>* %31882, align 2, !tbaa !396
  %31884 = add <16 x i16> %31850, %31845
  %31885 = add <16 x i16> %31884, %31856
  %31886 = add <16 x i16> %31885, %31862
  %31887 = add <16 x i16> %31886, %31868
  %31888 = add <16 x i16> %31887, %31874
  %31889 = add <16 x i16> %31888, %31880
  %31890 = add <16 x i16> %31853, %31848
  %31891 = add <16 x i16> %31890, %31859
  %31892 = add <16 x i16> %31891, %31865
  %31893 = add <16 x i16> %31892, %31871
  %31894 = add <16 x i16> %31893, %31877
  %31895 = add <16 x i16> %31894, %31883
  %31896 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31889, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31897 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31895, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31898 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31896, <16 x i16> %31889)
  %31899 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31897, <16 x i16> %31895)
  %31900 = shufflevector <16 x i16> %31898, <16 x i16> %31899, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31901 = lshr <32 x i16> %31900, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %31902 = shufflevector <32 x i16> %31901, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31903 = shl nsw i64 %31809, 5
  %31904 = add nsw i64 %31903, %31614
  %31905 = getelementptr inbounds i16, i16* %blur_x917, i64 %31904
  %31906 = bitcast i16* %31905 to <16 x i16>*
  store <16 x i16> %31902, <16 x i16>* %31906, align 2, !tbaa !399
  %31907 = shufflevector <32 x i16> %31901, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31908 = getelementptr inbounds i16, i16* %31905, i64 16
  %31909 = bitcast i16* %31908 to <16 x i16>*
  store <16 x i16> %31907, <16 x i16>* %31909, align 2, !tbaa !399
  br label %"consume blur_x1940"

"consume blur_x1940":                             ; preds = %"for blur_y.s0.x.x.rebased1931.consume blur_x1940_crit_edge", %"produce blur_x1938"
  %.pre-phi3666 = phi i64 [ %.pre3665, %"for blur_y.s0.x.x.rebased1931.consume blur_x1940_crit_edge" ], [ %31903, %"produce blur_x1938" ]
  %31910 = add nsw i64 %31617, %.pre-phi3666
  %31911 = getelementptr inbounds i16, i16* %blur_x917, i64 %31910
  %31912 = bitcast i16* %31911 to <16 x i16>*
  %31913 = load <16 x i16>, <16 x i16>* %31912, align 2, !tbaa !399
  %31914 = getelementptr inbounds i16, i16* %31911, i64 16
  %31915 = bitcast i16* %31914 to <16 x i16>*
  %31916 = load <16 x i16>, <16 x i16>* %31915, align 2, !tbaa !399
  %31917 = add nsw i64 %31620, %.pre-phi3666
  %31918 = getelementptr inbounds i16, i16* %blur_x917, i64 %31917
  %31919 = bitcast i16* %31918 to <16 x i16>*
  %31920 = load <16 x i16>, <16 x i16>* %31919, align 2, !tbaa !399
  %31921 = getelementptr inbounds i16, i16* %31918, i64 16
  %31922 = bitcast i16* %31921 to <16 x i16>*
  %31923 = load <16 x i16>, <16 x i16>* %31922, align 2, !tbaa !399
  %31924 = add nsw i64 %31623, %.pre-phi3666
  %31925 = getelementptr inbounds i16, i16* %blur_x917, i64 %31924
  %31926 = bitcast i16* %31925 to <16 x i16>*
  %31927 = load <16 x i16>, <16 x i16>* %31926, align 2, !tbaa !399
  %31928 = getelementptr inbounds i16, i16* %31925, i64 16
  %31929 = bitcast i16* %31928 to <16 x i16>*
  %31930 = load <16 x i16>, <16 x i16>* %31929, align 2, !tbaa !399
  %31931 = add nsw i64 %31626, %.pre-phi3666
  %31932 = getelementptr inbounds i16, i16* %blur_x917, i64 %31931
  %31933 = bitcast i16* %31932 to <16 x i16>*
  %31934 = load <16 x i16>, <16 x i16>* %31933, align 2, !tbaa !399
  %31935 = getelementptr inbounds i16, i16* %31932, i64 16
  %31936 = bitcast i16* %31935 to <16 x i16>*
  %31937 = load <16 x i16>, <16 x i16>* %31936, align 2, !tbaa !399
  %31938 = add nsw i64 %31629, %.pre-phi3666
  %31939 = getelementptr inbounds i16, i16* %blur_x917, i64 %31938
  %31940 = bitcast i16* %31939 to <16 x i16>*
  %31941 = load <16 x i16>, <16 x i16>* %31940, align 2, !tbaa !399
  %31942 = getelementptr inbounds i16, i16* %31939, i64 16
  %31943 = bitcast i16* %31942 to <16 x i16>*
  %31944 = load <16 x i16>, <16 x i16>* %31943, align 2, !tbaa !399
  %31945 = add nsw i64 %31632, %.pre-phi3666
  %31946 = getelementptr inbounds i16, i16* %blur_x917, i64 %31945
  %31947 = bitcast i16* %31946 to <16 x i16>*
  %31948 = load <16 x i16>, <16 x i16>* %31947, align 2, !tbaa !399
  %31949 = getelementptr inbounds i16, i16* %31946, i64 16
  %31950 = bitcast i16* %31949 to <16 x i16>*
  %31951 = load <16 x i16>, <16 x i16>* %31950, align 2, !tbaa !399
  %31952 = add nsw i64 %31635, %.pre-phi3666
  %31953 = getelementptr inbounds i16, i16* %blur_x917, i64 %31952
  %31954 = bitcast i16* %31953 to <16 x i16>*
  %31955 = load <16 x i16>, <16 x i16>* %31954, align 2, !tbaa !399
  %31956 = getelementptr inbounds i16, i16* %31953, i64 16
  %31957 = bitcast i16* %31956 to <16 x i16>*
  %31958 = load <16 x i16>, <16 x i16>* %31957, align 2, !tbaa !399
  %31959 = add <16 x i16> %31920, %31913
  %31960 = add <16 x i16> %31959, %31927
  %31961 = add <16 x i16> %31960, %31934
  %31962 = add <16 x i16> %31961, %31941
  %31963 = add <16 x i16> %31962, %31948
  %31964 = add <16 x i16> %31963, %31955
  %31965 = add <16 x i16> %31923, %31916
  %31966 = add <16 x i16> %31965, %31930
  %31967 = add <16 x i16> %31966, %31937
  %31968 = add <16 x i16> %31967, %31944
  %31969 = add <16 x i16> %31968, %31951
  %31970 = add <16 x i16> %31969, %31958
  %31971 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31964, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31972 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %31970, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %31973 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31971, <16 x i16> %31964)
  %31974 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %31972, <16 x i16> %31970)
  %31975 = shufflevector <16 x i16> %31973, <16 x i16> %31974, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31976 = lshr <32 x i16> %31975, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %31977 = shufflevector <32 x i16> %31976, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %31978 = add nsw i64 %31639, %.pre-phi3666
  %31979 = getelementptr inbounds i16, i16* %264, i64 %31978
  %31980 = bitcast i16* %31979 to <16 x i16>*
  store <16 x i16> %31977, <16 x i16>* %31980, align 2, !tbaa !401
  %31981 = shufflevector <32 x i16> %31976, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %31982 = getelementptr inbounds i16, i16* %31979, i64 16
  %31983 = bitcast i16* %31982 to <16 x i16>*
  store <16 x i16> %31981, <16 x i16>* %31983, align 2, !tbaa !401
  %indvars.iv.next3463 = add nuw nsw i64 %indvars.iv3462, 1
  %.not2672 = icmp eq i64 %indvars.iv.next3463, %386
  br i1 %.not2672, label %"end for blur_y.s0.x.x.rebased1932", label %"for blur_y.s0.x.x.rebased1931"

"for blur_y.s0.x.x.rebased1948":                  ; preds = %"for blur_y.s0.x.x.rebased1948.preheader", %"consume blur_x1958"
  %blur_y.s0.x.x.rebased1950 = phi i32 [ %32134, %"consume blur_x1958" ], [ 0, %"for blur_y.s0.x.x.rebased1948.preheader" ]
  %31984 = add nsw i32 %blur_y.s0.x.x.rebased1950, %t1670852
  %a593 = shl nsw i32 %31984, 5
  %31985 = icmp sgt i32 %a355, %a593
  %b599 = select i1 %31985, i32 %a593, i32 %a355
  %31986 = icmp slt i32 %31984, 1
  %31987 = icmp sgt i32 %202, %a593
  %31988 = or i1 %31986, %31987
  br i1 %31988, label %"produce blur_x1955", label %"consume blur_x1958"

"end for blur_y.s0.x.x.rebased1949":              ; preds = %"consume blur_x1958", %"end for blur_y.s0.x.x.rebased1932"
  br i1 %232, label %"produce blur_x1962", label %after_bb1959

"produce blur_x1955":                             ; preds = %"for blur_y.s0.x.x.rebased1948"
  %31989 = icmp slt i32 %b599, %202
  %blur_x.s0.x.v1.base.s1956 = select i1 %31989, i32 %b599, i32 %202
  %t10611957 = add nsw i32 %blur_x.s0.x.v1.base.s1956, %t20651928
  %31990 = sext i32 %t10611957 to i64
  %31991 = getelementptr inbounds i16, i16* %read_input860, i64 %31990
  %31992 = getelementptr inbounds i16, i16* %31991, i64 1
  %31993 = bitcast i16* %31992 to <16 x i16>*
  %31994 = load <16 x i16>, <16 x i16>* %31993, align 2, !tbaa !396
  %31995 = getelementptr inbounds i16, i16* %31991, i64 17
  %31996 = bitcast i16* %31995 to <16 x i16>*
  %31997 = load <16 x i16>, <16 x i16>* %31996, align 2, !tbaa !396
  %31998 = bitcast i16* %31991 to <16 x i16>*
  %31999 = load <16 x i16>, <16 x i16>* %31998, align 2, !tbaa !396
  %32000 = getelementptr inbounds i16, i16* %31991, i64 16
  %32001 = bitcast i16* %32000 to <16 x i16>*
  %32002 = load <16 x i16>, <16 x i16>* %32001, align 2, !tbaa !396
  %32003 = getelementptr inbounds i16, i16* %31991, i64 2
  %32004 = bitcast i16* %32003 to <16 x i16>*
  %32005 = load <16 x i16>, <16 x i16>* %32004, align 2, !tbaa !396
  %32006 = getelementptr inbounds i16, i16* %31991, i64 18
  %32007 = bitcast i16* %32006 to <16 x i16>*
  %32008 = load <16 x i16>, <16 x i16>* %32007, align 2, !tbaa !396
  %32009 = getelementptr inbounds i16, i16* %31991, i64 3
  %32010 = bitcast i16* %32009 to <16 x i16>*
  %32011 = load <16 x i16>, <16 x i16>* %32010, align 2, !tbaa !396
  %32012 = getelementptr inbounds i16, i16* %31991, i64 19
  %32013 = bitcast i16* %32012 to <16 x i16>*
  %32014 = load <16 x i16>, <16 x i16>* %32013, align 2, !tbaa !396
  %32015 = getelementptr inbounds i16, i16* %31991, i64 4
  %32016 = bitcast i16* %32015 to <16 x i16>*
  %32017 = load <16 x i16>, <16 x i16>* %32016, align 2, !tbaa !396
  %32018 = getelementptr inbounds i16, i16* %31991, i64 20
  %32019 = bitcast i16* %32018 to <16 x i16>*
  %32020 = load <16 x i16>, <16 x i16>* %32019, align 2, !tbaa !396
  %32021 = getelementptr inbounds i16, i16* %31991, i64 6
  %32022 = bitcast i16* %32021 to <16 x i16>*
  %32023 = load <16 x i16>, <16 x i16>* %32022, align 2, !tbaa !396
  %32024 = getelementptr inbounds i16, i16* %31991, i64 22
  %32025 = bitcast i16* %32024 to <16 x i16>*
  %32026 = load <16 x i16>, <16 x i16>* %32025, align 2, !tbaa !396
  %32027 = getelementptr inbounds i16, i16* %31991, i64 5
  %32028 = bitcast i16* %32027 to <16 x i16>*
  %32029 = load <16 x i16>, <16 x i16>* %32028, align 2, !tbaa !396
  %32030 = getelementptr inbounds i16, i16* %31991, i64 21
  %32031 = bitcast i16* %32030 to <16 x i16>*
  %32032 = load <16 x i16>, <16 x i16>* %32031, align 2, !tbaa !396
  %32033 = add <16 x i16> %31999, %31994
  %32034 = add <16 x i16> %32033, %32005
  %32035 = add <16 x i16> %32034, %32011
  %32036 = add <16 x i16> %32035, %32017
  %32037 = add <16 x i16> %32036, %32023
  %32038 = add <16 x i16> %32037, %32029
  %32039 = add <16 x i16> %32002, %31997
  %32040 = add <16 x i16> %32039, %32008
  %32041 = add <16 x i16> %32040, %32014
  %32042 = add <16 x i16> %32041, %32020
  %32043 = add <16 x i16> %32042, %32026
  %32044 = add <16 x i16> %32043, %32032
  %32045 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32038, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32046 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32044, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32047 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32045, <16 x i16> %32038)
  %32048 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32046, <16 x i16> %32044)
  %32049 = shufflevector <16 x i16> %32047, <16 x i16> %32048, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32050 = lshr <32 x i16> %32049, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %32051 = shufflevector <32 x i16> %32050, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32052 = sext i32 %blur_x.s0.x.v1.base.s1956 to i64
  %32053 = add nsw i64 %32052, %31815
  %32054 = getelementptr inbounds i16, i16* %blur_x917, i64 %32053
  %32055 = bitcast i16* %32054 to <16 x i16>*
  store <16 x i16> %32051, <16 x i16>* %32055, align 2, !tbaa !399
  %32056 = shufflevector <32 x i16> %32050, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32057 = getelementptr inbounds i16, i16* %32054, i64 16
  %32058 = bitcast i16* %32057 to <16 x i16>*
  store <16 x i16> %32056, <16 x i16>* %32058, align 2, !tbaa !399
  br label %"consume blur_x1958"

"consume blur_x1958":                             ; preds = %"for blur_y.s0.x.x.rebased1948", %"produce blur_x1955"
  %32059 = sext i32 %b599 to i64
  %32060 = add nsw i64 %31818, %32059
  %32061 = getelementptr inbounds i16, i16* %blur_x917, i64 %32060
  %32062 = bitcast i16* %32061 to <16 x i16>*
  %32063 = load <16 x i16>, <16 x i16>* %32062, align 2, !tbaa !399
  %32064 = getelementptr inbounds i16, i16* %32061, i64 16
  %32065 = bitcast i16* %32064 to <16 x i16>*
  %32066 = load <16 x i16>, <16 x i16>* %32065, align 2, !tbaa !399
  %32067 = add nsw i64 %31821, %32059
  %32068 = getelementptr inbounds i16, i16* %blur_x917, i64 %32067
  %32069 = bitcast i16* %32068 to <16 x i16>*
  %32070 = load <16 x i16>, <16 x i16>* %32069, align 2, !tbaa !399
  %32071 = getelementptr inbounds i16, i16* %32068, i64 16
  %32072 = bitcast i16* %32071 to <16 x i16>*
  %32073 = load <16 x i16>, <16 x i16>* %32072, align 2, !tbaa !399
  %32074 = add nsw i64 %31824, %32059
  %32075 = getelementptr inbounds i16, i16* %blur_x917, i64 %32074
  %32076 = bitcast i16* %32075 to <16 x i16>*
  %32077 = load <16 x i16>, <16 x i16>* %32076, align 2, !tbaa !399
  %32078 = getelementptr inbounds i16, i16* %32075, i64 16
  %32079 = bitcast i16* %32078 to <16 x i16>*
  %32080 = load <16 x i16>, <16 x i16>* %32079, align 2, !tbaa !399
  %32081 = add nsw i64 %31827, %32059
  %32082 = getelementptr inbounds i16, i16* %blur_x917, i64 %32081
  %32083 = bitcast i16* %32082 to <16 x i16>*
  %32084 = load <16 x i16>, <16 x i16>* %32083, align 2, !tbaa !399
  %32085 = getelementptr inbounds i16, i16* %32082, i64 16
  %32086 = bitcast i16* %32085 to <16 x i16>*
  %32087 = load <16 x i16>, <16 x i16>* %32086, align 2, !tbaa !399
  %32088 = add nsw i64 %31830, %32059
  %32089 = getelementptr inbounds i16, i16* %blur_x917, i64 %32088
  %32090 = bitcast i16* %32089 to <16 x i16>*
  %32091 = load <16 x i16>, <16 x i16>* %32090, align 2, !tbaa !399
  %32092 = getelementptr inbounds i16, i16* %32089, i64 16
  %32093 = bitcast i16* %32092 to <16 x i16>*
  %32094 = load <16 x i16>, <16 x i16>* %32093, align 2, !tbaa !399
  %32095 = add nsw i64 %31833, %32059
  %32096 = getelementptr inbounds i16, i16* %blur_x917, i64 %32095
  %32097 = bitcast i16* %32096 to <16 x i16>*
  %32098 = load <16 x i16>, <16 x i16>* %32097, align 2, !tbaa !399
  %32099 = getelementptr inbounds i16, i16* %32096, i64 16
  %32100 = bitcast i16* %32099 to <16 x i16>*
  %32101 = load <16 x i16>, <16 x i16>* %32100, align 2, !tbaa !399
  %32102 = add nsw i64 %31836, %32059
  %32103 = getelementptr inbounds i16, i16* %blur_x917, i64 %32102
  %32104 = bitcast i16* %32103 to <16 x i16>*
  %32105 = load <16 x i16>, <16 x i16>* %32104, align 2, !tbaa !399
  %32106 = getelementptr inbounds i16, i16* %32103, i64 16
  %32107 = bitcast i16* %32106 to <16 x i16>*
  %32108 = load <16 x i16>, <16 x i16>* %32107, align 2, !tbaa !399
  %32109 = add <16 x i16> %32070, %32063
  %32110 = add <16 x i16> %32109, %32077
  %32111 = add <16 x i16> %32110, %32084
  %32112 = add <16 x i16> %32111, %32091
  %32113 = add <16 x i16> %32112, %32098
  %32114 = add <16 x i16> %32113, %32105
  %32115 = add <16 x i16> %32073, %32066
  %32116 = add <16 x i16> %32115, %32080
  %32117 = add <16 x i16> %32116, %32087
  %32118 = add <16 x i16> %32117, %32094
  %32119 = add <16 x i16> %32118, %32101
  %32120 = add <16 x i16> %32119, %32108
  %32121 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32114, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32122 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32120, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32123 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32121, <16 x i16> %32114)
  %32124 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32122, <16 x i16> %32120)
  %32125 = shufflevector <16 x i16> %32123, <16 x i16> %32124, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32126 = lshr <32 x i16> %32125, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %32127 = shufflevector <32 x i16> %32126, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32128 = add nsw i64 %31840, %32059
  %32129 = getelementptr inbounds i16, i16* %264, i64 %32128
  %32130 = bitcast i16* %32129 to <16 x i16>*
  store <16 x i16> %32127, <16 x i16>* %32130, align 2, !tbaa !401
  %32131 = shufflevector <32 x i16> %32126, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32132 = getelementptr inbounds i16, i16* %32129, i64 16
  %32133 = bitcast i16* %32132 to <16 x i16>*
  store <16 x i16> %32131, <16 x i16>* %32133, align 2, !tbaa !401
  %32134 = add nuw nsw i32 %blur_y.s0.x.x.rebased1950, 1
  %.not2671 = icmp eq i32 %32134, %t1727937
  br i1 %.not2671, label %"end for blur_y.s0.x.x.rebased1949", label %"for blur_y.s0.x.x.rebased1948"

after_bb1959:                                     ; preds = %"end for blur_y.s0.x.x.rebased1949", %"produce blur_x1962"
  br i1 %298, label %"for blur_y.s0.x.x.rebased1974.preheader", label %"end for blur_y.s0.x.x.rebased1975", !prof !386

"for blur_y.s0.x.x.rebased1974.preheader":        ; preds = %after_bb1959
  %32135 = sext i32 %t1738984 to i64
  %32136 = zext i32 %.pre-phi3618 to i64
  %32137 = mul nsw i64 %32136, %314
  %32138 = sub nsw i64 %32137, %294
  %32139 = zext i32 %.pre-phi3614 to i64
  %32140 = mul nsw i64 %32139, %314
  %32141 = sub nsw i64 %32140, %294
  %32142 = zext i32 %.pre-phi3622 to i64
  %32143 = mul nsw i64 %32142, %314
  %32144 = sub nsw i64 %32143, %294
  %32145 = zext i32 %.pre-phi3628 to i64
  %32146 = mul nsw i64 %32145, %314
  %32147 = sub nsw i64 %32146, %294
  %32148 = zext i32 %.pre-phi3598 to i64
  %32149 = mul nsw i64 %32148, %314
  %32150 = sub nsw i64 %32149, %294
  %32151 = zext i32 %.pre-phi3606 to i64
  %32152 = mul nsw i64 %32151, %314
  %32153 = sub nsw i64 %32152, %294
  %32154 = zext i32 %.pre-phi3602 to i64
  %32155 = mul nsw i64 %32154, %314
  %32156 = sub nsw i64 %32155, %294
  %32157 = sext i32 %a367 to i64
  %32158 = add nsw i64 %32157, 20
  %32159 = mul nsw i64 %32158, %315
  %32160 = add nsw i64 %32159, %318
  br label %"for blur_y.s0.x.x.rebased1974"

"produce blur_x1962":                             ; preds = %"end for blur_y.s0.x.x.rebased1949"
  %32161 = getelementptr inbounds i16, i16* %read_input860, i64 %357
  %32162 = getelementptr inbounds i16, i16* %32161, i64 -31
  %32163 = bitcast i16* %32162 to <16 x i16>*
  %32164 = load <16 x i16>, <16 x i16>* %32163, align 2, !tbaa !396
  %32165 = getelementptr inbounds i16, i16* %32161, i64 -15
  %32166 = bitcast i16* %32165 to <16 x i16>*
  %32167 = load <16 x i16>, <16 x i16>* %32166, align 2, !tbaa !396
  %32168 = getelementptr inbounds i16, i16* %32161, i64 -32
  %32169 = bitcast i16* %32168 to <16 x i16>*
  %32170 = load <16 x i16>, <16 x i16>* %32169, align 2, !tbaa !396
  %32171 = getelementptr inbounds i16, i16* %32161, i64 -16
  %32172 = bitcast i16* %32171 to <16 x i16>*
  %32173 = load <16 x i16>, <16 x i16>* %32172, align 2, !tbaa !396
  %32174 = getelementptr inbounds i16, i16* %32161, i64 -30
  %32175 = bitcast i16* %32174 to <16 x i16>*
  %32176 = load <16 x i16>, <16 x i16>* %32175, align 2, !tbaa !396
  %32177 = getelementptr inbounds i16, i16* %32161, i64 -14
  %32178 = bitcast i16* %32177 to <16 x i16>*
  %32179 = load <16 x i16>, <16 x i16>* %32178, align 2, !tbaa !396
  %32180 = getelementptr inbounds i16, i16* %32161, i64 -29
  %32181 = bitcast i16* %32180 to <16 x i16>*
  %32182 = load <16 x i16>, <16 x i16>* %32181, align 2, !tbaa !396
  %32183 = getelementptr inbounds i16, i16* %32161, i64 -13
  %32184 = bitcast i16* %32183 to <16 x i16>*
  %32185 = load <16 x i16>, <16 x i16>* %32184, align 2, !tbaa !396
  %32186 = getelementptr inbounds i16, i16* %32161, i64 -28
  %32187 = bitcast i16* %32186 to <16 x i16>*
  %32188 = load <16 x i16>, <16 x i16>* %32187, align 2, !tbaa !396
  %32189 = getelementptr inbounds i16, i16* %32161, i64 -12
  %32190 = bitcast i16* %32189 to <16 x i16>*
  %32191 = load <16 x i16>, <16 x i16>* %32190, align 2, !tbaa !396
  %32192 = getelementptr inbounds i16, i16* %32161, i64 -26
  %32193 = bitcast i16* %32192 to <16 x i16>*
  %32194 = load <16 x i16>, <16 x i16>* %32193, align 2, !tbaa !396
  %32195 = getelementptr inbounds i16, i16* %32161, i64 -10
  %32196 = bitcast i16* %32195 to <16 x i16>*
  %32197 = load <16 x i16>, <16 x i16>* %32196, align 2, !tbaa !396
  %32198 = getelementptr inbounds i16, i16* %32161, i64 -27
  %32199 = bitcast i16* %32198 to <16 x i16>*
  %32200 = load <16 x i16>, <16 x i16>* %32199, align 2, !tbaa !396
  %32201 = getelementptr inbounds i16, i16* %32161, i64 -11
  %32202 = bitcast i16* %32201 to <16 x i16>*
  %32203 = load <16 x i16>, <16 x i16>* %32202, align 2, !tbaa !396
  %32204 = add <16 x i16> %32170, %32164
  %32205 = add <16 x i16> %32204, %32176
  %32206 = add <16 x i16> %32205, %32182
  %32207 = add <16 x i16> %32206, %32188
  %32208 = add <16 x i16> %32207, %32194
  %32209 = add <16 x i16> %32208, %32200
  %32210 = add <16 x i16> %32173, %32167
  %32211 = add <16 x i16> %32210, %32179
  %32212 = add <16 x i16> %32211, %32185
  %32213 = add <16 x i16> %32212, %32191
  %32214 = add <16 x i16> %32213, %32197
  %32215 = add <16 x i16> %32214, %32203
  %32216 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32209, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32217 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32215, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32218 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32216, <16 x i16> %32209)
  %32219 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32217, <16 x i16> %32215)
  %32220 = shufflevector <16 x i16> %32218, <16 x i16> %32219, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32221 = lshr <32 x i16> %32220, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %32222 = shufflevector <32 x i16> %32221, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32223 = zext i32 %.pre-phi3606 to i64
  %32224 = mul nsw i64 %295, %32223
  %32225 = add nsw i64 %297, %32224
  %32226 = getelementptr inbounds i16, i16* %blur_x917, i64 %32225
  %32227 = getelementptr inbounds i16, i16* %32226, i64 -32
  %32228 = bitcast i16* %32227 to <16 x i16>*
  store <16 x i16> %32222, <16 x i16>* %32228, align 2, !tbaa !399
  %32229 = shufflevector <32 x i16> %32221, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32230 = getelementptr inbounds i16, i16* %32226, i64 -16
  %32231 = bitcast i16* %32230 to <16 x i16>*
  store <16 x i16> %32229, <16 x i16>* %32231, align 2, !tbaa !399
  %32232 = zext i32 %.pre-phi3618 to i64
  %32233 = mul nsw i64 %32232, %314
  %32234 = add nsw i64 %32233, %292
  %32235 = getelementptr inbounds i16, i16* %blur_x917, i64 %32234
  %32236 = getelementptr inbounds i16, i16* %32235, i64 -32
  %32237 = bitcast i16* %32236 to <16 x i16>*
  %32238 = load <16 x i16>, <16 x i16>* %32237, align 2, !tbaa !399
  %32239 = getelementptr inbounds i16, i16* %32235, i64 -16
  %32240 = bitcast i16* %32239 to <16 x i16>*
  %32241 = load <16 x i16>, <16 x i16>* %32240, align 2, !tbaa !399
  %32242 = zext i32 %.pre-phi3614 to i64
  %32243 = mul nsw i64 %32242, %314
  %32244 = add nsw i64 %32243, %292
  %32245 = getelementptr inbounds i16, i16* %blur_x917, i64 %32244
  %32246 = getelementptr inbounds i16, i16* %32245, i64 -32
  %32247 = bitcast i16* %32246 to <16 x i16>*
  %32248 = load <16 x i16>, <16 x i16>* %32247, align 2, !tbaa !399
  %32249 = getelementptr inbounds i16, i16* %32245, i64 -16
  %32250 = bitcast i16* %32249 to <16 x i16>*
  %32251 = load <16 x i16>, <16 x i16>* %32250, align 2, !tbaa !399
  %32252 = zext i32 %.pre-phi3622 to i64
  %32253 = mul nsw i64 %32252, %314
  %32254 = add nsw i64 %32253, %292
  %32255 = getelementptr inbounds i16, i16* %blur_x917, i64 %32254
  %32256 = getelementptr inbounds i16, i16* %32255, i64 -32
  %32257 = bitcast i16* %32256 to <16 x i16>*
  %32258 = load <16 x i16>, <16 x i16>* %32257, align 2, !tbaa !399
  %32259 = getelementptr inbounds i16, i16* %32255, i64 -16
  %32260 = bitcast i16* %32259 to <16 x i16>*
  %32261 = load <16 x i16>, <16 x i16>* %32260, align 2, !tbaa !399
  %32262 = zext i32 %.pre-phi3628 to i64
  %32263 = mul nsw i64 %32262, %314
  %32264 = add nsw i64 %32263, %292
  %32265 = getelementptr inbounds i16, i16* %blur_x917, i64 %32264
  %32266 = getelementptr inbounds i16, i16* %32265, i64 -32
  %32267 = bitcast i16* %32266 to <16 x i16>*
  %32268 = load <16 x i16>, <16 x i16>* %32267, align 2, !tbaa !399
  %32269 = getelementptr inbounds i16, i16* %32265, i64 -16
  %32270 = bitcast i16* %32269 to <16 x i16>*
  %32271 = load <16 x i16>, <16 x i16>* %32270, align 2, !tbaa !399
  %32272 = zext i32 %.pre-phi3598 to i64
  %32273 = mul nsw i64 %32272, %314
  %32274 = add nsw i64 %32273, %292
  %32275 = getelementptr inbounds i16, i16* %blur_x917, i64 %32274
  %32276 = getelementptr inbounds i16, i16* %32275, i64 -32
  %32277 = bitcast i16* %32276 to <16 x i16>*
  %32278 = load <16 x i16>, <16 x i16>* %32277, align 2, !tbaa !399
  %32279 = getelementptr inbounds i16, i16* %32275, i64 -16
  %32280 = bitcast i16* %32279 to <16 x i16>*
  %32281 = load <16 x i16>, <16 x i16>* %32280, align 2, !tbaa !399
  %32282 = mul nsw i64 %32223, %314
  %32283 = add nsw i64 %32282, %292
  %32284 = getelementptr inbounds i16, i16* %blur_x917, i64 %32283
  %32285 = getelementptr inbounds i16, i16* %32284, i64 -32
  %32286 = bitcast i16* %32285 to <16 x i16>*
  %32287 = load <16 x i16>, <16 x i16>* %32286, align 2, !tbaa !399
  %32288 = getelementptr inbounds i16, i16* %32284, i64 -16
  %32289 = bitcast i16* %32288 to <16 x i16>*
  %32290 = load <16 x i16>, <16 x i16>* %32289, align 2, !tbaa !399
  %32291 = zext i32 %.pre-phi3602 to i64
  %32292 = mul nsw i64 %32291, %314
  %32293 = add nsw i64 %32292, %292
  %32294 = getelementptr inbounds i16, i16* %blur_x917, i64 %32293
  %32295 = getelementptr inbounds i16, i16* %32294, i64 -32
  %32296 = bitcast i16* %32295 to <16 x i16>*
  %32297 = load <16 x i16>, <16 x i16>* %32296, align 2, !tbaa !399
  %32298 = getelementptr inbounds i16, i16* %32294, i64 -16
  %32299 = bitcast i16* %32298 to <16 x i16>*
  %32300 = load <16 x i16>, <16 x i16>* %32299, align 2, !tbaa !399
  %32301 = add <16 x i16> %32248, %32238
  %32302 = add <16 x i16> %32301, %32258
  %32303 = add <16 x i16> %32302, %32268
  %32304 = add <16 x i16> %32303, %32278
  %32305 = add <16 x i16> %32304, %32287
  %32306 = add <16 x i16> %32305, %32297
  %32307 = add <16 x i16> %32251, %32241
  %32308 = add <16 x i16> %32307, %32261
  %32309 = add <16 x i16> %32308, %32271
  %32310 = add <16 x i16> %32309, %32281
  %32311 = add <16 x i16> %32310, %32290
  %32312 = add <16 x i16> %32311, %32300
  %32313 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32306, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32314 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32312, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32315 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32313, <16 x i16> %32306)
  %32316 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32314, <16 x i16> %32312)
  %32317 = shufflevector <16 x i16> %32315, <16 x i16> %32316, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32318 = lshr <32 x i16> %32317, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %32319 = shufflevector <32 x i16> %32318, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32320 = sext i32 %a367 to i64
  %32321 = add nsw i64 %32320, 20
  %32322 = mul nsw i64 %32321, %315
  %32323 = add nsw i64 %317, %32322
  %32324 = getelementptr inbounds i16, i16* %264, i64 %32323
  %32325 = getelementptr inbounds i16, i16* %32324, i64 -32
  %32326 = bitcast i16* %32325 to <16 x i16>*
  store <16 x i16> %32319, <16 x i16>* %32326, align 2, !tbaa !401
  %32327 = shufflevector <32 x i16> %32318, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32328 = getelementptr inbounds i16, i16* %32324, i64 -16
  %32329 = bitcast i16* %32328 to <16 x i16>*
  store <16 x i16> %32327, <16 x i16>* %32329, align 2, !tbaa !401
  br label %after_bb1959

"for blur_y.s0.x.x.rebased1974":                  ; preds = %"for blur_y.s0.x.x.rebased1974.preheader", %"consume blur_x1983"
  %indvars.iv3465 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1974.preheader" ], [ %indvars.iv.next3466, %"consume blur_x1983" ]
  %32330 = add nsw i64 %indvars.iv3465, %299
  %32331 = icmp slt i64 %32330, 1
  %32332 = trunc i64 %32330 to i32
  %32333 = shl nsw i32 %32332, 5
  %32334 = icmp sgt i32 %202, %32333
  %32335 = or i1 %32331, %32334
  br i1 %32335, label %"produce blur_x1981", label %"for blur_y.s0.x.x.rebased1974.consume blur_x1983_crit_edge"

"for blur_y.s0.x.x.rebased1974.consume blur_x1983_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1974"
  %.pre3667 = shl nsw i64 %32330, 5
  br label %"consume blur_x1983"

"end for blur_y.s0.x.x.rebased1975":              ; preds = %"consume blur_x1983", %after_bb1959
  br i1 %300, label %"for blur_y.s0.x.x.rebased1991.preheader", label %"end for blur_y.s0.x.x.rebased1992", !prof !386

"for blur_y.s0.x.x.rebased1991.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1975"
  %32336 = sext i32 %t1738984 to i64
  %32337 = zext i32 %.pre-phi3618 to i64
  %32338 = mul nsw i64 %32337, %314
  %32339 = sub nsw i64 %32338, %294
  %32340 = zext i32 %.pre-phi3614 to i64
  %32341 = mul nsw i64 %32340, %314
  %32342 = sub nsw i64 %32341, %294
  %32343 = zext i32 %.pre-phi3622 to i64
  %32344 = mul nsw i64 %32343, %314
  %32345 = sub nsw i64 %32344, %294
  %32346 = zext i32 %.pre-phi3628 to i64
  %32347 = mul nsw i64 %32346, %314
  %32348 = sub nsw i64 %32347, %294
  %32349 = zext i32 %.pre-phi3598 to i64
  %32350 = mul nsw i64 %32349, %314
  %32351 = sub nsw i64 %32350, %294
  %32352 = zext i32 %.pre-phi3606 to i64
  %32353 = mul nsw i64 %32352, %314
  %32354 = sub nsw i64 %32353, %294
  %32355 = zext i32 %.pre-phi3602 to i64
  %32356 = mul nsw i64 %32355, %314
  %32357 = sub nsw i64 %32356, %294
  %32358 = sext i32 %a367 to i64
  %32359 = add nsw i64 %32358, 20
  %32360 = mul nsw i64 %32359, %315
  %32361 = add nsw i64 %32360, %318
  br label %"for blur_y.s0.x.x.rebased1991"

"produce blur_x1981":                             ; preds = %"for blur_y.s0.x.x.rebased1974"
  %t10721982 = add nsw i32 %32333, %t20811971
  %32362 = sext i32 %t10721982 to i64
  %32363 = getelementptr inbounds i16, i16* %read_input860, i64 %32362
  %32364 = getelementptr inbounds i16, i16* %32363, i64 1
  %32365 = bitcast i16* %32364 to <16 x i16>*
  %32366 = load <16 x i16>, <16 x i16>* %32365, align 2, !tbaa !396
  %32367 = getelementptr inbounds i16, i16* %32363, i64 17
  %32368 = bitcast i16* %32367 to <16 x i16>*
  %32369 = load <16 x i16>, <16 x i16>* %32368, align 2, !tbaa !396
  %32370 = bitcast i16* %32363 to <16 x i16>*
  %32371 = load <16 x i16>, <16 x i16>* %32370, align 2, !tbaa !396
  %32372 = getelementptr inbounds i16, i16* %32363, i64 16
  %32373 = bitcast i16* %32372 to <16 x i16>*
  %32374 = load <16 x i16>, <16 x i16>* %32373, align 2, !tbaa !396
  %32375 = getelementptr inbounds i16, i16* %32363, i64 2
  %32376 = bitcast i16* %32375 to <16 x i16>*
  %32377 = load <16 x i16>, <16 x i16>* %32376, align 2, !tbaa !396
  %32378 = getelementptr inbounds i16, i16* %32363, i64 18
  %32379 = bitcast i16* %32378 to <16 x i16>*
  %32380 = load <16 x i16>, <16 x i16>* %32379, align 2, !tbaa !396
  %32381 = getelementptr inbounds i16, i16* %32363, i64 3
  %32382 = bitcast i16* %32381 to <16 x i16>*
  %32383 = load <16 x i16>, <16 x i16>* %32382, align 2, !tbaa !396
  %32384 = getelementptr inbounds i16, i16* %32363, i64 19
  %32385 = bitcast i16* %32384 to <16 x i16>*
  %32386 = load <16 x i16>, <16 x i16>* %32385, align 2, !tbaa !396
  %32387 = getelementptr inbounds i16, i16* %32363, i64 4
  %32388 = bitcast i16* %32387 to <16 x i16>*
  %32389 = load <16 x i16>, <16 x i16>* %32388, align 2, !tbaa !396
  %32390 = getelementptr inbounds i16, i16* %32363, i64 20
  %32391 = bitcast i16* %32390 to <16 x i16>*
  %32392 = load <16 x i16>, <16 x i16>* %32391, align 2, !tbaa !396
  %32393 = getelementptr inbounds i16, i16* %32363, i64 6
  %32394 = bitcast i16* %32393 to <16 x i16>*
  %32395 = load <16 x i16>, <16 x i16>* %32394, align 2, !tbaa !396
  %32396 = getelementptr inbounds i16, i16* %32363, i64 22
  %32397 = bitcast i16* %32396 to <16 x i16>*
  %32398 = load <16 x i16>, <16 x i16>* %32397, align 2, !tbaa !396
  %32399 = getelementptr inbounds i16, i16* %32363, i64 5
  %32400 = bitcast i16* %32399 to <16 x i16>*
  %32401 = load <16 x i16>, <16 x i16>* %32400, align 2, !tbaa !396
  %32402 = getelementptr inbounds i16, i16* %32363, i64 21
  %32403 = bitcast i16* %32402 to <16 x i16>*
  %32404 = load <16 x i16>, <16 x i16>* %32403, align 2, !tbaa !396
  %32405 = add <16 x i16> %32371, %32366
  %32406 = add <16 x i16> %32405, %32377
  %32407 = add <16 x i16> %32406, %32383
  %32408 = add <16 x i16> %32407, %32389
  %32409 = add <16 x i16> %32408, %32395
  %32410 = add <16 x i16> %32409, %32401
  %32411 = add <16 x i16> %32374, %32369
  %32412 = add <16 x i16> %32411, %32380
  %32413 = add <16 x i16> %32412, %32386
  %32414 = add <16 x i16> %32413, %32392
  %32415 = add <16 x i16> %32414, %32398
  %32416 = add <16 x i16> %32415, %32404
  %32417 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32410, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32418 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32416, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32419 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32417, <16 x i16> %32410)
  %32420 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32418, <16 x i16> %32416)
  %32421 = shufflevector <16 x i16> %32419, <16 x i16> %32420, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32422 = lshr <32 x i16> %32421, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %32423 = shufflevector <32 x i16> %32422, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32424 = shl nsw i64 %32330, 5
  %32425 = add nsw i64 %32424, %32135
  %32426 = getelementptr inbounds i16, i16* %blur_x917, i64 %32425
  %32427 = bitcast i16* %32426 to <16 x i16>*
  store <16 x i16> %32423, <16 x i16>* %32427, align 2, !tbaa !399
  %32428 = shufflevector <32 x i16> %32422, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32429 = getelementptr inbounds i16, i16* %32426, i64 16
  %32430 = bitcast i16* %32429 to <16 x i16>*
  store <16 x i16> %32428, <16 x i16>* %32430, align 2, !tbaa !399
  br label %"consume blur_x1983"

"consume blur_x1983":                             ; preds = %"for blur_y.s0.x.x.rebased1974.consume blur_x1983_crit_edge", %"produce blur_x1981"
  %.pre-phi3668 = phi i64 [ %.pre3667, %"for blur_y.s0.x.x.rebased1974.consume blur_x1983_crit_edge" ], [ %32424, %"produce blur_x1981" ]
  %32431 = add nsw i64 %32138, %.pre-phi3668
  %32432 = getelementptr inbounds i16, i16* %blur_x917, i64 %32431
  %32433 = bitcast i16* %32432 to <16 x i16>*
  %32434 = load <16 x i16>, <16 x i16>* %32433, align 2, !tbaa !399
  %32435 = getelementptr inbounds i16, i16* %32432, i64 16
  %32436 = bitcast i16* %32435 to <16 x i16>*
  %32437 = load <16 x i16>, <16 x i16>* %32436, align 2, !tbaa !399
  %32438 = add nsw i64 %32141, %.pre-phi3668
  %32439 = getelementptr inbounds i16, i16* %blur_x917, i64 %32438
  %32440 = bitcast i16* %32439 to <16 x i16>*
  %32441 = load <16 x i16>, <16 x i16>* %32440, align 2, !tbaa !399
  %32442 = getelementptr inbounds i16, i16* %32439, i64 16
  %32443 = bitcast i16* %32442 to <16 x i16>*
  %32444 = load <16 x i16>, <16 x i16>* %32443, align 2, !tbaa !399
  %32445 = add nsw i64 %32144, %.pre-phi3668
  %32446 = getelementptr inbounds i16, i16* %blur_x917, i64 %32445
  %32447 = bitcast i16* %32446 to <16 x i16>*
  %32448 = load <16 x i16>, <16 x i16>* %32447, align 2, !tbaa !399
  %32449 = getelementptr inbounds i16, i16* %32446, i64 16
  %32450 = bitcast i16* %32449 to <16 x i16>*
  %32451 = load <16 x i16>, <16 x i16>* %32450, align 2, !tbaa !399
  %32452 = add nsw i64 %32147, %.pre-phi3668
  %32453 = getelementptr inbounds i16, i16* %blur_x917, i64 %32452
  %32454 = bitcast i16* %32453 to <16 x i16>*
  %32455 = load <16 x i16>, <16 x i16>* %32454, align 2, !tbaa !399
  %32456 = getelementptr inbounds i16, i16* %32453, i64 16
  %32457 = bitcast i16* %32456 to <16 x i16>*
  %32458 = load <16 x i16>, <16 x i16>* %32457, align 2, !tbaa !399
  %32459 = add nsw i64 %32150, %.pre-phi3668
  %32460 = getelementptr inbounds i16, i16* %blur_x917, i64 %32459
  %32461 = bitcast i16* %32460 to <16 x i16>*
  %32462 = load <16 x i16>, <16 x i16>* %32461, align 2, !tbaa !399
  %32463 = getelementptr inbounds i16, i16* %32460, i64 16
  %32464 = bitcast i16* %32463 to <16 x i16>*
  %32465 = load <16 x i16>, <16 x i16>* %32464, align 2, !tbaa !399
  %32466 = add nsw i64 %32153, %.pre-phi3668
  %32467 = getelementptr inbounds i16, i16* %blur_x917, i64 %32466
  %32468 = bitcast i16* %32467 to <16 x i16>*
  %32469 = load <16 x i16>, <16 x i16>* %32468, align 2, !tbaa !399
  %32470 = getelementptr inbounds i16, i16* %32467, i64 16
  %32471 = bitcast i16* %32470 to <16 x i16>*
  %32472 = load <16 x i16>, <16 x i16>* %32471, align 2, !tbaa !399
  %32473 = add nsw i64 %32156, %.pre-phi3668
  %32474 = getelementptr inbounds i16, i16* %blur_x917, i64 %32473
  %32475 = bitcast i16* %32474 to <16 x i16>*
  %32476 = load <16 x i16>, <16 x i16>* %32475, align 2, !tbaa !399
  %32477 = getelementptr inbounds i16, i16* %32474, i64 16
  %32478 = bitcast i16* %32477 to <16 x i16>*
  %32479 = load <16 x i16>, <16 x i16>* %32478, align 2, !tbaa !399
  %32480 = add <16 x i16> %32441, %32434
  %32481 = add <16 x i16> %32480, %32448
  %32482 = add <16 x i16> %32481, %32455
  %32483 = add <16 x i16> %32482, %32462
  %32484 = add <16 x i16> %32483, %32469
  %32485 = add <16 x i16> %32484, %32476
  %32486 = add <16 x i16> %32444, %32437
  %32487 = add <16 x i16> %32486, %32451
  %32488 = add <16 x i16> %32487, %32458
  %32489 = add <16 x i16> %32488, %32465
  %32490 = add <16 x i16> %32489, %32472
  %32491 = add <16 x i16> %32490, %32479
  %32492 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32485, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32493 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32491, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32494 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32492, <16 x i16> %32485)
  %32495 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32493, <16 x i16> %32491)
  %32496 = shufflevector <16 x i16> %32494, <16 x i16> %32495, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32497 = lshr <32 x i16> %32496, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %32498 = shufflevector <32 x i16> %32497, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32499 = add nsw i64 %32160, %.pre-phi3668
  %32500 = getelementptr inbounds i16, i16* %264, i64 %32499
  %32501 = bitcast i16* %32500 to <16 x i16>*
  store <16 x i16> %32498, <16 x i16>* %32501, align 2, !tbaa !401
  %32502 = shufflevector <32 x i16> %32497, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32503 = getelementptr inbounds i16, i16* %32500, i64 16
  %32504 = bitcast i16* %32503 to <16 x i16>*
  store <16 x i16> %32502, <16 x i16>* %32504, align 2, !tbaa !401
  %indvars.iv.next3466 = add nuw nsw i64 %indvars.iv3465, 1
  %.not2670 = icmp eq i64 %indvars.iv.next3466, %386
  br i1 %.not2670, label %"end for blur_y.s0.x.x.rebased1975", label %"for blur_y.s0.x.x.rebased1974"

"for blur_y.s0.x.x.rebased1991":                  ; preds = %"for blur_y.s0.x.x.rebased1991.preheader", %"consume blur_x2001"
  %blur_y.s0.x.x.rebased1993 = phi i32 [ %32655, %"consume blur_x2001" ], [ 0, %"for blur_y.s0.x.x.rebased1991.preheader" ]
  %32505 = add nsw i32 %blur_y.s0.x.x.rebased1993, %t1670852
  %a600 = shl nsw i32 %32505, 5
  %32506 = icmp sgt i32 %a355, %a600
  %b606 = select i1 %32506, i32 %a600, i32 %a355
  %32507 = icmp slt i32 %32505, 1
  %32508 = icmp sgt i32 %202, %a600
  %32509 = or i1 %32507, %32508
  br i1 %32509, label %"produce blur_x1998", label %"consume blur_x2001"

"end for blur_y.s0.x.x.rebased1992":              ; preds = %"consume blur_x2001", %"end for blur_y.s0.x.x.rebased1975"
  br i1 %232, label %"produce blur_x2005", label %after_bb2002

"produce blur_x1998":                             ; preds = %"for blur_y.s0.x.x.rebased1991"
  %32510 = icmp slt i32 %b606, %202
  %blur_x.s0.x.v1.base.s1999 = select i1 %32510, i32 %b606, i32 %202
  %t10772000 = add nsw i32 %blur_x.s0.x.v1.base.s1999, %t20811971
  %32511 = sext i32 %t10772000 to i64
  %32512 = getelementptr inbounds i16, i16* %read_input860, i64 %32511
  %32513 = getelementptr inbounds i16, i16* %32512, i64 1
  %32514 = bitcast i16* %32513 to <16 x i16>*
  %32515 = load <16 x i16>, <16 x i16>* %32514, align 2, !tbaa !396
  %32516 = getelementptr inbounds i16, i16* %32512, i64 17
  %32517 = bitcast i16* %32516 to <16 x i16>*
  %32518 = load <16 x i16>, <16 x i16>* %32517, align 2, !tbaa !396
  %32519 = bitcast i16* %32512 to <16 x i16>*
  %32520 = load <16 x i16>, <16 x i16>* %32519, align 2, !tbaa !396
  %32521 = getelementptr inbounds i16, i16* %32512, i64 16
  %32522 = bitcast i16* %32521 to <16 x i16>*
  %32523 = load <16 x i16>, <16 x i16>* %32522, align 2, !tbaa !396
  %32524 = getelementptr inbounds i16, i16* %32512, i64 2
  %32525 = bitcast i16* %32524 to <16 x i16>*
  %32526 = load <16 x i16>, <16 x i16>* %32525, align 2, !tbaa !396
  %32527 = getelementptr inbounds i16, i16* %32512, i64 18
  %32528 = bitcast i16* %32527 to <16 x i16>*
  %32529 = load <16 x i16>, <16 x i16>* %32528, align 2, !tbaa !396
  %32530 = getelementptr inbounds i16, i16* %32512, i64 3
  %32531 = bitcast i16* %32530 to <16 x i16>*
  %32532 = load <16 x i16>, <16 x i16>* %32531, align 2, !tbaa !396
  %32533 = getelementptr inbounds i16, i16* %32512, i64 19
  %32534 = bitcast i16* %32533 to <16 x i16>*
  %32535 = load <16 x i16>, <16 x i16>* %32534, align 2, !tbaa !396
  %32536 = getelementptr inbounds i16, i16* %32512, i64 4
  %32537 = bitcast i16* %32536 to <16 x i16>*
  %32538 = load <16 x i16>, <16 x i16>* %32537, align 2, !tbaa !396
  %32539 = getelementptr inbounds i16, i16* %32512, i64 20
  %32540 = bitcast i16* %32539 to <16 x i16>*
  %32541 = load <16 x i16>, <16 x i16>* %32540, align 2, !tbaa !396
  %32542 = getelementptr inbounds i16, i16* %32512, i64 6
  %32543 = bitcast i16* %32542 to <16 x i16>*
  %32544 = load <16 x i16>, <16 x i16>* %32543, align 2, !tbaa !396
  %32545 = getelementptr inbounds i16, i16* %32512, i64 22
  %32546 = bitcast i16* %32545 to <16 x i16>*
  %32547 = load <16 x i16>, <16 x i16>* %32546, align 2, !tbaa !396
  %32548 = getelementptr inbounds i16, i16* %32512, i64 5
  %32549 = bitcast i16* %32548 to <16 x i16>*
  %32550 = load <16 x i16>, <16 x i16>* %32549, align 2, !tbaa !396
  %32551 = getelementptr inbounds i16, i16* %32512, i64 21
  %32552 = bitcast i16* %32551 to <16 x i16>*
  %32553 = load <16 x i16>, <16 x i16>* %32552, align 2, !tbaa !396
  %32554 = add <16 x i16> %32520, %32515
  %32555 = add <16 x i16> %32554, %32526
  %32556 = add <16 x i16> %32555, %32532
  %32557 = add <16 x i16> %32556, %32538
  %32558 = add <16 x i16> %32557, %32544
  %32559 = add <16 x i16> %32558, %32550
  %32560 = add <16 x i16> %32523, %32518
  %32561 = add <16 x i16> %32560, %32529
  %32562 = add <16 x i16> %32561, %32535
  %32563 = add <16 x i16> %32562, %32541
  %32564 = add <16 x i16> %32563, %32547
  %32565 = add <16 x i16> %32564, %32553
  %32566 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32559, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32567 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32565, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32568 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32566, <16 x i16> %32559)
  %32569 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32567, <16 x i16> %32565)
  %32570 = shufflevector <16 x i16> %32568, <16 x i16> %32569, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32571 = lshr <32 x i16> %32570, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %32572 = shufflevector <32 x i16> %32571, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32573 = sext i32 %blur_x.s0.x.v1.base.s1999 to i64
  %32574 = add nsw i64 %32573, %32336
  %32575 = getelementptr inbounds i16, i16* %blur_x917, i64 %32574
  %32576 = bitcast i16* %32575 to <16 x i16>*
  store <16 x i16> %32572, <16 x i16>* %32576, align 2, !tbaa !399
  %32577 = shufflevector <32 x i16> %32571, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32578 = getelementptr inbounds i16, i16* %32575, i64 16
  %32579 = bitcast i16* %32578 to <16 x i16>*
  store <16 x i16> %32577, <16 x i16>* %32579, align 2, !tbaa !399
  br label %"consume blur_x2001"

"consume blur_x2001":                             ; preds = %"for blur_y.s0.x.x.rebased1991", %"produce blur_x1998"
  %32580 = sext i32 %b606 to i64
  %32581 = add nsw i64 %32339, %32580
  %32582 = getelementptr inbounds i16, i16* %blur_x917, i64 %32581
  %32583 = bitcast i16* %32582 to <16 x i16>*
  %32584 = load <16 x i16>, <16 x i16>* %32583, align 2, !tbaa !399
  %32585 = getelementptr inbounds i16, i16* %32582, i64 16
  %32586 = bitcast i16* %32585 to <16 x i16>*
  %32587 = load <16 x i16>, <16 x i16>* %32586, align 2, !tbaa !399
  %32588 = add nsw i64 %32342, %32580
  %32589 = getelementptr inbounds i16, i16* %blur_x917, i64 %32588
  %32590 = bitcast i16* %32589 to <16 x i16>*
  %32591 = load <16 x i16>, <16 x i16>* %32590, align 2, !tbaa !399
  %32592 = getelementptr inbounds i16, i16* %32589, i64 16
  %32593 = bitcast i16* %32592 to <16 x i16>*
  %32594 = load <16 x i16>, <16 x i16>* %32593, align 2, !tbaa !399
  %32595 = add nsw i64 %32345, %32580
  %32596 = getelementptr inbounds i16, i16* %blur_x917, i64 %32595
  %32597 = bitcast i16* %32596 to <16 x i16>*
  %32598 = load <16 x i16>, <16 x i16>* %32597, align 2, !tbaa !399
  %32599 = getelementptr inbounds i16, i16* %32596, i64 16
  %32600 = bitcast i16* %32599 to <16 x i16>*
  %32601 = load <16 x i16>, <16 x i16>* %32600, align 2, !tbaa !399
  %32602 = add nsw i64 %32348, %32580
  %32603 = getelementptr inbounds i16, i16* %blur_x917, i64 %32602
  %32604 = bitcast i16* %32603 to <16 x i16>*
  %32605 = load <16 x i16>, <16 x i16>* %32604, align 2, !tbaa !399
  %32606 = getelementptr inbounds i16, i16* %32603, i64 16
  %32607 = bitcast i16* %32606 to <16 x i16>*
  %32608 = load <16 x i16>, <16 x i16>* %32607, align 2, !tbaa !399
  %32609 = add nsw i64 %32351, %32580
  %32610 = getelementptr inbounds i16, i16* %blur_x917, i64 %32609
  %32611 = bitcast i16* %32610 to <16 x i16>*
  %32612 = load <16 x i16>, <16 x i16>* %32611, align 2, !tbaa !399
  %32613 = getelementptr inbounds i16, i16* %32610, i64 16
  %32614 = bitcast i16* %32613 to <16 x i16>*
  %32615 = load <16 x i16>, <16 x i16>* %32614, align 2, !tbaa !399
  %32616 = add nsw i64 %32354, %32580
  %32617 = getelementptr inbounds i16, i16* %blur_x917, i64 %32616
  %32618 = bitcast i16* %32617 to <16 x i16>*
  %32619 = load <16 x i16>, <16 x i16>* %32618, align 2, !tbaa !399
  %32620 = getelementptr inbounds i16, i16* %32617, i64 16
  %32621 = bitcast i16* %32620 to <16 x i16>*
  %32622 = load <16 x i16>, <16 x i16>* %32621, align 2, !tbaa !399
  %32623 = add nsw i64 %32357, %32580
  %32624 = getelementptr inbounds i16, i16* %blur_x917, i64 %32623
  %32625 = bitcast i16* %32624 to <16 x i16>*
  %32626 = load <16 x i16>, <16 x i16>* %32625, align 2, !tbaa !399
  %32627 = getelementptr inbounds i16, i16* %32624, i64 16
  %32628 = bitcast i16* %32627 to <16 x i16>*
  %32629 = load <16 x i16>, <16 x i16>* %32628, align 2, !tbaa !399
  %32630 = add <16 x i16> %32591, %32584
  %32631 = add <16 x i16> %32630, %32598
  %32632 = add <16 x i16> %32631, %32605
  %32633 = add <16 x i16> %32632, %32612
  %32634 = add <16 x i16> %32633, %32619
  %32635 = add <16 x i16> %32634, %32626
  %32636 = add <16 x i16> %32594, %32587
  %32637 = add <16 x i16> %32636, %32601
  %32638 = add <16 x i16> %32637, %32608
  %32639 = add <16 x i16> %32638, %32615
  %32640 = add <16 x i16> %32639, %32622
  %32641 = add <16 x i16> %32640, %32629
  %32642 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32635, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32643 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32641, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32644 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32642, <16 x i16> %32635)
  %32645 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32643, <16 x i16> %32641)
  %32646 = shufflevector <16 x i16> %32644, <16 x i16> %32645, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32647 = lshr <32 x i16> %32646, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %32648 = shufflevector <32 x i16> %32647, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32649 = add nsw i64 %32361, %32580
  %32650 = getelementptr inbounds i16, i16* %264, i64 %32649
  %32651 = bitcast i16* %32650 to <16 x i16>*
  store <16 x i16> %32648, <16 x i16>* %32651, align 2, !tbaa !401
  %32652 = shufflevector <32 x i16> %32647, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32653 = getelementptr inbounds i16, i16* %32650, i64 16
  %32654 = bitcast i16* %32653 to <16 x i16>*
  store <16 x i16> %32652, <16 x i16>* %32654, align 2, !tbaa !401
  %32655 = add nuw nsw i32 %blur_y.s0.x.x.rebased1993, 1
  %.not2669 = icmp eq i32 %32655, %t1727937
  br i1 %.not2669, label %"end for blur_y.s0.x.x.rebased1992", label %"for blur_y.s0.x.x.rebased1991"

after_bb2002:                                     ; preds = %"end for blur_y.s0.x.x.rebased1992", %"produce blur_x2005"
  br i1 %298, label %"for blur_y.s0.x.x.rebased2017.preheader", label %"end for blur_y.s0.x.x.rebased2018", !prof !386

"for blur_y.s0.x.x.rebased2017.preheader":        ; preds = %after_bb2002
  %32656 = sext i32 %t17441014 to i64
  %32657 = zext i32 %.pre-phi3622 to i64
  %32658 = mul nsw i64 %32657, %314
  %32659 = sub nsw i64 %32658, %294
  %32660 = zext i32 %.pre-phi3618 to i64
  %32661 = mul nsw i64 %32660, %314
  %32662 = sub nsw i64 %32661, %294
  %32663 = zext i32 %.pre-phi3628 to i64
  %32664 = mul nsw i64 %32663, %314
  %32665 = sub nsw i64 %32664, %294
  %32666 = zext i32 %.pre-phi3598 to i64
  %32667 = mul nsw i64 %32666, %314
  %32668 = sub nsw i64 %32667, %294
  %32669 = zext i32 %.pre-phi3602 to i64
  %32670 = mul nsw i64 %32669, %314
  %32671 = sub nsw i64 %32670, %294
  %32672 = zext i32 %.pre-phi3610 to i64
  %32673 = mul nsw i64 %32672, %314
  %32674 = sub nsw i64 %32673, %294
  %32675 = zext i32 %.pre-phi3606 to i64
  %32676 = mul nsw i64 %32675, %314
  %32677 = sub nsw i64 %32676, %294
  %32678 = sext i32 %a367 to i64
  %32679 = add nsw i64 %32678, 21
  %32680 = mul nsw i64 %32679, %315
  %32681 = add nsw i64 %32680, %318
  br label %"for blur_y.s0.x.x.rebased2017"

"produce blur_x2005":                             ; preds = %"end for blur_y.s0.x.x.rebased1992"
  %32682 = getelementptr inbounds i16, i16* %read_input860, i64 %359
  %32683 = getelementptr inbounds i16, i16* %32682, i64 -31
  %32684 = bitcast i16* %32683 to <16 x i16>*
  %32685 = load <16 x i16>, <16 x i16>* %32684, align 2, !tbaa !396
  %32686 = getelementptr inbounds i16, i16* %32682, i64 -15
  %32687 = bitcast i16* %32686 to <16 x i16>*
  %32688 = load <16 x i16>, <16 x i16>* %32687, align 2, !tbaa !396
  %32689 = getelementptr inbounds i16, i16* %32682, i64 -32
  %32690 = bitcast i16* %32689 to <16 x i16>*
  %32691 = load <16 x i16>, <16 x i16>* %32690, align 2, !tbaa !396
  %32692 = getelementptr inbounds i16, i16* %32682, i64 -16
  %32693 = bitcast i16* %32692 to <16 x i16>*
  %32694 = load <16 x i16>, <16 x i16>* %32693, align 2, !tbaa !396
  %32695 = getelementptr inbounds i16, i16* %32682, i64 -30
  %32696 = bitcast i16* %32695 to <16 x i16>*
  %32697 = load <16 x i16>, <16 x i16>* %32696, align 2, !tbaa !396
  %32698 = getelementptr inbounds i16, i16* %32682, i64 -14
  %32699 = bitcast i16* %32698 to <16 x i16>*
  %32700 = load <16 x i16>, <16 x i16>* %32699, align 2, !tbaa !396
  %32701 = getelementptr inbounds i16, i16* %32682, i64 -29
  %32702 = bitcast i16* %32701 to <16 x i16>*
  %32703 = load <16 x i16>, <16 x i16>* %32702, align 2, !tbaa !396
  %32704 = getelementptr inbounds i16, i16* %32682, i64 -13
  %32705 = bitcast i16* %32704 to <16 x i16>*
  %32706 = load <16 x i16>, <16 x i16>* %32705, align 2, !tbaa !396
  %32707 = getelementptr inbounds i16, i16* %32682, i64 -28
  %32708 = bitcast i16* %32707 to <16 x i16>*
  %32709 = load <16 x i16>, <16 x i16>* %32708, align 2, !tbaa !396
  %32710 = getelementptr inbounds i16, i16* %32682, i64 -12
  %32711 = bitcast i16* %32710 to <16 x i16>*
  %32712 = load <16 x i16>, <16 x i16>* %32711, align 2, !tbaa !396
  %32713 = getelementptr inbounds i16, i16* %32682, i64 -26
  %32714 = bitcast i16* %32713 to <16 x i16>*
  %32715 = load <16 x i16>, <16 x i16>* %32714, align 2, !tbaa !396
  %32716 = getelementptr inbounds i16, i16* %32682, i64 -10
  %32717 = bitcast i16* %32716 to <16 x i16>*
  %32718 = load <16 x i16>, <16 x i16>* %32717, align 2, !tbaa !396
  %32719 = getelementptr inbounds i16, i16* %32682, i64 -27
  %32720 = bitcast i16* %32719 to <16 x i16>*
  %32721 = load <16 x i16>, <16 x i16>* %32720, align 2, !tbaa !396
  %32722 = getelementptr inbounds i16, i16* %32682, i64 -11
  %32723 = bitcast i16* %32722 to <16 x i16>*
  %32724 = load <16 x i16>, <16 x i16>* %32723, align 2, !tbaa !396
  %32725 = add <16 x i16> %32691, %32685
  %32726 = add <16 x i16> %32725, %32697
  %32727 = add <16 x i16> %32726, %32703
  %32728 = add <16 x i16> %32727, %32709
  %32729 = add <16 x i16> %32728, %32715
  %32730 = add <16 x i16> %32729, %32721
  %32731 = add <16 x i16> %32694, %32688
  %32732 = add <16 x i16> %32731, %32700
  %32733 = add <16 x i16> %32732, %32706
  %32734 = add <16 x i16> %32733, %32712
  %32735 = add <16 x i16> %32734, %32718
  %32736 = add <16 x i16> %32735, %32724
  %32737 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32730, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32738 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32736, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32739 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32737, <16 x i16> %32730)
  %32740 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32738, <16 x i16> %32736)
  %32741 = shufflevector <16 x i16> %32739, <16 x i16> %32740, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32742 = lshr <32 x i16> %32741, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %32743 = shufflevector <32 x i16> %32742, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32744 = zext i32 %.pre-phi3610 to i64
  %32745 = mul nsw i64 %295, %32744
  %32746 = add nsw i64 %297, %32745
  %32747 = getelementptr inbounds i16, i16* %blur_x917, i64 %32746
  %32748 = getelementptr inbounds i16, i16* %32747, i64 -32
  %32749 = bitcast i16* %32748 to <16 x i16>*
  store <16 x i16> %32743, <16 x i16>* %32749, align 2, !tbaa !399
  %32750 = shufflevector <32 x i16> %32742, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32751 = getelementptr inbounds i16, i16* %32747, i64 -16
  %32752 = bitcast i16* %32751 to <16 x i16>*
  store <16 x i16> %32750, <16 x i16>* %32752, align 2, !tbaa !399
  %32753 = zext i32 %.pre-phi3622 to i64
  %32754 = mul nsw i64 %32753, %314
  %32755 = add nsw i64 %32754, %292
  %32756 = getelementptr inbounds i16, i16* %blur_x917, i64 %32755
  %32757 = getelementptr inbounds i16, i16* %32756, i64 -32
  %32758 = bitcast i16* %32757 to <16 x i16>*
  %32759 = load <16 x i16>, <16 x i16>* %32758, align 2, !tbaa !399
  %32760 = getelementptr inbounds i16, i16* %32756, i64 -16
  %32761 = bitcast i16* %32760 to <16 x i16>*
  %32762 = load <16 x i16>, <16 x i16>* %32761, align 2, !tbaa !399
  %32763 = zext i32 %.pre-phi3618 to i64
  %32764 = mul nsw i64 %32763, %314
  %32765 = add nsw i64 %32764, %292
  %32766 = getelementptr inbounds i16, i16* %blur_x917, i64 %32765
  %32767 = getelementptr inbounds i16, i16* %32766, i64 -32
  %32768 = bitcast i16* %32767 to <16 x i16>*
  %32769 = load <16 x i16>, <16 x i16>* %32768, align 2, !tbaa !399
  %32770 = getelementptr inbounds i16, i16* %32766, i64 -16
  %32771 = bitcast i16* %32770 to <16 x i16>*
  %32772 = load <16 x i16>, <16 x i16>* %32771, align 2, !tbaa !399
  %32773 = zext i32 %.pre-phi3628 to i64
  %32774 = mul nsw i64 %32773, %314
  %32775 = add nsw i64 %32774, %292
  %32776 = getelementptr inbounds i16, i16* %blur_x917, i64 %32775
  %32777 = getelementptr inbounds i16, i16* %32776, i64 -32
  %32778 = bitcast i16* %32777 to <16 x i16>*
  %32779 = load <16 x i16>, <16 x i16>* %32778, align 2, !tbaa !399
  %32780 = getelementptr inbounds i16, i16* %32776, i64 -16
  %32781 = bitcast i16* %32780 to <16 x i16>*
  %32782 = load <16 x i16>, <16 x i16>* %32781, align 2, !tbaa !399
  %32783 = zext i32 %.pre-phi3598 to i64
  %32784 = mul nsw i64 %32783, %314
  %32785 = add nsw i64 %32784, %292
  %32786 = getelementptr inbounds i16, i16* %blur_x917, i64 %32785
  %32787 = getelementptr inbounds i16, i16* %32786, i64 -32
  %32788 = bitcast i16* %32787 to <16 x i16>*
  %32789 = load <16 x i16>, <16 x i16>* %32788, align 2, !tbaa !399
  %32790 = getelementptr inbounds i16, i16* %32786, i64 -16
  %32791 = bitcast i16* %32790 to <16 x i16>*
  %32792 = load <16 x i16>, <16 x i16>* %32791, align 2, !tbaa !399
  %32793 = zext i32 %.pre-phi3602 to i64
  %32794 = mul nsw i64 %32793, %314
  %32795 = add nsw i64 %32794, %292
  %32796 = getelementptr inbounds i16, i16* %blur_x917, i64 %32795
  %32797 = getelementptr inbounds i16, i16* %32796, i64 -32
  %32798 = bitcast i16* %32797 to <16 x i16>*
  %32799 = load <16 x i16>, <16 x i16>* %32798, align 2, !tbaa !399
  %32800 = getelementptr inbounds i16, i16* %32796, i64 -16
  %32801 = bitcast i16* %32800 to <16 x i16>*
  %32802 = load <16 x i16>, <16 x i16>* %32801, align 2, !tbaa !399
  %32803 = mul nsw i64 %32744, %314
  %32804 = add nsw i64 %32803, %292
  %32805 = getelementptr inbounds i16, i16* %blur_x917, i64 %32804
  %32806 = getelementptr inbounds i16, i16* %32805, i64 -32
  %32807 = bitcast i16* %32806 to <16 x i16>*
  %32808 = load <16 x i16>, <16 x i16>* %32807, align 2, !tbaa !399
  %32809 = getelementptr inbounds i16, i16* %32805, i64 -16
  %32810 = bitcast i16* %32809 to <16 x i16>*
  %32811 = load <16 x i16>, <16 x i16>* %32810, align 2, !tbaa !399
  %32812 = zext i32 %.pre-phi3606 to i64
  %32813 = mul nsw i64 %32812, %314
  %32814 = add nsw i64 %32813, %292
  %32815 = getelementptr inbounds i16, i16* %blur_x917, i64 %32814
  %32816 = getelementptr inbounds i16, i16* %32815, i64 -32
  %32817 = bitcast i16* %32816 to <16 x i16>*
  %32818 = load <16 x i16>, <16 x i16>* %32817, align 2, !tbaa !399
  %32819 = getelementptr inbounds i16, i16* %32815, i64 -16
  %32820 = bitcast i16* %32819 to <16 x i16>*
  %32821 = load <16 x i16>, <16 x i16>* %32820, align 2, !tbaa !399
  %32822 = add <16 x i16> %32769, %32759
  %32823 = add <16 x i16> %32822, %32779
  %32824 = add <16 x i16> %32823, %32789
  %32825 = add <16 x i16> %32824, %32799
  %32826 = add <16 x i16> %32825, %32808
  %32827 = add <16 x i16> %32826, %32818
  %32828 = add <16 x i16> %32772, %32762
  %32829 = add <16 x i16> %32828, %32782
  %32830 = add <16 x i16> %32829, %32792
  %32831 = add <16 x i16> %32830, %32802
  %32832 = add <16 x i16> %32831, %32811
  %32833 = add <16 x i16> %32832, %32821
  %32834 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32827, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32835 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32833, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32836 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32834, <16 x i16> %32827)
  %32837 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32835, <16 x i16> %32833)
  %32838 = shufflevector <16 x i16> %32836, <16 x i16> %32837, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32839 = lshr <32 x i16> %32838, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %32840 = shufflevector <32 x i16> %32839, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32841 = sext i32 %a367 to i64
  %32842 = add nsw i64 %32841, 21
  %32843 = mul nsw i64 %32842, %315
  %32844 = add nsw i64 %317, %32843
  %32845 = getelementptr inbounds i16, i16* %264, i64 %32844
  %32846 = getelementptr inbounds i16, i16* %32845, i64 -32
  %32847 = bitcast i16* %32846 to <16 x i16>*
  store <16 x i16> %32840, <16 x i16>* %32847, align 2, !tbaa !401
  %32848 = shufflevector <32 x i16> %32839, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32849 = getelementptr inbounds i16, i16* %32845, i64 -16
  %32850 = bitcast i16* %32849 to <16 x i16>*
  store <16 x i16> %32848, <16 x i16>* %32850, align 2, !tbaa !401
  br label %after_bb2002

"for blur_y.s0.x.x.rebased2017":                  ; preds = %"for blur_y.s0.x.x.rebased2017.preheader", %"consume blur_x2026"
  %indvars.iv3468 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2017.preheader" ], [ %indvars.iv.next3469, %"consume blur_x2026" ]
  %32851 = add nsw i64 %indvars.iv3468, %299
  %32852 = icmp slt i64 %32851, 1
  %32853 = trunc i64 %32851 to i32
  %32854 = shl nsw i32 %32853, 5
  %32855 = icmp sgt i32 %202, %32854
  %32856 = or i1 %32852, %32855
  br i1 %32856, label %"produce blur_x2024", label %"for blur_y.s0.x.x.rebased2017.consume blur_x2026_crit_edge"

"for blur_y.s0.x.x.rebased2017.consume blur_x2026_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2017"
  %.pre3669 = shl nsw i64 %32851, 5
  br label %"consume blur_x2026"

"end for blur_y.s0.x.x.rebased2018":              ; preds = %"consume blur_x2026", %after_bb2002
  br i1 %300, label %"for blur_y.s0.x.x.rebased2034.preheader", label %"end for blur_y.s0.x.x.rebased2035", !prof !386

"for blur_y.s0.x.x.rebased2034.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2018"
  %32857 = sext i32 %t17441014 to i64
  %32858 = zext i32 %.pre-phi3622 to i64
  %32859 = mul nsw i64 %32858, %314
  %32860 = sub nsw i64 %32859, %294
  %32861 = zext i32 %.pre-phi3618 to i64
  %32862 = mul nsw i64 %32861, %314
  %32863 = sub nsw i64 %32862, %294
  %32864 = zext i32 %.pre-phi3628 to i64
  %32865 = mul nsw i64 %32864, %314
  %32866 = sub nsw i64 %32865, %294
  %32867 = zext i32 %.pre-phi3598 to i64
  %32868 = mul nsw i64 %32867, %314
  %32869 = sub nsw i64 %32868, %294
  %32870 = zext i32 %.pre-phi3602 to i64
  %32871 = mul nsw i64 %32870, %314
  %32872 = sub nsw i64 %32871, %294
  %32873 = zext i32 %.pre-phi3610 to i64
  %32874 = mul nsw i64 %32873, %314
  %32875 = sub nsw i64 %32874, %294
  %32876 = zext i32 %.pre-phi3606 to i64
  %32877 = mul nsw i64 %32876, %314
  %32878 = sub nsw i64 %32877, %294
  %32879 = sext i32 %a367 to i64
  %32880 = add nsw i64 %32879, 21
  %32881 = mul nsw i64 %32880, %315
  %32882 = add nsw i64 %32881, %318
  br label %"for blur_y.s0.x.x.rebased2034"

"produce blur_x2024":                             ; preds = %"for blur_y.s0.x.x.rebased2017"
  %t10882025 = add nsw i32 %32854, %t20972014
  %32883 = sext i32 %t10882025 to i64
  %32884 = getelementptr inbounds i16, i16* %read_input860, i64 %32883
  %32885 = getelementptr inbounds i16, i16* %32884, i64 1
  %32886 = bitcast i16* %32885 to <16 x i16>*
  %32887 = load <16 x i16>, <16 x i16>* %32886, align 2, !tbaa !396
  %32888 = getelementptr inbounds i16, i16* %32884, i64 17
  %32889 = bitcast i16* %32888 to <16 x i16>*
  %32890 = load <16 x i16>, <16 x i16>* %32889, align 2, !tbaa !396
  %32891 = bitcast i16* %32884 to <16 x i16>*
  %32892 = load <16 x i16>, <16 x i16>* %32891, align 2, !tbaa !396
  %32893 = getelementptr inbounds i16, i16* %32884, i64 16
  %32894 = bitcast i16* %32893 to <16 x i16>*
  %32895 = load <16 x i16>, <16 x i16>* %32894, align 2, !tbaa !396
  %32896 = getelementptr inbounds i16, i16* %32884, i64 2
  %32897 = bitcast i16* %32896 to <16 x i16>*
  %32898 = load <16 x i16>, <16 x i16>* %32897, align 2, !tbaa !396
  %32899 = getelementptr inbounds i16, i16* %32884, i64 18
  %32900 = bitcast i16* %32899 to <16 x i16>*
  %32901 = load <16 x i16>, <16 x i16>* %32900, align 2, !tbaa !396
  %32902 = getelementptr inbounds i16, i16* %32884, i64 3
  %32903 = bitcast i16* %32902 to <16 x i16>*
  %32904 = load <16 x i16>, <16 x i16>* %32903, align 2, !tbaa !396
  %32905 = getelementptr inbounds i16, i16* %32884, i64 19
  %32906 = bitcast i16* %32905 to <16 x i16>*
  %32907 = load <16 x i16>, <16 x i16>* %32906, align 2, !tbaa !396
  %32908 = getelementptr inbounds i16, i16* %32884, i64 4
  %32909 = bitcast i16* %32908 to <16 x i16>*
  %32910 = load <16 x i16>, <16 x i16>* %32909, align 2, !tbaa !396
  %32911 = getelementptr inbounds i16, i16* %32884, i64 20
  %32912 = bitcast i16* %32911 to <16 x i16>*
  %32913 = load <16 x i16>, <16 x i16>* %32912, align 2, !tbaa !396
  %32914 = getelementptr inbounds i16, i16* %32884, i64 6
  %32915 = bitcast i16* %32914 to <16 x i16>*
  %32916 = load <16 x i16>, <16 x i16>* %32915, align 2, !tbaa !396
  %32917 = getelementptr inbounds i16, i16* %32884, i64 22
  %32918 = bitcast i16* %32917 to <16 x i16>*
  %32919 = load <16 x i16>, <16 x i16>* %32918, align 2, !tbaa !396
  %32920 = getelementptr inbounds i16, i16* %32884, i64 5
  %32921 = bitcast i16* %32920 to <16 x i16>*
  %32922 = load <16 x i16>, <16 x i16>* %32921, align 2, !tbaa !396
  %32923 = getelementptr inbounds i16, i16* %32884, i64 21
  %32924 = bitcast i16* %32923 to <16 x i16>*
  %32925 = load <16 x i16>, <16 x i16>* %32924, align 2, !tbaa !396
  %32926 = add <16 x i16> %32892, %32887
  %32927 = add <16 x i16> %32926, %32898
  %32928 = add <16 x i16> %32927, %32904
  %32929 = add <16 x i16> %32928, %32910
  %32930 = add <16 x i16> %32929, %32916
  %32931 = add <16 x i16> %32930, %32922
  %32932 = add <16 x i16> %32895, %32890
  %32933 = add <16 x i16> %32932, %32901
  %32934 = add <16 x i16> %32933, %32907
  %32935 = add <16 x i16> %32934, %32913
  %32936 = add <16 x i16> %32935, %32919
  %32937 = add <16 x i16> %32936, %32925
  %32938 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32931, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32939 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %32937, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %32940 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32938, <16 x i16> %32931)
  %32941 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %32939, <16 x i16> %32937)
  %32942 = shufflevector <16 x i16> %32940, <16 x i16> %32941, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32943 = lshr <32 x i16> %32942, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %32944 = shufflevector <32 x i16> %32943, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %32945 = shl nsw i64 %32851, 5
  %32946 = add nsw i64 %32945, %32656
  %32947 = getelementptr inbounds i16, i16* %blur_x917, i64 %32946
  %32948 = bitcast i16* %32947 to <16 x i16>*
  store <16 x i16> %32944, <16 x i16>* %32948, align 2, !tbaa !399
  %32949 = shufflevector <32 x i16> %32943, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %32950 = getelementptr inbounds i16, i16* %32947, i64 16
  %32951 = bitcast i16* %32950 to <16 x i16>*
  store <16 x i16> %32949, <16 x i16>* %32951, align 2, !tbaa !399
  br label %"consume blur_x2026"

"consume blur_x2026":                             ; preds = %"for blur_y.s0.x.x.rebased2017.consume blur_x2026_crit_edge", %"produce blur_x2024"
  %.pre-phi3670 = phi i64 [ %.pre3669, %"for blur_y.s0.x.x.rebased2017.consume blur_x2026_crit_edge" ], [ %32945, %"produce blur_x2024" ]
  %32952 = add nsw i64 %32659, %.pre-phi3670
  %32953 = getelementptr inbounds i16, i16* %blur_x917, i64 %32952
  %32954 = bitcast i16* %32953 to <16 x i16>*
  %32955 = load <16 x i16>, <16 x i16>* %32954, align 2, !tbaa !399
  %32956 = getelementptr inbounds i16, i16* %32953, i64 16
  %32957 = bitcast i16* %32956 to <16 x i16>*
  %32958 = load <16 x i16>, <16 x i16>* %32957, align 2, !tbaa !399
  %32959 = add nsw i64 %32662, %.pre-phi3670
  %32960 = getelementptr inbounds i16, i16* %blur_x917, i64 %32959
  %32961 = bitcast i16* %32960 to <16 x i16>*
  %32962 = load <16 x i16>, <16 x i16>* %32961, align 2, !tbaa !399
  %32963 = getelementptr inbounds i16, i16* %32960, i64 16
  %32964 = bitcast i16* %32963 to <16 x i16>*
  %32965 = load <16 x i16>, <16 x i16>* %32964, align 2, !tbaa !399
  %32966 = add nsw i64 %32665, %.pre-phi3670
  %32967 = getelementptr inbounds i16, i16* %blur_x917, i64 %32966
  %32968 = bitcast i16* %32967 to <16 x i16>*
  %32969 = load <16 x i16>, <16 x i16>* %32968, align 2, !tbaa !399
  %32970 = getelementptr inbounds i16, i16* %32967, i64 16
  %32971 = bitcast i16* %32970 to <16 x i16>*
  %32972 = load <16 x i16>, <16 x i16>* %32971, align 2, !tbaa !399
  %32973 = add nsw i64 %32668, %.pre-phi3670
  %32974 = getelementptr inbounds i16, i16* %blur_x917, i64 %32973
  %32975 = bitcast i16* %32974 to <16 x i16>*
  %32976 = load <16 x i16>, <16 x i16>* %32975, align 2, !tbaa !399
  %32977 = getelementptr inbounds i16, i16* %32974, i64 16
  %32978 = bitcast i16* %32977 to <16 x i16>*
  %32979 = load <16 x i16>, <16 x i16>* %32978, align 2, !tbaa !399
  %32980 = add nsw i64 %32671, %.pre-phi3670
  %32981 = getelementptr inbounds i16, i16* %blur_x917, i64 %32980
  %32982 = bitcast i16* %32981 to <16 x i16>*
  %32983 = load <16 x i16>, <16 x i16>* %32982, align 2, !tbaa !399
  %32984 = getelementptr inbounds i16, i16* %32981, i64 16
  %32985 = bitcast i16* %32984 to <16 x i16>*
  %32986 = load <16 x i16>, <16 x i16>* %32985, align 2, !tbaa !399
  %32987 = add nsw i64 %32674, %.pre-phi3670
  %32988 = getelementptr inbounds i16, i16* %blur_x917, i64 %32987
  %32989 = bitcast i16* %32988 to <16 x i16>*
  %32990 = load <16 x i16>, <16 x i16>* %32989, align 2, !tbaa !399
  %32991 = getelementptr inbounds i16, i16* %32988, i64 16
  %32992 = bitcast i16* %32991 to <16 x i16>*
  %32993 = load <16 x i16>, <16 x i16>* %32992, align 2, !tbaa !399
  %32994 = add nsw i64 %32677, %.pre-phi3670
  %32995 = getelementptr inbounds i16, i16* %blur_x917, i64 %32994
  %32996 = bitcast i16* %32995 to <16 x i16>*
  %32997 = load <16 x i16>, <16 x i16>* %32996, align 2, !tbaa !399
  %32998 = getelementptr inbounds i16, i16* %32995, i64 16
  %32999 = bitcast i16* %32998 to <16 x i16>*
  %33000 = load <16 x i16>, <16 x i16>* %32999, align 2, !tbaa !399
  %33001 = add <16 x i16> %32962, %32955
  %33002 = add <16 x i16> %33001, %32969
  %33003 = add <16 x i16> %33002, %32976
  %33004 = add <16 x i16> %33003, %32983
  %33005 = add <16 x i16> %33004, %32990
  %33006 = add <16 x i16> %33005, %32997
  %33007 = add <16 x i16> %32965, %32958
  %33008 = add <16 x i16> %33007, %32972
  %33009 = add <16 x i16> %33008, %32979
  %33010 = add <16 x i16> %33009, %32986
  %33011 = add <16 x i16> %33010, %32993
  %33012 = add <16 x i16> %33011, %33000
  %33013 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33006, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33014 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33012, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33015 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33013, <16 x i16> %33006)
  %33016 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33014, <16 x i16> %33012)
  %33017 = shufflevector <16 x i16> %33015, <16 x i16> %33016, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33018 = lshr <32 x i16> %33017, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %33019 = shufflevector <32 x i16> %33018, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33020 = add nsw i64 %32681, %.pre-phi3670
  %33021 = getelementptr inbounds i16, i16* %264, i64 %33020
  %33022 = bitcast i16* %33021 to <16 x i16>*
  store <16 x i16> %33019, <16 x i16>* %33022, align 2, !tbaa !401
  %33023 = shufflevector <32 x i16> %33018, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33024 = getelementptr inbounds i16, i16* %33021, i64 16
  %33025 = bitcast i16* %33024 to <16 x i16>*
  store <16 x i16> %33023, <16 x i16>* %33025, align 2, !tbaa !401
  %indvars.iv.next3469 = add nuw nsw i64 %indvars.iv3468, 1
  %.not2668 = icmp eq i64 %indvars.iv.next3469, %386
  br i1 %.not2668, label %"end for blur_y.s0.x.x.rebased2018", label %"for blur_y.s0.x.x.rebased2017"

"for blur_y.s0.x.x.rebased2034":                  ; preds = %"for blur_y.s0.x.x.rebased2034.preheader", %"consume blur_x2044"
  %blur_y.s0.x.x.rebased2036 = phi i32 [ %33176, %"consume blur_x2044" ], [ 0, %"for blur_y.s0.x.x.rebased2034.preheader" ]
  %33026 = add nsw i32 %blur_y.s0.x.x.rebased2036, %t1670852
  %a607 = shl nsw i32 %33026, 5
  %33027 = icmp sgt i32 %a355, %a607
  %b613 = select i1 %33027, i32 %a607, i32 %a355
  %33028 = icmp slt i32 %33026, 1
  %33029 = icmp sgt i32 %202, %a607
  %33030 = or i1 %33028, %33029
  br i1 %33030, label %"produce blur_x2041", label %"consume blur_x2044"

"end for blur_y.s0.x.x.rebased2035":              ; preds = %"consume blur_x2044", %"end for blur_y.s0.x.x.rebased2018"
  br i1 %232, label %"produce blur_x2048", label %after_bb2045

"produce blur_x2041":                             ; preds = %"for blur_y.s0.x.x.rebased2034"
  %33031 = icmp slt i32 %b613, %202
  %blur_x.s0.x.v1.base.s2042 = select i1 %33031, i32 %b613, i32 %202
  %t10932043 = add nsw i32 %blur_x.s0.x.v1.base.s2042, %t20972014
  %33032 = sext i32 %t10932043 to i64
  %33033 = getelementptr inbounds i16, i16* %read_input860, i64 %33032
  %33034 = getelementptr inbounds i16, i16* %33033, i64 1
  %33035 = bitcast i16* %33034 to <16 x i16>*
  %33036 = load <16 x i16>, <16 x i16>* %33035, align 2, !tbaa !396
  %33037 = getelementptr inbounds i16, i16* %33033, i64 17
  %33038 = bitcast i16* %33037 to <16 x i16>*
  %33039 = load <16 x i16>, <16 x i16>* %33038, align 2, !tbaa !396
  %33040 = bitcast i16* %33033 to <16 x i16>*
  %33041 = load <16 x i16>, <16 x i16>* %33040, align 2, !tbaa !396
  %33042 = getelementptr inbounds i16, i16* %33033, i64 16
  %33043 = bitcast i16* %33042 to <16 x i16>*
  %33044 = load <16 x i16>, <16 x i16>* %33043, align 2, !tbaa !396
  %33045 = getelementptr inbounds i16, i16* %33033, i64 2
  %33046 = bitcast i16* %33045 to <16 x i16>*
  %33047 = load <16 x i16>, <16 x i16>* %33046, align 2, !tbaa !396
  %33048 = getelementptr inbounds i16, i16* %33033, i64 18
  %33049 = bitcast i16* %33048 to <16 x i16>*
  %33050 = load <16 x i16>, <16 x i16>* %33049, align 2, !tbaa !396
  %33051 = getelementptr inbounds i16, i16* %33033, i64 3
  %33052 = bitcast i16* %33051 to <16 x i16>*
  %33053 = load <16 x i16>, <16 x i16>* %33052, align 2, !tbaa !396
  %33054 = getelementptr inbounds i16, i16* %33033, i64 19
  %33055 = bitcast i16* %33054 to <16 x i16>*
  %33056 = load <16 x i16>, <16 x i16>* %33055, align 2, !tbaa !396
  %33057 = getelementptr inbounds i16, i16* %33033, i64 4
  %33058 = bitcast i16* %33057 to <16 x i16>*
  %33059 = load <16 x i16>, <16 x i16>* %33058, align 2, !tbaa !396
  %33060 = getelementptr inbounds i16, i16* %33033, i64 20
  %33061 = bitcast i16* %33060 to <16 x i16>*
  %33062 = load <16 x i16>, <16 x i16>* %33061, align 2, !tbaa !396
  %33063 = getelementptr inbounds i16, i16* %33033, i64 6
  %33064 = bitcast i16* %33063 to <16 x i16>*
  %33065 = load <16 x i16>, <16 x i16>* %33064, align 2, !tbaa !396
  %33066 = getelementptr inbounds i16, i16* %33033, i64 22
  %33067 = bitcast i16* %33066 to <16 x i16>*
  %33068 = load <16 x i16>, <16 x i16>* %33067, align 2, !tbaa !396
  %33069 = getelementptr inbounds i16, i16* %33033, i64 5
  %33070 = bitcast i16* %33069 to <16 x i16>*
  %33071 = load <16 x i16>, <16 x i16>* %33070, align 2, !tbaa !396
  %33072 = getelementptr inbounds i16, i16* %33033, i64 21
  %33073 = bitcast i16* %33072 to <16 x i16>*
  %33074 = load <16 x i16>, <16 x i16>* %33073, align 2, !tbaa !396
  %33075 = add <16 x i16> %33041, %33036
  %33076 = add <16 x i16> %33075, %33047
  %33077 = add <16 x i16> %33076, %33053
  %33078 = add <16 x i16> %33077, %33059
  %33079 = add <16 x i16> %33078, %33065
  %33080 = add <16 x i16> %33079, %33071
  %33081 = add <16 x i16> %33044, %33039
  %33082 = add <16 x i16> %33081, %33050
  %33083 = add <16 x i16> %33082, %33056
  %33084 = add <16 x i16> %33083, %33062
  %33085 = add <16 x i16> %33084, %33068
  %33086 = add <16 x i16> %33085, %33074
  %33087 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33080, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33088 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33086, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33089 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33087, <16 x i16> %33080)
  %33090 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33088, <16 x i16> %33086)
  %33091 = shufflevector <16 x i16> %33089, <16 x i16> %33090, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33092 = lshr <32 x i16> %33091, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %33093 = shufflevector <32 x i16> %33092, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33094 = sext i32 %blur_x.s0.x.v1.base.s2042 to i64
  %33095 = add nsw i64 %33094, %32857
  %33096 = getelementptr inbounds i16, i16* %blur_x917, i64 %33095
  %33097 = bitcast i16* %33096 to <16 x i16>*
  store <16 x i16> %33093, <16 x i16>* %33097, align 2, !tbaa !399
  %33098 = shufflevector <32 x i16> %33092, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33099 = getelementptr inbounds i16, i16* %33096, i64 16
  %33100 = bitcast i16* %33099 to <16 x i16>*
  store <16 x i16> %33098, <16 x i16>* %33100, align 2, !tbaa !399
  br label %"consume blur_x2044"

"consume blur_x2044":                             ; preds = %"for blur_y.s0.x.x.rebased2034", %"produce blur_x2041"
  %33101 = sext i32 %b613 to i64
  %33102 = add nsw i64 %32860, %33101
  %33103 = getelementptr inbounds i16, i16* %blur_x917, i64 %33102
  %33104 = bitcast i16* %33103 to <16 x i16>*
  %33105 = load <16 x i16>, <16 x i16>* %33104, align 2, !tbaa !399
  %33106 = getelementptr inbounds i16, i16* %33103, i64 16
  %33107 = bitcast i16* %33106 to <16 x i16>*
  %33108 = load <16 x i16>, <16 x i16>* %33107, align 2, !tbaa !399
  %33109 = add nsw i64 %32863, %33101
  %33110 = getelementptr inbounds i16, i16* %blur_x917, i64 %33109
  %33111 = bitcast i16* %33110 to <16 x i16>*
  %33112 = load <16 x i16>, <16 x i16>* %33111, align 2, !tbaa !399
  %33113 = getelementptr inbounds i16, i16* %33110, i64 16
  %33114 = bitcast i16* %33113 to <16 x i16>*
  %33115 = load <16 x i16>, <16 x i16>* %33114, align 2, !tbaa !399
  %33116 = add nsw i64 %32866, %33101
  %33117 = getelementptr inbounds i16, i16* %blur_x917, i64 %33116
  %33118 = bitcast i16* %33117 to <16 x i16>*
  %33119 = load <16 x i16>, <16 x i16>* %33118, align 2, !tbaa !399
  %33120 = getelementptr inbounds i16, i16* %33117, i64 16
  %33121 = bitcast i16* %33120 to <16 x i16>*
  %33122 = load <16 x i16>, <16 x i16>* %33121, align 2, !tbaa !399
  %33123 = add nsw i64 %32869, %33101
  %33124 = getelementptr inbounds i16, i16* %blur_x917, i64 %33123
  %33125 = bitcast i16* %33124 to <16 x i16>*
  %33126 = load <16 x i16>, <16 x i16>* %33125, align 2, !tbaa !399
  %33127 = getelementptr inbounds i16, i16* %33124, i64 16
  %33128 = bitcast i16* %33127 to <16 x i16>*
  %33129 = load <16 x i16>, <16 x i16>* %33128, align 2, !tbaa !399
  %33130 = add nsw i64 %32872, %33101
  %33131 = getelementptr inbounds i16, i16* %blur_x917, i64 %33130
  %33132 = bitcast i16* %33131 to <16 x i16>*
  %33133 = load <16 x i16>, <16 x i16>* %33132, align 2, !tbaa !399
  %33134 = getelementptr inbounds i16, i16* %33131, i64 16
  %33135 = bitcast i16* %33134 to <16 x i16>*
  %33136 = load <16 x i16>, <16 x i16>* %33135, align 2, !tbaa !399
  %33137 = add nsw i64 %32875, %33101
  %33138 = getelementptr inbounds i16, i16* %blur_x917, i64 %33137
  %33139 = bitcast i16* %33138 to <16 x i16>*
  %33140 = load <16 x i16>, <16 x i16>* %33139, align 2, !tbaa !399
  %33141 = getelementptr inbounds i16, i16* %33138, i64 16
  %33142 = bitcast i16* %33141 to <16 x i16>*
  %33143 = load <16 x i16>, <16 x i16>* %33142, align 2, !tbaa !399
  %33144 = add nsw i64 %32878, %33101
  %33145 = getelementptr inbounds i16, i16* %blur_x917, i64 %33144
  %33146 = bitcast i16* %33145 to <16 x i16>*
  %33147 = load <16 x i16>, <16 x i16>* %33146, align 2, !tbaa !399
  %33148 = getelementptr inbounds i16, i16* %33145, i64 16
  %33149 = bitcast i16* %33148 to <16 x i16>*
  %33150 = load <16 x i16>, <16 x i16>* %33149, align 2, !tbaa !399
  %33151 = add <16 x i16> %33112, %33105
  %33152 = add <16 x i16> %33151, %33119
  %33153 = add <16 x i16> %33152, %33126
  %33154 = add <16 x i16> %33153, %33133
  %33155 = add <16 x i16> %33154, %33140
  %33156 = add <16 x i16> %33155, %33147
  %33157 = add <16 x i16> %33115, %33108
  %33158 = add <16 x i16> %33157, %33122
  %33159 = add <16 x i16> %33158, %33129
  %33160 = add <16 x i16> %33159, %33136
  %33161 = add <16 x i16> %33160, %33143
  %33162 = add <16 x i16> %33161, %33150
  %33163 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33156, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33164 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33162, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33165 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33163, <16 x i16> %33156)
  %33166 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33164, <16 x i16> %33162)
  %33167 = shufflevector <16 x i16> %33165, <16 x i16> %33166, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33168 = lshr <32 x i16> %33167, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %33169 = shufflevector <32 x i16> %33168, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33170 = add nsw i64 %32882, %33101
  %33171 = getelementptr inbounds i16, i16* %264, i64 %33170
  %33172 = bitcast i16* %33171 to <16 x i16>*
  store <16 x i16> %33169, <16 x i16>* %33172, align 2, !tbaa !401
  %33173 = shufflevector <32 x i16> %33168, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33174 = getelementptr inbounds i16, i16* %33171, i64 16
  %33175 = bitcast i16* %33174 to <16 x i16>*
  store <16 x i16> %33173, <16 x i16>* %33175, align 2, !tbaa !401
  %33176 = add nuw nsw i32 %blur_y.s0.x.x.rebased2036, 1
  %.not2667 = icmp eq i32 %33176, %t1727937
  br i1 %.not2667, label %"end for blur_y.s0.x.x.rebased2035", label %"for blur_y.s0.x.x.rebased2034"

after_bb2045:                                     ; preds = %"end for blur_y.s0.x.x.rebased2035", %"produce blur_x2048"
  br i1 %298, label %"for blur_y.s0.x.x.rebased2060.preheader", label %"end for blur_y.s0.x.x.rebased2061", !prof !386

"for blur_y.s0.x.x.rebased2060.preheader":        ; preds = %after_bb2045
  %33177 = sext i32 %t17501044 to i64
  %33178 = zext i32 %.pre-phi3628 to i64
  %33179 = mul nsw i64 %33178, %314
  %33180 = sub nsw i64 %33179, %294
  %33181 = zext i32 %.pre-phi3622 to i64
  %33182 = mul nsw i64 %33181, %314
  %33183 = sub nsw i64 %33182, %294
  %33184 = zext i32 %.pre-phi3598 to i64
  %33185 = mul nsw i64 %33184, %314
  %33186 = sub nsw i64 %33185, %294
  %33187 = zext i32 %.pre-phi3602 to i64
  %33188 = mul nsw i64 %33187, %314
  %33189 = sub nsw i64 %33188, %294
  %33190 = zext i32 %.pre-phi3606 to i64
  %33191 = mul nsw i64 %33190, %314
  %33192 = sub nsw i64 %33191, %294
  %33193 = zext i32 %.pre-phi3614 to i64
  %33194 = mul nsw i64 %33193, %314
  %33195 = sub nsw i64 %33194, %294
  %33196 = zext i32 %.pre-phi3610 to i64
  %33197 = mul nsw i64 %33196, %314
  %33198 = sub nsw i64 %33197, %294
  %33199 = sext i32 %a367 to i64
  %33200 = add nsw i64 %33199, 22
  %33201 = mul nsw i64 %33200, %315
  %33202 = add nsw i64 %33201, %318
  br label %"for blur_y.s0.x.x.rebased2060"

"produce blur_x2048":                             ; preds = %"end for blur_y.s0.x.x.rebased2035"
  %33203 = getelementptr inbounds i16, i16* %read_input860, i64 %361
  %33204 = getelementptr inbounds i16, i16* %33203, i64 -31
  %33205 = bitcast i16* %33204 to <16 x i16>*
  %33206 = load <16 x i16>, <16 x i16>* %33205, align 2, !tbaa !396
  %33207 = getelementptr inbounds i16, i16* %33203, i64 -15
  %33208 = bitcast i16* %33207 to <16 x i16>*
  %33209 = load <16 x i16>, <16 x i16>* %33208, align 2, !tbaa !396
  %33210 = getelementptr inbounds i16, i16* %33203, i64 -32
  %33211 = bitcast i16* %33210 to <16 x i16>*
  %33212 = load <16 x i16>, <16 x i16>* %33211, align 2, !tbaa !396
  %33213 = getelementptr inbounds i16, i16* %33203, i64 -16
  %33214 = bitcast i16* %33213 to <16 x i16>*
  %33215 = load <16 x i16>, <16 x i16>* %33214, align 2, !tbaa !396
  %33216 = getelementptr inbounds i16, i16* %33203, i64 -30
  %33217 = bitcast i16* %33216 to <16 x i16>*
  %33218 = load <16 x i16>, <16 x i16>* %33217, align 2, !tbaa !396
  %33219 = getelementptr inbounds i16, i16* %33203, i64 -14
  %33220 = bitcast i16* %33219 to <16 x i16>*
  %33221 = load <16 x i16>, <16 x i16>* %33220, align 2, !tbaa !396
  %33222 = getelementptr inbounds i16, i16* %33203, i64 -29
  %33223 = bitcast i16* %33222 to <16 x i16>*
  %33224 = load <16 x i16>, <16 x i16>* %33223, align 2, !tbaa !396
  %33225 = getelementptr inbounds i16, i16* %33203, i64 -13
  %33226 = bitcast i16* %33225 to <16 x i16>*
  %33227 = load <16 x i16>, <16 x i16>* %33226, align 2, !tbaa !396
  %33228 = getelementptr inbounds i16, i16* %33203, i64 -28
  %33229 = bitcast i16* %33228 to <16 x i16>*
  %33230 = load <16 x i16>, <16 x i16>* %33229, align 2, !tbaa !396
  %33231 = getelementptr inbounds i16, i16* %33203, i64 -12
  %33232 = bitcast i16* %33231 to <16 x i16>*
  %33233 = load <16 x i16>, <16 x i16>* %33232, align 2, !tbaa !396
  %33234 = getelementptr inbounds i16, i16* %33203, i64 -26
  %33235 = bitcast i16* %33234 to <16 x i16>*
  %33236 = load <16 x i16>, <16 x i16>* %33235, align 2, !tbaa !396
  %33237 = getelementptr inbounds i16, i16* %33203, i64 -10
  %33238 = bitcast i16* %33237 to <16 x i16>*
  %33239 = load <16 x i16>, <16 x i16>* %33238, align 2, !tbaa !396
  %33240 = getelementptr inbounds i16, i16* %33203, i64 -27
  %33241 = bitcast i16* %33240 to <16 x i16>*
  %33242 = load <16 x i16>, <16 x i16>* %33241, align 2, !tbaa !396
  %33243 = getelementptr inbounds i16, i16* %33203, i64 -11
  %33244 = bitcast i16* %33243 to <16 x i16>*
  %33245 = load <16 x i16>, <16 x i16>* %33244, align 2, !tbaa !396
  %33246 = add <16 x i16> %33212, %33206
  %33247 = add <16 x i16> %33246, %33218
  %33248 = add <16 x i16> %33247, %33224
  %33249 = add <16 x i16> %33248, %33230
  %33250 = add <16 x i16> %33249, %33236
  %33251 = add <16 x i16> %33250, %33242
  %33252 = add <16 x i16> %33215, %33209
  %33253 = add <16 x i16> %33252, %33221
  %33254 = add <16 x i16> %33253, %33227
  %33255 = add <16 x i16> %33254, %33233
  %33256 = add <16 x i16> %33255, %33239
  %33257 = add <16 x i16> %33256, %33245
  %33258 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33251, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33259 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33257, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33260 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33258, <16 x i16> %33251)
  %33261 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33259, <16 x i16> %33257)
  %33262 = shufflevector <16 x i16> %33260, <16 x i16> %33261, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33263 = lshr <32 x i16> %33262, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %33264 = shufflevector <32 x i16> %33263, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33265 = zext i32 %.pre-phi3614 to i64
  %33266 = mul nsw i64 %295, %33265
  %33267 = add nsw i64 %297, %33266
  %33268 = getelementptr inbounds i16, i16* %blur_x917, i64 %33267
  %33269 = getelementptr inbounds i16, i16* %33268, i64 -32
  %33270 = bitcast i16* %33269 to <16 x i16>*
  store <16 x i16> %33264, <16 x i16>* %33270, align 2, !tbaa !399
  %33271 = shufflevector <32 x i16> %33263, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33272 = getelementptr inbounds i16, i16* %33268, i64 -16
  %33273 = bitcast i16* %33272 to <16 x i16>*
  store <16 x i16> %33271, <16 x i16>* %33273, align 2, !tbaa !399
  %33274 = zext i32 %.pre-phi3628 to i64
  %33275 = mul nsw i64 %33274, %314
  %33276 = add nsw i64 %33275, %292
  %33277 = getelementptr inbounds i16, i16* %blur_x917, i64 %33276
  %33278 = getelementptr inbounds i16, i16* %33277, i64 -32
  %33279 = bitcast i16* %33278 to <16 x i16>*
  %33280 = load <16 x i16>, <16 x i16>* %33279, align 2, !tbaa !399
  %33281 = getelementptr inbounds i16, i16* %33277, i64 -16
  %33282 = bitcast i16* %33281 to <16 x i16>*
  %33283 = load <16 x i16>, <16 x i16>* %33282, align 2, !tbaa !399
  %33284 = zext i32 %.pre-phi3622 to i64
  %33285 = mul nsw i64 %33284, %314
  %33286 = add nsw i64 %33285, %292
  %33287 = getelementptr inbounds i16, i16* %blur_x917, i64 %33286
  %33288 = getelementptr inbounds i16, i16* %33287, i64 -32
  %33289 = bitcast i16* %33288 to <16 x i16>*
  %33290 = load <16 x i16>, <16 x i16>* %33289, align 2, !tbaa !399
  %33291 = getelementptr inbounds i16, i16* %33287, i64 -16
  %33292 = bitcast i16* %33291 to <16 x i16>*
  %33293 = load <16 x i16>, <16 x i16>* %33292, align 2, !tbaa !399
  %33294 = zext i32 %.pre-phi3598 to i64
  %33295 = mul nsw i64 %33294, %314
  %33296 = add nsw i64 %33295, %292
  %33297 = getelementptr inbounds i16, i16* %blur_x917, i64 %33296
  %33298 = getelementptr inbounds i16, i16* %33297, i64 -32
  %33299 = bitcast i16* %33298 to <16 x i16>*
  %33300 = load <16 x i16>, <16 x i16>* %33299, align 2, !tbaa !399
  %33301 = getelementptr inbounds i16, i16* %33297, i64 -16
  %33302 = bitcast i16* %33301 to <16 x i16>*
  %33303 = load <16 x i16>, <16 x i16>* %33302, align 2, !tbaa !399
  %33304 = zext i32 %.pre-phi3602 to i64
  %33305 = mul nsw i64 %33304, %314
  %33306 = add nsw i64 %33305, %292
  %33307 = getelementptr inbounds i16, i16* %blur_x917, i64 %33306
  %33308 = getelementptr inbounds i16, i16* %33307, i64 -32
  %33309 = bitcast i16* %33308 to <16 x i16>*
  %33310 = load <16 x i16>, <16 x i16>* %33309, align 2, !tbaa !399
  %33311 = getelementptr inbounds i16, i16* %33307, i64 -16
  %33312 = bitcast i16* %33311 to <16 x i16>*
  %33313 = load <16 x i16>, <16 x i16>* %33312, align 2, !tbaa !399
  %33314 = zext i32 %.pre-phi3606 to i64
  %33315 = mul nsw i64 %33314, %314
  %33316 = add nsw i64 %33315, %292
  %33317 = getelementptr inbounds i16, i16* %blur_x917, i64 %33316
  %33318 = getelementptr inbounds i16, i16* %33317, i64 -32
  %33319 = bitcast i16* %33318 to <16 x i16>*
  %33320 = load <16 x i16>, <16 x i16>* %33319, align 2, !tbaa !399
  %33321 = getelementptr inbounds i16, i16* %33317, i64 -16
  %33322 = bitcast i16* %33321 to <16 x i16>*
  %33323 = load <16 x i16>, <16 x i16>* %33322, align 2, !tbaa !399
  %33324 = mul nsw i64 %33265, %314
  %33325 = add nsw i64 %33324, %292
  %33326 = getelementptr inbounds i16, i16* %blur_x917, i64 %33325
  %33327 = getelementptr inbounds i16, i16* %33326, i64 -32
  %33328 = bitcast i16* %33327 to <16 x i16>*
  %33329 = load <16 x i16>, <16 x i16>* %33328, align 2, !tbaa !399
  %33330 = getelementptr inbounds i16, i16* %33326, i64 -16
  %33331 = bitcast i16* %33330 to <16 x i16>*
  %33332 = load <16 x i16>, <16 x i16>* %33331, align 2, !tbaa !399
  %33333 = zext i32 %.pre-phi3610 to i64
  %33334 = mul nsw i64 %33333, %314
  %33335 = add nsw i64 %33334, %292
  %33336 = getelementptr inbounds i16, i16* %blur_x917, i64 %33335
  %33337 = getelementptr inbounds i16, i16* %33336, i64 -32
  %33338 = bitcast i16* %33337 to <16 x i16>*
  %33339 = load <16 x i16>, <16 x i16>* %33338, align 2, !tbaa !399
  %33340 = getelementptr inbounds i16, i16* %33336, i64 -16
  %33341 = bitcast i16* %33340 to <16 x i16>*
  %33342 = load <16 x i16>, <16 x i16>* %33341, align 2, !tbaa !399
  %33343 = add <16 x i16> %33290, %33280
  %33344 = add <16 x i16> %33343, %33300
  %33345 = add <16 x i16> %33344, %33310
  %33346 = add <16 x i16> %33345, %33320
  %33347 = add <16 x i16> %33346, %33329
  %33348 = add <16 x i16> %33347, %33339
  %33349 = add <16 x i16> %33293, %33283
  %33350 = add <16 x i16> %33349, %33303
  %33351 = add <16 x i16> %33350, %33313
  %33352 = add <16 x i16> %33351, %33323
  %33353 = add <16 x i16> %33352, %33332
  %33354 = add <16 x i16> %33353, %33342
  %33355 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33348, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33356 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33354, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33357 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33355, <16 x i16> %33348)
  %33358 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33356, <16 x i16> %33354)
  %33359 = shufflevector <16 x i16> %33357, <16 x i16> %33358, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33360 = lshr <32 x i16> %33359, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %33361 = shufflevector <32 x i16> %33360, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33362 = sext i32 %a367 to i64
  %33363 = add nsw i64 %33362, 22
  %33364 = mul nsw i64 %33363, %315
  %33365 = add nsw i64 %317, %33364
  %33366 = getelementptr inbounds i16, i16* %264, i64 %33365
  %33367 = getelementptr inbounds i16, i16* %33366, i64 -32
  %33368 = bitcast i16* %33367 to <16 x i16>*
  store <16 x i16> %33361, <16 x i16>* %33368, align 2, !tbaa !401
  %33369 = shufflevector <32 x i16> %33360, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33370 = getelementptr inbounds i16, i16* %33366, i64 -16
  %33371 = bitcast i16* %33370 to <16 x i16>*
  store <16 x i16> %33369, <16 x i16>* %33371, align 2, !tbaa !401
  br label %after_bb2045

"for blur_y.s0.x.x.rebased2060":                  ; preds = %"for blur_y.s0.x.x.rebased2060.preheader", %"consume blur_x2069"
  %indvars.iv3471 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2060.preheader" ], [ %indvars.iv.next3472, %"consume blur_x2069" ]
  %33372 = add nsw i64 %indvars.iv3471, %299
  %33373 = icmp slt i64 %33372, 1
  %33374 = trunc i64 %33372 to i32
  %33375 = shl nsw i32 %33374, 5
  %33376 = icmp sgt i32 %202, %33375
  %33377 = or i1 %33373, %33376
  br i1 %33377, label %"produce blur_x2067", label %"for blur_y.s0.x.x.rebased2060.consume blur_x2069_crit_edge"

"for blur_y.s0.x.x.rebased2060.consume blur_x2069_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2060"
  %.pre3671 = shl nsw i64 %33372, 5
  br label %"consume blur_x2069"

"end for blur_y.s0.x.x.rebased2061":              ; preds = %"consume blur_x2069", %after_bb2045
  br i1 %300, label %"for blur_y.s0.x.x.rebased2077.preheader", label %"end for blur_y.s0.x.x.rebased2078", !prof !386

"for blur_y.s0.x.x.rebased2077.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2061"
  %33378 = sext i32 %t17501044 to i64
  %33379 = zext i32 %.pre-phi3628 to i64
  %33380 = mul nsw i64 %33379, %314
  %33381 = sub nsw i64 %33380, %294
  %33382 = zext i32 %.pre-phi3622 to i64
  %33383 = mul nsw i64 %33382, %314
  %33384 = sub nsw i64 %33383, %294
  %33385 = zext i32 %.pre-phi3598 to i64
  %33386 = mul nsw i64 %33385, %314
  %33387 = sub nsw i64 %33386, %294
  %33388 = zext i32 %.pre-phi3602 to i64
  %33389 = mul nsw i64 %33388, %314
  %33390 = sub nsw i64 %33389, %294
  %33391 = zext i32 %.pre-phi3606 to i64
  %33392 = mul nsw i64 %33391, %314
  %33393 = sub nsw i64 %33392, %294
  %33394 = zext i32 %.pre-phi3614 to i64
  %33395 = mul nsw i64 %33394, %314
  %33396 = sub nsw i64 %33395, %294
  %33397 = zext i32 %.pre-phi3610 to i64
  %33398 = mul nsw i64 %33397, %314
  %33399 = sub nsw i64 %33398, %294
  %33400 = sext i32 %a367 to i64
  %33401 = add nsw i64 %33400, 22
  %33402 = mul nsw i64 %33401, %315
  %33403 = add nsw i64 %33402, %318
  br label %"for blur_y.s0.x.x.rebased2077"

"produce blur_x2067":                             ; preds = %"for blur_y.s0.x.x.rebased2060"
  %t11042068 = add nsw i32 %33375, %t21132057
  %33404 = sext i32 %t11042068 to i64
  %33405 = getelementptr inbounds i16, i16* %read_input860, i64 %33404
  %33406 = getelementptr inbounds i16, i16* %33405, i64 1
  %33407 = bitcast i16* %33406 to <16 x i16>*
  %33408 = load <16 x i16>, <16 x i16>* %33407, align 2, !tbaa !396
  %33409 = getelementptr inbounds i16, i16* %33405, i64 17
  %33410 = bitcast i16* %33409 to <16 x i16>*
  %33411 = load <16 x i16>, <16 x i16>* %33410, align 2, !tbaa !396
  %33412 = bitcast i16* %33405 to <16 x i16>*
  %33413 = load <16 x i16>, <16 x i16>* %33412, align 2, !tbaa !396
  %33414 = getelementptr inbounds i16, i16* %33405, i64 16
  %33415 = bitcast i16* %33414 to <16 x i16>*
  %33416 = load <16 x i16>, <16 x i16>* %33415, align 2, !tbaa !396
  %33417 = getelementptr inbounds i16, i16* %33405, i64 2
  %33418 = bitcast i16* %33417 to <16 x i16>*
  %33419 = load <16 x i16>, <16 x i16>* %33418, align 2, !tbaa !396
  %33420 = getelementptr inbounds i16, i16* %33405, i64 18
  %33421 = bitcast i16* %33420 to <16 x i16>*
  %33422 = load <16 x i16>, <16 x i16>* %33421, align 2, !tbaa !396
  %33423 = getelementptr inbounds i16, i16* %33405, i64 3
  %33424 = bitcast i16* %33423 to <16 x i16>*
  %33425 = load <16 x i16>, <16 x i16>* %33424, align 2, !tbaa !396
  %33426 = getelementptr inbounds i16, i16* %33405, i64 19
  %33427 = bitcast i16* %33426 to <16 x i16>*
  %33428 = load <16 x i16>, <16 x i16>* %33427, align 2, !tbaa !396
  %33429 = getelementptr inbounds i16, i16* %33405, i64 4
  %33430 = bitcast i16* %33429 to <16 x i16>*
  %33431 = load <16 x i16>, <16 x i16>* %33430, align 2, !tbaa !396
  %33432 = getelementptr inbounds i16, i16* %33405, i64 20
  %33433 = bitcast i16* %33432 to <16 x i16>*
  %33434 = load <16 x i16>, <16 x i16>* %33433, align 2, !tbaa !396
  %33435 = getelementptr inbounds i16, i16* %33405, i64 6
  %33436 = bitcast i16* %33435 to <16 x i16>*
  %33437 = load <16 x i16>, <16 x i16>* %33436, align 2, !tbaa !396
  %33438 = getelementptr inbounds i16, i16* %33405, i64 22
  %33439 = bitcast i16* %33438 to <16 x i16>*
  %33440 = load <16 x i16>, <16 x i16>* %33439, align 2, !tbaa !396
  %33441 = getelementptr inbounds i16, i16* %33405, i64 5
  %33442 = bitcast i16* %33441 to <16 x i16>*
  %33443 = load <16 x i16>, <16 x i16>* %33442, align 2, !tbaa !396
  %33444 = getelementptr inbounds i16, i16* %33405, i64 21
  %33445 = bitcast i16* %33444 to <16 x i16>*
  %33446 = load <16 x i16>, <16 x i16>* %33445, align 2, !tbaa !396
  %33447 = add <16 x i16> %33413, %33408
  %33448 = add <16 x i16> %33447, %33419
  %33449 = add <16 x i16> %33448, %33425
  %33450 = add <16 x i16> %33449, %33431
  %33451 = add <16 x i16> %33450, %33437
  %33452 = add <16 x i16> %33451, %33443
  %33453 = add <16 x i16> %33416, %33411
  %33454 = add <16 x i16> %33453, %33422
  %33455 = add <16 x i16> %33454, %33428
  %33456 = add <16 x i16> %33455, %33434
  %33457 = add <16 x i16> %33456, %33440
  %33458 = add <16 x i16> %33457, %33446
  %33459 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33452, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33460 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33458, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33461 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33459, <16 x i16> %33452)
  %33462 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33460, <16 x i16> %33458)
  %33463 = shufflevector <16 x i16> %33461, <16 x i16> %33462, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33464 = lshr <32 x i16> %33463, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %33465 = shufflevector <32 x i16> %33464, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33466 = shl nsw i64 %33372, 5
  %33467 = add nsw i64 %33466, %33177
  %33468 = getelementptr inbounds i16, i16* %blur_x917, i64 %33467
  %33469 = bitcast i16* %33468 to <16 x i16>*
  store <16 x i16> %33465, <16 x i16>* %33469, align 2, !tbaa !399
  %33470 = shufflevector <32 x i16> %33464, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33471 = getelementptr inbounds i16, i16* %33468, i64 16
  %33472 = bitcast i16* %33471 to <16 x i16>*
  store <16 x i16> %33470, <16 x i16>* %33472, align 2, !tbaa !399
  br label %"consume blur_x2069"

"consume blur_x2069":                             ; preds = %"for blur_y.s0.x.x.rebased2060.consume blur_x2069_crit_edge", %"produce blur_x2067"
  %.pre-phi3672 = phi i64 [ %.pre3671, %"for blur_y.s0.x.x.rebased2060.consume blur_x2069_crit_edge" ], [ %33466, %"produce blur_x2067" ]
  %33473 = add nsw i64 %33180, %.pre-phi3672
  %33474 = getelementptr inbounds i16, i16* %blur_x917, i64 %33473
  %33475 = bitcast i16* %33474 to <16 x i16>*
  %33476 = load <16 x i16>, <16 x i16>* %33475, align 2, !tbaa !399
  %33477 = getelementptr inbounds i16, i16* %33474, i64 16
  %33478 = bitcast i16* %33477 to <16 x i16>*
  %33479 = load <16 x i16>, <16 x i16>* %33478, align 2, !tbaa !399
  %33480 = add nsw i64 %33183, %.pre-phi3672
  %33481 = getelementptr inbounds i16, i16* %blur_x917, i64 %33480
  %33482 = bitcast i16* %33481 to <16 x i16>*
  %33483 = load <16 x i16>, <16 x i16>* %33482, align 2, !tbaa !399
  %33484 = getelementptr inbounds i16, i16* %33481, i64 16
  %33485 = bitcast i16* %33484 to <16 x i16>*
  %33486 = load <16 x i16>, <16 x i16>* %33485, align 2, !tbaa !399
  %33487 = add nsw i64 %33186, %.pre-phi3672
  %33488 = getelementptr inbounds i16, i16* %blur_x917, i64 %33487
  %33489 = bitcast i16* %33488 to <16 x i16>*
  %33490 = load <16 x i16>, <16 x i16>* %33489, align 2, !tbaa !399
  %33491 = getelementptr inbounds i16, i16* %33488, i64 16
  %33492 = bitcast i16* %33491 to <16 x i16>*
  %33493 = load <16 x i16>, <16 x i16>* %33492, align 2, !tbaa !399
  %33494 = add nsw i64 %33189, %.pre-phi3672
  %33495 = getelementptr inbounds i16, i16* %blur_x917, i64 %33494
  %33496 = bitcast i16* %33495 to <16 x i16>*
  %33497 = load <16 x i16>, <16 x i16>* %33496, align 2, !tbaa !399
  %33498 = getelementptr inbounds i16, i16* %33495, i64 16
  %33499 = bitcast i16* %33498 to <16 x i16>*
  %33500 = load <16 x i16>, <16 x i16>* %33499, align 2, !tbaa !399
  %33501 = add nsw i64 %33192, %.pre-phi3672
  %33502 = getelementptr inbounds i16, i16* %blur_x917, i64 %33501
  %33503 = bitcast i16* %33502 to <16 x i16>*
  %33504 = load <16 x i16>, <16 x i16>* %33503, align 2, !tbaa !399
  %33505 = getelementptr inbounds i16, i16* %33502, i64 16
  %33506 = bitcast i16* %33505 to <16 x i16>*
  %33507 = load <16 x i16>, <16 x i16>* %33506, align 2, !tbaa !399
  %33508 = add nsw i64 %33195, %.pre-phi3672
  %33509 = getelementptr inbounds i16, i16* %blur_x917, i64 %33508
  %33510 = bitcast i16* %33509 to <16 x i16>*
  %33511 = load <16 x i16>, <16 x i16>* %33510, align 2, !tbaa !399
  %33512 = getelementptr inbounds i16, i16* %33509, i64 16
  %33513 = bitcast i16* %33512 to <16 x i16>*
  %33514 = load <16 x i16>, <16 x i16>* %33513, align 2, !tbaa !399
  %33515 = add nsw i64 %33198, %.pre-phi3672
  %33516 = getelementptr inbounds i16, i16* %blur_x917, i64 %33515
  %33517 = bitcast i16* %33516 to <16 x i16>*
  %33518 = load <16 x i16>, <16 x i16>* %33517, align 2, !tbaa !399
  %33519 = getelementptr inbounds i16, i16* %33516, i64 16
  %33520 = bitcast i16* %33519 to <16 x i16>*
  %33521 = load <16 x i16>, <16 x i16>* %33520, align 2, !tbaa !399
  %33522 = add <16 x i16> %33483, %33476
  %33523 = add <16 x i16> %33522, %33490
  %33524 = add <16 x i16> %33523, %33497
  %33525 = add <16 x i16> %33524, %33504
  %33526 = add <16 x i16> %33525, %33511
  %33527 = add <16 x i16> %33526, %33518
  %33528 = add <16 x i16> %33486, %33479
  %33529 = add <16 x i16> %33528, %33493
  %33530 = add <16 x i16> %33529, %33500
  %33531 = add <16 x i16> %33530, %33507
  %33532 = add <16 x i16> %33531, %33514
  %33533 = add <16 x i16> %33532, %33521
  %33534 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33527, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33535 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33533, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33536 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33534, <16 x i16> %33527)
  %33537 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33535, <16 x i16> %33533)
  %33538 = shufflevector <16 x i16> %33536, <16 x i16> %33537, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33539 = lshr <32 x i16> %33538, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %33540 = shufflevector <32 x i16> %33539, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33541 = add nsw i64 %33202, %.pre-phi3672
  %33542 = getelementptr inbounds i16, i16* %264, i64 %33541
  %33543 = bitcast i16* %33542 to <16 x i16>*
  store <16 x i16> %33540, <16 x i16>* %33543, align 2, !tbaa !401
  %33544 = shufflevector <32 x i16> %33539, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33545 = getelementptr inbounds i16, i16* %33542, i64 16
  %33546 = bitcast i16* %33545 to <16 x i16>*
  store <16 x i16> %33544, <16 x i16>* %33546, align 2, !tbaa !401
  %indvars.iv.next3472 = add nuw nsw i64 %indvars.iv3471, 1
  %.not2666 = icmp eq i64 %indvars.iv.next3472, %386
  br i1 %.not2666, label %"end for blur_y.s0.x.x.rebased2061", label %"for blur_y.s0.x.x.rebased2060"

"for blur_y.s0.x.x.rebased2077":                  ; preds = %"for blur_y.s0.x.x.rebased2077.preheader", %"consume blur_x2087"
  %blur_y.s0.x.x.rebased2079 = phi i32 [ %33697, %"consume blur_x2087" ], [ 0, %"for blur_y.s0.x.x.rebased2077.preheader" ]
  %33547 = add nsw i32 %blur_y.s0.x.x.rebased2079, %t1670852
  %a614 = shl nsw i32 %33547, 5
  %33548 = icmp sgt i32 %a355, %a614
  %b620 = select i1 %33548, i32 %a614, i32 %a355
  %33549 = icmp slt i32 %33547, 1
  %33550 = icmp sgt i32 %202, %a614
  %33551 = or i1 %33549, %33550
  br i1 %33551, label %"produce blur_x2084", label %"consume blur_x2087"

"end for blur_y.s0.x.x.rebased2078":              ; preds = %"consume blur_x2087", %"end for blur_y.s0.x.x.rebased2061"
  br i1 %232, label %"produce blur_x2091", label %after_bb2088

"produce blur_x2084":                             ; preds = %"for blur_y.s0.x.x.rebased2077"
  %33552 = icmp slt i32 %b620, %202
  %blur_x.s0.x.v1.base.s2085 = select i1 %33552, i32 %b620, i32 %202
  %t11092086 = add nsw i32 %blur_x.s0.x.v1.base.s2085, %t21132057
  %33553 = sext i32 %t11092086 to i64
  %33554 = getelementptr inbounds i16, i16* %read_input860, i64 %33553
  %33555 = getelementptr inbounds i16, i16* %33554, i64 1
  %33556 = bitcast i16* %33555 to <16 x i16>*
  %33557 = load <16 x i16>, <16 x i16>* %33556, align 2, !tbaa !396
  %33558 = getelementptr inbounds i16, i16* %33554, i64 17
  %33559 = bitcast i16* %33558 to <16 x i16>*
  %33560 = load <16 x i16>, <16 x i16>* %33559, align 2, !tbaa !396
  %33561 = bitcast i16* %33554 to <16 x i16>*
  %33562 = load <16 x i16>, <16 x i16>* %33561, align 2, !tbaa !396
  %33563 = getelementptr inbounds i16, i16* %33554, i64 16
  %33564 = bitcast i16* %33563 to <16 x i16>*
  %33565 = load <16 x i16>, <16 x i16>* %33564, align 2, !tbaa !396
  %33566 = getelementptr inbounds i16, i16* %33554, i64 2
  %33567 = bitcast i16* %33566 to <16 x i16>*
  %33568 = load <16 x i16>, <16 x i16>* %33567, align 2, !tbaa !396
  %33569 = getelementptr inbounds i16, i16* %33554, i64 18
  %33570 = bitcast i16* %33569 to <16 x i16>*
  %33571 = load <16 x i16>, <16 x i16>* %33570, align 2, !tbaa !396
  %33572 = getelementptr inbounds i16, i16* %33554, i64 3
  %33573 = bitcast i16* %33572 to <16 x i16>*
  %33574 = load <16 x i16>, <16 x i16>* %33573, align 2, !tbaa !396
  %33575 = getelementptr inbounds i16, i16* %33554, i64 19
  %33576 = bitcast i16* %33575 to <16 x i16>*
  %33577 = load <16 x i16>, <16 x i16>* %33576, align 2, !tbaa !396
  %33578 = getelementptr inbounds i16, i16* %33554, i64 4
  %33579 = bitcast i16* %33578 to <16 x i16>*
  %33580 = load <16 x i16>, <16 x i16>* %33579, align 2, !tbaa !396
  %33581 = getelementptr inbounds i16, i16* %33554, i64 20
  %33582 = bitcast i16* %33581 to <16 x i16>*
  %33583 = load <16 x i16>, <16 x i16>* %33582, align 2, !tbaa !396
  %33584 = getelementptr inbounds i16, i16* %33554, i64 6
  %33585 = bitcast i16* %33584 to <16 x i16>*
  %33586 = load <16 x i16>, <16 x i16>* %33585, align 2, !tbaa !396
  %33587 = getelementptr inbounds i16, i16* %33554, i64 22
  %33588 = bitcast i16* %33587 to <16 x i16>*
  %33589 = load <16 x i16>, <16 x i16>* %33588, align 2, !tbaa !396
  %33590 = getelementptr inbounds i16, i16* %33554, i64 5
  %33591 = bitcast i16* %33590 to <16 x i16>*
  %33592 = load <16 x i16>, <16 x i16>* %33591, align 2, !tbaa !396
  %33593 = getelementptr inbounds i16, i16* %33554, i64 21
  %33594 = bitcast i16* %33593 to <16 x i16>*
  %33595 = load <16 x i16>, <16 x i16>* %33594, align 2, !tbaa !396
  %33596 = add <16 x i16> %33562, %33557
  %33597 = add <16 x i16> %33596, %33568
  %33598 = add <16 x i16> %33597, %33574
  %33599 = add <16 x i16> %33598, %33580
  %33600 = add <16 x i16> %33599, %33586
  %33601 = add <16 x i16> %33600, %33592
  %33602 = add <16 x i16> %33565, %33560
  %33603 = add <16 x i16> %33602, %33571
  %33604 = add <16 x i16> %33603, %33577
  %33605 = add <16 x i16> %33604, %33583
  %33606 = add <16 x i16> %33605, %33589
  %33607 = add <16 x i16> %33606, %33595
  %33608 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33601, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33609 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33607, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33610 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33608, <16 x i16> %33601)
  %33611 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33609, <16 x i16> %33607)
  %33612 = shufflevector <16 x i16> %33610, <16 x i16> %33611, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33613 = lshr <32 x i16> %33612, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %33614 = shufflevector <32 x i16> %33613, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33615 = sext i32 %blur_x.s0.x.v1.base.s2085 to i64
  %33616 = add nsw i64 %33615, %33378
  %33617 = getelementptr inbounds i16, i16* %blur_x917, i64 %33616
  %33618 = bitcast i16* %33617 to <16 x i16>*
  store <16 x i16> %33614, <16 x i16>* %33618, align 2, !tbaa !399
  %33619 = shufflevector <32 x i16> %33613, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33620 = getelementptr inbounds i16, i16* %33617, i64 16
  %33621 = bitcast i16* %33620 to <16 x i16>*
  store <16 x i16> %33619, <16 x i16>* %33621, align 2, !tbaa !399
  br label %"consume blur_x2087"

"consume blur_x2087":                             ; preds = %"for blur_y.s0.x.x.rebased2077", %"produce blur_x2084"
  %33622 = sext i32 %b620 to i64
  %33623 = add nsw i64 %33381, %33622
  %33624 = getelementptr inbounds i16, i16* %blur_x917, i64 %33623
  %33625 = bitcast i16* %33624 to <16 x i16>*
  %33626 = load <16 x i16>, <16 x i16>* %33625, align 2, !tbaa !399
  %33627 = getelementptr inbounds i16, i16* %33624, i64 16
  %33628 = bitcast i16* %33627 to <16 x i16>*
  %33629 = load <16 x i16>, <16 x i16>* %33628, align 2, !tbaa !399
  %33630 = add nsw i64 %33384, %33622
  %33631 = getelementptr inbounds i16, i16* %blur_x917, i64 %33630
  %33632 = bitcast i16* %33631 to <16 x i16>*
  %33633 = load <16 x i16>, <16 x i16>* %33632, align 2, !tbaa !399
  %33634 = getelementptr inbounds i16, i16* %33631, i64 16
  %33635 = bitcast i16* %33634 to <16 x i16>*
  %33636 = load <16 x i16>, <16 x i16>* %33635, align 2, !tbaa !399
  %33637 = add nsw i64 %33387, %33622
  %33638 = getelementptr inbounds i16, i16* %blur_x917, i64 %33637
  %33639 = bitcast i16* %33638 to <16 x i16>*
  %33640 = load <16 x i16>, <16 x i16>* %33639, align 2, !tbaa !399
  %33641 = getelementptr inbounds i16, i16* %33638, i64 16
  %33642 = bitcast i16* %33641 to <16 x i16>*
  %33643 = load <16 x i16>, <16 x i16>* %33642, align 2, !tbaa !399
  %33644 = add nsw i64 %33390, %33622
  %33645 = getelementptr inbounds i16, i16* %blur_x917, i64 %33644
  %33646 = bitcast i16* %33645 to <16 x i16>*
  %33647 = load <16 x i16>, <16 x i16>* %33646, align 2, !tbaa !399
  %33648 = getelementptr inbounds i16, i16* %33645, i64 16
  %33649 = bitcast i16* %33648 to <16 x i16>*
  %33650 = load <16 x i16>, <16 x i16>* %33649, align 2, !tbaa !399
  %33651 = add nsw i64 %33393, %33622
  %33652 = getelementptr inbounds i16, i16* %blur_x917, i64 %33651
  %33653 = bitcast i16* %33652 to <16 x i16>*
  %33654 = load <16 x i16>, <16 x i16>* %33653, align 2, !tbaa !399
  %33655 = getelementptr inbounds i16, i16* %33652, i64 16
  %33656 = bitcast i16* %33655 to <16 x i16>*
  %33657 = load <16 x i16>, <16 x i16>* %33656, align 2, !tbaa !399
  %33658 = add nsw i64 %33396, %33622
  %33659 = getelementptr inbounds i16, i16* %blur_x917, i64 %33658
  %33660 = bitcast i16* %33659 to <16 x i16>*
  %33661 = load <16 x i16>, <16 x i16>* %33660, align 2, !tbaa !399
  %33662 = getelementptr inbounds i16, i16* %33659, i64 16
  %33663 = bitcast i16* %33662 to <16 x i16>*
  %33664 = load <16 x i16>, <16 x i16>* %33663, align 2, !tbaa !399
  %33665 = add nsw i64 %33399, %33622
  %33666 = getelementptr inbounds i16, i16* %blur_x917, i64 %33665
  %33667 = bitcast i16* %33666 to <16 x i16>*
  %33668 = load <16 x i16>, <16 x i16>* %33667, align 2, !tbaa !399
  %33669 = getelementptr inbounds i16, i16* %33666, i64 16
  %33670 = bitcast i16* %33669 to <16 x i16>*
  %33671 = load <16 x i16>, <16 x i16>* %33670, align 2, !tbaa !399
  %33672 = add <16 x i16> %33633, %33626
  %33673 = add <16 x i16> %33672, %33640
  %33674 = add <16 x i16> %33673, %33647
  %33675 = add <16 x i16> %33674, %33654
  %33676 = add <16 x i16> %33675, %33661
  %33677 = add <16 x i16> %33676, %33668
  %33678 = add <16 x i16> %33636, %33629
  %33679 = add <16 x i16> %33678, %33643
  %33680 = add <16 x i16> %33679, %33650
  %33681 = add <16 x i16> %33680, %33657
  %33682 = add <16 x i16> %33681, %33664
  %33683 = add <16 x i16> %33682, %33671
  %33684 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33677, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33685 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33683, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33686 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33684, <16 x i16> %33677)
  %33687 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33685, <16 x i16> %33683)
  %33688 = shufflevector <16 x i16> %33686, <16 x i16> %33687, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33689 = lshr <32 x i16> %33688, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %33690 = shufflevector <32 x i16> %33689, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33691 = add nsw i64 %33403, %33622
  %33692 = getelementptr inbounds i16, i16* %264, i64 %33691
  %33693 = bitcast i16* %33692 to <16 x i16>*
  store <16 x i16> %33690, <16 x i16>* %33693, align 2, !tbaa !401
  %33694 = shufflevector <32 x i16> %33689, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33695 = getelementptr inbounds i16, i16* %33692, i64 16
  %33696 = bitcast i16* %33695 to <16 x i16>*
  store <16 x i16> %33694, <16 x i16>* %33696, align 2, !tbaa !401
  %33697 = add nuw nsw i32 %blur_y.s0.x.x.rebased2079, 1
  %.not2665 = icmp eq i32 %33697, %t1727937
  br i1 %.not2665, label %"end for blur_y.s0.x.x.rebased2078", label %"for blur_y.s0.x.x.rebased2077"

after_bb2088:                                     ; preds = %"end for blur_y.s0.x.x.rebased2078", %"produce blur_x2091"
  br i1 %298, label %"for blur_y.s0.x.x.rebased2103.preheader", label %"end for blur_y.s0.x.x.rebased2104", !prof !386

"for blur_y.s0.x.x.rebased2103.preheader":        ; preds = %after_bb2088
  %33698 = sext i32 %t17561074 to i64
  %33699 = zext i32 %.pre-phi3598 to i64
  %33700 = mul nsw i64 %33699, %314
  %33701 = sub nsw i64 %33700, %294
  %33702 = zext i32 %.pre-phi3628 to i64
  %33703 = mul nsw i64 %33702, %314
  %33704 = sub nsw i64 %33703, %294
  %33705 = zext i32 %.pre-phi3602 to i64
  %33706 = mul nsw i64 %33705, %314
  %33707 = sub nsw i64 %33706, %294
  %33708 = zext i32 %.pre-phi3606 to i64
  %33709 = mul nsw i64 %33708, %314
  %33710 = sub nsw i64 %33709, %294
  %33711 = zext i32 %.pre-phi3610 to i64
  %33712 = mul nsw i64 %33711, %314
  %33713 = sub nsw i64 %33712, %294
  %33714 = zext i32 %.pre-phi3618 to i64
  %33715 = mul nsw i64 %33714, %314
  %33716 = sub nsw i64 %33715, %294
  %33717 = zext i32 %.pre-phi3614 to i64
  %33718 = mul nsw i64 %33717, %314
  %33719 = sub nsw i64 %33718, %294
  %33720 = sext i32 %a367 to i64
  %33721 = add nsw i64 %33720, 23
  %33722 = mul nsw i64 %33721, %315
  %33723 = add nsw i64 %33722, %318
  br label %"for blur_y.s0.x.x.rebased2103"

"produce blur_x2091":                             ; preds = %"end for blur_y.s0.x.x.rebased2078"
  %33724 = getelementptr inbounds i16, i16* %read_input860, i64 %363
  %33725 = getelementptr inbounds i16, i16* %33724, i64 -31
  %33726 = bitcast i16* %33725 to <16 x i16>*
  %33727 = load <16 x i16>, <16 x i16>* %33726, align 2, !tbaa !396
  %33728 = getelementptr inbounds i16, i16* %33724, i64 -15
  %33729 = bitcast i16* %33728 to <16 x i16>*
  %33730 = load <16 x i16>, <16 x i16>* %33729, align 2, !tbaa !396
  %33731 = getelementptr inbounds i16, i16* %33724, i64 -32
  %33732 = bitcast i16* %33731 to <16 x i16>*
  %33733 = load <16 x i16>, <16 x i16>* %33732, align 2, !tbaa !396
  %33734 = getelementptr inbounds i16, i16* %33724, i64 -16
  %33735 = bitcast i16* %33734 to <16 x i16>*
  %33736 = load <16 x i16>, <16 x i16>* %33735, align 2, !tbaa !396
  %33737 = getelementptr inbounds i16, i16* %33724, i64 -30
  %33738 = bitcast i16* %33737 to <16 x i16>*
  %33739 = load <16 x i16>, <16 x i16>* %33738, align 2, !tbaa !396
  %33740 = getelementptr inbounds i16, i16* %33724, i64 -14
  %33741 = bitcast i16* %33740 to <16 x i16>*
  %33742 = load <16 x i16>, <16 x i16>* %33741, align 2, !tbaa !396
  %33743 = getelementptr inbounds i16, i16* %33724, i64 -29
  %33744 = bitcast i16* %33743 to <16 x i16>*
  %33745 = load <16 x i16>, <16 x i16>* %33744, align 2, !tbaa !396
  %33746 = getelementptr inbounds i16, i16* %33724, i64 -13
  %33747 = bitcast i16* %33746 to <16 x i16>*
  %33748 = load <16 x i16>, <16 x i16>* %33747, align 2, !tbaa !396
  %33749 = getelementptr inbounds i16, i16* %33724, i64 -28
  %33750 = bitcast i16* %33749 to <16 x i16>*
  %33751 = load <16 x i16>, <16 x i16>* %33750, align 2, !tbaa !396
  %33752 = getelementptr inbounds i16, i16* %33724, i64 -12
  %33753 = bitcast i16* %33752 to <16 x i16>*
  %33754 = load <16 x i16>, <16 x i16>* %33753, align 2, !tbaa !396
  %33755 = getelementptr inbounds i16, i16* %33724, i64 -26
  %33756 = bitcast i16* %33755 to <16 x i16>*
  %33757 = load <16 x i16>, <16 x i16>* %33756, align 2, !tbaa !396
  %33758 = getelementptr inbounds i16, i16* %33724, i64 -10
  %33759 = bitcast i16* %33758 to <16 x i16>*
  %33760 = load <16 x i16>, <16 x i16>* %33759, align 2, !tbaa !396
  %33761 = getelementptr inbounds i16, i16* %33724, i64 -27
  %33762 = bitcast i16* %33761 to <16 x i16>*
  %33763 = load <16 x i16>, <16 x i16>* %33762, align 2, !tbaa !396
  %33764 = getelementptr inbounds i16, i16* %33724, i64 -11
  %33765 = bitcast i16* %33764 to <16 x i16>*
  %33766 = load <16 x i16>, <16 x i16>* %33765, align 2, !tbaa !396
  %33767 = add <16 x i16> %33733, %33727
  %33768 = add <16 x i16> %33767, %33739
  %33769 = add <16 x i16> %33768, %33745
  %33770 = add <16 x i16> %33769, %33751
  %33771 = add <16 x i16> %33770, %33757
  %33772 = add <16 x i16> %33771, %33763
  %33773 = add <16 x i16> %33736, %33730
  %33774 = add <16 x i16> %33773, %33742
  %33775 = add <16 x i16> %33774, %33748
  %33776 = add <16 x i16> %33775, %33754
  %33777 = add <16 x i16> %33776, %33760
  %33778 = add <16 x i16> %33777, %33766
  %33779 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33772, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33780 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33778, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33781 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33779, <16 x i16> %33772)
  %33782 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33780, <16 x i16> %33778)
  %33783 = shufflevector <16 x i16> %33781, <16 x i16> %33782, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33784 = lshr <32 x i16> %33783, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %33785 = shufflevector <32 x i16> %33784, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33786 = zext i32 %.pre-phi3618 to i64
  %33787 = mul nsw i64 %295, %33786
  %33788 = add nsw i64 %297, %33787
  %33789 = getelementptr inbounds i16, i16* %blur_x917, i64 %33788
  %33790 = getelementptr inbounds i16, i16* %33789, i64 -32
  %33791 = bitcast i16* %33790 to <16 x i16>*
  store <16 x i16> %33785, <16 x i16>* %33791, align 2, !tbaa !399
  %33792 = shufflevector <32 x i16> %33784, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33793 = getelementptr inbounds i16, i16* %33789, i64 -16
  %33794 = bitcast i16* %33793 to <16 x i16>*
  store <16 x i16> %33792, <16 x i16>* %33794, align 2, !tbaa !399
  %33795 = zext i32 %.pre-phi3598 to i64
  %33796 = mul nsw i64 %33795, %314
  %33797 = add nsw i64 %33796, %292
  %33798 = getelementptr inbounds i16, i16* %blur_x917, i64 %33797
  %33799 = getelementptr inbounds i16, i16* %33798, i64 -32
  %33800 = bitcast i16* %33799 to <16 x i16>*
  %33801 = load <16 x i16>, <16 x i16>* %33800, align 2, !tbaa !399
  %33802 = getelementptr inbounds i16, i16* %33798, i64 -16
  %33803 = bitcast i16* %33802 to <16 x i16>*
  %33804 = load <16 x i16>, <16 x i16>* %33803, align 2, !tbaa !399
  %33805 = zext i32 %.pre-phi3628 to i64
  %33806 = mul nsw i64 %33805, %314
  %33807 = add nsw i64 %33806, %292
  %33808 = getelementptr inbounds i16, i16* %blur_x917, i64 %33807
  %33809 = getelementptr inbounds i16, i16* %33808, i64 -32
  %33810 = bitcast i16* %33809 to <16 x i16>*
  %33811 = load <16 x i16>, <16 x i16>* %33810, align 2, !tbaa !399
  %33812 = getelementptr inbounds i16, i16* %33808, i64 -16
  %33813 = bitcast i16* %33812 to <16 x i16>*
  %33814 = load <16 x i16>, <16 x i16>* %33813, align 2, !tbaa !399
  %33815 = zext i32 %.pre-phi3602 to i64
  %33816 = mul nsw i64 %33815, %314
  %33817 = add nsw i64 %33816, %292
  %33818 = getelementptr inbounds i16, i16* %blur_x917, i64 %33817
  %33819 = getelementptr inbounds i16, i16* %33818, i64 -32
  %33820 = bitcast i16* %33819 to <16 x i16>*
  %33821 = load <16 x i16>, <16 x i16>* %33820, align 2, !tbaa !399
  %33822 = getelementptr inbounds i16, i16* %33818, i64 -16
  %33823 = bitcast i16* %33822 to <16 x i16>*
  %33824 = load <16 x i16>, <16 x i16>* %33823, align 2, !tbaa !399
  %33825 = zext i32 %.pre-phi3606 to i64
  %33826 = mul nsw i64 %33825, %314
  %33827 = add nsw i64 %33826, %292
  %33828 = getelementptr inbounds i16, i16* %blur_x917, i64 %33827
  %33829 = getelementptr inbounds i16, i16* %33828, i64 -32
  %33830 = bitcast i16* %33829 to <16 x i16>*
  %33831 = load <16 x i16>, <16 x i16>* %33830, align 2, !tbaa !399
  %33832 = getelementptr inbounds i16, i16* %33828, i64 -16
  %33833 = bitcast i16* %33832 to <16 x i16>*
  %33834 = load <16 x i16>, <16 x i16>* %33833, align 2, !tbaa !399
  %33835 = zext i32 %.pre-phi3610 to i64
  %33836 = mul nsw i64 %33835, %314
  %33837 = add nsw i64 %33836, %292
  %33838 = getelementptr inbounds i16, i16* %blur_x917, i64 %33837
  %33839 = getelementptr inbounds i16, i16* %33838, i64 -32
  %33840 = bitcast i16* %33839 to <16 x i16>*
  %33841 = load <16 x i16>, <16 x i16>* %33840, align 2, !tbaa !399
  %33842 = getelementptr inbounds i16, i16* %33838, i64 -16
  %33843 = bitcast i16* %33842 to <16 x i16>*
  %33844 = load <16 x i16>, <16 x i16>* %33843, align 2, !tbaa !399
  %33845 = mul nsw i64 %33786, %314
  %33846 = add nsw i64 %33845, %292
  %33847 = getelementptr inbounds i16, i16* %blur_x917, i64 %33846
  %33848 = getelementptr inbounds i16, i16* %33847, i64 -32
  %33849 = bitcast i16* %33848 to <16 x i16>*
  %33850 = load <16 x i16>, <16 x i16>* %33849, align 2, !tbaa !399
  %33851 = getelementptr inbounds i16, i16* %33847, i64 -16
  %33852 = bitcast i16* %33851 to <16 x i16>*
  %33853 = load <16 x i16>, <16 x i16>* %33852, align 2, !tbaa !399
  %33854 = zext i32 %.pre-phi3614 to i64
  %33855 = mul nsw i64 %33854, %314
  %33856 = add nsw i64 %33855, %292
  %33857 = getelementptr inbounds i16, i16* %blur_x917, i64 %33856
  %33858 = getelementptr inbounds i16, i16* %33857, i64 -32
  %33859 = bitcast i16* %33858 to <16 x i16>*
  %33860 = load <16 x i16>, <16 x i16>* %33859, align 2, !tbaa !399
  %33861 = getelementptr inbounds i16, i16* %33857, i64 -16
  %33862 = bitcast i16* %33861 to <16 x i16>*
  %33863 = load <16 x i16>, <16 x i16>* %33862, align 2, !tbaa !399
  %33864 = add <16 x i16> %33811, %33801
  %33865 = add <16 x i16> %33864, %33821
  %33866 = add <16 x i16> %33865, %33831
  %33867 = add <16 x i16> %33866, %33841
  %33868 = add <16 x i16> %33867, %33850
  %33869 = add <16 x i16> %33868, %33860
  %33870 = add <16 x i16> %33814, %33804
  %33871 = add <16 x i16> %33870, %33824
  %33872 = add <16 x i16> %33871, %33834
  %33873 = add <16 x i16> %33872, %33844
  %33874 = add <16 x i16> %33873, %33853
  %33875 = add <16 x i16> %33874, %33863
  %33876 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33869, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33877 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33875, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33878 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33876, <16 x i16> %33869)
  %33879 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33877, <16 x i16> %33875)
  %33880 = shufflevector <16 x i16> %33878, <16 x i16> %33879, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33881 = lshr <32 x i16> %33880, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %33882 = shufflevector <32 x i16> %33881, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33883 = sext i32 %a367 to i64
  %33884 = add nsw i64 %33883, 23
  %33885 = mul nsw i64 %33884, %315
  %33886 = add nsw i64 %317, %33885
  %33887 = getelementptr inbounds i16, i16* %264, i64 %33886
  %33888 = getelementptr inbounds i16, i16* %33887, i64 -32
  %33889 = bitcast i16* %33888 to <16 x i16>*
  store <16 x i16> %33882, <16 x i16>* %33889, align 2, !tbaa !401
  %33890 = shufflevector <32 x i16> %33881, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33891 = getelementptr inbounds i16, i16* %33887, i64 -16
  %33892 = bitcast i16* %33891 to <16 x i16>*
  store <16 x i16> %33890, <16 x i16>* %33892, align 2, !tbaa !401
  br label %after_bb2088

"for blur_y.s0.x.x.rebased2103":                  ; preds = %"for blur_y.s0.x.x.rebased2103.preheader", %"consume blur_x2112"
  %indvars.iv3474 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2103.preheader" ], [ %indvars.iv.next3475, %"consume blur_x2112" ]
  %33893 = add nsw i64 %indvars.iv3474, %299
  %33894 = icmp slt i64 %33893, 1
  %33895 = trunc i64 %33893 to i32
  %33896 = shl nsw i32 %33895, 5
  %33897 = icmp sgt i32 %202, %33896
  %33898 = or i1 %33894, %33897
  br i1 %33898, label %"produce blur_x2110", label %"for blur_y.s0.x.x.rebased2103.consume blur_x2112_crit_edge"

"for blur_y.s0.x.x.rebased2103.consume blur_x2112_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2103"
  %.pre3673 = shl nsw i64 %33893, 5
  br label %"consume blur_x2112"

"end for blur_y.s0.x.x.rebased2104":              ; preds = %"consume blur_x2112", %after_bb2088
  br i1 %300, label %"for blur_y.s0.x.x.rebased2120.preheader", label %"end for blur_y.s0.x.x.rebased2121", !prof !386

"for blur_y.s0.x.x.rebased2120.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2104"
  %33899 = sext i32 %t17561074 to i64
  %33900 = zext i32 %.pre-phi3598 to i64
  %33901 = mul nsw i64 %33900, %314
  %33902 = sub nsw i64 %33901, %294
  %33903 = zext i32 %.pre-phi3628 to i64
  %33904 = mul nsw i64 %33903, %314
  %33905 = sub nsw i64 %33904, %294
  %33906 = zext i32 %.pre-phi3602 to i64
  %33907 = mul nsw i64 %33906, %314
  %33908 = sub nsw i64 %33907, %294
  %33909 = zext i32 %.pre-phi3606 to i64
  %33910 = mul nsw i64 %33909, %314
  %33911 = sub nsw i64 %33910, %294
  %33912 = zext i32 %.pre-phi3610 to i64
  %33913 = mul nsw i64 %33912, %314
  %33914 = sub nsw i64 %33913, %294
  %33915 = zext i32 %.pre-phi3618 to i64
  %33916 = mul nsw i64 %33915, %314
  %33917 = sub nsw i64 %33916, %294
  %33918 = zext i32 %.pre-phi3614 to i64
  %33919 = mul nsw i64 %33918, %314
  %33920 = sub nsw i64 %33919, %294
  %33921 = sext i32 %a367 to i64
  %33922 = add nsw i64 %33921, 23
  %33923 = mul nsw i64 %33922, %315
  %33924 = add nsw i64 %33923, %318
  br label %"for blur_y.s0.x.x.rebased2120"

"produce blur_x2110":                             ; preds = %"for blur_y.s0.x.x.rebased2103"
  %t11202111 = add nsw i32 %33896, %t21292100
  %33925 = sext i32 %t11202111 to i64
  %33926 = getelementptr inbounds i16, i16* %read_input860, i64 %33925
  %33927 = getelementptr inbounds i16, i16* %33926, i64 1
  %33928 = bitcast i16* %33927 to <16 x i16>*
  %33929 = load <16 x i16>, <16 x i16>* %33928, align 2, !tbaa !396
  %33930 = getelementptr inbounds i16, i16* %33926, i64 17
  %33931 = bitcast i16* %33930 to <16 x i16>*
  %33932 = load <16 x i16>, <16 x i16>* %33931, align 2, !tbaa !396
  %33933 = bitcast i16* %33926 to <16 x i16>*
  %33934 = load <16 x i16>, <16 x i16>* %33933, align 2, !tbaa !396
  %33935 = getelementptr inbounds i16, i16* %33926, i64 16
  %33936 = bitcast i16* %33935 to <16 x i16>*
  %33937 = load <16 x i16>, <16 x i16>* %33936, align 2, !tbaa !396
  %33938 = getelementptr inbounds i16, i16* %33926, i64 2
  %33939 = bitcast i16* %33938 to <16 x i16>*
  %33940 = load <16 x i16>, <16 x i16>* %33939, align 2, !tbaa !396
  %33941 = getelementptr inbounds i16, i16* %33926, i64 18
  %33942 = bitcast i16* %33941 to <16 x i16>*
  %33943 = load <16 x i16>, <16 x i16>* %33942, align 2, !tbaa !396
  %33944 = getelementptr inbounds i16, i16* %33926, i64 3
  %33945 = bitcast i16* %33944 to <16 x i16>*
  %33946 = load <16 x i16>, <16 x i16>* %33945, align 2, !tbaa !396
  %33947 = getelementptr inbounds i16, i16* %33926, i64 19
  %33948 = bitcast i16* %33947 to <16 x i16>*
  %33949 = load <16 x i16>, <16 x i16>* %33948, align 2, !tbaa !396
  %33950 = getelementptr inbounds i16, i16* %33926, i64 4
  %33951 = bitcast i16* %33950 to <16 x i16>*
  %33952 = load <16 x i16>, <16 x i16>* %33951, align 2, !tbaa !396
  %33953 = getelementptr inbounds i16, i16* %33926, i64 20
  %33954 = bitcast i16* %33953 to <16 x i16>*
  %33955 = load <16 x i16>, <16 x i16>* %33954, align 2, !tbaa !396
  %33956 = getelementptr inbounds i16, i16* %33926, i64 6
  %33957 = bitcast i16* %33956 to <16 x i16>*
  %33958 = load <16 x i16>, <16 x i16>* %33957, align 2, !tbaa !396
  %33959 = getelementptr inbounds i16, i16* %33926, i64 22
  %33960 = bitcast i16* %33959 to <16 x i16>*
  %33961 = load <16 x i16>, <16 x i16>* %33960, align 2, !tbaa !396
  %33962 = getelementptr inbounds i16, i16* %33926, i64 5
  %33963 = bitcast i16* %33962 to <16 x i16>*
  %33964 = load <16 x i16>, <16 x i16>* %33963, align 2, !tbaa !396
  %33965 = getelementptr inbounds i16, i16* %33926, i64 21
  %33966 = bitcast i16* %33965 to <16 x i16>*
  %33967 = load <16 x i16>, <16 x i16>* %33966, align 2, !tbaa !396
  %33968 = add <16 x i16> %33934, %33929
  %33969 = add <16 x i16> %33968, %33940
  %33970 = add <16 x i16> %33969, %33946
  %33971 = add <16 x i16> %33970, %33952
  %33972 = add <16 x i16> %33971, %33958
  %33973 = add <16 x i16> %33972, %33964
  %33974 = add <16 x i16> %33937, %33932
  %33975 = add <16 x i16> %33974, %33943
  %33976 = add <16 x i16> %33975, %33949
  %33977 = add <16 x i16> %33976, %33955
  %33978 = add <16 x i16> %33977, %33961
  %33979 = add <16 x i16> %33978, %33967
  %33980 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33973, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33981 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %33979, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %33982 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33980, <16 x i16> %33973)
  %33983 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %33981, <16 x i16> %33979)
  %33984 = shufflevector <16 x i16> %33982, <16 x i16> %33983, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33985 = lshr <32 x i16> %33984, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %33986 = shufflevector <32 x i16> %33985, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %33987 = shl nsw i64 %33893, 5
  %33988 = add nsw i64 %33987, %33698
  %33989 = getelementptr inbounds i16, i16* %blur_x917, i64 %33988
  %33990 = bitcast i16* %33989 to <16 x i16>*
  store <16 x i16> %33986, <16 x i16>* %33990, align 2, !tbaa !399
  %33991 = shufflevector <32 x i16> %33985, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %33992 = getelementptr inbounds i16, i16* %33989, i64 16
  %33993 = bitcast i16* %33992 to <16 x i16>*
  store <16 x i16> %33991, <16 x i16>* %33993, align 2, !tbaa !399
  br label %"consume blur_x2112"

"consume blur_x2112":                             ; preds = %"for blur_y.s0.x.x.rebased2103.consume blur_x2112_crit_edge", %"produce blur_x2110"
  %.pre-phi3674 = phi i64 [ %.pre3673, %"for blur_y.s0.x.x.rebased2103.consume blur_x2112_crit_edge" ], [ %33987, %"produce blur_x2110" ]
  %33994 = add nsw i64 %33701, %.pre-phi3674
  %33995 = getelementptr inbounds i16, i16* %blur_x917, i64 %33994
  %33996 = bitcast i16* %33995 to <16 x i16>*
  %33997 = load <16 x i16>, <16 x i16>* %33996, align 2, !tbaa !399
  %33998 = getelementptr inbounds i16, i16* %33995, i64 16
  %33999 = bitcast i16* %33998 to <16 x i16>*
  %34000 = load <16 x i16>, <16 x i16>* %33999, align 2, !tbaa !399
  %34001 = add nsw i64 %33704, %.pre-phi3674
  %34002 = getelementptr inbounds i16, i16* %blur_x917, i64 %34001
  %34003 = bitcast i16* %34002 to <16 x i16>*
  %34004 = load <16 x i16>, <16 x i16>* %34003, align 2, !tbaa !399
  %34005 = getelementptr inbounds i16, i16* %34002, i64 16
  %34006 = bitcast i16* %34005 to <16 x i16>*
  %34007 = load <16 x i16>, <16 x i16>* %34006, align 2, !tbaa !399
  %34008 = add nsw i64 %33707, %.pre-phi3674
  %34009 = getelementptr inbounds i16, i16* %blur_x917, i64 %34008
  %34010 = bitcast i16* %34009 to <16 x i16>*
  %34011 = load <16 x i16>, <16 x i16>* %34010, align 2, !tbaa !399
  %34012 = getelementptr inbounds i16, i16* %34009, i64 16
  %34013 = bitcast i16* %34012 to <16 x i16>*
  %34014 = load <16 x i16>, <16 x i16>* %34013, align 2, !tbaa !399
  %34015 = add nsw i64 %33710, %.pre-phi3674
  %34016 = getelementptr inbounds i16, i16* %blur_x917, i64 %34015
  %34017 = bitcast i16* %34016 to <16 x i16>*
  %34018 = load <16 x i16>, <16 x i16>* %34017, align 2, !tbaa !399
  %34019 = getelementptr inbounds i16, i16* %34016, i64 16
  %34020 = bitcast i16* %34019 to <16 x i16>*
  %34021 = load <16 x i16>, <16 x i16>* %34020, align 2, !tbaa !399
  %34022 = add nsw i64 %33713, %.pre-phi3674
  %34023 = getelementptr inbounds i16, i16* %blur_x917, i64 %34022
  %34024 = bitcast i16* %34023 to <16 x i16>*
  %34025 = load <16 x i16>, <16 x i16>* %34024, align 2, !tbaa !399
  %34026 = getelementptr inbounds i16, i16* %34023, i64 16
  %34027 = bitcast i16* %34026 to <16 x i16>*
  %34028 = load <16 x i16>, <16 x i16>* %34027, align 2, !tbaa !399
  %34029 = add nsw i64 %33716, %.pre-phi3674
  %34030 = getelementptr inbounds i16, i16* %blur_x917, i64 %34029
  %34031 = bitcast i16* %34030 to <16 x i16>*
  %34032 = load <16 x i16>, <16 x i16>* %34031, align 2, !tbaa !399
  %34033 = getelementptr inbounds i16, i16* %34030, i64 16
  %34034 = bitcast i16* %34033 to <16 x i16>*
  %34035 = load <16 x i16>, <16 x i16>* %34034, align 2, !tbaa !399
  %34036 = add nsw i64 %33719, %.pre-phi3674
  %34037 = getelementptr inbounds i16, i16* %blur_x917, i64 %34036
  %34038 = bitcast i16* %34037 to <16 x i16>*
  %34039 = load <16 x i16>, <16 x i16>* %34038, align 2, !tbaa !399
  %34040 = getelementptr inbounds i16, i16* %34037, i64 16
  %34041 = bitcast i16* %34040 to <16 x i16>*
  %34042 = load <16 x i16>, <16 x i16>* %34041, align 2, !tbaa !399
  %34043 = add <16 x i16> %34004, %33997
  %34044 = add <16 x i16> %34043, %34011
  %34045 = add <16 x i16> %34044, %34018
  %34046 = add <16 x i16> %34045, %34025
  %34047 = add <16 x i16> %34046, %34032
  %34048 = add <16 x i16> %34047, %34039
  %34049 = add <16 x i16> %34007, %34000
  %34050 = add <16 x i16> %34049, %34014
  %34051 = add <16 x i16> %34050, %34021
  %34052 = add <16 x i16> %34051, %34028
  %34053 = add <16 x i16> %34052, %34035
  %34054 = add <16 x i16> %34053, %34042
  %34055 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34048, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34056 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34054, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34057 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34055, <16 x i16> %34048)
  %34058 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34056, <16 x i16> %34054)
  %34059 = shufflevector <16 x i16> %34057, <16 x i16> %34058, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34060 = lshr <32 x i16> %34059, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %34061 = shufflevector <32 x i16> %34060, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34062 = add nsw i64 %33723, %.pre-phi3674
  %34063 = getelementptr inbounds i16, i16* %264, i64 %34062
  %34064 = bitcast i16* %34063 to <16 x i16>*
  store <16 x i16> %34061, <16 x i16>* %34064, align 2, !tbaa !401
  %34065 = shufflevector <32 x i16> %34060, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34066 = getelementptr inbounds i16, i16* %34063, i64 16
  %34067 = bitcast i16* %34066 to <16 x i16>*
  store <16 x i16> %34065, <16 x i16>* %34067, align 2, !tbaa !401
  %indvars.iv.next3475 = add nuw nsw i64 %indvars.iv3474, 1
  %.not2664 = icmp eq i64 %indvars.iv.next3475, %386
  br i1 %.not2664, label %"end for blur_y.s0.x.x.rebased2104", label %"for blur_y.s0.x.x.rebased2103"

"for blur_y.s0.x.x.rebased2120":                  ; preds = %"for blur_y.s0.x.x.rebased2120.preheader", %"consume blur_x2130"
  %blur_y.s0.x.x.rebased2122 = phi i32 [ %34218, %"consume blur_x2130" ], [ 0, %"for blur_y.s0.x.x.rebased2120.preheader" ]
  %34068 = add nsw i32 %blur_y.s0.x.x.rebased2122, %t1670852
  %a621 = shl nsw i32 %34068, 5
  %34069 = icmp sgt i32 %a355, %a621
  %b627 = select i1 %34069, i32 %a621, i32 %a355
  %34070 = icmp slt i32 %34068, 1
  %34071 = icmp sgt i32 %202, %a621
  %34072 = or i1 %34070, %34071
  br i1 %34072, label %"produce blur_x2127", label %"consume blur_x2130"

"end for blur_y.s0.x.x.rebased2121":              ; preds = %"consume blur_x2130", %"end for blur_y.s0.x.x.rebased2104"
  br i1 %232, label %"produce blur_x2134", label %after_bb2131

"produce blur_x2127":                             ; preds = %"for blur_y.s0.x.x.rebased2120"
  %34073 = icmp slt i32 %b627, %202
  %blur_x.s0.x.v1.base.s2128 = select i1 %34073, i32 %b627, i32 %202
  %t11252129 = add nsw i32 %blur_x.s0.x.v1.base.s2128, %t21292100
  %34074 = sext i32 %t11252129 to i64
  %34075 = getelementptr inbounds i16, i16* %read_input860, i64 %34074
  %34076 = getelementptr inbounds i16, i16* %34075, i64 1
  %34077 = bitcast i16* %34076 to <16 x i16>*
  %34078 = load <16 x i16>, <16 x i16>* %34077, align 2, !tbaa !396
  %34079 = getelementptr inbounds i16, i16* %34075, i64 17
  %34080 = bitcast i16* %34079 to <16 x i16>*
  %34081 = load <16 x i16>, <16 x i16>* %34080, align 2, !tbaa !396
  %34082 = bitcast i16* %34075 to <16 x i16>*
  %34083 = load <16 x i16>, <16 x i16>* %34082, align 2, !tbaa !396
  %34084 = getelementptr inbounds i16, i16* %34075, i64 16
  %34085 = bitcast i16* %34084 to <16 x i16>*
  %34086 = load <16 x i16>, <16 x i16>* %34085, align 2, !tbaa !396
  %34087 = getelementptr inbounds i16, i16* %34075, i64 2
  %34088 = bitcast i16* %34087 to <16 x i16>*
  %34089 = load <16 x i16>, <16 x i16>* %34088, align 2, !tbaa !396
  %34090 = getelementptr inbounds i16, i16* %34075, i64 18
  %34091 = bitcast i16* %34090 to <16 x i16>*
  %34092 = load <16 x i16>, <16 x i16>* %34091, align 2, !tbaa !396
  %34093 = getelementptr inbounds i16, i16* %34075, i64 3
  %34094 = bitcast i16* %34093 to <16 x i16>*
  %34095 = load <16 x i16>, <16 x i16>* %34094, align 2, !tbaa !396
  %34096 = getelementptr inbounds i16, i16* %34075, i64 19
  %34097 = bitcast i16* %34096 to <16 x i16>*
  %34098 = load <16 x i16>, <16 x i16>* %34097, align 2, !tbaa !396
  %34099 = getelementptr inbounds i16, i16* %34075, i64 4
  %34100 = bitcast i16* %34099 to <16 x i16>*
  %34101 = load <16 x i16>, <16 x i16>* %34100, align 2, !tbaa !396
  %34102 = getelementptr inbounds i16, i16* %34075, i64 20
  %34103 = bitcast i16* %34102 to <16 x i16>*
  %34104 = load <16 x i16>, <16 x i16>* %34103, align 2, !tbaa !396
  %34105 = getelementptr inbounds i16, i16* %34075, i64 6
  %34106 = bitcast i16* %34105 to <16 x i16>*
  %34107 = load <16 x i16>, <16 x i16>* %34106, align 2, !tbaa !396
  %34108 = getelementptr inbounds i16, i16* %34075, i64 22
  %34109 = bitcast i16* %34108 to <16 x i16>*
  %34110 = load <16 x i16>, <16 x i16>* %34109, align 2, !tbaa !396
  %34111 = getelementptr inbounds i16, i16* %34075, i64 5
  %34112 = bitcast i16* %34111 to <16 x i16>*
  %34113 = load <16 x i16>, <16 x i16>* %34112, align 2, !tbaa !396
  %34114 = getelementptr inbounds i16, i16* %34075, i64 21
  %34115 = bitcast i16* %34114 to <16 x i16>*
  %34116 = load <16 x i16>, <16 x i16>* %34115, align 2, !tbaa !396
  %34117 = add <16 x i16> %34083, %34078
  %34118 = add <16 x i16> %34117, %34089
  %34119 = add <16 x i16> %34118, %34095
  %34120 = add <16 x i16> %34119, %34101
  %34121 = add <16 x i16> %34120, %34107
  %34122 = add <16 x i16> %34121, %34113
  %34123 = add <16 x i16> %34086, %34081
  %34124 = add <16 x i16> %34123, %34092
  %34125 = add <16 x i16> %34124, %34098
  %34126 = add <16 x i16> %34125, %34104
  %34127 = add <16 x i16> %34126, %34110
  %34128 = add <16 x i16> %34127, %34116
  %34129 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34122, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34130 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34128, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34131 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34129, <16 x i16> %34122)
  %34132 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34130, <16 x i16> %34128)
  %34133 = shufflevector <16 x i16> %34131, <16 x i16> %34132, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34134 = lshr <32 x i16> %34133, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %34135 = shufflevector <32 x i16> %34134, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34136 = sext i32 %blur_x.s0.x.v1.base.s2128 to i64
  %34137 = add nsw i64 %34136, %33899
  %34138 = getelementptr inbounds i16, i16* %blur_x917, i64 %34137
  %34139 = bitcast i16* %34138 to <16 x i16>*
  store <16 x i16> %34135, <16 x i16>* %34139, align 2, !tbaa !399
  %34140 = shufflevector <32 x i16> %34134, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34141 = getelementptr inbounds i16, i16* %34138, i64 16
  %34142 = bitcast i16* %34141 to <16 x i16>*
  store <16 x i16> %34140, <16 x i16>* %34142, align 2, !tbaa !399
  br label %"consume blur_x2130"

"consume blur_x2130":                             ; preds = %"for blur_y.s0.x.x.rebased2120", %"produce blur_x2127"
  %34143 = sext i32 %b627 to i64
  %34144 = add nsw i64 %33902, %34143
  %34145 = getelementptr inbounds i16, i16* %blur_x917, i64 %34144
  %34146 = bitcast i16* %34145 to <16 x i16>*
  %34147 = load <16 x i16>, <16 x i16>* %34146, align 2, !tbaa !399
  %34148 = getelementptr inbounds i16, i16* %34145, i64 16
  %34149 = bitcast i16* %34148 to <16 x i16>*
  %34150 = load <16 x i16>, <16 x i16>* %34149, align 2, !tbaa !399
  %34151 = add nsw i64 %33905, %34143
  %34152 = getelementptr inbounds i16, i16* %blur_x917, i64 %34151
  %34153 = bitcast i16* %34152 to <16 x i16>*
  %34154 = load <16 x i16>, <16 x i16>* %34153, align 2, !tbaa !399
  %34155 = getelementptr inbounds i16, i16* %34152, i64 16
  %34156 = bitcast i16* %34155 to <16 x i16>*
  %34157 = load <16 x i16>, <16 x i16>* %34156, align 2, !tbaa !399
  %34158 = add nsw i64 %33908, %34143
  %34159 = getelementptr inbounds i16, i16* %blur_x917, i64 %34158
  %34160 = bitcast i16* %34159 to <16 x i16>*
  %34161 = load <16 x i16>, <16 x i16>* %34160, align 2, !tbaa !399
  %34162 = getelementptr inbounds i16, i16* %34159, i64 16
  %34163 = bitcast i16* %34162 to <16 x i16>*
  %34164 = load <16 x i16>, <16 x i16>* %34163, align 2, !tbaa !399
  %34165 = add nsw i64 %33911, %34143
  %34166 = getelementptr inbounds i16, i16* %blur_x917, i64 %34165
  %34167 = bitcast i16* %34166 to <16 x i16>*
  %34168 = load <16 x i16>, <16 x i16>* %34167, align 2, !tbaa !399
  %34169 = getelementptr inbounds i16, i16* %34166, i64 16
  %34170 = bitcast i16* %34169 to <16 x i16>*
  %34171 = load <16 x i16>, <16 x i16>* %34170, align 2, !tbaa !399
  %34172 = add nsw i64 %33914, %34143
  %34173 = getelementptr inbounds i16, i16* %blur_x917, i64 %34172
  %34174 = bitcast i16* %34173 to <16 x i16>*
  %34175 = load <16 x i16>, <16 x i16>* %34174, align 2, !tbaa !399
  %34176 = getelementptr inbounds i16, i16* %34173, i64 16
  %34177 = bitcast i16* %34176 to <16 x i16>*
  %34178 = load <16 x i16>, <16 x i16>* %34177, align 2, !tbaa !399
  %34179 = add nsw i64 %33917, %34143
  %34180 = getelementptr inbounds i16, i16* %blur_x917, i64 %34179
  %34181 = bitcast i16* %34180 to <16 x i16>*
  %34182 = load <16 x i16>, <16 x i16>* %34181, align 2, !tbaa !399
  %34183 = getelementptr inbounds i16, i16* %34180, i64 16
  %34184 = bitcast i16* %34183 to <16 x i16>*
  %34185 = load <16 x i16>, <16 x i16>* %34184, align 2, !tbaa !399
  %34186 = add nsw i64 %33920, %34143
  %34187 = getelementptr inbounds i16, i16* %blur_x917, i64 %34186
  %34188 = bitcast i16* %34187 to <16 x i16>*
  %34189 = load <16 x i16>, <16 x i16>* %34188, align 2, !tbaa !399
  %34190 = getelementptr inbounds i16, i16* %34187, i64 16
  %34191 = bitcast i16* %34190 to <16 x i16>*
  %34192 = load <16 x i16>, <16 x i16>* %34191, align 2, !tbaa !399
  %34193 = add <16 x i16> %34154, %34147
  %34194 = add <16 x i16> %34193, %34161
  %34195 = add <16 x i16> %34194, %34168
  %34196 = add <16 x i16> %34195, %34175
  %34197 = add <16 x i16> %34196, %34182
  %34198 = add <16 x i16> %34197, %34189
  %34199 = add <16 x i16> %34157, %34150
  %34200 = add <16 x i16> %34199, %34164
  %34201 = add <16 x i16> %34200, %34171
  %34202 = add <16 x i16> %34201, %34178
  %34203 = add <16 x i16> %34202, %34185
  %34204 = add <16 x i16> %34203, %34192
  %34205 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34198, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34206 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34204, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34207 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34205, <16 x i16> %34198)
  %34208 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34206, <16 x i16> %34204)
  %34209 = shufflevector <16 x i16> %34207, <16 x i16> %34208, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34210 = lshr <32 x i16> %34209, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %34211 = shufflevector <32 x i16> %34210, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34212 = add nsw i64 %33924, %34143
  %34213 = getelementptr inbounds i16, i16* %264, i64 %34212
  %34214 = bitcast i16* %34213 to <16 x i16>*
  store <16 x i16> %34211, <16 x i16>* %34214, align 2, !tbaa !401
  %34215 = shufflevector <32 x i16> %34210, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34216 = getelementptr inbounds i16, i16* %34213, i64 16
  %34217 = bitcast i16* %34216 to <16 x i16>*
  store <16 x i16> %34215, <16 x i16>* %34217, align 2, !tbaa !401
  %34218 = add nuw nsw i32 %blur_y.s0.x.x.rebased2122, 1
  %.not2663 = icmp eq i32 %34218, %t1727937
  br i1 %.not2663, label %"end for blur_y.s0.x.x.rebased2121", label %"for blur_y.s0.x.x.rebased2120"

after_bb2131:                                     ; preds = %"end for blur_y.s0.x.x.rebased2121", %"produce blur_x2134"
  br i1 %298, label %"for blur_y.s0.x.x.rebased2146.preheader", label %"end for blur_y.s0.x.x.rebased2147", !prof !386

"for blur_y.s0.x.x.rebased2146.preheader":        ; preds = %after_bb2131
  %34219 = sext i32 %t17621110 to i64
  %34220 = zext i32 %.pre-phi3602 to i64
  %34221 = mul nsw i64 %34220, %314
  %34222 = sub nsw i64 %34221, %294
  %34223 = zext i32 %.pre-phi3598 to i64
  %34224 = mul nsw i64 %34223, %314
  %34225 = sub nsw i64 %34224, %294
  %34226 = zext i32 %.pre-phi3606 to i64
  %34227 = mul nsw i64 %34226, %314
  %34228 = sub nsw i64 %34227, %294
  %34229 = zext i32 %.pre-phi3610 to i64
  %34230 = mul nsw i64 %34229, %314
  %34231 = sub nsw i64 %34230, %294
  %34232 = zext i32 %.pre-phi3614 to i64
  %34233 = mul nsw i64 %34232, %314
  %34234 = sub nsw i64 %34233, %294
  %34235 = zext i32 %.pre-phi3622 to i64
  %34236 = mul nsw i64 %34235, %314
  %34237 = sub nsw i64 %34236, %294
  %34238 = zext i32 %.pre-phi3618 to i64
  %34239 = mul nsw i64 %34238, %314
  %34240 = sub nsw i64 %34239, %294
  %34241 = sext i32 %a367 to i64
  %34242 = add nsw i64 %34241, 24
  %34243 = mul nsw i64 %34242, %315
  %34244 = add nsw i64 %34243, %318
  br label %"for blur_y.s0.x.x.rebased2146"

"produce blur_x2134":                             ; preds = %"end for blur_y.s0.x.x.rebased2121"
  %34245 = getelementptr inbounds i16, i16* %read_input860, i64 %365
  %34246 = getelementptr inbounds i16, i16* %34245, i64 -31
  %34247 = bitcast i16* %34246 to <16 x i16>*
  %34248 = load <16 x i16>, <16 x i16>* %34247, align 2, !tbaa !396
  %34249 = getelementptr inbounds i16, i16* %34245, i64 -15
  %34250 = bitcast i16* %34249 to <16 x i16>*
  %34251 = load <16 x i16>, <16 x i16>* %34250, align 2, !tbaa !396
  %34252 = getelementptr inbounds i16, i16* %34245, i64 -32
  %34253 = bitcast i16* %34252 to <16 x i16>*
  %34254 = load <16 x i16>, <16 x i16>* %34253, align 2, !tbaa !396
  %34255 = getelementptr inbounds i16, i16* %34245, i64 -16
  %34256 = bitcast i16* %34255 to <16 x i16>*
  %34257 = load <16 x i16>, <16 x i16>* %34256, align 2, !tbaa !396
  %34258 = getelementptr inbounds i16, i16* %34245, i64 -30
  %34259 = bitcast i16* %34258 to <16 x i16>*
  %34260 = load <16 x i16>, <16 x i16>* %34259, align 2, !tbaa !396
  %34261 = getelementptr inbounds i16, i16* %34245, i64 -14
  %34262 = bitcast i16* %34261 to <16 x i16>*
  %34263 = load <16 x i16>, <16 x i16>* %34262, align 2, !tbaa !396
  %34264 = getelementptr inbounds i16, i16* %34245, i64 -29
  %34265 = bitcast i16* %34264 to <16 x i16>*
  %34266 = load <16 x i16>, <16 x i16>* %34265, align 2, !tbaa !396
  %34267 = getelementptr inbounds i16, i16* %34245, i64 -13
  %34268 = bitcast i16* %34267 to <16 x i16>*
  %34269 = load <16 x i16>, <16 x i16>* %34268, align 2, !tbaa !396
  %34270 = getelementptr inbounds i16, i16* %34245, i64 -28
  %34271 = bitcast i16* %34270 to <16 x i16>*
  %34272 = load <16 x i16>, <16 x i16>* %34271, align 2, !tbaa !396
  %34273 = getelementptr inbounds i16, i16* %34245, i64 -12
  %34274 = bitcast i16* %34273 to <16 x i16>*
  %34275 = load <16 x i16>, <16 x i16>* %34274, align 2, !tbaa !396
  %34276 = getelementptr inbounds i16, i16* %34245, i64 -26
  %34277 = bitcast i16* %34276 to <16 x i16>*
  %34278 = load <16 x i16>, <16 x i16>* %34277, align 2, !tbaa !396
  %34279 = getelementptr inbounds i16, i16* %34245, i64 -10
  %34280 = bitcast i16* %34279 to <16 x i16>*
  %34281 = load <16 x i16>, <16 x i16>* %34280, align 2, !tbaa !396
  %34282 = getelementptr inbounds i16, i16* %34245, i64 -27
  %34283 = bitcast i16* %34282 to <16 x i16>*
  %34284 = load <16 x i16>, <16 x i16>* %34283, align 2, !tbaa !396
  %34285 = getelementptr inbounds i16, i16* %34245, i64 -11
  %34286 = bitcast i16* %34285 to <16 x i16>*
  %34287 = load <16 x i16>, <16 x i16>* %34286, align 2, !tbaa !396
  %34288 = add <16 x i16> %34254, %34248
  %34289 = add <16 x i16> %34288, %34260
  %34290 = add <16 x i16> %34289, %34266
  %34291 = add <16 x i16> %34290, %34272
  %34292 = add <16 x i16> %34291, %34278
  %34293 = add <16 x i16> %34292, %34284
  %34294 = add <16 x i16> %34257, %34251
  %34295 = add <16 x i16> %34294, %34263
  %34296 = add <16 x i16> %34295, %34269
  %34297 = add <16 x i16> %34296, %34275
  %34298 = add <16 x i16> %34297, %34281
  %34299 = add <16 x i16> %34298, %34287
  %34300 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34293, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34301 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34299, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34302 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34300, <16 x i16> %34293)
  %34303 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34301, <16 x i16> %34299)
  %34304 = shufflevector <16 x i16> %34302, <16 x i16> %34303, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34305 = lshr <32 x i16> %34304, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %34306 = shufflevector <32 x i16> %34305, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34307 = zext i32 %.pre-phi3622 to i64
  %34308 = mul nsw i64 %295, %34307
  %34309 = add nsw i64 %297, %34308
  %34310 = getelementptr inbounds i16, i16* %blur_x917, i64 %34309
  %34311 = getelementptr inbounds i16, i16* %34310, i64 -32
  %34312 = bitcast i16* %34311 to <16 x i16>*
  store <16 x i16> %34306, <16 x i16>* %34312, align 2, !tbaa !399
  %34313 = shufflevector <32 x i16> %34305, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34314 = getelementptr inbounds i16, i16* %34310, i64 -16
  %34315 = bitcast i16* %34314 to <16 x i16>*
  store <16 x i16> %34313, <16 x i16>* %34315, align 2, !tbaa !399
  %34316 = zext i32 %.pre-phi3602 to i64
  %34317 = mul nsw i64 %34316, %314
  %34318 = add nsw i64 %34317, %292
  %34319 = getelementptr inbounds i16, i16* %blur_x917, i64 %34318
  %34320 = getelementptr inbounds i16, i16* %34319, i64 -32
  %34321 = bitcast i16* %34320 to <16 x i16>*
  %34322 = load <16 x i16>, <16 x i16>* %34321, align 2, !tbaa !399
  %34323 = getelementptr inbounds i16, i16* %34319, i64 -16
  %34324 = bitcast i16* %34323 to <16 x i16>*
  %34325 = load <16 x i16>, <16 x i16>* %34324, align 2, !tbaa !399
  %34326 = zext i32 %.pre-phi3598 to i64
  %34327 = mul nsw i64 %34326, %314
  %34328 = add nsw i64 %34327, %292
  %34329 = getelementptr inbounds i16, i16* %blur_x917, i64 %34328
  %34330 = getelementptr inbounds i16, i16* %34329, i64 -32
  %34331 = bitcast i16* %34330 to <16 x i16>*
  %34332 = load <16 x i16>, <16 x i16>* %34331, align 2, !tbaa !399
  %34333 = getelementptr inbounds i16, i16* %34329, i64 -16
  %34334 = bitcast i16* %34333 to <16 x i16>*
  %34335 = load <16 x i16>, <16 x i16>* %34334, align 2, !tbaa !399
  %34336 = zext i32 %.pre-phi3606 to i64
  %34337 = mul nsw i64 %34336, %314
  %34338 = add nsw i64 %34337, %292
  %34339 = getelementptr inbounds i16, i16* %blur_x917, i64 %34338
  %34340 = getelementptr inbounds i16, i16* %34339, i64 -32
  %34341 = bitcast i16* %34340 to <16 x i16>*
  %34342 = load <16 x i16>, <16 x i16>* %34341, align 2, !tbaa !399
  %34343 = getelementptr inbounds i16, i16* %34339, i64 -16
  %34344 = bitcast i16* %34343 to <16 x i16>*
  %34345 = load <16 x i16>, <16 x i16>* %34344, align 2, !tbaa !399
  %34346 = zext i32 %.pre-phi3610 to i64
  %34347 = mul nsw i64 %34346, %314
  %34348 = add nsw i64 %34347, %292
  %34349 = getelementptr inbounds i16, i16* %blur_x917, i64 %34348
  %34350 = getelementptr inbounds i16, i16* %34349, i64 -32
  %34351 = bitcast i16* %34350 to <16 x i16>*
  %34352 = load <16 x i16>, <16 x i16>* %34351, align 2, !tbaa !399
  %34353 = getelementptr inbounds i16, i16* %34349, i64 -16
  %34354 = bitcast i16* %34353 to <16 x i16>*
  %34355 = load <16 x i16>, <16 x i16>* %34354, align 2, !tbaa !399
  %34356 = zext i32 %.pre-phi3614 to i64
  %34357 = mul nsw i64 %34356, %314
  %34358 = add nsw i64 %34357, %292
  %34359 = getelementptr inbounds i16, i16* %blur_x917, i64 %34358
  %34360 = getelementptr inbounds i16, i16* %34359, i64 -32
  %34361 = bitcast i16* %34360 to <16 x i16>*
  %34362 = load <16 x i16>, <16 x i16>* %34361, align 2, !tbaa !399
  %34363 = getelementptr inbounds i16, i16* %34359, i64 -16
  %34364 = bitcast i16* %34363 to <16 x i16>*
  %34365 = load <16 x i16>, <16 x i16>* %34364, align 2, !tbaa !399
  %34366 = mul nsw i64 %34307, %314
  %34367 = add nsw i64 %34366, %292
  %34368 = getelementptr inbounds i16, i16* %blur_x917, i64 %34367
  %34369 = getelementptr inbounds i16, i16* %34368, i64 -32
  %34370 = bitcast i16* %34369 to <16 x i16>*
  %34371 = load <16 x i16>, <16 x i16>* %34370, align 2, !tbaa !399
  %34372 = getelementptr inbounds i16, i16* %34368, i64 -16
  %34373 = bitcast i16* %34372 to <16 x i16>*
  %34374 = load <16 x i16>, <16 x i16>* %34373, align 2, !tbaa !399
  %34375 = zext i32 %.pre-phi3618 to i64
  %34376 = mul nsw i64 %34375, %314
  %34377 = add nsw i64 %34376, %292
  %34378 = getelementptr inbounds i16, i16* %blur_x917, i64 %34377
  %34379 = getelementptr inbounds i16, i16* %34378, i64 -32
  %34380 = bitcast i16* %34379 to <16 x i16>*
  %34381 = load <16 x i16>, <16 x i16>* %34380, align 2, !tbaa !399
  %34382 = getelementptr inbounds i16, i16* %34378, i64 -16
  %34383 = bitcast i16* %34382 to <16 x i16>*
  %34384 = load <16 x i16>, <16 x i16>* %34383, align 2, !tbaa !399
  %34385 = add <16 x i16> %34332, %34322
  %34386 = add <16 x i16> %34385, %34342
  %34387 = add <16 x i16> %34386, %34352
  %34388 = add <16 x i16> %34387, %34362
  %34389 = add <16 x i16> %34388, %34371
  %34390 = add <16 x i16> %34389, %34381
  %34391 = add <16 x i16> %34335, %34325
  %34392 = add <16 x i16> %34391, %34345
  %34393 = add <16 x i16> %34392, %34355
  %34394 = add <16 x i16> %34393, %34365
  %34395 = add <16 x i16> %34394, %34374
  %34396 = add <16 x i16> %34395, %34384
  %34397 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34390, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34398 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34396, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34399 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34397, <16 x i16> %34390)
  %34400 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34398, <16 x i16> %34396)
  %34401 = shufflevector <16 x i16> %34399, <16 x i16> %34400, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34402 = lshr <32 x i16> %34401, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %34403 = shufflevector <32 x i16> %34402, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34404 = sext i32 %a367 to i64
  %34405 = add nsw i64 %34404, 24
  %34406 = mul nsw i64 %34405, %315
  %34407 = add nsw i64 %317, %34406
  %34408 = getelementptr inbounds i16, i16* %264, i64 %34407
  %34409 = getelementptr inbounds i16, i16* %34408, i64 -32
  %34410 = bitcast i16* %34409 to <16 x i16>*
  store <16 x i16> %34403, <16 x i16>* %34410, align 2, !tbaa !401
  %34411 = shufflevector <32 x i16> %34402, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34412 = getelementptr inbounds i16, i16* %34408, i64 -16
  %34413 = bitcast i16* %34412 to <16 x i16>*
  store <16 x i16> %34411, <16 x i16>* %34413, align 2, !tbaa !401
  br label %after_bb2131

"for blur_y.s0.x.x.rebased2146":                  ; preds = %"for blur_y.s0.x.x.rebased2146.preheader", %"consume blur_x2155"
  %indvars.iv3477 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2146.preheader" ], [ %indvars.iv.next3478, %"consume blur_x2155" ]
  %34414 = add nsw i64 %indvars.iv3477, %299
  %34415 = icmp slt i64 %34414, 1
  %34416 = trunc i64 %34414 to i32
  %34417 = shl nsw i32 %34416, 5
  %34418 = icmp sgt i32 %202, %34417
  %34419 = or i1 %34415, %34418
  br i1 %34419, label %"produce blur_x2153", label %"for blur_y.s0.x.x.rebased2146.consume blur_x2155_crit_edge"

"for blur_y.s0.x.x.rebased2146.consume blur_x2155_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2146"
  %.pre3675 = shl nsw i64 %34414, 5
  br label %"consume blur_x2155"

"end for blur_y.s0.x.x.rebased2147":              ; preds = %"consume blur_x2155", %after_bb2131
  br i1 %300, label %"for blur_y.s0.x.x.rebased2163.preheader", label %"end for blur_y.s0.x.x.rebased2164", !prof !386

"for blur_y.s0.x.x.rebased2163.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2147"
  %34420 = sext i32 %t17621110 to i64
  %34421 = zext i32 %.pre-phi3602 to i64
  %34422 = mul nsw i64 %34421, %314
  %34423 = sub nsw i64 %34422, %294
  %34424 = zext i32 %.pre-phi3598 to i64
  %34425 = mul nsw i64 %34424, %314
  %34426 = sub nsw i64 %34425, %294
  %34427 = zext i32 %.pre-phi3606 to i64
  %34428 = mul nsw i64 %34427, %314
  %34429 = sub nsw i64 %34428, %294
  %34430 = zext i32 %.pre-phi3610 to i64
  %34431 = mul nsw i64 %34430, %314
  %34432 = sub nsw i64 %34431, %294
  %34433 = zext i32 %.pre-phi3614 to i64
  %34434 = mul nsw i64 %34433, %314
  %34435 = sub nsw i64 %34434, %294
  %34436 = zext i32 %.pre-phi3622 to i64
  %34437 = mul nsw i64 %34436, %314
  %34438 = sub nsw i64 %34437, %294
  %34439 = zext i32 %.pre-phi3618 to i64
  %34440 = mul nsw i64 %34439, %314
  %34441 = sub nsw i64 %34440, %294
  %34442 = sext i32 %a367 to i64
  %34443 = add nsw i64 %34442, 24
  %34444 = mul nsw i64 %34443, %315
  %34445 = add nsw i64 %34444, %318
  br label %"for blur_y.s0.x.x.rebased2163"

"produce blur_x2153":                             ; preds = %"for blur_y.s0.x.x.rebased2146"
  %t11362154 = add nsw i32 %34417, %t21452143
  %34446 = sext i32 %t11362154 to i64
  %34447 = getelementptr inbounds i16, i16* %read_input860, i64 %34446
  %34448 = getelementptr inbounds i16, i16* %34447, i64 1
  %34449 = bitcast i16* %34448 to <16 x i16>*
  %34450 = load <16 x i16>, <16 x i16>* %34449, align 2, !tbaa !396
  %34451 = getelementptr inbounds i16, i16* %34447, i64 17
  %34452 = bitcast i16* %34451 to <16 x i16>*
  %34453 = load <16 x i16>, <16 x i16>* %34452, align 2, !tbaa !396
  %34454 = bitcast i16* %34447 to <16 x i16>*
  %34455 = load <16 x i16>, <16 x i16>* %34454, align 2, !tbaa !396
  %34456 = getelementptr inbounds i16, i16* %34447, i64 16
  %34457 = bitcast i16* %34456 to <16 x i16>*
  %34458 = load <16 x i16>, <16 x i16>* %34457, align 2, !tbaa !396
  %34459 = getelementptr inbounds i16, i16* %34447, i64 2
  %34460 = bitcast i16* %34459 to <16 x i16>*
  %34461 = load <16 x i16>, <16 x i16>* %34460, align 2, !tbaa !396
  %34462 = getelementptr inbounds i16, i16* %34447, i64 18
  %34463 = bitcast i16* %34462 to <16 x i16>*
  %34464 = load <16 x i16>, <16 x i16>* %34463, align 2, !tbaa !396
  %34465 = getelementptr inbounds i16, i16* %34447, i64 3
  %34466 = bitcast i16* %34465 to <16 x i16>*
  %34467 = load <16 x i16>, <16 x i16>* %34466, align 2, !tbaa !396
  %34468 = getelementptr inbounds i16, i16* %34447, i64 19
  %34469 = bitcast i16* %34468 to <16 x i16>*
  %34470 = load <16 x i16>, <16 x i16>* %34469, align 2, !tbaa !396
  %34471 = getelementptr inbounds i16, i16* %34447, i64 4
  %34472 = bitcast i16* %34471 to <16 x i16>*
  %34473 = load <16 x i16>, <16 x i16>* %34472, align 2, !tbaa !396
  %34474 = getelementptr inbounds i16, i16* %34447, i64 20
  %34475 = bitcast i16* %34474 to <16 x i16>*
  %34476 = load <16 x i16>, <16 x i16>* %34475, align 2, !tbaa !396
  %34477 = getelementptr inbounds i16, i16* %34447, i64 6
  %34478 = bitcast i16* %34477 to <16 x i16>*
  %34479 = load <16 x i16>, <16 x i16>* %34478, align 2, !tbaa !396
  %34480 = getelementptr inbounds i16, i16* %34447, i64 22
  %34481 = bitcast i16* %34480 to <16 x i16>*
  %34482 = load <16 x i16>, <16 x i16>* %34481, align 2, !tbaa !396
  %34483 = getelementptr inbounds i16, i16* %34447, i64 5
  %34484 = bitcast i16* %34483 to <16 x i16>*
  %34485 = load <16 x i16>, <16 x i16>* %34484, align 2, !tbaa !396
  %34486 = getelementptr inbounds i16, i16* %34447, i64 21
  %34487 = bitcast i16* %34486 to <16 x i16>*
  %34488 = load <16 x i16>, <16 x i16>* %34487, align 2, !tbaa !396
  %34489 = add <16 x i16> %34455, %34450
  %34490 = add <16 x i16> %34489, %34461
  %34491 = add <16 x i16> %34490, %34467
  %34492 = add <16 x i16> %34491, %34473
  %34493 = add <16 x i16> %34492, %34479
  %34494 = add <16 x i16> %34493, %34485
  %34495 = add <16 x i16> %34458, %34453
  %34496 = add <16 x i16> %34495, %34464
  %34497 = add <16 x i16> %34496, %34470
  %34498 = add <16 x i16> %34497, %34476
  %34499 = add <16 x i16> %34498, %34482
  %34500 = add <16 x i16> %34499, %34488
  %34501 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34494, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34502 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34500, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34503 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34501, <16 x i16> %34494)
  %34504 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34502, <16 x i16> %34500)
  %34505 = shufflevector <16 x i16> %34503, <16 x i16> %34504, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34506 = lshr <32 x i16> %34505, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %34507 = shufflevector <32 x i16> %34506, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34508 = shl nsw i64 %34414, 5
  %34509 = add nsw i64 %34508, %34219
  %34510 = getelementptr inbounds i16, i16* %blur_x917, i64 %34509
  %34511 = bitcast i16* %34510 to <16 x i16>*
  store <16 x i16> %34507, <16 x i16>* %34511, align 2, !tbaa !399
  %34512 = shufflevector <32 x i16> %34506, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34513 = getelementptr inbounds i16, i16* %34510, i64 16
  %34514 = bitcast i16* %34513 to <16 x i16>*
  store <16 x i16> %34512, <16 x i16>* %34514, align 2, !tbaa !399
  br label %"consume blur_x2155"

"consume blur_x2155":                             ; preds = %"for blur_y.s0.x.x.rebased2146.consume blur_x2155_crit_edge", %"produce blur_x2153"
  %.pre-phi3676 = phi i64 [ %.pre3675, %"for blur_y.s0.x.x.rebased2146.consume blur_x2155_crit_edge" ], [ %34508, %"produce blur_x2153" ]
  %34515 = add nsw i64 %34222, %.pre-phi3676
  %34516 = getelementptr inbounds i16, i16* %blur_x917, i64 %34515
  %34517 = bitcast i16* %34516 to <16 x i16>*
  %34518 = load <16 x i16>, <16 x i16>* %34517, align 2, !tbaa !399
  %34519 = getelementptr inbounds i16, i16* %34516, i64 16
  %34520 = bitcast i16* %34519 to <16 x i16>*
  %34521 = load <16 x i16>, <16 x i16>* %34520, align 2, !tbaa !399
  %34522 = add nsw i64 %34225, %.pre-phi3676
  %34523 = getelementptr inbounds i16, i16* %blur_x917, i64 %34522
  %34524 = bitcast i16* %34523 to <16 x i16>*
  %34525 = load <16 x i16>, <16 x i16>* %34524, align 2, !tbaa !399
  %34526 = getelementptr inbounds i16, i16* %34523, i64 16
  %34527 = bitcast i16* %34526 to <16 x i16>*
  %34528 = load <16 x i16>, <16 x i16>* %34527, align 2, !tbaa !399
  %34529 = add nsw i64 %34228, %.pre-phi3676
  %34530 = getelementptr inbounds i16, i16* %blur_x917, i64 %34529
  %34531 = bitcast i16* %34530 to <16 x i16>*
  %34532 = load <16 x i16>, <16 x i16>* %34531, align 2, !tbaa !399
  %34533 = getelementptr inbounds i16, i16* %34530, i64 16
  %34534 = bitcast i16* %34533 to <16 x i16>*
  %34535 = load <16 x i16>, <16 x i16>* %34534, align 2, !tbaa !399
  %34536 = add nsw i64 %34231, %.pre-phi3676
  %34537 = getelementptr inbounds i16, i16* %blur_x917, i64 %34536
  %34538 = bitcast i16* %34537 to <16 x i16>*
  %34539 = load <16 x i16>, <16 x i16>* %34538, align 2, !tbaa !399
  %34540 = getelementptr inbounds i16, i16* %34537, i64 16
  %34541 = bitcast i16* %34540 to <16 x i16>*
  %34542 = load <16 x i16>, <16 x i16>* %34541, align 2, !tbaa !399
  %34543 = add nsw i64 %34234, %.pre-phi3676
  %34544 = getelementptr inbounds i16, i16* %blur_x917, i64 %34543
  %34545 = bitcast i16* %34544 to <16 x i16>*
  %34546 = load <16 x i16>, <16 x i16>* %34545, align 2, !tbaa !399
  %34547 = getelementptr inbounds i16, i16* %34544, i64 16
  %34548 = bitcast i16* %34547 to <16 x i16>*
  %34549 = load <16 x i16>, <16 x i16>* %34548, align 2, !tbaa !399
  %34550 = add nsw i64 %34237, %.pre-phi3676
  %34551 = getelementptr inbounds i16, i16* %blur_x917, i64 %34550
  %34552 = bitcast i16* %34551 to <16 x i16>*
  %34553 = load <16 x i16>, <16 x i16>* %34552, align 2, !tbaa !399
  %34554 = getelementptr inbounds i16, i16* %34551, i64 16
  %34555 = bitcast i16* %34554 to <16 x i16>*
  %34556 = load <16 x i16>, <16 x i16>* %34555, align 2, !tbaa !399
  %34557 = add nsw i64 %34240, %.pre-phi3676
  %34558 = getelementptr inbounds i16, i16* %blur_x917, i64 %34557
  %34559 = bitcast i16* %34558 to <16 x i16>*
  %34560 = load <16 x i16>, <16 x i16>* %34559, align 2, !tbaa !399
  %34561 = getelementptr inbounds i16, i16* %34558, i64 16
  %34562 = bitcast i16* %34561 to <16 x i16>*
  %34563 = load <16 x i16>, <16 x i16>* %34562, align 2, !tbaa !399
  %34564 = add <16 x i16> %34525, %34518
  %34565 = add <16 x i16> %34564, %34532
  %34566 = add <16 x i16> %34565, %34539
  %34567 = add <16 x i16> %34566, %34546
  %34568 = add <16 x i16> %34567, %34553
  %34569 = add <16 x i16> %34568, %34560
  %34570 = add <16 x i16> %34528, %34521
  %34571 = add <16 x i16> %34570, %34535
  %34572 = add <16 x i16> %34571, %34542
  %34573 = add <16 x i16> %34572, %34549
  %34574 = add <16 x i16> %34573, %34556
  %34575 = add <16 x i16> %34574, %34563
  %34576 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34569, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34577 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34575, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34578 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34576, <16 x i16> %34569)
  %34579 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34577, <16 x i16> %34575)
  %34580 = shufflevector <16 x i16> %34578, <16 x i16> %34579, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34581 = lshr <32 x i16> %34580, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %34582 = shufflevector <32 x i16> %34581, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34583 = add nsw i64 %34244, %.pre-phi3676
  %34584 = getelementptr inbounds i16, i16* %264, i64 %34583
  %34585 = bitcast i16* %34584 to <16 x i16>*
  store <16 x i16> %34582, <16 x i16>* %34585, align 2, !tbaa !401
  %34586 = shufflevector <32 x i16> %34581, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34587 = getelementptr inbounds i16, i16* %34584, i64 16
  %34588 = bitcast i16* %34587 to <16 x i16>*
  store <16 x i16> %34586, <16 x i16>* %34588, align 2, !tbaa !401
  %indvars.iv.next3478 = add nuw nsw i64 %indvars.iv3477, 1
  %.not2662 = icmp eq i64 %indvars.iv.next3478, %386
  br i1 %.not2662, label %"end for blur_y.s0.x.x.rebased2147", label %"for blur_y.s0.x.x.rebased2146"

"for blur_y.s0.x.x.rebased2163":                  ; preds = %"for blur_y.s0.x.x.rebased2163.preheader", %"consume blur_x2173"
  %blur_y.s0.x.x.rebased2165 = phi i32 [ %34739, %"consume blur_x2173" ], [ 0, %"for blur_y.s0.x.x.rebased2163.preheader" ]
  %34589 = add nsw i32 %blur_y.s0.x.x.rebased2165, %t1670852
  %a628 = shl nsw i32 %34589, 5
  %34590 = icmp sgt i32 %a355, %a628
  %b634 = select i1 %34590, i32 %a628, i32 %a355
  %34591 = icmp slt i32 %34589, 1
  %34592 = icmp sgt i32 %202, %a628
  %34593 = or i1 %34591, %34592
  br i1 %34593, label %"produce blur_x2170", label %"consume blur_x2173"

"end for blur_y.s0.x.x.rebased2164":              ; preds = %"consume blur_x2173", %"end for blur_y.s0.x.x.rebased2147"
  br i1 %232, label %"produce blur_x2177", label %after_bb2174

"produce blur_x2170":                             ; preds = %"for blur_y.s0.x.x.rebased2163"
  %34594 = icmp slt i32 %b634, %202
  %blur_x.s0.x.v1.base.s2171 = select i1 %34594, i32 %b634, i32 %202
  %t11412172 = add nsw i32 %blur_x.s0.x.v1.base.s2171, %t21452143
  %34595 = sext i32 %t11412172 to i64
  %34596 = getelementptr inbounds i16, i16* %read_input860, i64 %34595
  %34597 = getelementptr inbounds i16, i16* %34596, i64 1
  %34598 = bitcast i16* %34597 to <16 x i16>*
  %34599 = load <16 x i16>, <16 x i16>* %34598, align 2, !tbaa !396
  %34600 = getelementptr inbounds i16, i16* %34596, i64 17
  %34601 = bitcast i16* %34600 to <16 x i16>*
  %34602 = load <16 x i16>, <16 x i16>* %34601, align 2, !tbaa !396
  %34603 = bitcast i16* %34596 to <16 x i16>*
  %34604 = load <16 x i16>, <16 x i16>* %34603, align 2, !tbaa !396
  %34605 = getelementptr inbounds i16, i16* %34596, i64 16
  %34606 = bitcast i16* %34605 to <16 x i16>*
  %34607 = load <16 x i16>, <16 x i16>* %34606, align 2, !tbaa !396
  %34608 = getelementptr inbounds i16, i16* %34596, i64 2
  %34609 = bitcast i16* %34608 to <16 x i16>*
  %34610 = load <16 x i16>, <16 x i16>* %34609, align 2, !tbaa !396
  %34611 = getelementptr inbounds i16, i16* %34596, i64 18
  %34612 = bitcast i16* %34611 to <16 x i16>*
  %34613 = load <16 x i16>, <16 x i16>* %34612, align 2, !tbaa !396
  %34614 = getelementptr inbounds i16, i16* %34596, i64 3
  %34615 = bitcast i16* %34614 to <16 x i16>*
  %34616 = load <16 x i16>, <16 x i16>* %34615, align 2, !tbaa !396
  %34617 = getelementptr inbounds i16, i16* %34596, i64 19
  %34618 = bitcast i16* %34617 to <16 x i16>*
  %34619 = load <16 x i16>, <16 x i16>* %34618, align 2, !tbaa !396
  %34620 = getelementptr inbounds i16, i16* %34596, i64 4
  %34621 = bitcast i16* %34620 to <16 x i16>*
  %34622 = load <16 x i16>, <16 x i16>* %34621, align 2, !tbaa !396
  %34623 = getelementptr inbounds i16, i16* %34596, i64 20
  %34624 = bitcast i16* %34623 to <16 x i16>*
  %34625 = load <16 x i16>, <16 x i16>* %34624, align 2, !tbaa !396
  %34626 = getelementptr inbounds i16, i16* %34596, i64 6
  %34627 = bitcast i16* %34626 to <16 x i16>*
  %34628 = load <16 x i16>, <16 x i16>* %34627, align 2, !tbaa !396
  %34629 = getelementptr inbounds i16, i16* %34596, i64 22
  %34630 = bitcast i16* %34629 to <16 x i16>*
  %34631 = load <16 x i16>, <16 x i16>* %34630, align 2, !tbaa !396
  %34632 = getelementptr inbounds i16, i16* %34596, i64 5
  %34633 = bitcast i16* %34632 to <16 x i16>*
  %34634 = load <16 x i16>, <16 x i16>* %34633, align 2, !tbaa !396
  %34635 = getelementptr inbounds i16, i16* %34596, i64 21
  %34636 = bitcast i16* %34635 to <16 x i16>*
  %34637 = load <16 x i16>, <16 x i16>* %34636, align 2, !tbaa !396
  %34638 = add <16 x i16> %34604, %34599
  %34639 = add <16 x i16> %34638, %34610
  %34640 = add <16 x i16> %34639, %34616
  %34641 = add <16 x i16> %34640, %34622
  %34642 = add <16 x i16> %34641, %34628
  %34643 = add <16 x i16> %34642, %34634
  %34644 = add <16 x i16> %34607, %34602
  %34645 = add <16 x i16> %34644, %34613
  %34646 = add <16 x i16> %34645, %34619
  %34647 = add <16 x i16> %34646, %34625
  %34648 = add <16 x i16> %34647, %34631
  %34649 = add <16 x i16> %34648, %34637
  %34650 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34643, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34651 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34649, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34652 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34650, <16 x i16> %34643)
  %34653 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34651, <16 x i16> %34649)
  %34654 = shufflevector <16 x i16> %34652, <16 x i16> %34653, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34655 = lshr <32 x i16> %34654, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %34656 = shufflevector <32 x i16> %34655, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34657 = sext i32 %blur_x.s0.x.v1.base.s2171 to i64
  %34658 = add nsw i64 %34657, %34420
  %34659 = getelementptr inbounds i16, i16* %blur_x917, i64 %34658
  %34660 = bitcast i16* %34659 to <16 x i16>*
  store <16 x i16> %34656, <16 x i16>* %34660, align 2, !tbaa !399
  %34661 = shufflevector <32 x i16> %34655, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34662 = getelementptr inbounds i16, i16* %34659, i64 16
  %34663 = bitcast i16* %34662 to <16 x i16>*
  store <16 x i16> %34661, <16 x i16>* %34663, align 2, !tbaa !399
  br label %"consume blur_x2173"

"consume blur_x2173":                             ; preds = %"for blur_y.s0.x.x.rebased2163", %"produce blur_x2170"
  %34664 = sext i32 %b634 to i64
  %34665 = add nsw i64 %34423, %34664
  %34666 = getelementptr inbounds i16, i16* %blur_x917, i64 %34665
  %34667 = bitcast i16* %34666 to <16 x i16>*
  %34668 = load <16 x i16>, <16 x i16>* %34667, align 2, !tbaa !399
  %34669 = getelementptr inbounds i16, i16* %34666, i64 16
  %34670 = bitcast i16* %34669 to <16 x i16>*
  %34671 = load <16 x i16>, <16 x i16>* %34670, align 2, !tbaa !399
  %34672 = add nsw i64 %34426, %34664
  %34673 = getelementptr inbounds i16, i16* %blur_x917, i64 %34672
  %34674 = bitcast i16* %34673 to <16 x i16>*
  %34675 = load <16 x i16>, <16 x i16>* %34674, align 2, !tbaa !399
  %34676 = getelementptr inbounds i16, i16* %34673, i64 16
  %34677 = bitcast i16* %34676 to <16 x i16>*
  %34678 = load <16 x i16>, <16 x i16>* %34677, align 2, !tbaa !399
  %34679 = add nsw i64 %34429, %34664
  %34680 = getelementptr inbounds i16, i16* %blur_x917, i64 %34679
  %34681 = bitcast i16* %34680 to <16 x i16>*
  %34682 = load <16 x i16>, <16 x i16>* %34681, align 2, !tbaa !399
  %34683 = getelementptr inbounds i16, i16* %34680, i64 16
  %34684 = bitcast i16* %34683 to <16 x i16>*
  %34685 = load <16 x i16>, <16 x i16>* %34684, align 2, !tbaa !399
  %34686 = add nsw i64 %34432, %34664
  %34687 = getelementptr inbounds i16, i16* %blur_x917, i64 %34686
  %34688 = bitcast i16* %34687 to <16 x i16>*
  %34689 = load <16 x i16>, <16 x i16>* %34688, align 2, !tbaa !399
  %34690 = getelementptr inbounds i16, i16* %34687, i64 16
  %34691 = bitcast i16* %34690 to <16 x i16>*
  %34692 = load <16 x i16>, <16 x i16>* %34691, align 2, !tbaa !399
  %34693 = add nsw i64 %34435, %34664
  %34694 = getelementptr inbounds i16, i16* %blur_x917, i64 %34693
  %34695 = bitcast i16* %34694 to <16 x i16>*
  %34696 = load <16 x i16>, <16 x i16>* %34695, align 2, !tbaa !399
  %34697 = getelementptr inbounds i16, i16* %34694, i64 16
  %34698 = bitcast i16* %34697 to <16 x i16>*
  %34699 = load <16 x i16>, <16 x i16>* %34698, align 2, !tbaa !399
  %34700 = add nsw i64 %34438, %34664
  %34701 = getelementptr inbounds i16, i16* %blur_x917, i64 %34700
  %34702 = bitcast i16* %34701 to <16 x i16>*
  %34703 = load <16 x i16>, <16 x i16>* %34702, align 2, !tbaa !399
  %34704 = getelementptr inbounds i16, i16* %34701, i64 16
  %34705 = bitcast i16* %34704 to <16 x i16>*
  %34706 = load <16 x i16>, <16 x i16>* %34705, align 2, !tbaa !399
  %34707 = add nsw i64 %34441, %34664
  %34708 = getelementptr inbounds i16, i16* %blur_x917, i64 %34707
  %34709 = bitcast i16* %34708 to <16 x i16>*
  %34710 = load <16 x i16>, <16 x i16>* %34709, align 2, !tbaa !399
  %34711 = getelementptr inbounds i16, i16* %34708, i64 16
  %34712 = bitcast i16* %34711 to <16 x i16>*
  %34713 = load <16 x i16>, <16 x i16>* %34712, align 2, !tbaa !399
  %34714 = add <16 x i16> %34675, %34668
  %34715 = add <16 x i16> %34714, %34682
  %34716 = add <16 x i16> %34715, %34689
  %34717 = add <16 x i16> %34716, %34696
  %34718 = add <16 x i16> %34717, %34703
  %34719 = add <16 x i16> %34718, %34710
  %34720 = add <16 x i16> %34678, %34671
  %34721 = add <16 x i16> %34720, %34685
  %34722 = add <16 x i16> %34721, %34692
  %34723 = add <16 x i16> %34722, %34699
  %34724 = add <16 x i16> %34723, %34706
  %34725 = add <16 x i16> %34724, %34713
  %34726 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34719, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34727 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34725, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34728 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34726, <16 x i16> %34719)
  %34729 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34727, <16 x i16> %34725)
  %34730 = shufflevector <16 x i16> %34728, <16 x i16> %34729, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34731 = lshr <32 x i16> %34730, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %34732 = shufflevector <32 x i16> %34731, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34733 = add nsw i64 %34445, %34664
  %34734 = getelementptr inbounds i16, i16* %264, i64 %34733
  %34735 = bitcast i16* %34734 to <16 x i16>*
  store <16 x i16> %34732, <16 x i16>* %34735, align 2, !tbaa !401
  %34736 = shufflevector <32 x i16> %34731, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34737 = getelementptr inbounds i16, i16* %34734, i64 16
  %34738 = bitcast i16* %34737 to <16 x i16>*
  store <16 x i16> %34736, <16 x i16>* %34738, align 2, !tbaa !401
  %34739 = add nuw nsw i32 %blur_y.s0.x.x.rebased2165, 1
  %.not2661 = icmp eq i32 %34739, %t1727937
  br i1 %.not2661, label %"end for blur_y.s0.x.x.rebased2164", label %"for blur_y.s0.x.x.rebased2163"

after_bb2174:                                     ; preds = %"end for blur_y.s0.x.x.rebased2164", %"produce blur_x2177"
  br i1 %298, label %"for blur_y.s0.x.x.rebased2189.preheader", label %"end for blur_y.s0.x.x.rebased2190", !prof !386

"for blur_y.s0.x.x.rebased2189.preheader":        ; preds = %after_bb2174
  %34740 = sext i32 %t17781153 to i64
  %34741 = zext i32 %.pre-phi3606 to i64
  %34742 = mul nsw i64 %34741, %314
  %34743 = sub nsw i64 %34742, %294
  %34744 = zext i32 %.pre-phi3602 to i64
  %34745 = mul nsw i64 %34744, %314
  %34746 = sub nsw i64 %34745, %294
  %34747 = zext i32 %.pre-phi3610 to i64
  %34748 = mul nsw i64 %34747, %314
  %34749 = sub nsw i64 %34748, %294
  %34750 = zext i32 %.pre-phi3614 to i64
  %34751 = mul nsw i64 %34750, %314
  %34752 = sub nsw i64 %34751, %294
  %34753 = zext i32 %.pre-phi3618 to i64
  %34754 = mul nsw i64 %34753, %314
  %34755 = sub nsw i64 %34754, %294
  %34756 = zext i32 %.pre-phi3628 to i64
  %34757 = mul nsw i64 %34756, %314
  %34758 = sub nsw i64 %34757, %294
  %34759 = zext i32 %.pre-phi3622 to i64
  %34760 = mul nsw i64 %34759, %314
  %34761 = sub nsw i64 %34760, %294
  %34762 = sext i32 %a367 to i64
  %34763 = add nsw i64 %34762, 25
  %34764 = mul nsw i64 %34763, %315
  %34765 = add nsw i64 %34764, %318
  br label %"for blur_y.s0.x.x.rebased2189"

"produce blur_x2177":                             ; preds = %"end for blur_y.s0.x.x.rebased2164"
  %34766 = getelementptr inbounds i16, i16* %read_input860, i64 %367
  %34767 = getelementptr inbounds i16, i16* %34766, i64 -31
  %34768 = bitcast i16* %34767 to <16 x i16>*
  %34769 = load <16 x i16>, <16 x i16>* %34768, align 2, !tbaa !396
  %34770 = getelementptr inbounds i16, i16* %34766, i64 -15
  %34771 = bitcast i16* %34770 to <16 x i16>*
  %34772 = load <16 x i16>, <16 x i16>* %34771, align 2, !tbaa !396
  %34773 = getelementptr inbounds i16, i16* %34766, i64 -32
  %34774 = bitcast i16* %34773 to <16 x i16>*
  %34775 = load <16 x i16>, <16 x i16>* %34774, align 2, !tbaa !396
  %34776 = getelementptr inbounds i16, i16* %34766, i64 -16
  %34777 = bitcast i16* %34776 to <16 x i16>*
  %34778 = load <16 x i16>, <16 x i16>* %34777, align 2, !tbaa !396
  %34779 = getelementptr inbounds i16, i16* %34766, i64 -30
  %34780 = bitcast i16* %34779 to <16 x i16>*
  %34781 = load <16 x i16>, <16 x i16>* %34780, align 2, !tbaa !396
  %34782 = getelementptr inbounds i16, i16* %34766, i64 -14
  %34783 = bitcast i16* %34782 to <16 x i16>*
  %34784 = load <16 x i16>, <16 x i16>* %34783, align 2, !tbaa !396
  %34785 = getelementptr inbounds i16, i16* %34766, i64 -29
  %34786 = bitcast i16* %34785 to <16 x i16>*
  %34787 = load <16 x i16>, <16 x i16>* %34786, align 2, !tbaa !396
  %34788 = getelementptr inbounds i16, i16* %34766, i64 -13
  %34789 = bitcast i16* %34788 to <16 x i16>*
  %34790 = load <16 x i16>, <16 x i16>* %34789, align 2, !tbaa !396
  %34791 = getelementptr inbounds i16, i16* %34766, i64 -28
  %34792 = bitcast i16* %34791 to <16 x i16>*
  %34793 = load <16 x i16>, <16 x i16>* %34792, align 2, !tbaa !396
  %34794 = getelementptr inbounds i16, i16* %34766, i64 -12
  %34795 = bitcast i16* %34794 to <16 x i16>*
  %34796 = load <16 x i16>, <16 x i16>* %34795, align 2, !tbaa !396
  %34797 = getelementptr inbounds i16, i16* %34766, i64 -26
  %34798 = bitcast i16* %34797 to <16 x i16>*
  %34799 = load <16 x i16>, <16 x i16>* %34798, align 2, !tbaa !396
  %34800 = getelementptr inbounds i16, i16* %34766, i64 -10
  %34801 = bitcast i16* %34800 to <16 x i16>*
  %34802 = load <16 x i16>, <16 x i16>* %34801, align 2, !tbaa !396
  %34803 = getelementptr inbounds i16, i16* %34766, i64 -27
  %34804 = bitcast i16* %34803 to <16 x i16>*
  %34805 = load <16 x i16>, <16 x i16>* %34804, align 2, !tbaa !396
  %34806 = getelementptr inbounds i16, i16* %34766, i64 -11
  %34807 = bitcast i16* %34806 to <16 x i16>*
  %34808 = load <16 x i16>, <16 x i16>* %34807, align 2, !tbaa !396
  %34809 = add <16 x i16> %34775, %34769
  %34810 = add <16 x i16> %34809, %34781
  %34811 = add <16 x i16> %34810, %34787
  %34812 = add <16 x i16> %34811, %34793
  %34813 = add <16 x i16> %34812, %34799
  %34814 = add <16 x i16> %34813, %34805
  %34815 = add <16 x i16> %34778, %34772
  %34816 = add <16 x i16> %34815, %34784
  %34817 = add <16 x i16> %34816, %34790
  %34818 = add <16 x i16> %34817, %34796
  %34819 = add <16 x i16> %34818, %34802
  %34820 = add <16 x i16> %34819, %34808
  %34821 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34814, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34822 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34820, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34823 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34821, <16 x i16> %34814)
  %34824 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34822, <16 x i16> %34820)
  %34825 = shufflevector <16 x i16> %34823, <16 x i16> %34824, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34826 = lshr <32 x i16> %34825, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %34827 = shufflevector <32 x i16> %34826, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34828 = zext i32 %.pre-phi3628 to i64
  %34829 = mul nsw i64 %295, %34828
  %34830 = add nsw i64 %297, %34829
  %34831 = getelementptr inbounds i16, i16* %blur_x917, i64 %34830
  %34832 = getelementptr inbounds i16, i16* %34831, i64 -32
  %34833 = bitcast i16* %34832 to <16 x i16>*
  store <16 x i16> %34827, <16 x i16>* %34833, align 2, !tbaa !399
  %34834 = shufflevector <32 x i16> %34826, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34835 = getelementptr inbounds i16, i16* %34831, i64 -16
  %34836 = bitcast i16* %34835 to <16 x i16>*
  store <16 x i16> %34834, <16 x i16>* %34836, align 2, !tbaa !399
  %34837 = zext i32 %.pre-phi3606 to i64
  %34838 = mul nsw i64 %34837, %314
  %34839 = add nsw i64 %34838, %292
  %34840 = getelementptr inbounds i16, i16* %blur_x917, i64 %34839
  %34841 = getelementptr inbounds i16, i16* %34840, i64 -32
  %34842 = bitcast i16* %34841 to <16 x i16>*
  %34843 = load <16 x i16>, <16 x i16>* %34842, align 2, !tbaa !399
  %34844 = getelementptr inbounds i16, i16* %34840, i64 -16
  %34845 = bitcast i16* %34844 to <16 x i16>*
  %34846 = load <16 x i16>, <16 x i16>* %34845, align 2, !tbaa !399
  %34847 = zext i32 %.pre-phi3602 to i64
  %34848 = mul nsw i64 %34847, %314
  %34849 = add nsw i64 %34848, %292
  %34850 = getelementptr inbounds i16, i16* %blur_x917, i64 %34849
  %34851 = getelementptr inbounds i16, i16* %34850, i64 -32
  %34852 = bitcast i16* %34851 to <16 x i16>*
  %34853 = load <16 x i16>, <16 x i16>* %34852, align 2, !tbaa !399
  %34854 = getelementptr inbounds i16, i16* %34850, i64 -16
  %34855 = bitcast i16* %34854 to <16 x i16>*
  %34856 = load <16 x i16>, <16 x i16>* %34855, align 2, !tbaa !399
  %34857 = zext i32 %.pre-phi3610 to i64
  %34858 = mul nsw i64 %34857, %314
  %34859 = add nsw i64 %34858, %292
  %34860 = getelementptr inbounds i16, i16* %blur_x917, i64 %34859
  %34861 = getelementptr inbounds i16, i16* %34860, i64 -32
  %34862 = bitcast i16* %34861 to <16 x i16>*
  %34863 = load <16 x i16>, <16 x i16>* %34862, align 2, !tbaa !399
  %34864 = getelementptr inbounds i16, i16* %34860, i64 -16
  %34865 = bitcast i16* %34864 to <16 x i16>*
  %34866 = load <16 x i16>, <16 x i16>* %34865, align 2, !tbaa !399
  %34867 = zext i32 %.pre-phi3614 to i64
  %34868 = mul nsw i64 %34867, %314
  %34869 = add nsw i64 %34868, %292
  %34870 = getelementptr inbounds i16, i16* %blur_x917, i64 %34869
  %34871 = getelementptr inbounds i16, i16* %34870, i64 -32
  %34872 = bitcast i16* %34871 to <16 x i16>*
  %34873 = load <16 x i16>, <16 x i16>* %34872, align 2, !tbaa !399
  %34874 = getelementptr inbounds i16, i16* %34870, i64 -16
  %34875 = bitcast i16* %34874 to <16 x i16>*
  %34876 = load <16 x i16>, <16 x i16>* %34875, align 2, !tbaa !399
  %34877 = zext i32 %.pre-phi3618 to i64
  %34878 = mul nsw i64 %34877, %314
  %34879 = add nsw i64 %34878, %292
  %34880 = getelementptr inbounds i16, i16* %blur_x917, i64 %34879
  %34881 = getelementptr inbounds i16, i16* %34880, i64 -32
  %34882 = bitcast i16* %34881 to <16 x i16>*
  %34883 = load <16 x i16>, <16 x i16>* %34882, align 2, !tbaa !399
  %34884 = getelementptr inbounds i16, i16* %34880, i64 -16
  %34885 = bitcast i16* %34884 to <16 x i16>*
  %34886 = load <16 x i16>, <16 x i16>* %34885, align 2, !tbaa !399
  %34887 = mul nsw i64 %34828, %314
  %34888 = add nsw i64 %34887, %292
  %34889 = getelementptr inbounds i16, i16* %blur_x917, i64 %34888
  %34890 = getelementptr inbounds i16, i16* %34889, i64 -32
  %34891 = bitcast i16* %34890 to <16 x i16>*
  %34892 = load <16 x i16>, <16 x i16>* %34891, align 2, !tbaa !399
  %34893 = getelementptr inbounds i16, i16* %34889, i64 -16
  %34894 = bitcast i16* %34893 to <16 x i16>*
  %34895 = load <16 x i16>, <16 x i16>* %34894, align 2, !tbaa !399
  %34896 = zext i32 %.pre-phi3622 to i64
  %34897 = mul nsw i64 %34896, %314
  %34898 = add nsw i64 %34897, %292
  %34899 = getelementptr inbounds i16, i16* %blur_x917, i64 %34898
  %34900 = getelementptr inbounds i16, i16* %34899, i64 -32
  %34901 = bitcast i16* %34900 to <16 x i16>*
  %34902 = load <16 x i16>, <16 x i16>* %34901, align 2, !tbaa !399
  %34903 = getelementptr inbounds i16, i16* %34899, i64 -16
  %34904 = bitcast i16* %34903 to <16 x i16>*
  %34905 = load <16 x i16>, <16 x i16>* %34904, align 2, !tbaa !399
  %34906 = add <16 x i16> %34853, %34843
  %34907 = add <16 x i16> %34906, %34863
  %34908 = add <16 x i16> %34907, %34873
  %34909 = add <16 x i16> %34908, %34883
  %34910 = add <16 x i16> %34909, %34892
  %34911 = add <16 x i16> %34910, %34902
  %34912 = add <16 x i16> %34856, %34846
  %34913 = add <16 x i16> %34912, %34866
  %34914 = add <16 x i16> %34913, %34876
  %34915 = add <16 x i16> %34914, %34886
  %34916 = add <16 x i16> %34915, %34895
  %34917 = add <16 x i16> %34916, %34905
  %34918 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34911, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34919 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %34917, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %34920 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34918, <16 x i16> %34911)
  %34921 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %34919, <16 x i16> %34917)
  %34922 = shufflevector <16 x i16> %34920, <16 x i16> %34921, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34923 = lshr <32 x i16> %34922, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %34924 = shufflevector <32 x i16> %34923, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %34925 = sext i32 %a367 to i64
  %34926 = add nsw i64 %34925, 25
  %34927 = mul nsw i64 %34926, %315
  %34928 = add nsw i64 %317, %34927
  %34929 = getelementptr inbounds i16, i16* %264, i64 %34928
  %34930 = getelementptr inbounds i16, i16* %34929, i64 -32
  %34931 = bitcast i16* %34930 to <16 x i16>*
  store <16 x i16> %34924, <16 x i16>* %34931, align 2, !tbaa !401
  %34932 = shufflevector <32 x i16> %34923, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %34933 = getelementptr inbounds i16, i16* %34929, i64 -16
  %34934 = bitcast i16* %34933 to <16 x i16>*
  store <16 x i16> %34932, <16 x i16>* %34934, align 2, !tbaa !401
  br label %after_bb2174

"for blur_y.s0.x.x.rebased2189":                  ; preds = %"for blur_y.s0.x.x.rebased2189.preheader", %"consume blur_x2198"
  %indvars.iv3480 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2189.preheader" ], [ %indvars.iv.next3481, %"consume blur_x2198" ]
  %34935 = add nsw i64 %indvars.iv3480, %299
  %34936 = icmp slt i64 %34935, 1
  %34937 = trunc i64 %34935 to i32
  %34938 = shl nsw i32 %34937, 5
  %34939 = icmp sgt i32 %202, %34938
  %34940 = or i1 %34936, %34939
  br i1 %34940, label %"produce blur_x2196", label %"for blur_y.s0.x.x.rebased2189.consume blur_x2198_crit_edge"

"for blur_y.s0.x.x.rebased2189.consume blur_x2198_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2189"
  %.pre3677 = shl nsw i64 %34935, 5
  br label %"consume blur_x2198"

"end for blur_y.s0.x.x.rebased2190":              ; preds = %"consume blur_x2198", %after_bb2174
  br i1 %300, label %"for blur_y.s0.x.x.rebased2206.preheader", label %"end for blur_y.s0.x.x.rebased2207", !prof !386

"for blur_y.s0.x.x.rebased2206.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2190"
  %34941 = sext i32 %t17781153 to i64
  %34942 = zext i32 %.pre-phi3606 to i64
  %34943 = mul nsw i64 %34942, %314
  %34944 = sub nsw i64 %34943, %294
  %34945 = zext i32 %.pre-phi3602 to i64
  %34946 = mul nsw i64 %34945, %314
  %34947 = sub nsw i64 %34946, %294
  %34948 = zext i32 %.pre-phi3610 to i64
  %34949 = mul nsw i64 %34948, %314
  %34950 = sub nsw i64 %34949, %294
  %34951 = zext i32 %.pre-phi3614 to i64
  %34952 = mul nsw i64 %34951, %314
  %34953 = sub nsw i64 %34952, %294
  %34954 = zext i32 %.pre-phi3618 to i64
  %34955 = mul nsw i64 %34954, %314
  %34956 = sub nsw i64 %34955, %294
  %34957 = zext i32 %.pre-phi3628 to i64
  %34958 = mul nsw i64 %34957, %314
  %34959 = sub nsw i64 %34958, %294
  %34960 = zext i32 %.pre-phi3622 to i64
  %34961 = mul nsw i64 %34960, %314
  %34962 = sub nsw i64 %34961, %294
  %34963 = sext i32 %a367 to i64
  %34964 = add nsw i64 %34963, 25
  %34965 = mul nsw i64 %34964, %315
  %34966 = add nsw i64 %34965, %318
  br label %"for blur_y.s0.x.x.rebased2206"

"produce blur_x2196":                             ; preds = %"for blur_y.s0.x.x.rebased2189"
  %t11522197 = add nsw i32 %34938, %t21612186
  %34967 = sext i32 %t11522197 to i64
  %34968 = getelementptr inbounds i16, i16* %read_input860, i64 %34967
  %34969 = getelementptr inbounds i16, i16* %34968, i64 1
  %34970 = bitcast i16* %34969 to <16 x i16>*
  %34971 = load <16 x i16>, <16 x i16>* %34970, align 2, !tbaa !396
  %34972 = getelementptr inbounds i16, i16* %34968, i64 17
  %34973 = bitcast i16* %34972 to <16 x i16>*
  %34974 = load <16 x i16>, <16 x i16>* %34973, align 2, !tbaa !396
  %34975 = bitcast i16* %34968 to <16 x i16>*
  %34976 = load <16 x i16>, <16 x i16>* %34975, align 2, !tbaa !396
  %34977 = getelementptr inbounds i16, i16* %34968, i64 16
  %34978 = bitcast i16* %34977 to <16 x i16>*
  %34979 = load <16 x i16>, <16 x i16>* %34978, align 2, !tbaa !396
  %34980 = getelementptr inbounds i16, i16* %34968, i64 2
  %34981 = bitcast i16* %34980 to <16 x i16>*
  %34982 = load <16 x i16>, <16 x i16>* %34981, align 2, !tbaa !396
  %34983 = getelementptr inbounds i16, i16* %34968, i64 18
  %34984 = bitcast i16* %34983 to <16 x i16>*
  %34985 = load <16 x i16>, <16 x i16>* %34984, align 2, !tbaa !396
  %34986 = getelementptr inbounds i16, i16* %34968, i64 3
  %34987 = bitcast i16* %34986 to <16 x i16>*
  %34988 = load <16 x i16>, <16 x i16>* %34987, align 2, !tbaa !396
  %34989 = getelementptr inbounds i16, i16* %34968, i64 19
  %34990 = bitcast i16* %34989 to <16 x i16>*
  %34991 = load <16 x i16>, <16 x i16>* %34990, align 2, !tbaa !396
  %34992 = getelementptr inbounds i16, i16* %34968, i64 4
  %34993 = bitcast i16* %34992 to <16 x i16>*
  %34994 = load <16 x i16>, <16 x i16>* %34993, align 2, !tbaa !396
  %34995 = getelementptr inbounds i16, i16* %34968, i64 20
  %34996 = bitcast i16* %34995 to <16 x i16>*
  %34997 = load <16 x i16>, <16 x i16>* %34996, align 2, !tbaa !396
  %34998 = getelementptr inbounds i16, i16* %34968, i64 6
  %34999 = bitcast i16* %34998 to <16 x i16>*
  %35000 = load <16 x i16>, <16 x i16>* %34999, align 2, !tbaa !396
  %35001 = getelementptr inbounds i16, i16* %34968, i64 22
  %35002 = bitcast i16* %35001 to <16 x i16>*
  %35003 = load <16 x i16>, <16 x i16>* %35002, align 2, !tbaa !396
  %35004 = getelementptr inbounds i16, i16* %34968, i64 5
  %35005 = bitcast i16* %35004 to <16 x i16>*
  %35006 = load <16 x i16>, <16 x i16>* %35005, align 2, !tbaa !396
  %35007 = getelementptr inbounds i16, i16* %34968, i64 21
  %35008 = bitcast i16* %35007 to <16 x i16>*
  %35009 = load <16 x i16>, <16 x i16>* %35008, align 2, !tbaa !396
  %35010 = add <16 x i16> %34976, %34971
  %35011 = add <16 x i16> %35010, %34982
  %35012 = add <16 x i16> %35011, %34988
  %35013 = add <16 x i16> %35012, %34994
  %35014 = add <16 x i16> %35013, %35000
  %35015 = add <16 x i16> %35014, %35006
  %35016 = add <16 x i16> %34979, %34974
  %35017 = add <16 x i16> %35016, %34985
  %35018 = add <16 x i16> %35017, %34991
  %35019 = add <16 x i16> %35018, %34997
  %35020 = add <16 x i16> %35019, %35003
  %35021 = add <16 x i16> %35020, %35009
  %35022 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35015, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35023 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35021, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35024 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35022, <16 x i16> %35015)
  %35025 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35023, <16 x i16> %35021)
  %35026 = shufflevector <16 x i16> %35024, <16 x i16> %35025, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35027 = lshr <32 x i16> %35026, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %35028 = shufflevector <32 x i16> %35027, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35029 = shl nsw i64 %34935, 5
  %35030 = add nsw i64 %35029, %34740
  %35031 = getelementptr inbounds i16, i16* %blur_x917, i64 %35030
  %35032 = bitcast i16* %35031 to <16 x i16>*
  store <16 x i16> %35028, <16 x i16>* %35032, align 2, !tbaa !399
  %35033 = shufflevector <32 x i16> %35027, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35034 = getelementptr inbounds i16, i16* %35031, i64 16
  %35035 = bitcast i16* %35034 to <16 x i16>*
  store <16 x i16> %35033, <16 x i16>* %35035, align 2, !tbaa !399
  br label %"consume blur_x2198"

"consume blur_x2198":                             ; preds = %"for blur_y.s0.x.x.rebased2189.consume blur_x2198_crit_edge", %"produce blur_x2196"
  %.pre-phi3678 = phi i64 [ %.pre3677, %"for blur_y.s0.x.x.rebased2189.consume blur_x2198_crit_edge" ], [ %35029, %"produce blur_x2196" ]
  %35036 = add nsw i64 %34743, %.pre-phi3678
  %35037 = getelementptr inbounds i16, i16* %blur_x917, i64 %35036
  %35038 = bitcast i16* %35037 to <16 x i16>*
  %35039 = load <16 x i16>, <16 x i16>* %35038, align 2, !tbaa !399
  %35040 = getelementptr inbounds i16, i16* %35037, i64 16
  %35041 = bitcast i16* %35040 to <16 x i16>*
  %35042 = load <16 x i16>, <16 x i16>* %35041, align 2, !tbaa !399
  %35043 = add nsw i64 %34746, %.pre-phi3678
  %35044 = getelementptr inbounds i16, i16* %blur_x917, i64 %35043
  %35045 = bitcast i16* %35044 to <16 x i16>*
  %35046 = load <16 x i16>, <16 x i16>* %35045, align 2, !tbaa !399
  %35047 = getelementptr inbounds i16, i16* %35044, i64 16
  %35048 = bitcast i16* %35047 to <16 x i16>*
  %35049 = load <16 x i16>, <16 x i16>* %35048, align 2, !tbaa !399
  %35050 = add nsw i64 %34749, %.pre-phi3678
  %35051 = getelementptr inbounds i16, i16* %blur_x917, i64 %35050
  %35052 = bitcast i16* %35051 to <16 x i16>*
  %35053 = load <16 x i16>, <16 x i16>* %35052, align 2, !tbaa !399
  %35054 = getelementptr inbounds i16, i16* %35051, i64 16
  %35055 = bitcast i16* %35054 to <16 x i16>*
  %35056 = load <16 x i16>, <16 x i16>* %35055, align 2, !tbaa !399
  %35057 = add nsw i64 %34752, %.pre-phi3678
  %35058 = getelementptr inbounds i16, i16* %blur_x917, i64 %35057
  %35059 = bitcast i16* %35058 to <16 x i16>*
  %35060 = load <16 x i16>, <16 x i16>* %35059, align 2, !tbaa !399
  %35061 = getelementptr inbounds i16, i16* %35058, i64 16
  %35062 = bitcast i16* %35061 to <16 x i16>*
  %35063 = load <16 x i16>, <16 x i16>* %35062, align 2, !tbaa !399
  %35064 = add nsw i64 %34755, %.pre-phi3678
  %35065 = getelementptr inbounds i16, i16* %blur_x917, i64 %35064
  %35066 = bitcast i16* %35065 to <16 x i16>*
  %35067 = load <16 x i16>, <16 x i16>* %35066, align 2, !tbaa !399
  %35068 = getelementptr inbounds i16, i16* %35065, i64 16
  %35069 = bitcast i16* %35068 to <16 x i16>*
  %35070 = load <16 x i16>, <16 x i16>* %35069, align 2, !tbaa !399
  %35071 = add nsw i64 %34758, %.pre-phi3678
  %35072 = getelementptr inbounds i16, i16* %blur_x917, i64 %35071
  %35073 = bitcast i16* %35072 to <16 x i16>*
  %35074 = load <16 x i16>, <16 x i16>* %35073, align 2, !tbaa !399
  %35075 = getelementptr inbounds i16, i16* %35072, i64 16
  %35076 = bitcast i16* %35075 to <16 x i16>*
  %35077 = load <16 x i16>, <16 x i16>* %35076, align 2, !tbaa !399
  %35078 = add nsw i64 %34761, %.pre-phi3678
  %35079 = getelementptr inbounds i16, i16* %blur_x917, i64 %35078
  %35080 = bitcast i16* %35079 to <16 x i16>*
  %35081 = load <16 x i16>, <16 x i16>* %35080, align 2, !tbaa !399
  %35082 = getelementptr inbounds i16, i16* %35079, i64 16
  %35083 = bitcast i16* %35082 to <16 x i16>*
  %35084 = load <16 x i16>, <16 x i16>* %35083, align 2, !tbaa !399
  %35085 = add <16 x i16> %35046, %35039
  %35086 = add <16 x i16> %35085, %35053
  %35087 = add <16 x i16> %35086, %35060
  %35088 = add <16 x i16> %35087, %35067
  %35089 = add <16 x i16> %35088, %35074
  %35090 = add <16 x i16> %35089, %35081
  %35091 = add <16 x i16> %35049, %35042
  %35092 = add <16 x i16> %35091, %35056
  %35093 = add <16 x i16> %35092, %35063
  %35094 = add <16 x i16> %35093, %35070
  %35095 = add <16 x i16> %35094, %35077
  %35096 = add <16 x i16> %35095, %35084
  %35097 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35090, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35098 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35096, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35099 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35097, <16 x i16> %35090)
  %35100 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35098, <16 x i16> %35096)
  %35101 = shufflevector <16 x i16> %35099, <16 x i16> %35100, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35102 = lshr <32 x i16> %35101, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %35103 = shufflevector <32 x i16> %35102, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35104 = add nsw i64 %34765, %.pre-phi3678
  %35105 = getelementptr inbounds i16, i16* %264, i64 %35104
  %35106 = bitcast i16* %35105 to <16 x i16>*
  store <16 x i16> %35103, <16 x i16>* %35106, align 2, !tbaa !401
  %35107 = shufflevector <32 x i16> %35102, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35108 = getelementptr inbounds i16, i16* %35105, i64 16
  %35109 = bitcast i16* %35108 to <16 x i16>*
  store <16 x i16> %35107, <16 x i16>* %35109, align 2, !tbaa !401
  %indvars.iv.next3481 = add nuw nsw i64 %indvars.iv3480, 1
  %.not2660 = icmp eq i64 %indvars.iv.next3481, %386
  br i1 %.not2660, label %"end for blur_y.s0.x.x.rebased2190", label %"for blur_y.s0.x.x.rebased2189"

"for blur_y.s0.x.x.rebased2206":                  ; preds = %"for blur_y.s0.x.x.rebased2206.preheader", %"consume blur_x2216"
  %blur_y.s0.x.x.rebased2208 = phi i32 [ %35260, %"consume blur_x2216" ], [ 0, %"for blur_y.s0.x.x.rebased2206.preheader" ]
  %35110 = add nsw i32 %blur_y.s0.x.x.rebased2208, %t1670852
  %a635 = shl nsw i32 %35110, 5
  %35111 = icmp sgt i32 %a355, %a635
  %b641 = select i1 %35111, i32 %a635, i32 %a355
  %35112 = icmp slt i32 %35110, 1
  %35113 = icmp sgt i32 %202, %a635
  %35114 = or i1 %35112, %35113
  br i1 %35114, label %"produce blur_x2213", label %"consume blur_x2216"

"end for blur_y.s0.x.x.rebased2207":              ; preds = %"consume blur_x2216", %"end for blur_y.s0.x.x.rebased2190"
  br i1 %232, label %"produce blur_x2220", label %after_bb2217

"produce blur_x2213":                             ; preds = %"for blur_y.s0.x.x.rebased2206"
  %35115 = icmp slt i32 %b641, %202
  %blur_x.s0.x.v1.base.s2214 = select i1 %35115, i32 %b641, i32 %202
  %t11572215 = add nsw i32 %blur_x.s0.x.v1.base.s2214, %t21612186
  %35116 = sext i32 %t11572215 to i64
  %35117 = getelementptr inbounds i16, i16* %read_input860, i64 %35116
  %35118 = getelementptr inbounds i16, i16* %35117, i64 1
  %35119 = bitcast i16* %35118 to <16 x i16>*
  %35120 = load <16 x i16>, <16 x i16>* %35119, align 2, !tbaa !396
  %35121 = getelementptr inbounds i16, i16* %35117, i64 17
  %35122 = bitcast i16* %35121 to <16 x i16>*
  %35123 = load <16 x i16>, <16 x i16>* %35122, align 2, !tbaa !396
  %35124 = bitcast i16* %35117 to <16 x i16>*
  %35125 = load <16 x i16>, <16 x i16>* %35124, align 2, !tbaa !396
  %35126 = getelementptr inbounds i16, i16* %35117, i64 16
  %35127 = bitcast i16* %35126 to <16 x i16>*
  %35128 = load <16 x i16>, <16 x i16>* %35127, align 2, !tbaa !396
  %35129 = getelementptr inbounds i16, i16* %35117, i64 2
  %35130 = bitcast i16* %35129 to <16 x i16>*
  %35131 = load <16 x i16>, <16 x i16>* %35130, align 2, !tbaa !396
  %35132 = getelementptr inbounds i16, i16* %35117, i64 18
  %35133 = bitcast i16* %35132 to <16 x i16>*
  %35134 = load <16 x i16>, <16 x i16>* %35133, align 2, !tbaa !396
  %35135 = getelementptr inbounds i16, i16* %35117, i64 3
  %35136 = bitcast i16* %35135 to <16 x i16>*
  %35137 = load <16 x i16>, <16 x i16>* %35136, align 2, !tbaa !396
  %35138 = getelementptr inbounds i16, i16* %35117, i64 19
  %35139 = bitcast i16* %35138 to <16 x i16>*
  %35140 = load <16 x i16>, <16 x i16>* %35139, align 2, !tbaa !396
  %35141 = getelementptr inbounds i16, i16* %35117, i64 4
  %35142 = bitcast i16* %35141 to <16 x i16>*
  %35143 = load <16 x i16>, <16 x i16>* %35142, align 2, !tbaa !396
  %35144 = getelementptr inbounds i16, i16* %35117, i64 20
  %35145 = bitcast i16* %35144 to <16 x i16>*
  %35146 = load <16 x i16>, <16 x i16>* %35145, align 2, !tbaa !396
  %35147 = getelementptr inbounds i16, i16* %35117, i64 6
  %35148 = bitcast i16* %35147 to <16 x i16>*
  %35149 = load <16 x i16>, <16 x i16>* %35148, align 2, !tbaa !396
  %35150 = getelementptr inbounds i16, i16* %35117, i64 22
  %35151 = bitcast i16* %35150 to <16 x i16>*
  %35152 = load <16 x i16>, <16 x i16>* %35151, align 2, !tbaa !396
  %35153 = getelementptr inbounds i16, i16* %35117, i64 5
  %35154 = bitcast i16* %35153 to <16 x i16>*
  %35155 = load <16 x i16>, <16 x i16>* %35154, align 2, !tbaa !396
  %35156 = getelementptr inbounds i16, i16* %35117, i64 21
  %35157 = bitcast i16* %35156 to <16 x i16>*
  %35158 = load <16 x i16>, <16 x i16>* %35157, align 2, !tbaa !396
  %35159 = add <16 x i16> %35125, %35120
  %35160 = add <16 x i16> %35159, %35131
  %35161 = add <16 x i16> %35160, %35137
  %35162 = add <16 x i16> %35161, %35143
  %35163 = add <16 x i16> %35162, %35149
  %35164 = add <16 x i16> %35163, %35155
  %35165 = add <16 x i16> %35128, %35123
  %35166 = add <16 x i16> %35165, %35134
  %35167 = add <16 x i16> %35166, %35140
  %35168 = add <16 x i16> %35167, %35146
  %35169 = add <16 x i16> %35168, %35152
  %35170 = add <16 x i16> %35169, %35158
  %35171 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35164, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35172 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35170, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35173 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35171, <16 x i16> %35164)
  %35174 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35172, <16 x i16> %35170)
  %35175 = shufflevector <16 x i16> %35173, <16 x i16> %35174, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35176 = lshr <32 x i16> %35175, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %35177 = shufflevector <32 x i16> %35176, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35178 = sext i32 %blur_x.s0.x.v1.base.s2214 to i64
  %35179 = add nsw i64 %35178, %34941
  %35180 = getelementptr inbounds i16, i16* %blur_x917, i64 %35179
  %35181 = bitcast i16* %35180 to <16 x i16>*
  store <16 x i16> %35177, <16 x i16>* %35181, align 2, !tbaa !399
  %35182 = shufflevector <32 x i16> %35176, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35183 = getelementptr inbounds i16, i16* %35180, i64 16
  %35184 = bitcast i16* %35183 to <16 x i16>*
  store <16 x i16> %35182, <16 x i16>* %35184, align 2, !tbaa !399
  br label %"consume blur_x2216"

"consume blur_x2216":                             ; preds = %"for blur_y.s0.x.x.rebased2206", %"produce blur_x2213"
  %35185 = sext i32 %b641 to i64
  %35186 = add nsw i64 %34944, %35185
  %35187 = getelementptr inbounds i16, i16* %blur_x917, i64 %35186
  %35188 = bitcast i16* %35187 to <16 x i16>*
  %35189 = load <16 x i16>, <16 x i16>* %35188, align 2, !tbaa !399
  %35190 = getelementptr inbounds i16, i16* %35187, i64 16
  %35191 = bitcast i16* %35190 to <16 x i16>*
  %35192 = load <16 x i16>, <16 x i16>* %35191, align 2, !tbaa !399
  %35193 = add nsw i64 %34947, %35185
  %35194 = getelementptr inbounds i16, i16* %blur_x917, i64 %35193
  %35195 = bitcast i16* %35194 to <16 x i16>*
  %35196 = load <16 x i16>, <16 x i16>* %35195, align 2, !tbaa !399
  %35197 = getelementptr inbounds i16, i16* %35194, i64 16
  %35198 = bitcast i16* %35197 to <16 x i16>*
  %35199 = load <16 x i16>, <16 x i16>* %35198, align 2, !tbaa !399
  %35200 = add nsw i64 %34950, %35185
  %35201 = getelementptr inbounds i16, i16* %blur_x917, i64 %35200
  %35202 = bitcast i16* %35201 to <16 x i16>*
  %35203 = load <16 x i16>, <16 x i16>* %35202, align 2, !tbaa !399
  %35204 = getelementptr inbounds i16, i16* %35201, i64 16
  %35205 = bitcast i16* %35204 to <16 x i16>*
  %35206 = load <16 x i16>, <16 x i16>* %35205, align 2, !tbaa !399
  %35207 = add nsw i64 %34953, %35185
  %35208 = getelementptr inbounds i16, i16* %blur_x917, i64 %35207
  %35209 = bitcast i16* %35208 to <16 x i16>*
  %35210 = load <16 x i16>, <16 x i16>* %35209, align 2, !tbaa !399
  %35211 = getelementptr inbounds i16, i16* %35208, i64 16
  %35212 = bitcast i16* %35211 to <16 x i16>*
  %35213 = load <16 x i16>, <16 x i16>* %35212, align 2, !tbaa !399
  %35214 = add nsw i64 %34956, %35185
  %35215 = getelementptr inbounds i16, i16* %blur_x917, i64 %35214
  %35216 = bitcast i16* %35215 to <16 x i16>*
  %35217 = load <16 x i16>, <16 x i16>* %35216, align 2, !tbaa !399
  %35218 = getelementptr inbounds i16, i16* %35215, i64 16
  %35219 = bitcast i16* %35218 to <16 x i16>*
  %35220 = load <16 x i16>, <16 x i16>* %35219, align 2, !tbaa !399
  %35221 = add nsw i64 %34959, %35185
  %35222 = getelementptr inbounds i16, i16* %blur_x917, i64 %35221
  %35223 = bitcast i16* %35222 to <16 x i16>*
  %35224 = load <16 x i16>, <16 x i16>* %35223, align 2, !tbaa !399
  %35225 = getelementptr inbounds i16, i16* %35222, i64 16
  %35226 = bitcast i16* %35225 to <16 x i16>*
  %35227 = load <16 x i16>, <16 x i16>* %35226, align 2, !tbaa !399
  %35228 = add nsw i64 %34962, %35185
  %35229 = getelementptr inbounds i16, i16* %blur_x917, i64 %35228
  %35230 = bitcast i16* %35229 to <16 x i16>*
  %35231 = load <16 x i16>, <16 x i16>* %35230, align 2, !tbaa !399
  %35232 = getelementptr inbounds i16, i16* %35229, i64 16
  %35233 = bitcast i16* %35232 to <16 x i16>*
  %35234 = load <16 x i16>, <16 x i16>* %35233, align 2, !tbaa !399
  %35235 = add <16 x i16> %35196, %35189
  %35236 = add <16 x i16> %35235, %35203
  %35237 = add <16 x i16> %35236, %35210
  %35238 = add <16 x i16> %35237, %35217
  %35239 = add <16 x i16> %35238, %35224
  %35240 = add <16 x i16> %35239, %35231
  %35241 = add <16 x i16> %35199, %35192
  %35242 = add <16 x i16> %35241, %35206
  %35243 = add <16 x i16> %35242, %35213
  %35244 = add <16 x i16> %35243, %35220
  %35245 = add <16 x i16> %35244, %35227
  %35246 = add <16 x i16> %35245, %35234
  %35247 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35240, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35248 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35246, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35249 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35247, <16 x i16> %35240)
  %35250 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35248, <16 x i16> %35246)
  %35251 = shufflevector <16 x i16> %35249, <16 x i16> %35250, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35252 = lshr <32 x i16> %35251, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %35253 = shufflevector <32 x i16> %35252, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35254 = add nsw i64 %34966, %35185
  %35255 = getelementptr inbounds i16, i16* %264, i64 %35254
  %35256 = bitcast i16* %35255 to <16 x i16>*
  store <16 x i16> %35253, <16 x i16>* %35256, align 2, !tbaa !401
  %35257 = shufflevector <32 x i16> %35252, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35258 = getelementptr inbounds i16, i16* %35255, i64 16
  %35259 = bitcast i16* %35258 to <16 x i16>*
  store <16 x i16> %35257, <16 x i16>* %35259, align 2, !tbaa !401
  %35260 = add nuw nsw i32 %blur_y.s0.x.x.rebased2208, 1
  %.not2659 = icmp eq i32 %35260, %t1727937
  br i1 %.not2659, label %"end for blur_y.s0.x.x.rebased2207", label %"for blur_y.s0.x.x.rebased2206"

after_bb2217:                                     ; preds = %"end for blur_y.s0.x.x.rebased2207", %"produce blur_x2220"
  br i1 %298, label %"for blur_y.s0.x.x.rebased2232.preheader", label %"end for blur_y.s0.x.x.rebased2233", !prof !386

"for blur_y.s0.x.x.rebased2232.preheader":        ; preds = %after_bb2217
  %35261 = sext i32 %t1726924 to i64
  %35262 = zext i32 %.pre-phi3610 to i64
  %35263 = mul nsw i64 %35262, %314
  %35264 = sub nsw i64 %35263, %294
  %35265 = zext i32 %.pre-phi3606 to i64
  %35266 = mul nsw i64 %35265, %314
  %35267 = sub nsw i64 %35266, %294
  %35268 = zext i32 %.pre-phi3614 to i64
  %35269 = mul nsw i64 %35268, %314
  %35270 = sub nsw i64 %35269, %294
  %35271 = zext i32 %.pre-phi3618 to i64
  %35272 = mul nsw i64 %35271, %314
  %35273 = sub nsw i64 %35272, %294
  %35274 = zext i32 %.pre-phi3622 to i64
  %35275 = mul nsw i64 %35274, %314
  %35276 = sub nsw i64 %35275, %294
  %35277 = zext i32 %.pre-phi3598 to i64
  %35278 = mul nsw i64 %35277, %314
  %35279 = sub nsw i64 %35278, %294
  %35280 = zext i32 %.pre-phi3628 to i64
  %35281 = mul nsw i64 %35280, %314
  %35282 = sub nsw i64 %35281, %294
  %35283 = sext i32 %a367 to i64
  %35284 = add nsw i64 %35283, 26
  %35285 = mul nsw i64 %35284, %315
  %35286 = add nsw i64 %35285, %318
  br label %"for blur_y.s0.x.x.rebased2232"

"produce blur_x2220":                             ; preds = %"end for blur_y.s0.x.x.rebased2207"
  %35287 = getelementptr inbounds i16, i16* %read_input860, i64 %369
  %35288 = getelementptr inbounds i16, i16* %35287, i64 -31
  %35289 = bitcast i16* %35288 to <16 x i16>*
  %35290 = load <16 x i16>, <16 x i16>* %35289, align 2, !tbaa !396
  %35291 = getelementptr inbounds i16, i16* %35287, i64 -15
  %35292 = bitcast i16* %35291 to <16 x i16>*
  %35293 = load <16 x i16>, <16 x i16>* %35292, align 2, !tbaa !396
  %35294 = getelementptr inbounds i16, i16* %35287, i64 -32
  %35295 = bitcast i16* %35294 to <16 x i16>*
  %35296 = load <16 x i16>, <16 x i16>* %35295, align 2, !tbaa !396
  %35297 = getelementptr inbounds i16, i16* %35287, i64 -16
  %35298 = bitcast i16* %35297 to <16 x i16>*
  %35299 = load <16 x i16>, <16 x i16>* %35298, align 2, !tbaa !396
  %35300 = getelementptr inbounds i16, i16* %35287, i64 -30
  %35301 = bitcast i16* %35300 to <16 x i16>*
  %35302 = load <16 x i16>, <16 x i16>* %35301, align 2, !tbaa !396
  %35303 = getelementptr inbounds i16, i16* %35287, i64 -14
  %35304 = bitcast i16* %35303 to <16 x i16>*
  %35305 = load <16 x i16>, <16 x i16>* %35304, align 2, !tbaa !396
  %35306 = getelementptr inbounds i16, i16* %35287, i64 -29
  %35307 = bitcast i16* %35306 to <16 x i16>*
  %35308 = load <16 x i16>, <16 x i16>* %35307, align 2, !tbaa !396
  %35309 = getelementptr inbounds i16, i16* %35287, i64 -13
  %35310 = bitcast i16* %35309 to <16 x i16>*
  %35311 = load <16 x i16>, <16 x i16>* %35310, align 2, !tbaa !396
  %35312 = getelementptr inbounds i16, i16* %35287, i64 -28
  %35313 = bitcast i16* %35312 to <16 x i16>*
  %35314 = load <16 x i16>, <16 x i16>* %35313, align 2, !tbaa !396
  %35315 = getelementptr inbounds i16, i16* %35287, i64 -12
  %35316 = bitcast i16* %35315 to <16 x i16>*
  %35317 = load <16 x i16>, <16 x i16>* %35316, align 2, !tbaa !396
  %35318 = getelementptr inbounds i16, i16* %35287, i64 -26
  %35319 = bitcast i16* %35318 to <16 x i16>*
  %35320 = load <16 x i16>, <16 x i16>* %35319, align 2, !tbaa !396
  %35321 = getelementptr inbounds i16, i16* %35287, i64 -10
  %35322 = bitcast i16* %35321 to <16 x i16>*
  %35323 = load <16 x i16>, <16 x i16>* %35322, align 2, !tbaa !396
  %35324 = getelementptr inbounds i16, i16* %35287, i64 -27
  %35325 = bitcast i16* %35324 to <16 x i16>*
  %35326 = load <16 x i16>, <16 x i16>* %35325, align 2, !tbaa !396
  %35327 = getelementptr inbounds i16, i16* %35287, i64 -11
  %35328 = bitcast i16* %35327 to <16 x i16>*
  %35329 = load <16 x i16>, <16 x i16>* %35328, align 2, !tbaa !396
  %35330 = add <16 x i16> %35296, %35290
  %35331 = add <16 x i16> %35330, %35302
  %35332 = add <16 x i16> %35331, %35308
  %35333 = add <16 x i16> %35332, %35314
  %35334 = add <16 x i16> %35333, %35320
  %35335 = add <16 x i16> %35334, %35326
  %35336 = add <16 x i16> %35299, %35293
  %35337 = add <16 x i16> %35336, %35305
  %35338 = add <16 x i16> %35337, %35311
  %35339 = add <16 x i16> %35338, %35317
  %35340 = add <16 x i16> %35339, %35323
  %35341 = add <16 x i16> %35340, %35329
  %35342 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35335, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35343 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35341, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35344 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35342, <16 x i16> %35335)
  %35345 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35343, <16 x i16> %35341)
  %35346 = shufflevector <16 x i16> %35344, <16 x i16> %35345, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35347 = lshr <32 x i16> %35346, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %35348 = shufflevector <32 x i16> %35347, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35349 = zext i32 %.pre-phi3598 to i64
  %35350 = mul nsw i64 %295, %35349
  %35351 = add nsw i64 %297, %35350
  %35352 = getelementptr inbounds i16, i16* %blur_x917, i64 %35351
  %35353 = getelementptr inbounds i16, i16* %35352, i64 -32
  %35354 = bitcast i16* %35353 to <16 x i16>*
  store <16 x i16> %35348, <16 x i16>* %35354, align 2, !tbaa !399
  %35355 = shufflevector <32 x i16> %35347, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35356 = getelementptr inbounds i16, i16* %35352, i64 -16
  %35357 = bitcast i16* %35356 to <16 x i16>*
  store <16 x i16> %35355, <16 x i16>* %35357, align 2, !tbaa !399
  %35358 = zext i32 %.pre-phi3610 to i64
  %35359 = mul nsw i64 %35358, %314
  %35360 = add nsw i64 %35359, %292
  %35361 = getelementptr inbounds i16, i16* %blur_x917, i64 %35360
  %35362 = getelementptr inbounds i16, i16* %35361, i64 -32
  %35363 = bitcast i16* %35362 to <16 x i16>*
  %35364 = load <16 x i16>, <16 x i16>* %35363, align 2, !tbaa !399
  %35365 = getelementptr inbounds i16, i16* %35361, i64 -16
  %35366 = bitcast i16* %35365 to <16 x i16>*
  %35367 = load <16 x i16>, <16 x i16>* %35366, align 2, !tbaa !399
  %35368 = zext i32 %.pre-phi3606 to i64
  %35369 = mul nsw i64 %35368, %314
  %35370 = add nsw i64 %35369, %292
  %35371 = getelementptr inbounds i16, i16* %blur_x917, i64 %35370
  %35372 = getelementptr inbounds i16, i16* %35371, i64 -32
  %35373 = bitcast i16* %35372 to <16 x i16>*
  %35374 = load <16 x i16>, <16 x i16>* %35373, align 2, !tbaa !399
  %35375 = getelementptr inbounds i16, i16* %35371, i64 -16
  %35376 = bitcast i16* %35375 to <16 x i16>*
  %35377 = load <16 x i16>, <16 x i16>* %35376, align 2, !tbaa !399
  %35378 = zext i32 %.pre-phi3614 to i64
  %35379 = mul nsw i64 %35378, %314
  %35380 = add nsw i64 %35379, %292
  %35381 = getelementptr inbounds i16, i16* %blur_x917, i64 %35380
  %35382 = getelementptr inbounds i16, i16* %35381, i64 -32
  %35383 = bitcast i16* %35382 to <16 x i16>*
  %35384 = load <16 x i16>, <16 x i16>* %35383, align 2, !tbaa !399
  %35385 = getelementptr inbounds i16, i16* %35381, i64 -16
  %35386 = bitcast i16* %35385 to <16 x i16>*
  %35387 = load <16 x i16>, <16 x i16>* %35386, align 2, !tbaa !399
  %35388 = zext i32 %.pre-phi3618 to i64
  %35389 = mul nsw i64 %35388, %314
  %35390 = add nsw i64 %35389, %292
  %35391 = getelementptr inbounds i16, i16* %blur_x917, i64 %35390
  %35392 = getelementptr inbounds i16, i16* %35391, i64 -32
  %35393 = bitcast i16* %35392 to <16 x i16>*
  %35394 = load <16 x i16>, <16 x i16>* %35393, align 2, !tbaa !399
  %35395 = getelementptr inbounds i16, i16* %35391, i64 -16
  %35396 = bitcast i16* %35395 to <16 x i16>*
  %35397 = load <16 x i16>, <16 x i16>* %35396, align 2, !tbaa !399
  %35398 = zext i32 %.pre-phi3622 to i64
  %35399 = mul nsw i64 %35398, %314
  %35400 = add nsw i64 %35399, %292
  %35401 = getelementptr inbounds i16, i16* %blur_x917, i64 %35400
  %35402 = getelementptr inbounds i16, i16* %35401, i64 -32
  %35403 = bitcast i16* %35402 to <16 x i16>*
  %35404 = load <16 x i16>, <16 x i16>* %35403, align 2, !tbaa !399
  %35405 = getelementptr inbounds i16, i16* %35401, i64 -16
  %35406 = bitcast i16* %35405 to <16 x i16>*
  %35407 = load <16 x i16>, <16 x i16>* %35406, align 2, !tbaa !399
  %35408 = mul nsw i64 %35349, %314
  %35409 = add nsw i64 %35408, %292
  %35410 = getelementptr inbounds i16, i16* %blur_x917, i64 %35409
  %35411 = getelementptr inbounds i16, i16* %35410, i64 -32
  %35412 = bitcast i16* %35411 to <16 x i16>*
  %35413 = load <16 x i16>, <16 x i16>* %35412, align 2, !tbaa !399
  %35414 = getelementptr inbounds i16, i16* %35410, i64 -16
  %35415 = bitcast i16* %35414 to <16 x i16>*
  %35416 = load <16 x i16>, <16 x i16>* %35415, align 2, !tbaa !399
  %35417 = zext i32 %.pre-phi3628 to i64
  %35418 = mul nsw i64 %35417, %314
  %35419 = add nsw i64 %35418, %292
  %35420 = getelementptr inbounds i16, i16* %blur_x917, i64 %35419
  %35421 = getelementptr inbounds i16, i16* %35420, i64 -32
  %35422 = bitcast i16* %35421 to <16 x i16>*
  %35423 = load <16 x i16>, <16 x i16>* %35422, align 2, !tbaa !399
  %35424 = getelementptr inbounds i16, i16* %35420, i64 -16
  %35425 = bitcast i16* %35424 to <16 x i16>*
  %35426 = load <16 x i16>, <16 x i16>* %35425, align 2, !tbaa !399
  %35427 = add <16 x i16> %35374, %35364
  %35428 = add <16 x i16> %35427, %35384
  %35429 = add <16 x i16> %35428, %35394
  %35430 = add <16 x i16> %35429, %35404
  %35431 = add <16 x i16> %35430, %35413
  %35432 = add <16 x i16> %35431, %35423
  %35433 = add <16 x i16> %35377, %35367
  %35434 = add <16 x i16> %35433, %35387
  %35435 = add <16 x i16> %35434, %35397
  %35436 = add <16 x i16> %35435, %35407
  %35437 = add <16 x i16> %35436, %35416
  %35438 = add <16 x i16> %35437, %35426
  %35439 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35432, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35440 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35438, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35441 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35439, <16 x i16> %35432)
  %35442 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35440, <16 x i16> %35438)
  %35443 = shufflevector <16 x i16> %35441, <16 x i16> %35442, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35444 = lshr <32 x i16> %35443, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %35445 = shufflevector <32 x i16> %35444, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35446 = sext i32 %a367 to i64
  %35447 = add nsw i64 %35446, 26
  %35448 = mul nsw i64 %35447, %315
  %35449 = add nsw i64 %317, %35448
  %35450 = getelementptr inbounds i16, i16* %264, i64 %35449
  %35451 = getelementptr inbounds i16, i16* %35450, i64 -32
  %35452 = bitcast i16* %35451 to <16 x i16>*
  store <16 x i16> %35445, <16 x i16>* %35452, align 2, !tbaa !401
  %35453 = shufflevector <32 x i16> %35444, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35454 = getelementptr inbounds i16, i16* %35450, i64 -16
  %35455 = bitcast i16* %35454 to <16 x i16>*
  store <16 x i16> %35453, <16 x i16>* %35455, align 2, !tbaa !401
  br label %after_bb2217

"for blur_y.s0.x.x.rebased2232":                  ; preds = %"for blur_y.s0.x.x.rebased2232.preheader", %"consume blur_x2241"
  %indvars.iv3483 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2232.preheader" ], [ %indvars.iv.next3484, %"consume blur_x2241" ]
  %35456 = add nsw i64 %indvars.iv3483, %299
  %35457 = icmp slt i64 %35456, 1
  %35458 = trunc i64 %35456 to i32
  %35459 = shl nsw i32 %35458, 5
  %35460 = icmp sgt i32 %202, %35459
  %35461 = or i1 %35457, %35460
  br i1 %35461, label %"produce blur_x2239", label %"for blur_y.s0.x.x.rebased2232.consume blur_x2241_crit_edge"

"for blur_y.s0.x.x.rebased2232.consume blur_x2241_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2232"
  %.pre3679 = shl nsw i64 %35456, 5
  br label %"consume blur_x2241"

"end for blur_y.s0.x.x.rebased2233":              ; preds = %"consume blur_x2241", %after_bb2217
  br i1 %300, label %"for blur_y.s0.x.x.rebased2249.preheader", label %"end for blur_y.s0.x.x.rebased2250", !prof !386

"for blur_y.s0.x.x.rebased2249.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2233"
  %35462 = sext i32 %t1726924 to i64
  %35463 = zext i32 %.pre-phi3610 to i64
  %35464 = mul nsw i64 %35463, %314
  %35465 = sub nsw i64 %35464, %294
  %35466 = zext i32 %.pre-phi3606 to i64
  %35467 = mul nsw i64 %35466, %314
  %35468 = sub nsw i64 %35467, %294
  %35469 = zext i32 %.pre-phi3614 to i64
  %35470 = mul nsw i64 %35469, %314
  %35471 = sub nsw i64 %35470, %294
  %35472 = zext i32 %.pre-phi3618 to i64
  %35473 = mul nsw i64 %35472, %314
  %35474 = sub nsw i64 %35473, %294
  %35475 = zext i32 %.pre-phi3622 to i64
  %35476 = mul nsw i64 %35475, %314
  %35477 = sub nsw i64 %35476, %294
  %35478 = zext i32 %.pre-phi3598 to i64
  %35479 = mul nsw i64 %35478, %314
  %35480 = sub nsw i64 %35479, %294
  %35481 = zext i32 %.pre-phi3628 to i64
  %35482 = mul nsw i64 %35481, %314
  %35483 = sub nsw i64 %35482, %294
  %35484 = sext i32 %a367 to i64
  %35485 = add nsw i64 %35484, 26
  %35486 = mul nsw i64 %35485, %315
  %35487 = add nsw i64 %35486, %318
  br label %"for blur_y.s0.x.x.rebased2249"

"produce blur_x2239":                             ; preds = %"for blur_y.s0.x.x.rebased2232"
  %t11682240 = add nsw i32 %35459, %t21772229
  %35488 = sext i32 %t11682240 to i64
  %35489 = getelementptr inbounds i16, i16* %read_input860, i64 %35488
  %35490 = getelementptr inbounds i16, i16* %35489, i64 1
  %35491 = bitcast i16* %35490 to <16 x i16>*
  %35492 = load <16 x i16>, <16 x i16>* %35491, align 2, !tbaa !396
  %35493 = getelementptr inbounds i16, i16* %35489, i64 17
  %35494 = bitcast i16* %35493 to <16 x i16>*
  %35495 = load <16 x i16>, <16 x i16>* %35494, align 2, !tbaa !396
  %35496 = bitcast i16* %35489 to <16 x i16>*
  %35497 = load <16 x i16>, <16 x i16>* %35496, align 2, !tbaa !396
  %35498 = getelementptr inbounds i16, i16* %35489, i64 16
  %35499 = bitcast i16* %35498 to <16 x i16>*
  %35500 = load <16 x i16>, <16 x i16>* %35499, align 2, !tbaa !396
  %35501 = getelementptr inbounds i16, i16* %35489, i64 2
  %35502 = bitcast i16* %35501 to <16 x i16>*
  %35503 = load <16 x i16>, <16 x i16>* %35502, align 2, !tbaa !396
  %35504 = getelementptr inbounds i16, i16* %35489, i64 18
  %35505 = bitcast i16* %35504 to <16 x i16>*
  %35506 = load <16 x i16>, <16 x i16>* %35505, align 2, !tbaa !396
  %35507 = getelementptr inbounds i16, i16* %35489, i64 3
  %35508 = bitcast i16* %35507 to <16 x i16>*
  %35509 = load <16 x i16>, <16 x i16>* %35508, align 2, !tbaa !396
  %35510 = getelementptr inbounds i16, i16* %35489, i64 19
  %35511 = bitcast i16* %35510 to <16 x i16>*
  %35512 = load <16 x i16>, <16 x i16>* %35511, align 2, !tbaa !396
  %35513 = getelementptr inbounds i16, i16* %35489, i64 4
  %35514 = bitcast i16* %35513 to <16 x i16>*
  %35515 = load <16 x i16>, <16 x i16>* %35514, align 2, !tbaa !396
  %35516 = getelementptr inbounds i16, i16* %35489, i64 20
  %35517 = bitcast i16* %35516 to <16 x i16>*
  %35518 = load <16 x i16>, <16 x i16>* %35517, align 2, !tbaa !396
  %35519 = getelementptr inbounds i16, i16* %35489, i64 6
  %35520 = bitcast i16* %35519 to <16 x i16>*
  %35521 = load <16 x i16>, <16 x i16>* %35520, align 2, !tbaa !396
  %35522 = getelementptr inbounds i16, i16* %35489, i64 22
  %35523 = bitcast i16* %35522 to <16 x i16>*
  %35524 = load <16 x i16>, <16 x i16>* %35523, align 2, !tbaa !396
  %35525 = getelementptr inbounds i16, i16* %35489, i64 5
  %35526 = bitcast i16* %35525 to <16 x i16>*
  %35527 = load <16 x i16>, <16 x i16>* %35526, align 2, !tbaa !396
  %35528 = getelementptr inbounds i16, i16* %35489, i64 21
  %35529 = bitcast i16* %35528 to <16 x i16>*
  %35530 = load <16 x i16>, <16 x i16>* %35529, align 2, !tbaa !396
  %35531 = add <16 x i16> %35497, %35492
  %35532 = add <16 x i16> %35531, %35503
  %35533 = add <16 x i16> %35532, %35509
  %35534 = add <16 x i16> %35533, %35515
  %35535 = add <16 x i16> %35534, %35521
  %35536 = add <16 x i16> %35535, %35527
  %35537 = add <16 x i16> %35500, %35495
  %35538 = add <16 x i16> %35537, %35506
  %35539 = add <16 x i16> %35538, %35512
  %35540 = add <16 x i16> %35539, %35518
  %35541 = add <16 x i16> %35540, %35524
  %35542 = add <16 x i16> %35541, %35530
  %35543 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35536, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35544 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35542, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35545 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35543, <16 x i16> %35536)
  %35546 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35544, <16 x i16> %35542)
  %35547 = shufflevector <16 x i16> %35545, <16 x i16> %35546, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35548 = lshr <32 x i16> %35547, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %35549 = shufflevector <32 x i16> %35548, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35550 = shl nsw i64 %35456, 5
  %35551 = add nsw i64 %35550, %35261
  %35552 = getelementptr inbounds i16, i16* %blur_x917, i64 %35551
  %35553 = bitcast i16* %35552 to <16 x i16>*
  store <16 x i16> %35549, <16 x i16>* %35553, align 2, !tbaa !399
  %35554 = shufflevector <32 x i16> %35548, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35555 = getelementptr inbounds i16, i16* %35552, i64 16
  %35556 = bitcast i16* %35555 to <16 x i16>*
  store <16 x i16> %35554, <16 x i16>* %35556, align 2, !tbaa !399
  br label %"consume blur_x2241"

"consume blur_x2241":                             ; preds = %"for blur_y.s0.x.x.rebased2232.consume blur_x2241_crit_edge", %"produce blur_x2239"
  %.pre-phi3680 = phi i64 [ %.pre3679, %"for blur_y.s0.x.x.rebased2232.consume blur_x2241_crit_edge" ], [ %35550, %"produce blur_x2239" ]
  %35557 = add nsw i64 %35264, %.pre-phi3680
  %35558 = getelementptr inbounds i16, i16* %blur_x917, i64 %35557
  %35559 = bitcast i16* %35558 to <16 x i16>*
  %35560 = load <16 x i16>, <16 x i16>* %35559, align 2, !tbaa !399
  %35561 = getelementptr inbounds i16, i16* %35558, i64 16
  %35562 = bitcast i16* %35561 to <16 x i16>*
  %35563 = load <16 x i16>, <16 x i16>* %35562, align 2, !tbaa !399
  %35564 = add nsw i64 %35267, %.pre-phi3680
  %35565 = getelementptr inbounds i16, i16* %blur_x917, i64 %35564
  %35566 = bitcast i16* %35565 to <16 x i16>*
  %35567 = load <16 x i16>, <16 x i16>* %35566, align 2, !tbaa !399
  %35568 = getelementptr inbounds i16, i16* %35565, i64 16
  %35569 = bitcast i16* %35568 to <16 x i16>*
  %35570 = load <16 x i16>, <16 x i16>* %35569, align 2, !tbaa !399
  %35571 = add nsw i64 %35270, %.pre-phi3680
  %35572 = getelementptr inbounds i16, i16* %blur_x917, i64 %35571
  %35573 = bitcast i16* %35572 to <16 x i16>*
  %35574 = load <16 x i16>, <16 x i16>* %35573, align 2, !tbaa !399
  %35575 = getelementptr inbounds i16, i16* %35572, i64 16
  %35576 = bitcast i16* %35575 to <16 x i16>*
  %35577 = load <16 x i16>, <16 x i16>* %35576, align 2, !tbaa !399
  %35578 = add nsw i64 %35273, %.pre-phi3680
  %35579 = getelementptr inbounds i16, i16* %blur_x917, i64 %35578
  %35580 = bitcast i16* %35579 to <16 x i16>*
  %35581 = load <16 x i16>, <16 x i16>* %35580, align 2, !tbaa !399
  %35582 = getelementptr inbounds i16, i16* %35579, i64 16
  %35583 = bitcast i16* %35582 to <16 x i16>*
  %35584 = load <16 x i16>, <16 x i16>* %35583, align 2, !tbaa !399
  %35585 = add nsw i64 %35276, %.pre-phi3680
  %35586 = getelementptr inbounds i16, i16* %blur_x917, i64 %35585
  %35587 = bitcast i16* %35586 to <16 x i16>*
  %35588 = load <16 x i16>, <16 x i16>* %35587, align 2, !tbaa !399
  %35589 = getelementptr inbounds i16, i16* %35586, i64 16
  %35590 = bitcast i16* %35589 to <16 x i16>*
  %35591 = load <16 x i16>, <16 x i16>* %35590, align 2, !tbaa !399
  %35592 = add nsw i64 %35279, %.pre-phi3680
  %35593 = getelementptr inbounds i16, i16* %blur_x917, i64 %35592
  %35594 = bitcast i16* %35593 to <16 x i16>*
  %35595 = load <16 x i16>, <16 x i16>* %35594, align 2, !tbaa !399
  %35596 = getelementptr inbounds i16, i16* %35593, i64 16
  %35597 = bitcast i16* %35596 to <16 x i16>*
  %35598 = load <16 x i16>, <16 x i16>* %35597, align 2, !tbaa !399
  %35599 = add nsw i64 %35282, %.pre-phi3680
  %35600 = getelementptr inbounds i16, i16* %blur_x917, i64 %35599
  %35601 = bitcast i16* %35600 to <16 x i16>*
  %35602 = load <16 x i16>, <16 x i16>* %35601, align 2, !tbaa !399
  %35603 = getelementptr inbounds i16, i16* %35600, i64 16
  %35604 = bitcast i16* %35603 to <16 x i16>*
  %35605 = load <16 x i16>, <16 x i16>* %35604, align 2, !tbaa !399
  %35606 = add <16 x i16> %35567, %35560
  %35607 = add <16 x i16> %35606, %35574
  %35608 = add <16 x i16> %35607, %35581
  %35609 = add <16 x i16> %35608, %35588
  %35610 = add <16 x i16> %35609, %35595
  %35611 = add <16 x i16> %35610, %35602
  %35612 = add <16 x i16> %35570, %35563
  %35613 = add <16 x i16> %35612, %35577
  %35614 = add <16 x i16> %35613, %35584
  %35615 = add <16 x i16> %35614, %35591
  %35616 = add <16 x i16> %35615, %35598
  %35617 = add <16 x i16> %35616, %35605
  %35618 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35611, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35619 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35617, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35620 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35618, <16 x i16> %35611)
  %35621 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35619, <16 x i16> %35617)
  %35622 = shufflevector <16 x i16> %35620, <16 x i16> %35621, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35623 = lshr <32 x i16> %35622, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %35624 = shufflevector <32 x i16> %35623, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35625 = add nsw i64 %35286, %.pre-phi3680
  %35626 = getelementptr inbounds i16, i16* %264, i64 %35625
  %35627 = bitcast i16* %35626 to <16 x i16>*
  store <16 x i16> %35624, <16 x i16>* %35627, align 2, !tbaa !401
  %35628 = shufflevector <32 x i16> %35623, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35629 = getelementptr inbounds i16, i16* %35626, i64 16
  %35630 = bitcast i16* %35629 to <16 x i16>*
  store <16 x i16> %35628, <16 x i16>* %35630, align 2, !tbaa !401
  %indvars.iv.next3484 = add nuw nsw i64 %indvars.iv3483, 1
  %.not2658 = icmp eq i64 %indvars.iv.next3484, %386
  br i1 %.not2658, label %"end for blur_y.s0.x.x.rebased2233", label %"for blur_y.s0.x.x.rebased2232"

"for blur_y.s0.x.x.rebased2249":                  ; preds = %"for blur_y.s0.x.x.rebased2249.preheader", %"consume blur_x2259"
  %blur_y.s0.x.x.rebased2251 = phi i32 [ %35781, %"consume blur_x2259" ], [ 0, %"for blur_y.s0.x.x.rebased2249.preheader" ]
  %35631 = add nsw i32 %blur_y.s0.x.x.rebased2251, %t1670852
  %a642 = shl nsw i32 %35631, 5
  %35632 = icmp sgt i32 %a355, %a642
  %b648 = select i1 %35632, i32 %a642, i32 %a355
  %35633 = icmp slt i32 %35631, 1
  %35634 = icmp sgt i32 %202, %a642
  %35635 = or i1 %35633, %35634
  br i1 %35635, label %"produce blur_x2256", label %"consume blur_x2259"

"end for blur_y.s0.x.x.rebased2250":              ; preds = %"consume blur_x2259", %"end for blur_y.s0.x.x.rebased2233"
  br i1 %232, label %"produce blur_x2263", label %after_bb2260

"produce blur_x2256":                             ; preds = %"for blur_y.s0.x.x.rebased2249"
  %35636 = icmp slt i32 %b648, %202
  %blur_x.s0.x.v1.base.s2257 = select i1 %35636, i32 %b648, i32 %202
  %t11732258 = add nsw i32 %blur_x.s0.x.v1.base.s2257, %t21772229
  %35637 = sext i32 %t11732258 to i64
  %35638 = getelementptr inbounds i16, i16* %read_input860, i64 %35637
  %35639 = getelementptr inbounds i16, i16* %35638, i64 1
  %35640 = bitcast i16* %35639 to <16 x i16>*
  %35641 = load <16 x i16>, <16 x i16>* %35640, align 2, !tbaa !396
  %35642 = getelementptr inbounds i16, i16* %35638, i64 17
  %35643 = bitcast i16* %35642 to <16 x i16>*
  %35644 = load <16 x i16>, <16 x i16>* %35643, align 2, !tbaa !396
  %35645 = bitcast i16* %35638 to <16 x i16>*
  %35646 = load <16 x i16>, <16 x i16>* %35645, align 2, !tbaa !396
  %35647 = getelementptr inbounds i16, i16* %35638, i64 16
  %35648 = bitcast i16* %35647 to <16 x i16>*
  %35649 = load <16 x i16>, <16 x i16>* %35648, align 2, !tbaa !396
  %35650 = getelementptr inbounds i16, i16* %35638, i64 2
  %35651 = bitcast i16* %35650 to <16 x i16>*
  %35652 = load <16 x i16>, <16 x i16>* %35651, align 2, !tbaa !396
  %35653 = getelementptr inbounds i16, i16* %35638, i64 18
  %35654 = bitcast i16* %35653 to <16 x i16>*
  %35655 = load <16 x i16>, <16 x i16>* %35654, align 2, !tbaa !396
  %35656 = getelementptr inbounds i16, i16* %35638, i64 3
  %35657 = bitcast i16* %35656 to <16 x i16>*
  %35658 = load <16 x i16>, <16 x i16>* %35657, align 2, !tbaa !396
  %35659 = getelementptr inbounds i16, i16* %35638, i64 19
  %35660 = bitcast i16* %35659 to <16 x i16>*
  %35661 = load <16 x i16>, <16 x i16>* %35660, align 2, !tbaa !396
  %35662 = getelementptr inbounds i16, i16* %35638, i64 4
  %35663 = bitcast i16* %35662 to <16 x i16>*
  %35664 = load <16 x i16>, <16 x i16>* %35663, align 2, !tbaa !396
  %35665 = getelementptr inbounds i16, i16* %35638, i64 20
  %35666 = bitcast i16* %35665 to <16 x i16>*
  %35667 = load <16 x i16>, <16 x i16>* %35666, align 2, !tbaa !396
  %35668 = getelementptr inbounds i16, i16* %35638, i64 6
  %35669 = bitcast i16* %35668 to <16 x i16>*
  %35670 = load <16 x i16>, <16 x i16>* %35669, align 2, !tbaa !396
  %35671 = getelementptr inbounds i16, i16* %35638, i64 22
  %35672 = bitcast i16* %35671 to <16 x i16>*
  %35673 = load <16 x i16>, <16 x i16>* %35672, align 2, !tbaa !396
  %35674 = getelementptr inbounds i16, i16* %35638, i64 5
  %35675 = bitcast i16* %35674 to <16 x i16>*
  %35676 = load <16 x i16>, <16 x i16>* %35675, align 2, !tbaa !396
  %35677 = getelementptr inbounds i16, i16* %35638, i64 21
  %35678 = bitcast i16* %35677 to <16 x i16>*
  %35679 = load <16 x i16>, <16 x i16>* %35678, align 2, !tbaa !396
  %35680 = add <16 x i16> %35646, %35641
  %35681 = add <16 x i16> %35680, %35652
  %35682 = add <16 x i16> %35681, %35658
  %35683 = add <16 x i16> %35682, %35664
  %35684 = add <16 x i16> %35683, %35670
  %35685 = add <16 x i16> %35684, %35676
  %35686 = add <16 x i16> %35649, %35644
  %35687 = add <16 x i16> %35686, %35655
  %35688 = add <16 x i16> %35687, %35661
  %35689 = add <16 x i16> %35688, %35667
  %35690 = add <16 x i16> %35689, %35673
  %35691 = add <16 x i16> %35690, %35679
  %35692 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35685, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35693 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35691, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35694 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35692, <16 x i16> %35685)
  %35695 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35693, <16 x i16> %35691)
  %35696 = shufflevector <16 x i16> %35694, <16 x i16> %35695, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35697 = lshr <32 x i16> %35696, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %35698 = shufflevector <32 x i16> %35697, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35699 = sext i32 %blur_x.s0.x.v1.base.s2257 to i64
  %35700 = add nsw i64 %35699, %35462
  %35701 = getelementptr inbounds i16, i16* %blur_x917, i64 %35700
  %35702 = bitcast i16* %35701 to <16 x i16>*
  store <16 x i16> %35698, <16 x i16>* %35702, align 2, !tbaa !399
  %35703 = shufflevector <32 x i16> %35697, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35704 = getelementptr inbounds i16, i16* %35701, i64 16
  %35705 = bitcast i16* %35704 to <16 x i16>*
  store <16 x i16> %35703, <16 x i16>* %35705, align 2, !tbaa !399
  br label %"consume blur_x2259"

"consume blur_x2259":                             ; preds = %"for blur_y.s0.x.x.rebased2249", %"produce blur_x2256"
  %35706 = sext i32 %b648 to i64
  %35707 = add nsw i64 %35465, %35706
  %35708 = getelementptr inbounds i16, i16* %blur_x917, i64 %35707
  %35709 = bitcast i16* %35708 to <16 x i16>*
  %35710 = load <16 x i16>, <16 x i16>* %35709, align 2, !tbaa !399
  %35711 = getelementptr inbounds i16, i16* %35708, i64 16
  %35712 = bitcast i16* %35711 to <16 x i16>*
  %35713 = load <16 x i16>, <16 x i16>* %35712, align 2, !tbaa !399
  %35714 = add nsw i64 %35468, %35706
  %35715 = getelementptr inbounds i16, i16* %blur_x917, i64 %35714
  %35716 = bitcast i16* %35715 to <16 x i16>*
  %35717 = load <16 x i16>, <16 x i16>* %35716, align 2, !tbaa !399
  %35718 = getelementptr inbounds i16, i16* %35715, i64 16
  %35719 = bitcast i16* %35718 to <16 x i16>*
  %35720 = load <16 x i16>, <16 x i16>* %35719, align 2, !tbaa !399
  %35721 = add nsw i64 %35471, %35706
  %35722 = getelementptr inbounds i16, i16* %blur_x917, i64 %35721
  %35723 = bitcast i16* %35722 to <16 x i16>*
  %35724 = load <16 x i16>, <16 x i16>* %35723, align 2, !tbaa !399
  %35725 = getelementptr inbounds i16, i16* %35722, i64 16
  %35726 = bitcast i16* %35725 to <16 x i16>*
  %35727 = load <16 x i16>, <16 x i16>* %35726, align 2, !tbaa !399
  %35728 = add nsw i64 %35474, %35706
  %35729 = getelementptr inbounds i16, i16* %blur_x917, i64 %35728
  %35730 = bitcast i16* %35729 to <16 x i16>*
  %35731 = load <16 x i16>, <16 x i16>* %35730, align 2, !tbaa !399
  %35732 = getelementptr inbounds i16, i16* %35729, i64 16
  %35733 = bitcast i16* %35732 to <16 x i16>*
  %35734 = load <16 x i16>, <16 x i16>* %35733, align 2, !tbaa !399
  %35735 = add nsw i64 %35477, %35706
  %35736 = getelementptr inbounds i16, i16* %blur_x917, i64 %35735
  %35737 = bitcast i16* %35736 to <16 x i16>*
  %35738 = load <16 x i16>, <16 x i16>* %35737, align 2, !tbaa !399
  %35739 = getelementptr inbounds i16, i16* %35736, i64 16
  %35740 = bitcast i16* %35739 to <16 x i16>*
  %35741 = load <16 x i16>, <16 x i16>* %35740, align 2, !tbaa !399
  %35742 = add nsw i64 %35480, %35706
  %35743 = getelementptr inbounds i16, i16* %blur_x917, i64 %35742
  %35744 = bitcast i16* %35743 to <16 x i16>*
  %35745 = load <16 x i16>, <16 x i16>* %35744, align 2, !tbaa !399
  %35746 = getelementptr inbounds i16, i16* %35743, i64 16
  %35747 = bitcast i16* %35746 to <16 x i16>*
  %35748 = load <16 x i16>, <16 x i16>* %35747, align 2, !tbaa !399
  %35749 = add nsw i64 %35483, %35706
  %35750 = getelementptr inbounds i16, i16* %blur_x917, i64 %35749
  %35751 = bitcast i16* %35750 to <16 x i16>*
  %35752 = load <16 x i16>, <16 x i16>* %35751, align 2, !tbaa !399
  %35753 = getelementptr inbounds i16, i16* %35750, i64 16
  %35754 = bitcast i16* %35753 to <16 x i16>*
  %35755 = load <16 x i16>, <16 x i16>* %35754, align 2, !tbaa !399
  %35756 = add <16 x i16> %35717, %35710
  %35757 = add <16 x i16> %35756, %35724
  %35758 = add <16 x i16> %35757, %35731
  %35759 = add <16 x i16> %35758, %35738
  %35760 = add <16 x i16> %35759, %35745
  %35761 = add <16 x i16> %35760, %35752
  %35762 = add <16 x i16> %35720, %35713
  %35763 = add <16 x i16> %35762, %35727
  %35764 = add <16 x i16> %35763, %35734
  %35765 = add <16 x i16> %35764, %35741
  %35766 = add <16 x i16> %35765, %35748
  %35767 = add <16 x i16> %35766, %35755
  %35768 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35761, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35769 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35767, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35770 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35768, <16 x i16> %35761)
  %35771 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35769, <16 x i16> %35767)
  %35772 = shufflevector <16 x i16> %35770, <16 x i16> %35771, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35773 = lshr <32 x i16> %35772, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %35774 = shufflevector <32 x i16> %35773, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35775 = add nsw i64 %35487, %35706
  %35776 = getelementptr inbounds i16, i16* %264, i64 %35775
  %35777 = bitcast i16* %35776 to <16 x i16>*
  store <16 x i16> %35774, <16 x i16>* %35777, align 2, !tbaa !401
  %35778 = shufflevector <32 x i16> %35773, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35779 = getelementptr inbounds i16, i16* %35776, i64 16
  %35780 = bitcast i16* %35779 to <16 x i16>*
  store <16 x i16> %35778, <16 x i16>* %35780, align 2, !tbaa !401
  %35781 = add nuw nsw i32 %blur_y.s0.x.x.rebased2251, 1
  %.not2657 = icmp eq i32 %35781, %t1727937
  br i1 %.not2657, label %"end for blur_y.s0.x.x.rebased2250", label %"for blur_y.s0.x.x.rebased2249"

after_bb2260:                                     ; preds = %"end for blur_y.s0.x.x.rebased2250", %"produce blur_x2263"
  br i1 %298, label %"for blur_y.s0.x.x.rebased2275.preheader", label %"end for blur_y.s0.x.x.rebased2276", !prof !386

"for blur_y.s0.x.x.rebased2275.preheader":        ; preds = %after_bb2260
  %35782 = sext i32 %t1732954 to i64
  %35783 = zext i32 %.pre-phi3614 to i64
  %35784 = mul nsw i64 %35783, %314
  %35785 = sub nsw i64 %35784, %294
  %35786 = zext i32 %.pre-phi3610 to i64
  %35787 = mul nsw i64 %35786, %314
  %35788 = sub nsw i64 %35787, %294
  %35789 = zext i32 %.pre-phi3618 to i64
  %35790 = mul nsw i64 %35789, %314
  %35791 = sub nsw i64 %35790, %294
  %35792 = zext i32 %.pre-phi3622 to i64
  %35793 = mul nsw i64 %35792, %314
  %35794 = sub nsw i64 %35793, %294
  %35795 = zext i32 %.pre-phi3628 to i64
  %35796 = mul nsw i64 %35795, %314
  %35797 = sub nsw i64 %35796, %294
  %35798 = zext i32 %.pre-phi3602 to i64
  %35799 = mul nsw i64 %35798, %314
  %35800 = sub nsw i64 %35799, %294
  %35801 = zext i32 %.pre-phi3598 to i64
  %35802 = mul nsw i64 %35801, %314
  %35803 = sub nsw i64 %35802, %294
  %35804 = sext i32 %a367 to i64
  %35805 = add nsw i64 %35804, 27
  %35806 = mul nsw i64 %35805, %315
  %35807 = add nsw i64 %35806, %318
  br label %"for blur_y.s0.x.x.rebased2275"

"produce blur_x2263":                             ; preds = %"end for blur_y.s0.x.x.rebased2250"
  %35808 = getelementptr inbounds i16, i16* %read_input860, i64 %371
  %35809 = getelementptr inbounds i16, i16* %35808, i64 -31
  %35810 = bitcast i16* %35809 to <16 x i16>*
  %35811 = load <16 x i16>, <16 x i16>* %35810, align 2, !tbaa !396
  %35812 = getelementptr inbounds i16, i16* %35808, i64 -15
  %35813 = bitcast i16* %35812 to <16 x i16>*
  %35814 = load <16 x i16>, <16 x i16>* %35813, align 2, !tbaa !396
  %35815 = getelementptr inbounds i16, i16* %35808, i64 -32
  %35816 = bitcast i16* %35815 to <16 x i16>*
  %35817 = load <16 x i16>, <16 x i16>* %35816, align 2, !tbaa !396
  %35818 = getelementptr inbounds i16, i16* %35808, i64 -16
  %35819 = bitcast i16* %35818 to <16 x i16>*
  %35820 = load <16 x i16>, <16 x i16>* %35819, align 2, !tbaa !396
  %35821 = getelementptr inbounds i16, i16* %35808, i64 -30
  %35822 = bitcast i16* %35821 to <16 x i16>*
  %35823 = load <16 x i16>, <16 x i16>* %35822, align 2, !tbaa !396
  %35824 = getelementptr inbounds i16, i16* %35808, i64 -14
  %35825 = bitcast i16* %35824 to <16 x i16>*
  %35826 = load <16 x i16>, <16 x i16>* %35825, align 2, !tbaa !396
  %35827 = getelementptr inbounds i16, i16* %35808, i64 -29
  %35828 = bitcast i16* %35827 to <16 x i16>*
  %35829 = load <16 x i16>, <16 x i16>* %35828, align 2, !tbaa !396
  %35830 = getelementptr inbounds i16, i16* %35808, i64 -13
  %35831 = bitcast i16* %35830 to <16 x i16>*
  %35832 = load <16 x i16>, <16 x i16>* %35831, align 2, !tbaa !396
  %35833 = getelementptr inbounds i16, i16* %35808, i64 -28
  %35834 = bitcast i16* %35833 to <16 x i16>*
  %35835 = load <16 x i16>, <16 x i16>* %35834, align 2, !tbaa !396
  %35836 = getelementptr inbounds i16, i16* %35808, i64 -12
  %35837 = bitcast i16* %35836 to <16 x i16>*
  %35838 = load <16 x i16>, <16 x i16>* %35837, align 2, !tbaa !396
  %35839 = getelementptr inbounds i16, i16* %35808, i64 -26
  %35840 = bitcast i16* %35839 to <16 x i16>*
  %35841 = load <16 x i16>, <16 x i16>* %35840, align 2, !tbaa !396
  %35842 = getelementptr inbounds i16, i16* %35808, i64 -10
  %35843 = bitcast i16* %35842 to <16 x i16>*
  %35844 = load <16 x i16>, <16 x i16>* %35843, align 2, !tbaa !396
  %35845 = getelementptr inbounds i16, i16* %35808, i64 -27
  %35846 = bitcast i16* %35845 to <16 x i16>*
  %35847 = load <16 x i16>, <16 x i16>* %35846, align 2, !tbaa !396
  %35848 = getelementptr inbounds i16, i16* %35808, i64 -11
  %35849 = bitcast i16* %35848 to <16 x i16>*
  %35850 = load <16 x i16>, <16 x i16>* %35849, align 2, !tbaa !396
  %35851 = add <16 x i16> %35817, %35811
  %35852 = add <16 x i16> %35851, %35823
  %35853 = add <16 x i16> %35852, %35829
  %35854 = add <16 x i16> %35853, %35835
  %35855 = add <16 x i16> %35854, %35841
  %35856 = add <16 x i16> %35855, %35847
  %35857 = add <16 x i16> %35820, %35814
  %35858 = add <16 x i16> %35857, %35826
  %35859 = add <16 x i16> %35858, %35832
  %35860 = add <16 x i16> %35859, %35838
  %35861 = add <16 x i16> %35860, %35844
  %35862 = add <16 x i16> %35861, %35850
  %35863 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35856, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35864 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35862, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35865 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35863, <16 x i16> %35856)
  %35866 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35864, <16 x i16> %35862)
  %35867 = shufflevector <16 x i16> %35865, <16 x i16> %35866, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35868 = lshr <32 x i16> %35867, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %35869 = shufflevector <32 x i16> %35868, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35870 = zext i32 %.pre-phi3602 to i64
  %35871 = mul nsw i64 %295, %35870
  %35872 = add nsw i64 %297, %35871
  %35873 = getelementptr inbounds i16, i16* %blur_x917, i64 %35872
  %35874 = getelementptr inbounds i16, i16* %35873, i64 -32
  %35875 = bitcast i16* %35874 to <16 x i16>*
  store <16 x i16> %35869, <16 x i16>* %35875, align 2, !tbaa !399
  %35876 = shufflevector <32 x i16> %35868, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35877 = getelementptr inbounds i16, i16* %35873, i64 -16
  %35878 = bitcast i16* %35877 to <16 x i16>*
  store <16 x i16> %35876, <16 x i16>* %35878, align 2, !tbaa !399
  %35879 = zext i32 %.pre-phi3614 to i64
  %35880 = mul nsw i64 %35879, %314
  %35881 = add nsw i64 %35880, %292
  %35882 = getelementptr inbounds i16, i16* %blur_x917, i64 %35881
  %35883 = getelementptr inbounds i16, i16* %35882, i64 -32
  %35884 = bitcast i16* %35883 to <16 x i16>*
  %35885 = load <16 x i16>, <16 x i16>* %35884, align 2, !tbaa !399
  %35886 = getelementptr inbounds i16, i16* %35882, i64 -16
  %35887 = bitcast i16* %35886 to <16 x i16>*
  %35888 = load <16 x i16>, <16 x i16>* %35887, align 2, !tbaa !399
  %35889 = zext i32 %.pre-phi3610 to i64
  %35890 = mul nsw i64 %35889, %314
  %35891 = add nsw i64 %35890, %292
  %35892 = getelementptr inbounds i16, i16* %blur_x917, i64 %35891
  %35893 = getelementptr inbounds i16, i16* %35892, i64 -32
  %35894 = bitcast i16* %35893 to <16 x i16>*
  %35895 = load <16 x i16>, <16 x i16>* %35894, align 2, !tbaa !399
  %35896 = getelementptr inbounds i16, i16* %35892, i64 -16
  %35897 = bitcast i16* %35896 to <16 x i16>*
  %35898 = load <16 x i16>, <16 x i16>* %35897, align 2, !tbaa !399
  %35899 = zext i32 %.pre-phi3618 to i64
  %35900 = mul nsw i64 %35899, %314
  %35901 = add nsw i64 %35900, %292
  %35902 = getelementptr inbounds i16, i16* %blur_x917, i64 %35901
  %35903 = getelementptr inbounds i16, i16* %35902, i64 -32
  %35904 = bitcast i16* %35903 to <16 x i16>*
  %35905 = load <16 x i16>, <16 x i16>* %35904, align 2, !tbaa !399
  %35906 = getelementptr inbounds i16, i16* %35902, i64 -16
  %35907 = bitcast i16* %35906 to <16 x i16>*
  %35908 = load <16 x i16>, <16 x i16>* %35907, align 2, !tbaa !399
  %35909 = zext i32 %.pre-phi3622 to i64
  %35910 = mul nsw i64 %35909, %314
  %35911 = add nsw i64 %35910, %292
  %35912 = getelementptr inbounds i16, i16* %blur_x917, i64 %35911
  %35913 = getelementptr inbounds i16, i16* %35912, i64 -32
  %35914 = bitcast i16* %35913 to <16 x i16>*
  %35915 = load <16 x i16>, <16 x i16>* %35914, align 2, !tbaa !399
  %35916 = getelementptr inbounds i16, i16* %35912, i64 -16
  %35917 = bitcast i16* %35916 to <16 x i16>*
  %35918 = load <16 x i16>, <16 x i16>* %35917, align 2, !tbaa !399
  %35919 = zext i32 %.pre-phi3628 to i64
  %35920 = mul nsw i64 %35919, %314
  %35921 = add nsw i64 %35920, %292
  %35922 = getelementptr inbounds i16, i16* %blur_x917, i64 %35921
  %35923 = getelementptr inbounds i16, i16* %35922, i64 -32
  %35924 = bitcast i16* %35923 to <16 x i16>*
  %35925 = load <16 x i16>, <16 x i16>* %35924, align 2, !tbaa !399
  %35926 = getelementptr inbounds i16, i16* %35922, i64 -16
  %35927 = bitcast i16* %35926 to <16 x i16>*
  %35928 = load <16 x i16>, <16 x i16>* %35927, align 2, !tbaa !399
  %35929 = mul nsw i64 %35870, %314
  %35930 = add nsw i64 %35929, %292
  %35931 = getelementptr inbounds i16, i16* %blur_x917, i64 %35930
  %35932 = getelementptr inbounds i16, i16* %35931, i64 -32
  %35933 = bitcast i16* %35932 to <16 x i16>*
  %35934 = load <16 x i16>, <16 x i16>* %35933, align 2, !tbaa !399
  %35935 = getelementptr inbounds i16, i16* %35931, i64 -16
  %35936 = bitcast i16* %35935 to <16 x i16>*
  %35937 = load <16 x i16>, <16 x i16>* %35936, align 2, !tbaa !399
  %35938 = zext i32 %.pre-phi3598 to i64
  %35939 = mul nsw i64 %35938, %314
  %35940 = add nsw i64 %35939, %292
  %35941 = getelementptr inbounds i16, i16* %blur_x917, i64 %35940
  %35942 = getelementptr inbounds i16, i16* %35941, i64 -32
  %35943 = bitcast i16* %35942 to <16 x i16>*
  %35944 = load <16 x i16>, <16 x i16>* %35943, align 2, !tbaa !399
  %35945 = getelementptr inbounds i16, i16* %35941, i64 -16
  %35946 = bitcast i16* %35945 to <16 x i16>*
  %35947 = load <16 x i16>, <16 x i16>* %35946, align 2, !tbaa !399
  %35948 = add <16 x i16> %35895, %35885
  %35949 = add <16 x i16> %35948, %35905
  %35950 = add <16 x i16> %35949, %35915
  %35951 = add <16 x i16> %35950, %35925
  %35952 = add <16 x i16> %35951, %35934
  %35953 = add <16 x i16> %35952, %35944
  %35954 = add <16 x i16> %35898, %35888
  %35955 = add <16 x i16> %35954, %35908
  %35956 = add <16 x i16> %35955, %35918
  %35957 = add <16 x i16> %35956, %35928
  %35958 = add <16 x i16> %35957, %35937
  %35959 = add <16 x i16> %35958, %35947
  %35960 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35953, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35961 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %35959, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %35962 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35960, <16 x i16> %35953)
  %35963 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %35961, <16 x i16> %35959)
  %35964 = shufflevector <16 x i16> %35962, <16 x i16> %35963, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35965 = lshr <32 x i16> %35964, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %35966 = shufflevector <32 x i16> %35965, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %35967 = sext i32 %a367 to i64
  %35968 = add nsw i64 %35967, 27
  %35969 = mul nsw i64 %35968, %315
  %35970 = add nsw i64 %317, %35969
  %35971 = getelementptr inbounds i16, i16* %264, i64 %35970
  %35972 = getelementptr inbounds i16, i16* %35971, i64 -32
  %35973 = bitcast i16* %35972 to <16 x i16>*
  store <16 x i16> %35966, <16 x i16>* %35973, align 2, !tbaa !401
  %35974 = shufflevector <32 x i16> %35965, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %35975 = getelementptr inbounds i16, i16* %35971, i64 -16
  %35976 = bitcast i16* %35975 to <16 x i16>*
  store <16 x i16> %35974, <16 x i16>* %35976, align 2, !tbaa !401
  br label %after_bb2260

"for blur_y.s0.x.x.rebased2275":                  ; preds = %"for blur_y.s0.x.x.rebased2275.preheader", %"consume blur_x2284"
  %indvars.iv3486 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2275.preheader" ], [ %indvars.iv.next3487, %"consume blur_x2284" ]
  %35977 = add nsw i64 %indvars.iv3486, %299
  %35978 = icmp slt i64 %35977, 1
  %35979 = trunc i64 %35977 to i32
  %35980 = shl nsw i32 %35979, 5
  %35981 = icmp sgt i32 %202, %35980
  %35982 = or i1 %35978, %35981
  br i1 %35982, label %"produce blur_x2282", label %"for blur_y.s0.x.x.rebased2275.consume blur_x2284_crit_edge"

"for blur_y.s0.x.x.rebased2275.consume blur_x2284_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2275"
  %.pre3681 = shl nsw i64 %35977, 5
  br label %"consume blur_x2284"

"end for blur_y.s0.x.x.rebased2276":              ; preds = %"consume blur_x2284", %after_bb2260
  br i1 %300, label %"for blur_y.s0.x.x.rebased2292.preheader", label %"end for blur_y.s0.x.x.rebased2293", !prof !386

"for blur_y.s0.x.x.rebased2292.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2276"
  %35983 = sext i32 %t1732954 to i64
  %35984 = zext i32 %.pre-phi3614 to i64
  %35985 = mul nsw i64 %35984, %314
  %35986 = sub nsw i64 %35985, %294
  %35987 = zext i32 %.pre-phi3610 to i64
  %35988 = mul nsw i64 %35987, %314
  %35989 = sub nsw i64 %35988, %294
  %35990 = zext i32 %.pre-phi3618 to i64
  %35991 = mul nsw i64 %35990, %314
  %35992 = sub nsw i64 %35991, %294
  %35993 = zext i32 %.pre-phi3622 to i64
  %35994 = mul nsw i64 %35993, %314
  %35995 = sub nsw i64 %35994, %294
  %35996 = zext i32 %.pre-phi3628 to i64
  %35997 = mul nsw i64 %35996, %314
  %35998 = sub nsw i64 %35997, %294
  %35999 = zext i32 %.pre-phi3602 to i64
  %36000 = mul nsw i64 %35999, %314
  %36001 = sub nsw i64 %36000, %294
  %36002 = zext i32 %.pre-phi3598 to i64
  %36003 = mul nsw i64 %36002, %314
  %36004 = sub nsw i64 %36003, %294
  %36005 = sext i32 %a367 to i64
  %36006 = add nsw i64 %36005, 27
  %36007 = mul nsw i64 %36006, %315
  %36008 = add nsw i64 %36007, %318
  br label %"for blur_y.s0.x.x.rebased2292"

"produce blur_x2282":                             ; preds = %"for blur_y.s0.x.x.rebased2275"
  %t11842283 = add nsw i32 %35980, %t21932272
  %36009 = sext i32 %t11842283 to i64
  %36010 = getelementptr inbounds i16, i16* %read_input860, i64 %36009
  %36011 = getelementptr inbounds i16, i16* %36010, i64 1
  %36012 = bitcast i16* %36011 to <16 x i16>*
  %36013 = load <16 x i16>, <16 x i16>* %36012, align 2, !tbaa !396
  %36014 = getelementptr inbounds i16, i16* %36010, i64 17
  %36015 = bitcast i16* %36014 to <16 x i16>*
  %36016 = load <16 x i16>, <16 x i16>* %36015, align 2, !tbaa !396
  %36017 = bitcast i16* %36010 to <16 x i16>*
  %36018 = load <16 x i16>, <16 x i16>* %36017, align 2, !tbaa !396
  %36019 = getelementptr inbounds i16, i16* %36010, i64 16
  %36020 = bitcast i16* %36019 to <16 x i16>*
  %36021 = load <16 x i16>, <16 x i16>* %36020, align 2, !tbaa !396
  %36022 = getelementptr inbounds i16, i16* %36010, i64 2
  %36023 = bitcast i16* %36022 to <16 x i16>*
  %36024 = load <16 x i16>, <16 x i16>* %36023, align 2, !tbaa !396
  %36025 = getelementptr inbounds i16, i16* %36010, i64 18
  %36026 = bitcast i16* %36025 to <16 x i16>*
  %36027 = load <16 x i16>, <16 x i16>* %36026, align 2, !tbaa !396
  %36028 = getelementptr inbounds i16, i16* %36010, i64 3
  %36029 = bitcast i16* %36028 to <16 x i16>*
  %36030 = load <16 x i16>, <16 x i16>* %36029, align 2, !tbaa !396
  %36031 = getelementptr inbounds i16, i16* %36010, i64 19
  %36032 = bitcast i16* %36031 to <16 x i16>*
  %36033 = load <16 x i16>, <16 x i16>* %36032, align 2, !tbaa !396
  %36034 = getelementptr inbounds i16, i16* %36010, i64 4
  %36035 = bitcast i16* %36034 to <16 x i16>*
  %36036 = load <16 x i16>, <16 x i16>* %36035, align 2, !tbaa !396
  %36037 = getelementptr inbounds i16, i16* %36010, i64 20
  %36038 = bitcast i16* %36037 to <16 x i16>*
  %36039 = load <16 x i16>, <16 x i16>* %36038, align 2, !tbaa !396
  %36040 = getelementptr inbounds i16, i16* %36010, i64 6
  %36041 = bitcast i16* %36040 to <16 x i16>*
  %36042 = load <16 x i16>, <16 x i16>* %36041, align 2, !tbaa !396
  %36043 = getelementptr inbounds i16, i16* %36010, i64 22
  %36044 = bitcast i16* %36043 to <16 x i16>*
  %36045 = load <16 x i16>, <16 x i16>* %36044, align 2, !tbaa !396
  %36046 = getelementptr inbounds i16, i16* %36010, i64 5
  %36047 = bitcast i16* %36046 to <16 x i16>*
  %36048 = load <16 x i16>, <16 x i16>* %36047, align 2, !tbaa !396
  %36049 = getelementptr inbounds i16, i16* %36010, i64 21
  %36050 = bitcast i16* %36049 to <16 x i16>*
  %36051 = load <16 x i16>, <16 x i16>* %36050, align 2, !tbaa !396
  %36052 = add <16 x i16> %36018, %36013
  %36053 = add <16 x i16> %36052, %36024
  %36054 = add <16 x i16> %36053, %36030
  %36055 = add <16 x i16> %36054, %36036
  %36056 = add <16 x i16> %36055, %36042
  %36057 = add <16 x i16> %36056, %36048
  %36058 = add <16 x i16> %36021, %36016
  %36059 = add <16 x i16> %36058, %36027
  %36060 = add <16 x i16> %36059, %36033
  %36061 = add <16 x i16> %36060, %36039
  %36062 = add <16 x i16> %36061, %36045
  %36063 = add <16 x i16> %36062, %36051
  %36064 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36057, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36065 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36063, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36066 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36064, <16 x i16> %36057)
  %36067 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36065, <16 x i16> %36063)
  %36068 = shufflevector <16 x i16> %36066, <16 x i16> %36067, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36069 = lshr <32 x i16> %36068, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %36070 = shufflevector <32 x i16> %36069, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36071 = shl nsw i64 %35977, 5
  %36072 = add nsw i64 %36071, %35782
  %36073 = getelementptr inbounds i16, i16* %blur_x917, i64 %36072
  %36074 = bitcast i16* %36073 to <16 x i16>*
  store <16 x i16> %36070, <16 x i16>* %36074, align 2, !tbaa !399
  %36075 = shufflevector <32 x i16> %36069, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36076 = getelementptr inbounds i16, i16* %36073, i64 16
  %36077 = bitcast i16* %36076 to <16 x i16>*
  store <16 x i16> %36075, <16 x i16>* %36077, align 2, !tbaa !399
  br label %"consume blur_x2284"

"consume blur_x2284":                             ; preds = %"for blur_y.s0.x.x.rebased2275.consume blur_x2284_crit_edge", %"produce blur_x2282"
  %.pre-phi3682 = phi i64 [ %.pre3681, %"for blur_y.s0.x.x.rebased2275.consume blur_x2284_crit_edge" ], [ %36071, %"produce blur_x2282" ]
  %36078 = add nsw i64 %35785, %.pre-phi3682
  %36079 = getelementptr inbounds i16, i16* %blur_x917, i64 %36078
  %36080 = bitcast i16* %36079 to <16 x i16>*
  %36081 = load <16 x i16>, <16 x i16>* %36080, align 2, !tbaa !399
  %36082 = getelementptr inbounds i16, i16* %36079, i64 16
  %36083 = bitcast i16* %36082 to <16 x i16>*
  %36084 = load <16 x i16>, <16 x i16>* %36083, align 2, !tbaa !399
  %36085 = add nsw i64 %35788, %.pre-phi3682
  %36086 = getelementptr inbounds i16, i16* %blur_x917, i64 %36085
  %36087 = bitcast i16* %36086 to <16 x i16>*
  %36088 = load <16 x i16>, <16 x i16>* %36087, align 2, !tbaa !399
  %36089 = getelementptr inbounds i16, i16* %36086, i64 16
  %36090 = bitcast i16* %36089 to <16 x i16>*
  %36091 = load <16 x i16>, <16 x i16>* %36090, align 2, !tbaa !399
  %36092 = add nsw i64 %35791, %.pre-phi3682
  %36093 = getelementptr inbounds i16, i16* %blur_x917, i64 %36092
  %36094 = bitcast i16* %36093 to <16 x i16>*
  %36095 = load <16 x i16>, <16 x i16>* %36094, align 2, !tbaa !399
  %36096 = getelementptr inbounds i16, i16* %36093, i64 16
  %36097 = bitcast i16* %36096 to <16 x i16>*
  %36098 = load <16 x i16>, <16 x i16>* %36097, align 2, !tbaa !399
  %36099 = add nsw i64 %35794, %.pre-phi3682
  %36100 = getelementptr inbounds i16, i16* %blur_x917, i64 %36099
  %36101 = bitcast i16* %36100 to <16 x i16>*
  %36102 = load <16 x i16>, <16 x i16>* %36101, align 2, !tbaa !399
  %36103 = getelementptr inbounds i16, i16* %36100, i64 16
  %36104 = bitcast i16* %36103 to <16 x i16>*
  %36105 = load <16 x i16>, <16 x i16>* %36104, align 2, !tbaa !399
  %36106 = add nsw i64 %35797, %.pre-phi3682
  %36107 = getelementptr inbounds i16, i16* %blur_x917, i64 %36106
  %36108 = bitcast i16* %36107 to <16 x i16>*
  %36109 = load <16 x i16>, <16 x i16>* %36108, align 2, !tbaa !399
  %36110 = getelementptr inbounds i16, i16* %36107, i64 16
  %36111 = bitcast i16* %36110 to <16 x i16>*
  %36112 = load <16 x i16>, <16 x i16>* %36111, align 2, !tbaa !399
  %36113 = add nsw i64 %35800, %.pre-phi3682
  %36114 = getelementptr inbounds i16, i16* %blur_x917, i64 %36113
  %36115 = bitcast i16* %36114 to <16 x i16>*
  %36116 = load <16 x i16>, <16 x i16>* %36115, align 2, !tbaa !399
  %36117 = getelementptr inbounds i16, i16* %36114, i64 16
  %36118 = bitcast i16* %36117 to <16 x i16>*
  %36119 = load <16 x i16>, <16 x i16>* %36118, align 2, !tbaa !399
  %36120 = add nsw i64 %35803, %.pre-phi3682
  %36121 = getelementptr inbounds i16, i16* %blur_x917, i64 %36120
  %36122 = bitcast i16* %36121 to <16 x i16>*
  %36123 = load <16 x i16>, <16 x i16>* %36122, align 2, !tbaa !399
  %36124 = getelementptr inbounds i16, i16* %36121, i64 16
  %36125 = bitcast i16* %36124 to <16 x i16>*
  %36126 = load <16 x i16>, <16 x i16>* %36125, align 2, !tbaa !399
  %36127 = add <16 x i16> %36088, %36081
  %36128 = add <16 x i16> %36127, %36095
  %36129 = add <16 x i16> %36128, %36102
  %36130 = add <16 x i16> %36129, %36109
  %36131 = add <16 x i16> %36130, %36116
  %36132 = add <16 x i16> %36131, %36123
  %36133 = add <16 x i16> %36091, %36084
  %36134 = add <16 x i16> %36133, %36098
  %36135 = add <16 x i16> %36134, %36105
  %36136 = add <16 x i16> %36135, %36112
  %36137 = add <16 x i16> %36136, %36119
  %36138 = add <16 x i16> %36137, %36126
  %36139 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36132, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36140 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36138, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36141 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36139, <16 x i16> %36132)
  %36142 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36140, <16 x i16> %36138)
  %36143 = shufflevector <16 x i16> %36141, <16 x i16> %36142, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36144 = lshr <32 x i16> %36143, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %36145 = shufflevector <32 x i16> %36144, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36146 = add nsw i64 %35807, %.pre-phi3682
  %36147 = getelementptr inbounds i16, i16* %264, i64 %36146
  %36148 = bitcast i16* %36147 to <16 x i16>*
  store <16 x i16> %36145, <16 x i16>* %36148, align 2, !tbaa !401
  %36149 = shufflevector <32 x i16> %36144, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36150 = getelementptr inbounds i16, i16* %36147, i64 16
  %36151 = bitcast i16* %36150 to <16 x i16>*
  store <16 x i16> %36149, <16 x i16>* %36151, align 2, !tbaa !401
  %indvars.iv.next3487 = add nuw nsw i64 %indvars.iv3486, 1
  %.not2656 = icmp eq i64 %indvars.iv.next3487, %386
  br i1 %.not2656, label %"end for blur_y.s0.x.x.rebased2276", label %"for blur_y.s0.x.x.rebased2275"

"for blur_y.s0.x.x.rebased2292":                  ; preds = %"for blur_y.s0.x.x.rebased2292.preheader", %"consume blur_x2302"
  %blur_y.s0.x.x.rebased2294 = phi i32 [ %36302, %"consume blur_x2302" ], [ 0, %"for blur_y.s0.x.x.rebased2292.preheader" ]
  %36152 = add nsw i32 %blur_y.s0.x.x.rebased2294, %t1670852
  %a649 = shl nsw i32 %36152, 5
  %36153 = icmp sgt i32 %a355, %a649
  %b655 = select i1 %36153, i32 %a649, i32 %a355
  %36154 = icmp slt i32 %36152, 1
  %36155 = icmp sgt i32 %202, %a649
  %36156 = or i1 %36154, %36155
  br i1 %36156, label %"produce blur_x2299", label %"consume blur_x2302"

"end for blur_y.s0.x.x.rebased2293":              ; preds = %"consume blur_x2302", %"end for blur_y.s0.x.x.rebased2276"
  br i1 %232, label %"produce blur_x2306", label %after_bb2303

"produce blur_x2299":                             ; preds = %"for blur_y.s0.x.x.rebased2292"
  %36157 = icmp slt i32 %b655, %202
  %blur_x.s0.x.v1.base.s2300 = select i1 %36157, i32 %b655, i32 %202
  %t11892301 = add nsw i32 %blur_x.s0.x.v1.base.s2300, %t21932272
  %36158 = sext i32 %t11892301 to i64
  %36159 = getelementptr inbounds i16, i16* %read_input860, i64 %36158
  %36160 = getelementptr inbounds i16, i16* %36159, i64 1
  %36161 = bitcast i16* %36160 to <16 x i16>*
  %36162 = load <16 x i16>, <16 x i16>* %36161, align 2, !tbaa !396
  %36163 = getelementptr inbounds i16, i16* %36159, i64 17
  %36164 = bitcast i16* %36163 to <16 x i16>*
  %36165 = load <16 x i16>, <16 x i16>* %36164, align 2, !tbaa !396
  %36166 = bitcast i16* %36159 to <16 x i16>*
  %36167 = load <16 x i16>, <16 x i16>* %36166, align 2, !tbaa !396
  %36168 = getelementptr inbounds i16, i16* %36159, i64 16
  %36169 = bitcast i16* %36168 to <16 x i16>*
  %36170 = load <16 x i16>, <16 x i16>* %36169, align 2, !tbaa !396
  %36171 = getelementptr inbounds i16, i16* %36159, i64 2
  %36172 = bitcast i16* %36171 to <16 x i16>*
  %36173 = load <16 x i16>, <16 x i16>* %36172, align 2, !tbaa !396
  %36174 = getelementptr inbounds i16, i16* %36159, i64 18
  %36175 = bitcast i16* %36174 to <16 x i16>*
  %36176 = load <16 x i16>, <16 x i16>* %36175, align 2, !tbaa !396
  %36177 = getelementptr inbounds i16, i16* %36159, i64 3
  %36178 = bitcast i16* %36177 to <16 x i16>*
  %36179 = load <16 x i16>, <16 x i16>* %36178, align 2, !tbaa !396
  %36180 = getelementptr inbounds i16, i16* %36159, i64 19
  %36181 = bitcast i16* %36180 to <16 x i16>*
  %36182 = load <16 x i16>, <16 x i16>* %36181, align 2, !tbaa !396
  %36183 = getelementptr inbounds i16, i16* %36159, i64 4
  %36184 = bitcast i16* %36183 to <16 x i16>*
  %36185 = load <16 x i16>, <16 x i16>* %36184, align 2, !tbaa !396
  %36186 = getelementptr inbounds i16, i16* %36159, i64 20
  %36187 = bitcast i16* %36186 to <16 x i16>*
  %36188 = load <16 x i16>, <16 x i16>* %36187, align 2, !tbaa !396
  %36189 = getelementptr inbounds i16, i16* %36159, i64 6
  %36190 = bitcast i16* %36189 to <16 x i16>*
  %36191 = load <16 x i16>, <16 x i16>* %36190, align 2, !tbaa !396
  %36192 = getelementptr inbounds i16, i16* %36159, i64 22
  %36193 = bitcast i16* %36192 to <16 x i16>*
  %36194 = load <16 x i16>, <16 x i16>* %36193, align 2, !tbaa !396
  %36195 = getelementptr inbounds i16, i16* %36159, i64 5
  %36196 = bitcast i16* %36195 to <16 x i16>*
  %36197 = load <16 x i16>, <16 x i16>* %36196, align 2, !tbaa !396
  %36198 = getelementptr inbounds i16, i16* %36159, i64 21
  %36199 = bitcast i16* %36198 to <16 x i16>*
  %36200 = load <16 x i16>, <16 x i16>* %36199, align 2, !tbaa !396
  %36201 = add <16 x i16> %36167, %36162
  %36202 = add <16 x i16> %36201, %36173
  %36203 = add <16 x i16> %36202, %36179
  %36204 = add <16 x i16> %36203, %36185
  %36205 = add <16 x i16> %36204, %36191
  %36206 = add <16 x i16> %36205, %36197
  %36207 = add <16 x i16> %36170, %36165
  %36208 = add <16 x i16> %36207, %36176
  %36209 = add <16 x i16> %36208, %36182
  %36210 = add <16 x i16> %36209, %36188
  %36211 = add <16 x i16> %36210, %36194
  %36212 = add <16 x i16> %36211, %36200
  %36213 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36206, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36214 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36212, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36215 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36213, <16 x i16> %36206)
  %36216 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36214, <16 x i16> %36212)
  %36217 = shufflevector <16 x i16> %36215, <16 x i16> %36216, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36218 = lshr <32 x i16> %36217, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %36219 = shufflevector <32 x i16> %36218, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36220 = sext i32 %blur_x.s0.x.v1.base.s2300 to i64
  %36221 = add nsw i64 %36220, %35983
  %36222 = getelementptr inbounds i16, i16* %blur_x917, i64 %36221
  %36223 = bitcast i16* %36222 to <16 x i16>*
  store <16 x i16> %36219, <16 x i16>* %36223, align 2, !tbaa !399
  %36224 = shufflevector <32 x i16> %36218, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36225 = getelementptr inbounds i16, i16* %36222, i64 16
  %36226 = bitcast i16* %36225 to <16 x i16>*
  store <16 x i16> %36224, <16 x i16>* %36226, align 2, !tbaa !399
  br label %"consume blur_x2302"

"consume blur_x2302":                             ; preds = %"for blur_y.s0.x.x.rebased2292", %"produce blur_x2299"
  %36227 = sext i32 %b655 to i64
  %36228 = add nsw i64 %35986, %36227
  %36229 = getelementptr inbounds i16, i16* %blur_x917, i64 %36228
  %36230 = bitcast i16* %36229 to <16 x i16>*
  %36231 = load <16 x i16>, <16 x i16>* %36230, align 2, !tbaa !399
  %36232 = getelementptr inbounds i16, i16* %36229, i64 16
  %36233 = bitcast i16* %36232 to <16 x i16>*
  %36234 = load <16 x i16>, <16 x i16>* %36233, align 2, !tbaa !399
  %36235 = add nsw i64 %35989, %36227
  %36236 = getelementptr inbounds i16, i16* %blur_x917, i64 %36235
  %36237 = bitcast i16* %36236 to <16 x i16>*
  %36238 = load <16 x i16>, <16 x i16>* %36237, align 2, !tbaa !399
  %36239 = getelementptr inbounds i16, i16* %36236, i64 16
  %36240 = bitcast i16* %36239 to <16 x i16>*
  %36241 = load <16 x i16>, <16 x i16>* %36240, align 2, !tbaa !399
  %36242 = add nsw i64 %35992, %36227
  %36243 = getelementptr inbounds i16, i16* %blur_x917, i64 %36242
  %36244 = bitcast i16* %36243 to <16 x i16>*
  %36245 = load <16 x i16>, <16 x i16>* %36244, align 2, !tbaa !399
  %36246 = getelementptr inbounds i16, i16* %36243, i64 16
  %36247 = bitcast i16* %36246 to <16 x i16>*
  %36248 = load <16 x i16>, <16 x i16>* %36247, align 2, !tbaa !399
  %36249 = add nsw i64 %35995, %36227
  %36250 = getelementptr inbounds i16, i16* %blur_x917, i64 %36249
  %36251 = bitcast i16* %36250 to <16 x i16>*
  %36252 = load <16 x i16>, <16 x i16>* %36251, align 2, !tbaa !399
  %36253 = getelementptr inbounds i16, i16* %36250, i64 16
  %36254 = bitcast i16* %36253 to <16 x i16>*
  %36255 = load <16 x i16>, <16 x i16>* %36254, align 2, !tbaa !399
  %36256 = add nsw i64 %35998, %36227
  %36257 = getelementptr inbounds i16, i16* %blur_x917, i64 %36256
  %36258 = bitcast i16* %36257 to <16 x i16>*
  %36259 = load <16 x i16>, <16 x i16>* %36258, align 2, !tbaa !399
  %36260 = getelementptr inbounds i16, i16* %36257, i64 16
  %36261 = bitcast i16* %36260 to <16 x i16>*
  %36262 = load <16 x i16>, <16 x i16>* %36261, align 2, !tbaa !399
  %36263 = add nsw i64 %36001, %36227
  %36264 = getelementptr inbounds i16, i16* %blur_x917, i64 %36263
  %36265 = bitcast i16* %36264 to <16 x i16>*
  %36266 = load <16 x i16>, <16 x i16>* %36265, align 2, !tbaa !399
  %36267 = getelementptr inbounds i16, i16* %36264, i64 16
  %36268 = bitcast i16* %36267 to <16 x i16>*
  %36269 = load <16 x i16>, <16 x i16>* %36268, align 2, !tbaa !399
  %36270 = add nsw i64 %36004, %36227
  %36271 = getelementptr inbounds i16, i16* %blur_x917, i64 %36270
  %36272 = bitcast i16* %36271 to <16 x i16>*
  %36273 = load <16 x i16>, <16 x i16>* %36272, align 2, !tbaa !399
  %36274 = getelementptr inbounds i16, i16* %36271, i64 16
  %36275 = bitcast i16* %36274 to <16 x i16>*
  %36276 = load <16 x i16>, <16 x i16>* %36275, align 2, !tbaa !399
  %36277 = add <16 x i16> %36238, %36231
  %36278 = add <16 x i16> %36277, %36245
  %36279 = add <16 x i16> %36278, %36252
  %36280 = add <16 x i16> %36279, %36259
  %36281 = add <16 x i16> %36280, %36266
  %36282 = add <16 x i16> %36281, %36273
  %36283 = add <16 x i16> %36241, %36234
  %36284 = add <16 x i16> %36283, %36248
  %36285 = add <16 x i16> %36284, %36255
  %36286 = add <16 x i16> %36285, %36262
  %36287 = add <16 x i16> %36286, %36269
  %36288 = add <16 x i16> %36287, %36276
  %36289 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36282, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36290 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36288, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36291 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36289, <16 x i16> %36282)
  %36292 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36290, <16 x i16> %36288)
  %36293 = shufflevector <16 x i16> %36291, <16 x i16> %36292, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36294 = lshr <32 x i16> %36293, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %36295 = shufflevector <32 x i16> %36294, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36296 = add nsw i64 %36008, %36227
  %36297 = getelementptr inbounds i16, i16* %264, i64 %36296
  %36298 = bitcast i16* %36297 to <16 x i16>*
  store <16 x i16> %36295, <16 x i16>* %36298, align 2, !tbaa !401
  %36299 = shufflevector <32 x i16> %36294, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36300 = getelementptr inbounds i16, i16* %36297, i64 16
  %36301 = bitcast i16* %36300 to <16 x i16>*
  store <16 x i16> %36299, <16 x i16>* %36301, align 2, !tbaa !401
  %36302 = add nuw nsw i32 %blur_y.s0.x.x.rebased2294, 1
  %.not2655 = icmp eq i32 %36302, %t1727937
  br i1 %.not2655, label %"end for blur_y.s0.x.x.rebased2293", label %"for blur_y.s0.x.x.rebased2292"

after_bb2303:                                     ; preds = %"end for blur_y.s0.x.x.rebased2293", %"produce blur_x2306"
  br i1 %298, label %"for blur_y.s0.x.x.rebased2318.preheader", label %"end for blur_y.s0.x.x.rebased2319", !prof !386

"for blur_y.s0.x.x.rebased2318.preheader":        ; preds = %after_bb2303
  %36303 = sext i32 %t1738984 to i64
  %36304 = zext i32 %.pre-phi3618 to i64
  %36305 = mul nsw i64 %36304, %314
  %36306 = sub nsw i64 %36305, %294
  %36307 = zext i32 %.pre-phi3614 to i64
  %36308 = mul nsw i64 %36307, %314
  %36309 = sub nsw i64 %36308, %294
  %36310 = zext i32 %.pre-phi3622 to i64
  %36311 = mul nsw i64 %36310, %314
  %36312 = sub nsw i64 %36311, %294
  %36313 = zext i32 %.pre-phi3628 to i64
  %36314 = mul nsw i64 %36313, %314
  %36315 = sub nsw i64 %36314, %294
  %36316 = zext i32 %.pre-phi3598 to i64
  %36317 = mul nsw i64 %36316, %314
  %36318 = sub nsw i64 %36317, %294
  %36319 = zext i32 %.pre-phi3606 to i64
  %36320 = mul nsw i64 %36319, %314
  %36321 = sub nsw i64 %36320, %294
  %36322 = zext i32 %.pre-phi3602 to i64
  %36323 = mul nsw i64 %36322, %314
  %36324 = sub nsw i64 %36323, %294
  %36325 = sext i32 %a367 to i64
  %36326 = add nsw i64 %36325, 28
  %36327 = mul nsw i64 %36326, %315
  %36328 = add nsw i64 %36327, %318
  br label %"for blur_y.s0.x.x.rebased2318"

"produce blur_x2306":                             ; preds = %"end for blur_y.s0.x.x.rebased2293"
  %36329 = getelementptr inbounds i16, i16* %read_input860, i64 %373
  %36330 = getelementptr inbounds i16, i16* %36329, i64 -31
  %36331 = bitcast i16* %36330 to <16 x i16>*
  %36332 = load <16 x i16>, <16 x i16>* %36331, align 2, !tbaa !396
  %36333 = getelementptr inbounds i16, i16* %36329, i64 -15
  %36334 = bitcast i16* %36333 to <16 x i16>*
  %36335 = load <16 x i16>, <16 x i16>* %36334, align 2, !tbaa !396
  %36336 = getelementptr inbounds i16, i16* %36329, i64 -32
  %36337 = bitcast i16* %36336 to <16 x i16>*
  %36338 = load <16 x i16>, <16 x i16>* %36337, align 2, !tbaa !396
  %36339 = getelementptr inbounds i16, i16* %36329, i64 -16
  %36340 = bitcast i16* %36339 to <16 x i16>*
  %36341 = load <16 x i16>, <16 x i16>* %36340, align 2, !tbaa !396
  %36342 = getelementptr inbounds i16, i16* %36329, i64 -30
  %36343 = bitcast i16* %36342 to <16 x i16>*
  %36344 = load <16 x i16>, <16 x i16>* %36343, align 2, !tbaa !396
  %36345 = getelementptr inbounds i16, i16* %36329, i64 -14
  %36346 = bitcast i16* %36345 to <16 x i16>*
  %36347 = load <16 x i16>, <16 x i16>* %36346, align 2, !tbaa !396
  %36348 = getelementptr inbounds i16, i16* %36329, i64 -29
  %36349 = bitcast i16* %36348 to <16 x i16>*
  %36350 = load <16 x i16>, <16 x i16>* %36349, align 2, !tbaa !396
  %36351 = getelementptr inbounds i16, i16* %36329, i64 -13
  %36352 = bitcast i16* %36351 to <16 x i16>*
  %36353 = load <16 x i16>, <16 x i16>* %36352, align 2, !tbaa !396
  %36354 = getelementptr inbounds i16, i16* %36329, i64 -28
  %36355 = bitcast i16* %36354 to <16 x i16>*
  %36356 = load <16 x i16>, <16 x i16>* %36355, align 2, !tbaa !396
  %36357 = getelementptr inbounds i16, i16* %36329, i64 -12
  %36358 = bitcast i16* %36357 to <16 x i16>*
  %36359 = load <16 x i16>, <16 x i16>* %36358, align 2, !tbaa !396
  %36360 = getelementptr inbounds i16, i16* %36329, i64 -26
  %36361 = bitcast i16* %36360 to <16 x i16>*
  %36362 = load <16 x i16>, <16 x i16>* %36361, align 2, !tbaa !396
  %36363 = getelementptr inbounds i16, i16* %36329, i64 -10
  %36364 = bitcast i16* %36363 to <16 x i16>*
  %36365 = load <16 x i16>, <16 x i16>* %36364, align 2, !tbaa !396
  %36366 = getelementptr inbounds i16, i16* %36329, i64 -27
  %36367 = bitcast i16* %36366 to <16 x i16>*
  %36368 = load <16 x i16>, <16 x i16>* %36367, align 2, !tbaa !396
  %36369 = getelementptr inbounds i16, i16* %36329, i64 -11
  %36370 = bitcast i16* %36369 to <16 x i16>*
  %36371 = load <16 x i16>, <16 x i16>* %36370, align 2, !tbaa !396
  %36372 = add <16 x i16> %36338, %36332
  %36373 = add <16 x i16> %36372, %36344
  %36374 = add <16 x i16> %36373, %36350
  %36375 = add <16 x i16> %36374, %36356
  %36376 = add <16 x i16> %36375, %36362
  %36377 = add <16 x i16> %36376, %36368
  %36378 = add <16 x i16> %36341, %36335
  %36379 = add <16 x i16> %36378, %36347
  %36380 = add <16 x i16> %36379, %36353
  %36381 = add <16 x i16> %36380, %36359
  %36382 = add <16 x i16> %36381, %36365
  %36383 = add <16 x i16> %36382, %36371
  %36384 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36377, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36385 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36383, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36386 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36384, <16 x i16> %36377)
  %36387 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36385, <16 x i16> %36383)
  %36388 = shufflevector <16 x i16> %36386, <16 x i16> %36387, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36389 = lshr <32 x i16> %36388, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %36390 = shufflevector <32 x i16> %36389, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36391 = zext i32 %.pre-phi3606 to i64
  %36392 = mul nsw i64 %295, %36391
  %36393 = add nsw i64 %297, %36392
  %36394 = getelementptr inbounds i16, i16* %blur_x917, i64 %36393
  %36395 = getelementptr inbounds i16, i16* %36394, i64 -32
  %36396 = bitcast i16* %36395 to <16 x i16>*
  store <16 x i16> %36390, <16 x i16>* %36396, align 2, !tbaa !399
  %36397 = shufflevector <32 x i16> %36389, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36398 = getelementptr inbounds i16, i16* %36394, i64 -16
  %36399 = bitcast i16* %36398 to <16 x i16>*
  store <16 x i16> %36397, <16 x i16>* %36399, align 2, !tbaa !399
  %36400 = zext i32 %.pre-phi3618 to i64
  %36401 = mul nsw i64 %36400, %314
  %36402 = add nsw i64 %36401, %292
  %36403 = getelementptr inbounds i16, i16* %blur_x917, i64 %36402
  %36404 = getelementptr inbounds i16, i16* %36403, i64 -32
  %36405 = bitcast i16* %36404 to <16 x i16>*
  %36406 = load <16 x i16>, <16 x i16>* %36405, align 2, !tbaa !399
  %36407 = getelementptr inbounds i16, i16* %36403, i64 -16
  %36408 = bitcast i16* %36407 to <16 x i16>*
  %36409 = load <16 x i16>, <16 x i16>* %36408, align 2, !tbaa !399
  %36410 = zext i32 %.pre-phi3614 to i64
  %36411 = mul nsw i64 %36410, %314
  %36412 = add nsw i64 %36411, %292
  %36413 = getelementptr inbounds i16, i16* %blur_x917, i64 %36412
  %36414 = getelementptr inbounds i16, i16* %36413, i64 -32
  %36415 = bitcast i16* %36414 to <16 x i16>*
  %36416 = load <16 x i16>, <16 x i16>* %36415, align 2, !tbaa !399
  %36417 = getelementptr inbounds i16, i16* %36413, i64 -16
  %36418 = bitcast i16* %36417 to <16 x i16>*
  %36419 = load <16 x i16>, <16 x i16>* %36418, align 2, !tbaa !399
  %36420 = zext i32 %.pre-phi3622 to i64
  %36421 = mul nsw i64 %36420, %314
  %36422 = add nsw i64 %36421, %292
  %36423 = getelementptr inbounds i16, i16* %blur_x917, i64 %36422
  %36424 = getelementptr inbounds i16, i16* %36423, i64 -32
  %36425 = bitcast i16* %36424 to <16 x i16>*
  %36426 = load <16 x i16>, <16 x i16>* %36425, align 2, !tbaa !399
  %36427 = getelementptr inbounds i16, i16* %36423, i64 -16
  %36428 = bitcast i16* %36427 to <16 x i16>*
  %36429 = load <16 x i16>, <16 x i16>* %36428, align 2, !tbaa !399
  %36430 = zext i32 %.pre-phi3628 to i64
  %36431 = mul nsw i64 %36430, %314
  %36432 = add nsw i64 %36431, %292
  %36433 = getelementptr inbounds i16, i16* %blur_x917, i64 %36432
  %36434 = getelementptr inbounds i16, i16* %36433, i64 -32
  %36435 = bitcast i16* %36434 to <16 x i16>*
  %36436 = load <16 x i16>, <16 x i16>* %36435, align 2, !tbaa !399
  %36437 = getelementptr inbounds i16, i16* %36433, i64 -16
  %36438 = bitcast i16* %36437 to <16 x i16>*
  %36439 = load <16 x i16>, <16 x i16>* %36438, align 2, !tbaa !399
  %36440 = zext i32 %.pre-phi3598 to i64
  %36441 = mul nsw i64 %36440, %314
  %36442 = add nsw i64 %36441, %292
  %36443 = getelementptr inbounds i16, i16* %blur_x917, i64 %36442
  %36444 = getelementptr inbounds i16, i16* %36443, i64 -32
  %36445 = bitcast i16* %36444 to <16 x i16>*
  %36446 = load <16 x i16>, <16 x i16>* %36445, align 2, !tbaa !399
  %36447 = getelementptr inbounds i16, i16* %36443, i64 -16
  %36448 = bitcast i16* %36447 to <16 x i16>*
  %36449 = load <16 x i16>, <16 x i16>* %36448, align 2, !tbaa !399
  %36450 = mul nsw i64 %36391, %314
  %36451 = add nsw i64 %36450, %292
  %36452 = getelementptr inbounds i16, i16* %blur_x917, i64 %36451
  %36453 = getelementptr inbounds i16, i16* %36452, i64 -32
  %36454 = bitcast i16* %36453 to <16 x i16>*
  %36455 = load <16 x i16>, <16 x i16>* %36454, align 2, !tbaa !399
  %36456 = getelementptr inbounds i16, i16* %36452, i64 -16
  %36457 = bitcast i16* %36456 to <16 x i16>*
  %36458 = load <16 x i16>, <16 x i16>* %36457, align 2, !tbaa !399
  %36459 = zext i32 %.pre-phi3602 to i64
  %36460 = mul nsw i64 %36459, %314
  %36461 = add nsw i64 %36460, %292
  %36462 = getelementptr inbounds i16, i16* %blur_x917, i64 %36461
  %36463 = getelementptr inbounds i16, i16* %36462, i64 -32
  %36464 = bitcast i16* %36463 to <16 x i16>*
  %36465 = load <16 x i16>, <16 x i16>* %36464, align 2, !tbaa !399
  %36466 = getelementptr inbounds i16, i16* %36462, i64 -16
  %36467 = bitcast i16* %36466 to <16 x i16>*
  %36468 = load <16 x i16>, <16 x i16>* %36467, align 2, !tbaa !399
  %36469 = add <16 x i16> %36416, %36406
  %36470 = add <16 x i16> %36469, %36426
  %36471 = add <16 x i16> %36470, %36436
  %36472 = add <16 x i16> %36471, %36446
  %36473 = add <16 x i16> %36472, %36455
  %36474 = add <16 x i16> %36473, %36465
  %36475 = add <16 x i16> %36419, %36409
  %36476 = add <16 x i16> %36475, %36429
  %36477 = add <16 x i16> %36476, %36439
  %36478 = add <16 x i16> %36477, %36449
  %36479 = add <16 x i16> %36478, %36458
  %36480 = add <16 x i16> %36479, %36468
  %36481 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36474, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36482 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36480, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36483 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36481, <16 x i16> %36474)
  %36484 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36482, <16 x i16> %36480)
  %36485 = shufflevector <16 x i16> %36483, <16 x i16> %36484, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36486 = lshr <32 x i16> %36485, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %36487 = shufflevector <32 x i16> %36486, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36488 = sext i32 %a367 to i64
  %36489 = add nsw i64 %36488, 28
  %36490 = mul nsw i64 %36489, %315
  %36491 = add nsw i64 %317, %36490
  %36492 = getelementptr inbounds i16, i16* %264, i64 %36491
  %36493 = getelementptr inbounds i16, i16* %36492, i64 -32
  %36494 = bitcast i16* %36493 to <16 x i16>*
  store <16 x i16> %36487, <16 x i16>* %36494, align 2, !tbaa !401
  %36495 = shufflevector <32 x i16> %36486, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36496 = getelementptr inbounds i16, i16* %36492, i64 -16
  %36497 = bitcast i16* %36496 to <16 x i16>*
  store <16 x i16> %36495, <16 x i16>* %36497, align 2, !tbaa !401
  br label %after_bb2303

"for blur_y.s0.x.x.rebased2318":                  ; preds = %"for blur_y.s0.x.x.rebased2318.preheader", %"consume blur_x2327"
  %indvars.iv3489 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2318.preheader" ], [ %indvars.iv.next3490, %"consume blur_x2327" ]
  %36498 = add nsw i64 %indvars.iv3489, %299
  %36499 = icmp slt i64 %36498, 1
  %36500 = trunc i64 %36498 to i32
  %36501 = shl nsw i32 %36500, 5
  %36502 = icmp sgt i32 %202, %36501
  %36503 = or i1 %36499, %36502
  br i1 %36503, label %"produce blur_x2325", label %"for blur_y.s0.x.x.rebased2318.consume blur_x2327_crit_edge"

"for blur_y.s0.x.x.rebased2318.consume blur_x2327_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2318"
  %.pre3683 = shl nsw i64 %36498, 5
  br label %"consume blur_x2327"

"end for blur_y.s0.x.x.rebased2319":              ; preds = %"consume blur_x2327", %after_bb2303
  br i1 %300, label %"for blur_y.s0.x.x.rebased2335.preheader", label %"end for blur_y.s0.x.x.rebased2336", !prof !386

"for blur_y.s0.x.x.rebased2335.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2319"
  %36504 = sext i32 %t1738984 to i64
  %36505 = zext i32 %.pre-phi3618 to i64
  %36506 = mul nsw i64 %36505, %314
  %36507 = sub nsw i64 %36506, %294
  %36508 = zext i32 %.pre-phi3614 to i64
  %36509 = mul nsw i64 %36508, %314
  %36510 = sub nsw i64 %36509, %294
  %36511 = zext i32 %.pre-phi3622 to i64
  %36512 = mul nsw i64 %36511, %314
  %36513 = sub nsw i64 %36512, %294
  %36514 = zext i32 %.pre-phi3628 to i64
  %36515 = mul nsw i64 %36514, %314
  %36516 = sub nsw i64 %36515, %294
  %36517 = zext i32 %.pre-phi3598 to i64
  %36518 = mul nsw i64 %36517, %314
  %36519 = sub nsw i64 %36518, %294
  %36520 = zext i32 %.pre-phi3606 to i64
  %36521 = mul nsw i64 %36520, %314
  %36522 = sub nsw i64 %36521, %294
  %36523 = zext i32 %.pre-phi3602 to i64
  %36524 = mul nsw i64 %36523, %314
  %36525 = sub nsw i64 %36524, %294
  %36526 = sext i32 %a367 to i64
  %36527 = add nsw i64 %36526, 28
  %36528 = mul nsw i64 %36527, %315
  %36529 = add nsw i64 %36528, %318
  br label %"for blur_y.s0.x.x.rebased2335"

"produce blur_x2325":                             ; preds = %"for blur_y.s0.x.x.rebased2318"
  %t12002326 = add nsw i32 %36501, %t22092315
  %36530 = sext i32 %t12002326 to i64
  %36531 = getelementptr inbounds i16, i16* %read_input860, i64 %36530
  %36532 = getelementptr inbounds i16, i16* %36531, i64 1
  %36533 = bitcast i16* %36532 to <16 x i16>*
  %36534 = load <16 x i16>, <16 x i16>* %36533, align 2, !tbaa !396
  %36535 = getelementptr inbounds i16, i16* %36531, i64 17
  %36536 = bitcast i16* %36535 to <16 x i16>*
  %36537 = load <16 x i16>, <16 x i16>* %36536, align 2, !tbaa !396
  %36538 = bitcast i16* %36531 to <16 x i16>*
  %36539 = load <16 x i16>, <16 x i16>* %36538, align 2, !tbaa !396
  %36540 = getelementptr inbounds i16, i16* %36531, i64 16
  %36541 = bitcast i16* %36540 to <16 x i16>*
  %36542 = load <16 x i16>, <16 x i16>* %36541, align 2, !tbaa !396
  %36543 = getelementptr inbounds i16, i16* %36531, i64 2
  %36544 = bitcast i16* %36543 to <16 x i16>*
  %36545 = load <16 x i16>, <16 x i16>* %36544, align 2, !tbaa !396
  %36546 = getelementptr inbounds i16, i16* %36531, i64 18
  %36547 = bitcast i16* %36546 to <16 x i16>*
  %36548 = load <16 x i16>, <16 x i16>* %36547, align 2, !tbaa !396
  %36549 = getelementptr inbounds i16, i16* %36531, i64 3
  %36550 = bitcast i16* %36549 to <16 x i16>*
  %36551 = load <16 x i16>, <16 x i16>* %36550, align 2, !tbaa !396
  %36552 = getelementptr inbounds i16, i16* %36531, i64 19
  %36553 = bitcast i16* %36552 to <16 x i16>*
  %36554 = load <16 x i16>, <16 x i16>* %36553, align 2, !tbaa !396
  %36555 = getelementptr inbounds i16, i16* %36531, i64 4
  %36556 = bitcast i16* %36555 to <16 x i16>*
  %36557 = load <16 x i16>, <16 x i16>* %36556, align 2, !tbaa !396
  %36558 = getelementptr inbounds i16, i16* %36531, i64 20
  %36559 = bitcast i16* %36558 to <16 x i16>*
  %36560 = load <16 x i16>, <16 x i16>* %36559, align 2, !tbaa !396
  %36561 = getelementptr inbounds i16, i16* %36531, i64 6
  %36562 = bitcast i16* %36561 to <16 x i16>*
  %36563 = load <16 x i16>, <16 x i16>* %36562, align 2, !tbaa !396
  %36564 = getelementptr inbounds i16, i16* %36531, i64 22
  %36565 = bitcast i16* %36564 to <16 x i16>*
  %36566 = load <16 x i16>, <16 x i16>* %36565, align 2, !tbaa !396
  %36567 = getelementptr inbounds i16, i16* %36531, i64 5
  %36568 = bitcast i16* %36567 to <16 x i16>*
  %36569 = load <16 x i16>, <16 x i16>* %36568, align 2, !tbaa !396
  %36570 = getelementptr inbounds i16, i16* %36531, i64 21
  %36571 = bitcast i16* %36570 to <16 x i16>*
  %36572 = load <16 x i16>, <16 x i16>* %36571, align 2, !tbaa !396
  %36573 = add <16 x i16> %36539, %36534
  %36574 = add <16 x i16> %36573, %36545
  %36575 = add <16 x i16> %36574, %36551
  %36576 = add <16 x i16> %36575, %36557
  %36577 = add <16 x i16> %36576, %36563
  %36578 = add <16 x i16> %36577, %36569
  %36579 = add <16 x i16> %36542, %36537
  %36580 = add <16 x i16> %36579, %36548
  %36581 = add <16 x i16> %36580, %36554
  %36582 = add <16 x i16> %36581, %36560
  %36583 = add <16 x i16> %36582, %36566
  %36584 = add <16 x i16> %36583, %36572
  %36585 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36578, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36586 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36584, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36587 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36585, <16 x i16> %36578)
  %36588 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36586, <16 x i16> %36584)
  %36589 = shufflevector <16 x i16> %36587, <16 x i16> %36588, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36590 = lshr <32 x i16> %36589, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %36591 = shufflevector <32 x i16> %36590, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36592 = shl nsw i64 %36498, 5
  %36593 = add nsw i64 %36592, %36303
  %36594 = getelementptr inbounds i16, i16* %blur_x917, i64 %36593
  %36595 = bitcast i16* %36594 to <16 x i16>*
  store <16 x i16> %36591, <16 x i16>* %36595, align 2, !tbaa !399
  %36596 = shufflevector <32 x i16> %36590, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36597 = getelementptr inbounds i16, i16* %36594, i64 16
  %36598 = bitcast i16* %36597 to <16 x i16>*
  store <16 x i16> %36596, <16 x i16>* %36598, align 2, !tbaa !399
  br label %"consume blur_x2327"

"consume blur_x2327":                             ; preds = %"for blur_y.s0.x.x.rebased2318.consume blur_x2327_crit_edge", %"produce blur_x2325"
  %.pre-phi3684 = phi i64 [ %.pre3683, %"for blur_y.s0.x.x.rebased2318.consume blur_x2327_crit_edge" ], [ %36592, %"produce blur_x2325" ]
  %36599 = add nsw i64 %36306, %.pre-phi3684
  %36600 = getelementptr inbounds i16, i16* %blur_x917, i64 %36599
  %36601 = bitcast i16* %36600 to <16 x i16>*
  %36602 = load <16 x i16>, <16 x i16>* %36601, align 2, !tbaa !399
  %36603 = getelementptr inbounds i16, i16* %36600, i64 16
  %36604 = bitcast i16* %36603 to <16 x i16>*
  %36605 = load <16 x i16>, <16 x i16>* %36604, align 2, !tbaa !399
  %36606 = add nsw i64 %36309, %.pre-phi3684
  %36607 = getelementptr inbounds i16, i16* %blur_x917, i64 %36606
  %36608 = bitcast i16* %36607 to <16 x i16>*
  %36609 = load <16 x i16>, <16 x i16>* %36608, align 2, !tbaa !399
  %36610 = getelementptr inbounds i16, i16* %36607, i64 16
  %36611 = bitcast i16* %36610 to <16 x i16>*
  %36612 = load <16 x i16>, <16 x i16>* %36611, align 2, !tbaa !399
  %36613 = add nsw i64 %36312, %.pre-phi3684
  %36614 = getelementptr inbounds i16, i16* %blur_x917, i64 %36613
  %36615 = bitcast i16* %36614 to <16 x i16>*
  %36616 = load <16 x i16>, <16 x i16>* %36615, align 2, !tbaa !399
  %36617 = getelementptr inbounds i16, i16* %36614, i64 16
  %36618 = bitcast i16* %36617 to <16 x i16>*
  %36619 = load <16 x i16>, <16 x i16>* %36618, align 2, !tbaa !399
  %36620 = add nsw i64 %36315, %.pre-phi3684
  %36621 = getelementptr inbounds i16, i16* %blur_x917, i64 %36620
  %36622 = bitcast i16* %36621 to <16 x i16>*
  %36623 = load <16 x i16>, <16 x i16>* %36622, align 2, !tbaa !399
  %36624 = getelementptr inbounds i16, i16* %36621, i64 16
  %36625 = bitcast i16* %36624 to <16 x i16>*
  %36626 = load <16 x i16>, <16 x i16>* %36625, align 2, !tbaa !399
  %36627 = add nsw i64 %36318, %.pre-phi3684
  %36628 = getelementptr inbounds i16, i16* %blur_x917, i64 %36627
  %36629 = bitcast i16* %36628 to <16 x i16>*
  %36630 = load <16 x i16>, <16 x i16>* %36629, align 2, !tbaa !399
  %36631 = getelementptr inbounds i16, i16* %36628, i64 16
  %36632 = bitcast i16* %36631 to <16 x i16>*
  %36633 = load <16 x i16>, <16 x i16>* %36632, align 2, !tbaa !399
  %36634 = add nsw i64 %36321, %.pre-phi3684
  %36635 = getelementptr inbounds i16, i16* %blur_x917, i64 %36634
  %36636 = bitcast i16* %36635 to <16 x i16>*
  %36637 = load <16 x i16>, <16 x i16>* %36636, align 2, !tbaa !399
  %36638 = getelementptr inbounds i16, i16* %36635, i64 16
  %36639 = bitcast i16* %36638 to <16 x i16>*
  %36640 = load <16 x i16>, <16 x i16>* %36639, align 2, !tbaa !399
  %36641 = add nsw i64 %36324, %.pre-phi3684
  %36642 = getelementptr inbounds i16, i16* %blur_x917, i64 %36641
  %36643 = bitcast i16* %36642 to <16 x i16>*
  %36644 = load <16 x i16>, <16 x i16>* %36643, align 2, !tbaa !399
  %36645 = getelementptr inbounds i16, i16* %36642, i64 16
  %36646 = bitcast i16* %36645 to <16 x i16>*
  %36647 = load <16 x i16>, <16 x i16>* %36646, align 2, !tbaa !399
  %36648 = add <16 x i16> %36609, %36602
  %36649 = add <16 x i16> %36648, %36616
  %36650 = add <16 x i16> %36649, %36623
  %36651 = add <16 x i16> %36650, %36630
  %36652 = add <16 x i16> %36651, %36637
  %36653 = add <16 x i16> %36652, %36644
  %36654 = add <16 x i16> %36612, %36605
  %36655 = add <16 x i16> %36654, %36619
  %36656 = add <16 x i16> %36655, %36626
  %36657 = add <16 x i16> %36656, %36633
  %36658 = add <16 x i16> %36657, %36640
  %36659 = add <16 x i16> %36658, %36647
  %36660 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36653, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36661 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36659, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36662 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36660, <16 x i16> %36653)
  %36663 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36661, <16 x i16> %36659)
  %36664 = shufflevector <16 x i16> %36662, <16 x i16> %36663, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36665 = lshr <32 x i16> %36664, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %36666 = shufflevector <32 x i16> %36665, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36667 = add nsw i64 %36328, %.pre-phi3684
  %36668 = getelementptr inbounds i16, i16* %264, i64 %36667
  %36669 = bitcast i16* %36668 to <16 x i16>*
  store <16 x i16> %36666, <16 x i16>* %36669, align 2, !tbaa !401
  %36670 = shufflevector <32 x i16> %36665, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36671 = getelementptr inbounds i16, i16* %36668, i64 16
  %36672 = bitcast i16* %36671 to <16 x i16>*
  store <16 x i16> %36670, <16 x i16>* %36672, align 2, !tbaa !401
  %indvars.iv.next3490 = add nuw nsw i64 %indvars.iv3489, 1
  %.not2654 = icmp eq i64 %indvars.iv.next3490, %386
  br i1 %.not2654, label %"end for blur_y.s0.x.x.rebased2319", label %"for blur_y.s0.x.x.rebased2318"

"for blur_y.s0.x.x.rebased2335":                  ; preds = %"for blur_y.s0.x.x.rebased2335.preheader", %"consume blur_x2345"
  %blur_y.s0.x.x.rebased2337 = phi i32 [ %36823, %"consume blur_x2345" ], [ 0, %"for blur_y.s0.x.x.rebased2335.preheader" ]
  %36673 = add nsw i32 %blur_y.s0.x.x.rebased2337, %t1670852
  %a656 = shl nsw i32 %36673, 5
  %36674 = icmp sgt i32 %a355, %a656
  %b662 = select i1 %36674, i32 %a656, i32 %a355
  %36675 = icmp slt i32 %36673, 1
  %36676 = icmp sgt i32 %202, %a656
  %36677 = or i1 %36675, %36676
  br i1 %36677, label %"produce blur_x2342", label %"consume blur_x2345"

"end for blur_y.s0.x.x.rebased2336":              ; preds = %"consume blur_x2345", %"end for blur_y.s0.x.x.rebased2319"
  br i1 %232, label %"produce blur_x2349", label %after_bb2346

"produce blur_x2342":                             ; preds = %"for blur_y.s0.x.x.rebased2335"
  %36678 = icmp slt i32 %b662, %202
  %blur_x.s0.x.v1.base.s2343 = select i1 %36678, i32 %b662, i32 %202
  %t12052344 = add nsw i32 %blur_x.s0.x.v1.base.s2343, %t22092315
  %36679 = sext i32 %t12052344 to i64
  %36680 = getelementptr inbounds i16, i16* %read_input860, i64 %36679
  %36681 = getelementptr inbounds i16, i16* %36680, i64 1
  %36682 = bitcast i16* %36681 to <16 x i16>*
  %36683 = load <16 x i16>, <16 x i16>* %36682, align 2, !tbaa !396
  %36684 = getelementptr inbounds i16, i16* %36680, i64 17
  %36685 = bitcast i16* %36684 to <16 x i16>*
  %36686 = load <16 x i16>, <16 x i16>* %36685, align 2, !tbaa !396
  %36687 = bitcast i16* %36680 to <16 x i16>*
  %36688 = load <16 x i16>, <16 x i16>* %36687, align 2, !tbaa !396
  %36689 = getelementptr inbounds i16, i16* %36680, i64 16
  %36690 = bitcast i16* %36689 to <16 x i16>*
  %36691 = load <16 x i16>, <16 x i16>* %36690, align 2, !tbaa !396
  %36692 = getelementptr inbounds i16, i16* %36680, i64 2
  %36693 = bitcast i16* %36692 to <16 x i16>*
  %36694 = load <16 x i16>, <16 x i16>* %36693, align 2, !tbaa !396
  %36695 = getelementptr inbounds i16, i16* %36680, i64 18
  %36696 = bitcast i16* %36695 to <16 x i16>*
  %36697 = load <16 x i16>, <16 x i16>* %36696, align 2, !tbaa !396
  %36698 = getelementptr inbounds i16, i16* %36680, i64 3
  %36699 = bitcast i16* %36698 to <16 x i16>*
  %36700 = load <16 x i16>, <16 x i16>* %36699, align 2, !tbaa !396
  %36701 = getelementptr inbounds i16, i16* %36680, i64 19
  %36702 = bitcast i16* %36701 to <16 x i16>*
  %36703 = load <16 x i16>, <16 x i16>* %36702, align 2, !tbaa !396
  %36704 = getelementptr inbounds i16, i16* %36680, i64 4
  %36705 = bitcast i16* %36704 to <16 x i16>*
  %36706 = load <16 x i16>, <16 x i16>* %36705, align 2, !tbaa !396
  %36707 = getelementptr inbounds i16, i16* %36680, i64 20
  %36708 = bitcast i16* %36707 to <16 x i16>*
  %36709 = load <16 x i16>, <16 x i16>* %36708, align 2, !tbaa !396
  %36710 = getelementptr inbounds i16, i16* %36680, i64 6
  %36711 = bitcast i16* %36710 to <16 x i16>*
  %36712 = load <16 x i16>, <16 x i16>* %36711, align 2, !tbaa !396
  %36713 = getelementptr inbounds i16, i16* %36680, i64 22
  %36714 = bitcast i16* %36713 to <16 x i16>*
  %36715 = load <16 x i16>, <16 x i16>* %36714, align 2, !tbaa !396
  %36716 = getelementptr inbounds i16, i16* %36680, i64 5
  %36717 = bitcast i16* %36716 to <16 x i16>*
  %36718 = load <16 x i16>, <16 x i16>* %36717, align 2, !tbaa !396
  %36719 = getelementptr inbounds i16, i16* %36680, i64 21
  %36720 = bitcast i16* %36719 to <16 x i16>*
  %36721 = load <16 x i16>, <16 x i16>* %36720, align 2, !tbaa !396
  %36722 = add <16 x i16> %36688, %36683
  %36723 = add <16 x i16> %36722, %36694
  %36724 = add <16 x i16> %36723, %36700
  %36725 = add <16 x i16> %36724, %36706
  %36726 = add <16 x i16> %36725, %36712
  %36727 = add <16 x i16> %36726, %36718
  %36728 = add <16 x i16> %36691, %36686
  %36729 = add <16 x i16> %36728, %36697
  %36730 = add <16 x i16> %36729, %36703
  %36731 = add <16 x i16> %36730, %36709
  %36732 = add <16 x i16> %36731, %36715
  %36733 = add <16 x i16> %36732, %36721
  %36734 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36727, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36735 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36733, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36736 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36734, <16 x i16> %36727)
  %36737 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36735, <16 x i16> %36733)
  %36738 = shufflevector <16 x i16> %36736, <16 x i16> %36737, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36739 = lshr <32 x i16> %36738, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %36740 = shufflevector <32 x i16> %36739, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36741 = sext i32 %blur_x.s0.x.v1.base.s2343 to i64
  %36742 = add nsw i64 %36741, %36504
  %36743 = getelementptr inbounds i16, i16* %blur_x917, i64 %36742
  %36744 = bitcast i16* %36743 to <16 x i16>*
  store <16 x i16> %36740, <16 x i16>* %36744, align 2, !tbaa !399
  %36745 = shufflevector <32 x i16> %36739, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36746 = getelementptr inbounds i16, i16* %36743, i64 16
  %36747 = bitcast i16* %36746 to <16 x i16>*
  store <16 x i16> %36745, <16 x i16>* %36747, align 2, !tbaa !399
  br label %"consume blur_x2345"

"consume blur_x2345":                             ; preds = %"for blur_y.s0.x.x.rebased2335", %"produce blur_x2342"
  %36748 = sext i32 %b662 to i64
  %36749 = add nsw i64 %36507, %36748
  %36750 = getelementptr inbounds i16, i16* %blur_x917, i64 %36749
  %36751 = bitcast i16* %36750 to <16 x i16>*
  %36752 = load <16 x i16>, <16 x i16>* %36751, align 2, !tbaa !399
  %36753 = getelementptr inbounds i16, i16* %36750, i64 16
  %36754 = bitcast i16* %36753 to <16 x i16>*
  %36755 = load <16 x i16>, <16 x i16>* %36754, align 2, !tbaa !399
  %36756 = add nsw i64 %36510, %36748
  %36757 = getelementptr inbounds i16, i16* %blur_x917, i64 %36756
  %36758 = bitcast i16* %36757 to <16 x i16>*
  %36759 = load <16 x i16>, <16 x i16>* %36758, align 2, !tbaa !399
  %36760 = getelementptr inbounds i16, i16* %36757, i64 16
  %36761 = bitcast i16* %36760 to <16 x i16>*
  %36762 = load <16 x i16>, <16 x i16>* %36761, align 2, !tbaa !399
  %36763 = add nsw i64 %36513, %36748
  %36764 = getelementptr inbounds i16, i16* %blur_x917, i64 %36763
  %36765 = bitcast i16* %36764 to <16 x i16>*
  %36766 = load <16 x i16>, <16 x i16>* %36765, align 2, !tbaa !399
  %36767 = getelementptr inbounds i16, i16* %36764, i64 16
  %36768 = bitcast i16* %36767 to <16 x i16>*
  %36769 = load <16 x i16>, <16 x i16>* %36768, align 2, !tbaa !399
  %36770 = add nsw i64 %36516, %36748
  %36771 = getelementptr inbounds i16, i16* %blur_x917, i64 %36770
  %36772 = bitcast i16* %36771 to <16 x i16>*
  %36773 = load <16 x i16>, <16 x i16>* %36772, align 2, !tbaa !399
  %36774 = getelementptr inbounds i16, i16* %36771, i64 16
  %36775 = bitcast i16* %36774 to <16 x i16>*
  %36776 = load <16 x i16>, <16 x i16>* %36775, align 2, !tbaa !399
  %36777 = add nsw i64 %36519, %36748
  %36778 = getelementptr inbounds i16, i16* %blur_x917, i64 %36777
  %36779 = bitcast i16* %36778 to <16 x i16>*
  %36780 = load <16 x i16>, <16 x i16>* %36779, align 2, !tbaa !399
  %36781 = getelementptr inbounds i16, i16* %36778, i64 16
  %36782 = bitcast i16* %36781 to <16 x i16>*
  %36783 = load <16 x i16>, <16 x i16>* %36782, align 2, !tbaa !399
  %36784 = add nsw i64 %36522, %36748
  %36785 = getelementptr inbounds i16, i16* %blur_x917, i64 %36784
  %36786 = bitcast i16* %36785 to <16 x i16>*
  %36787 = load <16 x i16>, <16 x i16>* %36786, align 2, !tbaa !399
  %36788 = getelementptr inbounds i16, i16* %36785, i64 16
  %36789 = bitcast i16* %36788 to <16 x i16>*
  %36790 = load <16 x i16>, <16 x i16>* %36789, align 2, !tbaa !399
  %36791 = add nsw i64 %36525, %36748
  %36792 = getelementptr inbounds i16, i16* %blur_x917, i64 %36791
  %36793 = bitcast i16* %36792 to <16 x i16>*
  %36794 = load <16 x i16>, <16 x i16>* %36793, align 2, !tbaa !399
  %36795 = getelementptr inbounds i16, i16* %36792, i64 16
  %36796 = bitcast i16* %36795 to <16 x i16>*
  %36797 = load <16 x i16>, <16 x i16>* %36796, align 2, !tbaa !399
  %36798 = add <16 x i16> %36759, %36752
  %36799 = add <16 x i16> %36798, %36766
  %36800 = add <16 x i16> %36799, %36773
  %36801 = add <16 x i16> %36800, %36780
  %36802 = add <16 x i16> %36801, %36787
  %36803 = add <16 x i16> %36802, %36794
  %36804 = add <16 x i16> %36762, %36755
  %36805 = add <16 x i16> %36804, %36769
  %36806 = add <16 x i16> %36805, %36776
  %36807 = add <16 x i16> %36806, %36783
  %36808 = add <16 x i16> %36807, %36790
  %36809 = add <16 x i16> %36808, %36797
  %36810 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36803, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36811 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36809, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36812 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36810, <16 x i16> %36803)
  %36813 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36811, <16 x i16> %36809)
  %36814 = shufflevector <16 x i16> %36812, <16 x i16> %36813, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36815 = lshr <32 x i16> %36814, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %36816 = shufflevector <32 x i16> %36815, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36817 = add nsw i64 %36529, %36748
  %36818 = getelementptr inbounds i16, i16* %264, i64 %36817
  %36819 = bitcast i16* %36818 to <16 x i16>*
  store <16 x i16> %36816, <16 x i16>* %36819, align 2, !tbaa !401
  %36820 = shufflevector <32 x i16> %36815, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36821 = getelementptr inbounds i16, i16* %36818, i64 16
  %36822 = bitcast i16* %36821 to <16 x i16>*
  store <16 x i16> %36820, <16 x i16>* %36822, align 2, !tbaa !401
  %36823 = add nuw nsw i32 %blur_y.s0.x.x.rebased2337, 1
  %.not2653 = icmp eq i32 %36823, %t1727937
  br i1 %.not2653, label %"end for blur_y.s0.x.x.rebased2336", label %"for blur_y.s0.x.x.rebased2335"

after_bb2346:                                     ; preds = %"end for blur_y.s0.x.x.rebased2336", %"produce blur_x2349"
  br i1 %298, label %"for blur_y.s0.x.x.rebased2361.preheader", label %"end for blur_y.s0.x.x.rebased2362", !prof !386

"for blur_y.s0.x.x.rebased2361.preheader":        ; preds = %after_bb2346
  %36824 = sext i32 %t17441014 to i64
  %36825 = zext i32 %.pre-phi3622 to i64
  %36826 = mul nsw i64 %36825, %314
  %36827 = sub nsw i64 %36826, %294
  %36828 = zext i32 %.pre-phi3618 to i64
  %36829 = mul nsw i64 %36828, %314
  %36830 = sub nsw i64 %36829, %294
  %36831 = zext i32 %.pre-phi3628 to i64
  %36832 = mul nsw i64 %36831, %314
  %36833 = sub nsw i64 %36832, %294
  %36834 = zext i32 %.pre-phi3598 to i64
  %36835 = mul nsw i64 %36834, %314
  %36836 = sub nsw i64 %36835, %294
  %36837 = zext i32 %.pre-phi3602 to i64
  %36838 = mul nsw i64 %36837, %314
  %36839 = sub nsw i64 %36838, %294
  %36840 = zext i32 %.pre-phi3610 to i64
  %36841 = mul nsw i64 %36840, %314
  %36842 = sub nsw i64 %36841, %294
  %36843 = zext i32 %.pre-phi3606 to i64
  %36844 = mul nsw i64 %36843, %314
  %36845 = sub nsw i64 %36844, %294
  %36846 = sext i32 %a367 to i64
  %36847 = add nsw i64 %36846, 29
  %36848 = mul nsw i64 %36847, %315
  %36849 = add nsw i64 %36848, %318
  br label %"for blur_y.s0.x.x.rebased2361"

"produce blur_x2349":                             ; preds = %"end for blur_y.s0.x.x.rebased2336"
  %36850 = getelementptr inbounds i16, i16* %read_input860, i64 %375
  %36851 = getelementptr inbounds i16, i16* %36850, i64 -31
  %36852 = bitcast i16* %36851 to <16 x i16>*
  %36853 = load <16 x i16>, <16 x i16>* %36852, align 2, !tbaa !396
  %36854 = getelementptr inbounds i16, i16* %36850, i64 -15
  %36855 = bitcast i16* %36854 to <16 x i16>*
  %36856 = load <16 x i16>, <16 x i16>* %36855, align 2, !tbaa !396
  %36857 = getelementptr inbounds i16, i16* %36850, i64 -32
  %36858 = bitcast i16* %36857 to <16 x i16>*
  %36859 = load <16 x i16>, <16 x i16>* %36858, align 2, !tbaa !396
  %36860 = getelementptr inbounds i16, i16* %36850, i64 -16
  %36861 = bitcast i16* %36860 to <16 x i16>*
  %36862 = load <16 x i16>, <16 x i16>* %36861, align 2, !tbaa !396
  %36863 = getelementptr inbounds i16, i16* %36850, i64 -30
  %36864 = bitcast i16* %36863 to <16 x i16>*
  %36865 = load <16 x i16>, <16 x i16>* %36864, align 2, !tbaa !396
  %36866 = getelementptr inbounds i16, i16* %36850, i64 -14
  %36867 = bitcast i16* %36866 to <16 x i16>*
  %36868 = load <16 x i16>, <16 x i16>* %36867, align 2, !tbaa !396
  %36869 = getelementptr inbounds i16, i16* %36850, i64 -29
  %36870 = bitcast i16* %36869 to <16 x i16>*
  %36871 = load <16 x i16>, <16 x i16>* %36870, align 2, !tbaa !396
  %36872 = getelementptr inbounds i16, i16* %36850, i64 -13
  %36873 = bitcast i16* %36872 to <16 x i16>*
  %36874 = load <16 x i16>, <16 x i16>* %36873, align 2, !tbaa !396
  %36875 = getelementptr inbounds i16, i16* %36850, i64 -28
  %36876 = bitcast i16* %36875 to <16 x i16>*
  %36877 = load <16 x i16>, <16 x i16>* %36876, align 2, !tbaa !396
  %36878 = getelementptr inbounds i16, i16* %36850, i64 -12
  %36879 = bitcast i16* %36878 to <16 x i16>*
  %36880 = load <16 x i16>, <16 x i16>* %36879, align 2, !tbaa !396
  %36881 = getelementptr inbounds i16, i16* %36850, i64 -26
  %36882 = bitcast i16* %36881 to <16 x i16>*
  %36883 = load <16 x i16>, <16 x i16>* %36882, align 2, !tbaa !396
  %36884 = getelementptr inbounds i16, i16* %36850, i64 -10
  %36885 = bitcast i16* %36884 to <16 x i16>*
  %36886 = load <16 x i16>, <16 x i16>* %36885, align 2, !tbaa !396
  %36887 = getelementptr inbounds i16, i16* %36850, i64 -27
  %36888 = bitcast i16* %36887 to <16 x i16>*
  %36889 = load <16 x i16>, <16 x i16>* %36888, align 2, !tbaa !396
  %36890 = getelementptr inbounds i16, i16* %36850, i64 -11
  %36891 = bitcast i16* %36890 to <16 x i16>*
  %36892 = load <16 x i16>, <16 x i16>* %36891, align 2, !tbaa !396
  %36893 = add <16 x i16> %36859, %36853
  %36894 = add <16 x i16> %36893, %36865
  %36895 = add <16 x i16> %36894, %36871
  %36896 = add <16 x i16> %36895, %36877
  %36897 = add <16 x i16> %36896, %36883
  %36898 = add <16 x i16> %36897, %36889
  %36899 = add <16 x i16> %36862, %36856
  %36900 = add <16 x i16> %36899, %36868
  %36901 = add <16 x i16> %36900, %36874
  %36902 = add <16 x i16> %36901, %36880
  %36903 = add <16 x i16> %36902, %36886
  %36904 = add <16 x i16> %36903, %36892
  %36905 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36898, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36906 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36904, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %36907 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36905, <16 x i16> %36898)
  %36908 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %36906, <16 x i16> %36904)
  %36909 = shufflevector <16 x i16> %36907, <16 x i16> %36908, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36910 = lshr <32 x i16> %36909, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %36911 = shufflevector <32 x i16> %36910, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %36912 = zext i32 %.pre-phi3610 to i64
  %36913 = mul nsw i64 %295, %36912
  %36914 = add nsw i64 %297, %36913
  %36915 = getelementptr inbounds i16, i16* %blur_x917, i64 %36914
  %36916 = getelementptr inbounds i16, i16* %36915, i64 -32
  %36917 = bitcast i16* %36916 to <16 x i16>*
  store <16 x i16> %36911, <16 x i16>* %36917, align 2, !tbaa !399
  %36918 = shufflevector <32 x i16> %36910, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %36919 = getelementptr inbounds i16, i16* %36915, i64 -16
  %36920 = bitcast i16* %36919 to <16 x i16>*
  store <16 x i16> %36918, <16 x i16>* %36920, align 2, !tbaa !399
  %36921 = zext i32 %.pre-phi3622 to i64
  %36922 = mul nsw i64 %36921, %314
  %36923 = add nsw i64 %36922, %292
  %36924 = getelementptr inbounds i16, i16* %blur_x917, i64 %36923
  %36925 = getelementptr inbounds i16, i16* %36924, i64 -32
  %36926 = bitcast i16* %36925 to <16 x i16>*
  %36927 = load <16 x i16>, <16 x i16>* %36926, align 2, !tbaa !399
  %36928 = getelementptr inbounds i16, i16* %36924, i64 -16
  %36929 = bitcast i16* %36928 to <16 x i16>*
  %36930 = load <16 x i16>, <16 x i16>* %36929, align 2, !tbaa !399
  %36931 = zext i32 %.pre-phi3618 to i64
  %36932 = mul nsw i64 %36931, %314
  %36933 = add nsw i64 %36932, %292
  %36934 = getelementptr inbounds i16, i16* %blur_x917, i64 %36933
  %36935 = getelementptr inbounds i16, i16* %36934, i64 -32
  %36936 = bitcast i16* %36935 to <16 x i16>*
  %36937 = load <16 x i16>, <16 x i16>* %36936, align 2, !tbaa !399
  %36938 = getelementptr inbounds i16, i16* %36934, i64 -16
  %36939 = bitcast i16* %36938 to <16 x i16>*
  %36940 = load <16 x i16>, <16 x i16>* %36939, align 2, !tbaa !399
  %36941 = zext i32 %.pre-phi3628 to i64
  %36942 = mul nsw i64 %36941, %314
  %36943 = add nsw i64 %36942, %292
  %36944 = getelementptr inbounds i16, i16* %blur_x917, i64 %36943
  %36945 = getelementptr inbounds i16, i16* %36944, i64 -32
  %36946 = bitcast i16* %36945 to <16 x i16>*
  %36947 = load <16 x i16>, <16 x i16>* %36946, align 2, !tbaa !399
  %36948 = getelementptr inbounds i16, i16* %36944, i64 -16
  %36949 = bitcast i16* %36948 to <16 x i16>*
  %36950 = load <16 x i16>, <16 x i16>* %36949, align 2, !tbaa !399
  %36951 = zext i32 %.pre-phi3598 to i64
  %36952 = mul nsw i64 %36951, %314
  %36953 = add nsw i64 %36952, %292
  %36954 = getelementptr inbounds i16, i16* %blur_x917, i64 %36953
  %36955 = getelementptr inbounds i16, i16* %36954, i64 -32
  %36956 = bitcast i16* %36955 to <16 x i16>*
  %36957 = load <16 x i16>, <16 x i16>* %36956, align 2, !tbaa !399
  %36958 = getelementptr inbounds i16, i16* %36954, i64 -16
  %36959 = bitcast i16* %36958 to <16 x i16>*
  %36960 = load <16 x i16>, <16 x i16>* %36959, align 2, !tbaa !399
  %36961 = zext i32 %.pre-phi3602 to i64
  %36962 = mul nsw i64 %36961, %314
  %36963 = add nsw i64 %36962, %292
  %36964 = getelementptr inbounds i16, i16* %blur_x917, i64 %36963
  %36965 = getelementptr inbounds i16, i16* %36964, i64 -32
  %36966 = bitcast i16* %36965 to <16 x i16>*
  %36967 = load <16 x i16>, <16 x i16>* %36966, align 2, !tbaa !399
  %36968 = getelementptr inbounds i16, i16* %36964, i64 -16
  %36969 = bitcast i16* %36968 to <16 x i16>*
  %36970 = load <16 x i16>, <16 x i16>* %36969, align 2, !tbaa !399
  %36971 = mul nsw i64 %36912, %314
  %36972 = add nsw i64 %36971, %292
  %36973 = getelementptr inbounds i16, i16* %blur_x917, i64 %36972
  %36974 = getelementptr inbounds i16, i16* %36973, i64 -32
  %36975 = bitcast i16* %36974 to <16 x i16>*
  %36976 = load <16 x i16>, <16 x i16>* %36975, align 2, !tbaa !399
  %36977 = getelementptr inbounds i16, i16* %36973, i64 -16
  %36978 = bitcast i16* %36977 to <16 x i16>*
  %36979 = load <16 x i16>, <16 x i16>* %36978, align 2, !tbaa !399
  %36980 = zext i32 %.pre-phi3606 to i64
  %36981 = mul nsw i64 %36980, %314
  %36982 = add nsw i64 %36981, %292
  %36983 = getelementptr inbounds i16, i16* %blur_x917, i64 %36982
  %36984 = getelementptr inbounds i16, i16* %36983, i64 -32
  %36985 = bitcast i16* %36984 to <16 x i16>*
  %36986 = load <16 x i16>, <16 x i16>* %36985, align 2, !tbaa !399
  %36987 = getelementptr inbounds i16, i16* %36983, i64 -16
  %36988 = bitcast i16* %36987 to <16 x i16>*
  %36989 = load <16 x i16>, <16 x i16>* %36988, align 2, !tbaa !399
  %36990 = add <16 x i16> %36937, %36927
  %36991 = add <16 x i16> %36990, %36947
  %36992 = add <16 x i16> %36991, %36957
  %36993 = add <16 x i16> %36992, %36967
  %36994 = add <16 x i16> %36993, %36976
  %36995 = add <16 x i16> %36994, %36986
  %36996 = add <16 x i16> %36940, %36930
  %36997 = add <16 x i16> %36996, %36950
  %36998 = add <16 x i16> %36997, %36960
  %36999 = add <16 x i16> %36998, %36970
  %37000 = add <16 x i16> %36999, %36979
  %37001 = add <16 x i16> %37000, %36989
  %37002 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %36995, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37003 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37001, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37004 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37002, <16 x i16> %36995)
  %37005 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37003, <16 x i16> %37001)
  %37006 = shufflevector <16 x i16> %37004, <16 x i16> %37005, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37007 = lshr <32 x i16> %37006, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %37008 = shufflevector <32 x i16> %37007, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37009 = sext i32 %a367 to i64
  %37010 = add nsw i64 %37009, 29
  %37011 = mul nsw i64 %37010, %315
  %37012 = add nsw i64 %317, %37011
  %37013 = getelementptr inbounds i16, i16* %264, i64 %37012
  %37014 = getelementptr inbounds i16, i16* %37013, i64 -32
  %37015 = bitcast i16* %37014 to <16 x i16>*
  store <16 x i16> %37008, <16 x i16>* %37015, align 2, !tbaa !401
  %37016 = shufflevector <32 x i16> %37007, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37017 = getelementptr inbounds i16, i16* %37013, i64 -16
  %37018 = bitcast i16* %37017 to <16 x i16>*
  store <16 x i16> %37016, <16 x i16>* %37018, align 2, !tbaa !401
  br label %after_bb2346

"for blur_y.s0.x.x.rebased2361":                  ; preds = %"for blur_y.s0.x.x.rebased2361.preheader", %"consume blur_x2370"
  %indvars.iv3492 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2361.preheader" ], [ %indvars.iv.next3493, %"consume blur_x2370" ]
  %37019 = add nsw i64 %indvars.iv3492, %299
  %37020 = icmp slt i64 %37019, 1
  %37021 = trunc i64 %37019 to i32
  %37022 = shl nsw i32 %37021, 5
  %37023 = icmp sgt i32 %202, %37022
  %37024 = or i1 %37020, %37023
  br i1 %37024, label %"produce blur_x2368", label %"for blur_y.s0.x.x.rebased2361.consume blur_x2370_crit_edge"

"for blur_y.s0.x.x.rebased2361.consume blur_x2370_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2361"
  %.pre3685 = shl nsw i64 %37019, 5
  br label %"consume blur_x2370"

"end for blur_y.s0.x.x.rebased2362":              ; preds = %"consume blur_x2370", %after_bb2346
  br i1 %300, label %"for blur_y.s0.x.x.rebased2378.preheader", label %"end for blur_y.s0.x.x.rebased2379", !prof !386

"for blur_y.s0.x.x.rebased2378.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2362"
  %37025 = sext i32 %t17441014 to i64
  %37026 = zext i32 %.pre-phi3622 to i64
  %37027 = mul nsw i64 %37026, %314
  %37028 = sub nsw i64 %37027, %294
  %37029 = zext i32 %.pre-phi3618 to i64
  %37030 = mul nsw i64 %37029, %314
  %37031 = sub nsw i64 %37030, %294
  %37032 = zext i32 %.pre-phi3628 to i64
  %37033 = mul nsw i64 %37032, %314
  %37034 = sub nsw i64 %37033, %294
  %37035 = zext i32 %.pre-phi3598 to i64
  %37036 = mul nsw i64 %37035, %314
  %37037 = sub nsw i64 %37036, %294
  %37038 = zext i32 %.pre-phi3602 to i64
  %37039 = mul nsw i64 %37038, %314
  %37040 = sub nsw i64 %37039, %294
  %37041 = zext i32 %.pre-phi3610 to i64
  %37042 = mul nsw i64 %37041, %314
  %37043 = sub nsw i64 %37042, %294
  %37044 = zext i32 %.pre-phi3606 to i64
  %37045 = mul nsw i64 %37044, %314
  %37046 = sub nsw i64 %37045, %294
  %37047 = sext i32 %a367 to i64
  %37048 = add nsw i64 %37047, 29
  %37049 = mul nsw i64 %37048, %315
  %37050 = add nsw i64 %37049, %318
  br label %"for blur_y.s0.x.x.rebased2378"

"produce blur_x2368":                             ; preds = %"for blur_y.s0.x.x.rebased2361"
  %t12162369 = add nsw i32 %37022, %t22252358
  %37051 = sext i32 %t12162369 to i64
  %37052 = getelementptr inbounds i16, i16* %read_input860, i64 %37051
  %37053 = getelementptr inbounds i16, i16* %37052, i64 1
  %37054 = bitcast i16* %37053 to <16 x i16>*
  %37055 = load <16 x i16>, <16 x i16>* %37054, align 2, !tbaa !396
  %37056 = getelementptr inbounds i16, i16* %37052, i64 17
  %37057 = bitcast i16* %37056 to <16 x i16>*
  %37058 = load <16 x i16>, <16 x i16>* %37057, align 2, !tbaa !396
  %37059 = bitcast i16* %37052 to <16 x i16>*
  %37060 = load <16 x i16>, <16 x i16>* %37059, align 2, !tbaa !396
  %37061 = getelementptr inbounds i16, i16* %37052, i64 16
  %37062 = bitcast i16* %37061 to <16 x i16>*
  %37063 = load <16 x i16>, <16 x i16>* %37062, align 2, !tbaa !396
  %37064 = getelementptr inbounds i16, i16* %37052, i64 2
  %37065 = bitcast i16* %37064 to <16 x i16>*
  %37066 = load <16 x i16>, <16 x i16>* %37065, align 2, !tbaa !396
  %37067 = getelementptr inbounds i16, i16* %37052, i64 18
  %37068 = bitcast i16* %37067 to <16 x i16>*
  %37069 = load <16 x i16>, <16 x i16>* %37068, align 2, !tbaa !396
  %37070 = getelementptr inbounds i16, i16* %37052, i64 3
  %37071 = bitcast i16* %37070 to <16 x i16>*
  %37072 = load <16 x i16>, <16 x i16>* %37071, align 2, !tbaa !396
  %37073 = getelementptr inbounds i16, i16* %37052, i64 19
  %37074 = bitcast i16* %37073 to <16 x i16>*
  %37075 = load <16 x i16>, <16 x i16>* %37074, align 2, !tbaa !396
  %37076 = getelementptr inbounds i16, i16* %37052, i64 4
  %37077 = bitcast i16* %37076 to <16 x i16>*
  %37078 = load <16 x i16>, <16 x i16>* %37077, align 2, !tbaa !396
  %37079 = getelementptr inbounds i16, i16* %37052, i64 20
  %37080 = bitcast i16* %37079 to <16 x i16>*
  %37081 = load <16 x i16>, <16 x i16>* %37080, align 2, !tbaa !396
  %37082 = getelementptr inbounds i16, i16* %37052, i64 6
  %37083 = bitcast i16* %37082 to <16 x i16>*
  %37084 = load <16 x i16>, <16 x i16>* %37083, align 2, !tbaa !396
  %37085 = getelementptr inbounds i16, i16* %37052, i64 22
  %37086 = bitcast i16* %37085 to <16 x i16>*
  %37087 = load <16 x i16>, <16 x i16>* %37086, align 2, !tbaa !396
  %37088 = getelementptr inbounds i16, i16* %37052, i64 5
  %37089 = bitcast i16* %37088 to <16 x i16>*
  %37090 = load <16 x i16>, <16 x i16>* %37089, align 2, !tbaa !396
  %37091 = getelementptr inbounds i16, i16* %37052, i64 21
  %37092 = bitcast i16* %37091 to <16 x i16>*
  %37093 = load <16 x i16>, <16 x i16>* %37092, align 2, !tbaa !396
  %37094 = add <16 x i16> %37060, %37055
  %37095 = add <16 x i16> %37094, %37066
  %37096 = add <16 x i16> %37095, %37072
  %37097 = add <16 x i16> %37096, %37078
  %37098 = add <16 x i16> %37097, %37084
  %37099 = add <16 x i16> %37098, %37090
  %37100 = add <16 x i16> %37063, %37058
  %37101 = add <16 x i16> %37100, %37069
  %37102 = add <16 x i16> %37101, %37075
  %37103 = add <16 x i16> %37102, %37081
  %37104 = add <16 x i16> %37103, %37087
  %37105 = add <16 x i16> %37104, %37093
  %37106 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37099, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37107 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37105, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37108 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37106, <16 x i16> %37099)
  %37109 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37107, <16 x i16> %37105)
  %37110 = shufflevector <16 x i16> %37108, <16 x i16> %37109, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37111 = lshr <32 x i16> %37110, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %37112 = shufflevector <32 x i16> %37111, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37113 = shl nsw i64 %37019, 5
  %37114 = add nsw i64 %37113, %36824
  %37115 = getelementptr inbounds i16, i16* %blur_x917, i64 %37114
  %37116 = bitcast i16* %37115 to <16 x i16>*
  store <16 x i16> %37112, <16 x i16>* %37116, align 2, !tbaa !399
  %37117 = shufflevector <32 x i16> %37111, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37118 = getelementptr inbounds i16, i16* %37115, i64 16
  %37119 = bitcast i16* %37118 to <16 x i16>*
  store <16 x i16> %37117, <16 x i16>* %37119, align 2, !tbaa !399
  br label %"consume blur_x2370"

"consume blur_x2370":                             ; preds = %"for blur_y.s0.x.x.rebased2361.consume blur_x2370_crit_edge", %"produce blur_x2368"
  %.pre-phi3686 = phi i64 [ %.pre3685, %"for blur_y.s0.x.x.rebased2361.consume blur_x2370_crit_edge" ], [ %37113, %"produce blur_x2368" ]
  %37120 = add nsw i64 %36827, %.pre-phi3686
  %37121 = getelementptr inbounds i16, i16* %blur_x917, i64 %37120
  %37122 = bitcast i16* %37121 to <16 x i16>*
  %37123 = load <16 x i16>, <16 x i16>* %37122, align 2, !tbaa !399
  %37124 = getelementptr inbounds i16, i16* %37121, i64 16
  %37125 = bitcast i16* %37124 to <16 x i16>*
  %37126 = load <16 x i16>, <16 x i16>* %37125, align 2, !tbaa !399
  %37127 = add nsw i64 %36830, %.pre-phi3686
  %37128 = getelementptr inbounds i16, i16* %blur_x917, i64 %37127
  %37129 = bitcast i16* %37128 to <16 x i16>*
  %37130 = load <16 x i16>, <16 x i16>* %37129, align 2, !tbaa !399
  %37131 = getelementptr inbounds i16, i16* %37128, i64 16
  %37132 = bitcast i16* %37131 to <16 x i16>*
  %37133 = load <16 x i16>, <16 x i16>* %37132, align 2, !tbaa !399
  %37134 = add nsw i64 %36833, %.pre-phi3686
  %37135 = getelementptr inbounds i16, i16* %blur_x917, i64 %37134
  %37136 = bitcast i16* %37135 to <16 x i16>*
  %37137 = load <16 x i16>, <16 x i16>* %37136, align 2, !tbaa !399
  %37138 = getelementptr inbounds i16, i16* %37135, i64 16
  %37139 = bitcast i16* %37138 to <16 x i16>*
  %37140 = load <16 x i16>, <16 x i16>* %37139, align 2, !tbaa !399
  %37141 = add nsw i64 %36836, %.pre-phi3686
  %37142 = getelementptr inbounds i16, i16* %blur_x917, i64 %37141
  %37143 = bitcast i16* %37142 to <16 x i16>*
  %37144 = load <16 x i16>, <16 x i16>* %37143, align 2, !tbaa !399
  %37145 = getelementptr inbounds i16, i16* %37142, i64 16
  %37146 = bitcast i16* %37145 to <16 x i16>*
  %37147 = load <16 x i16>, <16 x i16>* %37146, align 2, !tbaa !399
  %37148 = add nsw i64 %36839, %.pre-phi3686
  %37149 = getelementptr inbounds i16, i16* %blur_x917, i64 %37148
  %37150 = bitcast i16* %37149 to <16 x i16>*
  %37151 = load <16 x i16>, <16 x i16>* %37150, align 2, !tbaa !399
  %37152 = getelementptr inbounds i16, i16* %37149, i64 16
  %37153 = bitcast i16* %37152 to <16 x i16>*
  %37154 = load <16 x i16>, <16 x i16>* %37153, align 2, !tbaa !399
  %37155 = add nsw i64 %36842, %.pre-phi3686
  %37156 = getelementptr inbounds i16, i16* %blur_x917, i64 %37155
  %37157 = bitcast i16* %37156 to <16 x i16>*
  %37158 = load <16 x i16>, <16 x i16>* %37157, align 2, !tbaa !399
  %37159 = getelementptr inbounds i16, i16* %37156, i64 16
  %37160 = bitcast i16* %37159 to <16 x i16>*
  %37161 = load <16 x i16>, <16 x i16>* %37160, align 2, !tbaa !399
  %37162 = add nsw i64 %36845, %.pre-phi3686
  %37163 = getelementptr inbounds i16, i16* %blur_x917, i64 %37162
  %37164 = bitcast i16* %37163 to <16 x i16>*
  %37165 = load <16 x i16>, <16 x i16>* %37164, align 2, !tbaa !399
  %37166 = getelementptr inbounds i16, i16* %37163, i64 16
  %37167 = bitcast i16* %37166 to <16 x i16>*
  %37168 = load <16 x i16>, <16 x i16>* %37167, align 2, !tbaa !399
  %37169 = add <16 x i16> %37130, %37123
  %37170 = add <16 x i16> %37169, %37137
  %37171 = add <16 x i16> %37170, %37144
  %37172 = add <16 x i16> %37171, %37151
  %37173 = add <16 x i16> %37172, %37158
  %37174 = add <16 x i16> %37173, %37165
  %37175 = add <16 x i16> %37133, %37126
  %37176 = add <16 x i16> %37175, %37140
  %37177 = add <16 x i16> %37176, %37147
  %37178 = add <16 x i16> %37177, %37154
  %37179 = add <16 x i16> %37178, %37161
  %37180 = add <16 x i16> %37179, %37168
  %37181 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37174, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37182 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37180, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37183 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37181, <16 x i16> %37174)
  %37184 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37182, <16 x i16> %37180)
  %37185 = shufflevector <16 x i16> %37183, <16 x i16> %37184, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37186 = lshr <32 x i16> %37185, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %37187 = shufflevector <32 x i16> %37186, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37188 = add nsw i64 %36849, %.pre-phi3686
  %37189 = getelementptr inbounds i16, i16* %264, i64 %37188
  %37190 = bitcast i16* %37189 to <16 x i16>*
  store <16 x i16> %37187, <16 x i16>* %37190, align 2, !tbaa !401
  %37191 = shufflevector <32 x i16> %37186, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37192 = getelementptr inbounds i16, i16* %37189, i64 16
  %37193 = bitcast i16* %37192 to <16 x i16>*
  store <16 x i16> %37191, <16 x i16>* %37193, align 2, !tbaa !401
  %indvars.iv.next3493 = add nuw nsw i64 %indvars.iv3492, 1
  %.not2652 = icmp eq i64 %indvars.iv.next3493, %386
  br i1 %.not2652, label %"end for blur_y.s0.x.x.rebased2362", label %"for blur_y.s0.x.x.rebased2361"

"for blur_y.s0.x.x.rebased2378":                  ; preds = %"for blur_y.s0.x.x.rebased2378.preheader", %"consume blur_x2388"
  %blur_y.s0.x.x.rebased2380 = phi i32 [ %37344, %"consume blur_x2388" ], [ 0, %"for blur_y.s0.x.x.rebased2378.preheader" ]
  %37194 = add nsw i32 %blur_y.s0.x.x.rebased2380, %t1670852
  %a663 = shl nsw i32 %37194, 5
  %37195 = icmp sgt i32 %a355, %a663
  %b669 = select i1 %37195, i32 %a663, i32 %a355
  %37196 = icmp slt i32 %37194, 1
  %37197 = icmp sgt i32 %202, %a663
  %37198 = or i1 %37196, %37197
  br i1 %37198, label %"produce blur_x2385", label %"consume blur_x2388"

"end for blur_y.s0.x.x.rebased2379":              ; preds = %"consume blur_x2388", %"end for blur_y.s0.x.x.rebased2362"
  br i1 %232, label %"produce blur_x2392", label %after_bb2389

"produce blur_x2385":                             ; preds = %"for blur_y.s0.x.x.rebased2378"
  %37199 = icmp slt i32 %b669, %202
  %blur_x.s0.x.v1.base.s2386 = select i1 %37199, i32 %b669, i32 %202
  %t12212387 = add nsw i32 %blur_x.s0.x.v1.base.s2386, %t22252358
  %37200 = sext i32 %t12212387 to i64
  %37201 = getelementptr inbounds i16, i16* %read_input860, i64 %37200
  %37202 = getelementptr inbounds i16, i16* %37201, i64 1
  %37203 = bitcast i16* %37202 to <16 x i16>*
  %37204 = load <16 x i16>, <16 x i16>* %37203, align 2, !tbaa !396
  %37205 = getelementptr inbounds i16, i16* %37201, i64 17
  %37206 = bitcast i16* %37205 to <16 x i16>*
  %37207 = load <16 x i16>, <16 x i16>* %37206, align 2, !tbaa !396
  %37208 = bitcast i16* %37201 to <16 x i16>*
  %37209 = load <16 x i16>, <16 x i16>* %37208, align 2, !tbaa !396
  %37210 = getelementptr inbounds i16, i16* %37201, i64 16
  %37211 = bitcast i16* %37210 to <16 x i16>*
  %37212 = load <16 x i16>, <16 x i16>* %37211, align 2, !tbaa !396
  %37213 = getelementptr inbounds i16, i16* %37201, i64 2
  %37214 = bitcast i16* %37213 to <16 x i16>*
  %37215 = load <16 x i16>, <16 x i16>* %37214, align 2, !tbaa !396
  %37216 = getelementptr inbounds i16, i16* %37201, i64 18
  %37217 = bitcast i16* %37216 to <16 x i16>*
  %37218 = load <16 x i16>, <16 x i16>* %37217, align 2, !tbaa !396
  %37219 = getelementptr inbounds i16, i16* %37201, i64 3
  %37220 = bitcast i16* %37219 to <16 x i16>*
  %37221 = load <16 x i16>, <16 x i16>* %37220, align 2, !tbaa !396
  %37222 = getelementptr inbounds i16, i16* %37201, i64 19
  %37223 = bitcast i16* %37222 to <16 x i16>*
  %37224 = load <16 x i16>, <16 x i16>* %37223, align 2, !tbaa !396
  %37225 = getelementptr inbounds i16, i16* %37201, i64 4
  %37226 = bitcast i16* %37225 to <16 x i16>*
  %37227 = load <16 x i16>, <16 x i16>* %37226, align 2, !tbaa !396
  %37228 = getelementptr inbounds i16, i16* %37201, i64 20
  %37229 = bitcast i16* %37228 to <16 x i16>*
  %37230 = load <16 x i16>, <16 x i16>* %37229, align 2, !tbaa !396
  %37231 = getelementptr inbounds i16, i16* %37201, i64 6
  %37232 = bitcast i16* %37231 to <16 x i16>*
  %37233 = load <16 x i16>, <16 x i16>* %37232, align 2, !tbaa !396
  %37234 = getelementptr inbounds i16, i16* %37201, i64 22
  %37235 = bitcast i16* %37234 to <16 x i16>*
  %37236 = load <16 x i16>, <16 x i16>* %37235, align 2, !tbaa !396
  %37237 = getelementptr inbounds i16, i16* %37201, i64 5
  %37238 = bitcast i16* %37237 to <16 x i16>*
  %37239 = load <16 x i16>, <16 x i16>* %37238, align 2, !tbaa !396
  %37240 = getelementptr inbounds i16, i16* %37201, i64 21
  %37241 = bitcast i16* %37240 to <16 x i16>*
  %37242 = load <16 x i16>, <16 x i16>* %37241, align 2, !tbaa !396
  %37243 = add <16 x i16> %37209, %37204
  %37244 = add <16 x i16> %37243, %37215
  %37245 = add <16 x i16> %37244, %37221
  %37246 = add <16 x i16> %37245, %37227
  %37247 = add <16 x i16> %37246, %37233
  %37248 = add <16 x i16> %37247, %37239
  %37249 = add <16 x i16> %37212, %37207
  %37250 = add <16 x i16> %37249, %37218
  %37251 = add <16 x i16> %37250, %37224
  %37252 = add <16 x i16> %37251, %37230
  %37253 = add <16 x i16> %37252, %37236
  %37254 = add <16 x i16> %37253, %37242
  %37255 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37248, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37256 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37254, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37257 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37255, <16 x i16> %37248)
  %37258 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37256, <16 x i16> %37254)
  %37259 = shufflevector <16 x i16> %37257, <16 x i16> %37258, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37260 = lshr <32 x i16> %37259, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %37261 = shufflevector <32 x i16> %37260, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37262 = sext i32 %blur_x.s0.x.v1.base.s2386 to i64
  %37263 = add nsw i64 %37262, %37025
  %37264 = getelementptr inbounds i16, i16* %blur_x917, i64 %37263
  %37265 = bitcast i16* %37264 to <16 x i16>*
  store <16 x i16> %37261, <16 x i16>* %37265, align 2, !tbaa !399
  %37266 = shufflevector <32 x i16> %37260, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37267 = getelementptr inbounds i16, i16* %37264, i64 16
  %37268 = bitcast i16* %37267 to <16 x i16>*
  store <16 x i16> %37266, <16 x i16>* %37268, align 2, !tbaa !399
  br label %"consume blur_x2388"

"consume blur_x2388":                             ; preds = %"for blur_y.s0.x.x.rebased2378", %"produce blur_x2385"
  %37269 = sext i32 %b669 to i64
  %37270 = add nsw i64 %37028, %37269
  %37271 = getelementptr inbounds i16, i16* %blur_x917, i64 %37270
  %37272 = bitcast i16* %37271 to <16 x i16>*
  %37273 = load <16 x i16>, <16 x i16>* %37272, align 2, !tbaa !399
  %37274 = getelementptr inbounds i16, i16* %37271, i64 16
  %37275 = bitcast i16* %37274 to <16 x i16>*
  %37276 = load <16 x i16>, <16 x i16>* %37275, align 2, !tbaa !399
  %37277 = add nsw i64 %37031, %37269
  %37278 = getelementptr inbounds i16, i16* %blur_x917, i64 %37277
  %37279 = bitcast i16* %37278 to <16 x i16>*
  %37280 = load <16 x i16>, <16 x i16>* %37279, align 2, !tbaa !399
  %37281 = getelementptr inbounds i16, i16* %37278, i64 16
  %37282 = bitcast i16* %37281 to <16 x i16>*
  %37283 = load <16 x i16>, <16 x i16>* %37282, align 2, !tbaa !399
  %37284 = add nsw i64 %37034, %37269
  %37285 = getelementptr inbounds i16, i16* %blur_x917, i64 %37284
  %37286 = bitcast i16* %37285 to <16 x i16>*
  %37287 = load <16 x i16>, <16 x i16>* %37286, align 2, !tbaa !399
  %37288 = getelementptr inbounds i16, i16* %37285, i64 16
  %37289 = bitcast i16* %37288 to <16 x i16>*
  %37290 = load <16 x i16>, <16 x i16>* %37289, align 2, !tbaa !399
  %37291 = add nsw i64 %37037, %37269
  %37292 = getelementptr inbounds i16, i16* %blur_x917, i64 %37291
  %37293 = bitcast i16* %37292 to <16 x i16>*
  %37294 = load <16 x i16>, <16 x i16>* %37293, align 2, !tbaa !399
  %37295 = getelementptr inbounds i16, i16* %37292, i64 16
  %37296 = bitcast i16* %37295 to <16 x i16>*
  %37297 = load <16 x i16>, <16 x i16>* %37296, align 2, !tbaa !399
  %37298 = add nsw i64 %37040, %37269
  %37299 = getelementptr inbounds i16, i16* %blur_x917, i64 %37298
  %37300 = bitcast i16* %37299 to <16 x i16>*
  %37301 = load <16 x i16>, <16 x i16>* %37300, align 2, !tbaa !399
  %37302 = getelementptr inbounds i16, i16* %37299, i64 16
  %37303 = bitcast i16* %37302 to <16 x i16>*
  %37304 = load <16 x i16>, <16 x i16>* %37303, align 2, !tbaa !399
  %37305 = add nsw i64 %37043, %37269
  %37306 = getelementptr inbounds i16, i16* %blur_x917, i64 %37305
  %37307 = bitcast i16* %37306 to <16 x i16>*
  %37308 = load <16 x i16>, <16 x i16>* %37307, align 2, !tbaa !399
  %37309 = getelementptr inbounds i16, i16* %37306, i64 16
  %37310 = bitcast i16* %37309 to <16 x i16>*
  %37311 = load <16 x i16>, <16 x i16>* %37310, align 2, !tbaa !399
  %37312 = add nsw i64 %37046, %37269
  %37313 = getelementptr inbounds i16, i16* %blur_x917, i64 %37312
  %37314 = bitcast i16* %37313 to <16 x i16>*
  %37315 = load <16 x i16>, <16 x i16>* %37314, align 2, !tbaa !399
  %37316 = getelementptr inbounds i16, i16* %37313, i64 16
  %37317 = bitcast i16* %37316 to <16 x i16>*
  %37318 = load <16 x i16>, <16 x i16>* %37317, align 2, !tbaa !399
  %37319 = add <16 x i16> %37280, %37273
  %37320 = add <16 x i16> %37319, %37287
  %37321 = add <16 x i16> %37320, %37294
  %37322 = add <16 x i16> %37321, %37301
  %37323 = add <16 x i16> %37322, %37308
  %37324 = add <16 x i16> %37323, %37315
  %37325 = add <16 x i16> %37283, %37276
  %37326 = add <16 x i16> %37325, %37290
  %37327 = add <16 x i16> %37326, %37297
  %37328 = add <16 x i16> %37327, %37304
  %37329 = add <16 x i16> %37328, %37311
  %37330 = add <16 x i16> %37329, %37318
  %37331 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37324, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37332 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37330, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37333 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37331, <16 x i16> %37324)
  %37334 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37332, <16 x i16> %37330)
  %37335 = shufflevector <16 x i16> %37333, <16 x i16> %37334, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37336 = lshr <32 x i16> %37335, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %37337 = shufflevector <32 x i16> %37336, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37338 = add nsw i64 %37050, %37269
  %37339 = getelementptr inbounds i16, i16* %264, i64 %37338
  %37340 = bitcast i16* %37339 to <16 x i16>*
  store <16 x i16> %37337, <16 x i16>* %37340, align 2, !tbaa !401
  %37341 = shufflevector <32 x i16> %37336, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37342 = getelementptr inbounds i16, i16* %37339, i64 16
  %37343 = bitcast i16* %37342 to <16 x i16>*
  store <16 x i16> %37341, <16 x i16>* %37343, align 2, !tbaa !401
  %37344 = add nuw nsw i32 %blur_y.s0.x.x.rebased2380, 1
  %.not2651 = icmp eq i32 %37344, %t1727937
  br i1 %.not2651, label %"end for blur_y.s0.x.x.rebased2379", label %"for blur_y.s0.x.x.rebased2378"

after_bb2389:                                     ; preds = %"end for blur_y.s0.x.x.rebased2379", %"produce blur_x2392"
  br i1 %298, label %"for blur_y.s0.x.x.rebased2404.preheader", label %"end for blur_y.s0.x.x.rebased2405", !prof !386

"for blur_y.s0.x.x.rebased2404.preheader":        ; preds = %after_bb2389
  %37345 = sext i32 %t17501044 to i64
  %37346 = zext i32 %.pre-phi3628 to i64
  %37347 = mul nsw i64 %37346, %314
  %37348 = sub nsw i64 %37347, %294
  %37349 = zext i32 %.pre-phi3622 to i64
  %37350 = mul nsw i64 %37349, %314
  %37351 = sub nsw i64 %37350, %294
  %37352 = zext i32 %.pre-phi3598 to i64
  %37353 = mul nsw i64 %37352, %314
  %37354 = sub nsw i64 %37353, %294
  %37355 = zext i32 %.pre-phi3602 to i64
  %37356 = mul nsw i64 %37355, %314
  %37357 = sub nsw i64 %37356, %294
  %37358 = zext i32 %.pre-phi3606 to i64
  %37359 = mul nsw i64 %37358, %314
  %37360 = sub nsw i64 %37359, %294
  %37361 = zext i32 %.pre-phi3614 to i64
  %37362 = mul nsw i64 %37361, %314
  %37363 = sub nsw i64 %37362, %294
  %37364 = zext i32 %.pre-phi3610 to i64
  %37365 = mul nsw i64 %37364, %314
  %37366 = sub nsw i64 %37365, %294
  %37367 = sext i32 %a367 to i64
  %37368 = add nsw i64 %37367, 30
  %37369 = mul nsw i64 %37368, %315
  %37370 = add nsw i64 %37369, %318
  br label %"for blur_y.s0.x.x.rebased2404"

"produce blur_x2392":                             ; preds = %"end for blur_y.s0.x.x.rebased2379"
  %37371 = getelementptr inbounds i16, i16* %read_input860, i64 %377
  %37372 = getelementptr inbounds i16, i16* %37371, i64 -31
  %37373 = bitcast i16* %37372 to <16 x i16>*
  %37374 = load <16 x i16>, <16 x i16>* %37373, align 2, !tbaa !396
  %37375 = getelementptr inbounds i16, i16* %37371, i64 -15
  %37376 = bitcast i16* %37375 to <16 x i16>*
  %37377 = load <16 x i16>, <16 x i16>* %37376, align 2, !tbaa !396
  %37378 = getelementptr inbounds i16, i16* %37371, i64 -32
  %37379 = bitcast i16* %37378 to <16 x i16>*
  %37380 = load <16 x i16>, <16 x i16>* %37379, align 2, !tbaa !396
  %37381 = getelementptr inbounds i16, i16* %37371, i64 -16
  %37382 = bitcast i16* %37381 to <16 x i16>*
  %37383 = load <16 x i16>, <16 x i16>* %37382, align 2, !tbaa !396
  %37384 = getelementptr inbounds i16, i16* %37371, i64 -30
  %37385 = bitcast i16* %37384 to <16 x i16>*
  %37386 = load <16 x i16>, <16 x i16>* %37385, align 2, !tbaa !396
  %37387 = getelementptr inbounds i16, i16* %37371, i64 -14
  %37388 = bitcast i16* %37387 to <16 x i16>*
  %37389 = load <16 x i16>, <16 x i16>* %37388, align 2, !tbaa !396
  %37390 = getelementptr inbounds i16, i16* %37371, i64 -29
  %37391 = bitcast i16* %37390 to <16 x i16>*
  %37392 = load <16 x i16>, <16 x i16>* %37391, align 2, !tbaa !396
  %37393 = getelementptr inbounds i16, i16* %37371, i64 -13
  %37394 = bitcast i16* %37393 to <16 x i16>*
  %37395 = load <16 x i16>, <16 x i16>* %37394, align 2, !tbaa !396
  %37396 = getelementptr inbounds i16, i16* %37371, i64 -28
  %37397 = bitcast i16* %37396 to <16 x i16>*
  %37398 = load <16 x i16>, <16 x i16>* %37397, align 2, !tbaa !396
  %37399 = getelementptr inbounds i16, i16* %37371, i64 -12
  %37400 = bitcast i16* %37399 to <16 x i16>*
  %37401 = load <16 x i16>, <16 x i16>* %37400, align 2, !tbaa !396
  %37402 = getelementptr inbounds i16, i16* %37371, i64 -26
  %37403 = bitcast i16* %37402 to <16 x i16>*
  %37404 = load <16 x i16>, <16 x i16>* %37403, align 2, !tbaa !396
  %37405 = getelementptr inbounds i16, i16* %37371, i64 -10
  %37406 = bitcast i16* %37405 to <16 x i16>*
  %37407 = load <16 x i16>, <16 x i16>* %37406, align 2, !tbaa !396
  %37408 = getelementptr inbounds i16, i16* %37371, i64 -27
  %37409 = bitcast i16* %37408 to <16 x i16>*
  %37410 = load <16 x i16>, <16 x i16>* %37409, align 2, !tbaa !396
  %37411 = getelementptr inbounds i16, i16* %37371, i64 -11
  %37412 = bitcast i16* %37411 to <16 x i16>*
  %37413 = load <16 x i16>, <16 x i16>* %37412, align 2, !tbaa !396
  %37414 = add <16 x i16> %37380, %37374
  %37415 = add <16 x i16> %37414, %37386
  %37416 = add <16 x i16> %37415, %37392
  %37417 = add <16 x i16> %37416, %37398
  %37418 = add <16 x i16> %37417, %37404
  %37419 = add <16 x i16> %37418, %37410
  %37420 = add <16 x i16> %37383, %37377
  %37421 = add <16 x i16> %37420, %37389
  %37422 = add <16 x i16> %37421, %37395
  %37423 = add <16 x i16> %37422, %37401
  %37424 = add <16 x i16> %37423, %37407
  %37425 = add <16 x i16> %37424, %37413
  %37426 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37419, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37427 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37425, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37428 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37426, <16 x i16> %37419)
  %37429 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37427, <16 x i16> %37425)
  %37430 = shufflevector <16 x i16> %37428, <16 x i16> %37429, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37431 = lshr <32 x i16> %37430, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %37432 = shufflevector <32 x i16> %37431, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37433 = zext i32 %.pre-phi3614 to i64
  %37434 = mul nsw i64 %295, %37433
  %37435 = add nsw i64 %297, %37434
  %37436 = getelementptr inbounds i16, i16* %blur_x917, i64 %37435
  %37437 = getelementptr inbounds i16, i16* %37436, i64 -32
  %37438 = bitcast i16* %37437 to <16 x i16>*
  store <16 x i16> %37432, <16 x i16>* %37438, align 2, !tbaa !399
  %37439 = shufflevector <32 x i16> %37431, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37440 = getelementptr inbounds i16, i16* %37436, i64 -16
  %37441 = bitcast i16* %37440 to <16 x i16>*
  store <16 x i16> %37439, <16 x i16>* %37441, align 2, !tbaa !399
  %37442 = zext i32 %.pre-phi3628 to i64
  %37443 = mul nsw i64 %37442, %314
  %37444 = add nsw i64 %37443, %292
  %37445 = getelementptr inbounds i16, i16* %blur_x917, i64 %37444
  %37446 = getelementptr inbounds i16, i16* %37445, i64 -32
  %37447 = bitcast i16* %37446 to <16 x i16>*
  %37448 = load <16 x i16>, <16 x i16>* %37447, align 2, !tbaa !399
  %37449 = getelementptr inbounds i16, i16* %37445, i64 -16
  %37450 = bitcast i16* %37449 to <16 x i16>*
  %37451 = load <16 x i16>, <16 x i16>* %37450, align 2, !tbaa !399
  %37452 = zext i32 %.pre-phi3622 to i64
  %37453 = mul nsw i64 %37452, %314
  %37454 = add nsw i64 %37453, %292
  %37455 = getelementptr inbounds i16, i16* %blur_x917, i64 %37454
  %37456 = getelementptr inbounds i16, i16* %37455, i64 -32
  %37457 = bitcast i16* %37456 to <16 x i16>*
  %37458 = load <16 x i16>, <16 x i16>* %37457, align 2, !tbaa !399
  %37459 = getelementptr inbounds i16, i16* %37455, i64 -16
  %37460 = bitcast i16* %37459 to <16 x i16>*
  %37461 = load <16 x i16>, <16 x i16>* %37460, align 2, !tbaa !399
  %37462 = zext i32 %.pre-phi3598 to i64
  %37463 = mul nsw i64 %37462, %314
  %37464 = add nsw i64 %37463, %292
  %37465 = getelementptr inbounds i16, i16* %blur_x917, i64 %37464
  %37466 = getelementptr inbounds i16, i16* %37465, i64 -32
  %37467 = bitcast i16* %37466 to <16 x i16>*
  %37468 = load <16 x i16>, <16 x i16>* %37467, align 2, !tbaa !399
  %37469 = getelementptr inbounds i16, i16* %37465, i64 -16
  %37470 = bitcast i16* %37469 to <16 x i16>*
  %37471 = load <16 x i16>, <16 x i16>* %37470, align 2, !tbaa !399
  %37472 = zext i32 %.pre-phi3602 to i64
  %37473 = mul nsw i64 %37472, %314
  %37474 = add nsw i64 %37473, %292
  %37475 = getelementptr inbounds i16, i16* %blur_x917, i64 %37474
  %37476 = getelementptr inbounds i16, i16* %37475, i64 -32
  %37477 = bitcast i16* %37476 to <16 x i16>*
  %37478 = load <16 x i16>, <16 x i16>* %37477, align 2, !tbaa !399
  %37479 = getelementptr inbounds i16, i16* %37475, i64 -16
  %37480 = bitcast i16* %37479 to <16 x i16>*
  %37481 = load <16 x i16>, <16 x i16>* %37480, align 2, !tbaa !399
  %37482 = zext i32 %.pre-phi3606 to i64
  %37483 = mul nsw i64 %37482, %314
  %37484 = add nsw i64 %37483, %292
  %37485 = getelementptr inbounds i16, i16* %blur_x917, i64 %37484
  %37486 = getelementptr inbounds i16, i16* %37485, i64 -32
  %37487 = bitcast i16* %37486 to <16 x i16>*
  %37488 = load <16 x i16>, <16 x i16>* %37487, align 2, !tbaa !399
  %37489 = getelementptr inbounds i16, i16* %37485, i64 -16
  %37490 = bitcast i16* %37489 to <16 x i16>*
  %37491 = load <16 x i16>, <16 x i16>* %37490, align 2, !tbaa !399
  %37492 = mul nsw i64 %37433, %314
  %37493 = add nsw i64 %37492, %292
  %37494 = getelementptr inbounds i16, i16* %blur_x917, i64 %37493
  %37495 = getelementptr inbounds i16, i16* %37494, i64 -32
  %37496 = bitcast i16* %37495 to <16 x i16>*
  %37497 = load <16 x i16>, <16 x i16>* %37496, align 2, !tbaa !399
  %37498 = getelementptr inbounds i16, i16* %37494, i64 -16
  %37499 = bitcast i16* %37498 to <16 x i16>*
  %37500 = load <16 x i16>, <16 x i16>* %37499, align 2, !tbaa !399
  %37501 = zext i32 %.pre-phi3610 to i64
  %37502 = mul nsw i64 %37501, %314
  %37503 = add nsw i64 %37502, %292
  %37504 = getelementptr inbounds i16, i16* %blur_x917, i64 %37503
  %37505 = getelementptr inbounds i16, i16* %37504, i64 -32
  %37506 = bitcast i16* %37505 to <16 x i16>*
  %37507 = load <16 x i16>, <16 x i16>* %37506, align 2, !tbaa !399
  %37508 = getelementptr inbounds i16, i16* %37504, i64 -16
  %37509 = bitcast i16* %37508 to <16 x i16>*
  %37510 = load <16 x i16>, <16 x i16>* %37509, align 2, !tbaa !399
  %37511 = add <16 x i16> %37458, %37448
  %37512 = add <16 x i16> %37511, %37468
  %37513 = add <16 x i16> %37512, %37478
  %37514 = add <16 x i16> %37513, %37488
  %37515 = add <16 x i16> %37514, %37497
  %37516 = add <16 x i16> %37515, %37507
  %37517 = add <16 x i16> %37461, %37451
  %37518 = add <16 x i16> %37517, %37471
  %37519 = add <16 x i16> %37518, %37481
  %37520 = add <16 x i16> %37519, %37491
  %37521 = add <16 x i16> %37520, %37500
  %37522 = add <16 x i16> %37521, %37510
  %37523 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37516, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37524 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37522, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37525 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37523, <16 x i16> %37516)
  %37526 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37524, <16 x i16> %37522)
  %37527 = shufflevector <16 x i16> %37525, <16 x i16> %37526, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37528 = lshr <32 x i16> %37527, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %37529 = shufflevector <32 x i16> %37528, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37530 = sext i32 %a367 to i64
  %37531 = add nsw i64 %37530, 30
  %37532 = mul nsw i64 %37531, %315
  %37533 = add nsw i64 %317, %37532
  %37534 = getelementptr inbounds i16, i16* %264, i64 %37533
  %37535 = getelementptr inbounds i16, i16* %37534, i64 -32
  %37536 = bitcast i16* %37535 to <16 x i16>*
  store <16 x i16> %37529, <16 x i16>* %37536, align 2, !tbaa !401
  %37537 = shufflevector <32 x i16> %37528, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37538 = getelementptr inbounds i16, i16* %37534, i64 -16
  %37539 = bitcast i16* %37538 to <16 x i16>*
  store <16 x i16> %37537, <16 x i16>* %37539, align 2, !tbaa !401
  br label %after_bb2389

"for blur_y.s0.x.x.rebased2404":                  ; preds = %"for blur_y.s0.x.x.rebased2404.preheader", %"consume blur_x2413"
  %indvars.iv3495 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2404.preheader" ], [ %indvars.iv.next3496, %"consume blur_x2413" ]
  %37540 = add nsw i64 %indvars.iv3495, %299
  %37541 = icmp slt i64 %37540, 1
  %37542 = trunc i64 %37540 to i32
  %37543 = shl nsw i32 %37542, 5
  %37544 = icmp sgt i32 %202, %37543
  %37545 = or i1 %37541, %37544
  br i1 %37545, label %"produce blur_x2411", label %"for blur_y.s0.x.x.rebased2404.consume blur_x2413_crit_edge"

"for blur_y.s0.x.x.rebased2404.consume blur_x2413_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2404"
  %.pre3687 = shl nsw i64 %37540, 5
  br label %"consume blur_x2413"

"end for blur_y.s0.x.x.rebased2405":              ; preds = %"consume blur_x2413", %after_bb2389
  br i1 %300, label %"for blur_y.s0.x.x.rebased2421.preheader", label %"end for blur_y.s0.x.x.rebased2422", !prof !386

"for blur_y.s0.x.x.rebased2421.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2405"
  %37546 = sext i32 %t17501044 to i64
  %37547 = zext i32 %.pre-phi3628 to i64
  %37548 = mul nsw i64 %37547, %314
  %37549 = sub nsw i64 %37548, %294
  %37550 = zext i32 %.pre-phi3622 to i64
  %37551 = mul nsw i64 %37550, %314
  %37552 = sub nsw i64 %37551, %294
  %37553 = zext i32 %.pre-phi3598 to i64
  %37554 = mul nsw i64 %37553, %314
  %37555 = sub nsw i64 %37554, %294
  %37556 = zext i32 %.pre-phi3602 to i64
  %37557 = mul nsw i64 %37556, %314
  %37558 = sub nsw i64 %37557, %294
  %37559 = zext i32 %.pre-phi3606 to i64
  %37560 = mul nsw i64 %37559, %314
  %37561 = sub nsw i64 %37560, %294
  %37562 = zext i32 %.pre-phi3614 to i64
  %37563 = mul nsw i64 %37562, %314
  %37564 = sub nsw i64 %37563, %294
  %37565 = zext i32 %.pre-phi3610 to i64
  %37566 = mul nsw i64 %37565, %314
  %37567 = sub nsw i64 %37566, %294
  %37568 = sext i32 %a367 to i64
  %37569 = add nsw i64 %37568, 30
  %37570 = mul nsw i64 %37569, %315
  %37571 = add nsw i64 %37570, %318
  br label %"for blur_y.s0.x.x.rebased2421"

"produce blur_x2411":                             ; preds = %"for blur_y.s0.x.x.rebased2404"
  %t12322412 = add nsw i32 %37543, %t22412401
  %37572 = sext i32 %t12322412 to i64
  %37573 = getelementptr inbounds i16, i16* %read_input860, i64 %37572
  %37574 = getelementptr inbounds i16, i16* %37573, i64 1
  %37575 = bitcast i16* %37574 to <16 x i16>*
  %37576 = load <16 x i16>, <16 x i16>* %37575, align 2, !tbaa !396
  %37577 = getelementptr inbounds i16, i16* %37573, i64 17
  %37578 = bitcast i16* %37577 to <16 x i16>*
  %37579 = load <16 x i16>, <16 x i16>* %37578, align 2, !tbaa !396
  %37580 = bitcast i16* %37573 to <16 x i16>*
  %37581 = load <16 x i16>, <16 x i16>* %37580, align 2, !tbaa !396
  %37582 = getelementptr inbounds i16, i16* %37573, i64 16
  %37583 = bitcast i16* %37582 to <16 x i16>*
  %37584 = load <16 x i16>, <16 x i16>* %37583, align 2, !tbaa !396
  %37585 = getelementptr inbounds i16, i16* %37573, i64 2
  %37586 = bitcast i16* %37585 to <16 x i16>*
  %37587 = load <16 x i16>, <16 x i16>* %37586, align 2, !tbaa !396
  %37588 = getelementptr inbounds i16, i16* %37573, i64 18
  %37589 = bitcast i16* %37588 to <16 x i16>*
  %37590 = load <16 x i16>, <16 x i16>* %37589, align 2, !tbaa !396
  %37591 = getelementptr inbounds i16, i16* %37573, i64 3
  %37592 = bitcast i16* %37591 to <16 x i16>*
  %37593 = load <16 x i16>, <16 x i16>* %37592, align 2, !tbaa !396
  %37594 = getelementptr inbounds i16, i16* %37573, i64 19
  %37595 = bitcast i16* %37594 to <16 x i16>*
  %37596 = load <16 x i16>, <16 x i16>* %37595, align 2, !tbaa !396
  %37597 = getelementptr inbounds i16, i16* %37573, i64 4
  %37598 = bitcast i16* %37597 to <16 x i16>*
  %37599 = load <16 x i16>, <16 x i16>* %37598, align 2, !tbaa !396
  %37600 = getelementptr inbounds i16, i16* %37573, i64 20
  %37601 = bitcast i16* %37600 to <16 x i16>*
  %37602 = load <16 x i16>, <16 x i16>* %37601, align 2, !tbaa !396
  %37603 = getelementptr inbounds i16, i16* %37573, i64 6
  %37604 = bitcast i16* %37603 to <16 x i16>*
  %37605 = load <16 x i16>, <16 x i16>* %37604, align 2, !tbaa !396
  %37606 = getelementptr inbounds i16, i16* %37573, i64 22
  %37607 = bitcast i16* %37606 to <16 x i16>*
  %37608 = load <16 x i16>, <16 x i16>* %37607, align 2, !tbaa !396
  %37609 = getelementptr inbounds i16, i16* %37573, i64 5
  %37610 = bitcast i16* %37609 to <16 x i16>*
  %37611 = load <16 x i16>, <16 x i16>* %37610, align 2, !tbaa !396
  %37612 = getelementptr inbounds i16, i16* %37573, i64 21
  %37613 = bitcast i16* %37612 to <16 x i16>*
  %37614 = load <16 x i16>, <16 x i16>* %37613, align 2, !tbaa !396
  %37615 = add <16 x i16> %37581, %37576
  %37616 = add <16 x i16> %37615, %37587
  %37617 = add <16 x i16> %37616, %37593
  %37618 = add <16 x i16> %37617, %37599
  %37619 = add <16 x i16> %37618, %37605
  %37620 = add <16 x i16> %37619, %37611
  %37621 = add <16 x i16> %37584, %37579
  %37622 = add <16 x i16> %37621, %37590
  %37623 = add <16 x i16> %37622, %37596
  %37624 = add <16 x i16> %37623, %37602
  %37625 = add <16 x i16> %37624, %37608
  %37626 = add <16 x i16> %37625, %37614
  %37627 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37620, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37628 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37626, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37629 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37627, <16 x i16> %37620)
  %37630 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37628, <16 x i16> %37626)
  %37631 = shufflevector <16 x i16> %37629, <16 x i16> %37630, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37632 = lshr <32 x i16> %37631, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %37633 = shufflevector <32 x i16> %37632, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37634 = shl nsw i64 %37540, 5
  %37635 = add nsw i64 %37634, %37345
  %37636 = getelementptr inbounds i16, i16* %blur_x917, i64 %37635
  %37637 = bitcast i16* %37636 to <16 x i16>*
  store <16 x i16> %37633, <16 x i16>* %37637, align 2, !tbaa !399
  %37638 = shufflevector <32 x i16> %37632, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37639 = getelementptr inbounds i16, i16* %37636, i64 16
  %37640 = bitcast i16* %37639 to <16 x i16>*
  store <16 x i16> %37638, <16 x i16>* %37640, align 2, !tbaa !399
  br label %"consume blur_x2413"

"consume blur_x2413":                             ; preds = %"for blur_y.s0.x.x.rebased2404.consume blur_x2413_crit_edge", %"produce blur_x2411"
  %.pre-phi3688 = phi i64 [ %.pre3687, %"for blur_y.s0.x.x.rebased2404.consume blur_x2413_crit_edge" ], [ %37634, %"produce blur_x2411" ]
  %37641 = add nsw i64 %37348, %.pre-phi3688
  %37642 = getelementptr inbounds i16, i16* %blur_x917, i64 %37641
  %37643 = bitcast i16* %37642 to <16 x i16>*
  %37644 = load <16 x i16>, <16 x i16>* %37643, align 2, !tbaa !399
  %37645 = getelementptr inbounds i16, i16* %37642, i64 16
  %37646 = bitcast i16* %37645 to <16 x i16>*
  %37647 = load <16 x i16>, <16 x i16>* %37646, align 2, !tbaa !399
  %37648 = add nsw i64 %37351, %.pre-phi3688
  %37649 = getelementptr inbounds i16, i16* %blur_x917, i64 %37648
  %37650 = bitcast i16* %37649 to <16 x i16>*
  %37651 = load <16 x i16>, <16 x i16>* %37650, align 2, !tbaa !399
  %37652 = getelementptr inbounds i16, i16* %37649, i64 16
  %37653 = bitcast i16* %37652 to <16 x i16>*
  %37654 = load <16 x i16>, <16 x i16>* %37653, align 2, !tbaa !399
  %37655 = add nsw i64 %37354, %.pre-phi3688
  %37656 = getelementptr inbounds i16, i16* %blur_x917, i64 %37655
  %37657 = bitcast i16* %37656 to <16 x i16>*
  %37658 = load <16 x i16>, <16 x i16>* %37657, align 2, !tbaa !399
  %37659 = getelementptr inbounds i16, i16* %37656, i64 16
  %37660 = bitcast i16* %37659 to <16 x i16>*
  %37661 = load <16 x i16>, <16 x i16>* %37660, align 2, !tbaa !399
  %37662 = add nsw i64 %37357, %.pre-phi3688
  %37663 = getelementptr inbounds i16, i16* %blur_x917, i64 %37662
  %37664 = bitcast i16* %37663 to <16 x i16>*
  %37665 = load <16 x i16>, <16 x i16>* %37664, align 2, !tbaa !399
  %37666 = getelementptr inbounds i16, i16* %37663, i64 16
  %37667 = bitcast i16* %37666 to <16 x i16>*
  %37668 = load <16 x i16>, <16 x i16>* %37667, align 2, !tbaa !399
  %37669 = add nsw i64 %37360, %.pre-phi3688
  %37670 = getelementptr inbounds i16, i16* %blur_x917, i64 %37669
  %37671 = bitcast i16* %37670 to <16 x i16>*
  %37672 = load <16 x i16>, <16 x i16>* %37671, align 2, !tbaa !399
  %37673 = getelementptr inbounds i16, i16* %37670, i64 16
  %37674 = bitcast i16* %37673 to <16 x i16>*
  %37675 = load <16 x i16>, <16 x i16>* %37674, align 2, !tbaa !399
  %37676 = add nsw i64 %37363, %.pre-phi3688
  %37677 = getelementptr inbounds i16, i16* %blur_x917, i64 %37676
  %37678 = bitcast i16* %37677 to <16 x i16>*
  %37679 = load <16 x i16>, <16 x i16>* %37678, align 2, !tbaa !399
  %37680 = getelementptr inbounds i16, i16* %37677, i64 16
  %37681 = bitcast i16* %37680 to <16 x i16>*
  %37682 = load <16 x i16>, <16 x i16>* %37681, align 2, !tbaa !399
  %37683 = add nsw i64 %37366, %.pre-phi3688
  %37684 = getelementptr inbounds i16, i16* %blur_x917, i64 %37683
  %37685 = bitcast i16* %37684 to <16 x i16>*
  %37686 = load <16 x i16>, <16 x i16>* %37685, align 2, !tbaa !399
  %37687 = getelementptr inbounds i16, i16* %37684, i64 16
  %37688 = bitcast i16* %37687 to <16 x i16>*
  %37689 = load <16 x i16>, <16 x i16>* %37688, align 2, !tbaa !399
  %37690 = add <16 x i16> %37651, %37644
  %37691 = add <16 x i16> %37690, %37658
  %37692 = add <16 x i16> %37691, %37665
  %37693 = add <16 x i16> %37692, %37672
  %37694 = add <16 x i16> %37693, %37679
  %37695 = add <16 x i16> %37694, %37686
  %37696 = add <16 x i16> %37654, %37647
  %37697 = add <16 x i16> %37696, %37661
  %37698 = add <16 x i16> %37697, %37668
  %37699 = add <16 x i16> %37698, %37675
  %37700 = add <16 x i16> %37699, %37682
  %37701 = add <16 x i16> %37700, %37689
  %37702 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37695, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37703 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37701, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37704 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37702, <16 x i16> %37695)
  %37705 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37703, <16 x i16> %37701)
  %37706 = shufflevector <16 x i16> %37704, <16 x i16> %37705, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37707 = lshr <32 x i16> %37706, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %37708 = shufflevector <32 x i16> %37707, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37709 = add nsw i64 %37370, %.pre-phi3688
  %37710 = getelementptr inbounds i16, i16* %264, i64 %37709
  %37711 = bitcast i16* %37710 to <16 x i16>*
  store <16 x i16> %37708, <16 x i16>* %37711, align 2, !tbaa !401
  %37712 = shufflevector <32 x i16> %37707, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37713 = getelementptr inbounds i16, i16* %37710, i64 16
  %37714 = bitcast i16* %37713 to <16 x i16>*
  store <16 x i16> %37712, <16 x i16>* %37714, align 2, !tbaa !401
  %indvars.iv.next3496 = add nuw nsw i64 %indvars.iv3495, 1
  %.not2650 = icmp eq i64 %indvars.iv.next3496, %386
  br i1 %.not2650, label %"end for blur_y.s0.x.x.rebased2405", label %"for blur_y.s0.x.x.rebased2404"

"for blur_y.s0.x.x.rebased2421":                  ; preds = %"for blur_y.s0.x.x.rebased2421.preheader", %"consume blur_x2431"
  %blur_y.s0.x.x.rebased2423 = phi i32 [ %37865, %"consume blur_x2431" ], [ 0, %"for blur_y.s0.x.x.rebased2421.preheader" ]
  %37715 = add nsw i32 %blur_y.s0.x.x.rebased2423, %t1670852
  %a670 = shl nsw i32 %37715, 5
  %37716 = icmp sgt i32 %a355, %a670
  %b676 = select i1 %37716, i32 %a670, i32 %a355
  %37717 = icmp slt i32 %37715, 1
  %37718 = icmp sgt i32 %202, %a670
  %37719 = or i1 %37717, %37718
  br i1 %37719, label %"produce blur_x2428", label %"consume blur_x2431"

"end for blur_y.s0.x.x.rebased2422":              ; preds = %"consume blur_x2431", %"end for blur_y.s0.x.x.rebased2405"
  br i1 %232, label %"produce blur_x2435", label %after_bb2432

"produce blur_x2428":                             ; preds = %"for blur_y.s0.x.x.rebased2421"
  %37720 = icmp slt i32 %b676, %202
  %blur_x.s0.x.v1.base.s2429 = select i1 %37720, i32 %b676, i32 %202
  %t12372430 = add nsw i32 %blur_x.s0.x.v1.base.s2429, %t22412401
  %37721 = sext i32 %t12372430 to i64
  %37722 = getelementptr inbounds i16, i16* %read_input860, i64 %37721
  %37723 = getelementptr inbounds i16, i16* %37722, i64 1
  %37724 = bitcast i16* %37723 to <16 x i16>*
  %37725 = load <16 x i16>, <16 x i16>* %37724, align 2, !tbaa !396
  %37726 = getelementptr inbounds i16, i16* %37722, i64 17
  %37727 = bitcast i16* %37726 to <16 x i16>*
  %37728 = load <16 x i16>, <16 x i16>* %37727, align 2, !tbaa !396
  %37729 = bitcast i16* %37722 to <16 x i16>*
  %37730 = load <16 x i16>, <16 x i16>* %37729, align 2, !tbaa !396
  %37731 = getelementptr inbounds i16, i16* %37722, i64 16
  %37732 = bitcast i16* %37731 to <16 x i16>*
  %37733 = load <16 x i16>, <16 x i16>* %37732, align 2, !tbaa !396
  %37734 = getelementptr inbounds i16, i16* %37722, i64 2
  %37735 = bitcast i16* %37734 to <16 x i16>*
  %37736 = load <16 x i16>, <16 x i16>* %37735, align 2, !tbaa !396
  %37737 = getelementptr inbounds i16, i16* %37722, i64 18
  %37738 = bitcast i16* %37737 to <16 x i16>*
  %37739 = load <16 x i16>, <16 x i16>* %37738, align 2, !tbaa !396
  %37740 = getelementptr inbounds i16, i16* %37722, i64 3
  %37741 = bitcast i16* %37740 to <16 x i16>*
  %37742 = load <16 x i16>, <16 x i16>* %37741, align 2, !tbaa !396
  %37743 = getelementptr inbounds i16, i16* %37722, i64 19
  %37744 = bitcast i16* %37743 to <16 x i16>*
  %37745 = load <16 x i16>, <16 x i16>* %37744, align 2, !tbaa !396
  %37746 = getelementptr inbounds i16, i16* %37722, i64 4
  %37747 = bitcast i16* %37746 to <16 x i16>*
  %37748 = load <16 x i16>, <16 x i16>* %37747, align 2, !tbaa !396
  %37749 = getelementptr inbounds i16, i16* %37722, i64 20
  %37750 = bitcast i16* %37749 to <16 x i16>*
  %37751 = load <16 x i16>, <16 x i16>* %37750, align 2, !tbaa !396
  %37752 = getelementptr inbounds i16, i16* %37722, i64 6
  %37753 = bitcast i16* %37752 to <16 x i16>*
  %37754 = load <16 x i16>, <16 x i16>* %37753, align 2, !tbaa !396
  %37755 = getelementptr inbounds i16, i16* %37722, i64 22
  %37756 = bitcast i16* %37755 to <16 x i16>*
  %37757 = load <16 x i16>, <16 x i16>* %37756, align 2, !tbaa !396
  %37758 = getelementptr inbounds i16, i16* %37722, i64 5
  %37759 = bitcast i16* %37758 to <16 x i16>*
  %37760 = load <16 x i16>, <16 x i16>* %37759, align 2, !tbaa !396
  %37761 = getelementptr inbounds i16, i16* %37722, i64 21
  %37762 = bitcast i16* %37761 to <16 x i16>*
  %37763 = load <16 x i16>, <16 x i16>* %37762, align 2, !tbaa !396
  %37764 = add <16 x i16> %37730, %37725
  %37765 = add <16 x i16> %37764, %37736
  %37766 = add <16 x i16> %37765, %37742
  %37767 = add <16 x i16> %37766, %37748
  %37768 = add <16 x i16> %37767, %37754
  %37769 = add <16 x i16> %37768, %37760
  %37770 = add <16 x i16> %37733, %37728
  %37771 = add <16 x i16> %37770, %37739
  %37772 = add <16 x i16> %37771, %37745
  %37773 = add <16 x i16> %37772, %37751
  %37774 = add <16 x i16> %37773, %37757
  %37775 = add <16 x i16> %37774, %37763
  %37776 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37769, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37777 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37775, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37778 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37776, <16 x i16> %37769)
  %37779 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37777, <16 x i16> %37775)
  %37780 = shufflevector <16 x i16> %37778, <16 x i16> %37779, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37781 = lshr <32 x i16> %37780, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %37782 = shufflevector <32 x i16> %37781, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37783 = sext i32 %blur_x.s0.x.v1.base.s2429 to i64
  %37784 = add nsw i64 %37783, %37546
  %37785 = getelementptr inbounds i16, i16* %blur_x917, i64 %37784
  %37786 = bitcast i16* %37785 to <16 x i16>*
  store <16 x i16> %37782, <16 x i16>* %37786, align 2, !tbaa !399
  %37787 = shufflevector <32 x i16> %37781, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37788 = getelementptr inbounds i16, i16* %37785, i64 16
  %37789 = bitcast i16* %37788 to <16 x i16>*
  store <16 x i16> %37787, <16 x i16>* %37789, align 2, !tbaa !399
  br label %"consume blur_x2431"

"consume blur_x2431":                             ; preds = %"for blur_y.s0.x.x.rebased2421", %"produce blur_x2428"
  %37790 = sext i32 %b676 to i64
  %37791 = add nsw i64 %37549, %37790
  %37792 = getelementptr inbounds i16, i16* %blur_x917, i64 %37791
  %37793 = bitcast i16* %37792 to <16 x i16>*
  %37794 = load <16 x i16>, <16 x i16>* %37793, align 2, !tbaa !399
  %37795 = getelementptr inbounds i16, i16* %37792, i64 16
  %37796 = bitcast i16* %37795 to <16 x i16>*
  %37797 = load <16 x i16>, <16 x i16>* %37796, align 2, !tbaa !399
  %37798 = add nsw i64 %37552, %37790
  %37799 = getelementptr inbounds i16, i16* %blur_x917, i64 %37798
  %37800 = bitcast i16* %37799 to <16 x i16>*
  %37801 = load <16 x i16>, <16 x i16>* %37800, align 2, !tbaa !399
  %37802 = getelementptr inbounds i16, i16* %37799, i64 16
  %37803 = bitcast i16* %37802 to <16 x i16>*
  %37804 = load <16 x i16>, <16 x i16>* %37803, align 2, !tbaa !399
  %37805 = add nsw i64 %37555, %37790
  %37806 = getelementptr inbounds i16, i16* %blur_x917, i64 %37805
  %37807 = bitcast i16* %37806 to <16 x i16>*
  %37808 = load <16 x i16>, <16 x i16>* %37807, align 2, !tbaa !399
  %37809 = getelementptr inbounds i16, i16* %37806, i64 16
  %37810 = bitcast i16* %37809 to <16 x i16>*
  %37811 = load <16 x i16>, <16 x i16>* %37810, align 2, !tbaa !399
  %37812 = add nsw i64 %37558, %37790
  %37813 = getelementptr inbounds i16, i16* %blur_x917, i64 %37812
  %37814 = bitcast i16* %37813 to <16 x i16>*
  %37815 = load <16 x i16>, <16 x i16>* %37814, align 2, !tbaa !399
  %37816 = getelementptr inbounds i16, i16* %37813, i64 16
  %37817 = bitcast i16* %37816 to <16 x i16>*
  %37818 = load <16 x i16>, <16 x i16>* %37817, align 2, !tbaa !399
  %37819 = add nsw i64 %37561, %37790
  %37820 = getelementptr inbounds i16, i16* %blur_x917, i64 %37819
  %37821 = bitcast i16* %37820 to <16 x i16>*
  %37822 = load <16 x i16>, <16 x i16>* %37821, align 2, !tbaa !399
  %37823 = getelementptr inbounds i16, i16* %37820, i64 16
  %37824 = bitcast i16* %37823 to <16 x i16>*
  %37825 = load <16 x i16>, <16 x i16>* %37824, align 2, !tbaa !399
  %37826 = add nsw i64 %37564, %37790
  %37827 = getelementptr inbounds i16, i16* %blur_x917, i64 %37826
  %37828 = bitcast i16* %37827 to <16 x i16>*
  %37829 = load <16 x i16>, <16 x i16>* %37828, align 2, !tbaa !399
  %37830 = getelementptr inbounds i16, i16* %37827, i64 16
  %37831 = bitcast i16* %37830 to <16 x i16>*
  %37832 = load <16 x i16>, <16 x i16>* %37831, align 2, !tbaa !399
  %37833 = add nsw i64 %37567, %37790
  %37834 = getelementptr inbounds i16, i16* %blur_x917, i64 %37833
  %37835 = bitcast i16* %37834 to <16 x i16>*
  %37836 = load <16 x i16>, <16 x i16>* %37835, align 2, !tbaa !399
  %37837 = getelementptr inbounds i16, i16* %37834, i64 16
  %37838 = bitcast i16* %37837 to <16 x i16>*
  %37839 = load <16 x i16>, <16 x i16>* %37838, align 2, !tbaa !399
  %37840 = add <16 x i16> %37801, %37794
  %37841 = add <16 x i16> %37840, %37808
  %37842 = add <16 x i16> %37841, %37815
  %37843 = add <16 x i16> %37842, %37822
  %37844 = add <16 x i16> %37843, %37829
  %37845 = add <16 x i16> %37844, %37836
  %37846 = add <16 x i16> %37804, %37797
  %37847 = add <16 x i16> %37846, %37811
  %37848 = add <16 x i16> %37847, %37818
  %37849 = add <16 x i16> %37848, %37825
  %37850 = add <16 x i16> %37849, %37832
  %37851 = add <16 x i16> %37850, %37839
  %37852 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37845, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37853 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37851, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37854 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37852, <16 x i16> %37845)
  %37855 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37853, <16 x i16> %37851)
  %37856 = shufflevector <16 x i16> %37854, <16 x i16> %37855, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37857 = lshr <32 x i16> %37856, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %37858 = shufflevector <32 x i16> %37857, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37859 = add nsw i64 %37571, %37790
  %37860 = getelementptr inbounds i16, i16* %264, i64 %37859
  %37861 = bitcast i16* %37860 to <16 x i16>*
  store <16 x i16> %37858, <16 x i16>* %37861, align 2, !tbaa !401
  %37862 = shufflevector <32 x i16> %37857, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37863 = getelementptr inbounds i16, i16* %37860, i64 16
  %37864 = bitcast i16* %37863 to <16 x i16>*
  store <16 x i16> %37862, <16 x i16>* %37864, align 2, !tbaa !401
  %37865 = add nuw nsw i32 %blur_y.s0.x.x.rebased2423, 1
  %.not2649 = icmp eq i32 %37865, %t1727937
  br i1 %.not2649, label %"end for blur_y.s0.x.x.rebased2422", label %"for blur_y.s0.x.x.rebased2421"

after_bb2432:                                     ; preds = %"end for blur_y.s0.x.x.rebased2422", %"produce blur_x2435"
  br i1 %298, label %"for blur_y.s0.x.x.rebased2447.preheader", label %"end for blur_y.s0.x.x.rebased2448", !prof !386

"for blur_y.s0.x.x.rebased2447.preheader":        ; preds = %after_bb2432
  %37866 = sext i32 %t17561074 to i64
  %37867 = zext i32 %.pre-phi3598 to i64
  %37868 = mul nsw i64 %37867, %314
  %37869 = sub nsw i64 %37868, %294
  %37870 = zext i32 %.pre-phi3628 to i64
  %37871 = mul nsw i64 %37870, %314
  %37872 = sub nsw i64 %37871, %294
  %37873 = zext i32 %.pre-phi3602 to i64
  %37874 = mul nsw i64 %37873, %314
  %37875 = sub nsw i64 %37874, %294
  %37876 = zext i32 %.pre-phi3606 to i64
  %37877 = mul nsw i64 %37876, %314
  %37878 = sub nsw i64 %37877, %294
  %37879 = zext i32 %.pre-phi3610 to i64
  %37880 = mul nsw i64 %37879, %314
  %37881 = sub nsw i64 %37880, %294
  %37882 = zext i32 %.pre-phi3618 to i64
  %37883 = mul nsw i64 %37882, %314
  %37884 = sub nsw i64 %37883, %294
  %37885 = zext i32 %.pre-phi3614 to i64
  %37886 = mul nsw i64 %37885, %314
  %37887 = sub nsw i64 %37886, %294
  %37888 = sext i32 %a367 to i64
  %37889 = add nsw i64 %37888, 31
  %37890 = mul nsw i64 %37889, %315
  %37891 = add nsw i64 %37890, %318
  br label %"for blur_y.s0.x.x.rebased2447"

"produce blur_x2435":                             ; preds = %"end for blur_y.s0.x.x.rebased2422"
  %37892 = getelementptr inbounds i16, i16* %read_input860, i64 %379
  %37893 = getelementptr inbounds i16, i16* %37892, i64 -31
  %37894 = bitcast i16* %37893 to <16 x i16>*
  %37895 = load <16 x i16>, <16 x i16>* %37894, align 2, !tbaa !396
  %37896 = getelementptr inbounds i16, i16* %37892, i64 -15
  %37897 = bitcast i16* %37896 to <16 x i16>*
  %37898 = load <16 x i16>, <16 x i16>* %37897, align 2, !tbaa !396
  %37899 = getelementptr inbounds i16, i16* %37892, i64 -32
  %37900 = bitcast i16* %37899 to <16 x i16>*
  %37901 = load <16 x i16>, <16 x i16>* %37900, align 2, !tbaa !396
  %37902 = getelementptr inbounds i16, i16* %37892, i64 -16
  %37903 = bitcast i16* %37902 to <16 x i16>*
  %37904 = load <16 x i16>, <16 x i16>* %37903, align 2, !tbaa !396
  %37905 = getelementptr inbounds i16, i16* %37892, i64 -30
  %37906 = bitcast i16* %37905 to <16 x i16>*
  %37907 = load <16 x i16>, <16 x i16>* %37906, align 2, !tbaa !396
  %37908 = getelementptr inbounds i16, i16* %37892, i64 -14
  %37909 = bitcast i16* %37908 to <16 x i16>*
  %37910 = load <16 x i16>, <16 x i16>* %37909, align 2, !tbaa !396
  %37911 = getelementptr inbounds i16, i16* %37892, i64 -29
  %37912 = bitcast i16* %37911 to <16 x i16>*
  %37913 = load <16 x i16>, <16 x i16>* %37912, align 2, !tbaa !396
  %37914 = getelementptr inbounds i16, i16* %37892, i64 -13
  %37915 = bitcast i16* %37914 to <16 x i16>*
  %37916 = load <16 x i16>, <16 x i16>* %37915, align 2, !tbaa !396
  %37917 = getelementptr inbounds i16, i16* %37892, i64 -28
  %37918 = bitcast i16* %37917 to <16 x i16>*
  %37919 = load <16 x i16>, <16 x i16>* %37918, align 2, !tbaa !396
  %37920 = getelementptr inbounds i16, i16* %37892, i64 -12
  %37921 = bitcast i16* %37920 to <16 x i16>*
  %37922 = load <16 x i16>, <16 x i16>* %37921, align 2, !tbaa !396
  %37923 = getelementptr inbounds i16, i16* %37892, i64 -26
  %37924 = bitcast i16* %37923 to <16 x i16>*
  %37925 = load <16 x i16>, <16 x i16>* %37924, align 2, !tbaa !396
  %37926 = getelementptr inbounds i16, i16* %37892, i64 -10
  %37927 = bitcast i16* %37926 to <16 x i16>*
  %37928 = load <16 x i16>, <16 x i16>* %37927, align 2, !tbaa !396
  %37929 = getelementptr inbounds i16, i16* %37892, i64 -27
  %37930 = bitcast i16* %37929 to <16 x i16>*
  %37931 = load <16 x i16>, <16 x i16>* %37930, align 2, !tbaa !396
  %37932 = getelementptr inbounds i16, i16* %37892, i64 -11
  %37933 = bitcast i16* %37932 to <16 x i16>*
  %37934 = load <16 x i16>, <16 x i16>* %37933, align 2, !tbaa !396
  %37935 = add <16 x i16> %37901, %37895
  %37936 = add <16 x i16> %37935, %37907
  %37937 = add <16 x i16> %37936, %37913
  %37938 = add <16 x i16> %37937, %37919
  %37939 = add <16 x i16> %37938, %37925
  %37940 = add <16 x i16> %37939, %37931
  %37941 = add <16 x i16> %37904, %37898
  %37942 = add <16 x i16> %37941, %37910
  %37943 = add <16 x i16> %37942, %37916
  %37944 = add <16 x i16> %37943, %37922
  %37945 = add <16 x i16> %37944, %37928
  %37946 = add <16 x i16> %37945, %37934
  %37947 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37940, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37948 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %37946, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %37949 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37947, <16 x i16> %37940)
  %37950 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %37948, <16 x i16> %37946)
  %37951 = shufflevector <16 x i16> %37949, <16 x i16> %37950, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37952 = lshr <32 x i16> %37951, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %37953 = shufflevector <32 x i16> %37952, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %37954 = zext i32 %.pre-phi3618 to i64
  %37955 = mul nsw i64 %295, %37954
  %37956 = add nsw i64 %297, %37955
  %37957 = getelementptr inbounds i16, i16* %blur_x917, i64 %37956
  %37958 = getelementptr inbounds i16, i16* %37957, i64 -32
  %37959 = bitcast i16* %37958 to <16 x i16>*
  store <16 x i16> %37953, <16 x i16>* %37959, align 2, !tbaa !399
  %37960 = shufflevector <32 x i16> %37952, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %37961 = getelementptr inbounds i16, i16* %37957, i64 -16
  %37962 = bitcast i16* %37961 to <16 x i16>*
  store <16 x i16> %37960, <16 x i16>* %37962, align 2, !tbaa !399
  %37963 = zext i32 %.pre-phi3598 to i64
  %37964 = mul nsw i64 %37963, %314
  %37965 = add nsw i64 %37964, %292
  %37966 = getelementptr inbounds i16, i16* %blur_x917, i64 %37965
  %37967 = getelementptr inbounds i16, i16* %37966, i64 -32
  %37968 = bitcast i16* %37967 to <16 x i16>*
  %37969 = load <16 x i16>, <16 x i16>* %37968, align 2, !tbaa !399
  %37970 = getelementptr inbounds i16, i16* %37966, i64 -16
  %37971 = bitcast i16* %37970 to <16 x i16>*
  %37972 = load <16 x i16>, <16 x i16>* %37971, align 2, !tbaa !399
  %37973 = zext i32 %.pre-phi3628 to i64
  %37974 = mul nsw i64 %37973, %314
  %37975 = add nsw i64 %37974, %292
  %37976 = getelementptr inbounds i16, i16* %blur_x917, i64 %37975
  %37977 = getelementptr inbounds i16, i16* %37976, i64 -32
  %37978 = bitcast i16* %37977 to <16 x i16>*
  %37979 = load <16 x i16>, <16 x i16>* %37978, align 2, !tbaa !399
  %37980 = getelementptr inbounds i16, i16* %37976, i64 -16
  %37981 = bitcast i16* %37980 to <16 x i16>*
  %37982 = load <16 x i16>, <16 x i16>* %37981, align 2, !tbaa !399
  %37983 = zext i32 %.pre-phi3602 to i64
  %37984 = mul nsw i64 %37983, %314
  %37985 = add nsw i64 %37984, %292
  %37986 = getelementptr inbounds i16, i16* %blur_x917, i64 %37985
  %37987 = getelementptr inbounds i16, i16* %37986, i64 -32
  %37988 = bitcast i16* %37987 to <16 x i16>*
  %37989 = load <16 x i16>, <16 x i16>* %37988, align 2, !tbaa !399
  %37990 = getelementptr inbounds i16, i16* %37986, i64 -16
  %37991 = bitcast i16* %37990 to <16 x i16>*
  %37992 = load <16 x i16>, <16 x i16>* %37991, align 2, !tbaa !399
  %37993 = zext i32 %.pre-phi3606 to i64
  %37994 = mul nsw i64 %37993, %314
  %37995 = add nsw i64 %37994, %292
  %37996 = getelementptr inbounds i16, i16* %blur_x917, i64 %37995
  %37997 = getelementptr inbounds i16, i16* %37996, i64 -32
  %37998 = bitcast i16* %37997 to <16 x i16>*
  %37999 = load <16 x i16>, <16 x i16>* %37998, align 2, !tbaa !399
  %38000 = getelementptr inbounds i16, i16* %37996, i64 -16
  %38001 = bitcast i16* %38000 to <16 x i16>*
  %38002 = load <16 x i16>, <16 x i16>* %38001, align 2, !tbaa !399
  %38003 = zext i32 %.pre-phi3610 to i64
  %38004 = mul nsw i64 %38003, %314
  %38005 = add nsw i64 %38004, %292
  %38006 = getelementptr inbounds i16, i16* %blur_x917, i64 %38005
  %38007 = getelementptr inbounds i16, i16* %38006, i64 -32
  %38008 = bitcast i16* %38007 to <16 x i16>*
  %38009 = load <16 x i16>, <16 x i16>* %38008, align 2, !tbaa !399
  %38010 = getelementptr inbounds i16, i16* %38006, i64 -16
  %38011 = bitcast i16* %38010 to <16 x i16>*
  %38012 = load <16 x i16>, <16 x i16>* %38011, align 2, !tbaa !399
  %38013 = mul nsw i64 %37954, %314
  %38014 = add nsw i64 %38013, %292
  %38015 = getelementptr inbounds i16, i16* %blur_x917, i64 %38014
  %38016 = getelementptr inbounds i16, i16* %38015, i64 -32
  %38017 = bitcast i16* %38016 to <16 x i16>*
  %38018 = load <16 x i16>, <16 x i16>* %38017, align 2, !tbaa !399
  %38019 = getelementptr inbounds i16, i16* %38015, i64 -16
  %38020 = bitcast i16* %38019 to <16 x i16>*
  %38021 = load <16 x i16>, <16 x i16>* %38020, align 2, !tbaa !399
  %38022 = zext i32 %.pre-phi3614 to i64
  %38023 = mul nsw i64 %38022, %314
  %38024 = add nsw i64 %38023, %292
  %38025 = getelementptr inbounds i16, i16* %blur_x917, i64 %38024
  %38026 = getelementptr inbounds i16, i16* %38025, i64 -32
  %38027 = bitcast i16* %38026 to <16 x i16>*
  %38028 = load <16 x i16>, <16 x i16>* %38027, align 2, !tbaa !399
  %38029 = getelementptr inbounds i16, i16* %38025, i64 -16
  %38030 = bitcast i16* %38029 to <16 x i16>*
  %38031 = load <16 x i16>, <16 x i16>* %38030, align 2, !tbaa !399
  %38032 = add <16 x i16> %37979, %37969
  %38033 = add <16 x i16> %38032, %37989
  %38034 = add <16 x i16> %38033, %37999
  %38035 = add <16 x i16> %38034, %38009
  %38036 = add <16 x i16> %38035, %38018
  %38037 = add <16 x i16> %38036, %38028
  %38038 = add <16 x i16> %37982, %37972
  %38039 = add <16 x i16> %38038, %37992
  %38040 = add <16 x i16> %38039, %38002
  %38041 = add <16 x i16> %38040, %38012
  %38042 = add <16 x i16> %38041, %38021
  %38043 = add <16 x i16> %38042, %38031
  %38044 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %38037, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %38045 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %38043, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %38046 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %38044, <16 x i16> %38037)
  %38047 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %38045, <16 x i16> %38043)
  %38048 = shufflevector <16 x i16> %38046, <16 x i16> %38047, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %38049 = lshr <32 x i16> %38048, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %38050 = shufflevector <32 x i16> %38049, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %38051 = sext i32 %a367 to i64
  %38052 = add nsw i64 %38051, 31
  %38053 = mul nsw i64 %38052, %315
  %38054 = add nsw i64 %317, %38053
  %38055 = getelementptr inbounds i16, i16* %264, i64 %38054
  %38056 = getelementptr inbounds i16, i16* %38055, i64 -32
  %38057 = bitcast i16* %38056 to <16 x i16>*
  store <16 x i16> %38050, <16 x i16>* %38057, align 2, !tbaa !401
  %38058 = shufflevector <32 x i16> %38049, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %38059 = getelementptr inbounds i16, i16* %38055, i64 -16
  %38060 = bitcast i16* %38059 to <16 x i16>*
  store <16 x i16> %38058, <16 x i16>* %38060, align 2, !tbaa !401
  br label %after_bb2432

"for blur_y.s0.x.x.rebased2447":                  ; preds = %"for blur_y.s0.x.x.rebased2447.preheader", %"consume blur_x2456"
  %indvars.iv3498 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2447.preheader" ], [ %indvars.iv.next3499, %"consume blur_x2456" ]
  %38061 = add nsw i64 %indvars.iv3498, %299
  %38062 = icmp slt i64 %38061, 1
  %38063 = trunc i64 %38061 to i32
  %38064 = shl nsw i32 %38063, 5
  %38065 = icmp sgt i32 %202, %38064
  %38066 = or i1 %38062, %38065
  br i1 %38066, label %"produce blur_x2454", label %"for blur_y.s0.x.x.rebased2447.consume blur_x2456_crit_edge"

"for blur_y.s0.x.x.rebased2447.consume blur_x2456_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2447"
  %.pre3689 = shl nsw i64 %38061, 5
  br label %"consume blur_x2456"

"end for blur_y.s0.x.x.rebased2448":              ; preds = %"consume blur_x2456", %after_bb2432
  br i1 %300, label %"for blur_y.s0.x.x.rebased2464.preheader", label %"end for blur_y.s0.x.x.rebased2465", !prof !386

"for blur_y.s0.x.x.rebased2464.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2448"
  %38067 = sext i32 %t17561074 to i64
  %38068 = zext i32 %.pre-phi3598 to i64
  %38069 = mul nsw i64 %38068, %314
  %38070 = sub nsw i64 %38069, %294
  %38071 = zext i32 %.pre-phi3628 to i64
  %38072 = mul nsw i64 %38071, %314
  %38073 = sub nsw i64 %38072, %294
  %38074 = zext i32 %.pre-phi3602 to i64
  %38075 = mul nsw i64 %38074, %314
  %38076 = sub nsw i64 %38075, %294
  %38077 = zext i32 %.pre-phi3606 to i64
  %38078 = mul nsw i64 %38077, %314
  %38079 = sub nsw i64 %38078, %294
  %38080 = zext i32 %.pre-phi3610 to i64
  %38081 = mul nsw i64 %38080, %314
  %38082 = sub nsw i64 %38081, %294
  %38083 = zext i32 %.pre-phi3618 to i64
  %38084 = mul nsw i64 %38083, %314
  %38085 = sub nsw i64 %38084, %294
  %38086 = zext i32 %.pre-phi3614 to i64
  %38087 = mul nsw i64 %38086, %314
  %38088 = sub nsw i64 %38087, %294
  %38089 = sext i32 %a367 to i64
  %38090 = add nsw i64 %38089, 31
  %38091 = mul nsw i64 %38090, %315
  %38092 = add nsw i64 %38091, %318
  br label %"for blur_y.s0.x.x.rebased2464"

"produce blur_x2454":                             ; preds = %"for blur_y.s0.x.x.rebased2447"
  %t12482455 = add nsw i32 %38064, %t22572444
  %38093 = sext i32 %t12482455 to i64
  %38094 = getelementptr inbounds i16, i16* %read_input860, i64 %38093
  %38095 = getelementptr inbounds i16, i16* %38094, i64 1
  %38096 = bitcast i16* %38095 to <16 x i16>*
  %38097 = load <16 x i16>, <16 x i16>* %38096, align 2, !tbaa !396
  %38098 = getelementptr inbounds i16, i16* %38094, i64 17
  %38099 = bitcast i16* %38098 to <16 x i16>*
  %38100 = load <16 x i16>, <16 x i16>* %38099, align 2, !tbaa !396
  %38101 = bitcast i16* %38094 to <16 x i16>*
  %38102 = load <16 x i16>, <16 x i16>* %38101, align 2, !tbaa !396
  %38103 = getelementptr inbounds i16, i16* %38094, i64 16
  %38104 = bitcast i16* %38103 to <16 x i16>*
  %38105 = load <16 x i16>, <16 x i16>* %38104, align 2, !tbaa !396
  %38106 = getelementptr inbounds i16, i16* %38094, i64 2
  %38107 = bitcast i16* %38106 to <16 x i16>*
  %38108 = load <16 x i16>, <16 x i16>* %38107, align 2, !tbaa !396
  %38109 = getelementptr inbounds i16, i16* %38094, i64 18
  %38110 = bitcast i16* %38109 to <16 x i16>*
  %38111 = load <16 x i16>, <16 x i16>* %38110, align 2, !tbaa !396
  %38112 = getelementptr inbounds i16, i16* %38094, i64 3
  %38113 = bitcast i16* %38112 to <16 x i16>*
  %38114 = load <16 x i16>, <16 x i16>* %38113, align 2, !tbaa !396
  %38115 = getelementptr inbounds i16, i16* %38094, i64 19
  %38116 = bitcast i16* %38115 to <16 x i16>*
  %38117 = load <16 x i16>, <16 x i16>* %38116, align 2, !tbaa !396
  %38118 = getelementptr inbounds i16, i16* %38094, i64 4
  %38119 = bitcast i16* %38118 to <16 x i16>*
  %38120 = load <16 x i16>, <16 x i16>* %38119, align 2, !tbaa !396
  %38121 = getelementptr inbounds i16, i16* %38094, i64 20
  %38122 = bitcast i16* %38121 to <16 x i16>*
  %38123 = load <16 x i16>, <16 x i16>* %38122, align 2, !tbaa !396
  %38124 = getelementptr inbounds i16, i16* %38094, i64 6
  %38125 = bitcast i16* %38124 to <16 x i16>*
  %38126 = load <16 x i16>, <16 x i16>* %38125, align 2, !tbaa !396
  %38127 = getelementptr inbounds i16, i16* %38094, i64 22
  %38128 = bitcast i16* %38127 to <16 x i16>*
  %38129 = load <16 x i16>, <16 x i16>* %38128, align 2, !tbaa !396
  %38130 = getelementptr inbounds i16, i16* %38094, i64 5
  %38131 = bitcast i16* %38130 to <16 x i16>*
  %38132 = load <16 x i16>, <16 x i16>* %38131, align 2, !tbaa !396
  %38133 = getelementptr inbounds i16, i16* %38094, i64 21
  %38134 = bitcast i16* %38133 to <16 x i16>*
  %38135 = load <16 x i16>, <16 x i16>* %38134, align 2, !tbaa !396
  %38136 = add <16 x i16> %38102, %38097
  %38137 = add <16 x i16> %38136, %38108
  %38138 = add <16 x i16> %38137, %38114
  %38139 = add <16 x i16> %38138, %38120
  %38140 = add <16 x i16> %38139, %38126
  %38141 = add <16 x i16> %38140, %38132
  %38142 = add <16 x i16> %38105, %38100
  %38143 = add <16 x i16> %38142, %38111
  %38144 = add <16 x i16> %38143, %38117
  %38145 = add <16 x i16> %38144, %38123
  %38146 = add <16 x i16> %38145, %38129
  %38147 = add <16 x i16> %38146, %38135
  %38148 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %38141, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %38149 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %38147, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %38150 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %38148, <16 x i16> %38141)
  %38151 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %38149, <16 x i16> %38147)
  %38152 = shufflevector <16 x i16> %38150, <16 x i16> %38151, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %38153 = lshr <32 x i16> %38152, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %38154 = shufflevector <32 x i16> %38153, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %38155 = shl nsw i64 %38061, 5
  %38156 = add nsw i64 %38155, %37866
  %38157 = getelementptr inbounds i16, i16* %blur_x917, i64 %38156
  %38158 = bitcast i16* %38157 to <16 x i16>*
  store <16 x i16> %38154, <16 x i16>* %38158, align 2, !tbaa !399
  %38159 = shufflevector <32 x i16> %38153, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %38160 = getelementptr inbounds i16, i16* %38157, i64 16
  %38161 = bitcast i16* %38160 to <16 x i16>*
  store <16 x i16> %38159, <16 x i16>* %38161, align 2, !tbaa !399
  br label %"consume blur_x2456"

"consume blur_x2456":                             ; preds = %"for blur_y.s0.x.x.rebased2447.consume blur_x2456_crit_edge", %"produce blur_x2454"
  %.pre-phi3690 = phi i64 [ %.pre3689, %"for blur_y.s0.x.x.rebased2447.consume blur_x2456_crit_edge" ], [ %38155, %"produce blur_x2454" ]
  %38162 = add nsw i64 %37869, %.pre-phi3690
  %38163 = getelementptr inbounds i16, i16* %blur_x917, i64 %38162
  %38164 = bitcast i16* %38163 to <16 x i16>*
  %38165 = load <16 x i16>, <16 x i16>* %38164, align 2, !tbaa !399
  %38166 = getelementptr inbounds i16, i16* %38163, i64 16
  %38167 = bitcast i16* %38166 to <16 x i16>*
  %38168 = load <16 x i16>, <16 x i16>* %38167, align 2, !tbaa !399
  %38169 = add nsw i64 %37872, %.pre-phi3690
  %38170 = getelementptr inbounds i16, i16* %blur_x917, i64 %38169
  %38171 = bitcast i16* %38170 to <16 x i16>*
  %38172 = load <16 x i16>, <16 x i16>* %38171, align 2, !tbaa !399
  %38173 = getelementptr inbounds i16, i16* %38170, i64 16
  %38174 = bitcast i16* %38173 to <16 x i16>*
  %38175 = load <16 x i16>, <16 x i16>* %38174, align 2, !tbaa !399
  %38176 = add nsw i64 %37875, %.pre-phi3690
  %38177 = getelementptr inbounds i16, i16* %blur_x917, i64 %38176
  %38178 = bitcast i16* %38177 to <16 x i16>*
  %38179 = load <16 x i16>, <16 x i16>* %38178, align 2, !tbaa !399
  %38180 = getelementptr inbounds i16, i16* %38177, i64 16
  %38181 = bitcast i16* %38180 to <16 x i16>*
  %38182 = load <16 x i16>, <16 x i16>* %38181, align 2, !tbaa !399
  %38183 = add nsw i64 %37878, %.pre-phi3690
  %38184 = getelementptr inbounds i16, i16* %blur_x917, i64 %38183
  %38185 = bitcast i16* %38184 to <16 x i16>*
  %38186 = load <16 x i16>, <16 x i16>* %38185, align 2, !tbaa !399
  %38187 = getelementptr inbounds i16, i16* %38184, i64 16
  %38188 = bitcast i16* %38187 to <16 x i16>*
  %38189 = load <16 x i16>, <16 x i16>* %38188, align 2, !tbaa !399
  %38190 = add nsw i64 %37881, %.pre-phi3690
  %38191 = getelementptr inbounds i16, i16* %blur_x917, i64 %38190
  %38192 = bitcast i16* %38191 to <16 x i16>*
  %38193 = load <16 x i16>, <16 x i16>* %38192, align 2, !tbaa !399
  %38194 = getelementptr inbounds i16, i16* %38191, i64 16
  %38195 = bitcast i16* %38194 to <16 x i16>*
  %38196 = load <16 x i16>, <16 x i16>* %38195, align 2, !tbaa !399
  %38197 = add nsw i64 %37884, %.pre-phi3690
  %38198 = getelementptr inbounds i16, i16* %blur_x917, i64 %38197
  %38199 = bitcast i16* %38198 to <16 x i16>*
  %38200 = load <16 x i16>, <16 x i16>* %38199, align 2, !tbaa !399
  %38201 = getelementptr inbounds i16, i16* %38198, i64 16
  %38202 = bitcast i16* %38201 to <16 x i16>*
  %38203 = load <16 x i16>, <16 x i16>* %38202, align 2, !tbaa !399
  %38204 = add nsw i64 %37887, %.pre-phi3690
  %38205 = getelementptr inbounds i16, i16* %blur_x917, i64 %38204
  %38206 = bitcast i16* %38205 to <16 x i16>*
  %38207 = load <16 x i16>, <16 x i16>* %38206, align 2, !tbaa !399
  %38208 = getelementptr inbounds i16, i16* %38205, i64 16
  %38209 = bitcast i16* %38208 to <16 x i16>*
  %38210 = load <16 x i16>, <16 x i16>* %38209, align 2, !tbaa !399
  %38211 = add <16 x i16> %38172, %38165
  %38212 = add <16 x i16> %38211, %38179
  %38213 = add <16 x i16> %38212, %38186
  %38214 = add <16 x i16> %38213, %38193
  %38215 = add <16 x i16> %38214, %38200
  %38216 = add <16 x i16> %38215, %38207
  %38217 = add <16 x i16> %38175, %38168
  %38218 = add <16 x i16> %38217, %38182
  %38219 = add <16 x i16> %38218, %38189
  %38220 = add <16 x i16> %38219, %38196
  %38221 = add <16 x i16> %38220, %38203
  %38222 = add <16 x i16> %38221, %38210
  %38223 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %38216, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %38224 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %38222, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %38225 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %38223, <16 x i16> %38216)
  %38226 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %38224, <16 x i16> %38222)
  %38227 = shufflevector <16 x i16> %38225, <16 x i16> %38226, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %38228 = lshr <32 x i16> %38227, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %38229 = shufflevector <32 x i16> %38228, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %38230 = add nsw i64 %37891, %.pre-phi3690
  %38231 = getelementptr inbounds i16, i16* %264, i64 %38230
  %38232 = bitcast i16* %38231 to <16 x i16>*
  store <16 x i16> %38229, <16 x i16>* %38232, align 2, !tbaa !401
  %38233 = shufflevector <32 x i16> %38228, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %38234 = getelementptr inbounds i16, i16* %38231, i64 16
  %38235 = bitcast i16* %38234 to <16 x i16>*
  store <16 x i16> %38233, <16 x i16>* %38235, align 2, !tbaa !401
  %indvars.iv.next3499 = add nuw nsw i64 %indvars.iv3498, 1
  %.not2648 = icmp eq i64 %indvars.iv.next3499, %386
  br i1 %.not2648, label %"end for blur_y.s0.x.x.rebased2448", label %"for blur_y.s0.x.x.rebased2447"

"for blur_y.s0.x.x.rebased2464":                  ; preds = %"for blur_y.s0.x.x.rebased2464.preheader", %"consume blur_x2474"
  %blur_y.s0.x.x.rebased2466 = phi i32 [ %38387, %"consume blur_x2474" ], [ 0, %"for blur_y.s0.x.x.rebased2464.preheader" ]
  %38236 = add nsw i32 %blur_y.s0.x.x.rebased2466, %t1670852
  %a677 = shl nsw i32 %38236, 5
  %38237 = icmp sgt i32 %a355, %a677
  %b683 = select i1 %38237, i32 %a677, i32 %a355
  %38238 = icmp slt i32 %38236, 1
  %38239 = icmp sgt i32 %202, %a677
  %38240 = or i1 %38238, %38239
  br i1 %38240, label %"produce blur_x2471", label %"consume blur_x2474"

"end for blur_y.s0.x.x.rebased2465":              ; preds = %"consume blur_x2474", %"end for blur_y.s0.x.x.rebased2448"
  %38241 = add nuw nsw i32 %blur_y.s0.y.y856, 1
  %.not2646 = icmp eq i32 %38241, %t1656853
  br i1 %.not2646, label %if.then.i2906.loopexit, label %"for blur_y.s0.y.y854"

"produce blur_x2471":                             ; preds = %"for blur_y.s0.x.x.rebased2464"
  %38242 = icmp slt i32 %b683, %202
  %blur_x.s0.x.v1.base.s2472 = select i1 %38242, i32 %b683, i32 %202
  %t12532473 = add nsw i32 %blur_x.s0.x.v1.base.s2472, %t22572444
  %38243 = sext i32 %t12532473 to i64
  %38244 = getelementptr inbounds i16, i16* %read_input860, i64 %38243
  %38245 = getelementptr inbounds i16, i16* %38244, i64 1
  %38246 = bitcast i16* %38245 to <16 x i16>*
  %38247 = load <16 x i16>, <16 x i16>* %38246, align 2, !tbaa !396
  %38248 = getelementptr inbounds i16, i16* %38244, i64 17
  %38249 = bitcast i16* %38248 to <16 x i16>*
  %38250 = load <16 x i16>, <16 x i16>* %38249, align 2, !tbaa !396
  %38251 = bitcast i16* %38244 to <16 x i16>*
  %38252 = load <16 x i16>, <16 x i16>* %38251, align 2, !tbaa !396
  %38253 = getelementptr inbounds i16, i16* %38244, i64 16
  %38254 = bitcast i16* %38253 to <16 x i16>*
  %38255 = load <16 x i16>, <16 x i16>* %38254, align 2, !tbaa !396
  %38256 = getelementptr inbounds i16, i16* %38244, i64 2
  %38257 = bitcast i16* %38256 to <16 x i16>*
  %38258 = load <16 x i16>, <16 x i16>* %38257, align 2, !tbaa !396
  %38259 = getelementptr inbounds i16, i16* %38244, i64 18
  %38260 = bitcast i16* %38259 to <16 x i16>*
  %38261 = load <16 x i16>, <16 x i16>* %38260, align 2, !tbaa !396
  %38262 = getelementptr inbounds i16, i16* %38244, i64 3
  %38263 = bitcast i16* %38262 to <16 x i16>*
  %38264 = load <16 x i16>, <16 x i16>* %38263, align 2, !tbaa !396
  %38265 = getelementptr inbounds i16, i16* %38244, i64 19
  %38266 = bitcast i16* %38265 to <16 x i16>*
  %38267 = load <16 x i16>, <16 x i16>* %38266, align 2, !tbaa !396
  %38268 = getelementptr inbounds i16, i16* %38244, i64 4
  %38269 = bitcast i16* %38268 to <16 x i16>*
  %38270 = load <16 x i16>, <16 x i16>* %38269, align 2, !tbaa !396
  %38271 = getelementptr inbounds i16, i16* %38244, i64 20
  %38272 = bitcast i16* %38271 to <16 x i16>*
  %38273 = load <16 x i16>, <16 x i16>* %38272, align 2, !tbaa !396
  %38274 = getelementptr inbounds i16, i16* %38244, i64 6
  %38275 = bitcast i16* %38274 to <16 x i16>*
  %38276 = load <16 x i16>, <16 x i16>* %38275, align 2, !tbaa !396
  %38277 = getelementptr inbounds i16, i16* %38244, i64 22
  %38278 = bitcast i16* %38277 to <16 x i16>*
  %38279 = load <16 x i16>, <16 x i16>* %38278, align 2, !tbaa !396
  %38280 = getelementptr inbounds i16, i16* %38244, i64 5
  %38281 = bitcast i16* %38280 to <16 x i16>*
  %38282 = load <16 x i16>, <16 x i16>* %38281, align 2, !tbaa !396
  %38283 = getelementptr inbounds i16, i16* %38244, i64 21
  %38284 = bitcast i16* %38283 to <16 x i16>*
  %38285 = load <16 x i16>, <16 x i16>* %38284, align 2, !tbaa !396
  %38286 = add <16 x i16> %38252, %38247
  %38287 = add <16 x i16> %38286, %38258
  %38288 = add <16 x i16> %38287, %38264
  %38289 = add <16 x i16> %38288, %38270
  %38290 = add <16 x i16> %38289, %38276
  %38291 = add <16 x i16> %38290, %38282
  %38292 = add <16 x i16> %38255, %38250
  %38293 = add <16 x i16> %38292, %38261
  %38294 = add <16 x i16> %38293, %38267
  %38295 = add <16 x i16> %38294, %38273
  %38296 = add <16 x i16> %38295, %38279
  %38297 = add <16 x i16> %38296, %38285
  %38298 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %38291, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %38299 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %38297, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %38300 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %38298, <16 x i16> %38291)
  %38301 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %38299, <16 x i16> %38297)
  %38302 = shufflevector <16 x i16> %38300, <16 x i16> %38301, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %38303 = lshr <32 x i16> %38302, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %38304 = shufflevector <32 x i16> %38303, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %38305 = sext i32 %blur_x.s0.x.v1.base.s2472 to i64
  %38306 = add nsw i64 %38305, %38067
  %38307 = getelementptr inbounds i16, i16* %blur_x917, i64 %38306
  %38308 = bitcast i16* %38307 to <16 x i16>*
  store <16 x i16> %38304, <16 x i16>* %38308, align 2, !tbaa !399
  %38309 = shufflevector <32 x i16> %38303, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %38310 = getelementptr inbounds i16, i16* %38307, i64 16
  %38311 = bitcast i16* %38310 to <16 x i16>*
  store <16 x i16> %38309, <16 x i16>* %38311, align 2, !tbaa !399
  br label %"consume blur_x2474"

"consume blur_x2474":                             ; preds = %"for blur_y.s0.x.x.rebased2464", %"produce blur_x2471"
  %38312 = sext i32 %b683 to i64
  %38313 = add nsw i64 %38070, %38312
  %38314 = getelementptr inbounds i16, i16* %blur_x917, i64 %38313
  %38315 = bitcast i16* %38314 to <16 x i16>*
  %38316 = load <16 x i16>, <16 x i16>* %38315, align 2, !tbaa !399
  %38317 = getelementptr inbounds i16, i16* %38314, i64 16
  %38318 = bitcast i16* %38317 to <16 x i16>*
  %38319 = load <16 x i16>, <16 x i16>* %38318, align 2, !tbaa !399
  %38320 = add nsw i64 %38073, %38312
  %38321 = getelementptr inbounds i16, i16* %blur_x917, i64 %38320
  %38322 = bitcast i16* %38321 to <16 x i16>*
  %38323 = load <16 x i16>, <16 x i16>* %38322, align 2, !tbaa !399
  %38324 = getelementptr inbounds i16, i16* %38321, i64 16
  %38325 = bitcast i16* %38324 to <16 x i16>*
  %38326 = load <16 x i16>, <16 x i16>* %38325, align 2, !tbaa !399
  %38327 = add nsw i64 %38076, %38312
  %38328 = getelementptr inbounds i16, i16* %blur_x917, i64 %38327
  %38329 = bitcast i16* %38328 to <16 x i16>*
  %38330 = load <16 x i16>, <16 x i16>* %38329, align 2, !tbaa !399
  %38331 = getelementptr inbounds i16, i16* %38328, i64 16
  %38332 = bitcast i16* %38331 to <16 x i16>*
  %38333 = load <16 x i16>, <16 x i16>* %38332, align 2, !tbaa !399
  %38334 = add nsw i64 %38079, %38312
  %38335 = getelementptr inbounds i16, i16* %blur_x917, i64 %38334
  %38336 = bitcast i16* %38335 to <16 x i16>*
  %38337 = load <16 x i16>, <16 x i16>* %38336, align 2, !tbaa !399
  %38338 = getelementptr inbounds i16, i16* %38335, i64 16
  %38339 = bitcast i16* %38338 to <16 x i16>*
  %38340 = load <16 x i16>, <16 x i16>* %38339, align 2, !tbaa !399
  %38341 = add nsw i64 %38082, %38312
  %38342 = getelementptr inbounds i16, i16* %blur_x917, i64 %38341
  %38343 = bitcast i16* %38342 to <16 x i16>*
  %38344 = load <16 x i16>, <16 x i16>* %38343, align 2, !tbaa !399
  %38345 = getelementptr inbounds i16, i16* %38342, i64 16
  %38346 = bitcast i16* %38345 to <16 x i16>*
  %38347 = load <16 x i16>, <16 x i16>* %38346, align 2, !tbaa !399
  %38348 = add nsw i64 %38085, %38312
  %38349 = getelementptr inbounds i16, i16* %blur_x917, i64 %38348
  %38350 = bitcast i16* %38349 to <16 x i16>*
  %38351 = load <16 x i16>, <16 x i16>* %38350, align 2, !tbaa !399
  %38352 = getelementptr inbounds i16, i16* %38349, i64 16
  %38353 = bitcast i16* %38352 to <16 x i16>*
  %38354 = load <16 x i16>, <16 x i16>* %38353, align 2, !tbaa !399
  %38355 = add nsw i64 %38088, %38312
  %38356 = getelementptr inbounds i16, i16* %blur_x917, i64 %38355
  %38357 = bitcast i16* %38356 to <16 x i16>*
  %38358 = load <16 x i16>, <16 x i16>* %38357, align 2, !tbaa !399
  %38359 = getelementptr inbounds i16, i16* %38356, i64 16
  %38360 = bitcast i16* %38359 to <16 x i16>*
  %38361 = load <16 x i16>, <16 x i16>* %38360, align 2, !tbaa !399
  %38362 = add <16 x i16> %38323, %38316
  %38363 = add <16 x i16> %38362, %38330
  %38364 = add <16 x i16> %38363, %38337
  %38365 = add <16 x i16> %38364, %38344
  %38366 = add <16 x i16> %38365, %38351
  %38367 = add <16 x i16> %38366, %38358
  %38368 = add <16 x i16> %38326, %38319
  %38369 = add <16 x i16> %38368, %38333
  %38370 = add <16 x i16> %38369, %38340
  %38371 = add <16 x i16> %38370, %38347
  %38372 = add <16 x i16> %38371, %38354
  %38373 = add <16 x i16> %38372, %38361
  %38374 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %38367, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %38375 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %38373, <16 x i16> <i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362, i16 9362>)
  %38376 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %38374, <16 x i16> %38367)
  %38377 = call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %38375, <16 x i16> %38373)
  %38378 = shufflevector <16 x i16> %38376, <16 x i16> %38377, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %38379 = lshr <32 x i16> %38378, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %38380 = shufflevector <32 x i16> %38379, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %38381 = add nsw i64 %38092, %38312
  %38382 = getelementptr inbounds i16, i16* %264, i64 %38381
  %38383 = bitcast i16* %38382 to <16 x i16>*
  store <16 x i16> %38380, <16 x i16>* %38383, align 2, !tbaa !401
  %38384 = shufflevector <32 x i16> %38379, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %38385 = getelementptr inbounds i16, i16* %38382, i64 16
  %38386 = bitcast i16* %38385 to <16 x i16>*
  store <16 x i16> %38384, <16 x i16>* %38386, align 2, !tbaa !401
  %38387 = add nuw nsw i32 %blur_y.s0.x.x.rebased2466, 1
  %.not2647 = icmp eq i32 %38387, %t1727937
  br i1 %.not2647, label %"end for blur_y.s0.x.x.rebased2465", label %"for blur_y.s0.x.x.rebased2464"
}

; Function Attrs: nounwind
define i32 @blur7x7_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 8
  %3 = getelementptr i8*, i8** %0, i64 1
  %4 = bitcast i8** %3 to %struct.halide_buffer_t**
  %5 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %4, align 8
  %6 = tail call i32 @blur7x7(%struct.halide_buffer_t* %2, %struct.halide_buffer_t* %5) #18
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @blur7x7_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @blur7x7_metadata_storage
}

; Function Attrs: nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32>, <8 x i32*>, i32 immarg, <8 x i1>) #13

; Function Attrs: nofree nosync nounwind readonly willreturn
declare <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*>, i32 immarg, <4 x i1>, <4 x i32>) #14

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i64 @llvm.vector.reduce.add.v4i64(<4 x i64>) #15

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nofree nosync nounwind willreturn writeonly }
attributes #14 = { nofree nosync nounwind readonly willreturn }
attributes #15 = { nofree nosync nounwind readnone willreturn }
attributes #16 = { nobuiltin nounwind "no-builtins" }
attributes #17 = { nobuiltin "no-builtins" }
attributes #18 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"cascadelake"}
!4 = !{i32 2, !"halide_mattrs", !"+fma,+f16c"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!12, !12, i64 0}
!15 = !{!16, !16, i64 0}
!16 = !{!"bool", !12, i64 0}
!17 = !{i8 0, i8 2}
!18 = !{!19, !19, i64 0}
!19 = !{!"long", !12, i64 0}
!20 = !{!21, !11, i64 0}
!21 = !{!"_ZTSN6Halide7Runtime8Internal4workE", !22, i64 0, !11, i64 56, !11, i64 64, !11, i64 72, !23, i64 80, !11, i64 88, !23, i64 96, !11, i64 104, !23, i64 112, !23, i64 116, !23, i64 120, !16, i64 124}
!22 = !{!"_ZTS22halide_parallel_task_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !23, i64 32, !23, i64 36, !23, i64 40, !23, i64 44, !16, i64 48}
!23 = !{!"int", !12, i64 0}
!24 = !{!21, !23, i64 36}
!25 = !{!21, !23, i64 40}
!26 = !{!21, !16, i64 48}
!27 = !{!21, !11, i64 24}
!28 = !{!21, !23, i64 32}
!29 = !{!21, !11, i64 8}
!30 = !{!21, !23, i64 44}
!31 = !{!21, !11, i64 16}
!32 = !{!21, !11, i64 56}
!33 = !{!21, !11, i64 104}
!34 = !{!21, !23, i64 116}
!35 = !{!21, !23, i64 112}
!36 = !{!21, !23, i64 120}
!37 = !{!21, !16, i64 124}
!38 = !{!21, !11, i64 72}
!39 = !{!21, !23, i64 80}
!40 = !{!21, !11, i64 88}
!41 = !{!42, !42, i64 0}
!42 = !{!"vtable pointer", !13, i64 0}
!43 = !{!44, !11, i64 8}
!44 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE", !11, i64 8}
!45 = !{!46, !16, i64 2121}
!46 = !{!"_ZTSN6Halide7Runtime8Internal12work_queue_tE", !47, i64 0, !23, i64 8, !23, i64 12, !11, i64 16, !23, i64 24, !23, i64 28, !23, i64 32, !48, i64 40, !48, i64 48, !48, i64 56, !23, i64 64, !23, i64 68, !12, i64 72, !16, i64 2120, !16, i64 2121, !23, i64 2124}
!47 = !{!"_ZTS12halide_mutex", !12, i64 0}
!48 = !{!"_ZTS11halide_cond", !12, i64 0}
!49 = distinct !{!49, !50}
!50 = !{!"llvm.loop.mustprogress"}
!51 = !{!46, !23, i64 8}
!52 = !{!46, !23, i64 24}
!53 = !{!46, !23, i64 2124}
!54 = !{!46, !23, i64 28}
!55 = distinct !{!55, !50}
!56 = !{!21, !23, i64 96}
!57 = !{!46, !11, i64 16}
!58 = !{!21, !11, i64 64}
!59 = !{!46, !23, i64 68}
!60 = !{!46, !23, i64 32}
!61 = distinct !{!61, !50}
!62 = distinct !{!62, !50}
!63 = !{!46, !16, i64 2120}
!64 = distinct !{!64, !50}
!65 = !{!66, !11, i64 0}
!66 = !{!"_ZTS26halide_semaphore_acquire_t", !11, i64 0, !23, i64 8}
!67 = !{!66, !23, i64 8}
!68 = distinct !{!68, !50}
!69 = !{!46, !23, i64 64}
!70 = distinct !{!70, !50}
!71 = distinct !{!71, !50}
!72 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 8, !10, i64 80, i64 4, !73, i64 88, i64 8, !10, i64 96, i64 4, !73, i64 104, i64 8, !10, i64 112, i64 4, !73, i64 116, i64 4, !73, i64 120, i64 4, !73, i64 124, i64 1, !15}
!73 = !{!23, !23, i64 0}
!74 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 28, i64 4, !73, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 1, !15, i64 48, i64 8, !10, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 4, !73, i64 80, i64 8, !10, i64 88, i64 4, !73, i64 96, i64 8, !10, i64 104, i64 4, !73, i64 108, i64 4, !73, i64 112, i64 4, !73, i64 116, i64 1, !15}
!75 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 32, i64 8, !10, i64 40, i64 4, !73, i64 48, i64 8, !10, i64 56, i64 4, !73, i64 60, i64 4, !73, i64 64, i64 4, !73, i64 68, i64 1, !15}
!76 = !{i64 0, i64 8, !10, i64 8, i64 4, !73, i64 12, i64 4, !73, i64 16, i64 4, !73, i64 20, i64 1, !15}
!77 = distinct !{!77, !50}
!78 = distinct !{!78, !50}
!79 = !{!80, !11, i64 144}
!80 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization10queue_dataE", !81, i64 0, !84, i64 136, !11, i64 144, !84, i64 152}
!81 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization13thread_parkerE", !82, i64 0, !83, i64 64, !16, i64 128}
!82 = !{!"_ZTS15pthread_mutex_t", !12, i64 0}
!83 = !{!"_ZTS14pthread_cond_t", !12, i64 0}
!84 = !{!"long long", !12, i64 0}
!85 = !{!86, !11, i64 16}
!86 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11hash_bucketE", !87, i64 0, !11, i64 8, !11, i64 16}
!87 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization9word_lockE", !84, i64 0}
!88 = distinct !{!88, !50}
!89 = !{!80, !84, i64 152}
!90 = !{!81, !16, i64 128}
!91 = distinct !{!91, !50}
!92 = !{!93, !11, i64 152}
!93 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20word_lock_queue_dataE", !81, i64 0, !11, i64 136, !11, i64 144, !11, i64 152}
!94 = !{!93, !11, i64 136}
!95 = !{!93, !11, i64 144}
!96 = distinct !{!96, !50}
!97 = distinct !{!97, !50}
!98 = distinct !{!98, !50}
!99 = !{!100, !11, i64 8}
!100 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE", !11, i64 8, !11, i64 16}
!101 = !{!100, !11, i64 16}
!102 = !{!103, !11, i64 8}
!103 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE", !11, i64 8, !11, i64 16}
!104 = !{!103, !11, i64 16}
!105 = !{!80, !84, i64 136}
!106 = !{!107, !16, i64 0}
!107 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization15validate_actionE", !16, i64 0, !84, i64 8}
!108 = !{!107, !84, i64 8}
!109 = !{!86, !11, i64 8}
!110 = !{!84, !84, i64 0}
!111 = !{!112, !11, i64 0}
!112 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11bucket_pairE", !11, i64 0, !11, i64 8}
!113 = distinct !{!113, !50}
!114 = !{!112, !11, i64 8}
!115 = !{!116, !11, i64 0}
!116 = !{!"_ZTSN6Halide7Runtime8Internal14spawned_threadE", !11, i64 0, !11, i64 8, !19, i64 16}
!117 = !{!116, !11, i64 8}
!118 = !{!116, !19, i64 16}
!119 = !{!22, !23, i64 40}
!120 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15}
!121 = distinct !{!121, !50}
!122 = distinct !{!122, !50}
!123 = distinct !{!123, !50}
!124 = !{!125, !11, i64 8}
!125 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE", !11, i64 8, !11, i64 16}
!126 = !{!125, !11, i64 16}
!127 = !{!128, !11, i64 0}
!128 = !{!"_ZTS18halide_mutex_array", !11, i64 0}
!129 = distinct !{!129, !50}
!130 = !{!131, !134, i64 34}
!131 = !{!"_ZTS20halide_trace_event_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !132, i64 32, !135, i64 36, !23, i64 40, !23, i64 44, !23, i64 48}
!132 = !{!"_ZTS13halide_type_t", !133, i64 0, !12, i64 1, !134, i64 2}
!133 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!134 = !{!"short", !12, i64 0}
!135 = !{!"_ZTS25halide_trace_event_code_t", !12, i64 0}
!136 = !{!132, !12, i64 1}
!137 = !{!131, !23, i64 48}
!138 = !{!131, !11, i64 0}
!139 = !{!131, !11, i64 24}
!140 = !{!141, !23, i64 0}
!141 = !{!"_ZTSN6Halide7Runtime8Internal23SharedExclusiveSpinLockE", !23, i64 0}
!142 = !{!143, !23, i64 4}
!143 = !{!"_ZTSN6Halide7Runtime8Internal11TraceBufferE", !141, i64 0, !23, i64 4, !23, i64 8, !12, i64 12}
!144 = !{!143, !23, i64 8}
!145 = distinct !{!145, !50}
!146 = !{!147, !23, i64 0}
!147 = !{!"_ZTS21halide_trace_packet_t", !23, i64 0, !23, i64 4, !132, i64 8, !135, i64 12, !23, i64 16, !23, i64 20, !23, i64 24}
!148 = !{!147, !23, i64 4}
!149 = !{!131, !11, i64 16}
!150 = !{!131, !11, i64 8}
!151 = !{!147, !23, i64 24}
!152 = !{!147, !134, i64 10}
!153 = distinct !{!153, !50}
!154 = !{!131, !135, i64 36}
!155 = !{!131, !12, i64 33}
!156 = distinct !{!156, !50}
!157 = !{!131, !23, i64 44}
!158 = distinct !{!158, !50, !159}
!159 = !{!"llvm.loop.peeled.count", i32 1}
!160 = !{!131, !133, i64 32}
!161 = !{!134, !134, i64 0}
!162 = !{!163, !163, i64 0}
!163 = !{!"float", !12, i64 0}
!164 = !{!165, !165, i64 0}
!165 = !{!"double", !12, i64 0}
!166 = distinct !{!166, !50, !159}
!167 = distinct !{!167, !50}
!168 = !{!131, !23, i64 40}
!169 = distinct !{!169, !50}
!170 = distinct !{!170, !50}
!171 = distinct !{!171, !50}
!172 = !{!173, !11, i64 16}
!173 = !{!"_ZTS15halide_buffer_t", !84, i64 0, !11, i64 8, !11, i64 16, !84, i64 24, !132, i64 32, !23, i64 36, !11, i64 40, !11, i64 48}
!174 = !{!173, !84, i64 0}
!175 = !{!173, !23, i64 36}
!176 = !{!173, !11, i64 40}
!177 = !{i64 0, i64 4, !73, i64 4, i64 4, !73, i64 8, i64 4, !73, i64 12, i64 4, !73}
!178 = !{!179, !23, i64 4}
!179 = !{!"_ZTS18halide_dimension_t", !23, i64 0, !23, i64 4, !23, i64 8, !23, i64 12}
!180 = distinct !{!180, !50}
!181 = !{!179, !23, i64 0}
!182 = !{!179, !23, i64 8}
!183 = distinct !{!183, !50, !184}
!184 = !{!"llvm.loop.isvectorized", i32 1}
!185 = distinct !{!185, !186}
!186 = !{!"llvm.loop.unroll.disable"}
!187 = distinct !{!187, !50, !188, !184}
!188 = !{!"llvm.loop.unroll.runtime.disable"}
!189 = !{!190, !134, i64 0}
!190 = !{!"_ZTSN6Halide7Runtime8Internal18halide_tiff_headerE", !134, i64 0, !134, i64 2, !23, i64 4, !134, i64 8, !12, i64 10, !23, i64 190, !12, i64 194, !12, i64 202}
!191 = !{!190, !134, i64 2}
!192 = !{!190, !23, i64 4}
!193 = !{!190, !134, i64 8}
!194 = !{!195, !134, i64 0}
!195 = !{!"_ZTSN6Halide7Runtime8Internal8tiff_tagE", !134, i64 0, !134, i64 2, !23, i64 4, !12, i64 8}
!196 = !{!195, !134, i64 2}
!197 = !{!195, !23, i64 4}
!198 = distinct !{!198, !50}
!199 = distinct !{!199, !50}
!200 = distinct !{!200, !50}
!201 = distinct !{!201, !50}
!202 = distinct !{!202, !50}
!203 = !{!204}
!204 = distinct !{!204, !205}
!205 = distinct !{!205, !"LVerDomain"}
!206 = !{!207}
!207 = distinct !{!207, !205}
!208 = distinct !{!208, !50, !184}
!209 = distinct !{!209, !186}
!210 = distinct !{!210, !186}
!211 = distinct !{!211, !50, !184}
!212 = distinct !{!212, !186}
!213 = distinct !{!213, !50, !184}
!214 = distinct !{!214, !50, !184}
!215 = distinct !{!215, !50, !188, !184}
!216 = distinct !{!216, !50, !184}
!217 = distinct !{!217, !50, !188, !184}
!218 = distinct !{!218, !50, !184}
!219 = distinct !{!219, !50, !188, !184}
!220 = distinct !{!220, !50}
!221 = distinct !{!221, !50, !184}
!222 = distinct !{!222, !50, !188, !184}
!223 = distinct !{!223, !50}
!224 = distinct !{!224, !50}
!225 = distinct !{!225, !50}
!226 = distinct !{!226, !50}
!227 = !{!228, !11, i64 0}
!228 = !{!"_ZTSN6Halide7Runtime8Internal10CacheEntryE", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !19, i64 32, !11, i64 40, !23, i64 48, !23, i64 52, !23, i64 56, !23, i64 60, !11, i64 64, !11, i64 72, !84, i64 80, !16, i64 88}
!229 = distinct !{!229, !50}
!230 = !{!228, !23, i64 56}
!231 = !{!228, !11, i64 24}
!232 = !{!228, !11, i64 72}
!233 = distinct !{!233, !50}
!234 = distinct !{!234, !50}
!235 = !{!236, !84, i64 0}
!236 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !84, i64 0, !84, i64 8, !84, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !84, i64 408}
!237 = !{!236, !84, i64 8}
!238 = !{!236, !84, i64 408}
!239 = distinct !{!239, !50}
!240 = !{!236, !84, i64 16}
!241 = distinct !{!241, !50, !184}
!242 = distinct !{!242, !50, !188, !184}
!243 = distinct !{!243, !50}
!244 = distinct !{!244, !186}
!245 = distinct !{!245, !50}
!246 = distinct !{!246, !50}
!247 = distinct !{!247, !50}
!248 = !{i64 0, i64 8, !110, i64 8, i64 8, !110, i64 16, i64 8, !110, i64 24, i64 128, !14, i64 152, i64 128, !14, i64 280, i64 128, !14, i64 408, i64 8, !110}
!249 = distinct !{!249, !50}
!250 = !{!179, !23, i64 12}
!251 = !{!228, !11, i64 16}
!252 = !{!228, !19, i64 32}
!253 = !{!228, !23, i64 48}
!254 = !{!228, !23, i64 52}
!255 = !{!228, !23, i64 60}
!256 = !{!228, !11, i64 64}
!257 = !{!228, !11, i64 40}
!258 = distinct !{!258, !50}
!259 = distinct !{!259, !50}
!260 = distinct !{!260, !50}
!261 = !{!228, !16, i64 88}
!262 = !{!228, !84, i64 80}
!263 = !{i64 0, i64 8, !110, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !110, i64 32, i64 1, !264, i64 33, i64 1, !14, i64 34, i64 2, !161, i64 36, i64 4, !73, i64 40, i64 8, !10, i64 48, i64 8, !10}
!264 = !{!133, !133, i64 0}
!265 = distinct !{!265, !50}
!266 = distinct !{!266, !186}
!267 = distinct !{!267, !50}
!268 = !{!228, !11, i64 8}
!269 = distinct !{!269, !50}
!270 = distinct !{!270, !50, !184}
!271 = distinct !{!271, !50, !188, !184}
!272 = distinct !{!272, !50, !184}
!273 = distinct !{!273, !50, !188, !184}
!274 = distinct !{!274, !50}
!275 = distinct !{!275, !50}
!276 = distinct !{!276, !50}
!277 = distinct !{!277, !50}
!278 = distinct !{!278, !50}
!279 = distinct !{!279, !50, !184}
!280 = distinct !{!280, !50, !188, !184}
!281 = distinct !{!281, !50, !184}
!282 = distinct !{!282, !50, !188, !184}
!283 = distinct !{!283, !50}
!284 = !{!285, !23, i64 8}
!285 = !{!"_ZTSN6Halide7Runtime8Internal16CacheBlockHeaderE", !11, i64 0, !23, i64 8}
!286 = !{!285, !11, i64 0}
!287 = distinct !{!287, !50}
!288 = distinct !{!288, !186}
!289 = distinct !{!289, !50}
!290 = distinct !{!290, !50}
!291 = distinct !{!291, !50}
!292 = distinct !{!292, !50, !184}
!293 = distinct !{!293, !50, !188, !184}
!294 = distinct !{!294, !50, !184}
!295 = distinct !{!295, !50, !188, !184}
!296 = distinct !{!296, !50}
!297 = distinct !{!297, !50}
!298 = distinct !{!298, !50}
!299 = distinct !{!299, !50}
!300 = distinct !{!300, !50}
!301 = distinct !{!301, !50}
!302 = distinct !{!302, !50}
!303 = distinct !{!303, !50}
!304 = distinct !{!304, !50}
!305 = !{!132, !133, i64 0}
!306 = !{!132, !134, i64 2}
!307 = !{!173, !11, i64 8}
!308 = !{!173, !84, i64 24}
!309 = distinct !{!309, !50}
!310 = !{!311, !11, i64 0}
!311 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 8}
!312 = distinct !{!312, !50}
!313 = !{!311, !11, i64 8}
!314 = !{!315, !11, i64 120}
!315 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!316 = !{!317, !11, i64 48}
!317 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!318 = !{!317, !11, i64 40}
!319 = !{!317, !11, i64 56}
!320 = !{!317, !11, i64 0}
!321 = !{!317, !11, i64 16}
!322 = !{!317, !11, i64 8}
!323 = !{!317, !11, i64 32}
!324 = !{!317, !11, i64 24}
!325 = !{!317, !11, i64 64}
!326 = !{!317, !11, i64 72}
!327 = distinct !{!327, !50, !184}
!328 = distinct !{!328, !50, !188, !184}
!329 = distinct !{!329, !50, !184}
!330 = distinct !{!330, !50, !188, !184}
!331 = !{!317, !11, i64 112}
!332 = !{!317, !11, i64 120}
!333 = !{!317, !11, i64 80}
!334 = !{!317, !11, i64 88}
!335 = !{!317, !11, i64 96}
!336 = !{!317, !11, i64 104}
!337 = !{i32 22, i32 33}
!338 = !{!339, !11, i64 40}
!339 = !{!"_ZTS21halide_profiler_state", !47, i64 0, !23, i64 8, !23, i64 12, !23, i64 16, !23, i64 20, !11, i64 24, !11, i64 32, !11, i64 40}
!340 = !{!339, !23, i64 16}
!341 = !{!342, !84, i64 0}
!342 = !{!"_ZTS30halide_profiler_pipeline_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !23, i64 72, !23, i64 76, !23, i64 80, !23, i64 84, !23, i64 88}
!343 = !{!342, !23, i64 80}
!344 = !{!342, !84, i64 32}
!345 = !{!342, !84, i64 40}
!346 = !{!342, !11, i64 48}
!347 = !{!342, !23, i64 84}
!348 = !{!342, !23, i64 88}
!349 = !{!342, !84, i64 16}
!350 = !{!342, !84, i64 24}
!351 = !{!342, !23, i64 72}
!352 = !{!342, !11, i64 56}
!353 = distinct !{!353, !50}
!354 = !{!355, !84, i64 32}
!355 = !{!"_ZTS26halide_profiler_func_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !84, i64 48, !11, i64 56, !23, i64 64}
!356 = !{!355, !84, i64 0}
!357 = !{!355, !11, i64 56}
!358 = distinct !{!358, !50}
!359 = distinct !{!359, !50}
!360 = distinct !{!360, !50}
!361 = !{!355, !84, i64 40}
!362 = !{!355, !84, i64 48}
!363 = distinct !{!363, !50}
!364 = !{!355, !84, i64 16}
!365 = distinct !{!365, !50}
!366 = !{!355, !23, i64 64}
!367 = distinct !{!367, !50}
!368 = !{!355, !84, i64 24}
!369 = distinct !{!369, !50}
!370 = distinct !{!370, !50}
!371 = !{!339, !11, i64 24}
!372 = !{!342, !11, i64 64}
!373 = distinct !{!373, !50}
!374 = !{!339, !23, i64 12}
!375 = distinct !{!375, !50}
!376 = !{!342, !23, i64 76}
!377 = distinct !{!377, !50}
!378 = distinct !{!378, !50}
!379 = !{!339, !11, i64 32}
!380 = !{!339, !23, i64 20}
!381 = !{!339, !23, i64 8}
!382 = distinct !{!382, !50}
!383 = distinct !{!383, !50}
!384 = distinct !{!384, !50}
!385 = distinct !{!385, !50}
!386 = !{!"branch_weights", i32 1073741824, i32 0}
!387 = !{!388, !19, i64 8}
!388 = !{!"_ZTS25halide_pseudostack_slot_t", !11, i64 0, !19, i64 8, !19, i64 16}
!389 = !{!388, !11, i64 0}
!390 = !{!"branch_weights", i32 1, i32 2000}
!391 = !{!388, !19, i64 16}
!392 = !{!"branch_weights", i32 0, i32 1073741824}
!393 = !{!394, !394, i64 0}
!394 = !{!"input", !395, i64 0}
!395 = !{!"Halide buffer"}
!396 = !{!397, !397, i64 0}
!397 = !{!"read_input", !395, i64 0}
!398 = distinct !{!398, !186}
!399 = !{!400, !400, i64 0}
!400 = !{!"blur_x", !395, i64 0}
!401 = !{!402, !402, i64 0}
!402 = !{!"blur_y", !395, i64 0}
!403 = distinct !{!403, !186}
