; ModuleID = 'blur5x5'
source_filename = "/home/muchenx2/Hydride/frontends/halide/src/runtime/posix_allocator.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64--linux-gnu"

%struct.timespec = type { i64, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::hash_table" = type { [1024 x %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"] }
%"struct.Halide::Runtime::Internal::Synchronization::hash_bucket" = type { %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* }
%"class.Halide::Runtime::Internal::Synchronization::word_lock" = type { i64 }
%"struct.Halide::Runtime::Internal::Synchronization::queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", i64, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::thread_parker" = type <{ %struct.pthread_mutex_t, %struct.pthread_mutex_t, i8, [7 x i8] }>
%struct.pthread_mutex_t = type { [8 x i64] }
%"struct.Halide::Runtime::Internal::work_queue_t" = type { %struct.halide_mutex, i32, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i32, i32, [4 x i8], %struct.halide_mutex, %struct.halide_mutex, %struct.halide_mutex, i32, i32, [256 x %struct.halide_thread*], i8, i8, i32 }
%"struct.Halide::Runtime::Internal::work" = type { %struct.halide_parallel_task_t, i32 (i8*, i32, i8*)*, %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"*, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i8*, i32, i32, i32, i8 }
%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8, [7 x i8] }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32, [4 x i8] }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex = type { [1 x i64] }
%struct.halide_thread = type opaque
%"class.Halide::Runtime::Internal::TraceBuffer" = type { %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock", i32, i32, [1048576 x i8] }
%"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" = type { i32 }
%struct.halide_trace_event_t = type <{ i8*, i8*, i32*, i8*, %struct.halide_type_t, i32, i32, i32, i32, [4 x i8] }>
%struct.halide_type_t = type { i8, i8, i16 }
%"struct.Halide::Runtime::Internal::CacheEntry" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, i8*, i64, i8*, i32, i32, i32, i32, %struct.halide_dimension_t*, %struct.halide_buffer_t*, i64, i8, [7 x i8] }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_profiler_state = type { %struct.halide_mutex, i32, i32, i32, i32, %struct.halide_profiler_pipeline_stats*, void (i32*, i32*)*, %struct.halide_thread* }
%struct.halide_profiler_pipeline_stats = type { i64, i64, i64, i64, i64, i64, i8*, %struct.halide_profiler_func_stats*, i8*, i32, i32, i32, i32, i32, [4 x i8] }
%struct.halide_profiler_func_stats = type { i64, i64, i64, i64, i64, i64, i64, i8*, i32, [4 x i8] }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_scalar_value_t = type { %union.anon.28 }
%union.anon.28 = type { double }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64* }
%"struct.Halide::Runtime::Internal::Synchronization::parking_control" = type { i32 (...)** }
%"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* }
%"struct.Halide::Runtime::Internal::Synchronization::validate_action" = type { i8, [7 x i8], i64 }
%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"* }
%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair" = type { %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* }
%"struct.Halide::Runtime::Internal::spawned_thread" = type { void (i8*)*, i8*, i64 }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%"struct.Halide::Runtime::Internal::halide_tiff_header" = type <{ i16, i16, i32, i16, [15 x %"struct.Halide::Runtime::Internal::tiff_tag"], i32, [2 x i32], [2 x i32] }>
%"struct.Halide::Runtime::Internal::tiff_tag" = type { i16, i16, i32, %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" }
%"struct.Halide::Runtime::Internal::CacheBlockHeader" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, i32, [4 x i8] }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }
%struct.halide_pseudostack_slot_t = type { i8*, i64, i64 }

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = comdat any

@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i64)* @halide_default_malloc, align 8
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 8
@_ZN6Halide7Runtime8Internal13error_handlerE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_error, align 8
@.str = private unnamed_addr constant [8 x i8] c"Error: \00", align 1
@_ZN6Halide7Runtime8Internal12custom_printE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_print, align 8
@halide_reference_clock_inited = linkonce local_unnamed_addr global i8 0, align 1
@halide_reference_clock = linkonce global %struct.timespec zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal15Synchronization5tableE = linkonce global %"struct.Halide::Runtime::Internal::Synchronization::hash_table" zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal10work_queueE = linkonce global %"struct.Halide::Runtime::Internal::work_queue_t" { %struct.halide_mutex zeroinitializer, i32 0, i32 0, %"struct.Halide::Runtime::Internal::work"* null, i32 0, i32 0, i32 0, [4 x i8] undef, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, i32 0, i32 0, [256 x %struct.halide_thread*] zeroinitializer, i8 0, i8 0, i32 0 }, align 8
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 8
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 8
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 8
@_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5 = private unnamed_addr constant [130 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:386 halide_abort_if_false() failed: next != nullptr\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5.6 = private unnamed_addr constant [124 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:994 halide_abort_if_false() failed: val & 0x1\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.6 = private unnamed_addr constant [186 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:155 halide_abort_if_false() failed: bytes == limit && \22Logic error in thread pool work queue initialization.\\n\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [263 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:527 halide_abort_if_false() failed: (min_threads <= ((task_parent->task.min_threads * task_parent->active_workers) - task_parent->threads_reserved)) && \22Logic error: thread over commit.\\n\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"HL_NUM_THREADS\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"HL_NUMTHREADS\00", align 1
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 8
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 8
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 8
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 8
@llvm.global_dtors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @halide_thread_pool_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_trace_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_cache_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_profiler_shutdown, i8* null }]
@_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.4 = private unnamed_addr constant [38 x i8] c"halide_set_num_threads: must be >= 0.\00", align 1
@_ZN6Halide7Runtime8Internal17custom_get_symbolE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_get_symbol, align 8
@_ZN6Halide7Runtime8Internal19custom_load_libraryE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_load_library, align 8
@_ZN6Halide7Runtime8Internal25custom_get_library_symbolE = linkonce local_unnamed_addr global i8* (i8*, i8*)* @halide_default_get_library_symbol, align 8
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@_ZN6Halide7Runtime8Internal19halide_trace_bufferE = linkonce local_unnamed_addr global %"class.Halide::Runtime::Internal::TraceBuffer"* null, align 8
@_ZN6Halide7Runtime8Internal17halide_trace_fileE = linkonce local_unnamed_addr global i32 -1, align 4
@_ZN6Halide7Runtime8Internal22halide_trace_file_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE = linkonce local_unnamed_addr global i8* null, align 8
@_ZN6Halide7Runtime8Internal19halide_custom_traceE = linkonce local_unnamed_addr global i32 (i8*, %struct.halide_trace_event_t*)* @halide_default_trace, align 8
@_ZZ20halide_default_traceE3ids = internal global i32 1, align 4
@.str.32 = private unnamed_addr constant [144 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:115 halide_abort_if_false() failed: success && \22Could not write to trace file\22\0A\00", align 1
@.str.31 = private unnamed_addr constant [120 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:87 halide_abort_if_false() failed: size <= buffer_size\0A\00", align 1
@.str.1.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.11 = private unnamed_addr constant [140 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:218 halide_abort_if_false() failed: print_bits <= 64 && \22Tracing bad type\22\0A\00", align 1
@__const.halide_default_trace.event_types = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.17, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0)], align 8
@.str.17 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c">)\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c">, <\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c" = <\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.24 = private unnamed_addr constant [142 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:287 halide_abort_if_false() failed: print_bits >= 16 && \22Tracing a bad type\22\0A\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c" tag = \22\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.3.12 = private unnamed_addr constant [5 x i8] c"Load\00", align 1
@.str.4.13 = private unnamed_addr constant [6 x i8] c"Store\00", align 1
@.str.5.14 = private unnamed_addr constant [18 x i8] c"Begin realization\00", align 1
@.str.6.15 = private unnamed_addr constant [16 x i8] c"End realization\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"Produce\00", align 1
@.str.8.16 = private unnamed_addr constant [12 x i8] c"End produce\00", align 1
@.str.9.17 = private unnamed_addr constant [8 x i8] c"Consume\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"End consume\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Begin pipeline\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"End pipeline\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Tag\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"HL_TRACE_FILE\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.30 = private unnamed_addr constant [139 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:351 halide_abort_if_false() failed: file && \22Failed to open trace file\\n\22\0A\00", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE = linkonce local_unnamed_addr global [10 x i16] [i16 3, i16 3, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2], align 2
@_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\06\09\08\0B\0A\0D\0C\0F\0E", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\09\02\01\04\03\06\05\0D\0C", align 1
@.str.34 = private unnamed_addr constant [51 x i8] c"Bounds query buffer passed to halide_debug_to_file\00", align 1
@.str.1.35 = private unnamed_addr constant [59 x i8] c"Can't debug_to_file a Func with more than four dimensions\0A\00", align 1
@.str.2.36 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.3.37 = private unnamed_addr constant [6 x i8] c".tiff\00", align 1
@.str.4.38 = private unnamed_addr constant [5 x i8] c".tif\00", align 1
@.str.5.39 = private unnamed_addr constant [5 x i8] c".mat\00", align 1
@__const.halide_debug_to_file.header = private unnamed_addr constant [129 x i8] c"MATLAB 5.0 MAT-file, produced by Halide                                                                                     \00\01IM\00", align 1
@.str.6.40 = private unnamed_addr constant [53 x i8] c"Can't debug_to_file to a .mat file greater than 4GB\0A\00", align 1
@_ZN6Halide7Runtime8Internal16memoization_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal13cache_entriesE = linkonce global [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*] zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal18most_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal19least_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal14max_cache_sizeE = linkonce local_unnamed_addr global i64 1048576, align 8
@_ZN6Halide7Runtime8Internal18current_cache_sizeE = linkonce local_unnamed_addr global i64 0, align 8
@.str.2.42 = private unnamed_addr constant [126 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:284 halide_abort_if_false() failed: prev_hash_entry != nullptr\0A\00", align 1
@.str.3.43 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:373 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.4.44 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:377 halide_abort_if_false() failed: least_recently_used == entry\0A\00", align 1
@.str.5.45 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:380 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.9.46 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:472 halide_abort_if_false() failed: no_host_pointers_equal\0A\00", align 1
@.str.12.47 = private unnamed_addr constant [123 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:550 halide_abort_if_false() failed: entry->in_use_count > 0\0A\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.57 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.58 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.59 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.60 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.61 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.62 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.63 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.64 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9.65 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11.67 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12.68 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13.71 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18.72 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17.73 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16.74 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15.75 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14.76 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19.77 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20.78 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21.79 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23.82 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24.83 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 8
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@.str.6.88 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.89 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.90 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.91 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.92 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.93 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.96 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.97 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.98 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.99 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26.100 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27.101 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28.102 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29.103 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30.104 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31.105 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32.106 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33.107 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34.108 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.111 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.112 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.113 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.114 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.115 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.116 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.117 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.118 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.119 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.120 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.121 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.122 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.123 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.124 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.125 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.126 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.127 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.128 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.129 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.130 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.131 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.132 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.133 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.134 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.135 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.136 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.137 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.138 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.139 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.140 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.141 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.142 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.143 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.144 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.145 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.146 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.147 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50.148 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.149 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.150 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.151 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.152 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.153 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.29.163 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.7.164 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8.165 = private unnamed_addr constant [14 x i8] c" total time: \00", align 1
@.str.9.166 = private unnamed_addr constant [4 x i8] c" ms\00", align 1
@.str.10.167 = private unnamed_addr constant [12 x i8] c"  samples: \00", align 1
@.str.11.168 = private unnamed_addr constant [9 x i8] c"  runs: \00", align 1
@.str.12.169 = private unnamed_addr constant [13 x i8] c"  time/run: \00", align 1
@.str.13.170 = private unnamed_addr constant [5 x i8] c" ms\0A\00", align 1
@.str.14.171 = private unnamed_addr constant [24 x i8] c" average threads used: \00", align 1
@.str.15.172 = private unnamed_addr constant [20 x i8] c" heap allocations: \00", align 1
@.str.16.173 = private unnamed_addr constant [20 x i8] c"  peak heap usage: \00", align 1
@.str.17.174 = private unnamed_addr constant [8 x i8] c" bytes\0A\00", align 1
@.str.18.175 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.19.176 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.20.177 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.21.178 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.22.179 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.23.180 = private unnamed_addr constant [3 x i8] c"%)\00", align 1
@.str.24.181 = private unnamed_addr constant [10 x i8] c"threads: \00", align 1
@.str.25.182 = private unnamed_addr constant [8 x i8] c" peak: \00", align 1
@.str.26.183 = private unnamed_addr constant [7 x i8] c" num: \00", align 1
@.str.27.184 = private unnamed_addr constant [7 x i8] c" avg: \00", align 1
@.str.28.185 = private unnamed_addr constant [9 x i8] c" stack: \00", align 1
@_ZZ25halide_profiler_get_stateE1s = internal global %struct.halide_profiler_state { %struct.halide_mutex zeroinitializer, i32 1, i32 0, i32 0, i32 0, %struct.halide_profiler_pipeline_stats* null, void (i32*, i32*)* null, %struct.halide_thread* null }, align 8
@.str.186 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:246 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.1.187 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:273 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.2.188 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:274 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.3.189 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:275 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@.str.4.190 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:309 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.5.191 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:310 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.6.192 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:311 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 8
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.197 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant [4 x i64*] zeroinitializer
@str = private constant [6 x i8] c"input\00", align 32
@1 = private constant [4 x i64*] zeroinitializer
@str.200 = private constant [7 x i8] c"blur_y\00", align 32
@2 = private constant [2 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @0, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i32 0, i32 0), i32 2, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @1, i32 0, i32 0) }]
@str.201 = private constant [64 x i8] c"x86-64-linux-avx-avx2-f16c-fma-no_asserts-no_bounds_query-sse41\00", align 32
@str.202 = private constant [8 x i8] c"blur5x5\00", align 32
@blur5x5_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 2, %struct.halide_filter_argument_t* getelementptr inbounds ([2 x %struct.halide_filter_argument_t], [2 x %struct.halide_filter_argument_t]* @2, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @str.201, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.202, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.76, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15.75, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16.74, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.73, i64 0, i64 0)], align 8

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i64 %x) #0 {
entry:
  %add = add i64 %x, 64
  %call1 = tail call i8* @malloc(i64 %add) #16
  %cmp = icmp eq i8* %call1, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call1 to i64
  %sub = add i64 %0, 71
  %and = and i64 %sub, -64
  %1 = inttoptr i64 %and to i8*
  %2 = inttoptr i64 %and to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 -1
  store i8* %call1, i8** %arrayidx, align 8, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i64 -8
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !10
  tail call void @free(i8* %1) #16
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i64)* @halide_set_custom_malloc(i8* (i8*, i64)* %user_malloc) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  store i8* (i8*, i64)* %user_malloc, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  ret i8* (i8*, i64)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_malloc(i8* %user_context, i64 %x) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %user_context, i64 %x) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %ptr) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_error(i8* %user_context, i8* %msg) #0 {
entry:
  %buf = alloca [4096 x i8], align 1
  %0 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %0) #11
  %add.ptr = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 4094
  %call = call i8* @halide_string_to_string(i8* nonnull %0, i8* nonnull %add.ptr, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)) #16
  %add.ptr2 = getelementptr inbounds i8, i8* %call, i64 4094
  %call3 = call i8* @halide_string_to_string(i8* %call, i8* nonnull %add.ptr2, i8* %msg) #16
  %arrayidx = getelementptr inbounds i8, i8* %call3, i64 -1
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %cmp.not = icmp eq i8 %1, 10
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8 10, i8* %call3, align 1, !tbaa !14
  %arrayidx5 = getelementptr inbounds i8, i8* %call3, i64 1
  store i8 0, i8* %arrayidx5, align 1, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %dst.0 = phi i8* [ %arrayidx5, %if.then ], [ %call3, %entry ]
  %sub.ptr.lhs.cast = ptrtoint i8* %dst.0 to i64
  %sub.ptr.rhs.cast = ptrtoint [4096 x i8]* %buf to i64
  %sub.ptr.sub = sub i64 1, %sub.ptr.rhs.cast
  %add = add i64 %sub.ptr.sub, %sub.ptr.lhs.cast
  %call9 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 %add) #16
  call void @halide_print(i8* %user_context, i8* nonnull %0) #16
  call void @abort() #16
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @abort() local_unnamed_addr #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak void @halide_error(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_error_handler(void (i8*, i8*)* %handler) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  store void (i8*, i8*)* %handler, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_print(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_print(void (i8*, i8*)* %print) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  store void (i8*, i8*)* %print, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_start_clock(i8* %user_context) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* @halide_reference_clock_inited, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i32 (i32, ...) @syscall(i32 228, i32 0, %struct.timespec* nonnull @halide_reference_clock) #16
  store i8 1, i8* @halide_reference_clock_inited, align 1, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

declare i32 @syscall(i32, ...) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i64 @halide_current_time_ns(i8* %user_context) local_unnamed_addr #0 {
entry:
  %now = alloca <2 x i64>, align 16
  %0 = bitcast <2 x i64>* %now to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  %call = call i32 (i32, ...) @syscall(i32 228, i32 0, <2 x i64>* nonnull %now) #16
  %1 = load <2 x i64>, <2 x i64>* %now, align 16, !tbaa !18
  %2 = load <2 x i64>, <2 x i64>* bitcast (%struct.timespec* @halide_reference_clock to <2 x i64>*), align 8, !tbaa !18
  %3 = sub <2 x i64> %1, %2
  %4 = extractelement <2 x i64> %3, i32 0
  %mul = mul nsw i64 %4, 1000000000
  %5 = extractelement <2 x i64> %3, i32 1
  %add = add nsw i64 %mul, %5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i64 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_sleep_ms(i8* %user_context, i32 %ms) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %ms, 1000
  %call = tail call i32 @usleep(i32 %mul) #16
  ret void
}

declare i32 @usleep(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_print(i8* %user_context, i8* %str) #0 {
entry:
  %call = tail call i64 @strlen(i8* %str) #16
  %call1 = tail call i64 @write(i32 1, i8* %str, i64 %call) #16
  ret void
}

declare i64 @strlen(i8*) local_unnamed_addr #1

declare i64 @write(i32, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_host_cpu_count() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @sysconf(i32 84) #16
  %conv = trunc i64 %call to i32
  ret i32 %conv
}

declare i64 @sysconf(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_yield() local_unnamed_addr #0 {
entry:
  %call = tail call i32 @sched_yield() #16
  ret void
}

declare i32 @sched_yield() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %job = alloca %"struct.Halide::Runtime::Internal::work", align 8
  %cmp = icmp slt i32 %size, 1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %"struct.Halide::Runtime::Internal::work"* %job to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %0) #11
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 0
  store i32 (i8*, i32, i32, i8*, i8*)* null, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %min2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 5
  store i32 %min, i32* %min2, align 4, !tbaa !24
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 6
  store i32 %size, i32* %extent, align 8, !tbaa !25
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 8
  store i8 0, i8* %serial, align 8, !tbaa !26
  %semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 3
  store %struct.halide_semaphore_acquire_t* null, %struct.halide_semaphore_acquire_t** %semaphores, align 8, !tbaa !27
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 4
  store i32 0, i32* %num_semaphores, align 8, !tbaa !28
  %closure8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 1
  store i8* %closure, i8** %closure8, align 8, !tbaa !29
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 7
  store i32 0, i32* %min_threads, align 4, !tbaa !30
  %name = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 2
  store i8* null, i8** %name, align 8, !tbaa !31
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 1
  store i32 (i8*, i32, i8*)* %f, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 7
  store i8* %user_context, i8** %user_context11, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %job, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 4
  store i32 0, i32* %sibling_count, align 8, !tbaa !39
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 5
  store %"struct.Halide::Runtime::Internal::work"* null, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 1, %"struct.Halide::Runtime::Internal::work"* nonnull %job, %"struct.Halide::Runtime::Internal::work"* null) #17
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %job) #17
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %1 = load i32, i32* %exit_status, align 4, !tbaa !34
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %0) #11
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %1, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = load atomic i64, i64* %state.i monotonic, align 8
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %6 = ptrtoint %struct.halide_mutex* %mutex to i64
  br label %while.cond.outer.i.i

while.cond.outer.i.i:                             ; preds = %while.cond.outer.i.i.backedge, %if.then.i
  %expected.0.ph.i.i = phi i64 [ %2, %if.then.i ], [ %expected.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i = phi i32 [ 40, %if.then.i ], [ %spinner.sroa.0.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %and55.i.i = and i64 %expected.0.ph.i.i, 1
  %tobool.not56.i.i = icmp eq i64 %and55.i.i, 0
  br i1 %tobool.not56.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %while.cond.outer.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %expected.057.i.i = phi i64 [ %9, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i ], [ %expected.0.ph.i.i, %while.cond.outer.i.i ]
  %or.i.i = or i64 %expected.057.i.i, 1
  %7 = cmpxchg weak i64* %state.i, i64 %expected.057.i.i, i64 %or.i.i acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then.i.i
  %9 = extractvalue { i64, i1 } %7, 0
  %and.i.i = and i64 %9, 1
  %tobool.not.i.i = icmp eq i64 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.end4.i.i.loopexit

if.end4.i.i.loopexit:                             ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %10 = extractvalue { i64, i1 } %7, 0
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end4.i.i.loopexit, %while.cond.outer.i.i
  %expected.0.lcssa.i.i = phi i64 [ %expected.0.ph.i.i, %while.cond.outer.i.i ], [ %10, %if.end4.i.i.loopexit ]
  %cmp.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i, 0
  br i1 %cmp.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, label %if.end8.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i: ; preds = %if.end4.i.i
  %cmp4.i.not.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i, 1
  br i1 %cmp4.i.not.i.i, label %if.end8.i.i, label %if.then6.i.i

if.then6.i.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i
  %dec.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i, -1
  call void @halide_thread_yield() #16
  %11 = load atomic i64, i64* %state.i monotonic, align 8
  br label %while.cond.outer.i.i.backedge

if.end8.i.i:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, %if.end4.i.i
  %spinner.sroa.0.152.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i ], [ %spinner.sroa.0.0.ph.i.i, %if.end4.i.i ]
  %and9.i.i = and i64 %expected.0.lcssa.i.i, 2
  %cmp.i.i = icmp eq i64 %and9.i.i, 0
  br i1 %cmp.i.i, label %if.then10.i.i, label %if.end19.i.i

if.then10.i.i:                                    ; preds = %if.end8.i.i
  %or12.i.i = or i64 %expected.0.lcssa.i.i, 2
  %12 = cmpxchg weak i64* %state.i, i64 %expected.0.lcssa.i.i, i64 %or12.i.i monotonic monotonic
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %if.end19.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then10.i.i
  %14 = extractvalue { i64, i1 } %12, 0
  br label %while.cond.outer.i.i.backedge

if.end19.i.i:                                     ; preds = %if.then10.i.i, %if.end8.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !41
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %call21.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %5, i64 %6) #16
  %cmp22.i.i = icmp eq i64 %call21.i.i, %6
  br i1 %cmp22.i.i, label %cleanup30.critedge.i.i, label %if.end24.i.i

if.end24.i.i:                                     ; preds = %if.end19.i.i
  %15 = load atomic i64, i64* %state.i monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %while.cond.outer.i.i.backedge

while.cond.outer.i.i.backedge:                    ; preds = %if.end24.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i, %if.then6.i.i
  %expected.0.ph.i.i.be = phi i64 [ %14, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ %15, %if.end24.i.i ], [ %11, %if.then6.i.i ]
  %spinner.sroa.0.0.ph.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ 40, %if.end24.i.i ], [ %dec.i.i.i, %if.then6.i.i ]
  br label %while.cond.outer.i.i

cleanup30.critedge.i.i:                           ; preds = %if.end19.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit: ; preds = %if.then.i.i, %cleanup30.critedge.i.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_jobs, %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %land.rhs.i, label %if.end4

land.rhs.i:                                       ; preds = %entry, %while.body.i
  %bytes.011.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), %entry ]
  %1 = load i8, i8* %bytes.011.i, align 1, !tbaa !14
  %cmp2.i = icmp eq i8 %1, 0
  br i1 %cmp2.i, label %while.body.i, label %do.body.i

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %bytes.011.i, i64 1
  %exitcond.not.i = icmp eq i8* %incdec.ptr.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*)
  br i1 %exitcond.not.i, label %do.body.i, label %land.rhs.i, !llvm.loop !49

do.body.i:                                        ; preds = %while.body.i, %land.rhs.i
  %bytes.0.lcssa.i = phi i8* [ %bytes.011.i, %land.rhs.i ], [ bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*), %while.body.i ]
  %cmp3.i = icmp eq i8* %bytes.0.lcssa.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*)
  br i1 %cmp3.i, label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit, label %if.then.i

if.then.i:                                        ; preds = %do.body.i
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.6, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit

_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit: ; preds = %if.then.i, %do.body.i
  %2 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %tobool1.not = icmp eq i32 %2, 0
  br i1 %tobool1.not, label %if.then2, label %if.end

if.then2:                                         ; preds = %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #17
  br label %if.end

if.end:                                           ; preds = %if.then2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %3 = phi i32 [ %call, %if.then2 ], [ %2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit ]
  %4 = icmp sgt i32 %3, 1
  %spec.select.i = select i1 %4, i32 %3, i32 1
  %5 = icmp slt i32 %spec.select.i, 256
  %call3176 = select i1 %5, i32 %spec.select.i, i32 256
  store i32 %call3176, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %cmp181 = icmp sgt i32 %num_jobs, 0
  br i1 %cmp181, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end4
  %wide.trip.count = zext i32 %num_jobs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %6 = icmp eq i32 %num_jobs, 1
  br i1 %6, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.inc.1, %for.body.preheader
  %workers_to_wake.1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %add.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %stealable_jobs.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %job_may_block.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %spec.select.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %indvars.iv193.unr = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187.unr = phi i32 [ 0, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185.unr = phi i8 [ 0, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184.unr = phi i8 [ 0, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183.unr = phi i8 [ 0, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182.unr = phi i32 [ -1, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup.loopexit, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %min_threads5.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 7
  %7 = load i32, i32* %min_threads5.epil, align 4, !tbaa !30
  %cmp6.epil = icmp eq i32 %7, 0
  %add.epil = add i32 %7, %min_threads.0187.unr
  %stealable_jobs.1.epil = select i1 %cmp6.epil, i8 1, i8 %stealable_jobs.0183.unr
  %job_may_block.1.epil = select i1 %cmp6.epil, i8 %job_may_block.0185.unr, i8 1
  %num_semaphores.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 4
  %8 = load i32, i32* %num_semaphores.epil, align 8, !tbaa !28
  %cmp16.not.epil = icmp eq i32 %8, 0
  %spec.select.epil = select i1 %cmp16.not.epil, i8 %job_has_acquires.0184.unr, i8 1
  %serial.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 8
  %9 = load i8, i8* %serial.epil, align 8, !tbaa !26, !range !17
  %tobool22.not.epil = icmp eq i8 %9, 0
  br i1 %tobool22.not.epil, label %if.else24.epil, label %if.then23.epil

if.then23.epil:                                   ; preds = %for.body.epil
  %inc.epil = add nsw i32 %workers_to_wake.0182.unr, 1
  br label %for.cond.cleanup.loopexit

if.else24.epil:                                   ; preds = %for.body.epil
  %extent.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 6
  %10 = load i32, i32* %extent.epil, align 8, !tbaa !25
  %add28.epil = add nsw i32 %10, %workers_to_wake.0182.unr
  br label %for.cond.cleanup.loopexit

for.cond.cleanup.loopexit:                        ; preds = %if.else24.epil, %if.then23.epil, %for.cond.cleanup.loopexit.unr-lcssa
  %workers_to_wake.1.lcssa = phi i32 [ %workers_to_wake.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %inc.epil, %if.then23.epil ], [ %add28.epil, %if.else24.epil ]
  %add.lcssa = phi i32 [ %add.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add.epil, %if.then23.epil ], [ %add.epil, %if.else24.epil ]
  %stealable_jobs.1.lcssa = phi i8 [ %stealable_jobs.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %stealable_jobs.1.epil, %if.then23.epil ], [ %stealable_jobs.1.epil, %if.else24.epil ]
  %job_may_block.1.lcssa = phi i8 [ %job_may_block.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %job_may_block.1.epil, %if.then23.epil ], [ %job_may_block.1.epil, %if.else24.epil ]
  %spec.select.lcssa = phi i8 [ %spec.select.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %spec.select.epil, %if.then23.epil ], [ %spec.select.epil, %if.else24.epil ]
  %phi.bo = and i8 %stealable_jobs.1.lcssa, 1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end4
  %workers_to_wake.0.lcssa = phi i32 [ -1, %if.end4 ], [ %workers_to_wake.1.lcssa, %for.cond.cleanup.loopexit ]
  %stealable_jobs.0.lcssa = phi i8 [ 0, %if.end4 ], [ %phi.bo, %for.cond.cleanup.loopexit ]
  %job_has_acquires.0.lcssa = phi i8 [ 0, %if.end4 ], [ %spec.select.lcssa, %for.cond.cleanup.loopexit ]
  %job_may_block.0.lcssa = phi i8 [ 0, %if.end4 ], [ %job_may_block.1.lcssa, %for.cond.cleanup.loopexit ]
  %min_threads.0.lcssa = phi i32 [ 0, %if.end4 ], [ %add.lcssa, %for.cond.cleanup.loopexit ]
  %cmp31 = icmp eq %"struct.Halide::Runtime::Internal::work"* %task_parent, null
  br i1 %cmp31, label %if.then32, label %do.body61

for.body:                                         ; preds = %for.inc.1, %for.body.preheader.new
  %indvars.iv193 = phi i64 [ 0, %for.body.preheader.new ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187 = phi i32 [ 0, %for.body.preheader.new ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185 = phi i8 [ 0, %for.body.preheader.new ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184 = phi i8 [ 0, %for.body.preheader.new ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183 = phi i8 [ 0, %for.body.preheader.new ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182 = phi i32 [ -1, %for.body.preheader.new ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.1, %for.inc.1 ]
  %min_threads5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 7
  %11 = load i32, i32* %min_threads5, align 4, !tbaa !30
  %cmp6 = icmp eq i32 %11, 0
  %add = add i32 %11, %min_threads.0187
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 4
  %12 = load i32, i32* %num_semaphores, align 8, !tbaa !28
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 8
  %13 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool22.not = icmp eq i8 %13, 0
  br i1 %tobool22.not, label %if.else24, label %if.then23

if.then23:                                        ; preds = %for.body
  %inc = add nsw i32 %workers_to_wake.0182, 1
  br label %for.inc

if.else24:                                        ; preds = %for.body
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 6
  %14 = load i32, i32* %extent, align 8, !tbaa !25
  %add28 = add nsw i32 %14, %workers_to_wake.0182
  br label %for.inc

for.inc:                                          ; preds = %if.else24, %if.then23
  %workers_to_wake.1 = phi i32 [ %inc, %if.then23 ], [ %add28, %if.else24 ]
  %indvars.iv.next194 = or i64 %indvars.iv193, 1
  %min_threads5.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 7
  %15 = load i32, i32* %min_threads5.1, align 4, !tbaa !30
  %cmp6.1 = icmp eq i32 %15, 0
  %add.1 = add i32 %15, %add
  %16 = or i1 %cmp6.1, %cmp6
  %stealable_jobs.1.1 = select i1 %16, i8 1, i8 %stealable_jobs.0183
  %17 = or i32 %15, %11
  %18 = icmp eq i32 %17, 0
  %job_may_block.1.1 = select i1 %18, i8 %job_may_block.0185, i8 1
  %num_semaphores.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 4
  %19 = load i32, i32* %num_semaphores.1, align 8, !tbaa !28
  %20 = or i32 %19, %12
  %21 = icmp eq i32 %20, 0
  %spec.select.1 = select i1 %21, i8 %job_has_acquires.0184, i8 1
  %serial.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 8
  %22 = load i8, i8* %serial.1, align 8, !tbaa !26, !range !17
  %tobool22.not.1 = icmp eq i8 %22, 0
  br i1 %tobool22.not.1, label %if.else24.1, label %if.then23.1

if.then32:                                        ; preds = %for.cond.cleanup
  %23 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  %not. = xor i1 %25, true
  %add36 = zext i1 %not. to i32
  %min_threads.2 = add nsw i32 %min_threads.0.lcssa, %add36
  %26 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp38180 = icmp slt i32 %26, 256
  br i1 %cmp38180, label %land.rhs, label %do.end50

land.rhs:                                         ; preds = %if.then32, %while.body
  %27 = phi i32 [ %inc45, %while.body ], [ %26, %if.then32 ]
  %28 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %sub = add nsw i32 %28, -1
  %cmp39 = icmp slt i32 %27, %sub
  br i1 %cmp39, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %add40 = add nsw i32 %27, 1
  %29 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub41 = sub i32 %add40, %29
  %cmp42 = icmp slt i32 %sub41, %min_threads.2
  br i1 %cmp42, label %while.body, label %do.end50

while.body:                                       ; preds = %lor.rhs, %land.rhs
  %30 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc43 = add nsw i32 %30, 1
  store i32 %inc43, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %call44 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal13worker_threadEPv, i8* null) #17
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %inc45 = add nsw i32 %31, 1
  store i32 %inc45, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %idxprom46 = sext i32 %31 to i64
  %arrayidx47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %idxprom46
  store %struct.halide_thread* %call44, %struct.halide_thread** %arrayidx47, align 8, !tbaa !10
  %cmp38 = icmp slt i32 %31, 255
  br i1 %cmp38, label %land.rhs, label %do.end50, !llvm.loop !55

do.end50:                                         ; preds = %while.body, %lor.rhs, %if.then32
  br i1 %25, label %if.end77, label %if.then54

if.then54:                                        ; preds = %do.end50
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %inc55 = add nsw i32 %32, 1
  store i32 %inc55, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end77

do.body61:                                        ; preds = %for.cond.cleanup
  %min_threads63 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 0, i32 7
  %33 = load i32, i32* %min_threads63, align 4, !tbaa !30
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 8
  %34 = load i32, i32* %active_workers, align 8, !tbaa !35
  %mul = mul nsw i32 %34, %33
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub64 = sub nsw i32 %mul, %35
  %cmp65.not = icmp sgt i32 %min_threads.0.lcssa, %sub64
  br i1 %cmp65.not, label %if.then66, label %do.end69

if.then66:                                        ; preds = %do.body61
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([263 x i8], [263 x i8]* @.str.3, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end69

do.end69:                                         ; preds = %if.then66, %do.body61
  %36 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %37 = and i8 %36, 1
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %if.end77, label %if.then73

if.then73:                                        ; preds = %do.end69
  %39 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %inc75 = add nsw i32 %39, 1
  store i32 %inc75, i32* %threads_reserved, align 8, !tbaa !56
  br label %if.end77

if.end77:                                         ; preds = %if.then73, %do.end69, %if.then54, %do.end50
  br i1 %cmp181, label %for.body83.lr.ph, label %for.cond.cleanup82

for.body83.lr.ph:                                 ; preds = %if.end77
  %.promoted = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %40 = zext i32 %num_jobs to i64
  %xtraiter3 = and i64 %40, 1
  %lcmp.mod4.not = icmp eq i64 %xtraiter3, 0
  br i1 %lcmp.mod4.not, label %for.body83.prol.loopexit, label %for.body83.prol

for.body83.prol:                                  ; preds = %for.body83.lr.ph
  %indvars.iv.next.prol = add nsw i64 %40, -1
  %arrayidx85.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol
  %next_job.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %.promoted, %"struct.Halide::Runtime::Internal::work"** %next_job.prol, align 8, !tbaa !58
  %siblings.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.prol, align 8, !tbaa !38
  %sibling_count.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 4
  store i32 %num_jobs, i32* %sibling_count.prol, align 8, !tbaa !39
  %threads_reserved93.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 6
  store i32 0, i32* %threads_reserved93.prol, align 8, !tbaa !56
  br label %for.body83.prol.loopexit

for.body83.prol.loopexit:                         ; preds = %for.body83.prol, %for.body83.lr.ph
  %indvars.iv.unr = phi i64 [ %40, %for.body83.lr.ph ], [ %indvars.iv.next.prol, %for.body83.prol ]
  %arrayidx85192.unr = phi %"struct.Halide::Runtime::Internal::work"* [ %.promoted, %for.body83.lr.ph ], [ %arrayidx85.prol, %for.body83.prol ]
  %41 = icmp eq i32 %num_jobs, 1
  br i1 %41, label %for.cond80.for.cond.cleanup82_crit_edge, label %for.body83

for.cond80.for.cond.cleanup82_crit_edge:          ; preds = %for.body83, %for.body83.prol.loopexit
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %for.cond.cleanup82

for.cond.cleanup82:                               ; preds = %for.cond80.for.cond.cleanup82_crit_edge, %if.end77
  %42 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %tobool96 = icmp ne i32 %42, 0
  %43 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8
  %44 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8
  %cmp98 = icmp slt i32 %43, %44
  %45 = or i1 %tobool96, %cmp98
  %cmp102 = icmp sgt i32 %workers_to_wake.0.lcssa, %43
  %or.cond174 = or i1 %cmp102, %45
  %storemerge = select i1 %or.cond174, i32 %44, i32 %workers_to_wake.0.lcssa
  store i32 %storemerge, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  %46 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %47 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %cmp106 = icmp sgt i32 %46, %47
  br i1 %cmp106, label %if.then107, label %if.end111

for.body83:                                       ; preds = %for.body83.prol.loopexit, %for.body83
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body83 ], [ %indvars.iv.unr, %for.body83.prol.loopexit ]
  %arrayidx85192 = phi %"struct.Halide::Runtime::Internal::work"* [ %arrayidx85.1, %for.body83 ], [ %arrayidx85192.unr, %for.body83.prol.loopexit ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx85 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85192, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 4
  store i32 %num_jobs, i32* %sibling_count, align 8, !tbaa !39
  %threads_reserved93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 6
  store i32 0, i32* %threads_reserved93, align 8, !tbaa !56
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, -2
  %arrayidx85.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1
  %next_job.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85, %"struct.Halide::Runtime::Internal::work"** %next_job.1, align 8, !tbaa !58
  %siblings.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.1, align 8, !tbaa !38
  %sibling_count.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 4
  store i32 %num_jobs, i32* %sibling_count.1, align 8, !tbaa !39
  %threads_reserved93.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 6
  store i32 0, i32* %threads_reserved93.1, align 8, !tbaa !56
  %cmp81.1 = icmp sgt i64 %indvars.iv, 2
  br i1 %cmp81.1, label %for.body83, label %for.cond80.for.cond.cleanup82_crit_edge, !llvm.loop !61

if.then107:                                       ; preds = %for.cond.cleanup82
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #17
  %tobool108.not = icmp eq i8 %stealable_jobs.0.lcssa, 0
  br i1 %tobool108.not, label %if.end111, label %if.then109

if.then109:                                       ; preds = %if.then107
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.then107, %for.cond.cleanup82
  %48 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %49 = and i8 %48, 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %if.end123, label %if.then115

if.then115:                                       ; preds = %if.end111
  br i1 %cmp31, label %if.else120, label %if.then117

if.then117:                                       ; preds = %if.then115
  %threads_reserved118 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %51 = load i32, i32* %threads_reserved118, align 8, !tbaa !56
  %dec119 = add nsw i32 %51, -1
  store i32 %dec119, i32* %threads_reserved118, align 8, !tbaa !56
  br label %if.end123

if.else120:                                       ; preds = %if.then115
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %dec121 = add nsw i32 %52, -1
  store i32 %dec121, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end123

if.end123:                                        ; preds = %if.else120, %if.then117, %if.end111
  ret void

if.then23.1:                                      ; preds = %for.inc
  %inc.1 = add nsw i32 %workers_to_wake.1, 1
  br label %for.inc.1

if.else24.1:                                      ; preds = %for.inc
  %extent.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 6
  %53 = load i32, i32* %extent.1, align 8, !tbaa !25
  %add28.1 = add nsw i32 %53, %workers_to_wake.1
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.else24.1, %if.then23.1
  %workers_to_wake.1.1 = phi i32 [ %inc.1, %if.then23.1 ], [ %add28.1, %if.else24.1 ]
  %indvars.iv.next194.1 = add nuw nsw i64 %indvars.iv193, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body, !llvm.loop !62
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %owned_job) local_unnamed_addr #0 {
entry:
  %active_workers.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 8
  %tobool.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %owned_job, null
  %extent.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 0, i32 6
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 9
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 5
  %siblings56 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 3
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 11
  %next_job10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 2
  br label %while.cond

while.cond:                                       ; preds = %while.cond.backedge, %entry
  %spin_count.0 = phi i32 [ 0, %entry ], [ %spin_count.0.be, %while.cond.backedge ]
  br i1 %tobool.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.cond
  %0 = load i32, i32* %extent.i, align 8, !tbaa !25
  %tobool.not.i = icmp eq i32 %0, 0
  br i1 %tobool.not.i, label %cond.end, label %if.then

cond.false:                                       ; preds = %while.cond
  %1 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63, !range !17
  %tobool1.not = icmp eq i8 %1, 0
  br i1 %tobool1.not, label %do.end.thread, label %while.end316

cond.end:                                         ; preds = %cond.true
  %2 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %tobool2.i.not = icmp eq i32 %2, 0
  br i1 %tobool2.i.not, label %while.end316, label %if.then

if.then:                                          ; preds = %cond.end, %cond.true
  %3 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %4 = load i32, i32* %exit_status, align 4, !tbaa !34
  %cmp.not = icmp eq i32 %4, 0
  br i1 %cmp.not, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %cmp4 = icmp eq i32 %5, 0
  br i1 %cmp4, label %while.cond6.preheader, label %do.end

while.cond6.preheader:                            ; preds = %if.then3
  %cmp7.not524 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, %owned_job
  br i1 %cmp7.not524, label %while.end, label %while.body8

while.body8:                                      ; preds = %while.cond6.preheader, %while.body8
  %job.0525 = phi %"struct.Halide::Runtime::Internal::work"* [ %6, %while.body8 ], [ %3, %while.cond6.preheader ]
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %cmp7.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %6, %owned_job
  br i1 %cmp7.not, label %while.end.loopexit, label %while.body8, !llvm.loop !64

while.end.loopexit:                               ; preds = %while.body8
  %next_job.le = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond6.preheader
  %prev_ptr.0.lcssa = phi %"struct.Halide::Runtime::Internal::work"** [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %while.cond6.preheader ], [ %next_job.le, %while.end.loopexit ]
  %7 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job10, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %7, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.0.lcssa, align 8, !tbaa !10
  store i32 0, i32* %extent.i, align 8, !tbaa !25
  br label %while.cond.backedge

if.else:                                          ; preds = %if.then
  %8 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  %tobool11.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %8, null
  br i1 %tobool11.not, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %exit_status13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %8, i64 0, i32 9
  %9 = load i32, i32* %exit_status13, align 4, !tbaa !34
  %cmp14.not = icmp eq i32 %9, 0
  br i1 %cmp14.not, label %do.end, label %if.then15

if.then15:                                        ; preds = %land.lhs.true
  store i32 %9, i32* %exit_status, align 4, !tbaa !34
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %while.cond.backedge

do.end:                                           ; preds = %land.lhs.true, %if.else, %if.then3
  %tobool23.not527 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, null
  br i1 %tobool23.not527, label %if.then105, label %do.end27

do.end.thread:                                    ; preds = %cond.false
  %10 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %tobool23.not527563 = icmp eq %"struct.Halide::Runtime::Internal::work"* %10, null
  br i1 %tobool23.not527563, label %if.else112, label %do.end27.us

do.end27.us:                                      ; preds = %do.end.thread, %cleanup.us
  %job.1529.us = phi %"struct.Halide::Runtime::Internal::work"* [ %29, %cleanup.us ], [ %10, %do.end.thread ]
  %prev_ptr.1528.us = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95.us, %cleanup.us ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end.thread ]
  %parent_job29.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 5
  %11 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29.us, align 8, !tbaa !40
  %cmp30.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %11, null
  br i1 %cmp30.us, label %if.then31.us, label %if.else32.us

if.else32.us:                                     ; preds = %do.end27.us
  %active_workers33.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 8
  %12 = load i32, i32* %active_workers33.us, align 8, !tbaa !35
  %cmp34.us = icmp eq i32 %12, 0
  %min_threads.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 0, i32 7
  %13 = load i32, i32* %min_threads.us, align 4, !tbaa !30
  br i1 %cmp34.us, label %if.then35.us, label %if.else38.us

if.else38.us:                                     ; preds = %if.else32.us
  %mul.us = mul nsw i32 %13, %12
  %threads_reserved42.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %14 = load i32, i32* %threads_reserved42.us, align 8, !tbaa !56
  %sub43.us = sub nsw i32 %mul.us, %14
  br label %if.end45.us

if.then35.us:                                     ; preds = %if.else32.us
  %threads_reserved.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %15 = load i32, i32* %threads_reserved.us, align 8, !tbaa !56
  %sub37.us = sub nsw i32 %13, %15
  br label %if.end45.us

if.then31.us:                                     ; preds = %do.end27.us
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add.us = add nsw i32 %16, 1
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub.us = sub i32 %add.us, %17
  br label %if.end45.us

if.end45.us:                                      ; preds = %if.then31.us, %if.then35.us, %if.else38.us
  %threads_available.0.us = phi i32 [ %sub.us, %if.then31.us ], [ %sub37.us, %if.then35.us ], [ %sub43.us, %if.else38.us ]
  %min_threads47.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 7
  %18 = load i32, i32* %min_threads47.us, align 4, !tbaa !30
  %cmp48.not.us = icmp sge i32 %threads_available.0.us, %18
  %serial.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 8
  %19 = load i8, i8* %serial.us, align 8, !tbaa !26, !range !17
  %tobool69.not.us = icmp eq i8 %19, 0
  br i1 %tobool69.not.us, label %if.end45.us.lor.end73.us_crit_edge, label %lor.rhs70.us

if.end45.us.lor.end73.us_crit_edge:               ; preds = %if.end45.us
  %.0 = and i1 %cmp48.not.us, true
  br label %lor.end73.us

lor.rhs70.us:                                     ; preds = %if.end45.us
  %active_workers71.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 8
  %20 = load i32, i32* %active_workers71.us, align 8, !tbaa !35
  %cmp72.us = icmp eq i32 %20, 0
  %.1 = and i1 %cmp48.not.us, %cmp72.us
  br label %lor.end73.us

lor.end73.us:                                     ; preds = %if.end45.us.lor.end73.us_crit_edge, %lor.rhs70.us
  %.phi = phi i1 [ %.0, %if.end45.us.lor.end73.us_crit_edge ], [ %.1, %lor.rhs70.us ]
  br i1 %.phi, label %if.then86.us, label %cleanup.us

if.then86.us:                                     ; preds = %lor.end73.us
  %next_semaphore.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 10
  %21 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %num_semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 4
  %22 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp14.i.us = icmp slt i32 %21, %22
  br i1 %cmp14.i.us, label %for.body.lr.ph.i.us, label %if.else127

for.body.lr.ph.i.us:                              ; preds = %if.then86.us
  %semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 3
  br label %for.body.i.us

for.body.i.us:                                    ; preds = %for.inc.i.us, %for.body.lr.ph.i.us
  %23 = phi i32 [ %21, %for.body.lr.ph.i.us ], [ %inc.i.us, %for.inc.i.us ]
  %24 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i.us, align 8, !tbaa !27
  %idxprom.i.us = sext i32 %23 to i64
  %semaphore.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 0
  %25 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i.us, align 8, !tbaa !65
  %count.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 1
  %26 = load i32, i32* %count.i.us, align 8, !tbaa !67
  %call.i.us = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %25, i32 %26) #16
  br i1 %call.i.us, label %for.inc.i.us, label %cleanup.us

for.inc.i.us:                                     ; preds = %for.body.i.us
  %27 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %inc.i.us = add nsw i32 %27, 1
  store i32 %inc.i.us, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %28 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp.i.us = icmp slt i32 %inc.i.us, %28
  br i1 %cmp.i.us, label %for.body.i.us, label %if.else127, !llvm.loop !68

cleanup.us:                                       ; preds = %for.body.i.us, %lor.end73.us
  %next_job95.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 2
  %29 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95.us, align 8, !tbaa !58
  %tobool23.not.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %29, null
  br i1 %tobool23.not.us, label %if.then103, label %do.end27.us

do.end27:                                         ; preds = %do.end, %cleanup
  %job.1529 = phi %"struct.Halide::Runtime::Internal::work"* [ %50, %cleanup ], [ %3, %do.end ]
  %prev_ptr.1528 = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95, %cleanup ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end ]
  %parent_job29 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 5
  %30 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29, align 8, !tbaa !40
  %cmp30 = icmp eq %"struct.Halide::Runtime::Internal::work"* %30, null
  br i1 %cmp30, label %if.then31, label %if.else32

if.then31:                                        ; preds = %do.end27
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add = add nsw i32 %31, 1
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub = sub i32 %add, %32
  br label %if.end45

if.else32:                                        ; preds = %do.end27
  %active_workers33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 8
  %33 = load i32, i32* %active_workers33, align 8, !tbaa !35
  %cmp34 = icmp eq i32 %33, 0
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 0, i32 7
  %34 = load i32, i32* %min_threads, align 4, !tbaa !30
  br i1 %cmp34, label %if.then35, label %if.else38

if.then35:                                        ; preds = %if.else32
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub37 = sub nsw i32 %34, %35
  br label %if.end45

if.else38:                                        ; preds = %if.else32
  %mul = mul nsw i32 %34, %33
  %threads_reserved42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %36 = load i32, i32* %threads_reserved42, align 8, !tbaa !56
  %sub43 = sub nsw i32 %mul, %36
  br label %if.end45

if.end45:                                         ; preds = %if.else38, %if.then35, %if.then31
  %threads_available.0 = phi i32 [ %sub, %if.then31 ], [ %sub37, %if.then35 ], [ %sub43, %if.else38 ]
  %min_threads47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 7
  %37 = load i32, i32* %min_threads47, align 4, !tbaa !30
  %cmp48.not = icmp slt i32 %threads_available.0, %37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 3
  %38 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %39 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings56, align 8, !tbaa !38
  %cmp57 = icmp ne %"struct.Halide::Runtime::Internal::work"* %38, %39
  %cmp60 = icmp ne i32 %37, 0
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 8
  %40 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool69.not = icmp eq i8 %40, 0
  br i1 %tobool69.not, label %if.end45.lor.end73_crit_edge, label %lor.rhs70

if.end45.lor.end73_crit_edge:                     ; preds = %if.end45
  %.not472.0 = xor i1 true, true
  br label %lor.end73

lor.rhs70:                                        ; preds = %if.end45
  %active_workers71 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 8
  %41 = load i32, i32* %active_workers71, align 8, !tbaa !35
  %cmp72 = icmp eq i32 %41, 0
  %.not472.1 = xor i1 %cmp72, true
  br label %lor.end73

lor.end73:                                        ; preds = %if.end45.lor.end73_crit_edge, %lor.rhs70
  %.not472.phi = phi i1 [ %.not472.0, %if.end45.lor.end73_crit_edge ], [ %.not472.1, %lor.rhs70 ]
  %.not = and i1 %cmp60, %cmp57
  %brmerge = or i1 %cmp48.not, %.not
  %brmerge473 = or i1 %brmerge, %.not472.phi
  br i1 %brmerge473, label %cleanup, label %if.then86

if.then86:                                        ; preds = %lor.end73
  %next_semaphore.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 10
  %42 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %num_semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 4
  %43 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp14.i = icmp slt i32 %42, %43
  br i1 %cmp14.i, label %for.body.lr.ph.i, label %if.else127

for.body.lr.ph.i:                                 ; preds = %if.then86
  %semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 3
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %44 = phi i32 [ %42, %for.body.lr.ph.i ], [ %inc.i, %for.inc.i ]
  %45 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i, align 8, !tbaa !27
  %idxprom.i = sext i32 %44 to i64
  %semaphore.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 0
  %46 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i, align 8, !tbaa !65
  %count.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 1
  %47 = load i32, i32* %count.i, align 8, !tbaa !67
  %call.i = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %46, i32 %47) #16
  br i1 %call.i, label %for.inc.i, label %cleanup

for.inc.i:                                        ; preds = %for.body.i
  %48 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %inc.i = add nsw i32 %48, 1
  store i32 %inc.i, i32* %next_semaphore.i, align 8, !tbaa !36
  %49 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp.i = icmp slt i32 %inc.i, %49
  br i1 %cmp.i, label %for.body.i, label %if.else127, !llvm.loop !68

cleanup:                                          ; preds = %for.body.i, %lor.end73
  %next_job95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 2
  %50 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95, align 8, !tbaa !58
  %tobool23.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %50, null
  br i1 %tobool23.not, label %if.then103, label %do.end27

if.then103:                                       ; preds = %cleanup, %cleanup.us
  br i1 %tobool.not, label %if.else112, label %if.then105

if.then105:                                       ; preds = %do.end, %if.then103
  %inc = add nsw i32 %spin_count.0, 1
  %cmp106 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp106, label %if.then107, label %if.else108

if.then107:                                       ; preds = %if.then105
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_thread_yield() #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %while.cond.backedge

if.else108:                                       ; preds = %if.then105
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %inc109 = add nsw i32 %51, 1
  store i32 %inc109, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  store i8 1, i8* %owner_is_sleeping, align 4, !tbaa !37
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %dec = add nsw i32 %52, -1
  store i32 %dec, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  br label %while.cond.backedge

if.else112:                                       ; preds = %if.then103, %do.end.thread
  %53 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %inc113 = add nsw i32 %53, 1
  store i32 %inc113, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %54 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %55 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %cmp114 = icmp sgt i32 %54, %55
  br i1 %cmp114, label %if.then115, label %if.else118

if.then115:                                       ; preds = %if.else112
  %dec116 = add nsw i32 %54, -1
  store i32 %dec116, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %56 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc117 = add nsw i32 %56, 1
  store i32 %inc117, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  br label %if.end124

if.else118:                                       ; preds = %if.else112
  %inc119 = add nsw i32 %spin_count.0, 1
  %cmp120 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp120, label %if.then121, label %if.else122

if.then121:                                       ; preds = %if.else118
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_thread_yield() #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end124

if.else122:                                       ; preds = %if.else118
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end124

if.end124:                                        ; preds = %if.else122, %if.then121, %if.then115
  %spin_count.1 = phi i32 [ %spin_count.0, %if.then115 ], [ %inc119, %if.then121 ], [ %inc119, %if.else122 ]
  %57 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %dec125 = add nsw i32 %57, -1
  store i32 %dec125, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  br label %while.cond.backedge

if.else127:                                       ; preds = %if.then86, %if.then86.us, %for.inc.i, %for.inc.i.us
  %next_semaphore.i521 = phi i32* [ %next_semaphore.i.us, %for.inc.i.us ], [ %next_semaphore.i, %for.inc.i ], [ %next_semaphore.i.us, %if.then86.us ], [ %next_semaphore.i, %if.then86 ]
  %prev_ptr.1519 = phi %"struct.Halide::Runtime::Internal::work"** [ %prev_ptr.1528.us, %for.inc.i.us ], [ %prev_ptr.1528, %for.inc.i ], [ %prev_ptr.1528.us, %if.then86.us ], [ %prev_ptr.1528, %if.then86 ]
  %job.1515 = phi %"struct.Halide::Runtime::Internal::work"* [ %job.1529.us, %for.inc.i.us ], [ %job.1529, %for.inc.i ], [ %job.1529.us, %if.then86.us ], [ %job.1529, %if.then86 ]
  store i32 0, i32* %next_semaphore.i521, align 8, !tbaa !36
  %active_workers132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 8
  %58 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %inc133 = add nsw i32 %58, 1
  store i32 %inc133, i32* %active_workers132, align 8, !tbaa !35
  %parent_job134 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 5
  %59 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp135 = icmp eq %"struct.Halide::Runtime::Internal::work"* %59, null
  %min_threads138 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 7
  %60 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp135, label %if.then136, label %if.else143

if.then136:                                       ; preds = %if.else127
  %61 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %add139 = add nsw i32 %61, %60
  store i32 %add139, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end152

if.else143:                                       ; preds = %if.else127
  %threads_reserved147 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %59, i64 0, i32 6
  %62 = load i32, i32* %threads_reserved147, align 8, !tbaa !56
  %add148 = add nsw i32 %62, %60
  store i32 %add148, i32* %threads_reserved147, align 8, !tbaa !56
  br label %if.end152

if.end152:                                        ; preds = %if.else143, %if.then136
  %serial154 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 8
  %63 = load i8, i8* %serial154, align 8, !tbaa !26, !range !17
  %tobool155.not = icmp eq i8 %63, 0
  br i1 %tobool155.not, label %if.else198, label %if.then156

if.then156:                                       ; preds = %if.end152
  %next_job157 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %64 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %64, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %extent163 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %next_semaphore.i474 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 10
  %num_semaphores.i475 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 4
  %semaphores.i477 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 3
  %user_context = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %min = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %closure = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %65 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  br label %while.cond161.preheader

while.cond161.preheader:                          ; preds = %if.end172, %if.then156
  %iters.0538 = phi i32 [ 1, %if.then156 ], [ 0, %if.end172 ]
  %total_iters.0537 = phi i32 [ 0, %if.then156 ], [ %add178, %if.end172 ]
  %66 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub164531 = sub nsw i32 %66, %total_iters.0537
  %cmp165532 = icmp sgt i32 %sub164531, %iters.0538
  br i1 %cmp165532, label %land.rhs.preheader, label %while.end169

land.rhs.preheader:                               ; preds = %while.cond161.preheader
  %.pre = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %.pre560 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  br label %land.rhs

land.rhs:                                         ; preds = %while.body167, %land.rhs.preheader
  %67 = phi i32 [ %76, %while.body167 ], [ %66, %land.rhs.preheader ]
  %68 = phi i32 [ %77, %while.body167 ], [ %.pre560, %land.rhs.preheader ]
  %69 = phi i32 [ 0, %while.body167 ], [ %.pre, %land.rhs.preheader ]
  %iters.1533 = phi i32 [ %inc168, %while.body167 ], [ %iters.0538, %land.rhs.preheader ]
  %cmp14.i476 = icmp slt i32 %69, %68
  br i1 %cmp14.i476, label %for.body.i483, label %while.body167

for.body.i483:                                    ; preds = %land.rhs, %for.inc.i486
  %70 = phi i32 [ %inc.i484, %for.inc.i486 ], [ %69, %land.rhs ]
  %71 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i477, align 8, !tbaa !27
  %idxprom.i479 = sext i32 %70 to i64
  %semaphore.i480 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 0
  %72 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i480, align 8, !tbaa !65
  %count.i481 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 1
  %73 = load i32, i32* %count.i481, align 8, !tbaa !67
  %call.i482 = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %72, i32 %73) #16
  br i1 %call.i482, label %for.inc.i486, label %while.end169

for.inc.i486:                                     ; preds = %for.body.i483
  %74 = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc.i484 = add nsw i32 %74, 1
  store i32 %inc.i484, i32* %next_semaphore.i474, align 8, !tbaa !36
  %75 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  %cmp.i485 = icmp slt i32 %inc.i484, %75
  br i1 %cmp.i485, label %for.body.i483, label %while.body167.loopexit, !llvm.loop !68

while.body167.loopexit:                           ; preds = %for.inc.i486
  %.pre561 = load i32, i32* %extent163, align 8, !tbaa !25
  br label %while.body167

while.body167:                                    ; preds = %while.body167.loopexit, %land.rhs
  %76 = phi i32 [ %.pre561, %while.body167.loopexit ], [ %67, %land.rhs ]
  %77 = phi i32 [ %75, %while.body167.loopexit ], [ %68, %land.rhs ]
  store i32 0, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc168 = add nuw nsw i32 %iters.1533, 1
  %sub164 = sub nsw i32 %76, %total_iters.0537
  %cmp165 = icmp sgt i32 %sub164, %inc168
  br i1 %cmp165, label %land.rhs, label %if.end172, !llvm.loop !70

while.end169:                                     ; preds = %for.body.i483, %while.cond161.preheader
  %iters.1523 = phi i32 [ %iters.0538, %while.cond161.preheader ], [ %iters.1533, %for.body.i483 ]
  %cmp170 = icmp eq i32 %iters.1523, 0
  br i1 %cmp170, label %while.end179, label %if.end172

if.end172:                                        ; preds = %while.body167, %while.end169
  %iters.1523566 = phi i32 [ %iters.1523, %while.end169 ], [ %inc168, %while.body167 ]
  %78 = load i8*, i8** %user_context, align 8, !tbaa !33
  %79 = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %80 = load i32, i32* %min, align 4, !tbaa !24
  %add175 = add nsw i32 %80, %total_iters.0537
  %81 = load i8*, i8** %closure, align 8, !tbaa !29
  %call177 = tail call i32 @halide_do_loop_task(i8* %78, i32 (i8*, i32, i32, i8*, i8*)* %79, i32 %add175, i32 %iters.1523566, i8* %81, i8* nonnull %65) #17
  %add178 = add nuw nsw i32 %iters.1523566, %total_iters.0537
  %cmp159 = icmp eq i32 %call177, 0
  br i1 %cmp159, label %while.cond161.preheader, label %while.end179, !llvm.loop !71

while.end179:                                     ; preds = %if.end172, %while.end169
  %cmp170568 = phi i1 [ true, %while.end169 ], [ false, %if.end172 ]
  %result.0.lcssa = phi i32 [ 0, %while.end169 ], [ %call177, %if.end172 ]
  %total_iters.0.lcssa = phi i32 [ %total_iters.0537, %while.end169 ], [ %add178, %if.end172 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %82 = load i32, i32* %min, align 4, !tbaa !24
  %add182 = add nsw i32 %82, %total_iters.0.lcssa
  store i32 %add182, i32* %min, align 4, !tbaa !24
  %83 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub185 = sub nsw i32 %83, %total_iters.0.lcssa
  store i32 %sub185, i32* %extent163, align 8, !tbaa !25
  br i1 %cmp170568, label %if.else190, label %if.end230.thread505

if.end230.thread505:                              ; preds = %while.end179
  store i32 0, i32* %extent163, align 8, !tbaa !25
  br label %if.then238

if.else190:                                       ; preds = %while.end179
  %cmp193 = icmp sgt i32 %sub185, 0
  br i1 %cmp193, label %if.then194, label %if.end271

if.then194:                                       ; preds = %if.else190
  %84 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  store %"struct.Halide::Runtime::Internal::work"* %84, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %job.1515, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %if.end271

if.else198:                                       ; preds = %if.end152
  %myjob.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %myjob.sroa.0.0.copyload = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %myjob.sroa.0.0..sroa_idx, align 8, !tbaa.struct !72
  %myjob.sroa.4.0..sroa_idx327 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %myjob.sroa.4.0.copyload = load i8*, i8** %myjob.sroa.4.0..sroa_idx327, align 8, !tbaa.struct !74
  %myjob.sroa.6333.0..sroa_idx334 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %myjob.sroa.6333.0.copyload = load i32, i32* %myjob.sroa.6333.0..sroa_idx334, align 4
  %myjob.sroa.8340.0..sroa_idx341 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 1
  %myjob.sroa.8340.0.copyload = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %myjob.sroa.8340.0..sroa_idx341, align 8, !tbaa.struct !75
  %myjob.sroa.10347.0..sroa_idx348 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %myjob.sroa.10347.0.copyload = load i8*, i8** %myjob.sroa.10347.0..sroa_idx348, align 8, !tbaa.struct !76
  %inc201 = add nsw i32 %myjob.sroa.6333.0.copyload, 1
  store i32 %inc201, i32* %myjob.sroa.6333.0..sroa_idx334, align 4, !tbaa !24
  %extent203 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %85 = load i32, i32* %extent203, align 8, !tbaa !25
  %dec204 = add nsw i32 %85, -1
  store i32 %dec204, i32* %extent203, align 8, !tbaa !25
  %cmp207 = icmp eq i32 %dec204, 0
  br i1 %cmp207, label %if.then208, label %if.end210

if.then208:                                       ; preds = %if.else198
  %next_job209 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %86 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job209, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %86, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %if.else198
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %tobool211.not = icmp eq i32 (i8*, i32, i8*)* %myjob.sroa.8340.0.copyload, null
  br i1 %tobool211.not, label %if.else220, label %if.then212

if.then212:                                       ; preds = %if.end210
  %call219 = tail call i32 @halide_do_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i8*)* nonnull %myjob.sroa.8340.0.copyload, i32 %myjob.sroa.6333.0.copyload, i8* %myjob.sroa.4.0.copyload) #17
  br label %if.end230

if.else220:                                       ; preds = %if.end210
  %87 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  %call228 = tail call i32 @halide_do_loop_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i32, i8*, i8*)* %myjob.sroa.0.0.copyload, i32 %myjob.sroa.6333.0.copyload, i32 1, i8* %myjob.sroa.4.0.copyload, i8* %87) #17
  br label %if.end230

if.end230:                                        ; preds = %if.else220, %if.then212
  %result.1 = phi i32 [ %call219, %if.then212 ], [ %call228, %if.else220 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %cmp237.not = icmp eq i32 %result.1, 0
  br i1 %cmp237.not, label %if.end271, label %if.then238

if.then238:                                       ; preds = %if.end230, %if.end230.thread505
  %result.2510 = phi i32 [ %result.0.lcssa, %if.end230.thread505 ], [ %result.1, %if.end230 ]
  %exit_status239 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  store i32 %result.2510, i32* %exit_status239, align 4, !tbaa !34
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 4
  %88 = load i32, i32* %sibling_count, align 8, !tbaa !39
  %cmp240540 = icmp sgt i32 %88, 0
  br i1 %cmp240540, label %do.end243.lr.ph, label %if.end271

do.end243.lr.ph:                                  ; preds = %if.then238
  %siblings244 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 3
  %89 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings244, align 8, !tbaa !38
  %wide.trip.count = zext i32 %88 to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %90 = icmp eq i32 %88, 1
  br i1 %90, label %if.end271.loopexit.unr-lcssa, label %do.end243.lr.ph.new

do.end243.lr.ph.new:                              ; preds = %do.end243.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %do.end243

do.end243:                                        ; preds = %for.inc.1, %do.end243.lr.ph.new
  %indvars.iv = phi i64 [ 0, %do.end243.lr.ph.new ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541 = phi i8 [ 0, %do.end243.lr.ph.new ], [ %wake_owners.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %do.end243.lr.ph.new ], [ %niter.nsub.1, %for.inc.1 ]
  %exit_status245 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 9
  %91 = load i32, i32* %exit_status245, align 4, !tbaa !34
  %cmp246 = icmp eq i32 %91, 0
  br i1 %cmp246, label %if.then247, label %for.inc

if.then247:                                       ; preds = %do.end243
  store i32 %result.2510, i32* %exit_status245, align 4, !tbaa !34
  %92 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253 = icmp eq i32 %92, 0
  br i1 %cmp253, label %land.rhs254, label %land.end260

land.rhs254:                                      ; preds = %if.then247
  %owner_is_sleeping258 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 11
  %93 = load i8, i8* %owner_is_sleeping258, align 4, !tbaa !37, !range !17
  br label %land.end260

land.end260:                                      ; preds = %land.rhs254, %if.then247
  %94 = phi i8 [ 0, %if.then247 ], [ %93, %land.rhs254 ]
  %95 = and i8 %wake_owners.0541, 1
  %or = or i8 %94, %95
  br label %for.inc

for.inc:                                          ; preds = %land.end260, %do.end243
  %wake_owners.1 = phi i8 [ %or, %land.end260 ], [ %wake_owners.0541, %do.end243 ]
  %indvars.iv.next = or i64 %indvars.iv, 1
  %exit_status245.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 9
  %96 = load i32, i32* %exit_status245.1, align 4, !tbaa !34
  %cmp246.1 = icmp eq i32 %96, 0
  br i1 %cmp246.1, label %if.then247.1, label %for.inc.1

if.end271.loopexit.unr-lcssa:                     ; preds = %for.inc.1, %do.end243.lr.ph
  %wake_owners.1.lcssa.ph = phi i8 [ undef, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %indvars.iv.unr = phi i64 [ 0, %do.end243.lr.ph ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541.unr = phi i8 [ 0, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %if.end271, label %do.end243.epil

do.end243.epil:                                   ; preds = %if.end271.loopexit.unr-lcssa
  %exit_status245.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 9
  %97 = load i32, i32* %exit_status245.epil, align 4, !tbaa !34
  %cmp246.epil = icmp eq i32 %97, 0
  br i1 %cmp246.epil, label %if.then247.epil, label %if.end271

if.then247.epil:                                  ; preds = %do.end243.epil
  store i32 %result.2510, i32* %exit_status245.epil, align 4, !tbaa !34
  %98 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.epil = icmp eq i32 %98, 0
  br i1 %cmp253.epil, label %land.rhs254.epil, label %land.end260.epil

land.rhs254.epil:                                 ; preds = %if.then247.epil
  %owner_is_sleeping258.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 11
  %99 = load i8, i8* %owner_is_sleeping258.epil, align 4, !tbaa !37, !range !17
  br label %land.end260.epil

land.end260.epil:                                 ; preds = %land.rhs254.epil, %if.then247.epil
  %100 = phi i8 [ 0, %if.then247.epil ], [ %99, %land.rhs254.epil ]
  %101 = and i8 %wake_owners.0541.unr, 1
  %or.epil = or i8 %100, %101
  br label %if.end271

if.end271:                                        ; preds = %if.end271.loopexit.unr-lcssa, %do.end243.epil, %land.end260.epil, %if.then238, %if.end230, %if.then194, %if.else190
  %wake_owners.2 = phi i8 [ 0, %if.end230 ], [ 0, %if.else190 ], [ 0, %if.then194 ], [ 0, %if.then238 ], [ %wake_owners.1.lcssa.ph, %if.end271.loopexit.unr-lcssa ], [ %or.epil, %land.end260.epil ], [ %wake_owners.0541.unr, %do.end243.epil ]
  %102 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp273 = icmp eq %"struct.Halide::Runtime::Internal::work"* %102, null
  %103 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp273, label %if.then274, label %if.else281

if.then274:                                       ; preds = %if.end271
  %104 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub277 = sub nsw i32 %104, %103
  store i32 %sub277, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end290

if.else281:                                       ; preds = %if.end271
  %threads_reserved285 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %102, i64 0, i32 6
  %105 = load i32, i32* %threads_reserved285, align 8, !tbaa !56
  %sub286 = sub nsw i32 %105, %103
  store i32 %sub286, i32* %threads_reserved285, align 8, !tbaa !56
  br label %if.end290

if.end290:                                        ; preds = %if.else281, %if.then274
  %106 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %dec292 = add nsw i32 %106, -1
  store i32 %dec292, i32* %active_workers132, align 8, !tbaa !35
  %107 = and i8 %wake_owners.2, 1
  %tobool296.not = icmp eq i8 %107, 0
  br i1 %tobool296.not, label %lor.lhs.false297, label %if.then310

lor.lhs.false297:                                 ; preds = %if.end290
  %cmp299 = icmp eq i32 %dec292, 0
  br i1 %cmp299, label %land.lhs.true300, label %while.cond.backedge

land.lhs.true300:                                 ; preds = %lor.lhs.false297
  %extent302 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %108 = load i32, i32* %extent302, align 8, !tbaa !25
  %cmp303 = icmp eq i32 %108, 0
  br i1 %cmp303, label %land.lhs.true307, label %lor.lhs.false304

lor.lhs.false304:                                 ; preds = %land.lhs.true300
  %exit_status305 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  %109 = load i32, i32* %exit_status305, align 4, !tbaa !34
  %cmp306.not = icmp eq i32 %109, 0
  br i1 %cmp306.not, label %while.cond.backedge, label %land.lhs.true307

land.lhs.true307:                                 ; preds = %lor.lhs.false304, %land.lhs.true300
  %owner_is_sleeping308 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 11
  %110 = load i8, i8* %owner_is_sleeping308, align 4, !tbaa !37, !range !17
  %tobool309.not = icmp eq i8 %110, 0
  br i1 %tobool309.not, label %while.cond.backedge, label %if.then310

if.then310:                                       ; preds = %land.lhs.true307, %if.end290
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then310, %land.lhs.true307, %lor.lhs.false304, %lor.lhs.false297, %if.end124, %if.else108, %if.then107, %if.then15, %while.end
  %spin_count.0.be = phi i32 [ %spin_count.0, %while.end ], [ %spin_count.0, %if.then15 ], [ %inc, %if.then107 ], [ %inc, %if.else108 ], [ %spin_count.1, %if.end124 ], [ 0, %if.then310 ], [ 0, %land.lhs.true307 ], [ 0, %lor.lhs.false304 ], [ 0, %lor.lhs.false297 ]
  br label %while.cond, !llvm.loop !77

while.end316:                                     ; preds = %cond.end, %cond.false
  ret void

if.then247.1:                                     ; preds = %for.inc
  store i32 %result.2510, i32* %exit_status245.1, align 4, !tbaa !34
  %111 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.1 = icmp eq i32 %111, 0
  br i1 %cmp253.1, label %land.rhs254.1, label %land.end260.1

land.rhs254.1:                                    ; preds = %if.then247.1
  %owner_is_sleeping258.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 11
  %112 = load i8, i8* %owner_is_sleeping258.1, align 4, !tbaa !37, !range !17
  br label %land.end260.1

land.end260.1:                                    ; preds = %land.rhs254.1, %if.then247.1
  %113 = phi i8 [ 0, %if.then247.1 ], [ %112, %land.rhs254.1 ]
  %114 = and i8 %wake_owners.1, 1
  %or.1 = or i8 %113, %114
  br label %for.inc.1

for.inc.1:                                        ; preds = %land.end260.1, %for.inc
  %wake_owners.1.1 = phi i8 [ %or.1, %land.end260.1 ], [ %wake_owners.1, %for.inc ]
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %if.end271.loopexit.unr-lcssa, label %do.end243, !llvm.loop !78
}

; Function Attrs: nounwind
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %4 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #11
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %7 = ptrtoint %struct.halide_mutex* %mutex to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %6, i64 %7) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #0 align 2 {
entry:
  %call = tail call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #17
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)***
  %state.i60 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  br label %while.cond

while.cond:                                       ; preds = %cleanup, %entry
  %data_location.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %head, %entry ], [ %data_location.1, %cleanup ]
  %prev.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ null, %entry ], [ %prev.1, %cleanup ]
  %data.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %0, %entry ], [ %data.1, %cleanup ]
  %retval.0 = phi i64 [ undef, %entry ], [ %retval.1, %cleanup ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, null
  br i1 %cmp.not, label %while.end22, label %while.body

while.body:                                       ; preds = %while.cond
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 1
  %2 = load atomic i64, i64* %sleep_address monotonic, align 8
  %cmp2 = icmp eq i64 %2, %addr
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 2
  %3 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next3, align 8, !tbaa !79
  br i1 %cmp2, label %if.then, label %cleanup

if.then:                                          ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.0, align 8, !tbaa !10
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp4 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %4, %data.0
  br i1 %cmp4, label %if.then5, label %while.cond7.preheader

while.cond7.preheader:                            ; preds = %if.then
  %cmp872.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, null
  br i1 %cmp872.not, label %if.end, label %while.body9

if.then5:                                         ; preds = %if.then
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.0, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end

while.body9:                                      ; preds = %while.cond7.preheader, %while.body9
  %data2.073 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %6, %while.body9 ], [ %3, %while.cond7.preheader ]
  %sleep_address10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 1
  %5 = load atomic i64, i64* %sleep_address10 monotonic, align 8
  %cmp11 = icmp eq i64 %5, %addr
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next12, align 8, !tbaa !79
  %cmp8 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, null
  %7 = or i1 %cmp11, %cmp8
  br i1 %7, label %if.end.loopexit, label %while.body9, !llvm.loop !88

if.end.loopexit:                                  ; preds = %while.body9
  %frombool = zext i1 %cmp11 to i8
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit, %if.then5, %while.cond7.preheader
  %more_waiters.1 = phi i8 [ 0, %if.then5 ], [ 0, %while.cond7.preheader ], [ %frombool, %if.end.loopexit ]
  %tobool13 = icmp ne i8 %more_waiters.1, 0
  %vtable = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable, i64 2
  %8 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn, align 8
  %call14 = tail call i64 %8(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 1, i1 zeroext %tobool13) #16
  %unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 3
  store i64 %call14, i64* %unpark_info, align 8, !tbaa !89
  %mutex.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 0
  %call.i = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i) #16
  %9 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i61 = and i64 %9, 2
  %cmp.i62 = icmp ne i64 %and.i61, 0
  %cmp3.not.i63 = icmp ult i64 %9, 4
  %or.cond.i64 = or i1 %cmp3.not.i63, %cmp.i62
  br i1 %or.cond.i64, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, label %if.then.i65

if.then.i65:                                      ; preds = %if.end
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66: ; preds = %if.then.i65, %if.end
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 1
  %call.i67 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i69 = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i) #16
  %10 = zext i8 %more_waiters.1 to i64
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %next3, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %data.0, %while.body ]
  %data.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %3, %while.body ]
  %retval.1 = phi i64 [ %10, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %retval.0, %while.body ]
  br i1 %cmp2, label %cleanup27, label %while.cond, !llvm.loop !91

while.end22:                                      ; preds = %while.cond
  %vtable23 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn24 = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable23, i64 2
  %11 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn24, align 8
  %call25 = tail call i64 %11(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 0, i1 zeroext false) #16
  %12 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i = and i64 %12, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %12, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup27, label %if.then.i

if.then.i:                                        ; preds = %while.end22
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup27

cleanup27:                                        ; preds = %cleanup, %if.then.i, %while.end22
  %retval.2 = phi i64 [ 0, %while.end22 ], [ 0, %if.then.i ], [ %retval.1, %cleanup ]
  ret i64 %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) local_unnamed_addr #0 {
entry:
  %mul.i = mul i64 %addr, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit: ; preds = %if.then.i, %entry
  ret %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx
}

declare i32 @pthread_mutex_lock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %expected.0 = phi i64 [ %0, %entry ], [ %3, %if.end ]
  %and = and i64 %expected.0, 2
  %tobool.not = icmp ne i64 %and, 0
  %cmp = icmp ult i64 %expected.0, 4
  %or.cond = or i1 %cmp, %tobool.not
  br i1 %or.cond, label %cleanup75, label %if.end

if.end:                                           ; preds = %while.cond
  %or = or i64 %expected.0, 2
  %1 = cmpxchg weak i64* %state, i64 %expected.0, i64 %or acquire monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  br i1 %2, label %while.cond11, label %while.cond

while.cond11:                                     ; preds = %if.end, %cleanup70
  %.pn.pn = phi { i64, i1 } [ %.pn, %cleanup70 ], [ %1, %if.end ]
  %expected.3 = extractvalue { i64, i1 } %.pn.pn, 0
  %and13 = and i64 %expected.3, -4
  %4 = inttoptr i64 %and13 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  %tail14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %4, i64 0, i32 3
  %tail.0143 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %cmp16144 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0143, null
  br i1 %cmp16144, label %while.body17, label %while.end23

while.body17:                                     ; preds = %while.cond11, %do.end
  %current.0145 = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %5, %do.end ], [ %4, %while.cond11 ]
  %next18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next18, align 8, !tbaa !94
  %cmp19.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, null
  br i1 %cmp19.not, label %if.then20, label %do.end

if.then20:                                        ; preds = %while.body17
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.5, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then20, %while.body17
  %prev = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev, align 8, !tbaa !95
  %tail22 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 3
  %tail.0 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail22, align 8, !tbaa !92
  %cmp16 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0, null
  br i1 %cmp16, label %while.body17, label %while.end23, !llvm.loop !96

while.end23:                                      ; preds = %do.end, %while.cond11
  %tail.0.lcssa = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %tail.0143, %while.cond11 ], [ %tail.0, %do.end ]
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %and25 = and i64 %expected.3, 1
  %tobool26.not = icmp eq i64 %and25, 0
  br i1 %tobool26.not, label %if.end35, label %if.then27

if.then27:                                        ; preds = %while.end23
  %and29 = and i64 %expected.3, -3
  %6 = cmpxchg weak i64* %state, i64 %expected.3, i64 %and29 acq_rel monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %cleanup75, label %cleanup70

if.end35:                                         ; preds = %while.end23
  %prev36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 2
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev36, align 8, !tbaa !95
  %cmp37 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, null
  br i1 %cmp37, label %while.body41, label %if.else62

while.body41:                                     ; preds = %if.end35, %if.end47
  %expected.5146 = phi i64 [ %11, %if.end47 ], [ %expected.3, %if.end35 ]
  %and43 = and i64 %expected.5146, 1
  %9 = cmpxchg weak i64* %state, i64 %expected.5146, i64 %and43 acq_rel monotonic
  %10 = extractvalue { i64, i1 } %9, 1
  br i1 %10, label %if.end66, label %if.end47

if.end47:                                         ; preds = %while.body41
  %11 = extractvalue { i64, i1 } %9, 0
  %cmp49 = icmp ult i64 %11, 4
  br i1 %cmp49, label %while.body41, label %cleanup70, !llvm.loop !97

if.else62:                                        ; preds = %if.end35
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %12 = atomicrmw and i64* %state, i64 -3 release
  br label %if.end66

if.end66:                                         ; preds = %while.body41, %if.else62
  %mutex.i103 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 0
  %call.i104 = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i103) #16
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 1
  %call.i101 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i103) #16
  br label %cleanup75

cleanup70:                                        ; preds = %if.end47, %if.then27
  %.pn = phi { i64, i1 } [ %6, %if.then27 ], [ %9, %if.end47 ]
  fence acquire
  br label %while.cond11

cleanup75:                                        ; preds = %while.cond, %if.then27, %if.end66
  ret void
}

declare i32 @pthread_cond_signal(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_unlock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %node = alloca %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", align 8
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i8*
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 2
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 0
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 1
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 1
  %tail.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 3
  %2 = ptrtoint %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i64
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i to <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>*
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %while.cond.outer.backedge, %entry
  %expected.0.ph = phi i64 [ %0, %entry ], [ %expected.0.ph.be, %while.cond.outer.backedge ]
  %spinner.sroa.0.0.ph = phi i32 [ 40, %entry ], [ %spinner.sroa.0.0.ph.be, %while.cond.outer.backedge ]
  %and46 = and i64 %expected.0.ph, 1
  %tobool.not47 = icmp eq i64 %and46, 0
  br i1 %tobool.not47, label %if.then, label %if.end4

if.then:                                          ; preds = %while.cond.outer, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %expected.048 = phi i64 [ %6, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit ], [ %expected.0.ph, %while.cond.outer ]
  %or = or i64 %expected.048, 1
  %4 = cmpxchg weak i64* %state, i64 %expected.048, i64 %or acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup23, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit: ; preds = %if.then
  %6 = extractvalue { i64, i1 } %4, 0
  %and = and i64 %6, 1
  %tobool.not = icmp eq i64 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end4.loopexit

if.end4.loopexit:                                 ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %7 = extractvalue { i64, i1 } %4, 0
  br label %if.end4

if.end4:                                          ; preds = %if.end4.loopexit, %while.cond.outer
  %expected.0.lcssa = phi i64 [ %expected.0.ph, %while.cond.outer ], [ %7, %if.end4.loopexit ]
  %cmp.not = icmp ugt i64 %expected.0.lcssa, 3
  %cmp.i = icmp sgt i32 %spinner.sroa.0.0.ph, 0
  %or.cond = and i1 %cmp.i, %cmp.not
  br i1 %or.cond, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, label %if.end9

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit: ; preds = %if.end4
  %cmp4.i = icmp sgt i32 %spinner.sroa.0.0.ph, 1
  br i1 %cmp4.i, label %if.then7, label %if.end9

if.then7:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit
  %dec.i = add nsw i32 %spinner.sroa.0.0.ph, -1
  call void @halide_thread_yield() #16
  %8 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond.outer.backedge

if.end9:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, %if.end4
  %spinner.sroa.0.2 = phi i32 [ %spinner.sroa.0.0.ph, %if.end4 ], [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit ]
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1) #11
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %call.i.i29 = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #16
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #16
  store <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>* %3, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %and10 = and i64 %expected.0.lcssa, -4
  %cmp11 = icmp eq i64 %and10, 0
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  br label %if.end13

if.else:                                          ; preds = %if.end9
  %9 = inttoptr i64 %and10 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %9, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i, align 8, !tbaa !94
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  %and15 = and i64 %expected.0.lcssa, 3
  %or16 = or i64 %and15, %2
  %10 = cmpxchg weak i64* %state, i64 %expected.0.lcssa, i64 %or16 release monotonic
  %11 = extractvalue { i64, i1 } %10, 1
  br i1 %11, label %if.then19, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit: ; preds = %if.end13
  %12 = extractvalue { i64, i1 } %10, 0
  br label %if.end22

if.then19:                                        ; preds = %if.end13
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %13 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %13, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %if.then19, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %14 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %14, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %if.then19
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %15 = load atomic i64, i64* %state monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit
  %expected.3 = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %12, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %spinner.sroa.0.3 = phi i32 [ 40, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %spinner.sroa.0.2, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %call.i.i = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #16
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1) #11
  br label %while.cond.outer.backedge

while.cond.outer.backedge:                        ; preds = %if.end22, %if.then7
  %expected.0.ph.be = phi i64 [ %8, %if.then7 ], [ %expected.3, %if.end22 ]
  %spinner.sroa.0.0.ph.be = phi i32 [ %dec.i, %if.then7 ], [ %spinner.sroa.0.3, %if.end22 ]
  br label %while.cond.outer

cleanup23:                                        ; preds = %if.then
  ret void
}

declare i32 @pthread_mutex_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_wait(%struct.pthread_mutex_t*, %struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_cond_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %lock_state, align 8, !tbaa !43
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 3
  ret i1 %cmp
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  %0 = select i1 %more_waiters, i64 2, i64 0
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %1 = load i64*, i64** %lock_state, align 8, !tbaa !43
  store atomic i64 %0, i64* %1 release, align 8
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak void @halide_cond_broadcast(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !99
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !101
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5, i64 %0, i64 0) #16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = load atomic i32, i32* %value acquire, align 4
  %sub12 = sub nsw i32 %0, %n
  %cmp113 = icmp sgt i32 %sub12, -1
  br i1 %cmp113, label %land.rhs, label %return

land.rhs:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit
  %sub15 = phi i32 [ %sub, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %sub12, %if.end ]
  %expected.014 = phi i32 [ %3, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %0, %if.end ]
  %1 = cmpxchg weak i32* %value, i32 %expected.014, i32 %sub15 acq_rel monotonic
  %2 = extractvalue { i32, i1 } %1, 1
  br i1 %2, label %return.loopexit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit: ; preds = %land.rhs
  %3 = extractvalue { i32, i1 } %1, 0
  %sub = sub nsw i32 %3, %n
  %cmp1 = icmp sgt i32 %sub, -1
  br i1 %cmp1, label %land.rhs, label %return.loopexit

return.loopexit:                                  ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit, %land.rhs
  %4 = extractvalue { i32, i1 } %1, 1
  br label %return

return:                                           ; preds = %return.loopexit, %if.end, %entry
  %retval.0 = phi i1 [ true, %entry ], [ false, %if.end ], [ %4, %return.loopexit ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_cond_wait(%struct.halide_mutex* %cond, %struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #11
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !102
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  %2 = bitcast %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i to %struct.halide_mutex**
  store %struct.halide_mutex* %mutex, %struct.halide_mutex** %2, align 8, !tbaa !104
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %4 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %3, i64 %4) #16
  %5 = ptrtoint %struct.halide_mutex* %mutex to i64
  %cmp.not.i = icmp eq i64 %call.i, %5
  %6 = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %7 = cmpxchg weak i64* %6, i64 0, i64 1 acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  %9 = load atomic i64, i64* %6 monotonic, align 8
  %10 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i to i8*
  %11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0
  br label %while.cond.outer.i.i.i

while.cond.outer.i.i.i:                           ; preds = %while.cond.outer.i.i.i.backedge, %if.then.i.i
  %expected.0.ph.i.i.i = phi i64 [ %9, %if.then.i.i ], [ %expected.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i.i = phi i32 [ 40, %if.then.i.i ], [ %spinner.sroa.0.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %and55.i.i.i = and i64 %expected.0.ph.i.i.i, 1
  %tobool.not56.i.i.i = icmp eq i64 %and55.i.i.i, 0
  br i1 %tobool.not56.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i

if.then.i.i.i:                                    ; preds = %while.cond.outer.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %expected.057.i.i.i = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i ], [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ]
  %or.i.i.i = or i64 %expected.057.i.i.i, 1
  %13 = cmpxchg weak i64* %6, i64 %expected.057.i.i.i, i64 %or.i.i.i acquire monotonic
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then.i.i.i
  %15 = extractvalue { i64, i1 } %13, 0
  %and.i.i.i = and i64 %15, 1
  %tobool.not.i.i.i = icmp eq i64 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i.loopexit

if.end4.i.i.i.loopexit:                           ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %16 = extractvalue { i64, i1 } %13, 0
  br label %if.end4.i.i.i

if.end4.i.i.i:                                    ; preds = %if.end4.i.i.i.loopexit, %while.cond.outer.i.i.i
  %expected.0.lcssa.i.i.i = phi i64 [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ], [ %16, %if.end4.i.i.i.loopexit ]
  %cmp.i.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, label %if.end8.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i: ; preds = %if.end4.i.i.i
  %cmp4.i.not.i.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i.i, 1
  br i1 %cmp4.i.not.i.i.i, label %if.end8.i.i.i, label %if.then6.i.i.i

if.then6.i.i.i:                                   ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i
  %dec.i.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i.i, -1
  call void @halide_thread_yield() #16
  %17 = load atomic i64, i64* %6 monotonic, align 8
  br label %while.cond.outer.i.i.i.backedge

if.end8.i.i.i:                                    ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, %if.end4.i.i.i
  %spinner.sroa.0.152.i.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i ], [ %spinner.sroa.0.0.ph.i.i.i, %if.end4.i.i.i ]
  %and9.i.i.i = and i64 %expected.0.lcssa.i.i.i, 2
  %cmp.i.i.i = icmp eq i64 %and9.i.i.i, 0
  br i1 %cmp.i.i.i, label %if.then10.i.i.i, label %if.end19.i.i.i

if.then10.i.i.i:                                  ; preds = %if.end8.i.i.i
  %or12.i.i.i = or i64 %expected.0.lcssa.i.i.i, 2
  %18 = cmpxchg weak i64* %6, i64 %expected.0.lcssa.i.i.i, i64 %or12.i.i.i monotonic monotonic
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %if.end19.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then10.i.i.i
  %20 = extractvalue { i64, i1 } %18, 0
  br label %while.cond.outer.i.i.i.backedge

if.end19.i.i.i:                                   ; preds = %if.then10.i.i.i, %if.end8.i.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !41
  store i64* %6, i64** %lock_state2.i.i.i.i, align 8, !tbaa !43
  %call21.i.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %12, i64 %5) #16
  %cmp22.i.i.i = icmp eq i64 %call21.i.i.i, %5
  br i1 %cmp22.i.i.i, label %cleanup30.critedge.i.i.i, label %if.end24.i.i.i

if.end24.i.i.i:                                   ; preds = %if.end19.i.i.i
  %21 = load atomic i64, i64* %6 monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %while.cond.outer.i.i.i.backedge

while.cond.outer.i.i.i.backedge:                  ; preds = %if.end24.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i, %if.then6.i.i.i
  %expected.0.ph.i.i.i.be = phi i64 [ %20, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ %21, %if.end24.i.i.i ], [ %17, %if.then6.i.i.i ]
  %spinner.sroa.0.0.ph.i.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ 40, %if.end24.i.i.i ], [ %dec.i.i.i.i, %if.then6.i.i.i ]
  br label %while.cond.outer.i.i.i

cleanup30.critedge.i.i.i:                         ; preds = %if.end19.i.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.else.i:                                        ; preds = %entry
  %22 = load atomic i64, i64* %6 monotonic, align 8
  %and.i = and i64 %22, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %if.then2.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.then2.i:                                       ; preds = %if.else.i
  call void @halide_print(i8* null, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str.5.6, i64 0, i64 0)) #16
  call void @abort() #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit: ; preds = %if.then.i.i.i, %if.then2.i, %if.else.i, %cleanup30.critedge.i.i.i, %if.then.i
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #4 align 2 {
entry:
  %queue_data = alloca %"struct.Halide::Runtime::Internal::Synchronization::queue_data", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %0) #11
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 0
  %call.i.i = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #16
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 1
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #16
  %sleep_address.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 1
  store i64 0, i64* %sleep_address.i, align 8, !tbaa !105
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  %unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 3
  store i64 0, i64* %unpark_info.i, align 8, !tbaa !89
  %call = call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #17
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call2 = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #16
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %4 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %4, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %4, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup

if.end:                                           ; preds = %entry
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  store i64 %addr, i64* %sleep_address.i, align 8, !tbaa !105
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !109
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, i64 0, i32 2
  %head.sink = select i1 %cmp.not, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head.sink, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %state.i23 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %7 = atomicrmw and i64* %state.i23, i64 -2 release
  %and.i24 = and i64 %7, 2
  %cmp.i25 = icmp ne i64 %and.i24, 0
  %cmp3.not.i26 = icmp ult i64 %7, 4
  %or.cond.i27 = or i1 %cmp3.not.i26, %cmp.i25
  br i1 %or.cond.i27, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, label %if.then.i28

if.then.i28:                                      ; preds = %if.end
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29: ; preds = %if.then.i28, %if.end
  %8 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)***
  %vtable9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*** %8, align 8, !tbaa !41
  %vfn10 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vtable9, i64 1
  %9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vfn10, align 8
  call void %9(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) #16
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %10 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %10, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %11 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %11, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %if.then.i, %if.then
  %unpark_info.i.sink = phi i64* [ %unpark_info.i, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %invalid_unpark_info.i, %if.then ], [ %invalid_unpark_info.i, %if.then.i ]
  %12 = load i64, i64* %unpark_info.i.sink, align 8, !tbaa !110
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  %call.i.i22 = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #16
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %0) #11
  ret i64 %12
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store atomic i64 %3, i64* %0 monotonic, align 8
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp4.not = icmp eq i64 %1, %3
  br i1 %cmp4.not, label %cleanup, label %if.then5

if.then5:                                         ; preds = %if.else
  %invalid_unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 %3, i64* %invalid_unpark_info, align 8, !tbaa !108
  br label %cleanup

cleanup:                                          ; preds = %if.then5, %if.else, %if.then
  %retval.0 = phi i1 [ false, %if.then5 ], [ true, %if.else ], [ true, %if.then ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this) unnamed_addr #4 comdat align 2 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %0 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0, i64 0, i32 0
  %1 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  br i1 %2, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %3 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %5 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %8 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0 to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %7, i64 %8) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr_from, i64 %addr_to, i64 %unpark_info) local_unnamed_addr #4 align 2 {
entry:
  %buckets = alloca %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  call void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %buckets, i64 %addr_from, i64 %addr_to) #17
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #16
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  br label %cleanup

if.end:                                           ; preds = %entry
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %cmp.not92 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  br i1 %cmp.not92, label %if.end38, label %while.body

while.body:                                       ; preds = %if.end, %if.end22
  %wakeup.098 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end22 ], [ null, %if.end ]
  %requeue_tail.097 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.2, %if.end22 ], [ null, %if.end ]
  %requeue.096 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.3, %if.end22 ], [ null, %if.end ]
  %data.095 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %7, %if.end22 ], [ %5, %if.end ]
  %prev.094 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.1, %if.end22 ], [ null, %if.end ]
  %data_location.093 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.1, %if.end22 ], [ %head, %if.end ]
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 1
  %6 = load atomic i64, i64* %sleep_address monotonic, align 8
  %next2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 2
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next2, align 8, !tbaa !79
  %cmp3 = icmp eq i64 %6, %addr_from
  br i1 %cmp3, label %if.then4, label %if.end22

if.then4:                                         ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.093, align 8, !tbaa !10
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %8, i64 0, i32 2
  %9 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp6 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %9, %data.095
  br i1 %cmp6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.then4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.094, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.then4
  %10 = load i8, i8* %1, align 8, !tbaa !106, !range !17
  %tobool = icmp ne i8 %10, 0
  %cmp11 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.098, null
  %or.cond = and i1 %cmp11, %tobool
  br i1 %or.cond, label %if.end22, label %if.else

if.else:                                          ; preds = %if.end10
  %cmp13 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.096, null
  br i1 %cmp13, label %if.end17, label %if.else15

if.else15:                                        ; preds = %if.else
  %next16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.097, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next16, align 8, !tbaa !79
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.else
  %requeue.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.else15 ], [ %data.095, %if.else ]
  store atomic i64 %addr_to, i64* %sleep_address monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.end17, %if.end10, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.093, %if.end10 ], [ %data_location.093, %if.end17 ], [ %next2, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.094, %if.end10 ], [ %prev.094, %if.end17 ], [ %data.095, %while.body ]
  %requeue.3 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.end10 ], [ %requeue.1, %if.end17 ], [ %requeue.096, %while.body ]
  %requeue_tail.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.097, %if.end10 ], [ %data.095, %if.end17 ], [ %requeue_tail.097, %while.body ]
  %wakeup.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.095, %if.end10 ], [ %wakeup.098, %if.end17 ], [ %wakeup.098, %while.body ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !113

while.end:                                        ; preds = %if.end22
  %cmp23.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, null
  br i1 %cmp23.not, label %if.end38, label %if.then24

if.then24:                                        ; preds = %while.end
  %next25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next25, align 8, !tbaa !79
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %11 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %head26 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 1
  %12 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head26, align 8, !tbaa !109
  %cmp27 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %12, null
  br i1 %cmp27, label %if.end35, label %if.else31

if.else31:                                        ; preds = %if.then24
  %tail33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  %13 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail33, align 8, !tbaa !85
  %next34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %13, i64 0, i32 2
  br label %if.end35

if.end35:                                         ; preds = %if.else31, %if.then24
  %next34.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %next34, %if.else31 ], [ %head26, %if.then24 ]
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next34.sink, align 8, !tbaa !10
  %tail37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail37, align 8, !tbaa !85
  br label %if.end38

if.end38:                                         ; preds = %if.end35, %while.end, %if.end
  %cmp23106 = phi i1 [ true, %if.end35 ], [ false, %while.end ], [ false, %if.end ]
  %wakeup.0.lcssa105 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end35 ], [ %wakeup.2, %while.end ], [ null, %if.end ]
  %cmp39 = icmp ne %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, null
  %14 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)***
  %vtable41 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*** %14, align 8, !tbaa !41
  %vfn42 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vtable41, i64 3
  %15 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vfn42, align 8
  call void %15(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %cmp39, i1 zeroext %cmp23106) #16
  br i1 %cmp39, label %if.then44, label %if.else48

if.then44:                                        ; preds = %if.end38
  %unpark_info45 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 3
  store i64 %unpark_info, i64* %unpark_info45, align 8, !tbaa !89
  %mutex.i89 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 0
  %call.i90 = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i89) #16
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 1
  %call.i88 = call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i89) #16
  br label %if.end49

if.else48:                                        ; preds = %if.end38
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.then44
  %16 = load i8, i8* %1, align 8
  %17 = and i8 %16, 1
  %tobool52 = icmp ne i8 %17, 0
  %18 = and i1 %cmp39, %tobool52
  %conv = zext i1 %18 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then
  %retval.0 = phi i32 [ %conv, %if.end49 ], [ 0, %if.then ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* noalias sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %agg.result, i64 %addr_from, i64 %addr_to) local_unnamed_addr #4 {
entry:
  %mul.i = mul i64 %addr_from, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %mul.i37 = mul i64 %addr_to, -7046029254386353131
  %shr.i38 = lshr i64 %mul.i37, 54
  %cmp = icmp eq i64 %shr.i, %shr.i38
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i42, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %cleanup, label %if.then.i43

if.then.i43:                                      ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp2 = icmp ult i64 %shr.i, %shr.i38
  br i1 %cmp2, label %if.then3, label %if.else9

if.then3:                                         ; preds = %if.else
  %arrayidx5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %state.i52 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0, i32 0
  %2 = cmpxchg weak i64* %state.i52, i64 0, i64 1 acquire monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, label %if.then.i53

if.then.i53:                                      ; preds = %if.then3
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54: ; preds = %if.then.i53, %if.then3
  %state.i49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0, i32 0
  %4 = cmpxchg weak i64* %state.i49, i64 0, i64 1 acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup, label %if.then.i50

if.then.i50:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #16
  br label %cleanup

if.else9:                                         ; preds = %if.else
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %arrayidx13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0, i32 0
  %6 = cmpxchg weak i64* %state.i39, i64 0, i64 1 acquire monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, label %if.then.i40

if.then.i40:                                      ; preds = %if.else9
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41: ; preds = %if.then.i40, %if.else9
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0, i32 0
  %8 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41
  %mutex15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex15) #16
  br label %cleanup

cleanup:                                          ; preds = %if.then.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, %if.then.i50, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, %if.then.i43, %if.then
  %arrayidx13.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx5, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx5, %if.then.i50 ], [ %arrayidx13, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx13, %if.then.i ]
  %arrayidx11.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx6, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx6, %if.then.i50 ], [ %arrayidx11, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx11, %if.then.i ]
  %from2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from2.i, align 8, !tbaa !10
  %to3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to3.i, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) local_unnamed_addr #0 {
entry:
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %1 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %2 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %2, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %2, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end15, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %if.end15

if.else:                                          ; preds = %entry
  %cmp4 = icmp ugt %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %state.i25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %3 = atomicrmw and i64* %state.i25, i64 -2 release
  %and.i26 = and i64 %3, 2
  %cmp.i27 = icmp ne i64 %and.i26, 0
  %cmp3.not.i28 = icmp ult i64 %3, 4
  %or.cond.i29 = or i1 %cmp3.not.i28, %cmp.i27
  br i1 %or.cond.i29, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, label %if.then.i30

if.then.i30:                                      ; preds = %if.then5
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31: ; preds = %if.then.i30, %if.then5
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %state.i32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0, i32 0
  %5 = atomicrmw and i64* %state.i32, i64 -2 release
  %and.i33 = and i64 %5, 2
  %cmp.i34 = icmp ne i64 %and.i33, 0
  %cmp3.not.i35 = icmp ult i64 %5, 4
  %or.cond.i36 = or i1 %cmp3.not.i35, %cmp.i34
  br i1 %or.cond.i36, label %if.end15, label %if.then.i37

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31
  %mutex9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex9) #16
  br label %if.end15

if.else10:                                        ; preds = %if.else
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0, i32 0
  %6 = atomicrmw and i64* %state.i39, i64 -2 release
  %and.i40 = and i64 %6, 2
  %cmp.i41 = icmp ne i64 %and.i40, 0
  %cmp3.not.i42 = icmp ult i64 %6, 4
  %or.cond.i43 = or i1 %cmp3.not.i42, %cmp.i41
  br i1 %or.cond.i43, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, label %if.then.i44

if.then.i44:                                      ; preds = %if.else10
  %mutex12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex12) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45: ; preds = %if.then.i44, %if.else10
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %state.i46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0, i32 0
  %8 = atomicrmw and i64* %state.i46, i64 -2 release
  %and.i47 = and i64 %8, 2
  %cmp.i48 = icmp ne i64 %and.i47, 0
  %cmp3.not.i49 = icmp ult i64 %8, 4
  %or.cond.i50 = or i1 %cmp3.not.i49, %cmp.i48
  br i1 %or.cond.i50, label %if.end15, label %if.then.i51

if.then.i51:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #16
  br label %if.end15

if.end15:                                         ; preds = %if.then.i51, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, %if.then.i37, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, %if.then.i, %if.then
  ret void
}

; Function Attrs: nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #4 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !99
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  %cmp.not = icmp eq i64 %1, %3
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  store atomic i64 0, i64* %0 monotonic, align 8
  %4 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %4, i64 0, i32 0
  %5 = load atomic i64, i64* %state.i monotonic, align 8
  %and11.i = and i64 %5, 1
  %tobool.not12.i = icmp eq i64 %and11.i, 0
  br i1 %tobool.not12.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i
  %val.013.i = phi i64 [ %8, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ %5, %if.end ]
  %or.i = or i64 %val.013.i, 2
  %6 = cmpxchg weak i64* %state.i, i64 %val.013.i, i64 %or.i monotonic monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i: ; preds = %if.end.i
  %8 = extractvalue { i64, i1 } %6, 0
  %and.i = and i64 %8, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit: ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i, %if.end.i, %if.end
  %tobool.not.lcssa.i = phi i8 [ 1, %if.end ], [ 1, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ 0, %if.end.i ]
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  store i8 %tobool.not.lcssa.i, i8* %unpark_one, align 8, !tbaa !106
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, %entry
  ret i1 %cmp.not
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  %0 = load i8, i8* %unpark_one, align 8, !tbaa !106, !range !17
  %tobool.not = icmp ne i8 %0, 0
  %1 = and i1 %tobool.not, %some_requeued
  br i1 %1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, i64 0, i32 0
  %3 = atomicrmw or i64* %state.i, i64 2 monotonic
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() local_unnamed_addr #0 {
entry:
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.end, label %cond.true

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #16
  %tobool2.not = icmp eq i8* %call1, null
  br i1 %tobool2.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end, %entry
  %threads_str.010 = phi i8* [ %call1, %if.end ], [ %call, %entry ]
  %call3 = tail call i32 @atoi(i8* nonnull %threads_str.010) #16
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = tail call i32 @halide_host_cpu_count() #16
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal13worker_threadEPv(i8* %arg) #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %0 = bitcast i8* %arg to %"struct.Halide::Runtime::Internal::work"*
  tail call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %0) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @malloc(i64 24) #16
  %f1 = bitcast i8* %call to void (i8*)**
  store void (i8*)* %f, void (i8*)** %f1, align 8, !tbaa !115
  %closure2 = getelementptr inbounds i8, i8* %call, i64 8
  %0 = bitcast i8* %closure2 to i8**
  store i8* %closure, i8** %0, align 8, !tbaa !117
  %handle = getelementptr inbounds i8, i8* %call, i64 16
  %1 = bitcast i8* %handle to i64*
  store i64 0, i64* %1, align 8, !tbaa !118
  %call4 = tail call i32 @pthread_create(i64* nonnull %1, i8* null, i8* (i8*)* nonnull @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv, i8* %call) #16
  %2 = bitcast i8* %call to %struct.halide_thread*
  ret %struct.halide_thread* %2
}

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv(i8* %arg) #0 {
entry:
  %f = bitcast i8* %arg to void (i8*)**
  %0 = load void (i8*)*, void (i8*)** %f, align 8, !tbaa !115
  %closure = getelementptr inbounds i8, i8* %arg, i64 8
  %1 = bitcast i8* %closure to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !117
  tail call void %0(i8* %2) #16
  ret i8* null
}

declare i32 @pthread_create(i64*, i8*, i8* (i8*)*, i8*) local_unnamed_addr #1

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  %conv = sext i32 %num_tasks to i64
  %0 = alloca %"struct.Halide::Runtime::Internal::work", i64 %conv, align 8
  %cmp76 = icmp sgt i32 %num_tasks, 0
  br i1 %cmp76, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %num_tasks.addr.0.lcssa = phi i32 [ %num_tasks, %entry ], [ %num_tasks.addr.1, %for.inc ]
  %cmp17 = icmp eq i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp17, label %cleanup, label %if.end19

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv82 = phi i64 [ %indvars.iv.next83, %for.inc ], [ 0, %entry ]
  %num_tasks.addr.078 = phi i32 [ %num_tasks.addr.1, %for.inc ], [ %num_tasks, %entry ]
  %tasks.addr.077 = phi %struct.halide_parallel_task_t* [ %tasks.addr.1, %for.inc ], [ %tasks, %entry ]
  %extent = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 0, i32 6
  %1 = load i32, i32* %extent, align 8, !tbaa !119
  %cmp1 = icmp slt i32 %1, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %dec = add nsw i32 %num_tasks.addr.078, -1
  br label %for.inc

if.end:                                           ; preds = %for.body
  %incdec.ptr = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 1
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82
  %2 = bitcast %"struct.Halide::Runtime::Internal::work"* %arrayidx to i8*
  %3 = bitcast %struct.halide_parallel_task_t* %tasks.addr.077 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %2, i8* nonnull align 8 dereferenceable(56) %3, i64 56, i1 false), !tbaa.struct !120
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 1
  store i32 (i8*, i32, i8*)* null, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 7
  store i8* %user_context, i8** %user_context6, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 5
  %4 = bitcast %"struct.Halide::Runtime::Internal::work"** %parent_job to i8**
  store i8* %task_parent, i8** %4, align 8, !tbaa !40
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %tasks.addr.1 = phi %struct.halide_parallel_task_t* [ %tasks.addr.077, %if.then ], [ %incdec.ptr, %if.end ]
  %num_tasks.addr.1 = phi i32 [ %dec, %if.then ], [ %num_tasks.addr.078, %if.end ]
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %5 = sext i32 %num_tasks.addr.1 to i64
  %cmp = icmp slt i64 %indvars.iv.next83, %5
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !121

if.end19:                                         ; preds = %for.cond.cleanup
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %6 = bitcast i8* %task_parent to %"struct.Halide::Runtime::Internal::work"*
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_tasks.addr.0.lcssa, %"struct.Halide::Runtime::Internal::work"* nonnull %0, %"struct.Halide::Runtime::Internal::work"* %6) #17
  %cmp2373 = icmp sgt i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp2373, label %for.body25.preheader, label %for.cond.cleanup24

for.body25.preheader:                             ; preds = %if.end19
  %wide.trip.count = zext i32 %num_tasks.addr.0.lcssa to i64
  br label %for.body25

for.cond.cleanup24:                               ; preds = %for.body25, %if.end19
  %exit_status20.0.lcssa = phi i32 [ 0, %if.end19 ], [ %spec.select, %for.body25 ]
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %cleanup

for.body25:                                       ; preds = %for.body25, %for.body25.preheader
  %indvars.iv = phi i64 [ 0, %for.body25.preheader ], [ %indvars.iv.next, %for.body25 ]
  %exit_status20.074 = phi i32 [ 0, %for.body25.preheader ], [ %spec.select, %for.body25 ]
  %add.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %add.ptr) #17
  %exit_status28 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 9
  %7 = load i32, i32* %exit_status28, align 4, !tbaa !34
  %cmp29.not = icmp eq i32 %7, 0
  %spec.select = select i1 %cmp29.not, i32 %exit_status20.074, i32 %7
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup24, label %for.body25, !llvm.loop !122

cleanup:                                          ; preds = %for.cond.cleanup24, %for.cond.cleanup
  %retval.0 = phi i32 [ %exit_status20.0.lcssa, %for.cond.cleanup24 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #2 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  store atomic i32 %n, i32* %value release, align 4
  ret i32 %n
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = atomicrmw add i32* %value, i32 %n acq_rel
  %cmp = icmp eq i32 %0, 0
  %cmp1 = icmp ne i32 %n, 0
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %add = add nsw i32 %0, %n
  ret i32 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_pool_cleanup() #0 {
entry:
  tail call void @halide_shutdown_thread_pool() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp4 = icmp sgt i32 %1, 0
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %call.i = tail call i8* @memset(i8* nonnull bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i32 0, i64 2116) #16
  br label %if.end

for.body:                                         ; preds = %if.then, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %indvars.iv
  %2 = load %struct.halide_thread*, %struct.halide_thread** %arrayidx, align 8, !tbaa !10
  tail call void @halide_join_thread(%struct.halide_thread* %2) #17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %3 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %4 = sext i32 %3 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %4
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !123

if.end:                                           ; preds = %for.cond.cleanup, %entry
  ret void
}

declare i8* @memset(i8*, i32, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  %ret = alloca i8*, align 8
  %0 = bitcast %struct.halide_thread* %thread_arg to %"struct.Halide::Runtime::Internal::spawned_thread"*
  %1 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #11
  store i8* null, i8** %ret, align 8, !tbaa !10
  %handle = getelementptr inbounds %"struct.Halide::Runtime::Internal::spawned_thread", %"struct.Halide::Runtime::Internal::spawned_thread"* %0, i64 0, i32 2
  %2 = load i64, i64* %handle, align 8, !tbaa !118
  %call = call i32 @pthread_join(i64 %2, i8** nonnull %ret) #16
  %3 = bitcast %struct.halide_thread* %thread_arg to i8*
  call void @free(i8* %3) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #11
  ret void
}

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #1

; Function Attrs: nounwind
define weak void @halide_cond_signal(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !124
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !126
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5) #16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  ret i1 true
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !124
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_malloc(i8* null, i64 8) #16
  %0 = bitcast i8* %call to %struct.halide_mutex_array*
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %conv = sext i32 %sz to i64
  %mul = shl nsw i64 %conv, 3
  %call1 = tail call i8* @halide_malloc(i8* null, i64 %mul) #16
  %1 = bitcast i8* %call to i8**
  store i8* %call1, i8** %1, align 8, !tbaa !127
  %cmp4 = icmp eq i8* %call1, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  tail call void @halide_free(i8* null, i8* nonnull %call) #16
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %call10 = tail call i8* @memset(i8* nonnull %call1, i32 0, i64 %mul) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then5, %entry
  %retval.0 = phi %struct.halide_mutex_array* [ null, %if.then5 ], [ %0, %if.end6 ], [ null, %entry ]
  ret %struct.halide_mutex_array* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %array to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !127
  tail call void @halide_free(i8* %user_context, i8* %1) #16
  tail call void @halide_free(i8* %user_context, i8* %array) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_lock(%struct.halide_mutex* %arrayidx) #17
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %arrayidx) #17
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  br i1 %cmp, label %if.end3.thread, label %if.end

if.end3.thread:                                   ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %0 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  br label %if.else.i

if.end:                                           ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %cmp1 = icmp eq i32 %n, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #17
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %n.addr.0 = phi i32 [ %call, %if.then2 ], [ %n, %if.end ]
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %cmp.i = icmp sgt i32 %n.addr.0, 256
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit, label %if.else.i

if.else.i:                                        ; preds = %if.end3, %if.end3.thread
  %2 = phi i32 [ %0, %if.end3.thread ], [ %1, %if.end3 ]
  %n.addr.012 = phi i32 [ %n, %if.end3.thread ], [ %n.addr.0, %if.end3 ]
  %3 = icmp sgt i32 %n.addr.012, 1
  %spec.select.i = select i1 %3, i32 %n.addr.012, i32 1
  br label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit

_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit: ; preds = %if.else.i, %if.end3
  %4 = phi i32 [ %2, %if.else.i ], [ %1, %if.end3 ]
  %call48 = phi i32 [ %spec.select.i, %if.else.i ], [ 256, %if.end3 ]
  store i32 %call48, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  ret i32 %4
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_set_custom_do_loop_task(i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_custom_parallel_runtime(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release) local_unnamed_addr #2 {
entry:
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  store i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i1 %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_symbol(i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* null, i8* %name) #16
  ret i8* %call
}

declare i8* @dlsym(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_load_library(i8* %name) #0 {
entry:
  %call = tail call i8* @dlopen(i8* %name, i32 1) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call3 = tail call i8* @dlerror() #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i8* %call
}

declare i8* @dlopen(i8*, i32) local_unnamed_addr #1

declare i8* @dlerror() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_library_symbol(i8* %lib, i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* %lib, i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_get_symbol(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_load_library(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i8*)* @halide_set_custom_get_library_symbol(i8* (i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  store i8* (i8*, i8*)* %f, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  ret i8* (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_symbol(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_load_library(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_library_symbol(i8* %lib, i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %lib, i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !129

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0)) #16
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #16
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

; Function Attrs: nounwind
define weak i32 @halide_default_trace(i8* %user_context, %struct.halide_trace_event_t* %e) #4 {
entry:
  %0 = atomicrmw add i32* @_ZZ20halide_default_traceE3ids, i32 1 seq_cst
  %call = tail call i32 @halide_get_trace_file(i8* %user_context) #17
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4
  %lanes = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %1 = load i16, i16* %lanes, align 2, !tbaa !130
  %conv = zext i16 %1 to i32
  %bits.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %2 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %2 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %mul = mul nuw nsw i32 %div.i, %conv
  %dimensions = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %3 = load i32, i32* %dimensions, align 8, !tbaa !137
  %mul3 = shl i32 %3, 2
  %func = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !138
  %call4 = tail call i64 @strlen(i8* %4) #16
  %5 = trunc i64 %call4 to i32
  %conv5 = add i32 %5, 1
  %trace_tag = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %6 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool.not = icmp eq i8* %6, null
  br i1 %tobool.not, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.then
  %call7 = tail call i64 @strlen(i8* nonnull %6) #16
  %7 = trunc i64 %call7 to i32
  %phi.cast = add i32 %7, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.then
  %cond = phi i32 [ %phi.cast, %cond.true ], [ 1, %if.then ]
  %add11 = add i32 %mul3, 31
  %add12 = add i32 %add11, %mul
  %add13 = add i32 %add12, %conv5
  %add14 = add i32 %add13, %cond
  %and = and i32 %add14, -4
  %8 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 0, i32 0
  %cmp.i.i = icmp ult i32 %and, 1048577
  %cursor.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 1
  %overage.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 2
  %arraydecay.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 0
  br i1 %cmp.i.i, label %while.body.i.i.us.i, label %while.body.i.i.i

while.body.i.i.us.i:                              ; preds = %cond.end, %while.body.i.i.us.i.backedge
  %9 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.us.i = and i32 %9, 1073741823
  %add.i.i.us.i = add nuw nsw i32 %and.i.i.us.i, 1
  %10 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.us.i, i32 %add.i.i.us.i seq_cst seq_cst
  %11 = extractvalue { i32, i1 } %10, 1
  br i1 %11, label %do.end.i.us.i, label %while.body.i.i.us.i.backedge

do.end.i.us.i:                                    ; preds = %while.body.i.i.us.i
  %12 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.us.i = add i32 %12, %and
  %cmp2.i.us.i = icmp ugt i32 %add.i.us.i, 1048576
  br i1 %cmp2.i.us.i, label %while.body.us.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.us.i:                                  ; preds = %do.end.i.us.i
  %13 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %14 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.us.i

while.body.i.i5.us.i:                             ; preds = %while.body.i.i5.us.i, %while.body.us.i
  %15 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %16 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i, label %while.body.i.i5.us.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i: ; preds = %while.body.i.i5.us.i
  %18 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.us.i = icmp eq i32 %18, 0
  br i1 %tobool.not.i.us.i, label %do.end.critedge.i.us.i, label %if.then.i9.us.i

if.then.i9.us.i:                                  ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %19 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.us.i = sub i32 %18, %19
  store i32 %sub.i.us.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.us.i = zext i32 %sub.i.us.i to i64
  %call.i.us.i = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.us.i) #16
  %conv5.i.us.i = trunc i64 %call.i.us.i to i32
  %cmp.i8.us.i = icmp eq i32 %sub.i.us.i, %conv5.i.us.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %20 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.us.i, label %while.body.i.i.us.i.backedge, label %if.then10.i.us.i

if.then10.i.us.i:                                 ; preds = %if.then.i9.us.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %while.body.i.i.us.i.backedge

do.end.critedge.i.us.i:                           ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %21 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.us.i.backedge

while.body.i.i.us.i.backedge:                     ; preds = %do.end.critedge.i.us.i, %if.then10.i.us.i, %if.then.i9.us.i, %while.body.i.i.us.i
  br label %while.body.i.i.us.i, !llvm.loop !145

while.body.i.i.i:                                 ; preds = %cond.end, %while.body.i.i.i.backedge
  %22 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.i = and i32 %22, 1073741823
  %add.i.i.i = add nuw nsw i32 %and.i.i.i, 1
  %23 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.i, i32 %add.i.i.i seq_cst seq_cst
  %24 = extractvalue { i32, i1 } %23, 1
  br i1 %24, label %if.then.i.i, label %while.body.i.i.i.backedge

if.then.i.i:                                      ; preds = %while.body.i.i.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.31, i64 0, i64 0)) #16
  tail call void @abort() #16
  %25 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.i400 = add i32 %25, %and
  %cmp2.i.i = icmp ugt i32 %add.i.i400, 1048576
  br i1 %cmp2.i.i, label %while.body.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.i:                                     ; preds = %if.then.i.i
  %26 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %27 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.i

while.body.i.i5.i:                                ; preds = %while.body.i.i5.i, %while.body.i
  %28 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %29 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %30 = extractvalue { i32, i1 } %29, 1
  br i1 %30, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i, label %while.body.i.i5.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i: ; preds = %while.body.i.i5.i
  %31 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.i = icmp eq i32 %31, 0
  br i1 %tobool.not.i.i, label %do.end.critedge.i.i, label %if.then.i9.i

if.then.i9.i:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %32 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.i = sub i32 %31, %32
  store i32 %sub.i.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.i = zext i32 %sub.i.i to i64
  %call.i.i401 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.i) #16
  %conv5.i.i = trunc i64 %call.i.i401 to i32
  %cmp.i8.i = icmp eq i32 %sub.i.i, %conv5.i.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %33 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.i, label %while.body.i.i.i.backedge, label %if.then10.i.i

if.then10.i.i:                                    ; preds = %if.then.i9.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %while.body.i.i.i.backedge

do.end.critedge.i.i:                              ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %34 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.i.backedge

while.body.i.i.i.backedge:                        ; preds = %do.end.critedge.i.i, %if.then10.i.i, %if.then.i9.i, %while.body.i.i.i
  br label %while.body.i.i.i, !llvm.loop !145

_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit: ; preds = %if.then.i.i, %do.end.i.us.i
  %.lcssa.i = phi i32 [ %12, %do.end.i.us.i ], [ %25, %if.then.i.i ]
  %idx.ext.i.i = zext i32 %.lcssa.i to i64
  %add.ptr.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 %idx.ext.i.i
  %cmp16 = icmp ugt i32 %and, 4096
  br i1 %cmp16, label %if.then17, label %if.end

if.then17:                                        ; preds = %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i404 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i404, label %if.then.i415, label %if.else.i421

if.then.i415:                                     ; preds = %if.then17
  %conv.i4071 = zext i32 %and to i64
  %call.i4082 = tail call i8* @halide_uint64_to_string(i8* null, i8* null, i64 %conv.i4071, i32 1) #16
  %call.i41117 = tail call i8* @halide_string_to_string(i8* %call.i4082, i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

if.else.i421:                                     ; preds = %if.then17
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %conv.i4073 = zext i32 %and to i64
  %call.i4084 = tail call i8* @halide_uint64_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i64 %conv.i4073, i32 1) #16
  %call.i411 = tail call i8* @halide_string_to_string(i8* %call.i4084, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i416 = ptrtoint i8* %call.i411 to i64
  %sub.ptr.rhs.cast.i.i417 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i418 = sub i64 1, %sub.ptr.rhs.cast.i.i417
  %add.i.i419 = add i64 %sub.ptr.sub.i.i418, %sub.ptr.lhs.cast.i.i416
  %call.i.i420 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* null, i8* nonnull %call.i, i64 %add.i.i419) #16
  tail call void @halide_print(i8* null, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit: ; preds = %if.else.i421, %if.then.i415
  tail call void @free(i8* %call.i) #16
  br label %if.end

if.end:                                           ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit, %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %size = bitcast i8* %add.ptr.i.i to i32*
  store i32 %and, i32* %size, align 4, !tbaa !146
  %id = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 4
  %35 = bitcast i8* %id to i32*
  store i32 %0, i32* %35, align 4, !tbaa !148
  %36 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 8
  %37 = bitcast %struct.halide_type_t* %type to i32*
  %38 = bitcast i8* %36 to i32*
  %39 = load i32, i32* %37, align 8
  store i32 %39, i32* %38, align 4
  %event = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %event22 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 12
  %40 = bitcast i32* %event to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4, !tbaa !14
  %dimensions26 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 24
  %42 = bitcast i8* %dimensions26 to i32*
  %43 = bitcast i8* %event22 to <4 x i32>*
  store <4 x i32> %41, <4 x i32>* %43, align 4, !tbaa !14
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %44 = load i32*, i32** %coordinates, align 8, !tbaa !149
  %tobool27.not = icmp eq i32* %44, null
  br i1 %tobool27.not, label %if.end33, label %if.then28

if.then28:                                        ; preds = %if.end
  %45 = bitcast i32* %44 to i8*
  %46 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %conv31 = zext i32 %mul3 to i64
  %call32 = tail call i8* @memcpy(i8* nonnull %46, i8* nonnull %45, i64 %conv31) #16
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.end
  %value = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %47 = load i8*, i8** %value, align 8, !tbaa !150
  %tobool34.not = icmp eq i8* %47, null
  br i1 %tobool34.not, label %if.end40, label %if.then35

if.then35:                                        ; preds = %if.end33
  %48 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i = sext i32 %50 to i64
  %add.ptr.i424 = getelementptr inbounds i32, i32* %49, i64 %idx.ext.i
  %51 = bitcast i32* %add.ptr.i424 to i8*
  %conv38 = zext i32 %mul to i64
  %call39 = tail call i8* @memcpy(i8* nonnull %51, i8* nonnull %47, i64 %conv38) #16
  br label %if.end40

if.end40:                                         ; preds = %if.end33, %if.then35
  %52 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i425 = sext i32 %54 to i64
  %add.ptr.i.i426 = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i425
  %55 = bitcast i32* %add.ptr.i.i426 to i8*
  %lanes.i = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 10
  %56 = bitcast i8* %lanes.i to i16*
  %57 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i427 = zext i16 %57 to i32
  %58 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 9
  %59 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i428 = zext i8 %59 to i32
  %add.i.i429 = add nuw nsw i32 %conv.i.i428, 7
  %div.i.i = lshr i32 %add.i.i429, 3
  %mul.i = mul nuw nsw i32 %div.i.i, %conv.i427
  %idx.ext.i430 = zext i32 %mul.i to i64
  %add.ptr.i431 = getelementptr inbounds i8, i8* %55, i64 %idx.ext.i430
  %60 = load i8*, i8** %func, align 8, !tbaa !138
  %conv43 = zext i32 %conv5 to i64
  %call44 = tail call i8* @memcpy(i8* nonnull %add.ptr.i431, i8* %60, i64 %conv43) #16
  %61 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i.i = sext i32 %61 to i64
  %add.ptr.i.i.i = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i.i
  %62 = bitcast i32* %add.ptr.i.i.i to i8*
  %63 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i.i432 = zext i16 %63 to i32
  %64 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i.i = zext i8 %64 to i32
  %add.i.i.i433 = add nuw nsw i32 %conv.i.i.i, 7
  %div.i.i.i = lshr i32 %add.i.i.i433, 3
  %mul.i.i = mul nuw nsw i32 %div.i.i.i, %conv.i.i432
  %idx.ext.i.i434 = zext i32 %mul.i.i to i64
  %add.ptr.i.i435 = getelementptr inbounds i8, i8* %62, i64 %idx.ext.i.i434
  br label %while.cond.i437

while.cond.i437:                                  ; preds = %while.cond.i437, %if.end40
  %f.0.i = phi i8* [ %add.ptr.i.i435, %if.end40 ], [ %incdec.ptr.i, %while.cond.i437 ]
  %incdec.ptr.i = getelementptr inbounds i8, i8* %f.0.i, i64 1
  %65 = load i8, i8* %f.0.i, align 1, !tbaa !14
  %tobool.not.i436 = icmp eq i8 %65, 0
  br i1 %tobool.not.i436, label %_ZN21halide_trace_packet_t9trace_tagEv.exit, label %while.cond.i437, !llvm.loop !153

_ZN21halide_trace_packet_t9trace_tagEv.exit:      ; preds = %while.cond.i437
  %66 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool47.not = icmp eq i8* %66, null
  %spec.select = select i1 %tobool47.not, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.10, i64 0, i64 0), i8* %66
  %conv53 = zext i32 %cond to i64
  %call54 = tail call i8* @memcpy(i8* nonnull %incdec.ptr.i, i8* %spec.select, i64 %conv53) #16
  %67 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  fence seq_cst
  %lock.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %67, i64 0, i32 0, i32 0
  %68 = atomicrmw sub i32* %lock.i.i, i32 1 seq_cst
  %69 = load i32, i32* %event, align 4, !tbaa !154
  %cmp56 = icmp eq i32 %69, 9
  br i1 %cmp56, label %if.then57, label %if.end277

if.then57:                                        ; preds = %_ZN21halide_trace_packet_t9trace_tagEv.exit
  %70 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i438 = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 0, i32 0
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %if.then57
  %71 = atomicrmw or i32* %lock.i.i438, i32 1073741824 seq_cst
  %72 = cmpxchg i32* %lock.i.i438, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %73 = extractvalue { i32, i1 } %72, 1
  br i1 %73, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i, label %while.body.i.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i: ; preds = %while.body.i.i
  %cursor.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 1
  %74 = load i32, i32* %cursor.i, align 4, !tbaa !142
  %tobool.not.i439 = icmp eq i32 %74, 0
  br i1 %tobool.not.i439, label %do.end.critedge.i, label %if.then.i442

if.then.i442:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %overage.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 2
  %75 = load i32, i32* %overage.i, align 4, !tbaa !144
  %sub.i = sub i32 %74, %75
  store i32 %sub.i, i32* %cursor.i, align 4, !tbaa !142
  %arraydecay.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 3, i64 0
  %conv.i440 = zext i32 %sub.i to i64
  %call.i441 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i, i64 %conv.i440) #16
  %conv5.i = trunc i64 %call.i441 to i32
  %cmp.i = icmp eq i32 %sub.i, %conv5.i
  store i32 0, i32* %cursor.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i, align 4, !tbaa !144
  %76 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br i1 %cmp.i, label %if.end277, label %if.then10.i

if.then10.i:                                      ; preds = %if.then.i442
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %if.end277

do.end.critedge.i:                                ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %77 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br label %if.end277

if.else:                                          ; preds = %entry
  %call.i445 = tail call i8* @malloc(i64 4096) #16
  %tobool.not.i448 = icmp eq i8* %call.i445, null
  br i1 %tobool.not.i448, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit, label %if.then6.i451

if.then6.i451:                                    ; preds = %if.else
  %add.ptr.i449 = getelementptr inbounds i8, i8* %call.i445, i64 4095
  store i8 0, i8* %add.ptr.i449, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit: ; preds = %if.then6.i451, %if.else
  %ss.sroa.74.0 = phi i8* [ %add.ptr.i449, %if.then6.i451 ], [ null, %if.else ]
  %bits = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %78 = load i8, i8* %bits, align 1, !tbaa !155
  %conv60 = zext i8 %78 to i32
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit
  %print_bits.0 = phi i32 [ 8, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit ], [ %shl, %while.cond ]
  %cmp61 = icmp slt i32 %print_bits.0, %conv60
  %shl = shl i32 %print_bits.0, 1
  br i1 %cmp61, label %while.cond, label %do.body, !llvm.loop !156

do.body:                                          ; preds = %while.cond
  %cmp62 = icmp slt i32 %print_bits.0, 65
  br i1 %cmp62, label %do.end, label %if.then63

if.then63:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2.11, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then63, %do.body
  %event65 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %79 = load i32, i32* %event65, align 4, !tbaa !154
  %cmp66 = icmp slt i32 %79, 2
  %idxprom = zext i32 %79 to i64
  %arrayidx = getelementptr inbounds [11 x i8*], [11 x i8*]* @__const.halide_default_trace.event_types, i64 0, i64 %idxprom
  %80 = load i8*, i8** %arrayidx, align 8, !tbaa !10
  %call.i456 = tail call i8* @halide_string_to_string(i8* %call.i445, i8* %ss.sroa.74.0, i8* %80) #16
  %call.i459 = tail call i8* @halide_string_to_string(i8* %call.i456, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %func70 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %81 = load i8*, i8** %func70, align 8, !tbaa !138
  %call.i462 = tail call i8* @halide_string_to_string(i8* %call.i459, i8* %ss.sroa.74.0, i8* %81) #16
  %call.i465 = tail call i8* @halide_string_to_string(i8* %call.i462, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  %value_index73 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 7
  %82 = load i32, i32* %value_index73, align 4, !tbaa !157
  %conv.i468 = sext i32 %82 to i64
  %call.i469 = tail call i8* @halide_int64_to_string(i8* %call.i465, i8* %ss.sroa.74.0, i64 %conv.i468, i32 1) #16
  %call.i472 = tail call i8* @halide_string_to_string(i8* %call.i469, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #16
  %lanes77 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %83 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp79 = icmp ugt i16 %83, 1
  br i1 %cmp79, label %if.then80, label %if.end82

if.then80:                                        ; preds = %do.end
  %call.i475 = tail call i8* @halide_string_to_string(i8* %call.i472, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)) #16
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %do.end
  %ss.sroa.7.0 = phi i8* [ %call.i475, %if.then80 ], [ %call.i472, %do.end ]
  %dimensions83 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %84 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84660 = icmp sgt i32 %84, 0
  br i1 %cmp84660, label %if.end100.peel, label %for.cond.cleanup

if.end100.peel:                                   ; preds = %if.end82
  %coordinates101 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %.pre = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %.pre673 = load i32, i32* %.pre, align 4, !tbaa !73
  %conv.i484.peel = sext i32 %.pre673 to i64
  %call.i485.peel = tail call i8* @halide_int64_to_string(i8* %ss.sroa.7.0, i8* %ss.sroa.74.0, i64 %conv.i484.peel, i32 1) #16
  %85 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84.peel = icmp sgt i32 %85, 1
  br i1 %cmp84.peel, label %if.then86, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %if.end100, %if.end100.peel, %if.end82
  %ss.sroa.7.1.lcssa = phi i8* [ %ss.sroa.7.0, %if.end82 ], [ %call.i485.peel, %if.end100.peel ], [ %call.i485, %if.end100 ]
  %86 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp108 = icmp ugt i16 %86, 1
  %.sink684 = select i1 %cmp108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)
  %call.i491 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1.lcssa, i8* %ss.sroa.74.0, i8* %.sink684) #16
  br i1 %cmp66, label %if.then115, label %if.end263

if.then86:                                        ; preds = %if.end100.peel, %if.end100
  %indvars.iv670 = phi i64 [ %indvars.iv.next671, %if.end100 ], [ 1, %if.end100.peel ]
  %ss.sroa.7.1661 = phi i8* [ %call.i485, %if.end100 ], [ %call.i485.peel, %if.end100.peel ]
  %87 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp90 = icmp ugt i16 %87, 1
  br i1 %cmp90, label %land.lhs.true, label %if.else97.split

land.lhs.true:                                    ; preds = %if.then86
  %conv89 = zext i16 %87 to i32
  %88 = trunc i64 %indvars.iv670 to i32
  %rem = urem i32 %88, %conv89
  %cmp94 = icmp eq i32 %rem, 0
  br i1 %cmp94, label %if.end100, label %if.else97.split

if.else97.split:                                  ; preds = %if.then86, %land.lhs.true
  br label %if.end100

if.end100:                                        ; preds = %land.lhs.true, %if.else97.split
  %.sink = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0), %if.else97.split ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), %land.lhs.true ]
  %call.i4786 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1661, i8* %ss.sroa.74.0, i8* %.sink) #16
  %89 = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %arrayidx103 = getelementptr inbounds i32, i32* %89, i64 %indvars.iv670
  %90 = load i32, i32* %arrayidx103, align 4, !tbaa !73
  %conv.i484 = sext i32 %90 to i64
  %call.i485 = tail call i8* @halide_int64_to_string(i8* %call.i4786, i8* %ss.sroa.74.0, i64 %conv.i484, i32 1) #16
  %indvars.iv.next671 = add nuw nsw i64 %indvars.iv670, 1
  %91 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %92 = sext i32 %91 to i64
  %cmp84 = icmp slt i64 %indvars.iv.next671, %92
  br i1 %cmp84, label %if.then86, label %for.cond.cleanup, !llvm.loop !158

if.then115:                                       ; preds = %for.cond.cleanup
  %93 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp119 = icmp ugt i16 %93, 1
  %.sink685 = select i1 %cmp119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0)
  %call.i497 = tail call i8* @halide_string_to_string(i8* %call.i491, i8* %ss.sroa.74.0, i8* %.sink685) #16
  %94 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130655.not = icmp eq i16 %94, 0
  br i1 %cmp130655.not, label %if.end263, label %if.end136.peel

if.end136.peel:                                   ; preds = %if.then115
  %code = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 0
  %value245 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %95 = bitcast i8** %value245 to i8***
  %cmp214 = icmp sgt i32 %print_bits.0, 15
  %96 = bitcast i8** %value245 to i16**
  %97 = bitcast i8** %value245 to float**
  %98 = bitcast i8** %value245 to double**
  %99 = bitcast i8** %value245 to i32**
  %100 = bitcast i8** %value245 to i64**
  %.pre674 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %.pre674, label %for.inc253.peel [
    i8 0, label %if.then140.peel
    i8 1, label %if.then176.peel
    i8 2, label %do.body213.peel
    i8 3, label %if.then244.peel
  ]

if.then244.peel:                                  ; preds = %if.end136.peel
  %101 = load i8**, i8*** %95, align 8, !tbaa !150
  %102 = load i8*, i8** %101, align 8, !tbaa !10
  %call.i543.peel = tail call i8* @halide_pointer_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i8* %102) #16
  br label %for.inc253.peel

do.body213.peel:                                  ; preds = %if.end136.peel
  br i1 %cmp214, label %do.end218.peel, label %if.then215.peel

if.then215.peel:                                  ; preds = %do.body213.peel
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end218.peel

do.end218.peel:                                   ; preds = %if.then215.peel, %do.body213.peel
  switch i32 %print_bits.0, label %if.else232.peel [
    i32 32, label %if.then220.peel
    i32 16, label %if.then227.peel
  ]

if.then227.peel:                                  ; preds = %do.end218.peel
  %103 = load i16*, i16** %96, align 8, !tbaa !150
  %104 = load i16, i16* %103, align 2, !tbaa !161
  %call.i535.peel = tail call double @halide_float16_bits_to_double(i16 zeroext %104) #16
  %call2.i.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %call.i535.peel, i32 1) #16
  br label %for.inc253.peel

if.then220.peel:                                  ; preds = %do.end218.peel
  %105 = load float*, float** %97, align 8, !tbaa !150
  %106 = load float, float* %105, align 4, !tbaa !162
  %conv.i533.peel = fpext float %106 to double
  %call.i534.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %conv.i533.peel, i32 0) #16
  br label %for.inc253.peel

if.else232.peel:                                  ; preds = %do.end218.peel
  %107 = load double*, double** %98, align 8, !tbaa !150
  %108 = load double, double* %107, align 8, !tbaa !164
  %call.i540.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %108, i32 1) #16
  br label %for.inc253.peel

if.then176.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else199.peel [
    i32 8, label %if.then178.peel
    i32 16, label %if.then186.peel
    i32 32, label %if.then194.peel
  ]

if.then194.peel:                                  ; preds = %if.then176.peel
  %109 = load i32*, i32** %99, align 8, !tbaa !150
  %110 = load i32, i32* %109, align 4, !tbaa !73
  %conv.i526.peel = zext i32 %110 to i64
  %call.i527.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i526.peel, i32 1) #16
  br label %for.inc253.peel

if.then186.peel:                                  ; preds = %if.then176.peel
  %111 = load i16*, i16** %96, align 8, !tbaa !150
  %112 = load i16, i16* %111, align 2, !tbaa !161
  %conv.i522.peel = zext i16 %112 to i64
  %call.i523.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i522.peel, i32 1) #16
  br label %for.inc253.peel

if.then178.peel:                                  ; preds = %if.then176.peel
  %113 = load i8*, i8** %value245, align 8, !tbaa !150
  %114 = load i8, i8* %113, align 1, !tbaa !14
  %conv.i518.peel = zext i8 %114 to i64
  %call.i519.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i518.peel, i32 1) #16
  br label %for.inc253.peel

if.else199.peel:                                  ; preds = %if.then176.peel
  %115 = load i64*, i64** %100, align 8, !tbaa !150
  %116 = load i64, i64* %115, align 8, !tbaa !110
  %call.i530.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %116, i32 1) #16
  br label %for.inc253.peel

if.then140.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else163.peel [
    i32 8, label %if.then142.peel
    i32 16, label %if.then150.peel
    i32 32, label %if.then158.peel
  ]

if.then158.peel:                                  ; preds = %if.then140.peel
  %117 = load i32*, i32** %99, align 8, !tbaa !150
  %118 = load i32, i32* %117, align 4, !tbaa !73
  %conv.i511.peel = sext i32 %118 to i64
  %call.i512.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i511.peel, i32 1) #16
  br label %for.inc253.peel

if.then150.peel:                                  ; preds = %if.then140.peel
  %119 = load i16*, i16** %96, align 8, !tbaa !150
  %120 = load i16, i16* %119, align 2, !tbaa !161
  %conv.i507.peel = sext i16 %120 to i64
  %call.i508.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i507.peel, i32 1) #16
  br label %for.inc253.peel

if.then142.peel:                                  ; preds = %if.then140.peel
  %121 = load i8*, i8** %value245, align 8, !tbaa !150
  %122 = load i8, i8* %121, align 1, !tbaa !14
  %conv.i503.peel = sext i8 %122 to i64
  %call.i504.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i503.peel, i32 1) #16
  br label %for.inc253.peel

if.else163.peel:                                  ; preds = %if.then140.peel
  %123 = load i64*, i64** %100, align 8, !tbaa !150
  %124 = load i64, i64* %123, align 8, !tbaa !110
  %call.i515.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %124, i32 1) #16
  br label %for.inc253.peel

for.inc253.peel:                                  ; preds = %if.else163.peel, %if.then142.peel, %if.then150.peel, %if.then158.peel, %if.else199.peel, %if.then178.peel, %if.then186.peel, %if.then194.peel, %if.else232.peel, %if.then220.peel, %if.then227.peel, %if.then244.peel, %if.end136.peel
  %ss.sroa.7.7.peel = phi i8* [ %call.i497, %if.end136.peel ], [ %call.i543.peel, %if.then244.peel ], [ %call.i540.peel, %if.else232.peel ], [ %call2.i.peel, %if.then227.peel ], [ %call.i534.peel, %if.then220.peel ], [ %call.i530.peel, %if.else199.peel ], [ %call.i527.peel, %if.then194.peel ], [ %call.i523.peel, %if.then186.peel ], [ %call.i519.peel, %if.then178.peel ], [ %call.i515.peel, %if.else163.peel ], [ %call.i512.peel, %if.then158.peel ], [ %call.i508.peel, %if.then150.peel ], [ %call.i504.peel, %if.then142.peel ]
  %125 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130.peel = icmp ugt i16 %125, 1
  br i1 %cmp130.peel, label %if.end136, label %if.end263

for.cond.cleanup131:                              ; preds = %for.inc253
  %cmp259 = icmp ugt i16 %151, 1
  br i1 %cmp259, label %if.then260, label %if.end263

if.end136:                                        ; preds = %for.inc253.peel, %for.inc253
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc253 ], [ 1, %for.inc253.peel ]
  %ss.sroa.7.5656 = phi i8* [ %ss.sroa.7.7, %for.inc253 ], [ %ss.sroa.7.7.peel, %for.inc253.peel ]
  %call.i500 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.5656, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %126 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %126, label %for.inc253 [
    i8 0, label %if.then140
    i8 1, label %if.then176
    i8 2, label %do.body213
    i8 3, label %if.then244
  ]

if.then140:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else163 [
    i32 8, label %if.then142
    i32 16, label %if.then150
    i32 32, label %if.then158
  ]

if.then142:                                       ; preds = %if.then140
  %127 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx145 = getelementptr inbounds i8, i8* %127, i64 %indvars.iv
  %128 = load i8, i8* %arrayidx145, align 1, !tbaa !14
  %conv.i503 = sext i8 %128 to i64
  %call.i504 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i503, i32 1) #16
  br label %for.inc253

if.then150:                                       ; preds = %if.then140
  %129 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx153 = getelementptr inbounds i16, i16* %129, i64 %indvars.iv
  %130 = load i16, i16* %arrayidx153, align 2, !tbaa !161
  %conv.i507 = sext i16 %130 to i64
  %call.i508 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i507, i32 1) #16
  br label %for.inc253

if.then158:                                       ; preds = %if.then140
  %131 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx161 = getelementptr inbounds i32, i32* %131, i64 %indvars.iv
  %132 = load i32, i32* %arrayidx161, align 4, !tbaa !73
  %conv.i511 = sext i32 %132 to i64
  %call.i512 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i511, i32 1) #16
  br label %for.inc253

if.else163:                                       ; preds = %if.then140
  %133 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx166 = getelementptr inbounds i64, i64* %133, i64 %indvars.iv
  %134 = load i64, i64* %arrayidx166, align 8, !tbaa !110
  %call.i515 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %134, i32 1) #16
  br label %for.inc253

if.then176:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else199 [
    i32 8, label %if.then178
    i32 16, label %if.then186
    i32 32, label %if.then194
  ]

if.then178:                                       ; preds = %if.then176
  %135 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx181 = getelementptr inbounds i8, i8* %135, i64 %indvars.iv
  %136 = load i8, i8* %arrayidx181, align 1, !tbaa !14
  %conv.i518 = zext i8 %136 to i64
  %call.i519 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i518, i32 1) #16
  br label %for.inc253

if.then186:                                       ; preds = %if.then176
  %137 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx189 = getelementptr inbounds i16, i16* %137, i64 %indvars.iv
  %138 = load i16, i16* %arrayidx189, align 2, !tbaa !161
  %conv.i522 = zext i16 %138 to i64
  %call.i523 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i522, i32 1) #16
  br label %for.inc253

if.then194:                                       ; preds = %if.then176
  %139 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx197 = getelementptr inbounds i32, i32* %139, i64 %indvars.iv
  %140 = load i32, i32* %arrayidx197, align 4, !tbaa !73
  %conv.i526 = zext i32 %140 to i64
  %call.i527 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i526, i32 1) #16
  br label %for.inc253

if.else199:                                       ; preds = %if.then176
  %141 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx202 = getelementptr inbounds i64, i64* %141, i64 %indvars.iv
  %142 = load i64, i64* %arrayidx202, align 8, !tbaa !110
  %call.i530 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %142, i32 1) #16
  br label %for.inc253

do.body213:                                       ; preds = %if.end136
  br i1 %cmp214, label %do.end218, label %if.then215

if.then215:                                       ; preds = %do.body213
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end218

do.end218:                                        ; preds = %if.then215, %do.body213
  switch i32 %print_bits.0, label %if.else232 [
    i32 32, label %if.then220
    i32 16, label %if.then227
  ]

if.then220:                                       ; preds = %do.end218
  %143 = load float*, float** %97, align 8, !tbaa !150
  %arrayidx223 = getelementptr inbounds float, float* %143, i64 %indvars.iv
  %144 = load float, float* %arrayidx223, align 4, !tbaa !162
  %conv.i533 = fpext float %144 to double
  %call.i534 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %conv.i533, i32 0) #16
  br label %for.inc253

if.then227:                                       ; preds = %do.end218
  %145 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx230 = getelementptr inbounds i16, i16* %145, i64 %indvars.iv
  %146 = load i16, i16* %arrayidx230, align 2, !tbaa !161
  %call.i535 = tail call double @halide_float16_bits_to_double(i16 zeroext %146) #16
  %call2.i = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %call.i535, i32 1) #16
  br label %for.inc253

if.else232:                                       ; preds = %do.end218
  %147 = load double*, double** %98, align 8, !tbaa !150
  %arrayidx235 = getelementptr inbounds double, double* %147, i64 %indvars.iv
  %148 = load double, double* %arrayidx235, align 8, !tbaa !164
  %call.i540 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %148, i32 1) #16
  br label %for.inc253

if.then244:                                       ; preds = %if.end136
  %149 = load i8**, i8*** %95, align 8, !tbaa !150
  %arrayidx247 = getelementptr inbounds i8*, i8** %149, i64 %indvars.iv
  %150 = load i8*, i8** %arrayidx247, align 8, !tbaa !10
  %call.i543 = tail call i8* @halide_pointer_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i8* %150) #16
  br label %for.inc253

for.inc253:                                       ; preds = %if.then244, %if.else232, %if.then227, %if.then220, %if.else199, %if.then194, %if.then186, %if.then178, %if.else163, %if.then158, %if.then150, %if.then142, %if.end136
  %ss.sroa.7.7 = phi i8* [ %call.i500, %if.end136 ], [ %call.i543, %if.then244 ], [ %call.i540, %if.else232 ], [ %call2.i, %if.then227 ], [ %call.i534, %if.then220 ], [ %call.i530, %if.else199 ], [ %call.i527, %if.then194 ], [ %call.i523, %if.then186 ], [ %call.i519, %if.then178 ], [ %call.i515, %if.else163 ], [ %call.i512, %if.then158 ], [ %call.i508, %if.then150 ], [ %call.i504, %if.then142 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %151 = load i16, i16* %lanes77, align 2, !tbaa !130
  %152 = zext i16 %151 to i64
  %cmp130 = icmp ult i64 %indvars.iv.next, %152
  br i1 %cmp130, label %if.end136, label %for.cond.cleanup131, !llvm.loop !166

if.then260:                                       ; preds = %for.cond.cleanup131
  %call.i546 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.7, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0)) #16
  br label %if.end263

if.end263:                                        ; preds = %if.then260, %for.cond.cleanup131, %for.inc253.peel, %if.then115, %for.cond.cleanup
  %ss.sroa.7.8 = phi i8* [ %call.i546, %if.then260 ], [ %ss.sroa.7.7, %for.cond.cleanup131 ], [ %call.i491, %for.cond.cleanup ], [ %ss.sroa.7.7.peel, %for.inc253.peel ], [ %call.i497, %if.then115 ]
  %trace_tag264 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %153 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %tobool265.not = icmp eq i8* %153, null
  br i1 %tobool265.not, label %if.end274, label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end263
  %154 = load i8, i8* %153, align 1, !tbaa !14
  %tobool268.not = icmp eq i8 %154, 0
  br i1 %tobool268.not, label %if.end274, label %if.then269

if.then269:                                       ; preds = %land.lhs.true266
  %call.i549 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.8, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0)) #16
  %155 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %call.i552 = tail call i8* @halide_string_to_string(i8* %call.i549, i8* %ss.sroa.74.0, i8* %155) #16
  %call.i555 = tail call i8* @halide_string_to_string(i8* %call.i552, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0)) #16
  br label %if.end274

if.end274:                                        ; preds = %if.then269, %land.lhs.true266, %if.end263
  %ss.sroa.7.9 = phi i8* [ %ss.sroa.7.8, %if.end263 ], [ %ss.sroa.7.8, %land.lhs.true266 ], [ %call.i555, %if.then269 ]
  %call.i558 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.9, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br label %while.cond.i560

while.cond.i560:                                  ; preds = %while.cond.i560, %if.end274
  %156 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i559 = icmp eq i8 %156, 0
  br i1 %tobool.not.i559, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i560, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i560
  br i1 %tobool.not.i448, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %sub.ptr.lhs.cast.i.i563 = ptrtoint i8* %call.i558 to i64
  %sub.ptr.rhs.cast.i.i564 = ptrtoint i8* %call.i445 to i64
  %sub.ptr.sub.i.i565 = sub i64 1, %sub.ptr.rhs.cast.i.i564
  %add.i.i566 = add i64 %sub.ptr.sub.i.i565, %sub.ptr.lhs.cast.i.i563
  %call.i.i567 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #16
  tail call void @halide_print(i8* %user_context, i8* nonnull %call.i445) #16
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i445) #16
  br label %if.end277

if.end277:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit, %do.end.critedge.i, %if.then10.i, %if.then.i442, %_ZN21halide_trace_packet_t9trace_tagEv.exit
  ret i32 %0
}

; Function Attrs: nounwind
define weak i32 @halide_get_trace_file(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i64 0, i64 0)) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.then
  %call2 = tail call i8* @fopen(i8* nonnull %call, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i64 0, i64 0)) #16
  %tobool3.not = icmp eq i8* %call2, null
  br i1 %tobool3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.then1
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.30, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.then1
  %call5 = tail call i32 @fileno(i8* %call2) #16
  tail call void @halide_set_trace_file(i32 %call5) #17
  store i8* %call2, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %2 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool6.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %2, null
  br i1 %tobool6.not, label %if.then7, label %if.end11

if.then7:                                         ; preds = %do.end
  %call8 = tail call i8* @malloc(i64 1048588) #16
  store i8* %call8, i8** bitcast (%"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE to i8**), align 8, !tbaa !10
  %cursor.i = getelementptr inbounds i8, i8* %call8, i64 4
  %3 = bitcast i8* %cursor.i to i32*
  store i32 0, i32* %3, align 4, !tbaa !142
  %overage.i = getelementptr inbounds i8, i8* %call8, i64 8
  %4 = bitcast i8* %overage.i to i32*
  store i32 0, i32* %4, align 4, !tbaa !144
  %lock.i.i = bitcast i8* %call8 to i32*
  store volatile i32 0, i32* %lock.i.i, align 4, !tbaa !140
  br label %if.end11

if.else:                                          ; preds = %if.then
  tail call void @halide_set_trace_file(i32 0) #17
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then7, %do.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %5 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  ret i32 %5
}

declare i8* @memcpy(i8*, i8*, i64) local_unnamed_addr #1

declare i8* @fopen(i8*, i8*) local_unnamed_addr #1

declare i32 @fileno(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_trace_file(i32 %fd) local_unnamed_addr #2 {
entry:
  store i32 %fd, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_trace_cleanup() #0 {
entry:
  %call = tail call i32 @halide_shutdown_trace() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_shutdown_trace() local_unnamed_addr #0 {
entry:
  %0 = load i8*, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %tobool.not = icmp eq i8* %0, null
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @fclose(i8* nonnull %0) #16
  store i32 0, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store i8 0, i8* @_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE, align 1, !tbaa !15
  store i8* null, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %1 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool1.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %1, null
  br i1 %tobool1.not, label %return, label %if.then2

if.then2:                                         ; preds = %if.then
  %2 = bitcast %"class.Halide::Runtime::Internal::TraceBuffer"* %1 to i8*
  tail call void @free(i8* nonnull %2) #16
  br label %return

return:                                           ; preds = %if.then2, %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then2 ], [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @fclose(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, %struct.halide_trace_event_t*)* @halide_set_custom_trace(i32 (i8*, %struct.halide_trace_event_t*)* %t) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  store i32 (i8*, %struct.halide_trace_event_t*)* %t, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  ret i32 (i8*, %struct.halide_trace_event_t*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* %e) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, %struct.halide_trace_event_t* %e) #16
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_trace_helper(i8* %user_context, i8* %func, i8* %value, i32* %coords, i32 %type_code, i32 %type_bits, i32 %type_lanes, i32 %code, i32 %parent_id, i32 %value_index, i32 %dimensions, i8* %trace_tag) local_unnamed_addr #4 {
entry:
  %event = alloca %struct.halide_trace_event_t, align 8
  %0 = bitcast %struct.halide_trace_event_t* %event to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %0) #11
  %code.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 0
  %bits.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 1
  %lanes.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 2
  %func1 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 0
  store i8* %func, i8** %func1, align 8, !tbaa !138
  %value2 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 1
  store i8* %value, i8** %value2, align 8, !tbaa !150
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 2
  store i32* %coords, i32** %coordinates, align 8, !tbaa !149
  %trace_tag3 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 3
  store i8* %trace_tag, i8** %trace_tag3, align 8, !tbaa !139
  %conv = trunc i32 %type_code to i8
  store i8 %conv, i8* %code.i.i, align 8, !tbaa !160
  %conv5 = trunc i32 %type_bits to i8
  store i8 %conv5, i8* %bits.i.i, align 1, !tbaa !155
  %conv7 = trunc i32 %type_lanes to i16
  store i16 %conv7, i16* %lanes.i.i, align 2, !tbaa !130
  %event9 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 5
  store i32 %code, i32* %event9, align 4, !tbaa !154
  %parent_id10 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 6
  store i32 %parent_id, i32* %parent_id10, align 8, !tbaa !168
  %value_index11 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 7
  store i32 %value_index, i32* %value_index11, align 4, !tbaa !157
  %dimensions12 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 8
  store i32 %dimensions, i32* %dimensions12, align 8, !tbaa !137
  %call = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 56) #16
  %add = add nsw i32 %type_bits, 7
  %div = sdiv i32 %add, 8
  %mul = mul nsw i32 %div, %type_lanes
  %conv13 = sext i32 %mul to i64
  %call14 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %value, i64 %conv13) #16
  %1 = bitcast i32* %coords to i8*
  %conv15 = sext i32 %dimensions to i64
  %mul16 = shl nsw i64 %conv15, 2
  %call17 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %1, i64 %mul16) #16
  %call18 = call i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* nonnull %event) #16
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %0) #11
  ret i32 %call18
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* %suffix) local_unnamed_addr #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %f.0 = phi i8* [ %filename, %entry ], [ %incdec.ptr, %while.cond ]
  %0 = load i8, i8* %f.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %0, 0
  %incdec.ptr = getelementptr inbounds i8, i8* %f.0, i64 1
  br i1 %tobool.not, label %while.cond1, label %while.cond, !llvm.loop !169

while.cond1:                                      ; preds = %while.cond, %while.cond1
  %s.0 = phi i8* [ %incdec.ptr4, %while.cond1 ], [ %suffix, %while.cond ]
  %1 = load i8, i8* %s.0, align 1, !tbaa !14
  %tobool2.not = icmp eq i8 %1, 0
  %incdec.ptr4 = getelementptr inbounds i8, i8* %s.0, i64 1
  br i1 %tobool2.not, label %while.cond6.preheader, label %while.cond1, !llvm.loop !170

while.cond6.preheader:                            ; preds = %while.cond1
  %cmp34 = icmp ne i8* %s.0, %suffix
  %cmp735 = icmp ne i8* %f.0, %filename
  %2 = and i1 %cmp735, %cmp34
  br i1 %2, label %if.end, label %while.end13

if.end:                                           ; preds = %while.cond6.preheader, %if.end.while.body8_crit_edge
  %f.13649 = phi i8* [ %incdec.ptr11, %if.end.while.body8_crit_edge ], [ %f.0, %while.cond6.preheader ]
  %s.13748 = phi i8* [ %incdec.ptr12, %if.end.while.body8_crit_edge ], [ %s.0, %while.cond6.preheader ]
  %incdec.ptr11 = getelementptr inbounds i8, i8* %f.13649, i64 -1
  %incdec.ptr12 = getelementptr inbounds i8, i8* %s.13748, i64 -1
  %cmp = icmp ne i8* %incdec.ptr12, %suffix
  %cmp7 = icmp ne i8* %incdec.ptr11, %filename
  %3 = and i1 %cmp7, %cmp
  %.pre = load i8, i8* %incdec.ptr11, align 1, !tbaa !14
  %.pre45 = load i8, i8* %incdec.ptr12, align 1, !tbaa !14
  br i1 %3, label %if.end.while.body8_crit_edge, label %while.end13, !llvm.loop !171

if.end.while.body8_crit_edge:                     ; preds = %if.end
  %cmp10.not = icmp eq i8 %.pre, %.pre45
  br i1 %cmp10.not, label %if.end, label %cleanup

while.end13:                                      ; preds = %if.end, %while.cond6.preheader
  %4 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre45, %if.end ]
  %5 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre, %if.end ]
  %cmp16 = icmp eq i8 %5, %4
  br label %cleanup

cleanup:                                          ; preds = %if.end.while.body8_crit_edge, %while.end13
  %retval.0 = phi i1 [ %cmp16, %while.end13 ], [ false, %if.end.while.body8_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_debug_to_file(i8* %user_context, i8* %filename, i32 %type_code, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %header = alloca %"struct.Halide::Runtime::Internal::halide_tiff_header", align 2
  %offset = alloca i32, align 4
  %count = alloca i32, align 4
  %array_name = alloca [256 x i8], align 1
  %array_name42 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  %header198 = alloca [129 x i8], align 1
  %tags = alloca [8 x i32], align 4
  %extents = alloca [4 x i32], align 4
  %name_header = alloca [2 x i32], align 4
  %payload_header = alloca [2 x i32], align 4
  %header289 = alloca [5 x i32], align 4
  %temp = alloca [4096 x i8], align 1
  %idx = alloca [4 x i32], align 4
  %zero = alloca i64, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !172
  %cmp.i = icmp eq i8* %0, null
  br i1 %cmp.i, label %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, label %if.end

_ZNK15halide_buffer_t15is_bounds_queryEv.exit:    ; preds = %entry
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp2.i = icmp eq i64 %1, 0
  br i1 %cmp2.i, label %if.then, label %if.end

if.then:                                          ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.34, i64 0, i64 0)) #16
  br label %return

if.end:                                           ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, %entry
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp = icmp sgt i32 %2, 4
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1.35, i64 0, i64 0)) #16
  br label %return

if.end2:                                          ; preds = %if.end
  %call3 = tail call i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp4.not = icmp eq i32 %call3, 0
  br i1 %cmp4.not, label %if.end6, label %return

if.end6:                                          ; preds = %if.end2
  %call.i598 = tail call i8* @fopen(i8* %filename, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.36, i64 0, i64 0)) #16
  %cmp.i601.not = icmp eq i8* %call.i598, null
  br i1 %cmp.i601.not, label %return, label %if.end9

if.end9:                                          ; preds = %if.end6
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #11
  %min.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 0
  %extent.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %min.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 0
  %extent.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %4 = bitcast [4 x %struct.halide_dimension_t]* %shape to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %4, align 4, !tbaa !73
  %min.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 0
  %extent.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %min.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 0
  %extent.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %5 = bitcast i32* %min.i.2 to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %5, align 4, !tbaa !73
  %6 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp11875 = icmp sgt i32 %6, 0
  br i1 %cmp11875, label %for.body.lr.ph, label %for.body22.preheader

for.body.lr.ph:                                   ; preds = %if.end9
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %7 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %8 = zext i32 %6 to i64
  %9 = add nsw i64 %8, -1
  %10 = icmp ult i64 %9, 3
  %11 = select i1 %10, i64 %8, i64 4
  %12 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %13 = bitcast %struct.halide_dimension_t* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %12, i8* nonnull align 4 dereferenceable(16) %13, i64 16, i1 false), !tbaa.struct !177
  %extent = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %14 = load i32, i32* %extent, align 4, !tbaa !178
  %conv903 = zext i32 %14 to i64
  %exitcond.not17 = icmp eq i64 %11, 1
  br i1 %exitcond.not17, label %for.cond19.preheader, label %for.body.1, !llvm.loop !180

for.cond19.preheader:                             ; preds = %for.body.3, %for.body.2, %for.body.1, %for.body.lr.ph
  %mul.lcssa = phi i64 [ %conv903, %for.body.lr.ph ], [ %mul.1, %for.body.1 ], [ %mul.2, %for.body.2 ], [ %mul.3, %for.body.3 ]
  %cmp20873 = icmp slt i32 %6, 4
  br i1 %cmp20873, label %for.body22.preheader, label %for.cond.cleanup21

for.body22.preheader:                             ; preds = %for.cond19.preheader, %if.end9
  %elts.0.lcssa907 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ 1, %if.end9 ]
  %15 = sext i32 %6 to i64
  %16 = sub i32 3, %6
  %17 = zext i32 %16 to i64
  %18 = add nuw nsw i64 %17, 1
  %min.iters.check = icmp ult i32 %16, 7
  br i1 %min.iters.check, label %for.body22.preheader214, label %vector.ph

vector.ph:                                        ; preds = %for.body22.preheader
  %n.vec = and i64 %18, 8589934584
  %ind.end = add nsw i64 %n.vec, %15
  %.splatinsert = insertelement <8 x i64> poison, i64 %15, i32 0
  %.splat = shufflevector <8 x i64> %.splatinsert, <8 x i64> poison, <8 x i32> zeroinitializer
  %induction = add <8 x i64> %.splat, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
  %19 = add nsw i64 %n.vec, -8
  %20 = lshr exact i64 %19, 3
  %21 = add nuw nsw i64 %20, 1
  %xtraiter = and i64 %21, 3
  %22 = icmp ult i64 %19, 24
  br i1 %22, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = and i64 %21, 4611686018427387900
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %vec.ind = phi <8 x i64> [ %induction, %vector.ph.new ], [ %vec.ind.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %23 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %23, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %24 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %24, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %25 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %25, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next = add <8 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %26 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %26, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %27, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %28 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %28, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.1 = add <8 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %29 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %29, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %30 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %30, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %31 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %31, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.2 = add <8 x i64> %vec.ind, <i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24>
  %32 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %32, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %33 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %33, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %34 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %34, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.3 = add <8 x i64> %vec.ind, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !183

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %vec.ind.unr = phi <8 x i64> [ %induction, %vector.ph ], [ %vec.ind.next.3, %vector.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %middle.block, label %vector.body.epil

vector.body.epil:                                 ; preds = %middle.block.unr-lcssa, %vector.body.epil
  %vec.ind.epil = phi <8 x i64> [ %vec.ind.next.epil, %vector.body.epil ], [ %vec.ind.unr, %middle.block.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %vector.body.epil ], [ %xtraiter, %middle.block.unr-lcssa ]
  %35 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %35, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %36 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %36, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %37 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %37, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.epil = add <8 x i64> %vec.ind.epil, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %middle.block, label %vector.body.epil, !llvm.loop !185

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %18, %n.vec
  br i1 %cmp.n, label %for.cond.cleanup21, label %for.body22.preheader214

for.body22.preheader214:                          ; preds = %for.body22.preheader, %middle.block
  %indvars.iv.ph = phi i64 [ %15, %for.body22.preheader ], [ %ind.end, %middle.block ]
  br label %for.body22

for.cond.cleanup21:                               ; preds = %for.body22, %middle.block, %for.cond19.preheader
  %elts.0.lcssa906 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ %elts.0.lcssa907, %middle.block ], [ %elts.0.lcssa907, %for.body22 ]
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %38 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %38 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %call34 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.37, i64 0, i64 0)) #17
  br i1 %call34, label %if.then36, label %lor.lhs.false

for.body22:                                       ; preds = %for.body22.preheader214, %for.body22
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body22 ], [ %indvars.iv.ph, %for.body22.preheader214 ]
  %min = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 0
  store i32 0, i32* %min, align 4, !tbaa !181
  %extent27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 1
  store i32 1, i32* %extent27, align 4, !tbaa !178
  %stride = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 2
  store i32 0, i32* %stride, align 4, !tbaa !182
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond886.not = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond886.not, label %for.cond.cleanup21, label %for.body22, !llvm.loop !187

lor.lhs.false:                                    ; preds = %for.cond.cleanup21
  %call35 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.38, i64 0, i64 0)) #17
  br i1 %call35, label %if.then36, label %if.else164

if.then36:                                        ; preds = %lor.lhs.false, %for.cond.cleanup21
  %39 = load i32, i32* %extent.i, align 4, !tbaa !178
  %40 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %41 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %switch = icmp ult i32 %41, 2
  %42 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %cmp50 = icmp slt i32 %42, 5
  %or.cond = and i1 %switch, %cmp50
  %depth.0 = select i1 %or.cond, i32 1, i32 %42
  %channels.0 = select i1 %or.cond, i32 %42, i32 %41
  %43 = bitcast %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 210, i8* nonnull %43) #11
  %byte_order_marker = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 0
  store i16 18761, i16* %byte_order_marker, align 2, !tbaa !189
  %version = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 1
  store i16 42, i16* %version, align 2, !tbaa !191
  %ifd0_offset = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 2
  store i32 8, i32* %ifd0_offset, align 2, !tbaa !192
  %entry_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 3
  store i16 15, i16* %entry_count, align 2, !tbaa !193
  %tag_code2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 0
  store i16 256, i16* %tag_code2.i, align 2, !tbaa !194
  %type_code.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 1
  store i16 4, i16* %type_code.i, align 2, !tbaa !196
  %count3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 2
  store i32 1, i32* %count3.i, align 2, !tbaa !197
  %i32.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 3, i32 0
  store i32 %39, i32* %i32.i, align 2, !tbaa !14
  %tag_code2.i632 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 0
  store i16 257, i16* %tag_code2.i632, align 2, !tbaa !194
  %type_code.i633 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 1
  store i16 4, i16* %type_code.i633, align 2, !tbaa !196
  %count3.i634 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 2
  store i32 1, i32* %count3.i634, align 2, !tbaa !197
  %i32.i635 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 3, i32 0
  store i32 %40, i32* %i32.i635, align 2, !tbaa !14
  %44 = trunc i32 %add.i to i16
  %conv68 = and i16 %44, 504
  %tag_code2.i643 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 0
  store i16 258, i16* %tag_code2.i643, align 2, !tbaa !194
  %type_code.i644 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 1
  store i16 3, i16* %type_code.i644, align 2, !tbaa !196
  %count3.i645 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 2
  store i32 1, i32* %count3.i645, align 2, !tbaa !197
  %value4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 3
  %i16.i = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i to i16*
  store i16 %conv68, i16* %i16.i, align 2, !tbaa !14
  %tag_code2.i653 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 0
  store i16 259, i16* %tag_code2.i653, align 2, !tbaa !194
  %type_code.i654 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 1
  store i16 3, i16* %type_code.i654, align 2, !tbaa !196
  %count3.i655 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 2
  store i32 1, i32* %count3.i655, align 2, !tbaa !197
  %value4.i656 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 3
  %i16.i657 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i656 to i16*
  store i16 1, i16* %i16.i657, align 2, !tbaa !14
  %cmp71 = icmp sgt i32 %channels.0, 2
  %conv72 = select i1 %cmp71, i16 2, i16 1
  %tag_code2.i665 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 0
  store i16 262, i16* %tag_code2.i665, align 2, !tbaa !194
  %type_code.i666 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 1
  store i16 3, i16* %type_code.i666, align 2, !tbaa !196
  %count3.i667 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 2
  store i32 1, i32* %count3.i667, align 2, !tbaa !197
  %value4.i668 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 3
  %i16.i669 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i668 to i16*
  store i16 %conv72, i16* %i16.i669, align 2, !tbaa !14
  %tag_code2.i677 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 0
  store i16 273, i16* %tag_code2.i677, align 2, !tbaa !194
  %type_code.i678 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 1
  store i16 4, i16* %type_code.i678, align 2, !tbaa !196
  %count3.i679 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 2
  store i32 %channels.0, i32* %count3.i679, align 2, !tbaa !197
  %i32.i680 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 3, i32 0
  store i32 210, i32* %i32.i680, align 2, !tbaa !14
  %conv75 = trunc i32 %channels.0 to i16
  %tag_code2.i688 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 0
  store i16 277, i16* %tag_code2.i688, align 2, !tbaa !194
  %type_code.i689 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 1
  store i16 3, i16* %type_code.i689, align 2, !tbaa !196
  %count3.i690 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 2
  store i32 1, i32* %count3.i690, align 2, !tbaa !197
  %value4.i691 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 3
  %i16.i692 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i691 to i16*
  store i16 %conv75, i16* %i16.i692, align 2, !tbaa !14
  %tag_code2.i706 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 0
  store i16 278, i16* %tag_code2.i706, align 2, !tbaa !194
  %type_code.i707 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 1
  store i16 4, i16* %type_code.i707, align 2, !tbaa !196
  %count3.i708 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 2
  store i32 1, i32* %count3.i708, align 2, !tbaa !197
  %i32.i709 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 3, i32 0
  store i32 %40, i32* %i32.i709, align 2, !tbaa !14
  %cmp80 = icmp eq i32 %channels.0, 1
  %45 = trunc i64 %elts.0.lcssa906 to i32
  %conv86595 = mul i32 %div.i, %45
  %mul84 = shl i32 %channels.0, 2
  %add = add i32 %mul84, 210
  %add.sink = select i1 %cmp80, i32 %conv86595, i32 %add
  %46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 0
  store i16 279, i16* %46, align 2
  %47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 1
  store i16 4, i16* %47, align 2
  %48 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 2
  store i32 %channels.0, i32* %48, align 2
  %49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 3, i32 0
  store i32 %add.sink, i32* %49, align 2
  %tag_code2.i732 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 0
  store i16 282, i16* %tag_code2.i732, align 2, !tbaa !194
  %type_code3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 1
  store i16 5, i16* %type_code3.i, align 2, !tbaa !196
  %count4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 2
  store i32 1, i32* %count4.i, align 2, !tbaa !197
  %i32.i733 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 3, i32 0
  store i32 194, i32* %i32.i733, align 2, !tbaa !14
  %tag_code2.i741 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 0
  store i16 283, i16* %tag_code2.i741, align 2, !tbaa !194
  %type_code3.i742 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 1
  store i16 5, i16* %type_code3.i742, align 2, !tbaa !196
  %count4.i743 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 2
  store i32 1, i32* %count4.i743, align 2, !tbaa !197
  %i32.i744 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 3, i32 0
  store i32 202, i32* %i32.i744, align 2, !tbaa !14
  %tag_code2.i759 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 0
  store i16 284, i16* %tag_code2.i759, align 2, !tbaa !194
  %type_code.i760 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 1
  store i16 3, i16* %type_code.i760, align 2, !tbaa !196
  %count3.i761 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 2
  store i32 1, i32* %count3.i761, align 2, !tbaa !197
  %value4.i762 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 3
  %i16.i763 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i762 to i16*
  store i16 2, i16* %i16.i763, align 2, !tbaa !14
  %tag_code2.i754 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 0
  store i16 296, i16* %tag_code2.i754, align 2, !tbaa !194
  %type_code.i755 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 1
  store i16 3, i16* %type_code.i755, align 2, !tbaa !196
  %count3.i756 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 2
  store i32 1, i32* %count3.i756, align 2, !tbaa !197
  %value4.i757 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 3
  %i16.i758 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i757 to i16*
  store i16 1, i16* %i16.i758, align 2, !tbaa !14
  %idxprom92 = sext i32 %type_code to i64
  %arrayidx93 = getelementptr inbounds [10 x i16], [10 x i16]* @_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE, i64 0, i64 %idxprom92
  %50 = load i16, i16* %arrayidx93, align 2, !tbaa !161
  %tag_code2.i749 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 0
  store i16 339, i16* %tag_code2.i749, align 2, !tbaa !194
  %type_code.i750 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 1
  store i16 3, i16* %type_code.i750, align 2, !tbaa !196
  %count3.i751 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 2
  store i32 1, i32* %count3.i751, align 2, !tbaa !197
  %value4.i752 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 3
  %i16.i753 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i752 to i16*
  store i16 %50, i16* %i16.i753, align 2, !tbaa !14
  %tag_code2.i745 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 0
  store i16 -32539, i16* %tag_code2.i745, align 2, !tbaa !194
  %type_code.i746 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 1
  store i16 4, i16* %type_code.i746, align 2, !tbaa !196
  %count3.i747 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 2
  store i32 1, i32* %count3.i747, align 2, !tbaa !197
  %i32.i748 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 3, i32 0
  store i32 %depth.0, i32* %i32.i748, align 2, !tbaa !14
  %ifd0_end = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 5
  %51 = bitcast i32* %ifd0_end to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 1, i32 1>, <4 x i32>* %51, align 2, !tbaa !73
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 7, i64 1
  store i32 1, i32* %arrayidx100, align 2, !tbaa !73
  %call.i736 = call i64 @fwrite(i8* nonnull %43, i64 210, i64 1, i8* nonnull %call.i598) #16
  %cmp.i737.not = icmp eq i64 %call.i736, 0
  br i1 %cmp.i737.not, label %cleanup154, label %if.end103

if.end103:                                        ; preds = %if.then36
  %cmp104 = icmp sgt i32 %channels.0, 1
  br i1 %cmp104, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph, label %cleanup154.thread

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph: ; preds = %if.end103
  %52 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %52) #11
  %mul108 = shl i32 %channels.0, 3
  %add109 = add i32 %mul108, 210
  store i32 %add109, i32* %offset, align 4, !tbaa !73
  %mul123 = mul i32 %depth.0, %div.i
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731: ; preds = %if.end118, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph
  %i111.0865 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph ], [ %inc128, %if.end118 ]
  %call.i727 = call i64 @fwrite(i8* nonnull %52, i64 4, i64 1, i8* nonnull %call.i598) #16
  %cmp.i728.not = icmp eq i64 %call.i727, 0
  br i1 %cmp.i728.not, label %cleanup151.thread, label %if.end118

if.end118:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731
  %53 = load i32, i32* %extent.i, align 4, !tbaa !178
  %54 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %mul124 = mul i32 %mul123, %53
  %mul125 = mul i32 %mul124, %54
  %55 = load i32, i32* %offset, align 4, !tbaa !73
  %add126 = add nsw i32 %mul125, %55
  store i32 %add126, i32* %offset, align 4, !tbaa !73
  %inc128 = add nuw nsw i32 %i111.0865, 1
  %exitcond881.not = icmp eq i32 %inc128, %channels.0
  br i1 %exitcond881.not, label %for.end129, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, !llvm.loop !198

for.end129:                                       ; preds = %if.end118
  %56 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %56) #11
  store i32 %mul125, i32* %count, align 4, !tbaa !73
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

for.cond138:                                      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  %exitcond.not = icmp eq i32 %inc146, %channels.0
  br i1 %exitcond.not, label %cleanup151, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720, !llvm.loop !199

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720: ; preds = %for.end129, %for.cond138
  %i137.0863 = phi i32 [ %inc146, %for.cond138 ], [ 0, %for.end129 ]
  %call.i716 = call i64 @fwrite(i8* nonnull %56, i64 4, i64 1, i8* nonnull %call.i598) #16
  %cmp.i717.not = icmp eq i64 %call.i716, 0
  %inc146 = add nuw nsw i32 %i137.0863, 1
  br i1 %cmp.i717.not, label %select.unfold, label %for.cond138

select.unfold:                                    ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #11
  br label %cleanup151.thread

cleanup151.thread:                                ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, %select.unfold
  %retval.2.ph = phi i32 [ -5, %select.unfold ], [ -4, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #11
  br label %cleanup154

cleanup151:                                       ; preds = %for.cond138
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #11
  br label %cleanup154.thread

cleanup154.thread:                                ; preds = %cleanup151, %if.end103
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #11
  br label %if.end311

cleanup154:                                       ; preds = %cleanup151.thread, %if.then36
  %retval.4 = phi i32 [ -3, %if.then36 ], [ %retval.2.ph, %cleanup151.thread ]
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #11
  br label %cleanup433

if.else164:                                       ; preds = %lor.lhs.false
  %call165 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.39, i64 0, i64 0)) #17
  br i1 %call165, label %while.cond, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631

while.cond:                                       ; preds = %if.else164, %while.cond
  %end.0 = phi i8* [ %incdec.ptr167, %while.cond ], [ %filename, %if.else164 ]
  %57 = load i8, i8* %end.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %57, 0
  %incdec.ptr167 = getelementptr inbounds i8, i8* %end.0, i64 1
  br i1 %tobool.not, label %while.body171, label %while.cond, !llvm.loop !200

while.cond174.preheader:                          ; preds = %while.body171
  %end.1872.lcssa883 = ptrtoint i8* %end.1872 to i64
  %58 = ptrtoint i8* %filename to i64
  %59 = sub i64 %58, %end.1872.lcssa883
  br label %while.cond174

while.body171:                                    ; preds = %while.cond, %while.body171
  %end.1872 = phi i8* [ %incdec.ptr172.ptr, %while.body171 ], [ %end.0, %while.cond ]
  %incdec.ptr172.ptr = getelementptr inbounds i8, i8* %end.1872, i64 -1
  %.pr = load i8, i8* %incdec.ptr172.ptr, align 1, !tbaa !14
  %cmp170.not = icmp eq i8 %.pr, 46
  br i1 %cmp170.not, label %while.cond174.preheader, label %while.body171, !llvm.loop !201

while.cond174:                                    ; preds = %land.rhs176, %while.cond174.preheader
  %start.0.idx = phi i64 [ %start.0.add, %land.rhs176 ], [ -1, %while.cond174.preheader ]
  %start.0.ptr.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.idx
  %cmp175.not = icmp eq i8* %start.0.ptr.ptr, %filename
  br i1 %cmp175.not, label %while.end183, label %land.rhs176

land.rhs176:                                      ; preds = %while.cond174
  %start.0.add = add nsw i64 %start.0.idx, -1
  %arrayidx177.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.add
  %60 = load i8, i8* %arrayidx177.ptr, align 1, !tbaa !14
  %cmp179.not = icmp eq i8 %60, 47
  br i1 %cmp179.not, label %while.end183, label %while.cond174, !llvm.loop !202

while.end183:                                     ; preds = %land.rhs176, %while.cond174
  %start.0.idx.lcssa = phi i64 [ %59, %while.cond174 ], [ %start.0.idx, %land.rhs176 ]
  %61 = trunc i64 %start.0.idx.lcssa to i32
  %conv184 = xor i32 %61, -1
  %62 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %62) #11
  %cmp186.not868 = icmp eq i64 %start.0.idx.lcssa, -1
  br i1 %cmp186.not868, label %iter.check, label %while.body187.preheader

while.body187.preheader:                          ; preds = %while.end183
  %63 = xor i64 %start.0.idx.lcssa, -1
  %min.iters.check39 = icmp ugt i64 %start.0.idx.lcssa, -129
  br i1 %min.iters.check39, label %while.body187.preheader212, label %vector.memcheck

vector.memcheck:                                  ; preds = %while.body187.preheader
  %64 = xor i64 %start.0.idx.lcssa, -1
  %scevgep43 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %64
  %scevgep44 = getelementptr i8, i8* %end.1872, i64 %start.0.idx.lcssa
  %scevgep45 = getelementptr i8, i8* %end.1872, i64 -1
  %bound0 = icmp ult i8* %array_name42, %scevgep45
  %bound1 = icmp ult i8* %scevgep44, %scevgep43
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %while.body187.preheader212, label %vector.ph41

vector.ph41:                                      ; preds = %vector.memcheck
  %n.vec47 = and i64 %63, -128
  %ind.end51 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %n.vec47
  %ind.end53 = add i64 %start.0.idx.lcssa, %n.vec47
  %65 = add i64 %n.vec47, -128
  %66 = lshr exact i64 %65, 7
  %67 = add nuw nsw i64 %66, 1
  %xtraiter215 = and i64 %67, 3
  %68 = icmp ult i64 %65, 384
  br i1 %68, label %middle.block36.unr-lcssa, label %vector.ph41.new

vector.ph41.new:                                  ; preds = %vector.ph41
  %unroll_iter218 = and i64 %67, 288230376151711740
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph41.new
  %index48 = phi i64 [ 0, %vector.ph41.new ], [ %index.next49.3, %vector.body38 ]
  %niter219 = phi i64 [ %unroll_iter218, %vector.ph41.new ], [ %niter219.nsub.3, %vector.body38 ]
  %next.gep = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48
  %offset.idx = add i64 %start.0.idx.lcssa, %index48
  %69 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx
  %70 = bitcast i8* %69 to <32 x i8>*
  %wide.load = load <32 x i8>, <32 x i8>* %70, align 1, !tbaa !14, !alias.scope !203
  %71 = getelementptr inbounds i8, i8* %69, i64 32
  %72 = bitcast i8* %71 to <32 x i8>*
  %wide.load58 = load <32 x i8>, <32 x i8>* %72, align 1, !tbaa !14, !alias.scope !203
  %73 = getelementptr inbounds i8, i8* %69, i64 64
  %74 = bitcast i8* %73 to <32 x i8>*
  %wide.load59 = load <32 x i8>, <32 x i8>* %74, align 1, !tbaa !14, !alias.scope !203
  %75 = getelementptr inbounds i8, i8* %69, i64 96
  %76 = bitcast i8* %75 to <32 x i8>*
  %wide.load60 = load <32 x i8>, <32 x i8>* %76, align 1, !tbaa !14, !alias.scope !203
  %77 = bitcast i8* %next.gep to <32 x i8>*
  store <32 x i8> %wide.load, <32 x i8>* %77, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %78 = getelementptr i8, i8* %next.gep, i64 32
  %79 = bitcast i8* %78 to <32 x i8>*
  store <32 x i8> %wide.load58, <32 x i8>* %79, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %80 = getelementptr i8, i8* %next.gep, i64 64
  %81 = bitcast i8* %80 to <32 x i8>*
  store <32 x i8> %wide.load59, <32 x i8>* %81, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %82 = getelementptr i8, i8* %next.gep, i64 96
  %83 = bitcast i8* %82 to <32 x i8>*
  store <32 x i8> %wide.load60, <32 x i8>* %83, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49 = or i64 %index48, 128
  %next.gep.1 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49
  %offset.idx.1 = add i64 %start.0.idx.lcssa, %index.next49
  %84 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.1
  %85 = bitcast i8* %84 to <32 x i8>*
  %wide.load.1 = load <32 x i8>, <32 x i8>* %85, align 1, !tbaa !14, !alias.scope !203
  %86 = getelementptr inbounds i8, i8* %84, i64 32
  %87 = bitcast i8* %86 to <32 x i8>*
  %wide.load58.1 = load <32 x i8>, <32 x i8>* %87, align 1, !tbaa !14, !alias.scope !203
  %88 = getelementptr inbounds i8, i8* %84, i64 64
  %89 = bitcast i8* %88 to <32 x i8>*
  %wide.load59.1 = load <32 x i8>, <32 x i8>* %89, align 1, !tbaa !14, !alias.scope !203
  %90 = getelementptr inbounds i8, i8* %84, i64 96
  %91 = bitcast i8* %90 to <32 x i8>*
  %wide.load60.1 = load <32 x i8>, <32 x i8>* %91, align 1, !tbaa !14, !alias.scope !203
  %92 = bitcast i8* %next.gep.1 to <32 x i8>*
  store <32 x i8> %wide.load.1, <32 x i8>* %92, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %93 = getelementptr i8, i8* %next.gep.1, i64 32
  %94 = bitcast i8* %93 to <32 x i8>*
  store <32 x i8> %wide.load58.1, <32 x i8>* %94, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %95 = getelementptr i8, i8* %next.gep.1, i64 64
  %96 = bitcast i8* %95 to <32 x i8>*
  store <32 x i8> %wide.load59.1, <32 x i8>* %96, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %97 = getelementptr i8, i8* %next.gep.1, i64 96
  %98 = bitcast i8* %97 to <32 x i8>*
  store <32 x i8> %wide.load60.1, <32 x i8>* %98, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.1 = or i64 %index48, 256
  %next.gep.2 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.1
  %offset.idx.2 = add i64 %start.0.idx.lcssa, %index.next49.1
  %99 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.2
  %100 = bitcast i8* %99 to <32 x i8>*
  %wide.load.2 = load <32 x i8>, <32 x i8>* %100, align 1, !tbaa !14, !alias.scope !203
  %101 = getelementptr inbounds i8, i8* %99, i64 32
  %102 = bitcast i8* %101 to <32 x i8>*
  %wide.load58.2 = load <32 x i8>, <32 x i8>* %102, align 1, !tbaa !14, !alias.scope !203
  %103 = getelementptr inbounds i8, i8* %99, i64 64
  %104 = bitcast i8* %103 to <32 x i8>*
  %wide.load59.2 = load <32 x i8>, <32 x i8>* %104, align 1, !tbaa !14, !alias.scope !203
  %105 = getelementptr inbounds i8, i8* %99, i64 96
  %106 = bitcast i8* %105 to <32 x i8>*
  %wide.load60.2 = load <32 x i8>, <32 x i8>* %106, align 1, !tbaa !14, !alias.scope !203
  %107 = bitcast i8* %next.gep.2 to <32 x i8>*
  store <32 x i8> %wide.load.2, <32 x i8>* %107, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %108 = getelementptr i8, i8* %next.gep.2, i64 32
  %109 = bitcast i8* %108 to <32 x i8>*
  store <32 x i8> %wide.load58.2, <32 x i8>* %109, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %110 = getelementptr i8, i8* %next.gep.2, i64 64
  %111 = bitcast i8* %110 to <32 x i8>*
  store <32 x i8> %wide.load59.2, <32 x i8>* %111, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %112 = getelementptr i8, i8* %next.gep.2, i64 96
  %113 = bitcast i8* %112 to <32 x i8>*
  store <32 x i8> %wide.load60.2, <32 x i8>* %113, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.2 = or i64 %index48, 384
  %next.gep.3 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.2
  %offset.idx.3 = add i64 %start.0.idx.lcssa, %index.next49.2
  %114 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.3
  %115 = bitcast i8* %114 to <32 x i8>*
  %wide.load.3 = load <32 x i8>, <32 x i8>* %115, align 1, !tbaa !14, !alias.scope !203
  %116 = getelementptr inbounds i8, i8* %114, i64 32
  %117 = bitcast i8* %116 to <32 x i8>*
  %wide.load58.3 = load <32 x i8>, <32 x i8>* %117, align 1, !tbaa !14, !alias.scope !203
  %118 = getelementptr inbounds i8, i8* %114, i64 64
  %119 = bitcast i8* %118 to <32 x i8>*
  %wide.load59.3 = load <32 x i8>, <32 x i8>* %119, align 1, !tbaa !14, !alias.scope !203
  %120 = getelementptr inbounds i8, i8* %114, i64 96
  %121 = bitcast i8* %120 to <32 x i8>*
  %wide.load60.3 = load <32 x i8>, <32 x i8>* %121, align 1, !tbaa !14, !alias.scope !203
  %122 = bitcast i8* %next.gep.3 to <32 x i8>*
  store <32 x i8> %wide.load.3, <32 x i8>* %122, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %123 = getelementptr i8, i8* %next.gep.3, i64 32
  %124 = bitcast i8* %123 to <32 x i8>*
  store <32 x i8> %wide.load58.3, <32 x i8>* %124, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %125 = getelementptr i8, i8* %next.gep.3, i64 64
  %126 = bitcast i8* %125 to <32 x i8>*
  store <32 x i8> %wide.load59.3, <32 x i8>* %126, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %127 = getelementptr i8, i8* %next.gep.3, i64 96
  %128 = bitcast i8* %127 to <32 x i8>*
  store <32 x i8> %wide.load60.3, <32 x i8>* %128, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.3 = add i64 %index48, 512
  %niter219.nsub.3 = add i64 %niter219, -4
  %niter219.ncmp.3 = icmp eq i64 %niter219.nsub.3, 0
  br i1 %niter219.ncmp.3, label %middle.block36.unr-lcssa, label %vector.body38, !llvm.loop !208

middle.block36.unr-lcssa:                         ; preds = %vector.body38, %vector.ph41
  %index48.unr = phi i64 [ 0, %vector.ph41 ], [ %index.next49.3, %vector.body38 ]
  %lcmp.mod217.not = icmp eq i64 %xtraiter215, 0
  br i1 %lcmp.mod217.not, label %middle.block36, label %vector.body38.epil

vector.body38.epil:                               ; preds = %middle.block36.unr-lcssa, %vector.body38.epil
  %index48.epil = phi i64 [ %index.next49.epil, %vector.body38.epil ], [ %index48.unr, %middle.block36.unr-lcssa ]
  %epil.iter216 = phi i64 [ %epil.iter216.sub, %vector.body38.epil ], [ %xtraiter215, %middle.block36.unr-lcssa ]
  %next.gep.epil = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48.epil
  %offset.idx.epil = add i64 %start.0.idx.lcssa, %index48.epil
  %129 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.epil
  %130 = bitcast i8* %129 to <32 x i8>*
  %wide.load.epil = load <32 x i8>, <32 x i8>* %130, align 1, !tbaa !14, !alias.scope !203
  %131 = getelementptr inbounds i8, i8* %129, i64 32
  %132 = bitcast i8* %131 to <32 x i8>*
  %wide.load58.epil = load <32 x i8>, <32 x i8>* %132, align 1, !tbaa !14, !alias.scope !203
  %133 = getelementptr inbounds i8, i8* %129, i64 64
  %134 = bitcast i8* %133 to <32 x i8>*
  %wide.load59.epil = load <32 x i8>, <32 x i8>* %134, align 1, !tbaa !14, !alias.scope !203
  %135 = getelementptr inbounds i8, i8* %129, i64 96
  %136 = bitcast i8* %135 to <32 x i8>*
  %wide.load60.epil = load <32 x i8>, <32 x i8>* %136, align 1, !tbaa !14, !alias.scope !203
  %137 = bitcast i8* %next.gep.epil to <32 x i8>*
  store <32 x i8> %wide.load.epil, <32 x i8>* %137, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %138 = getelementptr i8, i8* %next.gep.epil, i64 32
  %139 = bitcast i8* %138 to <32 x i8>*
  store <32 x i8> %wide.load58.epil, <32 x i8>* %139, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %140 = getelementptr i8, i8* %next.gep.epil, i64 64
  %141 = bitcast i8* %140 to <32 x i8>*
  store <32 x i8> %wide.load59.epil, <32 x i8>* %141, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %142 = getelementptr i8, i8* %next.gep.epil, i64 96
  %143 = bitcast i8* %142 to <32 x i8>*
  store <32 x i8> %wide.load60.epil, <32 x i8>* %143, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.epil = add i64 %index48.epil, 128
  %epil.iter216.sub = add i64 %epil.iter216, -1
  %epil.iter216.cmp.not = icmp eq i64 %epil.iter216.sub, 0
  br i1 %epil.iter216.cmp.not, label %middle.block36, label %vector.body38.epil, !llvm.loop !209

middle.block36:                                   ; preds = %vector.body38.epil, %middle.block36.unr-lcssa
  %cmp.n54 = icmp eq i64 %n.vec47, %63
  br i1 %cmp.n54, label %while.cond191.preheader, label %while.body187.preheader212

while.body187.preheader212:                       ; preds = %vector.memcheck, %while.body187.preheader, %middle.block36
  %dst.0870.ph = phi i8* [ %62, %vector.memcheck ], [ %62, %while.body187.preheader ], [ %ind.end51, %middle.block36 ]
  %start.1869.idx.ph = phi i64 [ %start.0.idx.lcssa, %vector.memcheck ], [ %start.0.idx.lcssa, %while.body187.preheader ], [ %ind.end53, %middle.block36 ]
  %144 = sub i64 -2, %start.1869.idx.ph
  %145 = and i64 %start.1869.idx.ph, 7
  %xtraiter220 = xor i64 %145, 7
  %lcmp.mod221.not = icmp eq i64 %xtraiter220, 0
  br i1 %lcmp.mod221.not, label %while.body187.prol.loopexit, label %while.body187.prol

while.body187.prol:                               ; preds = %while.body187.preheader212, %while.body187.prol
  %dst.0870.prol = phi i8* [ %incdec.ptr189.prol, %while.body187.prol ], [ %dst.0870.ph, %while.body187.preheader212 ]
  %start.1869.idx.prol = phi i64 [ %start.1869.add.prol, %while.body187.prol ], [ %start.1869.idx.ph, %while.body187.preheader212 ]
  %prol.iter = phi i64 [ %prol.iter.sub, %while.body187.prol ], [ %xtraiter220, %while.body187.preheader212 ]
  %start.1869.ptr.prol = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx.prol
  %start.1869.add.prol = add nuw nsw i64 %start.1869.idx.prol, 1
  %146 = load i8, i8* %start.1869.ptr.prol, align 1, !tbaa !14
  %incdec.ptr189.prol = getelementptr inbounds i8, i8* %dst.0870.prol, i64 1
  store i8 %146, i8* %dst.0870.prol, align 1, !tbaa !14
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %while.body187.prol.loopexit, label %while.body187.prol, !llvm.loop !210

while.body187.prol.loopexit:                      ; preds = %while.body187.prol, %while.body187.preheader212
  %incdec.ptr189.lcssa213.unr = phi i8* [ undef, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %dst.0870.unr = phi i8* [ %dst.0870.ph, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %start.1869.idx.unr = phi i64 [ %start.1869.idx.ph, %while.body187.preheader212 ], [ %start.1869.add.prol, %while.body187.prol ]
  %147 = icmp ult i64 %144, 7
  br i1 %147, label %while.cond191.preheader, label %while.body187

while.cond191.preheader:                          ; preds = %while.body187.prol.loopexit, %while.body187, %middle.block36
  %incdec.ptr189.lcssa = phi i8* [ %ind.end51, %middle.block36 ], [ %incdec.ptr189.lcssa213.unr, %while.body187.prol.loopexit ], [ %incdec.ptr189.7, %while.body187 ]
  %add.ptr = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 256
  %cmp193866 = icmp ult i8* %incdec.ptr189.lcssa, %add.ptr
  br i1 %cmp193866, label %iter.check, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705

iter.check:                                       ; preds = %while.cond191.preheader, %while.end183
  %dst.0.lcssa911 = phi i8* [ %incdec.ptr189.lcssa, %while.cond191.preheader ], [ %62, %while.end183 ]
  %dst.0.lcssa91164 = ptrtoint i8* %dst.0.lcssa911 to i64
  %scevgep = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 1, i64 0
  %148 = sub i64 0, %dst.0.lcssa91164
  %scevgep65 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %148
  %exitcount.ptrcnt.to.int = ptrtoint i8* %scevgep65 to i64
  %min.iters.check67 = icmp ult i8* %scevgep65, inttoptr (i64 4 to i8*)
  br i1 %min.iters.check67, label %while.body194.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  %min.iters.check69 = icmp ult i8* %scevgep65, inttoptr (i64 128 to i8*)
  br i1 %min.iters.check69, label %vec.epilog.ph, label %vector.ph70

vector.ph70:                                      ; preds = %vector.main.loop.iter.check
  %n.vec72 = and i64 %exitcount.ptrcnt.to.int, -128
  %149 = add i64 %n.vec72, -128
  %150 = lshr exact i64 %149, 7
  %151 = add nuw nsw i64 %150, 1
  %xtraiter222 = and i64 %151, 7
  %152 = icmp ult i64 %149, 896
  br i1 %152, label %middle.block61.unr-lcssa, label %vector.ph70.new

vector.ph70.new:                                  ; preds = %vector.ph70
  %unroll_iter225 = and i64 %151, 288230376151711736
  br label %vector.body63

vector.body63:                                    ; preds = %vector.body63, %vector.ph70.new
  %index73 = phi i64 [ 0, %vector.ph70.new ], [ %index.next74.7, %vector.body63 ]
  %niter226 = phi i64 [ %unroll_iter225, %vector.ph70.new ], [ %niter226.nsub.7, %vector.body63 ]
  %next.gep76 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73
  %153 = bitcast i8* %next.gep76 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %153, align 1, !tbaa !14
  %154 = getelementptr i8, i8* %next.gep76, i64 32
  %155 = bitcast i8* %154 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %155, align 1, !tbaa !14
  %156 = getelementptr i8, i8* %next.gep76, i64 64
  %157 = bitcast i8* %156 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %157, align 1, !tbaa !14
  %158 = getelementptr i8, i8* %next.gep76, i64 96
  %159 = bitcast i8* %158 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %159, align 1, !tbaa !14
  %index.next74 = or i64 %index73, 128
  %next.gep76.1 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74
  %160 = bitcast i8* %next.gep76.1 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %160, align 1, !tbaa !14
  %161 = getelementptr i8, i8* %next.gep76.1, i64 32
  %162 = bitcast i8* %161 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %162, align 1, !tbaa !14
  %163 = getelementptr i8, i8* %next.gep76.1, i64 64
  %164 = bitcast i8* %163 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %164, align 1, !tbaa !14
  %165 = getelementptr i8, i8* %next.gep76.1, i64 96
  %166 = bitcast i8* %165 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %166, align 1, !tbaa !14
  %index.next74.1 = or i64 %index73, 256
  %next.gep76.2 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.1
  %167 = bitcast i8* %next.gep76.2 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %167, align 1, !tbaa !14
  %168 = getelementptr i8, i8* %next.gep76.2, i64 32
  %169 = bitcast i8* %168 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %169, align 1, !tbaa !14
  %170 = getelementptr i8, i8* %next.gep76.2, i64 64
  %171 = bitcast i8* %170 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %171, align 1, !tbaa !14
  %172 = getelementptr i8, i8* %next.gep76.2, i64 96
  %173 = bitcast i8* %172 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %173, align 1, !tbaa !14
  %index.next74.2 = or i64 %index73, 384
  %next.gep76.3 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.2
  %174 = bitcast i8* %next.gep76.3 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %174, align 1, !tbaa !14
  %175 = getelementptr i8, i8* %next.gep76.3, i64 32
  %176 = bitcast i8* %175 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %176, align 1, !tbaa !14
  %177 = getelementptr i8, i8* %next.gep76.3, i64 64
  %178 = bitcast i8* %177 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %178, align 1, !tbaa !14
  %179 = getelementptr i8, i8* %next.gep76.3, i64 96
  %180 = bitcast i8* %179 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %180, align 1, !tbaa !14
  %index.next74.3 = or i64 %index73, 512
  %next.gep76.4 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.3
  %181 = bitcast i8* %next.gep76.4 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %181, align 1, !tbaa !14
  %182 = getelementptr i8, i8* %next.gep76.4, i64 32
  %183 = bitcast i8* %182 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %183, align 1, !tbaa !14
  %184 = getelementptr i8, i8* %next.gep76.4, i64 64
  %185 = bitcast i8* %184 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %185, align 1, !tbaa !14
  %186 = getelementptr i8, i8* %next.gep76.4, i64 96
  %187 = bitcast i8* %186 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %187, align 1, !tbaa !14
  %index.next74.4 = or i64 %index73, 640
  %next.gep76.5 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.4
  %188 = bitcast i8* %next.gep76.5 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %188, align 1, !tbaa !14
  %189 = getelementptr i8, i8* %next.gep76.5, i64 32
  %190 = bitcast i8* %189 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %190, align 1, !tbaa !14
  %191 = getelementptr i8, i8* %next.gep76.5, i64 64
  %192 = bitcast i8* %191 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %192, align 1, !tbaa !14
  %193 = getelementptr i8, i8* %next.gep76.5, i64 96
  %194 = bitcast i8* %193 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %194, align 1, !tbaa !14
  %index.next74.5 = or i64 %index73, 768
  %next.gep76.6 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.5
  %195 = bitcast i8* %next.gep76.6 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %195, align 1, !tbaa !14
  %196 = getelementptr i8, i8* %next.gep76.6, i64 32
  %197 = bitcast i8* %196 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %197, align 1, !tbaa !14
  %198 = getelementptr i8, i8* %next.gep76.6, i64 64
  %199 = bitcast i8* %198 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %199, align 1, !tbaa !14
  %200 = getelementptr i8, i8* %next.gep76.6, i64 96
  %201 = bitcast i8* %200 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %201, align 1, !tbaa !14
  %index.next74.6 = or i64 %index73, 896
  %next.gep76.7 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.6
  %202 = bitcast i8* %next.gep76.7 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %202, align 1, !tbaa !14
  %203 = getelementptr i8, i8* %next.gep76.7, i64 32
  %204 = bitcast i8* %203 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %204, align 1, !tbaa !14
  %205 = getelementptr i8, i8* %next.gep76.7, i64 64
  %206 = bitcast i8* %205 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %206, align 1, !tbaa !14
  %207 = getelementptr i8, i8* %next.gep76.7, i64 96
  %208 = bitcast i8* %207 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %208, align 1, !tbaa !14
  %index.next74.7 = add i64 %index73, 1024
  %niter226.nsub.7 = add i64 %niter226, -8
  %niter226.ncmp.7 = icmp eq i64 %niter226.nsub.7, 0
  br i1 %niter226.ncmp.7, label %middle.block61.unr-lcssa, label %vector.body63, !llvm.loop !211

middle.block61.unr-lcssa:                         ; preds = %vector.body63, %vector.ph70
  %index73.unr = phi i64 [ 0, %vector.ph70 ], [ %index.next74.7, %vector.body63 ]
  %lcmp.mod224.not = icmp eq i64 %xtraiter222, 0
  br i1 %lcmp.mod224.not, label %middle.block61, label %vector.body63.epil

vector.body63.epil:                               ; preds = %middle.block61.unr-lcssa, %vector.body63.epil
  %index73.epil = phi i64 [ %index.next74.epil, %vector.body63.epil ], [ %index73.unr, %middle.block61.unr-lcssa ]
  %epil.iter223 = phi i64 [ %epil.iter223.sub, %vector.body63.epil ], [ %xtraiter222, %middle.block61.unr-lcssa ]
  %next.gep76.epil = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73.epil
  %209 = bitcast i8* %next.gep76.epil to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %209, align 1, !tbaa !14
  %210 = getelementptr i8, i8* %next.gep76.epil, i64 32
  %211 = bitcast i8* %210 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %211, align 1, !tbaa !14
  %212 = getelementptr i8, i8* %next.gep76.epil, i64 64
  %213 = bitcast i8* %212 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %213, align 1, !tbaa !14
  %214 = getelementptr i8, i8* %next.gep76.epil, i64 96
  %215 = bitcast i8* %214 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %215, align 1, !tbaa !14
  %index.next74.epil = add i64 %index73.epil, 128
  %epil.iter223.sub = add i64 %epil.iter223, -1
  %epil.iter223.cmp.not = icmp eq i64 %epil.iter223.sub, 0
  br i1 %epil.iter223.cmp.not, label %middle.block61, label %vector.body63.epil, !llvm.loop !212

middle.block61:                                   ; preds = %vector.body63.epil, %middle.block61.unr-lcssa
  %cmp.n75 = icmp eq i64 %n.vec72, %exitcount.ptrcnt.to.int
  br i1 %cmp.n75, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block61
  %ind.end89 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec72
  %n.vec.remaining = and i64 %exitcount.ptrcnt.to.int, 124
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  br i1 %min.epilog.iters.check, label %while.body194.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %vec.epilog.resume.val = phi i64 [ %n.vec72, %vec.epilog.iter.check ], [ 0, %vector.main.loop.iter.check ]
  %216 = sub i64 0, %dst.0.lcssa91164
  %scevgep80 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %216
  %exitcount.ptrcnt.to.int82 = ptrtoint i8* %scevgep80 to i64
  %n.vec84 = and i64 %exitcount.ptrcnt.to.int82, -4
  %ind.end88 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec84
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index85 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next86, %vec.epilog.vector.body ]
  %next.gep91 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index85
  %217 = bitcast i8* %next.gep91 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %217, align 1, !tbaa !14
  %index.next86 = add i64 %index85, 4
  %218 = icmp eq i64 %index.next86, %n.vec84
  br i1 %218, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !213

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %cmp.n90 = icmp eq i64 %n.vec84, %exitcount.ptrcnt.to.int82
  br i1 %cmp.n90, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194.preheader

while.body194.preheader:                          ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %dst.1867.ph = phi i8* [ %dst.0.lcssa911, %iter.check ], [ %ind.end89, %vec.epilog.iter.check ], [ %ind.end88, %vec.epilog.middle.block ]
  br label %while.body194

while.body187:                                    ; preds = %while.body187.prol.loopexit, %while.body187
  %dst.0870 = phi i8* [ %incdec.ptr189.7, %while.body187 ], [ %dst.0870.unr, %while.body187.prol.loopexit ]
  %start.1869.idx = phi i64 [ %start.1869.add.7, %while.body187 ], [ %start.1869.idx.unr, %while.body187.prol.loopexit ]
  %start.1869.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx
  %start.1869.add = add nuw nsw i64 %start.1869.idx, 1
  %219 = load i8, i8* %start.1869.ptr, align 1, !tbaa !14
  %incdec.ptr189 = getelementptr inbounds i8, i8* %dst.0870, i64 1
  store i8 %219, i8* %dst.0870, align 1, !tbaa !14
  %start.1869.ptr.1 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add
  %start.1869.add.1 = add nuw nsw i64 %start.1869.idx, 2
  %220 = load i8, i8* %start.1869.ptr.1, align 1, !tbaa !14
  %incdec.ptr189.1 = getelementptr inbounds i8, i8* %dst.0870, i64 2
  store i8 %220, i8* %incdec.ptr189, align 1, !tbaa !14
  %start.1869.ptr.2 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.1
  %start.1869.add.2 = add nuw nsw i64 %start.1869.idx, 3
  %221 = load i8, i8* %start.1869.ptr.2, align 1, !tbaa !14
  %incdec.ptr189.2 = getelementptr inbounds i8, i8* %dst.0870, i64 3
  store i8 %221, i8* %incdec.ptr189.1, align 1, !tbaa !14
  %start.1869.ptr.3 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.2
  %start.1869.add.3 = add nuw nsw i64 %start.1869.idx, 4
  %222 = load i8, i8* %start.1869.ptr.3, align 1, !tbaa !14
  %incdec.ptr189.3 = getelementptr inbounds i8, i8* %dst.0870, i64 4
  store i8 %222, i8* %incdec.ptr189.2, align 1, !tbaa !14
  %start.1869.ptr.4 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.3
  %start.1869.add.4 = add nuw nsw i64 %start.1869.idx, 5
  %223 = load i8, i8* %start.1869.ptr.4, align 1, !tbaa !14
  %incdec.ptr189.4 = getelementptr inbounds i8, i8* %dst.0870, i64 5
  store i8 %223, i8* %incdec.ptr189.3, align 1, !tbaa !14
  %start.1869.ptr.5 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.4
  %start.1869.add.5 = add nuw nsw i64 %start.1869.idx, 6
  %224 = load i8, i8* %start.1869.ptr.5, align 1, !tbaa !14
  %incdec.ptr189.5 = getelementptr inbounds i8, i8* %dst.0870, i64 6
  store i8 %224, i8* %incdec.ptr189.4, align 1, !tbaa !14
  %start.1869.ptr.6 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.5
  %start.1869.add.6 = add nuw nsw i64 %start.1869.idx, 7
  %225 = load i8, i8* %start.1869.ptr.6, align 1, !tbaa !14
  %incdec.ptr189.6 = getelementptr inbounds i8, i8* %dst.0870, i64 7
  store i8 %225, i8* %incdec.ptr189.5, align 1, !tbaa !14
  %start.1869.ptr.7 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.6
  %start.1869.add.7 = add nuw nsw i64 %start.1869.idx, 8
  %226 = load i8, i8* %start.1869.ptr.7, align 1, !tbaa !14
  %incdec.ptr189.7 = getelementptr inbounds i8, i8* %dst.0870, i64 8
  store i8 %226, i8* %incdec.ptr189.6, align 1, !tbaa !14
  %cmp186.not.7 = icmp eq i64 %start.1869.add.7, -1
  br i1 %cmp186.not.7, label %while.cond191.preheader, label %while.body187, !llvm.loop !214

while.body194:                                    ; preds = %while.body194.preheader, %while.body194
  %dst.1867 = phi i8* [ %incdec.ptr195, %while.body194 ], [ %dst.1867.ph, %while.body194.preheader ]
  %incdec.ptr195 = getelementptr inbounds i8, i8* %dst.1867, i64 1
  store i8 0, i8* %dst.1867, align 1, !tbaa !14
  %exitcond882.not = icmp eq i8* %incdec.ptr195, %scevgep
  br i1 %exitcond882.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194, !llvm.loop !215

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705: ; preds = %while.body194, %middle.block61, %vec.epilog.middle.block, %while.cond191.preheader
  %add197 = sub i32 6, %61
  %and = and i32 %add197, -8
  %227 = getelementptr inbounds [129 x i8], [129 x i8]* %header198, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(129) %227, i8* nonnull align 1 dereferenceable(129) getelementptr inbounds ([129 x i8], [129 x i8]* @__const.halide_debug_to_file.header, i64 0, i64 0), i64 129, i1 false)
  %call.i701 = call i64 @fwrite(i8* nonnull %227, i64 128, i64 1, i8* nonnull %call.i598) #16
  %228 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %228, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %229 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %228 to i64
  %min.iters.check95 = icmp ult i32 %228, 17
  br i1 %min.iters.check95, label %for.body.i.i.preheader, label %vector.ph96

vector.ph96:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf97 = and i64 %wide.trip.count.i.i, 15
  %230 = icmp eq i64 %n.mod.vf97, 0
  %231 = select i1 %230, i64 16, i64 %n.mod.vf97
  %n.vec98 = sub nsw i64 %wide.trip.count.i.i, %231
  br label %vector.body94

vector.body94:                                    ; preds = %vector.body94, %vector.ph96
  %index99 = phi i64 [ 0, %vector.ph96 ], [ %index.next100, %vector.body94 ]
  %vec.ind103 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph96 ], [ %vec.ind.next107, %vector.body94 ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi, %vector.body94 ]
  %vec.phi108 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi120, %vector.body94 ]
  %vec.phi109 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi121, %vector.body94 ]
  %vec.phi110 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi122, %vector.body94 ]
  %step.add = add <4 x i64> %vec.ind103, <i64 4, i64 4, i64 4, i64 4>
  %step.add104 = add <4 x i64> %vec.ind103, <i64 8, i64 8, i64 8, i64 8>
  %step.add105 = add <4 x i64> %vec.ind103, <i64 12, i64 12, i64 12, i64 12>
  %232 = or i64 %index99, 4
  %233 = or i64 %index99, 8
  %234 = or i64 %index99, 12
  %235 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index99, i32 2
  %236 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %232, i32 2
  %237 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %233, i32 2
  %238 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %234, i32 2
  %239 = bitcast i32* %235 to <16 x i32>*
  %240 = bitcast i32* %236 to <16 x i32>*
  %241 = bitcast i32* %237 to <16 x i32>*
  %242 = bitcast i32* %238 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %239, align 4, !tbaa !182
  %wide.vec111 = load <16 x i32>, <16 x i32>* %240, align 4, !tbaa !182
  %wide.vec112 = load <16 x i32>, <16 x i32>* %241, align 4, !tbaa !182
  %wide.vec113 = load <16 x i32>, <16 x i32>* %242, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec114 = shufflevector <16 x i32> %wide.vec111, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec115 = shufflevector <16 x i32> %wide.vec112, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec116 = shufflevector <16 x i32> %wide.vec113, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %243 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %244 = icmp sgt <4 x i32> %strided.vec114, zeroinitializer
  %245 = icmp sgt <4 x i32> %strided.vec115, zeroinitializer
  %246 = icmp sgt <4 x i32> %strided.vec116, zeroinitializer
  %247 = zext <4 x i32> %strided.vec to <4 x i64>
  %248 = zext <4 x i32> %strided.vec114 to <4 x i64>
  %249 = zext <4 x i32> %strided.vec115 to <4 x i64>
  %250 = zext <4 x i32> %strided.vec116 to <4 x i64>
  %251 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind103, i32 1
  %252 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add, i32 1
  %253 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add104, i32 1
  %254 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add105, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %251, i32 4, <4 x i1> %243, <4 x i32> undef), !tbaa !178
  %wide.masked.gather117 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %252, i32 4, <4 x i1> %244, <4 x i32> undef), !tbaa !178
  %wide.masked.gather118 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %253, i32 4, <4 x i1> %245, <4 x i32> undef), !tbaa !178
  %wide.masked.gather119 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %254, i32 4, <4 x i1> %246, <4 x i32> undef), !tbaa !178
  %255 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %256 = add nsw <4 x i32> %wide.masked.gather117, <i32 -1, i32 -1, i32 -1, i32 -1>
  %257 = add nsw <4 x i32> %wide.masked.gather118, <i32 -1, i32 -1, i32 -1, i32 -1>
  %258 = add nsw <4 x i32> %wide.masked.gather119, <i32 -1, i32 -1, i32 -1, i32 -1>
  %259 = sext <4 x i32> %255 to <4 x i64>
  %260 = sext <4 x i32> %256 to <4 x i64>
  %261 = sext <4 x i32> %257 to <4 x i64>
  %262 = sext <4 x i32> %258 to <4 x i64>
  %263 = mul nsw <4 x i64> %259, %247
  %264 = mul nsw <4 x i64> %260, %248
  %265 = mul nsw <4 x i64> %261, %249
  %266 = mul nsw <4 x i64> %262, %250
  %267 = select <4 x i1> %243, <4 x i64> %263, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %267
  %268 = select <4 x i1> %244, <4 x i64> %264, <4 x i64> zeroinitializer
  %predphi120 = add <4 x i64> %vec.phi108, %268
  %269 = select <4 x i1> %245, <4 x i64> %265, <4 x i64> zeroinitializer
  %predphi121 = add <4 x i64> %vec.phi109, %269
  %270 = select <4 x i1> %246, <4 x i64> %266, <4 x i64> zeroinitializer
  %predphi122 = add <4 x i64> %vec.phi110, %270
  %index.next100 = add i64 %index99, 16
  %vec.ind.next107 = add <4 x i64> %vec.ind103, <i64 16, i64 16, i64 16, i64 16>
  %271 = icmp eq i64 %index.next100, %n.vec98
  br i1 %271, label %middle.block92, label %vector.body94, !llvm.loop !216

middle.block92:                                   ; preds = %vector.body94
  %bin.rdx = add <4 x i64> %predphi120, %predphi
  %bin.rdx123 = add <4 x i64> %predphi121, %bin.rdx
  %bin.rdx124 = add <4 x i64> %predphi122, %bin.rdx123
  %272 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx124)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block92, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec98, %middle.block92 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %272, %middle.block92 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 2
  %273 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %273, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %273 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 1
  %274 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %274, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i693 = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i693, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !217

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check128 = icmp ult i32 %228, 17
  br i1 %min.iters.check128, label %for.body.i13.i.preheader211, label %vector.ph129

vector.ph129:                                     ; preds = %for.body.i13.i.preheader
  %n.mod.vf130 = and i64 %wide.trip.count.i.i, 15
  %275 = icmp eq i64 %n.mod.vf130, 0
  %276 = select i1 %275, i64 16, i64 %n.mod.vf130
  %n.vec131 = sub nsw i64 %wide.trip.count.i.i, %276
  br label %vector.body127

vector.body127:                                   ; preds = %vector.body127, %vector.ph129
  %index132 = phi i64 [ 0, %vector.ph129 ], [ %index.next133, %vector.body127 ]
  %vec.ind136 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph129 ], [ %vec.ind.next141, %vector.body127 ]
  %vec.phi142 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi158, %vector.body127 ]
  %vec.phi143 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi159, %vector.body127 ]
  %vec.phi144 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi160, %vector.body127 ]
  %vec.phi145 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi161, %vector.body127 ]
  %step.add137 = add <4 x i64> %vec.ind136, <i64 4, i64 4, i64 4, i64 4>
  %step.add138 = add <4 x i64> %vec.ind136, <i64 8, i64 8, i64 8, i64 8>
  %step.add139 = add <4 x i64> %vec.ind136, <i64 12, i64 12, i64 12, i64 12>
  %277 = or i64 %index132, 4
  %278 = or i64 %index132, 8
  %279 = or i64 %index132, 12
  %280 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index132, i32 2
  %281 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %277, i32 2
  %282 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %278, i32 2
  %283 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %279, i32 2
  %284 = bitcast i32* %280 to <16 x i32>*
  %285 = bitcast i32* %281 to <16 x i32>*
  %286 = bitcast i32* %282 to <16 x i32>*
  %287 = bitcast i32* %283 to <16 x i32>*
  %wide.vec146 = load <16 x i32>, <16 x i32>* %284, align 4, !tbaa !182
  %wide.vec147 = load <16 x i32>, <16 x i32>* %285, align 4, !tbaa !182
  %wide.vec148 = load <16 x i32>, <16 x i32>* %286, align 4, !tbaa !182
  %wide.vec149 = load <16 x i32>, <16 x i32>* %287, align 4, !tbaa !182
  %strided.vec150 = shufflevector <16 x i32> %wide.vec146, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec151 = shufflevector <16 x i32> %wide.vec147, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec152 = shufflevector <16 x i32> %wide.vec148, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec153 = shufflevector <16 x i32> %wide.vec149, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %288 = icmp slt <4 x i32> %strided.vec150, zeroinitializer
  %289 = icmp slt <4 x i32> %strided.vec151, zeroinitializer
  %290 = icmp slt <4 x i32> %strided.vec152, zeroinitializer
  %291 = icmp slt <4 x i32> %strided.vec153, zeroinitializer
  %292 = sext <4 x i32> %strided.vec150 to <4 x i64>
  %293 = sext <4 x i32> %strided.vec151 to <4 x i64>
  %294 = sext <4 x i32> %strided.vec152 to <4 x i64>
  %295 = sext <4 x i32> %strided.vec153 to <4 x i64>
  %296 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind136, i32 1
  %297 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add137, i32 1
  %298 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add138, i32 1
  %299 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add139, i32 1
  %wide.masked.gather154 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %296, i32 4, <4 x i1> %288, <4 x i32> undef), !tbaa !178
  %wide.masked.gather155 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %297, i32 4, <4 x i1> %289, <4 x i32> undef), !tbaa !178
  %wide.masked.gather156 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %298, i32 4, <4 x i1> %290, <4 x i32> undef), !tbaa !178
  %wide.masked.gather157 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %299, i32 4, <4 x i1> %291, <4 x i32> undef), !tbaa !178
  %300 = add nsw <4 x i32> %wide.masked.gather154, <i32 -1, i32 -1, i32 -1, i32 -1>
  %301 = add nsw <4 x i32> %wide.masked.gather155, <i32 -1, i32 -1, i32 -1, i32 -1>
  %302 = add nsw <4 x i32> %wide.masked.gather156, <i32 -1, i32 -1, i32 -1, i32 -1>
  %303 = add nsw <4 x i32> %wide.masked.gather157, <i32 -1, i32 -1, i32 -1, i32 -1>
  %304 = sext <4 x i32> %300 to <4 x i64>
  %305 = sext <4 x i32> %301 to <4 x i64>
  %306 = sext <4 x i32> %302 to <4 x i64>
  %307 = sext <4 x i32> %303 to <4 x i64>
  %308 = mul nsw <4 x i64> %304, %292
  %309 = mul nsw <4 x i64> %305, %293
  %310 = mul nsw <4 x i64> %306, %294
  %311 = mul nsw <4 x i64> %307, %295
  %312 = select <4 x i1> %288, <4 x i64> %308, <4 x i64> zeroinitializer
  %predphi158 = add <4 x i64> %vec.phi142, %312
  %313 = select <4 x i1> %289, <4 x i64> %309, <4 x i64> zeroinitializer
  %predphi159 = add <4 x i64> %vec.phi143, %313
  %314 = select <4 x i1> %290, <4 x i64> %310, <4 x i64> zeroinitializer
  %predphi160 = add <4 x i64> %vec.phi144, %314
  %315 = select <4 x i1> %291, <4 x i64> %311, <4 x i64> zeroinitializer
  %predphi161 = add <4 x i64> %vec.phi145, %315
  %index.next133 = add i64 %index132, 16
  %vec.ind.next141 = add <4 x i64> %vec.ind136, <i64 16, i64 16, i64 16, i64 16>
  %316 = icmp eq i64 %index.next133, %n.vec131
  br i1 %316, label %middle.block125, label %vector.body127, !llvm.loop !218

middle.block125:                                  ; preds = %vector.body127
  %bin.rdx162 = add <4 x i64> %predphi159, %predphi158
  %bin.rdx163 = add <4 x i64> %predphi160, %bin.rdx162
  %bin.rdx164 = add <4 x i64> %predphi161, %bin.rdx163
  %317 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx164)
  br label %for.body.i13.i.preheader211

for.body.i13.i.preheader211:                      ; preds = %middle.block125, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec131, %middle.block125 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %317, %middle.block125 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader211, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader211 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader211 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 2
  %318 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %318, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %318 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 1
  %319 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %319, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !219

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %add8.i27.i = phi i64 [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i694 = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %320 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i696 = zext i8 %320 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i696, 7
  %div.i.i697 = lshr i64 %add.i4.i, 3
  %mul.i698 = mul i64 %div.i.i697, %sub.i694
  %321 = trunc i64 %mul.i698 to i32
  %322 = add i32 %321, 7
  %323 = and i32 %322, 7
  %conv204 = xor i32 %323, 7
  %conv205 = zext i32 %conv204 to i64
  %add206 = add i64 %mul.i698, %conv205
  %tobool207.not = icmp ult i64 %add206, 4294967296
  br i1 %tobool207.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687, label %cleanup278.thread

cleanup278.thread:                                ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6.40, i64 0, i64 0)) #16
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #11
  br label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687: ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %324 = icmp sgt i32 %228, 2
  %spec.store.select = select i1 %324, i32 %228, i32 2
  %325 = bitcast [8 x i32]* %tags to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %325) #11
  %arrayinit.begin = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 0
  store i32 14, i32* %arrayinit.begin, align 4, !tbaa !73
  %arrayinit.element = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 1
  %add214 = shl i32 %spec.store.select, 2
  %and215 = add i32 %add214, 4
  %mul216 = and i32 %and215, -8
  %add217 = add i32 %and, 40
  %add218 = add i32 %add217, %mul216
  %add220 = add i32 %add218, %321
  %add221 = add i32 %add220, %conv204
  store i32 %add221, i32* %arrayinit.element, align 4, !tbaa !73
  %arrayinit.element222 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 2
  store i32 6, i32* %arrayinit.element222, align 4, !tbaa !73
  %arrayinit.element223 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 3
  store i32 8, i32* %arrayinit.element223, align 4, !tbaa !73
  %arrayinit.element224 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 4
  %idxprom225 = sext i32 %type_code to i64
  %arrayidx226 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE, i64 0, i64 %idxprom225
  %326 = load i8, i8* %arrayidx226, align 1, !tbaa !14
  %conv227 = zext i8 %326 to i32
  store i32 %conv227, i32* %arrayinit.element224, align 4, !tbaa !73
  %arrayinit.element228 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 5
  store i32 1, i32* %arrayinit.element228, align 4, !tbaa !73
  %arrayinit.element229 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 6
  store i32 5, i32* %arrayinit.element229, align 4, !tbaa !73
  %arrayinit.element230 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 7
  store i32 %add214, i32* %arrayinit.element230, align 4, !tbaa !73
  %call.i683 = call i64 @fwrite(i8* nonnull %325, i64 32, i64 1, i8* nonnull %call.i598) #16
  %cmp.i684.not = icmp eq i64 %call.i683, 0
  br i1 %cmp.i684.not, label %cleanup278, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %327 = bitcast [4 x i32]* %extents to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %327) #11
  %arrayinit.begin235 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 0
  %328 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %328, i32* %arrayinit.begin235, align 4, !tbaa !73
  %arrayinit.element238 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 1
  %329 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %329, i32* %arrayinit.element238, align 4, !tbaa !73
  %arrayinit.element241 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 2
  %330 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %330, i32* %arrayinit.element241, align 4, !tbaa !73
  %arrayinit.element244 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 3
  %331 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %331, i32* %arrayinit.element244, align 4, !tbaa !73
  %conv248 = sext i32 %mul216 to i64
  %call.i672 = call i64 @fwrite(i8* nonnull %327, i64 %conv248, i64 1, i8* nonnull %call.i598) #16
  %cmp.i673.not = icmp eq i64 %call.i672, 0
  br i1 %cmp.i673.not, label %cleanup274, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %332 = bitcast [2 x i32]* %name_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %332) #11
  %arrayinit.begin252 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 0
  store i32 1, i32* %arrayinit.begin252, align 4, !tbaa !73
  %arrayinit.element253 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 1
  store i32 %conv184, i32* %arrayinit.element253, align 4, !tbaa !73
  %call.i660 = call i64 @fwrite(i8* nonnull %332, i64 8, i64 1, i8* nonnull %call.i598) #16
  %cmp.i661.not = icmp eq i64 %call.i660, 0
  br i1 %cmp.i661.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %conv258 = zext i32 %and to i64
  %call.i648 = call i64 @fwrite(i8* nonnull %62, i64 %conv258, i64 1, i8* nonnull %call.i598) #16
  %cmp.i649.not = icmp eq i64 %call.i648, 0
  br i1 %cmp.i649.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652
  %333 = bitcast [2 x i32]* %payload_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %333) #11
  %arrayinit.begin262 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 0
  %arrayidx264 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE, i64 0, i64 %idxprom225
  %334 = load i8, i8* %arrayidx264, align 1, !tbaa !14
  %conv265 = zext i8 %334 to i32
  store i32 %conv265, i32* %arrayinit.begin262, align 4, !tbaa !73
  %arrayinit.element266 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 1
  store i32 %321, i32* %arrayinit.element266, align 4, !tbaa !73
  %call.i638 = call i64 @fwrite(i8* nonnull %333, i64 8, i64 1, i8* nonnull %call.i598) #16
  %cmp.i639.not = icmp eq i64 %call.i638, 0
  %cleanup.dest.slot.5 = zext i1 %cmp.i639.not to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %333) #11
  br label %cleanup273

cleanup273:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %cleanup.dest.slot.6 = phi i32 [ %cleanup.dest.slot.5, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  %retval.6 = phi i32 [ -11, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ -9, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ -10, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %332) #11
  br label %cleanup274

cleanup274:                                       ; preds = %cleanup273, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %cleanup.dest.slot.7 = phi i32 [ %cleanup.dest.slot.6, %cleanup273 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  %retval.7 = phi i32 [ %retval.6, %cleanup273 ], [ -8, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %327) #11
  br label %cleanup278

cleanup278:                                       ; preds = %cleanup274, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %cleanup.dest.slot.8 = phi i32 [ %cleanup.dest.slot.7, %cleanup274 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  %retval.8 = phi i32 [ %retval.7, %cleanup274 ], [ -7, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %325) #11
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #11
  %cond442 = icmp eq i32 %cleanup.dest.slot.8, 0
  br i1 %cond442, label %if.end311, label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631: ; preds = %if.else164
  %335 = bitcast [5 x i32]* %header289 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %335) #11
  %arrayinit.begin290 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 0
  %336 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %336, i32* %arrayinit.begin290, align 4, !tbaa !73
  %arrayinit.element293 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 1
  %337 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %337, i32* %arrayinit.element293, align 4, !tbaa !73
  %arrayinit.element296 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 2
  %338 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %338, i32* %arrayinit.element296, align 4, !tbaa !73
  %arrayinit.element299 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 3
  %339 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %339, i32* %arrayinit.element299, align 4, !tbaa !73
  %arrayinit.element302 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 4
  store i32 %type_code, i32* %arrayinit.element302, align 4, !tbaa !73
  %call.i627 = call i64 @fwrite(i8* nonnull %335, i64 20, i64 1, i8* nonnull %call.i598) #16
  %cmp.i628.not = icmp eq i64 %call.i627, 0
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %335) #11
  br i1 %cmp.i628.not, label %cleanup433, label %if.end311

if.end311:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup154.thread
  %final_padding_bytes.0 = phi i32 [ %conv204, %cleanup278 ], [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ 0, %cleanup154.thread ]
  %340 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %340) #11
  %div = udiv i32 4096, %div.i
  %341 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %cmp320856 = icmp sgt i32 %341, 0
  br i1 %cmp320856, label %for.body322.lr.ph, label %if.end412

for.body322.lr.ph:                                ; preds = %if.end311
  %342 = load i32, i32* %min.i.3, align 4, !tbaa !181
  %343 = bitcast [4 x i32]* %idx to i8*
  %arrayinit.begin357 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 0
  %arrayinit.element358 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 1
  %arrayinit.element359 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 2
  %arrayinit.element360 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 3
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %conv368 = zext i32 %div.i to i64
  %mul373 = mul nuw nsw i32 %div, %div.i
  %conv374 = zext i32 %mul373 to i64
  %.pre891 = load i32, i32* %min.i.2, align 4, !tbaa !181
  %.pre892 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  br label %for.body322

for.body322:                                      ; preds = %for.inc399, %for.body322.lr.ph
  %344 = phi i32 [ %342, %for.body322.lr.ph ], [ %430, %for.inc399 ]
  %345 = phi i32 [ %341, %for.body322.lr.ph ], [ %431, %for.inc399 ]
  %346 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %432, %for.inc399 ]
  %347 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %433, %for.inc399 ]
  %348 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %434, %for.inc399 ]
  %349 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %435, %for.inc399 ]
  %dim3.0858 = phi i32 [ %342, %for.body322.lr.ph ], [ %inc400, %for.inc399 ]
  %counter.0857 = phi i32 [ 0, %for.body322.lr.ph ], [ %counter.1.lcssa, %for.inc399 ]
  %cmp331848 = icmp sgt i32 %348, 0
  br i1 %cmp331848, label %for.body333.preheader, label %for.inc399

for.body333.preheader:                            ; preds = %for.body322
  %.pre893 = load i32, i32* %min.i.1, align 4, !tbaa !181
  %.pre894 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  br label %for.body333

for.body333:                                      ; preds = %for.inc394, %for.body333.preheader
  %350 = phi i32 [ %424, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %351 = phi i32 [ %425, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %352 = phi i32 [ %426, %for.inc394 ], [ %346, %for.body333.preheader ]
  %353 = phi i32 [ %427, %for.inc394 ], [ %347, %for.body333.preheader ]
  %354 = phi i32 [ %428, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %355 = phi i32 [ %429, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %dim2.0850 = phi i32 [ %inc395, %for.inc394 ], [ %349, %for.body333.preheader ]
  %counter.1849 = phi i32 [ %counter.2.lcssa, %for.inc394 ], [ %counter.0857, %for.body333.preheader ]
  %cmp342839 = icmp sgt i32 %354, 0
  br i1 %cmp342839, label %for.body344.preheader, label %for.inc394

for.body344.preheader:                            ; preds = %for.body333
  %.pre = load i32, i32* %extent.i, align 4, !tbaa !178
  br label %for.body344

for.body344:                                      ; preds = %for.body344.preheader, %for.inc389
  %356 = phi i32 [ %421, %for.inc389 ], [ %350, %for.body344.preheader ]
  %357 = phi i32 [ %422, %for.inc389 ], [ %351, %for.body344.preheader ]
  %358 = phi i32 [ %423, %for.inc389 ], [ %.pre, %for.body344.preheader ]
  %dim1.0841 = phi i32 [ %inc390, %for.inc389 ], [ %355, %for.body344.preheader ]
  %counter.2840 = phi i32 [ %counter.6797, %for.inc389 ], [ %counter.1849, %for.body344.preheader ]
  %cmp353834 = icmp sgt i32 %358, 0
  br i1 %cmp353834, label %for.body355.preheader, label %for.inc389

for.body355.preheader:                            ; preds = %for.body344
  %359 = load i32, i32* %min.i, align 4, !tbaa !181
  br label %for.body355

for.body355:                                      ; preds = %for.inc384, %for.body355.preheader
  %dim0.0836 = phi i32 [ %inc385, %for.inc384 ], [ %359, %for.body355.preheader ]
  %counter.3835 = phi i32 [ %counter.4, %for.inc384 ], [ %counter.2840, %for.body355.preheader ]
  %inc356 = add nsw i32 %counter.3835, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %343) #11
  store i32 %dim0.0836, i32* %arrayinit.begin357, align 4, !tbaa !73
  store i32 %dim1.0841, i32* %arrayinit.element358, align 4, !tbaa !73
  store i32 %dim2.0850, i32* %arrayinit.element359, align 4, !tbaa !73
  store i32 %dim3.0858, i32* %arrayinit.element360, align 4, !tbaa !73
  %360 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17.i = icmp sgt i32 %360, 0
  br i1 %cmp17.i, label %for.body.lr.ph.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit

for.body.lr.ph.i:                                 ; preds = %for.body355
  %361 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %wide.trip.count.i = zext i32 %360 to i64
  %stride.i621920 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 2
  %362 = load i32, i32* %stride.i621920, align 4, !tbaa !182
  %conv.i622921 = sext i32 %362 to i64
  %min.i623922 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 0
  %363 = load i32, i32* %min.i623922, align 4, !tbaa !181
  %sub.i923 = sub nsw i32 %dim0.0836, %363
  %conv7.i924 = sext i32 %sub.i923 to i64
  %mul.i925 = mul nsw i64 %conv7.i924, %conv.i622921
  %exitcond.not.i927 = icmp eq i32 %360, 1
  br i1 %exitcond.not.i927, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.preheader, !llvm.loop !220

for.body.i.for.body.i_crit_edge.preheader:        ; preds = %for.body.lr.ph.i
  %stride.i62126 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 2
  %364 = load i32, i32* %stride.i62126, align 4, !tbaa !182
  %conv.i62227 = sext i32 %364 to i64
  %min.i62328 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 0
  %365 = load i32, i32* %min.i62328, align 4, !tbaa !181
  %sub.i29 = sub nsw i32 %dim1.0841, %365
  %conv7.i30 = sext i32 %sub.i29 to i64
  %mul.i31 = mul nsw i64 %conv7.i30, %conv.i62227
  %add.i62432 = add nsw i64 %mul.i31, %mul.i925
  %exitcond.not.i33 = icmp eq i32 %360, 2
  br i1 %exitcond.not.i33, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph, !llvm.loop !220

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph: ; preds = %for.body.i.for.body.i_crit_edge.preheader
  %366 = add nsw i64 %wide.trip.count.i, -2
  %min.iters.check169 = icmp ult i64 %366, 17
  br i1 %min.iters.check169, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, label %vector.ph170

vector.ph170:                                     ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %n.mod.vf171 = and i64 %366, 15
  %367 = icmp eq i64 %n.mod.vf171, 0
  %368 = select i1 %367, i64 16, i64 %n.mod.vf171
  %n.vec172 = sub nsw i64 %366, %368
  %ind.end176 = add nsw i64 %n.vec172, 2
  %369 = insertelement <4 x i64> <i64 poison, i64 0, i64 0, i64 0>, i64 %add.i62432, i32 0
  br label %vector.body168

vector.body168:                                   ; preds = %vector.body168, %vector.ph170
  %index173 = phi i64 [ 0, %vector.ph170 ], [ %index.next174, %vector.body168 ]
  %vec.phi179 = phi <4 x i64> [ %369, %vector.ph170 ], [ %409, %vector.body168 ]
  %vec.phi180 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %410, %vector.body168 ]
  %vec.phi181 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %411, %vector.body168 ]
  %vec.phi182 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %412, %vector.body168 ]
  %offset.idx178 = or i64 %index173, 2
  %370 = or i64 %index173, 6
  %371 = or i64 %index173, 10
  %372 = or i64 %index173, 14
  %373 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %offset.idx178
  %374 = bitcast i32* %373 to <4 x i32>*
  %wide.load183 = load <4 x i32>, <4 x i32>* %374, align 4, !tbaa !73
  %375 = getelementptr inbounds i32, i32* %373, i64 4
  %376 = bitcast i32* %375 to <4 x i32>*
  %wide.load184 = load <4 x i32>, <4 x i32>* %376, align 4, !tbaa !73
  %377 = getelementptr inbounds i32, i32* %373, i64 8
  %378 = bitcast i32* %377 to <4 x i32>*
  %wide.load185 = load <4 x i32>, <4 x i32>* %378, align 4, !tbaa !73
  %379 = getelementptr inbounds i32, i32* %373, i64 12
  %380 = bitcast i32* %379 to <4 x i32>*
  %wide.load186 = load <4 x i32>, <4 x i32>* %380, align 4, !tbaa !73
  %381 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %offset.idx178, i32 2
  %382 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %370, i32 2
  %383 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %371, i32 2
  %384 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %372, i32 2
  %385 = getelementptr inbounds i32, i32* %381, i64 -2
  %386 = bitcast i32* %385 to <16 x i32>*
  %387 = getelementptr inbounds i32, i32* %382, i64 -2
  %388 = bitcast i32* %387 to <16 x i32>*
  %389 = getelementptr inbounds i32, i32* %383, i64 -2
  %390 = bitcast i32* %389 to <16 x i32>*
  %391 = getelementptr inbounds i32, i32* %384, i64 -2
  %392 = bitcast i32* %391 to <16 x i32>*
  %wide.vec187 = load <16 x i32>, <16 x i32>* %386, align 4, !tbaa !73
  %wide.vec188 = load <16 x i32>, <16 x i32>* %388, align 4, !tbaa !73
  %wide.vec189 = load <16 x i32>, <16 x i32>* %390, align 4, !tbaa !73
  %wide.vec190 = load <16 x i32>, <16 x i32>* %392, align 4, !tbaa !73
  %strided.vec191 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec192 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec193 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec194 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec195 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec196 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec197 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec198 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %393 = sext <4 x i32> %strided.vec195 to <4 x i64>
  %394 = sext <4 x i32> %strided.vec196 to <4 x i64>
  %395 = sext <4 x i32> %strided.vec197 to <4 x i64>
  %396 = sext <4 x i32> %strided.vec198 to <4 x i64>
  %397 = sub nsw <4 x i32> %wide.load183, %strided.vec191
  %398 = sub nsw <4 x i32> %wide.load184, %strided.vec192
  %399 = sub nsw <4 x i32> %wide.load185, %strided.vec193
  %400 = sub nsw <4 x i32> %wide.load186, %strided.vec194
  %401 = sext <4 x i32> %397 to <4 x i64>
  %402 = sext <4 x i32> %398 to <4 x i64>
  %403 = sext <4 x i32> %399 to <4 x i64>
  %404 = sext <4 x i32> %400 to <4 x i64>
  %405 = mul nsw <4 x i64> %401, %393
  %406 = mul nsw <4 x i64> %402, %394
  %407 = mul nsw <4 x i64> %403, %395
  %408 = mul nsw <4 x i64> %404, %396
  %409 = add <4 x i64> %405, %vec.phi179
  %410 = add <4 x i64> %406, %vec.phi180
  %411 = add <4 x i64> %407, %vec.phi181
  %412 = add <4 x i64> %408, %vec.phi182
  %index.next174 = add i64 %index173, 16
  %413 = icmp eq i64 %index.next174, %n.vec172
  br i1 %413, label %middle.block166, label %vector.body168, !llvm.loop !221

middle.block166:                                  ; preds = %vector.body168
  %bin.rdx199 = add <4 x i64> %410, %409
  %bin.rdx200 = add <4 x i64> %411, %bin.rdx199
  %bin.rdx201 = add <4 x i64> %412, %bin.rdx200
  %414 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx201)
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader: ; preds = %middle.block166, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %indvars.iv.next.i35.ph = phi i64 [ 2, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %ind.end176, %middle.block166 ]
  %add.i62434.ph = phi i64 [ %add.i62432, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %414, %middle.block166 ]
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge: ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge
  %indvars.iv.next.i35 = phi i64 [ %indvars.iv.next.i, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %indvars.iv.next.i35.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %add.i62434 = phi i64 [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %add.i62434.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %arrayidx3.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %indvars.iv.next.i35
  %.pre895.pre = load i32, i32* %arrayidx3.i.phi.trans.insert.phi.trans.insert, align 4, !tbaa !73
  %stride.i621 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 2
  %415 = load i32, i32* %stride.i621, align 4, !tbaa !182
  %conv.i622 = sext i32 %415 to i64
  %min.i623 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 0
  %416 = load i32, i32* %min.i623, align 4, !tbaa !181
  %sub.i = sub nsw i32 %.pre895.pre, %416
  %conv7.i = sext i32 %sub.i to i64
  %mul.i = mul nsw i64 %conv7.i, %conv.i622
  %add.i624 = add nsw i64 %mul.i, %add.i62434
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i35, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, !llvm.loop !222

_ZNK15halide_buffer_t10address_ofEPKi.exit:       ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, %for.body.i.for.body.i_crit_edge.preheader, %for.body.lr.ph.i, %for.body355
  %index.0.lcssa.i = phi i64 [ 0, %for.body355 ], [ %mul.i925, %for.body.lr.ph.i ], [ %add.i62432, %for.body.i.for.body.i_crit_edge.preheader ], [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ]
  %417 = load i8*, i8** %host.i, align 8, !tbaa !172
  %418 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %418 to i64
  %add.i.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i.i, 3
  %mul9.i = mul nsw i64 %div.i.i, %index.0.lcssa.i
  %add.ptr.i = getelementptr inbounds i8, i8* %417, i64 %mul9.i
  %mul366 = mul nsw i32 %counter.3835, %div.i
  %idx.ext = sext i32 %mul366 to i64
  %add.ptr367 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 %idx.ext
  %call369 = call i8* @memcpy(i8* nonnull %add.ptr367, i8* %add.ptr.i, i64 %conv368) #16
  %cmp370 = icmp eq i32 %inc356, %div
  br i1 %cmp370, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, label %for.inc384

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619: ; preds = %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %call.i615 = call i64 @fwrite(i8* nonnull %340, i64 %conv374, i64 1, i8* nonnull %call.i598) #16
  %cmp.i616.not = icmp eq i64 %call.i615, 0
  br i1 %cmp.i616.not, label %cleanup425.loopexit, label %for.inc384

for.inc384:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %counter.4 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619 ], [ %inc356, %_ZNK15halide_buffer_t10address_ofEPKi.exit ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #11
  %inc385 = add nsw i32 %dim0.0836, 1
  %419 = load i32, i32* %extent.i, align 4, !tbaa !178
  %420 = load i32, i32* %min.i, align 4, !tbaa !181
  %add352 = add nsw i32 %420, %419
  %cmp353 = icmp slt i32 %inc385, %add352
  br i1 %cmp353, label %for.body355, label %for.inc389.loopexit, !llvm.loop !223

for.inc389.loopexit:                              ; preds = %for.inc384
  %.pre15 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %.pre16 = load i32, i32* %min.i.1, align 4, !tbaa !181
  br label %for.inc389

for.inc389:                                       ; preds = %for.inc389.loopexit, %for.body344
  %421 = phi i32 [ %356, %for.body344 ], [ %.pre16, %for.inc389.loopexit ]
  %422 = phi i32 [ %357, %for.body344 ], [ %.pre15, %for.inc389.loopexit ]
  %423 = phi i32 [ %358, %for.body344 ], [ %419, %for.inc389.loopexit ]
  %counter.6797 = phi i32 [ %counter.2840, %for.body344 ], [ %counter.4, %for.inc389.loopexit ]
  %inc390 = add nsw i32 %dim1.0841, 1
  %add341 = add nsw i32 %421, %422
  %cmp342 = icmp slt i32 %inc390, %add341
  br i1 %cmp342, label %for.body344, label %for.inc394.loopexit, !llvm.loop !224

for.inc394.loopexit:                              ; preds = %for.inc389
  %.pre896 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %.pre897 = load i32, i32* %min.i.2, align 4, !tbaa !181
  br label %for.inc394

for.inc394:                                       ; preds = %for.inc394.loopexit, %for.body333
  %424 = phi i32 [ %350, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %425 = phi i32 [ %351, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %426 = phi i32 [ %352, %for.body333 ], [ %.pre897, %for.inc394.loopexit ]
  %427 = phi i32 [ %353, %for.body333 ], [ %.pre896, %for.inc394.loopexit ]
  %428 = phi i32 [ %354, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %429 = phi i32 [ %355, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %counter.2.lcssa = phi i32 [ %counter.1849, %for.body333 ], [ %counter.6797, %for.inc394.loopexit ]
  %inc395 = add nsw i32 %dim2.0850, 1
  %add330 = add nsw i32 %427, %426
  %cmp331 = icmp slt i32 %inc395, %add330
  br i1 %cmp331, label %for.body333, label %for.inc399.loopexit, !llvm.loop !225

for.inc399.loopexit:                              ; preds = %for.inc394
  %.pre898 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %.pre899 = load i32, i32* %min.i.3, align 4, !tbaa !181
  br label %for.inc399

for.inc399:                                       ; preds = %for.inc399.loopexit, %for.body322
  %430 = phi i32 [ %344, %for.body322 ], [ %.pre899, %for.inc399.loopexit ]
  %431 = phi i32 [ %345, %for.body322 ], [ %.pre898, %for.inc399.loopexit ]
  %432 = phi i32 [ %346, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %433 = phi i32 [ %347, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %434 = phi i32 [ %348, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %435 = phi i32 [ %349, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %counter.1.lcssa = phi i32 [ %counter.0857, %for.body322 ], [ %counter.2.lcssa, %for.inc399.loopexit ]
  %inc400 = add nsw i32 %dim3.0858, 1
  %add319 = add nsw i32 %431, %430
  %cmp320 = icmp slt i32 %inc400, %add319
  br i1 %cmp320, label %for.body322, label %for.end403, !llvm.loop !226

for.end403:                                       ; preds = %for.inc399
  %cmp404 = icmp sgt i32 %counter.1.lcssa, 0
  br i1 %cmp404, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, label %if.end412

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612: ; preds = %for.end403
  %mul407 = mul nsw i32 %counter.1.lcssa, %div.i
  %conv408 = sext i32 %mul407 to i64
  %call.i608 = call i64 @fwrite(i8* nonnull %340, i64 %conv408, i64 1, i8* nonnull %call.i598) #16
  %cmp.i609.not = icmp eq i64 %call.i608, 0
  br i1 %cmp.i609.not, label %cleanup425, label %if.end412

if.end412:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, %for.end403, %if.end311
  %436 = bitcast i64* %zero to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %436) #11
  store i64 0, i64* %zero, align 8, !tbaa !110
  %tobool413.not = icmp eq i32 %final_padding_bytes.0, 0
  br i1 %tobool413.not, label %if.end423, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit: ; preds = %if.end412
  %conv415 = zext i32 %final_padding_bytes.0 to i64
  %call.i604 = call i64 @fwrite(i8* nonnull %436, i64 %conv415, i64 1, i8* nonnull %call.i598) #16
  %cmp.i605.not = icmp eq i64 %call.i604, 0
  br i1 %cmp.i605.not, label %cleanup424, label %if.end423

if.end423:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit, %if.end412
  br label %cleanup424

cleanup424:                                       ; preds = %if.end423, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit
  %retval.21 = phi i32 [ 0, %if.end423 ], [ -16, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %436) #11
  br label %cleanup425

cleanup425.loopexit:                              ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #11
  br label %cleanup425

cleanup425:                                       ; preds = %cleanup425.loopexit, %cleanup424, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612
  %retval.22 = phi i32 [ %retval.21, %cleanup424 ], [ -14, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612 ], [ -13, %cleanup425.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %340) #11
  br label %cleanup433

cleanup433:                                       ; preds = %cleanup425, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup278.thread, %cleanup154
  %retval.23 = phi i32 [ %retval.22, %cleanup425 ], [ %retval.4, %cleanup154 ], [ %retval.8, %cleanup278 ], [ -12, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ -6, %cleanup278.thread ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #11
  %call.i = call i32 @fclose(i8* nonnull %call.i598) #16
  br label %return

return:                                           ; preds = %cleanup433, %if.end6, %if.end2, %if.then1, %if.then
  %retval.26 = phi i32 [ -1, %if.then ], [ -1, %if.then1 ], [ %call3, %if.end2 ], [ %retval.23, %cleanup433 ], [ -2, %if.end6 ]
  ret i32 %retval.26

for.body.1:                                       ; preds = %for.body.lr.ph
  %arrayidx.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 1
  %arrayidx14.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1
  %437 = bitcast %struct.halide_dimension_t* %arrayidx14.1 to i8*
  %438 = bitcast %struct.halide_dimension_t* %arrayidx.1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %437, i8* nonnull align 4 dereferenceable(16) %438, i64 16, i1 false), !tbaa.struct !177
  %extent.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %439 = load i32, i32* %extent.1, align 4, !tbaa !178
  %conv903.1 = zext i32 %439 to i64
  %mul.1 = mul nuw i64 %conv903, %conv903.1
  %exitcond.not17.1 = icmp eq i64 %11, 2
  br i1 %exitcond.not17.1, label %for.cond19.preheader, label %for.body.2, !llvm.loop !180

for.body.2:                                       ; preds = %for.body.1
  %arrayidx.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 2
  %arrayidx14.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2
  %440 = bitcast %struct.halide_dimension_t* %arrayidx14.2 to i8*
  %441 = bitcast %struct.halide_dimension_t* %arrayidx.2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %440, i8* nonnull align 4 dereferenceable(16) %441, i64 16, i1 false), !tbaa.struct !177
  %extent.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %442 = load i32, i32* %extent.2, align 4, !tbaa !178
  %conv903.2 = zext i32 %442 to i64
  %mul.2 = mul i64 %mul.1, %conv903.2
  %exitcond.not17.2 = icmp eq i64 %11, 3
  br i1 %exitcond.not17.2, label %for.cond19.preheader, label %for.body.3, !llvm.loop !180

for.body.3:                                       ; preds = %for.body.2
  %arrayidx.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 3
  %arrayidx14.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3
  %443 = bitcast %struct.halide_dimension_t* %arrayidx14.3 to i8*
  %444 = bitcast %struct.halide_dimension_t* %arrayidx.3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %443, i8* nonnull align 4 dereferenceable(16) %444, i64 16, i1 false), !tbaa.struct !177
  %extent.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %445 = load i32, i32* %extent.3, align 4, !tbaa !178
  %conv903.3 = zext i32 %445 to i64
  %mul.3 = mul i64 %mul.2, %conv903.3
  br label %for.cond19.preheader
}

declare i64 @fwrite(i8*, i64, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_cache_cleanup() #0 {
entry:
  tail call void @halide_memoization_cache_cleanup() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_memoization_cache_cleanup() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %while.end
  store i64 0, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  ret void

for.body:                                         ; preds = %while.end, %entry
  %__begin1.018 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %while.end ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  %cmp2.not16 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not16, label %while.end, label %while.body

while.body:                                       ; preds = %for.body, %while.body
  %entry1.017 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %while.body ], [ %0, %for.body ]
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next3, align 8, !tbaa !227
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.017) #17
  %2 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %2) #16
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp2.not, label %while.end, label %while.body, !llvm.loop !229

while.end:                                        ; preds = %while.body, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this) local_unnamed_addr #0 align 2 {
entry:
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  %0 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp11.not = icmp eq i32 %0, 0
  br i1 %cmp11.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  %1 = load i8*, i8** %metadata_storage, align 8, !tbaa !231
  tail call void @halide_free(i8* null, i8* %1) #16
  ret void

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %2, i64 %indvars.iv
  %call = tail call i32 @halide_device_free(i8* null, %struct.halide_buffer_t* %arrayidx) #16
  %3 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %3, i64 %indvars.iv, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %4) #17
  %5 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call6 to i8*
  tail call void @halide_free(i8* null, i8* %5) #16
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %6 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %7 = zext i32 %6 to i64
  %cmp = icmp ult i64 %indvars.iv.next, %7
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !233
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) local_unnamed_addr #2 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %host, i64 -64
  %0 = bitcast i8* %add.ptr to %"struct.Halide::Runtime::Internal::CacheBlockHeader"*
  ret %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %0
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp41 = icmp sgt i32 %d, -1
  br i1 %cmp41, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.042 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %idxprom36 = zext i32 %d.addr.042 to i64
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom36
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.042, -1
  %cmp = icmp sgt i32 %d.addr.042, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !234

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.042, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %idxprom5 = sext i32 %d.addr.0.lcssa to i64
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom5
  %1 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp737.not = icmp eq i64 %1, 0
  br i1 %cmp737.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 4, i64 %idxprom5
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 5, i64 %idxprom5
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !235
  %add = add i64 %2, %src_off
  %3 = inttoptr i64 %add to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !237
  %add3 = add i64 %4, %dst_off
  %5 = inttoptr i64 %add3 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !238
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i64 %6) #16
  br label %if.end

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.040 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %src_off.addr.039 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body ]
  %dst_off.addr.038 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add13, %for.body ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.039, i64 %dst_off.addr.038) #17
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !110
  %add10 = add i64 %7, %src_off.addr.039
  %8 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %add13 = add i64 %8, %dst_off.addr.038
  %inc = add nuw i64 %i.040, 1
  %9 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp7 = icmp ult i64 %inc, %9
  br i1 %cmp7, label %for.body, label %if.end, !llvm.loop !239

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !235
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !237
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !240
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %2 = ptrtoint i8* %1 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %3 = load i64, i64* %device, align 8, !tbaa !174
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !235
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %4 = load i8*, i8** %host5, align 8, !tbaa !172
  %5 = ptrtoint i8* %4 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %6 = load i64, i64* %device7, align 8, !tbaa !174
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %5, %cond.true4 ], [ %6, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !237
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 4, i32 1
  %7 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %7 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !238
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 0
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 0
  %arrayidx14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 0
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 1
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 1
  %arrayidx14.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 1
  %8 = bitcast i64* %arrayidx to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %8, align 8, !tbaa !110
  %9 = bitcast i64* %arrayidx12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %9, align 8, !tbaa !110
  %10 = bitcast i64* %arrayidx14 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %10, align 8, !tbaa !110
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 4
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 4
  %arrayidx14.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 4
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 5
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 5
  %arrayidx14.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 5
  %11 = bitcast i64* %arrayidx.4 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %11, align 8, !tbaa !110
  %12 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %12, align 8, !tbaa !110
  %13 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 8
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 8
  %arrayidx14.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 8
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 9
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 9
  %arrayidx14.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 9
  %14 = bitcast i64* %arrayidx.8 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %14, align 8, !tbaa !110
  %15 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %15, align 8, !tbaa !110
  %16 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %16, align 8, !tbaa !110
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 12
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 12
  %arrayidx14.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 12
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 13
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 13
  %arrayidx14.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 13
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 14
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 14
  %arrayidx14.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 14
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 15
  %17 = bitcast i64* %arrayidx.12 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %17, align 8, !tbaa !110
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 15
  %18 = bitcast i64* %arrayidx12.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %18, align 8, !tbaa !110
  %arrayidx14.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 15
  %19 = bitcast i64* %arrayidx14.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %19, align 8, !tbaa !110
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %20 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17272 = icmp sgt i32 %20, 0
  br i1 %cmp17272, label %for.body19.lr.ph, label %for.cond.cleanup18

for.body19.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %21 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %dim23 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim23, align 8, !tbaa !176
  %wide.trip.count = zext i32 %20 to i64
  %min.iters.check = icmp ult i32 %20, 17
  br i1 %min.iters.check, label %for.body19.preheader, label %vector.ph

for.body19.preheader:                             ; preds = %middle.block, %for.body19.lr.ph
  %indvars.iv284.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %n.vec, %middle.block ]
  %.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %73, %middle.block ]
  br label %for.body19

vector.ph:                                        ; preds = %for.body19.lr.ph
  %n.mod.vf = and i64 %wide.trip.count, 15
  %23 = icmp eq i64 %n.mod.vf, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count, %24
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %68, %vector.body ]
  %vec.phi2 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %69, %vector.body ]
  %vec.phi3 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %70, %vector.body ]
  %vec.phi4 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %71, %vector.body ]
  %25 = or i64 %index, 4
  %26 = or i64 %index, 8
  %27 = or i64 %index, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %index, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %27, i32 2
  %32 = getelementptr inbounds i32, i32* %28, i64 -2
  %33 = bitcast i32* %32 to <16 x i32>*
  %34 = getelementptr inbounds i32, i32* %29, i64 -2
  %35 = bitcast i32* %34 to <16 x i32>*
  %36 = getelementptr inbounds i32, i32* %30, i64 -2
  %37 = bitcast i32* %36 to <16 x i32>*
  %38 = getelementptr inbounds i32, i32* %31, i64 -2
  %39 = bitcast i32* %38 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !73
  %wide.vec5 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !73
  %wide.vec6 = load <16 x i32>, <16 x i32>* %37, align 4, !tbaa !73
  %wide.vec7 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !73
  %strided.vec11 = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec5, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec6, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec7, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %40 = sext <4 x i32> %strided.vec11 to <4 x i64>
  %41 = sext <4 x i32> %strided.vec12 to <4 x i64>
  %42 = sext <4 x i32> %strided.vec13 to <4 x i64>
  %43 = sext <4 x i32> %strided.vec14 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 0
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 0
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 0
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 0
  %48 = bitcast i32* %44 to <16 x i32>*
  %49 = bitcast i32* %45 to <16 x i32>*
  %50 = bitcast i32* %46 to <16 x i32>*
  %51 = bitcast i32* %47 to <16 x i32>*
  %wide.vec15 = load <16 x i32>, <16 x i32>* %48, align 4, !tbaa !181
  %wide.vec16 = load <16 x i32>, <16 x i32>* %49, align 4, !tbaa !181
  %wide.vec17 = load <16 x i32>, <16 x i32>* %50, align 4, !tbaa !181
  %wide.vec18 = load <16 x i32>, <16 x i32>* %51, align 4, !tbaa !181
  %52 = sub nsw <16 x i32> %wide.vec15, %wide.vec
  %53 = shufflevector <16 x i32> %52, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %54 = sub nsw <16 x i32> %wide.vec16, %wide.vec5
  %55 = shufflevector <16 x i32> %54, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %56 = sub nsw <16 x i32> %wide.vec17, %wide.vec6
  %57 = shufflevector <16 x i32> %56, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %58 = sub nsw <16 x i32> %wide.vec18, %wide.vec7
  %59 = shufflevector <16 x i32> %58, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = sext <4 x i32> %53 to <4 x i64>
  %61 = sext <4 x i32> %55 to <4 x i64>
  %62 = sext <4 x i32> %57 to <4 x i64>
  %63 = sext <4 x i32> %59 to <4 x i64>
  %64 = mul nsw <4 x i64> %60, %40
  %65 = mul nsw <4 x i64> %61, %41
  %66 = mul nsw <4 x i64> %62, %42
  %67 = mul nsw <4 x i64> %63, %43
  %68 = add <4 x i64> %64, %vec.phi
  %69 = add <4 x i64> %65, %vec.phi2
  %70 = add <4 x i64> %66, %vec.phi3
  %71 = add <4 x i64> %67, %vec.phi4
  %index.next = add i64 %index, 16
  %72 = icmp eq i64 %index.next, %n.vec
  br i1 %72, label %middle.block, label %vector.body, !llvm.loop !241

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %69, %68
  %bin.rdx23 = add <4 x i64> %70, %bin.rdx
  %bin.rdx24 = add <4 x i64> %71, %bin.rdx23
  %73 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx24)
  br label %for.body19.preheader

for.cond.cleanup18:                               ; preds = %for.body19, %cond.end8
  %74 = phi i64 [ 0, %cond.end8 ], [ %add, %for.body19 ]
  %mul37 = mul i64 %74, %conv
  store i64 %mul37, i64* %src_begin, align 8, !tbaa !240
  %dimensions39 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %75 = load i32, i32* %dimensions39, align 4, !tbaa !175
  %cmp40.not = icmp eq i32 %20, %75
  br i1 %cmp40.not, label %lor.lhs.false, label %if.then

for.body19:                                       ; preds = %for.body19.preheader, %for.body19
  %indvars.iv284 = phi i64 [ %indvars.iv.next285, %for.body19 ], [ %indvars.iv284.ph, %for.body19.preheader ]
  %76 = phi i64 [ %add, %for.body19 ], [ %.ph, %for.body19.preheader ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 2
  %77 = load i32, i32* %stride, align 4, !tbaa !182
  %conv22 = sext i32 %77 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv284, i32 0
  %78 = load i32, i32* %min, align 4, !tbaa !181
  %min29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 0
  %79 = load i32, i32* %min29, align 4, !tbaa !181
  %sub = sub nsw i32 %78, %79
  %conv30 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv30, %conv22
  %add = add i64 %mul, %76
  %indvars.iv.next285 = add nuw nsw i64 %indvars.iv284, 1
  %exitcond286.not = icmp eq i64 %indvars.iv.next285, %wide.trip.count
  br i1 %exitcond286.not, label %for.cond.cleanup18, label %for.body19, !llvm.loop !242

lor.lhs.false:                                    ; preds = %for.cond.cleanup18
  %bits.i253 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 4, i32 1
  %80 = load i8, i8* %bits.i253, align 1, !tbaa !136
  %conv.i254 = zext i8 %80 to i32
  %add.i255 = add nuw nsw i32 %conv.i254, 7
  %div.i256 = lshr i32 %add.i255, 3
  %cmp45.not = icmp ne i32 %div.i, %div.i256
  %cmp48 = icmp sgt i32 %20, 16
  %or.cond261 = or i1 %cmp48, %cmp45.not
  br i1 %or.cond261, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup18
  %81 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %81, i8 0, i64 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp50 = icmp eq i32 %div.i, 0
  br i1 %cmp50, label %if.then51, label %for.cond54.preheader

for.cond54.preheader:                             ; preds = %if.end
  br i1 %cmp17272, label %for.body58.lr.ph, label %while.end

for.body58.lr.ph:                                 ; preds = %for.cond54.preheader
  %dim60 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %82 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim60, align 8, !tbaa !176
  %dim70 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %83 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim70, align 8, !tbaa !176
  %wide.trip.count282 = zext i32 %20 to i64
  br label %for.body58

if.then51:                                        ; preds = %if.end
  %84 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %84, i8 0, i64 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup94
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !238
  %.pre290 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %cmp139263 = icmp eq i64 %.pre, %.pre290
  br i1 %cmp139263, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre291 = load i64, i64* %arrayidx14, align 8, !tbaa !110
  %85 = bitcast i64* %arrayidx.1 to <4 x i64>*
  %86 = bitcast i64* %arrayidx to <4 x i64>*
  %87 = bitcast i64* %arrayidx12.1 to <4 x i64>*
  %88 = bitcast i64* %arrayidx12 to <4 x i64>*
  %89 = bitcast i64* %arrayidx14.1 to <4 x i64>*
  %90 = bitcast i64* %arrayidx14 to <4 x i64>*
  %91 = bitcast i64* %arrayidx.5 to <4 x i64>*
  %92 = bitcast i64* %arrayidx.4 to <4 x i64>*
  %93 = bitcast i64* %arrayidx12.5 to <4 x i64>*
  %94 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  %95 = bitcast i64* %arrayidx14.5 to <4 x i64>*
  %96 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  %97 = bitcast i64* %arrayidx.9 to <4 x i64>*
  %98 = bitcast i64* %arrayidx.8 to <4 x i64>*
  %99 = bitcast i64* %arrayidx12.9 to <4 x i64>*
  %100 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  %101 = bitcast i64* %arrayidx14.9 to <4 x i64>*
  %102 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  %103 = bitcast i64* %arrayidx.13 to <2 x i64>*
  %104 = bitcast i64* %arrayidx.12 to <2 x i64>*
  %105 = bitcast i64* %arrayidx12.13 to <2 x i64>*
  %106 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  %107 = bitcast i64* %arrayidx14.13 to <2 x i64>*
  %108 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  br label %land.rhs

for.body58:                                       ; preds = %for.cond.cleanup94, %for.body58.lr.ph
  %indvars.iv278 = phi i64 [ 0, %for.body58.lr.ph ], [ %indvars.iv.next279, %for.cond.cleanup94 ]
  %stride63 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 2
  %109 = load i32, i32* %stride63, align 4, !tbaa !182
  %conv64 = sext i32 %109 to i64
  %mul68 = mul nsw i64 %conv64, %conv
  %stride73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %83, i64 %indvars.iv278, i32 2
  %110 = load i32, i32* %stride73, align 4, !tbaa !182
  %conv74 = sext i32 %110 to i64
  %mul78 = mul nsw i64 %conv74, %conv
  %cmp80264.not = icmp eq i64 %indvars.iv278, 0
  br i1 %cmp80264.not, label %for.end91, label %for.body81.lr.ph

for.body81.lr.ph:                                 ; preds = %for.body58
  %cmp86.not = icmp eq i64 %mul68, 0
  br i1 %cmp86.not, label %for.body81.preheader, label %for.body81.us

for.body81.preheader:                             ; preds = %for.body81.lr.ph
  %111 = trunc i64 %indvars.iv278 to i32
  br label %for.end91

for.body81.us:                                    ; preds = %for.body81.lr.ph, %for.inc89.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc89.us ], [ 0, %for.body81.lr.ph ]
  %arrayidx84.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv
  %112 = load i64, i64* %arrayidx84.us, align 8, !tbaa !110
  %cmp85.us = icmp ult i64 %mul68, %112
  br i1 %cmp85.us, label %for.end91.loopexit, label %for.inc89.us

for.inc89.us:                                     ; preds = %for.body81.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %indvars.iv278
  br i1 %exitcond.not, label %for.end91.loopexit, label %for.body81.us, !llvm.loop !243

for.end91.loopexit:                               ; preds = %for.inc89.us, %for.body81.us
  %insert.0.lcssa.ph.in = phi i64 [ %indvars.iv278, %for.inc89.us ], [ %indvars.iv, %for.body81.us ]
  %insert.0.lcssa.ph = trunc i64 %insert.0.lcssa.ph.in to i32
  br label %for.end91

for.end91:                                        ; preds = %for.end91.loopexit, %for.body81.preheader, %for.body58
  %insert.0.lcssa = phi i32 [ 0, %for.body58 ], [ %insert.0.lcssa.ph, %for.end91.loopexit ], [ %111, %for.body81.preheader ]
  %113 = zext i32 %insert.0.lcssa to i64
  %cmp93267 = icmp ugt i64 %indvars.iv278, %113
  br i1 %cmp93267, label %for.body95.preheader, label %for.cond.cleanup94

for.body95.preheader:                             ; preds = %for.end91
  %114 = sext i32 %insert.0.lcssa to i64
  %115 = sub i64 %indvars.iv278, %114
  %116 = xor i64 %114, -1
  %117 = add i64 %indvars.iv278, %116
  %xtraiter = and i64 %115, 3
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body95.prol.loopexit, label %for.body95.prol

for.body95.prol:                                  ; preds = %for.body95.preheader, %for.body95.prol
  %indvars.iv280.prol = phi i64 [ %indvars.iv.next281.prol, %for.body95.prol ], [ %indvars.iv278, %for.body95.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %for.body95.prol ], [ %xtraiter, %for.body95.preheader ]
  %indvars.iv.next281.prol = add nsw i64 %indvars.iv280.prol, -1
  %arrayidx99.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.prol
  %118 = load i64, i64* %arrayidx99.prol, align 8, !tbaa !110
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280.prol
  store i64 %118, i64* %arrayidx102.prol, align 8, !tbaa !110
  %arrayidx106.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.prol
  %119 = load i64, i64* %arrayidx106.prol, align 8, !tbaa !110
  %arrayidx109.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280.prol
  store i64 %119, i64* %arrayidx109.prol, align 8, !tbaa !110
  %arrayidx113.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.prol
  %120 = load i64, i64* %arrayidx113.prol, align 8, !tbaa !110
  %arrayidx116.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280.prol
  store i64 %120, i64* %arrayidx116.prol, align 8, !tbaa !110
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body95.prol.loopexit, label %for.body95.prol, !llvm.loop !244

for.body95.prol.loopexit:                         ; preds = %for.body95.prol, %for.body95.preheader
  %indvars.iv280.unr = phi i64 [ %indvars.iv278, %for.body95.preheader ], [ %indvars.iv.next281.prol, %for.body95.prol ]
  %121 = icmp ult i64 %117, 3
  br i1 %121, label %for.cond.cleanup94, label %for.body95

for.cond.cleanup94:                               ; preds = %for.body95.prol.loopexit, %for.body95, %for.end91
  %extent122 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 1
  %122 = load i32, i32* %extent122, align 4, !tbaa !178
  %conv123 = sext i32 %122 to i64
  %arrayidx126 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %113
  store i64 %conv123, i64* %arrayidx126, align 8, !tbaa !110
  %arrayidx129 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %113
  store i64 %mul68, i64* %arrayidx129, align 8, !tbaa !110
  %arrayidx132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %113
  store i64 %mul78, i64* %arrayidx132, align 8, !tbaa !110
  %indvars.iv.next279 = add nuw nsw i64 %indvars.iv278, 1
  %exitcond283.not = icmp eq i64 %indvars.iv.next279, %wide.trip.count282
  br i1 %exitcond283.not, label %while.cond.preheader, label %for.body58, !llvm.loop !245

for.body95:                                       ; preds = %for.body95.prol.loopexit, %for.body95
  %indvars.iv280 = phi i64 [ %indvars.iv.next281.3, %for.body95 ], [ %indvars.iv280.unr, %for.body95.prol.loopexit ]
  %indvars.iv.next281 = add nsw i64 %indvars.iv280, -1
  %arrayidx99 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  %123 = load i64, i64* %arrayidx99, align 8, !tbaa !110
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280
  store i64 %123, i64* %arrayidx102, align 8, !tbaa !110
  %arrayidx106 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  %124 = load i64, i64* %arrayidx106, align 8, !tbaa !110
  %arrayidx109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280
  store i64 %124, i64* %arrayidx109, align 8, !tbaa !110
  %arrayidx113 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  %125 = load i64, i64* %arrayidx113, align 8, !tbaa !110
  %arrayidx116 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280
  store i64 %125, i64* %arrayidx116, align 8, !tbaa !110
  %indvars.iv.next281.1 = add nsw i64 %indvars.iv280, -2
  %arrayidx99.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  %126 = load i64, i64* %arrayidx99.1, align 8, !tbaa !110
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  store i64 %126, i64* %arrayidx102.1, align 8, !tbaa !110
  %arrayidx106.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  %127 = load i64, i64* %arrayidx106.1, align 8, !tbaa !110
  %arrayidx109.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  store i64 %127, i64* %arrayidx109.1, align 8, !tbaa !110
  %arrayidx113.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  %128 = load i64, i64* %arrayidx113.1, align 8, !tbaa !110
  %arrayidx116.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  store i64 %128, i64* %arrayidx116.1, align 8, !tbaa !110
  %indvars.iv.next281.2 = add nsw i64 %indvars.iv280, -3
  %arrayidx99.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  %129 = load i64, i64* %arrayidx99.2, align 8, !tbaa !110
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  store i64 %129, i64* %arrayidx102.2, align 8, !tbaa !110
  %arrayidx106.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  %130 = load i64, i64* %arrayidx106.2, align 8, !tbaa !110
  %arrayidx109.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  store i64 %130, i64* %arrayidx109.2, align 8, !tbaa !110
  %arrayidx113.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  %131 = load i64, i64* %arrayidx113.2, align 8, !tbaa !110
  %arrayidx116.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  store i64 %131, i64* %arrayidx116.2, align 8, !tbaa !110
  %indvars.iv.next281.3 = add nsw i64 %indvars.iv280, -4
  %arrayidx99.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.3
  %132 = load i64, i64* %arrayidx99.3, align 8, !tbaa !110
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  store i64 %132, i64* %arrayidx102.3, align 8, !tbaa !110
  %arrayidx106.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.3
  %133 = load i64, i64* %arrayidx106.3, align 8, !tbaa !110
  %arrayidx109.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  store i64 %133, i64* %arrayidx109.3, align 8, !tbaa !110
  %arrayidx113.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.3
  %134 = load i64, i64* %arrayidx113.3, align 8, !tbaa !110
  %arrayidx116.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  store i64 %134, i64* %arrayidx116.3, align 8, !tbaa !110
  %cmp93.3 = icmp sgt i64 %indvars.iv.next281.3, %114
  br i1 %cmp93.3, label %for.body95, label %for.cond.cleanup94, !llvm.loop !246

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %135 = phi i64 [ %.pre291, %land.rhs.lr.ph ], [ %154, %while.body ]
  %136 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul147, %while.body ]
  %cmp143 = icmp eq i64 %136, %135
  br i1 %cmp143, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %137 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %mul147 = mul i64 %137, %135
  store i64 %mul147, i64* %chunk_size, align 8, !tbaa !238
  %138 = load <4 x i64>, <4 x i64>* %85, align 8, !tbaa !110
  store <4 x i64> %138, <4 x i64>* %86, align 8, !tbaa !110
  %139 = load <4 x i64>, <4 x i64>* %87, align 8, !tbaa !110
  store <4 x i64> %139, <4 x i64>* %88, align 8, !tbaa !110
  %140 = load <4 x i64>, <4 x i64>* %89, align 8, !tbaa !110
  store <4 x i64> %140, <4 x i64>* %90, align 8, !tbaa !110
  %141 = load <4 x i64>, <4 x i64>* %91, align 8, !tbaa !110
  store <4 x i64> %141, <4 x i64>* %92, align 8, !tbaa !110
  %142 = load <4 x i64>, <4 x i64>* %93, align 8, !tbaa !110
  store <4 x i64> %142, <4 x i64>* %94, align 8, !tbaa !110
  %143 = load <4 x i64>, <4 x i64>* %95, align 8, !tbaa !110
  store <4 x i64> %143, <4 x i64>* %96, align 8, !tbaa !110
  %144 = load <4 x i64>, <4 x i64>* %97, align 8, !tbaa !110
  store <4 x i64> %144, <4 x i64>* %98, align 8, !tbaa !110
  %145 = load <4 x i64>, <4 x i64>* %99, align 8, !tbaa !110
  store <4 x i64> %145, <4 x i64>* %100, align 8, !tbaa !110
  %146 = load <4 x i64>, <4 x i64>* %101, align 8, !tbaa !110
  store <4 x i64> %146, <4 x i64>* %102, align 8, !tbaa !110
  %147 = load <2 x i64>, <2 x i64>* %103, align 8, !tbaa !110
  store <2 x i64> %147, <2 x i64>* %104, align 8, !tbaa !110
  %148 = load <2 x i64>, <2 x i64>* %105, align 8, !tbaa !110
  store <2 x i64> %148, <2 x i64>* %106, align 8, !tbaa !110
  %149 = load <2 x i64>, <2 x i64>* %107, align 8, !tbaa !110
  store <2 x i64> %149, <2 x i64>* %108, align 8, !tbaa !110
  %150 = load i64, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 %150, i64* %arrayidx.14, align 8, !tbaa !110
  %151 = load i64, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 %151, i64* %arrayidx12.14, align 8, !tbaa !110
  %152 = load i64, i64* %arrayidx14.15, align 8, !tbaa !110
  store i64 %152, i64* %arrayidx14.14, align 8, !tbaa !110
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx14.15, align 8, !tbaa !110
  %153 = extractelement <4 x i64> %139, i32 0
  %cmp139 = icmp eq i64 %mul147, %153
  %154 = extractelement <4 x i64> %140, i32 0
  br i1 %cmp139, label %land.rhs, label %while.end, !llvm.loop !247

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond54.preheader
  %155 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %155, i8* nonnull align 8 dereferenceable(416) %0, i64 416, i1 false), !tbaa.struct !248
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then51, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %key1, i8* %key2, i64 %key_size) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @memcmp(i8* %key1, i8* %key2, i64 %key_size) #16
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

declare i32 @memcmp(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %buf, %struct.halide_dimension_t* %shape) local_unnamed_addr #0 {
entry:
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %0 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp9 = icmp sgt i32 %0, 0
  br i1 %cmp9, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %2 = zext i32 %0 to i64
  br label %for.body

for.cond:                                         ; preds = %_ZNK18halide_dimension_tneERKS_.exit
  %exitcond.not = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond.not, label %return, label %for.body, !llvm.loop !249

for.body:                                         ; preds = %for.cond, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %min.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 0
  %3 = load i32, i32* %min.i.i, align 4, !tbaa !181
  %min2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %min2.i.i, align 4, !tbaa !181
  %cmp.i.i = icmp eq i32 %3, %4
  br i1 %cmp.i.i, label %land.lhs.true.i.i, label %return

land.lhs.true.i.i:                                ; preds = %for.body
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 1
  %5 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %extent3.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 1
  %6 = load i32, i32* %extent3.i.i, align 4, !tbaa !178
  %cmp4.i.i = icmp eq i32 %5, %6
  br i1 %cmp4.i.i, label %land.lhs.true5.i.i, label %return

land.lhs.true5.i.i:                               ; preds = %land.lhs.true.i.i
  %stride.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 2
  %7 = load i32, i32* %stride.i.i, align 4, !tbaa !182
  %stride6.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 2
  %8 = load i32, i32* %stride6.i.i, align 4, !tbaa !182
  %cmp7.i.i = icmp eq i32 %7, %8
  br i1 %cmp7.i.i, label %_ZNK18halide_dimension_tneERKS_.exit, label %return

_ZNK18halide_dimension_tneERKS_.exit:             ; preds = %land.lhs.true5.i.i
  %flags.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 3
  %9 = load i32, i32* %flags.i.i, align 4, !tbaa !250
  %flags8.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 3
  %10 = load i32, i32* %flags8.i.i, align 4, !tbaa !250
  %cmp9.i.i.not = icmp eq i32 %9, %10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp9.i.i.not, label %for.cond, label %return

return:                                           ; preds = %_ZNK18halide_dimension_tneERKS_.exit, %land.lhs.true5.i.i, %land.lhs.true.i.i, %for.body, %for.cond, %entry
  %cmp.lcssa = phi i1 [ true, %entry ], [ false, %_ZNK18halide_dimension_tneERKS_.exit ], [ true, %for.cond ], [ false, %land.lhs.true5.i.i ], [ false, %land.lhs.true.i.i ], [ false, %for.body ]
  ret i1 %cmp.lcssa
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this, i8* %cache_key, i64 %cache_key_size, i32 %key_hash, %struct.halide_buffer_t* %computed_bounds_buf, i32 %tuples, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key_arg, i64 %eviction_key_arg) local_unnamed_addr #0 align 2 {
entry:
  %frombool = zext i1 %has_eviction_key_arg to i8
  %0 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %this to <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>*
  store <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>* %0, align 8, !tbaa !10
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 4
  store i64 %cache_key_size, i64* %key_size, align 8, !tbaa !252
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 6
  store i32 %key_hash, i32* %hash, align 8, !tbaa !253
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 7
  store i32 0, i32* %in_use_count, align 4, !tbaa !254
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  store i32 %tuples, i32* %tuple_count, align 8, !tbaa !230
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 5
  %1 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 9
  store i32 %1, i32* %dimensions2, align 4, !tbaa !255
  %conv = zext i32 %tuples to i64
  %mul = mul nuw nsw i64 %conv, 56
  %conv5 = sext i32 %1 to i64
  %add8 = add i32 %tuples, 1
  %conv9 = zext i32 %add8 to i64
  %mul6 = shl nuw nsw i64 %conv9, 4
  %mul10 = mul i64 %mul6, %conv5
  %add11 = add i64 %mul10, %mul
  %add13 = add i64 %add11, %cache_key_size
  %call = tail call i8* @halide_malloc(i8* null, i64 %add13) #16
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  store i8* %call, i8** %metadata_storage, align 8, !tbaa !231
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  %2 = bitcast %struct.halide_buffer_t** %buf to i8**
  store i8* %call, i8** %2, align 8, !tbaa !232
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 %mul
  %computed_bounds = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 10
  %3 = bitcast %struct.halide_dimension_t** %computed_bounds to i8**
  store i8* %add.ptr, i8** %3, align 8, !tbaa !256
  %add.ptr18 = getelementptr inbounds i8, i8* %call, i64 %add11
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 5
  store i8* %add.ptr18, i8** %key, align 8, !tbaa !257
  %4 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp117.not = icmp eq i64 %4, 0
  br i1 %cmp117.not, label %for.cond23.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %if.end
  %5 = load i8, i8* %cache_key, align 1, !tbaa !14
  store i8 %5, i8* %add.ptr18, align 1, !tbaa !14
  %6 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp130 = icmp ugt i64 %6, 1
  br i1 %cmp130, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond23.preheader:                             ; preds = %for.body.for.body_crit_edge, %for.body.preheader, %if.end
  %7 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp25115 = icmp sgt i32 %7, 0
  br i1 %cmp25115, label %for.body27.lr.ph, label %for.cond36.preheader

for.body27.lr.ph:                                 ; preds = %for.cond23.preheader
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 6
  br label %for.body27

for.body.for.body_crit_edge:                      ; preds = %for.body.preheader, %for.body.for.body_crit_edge
  %inc131 = phi i64 [ %inc, %for.body.for.body_crit_edge ], [ 1, %for.body.preheader ]
  %.pre = load i8*, i8** %key, align 8, !tbaa !257
  %arrayidx = getelementptr inbounds i8, i8* %cache_key, i64 %inc131
  %8 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %arrayidx21 = getelementptr inbounds i8, i8* %.pre, i64 %inc131
  store i8 %8, i8* %arrayidx21, align 1, !tbaa !14
  %inc = add nuw i64 %inc131, 1
  %9 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp = icmp ult i64 %inc, %9
  br i1 %cmp, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond36.preheader:                             ; preds = %for.body27, %for.cond23.preheader
  %10 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp38113.not = icmp eq i32 %10, 0
  br i1 %cmp38113.not, label %for.cond.cleanup39, label %for.body40

for.body27:                                       ; preds = %for.body27, %for.body27.lr.ph
  %indvars.iv121 = phi i64 [ 0, %for.body27.lr.ph ], [ %indvars.iv.next122, %for.body27 ]
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %arrayidx28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 %indvars.iv121
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %arrayidx31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 %indvars.iv121
  %13 = bitcast %struct.halide_dimension_t* %arrayidx31 to i8*
  %14 = bitcast %struct.halide_dimension_t* %arrayidx28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %13, i8* nonnull align 4 dereferenceable(16) %14, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  %15 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %16 = sext i32 %15 to i64
  %cmp25 = icmp slt i64 %indvars.iv.next122, %16
  br i1 %cmp25, label %for.body27, label %for.cond36.preheader, !llvm.loop !259

for.cond36.loopexit:                              ; preds = %for.body59.for.body59_crit_edge, %for.body59.preheader, %for.body40
  %17 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %18 = zext i32 %17 to i64
  %cmp38 = icmp ult i64 %indvars.iv.next120, %18
  br i1 %cmp38, label %for.body40, label %for.cond.cleanup39, !llvm.loop !260

for.cond.cleanup39:                               ; preds = %for.cond36.loopexit, %for.cond36.preheader
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 13
  store i8 %frombool, i8* %has_eviction_key, align 8, !tbaa !261
  %eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 12
  store i64 %eviction_key_arg, i64* %eviction_key, align 8, !tbaa !262
  br label %cleanup

for.body40:                                       ; preds = %for.cond36.preheader, %for.cond36.loopexit
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %for.cond36.loopexit ], [ 0, %for.cond36.preheader ]
  %arrayidx42 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv119
  %19 = bitcast %struct.halide_buffer_t** %arrayidx42 to i8**
  %20 = load i8*, i8** %19, align 8, !tbaa !10
  %21 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx45 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %21, i64 %indvars.iv119
  %22 = bitcast %struct.halide_buffer_t* %arrayidx45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %22, i8* nonnull align 8 dereferenceable(56) %20, i64 56, i1 false), !tbaa.struct !263
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv119, 1
  %24 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %25 = trunc i64 %indvars.iv.next120 to i32
  %mul49 = mul i32 %24, %25
  %idx.ext = zext i32 %mul49 to i64
  %add.ptr50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i64 %idx.ext
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim54 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 %indvars.iv119, i32 6
  store %struct.halide_dimension_t* %add.ptr50, %struct.halide_dimension_t** %dim54, align 8, !tbaa !176
  %cmp57111 = icmp sgt i32 %24, 0
  br i1 %cmp57111, label %for.body59.preheader, label %for.cond36.loopexit

for.body59.preheader:                             ; preds = %for.body40
  %27 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62125 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %27, i64 0, i32 6
  %28 = bitcast %struct.halide_dimension_t** %dim62125 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !176
  %30 = bitcast %struct.halide_dimension_t* %add.ptr50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %30, i8* nonnull align 4 dereferenceable(16) %29, i64 16, i1 false), !tbaa.struct !177
  %31 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp57128 = icmp sgt i32 %31, 1
  br i1 %cmp57128, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

for.body59.for.body59_crit_edge:                  ; preds = %for.body59.preheader, %for.body59.for.body59_crit_edge
  %indvars.iv.next129 = phi i64 [ %indvars.iv.next, %for.body59.for.body59_crit_edge ], [ 1, %for.body59.preheader ]
  %.pre123 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim68.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %.pre123, i64 %indvars.iv119, i32 6
  %.pre124 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim68.phi.trans.insert, align 8, !tbaa !176
  %32 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %32, i64 0, i32 6
  %33 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim62, align 8, !tbaa !176
  %arrayidx64 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv.next129
  %arrayidx70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre124, i64 %indvars.iv.next129
  %34 = bitcast %struct.halide_dimension_t* %arrayidx70 to i8*
  %35 = bitcast %struct.halide_dimension_t* %arrayidx64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %34, i8* nonnull align 4 dereferenceable(16) %35, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next129, 1
  %36 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %37 = sext i32 %36 to i64
  %cmp57 = icmp slt i64 %indvars.iv.next, %37
  br i1 %cmp57, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

cleanup:                                          ; preds = %for.cond.cleanup39, %entry
  %38 = xor i1 %tobool.not, true
  ret i1 %38
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %key, i64 %key_size) local_unnamed_addr #0 {
entry:
  %cmp8.not = icmp eq i64 %key_size, 0
  br i1 %cmp8.not, label %for.cond.cleanup, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  %0 = add i64 %key_size, -1
  %xtraiter = and i64 %key_size, 7
  %1 = icmp ult i64 %0, 7
  br i1 %1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %key_size, -8
  %add.0 = mul i32 5381, 33
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.body, %for.body.preheader
  %add1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add1.7, %for.body ]
  %i.010.unr = phi i64 [ 0, %for.body.preheader ], [ %inc.7, %for.body ]
  %h.09.unr = phi i32 [ 5381, %for.body.preheader ], [ %add1.7, %for.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil
  %i.010.epil = phi i64 [ %inc.epil, %for.body.epil ], [ %i.010.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %h.09.epil = phi i32 [ %add1.epil, %for.body.epil ], [ %h.09.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.epil = mul i32 %h.09.epil, 33
  %arrayidx.epil = getelementptr inbounds i8, i8* %key, i64 %i.010.epil
  %2 = load i8, i8* %arrayidx.epil, align 1, !tbaa !14
  %conv.epil = zext i8 %2 to i32
  %add1.epil = add i32 %add.epil, %conv.epil
  %inc.epil = add nuw i64 %i.010.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.body.epil, !llvm.loop !266

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil, %entry
  %h.0.lcssa = phi i32 [ 5381, %entry ], [ %add1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add1.epil, %for.body.epil ]
  ret i32 %h.0.lcssa

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.preheader.new
  %i.010 = phi i64 [ 0, %for.body.preheader.new ], [ %inc.7, %for.body.for.body_crit_edge ]
  %add.phi = phi i32 [ %add.0, %for.body.preheader.new ], [ %add.12, %for.body.for.body_crit_edge ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.7, %for.body.for.body_crit_edge ]
  %arrayidx = getelementptr inbounds i8, i8* %key, i64 %i.010
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = zext i8 %3 to i32
  %add1 = add i32 %add.phi, %conv
  %inc = or i64 %i.010, 1
  %add.1 = mul i32 %add1, 33
  %arrayidx.1 = getelementptr inbounds i8, i8* %key, i64 %inc
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %conv.1 = zext i8 %4 to i32
  %add1.1 = add i32 %add.1, %conv.1
  %inc.1 = or i64 %i.010, 2
  %add.2 = mul i32 %add1.1, 33
  %arrayidx.2 = getelementptr inbounds i8, i8* %key, i64 %inc.1
  %5 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %conv.2 = zext i8 %5 to i32
  %add1.2 = add i32 %add.2, %conv.2
  %inc.2 = or i64 %i.010, 3
  %add.3 = mul i32 %add1.2, 33
  %arrayidx.3 = getelementptr inbounds i8, i8* %key, i64 %inc.2
  %6 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %conv.3 = zext i8 %6 to i32
  %add1.3 = add i32 %add.3, %conv.3
  %inc.3 = or i64 %i.010, 4
  %add.4 = mul i32 %add1.3, 33
  %arrayidx.4 = getelementptr inbounds i8, i8* %key, i64 %inc.3
  %7 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %conv.4 = zext i8 %7 to i32
  %add1.4 = add i32 %add.4, %conv.4
  %inc.4 = or i64 %i.010, 5
  %add.5 = mul i32 %add1.4, 33
  %arrayidx.5 = getelementptr inbounds i8, i8* %key, i64 %inc.4
  %8 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %conv.5 = zext i8 %8 to i32
  %add1.5 = add i32 %add.5, %conv.5
  %inc.5 = or i64 %i.010, 6
  %add.6 = mul i32 %add1.5, 33
  %arrayidx.6 = getelementptr inbounds i8, i8* %key, i64 %inc.5
  %9 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %conv.6 = zext i8 %9 to i32
  %add1.6 = add i32 %add.6, %conv.6
  %inc.6 = or i64 %i.010, 7
  %add.7 = mul i32 %add1.6, 33
  %arrayidx.7 = getelementptr inbounds i8, i8* %key, i64 %inc.6
  %10 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %conv.7 = zext i8 %10 to i32
  %add1.7 = add i32 %add.7, %conv.7
  %inc.7 = add nuw i64 %i.010, 8
  %niter.nsub.7 = add i64 %niter, -8
  %niter.ncmp.7 = icmp eq i64 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.for.body_crit_edge, !llvm.loop !267

for.body.for.body_crit_edge:                      ; preds = %for.body
  %add.12 = mul i32 %add1.7, 33
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11prune_cacheEv() local_unnamed_addr #0 {
entry:
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %1 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %2 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  %cmp84 = icmp sgt i64 %1, %2
  %cmp185 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  %3 = and i1 %cmp185, %cmp84
  br i1 %3, label %while.body, label %while.end42

while.body:                                       ; preds = %entry, %if.end41
  %4 = phi i64 [ %114, %if.end41 ], [ %2, %entry ]
  %5 = phi i64 [ %115, %if.end41 ], [ %1, %entry ]
  %prune_candidate.086 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %6, %if.end41 ], [ %0, %entry ]
  %more_recent2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 1
  %6 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent2, align 8, !tbaa !268
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 7
  %7 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3 = icmp eq i32 %7, 0
  br i1 %cmp3, label %if.then, label %if.end41

if.then:                                          ; preds = %while.body
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 6
  %8 = load i32, i32* %hash, align 8, !tbaa !253
  %9 = and i32 %8, 255
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %10 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp5 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %10, %prune_candidate.086
  br i1 %cmp5, label %if.then6, label %while.cond9

if.then6:                                         ; preds = %if.then
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %11 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !227
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %11, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  br label %if.end21

while.cond9:                                      ; preds = %if.then, %land.rhs11
  %prev_hash_entry.0 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %12, %land.rhs11 ], [ %10, %if.then ]
  %cmp10.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, null
  br i1 %cmp10.not, label %if.then18, label %land.rhs11

land.rhs11:                                       ; preds = %while.cond9
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  %12 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next12, align 8, !tbaa !227
  %cmp13.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %12, %prune_candidate.086
  br i1 %cmp13.not, label %do.end, label %while.cond9, !llvm.loop !269

if.then18:                                        ; preds = %while.cond9
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.2.42, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %land.rhs11, %if.then18
  %next19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %13 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next19, align 8, !tbaa !227
  %next20 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %13, %"struct.Halide::Runtime::Internal::CacheEntry"** %next20, align 8, !tbaa !227
  br label %if.end21

if.end21:                                         ; preds = %do.end, %if.then6
  %14 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp22 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %14, %prune_candidate.086
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %cmp25.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  br i1 %cmp25.not, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end24
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %15 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent27 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %15, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent27, align 8, !tbaa !251
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp29 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %16, %prune_candidate.086
  %less_recent31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end28
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %17, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %cmp34.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp34.not, label %if.end37, label %if.then35

if.then35:                                        ; preds = %if.end32
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end32
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 8
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp3882.not = icmp eq i32 %18, 0
  br i1 %cmp3882.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end37
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 11
  %19 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %wide.trip.count = zext i32 %18 to i64
  br label %for.body

for.cond.for.cond.cleanup_crit_edge:              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %if.end37
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %prune_candidate.086) #17
  %20 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %20) #16
  %.pre92 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %.pre93 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  br label %if.end41

for.body:                                         ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %sub89 = phi i64 [ %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted, %for.body.lr.ph ], [ %sub, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 5
  %21 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %21, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body
  %sub.i.neg.0 = add i64 0, -1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %21 to i64
  %min.iters.check43 = icmp ult i32 %21, 17
  br i1 %min.iters.check43, label %for.body.i.i.preheader, label %vector.ph44

vector.ph44:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf45 = and i64 %wide.trip.count.i.i, 15
  %23 = icmp eq i64 %n.mod.vf45, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf45
  %n.vec46 = sub nsw i64 %wide.trip.count.i.i, %24
  br label %vector.body42

vector.body42:                                    ; preds = %vector.body42, %vector.ph44
  %index47 = phi i64 [ 0, %vector.ph44 ], [ %index.next48, %vector.body42 ]
  %vec.ind51 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph44 ], [ %vec.ind.next56, %vector.body42 ]
  %vec.phi57 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi73, %vector.body42 ]
  %vec.phi58 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi74, %vector.body42 ]
  %vec.phi59 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi75, %vector.body42 ]
  %vec.phi60 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi76, %vector.body42 ]
  %step.add52 = add <4 x i64> %vec.ind51, <i64 4, i64 4, i64 4, i64 4>
  %step.add53 = add <4 x i64> %vec.ind51, <i64 8, i64 8, i64 8, i64 8>
  %step.add54 = add <4 x i64> %vec.ind51, <i64 12, i64 12, i64 12, i64 12>
  %25 = or i64 %index47, 4
  %26 = or i64 %index47, 8
  %27 = or i64 %index47, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index47, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 2
  %32 = bitcast i32* %28 to <16 x i32>*
  %33 = bitcast i32* %29 to <16 x i32>*
  %34 = bitcast i32* %30 to <16 x i32>*
  %35 = bitcast i32* %31 to <16 x i32>*
  %wide.vec61 = load <16 x i32>, <16 x i32>* %32, align 4, !tbaa !182
  %wide.vec62 = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !182
  %wide.vec63 = load <16 x i32>, <16 x i32>* %34, align 4, !tbaa !182
  %wide.vec64 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !182
  %strided.vec65 = shufflevector <16 x i32> %wide.vec61, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec66 = shufflevector <16 x i32> %wide.vec62, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec67 = shufflevector <16 x i32> %wide.vec63, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec68 = shufflevector <16 x i32> %wide.vec64, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %36 = icmp sgt <4 x i32> %strided.vec65, zeroinitializer
  %37 = icmp sgt <4 x i32> %strided.vec66, zeroinitializer
  %38 = icmp sgt <4 x i32> %strided.vec67, zeroinitializer
  %39 = icmp sgt <4 x i32> %strided.vec68, zeroinitializer
  %40 = zext <4 x i32> %strided.vec65 to <4 x i64>
  %41 = zext <4 x i32> %strided.vec66 to <4 x i64>
  %42 = zext <4 x i32> %strided.vec67 to <4 x i64>
  %43 = zext <4 x i32> %strided.vec68 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind51, i32 1
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add52, i32 1
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add53, i32 1
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add54, i32 1
  %wide.masked.gather69 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %44, i32 4, <4 x i1> %36, <4 x i32> undef), !tbaa !178
  %wide.masked.gather70 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %45, i32 4, <4 x i1> %37, <4 x i32> undef), !tbaa !178
  %wide.masked.gather71 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %46, i32 4, <4 x i1> %38, <4 x i32> undef), !tbaa !178
  %wide.masked.gather72 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %47, i32 4, <4 x i1> %39, <4 x i32> undef), !tbaa !178
  %48 = add nsw <4 x i32> %wide.masked.gather69, <i32 -1, i32 -1, i32 -1, i32 -1>
  %49 = add nsw <4 x i32> %wide.masked.gather70, <i32 -1, i32 -1, i32 -1, i32 -1>
  %50 = add nsw <4 x i32> %wide.masked.gather71, <i32 -1, i32 -1, i32 -1, i32 -1>
  %51 = add nsw <4 x i32> %wide.masked.gather72, <i32 -1, i32 -1, i32 -1, i32 -1>
  %52 = sext <4 x i32> %48 to <4 x i64>
  %53 = sext <4 x i32> %49 to <4 x i64>
  %54 = sext <4 x i32> %50 to <4 x i64>
  %55 = sext <4 x i32> %51 to <4 x i64>
  %56 = mul nsw <4 x i64> %52, %40
  %57 = mul nsw <4 x i64> %53, %41
  %58 = mul nsw <4 x i64> %54, %42
  %59 = mul nsw <4 x i64> %55, %43
  %60 = select <4 x i1> %36, <4 x i64> %56, <4 x i64> zeroinitializer
  %predphi73 = add <4 x i64> %vec.phi57, %60
  %61 = select <4 x i1> %37, <4 x i64> %57, <4 x i64> zeroinitializer
  %predphi74 = add <4 x i64> %vec.phi58, %61
  %62 = select <4 x i1> %38, <4 x i64> %58, <4 x i64> zeroinitializer
  %predphi75 = add <4 x i64> %vec.phi59, %62
  %63 = select <4 x i1> %39, <4 x i64> %59, <4 x i64> zeroinitializer
  %predphi76 = add <4 x i64> %vec.phi60, %63
  %index.next48 = add i64 %index47, 16
  %vec.ind.next56 = add <4 x i64> %vec.ind51, <i64 16, i64 16, i64 16, i64 16>
  %64 = icmp eq i64 %index.next48, %n.vec46
  br i1 %64, label %middle.block40, label %vector.body42, !llvm.loop !270

middle.block40:                                   ; preds = %vector.body42
  %bin.rdx77 = add <4 x i64> %predphi74, %predphi73
  %bin.rdx78 = add <4 x i64> %predphi75, %bin.rdx77
  %bin.rdx79 = add <4 x i64> %predphi76, %bin.rdx78
  %65 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx79)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block40, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec46, %middle.block40 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %65, %middle.block40 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 2
  %66 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %66, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %66 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 1
  %67 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %67, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !271

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %21, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader81, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %68 = icmp eq i64 %n.mod.vf, 0
  %69 = select i1 %68, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %69
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi23 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi35, %vector.body ]
  %vec.phi24 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi36, %vector.body ]
  %vec.phi25 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi37, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add20 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add21 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %70 = or i64 %index, 4
  %71 = or i64 %index, 8
  %72 = or i64 %index, 12
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 2
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %70, i32 2
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %71, i32 2
  %76 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %72, i32 2
  %77 = bitcast i32* %73 to <16 x i32>*
  %78 = bitcast i32* %74 to <16 x i32>*
  %79 = bitcast i32* %75 to <16 x i32>*
  %80 = bitcast i32* %76 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %77, align 4, !tbaa !182
  %wide.vec26 = load <16 x i32>, <16 x i32>* %78, align 4, !tbaa !182
  %wide.vec27 = load <16 x i32>, <16 x i32>* %79, align 4, !tbaa !182
  %wide.vec28 = load <16 x i32>, <16 x i32>* %80, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec29 = shufflevector <16 x i32> %wide.vec26, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec30 = shufflevector <16 x i32> %wide.vec27, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec31 = shufflevector <16 x i32> %wide.vec28, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %81 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %82 = icmp slt <4 x i32> %strided.vec29, zeroinitializer
  %83 = icmp slt <4 x i32> %strided.vec30, zeroinitializer
  %84 = icmp slt <4 x i32> %strided.vec31, zeroinitializer
  %85 = sext <4 x i32> %strided.vec to <4 x i64>
  %86 = sext <4 x i32> %strided.vec29 to <4 x i64>
  %87 = sext <4 x i32> %strided.vec30 to <4 x i64>
  %88 = sext <4 x i32> %strided.vec31 to <4 x i64>
  %89 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind, i32 1
  %90 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add, i32 1
  %91 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add20, i32 1
  %92 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add21, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %89, i32 4, <4 x i1> %81, <4 x i32> undef), !tbaa !178
  %wide.masked.gather32 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %90, i32 4, <4 x i1> %82, <4 x i32> undef), !tbaa !178
  %wide.masked.gather33 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %91, i32 4, <4 x i1> %83, <4 x i32> undef), !tbaa !178
  %wide.masked.gather34 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %92, i32 4, <4 x i1> %84, <4 x i32> undef), !tbaa !178
  %93 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %94 = add nsw <4 x i32> %wide.masked.gather32, <i32 -1, i32 -1, i32 -1, i32 -1>
  %95 = add nsw <4 x i32> %wide.masked.gather33, <i32 -1, i32 -1, i32 -1, i32 -1>
  %96 = add nsw <4 x i32> %wide.masked.gather34, <i32 -1, i32 -1, i32 -1, i32 -1>
  %97 = sext <4 x i32> %93 to <4 x i64>
  %98 = sext <4 x i32> %94 to <4 x i64>
  %99 = sext <4 x i32> %95 to <4 x i64>
  %100 = sext <4 x i32> %96 to <4 x i64>
  %101 = mul nsw <4 x i64> %97, %85
  %102 = mul nsw <4 x i64> %98, %86
  %103 = mul nsw <4 x i64> %99, %87
  %104 = mul nsw <4 x i64> %100, %88
  %105 = select <4 x i1> %81, <4 x i64> %101, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %105
  %106 = select <4 x i1> %82, <4 x i64> %102, <4 x i64> zeroinitializer
  %predphi35 = add <4 x i64> %vec.phi23, %106
  %107 = select <4 x i1> %83, <4 x i64> %103, <4 x i64> zeroinitializer
  %predphi36 = add <4 x i64> %vec.phi24, %107
  %108 = select <4 x i1> %84, <4 x i64> %104, <4 x i64> zeroinitializer
  %predphi37 = add <4 x i64> %vec.phi25, %108
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %109 = icmp eq i64 %index.next, %n.vec
  br i1 %109, label %middle.block, label %vector.body, !llvm.loop !272

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi35, %predphi
  %bin.rdx38 = add <4 x i64> %predphi36, %bin.rdx
  %bin.rdx39 = add <4 x i64> %predphi37, %bin.rdx38
  %110 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx39)
  br label %for.body.i13.i.preheader81

for.body.i13.i.preheader81:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %110, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader81, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader81 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader81 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 2
  %111 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %111, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %111 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 1
  %112 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %112, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !273

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i.neg = xor i64 %index.1.i.i, -1
  %sub.i.neg.1 = add i64 %index.1.i21.i, %add8.i.i.neg
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.neg.phi = phi i64 [ %sub.i.neg.0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.neg.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 4, i32 1
  %113 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %113 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i.neg = mul i64 %div.i.i, %sub.i.neg.phi
  %sub = add i64 %mul.i.neg, %sub89
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.for.cond.cleanup_crit_edge, label %for.body, !llvm.loop !274

if.end41:                                         ; preds = %for.cond.cleanup, %while.body
  %114 = phi i64 [ %.pre93, %for.cond.cleanup ], [ %4, %while.body ]
  %115 = phi i64 [ %.pre92, %for.cond.cleanup ], [ %5, %while.body ]
  %cmp = icmp sgt i64 %115, %114
  %cmp1 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %116 = and i1 %cmp1, %cmp
  br i1 %116, label %while.body, label %while.end42, !llvm.loop !275

while.end42:                                      ; preds = %if.end41, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_set_size(i64 %size) local_unnamed_addr #4 {
entry:
  %cmp = icmp eq i64 %size, 0
  %spec.store.select = select i1 %cmp, i64 1048576, i64 %size
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  store i64 %spec.store.select, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_lookup(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers) local_unnamed_addr #4 {
entry:
  %conv = sext i32 %size to i64
  %call = tail call i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %cache_key, i64 %conv) #17
  %0 = and i32 %call, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry3.0220 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp.not221 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0220, null
  br i1 %cmp.not221, label %for.cond75.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %cmp16215 = icmp sgt i32 %tuple_count, 0
  %1 = sext i32 %tuple_count to i64
  br i1 %cmp16215, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.lr.ph, %if.end73.us
  %entry3.0222.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0.us, %if.end73.us ], [ %entry3.0220, %while.body.lr.ph ]
  %hash.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 6
  %2 = load i32, i32* %hash.us, align 8, !tbaa !253
  %cmp4.us = icmp eq i32 %2, %call
  br i1 %cmp4.us, label %land.lhs.true.us, label %if.end73.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 4
  %3 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp6.us = icmp eq i64 %3, %conv
  br i1 %cmp6.us, label %land.lhs.true7.us, label %if.end73.us

land.lhs.true7.us:                                ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 5
  %4 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call9.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %4, i8* %cache_key, i64 %conv) #17
  br i1 %call9.us, label %land.lhs.true10.us, label %if.end73.us

land.lhs.true10.us:                               ; preds = %land.lhs.true7.us
  %computed_bounds11.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 10
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11.us, align 8, !tbaa !256
  %call12.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %5) #17
  br i1 %call12.us, label %land.lhs.true13.us, label %if.end73.us

land.lhs.true13.us:                               ; preds = %land.lhs.true10.us
  %tuple_count14.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 8
  %6 = load i32, i32* %tuple_count14.us, align 8, !tbaa !230
  %cmp15.us = icmp eq i32 %6, %tuple_count
  br i1 %cmp15.us, label %for.cond.preheader.us, label %if.end73.us

for.cond.preheader.us:                            ; preds = %land.lhs.true13.us
  %buf.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 11
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %for.cond.preheader.us
  %indvars.iv226.us = phi i64 [ 0, %for.cond.preheader.us ], [ %indvars.iv.next227.us, %for.body.us ]
  %arrayidx18.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv226.us
  %7 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx18.us, align 8, !tbaa !10
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf.us, align 8, !tbaa !232
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %8, i64 %indvars.iv226.us, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call21.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %7, %struct.halide_dimension_t* %9) #17
  %indvars.iv.next227.us = add nuw nsw i64 %indvars.iv226.us, 1
  %cmp16.us = icmp slt i64 %indvars.iv.next227.us, %1
  %10 = and i1 %cmp16.us, %call21.us
  br i1 %10, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !276

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call21.us, label %if.then23, label %if.end73.us

if.end73.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true13.us, %land.lhs.true10.us, %land.lhs.true7.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 0
  %entry3.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0.us, null
  br i1 %cmp.not.us, label %for.cond75.preheader, label %while.body.us, !llvm.loop !277

for.cond75.preheader:                             ; preds = %if.end73, %if.end73.us, %entry
  %cmp76210 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp76210, label %for.body78.preheader, label %cleanup119

for.body78.preheader:                             ; preds = %for.cond75.preheader
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body78

while.body:                                       ; preds = %while.body.lr.ph, %if.end73
  %entry3.0222 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0, %if.end73 ], [ %entry3.0220, %while.body.lr.ph ]
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 6
  %11 = load i32, i32* %hash, align 8, !tbaa !253
  %cmp4 = icmp eq i32 %11, %call
  br i1 %cmp4, label %land.lhs.true, label %if.end73

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 4
  %12 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp6 = icmp eq i64 %12, %conv
  br i1 %cmp6, label %land.lhs.true7, label %if.end73

land.lhs.true7:                                   ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 5
  %13 = load i8*, i8** %key, align 8, !tbaa !257
  %call9 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %13, i8* %cache_key, i64 %conv) #17
  br i1 %call9, label %land.lhs.true10, label %if.end73

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %computed_bounds11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 10
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11, align 8, !tbaa !256
  %call12 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %14) #17
  br i1 %call12, label %land.lhs.true13, label %if.end73

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %tuple_count14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 8
  %15 = load i32, i32* %tuple_count14, align 8, !tbaa !230
  %cmp15 = icmp eq i32 %15, %tuple_count
  br i1 %cmp15, label %if.then23, label %if.end73

if.then23:                                        ; preds = %land.lhs.true13, %for.cond.cleanup.us
  %.us-phi = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0222.us, %for.cond.cleanup.us ], [ %entry3.0222, %land.lhs.true13 ]
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp24.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %16
  br i1 %cmp24.not, label %if.end57, label %do.body

do.body:                                          ; preds = %if.then23
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 1
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp26.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp26.not, label %if.then27, label %do.end

if.then27:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.3.43, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then27, %do.body
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 2
  %18 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp28.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %18, null
  br i1 %cmp28.not, label %do.body33, label %if.then29

if.then29:                                        ; preds = %do.end
  %19 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %more_recent32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %18, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %19, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent32, align 8, !tbaa !268
  %.pr = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.body41

do.body33:                                        ; preds = %do.end
  %20 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp34 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %20, %.us-phi
  br i1 %cmp34, label %do.end38, label %if.then35

if.then35:                                        ; preds = %do.body33
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.44, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end38

do.end38:                                         ; preds = %if.then35, %do.body33
  %21 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %21, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %do.body41

do.body41:                                        ; preds = %do.end38, %if.then29
  %22 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pr, %if.then29 ], [ %21, %do.end38 ]
  %cmp43.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %22, null
  br i1 %cmp43.not, label %if.then44, label %do.end47

if.then44:                                        ; preds = %do.body41
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.5.45, i64 0, i64 0)) #16
  tail call void @abort() #16
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.end47

do.end47:                                         ; preds = %if.then44, %do.body41
  %23 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pre, %if.then44 ], [ %22, %do.body41 ]
  %24 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent50 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %23, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %24, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent50, align 8, !tbaa !251
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %25 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %25, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp53.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %25, null
  br i1 %cmp53.not, label %if.end56, label %if.then54

if.then54:                                        ; preds = %do.end47
  %more_recent55 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %25, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent55, align 8, !tbaa !268
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %do.end47
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then23
  br i1 %cmp16215, label %for.body62.lr.ph, label %cleanup119.loopexit223

for.body62.lr.ph:                                 ; preds = %if.end57
  %buf66 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 11
  %wide.trip.count230 = zext i32 %tuple_count to i64
  %26 = add nsw i64 %wide.trip.count230, -1
  %xtraiter = and i64 %wide.trip.count230, 3
  %27 = icmp ult i64 %26, 3
  br i1 %27, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62.lr.ph.new

for.body62.lr.ph.new:                             ; preds = %for.body62.lr.ph
  %unroll_iter = and i64 %wide.trip.count230, 4294967292
  br label %for.body62

for.body62:                                       ; preds = %for.body62, %for.body62.lr.ph.new
  %indvars.iv228 = phi i64 [ 0, %for.body62.lr.ph.new ], [ %indvars.iv.next229.3, %for.body62 ]
  %niter = phi i64 [ %unroll_iter, %for.body62.lr.ph.new ], [ %niter.nsub.3, %for.body62 ]
  %arrayidx65 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228
  %28 = bitcast %struct.halide_buffer_t** %arrayidx65 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !10
  %30 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 %indvars.iv228
  %31 = bitcast %struct.halide_buffer_t* %arrayidx68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %29, i8* nonnull align 8 dereferenceable(56) %31, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229 = or i64 %indvars.iv228, 1
  %arrayidx65.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229
  %32 = bitcast %struct.halide_buffer_t** %arrayidx65.1 to i8**
  %33 = load i8*, i8** %32, align 8, !tbaa !10
  %34 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %34, i64 %indvars.iv.next229
  %35 = bitcast %struct.halide_buffer_t* %arrayidx68.1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %33, i8* nonnull align 8 dereferenceable(56) %35, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.1 = or i64 %indvars.iv228, 2
  %arrayidx65.2 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.1
  %36 = bitcast %struct.halide_buffer_t** %arrayidx65.2 to i8**
  %37 = load i8*, i8** %36, align 8, !tbaa !10
  %38 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.2 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %38, i64 %indvars.iv.next229.1
  %39 = bitcast %struct.halide_buffer_t* %arrayidx68.2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %37, i8* nonnull align 8 dereferenceable(56) %39, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.2 = or i64 %indvars.iv228, 3
  %arrayidx65.3 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.2
  %40 = bitcast %struct.halide_buffer_t** %arrayidx65.3 to i8**
  %41 = load i8*, i8** %40, align 8, !tbaa !10
  %42 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.3 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %42, i64 %indvars.iv.next229.2
  %43 = bitcast %struct.halide_buffer_t* %arrayidx68.3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %41, i8* nonnull align 8 dereferenceable(56) %43, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.3 = add nuw nsw i64 %indvars.iv228, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62, !llvm.loop !278

if.end73:                                         ; preds = %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 0
  %entry3.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0, null
  br i1 %cmp.not, label %for.cond75.preheader, label %while.body, !llvm.loop !277

for.body78:                                       ; preds = %for.inc114, %for.body78.preheader
  %indvars.iv = phi i64 [ 0, %for.body78.preheader ], [ %indvars.iv.next, %for.inc114 ]
  %arrayidx81 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %44 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx81, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 5
  %45 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %45, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body78
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 6
  %46 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %45 to i64
  %min.iters.check53 = icmp ult i32 %45, 17
  br i1 %min.iters.check53, label %for.body.i.i.preheader, label %vector.ph54

vector.ph54:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf55 = and i64 %wide.trip.count.i.i, 15
  %47 = icmp eq i64 %n.mod.vf55, 0
  %48 = select i1 %47, i64 16, i64 %n.mod.vf55
  %n.vec56 = sub nsw i64 %wide.trip.count.i.i, %48
  br label %vector.body52

vector.body52:                                    ; preds = %vector.body52, %vector.ph54
  %index57 = phi i64 [ 0, %vector.ph54 ], [ %index.next58, %vector.body52 ]
  %vec.ind61 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph54 ], [ %vec.ind.next66, %vector.body52 ]
  %vec.phi67 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi83, %vector.body52 ]
  %vec.phi68 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi84, %vector.body52 ]
  %vec.phi69 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi85, %vector.body52 ]
  %vec.phi70 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi86, %vector.body52 ]
  %step.add62 = add <4 x i64> %vec.ind61, <i64 4, i64 4, i64 4, i64 4>
  %step.add63 = add <4 x i64> %vec.ind61, <i64 8, i64 8, i64 8, i64 8>
  %step.add64 = add <4 x i64> %vec.ind61, <i64 12, i64 12, i64 12, i64 12>
  %49 = or i64 %index57, 4
  %50 = or i64 %index57, 8
  %51 = or i64 %index57, 12
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index57, i32 2
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %49, i32 2
  %54 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %50, i32 2
  %55 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %51, i32 2
  %56 = bitcast i32* %52 to <16 x i32>*
  %57 = bitcast i32* %53 to <16 x i32>*
  %58 = bitcast i32* %54 to <16 x i32>*
  %59 = bitcast i32* %55 to <16 x i32>*
  %wide.vec71 = load <16 x i32>, <16 x i32>* %56, align 4, !tbaa !182
  %wide.vec72 = load <16 x i32>, <16 x i32>* %57, align 4, !tbaa !182
  %wide.vec73 = load <16 x i32>, <16 x i32>* %58, align 4, !tbaa !182
  %wide.vec74 = load <16 x i32>, <16 x i32>* %59, align 4, !tbaa !182
  %strided.vec75 = shufflevector <16 x i32> %wide.vec71, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec76 = shufflevector <16 x i32> %wide.vec72, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec77 = shufflevector <16 x i32> %wide.vec73, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec78 = shufflevector <16 x i32> %wide.vec74, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = icmp sgt <4 x i32> %strided.vec75, zeroinitializer
  %61 = icmp sgt <4 x i32> %strided.vec76, zeroinitializer
  %62 = icmp sgt <4 x i32> %strided.vec77, zeroinitializer
  %63 = icmp sgt <4 x i32> %strided.vec78, zeroinitializer
  %64 = zext <4 x i32> %strided.vec75 to <4 x i64>
  %65 = zext <4 x i32> %strided.vec76 to <4 x i64>
  %66 = zext <4 x i32> %strided.vec77 to <4 x i64>
  %67 = zext <4 x i32> %strided.vec78 to <4 x i64>
  %68 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind61, i32 1
  %69 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add62, i32 1
  %70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add63, i32 1
  %71 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add64, i32 1
  %wide.masked.gather79 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %68, i32 4, <4 x i1> %60, <4 x i32> undef), !tbaa !178
  %wide.masked.gather80 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %69, i32 4, <4 x i1> %61, <4 x i32> undef), !tbaa !178
  %wide.masked.gather81 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %70, i32 4, <4 x i1> %62, <4 x i32> undef), !tbaa !178
  %wide.masked.gather82 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %71, i32 4, <4 x i1> %63, <4 x i32> undef), !tbaa !178
  %72 = add nsw <4 x i32> %wide.masked.gather79, <i32 -1, i32 -1, i32 -1, i32 -1>
  %73 = add nsw <4 x i32> %wide.masked.gather80, <i32 -1, i32 -1, i32 -1, i32 -1>
  %74 = add nsw <4 x i32> %wide.masked.gather81, <i32 -1, i32 -1, i32 -1, i32 -1>
  %75 = add nsw <4 x i32> %wide.masked.gather82, <i32 -1, i32 -1, i32 -1, i32 -1>
  %76 = sext <4 x i32> %72 to <4 x i64>
  %77 = sext <4 x i32> %73 to <4 x i64>
  %78 = sext <4 x i32> %74 to <4 x i64>
  %79 = sext <4 x i32> %75 to <4 x i64>
  %80 = mul nsw <4 x i64> %76, %64
  %81 = mul nsw <4 x i64> %77, %65
  %82 = mul nsw <4 x i64> %78, %66
  %83 = mul nsw <4 x i64> %79, %67
  %84 = select <4 x i1> %60, <4 x i64> %80, <4 x i64> zeroinitializer
  %predphi83 = add <4 x i64> %vec.phi67, %84
  %85 = select <4 x i1> %61, <4 x i64> %81, <4 x i64> zeroinitializer
  %predphi84 = add <4 x i64> %vec.phi68, %85
  %86 = select <4 x i1> %62, <4 x i64> %82, <4 x i64> zeroinitializer
  %predphi85 = add <4 x i64> %vec.phi69, %86
  %87 = select <4 x i1> %63, <4 x i64> %83, <4 x i64> zeroinitializer
  %predphi86 = add <4 x i64> %vec.phi70, %87
  %index.next58 = add i64 %index57, 16
  %vec.ind.next66 = add <4 x i64> %vec.ind61, <i64 16, i64 16, i64 16, i64 16>
  %88 = icmp eq i64 %index.next58, %n.vec56
  br i1 %88, label %middle.block50, label %vector.body52, !llvm.loop !279

middle.block50:                                   ; preds = %vector.body52
  %bin.rdx87 = add <4 x i64> %predphi84, %predphi83
  %bin.rdx88 = add <4 x i64> %predphi85, %bin.rdx87
  %bin.rdx89 = add <4 x i64> %predphi86, %bin.rdx88
  %89 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx89)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block50, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec56, %middle.block50 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %89, %middle.block50 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 2
  %90 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %90, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %90 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 1
  %91 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %91, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !280

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %45, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader91, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %92 = icmp eq i64 %n.mod.vf, 0
  %93 = select i1 %92, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %93
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi33 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi45, %vector.body ]
  %vec.phi34 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi46, %vector.body ]
  %vec.phi35 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi47, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add30 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add31 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %94 = or i64 %index, 4
  %95 = or i64 %index, 8
  %96 = or i64 %index, 12
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index, i32 2
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %94, i32 2
  %99 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %95, i32 2
  %100 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %96, i32 2
  %101 = bitcast i32* %97 to <16 x i32>*
  %102 = bitcast i32* %98 to <16 x i32>*
  %103 = bitcast i32* %99 to <16 x i32>*
  %104 = bitcast i32* %100 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %101, align 4, !tbaa !182
  %wide.vec36 = load <16 x i32>, <16 x i32>* %102, align 4, !tbaa !182
  %wide.vec37 = load <16 x i32>, <16 x i32>* %103, align 4, !tbaa !182
  %wide.vec38 = load <16 x i32>, <16 x i32>* %104, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec39 = shufflevector <16 x i32> %wide.vec36, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec40 = shufflevector <16 x i32> %wide.vec37, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec41 = shufflevector <16 x i32> %wide.vec38, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %105 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %106 = icmp slt <4 x i32> %strided.vec39, zeroinitializer
  %107 = icmp slt <4 x i32> %strided.vec40, zeroinitializer
  %108 = icmp slt <4 x i32> %strided.vec41, zeroinitializer
  %109 = sext <4 x i32> %strided.vec to <4 x i64>
  %110 = sext <4 x i32> %strided.vec39 to <4 x i64>
  %111 = sext <4 x i32> %strided.vec40 to <4 x i64>
  %112 = sext <4 x i32> %strided.vec41 to <4 x i64>
  %113 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind, i32 1
  %114 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add, i32 1
  %115 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add30, i32 1
  %116 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add31, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %113, i32 4, <4 x i1> %105, <4 x i32> undef), !tbaa !178
  %wide.masked.gather42 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %114, i32 4, <4 x i1> %106, <4 x i32> undef), !tbaa !178
  %wide.masked.gather43 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %115, i32 4, <4 x i1> %107, <4 x i32> undef), !tbaa !178
  %wide.masked.gather44 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %116, i32 4, <4 x i1> %108, <4 x i32> undef), !tbaa !178
  %117 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %118 = add nsw <4 x i32> %wide.masked.gather42, <i32 -1, i32 -1, i32 -1, i32 -1>
  %119 = add nsw <4 x i32> %wide.masked.gather43, <i32 -1, i32 -1, i32 -1, i32 -1>
  %120 = add nsw <4 x i32> %wide.masked.gather44, <i32 -1, i32 -1, i32 -1, i32 -1>
  %121 = sext <4 x i32> %117 to <4 x i64>
  %122 = sext <4 x i32> %118 to <4 x i64>
  %123 = sext <4 x i32> %119 to <4 x i64>
  %124 = sext <4 x i32> %120 to <4 x i64>
  %125 = mul nsw <4 x i64> %121, %109
  %126 = mul nsw <4 x i64> %122, %110
  %127 = mul nsw <4 x i64> %123, %111
  %128 = mul nsw <4 x i64> %124, %112
  %129 = select <4 x i1> %105, <4 x i64> %125, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %129
  %130 = select <4 x i1> %106, <4 x i64> %126, <4 x i64> zeroinitializer
  %predphi45 = add <4 x i64> %vec.phi33, %130
  %131 = select <4 x i1> %107, <4 x i64> %127, <4 x i64> zeroinitializer
  %predphi46 = add <4 x i64> %vec.phi34, %131
  %132 = select <4 x i1> %108, <4 x i64> %128, <4 x i64> zeroinitializer
  %predphi47 = add <4 x i64> %vec.phi35, %132
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %133 = icmp eq i64 %index.next, %n.vec
  br i1 %133, label %middle.block, label %vector.body, !llvm.loop !281

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi45, %predphi
  %bin.rdx48 = add <4 x i64> %predphi46, %bin.rdx
  %bin.rdx49 = add <4 x i64> %predphi47, %bin.rdx48
  %134 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx49)
  br label %for.body.i13.i.preheader91

for.body.i13.i.preheader91:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %134, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader91, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader91 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader91 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 2
  %135 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %135, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %135 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 1
  %136 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %136, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !282

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body78
  %add8.i27.i = phi i64 [ 1, %for.body78 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body78 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 4, i32 1
  %137 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %137 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add84 = add i64 %mul.i, 64
  %call85 = tail call i8* @halide_malloc(i8* %user_context, i64 %add84) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 2
  store i8* %call85, i8** %host, align 8, !tbaa !172
  %cmp87 = icmp eq i8* %call85, null
  br i1 %cmp87, label %for.cond89.preheader, label %for.inc114

for.cond89.preheader:                             ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %cmp90208.not = icmp eq i64 %indvars.iv, 0
  br i1 %cmp90208.not, label %cleanup119, label %for.body92

for.body92:                                       ; preds = %for.cond89.preheader, %for.body92
  %indvars.iv224 = phi i64 [ %indvars.iv.next225, %for.body92 ], [ %indvars.iv, %for.cond89.preheader ]
  %sub = add nuw nsw i64 %indvars.iv224, 4294967295
  %138 = and i64 %sub, 4294967295
  %arrayidx94 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %138
  %139 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host95 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %139, i64 0, i32 2
  %140 = load i8*, i8** %host95, align 8, !tbaa !172
  %call96 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %140) #17
  %141 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call96 to i8*
  tail call void @halide_free(i8* %user_context, i8* %141) #16
  %142 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host100 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %142, i64 0, i32 2
  store i8* null, i8** %host100, align 8, !tbaa !172
  %143 = icmp sgt i64 %indvars.iv224, 1
  %indvars.iv.next225 = add nsw i64 %indvars.iv224, -1
  br i1 %143, label %for.body92, label %cleanup119, !llvm.loop !283

for.inc114:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %add.ptr = getelementptr inbounds i8, i8* %call85, i64 64
  store i8* %add.ptr, i8** %host, align 8, !tbaa !172
  %call108 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* nonnull %add.ptr) #17
  %hash109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 1
  store i32 %call, i32* %hash109, align 8, !tbaa !284
  %entry110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry110, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %cleanup119, label %for.body78, !llvm.loop !287

cleanup119.loopexit223.loopexit.unr-lcssa:        ; preds = %for.body62, %for.body62.lr.ph
  %indvars.iv228.unr = phi i64 [ 0, %for.body62.lr.ph ], [ %indvars.iv.next229.3, %for.body62 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %cleanup119.loopexit223, label %for.body62.epil

for.body62.epil:                                  ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil
  %indvars.iv228.epil = phi i64 [ %indvars.iv.next229.epil, %for.body62.epil ], [ %indvars.iv228.unr, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body62.epil ], [ %xtraiter, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %arrayidx65.epil = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228.epil
  %144 = bitcast %struct.halide_buffer_t** %arrayidx65.epil to i8**
  %145 = load i8*, i8** %144, align 8, !tbaa !10
  %146 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.epil = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %146, i64 %indvars.iv228.epil
  %147 = bitcast %struct.halide_buffer_t* %arrayidx68.epil to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %145, i8* nonnull align 8 dereferenceable(56) %147, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.epil = add nuw nsw i64 %indvars.iv228.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %cleanup119.loopexit223, label %for.body62.epil, !llvm.loop !288

cleanup119.loopexit223:                           ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil, %if.end57
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 7
  %148 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %add = add i32 %148, %tuple_count
  store i32 %add, i32* %in_use_count, align 4, !tbaa !254
  br label %cleanup119

cleanup119:                                       ; preds = %for.inc114, %for.body92, %cleanup119.loopexit223, %for.cond89.preheader, %for.cond75.preheader
  %retval.6 = phi i32 [ 1, %for.cond75.preheader ], [ 0, %cleanup119.loopexit223 ], [ -1, %for.cond89.preheader ], [ -1, %for.body92 ], [ 1, %for.inc114 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret i32 %retval.6
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_store(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  %0 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, align 8, !tbaa !10
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %0, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %1) #17
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 1
  %2 = load i32, i32* %hash, align 8, !tbaa !284
  %3 = and i32 %2, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %idxprom = zext i32 %3 to i64
  %arrayidx7 = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry6.0228 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %cmp.not229 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0228, null
  br i1 %cmp.not229, label %for.cond61.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %conv10 = sext i32 %size to i64
  %cmp22221 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp22221, label %while.body.us.preheader, label %while.body

while.body.us.preheader:                          ; preds = %while.body.lr.ph
  %4 = zext i32 %tuple_count to i64
  br label %while.body.us

while.body.us:                                    ; preds = %if.end59.us, %while.body.us.preheader
  %entry6.0230.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0.us, %if.end59.us ], [ %entry6.0228, %while.body.us.preheader ]
  %hash8.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 6
  %5 = load i32, i32* %hash8.us, align 8, !tbaa !253
  %cmp9.us = icmp eq i32 %5, %2
  br i1 %cmp9.us, label %land.lhs.true.us, label %if.end59.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 4
  %6 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp11.us = icmp eq i64 %6, %conv10
  br i1 %cmp11.us, label %land.lhs.true12.us, label %if.end59.us

land.lhs.true12.us:                               ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 5
  %7 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call14.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %7, i8* %cache_key, i64 %conv10) #17
  br i1 %call14.us, label %land.lhs.true15.us, label %if.end59.us

land.lhs.true15.us:                               ; preds = %land.lhs.true12.us
  %computed_bounds16.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 10
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16.us, align 8, !tbaa !256
  %call17.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %8) #17
  br i1 %call17.us, label %land.lhs.true18.us, label %if.end59.us

land.lhs.true18.us:                               ; preds = %land.lhs.true15.us
  %tuple_count19.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 8
  %9 = load i32, i32* %tuple_count19.us, align 8, !tbaa !230
  %cmp20.us = icmp eq i32 %9, %tuple_count
  br i1 %cmp20.us, label %for.body.lr.ph.us, label %if.end59.us

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call30.us, label %do.body.us, label %if.end59.us

do.body.us:                                       ; preds = %for.cond.cleanup.us
  %10 = and i8 %spec.select.us, 1
  %tobool41.not.us = icmp eq i8 %10, 0
  br i1 %tobool41.not.us, label %if.then42.us, label %for.body48.us.preheader

for.body48.us.preheader:                          ; preds = %if.then42.us, %do.body.us
  br label %for.body48.us

if.then42.us:                                     ; preds = %do.body.us
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.9.46, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %for.body48.us.preheader

if.end59.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true18.us, %land.lhs.true15.us, %land.lhs.true12.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 0
  %entry6.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0.us, null
  br i1 %cmp.not.us, label %for.cond61.preheader, label %while.body.us, !llvm.loop !289

for.body48.us:                                    ; preds = %for.body48.us.preheader, %for.body48.us
  %indvars.iv244 = phi i64 [ %indvars.iv.next245, %for.body48.us ], [ 0, %for.body48.us.preheader ]
  %arrayidx50.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv244
  %11 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx50.us, align 8, !tbaa !10
  %host51.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %11, i64 0, i32 2
  %12 = load i8*, i8** %host51.us, align 8, !tbaa !172
  %call52.us = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %12) #17
  %entry53.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call52.us, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry53.us, align 8, !tbaa !286
  %indvars.iv.next245 = add nuw nsw i64 %indvars.iv244, 1
  %exitcond247.not = icmp eq i64 %indvars.iv.next245, %4
  br i1 %exitcond247.not, label %cleanup132, label %for.body48.us, !llvm.loop !290

for.body.us:                                      ; preds = %for.body.lr.ph.us, %for.body.us
  %13 = phi %struct.halide_buffer_t* [ %.pre, %for.body.lr.ph.us ], [ %16, %for.body.us ]
  %indvars.iv242 = phi i64 [ 0, %for.body.lr.ph.us ], [ %indvars.iv.next243, %for.body.us ]
  %no_host_pointers_equal.0222.us = phi i8 [ 1, %for.body.lr.ph.us ], [ %spec.select.us, %for.body.us ]
  %arrayidx24.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv242
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx24.us, align 8, !tbaa !10
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %13, i64 %indvars.iv242, i32 6
  %15 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call30.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %14, %struct.halide_dimension_t* %15) #17
  %16 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  %host35.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %16, i64 %indvars.iv242, i32 2
  %17 = load i8*, i8** %host35.us, align 8, !tbaa !172
  %host36.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %14, i64 0, i32 2
  %18 = load i8*, i8** %host36.us, align 8, !tbaa !172
  %cmp37.us = icmp eq i8* %17, %18
  %spec.select.us = select i1 %cmp37.us, i8 0, i8 %no_host_pointers_equal.0222.us
  %indvars.iv.next243 = add nuw nsw i64 %indvars.iv242, 1
  %cmp22.us = icmp ult i64 %indvars.iv.next243, %4
  %19 = and i1 %cmp22.us, %call30.us
  br i1 %19, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !291

for.body.lr.ph.us:                                ; preds = %land.lhs.true18.us
  %buf27.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 11
  %.pre = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  br label %for.body.us

for.cond61.preheader:                             ; preds = %if.end59, %if.end59.us, %entry
  %cmp62218 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp62218, label %for.body64.preheader, label %for.cond.cleanup63

for.body64.preheader:                             ; preds = %for.cond61.preheader
  %wide.trip.count240 = zext i32 %tuple_count to i64
  br label %for.body64

while.body:                                       ; preds = %while.body.lr.ph, %if.end59
  %entry6.0230 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0, %if.end59 ], [ %entry6.0228, %while.body.lr.ph ]
  %hash8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 6
  %20 = load i32, i32* %hash8, align 8, !tbaa !253
  %cmp9 = icmp eq i32 %20, %2
  br i1 %cmp9, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 4
  %21 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp11 = icmp eq i64 %21, %conv10
  br i1 %cmp11, label %land.lhs.true12, label %if.end59

land.lhs.true12:                                  ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 5
  %22 = load i8*, i8** %key, align 8, !tbaa !257
  %call14 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %22, i8* %cache_key, i64 %conv10) #17
  br i1 %call14, label %land.lhs.true15, label %if.end59

land.lhs.true15:                                  ; preds = %land.lhs.true12
  %computed_bounds16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 10
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16, align 8, !tbaa !256
  %call17 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %23) #17
  br i1 %call17, label %land.lhs.true18, label %if.end59

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %tuple_count19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 8
  %24 = load i32, i32* %tuple_count19, align 8, !tbaa !230
  %cmp20 = icmp eq i32 %24, %tuple_count
  br i1 %cmp20, label %cleanup132, label %if.end59

if.end59:                                         ; preds = %land.lhs.true18, %land.lhs.true15, %land.lhs.true12, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 0
  %entry6.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0, null
  br i1 %cmp.not, label %for.cond61.preheader, label %while.body, !llvm.loop !289

for.cond.cleanup63:                               ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.cond61.preheader
  %added_size.0.lcssa = phi i64 [ 0, %for.cond61.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %25 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %add73 = add i64 %25, %added_size.0.lcssa
  store i64 %add73, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #17
  %call74 = tail call i8* @halide_malloc(i8* null, i64 96) #16
  %tobool75.not = icmp eq i8* %call74, null
  br i1 %tobool75.not, label %if.then83, label %if.then76

for.body64:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body64.preheader
  %indvars.iv238 = phi i64 [ 0, %for.body64.preheader ], [ %indvars.iv.next239, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %added_size.0219 = phi i64 [ 0, %for.body64.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %arrayidx67 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv238
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx67, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 5
  %27 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %27, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body64
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 6
  %28 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %27 to i64
  %min.iters.check39 = icmp ult i32 %27, 17
  br i1 %min.iters.check39, label %for.body.i.i.preheader, label %vector.ph40

vector.ph40:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf41 = and i64 %wide.trip.count.i.i, 15
  %29 = icmp eq i64 %n.mod.vf41, 0
  %30 = select i1 %29, i64 16, i64 %n.mod.vf41
  %n.vec42 = sub nsw i64 %wide.trip.count.i.i, %30
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph40
  %index43 = phi i64 [ 0, %vector.ph40 ], [ %index.next44, %vector.body38 ]
  %vec.ind47 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph40 ], [ %vec.ind.next52, %vector.body38 ]
  %vec.phi53 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi69, %vector.body38 ]
  %vec.phi54 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi70, %vector.body38 ]
  %vec.phi55 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi71, %vector.body38 ]
  %vec.phi56 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi72, %vector.body38 ]
  %step.add48 = add <4 x i64> %vec.ind47, <i64 4, i64 4, i64 4, i64 4>
  %step.add49 = add <4 x i64> %vec.ind47, <i64 8, i64 8, i64 8, i64 8>
  %step.add50 = add <4 x i64> %vec.ind47, <i64 12, i64 12, i64 12, i64 12>
  %31 = or i64 %index43, 4
  %32 = or i64 %index43, 8
  %33 = or i64 %index43, 12
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index43, i32 2
  %35 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %31, i32 2
  %36 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %32, i32 2
  %37 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %33, i32 2
  %38 = bitcast i32* %34 to <16 x i32>*
  %39 = bitcast i32* %35 to <16 x i32>*
  %40 = bitcast i32* %36 to <16 x i32>*
  %41 = bitcast i32* %37 to <16 x i32>*
  %wide.vec57 = load <16 x i32>, <16 x i32>* %38, align 4, !tbaa !182
  %wide.vec58 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !182
  %wide.vec59 = load <16 x i32>, <16 x i32>* %40, align 4, !tbaa !182
  %wide.vec60 = load <16 x i32>, <16 x i32>* %41, align 4, !tbaa !182
  %strided.vec61 = shufflevector <16 x i32> %wide.vec57, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec62 = shufflevector <16 x i32> %wide.vec58, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec63 = shufflevector <16 x i32> %wide.vec59, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec64 = shufflevector <16 x i32> %wide.vec60, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %42 = icmp sgt <4 x i32> %strided.vec61, zeroinitializer
  %43 = icmp sgt <4 x i32> %strided.vec62, zeroinitializer
  %44 = icmp sgt <4 x i32> %strided.vec63, zeroinitializer
  %45 = icmp sgt <4 x i32> %strided.vec64, zeroinitializer
  %46 = zext <4 x i32> %strided.vec61 to <4 x i64>
  %47 = zext <4 x i32> %strided.vec62 to <4 x i64>
  %48 = zext <4 x i32> %strided.vec63 to <4 x i64>
  %49 = zext <4 x i32> %strided.vec64 to <4 x i64>
  %50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind47, i32 1
  %51 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add48, i32 1
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add49, i32 1
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add50, i32 1
  %wide.masked.gather65 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %50, i32 4, <4 x i1> %42, <4 x i32> undef), !tbaa !178
  %wide.masked.gather66 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %51, i32 4, <4 x i1> %43, <4 x i32> undef), !tbaa !178
  %wide.masked.gather67 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %52, i32 4, <4 x i1> %44, <4 x i32> undef), !tbaa !178
  %wide.masked.gather68 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %53, i32 4, <4 x i1> %45, <4 x i32> undef), !tbaa !178
  %54 = add nsw <4 x i32> %wide.masked.gather65, <i32 -1, i32 -1, i32 -1, i32 -1>
  %55 = add nsw <4 x i32> %wide.masked.gather66, <i32 -1, i32 -1, i32 -1, i32 -1>
  %56 = add nsw <4 x i32> %wide.masked.gather67, <i32 -1, i32 -1, i32 -1, i32 -1>
  %57 = add nsw <4 x i32> %wide.masked.gather68, <i32 -1, i32 -1, i32 -1, i32 -1>
  %58 = sext <4 x i32> %54 to <4 x i64>
  %59 = sext <4 x i32> %55 to <4 x i64>
  %60 = sext <4 x i32> %56 to <4 x i64>
  %61 = sext <4 x i32> %57 to <4 x i64>
  %62 = mul nsw <4 x i64> %58, %46
  %63 = mul nsw <4 x i64> %59, %47
  %64 = mul nsw <4 x i64> %60, %48
  %65 = mul nsw <4 x i64> %61, %49
  %66 = select <4 x i1> %42, <4 x i64> %62, <4 x i64> zeroinitializer
  %predphi69 = add <4 x i64> %vec.phi53, %66
  %67 = select <4 x i1> %43, <4 x i64> %63, <4 x i64> zeroinitializer
  %predphi70 = add <4 x i64> %vec.phi54, %67
  %68 = select <4 x i1> %44, <4 x i64> %64, <4 x i64> zeroinitializer
  %predphi71 = add <4 x i64> %vec.phi55, %68
  %69 = select <4 x i1> %45, <4 x i64> %65, <4 x i64> zeroinitializer
  %predphi72 = add <4 x i64> %vec.phi56, %69
  %index.next44 = add i64 %index43, 16
  %vec.ind.next52 = add <4 x i64> %vec.ind47, <i64 16, i64 16, i64 16, i64 16>
  %70 = icmp eq i64 %index.next44, %n.vec42
  br i1 %70, label %middle.block36, label %vector.body38, !llvm.loop !292

middle.block36:                                   ; preds = %vector.body38
  %bin.rdx73 = add <4 x i64> %predphi70, %predphi69
  %bin.rdx74 = add <4 x i64> %predphi71, %bin.rdx73
  %bin.rdx75 = add <4 x i64> %predphi72, %bin.rdx74
  %71 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx75)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block36, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec42, %middle.block36 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %71, %middle.block36 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 2
  %72 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %72, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %72 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 1
  %73 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %73, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !293

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %27, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader77, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %74 = icmp eq i64 %n.mod.vf, 0
  %75 = select i1 %74, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %75
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi19 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi31, %vector.body ]
  %vec.phi20 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi32, %vector.body ]
  %vec.phi21 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi33, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add16 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add17 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %76 = or i64 %index, 4
  %77 = or i64 %index, 8
  %78 = or i64 %index, 12
  %79 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 2
  %80 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %76, i32 2
  %81 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %77, i32 2
  %82 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %78, i32 2
  %83 = bitcast i32* %79 to <16 x i32>*
  %84 = bitcast i32* %80 to <16 x i32>*
  %85 = bitcast i32* %81 to <16 x i32>*
  %86 = bitcast i32* %82 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %83, align 4, !tbaa !182
  %wide.vec22 = load <16 x i32>, <16 x i32>* %84, align 4, !tbaa !182
  %wide.vec23 = load <16 x i32>, <16 x i32>* %85, align 4, !tbaa !182
  %wide.vec24 = load <16 x i32>, <16 x i32>* %86, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec25 = shufflevector <16 x i32> %wide.vec22, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec26 = shufflevector <16 x i32> %wide.vec23, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec27 = shufflevector <16 x i32> %wide.vec24, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %87 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %88 = icmp slt <4 x i32> %strided.vec25, zeroinitializer
  %89 = icmp slt <4 x i32> %strided.vec26, zeroinitializer
  %90 = icmp slt <4 x i32> %strided.vec27, zeroinitializer
  %91 = sext <4 x i32> %strided.vec to <4 x i64>
  %92 = sext <4 x i32> %strided.vec25 to <4 x i64>
  %93 = sext <4 x i32> %strided.vec26 to <4 x i64>
  %94 = sext <4 x i32> %strided.vec27 to <4 x i64>
  %95 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind, i32 1
  %96 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add, i32 1
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add16, i32 1
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add17, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %95, i32 4, <4 x i1> %87, <4 x i32> undef), !tbaa !178
  %wide.masked.gather28 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %96, i32 4, <4 x i1> %88, <4 x i32> undef), !tbaa !178
  %wide.masked.gather29 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %97, i32 4, <4 x i1> %89, <4 x i32> undef), !tbaa !178
  %wide.masked.gather30 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %98, i32 4, <4 x i1> %90, <4 x i32> undef), !tbaa !178
  %99 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %100 = add nsw <4 x i32> %wide.masked.gather28, <i32 -1, i32 -1, i32 -1, i32 -1>
  %101 = add nsw <4 x i32> %wide.masked.gather29, <i32 -1, i32 -1, i32 -1, i32 -1>
  %102 = add nsw <4 x i32> %wide.masked.gather30, <i32 -1, i32 -1, i32 -1, i32 -1>
  %103 = sext <4 x i32> %99 to <4 x i64>
  %104 = sext <4 x i32> %100 to <4 x i64>
  %105 = sext <4 x i32> %101 to <4 x i64>
  %106 = sext <4 x i32> %102 to <4 x i64>
  %107 = mul nsw <4 x i64> %103, %91
  %108 = mul nsw <4 x i64> %104, %92
  %109 = mul nsw <4 x i64> %105, %93
  %110 = mul nsw <4 x i64> %106, %94
  %111 = select <4 x i1> %87, <4 x i64> %107, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %111
  %112 = select <4 x i1> %88, <4 x i64> %108, <4 x i64> zeroinitializer
  %predphi31 = add <4 x i64> %vec.phi19, %112
  %113 = select <4 x i1> %89, <4 x i64> %109, <4 x i64> zeroinitializer
  %predphi32 = add <4 x i64> %vec.phi20, %113
  %114 = select <4 x i1> %90, <4 x i64> %110, <4 x i64> zeroinitializer
  %predphi33 = add <4 x i64> %vec.phi21, %114
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %115 = icmp eq i64 %index.next, %n.vec
  br i1 %115, label %middle.block, label %vector.body, !llvm.loop !294

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi31, %predphi
  %bin.rdx34 = add <4 x i64> %predphi32, %bin.rdx
  %bin.rdx35 = add <4 x i64> %predphi33, %bin.rdx34
  %116 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx35)
  br label %for.body.i13.i.preheader77

for.body.i13.i.preheader77:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %116, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader77, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader77 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader77 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 2
  %117 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %117, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %117 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 1
  %118 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %118, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !295

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body64
  %add8.i27.i = phi i64 [ 1, %for.body64 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body64 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 4, i32 1
  %119 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %119 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add = add i64 %mul.i, %added_size.0219
  %indvars.iv.next239 = add nuw nsw i64 %indvars.iv238, 1
  %exitcond241.not = icmp eq i64 %indvars.iv.next239, %wide.trip.count240
  br i1 %exitcond241.not, label %for.cond.cleanup63, label %for.body64, !llvm.loop !296

if.then76:                                        ; preds = %for.cond.cleanup63
  %120 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"*
  %conv77 = sext i32 %size to i64
  %call79 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %120, i8* %cache_key, i64 %conv77, i32 %2, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** nonnull %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) #17
  br i1 %call79, label %if.end101, label %if.then83

if.then83:                                        ; preds = %if.then76, %for.cond.cleanup63
  %121 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %sub = sub i64 %121, %added_size.0.lcssa
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br i1 %cmp62218, label %for.body88.preheader, label %for.cond.cleanup87

for.body88.preheader:                             ; preds = %if.then83
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body88

for.cond.cleanup87:                               ; preds = %for.body88, %if.then83
  br i1 %tobool75.not, label %cleanup132, label %if.then99

for.body88:                                       ; preds = %for.body88, %for.body88.preheader
  %indvars.iv = phi i64 [ 0, %for.body88.preheader ], [ %indvars.iv.next, %for.body88 ]
  %arrayidx90 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %122 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx90, align 8, !tbaa !10
  %host91 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %122, i64 0, i32 2
  %123 = load i8*, i8** %host91, align 8, !tbaa !172
  %call92 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %123) #17
  %entry93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call92, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry93, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup87, label %for.body88, !llvm.loop !297

if.then99:                                        ; preds = %for.cond.cleanup87
  tail call void @halide_free(i8* %user_context, i8* nonnull %call74) #16
  br label %cleanup132

if.end101:                                        ; preds = %if.then76
  %124 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %next104 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %124, %"struct.Halide::Runtime::Internal::CacheEntry"** %next104, align 8, !tbaa !227
  %125 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %less_recent = getelementptr inbounds i8, i8* %call74, i64 16
  %126 = bitcast i8* %less_recent to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %125, %"struct.Halide::Runtime::Internal::CacheEntry"** %126, align 8, !tbaa !251
  %cmp105.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %125, null
  br i1 %cmp105.not, label %if.end107, label %if.then106

if.then106:                                       ; preds = %if.end101
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %125, i64 0, i32 1
  %127 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent to i8**
  store i8* %call74, i8** %127, align 8, !tbaa !268
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.end101
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE to i8**), align 8, !tbaa !10
  %128 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp108 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %128, null
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.end107
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE to i8**), align 8, !tbaa !10
  br label %if.end110

if.end110:                                        ; preds = %if.then109, %if.end107
  %129 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7 to i8**
  store i8* %call74, i8** %129, align 8, !tbaa !10
  %in_use_count = getelementptr inbounds i8, i8* %call74, i64 52
  %130 = bitcast i8* %in_use_count to i32*
  store i32 %tuple_count, i32* %130, align 4, !tbaa !254
  br i1 %cmp62218, label %for.body117.preheader, label %cleanup132

for.body117.preheader:                            ; preds = %if.end110
  %wide.trip.count236 = zext i32 %tuple_count to i64
  br label %for.body117

for.body117:                                      ; preds = %for.body117, %for.body117.preheader
  %indvars.iv234 = phi i64 [ 0, %for.body117.preheader ], [ %indvars.iv.next235, %for.body117 ]
  %arrayidx119 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv234
  %131 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx119, align 8, !tbaa !10
  %host120 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %131, i64 0, i32 2
  %132 = load i8*, i8** %host120, align 8, !tbaa !172
  %call121 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %132) #17
  %133 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call121 to i8**
  store i8* %call74, i8** %133, align 8, !tbaa !286
  %indvars.iv.next235 = add nuw nsw i64 %indvars.iv234, 1
  %exitcond237.not = icmp eq i64 %indvars.iv.next235, %wide.trip.count236
  br i1 %exitcond237.not, label %cleanup132, label %for.body117, !llvm.loop !298

cleanup132:                                       ; preds = %land.lhs.true18, %for.body48.us, %for.body117, %if.end110, %if.then99, %for.cond.cleanup87
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret i32 0
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_release(i8* %user_context, i8* %host) local_unnamed_addr #4 {
entry:
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) #17
  %entry2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry2, align 8, !tbaa !286
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call to i8*
  tail call void @halide_free(i8* %user_context, i8* %1) #16
  br label %if.end6

if.else:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %0, i64 0, i32 7
  %2 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3.not = icmp eq i32 %2, 0
  br i1 %cmp3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.else
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.12.47, i64 0, i64 0)) #16
  tail call void @abort() #16
  %.pre = load i32, i32* %in_use_count, align 4, !tbaa !254
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.else
  %3 = phi i32 [ %.pre, %if.then4 ], [ %2, %if.else ]
  %dec = add i32 %3, -1
  store i32 %dec, i32* %in_use_count, align 4, !tbaa !254
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  br label %if.end6

if.end6:                                          ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_evict(i8* %user_context, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  br label %for.body

for.cond.cleanup:                                 ; preds = %if.end25
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret void

for.body:                                         ; preds = %if.end25, %entry
  %__begin1.059 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %if.end25 ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, align 8, !tbaa !10
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not, label %if.end25, label %while.body

while.body:                                       ; preds = %for.body, %if.end24
  %prev.058 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.1, %if.end24 ], [ %__begin1.059, %for.body ]
  %entry1.056 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %if.end24 ], [ %0, %for.body ]
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next4, align 8, !tbaa !227
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 13
  %2 = load i8, i8* %has_eviction_key, align 8, !tbaa !261, !range !17
  %tobool.not = icmp eq i8 %2, 0
  br i1 %tobool.not, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %eviction_key5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 12
  %3 = load i64, i64* %eviction_key5, align 8, !tbaa !262
  %cmp6 = icmp eq i64 %3, %eviction_key
  br i1 %cmp6, label %if.then7, label %if.end24

if.then7:                                         ; preds = %land.lhs.true
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %1, %"struct.Halide::Runtime::Internal::CacheEntry"** %prev.058, align 8, !tbaa !10
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 1
  %4 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp8.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %4, null
  %less_recent12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 2
  %5 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br i1 %cmp8.not, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.then7
  %less_recent11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %4, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent11, align 8, !tbaa !251
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br label %if.end

if.else:                                          ; preds = %if.then7
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then9
  %6 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %5, %if.else ], [ %.pre, %if.then9 ]
  %cmp14.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %more_recent18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 1
  %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink = select i1 %cmp14.not, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %4, %"struct.Halide::Runtime::Internal::CacheEntry"** %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink, align 8, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.056) #17
  %7 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056 to i8*
  tail call void @halide_free(i8* %user_context, i8* nonnull %7) #16
  br label %if.end24

if.end24:                                         ; preds = %if.end, %land.lhs.true, %while.body
  %prev.1 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.058, %if.end ], [ %next4, %land.lhs.true ], [ %next4, %while.body ]
  %cmp3.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp3.not, label %if.end25, label %while.body, !llvm.loop !299

if.end25:                                         ; preds = %if.end24, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i64 0, i64 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !14
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !14
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !14
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i64 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i64 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !14
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i64 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #17
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry, %for.body
  %arg.addr.017 = phi i64 [ %div, %for.body ], [ %arg, %entry ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body ], [ %add.ptr, %entry ]
  %i.015 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i64 -1
  %inc = add nuw nsw i32 %i.015, 1
  %cmp = icmp slt i32 %inc, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body, label %for.cond.cleanup, !llvm.loop !300
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i64 1
  store i8 45, i8* %dst, align 1, !tbaa !14
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #17
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !164
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !110
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i64 8) #16
  %2 = load i64, i64* %bits, align 8, !tbaa !110
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.57, i64 0, i64 0)) #17
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.58, i64 0, i64 0)) #17
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.59, i64 0, i64 0)) #17
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.60, i64 0, i64 0)) #17
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.61, i64 0, i64 0)) #17
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.62, i64 0, i64 0)) #17
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.63, i64 0, i64 0)) #17
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.64, i64 0, i64 0)) #17
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9.65, i64 0, i64 0)) #17
  %4 = load double, double* %arg.addr, align 8, !tbaa !164
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !164
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !164
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.body, label %while.cond40thread-pre-split

while.body:                                       ; preds = %while.condthread-pre-split, %while.body
  %exponent_base_10.0277 = phi i32 [ %dec, %while.body ], [ 0, %while.condthread-pre-split ]
  %5 = phi double [ %mul, %while.body ], [ %.pr, %while.condthread-pre-split ]
  %mul = fmul double %5, 1.000000e+01
  %dec = add nsw i32 %exponent_base_10.0277, -1
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !301

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !164
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr261 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr261, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr261, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !302

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !164
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr261, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #17
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #17
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11.67, i64 0, i64 0)) #17
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.68, i64 0, i64 0)) #17
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59262 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59262, i32 2) #17
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #17
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %integer_part.0 = select i1 %cmp72, i64 0, i64 %shr77
  %sub81 = select i1 %cmp72, i64 0, i64 %shl80
  %f.0.in = sub i64 %add67, %sub81
  %f.0 = uitofp i64 %f.0.in to double
  %conv84258 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84258, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond259 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond259 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select260 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.then71, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.then71 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.then71 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select260, %if.then71 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #17
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader.preheader, label %for.cond.cleanup

for.cond111.preheader.preheader:                  ; preds = %if.end104
  %xtraiter = and i32 %integer_exponent.0, 1
  %9 = icmp eq i32 %integer_exponent.0, 1
  br i1 %9, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader.preheader.new

for.cond111.preheader.preheader.new:              ; preds = %for.cond111.preheader.preheader
  %unroll_iter = and i32 %integer_exponent.0, -2
  br label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %if.end137.1, %for.cond111.preheader.preheader.new
  %int_part_ptr.0268 = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader.new ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %niter = phi i32 [ %unroll_iter, %for.cond111.preheader.preheader.new ], [ %niter.nsub.1, %if.end137.1 ]
  %cmp113.not264 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not264, label %if.end137, label %for.body115

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %if.end137.1, %for.cond111.preheader.preheader
  %int_part_ptr.1.lcssa.ph = phi i8* [ undef, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %int_part_ptr.0268.unr = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.cond111.preheader.epil

for.cond111.preheader.epil:                       ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %cmp113.not264.epil = icmp eq i8* %call108, %int_part_ptr.0268.unr
  br i1 %cmp113.not264.epil, label %for.cond.cleanup, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.cond111.preheader.epil, %for.body115.epil
  %p.0266.pn.epil = phi i8* [ %p.0266.epil, %for.body115.epil ], [ %call108, %for.cond111.preheader.epil ]
  %carry.0265.epil = phi i32 [ %carry.1.epil, %for.body115.epil ], [ 0, %for.cond111.preheader.epil ]
  %p.0266.epil = getelementptr inbounds i8, i8* %p.0266.pn.epil, i64 -1
  %10 = load i8, i8* %p.0266.epil, align 1, !tbaa !14
  %sub117.epil = add i8 %10, -48
  %conv119.epil = sext i8 %sub117.epil to i32
  %mul120.epil = shl nsw i32 %conv119.epil, 1
  %add121.epil = or i32 %mul120.epil, %carry.0265.epil
  %11 = trunc i32 %add121.epil to i8
  %cmp124.epil = icmp sgt i8 %11, 9
  %sub127.epil = add nsw i32 %add121.epil, 246
  %carry.1.epil = zext i1 %cmp124.epil to i32
  %new_digit.0.in.epil = select i1 %cmp124.epil, i32 %sub127.epil, i32 %add121.epil
  %12 = trunc i32 %new_digit.0.in.epil to i8
  %conv133.epil = add i8 %12, 48
  store i8 %conv133.epil, i8* %p.0266.epil, align 1, !tbaa !14
  %cmp113.not.epil = icmp eq i8* %p.0266.epil, %int_part_ptr.0268.unr
  br i1 %cmp113.not.epil, label %for.cond.cleanup114.epil, label %for.body115.epil, !llvm.loop !303

for.cond.cleanup114.epil:                         ; preds = %for.body115.epil
  br i1 %cmp124.epil, label %if.then135.epil, label %for.cond.cleanup

if.then135.epil:                                  ; preds = %for.cond.cleanup114.epil
  %incdec.ptr136.epil = getelementptr inbounds i8, i8* %int_part_ptr.0268.unr, i64 -1
  store i8 49, i8* %incdec.ptr136.epil, align 1, !tbaa !14
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.cond111.preheader.epil, %for.cond.cleanup114.epil, %if.then135.epil, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %incdec.ptr136.epil, %if.then135.epil ], [ %int_part_ptr.0268.unr, %for.cond.cleanup114.epil ], [ %call108, %for.cond111.preheader.epil ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #17
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #17
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0266.pn = phi i8* [ %p.0266, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0265 = phi i32 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0266 = getelementptr inbounds i8, i8* %p.0266.pn, i64 -1
  %13 = load i8, i8* %p.0266, align 1, !tbaa !14
  %sub117 = add i8 %13, -48
  %conv119 = sext i8 %sub117 to i32
  %mul120 = shl nsw i32 %conv119, 1
  %add121 = or i32 %mul120, %carry.0265
  %14 = trunc i32 %add121 to i8
  %cmp124 = icmp sgt i8 %14, 9
  %sub127 = add nsw i32 %add121, 246
  %carry.1 = zext i1 %cmp124 to i32
  %new_digit.0.in = select i1 %cmp124, i32 %sub127, i32 %add121
  %15 = trunc i32 %new_digit.0.in to i8
  %conv133 = add i8 %15, 48
  store i8 %conv133, i8* %p.0266, align 1, !tbaa !14
  %cmp113.not = icmp eq i8* %p.0266, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !303

if.then135:                                       ; preds = %for.cond.cleanup114
  %incdec.ptr136 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i64 -1
  store i8 49, i8* %incdec.ptr136, align 1, !tbaa !14
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %incdec.ptr136, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %cmp113.not264.1 = icmp eq i8* %call108, %int_part_ptr.1
  br i1 %cmp113.not264.1, label %if.end137.1, label %for.body115.1

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1

for.body115.1:                                    ; preds = %if.end137, %for.body115.1
  %p.0266.pn.1 = phi i8* [ %p.0266.1, %for.body115.1 ], [ %call108, %if.end137 ]
  %carry.0265.1 = phi i32 [ %carry.1.1, %for.body115.1 ], [ 0, %if.end137 ]
  %p.0266.1 = getelementptr inbounds i8, i8* %p.0266.pn.1, i64 -1
  %16 = load i8, i8* %p.0266.1, align 1, !tbaa !14
  %sub117.1 = add i8 %16, -48
  %conv119.1 = sext i8 %sub117.1 to i32
  %mul120.1 = shl nsw i32 %conv119.1, 1
  %add121.1 = or i32 %mul120.1, %carry.0265.1
  %17 = trunc i32 %add121.1 to i8
  %cmp124.1 = icmp sgt i8 %17, 9
  %sub127.1 = add nsw i32 %add121.1, 246
  %carry.1.1 = zext i1 %cmp124.1 to i32
  %new_digit.0.in.1 = select i1 %cmp124.1, i32 %sub127.1, i32 %add121.1
  %18 = trunc i32 %new_digit.0.in.1 to i8
  %conv133.1 = add i8 %18, 48
  store i8 %conv133.1, i8* %p.0266.1, align 1, !tbaa !14
  %cmp113.not.1 = icmp eq i8* %p.0266.1, %int_part_ptr.1
  br i1 %cmp113.not.1, label %for.cond.cleanup114.1, label %for.body115.1, !llvm.loop !303

for.cond.cleanup114.1:                            ; preds = %for.body115.1
  br i1 %cmp124.1, label %if.then135.1, label %if.end137.1

if.then135.1:                                     ; preds = %for.cond.cleanup114.1
  %incdec.ptr136.1 = getelementptr inbounds i8, i8* %int_part_ptr.1, i64 -1
  store i8 49, i8* %incdec.ptr136.1, align 1, !tbaa !14
  br label %if.end137.1

if.end137.1:                                      ; preds = %if.then135.1, %for.cond.cleanup114.1, %if.end137
  %int_part_ptr.1.1 = phi i8* [ %incdec.ptr136.1, %if.then135.1 ], [ %int_part_ptr.1, %for.cond.cleanup114.1 ], [ %call108, %if.end137 ]
  %niter.nsub.1 = add i32 %niter, -2
  %niter.ncmp.1 = icmp eq i32 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader, !llvm.loop !304
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i64 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 18
  %1 = ptrtoint i8* %arg to i64
  %and = and i64 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !14
  %shr = lshr i64 %1, 4
  %tobool.not = icmp eq i64 %shr, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %and.1 = and i64 %shr, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.1
  %3 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 16
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !14
  %shr.1 = lshr i64 %1, 8
  %tobool.not.1 = icmp eq i64 %shr.1, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.14, %for.cond.13, %for.cond.12, %for.cond.11, %for.cond.10, %for.cond.9, %for.cond.8, %for.cond.7, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ], [ %incdec.ptr.7, %for.cond.7 ], [ %incdec.ptr.8, %for.cond.8 ], [ %incdec.ptr.9, %for.cond.9 ], [ %incdec.ptr.10, %for.cond.10 ], [ %incdec.ptr.11, %for.cond.11 ], [ %incdec.ptr.12, %for.cond.12 ], [ %incdec.ptr.13, %for.cond.13 ], [ %incdec.ptr.14, %for.cond.14 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ], [ %incdec.ptr.8, %for.cond.7 ], [ %incdec.ptr.9, %for.cond.8 ], [ %incdec.ptr.10, %for.cond.9 ], [ %incdec.ptr.11, %for.cond.10 ], [ %incdec.ptr.12, %for.cond.11 ], [ %incdec.ptr.13, %for.cond.12 ], [ %incdec.ptr.14, %for.cond.13 ], [ %incdec.ptr.15, %for.cond.14 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i64 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !14
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !14
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #17
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %and.2 = and i64 %shr.1, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.2
  %4 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 15
  store i8 %4, i8* %incdec.ptr.1, align 1, !tbaa !14
  %shr.2 = lshr i64 %1, 12
  %tobool.not.2 = icmp eq i64 %shr.2, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %and.3 = and i64 %shr.2, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.3
  %5 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 14
  store i8 %5, i8* %incdec.ptr.2, align 1, !tbaa !14
  %shr.3 = lshr i64 %1, 16
  %tobool.not.3 = icmp eq i64 %shr.3, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %and.4 = and i64 %shr.3, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.4
  %6 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 13
  store i8 %6, i8* %incdec.ptr.3, align 1, !tbaa !14
  %shr.4 = lshr i64 %1, 20
  %tobool.not.4 = icmp eq i64 %shr.4, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %and.5 = and i64 %shr.4, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.5
  %7 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 12
  store i8 %7, i8* %incdec.ptr.4, align 1, !tbaa !14
  %shr.5 = lshr i64 %1, 24
  %tobool.not.5 = icmp eq i64 %shr.5, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %and.6 = and i64 %shr.5, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.6
  %8 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 11
  store i8 %8, i8* %incdec.ptr.5, align 1, !tbaa !14
  %shr.6 = lshr i64 %1, 28
  %tobool.not.6 = icmp eq i64 %shr.6, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %and.7 = and i64 %shr.6, 15
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.7
  %9 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 10
  store i8 %9, i8* %incdec.ptr.6, align 1, !tbaa !14
  %shr.7 = lshr i64 %1, 32
  %tobool.not.7 = icmp eq i64 %shr.7, 0
  br i1 %tobool.not.7, label %cleanup, label %for.cond.7

for.cond.7:                                       ; preds = %for.cond.6
  %and.8 = and i64 %shr.7, 15
  %arrayidx.8 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.8
  %10 = load i8, i8* %arrayidx.8, align 1, !tbaa !14
  %incdec.ptr.8 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 9
  store i8 %10, i8* %incdec.ptr.7, align 1, !tbaa !14
  %shr.8 = lshr i64 %1, 36
  %tobool.not.8 = icmp eq i64 %shr.8, 0
  br i1 %tobool.not.8, label %cleanup, label %for.cond.8

for.cond.8:                                       ; preds = %for.cond.7
  %and.9 = and i64 %shr.8, 15
  %arrayidx.9 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.9
  %11 = load i8, i8* %arrayidx.9, align 1, !tbaa !14
  %incdec.ptr.9 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 8
  store i8 %11, i8* %incdec.ptr.8, align 1, !tbaa !14
  %shr.9 = lshr i64 %1, 40
  %tobool.not.9 = icmp eq i64 %shr.9, 0
  br i1 %tobool.not.9, label %cleanup, label %for.cond.9

for.cond.9:                                       ; preds = %for.cond.8
  %and.10 = and i64 %shr.9, 15
  %arrayidx.10 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.10
  %12 = load i8, i8* %arrayidx.10, align 1, !tbaa !14
  %incdec.ptr.10 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 7
  store i8 %12, i8* %incdec.ptr.9, align 1, !tbaa !14
  %shr.10 = lshr i64 %1, 44
  %tobool.not.10 = icmp eq i64 %shr.10, 0
  br i1 %tobool.not.10, label %cleanup, label %for.cond.10

for.cond.10:                                      ; preds = %for.cond.9
  %and.11 = and i64 %shr.10, 15
  %arrayidx.11 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.11
  %13 = load i8, i8* %arrayidx.11, align 1, !tbaa !14
  %incdec.ptr.11 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 6
  store i8 %13, i8* %incdec.ptr.10, align 1, !tbaa !14
  %shr.11 = lshr i64 %1, 48
  %tobool.not.11 = icmp eq i64 %shr.11, 0
  br i1 %tobool.not.11, label %cleanup, label %for.cond.11

for.cond.11:                                      ; preds = %for.cond.10
  %and.12 = and i64 %shr.11, 15
  %arrayidx.12 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.12
  %14 = load i8, i8* %arrayidx.12, align 1, !tbaa !14
  %incdec.ptr.12 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 5
  store i8 %14, i8* %incdec.ptr.11, align 1, !tbaa !14
  %shr.12 = lshr i64 %1, 52
  %tobool.not.12 = icmp eq i64 %shr.12, 0
  br i1 %tobool.not.12, label %cleanup, label %for.cond.12

for.cond.12:                                      ; preds = %for.cond.11
  %and.13 = and i64 %shr.12, 15
  %arrayidx.13 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.13
  %15 = load i8, i8* %arrayidx.13, align 1, !tbaa !14
  %incdec.ptr.13 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 4
  store i8 %15, i8* %incdec.ptr.12, align 1, !tbaa !14
  %shr.13 = lshr i64 %1, 56
  %tobool.not.13 = icmp eq i64 %shr.13, 0
  br i1 %tobool.not.13, label %cleanup, label %for.cond.13

for.cond.13:                                      ; preds = %for.cond.12
  %and.14 = and i64 %shr.13, 15
  %arrayidx.14 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.14
  %16 = load i8, i8* %arrayidx.14, align 1, !tbaa !14
  %incdec.ptr.14 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 3
  store i8 %16, i8* %incdec.ptr.13, align 1, !tbaa !14
  %shr.14 = lshr i64 %1, 60
  %tobool.not.14 = icmp eq i64 %shr.14, 0
  br i1 %tobool.not.14, label %cleanup, label %for.cond.14

for.cond.14:                                      ; preds = %for.cond.13
  %arrayidx.15 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %shr.14
  %17 = load i8, i8* %arrayidx.15, align 1, !tbaa !14
  %incdec.ptr.15 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 2
  store i8 %17, i8* %incdec.ptr.14, align 1, !tbaa !14
  br label %cleanup
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !305
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i64
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i64 0, i64 %2
  %switch.load = load i8*, i8** %switch.gep, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18.72, i64 0, i64 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #17
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !136
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #17
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !306
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19.77, i64 0, i64 0)) #17
  %5 = load i16, i16* %lanes, align 2, !tbaa !306
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20.78, i64 0, i64 0)) #17
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21.79, i64 0, i64 0)) #17
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #17
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !307
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #17
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %3 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #17
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !308
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #17
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #17
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp1179 = icmp sgt i32 %5, 0
  br i1 %cmp1179, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call26, %for.body ]
  %call27 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #17
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %dst.addr.080 = phi i8* [ %call10, %for.body.lr.ph ], [ %call26, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.080, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.82, i64 0, i64 0)) #17
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 %indvars.iv, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !181
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #17
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 %indvars.iv, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !178
  %conv18 = sext i32 %9 to i64
  %call19 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv18, i32 1) #17
  %call20 = tail call i8* @halide_string_to_string(i8* %call19, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i64 %indvars.iv, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !182
  %conv24 = sext i32 %11 to i64
  %call25 = tail call i8* @halide_int64_to_string(i8* %call20, i8* %end, i64 %conv24, i32 1) #17
  %call26 = tail call i8* @halide_string_to_string(i8* %call25, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24.83, i64 0, i64 0)) #17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !175
  %13 = sext i32 %12 to i64
  %cmp11 = icmp slt i64 %indvars.iv.next, %13
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !309

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call27, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 64
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 8, !tbaa !310
  %call = tail call i32 %0(i8* %user_context) #16
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !312

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15, !range !17
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i64 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !313
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 8, !tbaa !316
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !308
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 8, !tbaa !318
  %call = tail call i32 %1(i8* %user_context) #16
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.88, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.89, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !307
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !307
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.90, i64 0, i64 0)) #16
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #17
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 8, !tbaa !319
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.91, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.92, i64 0, i64 0)) #16
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 8, !tbaa !321
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.93, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 8, !tbaa !323
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.96, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 8, !tbaa !324
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.22.97, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.98, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.99, i64 0, i64 0)) #16
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 8, !tbaa !325
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26.100, i64 0, i64 0)) #16
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27.101, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 8, !tbaa !326
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.28.102, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %12 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29.103, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %4, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %4 to i64
  %min.iters.check = icmp ult i32 %4, 17
  br i1 %min.iters.check, label %for.body.i.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body.lr.ph.i.i
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %6 = icmp eq i64 %n.mod.vf, 0
  %7 = select i1 %6, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %7
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi6 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi18, %vector.body ]
  %vec.phi7 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi19, %vector.body ]
  %vec.phi8 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi20, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add3 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add4 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %8 = or i64 %index, 4
  %9 = or i64 %index, 8
  %10 = or i64 %index, 12
  %11 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 2
  %12 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %8, i32 2
  %13 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %9, i32 2
  %14 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %10, i32 2
  %15 = bitcast i32* %11 to <16 x i32>*
  %16 = bitcast i32* %12 to <16 x i32>*
  %17 = bitcast i32* %13 to <16 x i32>*
  %18 = bitcast i32* %14 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %15, align 4, !tbaa !182
  %wide.vec9 = load <16 x i32>, <16 x i32>* %16, align 4, !tbaa !182
  %wide.vec10 = load <16 x i32>, <16 x i32>* %17, align 4, !tbaa !182
  %wide.vec11 = load <16 x i32>, <16 x i32>* %18, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec9, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec10, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec11, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %19 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %20 = icmp sgt <4 x i32> %strided.vec12, zeroinitializer
  %21 = icmp sgt <4 x i32> %strided.vec13, zeroinitializer
  %22 = icmp sgt <4 x i32> %strided.vec14, zeroinitializer
  %23 = zext <4 x i32> %strided.vec to <4 x i64>
  %24 = zext <4 x i32> %strided.vec12 to <4 x i64>
  %25 = zext <4 x i32> %strided.vec13 to <4 x i64>
  %26 = zext <4 x i32> %strided.vec14 to <4 x i64>
  %27 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind, i32 1
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add, i32 1
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add3, i32 1
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add4, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %27, i32 4, <4 x i1> %19, <4 x i32> undef), !tbaa !178
  %wide.masked.gather15 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %28, i32 4, <4 x i1> %20, <4 x i32> undef), !tbaa !178
  %wide.masked.gather16 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %29, i32 4, <4 x i1> %21, <4 x i32> undef), !tbaa !178
  %wide.masked.gather17 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %30, i32 4, <4 x i1> %22, <4 x i32> undef), !tbaa !178
  %31 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %32 = add nsw <4 x i32> %wide.masked.gather15, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = add nsw <4 x i32> %wide.masked.gather16, <i32 -1, i32 -1, i32 -1, i32 -1>
  %34 = add nsw <4 x i32> %wide.masked.gather17, <i32 -1, i32 -1, i32 -1, i32 -1>
  %35 = sext <4 x i32> %31 to <4 x i64>
  %36 = sext <4 x i32> %32 to <4 x i64>
  %37 = sext <4 x i32> %33 to <4 x i64>
  %38 = sext <4 x i32> %34 to <4 x i64>
  %39 = mul nsw <4 x i64> %35, %23
  %40 = mul nsw <4 x i64> %36, %24
  %41 = mul nsw <4 x i64> %37, %25
  %42 = mul nsw <4 x i64> %38, %26
  %43 = select <4 x i1> %19, <4 x i64> %39, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %43
  %44 = select <4 x i1> %20, <4 x i64> %40, <4 x i64> zeroinitializer
  %predphi18 = add <4 x i64> %vec.phi6, %44
  %45 = select <4 x i1> %21, <4 x i64> %41, <4 x i64> zeroinitializer
  %predphi19 = add <4 x i64> %vec.phi7, %45
  %46 = select <4 x i1> %22, <4 x i64> %42, <4 x i64> zeroinitializer
  %predphi20 = add <4 x i64> %vec.phi8, %46
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %47 = icmp eq i64 %index.next, %n.vec
  br i1 %47, label %middle.block, label %vector.body, !llvm.loop !327

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi18, %predphi
  %bin.rdx21 = add <4 x i64> %predphi19, %bin.rdx
  %bin.rdx22 = add <4 x i64> %predphi20, %bin.rdx21
  %48 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx22)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec, %middle.block ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %48, %middle.block ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 2
  %49 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %49, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %49 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 1
  %50 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %50, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !328

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check26 = icmp ult i32 %4, 17
  br i1 %min.iters.check26, label %for.body.i13.i.preheader64, label %vector.ph27

vector.ph27:                                      ; preds = %for.body.i13.i.preheader
  %n.mod.vf28 = and i64 %wide.trip.count.i.i, 15
  %51 = icmp eq i64 %n.mod.vf28, 0
  %52 = select i1 %51, i64 16, i64 %n.mod.vf28
  %n.vec29 = sub nsw i64 %wide.trip.count.i.i, %52
  br label %vector.body25

vector.body25:                                    ; preds = %vector.body25, %vector.ph27
  %index30 = phi i64 [ 0, %vector.ph27 ], [ %index.next31, %vector.body25 ]
  %vec.ind34 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph27 ], [ %vec.ind.next39, %vector.body25 ]
  %vec.phi40 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi56, %vector.body25 ]
  %vec.phi41 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi57, %vector.body25 ]
  %vec.phi42 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi58, %vector.body25 ]
  %vec.phi43 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi59, %vector.body25 ]
  %step.add35 = add <4 x i64> %vec.ind34, <i64 4, i64 4, i64 4, i64 4>
  %step.add36 = add <4 x i64> %vec.ind34, <i64 8, i64 8, i64 8, i64 8>
  %step.add37 = add <4 x i64> %vec.ind34, <i64 12, i64 12, i64 12, i64 12>
  %53 = or i64 %index30, 4
  %54 = or i64 %index30, 8
  %55 = or i64 %index30, 12
  %56 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index30, i32 2
  %57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %53, i32 2
  %58 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %54, i32 2
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %55, i32 2
  %60 = bitcast i32* %56 to <16 x i32>*
  %61 = bitcast i32* %57 to <16 x i32>*
  %62 = bitcast i32* %58 to <16 x i32>*
  %63 = bitcast i32* %59 to <16 x i32>*
  %wide.vec44 = load <16 x i32>, <16 x i32>* %60, align 4, !tbaa !182
  %wide.vec45 = load <16 x i32>, <16 x i32>* %61, align 4, !tbaa !182
  %wide.vec46 = load <16 x i32>, <16 x i32>* %62, align 4, !tbaa !182
  %wide.vec47 = load <16 x i32>, <16 x i32>* %63, align 4, !tbaa !182
  %strided.vec48 = shufflevector <16 x i32> %wide.vec44, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec49 = shufflevector <16 x i32> %wide.vec45, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec50 = shufflevector <16 x i32> %wide.vec46, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec51 = shufflevector <16 x i32> %wide.vec47, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %64 = icmp slt <4 x i32> %strided.vec48, zeroinitializer
  %65 = icmp slt <4 x i32> %strided.vec49, zeroinitializer
  %66 = icmp slt <4 x i32> %strided.vec50, zeroinitializer
  %67 = icmp slt <4 x i32> %strided.vec51, zeroinitializer
  %68 = sext <4 x i32> %strided.vec48 to <4 x i64>
  %69 = sext <4 x i32> %strided.vec49 to <4 x i64>
  %70 = sext <4 x i32> %strided.vec50 to <4 x i64>
  %71 = sext <4 x i32> %strided.vec51 to <4 x i64>
  %72 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind34, i32 1
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add35, i32 1
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add36, i32 1
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add37, i32 1
  %wide.masked.gather52 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %72, i32 4, <4 x i1> %64, <4 x i32> undef), !tbaa !178
  %wide.masked.gather53 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %73, i32 4, <4 x i1> %65, <4 x i32> undef), !tbaa !178
  %wide.masked.gather54 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %74, i32 4, <4 x i1> %66, <4 x i32> undef), !tbaa !178
  %wide.masked.gather55 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %75, i32 4, <4 x i1> %67, <4 x i32> undef), !tbaa !178
  %76 = add nsw <4 x i32> %wide.masked.gather52, <i32 -1, i32 -1, i32 -1, i32 -1>
  %77 = add nsw <4 x i32> %wide.masked.gather53, <i32 -1, i32 -1, i32 -1, i32 -1>
  %78 = add nsw <4 x i32> %wide.masked.gather54, <i32 -1, i32 -1, i32 -1, i32 -1>
  %79 = add nsw <4 x i32> %wide.masked.gather55, <i32 -1, i32 -1, i32 -1, i32 -1>
  %80 = sext <4 x i32> %76 to <4 x i64>
  %81 = sext <4 x i32> %77 to <4 x i64>
  %82 = sext <4 x i32> %78 to <4 x i64>
  %83 = sext <4 x i32> %79 to <4 x i64>
  %84 = mul nsw <4 x i64> %80, %68
  %85 = mul nsw <4 x i64> %81, %69
  %86 = mul nsw <4 x i64> %82, %70
  %87 = mul nsw <4 x i64> %83, %71
  %88 = select <4 x i1> %64, <4 x i64> %84, <4 x i64> zeroinitializer
  %predphi56 = add <4 x i64> %vec.phi40, %88
  %89 = select <4 x i1> %65, <4 x i64> %85, <4 x i64> zeroinitializer
  %predphi57 = add <4 x i64> %vec.phi41, %89
  %90 = select <4 x i1> %66, <4 x i64> %86, <4 x i64> zeroinitializer
  %predphi58 = add <4 x i64> %vec.phi42, %90
  %91 = select <4 x i1> %67, <4 x i64> %87, <4 x i64> zeroinitializer
  %predphi59 = add <4 x i64> %vec.phi43, %91
  %index.next31 = add i64 %index30, 16
  %vec.ind.next39 = add <4 x i64> %vec.ind34, <i64 16, i64 16, i64 16, i64 16>
  %92 = icmp eq i64 %index.next31, %n.vec29
  br i1 %92, label %middle.block23, label %vector.body25, !llvm.loop !329

middle.block23:                                   ; preds = %vector.body25
  %bin.rdx60 = add <4 x i64> %predphi57, %predphi56
  %bin.rdx61 = add <4 x i64> %predphi58, %bin.rdx60
  %bin.rdx62 = add <4 x i64> %predphi59, %bin.rdx61
  %93 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx62)
  br label %for.body.i13.i.preheader64

for.body.i13.i.preheader64:                       ; preds = %middle.block23, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec29, %middle.block23 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %93, %middle.block23 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader64, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader64 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader64 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 2
  %94 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %94, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %94 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 1
  %95 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %95, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !330

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %if.end
  %add8.i27.i = phi i64 [ 1, %if.end ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %if.end ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %96 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %96 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i64 %mul.i) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  store i8* %call2, i8** %host, align 8, !tbaa !172
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #17
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %97 = load i8*, i8** %host, align 8, !tbaa !172
  tail call void @halide_free(i8* %user_context, i8* %97) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30.104, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #17
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31.105, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32.106, i64 0, i64 0)) #16
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !307
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 8, !tbaa !331
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33.107, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 8, !tbaa !332
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.34.108, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %3() #16
  store i64 %handle, i64* %device, align 8, !tbaa !174
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !174
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i64 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i64 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %7() #16
  store i64 0, i64* %device, align 8, !tbaa !174
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #17
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i64 0, i64 0)) #16
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !174
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #17
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !174
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 8, !tbaa !172
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !308
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !308
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !307
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %9 = load i8*, i8** %host34, align 8, !tbaa !172
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i64 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 8, !tbaa !333
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #17
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #17
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !307
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i64 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 8, !tbaa !314
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i64 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 8, !tbaa !333
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #17
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #17
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !307
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i64 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 8, !tbaa !314
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i64 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 8, !tbaa !333
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !308
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !308
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #17
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #17
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 8, !tbaa !314
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i64 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 8, !tbaa !333
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #16
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %1() #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i64 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 8, !tbaa !314
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i64 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 8, !tbaa !320
  tail call void %4() #16
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #17
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %6() #16
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 8, !tbaa !314
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 8, !tbaa !322
  tail call void %9() #16
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #16
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i64 0, i64 0)) #16
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #16
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i64 0, i64 0)) #16
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 8, !tbaa !334
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #16
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i64 0, i64 0)) #16
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 8, !tbaa !335
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #16
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 8, !tbaa !336
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  store i64 0, i64* %device, align 8, !tbaa !174
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i64 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %5() #16
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !337
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #17
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #16
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #16
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.115, i64 0, i64 0)) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #16
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.116, i64 0, i64 0)) #16
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #16
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #16
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.118, i64 0, i64 0)) #16
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #16
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #16
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !73
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !73
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !305
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !136
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !306
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !305
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !136
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !306
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i64 4) #16
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i64 4) #16
  %call.i = call i8* @malloc(i64 1024) #16
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.120, i64 0, i64 0)) #16
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #16
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.121, i64 0, i64 0)) #16
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #16
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.122, i64 0, i64 0)) #16
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.123, i64 0, i64 0)) #16
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.124, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #16
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.126, i64 0, i64 0)) #16
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #16
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #16
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i64 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !14
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #16
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #16
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.128, i64 0, i64 0)) #16
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #16
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #16
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #16
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i100

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end17.sink.split

if.else.i100:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i64
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i64
  %sub.ptr.sub.i.i97 = sub i64 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i64 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %call.i.i99 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %add.i.i98) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #16
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i100, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i100 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #16
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.133, i64 0, i64 0)) #16
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.134, i64 0, i64 0)) #16
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #16
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.137, i64 0, i64 0)) #16
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #16
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #16
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.139, i64 0, i64 0)) #16
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #16
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #16
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #16
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.140, i64 0, i64 0)) #16
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #16
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #16
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #16
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.144, i64 0, i64 0)) #16
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i64 0, i64 0)) #16
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.147, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0)) #16
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #16
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #16
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #16
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i64 0, i64 0)) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i64 0, i64 0)) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #16
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #16
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #16
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #16
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #16
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #16
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #16
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i64 0, i64 0)) #16
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #16
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #16
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.149, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i64 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !14
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #16
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #16
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #16
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #16
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #16
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #16
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.150, i64 0, i64 0)) #16
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.151, i64 0, i64 0)) #16
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #16
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i167

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end

if.else.i167:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i64
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i64
  %sub.ptr.sub.i.i164 = sub i64 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i64 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %call.i.i166 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %add.i.i165) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #16
  br label %if.end

if.end:                                           ; preds = %if.else.i167, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i167 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #16
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #16
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #16
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #16
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #16
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i64 0, i64 0)) #16
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #16
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #16
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #16
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i64 0, i64 0)) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #16
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #16
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #16
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i64 0, i64 0)) #16
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -41
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_shutdown() #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  store i32 -2, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_join_thread(%struct.halide_thread* nonnull %0) #16
  store %struct.halide_thread* null, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  store i32 -1, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_profiler_report_unlocked(i8* null, %struct.halide_profiler_state* nonnull %call) #17
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* nonnull %call) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_profiler_state* @halide_profiler_get_state() local_unnamed_addr #2 {
entry:
  ret %struct.halide_profiler_state* @_ZZ25halide_profiler_get_stateE1s
}

; Function Attrs: nounwind
define weak void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %s) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit, label %if.then6.i

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry
  %sstr.sroa.125.0 = phi i8* [ %add.ptr.i, %if.then6.i ], [ null, %entry ]
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.0624 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not625 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0624, null
  br i1 %tobool.not625, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sub.ptr.rhs.cast.i.i348 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i349 = sub i64 1, %sub.ptr.rhs.cast.i.i348
  br label %for.body

for.cond.cleanup:                                 ; preds = %cleanup181, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sstr.sroa.19.0.lcssa = phi i8* [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit ], [ %sstr.sroa.19.15, %cleanup181 ]
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.cond.cleanup
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %for.cond.cleanup
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %sstr.sroa.19.0.lcssa to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret void

for.body:                                         ; preds = %cleanup181, %for.body.lr.ph
  %p.0627 = phi %struct.halide_profiler_pipeline_stats* [ %p.0624, %for.body.lr.ph ], [ %p.0, %cleanup181 ]
  %sstr.sroa.19.0626 = phi i8* [ %call.i, %for.body.lr.ph ], [ %sstr.sroa.19.15, %cleanup181 ]
  %time = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 0
  %0 = load i64, i64* %time, align 8, !tbaa !341
  %conv = uitofp i64 %0 to float
  %div = fdiv float %conv, 1.000000e+06
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %tobool1.not = icmp eq i32 %1, 0
  br i1 %tobool1.not, label %cleanup181, label %if.end

if.end:                                           ; preds = %for.body
  br i1 %tobool.not.i, label %if.end.split, label %if.then.i278

if.end.split:                                     ; preds = %if.end
  %active_threads_numerator1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %2 = load i64, i64* %active_threads_numerator1, align 8, !tbaa !344
  %active_threads_denominator2 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %3 = load i64, i64* %active_threads_denominator2, align 8, !tbaa !345
  %cmp3 = icmp eq i64 %2, %3
  %name4 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %4 = load i8*, i8** %name4, align 8, !tbaa !346
  %call.i2825 = tail call i8* @halide_string_to_string(i8* null, i8* %sstr.sroa.125.0, i8* %4) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

if.then.i278:                                     ; preds = %if.end
  store i8 0, i8* %call.i, align 1, !tbaa !14
  %active_threads_numerator6 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %5 = load i64, i64* %active_threads_numerator6, align 8, !tbaa !344
  %active_threads_denominator7 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %6 = load i64, i64* %active_threads_denominator7, align 8, !tbaa !345
  %cmp8 = icmp eq i64 %5, %6
  %name9 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %7 = load i8*, i8** %name9, align 8, !tbaa !346
  %call.i28210 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* %sstr.sroa.125.0, i8* %7) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit: ; preds = %if.end.split, %if.then.i278
  %8 = phi i64 [ %2, %if.end.split ], [ %5, %if.then.i278 ]
  %9 = phi i64 [ %3, %if.end.split ], [ %6, %if.then.i278 ]
  %10 = phi i1 [ %cmp3, %if.end.split ], [ %cmp8, %if.then.i278 ]
  %phi.call = phi i8* [ %call.i2825, %if.end.split ], [ %call.i28210, %if.then.i278 ]
  %call.i285 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  %call.i288 = tail call i8* @halide_string_to_string(i8* %call.i285, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8.165, i64 0, i64 0)) #16
  %conv.i = fpext float %div to double
  %call.i291 = tail call i8* @halide_double_to_string(i8* %call.i288, i8* %sstr.sroa.125.0, double %conv.i, i32 0) #16
  %call.i294 = tail call i8* @halide_string_to_string(i8* %call.i291, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.166, i64 0, i64 0)) #16
  %call.i297 = tail call i8* @halide_string_to_string(i8* %call.i294, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.167, i64 0, i64 0)) #16
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 12
  %11 = load i32, i32* %samples, align 4, !tbaa !347
  %conv.i300 = sext i32 %11 to i64
  %call.i301 = tail call i8* @halide_int64_to_string(i8* %call.i297, i8* %sstr.sroa.125.0, i64 %conv.i300, i32 1) #16
  %call.i304 = tail call i8* @halide_string_to_string(i8* %call.i301, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.168, i64 0, i64 0)) #16
  %12 = load i32, i32* %runs, align 8, !tbaa !343
  %conv.i307 = sext i32 %12 to i64
  %call.i308 = tail call i8* @halide_int64_to_string(i8* %call.i304, i8* %sstr.sroa.125.0, i64 %conv.i307, i32 1) #16
  %call.i311 = tail call i8* @halide_string_to_string(i8* %call.i308, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12.169, i64 0, i64 0)) #16
  %13 = load i32, i32* %runs, align 8, !tbaa !343
  %conv19 = sitofp i32 %13 to float
  %div20 = fdiv float %div, %conv19
  %conv.i314 = fpext float %div20 to double
  %call.i315 = tail call i8* @halide_double_to_string(i8* %call.i311, i8* %sstr.sroa.125.0, double %conv.i314, i32 0) #16
  %call.i318 = tail call i8* @halide_string_to_string(i8* %call.i315, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13.170, i64 0, i64 0)) #16
  br i1 %10, label %if.end28, label %if.then24

if.then24:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %conv3 = uitofp i64 %8 to double
  %conv5 = uitofp i64 %9 to double
  %add = fadd double %conv5, 1.000000e-10
  %div6 = fdiv double %conv3, %add
  %conv7 = fptrunc double %div6 to float
  %call.i321 = tail call i8* @halide_string_to_string(i8* %call.i318, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14.171, i64 0, i64 0)) #16
  %conv.i324 = fpext float %conv7 to double
  %call.i325 = tail call i8* @halide_double_to_string(i8* %call.i321, i8* %sstr.sroa.125.0, double %conv.i324, i32 0) #16
  %call.i328 = tail call i8* @halide_string_to_string(i8* %call.i325, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %sstr.sroa.19.1 = phi i8* [ %call.i318, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit ], [ %call.i328, %if.then24 ]
  %call.i331 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.1, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15.172, i64 0, i64 0)) #16
  %num_allocs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 13
  %14 = load i32, i32* %num_allocs, align 8, !tbaa !348
  %conv.i334 = sext i32 %14 to i64
  %call.i335 = tail call i8* @halide_int64_to_string(i8* %call.i331, i8* %sstr.sroa.125.0, i64 %conv.i334, i32 1) #16
  %call.i338 = tail call i8* @halide_string_to_string(i8* %call.i335, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.173, i64 0, i64 0)) #16
  %memory_peak = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 2
  %15 = load i64, i64* %memory_peak, align 8, !tbaa !349
  %call.i341 = tail call i8* @halide_uint64_to_string(i8* %call.i338, i8* %sstr.sroa.125.0, i64 %15, i32 1) #16
  %call.i344 = tail call i8* @halide_string_to_string(i8* %call.i341, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.174, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit, label %if.then.i352

if.then.i352:                                     ; preds = %if.end28
  %sub.ptr.lhs.cast.i.i347 = ptrtoint i8* %call.i344 to i64
  %add.i.i350 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i347
  %call.i.i351 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i350) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit: ; preds = %if.then.i352, %if.end28
  %retval.0.i = phi i8* [ %call.i, %if.then.i352 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end28 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i) #16
  %16 = load i64, i64* %time, align 8, !tbaa !341
  %tobool36.not = icmp eq i64 %16, 0
  br i1 %tobool36.not, label %lor.end, label %for.cond53.preheader

lor.end:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %memory_total = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 3
  %17 = load i64, i64* %memory_total, align 8, !tbaa !350
  %tobool37.not = icmp eq i64 %17, 0
  br i1 %tobool37.not, label %for.cond41.preheader, label %for.cond53.preheader

for.cond41.preheader:                             ; preds = %lor.end
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %18 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %cmp42589 = icmp sgt i32 %18, 0
  br i1 %cmp42589, label %for.body44.lr.ph, label %cleanup181

for.body44.lr.ph:                                 ; preds = %for.cond41.preheader
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  %19 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %20 = zext i32 %18 to i64
  br label %for.body44

for.cond41:                                       ; preds = %for.body44
  %exitcond.not = icmp eq i64 %indvars.iv.next, %20
  br i1 %exitcond.not, label %cleanup181, label %for.body44, !llvm.loop !353

for.body44:                                       ; preds = %for.cond41, %for.body44.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body44.lr.ph ], [ %indvars.iv.next, %for.cond41 ]
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %19, i64 %indvars.iv, i32 4
  %21 = load i64, i64* %stack_peak, align 8, !tbaa !354
  %tobool45.not = icmp eq i64 %21, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool45.not, label %for.cond41, label %for.cond53.preheader

for.cond53.preheader:                             ; preds = %for.body44, %lor.end, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %num_funcs54 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %22 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %cmp55621 = icmp sgt i32 %22, 0
  br i1 %cmp55621, label %for.body57.lr.ph, label %cleanup181

for.body57.lr.ph:                                 ; preds = %for.cond53.preheader
  %funcs59 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  br label %for.body57

for.body57:                                       ; preds = %cleanup172, %for.body57.lr.ph
  %indvars.iv630 = phi i64 [ 0, %for.body57.lr.ph ], [ %indvars.iv.next631, %cleanup172 ]
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358, label %if.then.i356

if.then.i356:                                     ; preds = %for.body57
  store i8 0, i8* %call.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358: ; preds = %if.then.i356, %for.body57
  %23 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs59, align 8, !tbaa !352
  %add.ptr61 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630
  %cmp62 = icmp eq i64 %indvars.iv630, 0
  br i1 %cmp62, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %time63 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %24 = load i64, i64* %time63, align 8, !tbaa !356
  %cmp64 = icmp eq i64 %24, 0
  br i1 %cmp64, label %cleanup172, label %if.end66

if.end66:                                         ; preds = %land.lhs.true, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %call.i361 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.175, i64 0, i64 0)) #16
  %name68 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 7
  %25 = load i8*, i8** %name68, align 8, !tbaa !357
  %call.i364 = tail call i8* @halide_string_to_string(i8* %call.i361, i8* %sstr.sroa.125.0, i8* %25) #16
  %call.i367 = tail call i8* @halide_string_to_string(i8* %call.i364, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19.176, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i591 = ptrtoint i8* %call.i367 to i64
  %sub.ptr.sub.i592 = sub i64 %sub.ptr.lhs.cast.i591, %sub.ptr.rhs.cast.i.i348
  %cmp73593 = icmp ult i64 %sub.ptr.sub.i592, 25
  br i1 %cmp73593, label %while.body, label %while.end

while.body:                                       ; preds = %if.end66, %while.body
  %sstr.sroa.19.3594 = phi i8* [ %call.i384, %while.body ], [ %call.i367, %if.end66 ]
  %call.i384 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.3594, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i = ptrtoint i8* %call.i384 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i.i348
  %cmp73 = icmp ult i64 %sub.ptr.sub.i, 25
  br i1 %cmp73, label %while.body, label %while.end, !llvm.loop !358

while.end:                                        ; preds = %while.body, %if.end66
  %sstr.sroa.19.3.lcssa = phi i8* [ %call.i367, %if.end66 ], [ %call.i384, %while.body ]
  %time75 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %26 = load i64, i64* %time75, align 8, !tbaa !356
  %conv76 = uitofp i64 %26 to float
  %27 = load i32, i32* %runs, align 8, !tbaa !343
  %conv78 = sitofp i32 %27 to float
  %mul = fmul float %conv78, 1.000000e+06
  %div79 = fdiv float %conv76, %mul
  %conv.i387 = fpext float %div79 to double
  %call.i388 = tail call i8* @halide_double_to_string(i8* %sstr.sroa.19.3.lcssa, i8* %sstr.sroa.125.0, double %conv.i387, i32 0) #16
  %tobool.not.i390 = icmp eq i8* %call.i388, null
  br i1 %tobool.not.i390, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, label %if.then.i393

if.then.i393:                                     ; preds = %while.end
  %add.ptr.i391 = getelementptr inbounds i8, i8* %call.i388, i64 -3
  %cmp.i = icmp ult i8* %add.ptr.i391, %call.i
  %spec.store.select.i = select i1 %cmp.i, i8* %call.i, i8* %add.ptr.i391
  store i8 0, i8* %spec.store.select.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit: ; preds = %if.then.i393, %while.end
  %sstr.sroa.19.4 = phi i8* [ null, %while.end ], [ %spec.store.select.i, %if.then.i393 ]
  %call.i399 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.4, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.178, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i400596 = ptrtoint i8* %call.i399 to i64
  %sub.ptr.sub.i402597 = sub i64 %sub.ptr.lhs.cast.i400596, %sub.ptr.rhs.cast.i.i348
  %cmp85598 = icmp ult i64 %sub.ptr.sub.i402597, 35
  br i1 %cmp85598, label %while.body86, label %while.end88

while.body86:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, %while.body86
  %sstr.sroa.19.5599 = phi i8* [ %call.i408, %while.body86 ], [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ]
  %call.i408 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5599, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i400 = ptrtoint i8* %call.i408 to i64
  %sub.ptr.sub.i402 = sub i64 %sub.ptr.lhs.cast.i400, %sub.ptr.rhs.cast.i.i348
  %cmp85 = icmp ult i64 %sub.ptr.sub.i402, 35
  br i1 %cmp85, label %while.body86, label %while.end88, !llvm.loop !359

while.end88:                                      ; preds = %while.body86, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit
  %sstr.sroa.19.5.lcssa = phi i8* [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ], [ %call.i408, %while.body86 ]
  %28 = load i64, i64* %time, align 8, !tbaa !341
  %cmp90.not = icmp eq i64 %28, 0
  br i1 %cmp90.not, label %if.end97, label %if.then91

if.then91:                                        ; preds = %while.end88
  %29 = load i64, i64* %time75, align 8, !tbaa !356
  %mul93 = mul i64 %29, 100
  %div95 = udiv i64 %mul93, %28
  br label %if.end97

if.end97:                                         ; preds = %if.then91, %while.end88
  %percent.0 = phi i64 [ %div95, %if.then91 ], [ 0, %while.end88 ]
  %call.i411 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #16
  %sext = shl i64 %percent.0, 32
  %conv.i414 = ashr exact i64 %sext, 32
  %call.i415 = tail call i8* @halide_int64_to_string(i8* %call.i411, i8* %sstr.sroa.125.0, i64 %conv.i414, i32 1) #16
  %call.i418 = tail call i8* @halide_string_to_string(i8* %call.i415, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23.180, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i419601 = ptrtoint i8* %call.i418 to i64
  %sub.ptr.sub.i421602 = sub i64 %sub.ptr.lhs.cast.i419601, %sub.ptr.rhs.cast.i.i348
  %cmp104603 = icmp ult i64 %sub.ptr.sub.i421602, 43
  br i1 %cmp104603, label %while.body105, label %while.end107

while.body105:                                    ; preds = %if.end97, %while.body105
  %sstr.sroa.19.6604 = phi i8* [ %call.i427, %while.body105 ], [ %call.i418, %if.end97 ]
  %call.i427 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6604, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i419 = ptrtoint i8* %call.i427 to i64
  %sub.ptr.sub.i421 = sub i64 %sub.ptr.lhs.cast.i419, %sub.ptr.rhs.cast.i.i348
  %cmp104 = icmp ult i64 %sub.ptr.sub.i421, 43
  br i1 %cmp104, label %while.body105, label %while.end107, !llvm.loop !360

while.end107:                                     ; preds = %while.body105, %if.end97
  %sstr.sroa.19.6.lcssa = phi i8* [ %call.i418, %if.end97 ], [ %call.i427, %while.body105 ]
  br i1 %10, label %if.end127, label %if.then109

if.then109:                                       ; preds = %while.end107
  %active_threads_numerator111 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 5
  %30 = load i64, i64* %active_threads_numerator111, align 8, !tbaa !361
  %conv112 = uitofp i64 %30 to double
  %active_threads_denominator113 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 6
  %31 = load i64, i64* %active_threads_denominator113, align 8, !tbaa !362
  %conv114 = uitofp i64 %31 to double
  %add115 = fadd double %conv114, 1.000000e-10
  %div116 = fdiv double %conv112, %add115
  %conv117 = fptrunc double %div116 to float
  %call.i430 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.181, i64 0, i64 0)) #16
  %conv.i433 = fpext float %conv117 to double
  %call.i434 = tail call i8* @halide_double_to_string(i8* %call.i430, i8* %sstr.sroa.125.0, double %conv.i433, i32 0) #16
  %tobool.not.i436 = icmp eq i8* %call.i434, null
  br i1 %tobool.not.i436, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, label %if.then.i441

if.then.i441:                                     ; preds = %if.then109
  %add.ptr.i437 = getelementptr inbounds i8, i8* %call.i434, i64 -3
  %cmp.i439 = icmp ult i8* %add.ptr.i437, %call.i
  %spec.store.select.i440 = select i1 %cmp.i439, i8* %call.i, i8* %add.ptr.i437
  store i8 0, i8* %spec.store.select.i440, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442: ; preds = %if.then.i441, %if.then109
  %sstr.sroa.19.7 = phi i8* [ null, %if.then109 ], [ %spec.store.select.i440, %if.then.i441 ]
  %sub.ptr.lhs.cast.i447606 = ptrtoint i8* %sstr.sroa.19.7 to i64
  %sub.ptr.sub.i449607 = sub i64 %sub.ptr.lhs.cast.i447606, %sub.ptr.rhs.cast.i.i348
  %cmp123608 = icmp ult i64 %sub.ptr.sub.i449607, 58
  br i1 %cmp123608, label %while.body124, label %if.end127

while.body124:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.body124
  %sstr.sroa.19.8609 = phi i8* [ %call.i455, %while.body124 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ]
  %call.i455 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.8609, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i447 = ptrtoint i8* %call.i455 to i64
  %sub.ptr.sub.i449 = sub i64 %sub.ptr.lhs.cast.i447, %sub.ptr.rhs.cast.i.i348
  %cmp123 = icmp ult i64 %sub.ptr.sub.i449, 58
  br i1 %cmp123, label %while.body124, label %if.end127, !llvm.loop !363

if.end127:                                        ; preds = %while.body124, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.end107
  %sstr.sroa.19.9 = phi i8* [ %sstr.sroa.19.6.lcssa, %while.end107 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ %call.i455, %while.body124 ]
  %cursor.0 = phi i64 [ 58, %while.end107 ], [ 73, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ 73, %while.body124 ]
  %memory_peak128 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 2
  %32 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %tobool129.not = icmp eq i64 %32, 0
  br i1 %tobool129.not, label %if.end162, label %if.then130

if.then130:                                       ; preds = %if.end127
  %call.i458 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.9, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25.182, i64 0, i64 0)) #16
  %33 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %call.i461 = tail call i8* @halide_uint64_to_string(i8* %call.i458, i8* %sstr.sroa.125.0, i64 %33, i32 1) #16
  %sub.ptr.lhs.cast.i462611 = ptrtoint i8* %call.i461 to i64
  %sub.ptr.sub.i464612 = sub i64 %sub.ptr.lhs.cast.i462611, %sub.ptr.rhs.cast.i.i348
  %cmp137613 = icmp ult i64 %sub.ptr.sub.i464612, %cursor.0
  br i1 %cmp137613, label %while.body138, label %while.end140

while.body138:                                    ; preds = %if.then130, %while.body138
  %sstr.sroa.19.10614 = phi i8* [ %call.i470, %while.body138 ], [ %call.i461, %if.then130 ]
  %call.i470 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10614, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i462 = ptrtoint i8* %call.i470 to i64
  %sub.ptr.sub.i464 = sub i64 %sub.ptr.lhs.cast.i462, %sub.ptr.rhs.cast.i.i348
  %cmp137 = icmp ult i64 %sub.ptr.sub.i464, %cursor.0
  br i1 %cmp137, label %while.body138, label %while.end140, !llvm.loop !365

while.end140:                                     ; preds = %while.body138, %if.then130
  %sstr.sroa.19.10.lcssa = phi i8* [ %call.i461, %if.then130 ], [ %call.i470, %while.body138 ]
  %call.i473 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26.183, i64 0, i64 0)) #16
  %num_allocs142 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 8
  %34 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %conv.i476 = sext i32 %34 to i64
  %call.i477 = tail call i8* @halide_int64_to_string(i8* %call.i473, i8* %sstr.sroa.125.0, i64 %conv.i476, i32 1) #16
  %add144 = add nuw nsw i64 %cursor.0, 15
  %sub.ptr.lhs.cast.i478616 = ptrtoint i8* %call.i477 to i64
  %sub.ptr.sub.i480617 = sub i64 %sub.ptr.lhs.cast.i478616, %sub.ptr.rhs.cast.i.i348
  %cmp147618 = icmp ult i64 %sub.ptr.sub.i480617, %add144
  br i1 %cmp147618, label %while.body148, label %while.end150

while.body148:                                    ; preds = %while.end140, %while.body148
  %sstr.sroa.19.11619 = phi i8* [ %call.i467, %while.body148 ], [ %call.i477, %while.end140 ]
  %call.i467 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11619, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i478 = ptrtoint i8* %call.i467 to i64
  %sub.ptr.sub.i480 = sub i64 %sub.ptr.lhs.cast.i478, %sub.ptr.rhs.cast.i.i348
  %cmp147 = icmp ult i64 %sub.ptr.sub.i480, %add144
  br i1 %cmp147, label %while.body148, label %while.end150, !llvm.loop !367

while.end150:                                     ; preds = %while.body148, %while.end140
  %sstr.sroa.19.11.lcssa = phi i8* [ %call.i477, %while.end140 ], [ %call.i467, %while.body148 ]
  %35 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %cmp152.not = icmp eq i32 %35, 0
  br i1 %cmp152.not, label %if.end159, label %if.then153

if.then153:                                       ; preds = %while.end150
  %memory_total154 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 3
  %36 = load i64, i64* %memory_total154, align 8, !tbaa !368
  %conv156 = sext i32 %35 to i64
  %div157 = udiv i64 %36, %conv156
  br label %if.end159

if.end159:                                        ; preds = %if.then153, %while.end150
  %alloc_avg.0 = phi i64 [ %div157, %if.then153 ], [ 0, %while.end150 ]
  %call.i452 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27.184, i64 0, i64 0)) #16
  %sext586 = shl i64 %alloc_avg.0, 32
  %conv.i445 = ashr exact i64 %sext586, 32
  %call.i446 = tail call i8* @halide_int64_to_string(i8* %call.i452, i8* %sstr.sroa.125.0, i64 %conv.i445, i32 1) #16
  br label %if.end162

if.end162:                                        ; preds = %if.end159, %if.end127
  %sstr.sroa.19.12 = phi i8* [ %sstr.sroa.19.9, %if.end127 ], [ %call.i446, %if.end159 ]
  %stack_peak163 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 4
  %37 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %cmp164.not = icmp eq i64 %37, 0
  br i1 %cmp164.not, label %if.end169, label %if.then165

if.then165:                                       ; preds = %if.end162
  %call.i424 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.12, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28.185, i64 0, i64 0)) #16
  %38 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %call.i405 = tail call i8* @halide_uint64_to_string(i8* %call.i424, i8* %sstr.sroa.125.0, i64 %38, i32 1) #16
  br label %if.end169

if.end169:                                        ; preds = %if.then165, %if.end162
  %sstr.sroa.19.13 = phi i8* [ %sstr.sroa.19.12, %if.end162 ], [ %call.i405, %if.then165 ]
  %call.i396 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.13, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, label %if.then.i379

if.then.i379:                                     ; preds = %if.end169
  %sub.ptr.lhs.cast.i.i374 = ptrtoint i8* %call.i396 to i64
  %add.i.i377 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i374
  %call.i.i378 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i377) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381: ; preds = %if.then.i379, %if.end169
  %retval.0.i380 = phi i8* [ %call.i, %if.then.i379 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end169 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i380) #16
  br label %cleanup172

cleanup172:                                       ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, %land.lhs.true
  %sstr.sroa.19.14 = phi i8* [ %call.i, %land.lhs.true ], [ %call.i396, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381 ]
  %indvars.iv.next631 = add nuw nsw i64 %indvars.iv630, 1
  %39 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %40 = sext i32 %39 to i64
  %cmp55 = icmp slt i64 %indvars.iv.next631, %40
  br i1 %cmp55, label %for.body57, label %cleanup181, !llvm.loop !369

cleanup181:                                       ; preds = %for.cond41, %cleanup172, %for.cond53.preheader, %for.cond41.preheader, %for.body
  %sstr.sroa.19.15 = phi i8* [ %sstr.sroa.19.0626, %for.body ], [ %call.i344, %for.cond53.preheader ], [ %call.i344, %for.cond41.preheader ], [ %sstr.sroa.19.14, %cleanup172 ], [ %call.i344, %for.cond41 ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 8
  %41 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %41, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.cond.cleanup, label %for.body, !llvm.loop !370
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %s) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not9 = icmp eq %struct.halide_profiler_pipeline_stats* %0, null
  br i1 %tobool.not9, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %1 = phi %struct.halide_profiler_pipeline_stats* [ %7, %while.body ], [ %0, %entry ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %3 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %3, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 7
  %4 = bitcast %struct.halide_profiler_func_stats** %funcs to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !352
  tail call void @free(i8* %5) #16
  %6 = bitcast %struct.halide_profiler_pipeline_stats* %1 to i8*
  tail call void @free(i8* nonnull %6) #16
  %7 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %7, null
  br i1 %tobool.not, label %while.end, label %while.body, !llvm.loop !373

while.end:                                        ; preds = %while.body, %entry
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 2
  store i32 0, i32* %first_free_id, align 4, !tbaa !374
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.0121 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not122 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0121, null
  br i1 %tobool.not122, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.0123 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.0121, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %num_funcs1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 9
  %1 = load i32, i32* %num_funcs1, align 8, !tbaa !351
  %cmp2 = icmp eq i32 %1, %num_funcs
  br i1 %cmp2, label %cleanup62, label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.end, label %for.body, !llvm.loop !375

for.end:                                          ; preds = %for.inc, %entry
  %call4 = tail call i8* @malloc(i64 96) #16
  %3 = bitcast i8* %call4 to %struct.halide_profiler_pipeline_stats*
  %tobool5.not = icmp eq i8* %call4, null
  br i1 %tobool5.not, label %cleanup62, label %if.end7

if.end7:                                          ; preds = %for.end
  %4 = bitcast %struct.halide_profiler_pipeline_stats** %pipelines to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !371
  %next9 = getelementptr inbounds i8, i8* %call4, i64 64
  %6 = bitcast i8* %next9 to i8**
  store i8* %5, i8** %6, align 8, !tbaa !372
  %name10 = getelementptr inbounds i8, i8* %call4, i64 48
  %7 = bitcast i8* %name10 to i8**
  store i8* %pipeline_name, i8** %7, align 8, !tbaa !346
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 2
  %8 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %first_func_id = getelementptr inbounds i8, i8* %call4, i64 76
  %9 = bitcast i8* %first_func_id to i32*
  store i32 %8, i32* %9, align 4, !tbaa !376
  %num_funcs11 = getelementptr inbounds i8, i8* %call4, i64 72
  %10 = bitcast i8* %num_funcs11 to i32*
  store i32 %num_funcs, i32* %10, align 8, !tbaa !351
  %runs = getelementptr inbounds i8, i8* %call4, i64 80
  %11 = bitcast i8* %runs to i32*
  store i32 0, i32* %11, align 8, !tbaa !343
  %samples = getelementptr inbounds i8, i8* %call4, i64 84
  %12 = bitcast i8* %samples to i32*
  store i32 0, i32* %12, align 4, !tbaa !347
  %13 = bitcast i8* %call4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %num_allocs = getelementptr inbounds i8, i8* %call4, i64 88
  %14 = bitcast i8* %num_allocs to i32*
  store i32 0, i32* %14, align 8, !tbaa !348
  %active_threads_numerator = getelementptr inbounds i8, i8* %call4, i64 32
  %15 = bitcast i8* %active_threads_numerator to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !110
  %conv = sext i32 %num_funcs to i64
  %mul = mul nsw i64 %conv, 72
  %call12 = tail call i8* @malloc(i64 %mul) #16
  %funcs = getelementptr inbounds i8, i8* %call4, i64 56
  %16 = bitcast i8* %funcs to i8**
  store i8* %call12, i8** %16, align 8, !tbaa !352
  %tobool14.not = icmp eq i8* %call12, null
  %17 = bitcast i8* %call12 to %struct.halide_profiler_func_stats*
  br i1 %tobool14.not, label %if.then15, label %for.cond17.preheader

for.cond17.preheader:                             ; preds = %if.end7
  %cmp18119 = icmp sgt i32 %num_funcs, 0
  br i1 %cmp18119, label %for.body20.lr.ph, label %for.cond.cleanup19

for.body20.lr.ph:                                 ; preds = %for.cond17.preheader
  %wide.trip.count = zext i32 %num_funcs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %18 = icmp eq i32 %num_funcs, 1
  br i1 %18, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20.lr.ph.new

for.body20.lr.ph.new:                             ; preds = %for.body20.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body20

if.then15:                                        ; preds = %if.end7
  tail call void @free(i8* nonnull %call4) #16
  br label %cleanup62

for.cond.cleanup19.loopexit.unr-lcssa:            ; preds = %for.body20, %for.body20.lr.ph
  %indvars.iv.unr = phi i64 [ 0, %for.body20.lr.ph ], [ %indvars.iv.next.1, %for.body20 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup19, label %for.body20.epil

for.body20.epil:                                  ; preds = %for.cond.cleanup19.loopexit.unr-lcssa
  %time22.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 0
  store i64 0, i64* %time22.epil, align 8, !tbaa !356
  %arrayidx24.epil = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.unr
  %19 = load i64, i64* %arrayidx24.epil, align 8, !tbaa !110
  %20 = inttoptr i64 %19 to i8*
  %name28.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 7
  store i8* %20, i8** %name28.epil, align 8, !tbaa !357
  %memory_current32.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 1
  %num_allocs44.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 8
  store i32 0, i32* %num_allocs44.epil, align 8, !tbaa !366
  %21 = bitcast i64* %memory_current32.epil to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %21, align 8, !tbaa !110
  %active_threads_numerator51.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 5
  %22 = bitcast i64* %active_threads_numerator51.epil to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !110
  br label %for.cond.cleanup19

for.cond.cleanup19:                               ; preds = %for.body20.epil, %for.cond.cleanup19.loopexit.unr-lcssa, %for.cond17.preheader
  %23 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %add = add nsw i32 %23, %num_funcs
  store i32 %add, i32* %first_free_id, align 4, !tbaa !374
  store i8* %call4, i8** %4, align 8, !tbaa !371
  br label %cleanup62

for.body20:                                       ; preds = %for.body20, %for.body20.lr.ph.new
  %indvars.iv = phi i64 [ 0, %for.body20.lr.ph.new ], [ %indvars.iv.next.1, %for.body20 ]
  %niter = phi i64 [ %unroll_iter, %for.body20.lr.ph.new ], [ %niter.nsub.1, %for.body20 ]
  %time22 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 0
  store i64 0, i64* %time22, align 8, !tbaa !356
  %arrayidx24 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv
  %24 = load i64, i64* %arrayidx24, align 8, !tbaa !110
  %25 = inttoptr i64 %24 to i8*
  %name28 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 7
  store i8* %25, i8** %name28, align 8, !tbaa !357
  %memory_current32 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 1
  %num_allocs44 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 8
  store i32 0, i32* %num_allocs44, align 8, !tbaa !366
  %26 = bitcast i64* %memory_current32 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %26, align 8, !tbaa !110
  %active_threads_numerator51 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 5
  %27 = bitcast i64* %active_threads_numerator51 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %27, align 8, !tbaa !110
  %indvars.iv.next = or i64 %indvars.iv, 1
  %time22.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 0
  store i64 0, i64* %time22.1, align 8, !tbaa !356
  %arrayidx24.1 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.next
  %28 = load i64, i64* %arrayidx24.1, align 8, !tbaa !110
  %29 = inttoptr i64 %28 to i8*
  %name28.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 7
  store i8* %29, i8** %name28.1, align 8, !tbaa !357
  %memory_current32.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 1
  %num_allocs44.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 8
  store i32 0, i32* %num_allocs44.1, align 8, !tbaa !366
  %30 = bitcast i64* %memory_current32.1 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %30, align 8, !tbaa !110
  %active_threads_numerator51.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 5
  %31 = bitcast i64* %active_threads_numerator51.1 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %31, align 8, !tbaa !110
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20, !llvm.loop !377

cleanup62:                                        ; preds = %land.lhs.true, %for.cond.cleanup19, %if.then15, %for.end
  %retval.2 = phi %struct.halide_profiler_pipeline_stats* [ %3, %for.cond.cleanup19 ], [ null, %if.then15 ], [ null, %for.end ], [ %p.0123, %land.lhs.true ]
  ret %struct.halide_profiler_pipeline_stats* %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* %s, i32 %func_id, i64 %time, i32 %active_threads) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.055 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not56 = icmp eq %struct.halide_profiler_pipeline_stats* %p.055, null
  br i1 %tobool.not56, label %cleanup25, label %for.body

for.body:                                         ; preds = %entry, %if.end23
  %p.058 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %if.end23 ], [ %p.055, %entry ]
  %p_prev.057 = phi %struct.halide_profiler_pipeline_stats* [ %p.058, %if.end23 ], [ null, %entry ]
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 10
  %0 = load i32, i32* %first_func_id, align 4, !tbaa !376
  %cmp.not = icmp sgt i32 %0, %func_id
  br i1 %cmp.not, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 9
  %1 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %add = add nsw i32 %1, %0
  %cmp2 = icmp sgt i32 %add, %func_id
  br i1 %cmp2, label %if.then, label %if.end23

if.then:                                          ; preds = %land.lhs.true
  %tobool3.not = icmp eq %struct.halide_profiler_pipeline_stats* %p_prev.057, null
  br i1 %tobool3.not, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %2 = load i8*, i8** %next, align 8, !tbaa !372
  %next5 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p_prev.057, i64 0, i32 8
  store i8* %2, i8** %next5, align 8, !tbaa !372
  %3 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  store %struct.halide_profiler_pipeline_stats* %p.055, %struct.halide_profiler_pipeline_stats** %3, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %p.058, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 7
  %4 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %idx.ext = sext i32 %func_id to i64
  %add.ptr = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %4, i64 %idx.ext
  %idx.ext10 = sext i32 %0 to i64
  %idx.neg = sub nsw i64 0, %idx.ext10
  %add.ptr11 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr, i64 %idx.neg
  %time12 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 0
  %5 = load i64, i64* %time12, align 8, !tbaa !356
  %add13 = add i64 %5, %time
  store i64 %add13, i64* %time12, align 8, !tbaa !356
  %conv = sext i32 %active_threads to i64
  %active_threads_numerator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 5
  %6 = bitcast i64* %active_threads_numerator to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8, !tbaa !110
  %8 = insertelement <2 x i64> <i64 poison, i64 1>, i64 %conv, i32 0
  %9 = add <2 x i64> %7, %8
  %10 = bitcast i64* %active_threads_numerator to <2 x i64>*
  store <2 x i64> %9, <2 x i64>* %10, align 8, !tbaa !110
  %time16 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 0
  %11 = load i64, i64* %time16, align 8, !tbaa !341
  %add17 = add i64 %11, %time
  store i64 %add17, i64* %time16, align 8, !tbaa !341
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 12
  %12 = load i32, i32* %samples, align 4, !tbaa !347
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %samples, align 4, !tbaa !347
  %active_threads_numerator19 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 4
  %13 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8, !tbaa !110
  %15 = add <2 x i64> %14, %8
  %16 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 8, !tbaa !110
  ret void

if.end23:                                         ; preds = %land.lhs.true, %for.body
  %next24 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %17 = bitcast i8** %next24 to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %17, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup25, label %for.body, !llvm.loop !378

cleanup25:                                        ; preds = %if.end23, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_profiler_sample(%struct.halide_profiler_state* %s, i64* %prev_t) local_unnamed_addr #0 {
entry:
  %func = alloca i32, align 4
  %active_threads = alloca i32, align 4
  %0 = bitcast i32* %func to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  %1 = bitcast i32* %active_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  %get_remote_profiler_state = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 6
  %2 = load void (i32*, i32*)*, void (i32*, i32*)** %get_remote_profiler_state, align 8, !tbaa !379
  %tobool.not = icmp eq void (i32*, i32*)* %2, null
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void %2(i32* nonnull %func, i32* nonnull %active_threads) #16
  br label %if.end

if.else:                                          ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 3
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  store i32 %3, i32* %func, align 4, !tbaa !73
  %active_threads2 = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 4
  %4 = load i32, i32* %active_threads2, align 4, !tbaa !380
  store i32 %4, i32* %active_threads, align 4, !tbaa !73
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call = call i64 @halide_current_time_ns(i8* null) #16
  %5 = load i32, i32* %func, align 4, !tbaa !73
  %cmp = icmp eq i32 %5, -2
  br i1 %cmp, label %cleanup, label %if.else4

if.else4:                                         ; preds = %if.end
  %cmp5 = icmp sgt i32 %5, -1
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.else4
  %6 = load i64, i64* %prev_t, align 8, !tbaa !110
  %sub = sub i64 %call, %6
  %7 = load i32, i32* %active_threads, align 4, !tbaa !73
  call void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* nonnull %s, i32 %5, i64 %sub, i32 %7) #17
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.else4
  store i64 %call, i64* %prev_t, align 8, !tbaa !110
  %sleep_time = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 1
  %8 = load i32, i32* %sleep_time, align 8, !tbaa !381
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.end
  %retval.0 = phi i32 [ %8, %if.end8 ], [ -1, %if.end ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv(i8* %0) #4 {
entry:
  %t = alloca i64, align 8
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock) #16
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  %1 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not23 = icmp eq i32 %1, -2
  br i1 %cmp.not23, label %while.end8, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %2 = bitcast i64* %t to i8*
  br label %while.body

while.body:                                       ; preds = %while.end, %while.body.lr.ph
  %call1 = call i64 @halide_current_time_ns(i8* null) #16
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #11
  store i64 %call1, i64* %t, align 8, !tbaa !110
  %call420 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* nonnull %call, i64* nonnull %t) #17
  %cmp521 = icmp slt i32 %call420, 0
  br i1 %cmp521, label %while.end, label %if.end

if.end:                                           ; preds = %while.body, %if.end
  %call422 = phi i32 [ %call4, %if.end ], [ %call420, %while.body ]
  call void @halide_mutex_unlock(%struct.halide_mutex* %lock) #16
  call void @halide_sleep_ms(i8* null, i32 %call422) #16
  call void @halide_mutex_lock(%struct.halide_mutex* %lock) #16
  %call4 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* %call, i64* nonnull %t) #17
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %while.end, label %if.end

while.end:                                        ; preds = %if.end, %while.body
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #11
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not = icmp eq i32 %3, -2
  br i1 %cmp.not, label %while.end8, label %while.body, !llvm.loop !382

while.end8:                                       ; preds = %while.end, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock) #16
  ret void
}

; Function Attrs: nounwind
define weak %struct.halide_profiler_pipeline_stats* @halide_profiler_get_pipeline_state(i8* %pipeline_name) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.013 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not14 = icmp eq %struct.halide_profiler_pipeline_stats* %p.013, null
  br i1 %tobool.not14, label %cleanup, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.015 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.013, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 8
  %1 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %1, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup, label %for.body, !llvm.loop !383

cleanup:                                          ; preds = %for.inc, %for.body, %entry
  %p.0.lcssa = phi %struct.halide_profiler_pipeline_stats* [ null, %entry ], [ null, %for.inc ], [ %p.015, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret %struct.halide_profiler_pipeline_stats* %p.0.lcssa
}

; Function Attrs: nounwind
define weak i32 @halide_profiler_pipeline_start(i8* %user_context, i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @halide_start_clock(i8* %user_context) #16
  %call2 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv, i8* null) #16
  store %struct.halide_thread* %call2, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call4 = tail call %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) #17
  %tobool5.not = icmp eq %struct.halide_profiler_pipeline_stats* %call4, null
  br i1 %tobool5.not, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32 @halide_error_out_of_memory(i8* %user_context) #16
  br label %cleanup

if.end8:                                          ; preds = %if.end
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %runs, align 8, !tbaa !343
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 10
  %2 = load i32, i32* %first_func_id, align 4, !tbaa !376
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then6
  %retval.0 = phi i32 [ %2, %if.end8 ], [ %call7, %if.then6 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock.i) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_stack_peak_update(i8* %user_context, i8* %pipeline_state, i64* %f_values) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp.not, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.186, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp118 = icmp sgt i32 %1, 0
  br i1 %cmp118, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %do.end
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %do.end
  ret void

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %3 = phi i32 [ %1, %for.body.lr.ph ], [ %9, %for.inc ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i64, i64* %f_values, i64 %indvars.iv
  %4 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp2.not = icmp eq i64 %4, 0
  br i1 %cmp2.not, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %5 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %5, i64 %indvars.iv, i32 4
  %6 = load i64, i64* %stack_peak, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then3
  %old_val.0.i = phi i64 [ %6, %if.then3 ], [ %8, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %4
  br i1 %cmp.i, label %while.body.i, label %for.inc.loopexit

while.body.i:                                     ; preds = %while.cond.i
  %7 = cmpxchg i64* %stack_peak, i64 %old_val.0.i, i64 %4 seq_cst seq_cst
  %8 = extractvalue { i64, i1 } %7, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %8
  br i1 %cmp1.i, label %for.inc.loopexit, label %while.cond.i, !llvm.loop !384

for.inc.loopexit:                                 ; preds = %while.body.i, %while.cond.i
  %.pre = load i32, i32* %0, align 8, !tbaa !351
  br label %for.inc

for.inc:                                          ; preds = %for.inc.loopexit, %for.body
  %9 = phi i32 [ %.pre, %for.inc.loopexit ], [ %3, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = sext i32 %9 to i64
  %cmp1 = icmp slt i64 %indvars.iv.next, %10
  br i1 %cmp1, label %for.body, label %for.cond.cleanup, !llvm.loop !385
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_allocate(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %incr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %incr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.1.187, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.2.188, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.3.189, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %num_allocs = getelementptr inbounds i8, i8* %pipeline_state, i64 88
  %4 = bitcast i8* %num_allocs to i32*
  %5 = atomicrmw add i32* %4, i32 1 seq_cst
  %memory_total = getelementptr inbounds i8, i8* %pipeline_state, i64 24
  %6 = bitcast i8* %memory_total to i64*
  %7 = atomicrmw add i64* %6, i64 %incr seq_cst
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %8 = bitcast i8* %memory_current to i64*
  %9 = atomicrmw add i64* %8, i64 %incr seq_cst
  %10 = add i64 %9, %incr
  %memory_peak = getelementptr inbounds i8, i8* %pipeline_state, i64 16
  %11 = bitcast i8* %memory_peak to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %do.end15
  %old_val.0.i = phi i64 [ %12, %do.end15 ], [ %14, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %10
  br i1 %cmp.i, label %while.body.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit

while.body.i:                                     ; preds = %while.cond.i
  %13 = cmpxchg i64* %11, i64 %old_val.0.i, i64 %10 seq_cst seq_cst
  %14 = extractvalue { i64, i1 } %13, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %14
  br i1 %cmp1.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit, label %while.cond.i, !llvm.loop !384

_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit: ; preds = %while.body.i, %while.cond.i
  %num_allocs16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 8
  %15 = atomicrmw add i32* %num_allocs16, i32 1 seq_cst
  %memory_total17 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 3
  %16 = atomicrmw add i64* %memory_total17, i64 %incr seq_cst
  %memory_current18 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %17 = atomicrmw add i64* %memory_current18, i64 %incr seq_cst
  %18 = add i64 %17, %incr
  %memory_peak19 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 2
  %19 = load i64, i64* %memory_peak19, align 8, !tbaa !110
  br label %while.cond.i43

while.cond.i43:                                   ; preds = %while.body.i45, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit
  %old_val.0.i41 = phi i64 [ %19, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit ], [ %21, %while.body.i45 ]
  %cmp.i42 = icmp ult i64 %old_val.0.i41, %18
  br i1 %cmp.i42, label %while.body.i45, label %return

while.body.i45:                                   ; preds = %while.cond.i43
  %20 = cmpxchg i64* %memory_peak19, i64 %old_val.0.i41, i64 %18 seq_cst seq_cst
  %21 = extractvalue { i64, i1 } %20, 0
  %cmp1.i44 = icmp eq i64 %old_val.0.i41, %21
  br i1 %cmp1.i44, label %return, label %while.cond.i43, !llvm.loop !384

return:                                           ; preds = %while.body.i45, %while.cond.i43, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_free(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %decr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %decr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.190, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.5.191, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.6.192, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %4 = bitcast i8* %memory_current to i64*
  %5 = atomicrmw sub i64* %4, i64 %decr seq_cst
  %memory_current16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %6 = atomicrmw sub i64* %memory_current16, i64 %decr seq_cst
  br label %return

return:                                           ; preds = %do.end15, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_report(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  tail call void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %call) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_reset() local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %call) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_profiler_pipeline_end(i8* %user_context, i8* %state) local_unnamed_addr #2 {
entry:
  %current_func = getelementptr inbounds i8, i8* %state, i64 16
  %0 = bitcast i8* %current_func to i32*
  store i32 -1, i32* %0, align 8, !tbaa !340
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #16
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #16
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i64 32) #16
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #16
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.197, i64 0, i64 0)) #16
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !110
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 0), align 8, !tbaa !110
  %and = and i64 %3, %2
  %cmp6.not = icmp eq i64 %and, 0
  br i1 %cmp6.not, label %for.inc.critedge, label %if.then7

if.then7:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 2), align 8, !tbaa !110
  %and10 = and i64 %4, %and
  %cmp11.not = icmp eq i64 %and10, %and
  br i1 %cmp11.not, label %for.inc.critedge, label %cleanup15

for.inc.critedge:                                 ; preds = %if.then7, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i64 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !110
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 1), align 8, !tbaa !110
  %and.1 = and i64 %6, %5
  %cmp6.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp6.not.1, label %for.inc.critedge.1, label %if.then7.1

cleanup15:                                        ; preds = %for.inc.critedge.1, %if.then7.1, %if.then7
  %cmp3.lcssa = phi i32 [ 0, %if.then7 ], [ 0, %if.then7.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then7.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 3), align 8, !tbaa !110
  %and10.1 = and i64 %7, %and.1
  %cmp11.not.1 = icmp eq i64 %and10.1, %and.1
  br i1 %cmp11.not.1, label %for.inc.critedge.1, label %cleanup15

for.inc.critedge.1:                               ; preds = %if.then7.1, %for.inc.critedge
  br label %cleanup15
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #16
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #8 {
entry:
  %info = alloca [4 x i32], align 4
  %info2 = alloca [4 x i32], align 4
  %info3 = alloca [4 x i32], align 4
  %arrayidx3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i64 0, i32 1, i64 0
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result to <4 x i64>*
  store <4 x i64> <i64 34084860461808, i64 0, i64 0, i64 0>, <4 x i64>* %0, align 8, !tbaa !110
  %1 = bitcast [4 x i32]* %info to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 0
  store i32 1, i32* %arraydecay, align 4, !tbaa !73
  %arrayidx1.i110 = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i110, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay) #11
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 2
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !73
  %and = lshr i32 %2, 15
  %3 = and i32 %and, 16
  %and2 = lshr i32 %2, 23
  %4 = and i32 %and2, 32
  %5 = or i32 %4, %3
  %and6 = lshr i32 %2, 20
  %6 = and i32 %and6, 512
  %7 = or i32 %5, %6
  %and14 = lshr i32 %2, 5
  %8 = and i32 %and14, 128
  %9 = or i32 %7, %8
  %10 = zext i32 %9 to i64
  %11 = and i32 %2, 805834752
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %entry
  store i64 %10, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %14

14:                                               ; preds = %13, %entry
  %15 = and i32 %2, 1879048192
  %.not = icmp eq i32 %15, 1879048192
  br i1 %.not, label %if.then30, label %if.end67

if.then30:                                        ; preds = %14
  %16 = bitcast [4 x i32]* %info2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #11
  %arraydecay31 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 0
  store i32 7, i32* %arraydecay31, align 4, !tbaa !73
  %arrayidx1.i99 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i99, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay31) #11
  %17 = load i32, i32* %arrayidx1.i99, align 4, !tbaa !73
  %and33 = and i32 %17, 32
  %cmp34.not = icmp eq i32 %and33, 0
  br i1 %cmp34.not, label %if.end36, label %if.then35

if.then35:                                        ; preds = %if.then30
  %or.i98 = or i64 %10, 64
  store i64 %or.i98, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %if.then30
  %18 = phi i64 [ %or.i98, %if.then35 ], [ %10, %if.then30 ]
  %and38 = and i32 %17, 268500992
  %cmp39 = icmp eq i32 %and38, 268500992
  br i1 %cmp39, label %if.then40, label %if.end66

if.then40:                                        ; preds = %if.end36
  %and42 = and i32 %17, 469827584
  %cmp43 = icmp eq i32 %and42, 469827584
  %spec.select.v = select i1 %cmp43, i64 3298534883328, i64 1099511627776
  %spec.select = or i64 %18, %spec.select.v
  %and47 = and i32 %17, -805109760
  %cmp48 = icmp eq i32 %and47, -805109760
  %or.i92 = or i64 %spec.select, 4398046511104
  %spec.select130 = select i1 %cmp48, i64 %or.i92, i64 %spec.select
  store i64 %spec.select130, i64* %arrayidx3.i, align 8, !tbaa !110
  %and52 = and i32 %17, -803012608
  %cmp53 = icmp eq i32 %and52, -803012608
  br i1 %cmp53, label %if.then54, label %if.end66

if.then54:                                        ; preds = %if.then40
  %or.i90 = or i64 %spec.select130, 8796093022208
  store i64 %or.i90, i64* %arrayidx3.i, align 8, !tbaa !110
  %19 = bitcast [4 x i32]* %info3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #11
  %arraydecay55 = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 0
  store i32 7, i32* %arraydecay55, align 4, !tbaa !73
  %arrayidx1.i = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 1
  store i32 1, i32* %arrayidx1.i, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay55) #11
  %arrayidx56 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 2
  %20 = load i32, i32* %arrayidx56, align 4, !tbaa !73
  %and57 = and i32 %20, 2048
  %cmp58.not = icmp eq i32 %and57, 0
  br i1 %cmp58.not, label %if.end64, label %land.lhs.true59

land.lhs.true59:                                  ; preds = %if.then54
  %21 = load i32, i32* %arraydecay55, align 4, !tbaa !73
  %and61 = and i32 %21, 32
  %cmp62.not = icmp eq i32 %and61, 0
  br i1 %cmp62.not, label %if.end64, label %if.then63

if.then63:                                        ; preds = %land.lhs.true59
  %or.i = or i64 %spec.select130, 26388279066624
  store i64 %or.i, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %land.lhs.true59, %if.then54
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #11
  br label %if.end66

if.end66:                                         ; preds = %if.end64, %if.then40, %if.end36
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #11
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16>, <16 x i16>) #9

; Function Attrs: nounwind
define i32 @blur5x5(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, %struct.halide_buffer_t* noalias nocapture readonly %blur_y.buffer) local_unnamed_addr #10 {
entry:
  %blur_x.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep2377 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 0
  %.fca.1.gep2378 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep2379 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 2
  %read_input.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 0
  %0 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %0, i8 0, i64 24, i1 false)
  %.fca.1.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 2
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 2
  %1 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %1, i8 0, i64 24, i1 false)
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 6
  %2 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %min.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 0, i32 0
  %3 = load i32, i32* %min.i, align 4, !tbaa !181
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 0, i32 1
  %4 = load i32, i32* %extent.i, align 4, !tbaa !178
  %min.i2712 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 0
  %5 = load i32, i32* %min.i2712, align 4, !tbaa !181
  %extent.i2714 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 1
  %6 = load i32, i32* %extent.i2714, align 4, !tbaa !178
  %stride.i2716 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 2
  %7 = load i32, i32* %stride.i2716, align 4, !tbaa !182
  %host.i2717 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 2
  %dim.i2718 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 6
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2718, align 8, !tbaa !176
  %min.i2719 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 0, i32 0
  %9 = load i32, i32* %min.i2719, align 4, !tbaa !181
  %extent.i2721 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 0, i32 1
  %10 = load i32, i32* %extent.i2721, align 4, !tbaa !178
  %min.i2725 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 0
  %11 = load i32, i32* %min.i2725, align 4, !tbaa !181
  %extent.i2727 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 1
  %12 = load i32, i32* %extent.i2727, align 4, !tbaa !178
  %stride.i2729 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 2
  %13 = load i32, i32* %stride.i2729, align 4, !tbaa !182
  %b22 = add nsw i32 %4, %3
  %t1634 = add nsw i32 %10, %9
  %14 = icmp slt i32 %4, 32
  %t1635 = select i1 %14, i32 %4, i32 32
  %15 = icmp sgt i32 %12, 0
  %16 = select i1 %15, i32 %12, i32 0
  %a40 = add nsw i32 %16, %11
  %t1637 = mul nsw i32 %7, %5
  %17 = add nsw i32 %4, 31
  %a3 = ashr i32 %17, 5
  %18 = icmp sgt i32 %4, 32
  %b21 = select i1 %18, i32 %4, i32 32
  %19 = add nuw nsw i32 %b21, 35
  %20 = lshr i32 %19, 5
  %21 = icmp slt i32 %a3, 1
  %b23 = select i1 %21, i32 %a3, i32 1
  %22 = sub i32 63, %3
  %23 = sub i32 %22, %t1635
  %24 = add i32 %23, %9
  %a5 = ashr i32 %24, 5
  %25 = icmp sgt i32 %a5, 0
  %a4 = select i1 %25, i32 %a5, i32 0
  %26 = icmp sgt i32 %20, %a4
  %b18 = select i1 %26, i32 %a4, i32 %20
  %b8 = add nsw i32 %t1635, -32
  %27 = icmp slt i32 %4, 0
  %28 = select i1 %27, i32 %4, i32 0
  %a6 = select i1 %18, i32 %28, i32 %b8
  %29 = icmp sgt i32 %b8, %a6
  %t1645 = select i1 %29, i32 %a6, i32 %b8
  %b19 = add nuw nsw i32 %b21, 3
  %a14 = add nsw i32 %4, -32
  %30 = add nsw i32 %4, -1
  %31 = and i32 %30, -32
  %a8 = select i1 %18, i32 %31, i32 %a14
  %32 = icmp sgt i32 %a8, %a14
  %33 = select i1 %32, i32 %a8, i32 %a14
  %34 = icmp sgt i32 %4, 0
  %35 = select i1 %34, i32 %4, i32 0
  %a9 = select i1 %18, i32 %35, i32 32
  %36 = icmp sgt i32 %a9, 32
  %37 = select i1 %36, i32 %a9, i32 32
  %38 = add nsw i32 %37, -1
  %39 = and i32 %38, -32
  %b16 = add nsw i32 %39, %33
  %a13 = add nsw i32 %b16, 32
  %40 = icmp sgt i32 %4, %a13
  %a12 = select i1 %40, i32 %a13, i32 %4
  %41 = icmp sgt i32 %b16, %a14
  %42 = select i1 %41, i32 %a14, i32 %b16
  %b14 = add nsw i32 %42, 35
  %43 = icmp sgt i32 %a12, %b14
  %a11 = select i1 %43, i32 %a12, i32 %b14
  %a15 = add nsw i32 %4, 4
  %44 = and i32 %b19, 2147483616
  %b17 = add nsw i32 %44, %t1635
  %45 = icmp sgt i32 %b17, %a15
  %46 = select i1 %45, i32 %a15, i32 %b17
  %b13 = add nsw i32 %46, -1
  %.not = icmp slt i32 %a11, %46
  %47 = select i1 %.not, i32 %b13, i32 %a11
  %48 = sub nsw i32 %47, %t1645
  %a24 = add nsw i32 %48, 1
  %49 = sub nsw i32 %t1634, %t1635
  %a18 = sub i32 %49, %3
  %a20 = add nsw i32 %t1634, 27
  %50 = icmp sgt i32 %b22, %a20
  %51 = select i1 %50, i32 %a20, i32 %b22
  %52 = sub i32 32, %3
  %53 = sub i32 %52, %t1635
  %a19 = add i32 %53, %51
  %54 = icmp sgt i32 %b21, %a19
  %55 = select i1 %54, i32 %a19, i32 %b21
  %b20 = add nsw i32 %55, -28
  %56 = icmp sgt i32 %b20, %a18
  %a17 = select i1 %56, i32 %a18, i32 %b20
  %57 = icmp sgt i32 %b19, %a17
  %58 = select i1 %57, i32 %a17, i32 %b19
  %59 = ashr i32 %58, 5
  %a16 = add nsw i32 %59, 1
  %.not2535 = icmp slt i32 %59, %b18
  %t1624 = select i1 %.not2535, i32 %b18, i32 %a16
  %a21 = ashr i32 %4, 5
  %60 = icmp sgt i32 %a21, %b23
  %t1626 = select i1 %60, i32 %a21, i32 %b23
  %61 = add nsw i32 %6, 31
  %t1612 = ashr i32 %61, 5
  %62 = icmp sgt i32 %6, 0
  br i1 %62, label %"for blur_y.s0.y.y.preheader", label %"end for blur_y.s0.y.y", !prof !386

"for blur_y.s0.y.y.preheader":                    ; preds = %entry
  %63 = bitcast i8** %host.i2717 to i16**
  %64 = load i16*, i16** %63, align 8, !tbaa !172
  %65 = bitcast i8** %host.i to i16**
  %66 = load i16*, i16** %65, align 8, !tbaa !172
  %b24 = add nsw i32 %6, -32
  %.inv2623 = icmp slt i32 %48, 0
  %67 = select i1 %.inv2623, i32 0, i32 %a24
  %t2290 = zext i32 %67 to i64
  %68 = mul nuw nsw i64 %t2290, 72
  %69 = or i64 %68, 6
  %70 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8***
  %b30 = add nsw i32 %12, %11
  %71 = sub nsw i32 %11, %5
  %72 = sub i32 %5, %11
  %t1652 = add nsw i32 %t1645, %3
  %t1650 = add nsw i32 %t1635, %3
  %b36 = add nsw i32 %12, -1
  %b37 = add nsw i32 %b22, 4
  %73 = add nsw i32 %t1634, -1
  %74 = insertelement <32 x i32> undef, i32 %73, i32 0
  %75 = shufflevector <32 x i32> %74, <32 x i32> undef, <8 x i32> zeroinitializer
  %76 = insertelement <32 x i32> undef, i32 %9, i32 0
  %77 = shufflevector <32 x i32> %76, <32 x i32> undef, <8 x i32> zeroinitializer
  %t1661 = sub nsw i32 %20, %t1624
  %78 = icmp sgt i32 %b18, 0
  %79 = sext i32 %11 to i64
  %80 = sext i32 %5 to i64
  %81 = sub nsw i64 %79, %80
  %82 = sext i32 %a24 to i64
  %83 = sext i32 %t1652 to i64
  %t1667 = sub nsw i32 %t1624, %b18
  %84 = icmp sgt i32 %t1667, 0
  %85 = icmp sgt i32 %t1661, 0
  %86 = sub nsw i32 %5, %a40
  %87 = sext i32 %a40 to i64
  %88 = sub nsw i64 %87, %80
  %a73 = sub nsw i32 %4, %t1645
  %89 = icmp sgt i32 %a73, 0
  %90 = select i1 %89, i32 %a73, i32 0
  %t2291 = zext i32 %90 to i64
  %91 = shl nuw nsw i64 %t2291, 4
  %92 = or i64 %91, 6
  %93 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8***
  %t682 = sub i32 %t1635, %t1645
  %94 = sext i32 %t682 to i64
  %95 = zext i32 %4 to i64
  %96 = sext i32 %t1645 to i64
  %97 = sub nsw i64 %95, %96
  %98 = sext i32 %t1635 to i64
  %99 = sub nsw i64 %98, %96
  %t1680 = sub nsw i32 %t1626, %b23
  %100 = icmp sgt i32 %t1680, 0
  %101 = sext i32 %b23 to i64
  %t1683 = sub nsw i32 %a3, %t1626
  %102 = icmp sgt i32 %t1683, 0
  %t688 = add i32 %t682, %a24
  %103 = sext i32 %t688 to i64
  %t1687 = sub nsw i32 %a24, %t1645
  %104 = shl nsw i32 %a24, 1
  %t694 = add i32 %t682, %104
  %105 = sext i32 %t694 to i64
  %t1693 = sub nsw i32 %104, %t1645
  %106 = shl nsw i32 %a24, 2
  %a24.neg = xor i32 %48, -1
  %107 = add i32 %t682, %a24.neg
  %t700 = add i32 %107, %106
  %108 = sext i32 %t700 to i64
  %109 = sub nsw i32 %106, %t1645
  %t1699 = sub nsw i32 %109, %a24
  %110 = add nsw i32 %106, %t1635
  %t706 = sub i32 %110, %t1645
  %111 = sext i32 %t706 to i64
  %112 = sext i32 %a73 to i64
  %113 = sext i32 %7 to i64
  %114 = sext i32 %t1637 to i64
  %115 = sub nsw i64 %98, %114
  %t1709 = sub nsw i32 0, %t1637
  %116 = sext i32 %t1709 to i64
  %t722 = add nsw i32 %t706, %a24
  %117 = sext i32 %t722 to i64
  %t1721 = add nsw i32 %109, %a24
  %118 = mul nsw i32 %a24, 6
  %t738 = add i32 %t682, %118
  %119 = sext i32 %t738 to i64
  %t1737 = sub nsw i32 %118, %t1645
  %120 = mul nsw i32 %a24, 7
  %t754 = add i32 %t682, %120
  %121 = sext i32 %t754 to i64
  %t1753 = sub nsw i32 %120, %t1645
  %122 = shl nsw i32 %a24, 3
  %t770 = add i32 %t682, %122
  %123 = sext i32 %t770 to i64
  %t1769 = sub nsw i32 %122, %t1645
  %124 = mul nsw i32 %a24, 9
  %t786 = add i32 %t682, %124
  %125 = sext i32 %t786 to i64
  %t1785 = sub nsw i32 %124, %t1645
  %126 = mul nsw i32 %a24, 10
  %t802 = add i32 %t682, %126
  %127 = sext i32 %t802 to i64
  %t1801 = sub nsw i32 %126, %t1645
  %128 = mul nsw i32 %a24, 11
  %t818 = add i32 %t682, %128
  %129 = sext i32 %t818 to i64
  %t1817 = sub nsw i32 %128, %t1645
  %130 = mul nsw i32 %a24, 12
  %t834 = add i32 %t682, %130
  %131 = sext i32 %t834 to i64
  %t1833 = sub nsw i32 %130, %t1645
  %132 = mul nsw i32 %a24, 13
  %t850 = add i32 %t682, %132
  %133 = sext i32 %t850 to i64
  %t1849 = sub nsw i32 %132, %t1645
  %134 = mul nsw i32 %a24, 14
  %t866 = add i32 %t682, %134
  %135 = sext i32 %t866 to i64
  %t1865 = sub nsw i32 %134, %t1645
  %136 = mul nsw i32 %a24, 15
  %t882 = add i32 %t682, %136
  %137 = sext i32 %t882 to i64
  %t1881 = sub nsw i32 %136, %t1645
  %138 = shl nsw i32 %a24, 4
  %t898 = add i32 %t682, %138
  %139 = sext i32 %t898 to i64
  %t1897 = sub nsw i32 %138, %t1645
  %140 = mul nsw i32 %a24, 17
  %t914 = add i32 %t682, %140
  %141 = sext i32 %t914 to i64
  %t1913 = sub nsw i32 %140, %t1645
  %142 = mul nsw i32 %a24, 18
  %t930 = add i32 %t682, %142
  %143 = sext i32 %t930 to i64
  %t1929 = sub nsw i32 %142, %t1645
  %144 = mul nsw i32 %a24, 19
  %t946 = add i32 %t682, %144
  %145 = sext i32 %t946 to i64
  %t1945 = sub nsw i32 %144, %t1645
  %146 = mul nsw i32 %a24, 20
  %t962 = add i32 %t682, %146
  %147 = sext i32 %t962 to i64
  %t1961 = sub nsw i32 %146, %t1645
  %148 = mul nsw i32 %a24, 21
  %t978 = add i32 %t682, %148
  %149 = sext i32 %t978 to i64
  %t1977 = sub nsw i32 %148, %t1645
  %150 = mul nsw i32 %a24, 22
  %t994 = add i32 %t682, %150
  %151 = sext i32 %t994 to i64
  %t1993 = sub nsw i32 %150, %t1645
  %152 = mul nsw i32 %a24, 23
  %t1010 = add i32 %t682, %152
  %153 = sext i32 %t1010 to i64
  %t2009 = sub nsw i32 %152, %t1645
  %154 = mul nsw i32 %a24, 24
  %t1026 = add i32 %t682, %154
  %155 = sext i32 %t1026 to i64
  %t2025 = sub nsw i32 %154, %t1645
  %156 = mul nsw i32 %a24, 25
  %t1042 = add i32 %t682, %156
  %157 = sext i32 %t1042 to i64
  %t2041 = sub nsw i32 %156, %t1645
  %158 = mul nsw i32 %a24, 26
  %t1058 = add i32 %t682, %158
  %159 = sext i32 %t1058 to i64
  %t2057 = sub nsw i32 %158, %t1645
  %160 = mul nsw i32 %a24, 27
  %t1074 = add i32 %t682, %160
  %161 = sext i32 %t1074 to i64
  %t2073 = sub nsw i32 %160, %t1645
  %162 = mul nsw i32 %a24, 28
  %t1090 = add i32 %t682, %162
  %163 = sext i32 %t1090 to i64
  %t2089 = sub nsw i32 %162, %t1645
  %164 = mul nsw i32 %a24, 29
  %t1106 = add i32 %t682, %164
  %165 = sext i32 %t1106 to i64
  %t2105 = sub nsw i32 %164, %t1645
  %166 = mul nsw i32 %a24, 30
  %t1122 = add i32 %t682, %166
  %167 = sext i32 %t1122 to i64
  %t2121 = sub nsw i32 %166, %t1645
  %168 = mul nsw i32 %a24, 31
  %t1138 = add i32 %t682, %168
  %169 = sext i32 %t1138 to i64
  %t2137 = sub nsw i32 %168, %t1645
  %170 = shl nsw i32 %a24, 5
  %t1154 = add i32 %t682, %170
  %171 = sext i32 %t1154 to i64
  %t2153 = sub nsw i32 %170, %t1645
  %172 = mul nsw i32 %a24, 33
  %t1170 = add i32 %t682, %172
  %173 = sext i32 %t1170 to i64
  %t2169 = sub nsw i32 %172, %t1645
  %174 = mul nsw i32 %a24, 34
  %t1186 = add i32 %t682, %174
  %175 = sext i32 %t1186 to i64
  %t2185 = sub nsw i32 %174, %t1645
  %176 = mul nsw i32 %a24, 35
  %t1202 = add i32 %t682, %176
  %177 = sext i32 %t1202 to i64
  %t2201 = sub nsw i32 %176, %t1645
  %178 = sext i32 %b36 to i64
  %179 = zext i32 %b18 to i64
  %180 = sext i32 %t1650 to i64
  %181 = zext i32 %t1667 to i64
  %182 = sext i32 %13 to i64
  %183 = sext i32 %9 to i64
  %184 = zext i32 %t1680 to i64
  %185 = add nsw i64 %181, -1
  %xtraiter = and i64 %181, 3
  %186 = icmp ult i64 %185, 3
  %unroll_iter = and i64 %181, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %"for blur_y.s0.y.y"

"for blur_y.s0.y.y":                              ; preds = %"for blur_y.s0.y.y.preheader", %"end for blur_y.s0.x.x.rebased787"
  %blur_y.s0.y.y = phi i32 [ %14376, %"end for blur_y.s0.x.x.rebased787" ], [ 0, %"for blur_y.s0.y.y.preheader" ]
  %a22 = shl nsw i32 %blur_y.s0.y.y, 5
  %187 = icmp sgt i32 %b24, %a22
  %blur_y.s0.y.yi.base.s = select i1 %187, i32 %a22, i32 %b24
  %188 = load i64, i64* %.fca.1.gep, align 8, !tbaa !387
  %cmp.i = icmp ult i64 %188, %69
  %189 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !389
  br i1 %cmp.i, label %if.then.i, label %pseudostack_alloc.exit, !prof !390

if.then.i:                                        ; preds = %"for blur_y.s0.y.y"
  %tobool1.not.i = icmp ne i8* %189, null
  %190 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i = icmp ugt i64 %190, 16384
  %or.cond = and i1 %tobool1.not.i, %cmp2.i
  br i1 %or.cond, label %if.then3.i, label %if.end.i

if.then3.i:                                       ; preds = %if.then.i
  call void @halide_free(i8* null, i8* nonnull %189) #16
  %.pre = load i64, i64* %.fca.2.gep, align 8, !tbaa !391
  br label %if.end.i

if.end.i:                                         ; preds = %if.then3.i, %if.then.i
  %191 = phi i64 [ %.pre, %if.then3.i ], [ %190, %if.then.i ]
  %add.i = add i64 %191, %69
  store i64 %add.i, i64* %.fca.2.gep, align 8, !tbaa !391
  %cmp7.i = icmp ugt i64 %add.i, 16384
  br i1 %cmp7.i, label %if.then8.i, label %if.end11.i

if.then8.i:                                       ; preds = %if.end.i
  %call.i = call i8* @halide_malloc(i8* null, i64 %69) #16
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then8.i, %if.end.i
  %storemerge.i = phi i8* [ %call.i, %if.then8.i ], [ null, %if.end.i ]
  store i8* %storemerge.i, i8** %.fca.0.gep, align 8, !tbaa !389
  store i64 %69, i64* %.fca.1.gep, align 8, !tbaa !387
  br label %pseudostack_alloc.exit

pseudostack_alloc.exit:                           ; preds = %"for blur_y.s0.y.y", %if.end11.i
  %192 = phi i8* [ %storemerge.i, %if.end11.i ], [ %189, %"for blur_y.s0.y.y" ]
  %193 = bitcast i8* %192 to i16*
  %.not2624 = icmp eq i8* %192, null
  br i1 %.not2624, label %then_bb, label %"produce read_input", !prof !392

"end for blur_y.s0.y.y.loopexit":                 ; preds = %"end for blur_y.s0.x.x.rebased787"
  %194 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  %195 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  br label %"end for blur_y.s0.y.y"

"end for blur_y.s0.y.y":                          ; preds = %"end for blur_y.s0.y.y.loopexit", %entry
  %.02834 = phi i8* [ null, %entry ], [ %195, %"end for blur_y.s0.y.y.loopexit" ]
  %.0 = phi i8* [ null, %entry ], [ %194, %"end for blur_y.s0.y.y.loopexit" ]
  %196 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %min.i2732 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %196, i64 0, i32 0
  %197 = load i32, i32* %min.i2732, align 4, !tbaa !181
  %extent.i2734 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %196, i64 0, i32 1
  %198 = load i32, i32* %extent.i2734, align 4, !tbaa !178
  %min.i2738 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %196, i64 1, i32 0
  %199 = load i32, i32* %min.i2738, align 4, !tbaa !181
  %extent.i2740 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %196, i64 1, i32 1
  %200 = load i32, i32* %extent.i2740, align 4, !tbaa !178
  %stride.i2742 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %196, i64 1, i32 2
  %201 = load i32, i32* %stride.i2742, align 4, !tbaa !182
  %202 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2718, align 8, !tbaa !176
  %min.i2745 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %202, i64 0, i32 0
  %203 = load i32, i32* %min.i2745, align 4, !tbaa !181
  %extent.i2747 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %202, i64 0, i32 1
  %204 = load i32, i32* %extent.i2747, align 4, !tbaa !178
  %min.i2751 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %202, i64 1, i32 0
  %205 = load i32, i32* %min.i2751, align 4, !tbaa !181
  %extent.i2753 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %202, i64 1, i32 1
  %206 = load i32, i32* %extent.i2753, align 4, !tbaa !178
  %stride.i2755 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %202, i64 1, i32 2
  %207 = load i32, i32* %stride.i2755, align 4, !tbaa !182
  %b349 = add nsw i32 %198, %197
  %t1634807 = add nsw i32 %204, %203
  %208 = icmp slt i32 %198, 32
  %t1635808 = select i1 %208, i32 %198, i32 32
  %209 = icmp sgt i32 %206, 0
  %210 = select i1 %209, i32 %206, i32 0
  %a367 = add nsw i32 %210, %205
  %t1637809 = mul nsw i32 %201, %199
  %211 = add nsw i32 %198, 31
  %a330 = ashr i32 %211, 5
  %212 = icmp sgt i32 %198, 32
  %b348 = select i1 %212, i32 %198, i32 32
  %213 = add nuw nsw i32 %b348, 35
  %214 = lshr i32 %213, 5
  %215 = icmp slt i32 %a330, 1
  %b350 = select i1 %215, i32 %a330, i32 1
  %216 = sub i32 63, %197
  %217 = sub i32 %216, %t1635808
  %218 = add i32 %217, %203
  %a332 = ashr i32 %218, 5
  %219 = icmp sgt i32 %a332, 0
  %a331 = select i1 %219, i32 %a332, i32 0
  %220 = icmp sgt i32 %214, %a331
  %b345 = select i1 %220, i32 %a331, i32 %214
  %b335 = add nsw i32 %t1635808, -32
  %221 = icmp slt i32 %198, 0
  %222 = select i1 %221, i32 %198, i32 0
  %a333 = select i1 %212, i32 %222, i32 %b335
  %223 = icmp sgt i32 %b335, %a333
  %t1645811 = select i1 %223, i32 %a333, i32 %b335
  %b346 = add nuw nsw i32 %b348, 3
  %a341 = add nsw i32 %198, -32
  %224 = add nsw i32 %198, -1
  %225 = and i32 %224, -32
  %a335 = select i1 %212, i32 %225, i32 %a341
  %226 = icmp sgt i32 %a335, %a341
  %227 = select i1 %226, i32 %a335, i32 %a341
  %228 = icmp sgt i32 %198, 0
  %229 = select i1 %228, i32 %198, i32 0
  %a336 = select i1 %212, i32 %229, i32 32
  %230 = icmp sgt i32 %a336, 32
  %231 = select i1 %230, i32 %a336, i32 32
  %232 = add nsw i32 %231, -1
  %233 = and i32 %232, -32
  %b343 = add nsw i32 %233, %227
  %a340 = add nsw i32 %b343, 32
  %234 = icmp sgt i32 %198, %a340
  %a339 = select i1 %234, i32 %a340, i32 %198
  %235 = icmp sgt i32 %b343, %a341
  %236 = select i1 %235, i32 %a341, i32 %b343
  %b341 = add nsw i32 %236, 35
  %237 = icmp sgt i32 %a339, %b341
  %a338 = select i1 %237, i32 %a339, i32 %b341
  %a342 = add nsw i32 %198, 4
  %238 = and i32 %b346, 2147483616
  %b344 = add nsw i32 %238, %t1635808
  %239 = icmp sgt i32 %b344, %a342
  %240 = select i1 %239, i32 %a342, i32 %b344
  %b340 = add nsw i32 %240, -1
  %.not2536 = icmp slt i32 %a338, %240
  %241 = select i1 %.not2536, i32 %b340, i32 %a338
  %242 = sub nsw i32 %241, %t1645811
  %a351 = add nsw i32 %242, 1
  %243 = sub nsw i32 %t1634807, %t1635808
  %a345 = sub i32 %243, %197
  %a347 = add nsw i32 %t1634807, 27
  %244 = icmp sgt i32 %b349, %a347
  %245 = select i1 %244, i32 %a347, i32 %b349
  %246 = sub i32 32, %197
  %247 = sub i32 %246, %t1635808
  %a346 = add i32 %247, %245
  %248 = icmp sgt i32 %b348, %a346
  %249 = select i1 %248, i32 %a346, i32 %b348
  %b347 = add nsw i32 %249, -28
  %250 = icmp sgt i32 %b347, %a345
  %a344 = select i1 %250, i32 %a345, i32 %b347
  %251 = icmp sgt i32 %b346, %a344
  %252 = select i1 %251, i32 %a344, i32 %b346
  %253 = ashr i32 %252, 5
  %a343 = add nsw i32 %253, 1
  %.not2537 = icmp slt i32 %253, %b345
  %t1624813 = select i1 %.not2537, i32 %b345, i32 %a343
  %a348 = ashr i32 %198, 5
  %254 = icmp sgt i32 %a348, %b350
  %t1626814 = select i1 %254, i32 %a348, i32 %b350
  %255 = add nsw i32 %200, 31
  %t1612815 = ashr i32 %255, 5
  %256 = icmp sgt i32 %200, 0
  br i1 %256, label %"for blur_y.s0.y.y816.preheader", label %"end for blur_y.s0.y.y817", !prof !386

"for blur_y.s0.y.y816.preheader":                 ; preds = %"end for blur_y.s0.y.y"
  %257 = bitcast i8** %host.i2717 to i16**
  %258 = load i16*, i16** %257, align 8, !tbaa !172
  %259 = bitcast i8** %host.i to i16**
  %260 = load i16*, i16** %259, align 8, !tbaa !172
  %b351 = add nsw i32 %200, -32
  %.inv = icmp slt i32 %242, 0
  %261 = select i1 %.inv, i32 0, i32 %a351
  %t2292 = zext i32 %261 to i64
  %262 = mul nuw nsw i64 %t2292, 72
  %263 = or i64 %262, 6
  %264 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8***
  %b357 = add nsw i32 %206, %205
  %265 = sub nsw i32 %205, %199
  %266 = sub i32 %199, %205
  %t1652828 = add nsw i32 %t1645811, %197
  %t1650829 = add nsw i32 %t1635808, %197
  %b363 = add nsw i32 %206, -1
  %b364 = add nsw i32 %b349, 4
  %267 = add nsw i32 %t1634807, -1
  %268 = insertelement <32 x i32> undef, i32 %267, i32 0
  %269 = shufflevector <32 x i32> %268, <32 x i32> undef, <8 x i32> zeroinitializer
  %270 = insertelement <32 x i32> undef, i32 %203, i32 0
  %271 = shufflevector <32 x i32> %270, <32 x i32> undef, <8 x i32> zeroinitializer
  %t1661841 = sub nsw i32 %214, %t1624813
  %272 = icmp sgt i32 %b345, 0
  %273 = sext i32 %205 to i64
  %274 = sext i32 %199 to i64
  %275 = sub nsw i64 %273, %274
  %276 = sext i32 %a351 to i64
  %277 = sext i32 %t1652828 to i64
  %t1667854 = sub nsw i32 %t1624813, %b345
  %278 = icmp sgt i32 %t1667854, 0
  %279 = icmp sgt i32 %t1661841, 0
  %280 = sub nsw i32 %199, %a367
  %281 = sext i32 %a367 to i64
  %282 = sub nsw i64 %281, %274
  %a400 = sub nsw i32 %198, %t1645811
  %283 = icmp sgt i32 %a400, 0
  %284 = select i1 %283, i32 %a400, i32 0
  %t2293 = zext i32 %284 to i64
  %285 = shl nuw nsw i64 %t2293, 4
  %286 = or i64 %285, 6
  %287 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8***
  %t682885 = sub i32 %t1635808, %t1645811
  %288 = sext i32 %t682885 to i64
  %289 = zext i32 %198 to i64
  %290 = sext i32 %t1645811 to i64
  %291 = sub nsw i64 %289, %290
  %292 = sext i32 %t1635808 to i64
  %293 = sub nsw i64 %292, %290
  %t1680887 = sub nsw i32 %t1626814, %b350
  %294 = icmp sgt i32 %t1680887, 0
  %295 = sext i32 %b350 to i64
  %t1683899 = sub nsw i32 %a330, %t1626814
  %296 = icmp sgt i32 %t1683899, 0
  %t688915 = add i32 %t682885, %a351
  %297 = sext i32 %t688915 to i64
  %t1687918 = sub nsw i32 %a351, %t1645811
  %298 = shl nsw i32 %a351, 1
  %t694945 = add i32 %t682885, %298
  %299 = sext i32 %t694945 to i64
  %t1693947 = sub nsw i32 %298, %t1645811
  %300 = shl nsw i32 %a351, 2
  %a351.neg = xor i32 %242, -1
  %301 = add i32 %t682885, %a351.neg
  %t700975 = add i32 %301, %300
  %302 = sext i32 %t700975 to i64
  %303 = sub nsw i32 %300, %t1645811
  %t1699977 = sub nsw i32 %303, %a351
  %304 = add nsw i32 %300, %t1635808
  %t7061005 = sub i32 %304, %t1645811
  %305 = sext i32 %t7061005 to i64
  %306 = sext i32 %a400 to i64
  %307 = sext i32 %201 to i64
  %308 = sext i32 %t1637809 to i64
  %309 = sub nsw i64 %292, %308
  %t17091015 = sub nsw i32 0, %t1637809
  %310 = sext i32 %t17091015 to i64
  %t7221048 = add nsw i32 %t7061005, %a351
  %311 = sext i32 %t7221048 to i64
  %t17211058 = add nsw i32 %303, %a351
  %312 = mul nsw i32 %a351, 6
  %t7381091 = add i32 %t682885, %312
  %313 = sext i32 %t7381091 to i64
  %t17371099 = sub nsw i32 %312, %t1645811
  %314 = mul nsw i32 %a351, 7
  %t7541134 = add i32 %t682885, %314
  %315 = sext i32 %t7541134 to i64
  %t17531142 = sub nsw i32 %314, %t1645811
  %316 = shl nsw i32 %a351, 3
  %t7701177 = add i32 %t682885, %316
  %317 = sext i32 %t7701177 to i64
  %t17691185 = sub nsw i32 %316, %t1645811
  %318 = mul nsw i32 %a351, 9
  %t7861220 = add i32 %t682885, %318
  %319 = sext i32 %t7861220 to i64
  %t17851228 = sub nsw i32 %318, %t1645811
  %320 = mul nsw i32 %a351, 10
  %t8021263 = add i32 %t682885, %320
  %321 = sext i32 %t8021263 to i64
  %t18011271 = sub nsw i32 %320, %t1645811
  %322 = mul nsw i32 %a351, 11
  %t8181306 = add i32 %t682885, %322
  %323 = sext i32 %t8181306 to i64
  %t18171314 = sub nsw i32 %322, %t1645811
  %324 = mul nsw i32 %a351, 12
  %t8341349 = add i32 %t682885, %324
  %325 = sext i32 %t8341349 to i64
  %t18331357 = sub nsw i32 %324, %t1645811
  %326 = mul nsw i32 %a351, 13
  %t8501392 = add i32 %t682885, %326
  %327 = sext i32 %t8501392 to i64
  %t18491400 = sub nsw i32 %326, %t1645811
  %328 = mul nsw i32 %a351, 14
  %t8661435 = add i32 %t682885, %328
  %329 = sext i32 %t8661435 to i64
  %t18651443 = sub nsw i32 %328, %t1645811
  %330 = mul nsw i32 %a351, 15
  %t8821478 = add i32 %t682885, %330
  %331 = sext i32 %t8821478 to i64
  %t18811486 = sub nsw i32 %330, %t1645811
  %332 = shl nsw i32 %a351, 4
  %t8981521 = add i32 %t682885, %332
  %333 = sext i32 %t8981521 to i64
  %t18971529 = sub nsw i32 %332, %t1645811
  %334 = mul nsw i32 %a351, 17
  %t9141564 = add i32 %t682885, %334
  %335 = sext i32 %t9141564 to i64
  %t19131572 = sub nsw i32 %334, %t1645811
  %336 = mul nsw i32 %a351, 18
  %t9301607 = add i32 %t682885, %336
  %337 = sext i32 %t9301607 to i64
  %t19291615 = sub nsw i32 %336, %t1645811
  %338 = mul nsw i32 %a351, 19
  %t9461650 = add i32 %t682885, %338
  %339 = sext i32 %t9461650 to i64
  %t19451658 = sub nsw i32 %338, %t1645811
  %340 = mul nsw i32 %a351, 20
  %t9621693 = add i32 %t682885, %340
  %341 = sext i32 %t9621693 to i64
  %t19611701 = sub nsw i32 %340, %t1645811
  %342 = mul nsw i32 %a351, 21
  %t9781736 = add i32 %t682885, %342
  %343 = sext i32 %t9781736 to i64
  %t19771744 = sub nsw i32 %342, %t1645811
  %344 = mul nsw i32 %a351, 22
  %t9941779 = add i32 %t682885, %344
  %345 = sext i32 %t9941779 to i64
  %t19931787 = sub nsw i32 %344, %t1645811
  %346 = mul nsw i32 %a351, 23
  %t10101822 = add i32 %t682885, %346
  %347 = sext i32 %t10101822 to i64
  %t20091830 = sub nsw i32 %346, %t1645811
  %348 = mul nsw i32 %a351, 24
  %t10261865 = add i32 %t682885, %348
  %349 = sext i32 %t10261865 to i64
  %t20251873 = sub nsw i32 %348, %t1645811
  %350 = mul nsw i32 %a351, 25
  %t10421908 = add i32 %t682885, %350
  %351 = sext i32 %t10421908 to i64
  %t20411916 = sub nsw i32 %350, %t1645811
  %352 = mul nsw i32 %a351, 26
  %t10581951 = add i32 %t682885, %352
  %353 = sext i32 %t10581951 to i64
  %t20571959 = sub nsw i32 %352, %t1645811
  %354 = mul nsw i32 %a351, 27
  %t10741994 = add i32 %t682885, %354
  %355 = sext i32 %t10741994 to i64
  %t20732002 = sub nsw i32 %354, %t1645811
  %356 = mul nsw i32 %a351, 28
  %t10902037 = add i32 %t682885, %356
  %357 = sext i32 %t10902037 to i64
  %t20892045 = sub nsw i32 %356, %t1645811
  %358 = mul nsw i32 %a351, 29
  %t11062080 = add i32 %t682885, %358
  %359 = sext i32 %t11062080 to i64
  %t21052088 = sub nsw i32 %358, %t1645811
  %360 = mul nsw i32 %a351, 30
  %t11222123 = add i32 %t682885, %360
  %361 = sext i32 %t11222123 to i64
  %t21212131 = sub nsw i32 %360, %t1645811
  %362 = mul nsw i32 %a351, 31
  %t11382166 = add i32 %t682885, %362
  %363 = sext i32 %t11382166 to i64
  %t21372174 = sub nsw i32 %362, %t1645811
  %364 = shl nsw i32 %a351, 5
  %t11542209 = add i32 %t682885, %364
  %365 = sext i32 %t11542209 to i64
  %t21532217 = sub nsw i32 %364, %t1645811
  %366 = mul nsw i32 %a351, 33
  %t11702252 = add i32 %t682885, %366
  %367 = sext i32 %t11702252 to i64
  %t21692260 = sub nsw i32 %366, %t1645811
  %368 = mul nsw i32 %a351, 34
  %t11862295 = add i32 %t682885, %368
  %369 = sext i32 %t11862295 to i64
  %t21852303 = sub nsw i32 %368, %t1645811
  %370 = mul nsw i32 %a351, 35
  %t12022338 = add i32 %t682885, %370
  %371 = sext i32 %t12022338 to i64
  %t22012346 = sub nsw i32 %370, %t1645811
  %372 = sext i32 %b363 to i64
  %373 = zext i32 %b345 to i64
  %374 = sext i32 %t1650829 to i64
  %375 = zext i32 %t1667854 to i64
  %376 = sext i32 %207 to i64
  %377 = sext i32 %203 to i64
  %378 = zext i32 %t1680887 to i64
  %379 = add nsw i64 %375, -1
  %xtraiter3561 = and i64 %375, 3
  %380 = icmp ult i64 %379, 3
  %unroll_iter3564 = and i64 %375, 4294967292
  %lcmp.mod3563.not = icmp eq i64 %xtraiter3561, 0
  br label %"for blur_y.s0.y.y816"

then_bb:                                          ; preds = %pseudostack_alloc.exit
  %381 = alloca i8*, i64 %69, align 32
  %382 = bitcast i8** %381 to i16*
  store i8** %381, i8*** %70, align 8
  br label %"produce read_input"

"produce read_input":                             ; preds = %pseudostack_alloc.exit, %then_bb
  %read_input = phi i16* [ %382, %then_bb ], [ %193, %pseudostack_alloc.exit ]
  %a26 = add nsw i32 %blur_y.s0.y.yi.base.s, %5
  %383 = icmp sgt i32 %a26, %11
  %a25 = select i1 %383, i32 %a26, i32 %11
  %b27 = add nsw i32 %a26, 36
  %384 = icmp sgt i32 %b27, %a25
  %read_input.s0.y.prologue = select i1 %384, i32 %a25, i32 %b27
  %385 = icmp sgt i32 %a25, %b30
  %a27 = select i1 %385, i32 %a25, i32 %b30
  %386 = icmp sgt i32 %b27, %a27
  %read_input.s0.y.epilogue = select i1 %386, i32 %a27, i32 %b27
  %a31 = sub i32 %71, %blur_y.s0.y.yi.base.s
  %387 = icmp sgt i32 %a31, 0
  br i1 %387, label %"for read_input.s0.y.rebased.preheader", label %"end for read_input.s0.y.rebased", !prof !386

"for read_input.s0.y.rebased.preheader":          ; preds = %"produce read_input"
  %t1651 = add nsw i32 %72, %blur_y.s0.y.yi.base.s
  %388 = icmp slt i32 %a31, 36
  %a30 = select i1 %388, i32 %a31, i32 36
  %389 = sext i32 %t1651 to i64
  %390 = zext i32 %a30 to i64
  br label %"for read_input.s0.y.rebased"

"for read_input.s0.y.rebased":                    ; preds = %"for read_input.s0.y.rebased.preheader", %"end for read_input.s0.x.x"
  %indvars.iv = phi i64 [ 0, %"for read_input.s0.y.rebased.preheader" ], [ %indvars.iv.next, %"end for read_input.s0.x.x" ]
  %391 = add nsw i64 %indvars.iv, %389
  %392 = icmp slt i64 %391, %178
  %393 = trunc i64 %391 to i32
  %a33 = select i1 %392, i32 %393, i32 %b36
  %394 = mul nsw i64 %indvars.iv, %82
  %395 = sub nsw i64 %394, %83
  %396 = icmp sgt i32 %a33, 0
  %397 = select i1 %396, i32 %a33, i32 0
  %398 = mul nsw i32 %397, %13
  %t1653 = sub nsw i32 %398, %9
  %399 = insertelement <32 x i32> undef, i32 %t1653, i32 0
  %400 = shufflevector <32 x i32> %399, <32 x i32> undef, <32 x i32> zeroinitializer
  br label %"for read_input.s0.x.x"

"end for read_input.s0.y.rebased":                ; preds = %"end for read_input.s0.x.x", %"produce read_input"
  %401 = icmp sgt i32 %a40, %a26
  %a39 = select i1 %401, i32 %a40, i32 %a26
  %402 = icmp sgt i32 %b27, %a39
  %403 = select i1 %402, i32 %a39, i32 %b27
  %t1655 = sub nsw i32 %403, %read_input.s0.y.prologue
  %404 = icmp sgt i32 %t1655, 0
  br i1 %404, label %"for read_input.s0.y.rebased1.preheader", label %"end for read_input.s0.y.rebased2", !prof !386

"for read_input.s0.y.rebased1.preheader":         ; preds = %"end for read_input.s0.y.rebased"
  %t1658 = sub i32 %read_input.s0.y.prologue, %11
  %405 = sext i32 %blur_y.s0.y.yi.base.s to i64
  %a47 = sub nsw i64 %81, %405
  %406 = icmp slt i64 %a47, 36
  %a46 = select i1 %406, i64 %a47, i64 36
  %407 = icmp sgt i64 %a46, 0
  %408 = select i1 %407, i64 %a46, i64 0
  %409 = sext i32 %t1658 to i64
  %410 = zext i32 %t1655 to i64
  br label %"for read_input.s0.y.rebased1"

"for read_input.s0.x.x":                          ; preds = %"for read_input.s0.y.rebased", %"for read_input.s0.x.x"
  %read_input.s0.x.x = phi i32 [ %609, %"for read_input.s0.x.x" ], [ 0, %"for read_input.s0.y.rebased" ]
  %411 = shl nsw i32 %read_input.s0.x.x, 5
  %a35 = add nsw i32 %411, %t1650
  %412 = icmp sgt i32 %b37, %a35
  %read_input.s0.x.v2.base.s = select i1 %412, i32 %a35, i32 %b37
  %413 = add nsw i32 %read_input.s0.x.v2.base.s, -32
  %414 = insertelement <32 x i32> undef, i32 %413, i32 0
  %415 = shufflevector <32 x i32> %414, <32 x i32> undef, <32 x i32> zeroinitializer
  %a37 = add nsw <32 x i32> %415, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %416 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %417 = icmp sgt <8 x i32> %75, %416
  %418 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %419 = icmp sgt <8 x i32> %75, %418
  %420 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %421 = icmp sgt <8 x i32> %75, %420
  %422 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %423 = icmp sgt <8 x i32> %75, %422
  %424 = select <8 x i1> %417, <8 x i32> %416, <8 x i32> %75
  %425 = select <8 x i1> %419, <8 x i32> %418, <8 x i32> %75
  %426 = select <8 x i1> %421, <8 x i32> %420, <8 x i32> %75
  %427 = select <8 x i1> %423, <8 x i32> %422, <8 x i32> %75
  %428 = icmp sgt <8 x i32> %424, %77
  %429 = icmp sgt <8 x i32> %425, %77
  %430 = icmp sgt <8 x i32> %426, %77
  %431 = icmp sgt <8 x i32> %427, %77
  %432 = select <8 x i1> %428, <8 x i32> %424, <8 x i32> %77
  %433 = select <8 x i1> %429, <8 x i32> %425, <8 x i32> %77
  %434 = select <8 x i1> %430, <8 x i32> %426, <8 x i32> %77
  %435 = select <8 x i1> %431, <8 x i32> %427, <8 x i32> %77
  %436 = shufflevector <8 x i32> %432, <8 x i32> %433, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %437 = shufflevector <8 x i32> %434, <8 x i32> %435, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %438 = shufflevector <16 x i32> %436, <16 x i32> %437, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %439 = add nsw <32 x i32> %438, %400
  %440 = extractelement <32 x i32> %439, i32 0
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds i16, i16* %64, i64 %441
  %443 = load i16, i16* %442, align 2, !tbaa !393
  %444 = insertelement <32 x i16> undef, i16 %443, i32 0
  %445 = extractelement <32 x i32> %439, i32 1
  %446 = sext i32 %445 to i64
  %447 = getelementptr inbounds i16, i16* %64, i64 %446
  %448 = load i16, i16* %447, align 2, !tbaa !393
  %449 = insertelement <32 x i16> %444, i16 %448, i32 1
  %450 = extractelement <32 x i32> %439, i32 2
  %451 = sext i32 %450 to i64
  %452 = getelementptr inbounds i16, i16* %64, i64 %451
  %453 = load i16, i16* %452, align 2, !tbaa !393
  %454 = insertelement <32 x i16> %449, i16 %453, i32 2
  %455 = extractelement <32 x i32> %439, i32 3
  %456 = sext i32 %455 to i64
  %457 = getelementptr inbounds i16, i16* %64, i64 %456
  %458 = load i16, i16* %457, align 2, !tbaa !393
  %459 = insertelement <32 x i16> %454, i16 %458, i32 3
  %460 = extractelement <32 x i32> %439, i32 4
  %461 = sext i32 %460 to i64
  %462 = getelementptr inbounds i16, i16* %64, i64 %461
  %463 = load i16, i16* %462, align 2, !tbaa !393
  %464 = insertelement <32 x i16> %459, i16 %463, i32 4
  %465 = extractelement <32 x i32> %439, i32 5
  %466 = sext i32 %465 to i64
  %467 = getelementptr inbounds i16, i16* %64, i64 %466
  %468 = load i16, i16* %467, align 2, !tbaa !393
  %469 = insertelement <32 x i16> %464, i16 %468, i32 5
  %470 = extractelement <32 x i32> %439, i32 6
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds i16, i16* %64, i64 %471
  %473 = load i16, i16* %472, align 2, !tbaa !393
  %474 = insertelement <32 x i16> %469, i16 %473, i32 6
  %475 = extractelement <32 x i32> %439, i32 7
  %476 = sext i32 %475 to i64
  %477 = getelementptr inbounds i16, i16* %64, i64 %476
  %478 = load i16, i16* %477, align 2, !tbaa !393
  %479 = insertelement <32 x i16> %474, i16 %478, i32 7
  %480 = extractelement <32 x i32> %439, i32 8
  %481 = sext i32 %480 to i64
  %482 = getelementptr inbounds i16, i16* %64, i64 %481
  %483 = load i16, i16* %482, align 2, !tbaa !393
  %484 = insertelement <32 x i16> %479, i16 %483, i32 8
  %485 = extractelement <32 x i32> %439, i32 9
  %486 = sext i32 %485 to i64
  %487 = getelementptr inbounds i16, i16* %64, i64 %486
  %488 = load i16, i16* %487, align 2, !tbaa !393
  %489 = insertelement <32 x i16> %484, i16 %488, i32 9
  %490 = extractelement <32 x i32> %439, i32 10
  %491 = sext i32 %490 to i64
  %492 = getelementptr inbounds i16, i16* %64, i64 %491
  %493 = load i16, i16* %492, align 2, !tbaa !393
  %494 = insertelement <32 x i16> %489, i16 %493, i32 10
  %495 = extractelement <32 x i32> %439, i32 11
  %496 = sext i32 %495 to i64
  %497 = getelementptr inbounds i16, i16* %64, i64 %496
  %498 = load i16, i16* %497, align 2, !tbaa !393
  %499 = insertelement <32 x i16> %494, i16 %498, i32 11
  %500 = extractelement <32 x i32> %439, i32 12
  %501 = sext i32 %500 to i64
  %502 = getelementptr inbounds i16, i16* %64, i64 %501
  %503 = load i16, i16* %502, align 2, !tbaa !393
  %504 = insertelement <32 x i16> %499, i16 %503, i32 12
  %505 = extractelement <32 x i32> %439, i32 13
  %506 = sext i32 %505 to i64
  %507 = getelementptr inbounds i16, i16* %64, i64 %506
  %508 = load i16, i16* %507, align 2, !tbaa !393
  %509 = insertelement <32 x i16> %504, i16 %508, i32 13
  %510 = extractelement <32 x i32> %439, i32 14
  %511 = sext i32 %510 to i64
  %512 = getelementptr inbounds i16, i16* %64, i64 %511
  %513 = load i16, i16* %512, align 2, !tbaa !393
  %514 = insertelement <32 x i16> %509, i16 %513, i32 14
  %515 = extractelement <32 x i32> %439, i32 15
  %516 = sext i32 %515 to i64
  %517 = getelementptr inbounds i16, i16* %64, i64 %516
  %518 = load i16, i16* %517, align 2, !tbaa !393
  %519 = insertelement <32 x i16> %514, i16 %518, i32 15
  %520 = extractelement <32 x i32> %439, i32 16
  %521 = sext i32 %520 to i64
  %522 = getelementptr inbounds i16, i16* %64, i64 %521
  %523 = load i16, i16* %522, align 2, !tbaa !393
  %524 = insertelement <32 x i16> %519, i16 %523, i32 16
  %525 = extractelement <32 x i32> %439, i32 17
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds i16, i16* %64, i64 %526
  %528 = load i16, i16* %527, align 2, !tbaa !393
  %529 = insertelement <32 x i16> %524, i16 %528, i32 17
  %530 = extractelement <32 x i32> %439, i32 18
  %531 = sext i32 %530 to i64
  %532 = getelementptr inbounds i16, i16* %64, i64 %531
  %533 = load i16, i16* %532, align 2, !tbaa !393
  %534 = insertelement <32 x i16> %529, i16 %533, i32 18
  %535 = extractelement <32 x i32> %439, i32 19
  %536 = sext i32 %535 to i64
  %537 = getelementptr inbounds i16, i16* %64, i64 %536
  %538 = load i16, i16* %537, align 2, !tbaa !393
  %539 = insertelement <32 x i16> %534, i16 %538, i32 19
  %540 = extractelement <32 x i32> %439, i32 20
  %541 = sext i32 %540 to i64
  %542 = getelementptr inbounds i16, i16* %64, i64 %541
  %543 = load i16, i16* %542, align 2, !tbaa !393
  %544 = insertelement <32 x i16> %539, i16 %543, i32 20
  %545 = extractelement <32 x i32> %439, i32 21
  %546 = sext i32 %545 to i64
  %547 = getelementptr inbounds i16, i16* %64, i64 %546
  %548 = load i16, i16* %547, align 2, !tbaa !393
  %549 = insertelement <32 x i16> %544, i16 %548, i32 21
  %550 = extractelement <32 x i32> %439, i32 22
  %551 = sext i32 %550 to i64
  %552 = getelementptr inbounds i16, i16* %64, i64 %551
  %553 = load i16, i16* %552, align 2, !tbaa !393
  %554 = insertelement <32 x i16> %549, i16 %553, i32 22
  %555 = extractelement <32 x i32> %439, i32 23
  %556 = sext i32 %555 to i64
  %557 = getelementptr inbounds i16, i16* %64, i64 %556
  %558 = load i16, i16* %557, align 2, !tbaa !393
  %559 = insertelement <32 x i16> %554, i16 %558, i32 23
  %560 = extractelement <32 x i32> %439, i32 24
  %561 = sext i32 %560 to i64
  %562 = getelementptr inbounds i16, i16* %64, i64 %561
  %563 = load i16, i16* %562, align 2, !tbaa !393
  %564 = insertelement <32 x i16> %559, i16 %563, i32 24
  %565 = extractelement <32 x i32> %439, i32 25
  %566 = sext i32 %565 to i64
  %567 = getelementptr inbounds i16, i16* %64, i64 %566
  %568 = load i16, i16* %567, align 2, !tbaa !393
  %569 = insertelement <32 x i16> %564, i16 %568, i32 25
  %570 = extractelement <32 x i32> %439, i32 26
  %571 = sext i32 %570 to i64
  %572 = getelementptr inbounds i16, i16* %64, i64 %571
  %573 = load i16, i16* %572, align 2, !tbaa !393
  %574 = insertelement <32 x i16> %569, i16 %573, i32 26
  %575 = extractelement <32 x i32> %439, i32 27
  %576 = sext i32 %575 to i64
  %577 = getelementptr inbounds i16, i16* %64, i64 %576
  %578 = load i16, i16* %577, align 2, !tbaa !393
  %579 = insertelement <32 x i16> %574, i16 %578, i32 27
  %580 = extractelement <32 x i32> %439, i32 28
  %581 = sext i32 %580 to i64
  %582 = getelementptr inbounds i16, i16* %64, i64 %581
  %583 = load i16, i16* %582, align 2, !tbaa !393
  %584 = insertelement <32 x i16> %579, i16 %583, i32 28
  %585 = extractelement <32 x i32> %439, i32 29
  %586 = sext i32 %585 to i64
  %587 = getelementptr inbounds i16, i16* %64, i64 %586
  %588 = load i16, i16* %587, align 2, !tbaa !393
  %589 = insertelement <32 x i16> %584, i16 %588, i32 29
  %590 = extractelement <32 x i32> %439, i32 30
  %591 = sext i32 %590 to i64
  %592 = getelementptr inbounds i16, i16* %64, i64 %591
  %593 = load i16, i16* %592, align 2, !tbaa !393
  %594 = insertelement <32 x i16> %589, i16 %593, i32 30
  %595 = extractelement <32 x i32> %439, i32 31
  %596 = sext i32 %595 to i64
  %597 = getelementptr inbounds i16, i16* %64, i64 %596
  %598 = load i16, i16* %597, align 2, !tbaa !393
  %599 = insertelement <32 x i16> %594, i16 %598, i32 31
  %600 = shufflevector <32 x i16> %599, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %601 = sext i32 %read_input.s0.x.v2.base.s to i64
  %602 = add nsw i64 %395, %601
  %603 = getelementptr inbounds i16, i16* %read_input, i64 %602
  %604 = getelementptr inbounds i16, i16* %603, i64 -32
  %605 = bitcast i16* %604 to <16 x i16>*
  store <16 x i16> %600, <16 x i16>* %605, align 2, !tbaa !396
  %606 = shufflevector <32 x i16> %599, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %607 = getelementptr inbounds i16, i16* %603, i64 -16
  %608 = bitcast i16* %607 to <16 x i16>*
  store <16 x i16> %606, <16 x i16>* %608, align 2, !tbaa !396
  %609 = add nuw nsw i32 %read_input.s0.x.x, 1
  %.not2708 = icmp eq i32 %609, %20
  br i1 %.not2708, label %"end for read_input.s0.x.x", label %"for read_input.s0.x.x"

"end for read_input.s0.x.x":                      ; preds = %"for read_input.s0.x.x"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %.not2707 = icmp eq i64 %indvars.iv.next, %390
  br i1 %.not2707, label %"end for read_input.s0.y.rebased", label %"for read_input.s0.y.rebased"

"for read_input.s0.y.rebased1":                   ; preds = %"for read_input.s0.y.rebased1.preheader", %"end for read_input.s0.x.x.rebased10"
  %indvars.iv3138 = phi i64 [ 0, %"for read_input.s0.y.rebased1.preheader" ], [ %indvars.iv.next3139, %"end for read_input.s0.x.x.rebased10" ]
  %610 = add nsw i64 %indvars.iv3138, %409
  %611 = mul nsw i64 %610, %182
  %612 = sub nsw i64 %611, %183
  br i1 %78, label %"for read_input.s0.x.x4.preheader", label %"end for read_input.s0.x.x5", !prof !386

"for read_input.s0.x.x4.preheader":               ; preds = %"for read_input.s0.y.rebased1"
  %613 = trunc i64 %612 to i32
  %614 = insertelement <32 x i32> undef, i32 %613, i32 0
  %615 = shufflevector <32 x i32> %614, <32 x i32> undef, <32 x i32> zeroinitializer
  %616 = add nuw nsw i64 %408, %indvars.iv3138
  %617 = mul nsw i64 %616, %82
  %618 = sub i64 %617, %83
  br label %"for read_input.s0.x.x4"

"end for read_input.s0.y.rebased2":               ; preds = %"end for read_input.s0.x.x.rebased10", %"end for read_input.s0.y.rebased"
  %a63 = add nsw i32 %blur_y.s0.y.yi.base.s, %86
  %619 = icmp slt i32 %a63, 0
  %a62 = select i1 %619, i32 %a63, i32 0
  %620 = icmp sgt i32 %a62, -36
  %t1675 = sub nsw i32 %read_input.s0.y.epilogue, %11
  br i1 %620, label %"for read_input.s0.y.rebased13.preheader", label %"end for read_input.s0.y.rebased14", !prof !386

"for read_input.s0.y.rebased13.preheader":        ; preds = %"end for read_input.s0.y.rebased2"
  %621 = sext i32 %blur_y.s0.y.yi.base.s to i64
  %a70 = sub nsw i64 %88, %621
  %622 = icmp slt i64 %a70, 36
  %a69 = select i1 %622, i64 %a70, i64 36
  %623 = icmp sgt i64 %a69, 0
  %624 = select i1 %623, i64 %a69, i64 0
  %a62.op = add nsw i32 %a62, 35
  %625 = zext i32 %a62.op to i64
  br label %"for read_input.s0.y.rebased13"

"for read_input.s0.x.x4":                         ; preds = %"for read_input.s0.x.x4.preheader", %"for read_input.s0.x.x4"
  %read_input.s0.x.x6 = phi i32 [ %824, %"for read_input.s0.x.x4" ], [ 0, %"for read_input.s0.x.x4.preheader" ]
  %626 = shl nsw i32 %read_input.s0.x.x6, 5
  %a43 = add nsw i32 %626, %t1650
  %627 = icmp sgt i32 %b37, %a43
  %read_input.s0.x.v2.base.s7 = select i1 %627, i32 %a43, i32 %b37
  %628 = add nsw i32 %read_input.s0.x.v2.base.s7, -32
  %629 = insertelement <32 x i32> undef, i32 %628, i32 0
  %630 = shufflevector <32 x i32> %629, <32 x i32> undef, <32 x i32> zeroinitializer
  %a45 = add nsw <32 x i32> %630, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %631 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %632 = icmp sgt <8 x i32> %75, %631
  %633 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %634 = icmp sgt <8 x i32> %75, %633
  %635 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %636 = icmp sgt <8 x i32> %75, %635
  %637 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %638 = icmp sgt <8 x i32> %75, %637
  %639 = select <8 x i1> %632, <8 x i32> %631, <8 x i32> %75
  %640 = select <8 x i1> %634, <8 x i32> %633, <8 x i32> %75
  %641 = select <8 x i1> %636, <8 x i32> %635, <8 x i32> %75
  %642 = select <8 x i1> %638, <8 x i32> %637, <8 x i32> %75
  %643 = icmp sgt <8 x i32> %639, %77
  %644 = icmp sgt <8 x i32> %640, %77
  %645 = icmp sgt <8 x i32> %641, %77
  %646 = icmp sgt <8 x i32> %642, %77
  %647 = select <8 x i1> %643, <8 x i32> %639, <8 x i32> %77
  %648 = select <8 x i1> %644, <8 x i32> %640, <8 x i32> %77
  %649 = select <8 x i1> %645, <8 x i32> %641, <8 x i32> %77
  %650 = select <8 x i1> %646, <8 x i32> %642, <8 x i32> %77
  %651 = shufflevector <8 x i32> %647, <8 x i32> %648, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %652 = shufflevector <8 x i32> %649, <8 x i32> %650, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %653 = shufflevector <16 x i32> %651, <16 x i32> %652, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %654 = add nsw <32 x i32> %653, %615
  %655 = extractelement <32 x i32> %654, i32 0
  %656 = sext i32 %655 to i64
  %657 = getelementptr inbounds i16, i16* %64, i64 %656
  %658 = load i16, i16* %657, align 2, !tbaa !393
  %659 = insertelement <32 x i16> undef, i16 %658, i32 0
  %660 = extractelement <32 x i32> %654, i32 1
  %661 = sext i32 %660 to i64
  %662 = getelementptr inbounds i16, i16* %64, i64 %661
  %663 = load i16, i16* %662, align 2, !tbaa !393
  %664 = insertelement <32 x i16> %659, i16 %663, i32 1
  %665 = extractelement <32 x i32> %654, i32 2
  %666 = sext i32 %665 to i64
  %667 = getelementptr inbounds i16, i16* %64, i64 %666
  %668 = load i16, i16* %667, align 2, !tbaa !393
  %669 = insertelement <32 x i16> %664, i16 %668, i32 2
  %670 = extractelement <32 x i32> %654, i32 3
  %671 = sext i32 %670 to i64
  %672 = getelementptr inbounds i16, i16* %64, i64 %671
  %673 = load i16, i16* %672, align 2, !tbaa !393
  %674 = insertelement <32 x i16> %669, i16 %673, i32 3
  %675 = extractelement <32 x i32> %654, i32 4
  %676 = sext i32 %675 to i64
  %677 = getelementptr inbounds i16, i16* %64, i64 %676
  %678 = load i16, i16* %677, align 2, !tbaa !393
  %679 = insertelement <32 x i16> %674, i16 %678, i32 4
  %680 = extractelement <32 x i32> %654, i32 5
  %681 = sext i32 %680 to i64
  %682 = getelementptr inbounds i16, i16* %64, i64 %681
  %683 = load i16, i16* %682, align 2, !tbaa !393
  %684 = insertelement <32 x i16> %679, i16 %683, i32 5
  %685 = extractelement <32 x i32> %654, i32 6
  %686 = sext i32 %685 to i64
  %687 = getelementptr inbounds i16, i16* %64, i64 %686
  %688 = load i16, i16* %687, align 2, !tbaa !393
  %689 = insertelement <32 x i16> %684, i16 %688, i32 6
  %690 = extractelement <32 x i32> %654, i32 7
  %691 = sext i32 %690 to i64
  %692 = getelementptr inbounds i16, i16* %64, i64 %691
  %693 = load i16, i16* %692, align 2, !tbaa !393
  %694 = insertelement <32 x i16> %689, i16 %693, i32 7
  %695 = extractelement <32 x i32> %654, i32 8
  %696 = sext i32 %695 to i64
  %697 = getelementptr inbounds i16, i16* %64, i64 %696
  %698 = load i16, i16* %697, align 2, !tbaa !393
  %699 = insertelement <32 x i16> %694, i16 %698, i32 8
  %700 = extractelement <32 x i32> %654, i32 9
  %701 = sext i32 %700 to i64
  %702 = getelementptr inbounds i16, i16* %64, i64 %701
  %703 = load i16, i16* %702, align 2, !tbaa !393
  %704 = insertelement <32 x i16> %699, i16 %703, i32 9
  %705 = extractelement <32 x i32> %654, i32 10
  %706 = sext i32 %705 to i64
  %707 = getelementptr inbounds i16, i16* %64, i64 %706
  %708 = load i16, i16* %707, align 2, !tbaa !393
  %709 = insertelement <32 x i16> %704, i16 %708, i32 10
  %710 = extractelement <32 x i32> %654, i32 11
  %711 = sext i32 %710 to i64
  %712 = getelementptr inbounds i16, i16* %64, i64 %711
  %713 = load i16, i16* %712, align 2, !tbaa !393
  %714 = insertelement <32 x i16> %709, i16 %713, i32 11
  %715 = extractelement <32 x i32> %654, i32 12
  %716 = sext i32 %715 to i64
  %717 = getelementptr inbounds i16, i16* %64, i64 %716
  %718 = load i16, i16* %717, align 2, !tbaa !393
  %719 = insertelement <32 x i16> %714, i16 %718, i32 12
  %720 = extractelement <32 x i32> %654, i32 13
  %721 = sext i32 %720 to i64
  %722 = getelementptr inbounds i16, i16* %64, i64 %721
  %723 = load i16, i16* %722, align 2, !tbaa !393
  %724 = insertelement <32 x i16> %719, i16 %723, i32 13
  %725 = extractelement <32 x i32> %654, i32 14
  %726 = sext i32 %725 to i64
  %727 = getelementptr inbounds i16, i16* %64, i64 %726
  %728 = load i16, i16* %727, align 2, !tbaa !393
  %729 = insertelement <32 x i16> %724, i16 %728, i32 14
  %730 = extractelement <32 x i32> %654, i32 15
  %731 = sext i32 %730 to i64
  %732 = getelementptr inbounds i16, i16* %64, i64 %731
  %733 = load i16, i16* %732, align 2, !tbaa !393
  %734 = insertelement <32 x i16> %729, i16 %733, i32 15
  %735 = extractelement <32 x i32> %654, i32 16
  %736 = sext i32 %735 to i64
  %737 = getelementptr inbounds i16, i16* %64, i64 %736
  %738 = load i16, i16* %737, align 2, !tbaa !393
  %739 = insertelement <32 x i16> %734, i16 %738, i32 16
  %740 = extractelement <32 x i32> %654, i32 17
  %741 = sext i32 %740 to i64
  %742 = getelementptr inbounds i16, i16* %64, i64 %741
  %743 = load i16, i16* %742, align 2, !tbaa !393
  %744 = insertelement <32 x i16> %739, i16 %743, i32 17
  %745 = extractelement <32 x i32> %654, i32 18
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds i16, i16* %64, i64 %746
  %748 = load i16, i16* %747, align 2, !tbaa !393
  %749 = insertelement <32 x i16> %744, i16 %748, i32 18
  %750 = extractelement <32 x i32> %654, i32 19
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds i16, i16* %64, i64 %751
  %753 = load i16, i16* %752, align 2, !tbaa !393
  %754 = insertelement <32 x i16> %749, i16 %753, i32 19
  %755 = extractelement <32 x i32> %654, i32 20
  %756 = sext i32 %755 to i64
  %757 = getelementptr inbounds i16, i16* %64, i64 %756
  %758 = load i16, i16* %757, align 2, !tbaa !393
  %759 = insertelement <32 x i16> %754, i16 %758, i32 20
  %760 = extractelement <32 x i32> %654, i32 21
  %761 = sext i32 %760 to i64
  %762 = getelementptr inbounds i16, i16* %64, i64 %761
  %763 = load i16, i16* %762, align 2, !tbaa !393
  %764 = insertelement <32 x i16> %759, i16 %763, i32 21
  %765 = extractelement <32 x i32> %654, i32 22
  %766 = sext i32 %765 to i64
  %767 = getelementptr inbounds i16, i16* %64, i64 %766
  %768 = load i16, i16* %767, align 2, !tbaa !393
  %769 = insertelement <32 x i16> %764, i16 %768, i32 22
  %770 = extractelement <32 x i32> %654, i32 23
  %771 = sext i32 %770 to i64
  %772 = getelementptr inbounds i16, i16* %64, i64 %771
  %773 = load i16, i16* %772, align 2, !tbaa !393
  %774 = insertelement <32 x i16> %769, i16 %773, i32 23
  %775 = extractelement <32 x i32> %654, i32 24
  %776 = sext i32 %775 to i64
  %777 = getelementptr inbounds i16, i16* %64, i64 %776
  %778 = load i16, i16* %777, align 2, !tbaa !393
  %779 = insertelement <32 x i16> %774, i16 %778, i32 24
  %780 = extractelement <32 x i32> %654, i32 25
  %781 = sext i32 %780 to i64
  %782 = getelementptr inbounds i16, i16* %64, i64 %781
  %783 = load i16, i16* %782, align 2, !tbaa !393
  %784 = insertelement <32 x i16> %779, i16 %783, i32 25
  %785 = extractelement <32 x i32> %654, i32 26
  %786 = sext i32 %785 to i64
  %787 = getelementptr inbounds i16, i16* %64, i64 %786
  %788 = load i16, i16* %787, align 2, !tbaa !393
  %789 = insertelement <32 x i16> %784, i16 %788, i32 26
  %790 = extractelement <32 x i32> %654, i32 27
  %791 = sext i32 %790 to i64
  %792 = getelementptr inbounds i16, i16* %64, i64 %791
  %793 = load i16, i16* %792, align 2, !tbaa !393
  %794 = insertelement <32 x i16> %789, i16 %793, i32 27
  %795 = extractelement <32 x i32> %654, i32 28
  %796 = sext i32 %795 to i64
  %797 = getelementptr inbounds i16, i16* %64, i64 %796
  %798 = load i16, i16* %797, align 2, !tbaa !393
  %799 = insertelement <32 x i16> %794, i16 %798, i32 28
  %800 = extractelement <32 x i32> %654, i32 29
  %801 = sext i32 %800 to i64
  %802 = getelementptr inbounds i16, i16* %64, i64 %801
  %803 = load i16, i16* %802, align 2, !tbaa !393
  %804 = insertelement <32 x i16> %799, i16 %803, i32 29
  %805 = extractelement <32 x i32> %654, i32 30
  %806 = sext i32 %805 to i64
  %807 = getelementptr inbounds i16, i16* %64, i64 %806
  %808 = load i16, i16* %807, align 2, !tbaa !393
  %809 = insertelement <32 x i16> %804, i16 %808, i32 30
  %810 = extractelement <32 x i32> %654, i32 31
  %811 = sext i32 %810 to i64
  %812 = getelementptr inbounds i16, i16* %64, i64 %811
  %813 = load i16, i16* %812, align 2, !tbaa !393
  %814 = insertelement <32 x i16> %809, i16 %813, i32 31
  %815 = shufflevector <32 x i16> %814, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %816 = sext i32 %read_input.s0.x.v2.base.s7 to i64
  %817 = add nsw i64 %618, %816
  %818 = getelementptr inbounds i16, i16* %read_input, i64 %817
  %819 = getelementptr inbounds i16, i16* %818, i64 -32
  %820 = bitcast i16* %819 to <16 x i16>*
  store <16 x i16> %815, <16 x i16>* %820, align 2, !tbaa !396
  %821 = shufflevector <32 x i16> %814, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %822 = getelementptr inbounds i16, i16* %818, i64 -16
  %823 = bitcast i16* %822 to <16 x i16>*
  store <16 x i16> %821, <16 x i16>* %823, align 2, !tbaa !396
  %824 = add nuw nsw i32 %read_input.s0.x.x6, 1
  %.not2705 = icmp eq i32 %824, %b18
  br i1 %.not2705, label %"end for read_input.s0.x.x5", label %"for read_input.s0.x.x4"

"end for read_input.s0.x.x5":                     ; preds = %"for read_input.s0.x.x4", %"for read_input.s0.y.rebased1"
  br i1 %84, label %"for read_input.s0.x.x.rebased.preheader", label %"end for read_input.s0.x.x.rebased", !prof !386

"for read_input.s0.x.x.rebased.preheader":        ; preds = %"end for read_input.s0.x.x5"
  %825 = add nuw nsw i64 %408, %indvars.iv3138
  %826 = mul nsw i64 %825, %82
  %827 = sub i64 %826, %83
  br i1 %186, label %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased"

"for read_input.s0.x.x.rebased":                  ; preds = %"for read_input.s0.x.x.rebased.preheader", %"for read_input.s0.x.x.rebased"
  %indvars.iv3135 = phi i64 [ %indvars.iv.next3136.3, %"for read_input.s0.x.x.rebased" ], [ 0, %"for read_input.s0.x.x.rebased.preheader" ]
  %niter = phi i64 [ %niter.nsub.3, %"for read_input.s0.x.x.rebased" ], [ %unroll_iter, %"for read_input.s0.x.x.rebased.preheader" ]
  %828 = add nuw nsw i64 %indvars.iv3135, %179
  %829 = shl nsw i64 %828, 5
  %830 = add nsw i64 %829, %180
  %831 = add nsw i64 %830, %612
  %832 = getelementptr inbounds i16, i16* %64, i64 %831
  %833 = getelementptr inbounds i16, i16* %832, i64 -32
  %834 = bitcast i16* %833 to <16 x i16>*
  %835 = load <16 x i16>, <16 x i16>* %834, align 2, !tbaa !393
  %836 = getelementptr inbounds i16, i16* %832, i64 -16
  %837 = bitcast i16* %836 to <16 x i16>*
  %838 = load <16 x i16>, <16 x i16>* %837, align 2, !tbaa !393
  %839 = add nsw i64 %827, %830
  %840 = getelementptr inbounds i16, i16* %read_input, i64 %839
  %841 = getelementptr inbounds i16, i16* %840, i64 -32
  %842 = bitcast i16* %841 to <16 x i16>*
  store <16 x i16> %835, <16 x i16>* %842, align 2, !tbaa !396
  %843 = getelementptr inbounds i16, i16* %840, i64 -16
  %844 = bitcast i16* %843 to <16 x i16>*
  store <16 x i16> %838, <16 x i16>* %844, align 2, !tbaa !396
  %indvars.iv.next3136 = or i64 %indvars.iv3135, 1
  %845 = add nuw nsw i64 %indvars.iv.next3136, %179
  %846 = shl nsw i64 %845, 5
  %847 = add nsw i64 %846, %180
  %848 = add nsw i64 %847, %612
  %849 = getelementptr inbounds i16, i16* %64, i64 %848
  %850 = getelementptr inbounds i16, i16* %849, i64 -32
  %851 = bitcast i16* %850 to <16 x i16>*
  %852 = load <16 x i16>, <16 x i16>* %851, align 2, !tbaa !393
  %853 = getelementptr inbounds i16, i16* %849, i64 -16
  %854 = bitcast i16* %853 to <16 x i16>*
  %855 = load <16 x i16>, <16 x i16>* %854, align 2, !tbaa !393
  %856 = add nsw i64 %827, %847
  %857 = getelementptr inbounds i16, i16* %read_input, i64 %856
  %858 = getelementptr inbounds i16, i16* %857, i64 -32
  %859 = bitcast i16* %858 to <16 x i16>*
  store <16 x i16> %852, <16 x i16>* %859, align 2, !tbaa !396
  %860 = getelementptr inbounds i16, i16* %857, i64 -16
  %861 = bitcast i16* %860 to <16 x i16>*
  store <16 x i16> %855, <16 x i16>* %861, align 2, !tbaa !396
  %indvars.iv.next3136.1 = or i64 %indvars.iv3135, 2
  %862 = add nuw nsw i64 %indvars.iv.next3136.1, %179
  %863 = shl nsw i64 %862, 5
  %864 = add nsw i64 %863, %180
  %865 = add nsw i64 %864, %612
  %866 = getelementptr inbounds i16, i16* %64, i64 %865
  %867 = getelementptr inbounds i16, i16* %866, i64 -32
  %868 = bitcast i16* %867 to <16 x i16>*
  %869 = load <16 x i16>, <16 x i16>* %868, align 2, !tbaa !393
  %870 = getelementptr inbounds i16, i16* %866, i64 -16
  %871 = bitcast i16* %870 to <16 x i16>*
  %872 = load <16 x i16>, <16 x i16>* %871, align 2, !tbaa !393
  %873 = add nsw i64 %827, %864
  %874 = getelementptr inbounds i16, i16* %read_input, i64 %873
  %875 = getelementptr inbounds i16, i16* %874, i64 -32
  %876 = bitcast i16* %875 to <16 x i16>*
  store <16 x i16> %869, <16 x i16>* %876, align 2, !tbaa !396
  %877 = getelementptr inbounds i16, i16* %874, i64 -16
  %878 = bitcast i16* %877 to <16 x i16>*
  store <16 x i16> %872, <16 x i16>* %878, align 2, !tbaa !396
  %indvars.iv.next3136.2 = or i64 %indvars.iv3135, 3
  %879 = add nuw nsw i64 %indvars.iv.next3136.2, %179
  %880 = shl nsw i64 %879, 5
  %881 = add nsw i64 %880, %180
  %882 = add nsw i64 %881, %612
  %883 = getelementptr inbounds i16, i16* %64, i64 %882
  %884 = getelementptr inbounds i16, i16* %883, i64 -32
  %885 = bitcast i16* %884 to <16 x i16>*
  %886 = load <16 x i16>, <16 x i16>* %885, align 2, !tbaa !393
  %887 = getelementptr inbounds i16, i16* %883, i64 -16
  %888 = bitcast i16* %887 to <16 x i16>*
  %889 = load <16 x i16>, <16 x i16>* %888, align 2, !tbaa !393
  %890 = add nsw i64 %827, %881
  %891 = getelementptr inbounds i16, i16* %read_input, i64 %890
  %892 = getelementptr inbounds i16, i16* %891, i64 -32
  %893 = bitcast i16* %892 to <16 x i16>*
  store <16 x i16> %886, <16 x i16>* %893, align 2, !tbaa !396
  %894 = getelementptr inbounds i16, i16* %891, i64 -16
  %895 = bitcast i16* %894 to <16 x i16>*
  store <16 x i16> %889, <16 x i16>* %895, align 2, !tbaa !396
  %indvars.iv.next3136.3 = add nuw nsw i64 %indvars.iv3135, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased"

"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa": ; preds = %"for read_input.s0.x.x.rebased", %"for read_input.s0.x.x.rebased.preheader"
  %indvars.iv3135.unr = phi i64 [ 0, %"for read_input.s0.x.x.rebased.preheader" ], [ %indvars.iv.next3136.3, %"for read_input.s0.x.x.rebased" ]
  br i1 %lcmp.mod.not, label %"end for read_input.s0.x.x.rebased", label %"for read_input.s0.x.x.rebased.epil"

"for read_input.s0.x.x.rebased.epil":             ; preds = %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased.epil"
  %indvars.iv3135.epil = phi i64 [ %indvars.iv.next3136.epil, %"for read_input.s0.x.x.rebased.epil" ], [ %indvars.iv3135.unr, %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa" ]
  %epil.iter = phi i64 [ %epil.iter.sub, %"for read_input.s0.x.x.rebased.epil" ], [ %xtraiter, %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa" ]
  %896 = add nuw nsw i64 %indvars.iv3135.epil, %179
  %897 = shl nsw i64 %896, 5
  %898 = add nsw i64 %897, %180
  %899 = add nsw i64 %898, %612
  %900 = getelementptr inbounds i16, i16* %64, i64 %899
  %901 = getelementptr inbounds i16, i16* %900, i64 -32
  %902 = bitcast i16* %901 to <16 x i16>*
  %903 = load <16 x i16>, <16 x i16>* %902, align 2, !tbaa !393
  %904 = getelementptr inbounds i16, i16* %900, i64 -16
  %905 = bitcast i16* %904 to <16 x i16>*
  %906 = load <16 x i16>, <16 x i16>* %905, align 2, !tbaa !393
  %907 = add nsw i64 %827, %898
  %908 = getelementptr inbounds i16, i16* %read_input, i64 %907
  %909 = getelementptr inbounds i16, i16* %908, i64 -32
  %910 = bitcast i16* %909 to <16 x i16>*
  store <16 x i16> %903, <16 x i16>* %910, align 2, !tbaa !396
  %911 = getelementptr inbounds i16, i16* %908, i64 -16
  %912 = bitcast i16* %911 to <16 x i16>*
  store <16 x i16> %906, <16 x i16>* %912, align 2, !tbaa !396
  %indvars.iv.next3136.epil = add nuw nsw i64 %indvars.iv3135.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %"end for read_input.s0.x.x.rebased", label %"for read_input.s0.x.x.rebased.epil", !llvm.loop !398

"end for read_input.s0.x.x.rebased":              ; preds = %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased.epil", %"end for read_input.s0.x.x5"
  br i1 %85, label %"for read_input.s0.x.x.rebased9.preheader", label %"end for read_input.s0.x.x.rebased10", !prof !386

"for read_input.s0.x.x.rebased9.preheader":       ; preds = %"end for read_input.s0.x.x.rebased"
  %913 = trunc i64 %612 to i32
  %914 = insertelement <32 x i32> undef, i32 %913, i32 0
  %915 = shufflevector <32 x i32> %914, <32 x i32> undef, <32 x i32> zeroinitializer
  %916 = add nuw nsw i64 %408, %indvars.iv3138
  %917 = mul nsw i64 %916, %82
  %918 = sub i64 %917, %83
  br label %"for read_input.s0.x.x.rebased9"

"for read_input.s0.x.x.rebased9":                 ; preds = %"for read_input.s0.x.x.rebased9.preheader", %"for read_input.s0.x.x.rebased9"
  %read_input.s0.x.x.rebased11 = phi i32 [ %1118, %"for read_input.s0.x.x.rebased9" ], [ 0, %"for read_input.s0.x.x.rebased9.preheader" ]
  %919 = add nsw i32 %read_input.s0.x.x.rebased11, %t1624
  %920 = shl nsw i32 %919, 5
  %a54 = add nsw i32 %920, %t1650
  %921 = icmp sgt i32 %b37, %a54
  %read_input.s0.x.v2.base.s12 = select i1 %921, i32 %a54, i32 %b37
  %922 = add nsw i32 %read_input.s0.x.v2.base.s12, -32
  %923 = insertelement <32 x i32> undef, i32 %922, i32 0
  %924 = shufflevector <32 x i32> %923, <32 x i32> undef, <32 x i32> zeroinitializer
  %a56 = add nsw <32 x i32> %924, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %925 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %926 = icmp sgt <8 x i32> %75, %925
  %927 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %928 = icmp sgt <8 x i32> %75, %927
  %929 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %930 = icmp sgt <8 x i32> %75, %929
  %931 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %932 = icmp sgt <8 x i32> %75, %931
  %933 = select <8 x i1> %926, <8 x i32> %925, <8 x i32> %75
  %934 = select <8 x i1> %928, <8 x i32> %927, <8 x i32> %75
  %935 = select <8 x i1> %930, <8 x i32> %929, <8 x i32> %75
  %936 = select <8 x i1> %932, <8 x i32> %931, <8 x i32> %75
  %937 = icmp sgt <8 x i32> %933, %77
  %938 = icmp sgt <8 x i32> %934, %77
  %939 = icmp sgt <8 x i32> %935, %77
  %940 = icmp sgt <8 x i32> %936, %77
  %941 = select <8 x i1> %937, <8 x i32> %933, <8 x i32> %77
  %942 = select <8 x i1> %938, <8 x i32> %934, <8 x i32> %77
  %943 = select <8 x i1> %939, <8 x i32> %935, <8 x i32> %77
  %944 = select <8 x i1> %940, <8 x i32> %936, <8 x i32> %77
  %945 = shufflevector <8 x i32> %941, <8 x i32> %942, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %946 = shufflevector <8 x i32> %943, <8 x i32> %944, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %947 = shufflevector <16 x i32> %945, <16 x i32> %946, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %948 = add nsw <32 x i32> %947, %915
  %949 = extractelement <32 x i32> %948, i32 0
  %950 = sext i32 %949 to i64
  %951 = getelementptr inbounds i16, i16* %64, i64 %950
  %952 = load i16, i16* %951, align 2, !tbaa !393
  %953 = insertelement <32 x i16> undef, i16 %952, i32 0
  %954 = extractelement <32 x i32> %948, i32 1
  %955 = sext i32 %954 to i64
  %956 = getelementptr inbounds i16, i16* %64, i64 %955
  %957 = load i16, i16* %956, align 2, !tbaa !393
  %958 = insertelement <32 x i16> %953, i16 %957, i32 1
  %959 = extractelement <32 x i32> %948, i32 2
  %960 = sext i32 %959 to i64
  %961 = getelementptr inbounds i16, i16* %64, i64 %960
  %962 = load i16, i16* %961, align 2, !tbaa !393
  %963 = insertelement <32 x i16> %958, i16 %962, i32 2
  %964 = extractelement <32 x i32> %948, i32 3
  %965 = sext i32 %964 to i64
  %966 = getelementptr inbounds i16, i16* %64, i64 %965
  %967 = load i16, i16* %966, align 2, !tbaa !393
  %968 = insertelement <32 x i16> %963, i16 %967, i32 3
  %969 = extractelement <32 x i32> %948, i32 4
  %970 = sext i32 %969 to i64
  %971 = getelementptr inbounds i16, i16* %64, i64 %970
  %972 = load i16, i16* %971, align 2, !tbaa !393
  %973 = insertelement <32 x i16> %968, i16 %972, i32 4
  %974 = extractelement <32 x i32> %948, i32 5
  %975 = sext i32 %974 to i64
  %976 = getelementptr inbounds i16, i16* %64, i64 %975
  %977 = load i16, i16* %976, align 2, !tbaa !393
  %978 = insertelement <32 x i16> %973, i16 %977, i32 5
  %979 = extractelement <32 x i32> %948, i32 6
  %980 = sext i32 %979 to i64
  %981 = getelementptr inbounds i16, i16* %64, i64 %980
  %982 = load i16, i16* %981, align 2, !tbaa !393
  %983 = insertelement <32 x i16> %978, i16 %982, i32 6
  %984 = extractelement <32 x i32> %948, i32 7
  %985 = sext i32 %984 to i64
  %986 = getelementptr inbounds i16, i16* %64, i64 %985
  %987 = load i16, i16* %986, align 2, !tbaa !393
  %988 = insertelement <32 x i16> %983, i16 %987, i32 7
  %989 = extractelement <32 x i32> %948, i32 8
  %990 = sext i32 %989 to i64
  %991 = getelementptr inbounds i16, i16* %64, i64 %990
  %992 = load i16, i16* %991, align 2, !tbaa !393
  %993 = insertelement <32 x i16> %988, i16 %992, i32 8
  %994 = extractelement <32 x i32> %948, i32 9
  %995 = sext i32 %994 to i64
  %996 = getelementptr inbounds i16, i16* %64, i64 %995
  %997 = load i16, i16* %996, align 2, !tbaa !393
  %998 = insertelement <32 x i16> %993, i16 %997, i32 9
  %999 = extractelement <32 x i32> %948, i32 10
  %1000 = sext i32 %999 to i64
  %1001 = getelementptr inbounds i16, i16* %64, i64 %1000
  %1002 = load i16, i16* %1001, align 2, !tbaa !393
  %1003 = insertelement <32 x i16> %998, i16 %1002, i32 10
  %1004 = extractelement <32 x i32> %948, i32 11
  %1005 = sext i32 %1004 to i64
  %1006 = getelementptr inbounds i16, i16* %64, i64 %1005
  %1007 = load i16, i16* %1006, align 2, !tbaa !393
  %1008 = insertelement <32 x i16> %1003, i16 %1007, i32 11
  %1009 = extractelement <32 x i32> %948, i32 12
  %1010 = sext i32 %1009 to i64
  %1011 = getelementptr inbounds i16, i16* %64, i64 %1010
  %1012 = load i16, i16* %1011, align 2, !tbaa !393
  %1013 = insertelement <32 x i16> %1008, i16 %1012, i32 12
  %1014 = extractelement <32 x i32> %948, i32 13
  %1015 = sext i32 %1014 to i64
  %1016 = getelementptr inbounds i16, i16* %64, i64 %1015
  %1017 = load i16, i16* %1016, align 2, !tbaa !393
  %1018 = insertelement <32 x i16> %1013, i16 %1017, i32 13
  %1019 = extractelement <32 x i32> %948, i32 14
  %1020 = sext i32 %1019 to i64
  %1021 = getelementptr inbounds i16, i16* %64, i64 %1020
  %1022 = load i16, i16* %1021, align 2, !tbaa !393
  %1023 = insertelement <32 x i16> %1018, i16 %1022, i32 14
  %1024 = extractelement <32 x i32> %948, i32 15
  %1025 = sext i32 %1024 to i64
  %1026 = getelementptr inbounds i16, i16* %64, i64 %1025
  %1027 = load i16, i16* %1026, align 2, !tbaa !393
  %1028 = insertelement <32 x i16> %1023, i16 %1027, i32 15
  %1029 = extractelement <32 x i32> %948, i32 16
  %1030 = sext i32 %1029 to i64
  %1031 = getelementptr inbounds i16, i16* %64, i64 %1030
  %1032 = load i16, i16* %1031, align 2, !tbaa !393
  %1033 = insertelement <32 x i16> %1028, i16 %1032, i32 16
  %1034 = extractelement <32 x i32> %948, i32 17
  %1035 = sext i32 %1034 to i64
  %1036 = getelementptr inbounds i16, i16* %64, i64 %1035
  %1037 = load i16, i16* %1036, align 2, !tbaa !393
  %1038 = insertelement <32 x i16> %1033, i16 %1037, i32 17
  %1039 = extractelement <32 x i32> %948, i32 18
  %1040 = sext i32 %1039 to i64
  %1041 = getelementptr inbounds i16, i16* %64, i64 %1040
  %1042 = load i16, i16* %1041, align 2, !tbaa !393
  %1043 = insertelement <32 x i16> %1038, i16 %1042, i32 18
  %1044 = extractelement <32 x i32> %948, i32 19
  %1045 = sext i32 %1044 to i64
  %1046 = getelementptr inbounds i16, i16* %64, i64 %1045
  %1047 = load i16, i16* %1046, align 2, !tbaa !393
  %1048 = insertelement <32 x i16> %1043, i16 %1047, i32 19
  %1049 = extractelement <32 x i32> %948, i32 20
  %1050 = sext i32 %1049 to i64
  %1051 = getelementptr inbounds i16, i16* %64, i64 %1050
  %1052 = load i16, i16* %1051, align 2, !tbaa !393
  %1053 = insertelement <32 x i16> %1048, i16 %1052, i32 20
  %1054 = extractelement <32 x i32> %948, i32 21
  %1055 = sext i32 %1054 to i64
  %1056 = getelementptr inbounds i16, i16* %64, i64 %1055
  %1057 = load i16, i16* %1056, align 2, !tbaa !393
  %1058 = insertelement <32 x i16> %1053, i16 %1057, i32 21
  %1059 = extractelement <32 x i32> %948, i32 22
  %1060 = sext i32 %1059 to i64
  %1061 = getelementptr inbounds i16, i16* %64, i64 %1060
  %1062 = load i16, i16* %1061, align 2, !tbaa !393
  %1063 = insertelement <32 x i16> %1058, i16 %1062, i32 22
  %1064 = extractelement <32 x i32> %948, i32 23
  %1065 = sext i32 %1064 to i64
  %1066 = getelementptr inbounds i16, i16* %64, i64 %1065
  %1067 = load i16, i16* %1066, align 2, !tbaa !393
  %1068 = insertelement <32 x i16> %1063, i16 %1067, i32 23
  %1069 = extractelement <32 x i32> %948, i32 24
  %1070 = sext i32 %1069 to i64
  %1071 = getelementptr inbounds i16, i16* %64, i64 %1070
  %1072 = load i16, i16* %1071, align 2, !tbaa !393
  %1073 = insertelement <32 x i16> %1068, i16 %1072, i32 24
  %1074 = extractelement <32 x i32> %948, i32 25
  %1075 = sext i32 %1074 to i64
  %1076 = getelementptr inbounds i16, i16* %64, i64 %1075
  %1077 = load i16, i16* %1076, align 2, !tbaa !393
  %1078 = insertelement <32 x i16> %1073, i16 %1077, i32 25
  %1079 = extractelement <32 x i32> %948, i32 26
  %1080 = sext i32 %1079 to i64
  %1081 = getelementptr inbounds i16, i16* %64, i64 %1080
  %1082 = load i16, i16* %1081, align 2, !tbaa !393
  %1083 = insertelement <32 x i16> %1078, i16 %1082, i32 26
  %1084 = extractelement <32 x i32> %948, i32 27
  %1085 = sext i32 %1084 to i64
  %1086 = getelementptr inbounds i16, i16* %64, i64 %1085
  %1087 = load i16, i16* %1086, align 2, !tbaa !393
  %1088 = insertelement <32 x i16> %1083, i16 %1087, i32 27
  %1089 = extractelement <32 x i32> %948, i32 28
  %1090 = sext i32 %1089 to i64
  %1091 = getelementptr inbounds i16, i16* %64, i64 %1090
  %1092 = load i16, i16* %1091, align 2, !tbaa !393
  %1093 = insertelement <32 x i16> %1088, i16 %1092, i32 28
  %1094 = extractelement <32 x i32> %948, i32 29
  %1095 = sext i32 %1094 to i64
  %1096 = getelementptr inbounds i16, i16* %64, i64 %1095
  %1097 = load i16, i16* %1096, align 2, !tbaa !393
  %1098 = insertelement <32 x i16> %1093, i16 %1097, i32 29
  %1099 = extractelement <32 x i32> %948, i32 30
  %1100 = sext i32 %1099 to i64
  %1101 = getelementptr inbounds i16, i16* %64, i64 %1100
  %1102 = load i16, i16* %1101, align 2, !tbaa !393
  %1103 = insertelement <32 x i16> %1098, i16 %1102, i32 30
  %1104 = extractelement <32 x i32> %948, i32 31
  %1105 = sext i32 %1104 to i64
  %1106 = getelementptr inbounds i16, i16* %64, i64 %1105
  %1107 = load i16, i16* %1106, align 2, !tbaa !393
  %1108 = insertelement <32 x i16> %1103, i16 %1107, i32 31
  %1109 = shufflevector <32 x i16> %1108, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1110 = sext i32 %read_input.s0.x.v2.base.s12 to i64
  %1111 = add nsw i64 %918, %1110
  %1112 = getelementptr inbounds i16, i16* %read_input, i64 %1111
  %1113 = getelementptr inbounds i16, i16* %1112, i64 -32
  %1114 = bitcast i16* %1113 to <16 x i16>*
  store <16 x i16> %1109, <16 x i16>* %1114, align 2, !tbaa !396
  %1115 = shufflevector <32 x i16> %1108, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1116 = getelementptr inbounds i16, i16* %1112, i64 -16
  %1117 = bitcast i16* %1116 to <16 x i16>*
  store <16 x i16> %1115, <16 x i16>* %1117, align 2, !tbaa !396
  %1118 = add nuw nsw i32 %read_input.s0.x.x.rebased11, 1
  %.not2703 = icmp eq i32 %1118, %t1661
  br i1 %.not2703, label %"end for read_input.s0.x.x.rebased10", label %"for read_input.s0.x.x.rebased9"

"end for read_input.s0.x.x.rebased10":            ; preds = %"for read_input.s0.x.x.rebased9", %"end for read_input.s0.x.x.rebased"
  %indvars.iv.next3139 = add nuw nsw i64 %indvars.iv3138, 1
  %.not2702 = icmp eq i64 %indvars.iv.next3139, %410
  br i1 %.not2702, label %"end for read_input.s0.y.rebased2", label %"for read_input.s0.y.rebased1"

"for read_input.s0.y.rebased13":                  ; preds = %"for read_input.s0.y.rebased13.preheader", %"end for read_input.s0.x.x17"
  %indvars.iv3141 = phi i64 [ 0, %"for read_input.s0.y.rebased13.preheader" ], [ %indvars.iv.next3142, %"end for read_input.s0.x.x17" ]
  %1119 = trunc i64 %indvars.iv3141 to i32
  %a65 = add nsw i32 %t1675, %1119
  %1120 = icmp sgt i32 %b36, %a65
  %a64 = select i1 %1120, i32 %a65, i32 %b36
  %1121 = icmp sgt i32 %a64, 0
  %1122 = select i1 %1121, i32 %a64, i32 0
  %1123 = mul nsw i32 %1122, %13
  %t1679 = sub nsw i32 %1123, %9
  %1124 = insertelement <32 x i32> undef, i32 %t1679, i32 0
  %1125 = shufflevector <32 x i32> %1124, <32 x i32> undef, <32 x i32> zeroinitializer
  %1126 = add nuw nsw i64 %624, %indvars.iv3141
  %1127 = mul nsw i64 %1126, %82
  %1128 = sub i64 %1127, %83
  br label %"for read_input.s0.x.x16"

"end for read_input.s0.y.rebased14":              ; preds = %"end for read_input.s0.x.x17", %"end for read_input.s0.y.rebased2"
  %1129 = load i64, i64* %.fca.1.gep2378, align 8, !tbaa !387
  %cmp.i2757 = icmp ult i64 %1129, %92
  %1130 = load i8*, i8** %.fca.0.gep2377, align 8, !tbaa !389
  br i1 %cmp.i2757, label %if.then.i2760, label %pseudostack_alloc.exit2773, !prof !390

if.then.i2760:                                    ; preds = %"end for read_input.s0.y.rebased14"
  %tobool1.not.i2759 = icmp ne i8* %1130, null
  %1131 = load i64, i64* %.fca.2.gep2379, align 8
  %cmp2.i2762 = icmp ugt i64 %1131, 16384
  %or.cond2844 = and i1 %tobool1.not.i2759, %cmp2.i2762
  br i1 %or.cond2844, label %if.then3.i2764, label %if.end.i2768

if.then3.i2764:                                   ; preds = %if.then.i2760
  call void @halide_free(i8* null, i8* nonnull %1130) #16
  %.pre3371 = load i64, i64* %.fca.2.gep2379, align 8, !tbaa !391
  br label %if.end.i2768

if.end.i2768:                                     ; preds = %if.then3.i2764, %if.then.i2760
  %1132 = phi i64 [ %.pre3371, %if.then3.i2764 ], [ %1131, %if.then.i2760 ]
  %add.i2766 = add i64 %1132, %92
  store i64 %add.i2766, i64* %.fca.2.gep2379, align 8, !tbaa !391
  %cmp7.i2767 = icmp ugt i64 %add.i2766, 16384
  br i1 %cmp7.i2767, label %if.then8.i2770, label %if.end11.i2772

if.then8.i2770:                                   ; preds = %if.end.i2768
  %call.i2769 = call i8* @halide_malloc(i8* null, i64 %92) #16
  br label %if.end11.i2772

if.end11.i2772:                                   ; preds = %if.then8.i2770, %if.end.i2768
  %storemerge.i2771 = phi i8* [ %call.i2769, %if.then8.i2770 ], [ null, %if.end.i2768 ]
  store i8* %storemerge.i2771, i8** %.fca.0.gep2377, align 8, !tbaa !389
  store i64 %92, i64* %.fca.1.gep2378, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2773

pseudostack_alloc.exit2773:                       ; preds = %"end for read_input.s0.y.rebased14", %if.end11.i2772
  %1133 = phi i8* [ %storemerge.i2771, %if.end11.i2772 ], [ %1130, %"end for read_input.s0.y.rebased14" ]
  %1134 = bitcast i8* %1133 to i16*
  %.not2625 = icmp eq i8* %1133, null
  br i1 %.not2625, label %then_bb21, label %"consume read_input", !prof !392

"for read_input.s0.x.x16":                        ; preds = %"for read_input.s0.y.rebased13", %"for read_input.s0.x.x16"
  %read_input.s0.x.x18 = phi i32 [ %1333, %"for read_input.s0.x.x16" ], [ 0, %"for read_input.s0.y.rebased13" ]
  %1135 = shl nsw i32 %read_input.s0.x.x18, 5
  %a66 = add nsw i32 %1135, %t1650
  %1136 = icmp sgt i32 %b37, %a66
  %read_input.s0.x.v2.base.s19 = select i1 %1136, i32 %a66, i32 %b37
  %1137 = add nsw i32 %read_input.s0.x.v2.base.s19, -32
  %1138 = insertelement <32 x i32> undef, i32 %1137, i32 0
  %1139 = shufflevector <32 x i32> %1138, <32 x i32> undef, <32 x i32> zeroinitializer
  %a68 = add nsw <32 x i32> %1139, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1140 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1141 = icmp sgt <8 x i32> %75, %1140
  %1142 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1143 = icmp sgt <8 x i32> %75, %1142
  %1144 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1145 = icmp sgt <8 x i32> %75, %1144
  %1146 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1147 = icmp sgt <8 x i32> %75, %1146
  %1148 = select <8 x i1> %1141, <8 x i32> %1140, <8 x i32> %75
  %1149 = select <8 x i1> %1143, <8 x i32> %1142, <8 x i32> %75
  %1150 = select <8 x i1> %1145, <8 x i32> %1144, <8 x i32> %75
  %1151 = select <8 x i1> %1147, <8 x i32> %1146, <8 x i32> %75
  %1152 = icmp sgt <8 x i32> %1148, %77
  %1153 = icmp sgt <8 x i32> %1149, %77
  %1154 = icmp sgt <8 x i32> %1150, %77
  %1155 = icmp sgt <8 x i32> %1151, %77
  %1156 = select <8 x i1> %1152, <8 x i32> %1148, <8 x i32> %77
  %1157 = select <8 x i1> %1153, <8 x i32> %1149, <8 x i32> %77
  %1158 = select <8 x i1> %1154, <8 x i32> %1150, <8 x i32> %77
  %1159 = select <8 x i1> %1155, <8 x i32> %1151, <8 x i32> %77
  %1160 = shufflevector <8 x i32> %1156, <8 x i32> %1157, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1161 = shufflevector <8 x i32> %1158, <8 x i32> %1159, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1162 = shufflevector <16 x i32> %1160, <16 x i32> %1161, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1163 = add nsw <32 x i32> %1162, %1125
  %1164 = extractelement <32 x i32> %1163, i32 0
  %1165 = sext i32 %1164 to i64
  %1166 = getelementptr inbounds i16, i16* %64, i64 %1165
  %1167 = load i16, i16* %1166, align 2, !tbaa !393
  %1168 = insertelement <32 x i16> undef, i16 %1167, i32 0
  %1169 = extractelement <32 x i32> %1163, i32 1
  %1170 = sext i32 %1169 to i64
  %1171 = getelementptr inbounds i16, i16* %64, i64 %1170
  %1172 = load i16, i16* %1171, align 2, !tbaa !393
  %1173 = insertelement <32 x i16> %1168, i16 %1172, i32 1
  %1174 = extractelement <32 x i32> %1163, i32 2
  %1175 = sext i32 %1174 to i64
  %1176 = getelementptr inbounds i16, i16* %64, i64 %1175
  %1177 = load i16, i16* %1176, align 2, !tbaa !393
  %1178 = insertelement <32 x i16> %1173, i16 %1177, i32 2
  %1179 = extractelement <32 x i32> %1163, i32 3
  %1180 = sext i32 %1179 to i64
  %1181 = getelementptr inbounds i16, i16* %64, i64 %1180
  %1182 = load i16, i16* %1181, align 2, !tbaa !393
  %1183 = insertelement <32 x i16> %1178, i16 %1182, i32 3
  %1184 = extractelement <32 x i32> %1163, i32 4
  %1185 = sext i32 %1184 to i64
  %1186 = getelementptr inbounds i16, i16* %64, i64 %1185
  %1187 = load i16, i16* %1186, align 2, !tbaa !393
  %1188 = insertelement <32 x i16> %1183, i16 %1187, i32 4
  %1189 = extractelement <32 x i32> %1163, i32 5
  %1190 = sext i32 %1189 to i64
  %1191 = getelementptr inbounds i16, i16* %64, i64 %1190
  %1192 = load i16, i16* %1191, align 2, !tbaa !393
  %1193 = insertelement <32 x i16> %1188, i16 %1192, i32 5
  %1194 = extractelement <32 x i32> %1163, i32 6
  %1195 = sext i32 %1194 to i64
  %1196 = getelementptr inbounds i16, i16* %64, i64 %1195
  %1197 = load i16, i16* %1196, align 2, !tbaa !393
  %1198 = insertelement <32 x i16> %1193, i16 %1197, i32 6
  %1199 = extractelement <32 x i32> %1163, i32 7
  %1200 = sext i32 %1199 to i64
  %1201 = getelementptr inbounds i16, i16* %64, i64 %1200
  %1202 = load i16, i16* %1201, align 2, !tbaa !393
  %1203 = insertelement <32 x i16> %1198, i16 %1202, i32 7
  %1204 = extractelement <32 x i32> %1163, i32 8
  %1205 = sext i32 %1204 to i64
  %1206 = getelementptr inbounds i16, i16* %64, i64 %1205
  %1207 = load i16, i16* %1206, align 2, !tbaa !393
  %1208 = insertelement <32 x i16> %1203, i16 %1207, i32 8
  %1209 = extractelement <32 x i32> %1163, i32 9
  %1210 = sext i32 %1209 to i64
  %1211 = getelementptr inbounds i16, i16* %64, i64 %1210
  %1212 = load i16, i16* %1211, align 2, !tbaa !393
  %1213 = insertelement <32 x i16> %1208, i16 %1212, i32 9
  %1214 = extractelement <32 x i32> %1163, i32 10
  %1215 = sext i32 %1214 to i64
  %1216 = getelementptr inbounds i16, i16* %64, i64 %1215
  %1217 = load i16, i16* %1216, align 2, !tbaa !393
  %1218 = insertelement <32 x i16> %1213, i16 %1217, i32 10
  %1219 = extractelement <32 x i32> %1163, i32 11
  %1220 = sext i32 %1219 to i64
  %1221 = getelementptr inbounds i16, i16* %64, i64 %1220
  %1222 = load i16, i16* %1221, align 2, !tbaa !393
  %1223 = insertelement <32 x i16> %1218, i16 %1222, i32 11
  %1224 = extractelement <32 x i32> %1163, i32 12
  %1225 = sext i32 %1224 to i64
  %1226 = getelementptr inbounds i16, i16* %64, i64 %1225
  %1227 = load i16, i16* %1226, align 2, !tbaa !393
  %1228 = insertelement <32 x i16> %1223, i16 %1227, i32 12
  %1229 = extractelement <32 x i32> %1163, i32 13
  %1230 = sext i32 %1229 to i64
  %1231 = getelementptr inbounds i16, i16* %64, i64 %1230
  %1232 = load i16, i16* %1231, align 2, !tbaa !393
  %1233 = insertelement <32 x i16> %1228, i16 %1232, i32 13
  %1234 = extractelement <32 x i32> %1163, i32 14
  %1235 = sext i32 %1234 to i64
  %1236 = getelementptr inbounds i16, i16* %64, i64 %1235
  %1237 = load i16, i16* %1236, align 2, !tbaa !393
  %1238 = insertelement <32 x i16> %1233, i16 %1237, i32 14
  %1239 = extractelement <32 x i32> %1163, i32 15
  %1240 = sext i32 %1239 to i64
  %1241 = getelementptr inbounds i16, i16* %64, i64 %1240
  %1242 = load i16, i16* %1241, align 2, !tbaa !393
  %1243 = insertelement <32 x i16> %1238, i16 %1242, i32 15
  %1244 = extractelement <32 x i32> %1163, i32 16
  %1245 = sext i32 %1244 to i64
  %1246 = getelementptr inbounds i16, i16* %64, i64 %1245
  %1247 = load i16, i16* %1246, align 2, !tbaa !393
  %1248 = insertelement <32 x i16> %1243, i16 %1247, i32 16
  %1249 = extractelement <32 x i32> %1163, i32 17
  %1250 = sext i32 %1249 to i64
  %1251 = getelementptr inbounds i16, i16* %64, i64 %1250
  %1252 = load i16, i16* %1251, align 2, !tbaa !393
  %1253 = insertelement <32 x i16> %1248, i16 %1252, i32 17
  %1254 = extractelement <32 x i32> %1163, i32 18
  %1255 = sext i32 %1254 to i64
  %1256 = getelementptr inbounds i16, i16* %64, i64 %1255
  %1257 = load i16, i16* %1256, align 2, !tbaa !393
  %1258 = insertelement <32 x i16> %1253, i16 %1257, i32 18
  %1259 = extractelement <32 x i32> %1163, i32 19
  %1260 = sext i32 %1259 to i64
  %1261 = getelementptr inbounds i16, i16* %64, i64 %1260
  %1262 = load i16, i16* %1261, align 2, !tbaa !393
  %1263 = insertelement <32 x i16> %1258, i16 %1262, i32 19
  %1264 = extractelement <32 x i32> %1163, i32 20
  %1265 = sext i32 %1264 to i64
  %1266 = getelementptr inbounds i16, i16* %64, i64 %1265
  %1267 = load i16, i16* %1266, align 2, !tbaa !393
  %1268 = insertelement <32 x i16> %1263, i16 %1267, i32 20
  %1269 = extractelement <32 x i32> %1163, i32 21
  %1270 = sext i32 %1269 to i64
  %1271 = getelementptr inbounds i16, i16* %64, i64 %1270
  %1272 = load i16, i16* %1271, align 2, !tbaa !393
  %1273 = insertelement <32 x i16> %1268, i16 %1272, i32 21
  %1274 = extractelement <32 x i32> %1163, i32 22
  %1275 = sext i32 %1274 to i64
  %1276 = getelementptr inbounds i16, i16* %64, i64 %1275
  %1277 = load i16, i16* %1276, align 2, !tbaa !393
  %1278 = insertelement <32 x i16> %1273, i16 %1277, i32 22
  %1279 = extractelement <32 x i32> %1163, i32 23
  %1280 = sext i32 %1279 to i64
  %1281 = getelementptr inbounds i16, i16* %64, i64 %1280
  %1282 = load i16, i16* %1281, align 2, !tbaa !393
  %1283 = insertelement <32 x i16> %1278, i16 %1282, i32 23
  %1284 = extractelement <32 x i32> %1163, i32 24
  %1285 = sext i32 %1284 to i64
  %1286 = getelementptr inbounds i16, i16* %64, i64 %1285
  %1287 = load i16, i16* %1286, align 2, !tbaa !393
  %1288 = insertelement <32 x i16> %1283, i16 %1287, i32 24
  %1289 = extractelement <32 x i32> %1163, i32 25
  %1290 = sext i32 %1289 to i64
  %1291 = getelementptr inbounds i16, i16* %64, i64 %1290
  %1292 = load i16, i16* %1291, align 2, !tbaa !393
  %1293 = insertelement <32 x i16> %1288, i16 %1292, i32 25
  %1294 = extractelement <32 x i32> %1163, i32 26
  %1295 = sext i32 %1294 to i64
  %1296 = getelementptr inbounds i16, i16* %64, i64 %1295
  %1297 = load i16, i16* %1296, align 2, !tbaa !393
  %1298 = insertelement <32 x i16> %1293, i16 %1297, i32 26
  %1299 = extractelement <32 x i32> %1163, i32 27
  %1300 = sext i32 %1299 to i64
  %1301 = getelementptr inbounds i16, i16* %64, i64 %1300
  %1302 = load i16, i16* %1301, align 2, !tbaa !393
  %1303 = insertelement <32 x i16> %1298, i16 %1302, i32 27
  %1304 = extractelement <32 x i32> %1163, i32 28
  %1305 = sext i32 %1304 to i64
  %1306 = getelementptr inbounds i16, i16* %64, i64 %1305
  %1307 = load i16, i16* %1306, align 2, !tbaa !393
  %1308 = insertelement <32 x i16> %1303, i16 %1307, i32 28
  %1309 = extractelement <32 x i32> %1163, i32 29
  %1310 = sext i32 %1309 to i64
  %1311 = getelementptr inbounds i16, i16* %64, i64 %1310
  %1312 = load i16, i16* %1311, align 2, !tbaa !393
  %1313 = insertelement <32 x i16> %1308, i16 %1312, i32 29
  %1314 = extractelement <32 x i32> %1163, i32 30
  %1315 = sext i32 %1314 to i64
  %1316 = getelementptr inbounds i16, i16* %64, i64 %1315
  %1317 = load i16, i16* %1316, align 2, !tbaa !393
  %1318 = insertelement <32 x i16> %1313, i16 %1317, i32 30
  %1319 = extractelement <32 x i32> %1163, i32 31
  %1320 = sext i32 %1319 to i64
  %1321 = getelementptr inbounds i16, i16* %64, i64 %1320
  %1322 = load i16, i16* %1321, align 2, !tbaa !393
  %1323 = insertelement <32 x i16> %1318, i16 %1322, i32 31
  %1324 = shufflevector <32 x i16> %1323, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1325 = sext i32 %read_input.s0.x.v2.base.s19 to i64
  %1326 = add nsw i64 %1128, %1325
  %1327 = getelementptr inbounds i16, i16* %read_input, i64 %1326
  %1328 = getelementptr inbounds i16, i16* %1327, i64 -32
  %1329 = bitcast i16* %1328 to <16 x i16>*
  store <16 x i16> %1324, <16 x i16>* %1329, align 2, !tbaa !396
  %1330 = shufflevector <32 x i16> %1323, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1331 = getelementptr inbounds i16, i16* %1327, i64 -16
  %1332 = bitcast i16* %1331 to <16 x i16>*
  store <16 x i16> %1330, <16 x i16>* %1332, align 2, !tbaa !396
  %1333 = add nuw nsw i32 %read_input.s0.x.x18, 1
  %.not2701 = icmp eq i32 %1333, %20
  br i1 %.not2701, label %"end for read_input.s0.x.x17", label %"for read_input.s0.x.x16"

"end for read_input.s0.x.x17":                    ; preds = %"for read_input.s0.x.x16"
  %indvars.iv.next3142 = add nuw nsw i64 %indvars.iv3141, 1
  %.not2700 = icmp eq i64 %indvars.iv3141, %625
  br i1 %.not2700, label %"end for read_input.s0.y.rebased14", label %"for read_input.s0.y.rebased13"

then_bb21:                                        ; preds = %pseudostack_alloc.exit2773
  %1334 = alloca i8*, i64 %92, align 32
  %1335 = bitcast i8** %1334 to i16*
  store i8** %1334, i8*** %93, align 8
  br label %"consume read_input"

"consume read_input":                             ; preds = %pseudostack_alloc.exit2773, %then_bb21
  %blur_x = phi i16* [ %1335, %then_bb21 ], [ %1134, %pseudostack_alloc.exit2773 ]
  br i1 %34, label %"produce blur_x", label %"consume read_input.after_bb22_crit_edge"

"consume read_input.after_bb22_crit_edge":        ; preds = %"consume read_input"
  %.pre3374 = and i32 %a26, 7
  br label %after_bb22

after_bb22:                                       ; preds = %"consume read_input.after_bb22_crit_edge", %"produce blur_x"
  %.pre-phi = phi i32 [ %.pre3374, %"consume read_input.after_bb22_crit_edge" ], [ %1382, %"produce blur_x" ]
  %1336 = mul nsw i32 %.pre-phi, %a73
  %t1682 = sub nsw i32 %1336, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased.preheader", label %"end for blur_y.s0.x.x.rebased", !prof !386

"for blur_y.s0.x.x.rebased.preheader":            ; preds = %after_bb22
  %1337 = sext i32 %t1682 to i64
  br label %"for blur_y.s0.x.x.rebased"

"produce blur_x":                                 ; preds = %"consume read_input"
  %1338 = getelementptr inbounds i16, i16* %read_input, i64 %94
  %1339 = getelementptr inbounds i16, i16* %1338, i64 -31
  %1340 = bitcast i16* %1339 to <16 x i16>*
  %1341 = load <16 x i16>, <16 x i16>* %1340, align 2, !tbaa !396
  %1342 = getelementptr inbounds i16, i16* %1338, i64 -15
  %1343 = bitcast i16* %1342 to <16 x i16>*
  %1344 = load <16 x i16>, <16 x i16>* %1343, align 2, !tbaa !396
  %1345 = getelementptr inbounds i16, i16* %1338, i64 -32
  %1346 = bitcast i16* %1345 to <16 x i16>*
  %1347 = load <16 x i16>, <16 x i16>* %1346, align 2, !tbaa !396
  %1348 = getelementptr inbounds i16, i16* %1338, i64 -16
  %1349 = bitcast i16* %1348 to <16 x i16>*
  %1350 = load <16 x i16>, <16 x i16>* %1349, align 2, !tbaa !396
  %1351 = getelementptr inbounds i16, i16* %1338, i64 -30
  %1352 = bitcast i16* %1351 to <16 x i16>*
  %1353 = load <16 x i16>, <16 x i16>* %1352, align 2, !tbaa !396
  %1354 = getelementptr inbounds i16, i16* %1338, i64 -14
  %1355 = bitcast i16* %1354 to <16 x i16>*
  %1356 = load <16 x i16>, <16 x i16>* %1355, align 2, !tbaa !396
  %1357 = getelementptr inbounds i16, i16* %1338, i64 -28
  %1358 = bitcast i16* %1357 to <16 x i16>*
  %1359 = load <16 x i16>, <16 x i16>* %1358, align 2, !tbaa !396
  %1360 = getelementptr inbounds i16, i16* %1338, i64 -12
  %1361 = bitcast i16* %1360 to <16 x i16>*
  %1362 = load <16 x i16>, <16 x i16>* %1361, align 2, !tbaa !396
  %1363 = getelementptr inbounds i16, i16* %1338, i64 -29
  %1364 = bitcast i16* %1363 to <16 x i16>*
  %1365 = load <16 x i16>, <16 x i16>* %1364, align 2, !tbaa !396
  %1366 = getelementptr inbounds i16, i16* %1338, i64 -13
  %1367 = bitcast i16* %1366 to <16 x i16>*
  %1368 = load <16 x i16>, <16 x i16>* %1367, align 2, !tbaa !396
  %1369 = add <16 x i16> %1347, %1341
  %1370 = add <16 x i16> %1369, %1353
  %1371 = add <16 x i16> %1370, %1359
  %1372 = add <16 x i16> %1371, %1365
  %1373 = add <16 x i16> %1350, %1344
  %1374 = add <16 x i16> %1373, %1356
  %1375 = add <16 x i16> %1374, %1362
  %1376 = add <16 x i16> %1375, %1368
  %1377 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1372, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1378 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1376, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1379 = shufflevector <16 x i16> %1377, <16 x i16> %1378, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1380 = lshr <32 x i16> %1379, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1381 = shufflevector <32 x i16> %1380, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1382 = and i32 %a26, 7
  %1383 = zext i32 %1382 to i64
  %1384 = mul nsw i64 %97, %1383
  %1385 = add nsw i64 %99, %1384
  %1386 = getelementptr inbounds i16, i16* %blur_x, i64 %1385
  %1387 = getelementptr inbounds i16, i16* %1386, i64 -32
  %1388 = bitcast i16* %1387 to <16 x i16>*
  store <16 x i16> %1381, <16 x i16>* %1388, align 2, !tbaa !399
  %1389 = shufflevector <32 x i16> %1380, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1390 = getelementptr inbounds i16, i16* %1386, i64 -16
  %1391 = bitcast i16* %1390 to <16 x i16>*
  store <16 x i16> %1389, <16 x i16>* %1391, align 2, !tbaa !399
  br label %after_bb22

"for blur_y.s0.x.x.rebased":                      ; preds = %"for blur_y.s0.x.x.rebased.preheader", %after_bb24
  %indvars.iv3143 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased.preheader" ], [ %indvars.iv.next3144, %after_bb24 ]
  %1392 = add nsw i64 %indvars.iv3143, %101
  %1393 = icmp slt i64 %1392, 1
  %1394 = trunc i64 %1392 to i32
  %1395 = shl nsw i32 %1394, 5
  %1396 = icmp sgt i32 %4, %1395
  %1397 = or i1 %1393, %1396
  br i1 %1397, label %"produce blur_x27", label %after_bb24

"end for blur_y.s0.x.x.rebased":                  ; preds = %after_bb24, %after_bb22
  br i1 %102, label %"for blur_y.s0.x.x.rebased28.preheader", label %"end for blur_y.s0.x.x.rebased29", !prof !386

"for blur_y.s0.x.x.rebased28.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased"
  %1398 = sext i32 %t1682 to i64
  br label %"for blur_y.s0.x.x.rebased28"

after_bb24:                                       ; preds = %"for blur_y.s0.x.x.rebased", %"produce blur_x27"
  %indvars.iv.next3144 = add nuw nsw i64 %indvars.iv3143, 1
  %.not2698 = icmp eq i64 %indvars.iv.next3144, %184
  br i1 %.not2698, label %"end for blur_y.s0.x.x.rebased", label %"for blur_y.s0.x.x.rebased"

"produce blur_x27":                               ; preds = %"for blur_y.s0.x.x.rebased"
  %t684 = sub i32 %1395, %t1645
  %1399 = sext i32 %t684 to i64
  %1400 = getelementptr inbounds i16, i16* %read_input, i64 %1399
  %1401 = getelementptr inbounds i16, i16* %1400, i64 1
  %1402 = bitcast i16* %1401 to <16 x i16>*
  %1403 = load <16 x i16>, <16 x i16>* %1402, align 2, !tbaa !396
  %1404 = getelementptr inbounds i16, i16* %1400, i64 17
  %1405 = bitcast i16* %1404 to <16 x i16>*
  %1406 = load <16 x i16>, <16 x i16>* %1405, align 2, !tbaa !396
  %1407 = bitcast i16* %1400 to <16 x i16>*
  %1408 = load <16 x i16>, <16 x i16>* %1407, align 2, !tbaa !396
  %1409 = getelementptr inbounds i16, i16* %1400, i64 16
  %1410 = bitcast i16* %1409 to <16 x i16>*
  %1411 = load <16 x i16>, <16 x i16>* %1410, align 2, !tbaa !396
  %1412 = getelementptr inbounds i16, i16* %1400, i64 2
  %1413 = bitcast i16* %1412 to <16 x i16>*
  %1414 = load <16 x i16>, <16 x i16>* %1413, align 2, !tbaa !396
  %1415 = getelementptr inbounds i16, i16* %1400, i64 18
  %1416 = bitcast i16* %1415 to <16 x i16>*
  %1417 = load <16 x i16>, <16 x i16>* %1416, align 2, !tbaa !396
  %1418 = getelementptr inbounds i16, i16* %1400, i64 4
  %1419 = bitcast i16* %1418 to <16 x i16>*
  %1420 = load <16 x i16>, <16 x i16>* %1419, align 2, !tbaa !396
  %1421 = getelementptr inbounds i16, i16* %1400, i64 20
  %1422 = bitcast i16* %1421 to <16 x i16>*
  %1423 = load <16 x i16>, <16 x i16>* %1422, align 2, !tbaa !396
  %1424 = getelementptr inbounds i16, i16* %1400, i64 3
  %1425 = bitcast i16* %1424 to <16 x i16>*
  %1426 = load <16 x i16>, <16 x i16>* %1425, align 2, !tbaa !396
  %1427 = getelementptr inbounds i16, i16* %1400, i64 19
  %1428 = bitcast i16* %1427 to <16 x i16>*
  %1429 = load <16 x i16>, <16 x i16>* %1428, align 2, !tbaa !396
  %1430 = add <16 x i16> %1408, %1403
  %1431 = add <16 x i16> %1430, %1414
  %1432 = add <16 x i16> %1431, %1420
  %1433 = add <16 x i16> %1432, %1426
  %1434 = add <16 x i16> %1411, %1406
  %1435 = add <16 x i16> %1434, %1417
  %1436 = add <16 x i16> %1435, %1423
  %1437 = add <16 x i16> %1436, %1429
  %1438 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1433, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1439 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1437, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1440 = shufflevector <16 x i16> %1438, <16 x i16> %1439, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1441 = lshr <32 x i16> %1440, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1442 = shufflevector <32 x i16> %1441, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1443 = shl nsw i64 %1392, 5
  %1444 = add nsw i64 %1443, %1337
  %1445 = getelementptr inbounds i16, i16* %blur_x, i64 %1444
  %1446 = bitcast i16* %1445 to <16 x i16>*
  store <16 x i16> %1442, <16 x i16>* %1446, align 2, !tbaa !399
  %1447 = shufflevector <32 x i16> %1441, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1448 = getelementptr inbounds i16, i16* %1445, i64 16
  %1449 = bitcast i16* %1448 to <16 x i16>*
  store <16 x i16> %1447, <16 x i16>* %1449, align 2, !tbaa !399
  br label %after_bb24

"for blur_y.s0.x.x.rebased28":                    ; preds = %"for blur_y.s0.x.x.rebased28.preheader", %after_bb31
  %blur_y.s0.x.x.rebased30 = phi i32 [ %1454, %after_bb31 ], [ 0, %"for blur_y.s0.x.x.rebased28.preheader" ]
  %t2219 = add nsw i32 %blur_y.s0.x.x.rebased30, %t1626
  %1450 = icmp slt i32 %t2219, 1
  %1451 = shl nsw i32 %t2219, 5
  %1452 = icmp sgt i32 %4, %1451
  %1453 = or i1 %1450, %1452
  br i1 %1453, label %then_bb32, label %after_bb31

"end for blur_y.s0.x.x.rebased29":                ; preds = %after_bb31, %"end for blur_y.s0.x.x.rebased"
  br i1 %34, label %"produce blur_x38", label %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge"

"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased29"
  %.pre3375 = add nsw i32 %a26, 1
  %.pre3377 = and i32 %.pre3375, 7
  br label %after_bb35

after_bb31:                                       ; preds = %"for blur_y.s0.x.x.rebased28", %then_bb32
  %1454 = add nuw nsw i32 %blur_y.s0.x.x.rebased30, 1
  %.not2697 = icmp eq i32 %1454, %t1683
  br i1 %.not2697, label %"end for blur_y.s0.x.x.rebased29", label %"for blur_y.s0.x.x.rebased28"

then_bb32:                                        ; preds = %"for blur_y.s0.x.x.rebased28"
  %1455 = icmp sgt i32 %a14, %1451
  %b83 = select i1 %1455, i32 %1451, i32 %a14
  %1456 = icmp slt i32 %b83, %4
  %blur_x.s0.x.v1.base.s = select i1 %1456, i32 %b83, i32 %4
  %t686 = sub i32 %blur_x.s0.x.v1.base.s, %t1645
  %1457 = sext i32 %t686 to i64
  %1458 = getelementptr inbounds i16, i16* %read_input, i64 %1457
  %1459 = getelementptr inbounds i16, i16* %1458, i64 1
  %1460 = bitcast i16* %1459 to <16 x i16>*
  %1461 = load <16 x i16>, <16 x i16>* %1460, align 2, !tbaa !396
  %1462 = getelementptr inbounds i16, i16* %1458, i64 17
  %1463 = bitcast i16* %1462 to <16 x i16>*
  %1464 = load <16 x i16>, <16 x i16>* %1463, align 2, !tbaa !396
  %1465 = bitcast i16* %1458 to <16 x i16>*
  %1466 = load <16 x i16>, <16 x i16>* %1465, align 2, !tbaa !396
  %1467 = getelementptr inbounds i16, i16* %1458, i64 16
  %1468 = bitcast i16* %1467 to <16 x i16>*
  %1469 = load <16 x i16>, <16 x i16>* %1468, align 2, !tbaa !396
  %1470 = getelementptr inbounds i16, i16* %1458, i64 2
  %1471 = bitcast i16* %1470 to <16 x i16>*
  %1472 = load <16 x i16>, <16 x i16>* %1471, align 2, !tbaa !396
  %1473 = getelementptr inbounds i16, i16* %1458, i64 18
  %1474 = bitcast i16* %1473 to <16 x i16>*
  %1475 = load <16 x i16>, <16 x i16>* %1474, align 2, !tbaa !396
  %1476 = getelementptr inbounds i16, i16* %1458, i64 4
  %1477 = bitcast i16* %1476 to <16 x i16>*
  %1478 = load <16 x i16>, <16 x i16>* %1477, align 2, !tbaa !396
  %1479 = getelementptr inbounds i16, i16* %1458, i64 20
  %1480 = bitcast i16* %1479 to <16 x i16>*
  %1481 = load <16 x i16>, <16 x i16>* %1480, align 2, !tbaa !396
  %1482 = getelementptr inbounds i16, i16* %1458, i64 3
  %1483 = bitcast i16* %1482 to <16 x i16>*
  %1484 = load <16 x i16>, <16 x i16>* %1483, align 2, !tbaa !396
  %1485 = getelementptr inbounds i16, i16* %1458, i64 19
  %1486 = bitcast i16* %1485 to <16 x i16>*
  %1487 = load <16 x i16>, <16 x i16>* %1486, align 2, !tbaa !396
  %1488 = add <16 x i16> %1466, %1461
  %1489 = add <16 x i16> %1488, %1472
  %1490 = add <16 x i16> %1489, %1478
  %1491 = add <16 x i16> %1490, %1484
  %1492 = add <16 x i16> %1469, %1464
  %1493 = add <16 x i16> %1492, %1475
  %1494 = add <16 x i16> %1493, %1481
  %1495 = add <16 x i16> %1494, %1487
  %1496 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1491, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1497 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1495, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1498 = shufflevector <16 x i16> %1496, <16 x i16> %1497, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1499 = lshr <32 x i16> %1498, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1500 = shufflevector <32 x i16> %1499, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1501 = sext i32 %blur_x.s0.x.v1.base.s to i64
  %1502 = add nsw i64 %1501, %1398
  %1503 = getelementptr inbounds i16, i16* %blur_x, i64 %1502
  %1504 = bitcast i16* %1503 to <16 x i16>*
  store <16 x i16> %1500, <16 x i16>* %1504, align 2, !tbaa !399
  %1505 = shufflevector <32 x i16> %1499, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1506 = getelementptr inbounds i16, i16* %1503, i64 16
  %1507 = bitcast i16* %1506 to <16 x i16>*
  store <16 x i16> %1505, <16 x i16>* %1507, align 2, !tbaa !399
  br label %after_bb31

after_bb35:                                       ; preds = %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge", %"produce blur_x38"
  %.pre-phi3378 = phi i32 [ %.pre3377, %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge" ], [ %1555, %"produce blur_x38" ]
  %1508 = mul nsw i32 %.pre-phi3378, %a73
  %t1688 = sub nsw i32 %1508, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased39.preheader", label %"end for blur_y.s0.x.x.rebased40", !prof !386

"for blur_y.s0.x.x.rebased39.preheader":          ; preds = %after_bb35
  %1509 = sext i32 %t1688 to i64
  br label %"for blur_y.s0.x.x.rebased39"

"produce blur_x38":                               ; preds = %"end for blur_y.s0.x.x.rebased29"
  %1510 = getelementptr inbounds i16, i16* %read_input, i64 %103
  %1511 = getelementptr inbounds i16, i16* %1510, i64 -31
  %1512 = bitcast i16* %1511 to <16 x i16>*
  %1513 = load <16 x i16>, <16 x i16>* %1512, align 2, !tbaa !396
  %1514 = getelementptr inbounds i16, i16* %1510, i64 -15
  %1515 = bitcast i16* %1514 to <16 x i16>*
  %1516 = load <16 x i16>, <16 x i16>* %1515, align 2, !tbaa !396
  %1517 = getelementptr inbounds i16, i16* %1510, i64 -32
  %1518 = bitcast i16* %1517 to <16 x i16>*
  %1519 = load <16 x i16>, <16 x i16>* %1518, align 2, !tbaa !396
  %1520 = getelementptr inbounds i16, i16* %1510, i64 -16
  %1521 = bitcast i16* %1520 to <16 x i16>*
  %1522 = load <16 x i16>, <16 x i16>* %1521, align 2, !tbaa !396
  %1523 = getelementptr inbounds i16, i16* %1510, i64 -30
  %1524 = bitcast i16* %1523 to <16 x i16>*
  %1525 = load <16 x i16>, <16 x i16>* %1524, align 2, !tbaa !396
  %1526 = getelementptr inbounds i16, i16* %1510, i64 -14
  %1527 = bitcast i16* %1526 to <16 x i16>*
  %1528 = load <16 x i16>, <16 x i16>* %1527, align 2, !tbaa !396
  %1529 = getelementptr inbounds i16, i16* %1510, i64 -28
  %1530 = bitcast i16* %1529 to <16 x i16>*
  %1531 = load <16 x i16>, <16 x i16>* %1530, align 2, !tbaa !396
  %1532 = getelementptr inbounds i16, i16* %1510, i64 -12
  %1533 = bitcast i16* %1532 to <16 x i16>*
  %1534 = load <16 x i16>, <16 x i16>* %1533, align 2, !tbaa !396
  %1535 = getelementptr inbounds i16, i16* %1510, i64 -29
  %1536 = bitcast i16* %1535 to <16 x i16>*
  %1537 = load <16 x i16>, <16 x i16>* %1536, align 2, !tbaa !396
  %1538 = getelementptr inbounds i16, i16* %1510, i64 -13
  %1539 = bitcast i16* %1538 to <16 x i16>*
  %1540 = load <16 x i16>, <16 x i16>* %1539, align 2, !tbaa !396
  %1541 = add <16 x i16> %1519, %1513
  %1542 = add <16 x i16> %1541, %1525
  %1543 = add <16 x i16> %1542, %1531
  %1544 = add <16 x i16> %1543, %1537
  %1545 = add <16 x i16> %1522, %1516
  %1546 = add <16 x i16> %1545, %1528
  %1547 = add <16 x i16> %1546, %1534
  %1548 = add <16 x i16> %1547, %1540
  %1549 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1544, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1550 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1548, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1551 = shufflevector <16 x i16> %1549, <16 x i16> %1550, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1552 = lshr <32 x i16> %1551, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1553 = shufflevector <32 x i16> %1552, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1554 = add nsw i32 %a26, 1
  %1555 = and i32 %1554, 7
  %1556 = zext i32 %1555 to i64
  %1557 = mul nsw i64 %97, %1556
  %1558 = add nsw i64 %99, %1557
  %1559 = getelementptr inbounds i16, i16* %blur_x, i64 %1558
  %1560 = getelementptr inbounds i16, i16* %1559, i64 -32
  %1561 = bitcast i16* %1560 to <16 x i16>*
  store <16 x i16> %1553, <16 x i16>* %1561, align 2, !tbaa !399
  %1562 = shufflevector <32 x i16> %1552, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1563 = getelementptr inbounds i16, i16* %1559, i64 -16
  %1564 = bitcast i16* %1563 to <16 x i16>*
  store <16 x i16> %1562, <16 x i16>* %1564, align 2, !tbaa !399
  br label %after_bb35

"for blur_y.s0.x.x.rebased39":                    ; preds = %"for blur_y.s0.x.x.rebased39.preheader", %after_bb42
  %indvars.iv3146 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased39.preheader" ], [ %indvars.iv.next3147, %after_bb42 ]
  %1565 = add nsw i64 %indvars.iv3146, %101
  %1566 = icmp slt i64 %1565, 1
  %1567 = trunc i64 %1565 to i32
  %1568 = shl nsw i32 %1567, 5
  %1569 = icmp sgt i32 %4, %1568
  %1570 = or i1 %1566, %1569
  br i1 %1570, label %"produce blur_x45", label %after_bb42

"end for blur_y.s0.x.x.rebased40":                ; preds = %after_bb42, %after_bb35
  br i1 %102, label %"for blur_y.s0.x.x.rebased46.preheader", label %"end for blur_y.s0.x.x.rebased47", !prof !386

"for blur_y.s0.x.x.rebased46.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased40"
  %1571 = sext i32 %t1688 to i64
  br label %"for blur_y.s0.x.x.rebased46"

after_bb42:                                       ; preds = %"for blur_y.s0.x.x.rebased39", %"produce blur_x45"
  %indvars.iv.next3147 = add nuw nsw i64 %indvars.iv3146, 1
  %.not2696 = icmp eq i64 %indvars.iv.next3147, %184
  br i1 %.not2696, label %"end for blur_y.s0.x.x.rebased40", label %"for blur_y.s0.x.x.rebased39"

"produce blur_x45":                               ; preds = %"for blur_y.s0.x.x.rebased39"
  %t690 = add nsw i32 %1568, %t1687
  %1572 = sext i32 %t690 to i64
  %1573 = getelementptr inbounds i16, i16* %read_input, i64 %1572
  %1574 = getelementptr inbounds i16, i16* %1573, i64 1
  %1575 = bitcast i16* %1574 to <16 x i16>*
  %1576 = load <16 x i16>, <16 x i16>* %1575, align 2, !tbaa !396
  %1577 = getelementptr inbounds i16, i16* %1573, i64 17
  %1578 = bitcast i16* %1577 to <16 x i16>*
  %1579 = load <16 x i16>, <16 x i16>* %1578, align 2, !tbaa !396
  %1580 = bitcast i16* %1573 to <16 x i16>*
  %1581 = load <16 x i16>, <16 x i16>* %1580, align 2, !tbaa !396
  %1582 = getelementptr inbounds i16, i16* %1573, i64 16
  %1583 = bitcast i16* %1582 to <16 x i16>*
  %1584 = load <16 x i16>, <16 x i16>* %1583, align 2, !tbaa !396
  %1585 = getelementptr inbounds i16, i16* %1573, i64 2
  %1586 = bitcast i16* %1585 to <16 x i16>*
  %1587 = load <16 x i16>, <16 x i16>* %1586, align 2, !tbaa !396
  %1588 = getelementptr inbounds i16, i16* %1573, i64 18
  %1589 = bitcast i16* %1588 to <16 x i16>*
  %1590 = load <16 x i16>, <16 x i16>* %1589, align 2, !tbaa !396
  %1591 = getelementptr inbounds i16, i16* %1573, i64 4
  %1592 = bitcast i16* %1591 to <16 x i16>*
  %1593 = load <16 x i16>, <16 x i16>* %1592, align 2, !tbaa !396
  %1594 = getelementptr inbounds i16, i16* %1573, i64 20
  %1595 = bitcast i16* %1594 to <16 x i16>*
  %1596 = load <16 x i16>, <16 x i16>* %1595, align 2, !tbaa !396
  %1597 = getelementptr inbounds i16, i16* %1573, i64 3
  %1598 = bitcast i16* %1597 to <16 x i16>*
  %1599 = load <16 x i16>, <16 x i16>* %1598, align 2, !tbaa !396
  %1600 = getelementptr inbounds i16, i16* %1573, i64 19
  %1601 = bitcast i16* %1600 to <16 x i16>*
  %1602 = load <16 x i16>, <16 x i16>* %1601, align 2, !tbaa !396
  %1603 = add <16 x i16> %1581, %1576
  %1604 = add <16 x i16> %1603, %1587
  %1605 = add <16 x i16> %1604, %1593
  %1606 = add <16 x i16> %1605, %1599
  %1607 = add <16 x i16> %1584, %1579
  %1608 = add <16 x i16> %1607, %1590
  %1609 = add <16 x i16> %1608, %1596
  %1610 = add <16 x i16> %1609, %1602
  %1611 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1606, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1612 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1610, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1613 = shufflevector <16 x i16> %1611, <16 x i16> %1612, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1614 = lshr <32 x i16> %1613, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1615 = shufflevector <32 x i16> %1614, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1616 = shl nsw i64 %1565, 5
  %1617 = add nsw i64 %1616, %1509
  %1618 = getelementptr inbounds i16, i16* %blur_x, i64 %1617
  %1619 = bitcast i16* %1618 to <16 x i16>*
  store <16 x i16> %1615, <16 x i16>* %1619, align 2, !tbaa !399
  %1620 = shufflevector <32 x i16> %1614, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1621 = getelementptr inbounds i16, i16* %1618, i64 16
  %1622 = bitcast i16* %1621 to <16 x i16>*
  store <16 x i16> %1620, <16 x i16>* %1622, align 2, !tbaa !399
  br label %after_bb42

"for blur_y.s0.x.x.rebased46":                    ; preds = %"for blur_y.s0.x.x.rebased46.preheader", %after_bb49
  %blur_y.s0.x.x.rebased48 = phi i32 [ %1627, %after_bb49 ], [ 0, %"for blur_y.s0.x.x.rebased46.preheader" ]
  %t2221 = add nsw i32 %blur_y.s0.x.x.rebased48, %t1626
  %1623 = icmp slt i32 %t2221, 1
  %1624 = shl nsw i32 %t2221, 5
  %1625 = icmp sgt i32 %4, %1624
  %1626 = or i1 %1623, %1625
  br i1 %1626, label %then_bb50, label %after_bb49

"end for blur_y.s0.x.x.rebased47":                ; preds = %after_bb49, %"end for blur_y.s0.x.x.rebased40"
  br i1 %34, label %"produce blur_x57", label %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge"

"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased47"
  %.pre3379 = add nsw i32 %a26, 2
  %.pre3381 = and i32 %.pre3379, 7
  br label %after_bb54

after_bb49:                                       ; preds = %"for blur_y.s0.x.x.rebased46", %then_bb50
  %1627 = add nuw nsw i32 %blur_y.s0.x.x.rebased48, 1
  %.not2695 = icmp eq i32 %1627, %t1683
  br i1 %.not2695, label %"end for blur_y.s0.x.x.rebased47", label %"for blur_y.s0.x.x.rebased46"

then_bb50:                                        ; preds = %"for blur_y.s0.x.x.rebased46"
  %1628 = icmp sgt i32 %a14, %1624
  %b90 = select i1 %1628, i32 %1624, i32 %a14
  %1629 = icmp slt i32 %b90, %4
  %blur_x.s0.x.v1.base.s53 = select i1 %1629, i32 %b90, i32 %4
  %t692 = add nsw i32 %blur_x.s0.x.v1.base.s53, %t1687
  %1630 = sext i32 %t692 to i64
  %1631 = getelementptr inbounds i16, i16* %read_input, i64 %1630
  %1632 = getelementptr inbounds i16, i16* %1631, i64 1
  %1633 = bitcast i16* %1632 to <16 x i16>*
  %1634 = load <16 x i16>, <16 x i16>* %1633, align 2, !tbaa !396
  %1635 = getelementptr inbounds i16, i16* %1631, i64 17
  %1636 = bitcast i16* %1635 to <16 x i16>*
  %1637 = load <16 x i16>, <16 x i16>* %1636, align 2, !tbaa !396
  %1638 = bitcast i16* %1631 to <16 x i16>*
  %1639 = load <16 x i16>, <16 x i16>* %1638, align 2, !tbaa !396
  %1640 = getelementptr inbounds i16, i16* %1631, i64 16
  %1641 = bitcast i16* %1640 to <16 x i16>*
  %1642 = load <16 x i16>, <16 x i16>* %1641, align 2, !tbaa !396
  %1643 = getelementptr inbounds i16, i16* %1631, i64 2
  %1644 = bitcast i16* %1643 to <16 x i16>*
  %1645 = load <16 x i16>, <16 x i16>* %1644, align 2, !tbaa !396
  %1646 = getelementptr inbounds i16, i16* %1631, i64 18
  %1647 = bitcast i16* %1646 to <16 x i16>*
  %1648 = load <16 x i16>, <16 x i16>* %1647, align 2, !tbaa !396
  %1649 = getelementptr inbounds i16, i16* %1631, i64 4
  %1650 = bitcast i16* %1649 to <16 x i16>*
  %1651 = load <16 x i16>, <16 x i16>* %1650, align 2, !tbaa !396
  %1652 = getelementptr inbounds i16, i16* %1631, i64 20
  %1653 = bitcast i16* %1652 to <16 x i16>*
  %1654 = load <16 x i16>, <16 x i16>* %1653, align 2, !tbaa !396
  %1655 = getelementptr inbounds i16, i16* %1631, i64 3
  %1656 = bitcast i16* %1655 to <16 x i16>*
  %1657 = load <16 x i16>, <16 x i16>* %1656, align 2, !tbaa !396
  %1658 = getelementptr inbounds i16, i16* %1631, i64 19
  %1659 = bitcast i16* %1658 to <16 x i16>*
  %1660 = load <16 x i16>, <16 x i16>* %1659, align 2, !tbaa !396
  %1661 = add <16 x i16> %1639, %1634
  %1662 = add <16 x i16> %1661, %1645
  %1663 = add <16 x i16> %1662, %1651
  %1664 = add <16 x i16> %1663, %1657
  %1665 = add <16 x i16> %1642, %1637
  %1666 = add <16 x i16> %1665, %1648
  %1667 = add <16 x i16> %1666, %1654
  %1668 = add <16 x i16> %1667, %1660
  %1669 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1664, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1670 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1668, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1671 = shufflevector <16 x i16> %1669, <16 x i16> %1670, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1672 = lshr <32 x i16> %1671, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1673 = shufflevector <32 x i16> %1672, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1674 = sext i32 %blur_x.s0.x.v1.base.s53 to i64
  %1675 = add nsw i64 %1674, %1571
  %1676 = getelementptr inbounds i16, i16* %blur_x, i64 %1675
  %1677 = bitcast i16* %1676 to <16 x i16>*
  store <16 x i16> %1673, <16 x i16>* %1677, align 2, !tbaa !399
  %1678 = shufflevector <32 x i16> %1672, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1679 = getelementptr inbounds i16, i16* %1676, i64 16
  %1680 = bitcast i16* %1679 to <16 x i16>*
  store <16 x i16> %1678, <16 x i16>* %1680, align 2, !tbaa !399
  br label %after_bb49

after_bb54:                                       ; preds = %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge", %"produce blur_x57"
  %.pre-phi3382 = phi i32 [ %.pre3381, %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge" ], [ %1728, %"produce blur_x57" ]
  %1681 = mul nsw i32 %.pre-phi3382, %a73
  %t1694 = sub nsw i32 %1681, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased58.preheader", label %"end for blur_y.s0.x.x.rebased59", !prof !386

"for blur_y.s0.x.x.rebased58.preheader":          ; preds = %after_bb54
  %1682 = sext i32 %t1694 to i64
  br label %"for blur_y.s0.x.x.rebased58"

"produce blur_x57":                               ; preds = %"end for blur_y.s0.x.x.rebased47"
  %1683 = getelementptr inbounds i16, i16* %read_input, i64 %105
  %1684 = getelementptr inbounds i16, i16* %1683, i64 -31
  %1685 = bitcast i16* %1684 to <16 x i16>*
  %1686 = load <16 x i16>, <16 x i16>* %1685, align 2, !tbaa !396
  %1687 = getelementptr inbounds i16, i16* %1683, i64 -15
  %1688 = bitcast i16* %1687 to <16 x i16>*
  %1689 = load <16 x i16>, <16 x i16>* %1688, align 2, !tbaa !396
  %1690 = getelementptr inbounds i16, i16* %1683, i64 -32
  %1691 = bitcast i16* %1690 to <16 x i16>*
  %1692 = load <16 x i16>, <16 x i16>* %1691, align 2, !tbaa !396
  %1693 = getelementptr inbounds i16, i16* %1683, i64 -16
  %1694 = bitcast i16* %1693 to <16 x i16>*
  %1695 = load <16 x i16>, <16 x i16>* %1694, align 2, !tbaa !396
  %1696 = getelementptr inbounds i16, i16* %1683, i64 -30
  %1697 = bitcast i16* %1696 to <16 x i16>*
  %1698 = load <16 x i16>, <16 x i16>* %1697, align 2, !tbaa !396
  %1699 = getelementptr inbounds i16, i16* %1683, i64 -14
  %1700 = bitcast i16* %1699 to <16 x i16>*
  %1701 = load <16 x i16>, <16 x i16>* %1700, align 2, !tbaa !396
  %1702 = getelementptr inbounds i16, i16* %1683, i64 -28
  %1703 = bitcast i16* %1702 to <16 x i16>*
  %1704 = load <16 x i16>, <16 x i16>* %1703, align 2, !tbaa !396
  %1705 = getelementptr inbounds i16, i16* %1683, i64 -12
  %1706 = bitcast i16* %1705 to <16 x i16>*
  %1707 = load <16 x i16>, <16 x i16>* %1706, align 2, !tbaa !396
  %1708 = getelementptr inbounds i16, i16* %1683, i64 -29
  %1709 = bitcast i16* %1708 to <16 x i16>*
  %1710 = load <16 x i16>, <16 x i16>* %1709, align 2, !tbaa !396
  %1711 = getelementptr inbounds i16, i16* %1683, i64 -13
  %1712 = bitcast i16* %1711 to <16 x i16>*
  %1713 = load <16 x i16>, <16 x i16>* %1712, align 2, !tbaa !396
  %1714 = add <16 x i16> %1692, %1686
  %1715 = add <16 x i16> %1714, %1698
  %1716 = add <16 x i16> %1715, %1704
  %1717 = add <16 x i16> %1716, %1710
  %1718 = add <16 x i16> %1695, %1689
  %1719 = add <16 x i16> %1718, %1701
  %1720 = add <16 x i16> %1719, %1707
  %1721 = add <16 x i16> %1720, %1713
  %1722 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1717, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1723 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1721, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1724 = shufflevector <16 x i16> %1722, <16 x i16> %1723, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1725 = lshr <32 x i16> %1724, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1726 = shufflevector <32 x i16> %1725, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1727 = add nsw i32 %a26, 2
  %1728 = and i32 %1727, 7
  %1729 = zext i32 %1728 to i64
  %1730 = mul nsw i64 %97, %1729
  %1731 = add nsw i64 %99, %1730
  %1732 = getelementptr inbounds i16, i16* %blur_x, i64 %1731
  %1733 = getelementptr inbounds i16, i16* %1732, i64 -32
  %1734 = bitcast i16* %1733 to <16 x i16>*
  store <16 x i16> %1726, <16 x i16>* %1734, align 2, !tbaa !399
  %1735 = shufflevector <32 x i16> %1725, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1736 = getelementptr inbounds i16, i16* %1732, i64 -16
  %1737 = bitcast i16* %1736 to <16 x i16>*
  store <16 x i16> %1735, <16 x i16>* %1737, align 2, !tbaa !399
  br label %after_bb54

"for blur_y.s0.x.x.rebased58":                    ; preds = %"for blur_y.s0.x.x.rebased58.preheader", %after_bb61
  %indvars.iv3149 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased58.preheader" ], [ %indvars.iv.next3150, %after_bb61 ]
  %1738 = add nsw i64 %indvars.iv3149, %101
  %1739 = icmp slt i64 %1738, 1
  %1740 = trunc i64 %1738 to i32
  %1741 = shl nsw i32 %1740, 5
  %1742 = icmp sgt i32 %4, %1741
  %1743 = or i1 %1739, %1742
  br i1 %1743, label %"produce blur_x64", label %after_bb61

"end for blur_y.s0.x.x.rebased59":                ; preds = %after_bb61, %after_bb54
  br i1 %102, label %"for blur_y.s0.x.x.rebased65.preheader", label %"end for blur_y.s0.x.x.rebased66", !prof !386

"for blur_y.s0.x.x.rebased65.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased59"
  %1744 = sext i32 %t1694 to i64
  br label %"for blur_y.s0.x.x.rebased65"

after_bb61:                                       ; preds = %"for blur_y.s0.x.x.rebased58", %"produce blur_x64"
  %indvars.iv.next3150 = add nuw nsw i64 %indvars.iv3149, 1
  %.not2694 = icmp eq i64 %indvars.iv.next3150, %184
  br i1 %.not2694, label %"end for blur_y.s0.x.x.rebased59", label %"for blur_y.s0.x.x.rebased58"

"produce blur_x64":                               ; preds = %"for blur_y.s0.x.x.rebased58"
  %t696 = add nsw i32 %1741, %t1693
  %1745 = sext i32 %t696 to i64
  %1746 = getelementptr inbounds i16, i16* %read_input, i64 %1745
  %1747 = getelementptr inbounds i16, i16* %1746, i64 1
  %1748 = bitcast i16* %1747 to <16 x i16>*
  %1749 = load <16 x i16>, <16 x i16>* %1748, align 2, !tbaa !396
  %1750 = getelementptr inbounds i16, i16* %1746, i64 17
  %1751 = bitcast i16* %1750 to <16 x i16>*
  %1752 = load <16 x i16>, <16 x i16>* %1751, align 2, !tbaa !396
  %1753 = bitcast i16* %1746 to <16 x i16>*
  %1754 = load <16 x i16>, <16 x i16>* %1753, align 2, !tbaa !396
  %1755 = getelementptr inbounds i16, i16* %1746, i64 16
  %1756 = bitcast i16* %1755 to <16 x i16>*
  %1757 = load <16 x i16>, <16 x i16>* %1756, align 2, !tbaa !396
  %1758 = getelementptr inbounds i16, i16* %1746, i64 2
  %1759 = bitcast i16* %1758 to <16 x i16>*
  %1760 = load <16 x i16>, <16 x i16>* %1759, align 2, !tbaa !396
  %1761 = getelementptr inbounds i16, i16* %1746, i64 18
  %1762 = bitcast i16* %1761 to <16 x i16>*
  %1763 = load <16 x i16>, <16 x i16>* %1762, align 2, !tbaa !396
  %1764 = getelementptr inbounds i16, i16* %1746, i64 4
  %1765 = bitcast i16* %1764 to <16 x i16>*
  %1766 = load <16 x i16>, <16 x i16>* %1765, align 2, !tbaa !396
  %1767 = getelementptr inbounds i16, i16* %1746, i64 20
  %1768 = bitcast i16* %1767 to <16 x i16>*
  %1769 = load <16 x i16>, <16 x i16>* %1768, align 2, !tbaa !396
  %1770 = getelementptr inbounds i16, i16* %1746, i64 3
  %1771 = bitcast i16* %1770 to <16 x i16>*
  %1772 = load <16 x i16>, <16 x i16>* %1771, align 2, !tbaa !396
  %1773 = getelementptr inbounds i16, i16* %1746, i64 19
  %1774 = bitcast i16* %1773 to <16 x i16>*
  %1775 = load <16 x i16>, <16 x i16>* %1774, align 2, !tbaa !396
  %1776 = add <16 x i16> %1754, %1749
  %1777 = add <16 x i16> %1776, %1760
  %1778 = add <16 x i16> %1777, %1766
  %1779 = add <16 x i16> %1778, %1772
  %1780 = add <16 x i16> %1757, %1752
  %1781 = add <16 x i16> %1780, %1763
  %1782 = add <16 x i16> %1781, %1769
  %1783 = add <16 x i16> %1782, %1775
  %1784 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1779, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1785 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1783, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1786 = shufflevector <16 x i16> %1784, <16 x i16> %1785, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1787 = lshr <32 x i16> %1786, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1788 = shufflevector <32 x i16> %1787, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1789 = shl nsw i64 %1738, 5
  %1790 = add nsw i64 %1789, %1682
  %1791 = getelementptr inbounds i16, i16* %blur_x, i64 %1790
  %1792 = bitcast i16* %1791 to <16 x i16>*
  store <16 x i16> %1788, <16 x i16>* %1792, align 2, !tbaa !399
  %1793 = shufflevector <32 x i16> %1787, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1794 = getelementptr inbounds i16, i16* %1791, i64 16
  %1795 = bitcast i16* %1794 to <16 x i16>*
  store <16 x i16> %1793, <16 x i16>* %1795, align 2, !tbaa !399
  br label %after_bb61

"for blur_y.s0.x.x.rebased65":                    ; preds = %"for blur_y.s0.x.x.rebased65.preheader", %after_bb68
  %blur_y.s0.x.x.rebased67 = phi i32 [ %1800, %after_bb68 ], [ 0, %"for blur_y.s0.x.x.rebased65.preheader" ]
  %t2223 = add nsw i32 %blur_y.s0.x.x.rebased67, %t1626
  %1796 = icmp slt i32 %t2223, 1
  %1797 = shl nsw i32 %t2223, 5
  %1798 = icmp sgt i32 %4, %1797
  %1799 = or i1 %1796, %1798
  br i1 %1799, label %then_bb69, label %after_bb68

"end for blur_y.s0.x.x.rebased66":                ; preds = %after_bb68, %"end for blur_y.s0.x.x.rebased59"
  br i1 %34, label %"produce blur_x76", label %"end for blur_y.s0.x.x.rebased66.after_bb73_crit_edge"

"end for blur_y.s0.x.x.rebased66.after_bb73_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased66"
  %.pre3383 = add nsw i32 %a26, 3
  %.pre3385 = and i32 %.pre3383, 7
  br label %after_bb73

after_bb68:                                       ; preds = %"for blur_y.s0.x.x.rebased65", %then_bb69
  %1800 = add nuw nsw i32 %blur_y.s0.x.x.rebased67, 1
  %.not2693 = icmp eq i32 %1800, %t1683
  br i1 %.not2693, label %"end for blur_y.s0.x.x.rebased66", label %"for blur_y.s0.x.x.rebased65"

then_bb69:                                        ; preds = %"for blur_y.s0.x.x.rebased65"
  %1801 = icmp sgt i32 %a14, %1797
  %b97 = select i1 %1801, i32 %1797, i32 %a14
  %1802 = icmp slt i32 %b97, %4
  %blur_x.s0.x.v1.base.s72 = select i1 %1802, i32 %b97, i32 %4
  %t698 = add nsw i32 %blur_x.s0.x.v1.base.s72, %t1693
  %1803 = sext i32 %t698 to i64
  %1804 = getelementptr inbounds i16, i16* %read_input, i64 %1803
  %1805 = getelementptr inbounds i16, i16* %1804, i64 1
  %1806 = bitcast i16* %1805 to <16 x i16>*
  %1807 = load <16 x i16>, <16 x i16>* %1806, align 2, !tbaa !396
  %1808 = getelementptr inbounds i16, i16* %1804, i64 17
  %1809 = bitcast i16* %1808 to <16 x i16>*
  %1810 = load <16 x i16>, <16 x i16>* %1809, align 2, !tbaa !396
  %1811 = bitcast i16* %1804 to <16 x i16>*
  %1812 = load <16 x i16>, <16 x i16>* %1811, align 2, !tbaa !396
  %1813 = getelementptr inbounds i16, i16* %1804, i64 16
  %1814 = bitcast i16* %1813 to <16 x i16>*
  %1815 = load <16 x i16>, <16 x i16>* %1814, align 2, !tbaa !396
  %1816 = getelementptr inbounds i16, i16* %1804, i64 2
  %1817 = bitcast i16* %1816 to <16 x i16>*
  %1818 = load <16 x i16>, <16 x i16>* %1817, align 2, !tbaa !396
  %1819 = getelementptr inbounds i16, i16* %1804, i64 18
  %1820 = bitcast i16* %1819 to <16 x i16>*
  %1821 = load <16 x i16>, <16 x i16>* %1820, align 2, !tbaa !396
  %1822 = getelementptr inbounds i16, i16* %1804, i64 4
  %1823 = bitcast i16* %1822 to <16 x i16>*
  %1824 = load <16 x i16>, <16 x i16>* %1823, align 2, !tbaa !396
  %1825 = getelementptr inbounds i16, i16* %1804, i64 20
  %1826 = bitcast i16* %1825 to <16 x i16>*
  %1827 = load <16 x i16>, <16 x i16>* %1826, align 2, !tbaa !396
  %1828 = getelementptr inbounds i16, i16* %1804, i64 3
  %1829 = bitcast i16* %1828 to <16 x i16>*
  %1830 = load <16 x i16>, <16 x i16>* %1829, align 2, !tbaa !396
  %1831 = getelementptr inbounds i16, i16* %1804, i64 19
  %1832 = bitcast i16* %1831 to <16 x i16>*
  %1833 = load <16 x i16>, <16 x i16>* %1832, align 2, !tbaa !396
  %1834 = add <16 x i16> %1812, %1807
  %1835 = add <16 x i16> %1834, %1818
  %1836 = add <16 x i16> %1835, %1824
  %1837 = add <16 x i16> %1836, %1830
  %1838 = add <16 x i16> %1815, %1810
  %1839 = add <16 x i16> %1838, %1821
  %1840 = add <16 x i16> %1839, %1827
  %1841 = add <16 x i16> %1840, %1833
  %1842 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1837, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1843 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1841, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1844 = shufflevector <16 x i16> %1842, <16 x i16> %1843, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1845 = lshr <32 x i16> %1844, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1846 = shufflevector <32 x i16> %1845, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1847 = sext i32 %blur_x.s0.x.v1.base.s72 to i64
  %1848 = add nsw i64 %1847, %1744
  %1849 = getelementptr inbounds i16, i16* %blur_x, i64 %1848
  %1850 = bitcast i16* %1849 to <16 x i16>*
  store <16 x i16> %1846, <16 x i16>* %1850, align 2, !tbaa !399
  %1851 = shufflevector <32 x i16> %1845, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1852 = getelementptr inbounds i16, i16* %1849, i64 16
  %1853 = bitcast i16* %1852 to <16 x i16>*
  store <16 x i16> %1851, <16 x i16>* %1853, align 2, !tbaa !399
  br label %after_bb68

after_bb73:                                       ; preds = %"end for blur_y.s0.x.x.rebased66.after_bb73_crit_edge", %"produce blur_x76"
  %.pre-phi3386 = phi i32 [ %.pre3385, %"end for blur_y.s0.x.x.rebased66.after_bb73_crit_edge" ], [ %1901, %"produce blur_x76" ]
  %1854 = mul nsw i32 %.pre-phi3386, %a73
  %t1700 = sub nsw i32 %1854, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased77.preheader", label %"end for blur_y.s0.x.x.rebased78", !prof !386

"for blur_y.s0.x.x.rebased77.preheader":          ; preds = %after_bb73
  %1855 = sext i32 %t1700 to i64
  br label %"for blur_y.s0.x.x.rebased77"

"produce blur_x76":                               ; preds = %"end for blur_y.s0.x.x.rebased66"
  %1856 = getelementptr inbounds i16, i16* %read_input, i64 %108
  %1857 = getelementptr inbounds i16, i16* %1856, i64 -31
  %1858 = bitcast i16* %1857 to <16 x i16>*
  %1859 = load <16 x i16>, <16 x i16>* %1858, align 2, !tbaa !396
  %1860 = getelementptr inbounds i16, i16* %1856, i64 -15
  %1861 = bitcast i16* %1860 to <16 x i16>*
  %1862 = load <16 x i16>, <16 x i16>* %1861, align 2, !tbaa !396
  %1863 = getelementptr inbounds i16, i16* %1856, i64 -32
  %1864 = bitcast i16* %1863 to <16 x i16>*
  %1865 = load <16 x i16>, <16 x i16>* %1864, align 2, !tbaa !396
  %1866 = getelementptr inbounds i16, i16* %1856, i64 -16
  %1867 = bitcast i16* %1866 to <16 x i16>*
  %1868 = load <16 x i16>, <16 x i16>* %1867, align 2, !tbaa !396
  %1869 = getelementptr inbounds i16, i16* %1856, i64 -30
  %1870 = bitcast i16* %1869 to <16 x i16>*
  %1871 = load <16 x i16>, <16 x i16>* %1870, align 2, !tbaa !396
  %1872 = getelementptr inbounds i16, i16* %1856, i64 -14
  %1873 = bitcast i16* %1872 to <16 x i16>*
  %1874 = load <16 x i16>, <16 x i16>* %1873, align 2, !tbaa !396
  %1875 = getelementptr inbounds i16, i16* %1856, i64 -28
  %1876 = bitcast i16* %1875 to <16 x i16>*
  %1877 = load <16 x i16>, <16 x i16>* %1876, align 2, !tbaa !396
  %1878 = getelementptr inbounds i16, i16* %1856, i64 -12
  %1879 = bitcast i16* %1878 to <16 x i16>*
  %1880 = load <16 x i16>, <16 x i16>* %1879, align 2, !tbaa !396
  %1881 = getelementptr inbounds i16, i16* %1856, i64 -29
  %1882 = bitcast i16* %1881 to <16 x i16>*
  %1883 = load <16 x i16>, <16 x i16>* %1882, align 2, !tbaa !396
  %1884 = getelementptr inbounds i16, i16* %1856, i64 -13
  %1885 = bitcast i16* %1884 to <16 x i16>*
  %1886 = load <16 x i16>, <16 x i16>* %1885, align 2, !tbaa !396
  %1887 = add <16 x i16> %1865, %1859
  %1888 = add <16 x i16> %1887, %1871
  %1889 = add <16 x i16> %1888, %1877
  %1890 = add <16 x i16> %1889, %1883
  %1891 = add <16 x i16> %1868, %1862
  %1892 = add <16 x i16> %1891, %1874
  %1893 = add <16 x i16> %1892, %1880
  %1894 = add <16 x i16> %1893, %1886
  %1895 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1890, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1896 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1894, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1897 = shufflevector <16 x i16> %1895, <16 x i16> %1896, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1898 = lshr <32 x i16> %1897, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1899 = shufflevector <32 x i16> %1898, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1900 = add nsw i32 %a26, 3
  %1901 = and i32 %1900, 7
  %1902 = zext i32 %1901 to i64
  %1903 = mul nsw i64 %97, %1902
  %1904 = add nsw i64 %99, %1903
  %1905 = getelementptr inbounds i16, i16* %blur_x, i64 %1904
  %1906 = getelementptr inbounds i16, i16* %1905, i64 -32
  %1907 = bitcast i16* %1906 to <16 x i16>*
  store <16 x i16> %1899, <16 x i16>* %1907, align 2, !tbaa !399
  %1908 = shufflevector <32 x i16> %1898, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1909 = getelementptr inbounds i16, i16* %1905, i64 -16
  %1910 = bitcast i16* %1909 to <16 x i16>*
  store <16 x i16> %1908, <16 x i16>* %1910, align 2, !tbaa !399
  br label %after_bb73

"for blur_y.s0.x.x.rebased77":                    ; preds = %"for blur_y.s0.x.x.rebased77.preheader", %after_bb80
  %indvars.iv3152 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased77.preheader" ], [ %indvars.iv.next3153, %after_bb80 ]
  %1911 = add nsw i64 %indvars.iv3152, %101
  %1912 = icmp slt i64 %1911, 1
  %1913 = trunc i64 %1911 to i32
  %1914 = shl nsw i32 %1913, 5
  %1915 = icmp sgt i32 %4, %1914
  %1916 = or i1 %1912, %1915
  br i1 %1916, label %"produce blur_x83", label %after_bb80

"end for blur_y.s0.x.x.rebased78":                ; preds = %after_bb80, %after_bb73
  br i1 %102, label %"for blur_y.s0.x.x.rebased84.preheader", label %"end for blur_y.s0.x.x.rebased85", !prof !386

"for blur_y.s0.x.x.rebased84.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased78"
  %1917 = sext i32 %t1700 to i64
  br label %"for blur_y.s0.x.x.rebased84"

after_bb80:                                       ; preds = %"for blur_y.s0.x.x.rebased77", %"produce blur_x83"
  %indvars.iv.next3153 = add nuw nsw i64 %indvars.iv3152, 1
  %.not2692 = icmp eq i64 %indvars.iv.next3153, %184
  br i1 %.not2692, label %"end for blur_y.s0.x.x.rebased78", label %"for blur_y.s0.x.x.rebased77"

"produce blur_x83":                               ; preds = %"for blur_y.s0.x.x.rebased77"
  %t702 = add nsw i32 %1914, %t1699
  %1918 = sext i32 %t702 to i64
  %1919 = getelementptr inbounds i16, i16* %read_input, i64 %1918
  %1920 = getelementptr inbounds i16, i16* %1919, i64 1
  %1921 = bitcast i16* %1920 to <16 x i16>*
  %1922 = load <16 x i16>, <16 x i16>* %1921, align 2, !tbaa !396
  %1923 = getelementptr inbounds i16, i16* %1919, i64 17
  %1924 = bitcast i16* %1923 to <16 x i16>*
  %1925 = load <16 x i16>, <16 x i16>* %1924, align 2, !tbaa !396
  %1926 = bitcast i16* %1919 to <16 x i16>*
  %1927 = load <16 x i16>, <16 x i16>* %1926, align 2, !tbaa !396
  %1928 = getelementptr inbounds i16, i16* %1919, i64 16
  %1929 = bitcast i16* %1928 to <16 x i16>*
  %1930 = load <16 x i16>, <16 x i16>* %1929, align 2, !tbaa !396
  %1931 = getelementptr inbounds i16, i16* %1919, i64 2
  %1932 = bitcast i16* %1931 to <16 x i16>*
  %1933 = load <16 x i16>, <16 x i16>* %1932, align 2, !tbaa !396
  %1934 = getelementptr inbounds i16, i16* %1919, i64 18
  %1935 = bitcast i16* %1934 to <16 x i16>*
  %1936 = load <16 x i16>, <16 x i16>* %1935, align 2, !tbaa !396
  %1937 = getelementptr inbounds i16, i16* %1919, i64 4
  %1938 = bitcast i16* %1937 to <16 x i16>*
  %1939 = load <16 x i16>, <16 x i16>* %1938, align 2, !tbaa !396
  %1940 = getelementptr inbounds i16, i16* %1919, i64 20
  %1941 = bitcast i16* %1940 to <16 x i16>*
  %1942 = load <16 x i16>, <16 x i16>* %1941, align 2, !tbaa !396
  %1943 = getelementptr inbounds i16, i16* %1919, i64 3
  %1944 = bitcast i16* %1943 to <16 x i16>*
  %1945 = load <16 x i16>, <16 x i16>* %1944, align 2, !tbaa !396
  %1946 = getelementptr inbounds i16, i16* %1919, i64 19
  %1947 = bitcast i16* %1946 to <16 x i16>*
  %1948 = load <16 x i16>, <16 x i16>* %1947, align 2, !tbaa !396
  %1949 = add <16 x i16> %1927, %1922
  %1950 = add <16 x i16> %1949, %1933
  %1951 = add <16 x i16> %1950, %1939
  %1952 = add <16 x i16> %1951, %1945
  %1953 = add <16 x i16> %1930, %1925
  %1954 = add <16 x i16> %1953, %1936
  %1955 = add <16 x i16> %1954, %1942
  %1956 = add <16 x i16> %1955, %1948
  %1957 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1952, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1958 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1956, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %1959 = shufflevector <16 x i16> %1957, <16 x i16> %1958, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1960 = lshr <32 x i16> %1959, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %1961 = shufflevector <32 x i16> %1960, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1962 = shl nsw i64 %1911, 5
  %1963 = add nsw i64 %1962, %1855
  %1964 = getelementptr inbounds i16, i16* %blur_x, i64 %1963
  %1965 = bitcast i16* %1964 to <16 x i16>*
  store <16 x i16> %1961, <16 x i16>* %1965, align 2, !tbaa !399
  %1966 = shufflevector <32 x i16> %1960, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1967 = getelementptr inbounds i16, i16* %1964, i64 16
  %1968 = bitcast i16* %1967 to <16 x i16>*
  store <16 x i16> %1966, <16 x i16>* %1968, align 2, !tbaa !399
  br label %after_bb80

"for blur_y.s0.x.x.rebased84":                    ; preds = %"for blur_y.s0.x.x.rebased84.preheader", %after_bb87
  %blur_y.s0.x.x.rebased86 = phi i32 [ %1973, %after_bb87 ], [ 0, %"for blur_y.s0.x.x.rebased84.preheader" ]
  %t2225 = add nsw i32 %blur_y.s0.x.x.rebased86, %t1626
  %1969 = icmp slt i32 %t2225, 1
  %1970 = shl nsw i32 %t2225, 5
  %1971 = icmp sgt i32 %4, %1970
  %1972 = or i1 %1969, %1971
  br i1 %1972, label %then_bb88, label %after_bb87

"end for blur_y.s0.x.x.rebased85":                ; preds = %after_bb87, %"end for blur_y.s0.x.x.rebased78"
  br i1 %34, label %"produce blur_x95", label %"end for blur_y.s0.x.x.rebased85.after_bb92_crit_edge"

"end for blur_y.s0.x.x.rebased85.after_bb92_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased85"
  %.pre3387 = add nsw i32 %a26, 4
  %.pre3389 = and i32 %.pre3387, 7
  br label %after_bb92

after_bb87:                                       ; preds = %"for blur_y.s0.x.x.rebased84", %then_bb88
  %1973 = add nuw nsw i32 %blur_y.s0.x.x.rebased86, 1
  %.not2691 = icmp eq i32 %1973, %t1683
  br i1 %.not2691, label %"end for blur_y.s0.x.x.rebased85", label %"for blur_y.s0.x.x.rebased84"

then_bb88:                                        ; preds = %"for blur_y.s0.x.x.rebased84"
  %1974 = icmp sgt i32 %a14, %1970
  %b104 = select i1 %1974, i32 %1970, i32 %a14
  %1975 = icmp slt i32 %b104, %4
  %blur_x.s0.x.v1.base.s91 = select i1 %1975, i32 %b104, i32 %4
  %t704 = add nsw i32 %blur_x.s0.x.v1.base.s91, %t1699
  %1976 = sext i32 %t704 to i64
  %1977 = getelementptr inbounds i16, i16* %read_input, i64 %1976
  %1978 = getelementptr inbounds i16, i16* %1977, i64 1
  %1979 = bitcast i16* %1978 to <16 x i16>*
  %1980 = load <16 x i16>, <16 x i16>* %1979, align 2, !tbaa !396
  %1981 = getelementptr inbounds i16, i16* %1977, i64 17
  %1982 = bitcast i16* %1981 to <16 x i16>*
  %1983 = load <16 x i16>, <16 x i16>* %1982, align 2, !tbaa !396
  %1984 = bitcast i16* %1977 to <16 x i16>*
  %1985 = load <16 x i16>, <16 x i16>* %1984, align 2, !tbaa !396
  %1986 = getelementptr inbounds i16, i16* %1977, i64 16
  %1987 = bitcast i16* %1986 to <16 x i16>*
  %1988 = load <16 x i16>, <16 x i16>* %1987, align 2, !tbaa !396
  %1989 = getelementptr inbounds i16, i16* %1977, i64 2
  %1990 = bitcast i16* %1989 to <16 x i16>*
  %1991 = load <16 x i16>, <16 x i16>* %1990, align 2, !tbaa !396
  %1992 = getelementptr inbounds i16, i16* %1977, i64 18
  %1993 = bitcast i16* %1992 to <16 x i16>*
  %1994 = load <16 x i16>, <16 x i16>* %1993, align 2, !tbaa !396
  %1995 = getelementptr inbounds i16, i16* %1977, i64 4
  %1996 = bitcast i16* %1995 to <16 x i16>*
  %1997 = load <16 x i16>, <16 x i16>* %1996, align 2, !tbaa !396
  %1998 = getelementptr inbounds i16, i16* %1977, i64 20
  %1999 = bitcast i16* %1998 to <16 x i16>*
  %2000 = load <16 x i16>, <16 x i16>* %1999, align 2, !tbaa !396
  %2001 = getelementptr inbounds i16, i16* %1977, i64 3
  %2002 = bitcast i16* %2001 to <16 x i16>*
  %2003 = load <16 x i16>, <16 x i16>* %2002, align 2, !tbaa !396
  %2004 = getelementptr inbounds i16, i16* %1977, i64 19
  %2005 = bitcast i16* %2004 to <16 x i16>*
  %2006 = load <16 x i16>, <16 x i16>* %2005, align 2, !tbaa !396
  %2007 = add <16 x i16> %1985, %1980
  %2008 = add <16 x i16> %2007, %1991
  %2009 = add <16 x i16> %2008, %1997
  %2010 = add <16 x i16> %2009, %2003
  %2011 = add <16 x i16> %1988, %1983
  %2012 = add <16 x i16> %2011, %1994
  %2013 = add <16 x i16> %2012, %2000
  %2014 = add <16 x i16> %2013, %2006
  %2015 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2010, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2016 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2014, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2017 = shufflevector <16 x i16> %2015, <16 x i16> %2016, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2018 = lshr <32 x i16> %2017, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2019 = shufflevector <32 x i16> %2018, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2020 = sext i32 %blur_x.s0.x.v1.base.s91 to i64
  %2021 = add nsw i64 %2020, %1917
  %2022 = getelementptr inbounds i16, i16* %blur_x, i64 %2021
  %2023 = bitcast i16* %2022 to <16 x i16>*
  store <16 x i16> %2019, <16 x i16>* %2023, align 2, !tbaa !399
  %2024 = shufflevector <32 x i16> %2018, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2025 = getelementptr inbounds i16, i16* %2022, i64 16
  %2026 = bitcast i16* %2025 to <16 x i16>*
  store <16 x i16> %2024, <16 x i16>* %2026, align 2, !tbaa !399
  br label %after_bb87

after_bb92:                                       ; preds = %"end for blur_y.s0.x.x.rebased85.after_bb92_crit_edge", %"produce blur_x95"
  %.pre-phi3390 = phi i32 [ %.pre3389, %"end for blur_y.s0.x.x.rebased85.after_bb92_crit_edge" ], [ %2092, %"produce blur_x95" ]
  %2027 = mul nsw i32 %.pre-phi3390, %a73
  %t1706 = sub nsw i32 %2027, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased96.preheader", label %"end for blur_y.s0.x.x.rebased97", !prof !386

"for blur_y.s0.x.x.rebased96.preheader":          ; preds = %after_bb92
  %2028 = sext i32 %t1706 to i64
  %2029 = zext i32 %.pre-phi3378 to i64
  %2030 = mul nsw i64 %2029, %112
  %2031 = sub nsw i64 %2030, %96
  %2032 = zext i32 %.pre-phi to i64
  %2033 = mul nsw i64 %2032, %112
  %2034 = sub nsw i64 %2033, %96
  %2035 = zext i32 %.pre-phi3382 to i64
  %2036 = mul nsw i64 %2035, %112
  %2037 = sub nsw i64 %2036, %96
  %2038 = zext i32 %.pre-phi3390 to i64
  %2039 = mul nsw i64 %2038, %112
  %2040 = sub nsw i64 %2039, %96
  %2041 = zext i32 %.pre-phi3386 to i64
  %2042 = mul nsw i64 %2041, %112
  %2043 = sub nsw i64 %2042, %96
  %2044 = sext i32 %a26 to i64
  %2045 = mul nsw i64 %2044, %113
  %2046 = add nsw i64 %2045, %116
  br label %"for blur_y.s0.x.x.rebased96"

"produce blur_x95":                               ; preds = %"end for blur_y.s0.x.x.rebased85"
  %2047 = getelementptr inbounds i16, i16* %read_input, i64 %111
  %2048 = getelementptr inbounds i16, i16* %2047, i64 -31
  %2049 = bitcast i16* %2048 to <16 x i16>*
  %2050 = load <16 x i16>, <16 x i16>* %2049, align 2, !tbaa !396
  %2051 = getelementptr inbounds i16, i16* %2047, i64 -15
  %2052 = bitcast i16* %2051 to <16 x i16>*
  %2053 = load <16 x i16>, <16 x i16>* %2052, align 2, !tbaa !396
  %2054 = getelementptr inbounds i16, i16* %2047, i64 -32
  %2055 = bitcast i16* %2054 to <16 x i16>*
  %2056 = load <16 x i16>, <16 x i16>* %2055, align 2, !tbaa !396
  %2057 = getelementptr inbounds i16, i16* %2047, i64 -16
  %2058 = bitcast i16* %2057 to <16 x i16>*
  %2059 = load <16 x i16>, <16 x i16>* %2058, align 2, !tbaa !396
  %2060 = getelementptr inbounds i16, i16* %2047, i64 -30
  %2061 = bitcast i16* %2060 to <16 x i16>*
  %2062 = load <16 x i16>, <16 x i16>* %2061, align 2, !tbaa !396
  %2063 = getelementptr inbounds i16, i16* %2047, i64 -14
  %2064 = bitcast i16* %2063 to <16 x i16>*
  %2065 = load <16 x i16>, <16 x i16>* %2064, align 2, !tbaa !396
  %2066 = getelementptr inbounds i16, i16* %2047, i64 -28
  %2067 = bitcast i16* %2066 to <16 x i16>*
  %2068 = load <16 x i16>, <16 x i16>* %2067, align 2, !tbaa !396
  %2069 = getelementptr inbounds i16, i16* %2047, i64 -12
  %2070 = bitcast i16* %2069 to <16 x i16>*
  %2071 = load <16 x i16>, <16 x i16>* %2070, align 2, !tbaa !396
  %2072 = getelementptr inbounds i16, i16* %2047, i64 -29
  %2073 = bitcast i16* %2072 to <16 x i16>*
  %2074 = load <16 x i16>, <16 x i16>* %2073, align 2, !tbaa !396
  %2075 = getelementptr inbounds i16, i16* %2047, i64 -13
  %2076 = bitcast i16* %2075 to <16 x i16>*
  %2077 = load <16 x i16>, <16 x i16>* %2076, align 2, !tbaa !396
  %2078 = add <16 x i16> %2056, %2050
  %2079 = add <16 x i16> %2078, %2062
  %2080 = add <16 x i16> %2079, %2068
  %2081 = add <16 x i16> %2080, %2074
  %2082 = add <16 x i16> %2059, %2053
  %2083 = add <16 x i16> %2082, %2065
  %2084 = add <16 x i16> %2083, %2071
  %2085 = add <16 x i16> %2084, %2077
  %2086 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2081, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2087 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2085, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2088 = shufflevector <16 x i16> %2086, <16 x i16> %2087, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2089 = lshr <32 x i16> %2088, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2090 = shufflevector <32 x i16> %2089, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2091 = add nsw i32 %a26, 4
  %2092 = and i32 %2091, 7
  %2093 = zext i32 %2092 to i64
  %2094 = mul nsw i64 %97, %2093
  %2095 = add nsw i64 %99, %2094
  %2096 = getelementptr inbounds i16, i16* %blur_x, i64 %2095
  %2097 = getelementptr inbounds i16, i16* %2096, i64 -32
  %2098 = bitcast i16* %2097 to <16 x i16>*
  store <16 x i16> %2090, <16 x i16>* %2098, align 2, !tbaa !399
  %2099 = shufflevector <32 x i16> %2089, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2100 = getelementptr inbounds i16, i16* %2096, i64 -16
  %2101 = bitcast i16* %2100 to <16 x i16>*
  store <16 x i16> %2099, <16 x i16>* %2101, align 2, !tbaa !399
  %2102 = zext i32 %.pre-phi3378 to i64
  %2103 = mul nsw i64 %2102, %112
  %2104 = add nsw i64 %2103, %94
  %2105 = getelementptr inbounds i16, i16* %blur_x, i64 %2104
  %2106 = getelementptr inbounds i16, i16* %2105, i64 -32
  %2107 = bitcast i16* %2106 to <16 x i16>*
  %2108 = load <16 x i16>, <16 x i16>* %2107, align 2, !tbaa !399
  %2109 = getelementptr inbounds i16, i16* %2105, i64 -16
  %2110 = bitcast i16* %2109 to <16 x i16>*
  %2111 = load <16 x i16>, <16 x i16>* %2110, align 2, !tbaa !399
  %2112 = zext i32 %.pre-phi to i64
  %2113 = mul nsw i64 %2112, %112
  %2114 = add nsw i64 %2113, %94
  %2115 = getelementptr inbounds i16, i16* %blur_x, i64 %2114
  %2116 = getelementptr inbounds i16, i16* %2115, i64 -32
  %2117 = bitcast i16* %2116 to <16 x i16>*
  %2118 = load <16 x i16>, <16 x i16>* %2117, align 2, !tbaa !399
  %2119 = getelementptr inbounds i16, i16* %2115, i64 -16
  %2120 = bitcast i16* %2119 to <16 x i16>*
  %2121 = load <16 x i16>, <16 x i16>* %2120, align 2, !tbaa !399
  %2122 = zext i32 %.pre-phi3382 to i64
  %2123 = mul nsw i64 %2122, %112
  %2124 = add nsw i64 %2123, %94
  %2125 = getelementptr inbounds i16, i16* %blur_x, i64 %2124
  %2126 = getelementptr inbounds i16, i16* %2125, i64 -32
  %2127 = bitcast i16* %2126 to <16 x i16>*
  %2128 = load <16 x i16>, <16 x i16>* %2127, align 2, !tbaa !399
  %2129 = getelementptr inbounds i16, i16* %2125, i64 -16
  %2130 = bitcast i16* %2129 to <16 x i16>*
  %2131 = load <16 x i16>, <16 x i16>* %2130, align 2, !tbaa !399
  %2132 = mul nsw i64 %2093, %112
  %2133 = add nsw i64 %2132, %94
  %2134 = getelementptr inbounds i16, i16* %blur_x, i64 %2133
  %2135 = getelementptr inbounds i16, i16* %2134, i64 -32
  %2136 = bitcast i16* %2135 to <16 x i16>*
  %2137 = load <16 x i16>, <16 x i16>* %2136, align 2, !tbaa !399
  %2138 = getelementptr inbounds i16, i16* %2134, i64 -16
  %2139 = bitcast i16* %2138 to <16 x i16>*
  %2140 = load <16 x i16>, <16 x i16>* %2139, align 2, !tbaa !399
  %2141 = zext i32 %.pre-phi3386 to i64
  %2142 = mul nsw i64 %2141, %112
  %2143 = add nsw i64 %2142, %94
  %2144 = getelementptr inbounds i16, i16* %blur_x, i64 %2143
  %2145 = getelementptr inbounds i16, i16* %2144, i64 -32
  %2146 = bitcast i16* %2145 to <16 x i16>*
  %2147 = load <16 x i16>, <16 x i16>* %2146, align 2, !tbaa !399
  %2148 = getelementptr inbounds i16, i16* %2144, i64 -16
  %2149 = bitcast i16* %2148 to <16 x i16>*
  %2150 = load <16 x i16>, <16 x i16>* %2149, align 2, !tbaa !399
  %2151 = add <16 x i16> %2118, %2108
  %2152 = add <16 x i16> %2151, %2128
  %2153 = add <16 x i16> %2152, %2137
  %2154 = add <16 x i16> %2153, %2147
  %2155 = add <16 x i16> %2121, %2111
  %2156 = add <16 x i16> %2155, %2131
  %2157 = add <16 x i16> %2156, %2140
  %2158 = add <16 x i16> %2157, %2150
  %2159 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2154, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2160 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2158, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2161 = shufflevector <16 x i16> %2159, <16 x i16> %2160, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2162 = lshr <32 x i16> %2161, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2163 = shufflevector <32 x i16> %2162, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2164 = sext i32 %a26 to i64
  %2165 = mul nsw i64 %2164, %113
  %2166 = add nsw i64 %115, %2165
  %2167 = getelementptr inbounds i16, i16* %66, i64 %2166
  %2168 = getelementptr inbounds i16, i16* %2167, i64 -32
  %2169 = bitcast i16* %2168 to <16 x i16>*
  store <16 x i16> %2163, <16 x i16>* %2169, align 2, !tbaa !401
  %2170 = shufflevector <32 x i16> %2162, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2171 = getelementptr inbounds i16, i16* %2167, i64 -16
  %2172 = bitcast i16* %2171 to <16 x i16>*
  store <16 x i16> %2170, <16 x i16>* %2172, align 2, !tbaa !401
  br label %after_bb92

"for blur_y.s0.x.x.rebased96":                    ; preds = %"for blur_y.s0.x.x.rebased96.preheader", %"consume blur_x103"
  %indvars.iv3155 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased96.preheader" ], [ %indvars.iv.next3156, %"consume blur_x103" ]
  %2173 = add nsw i64 %indvars.iv3155, %101
  %2174 = icmp slt i64 %2173, 1
  %2175 = trunc i64 %2173 to i32
  %2176 = shl nsw i32 %2175, 5
  %2177 = icmp sgt i32 %4, %2176
  %2178 = or i1 %2174, %2177
  br i1 %2178, label %"produce blur_x102", label %"for blur_y.s0.x.x.rebased96.consume blur_x103_crit_edge"

"for blur_y.s0.x.x.rebased96.consume blur_x103_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased96"
  %.pre3391 = shl nsw i64 %2173, 5
  br label %"consume blur_x103"

"end for blur_y.s0.x.x.rebased97":                ; preds = %"consume blur_x103", %after_bb92
  br i1 %102, label %"for blur_y.s0.x.x.rebased104.preheader", label %"end for blur_y.s0.x.x.rebased105", !prof !386

"for blur_y.s0.x.x.rebased104.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased97"
  %2179 = sext i32 %t1706 to i64
  %2180 = zext i32 %.pre-phi3378 to i64
  %2181 = mul nsw i64 %2180, %112
  %2182 = sub nsw i64 %2181, %96
  %2183 = zext i32 %.pre-phi to i64
  %2184 = mul nsw i64 %2183, %112
  %2185 = sub nsw i64 %2184, %96
  %2186 = zext i32 %.pre-phi3382 to i64
  %2187 = mul nsw i64 %2186, %112
  %2188 = sub nsw i64 %2187, %96
  %2189 = zext i32 %.pre-phi3390 to i64
  %2190 = mul nsw i64 %2189, %112
  %2191 = sub nsw i64 %2190, %96
  %2192 = zext i32 %.pre-phi3386 to i64
  %2193 = mul nsw i64 %2192, %112
  %2194 = sub nsw i64 %2193, %96
  %2195 = sext i32 %a26 to i64
  %2196 = mul nsw i64 %2195, %113
  %2197 = add nsw i64 %2196, %116
  br label %"for blur_y.s0.x.x.rebased104"

"produce blur_x102":                              ; preds = %"for blur_y.s0.x.x.rebased96"
  %t712 = add nsw i32 %2176, %109
  %2198 = sext i32 %t712 to i64
  %2199 = getelementptr inbounds i16, i16* %read_input, i64 %2198
  %2200 = getelementptr inbounds i16, i16* %2199, i64 1
  %2201 = bitcast i16* %2200 to <16 x i16>*
  %2202 = load <16 x i16>, <16 x i16>* %2201, align 2, !tbaa !396
  %2203 = getelementptr inbounds i16, i16* %2199, i64 17
  %2204 = bitcast i16* %2203 to <16 x i16>*
  %2205 = load <16 x i16>, <16 x i16>* %2204, align 2, !tbaa !396
  %2206 = bitcast i16* %2199 to <16 x i16>*
  %2207 = load <16 x i16>, <16 x i16>* %2206, align 2, !tbaa !396
  %2208 = getelementptr inbounds i16, i16* %2199, i64 16
  %2209 = bitcast i16* %2208 to <16 x i16>*
  %2210 = load <16 x i16>, <16 x i16>* %2209, align 2, !tbaa !396
  %2211 = getelementptr inbounds i16, i16* %2199, i64 2
  %2212 = bitcast i16* %2211 to <16 x i16>*
  %2213 = load <16 x i16>, <16 x i16>* %2212, align 2, !tbaa !396
  %2214 = getelementptr inbounds i16, i16* %2199, i64 18
  %2215 = bitcast i16* %2214 to <16 x i16>*
  %2216 = load <16 x i16>, <16 x i16>* %2215, align 2, !tbaa !396
  %2217 = getelementptr inbounds i16, i16* %2199, i64 4
  %2218 = bitcast i16* %2217 to <16 x i16>*
  %2219 = load <16 x i16>, <16 x i16>* %2218, align 2, !tbaa !396
  %2220 = getelementptr inbounds i16, i16* %2199, i64 20
  %2221 = bitcast i16* %2220 to <16 x i16>*
  %2222 = load <16 x i16>, <16 x i16>* %2221, align 2, !tbaa !396
  %2223 = getelementptr inbounds i16, i16* %2199, i64 3
  %2224 = bitcast i16* %2223 to <16 x i16>*
  %2225 = load <16 x i16>, <16 x i16>* %2224, align 2, !tbaa !396
  %2226 = getelementptr inbounds i16, i16* %2199, i64 19
  %2227 = bitcast i16* %2226 to <16 x i16>*
  %2228 = load <16 x i16>, <16 x i16>* %2227, align 2, !tbaa !396
  %2229 = add <16 x i16> %2207, %2202
  %2230 = add <16 x i16> %2229, %2213
  %2231 = add <16 x i16> %2230, %2219
  %2232 = add <16 x i16> %2231, %2225
  %2233 = add <16 x i16> %2210, %2205
  %2234 = add <16 x i16> %2233, %2216
  %2235 = add <16 x i16> %2234, %2222
  %2236 = add <16 x i16> %2235, %2228
  %2237 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2232, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2238 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2236, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2239 = shufflevector <16 x i16> %2237, <16 x i16> %2238, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2240 = lshr <32 x i16> %2239, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2241 = shufflevector <32 x i16> %2240, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2242 = shl nsw i64 %2173, 5
  %2243 = add nsw i64 %2242, %2028
  %2244 = getelementptr inbounds i16, i16* %blur_x, i64 %2243
  %2245 = bitcast i16* %2244 to <16 x i16>*
  store <16 x i16> %2241, <16 x i16>* %2245, align 2, !tbaa !399
  %2246 = shufflevector <32 x i16> %2240, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2247 = getelementptr inbounds i16, i16* %2244, i64 16
  %2248 = bitcast i16* %2247 to <16 x i16>*
  store <16 x i16> %2246, <16 x i16>* %2248, align 2, !tbaa !399
  br label %"consume blur_x103"

"consume blur_x103":                              ; preds = %"for blur_y.s0.x.x.rebased96.consume blur_x103_crit_edge", %"produce blur_x102"
  %.pre-phi3392 = phi i64 [ %.pre3391, %"for blur_y.s0.x.x.rebased96.consume blur_x103_crit_edge" ], [ %2242, %"produce blur_x102" ]
  %2249 = add nsw i64 %2031, %.pre-phi3392
  %2250 = getelementptr inbounds i16, i16* %blur_x, i64 %2249
  %2251 = bitcast i16* %2250 to <16 x i16>*
  %2252 = load <16 x i16>, <16 x i16>* %2251, align 2, !tbaa !399
  %2253 = getelementptr inbounds i16, i16* %2250, i64 16
  %2254 = bitcast i16* %2253 to <16 x i16>*
  %2255 = load <16 x i16>, <16 x i16>* %2254, align 2, !tbaa !399
  %2256 = add nsw i64 %2034, %.pre-phi3392
  %2257 = getelementptr inbounds i16, i16* %blur_x, i64 %2256
  %2258 = bitcast i16* %2257 to <16 x i16>*
  %2259 = load <16 x i16>, <16 x i16>* %2258, align 2, !tbaa !399
  %2260 = getelementptr inbounds i16, i16* %2257, i64 16
  %2261 = bitcast i16* %2260 to <16 x i16>*
  %2262 = load <16 x i16>, <16 x i16>* %2261, align 2, !tbaa !399
  %2263 = add nsw i64 %2037, %.pre-phi3392
  %2264 = getelementptr inbounds i16, i16* %blur_x, i64 %2263
  %2265 = bitcast i16* %2264 to <16 x i16>*
  %2266 = load <16 x i16>, <16 x i16>* %2265, align 2, !tbaa !399
  %2267 = getelementptr inbounds i16, i16* %2264, i64 16
  %2268 = bitcast i16* %2267 to <16 x i16>*
  %2269 = load <16 x i16>, <16 x i16>* %2268, align 2, !tbaa !399
  %2270 = add nsw i64 %2040, %.pre-phi3392
  %2271 = getelementptr inbounds i16, i16* %blur_x, i64 %2270
  %2272 = bitcast i16* %2271 to <16 x i16>*
  %2273 = load <16 x i16>, <16 x i16>* %2272, align 2, !tbaa !399
  %2274 = getelementptr inbounds i16, i16* %2271, i64 16
  %2275 = bitcast i16* %2274 to <16 x i16>*
  %2276 = load <16 x i16>, <16 x i16>* %2275, align 2, !tbaa !399
  %2277 = add nsw i64 %2043, %.pre-phi3392
  %2278 = getelementptr inbounds i16, i16* %blur_x, i64 %2277
  %2279 = bitcast i16* %2278 to <16 x i16>*
  %2280 = load <16 x i16>, <16 x i16>* %2279, align 2, !tbaa !399
  %2281 = getelementptr inbounds i16, i16* %2278, i64 16
  %2282 = bitcast i16* %2281 to <16 x i16>*
  %2283 = load <16 x i16>, <16 x i16>* %2282, align 2, !tbaa !399
  %2284 = add <16 x i16> %2259, %2252
  %2285 = add <16 x i16> %2284, %2266
  %2286 = add <16 x i16> %2285, %2273
  %2287 = add <16 x i16> %2286, %2280
  %2288 = add <16 x i16> %2262, %2255
  %2289 = add <16 x i16> %2288, %2269
  %2290 = add <16 x i16> %2289, %2276
  %2291 = add <16 x i16> %2290, %2283
  %2292 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2287, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2293 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2291, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2294 = shufflevector <16 x i16> %2292, <16 x i16> %2293, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2295 = lshr <32 x i16> %2294, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2296 = shufflevector <32 x i16> %2295, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2297 = add nsw i64 %2046, %.pre-phi3392
  %2298 = getelementptr inbounds i16, i16* %66, i64 %2297
  %2299 = bitcast i16* %2298 to <16 x i16>*
  store <16 x i16> %2296, <16 x i16>* %2299, align 2, !tbaa !401
  %2300 = shufflevector <32 x i16> %2295, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2301 = getelementptr inbounds i16, i16* %2298, i64 16
  %2302 = bitcast i16* %2301 to <16 x i16>*
  store <16 x i16> %2300, <16 x i16>* %2302, align 2, !tbaa !401
  %indvars.iv.next3156 = add nuw nsw i64 %indvars.iv3155, 1
  %.not2690 = icmp eq i64 %indvars.iv.next3156, %184
  br i1 %.not2690, label %"end for blur_y.s0.x.x.rebased97", label %"for blur_y.s0.x.x.rebased96"

"for blur_y.s0.x.x.rebased104":                   ; preds = %"for blur_y.s0.x.x.rebased104.preheader", %"consume blur_x112"
  %blur_y.s0.x.x.rebased106 = phi i32 [ %2415, %"consume blur_x112" ], [ 0, %"for blur_y.s0.x.x.rebased104.preheader" ]
  %2303 = add nsw i32 %blur_y.s0.x.x.rebased106, %t1626
  %a105 = shl nsw i32 %2303, 5
  %2304 = icmp sgt i32 %a14, %a105
  %b111 = select i1 %2304, i32 %a105, i32 %a14
  %2305 = icmp slt i32 %2303, 1
  %2306 = icmp sgt i32 %4, %a105
  %2307 = or i1 %2305, %2306
  br i1 %2307, label %"produce blur_x110", label %"consume blur_x112"

"end for blur_y.s0.x.x.rebased105":               ; preds = %"consume blur_x112", %"end for blur_y.s0.x.x.rebased97"
  br i1 %34, label %"produce blur_x116", label %"end for blur_y.s0.x.x.rebased105.after_bb113_crit_edge"

"end for blur_y.s0.x.x.rebased105.after_bb113_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased105"
  %.pre3393 = add nsw i32 %a26, 5
  %.pre3395 = and i32 %.pre3393, 7
  br label %after_bb113

"produce blur_x110":                              ; preds = %"for blur_y.s0.x.x.rebased104"
  %2308 = icmp slt i32 %b111, %4
  %blur_x.s0.x.v1.base.s111 = select i1 %2308, i32 %b111, i32 %4
  %t717 = add nsw i32 %blur_x.s0.x.v1.base.s111, %109
  %2309 = sext i32 %t717 to i64
  %2310 = getelementptr inbounds i16, i16* %read_input, i64 %2309
  %2311 = getelementptr inbounds i16, i16* %2310, i64 1
  %2312 = bitcast i16* %2311 to <16 x i16>*
  %2313 = load <16 x i16>, <16 x i16>* %2312, align 2, !tbaa !396
  %2314 = getelementptr inbounds i16, i16* %2310, i64 17
  %2315 = bitcast i16* %2314 to <16 x i16>*
  %2316 = load <16 x i16>, <16 x i16>* %2315, align 2, !tbaa !396
  %2317 = bitcast i16* %2310 to <16 x i16>*
  %2318 = load <16 x i16>, <16 x i16>* %2317, align 2, !tbaa !396
  %2319 = getelementptr inbounds i16, i16* %2310, i64 16
  %2320 = bitcast i16* %2319 to <16 x i16>*
  %2321 = load <16 x i16>, <16 x i16>* %2320, align 2, !tbaa !396
  %2322 = getelementptr inbounds i16, i16* %2310, i64 2
  %2323 = bitcast i16* %2322 to <16 x i16>*
  %2324 = load <16 x i16>, <16 x i16>* %2323, align 2, !tbaa !396
  %2325 = getelementptr inbounds i16, i16* %2310, i64 18
  %2326 = bitcast i16* %2325 to <16 x i16>*
  %2327 = load <16 x i16>, <16 x i16>* %2326, align 2, !tbaa !396
  %2328 = getelementptr inbounds i16, i16* %2310, i64 4
  %2329 = bitcast i16* %2328 to <16 x i16>*
  %2330 = load <16 x i16>, <16 x i16>* %2329, align 2, !tbaa !396
  %2331 = getelementptr inbounds i16, i16* %2310, i64 20
  %2332 = bitcast i16* %2331 to <16 x i16>*
  %2333 = load <16 x i16>, <16 x i16>* %2332, align 2, !tbaa !396
  %2334 = getelementptr inbounds i16, i16* %2310, i64 3
  %2335 = bitcast i16* %2334 to <16 x i16>*
  %2336 = load <16 x i16>, <16 x i16>* %2335, align 2, !tbaa !396
  %2337 = getelementptr inbounds i16, i16* %2310, i64 19
  %2338 = bitcast i16* %2337 to <16 x i16>*
  %2339 = load <16 x i16>, <16 x i16>* %2338, align 2, !tbaa !396
  %2340 = add <16 x i16> %2318, %2313
  %2341 = add <16 x i16> %2340, %2324
  %2342 = add <16 x i16> %2341, %2330
  %2343 = add <16 x i16> %2342, %2336
  %2344 = add <16 x i16> %2321, %2316
  %2345 = add <16 x i16> %2344, %2327
  %2346 = add <16 x i16> %2345, %2333
  %2347 = add <16 x i16> %2346, %2339
  %2348 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2343, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2349 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2347, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2350 = shufflevector <16 x i16> %2348, <16 x i16> %2349, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2351 = lshr <32 x i16> %2350, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2352 = shufflevector <32 x i16> %2351, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2353 = sext i32 %blur_x.s0.x.v1.base.s111 to i64
  %2354 = add nsw i64 %2353, %2179
  %2355 = getelementptr inbounds i16, i16* %blur_x, i64 %2354
  %2356 = bitcast i16* %2355 to <16 x i16>*
  store <16 x i16> %2352, <16 x i16>* %2356, align 2, !tbaa !399
  %2357 = shufflevector <32 x i16> %2351, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2358 = getelementptr inbounds i16, i16* %2355, i64 16
  %2359 = bitcast i16* %2358 to <16 x i16>*
  store <16 x i16> %2357, <16 x i16>* %2359, align 2, !tbaa !399
  br label %"consume blur_x112"

"consume blur_x112":                              ; preds = %"for blur_y.s0.x.x.rebased104", %"produce blur_x110"
  %2360 = sext i32 %b111 to i64
  %2361 = add nsw i64 %2182, %2360
  %2362 = getelementptr inbounds i16, i16* %blur_x, i64 %2361
  %2363 = bitcast i16* %2362 to <16 x i16>*
  %2364 = load <16 x i16>, <16 x i16>* %2363, align 2, !tbaa !399
  %2365 = getelementptr inbounds i16, i16* %2362, i64 16
  %2366 = bitcast i16* %2365 to <16 x i16>*
  %2367 = load <16 x i16>, <16 x i16>* %2366, align 2, !tbaa !399
  %2368 = add nsw i64 %2185, %2360
  %2369 = getelementptr inbounds i16, i16* %blur_x, i64 %2368
  %2370 = bitcast i16* %2369 to <16 x i16>*
  %2371 = load <16 x i16>, <16 x i16>* %2370, align 2, !tbaa !399
  %2372 = getelementptr inbounds i16, i16* %2369, i64 16
  %2373 = bitcast i16* %2372 to <16 x i16>*
  %2374 = load <16 x i16>, <16 x i16>* %2373, align 2, !tbaa !399
  %2375 = add nsw i64 %2188, %2360
  %2376 = getelementptr inbounds i16, i16* %blur_x, i64 %2375
  %2377 = bitcast i16* %2376 to <16 x i16>*
  %2378 = load <16 x i16>, <16 x i16>* %2377, align 2, !tbaa !399
  %2379 = getelementptr inbounds i16, i16* %2376, i64 16
  %2380 = bitcast i16* %2379 to <16 x i16>*
  %2381 = load <16 x i16>, <16 x i16>* %2380, align 2, !tbaa !399
  %2382 = add nsw i64 %2191, %2360
  %2383 = getelementptr inbounds i16, i16* %blur_x, i64 %2382
  %2384 = bitcast i16* %2383 to <16 x i16>*
  %2385 = load <16 x i16>, <16 x i16>* %2384, align 2, !tbaa !399
  %2386 = getelementptr inbounds i16, i16* %2383, i64 16
  %2387 = bitcast i16* %2386 to <16 x i16>*
  %2388 = load <16 x i16>, <16 x i16>* %2387, align 2, !tbaa !399
  %2389 = add nsw i64 %2194, %2360
  %2390 = getelementptr inbounds i16, i16* %blur_x, i64 %2389
  %2391 = bitcast i16* %2390 to <16 x i16>*
  %2392 = load <16 x i16>, <16 x i16>* %2391, align 2, !tbaa !399
  %2393 = getelementptr inbounds i16, i16* %2390, i64 16
  %2394 = bitcast i16* %2393 to <16 x i16>*
  %2395 = load <16 x i16>, <16 x i16>* %2394, align 2, !tbaa !399
  %2396 = add <16 x i16> %2371, %2364
  %2397 = add <16 x i16> %2396, %2378
  %2398 = add <16 x i16> %2397, %2385
  %2399 = add <16 x i16> %2398, %2392
  %2400 = add <16 x i16> %2374, %2367
  %2401 = add <16 x i16> %2400, %2381
  %2402 = add <16 x i16> %2401, %2388
  %2403 = add <16 x i16> %2402, %2395
  %2404 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2399, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2405 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2403, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2406 = shufflevector <16 x i16> %2404, <16 x i16> %2405, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2407 = lshr <32 x i16> %2406, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2408 = shufflevector <32 x i16> %2407, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2409 = add nsw i64 %2197, %2360
  %2410 = getelementptr inbounds i16, i16* %66, i64 %2409
  %2411 = bitcast i16* %2410 to <16 x i16>*
  store <16 x i16> %2408, <16 x i16>* %2411, align 2, !tbaa !401
  %2412 = shufflevector <32 x i16> %2407, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2413 = getelementptr inbounds i16, i16* %2410, i64 16
  %2414 = bitcast i16* %2413 to <16 x i16>*
  store <16 x i16> %2412, <16 x i16>* %2414, align 2, !tbaa !401
  %2415 = add nuw nsw i32 %blur_y.s0.x.x.rebased106, 1
  %.not2689 = icmp eq i32 %2415, %t1683
  br i1 %.not2689, label %"end for blur_y.s0.x.x.rebased105", label %"for blur_y.s0.x.x.rebased104"

after_bb113:                                      ; preds = %"end for blur_y.s0.x.x.rebased105.after_bb113_crit_edge", %"produce blur_x116"
  %.pre-phi3396 = phi i32 [ %.pre3395, %"end for blur_y.s0.x.x.rebased105.after_bb113_crit_edge" ], [ %2482, %"produce blur_x116" ]
  %2416 = mul nsw i32 %.pre-phi3396, %a73
  %t1722 = sub nsw i32 %2416, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased118.preheader", label %"end for blur_y.s0.x.x.rebased119", !prof !386

"for blur_y.s0.x.x.rebased118.preheader":         ; preds = %after_bb113
  %2417 = sext i32 %t1722 to i64
  %2418 = zext i32 %.pre-phi3382 to i64
  %2419 = mul nsw i64 %2418, %112
  %2420 = sub nsw i64 %2419, %96
  %2421 = zext i32 %.pre-phi3378 to i64
  %2422 = mul nsw i64 %2421, %112
  %2423 = sub nsw i64 %2422, %96
  %2424 = zext i32 %.pre-phi3386 to i64
  %2425 = mul nsw i64 %2424, %112
  %2426 = sub nsw i64 %2425, %96
  %2427 = zext i32 %.pre-phi3396 to i64
  %2428 = mul nsw i64 %2427, %112
  %2429 = sub nsw i64 %2428, %96
  %2430 = zext i32 %.pre-phi3390 to i64
  %2431 = mul nsw i64 %2430, %112
  %2432 = sub nsw i64 %2431, %96
  %2433 = sext i32 %a26 to i64
  %2434 = add nsw i64 %2433, 1
  %2435 = mul nsw i64 %2434, %113
  %2436 = add nsw i64 %2435, %116
  br label %"for blur_y.s0.x.x.rebased118"

"produce blur_x116":                              ; preds = %"end for blur_y.s0.x.x.rebased105"
  %2437 = getelementptr inbounds i16, i16* %read_input, i64 %117
  %2438 = getelementptr inbounds i16, i16* %2437, i64 -31
  %2439 = bitcast i16* %2438 to <16 x i16>*
  %2440 = load <16 x i16>, <16 x i16>* %2439, align 2, !tbaa !396
  %2441 = getelementptr inbounds i16, i16* %2437, i64 -15
  %2442 = bitcast i16* %2441 to <16 x i16>*
  %2443 = load <16 x i16>, <16 x i16>* %2442, align 2, !tbaa !396
  %2444 = getelementptr inbounds i16, i16* %2437, i64 -32
  %2445 = bitcast i16* %2444 to <16 x i16>*
  %2446 = load <16 x i16>, <16 x i16>* %2445, align 2, !tbaa !396
  %2447 = getelementptr inbounds i16, i16* %2437, i64 -16
  %2448 = bitcast i16* %2447 to <16 x i16>*
  %2449 = load <16 x i16>, <16 x i16>* %2448, align 2, !tbaa !396
  %2450 = getelementptr inbounds i16, i16* %2437, i64 -30
  %2451 = bitcast i16* %2450 to <16 x i16>*
  %2452 = load <16 x i16>, <16 x i16>* %2451, align 2, !tbaa !396
  %2453 = getelementptr inbounds i16, i16* %2437, i64 -14
  %2454 = bitcast i16* %2453 to <16 x i16>*
  %2455 = load <16 x i16>, <16 x i16>* %2454, align 2, !tbaa !396
  %2456 = getelementptr inbounds i16, i16* %2437, i64 -28
  %2457 = bitcast i16* %2456 to <16 x i16>*
  %2458 = load <16 x i16>, <16 x i16>* %2457, align 2, !tbaa !396
  %2459 = getelementptr inbounds i16, i16* %2437, i64 -12
  %2460 = bitcast i16* %2459 to <16 x i16>*
  %2461 = load <16 x i16>, <16 x i16>* %2460, align 2, !tbaa !396
  %2462 = getelementptr inbounds i16, i16* %2437, i64 -29
  %2463 = bitcast i16* %2462 to <16 x i16>*
  %2464 = load <16 x i16>, <16 x i16>* %2463, align 2, !tbaa !396
  %2465 = getelementptr inbounds i16, i16* %2437, i64 -13
  %2466 = bitcast i16* %2465 to <16 x i16>*
  %2467 = load <16 x i16>, <16 x i16>* %2466, align 2, !tbaa !396
  %2468 = add <16 x i16> %2446, %2440
  %2469 = add <16 x i16> %2468, %2452
  %2470 = add <16 x i16> %2469, %2458
  %2471 = add <16 x i16> %2470, %2464
  %2472 = add <16 x i16> %2449, %2443
  %2473 = add <16 x i16> %2472, %2455
  %2474 = add <16 x i16> %2473, %2461
  %2475 = add <16 x i16> %2474, %2467
  %2476 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2471, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2477 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2475, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2478 = shufflevector <16 x i16> %2476, <16 x i16> %2477, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2479 = lshr <32 x i16> %2478, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2480 = shufflevector <32 x i16> %2479, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2481 = add nsw i32 %a26, 5
  %2482 = and i32 %2481, 7
  %2483 = zext i32 %2482 to i64
  %2484 = mul nsw i64 %97, %2483
  %2485 = add nsw i64 %99, %2484
  %2486 = getelementptr inbounds i16, i16* %blur_x, i64 %2485
  %2487 = getelementptr inbounds i16, i16* %2486, i64 -32
  %2488 = bitcast i16* %2487 to <16 x i16>*
  store <16 x i16> %2480, <16 x i16>* %2488, align 2, !tbaa !399
  %2489 = shufflevector <32 x i16> %2479, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2490 = getelementptr inbounds i16, i16* %2486, i64 -16
  %2491 = bitcast i16* %2490 to <16 x i16>*
  store <16 x i16> %2489, <16 x i16>* %2491, align 2, !tbaa !399
  %2492 = zext i32 %.pre-phi3382 to i64
  %2493 = mul nsw i64 %2492, %112
  %2494 = add nsw i64 %2493, %94
  %2495 = getelementptr inbounds i16, i16* %blur_x, i64 %2494
  %2496 = getelementptr inbounds i16, i16* %2495, i64 -32
  %2497 = bitcast i16* %2496 to <16 x i16>*
  %2498 = load <16 x i16>, <16 x i16>* %2497, align 2, !tbaa !399
  %2499 = getelementptr inbounds i16, i16* %2495, i64 -16
  %2500 = bitcast i16* %2499 to <16 x i16>*
  %2501 = load <16 x i16>, <16 x i16>* %2500, align 2, !tbaa !399
  %2502 = zext i32 %.pre-phi3378 to i64
  %2503 = mul nsw i64 %2502, %112
  %2504 = add nsw i64 %2503, %94
  %2505 = getelementptr inbounds i16, i16* %blur_x, i64 %2504
  %2506 = getelementptr inbounds i16, i16* %2505, i64 -32
  %2507 = bitcast i16* %2506 to <16 x i16>*
  %2508 = load <16 x i16>, <16 x i16>* %2507, align 2, !tbaa !399
  %2509 = getelementptr inbounds i16, i16* %2505, i64 -16
  %2510 = bitcast i16* %2509 to <16 x i16>*
  %2511 = load <16 x i16>, <16 x i16>* %2510, align 2, !tbaa !399
  %2512 = zext i32 %.pre-phi3386 to i64
  %2513 = mul nsw i64 %2512, %112
  %2514 = add nsw i64 %2513, %94
  %2515 = getelementptr inbounds i16, i16* %blur_x, i64 %2514
  %2516 = getelementptr inbounds i16, i16* %2515, i64 -32
  %2517 = bitcast i16* %2516 to <16 x i16>*
  %2518 = load <16 x i16>, <16 x i16>* %2517, align 2, !tbaa !399
  %2519 = getelementptr inbounds i16, i16* %2515, i64 -16
  %2520 = bitcast i16* %2519 to <16 x i16>*
  %2521 = load <16 x i16>, <16 x i16>* %2520, align 2, !tbaa !399
  %2522 = mul nsw i64 %2483, %112
  %2523 = add nsw i64 %2522, %94
  %2524 = getelementptr inbounds i16, i16* %blur_x, i64 %2523
  %2525 = getelementptr inbounds i16, i16* %2524, i64 -32
  %2526 = bitcast i16* %2525 to <16 x i16>*
  %2527 = load <16 x i16>, <16 x i16>* %2526, align 2, !tbaa !399
  %2528 = getelementptr inbounds i16, i16* %2524, i64 -16
  %2529 = bitcast i16* %2528 to <16 x i16>*
  %2530 = load <16 x i16>, <16 x i16>* %2529, align 2, !tbaa !399
  %2531 = zext i32 %.pre-phi3390 to i64
  %2532 = mul nsw i64 %2531, %112
  %2533 = add nsw i64 %2532, %94
  %2534 = getelementptr inbounds i16, i16* %blur_x, i64 %2533
  %2535 = getelementptr inbounds i16, i16* %2534, i64 -32
  %2536 = bitcast i16* %2535 to <16 x i16>*
  %2537 = load <16 x i16>, <16 x i16>* %2536, align 2, !tbaa !399
  %2538 = getelementptr inbounds i16, i16* %2534, i64 -16
  %2539 = bitcast i16* %2538 to <16 x i16>*
  %2540 = load <16 x i16>, <16 x i16>* %2539, align 2, !tbaa !399
  %2541 = add <16 x i16> %2508, %2498
  %2542 = add <16 x i16> %2541, %2518
  %2543 = add <16 x i16> %2542, %2527
  %2544 = add <16 x i16> %2543, %2537
  %2545 = add <16 x i16> %2511, %2501
  %2546 = add <16 x i16> %2545, %2521
  %2547 = add <16 x i16> %2546, %2530
  %2548 = add <16 x i16> %2547, %2540
  %2549 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2544, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2550 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2548, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2551 = shufflevector <16 x i16> %2549, <16 x i16> %2550, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2552 = lshr <32 x i16> %2551, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2553 = shufflevector <32 x i16> %2552, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2554 = sext i32 %a26 to i64
  %2555 = add nsw i64 %2554, 1
  %2556 = mul nsw i64 %2555, %113
  %2557 = add nsw i64 %115, %2556
  %2558 = getelementptr inbounds i16, i16* %66, i64 %2557
  %2559 = getelementptr inbounds i16, i16* %2558, i64 -32
  %2560 = bitcast i16* %2559 to <16 x i16>*
  store <16 x i16> %2553, <16 x i16>* %2560, align 2, !tbaa !401
  %2561 = shufflevector <32 x i16> %2552, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2562 = getelementptr inbounds i16, i16* %2558, i64 -16
  %2563 = bitcast i16* %2562 to <16 x i16>*
  store <16 x i16> %2561, <16 x i16>* %2563, align 2, !tbaa !401
  br label %after_bb113

"for blur_y.s0.x.x.rebased118":                   ; preds = %"for blur_y.s0.x.x.rebased118.preheader", %"consume blur_x125"
  %indvars.iv3158 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased118.preheader" ], [ %indvars.iv.next3159, %"consume blur_x125" ]
  %2564 = add nsw i64 %indvars.iv3158, %101
  %2565 = icmp slt i64 %2564, 1
  %2566 = trunc i64 %2564 to i32
  %2567 = shl nsw i32 %2566, 5
  %2568 = icmp sgt i32 %4, %2567
  %2569 = or i1 %2565, %2568
  br i1 %2569, label %"produce blur_x124", label %"for blur_y.s0.x.x.rebased118.consume blur_x125_crit_edge"

"for blur_y.s0.x.x.rebased118.consume blur_x125_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased118"
  %.pre3397 = shl nsw i64 %2564, 5
  br label %"consume blur_x125"

"end for blur_y.s0.x.x.rebased119":               ; preds = %"consume blur_x125", %after_bb113
  br i1 %102, label %"for blur_y.s0.x.x.rebased126.preheader", label %"end for blur_y.s0.x.x.rebased127", !prof !386

"for blur_y.s0.x.x.rebased126.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased119"
  %2570 = sext i32 %t1722 to i64
  %2571 = zext i32 %.pre-phi3382 to i64
  %2572 = mul nsw i64 %2571, %112
  %2573 = sub nsw i64 %2572, %96
  %2574 = zext i32 %.pre-phi3378 to i64
  %2575 = mul nsw i64 %2574, %112
  %2576 = sub nsw i64 %2575, %96
  %2577 = zext i32 %.pre-phi3386 to i64
  %2578 = mul nsw i64 %2577, %112
  %2579 = sub nsw i64 %2578, %96
  %2580 = zext i32 %.pre-phi3396 to i64
  %2581 = mul nsw i64 %2580, %112
  %2582 = sub nsw i64 %2581, %96
  %2583 = zext i32 %.pre-phi3390 to i64
  %2584 = mul nsw i64 %2583, %112
  %2585 = sub nsw i64 %2584, %96
  %2586 = sext i32 %a26 to i64
  %2587 = add nsw i64 %2586, 1
  %2588 = mul nsw i64 %2587, %113
  %2589 = add nsw i64 %2588, %116
  br label %"for blur_y.s0.x.x.rebased126"

"produce blur_x124":                              ; preds = %"for blur_y.s0.x.x.rebased118"
  %t728 = add nsw i32 %2567, %t1721
  %2590 = sext i32 %t728 to i64
  %2591 = getelementptr inbounds i16, i16* %read_input, i64 %2590
  %2592 = getelementptr inbounds i16, i16* %2591, i64 1
  %2593 = bitcast i16* %2592 to <16 x i16>*
  %2594 = load <16 x i16>, <16 x i16>* %2593, align 2, !tbaa !396
  %2595 = getelementptr inbounds i16, i16* %2591, i64 17
  %2596 = bitcast i16* %2595 to <16 x i16>*
  %2597 = load <16 x i16>, <16 x i16>* %2596, align 2, !tbaa !396
  %2598 = bitcast i16* %2591 to <16 x i16>*
  %2599 = load <16 x i16>, <16 x i16>* %2598, align 2, !tbaa !396
  %2600 = getelementptr inbounds i16, i16* %2591, i64 16
  %2601 = bitcast i16* %2600 to <16 x i16>*
  %2602 = load <16 x i16>, <16 x i16>* %2601, align 2, !tbaa !396
  %2603 = getelementptr inbounds i16, i16* %2591, i64 2
  %2604 = bitcast i16* %2603 to <16 x i16>*
  %2605 = load <16 x i16>, <16 x i16>* %2604, align 2, !tbaa !396
  %2606 = getelementptr inbounds i16, i16* %2591, i64 18
  %2607 = bitcast i16* %2606 to <16 x i16>*
  %2608 = load <16 x i16>, <16 x i16>* %2607, align 2, !tbaa !396
  %2609 = getelementptr inbounds i16, i16* %2591, i64 4
  %2610 = bitcast i16* %2609 to <16 x i16>*
  %2611 = load <16 x i16>, <16 x i16>* %2610, align 2, !tbaa !396
  %2612 = getelementptr inbounds i16, i16* %2591, i64 20
  %2613 = bitcast i16* %2612 to <16 x i16>*
  %2614 = load <16 x i16>, <16 x i16>* %2613, align 2, !tbaa !396
  %2615 = getelementptr inbounds i16, i16* %2591, i64 3
  %2616 = bitcast i16* %2615 to <16 x i16>*
  %2617 = load <16 x i16>, <16 x i16>* %2616, align 2, !tbaa !396
  %2618 = getelementptr inbounds i16, i16* %2591, i64 19
  %2619 = bitcast i16* %2618 to <16 x i16>*
  %2620 = load <16 x i16>, <16 x i16>* %2619, align 2, !tbaa !396
  %2621 = add <16 x i16> %2599, %2594
  %2622 = add <16 x i16> %2621, %2605
  %2623 = add <16 x i16> %2622, %2611
  %2624 = add <16 x i16> %2623, %2617
  %2625 = add <16 x i16> %2602, %2597
  %2626 = add <16 x i16> %2625, %2608
  %2627 = add <16 x i16> %2626, %2614
  %2628 = add <16 x i16> %2627, %2620
  %2629 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2624, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2630 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2628, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2631 = shufflevector <16 x i16> %2629, <16 x i16> %2630, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2632 = lshr <32 x i16> %2631, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2633 = shufflevector <32 x i16> %2632, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2634 = shl nsw i64 %2564, 5
  %2635 = add nsw i64 %2634, %2417
  %2636 = getelementptr inbounds i16, i16* %blur_x, i64 %2635
  %2637 = bitcast i16* %2636 to <16 x i16>*
  store <16 x i16> %2633, <16 x i16>* %2637, align 2, !tbaa !399
  %2638 = shufflevector <32 x i16> %2632, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2639 = getelementptr inbounds i16, i16* %2636, i64 16
  %2640 = bitcast i16* %2639 to <16 x i16>*
  store <16 x i16> %2638, <16 x i16>* %2640, align 2, !tbaa !399
  br label %"consume blur_x125"

"consume blur_x125":                              ; preds = %"for blur_y.s0.x.x.rebased118.consume blur_x125_crit_edge", %"produce blur_x124"
  %.pre-phi3398 = phi i64 [ %.pre3397, %"for blur_y.s0.x.x.rebased118.consume blur_x125_crit_edge" ], [ %2634, %"produce blur_x124" ]
  %2641 = add nsw i64 %2420, %.pre-phi3398
  %2642 = getelementptr inbounds i16, i16* %blur_x, i64 %2641
  %2643 = bitcast i16* %2642 to <16 x i16>*
  %2644 = load <16 x i16>, <16 x i16>* %2643, align 2, !tbaa !399
  %2645 = getelementptr inbounds i16, i16* %2642, i64 16
  %2646 = bitcast i16* %2645 to <16 x i16>*
  %2647 = load <16 x i16>, <16 x i16>* %2646, align 2, !tbaa !399
  %2648 = add nsw i64 %2423, %.pre-phi3398
  %2649 = getelementptr inbounds i16, i16* %blur_x, i64 %2648
  %2650 = bitcast i16* %2649 to <16 x i16>*
  %2651 = load <16 x i16>, <16 x i16>* %2650, align 2, !tbaa !399
  %2652 = getelementptr inbounds i16, i16* %2649, i64 16
  %2653 = bitcast i16* %2652 to <16 x i16>*
  %2654 = load <16 x i16>, <16 x i16>* %2653, align 2, !tbaa !399
  %2655 = add nsw i64 %2426, %.pre-phi3398
  %2656 = getelementptr inbounds i16, i16* %blur_x, i64 %2655
  %2657 = bitcast i16* %2656 to <16 x i16>*
  %2658 = load <16 x i16>, <16 x i16>* %2657, align 2, !tbaa !399
  %2659 = getelementptr inbounds i16, i16* %2656, i64 16
  %2660 = bitcast i16* %2659 to <16 x i16>*
  %2661 = load <16 x i16>, <16 x i16>* %2660, align 2, !tbaa !399
  %2662 = add nsw i64 %2429, %.pre-phi3398
  %2663 = getelementptr inbounds i16, i16* %blur_x, i64 %2662
  %2664 = bitcast i16* %2663 to <16 x i16>*
  %2665 = load <16 x i16>, <16 x i16>* %2664, align 2, !tbaa !399
  %2666 = getelementptr inbounds i16, i16* %2663, i64 16
  %2667 = bitcast i16* %2666 to <16 x i16>*
  %2668 = load <16 x i16>, <16 x i16>* %2667, align 2, !tbaa !399
  %2669 = add nsw i64 %2432, %.pre-phi3398
  %2670 = getelementptr inbounds i16, i16* %blur_x, i64 %2669
  %2671 = bitcast i16* %2670 to <16 x i16>*
  %2672 = load <16 x i16>, <16 x i16>* %2671, align 2, !tbaa !399
  %2673 = getelementptr inbounds i16, i16* %2670, i64 16
  %2674 = bitcast i16* %2673 to <16 x i16>*
  %2675 = load <16 x i16>, <16 x i16>* %2674, align 2, !tbaa !399
  %2676 = add <16 x i16> %2651, %2644
  %2677 = add <16 x i16> %2676, %2658
  %2678 = add <16 x i16> %2677, %2665
  %2679 = add <16 x i16> %2678, %2672
  %2680 = add <16 x i16> %2654, %2647
  %2681 = add <16 x i16> %2680, %2661
  %2682 = add <16 x i16> %2681, %2668
  %2683 = add <16 x i16> %2682, %2675
  %2684 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2679, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2685 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2683, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2686 = shufflevector <16 x i16> %2684, <16 x i16> %2685, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2687 = lshr <32 x i16> %2686, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2688 = shufflevector <32 x i16> %2687, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2689 = add nsw i64 %2436, %.pre-phi3398
  %2690 = getelementptr inbounds i16, i16* %66, i64 %2689
  %2691 = bitcast i16* %2690 to <16 x i16>*
  store <16 x i16> %2688, <16 x i16>* %2691, align 2, !tbaa !401
  %2692 = shufflevector <32 x i16> %2687, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2693 = getelementptr inbounds i16, i16* %2690, i64 16
  %2694 = bitcast i16* %2693 to <16 x i16>*
  store <16 x i16> %2692, <16 x i16>* %2694, align 2, !tbaa !401
  %indvars.iv.next3159 = add nuw nsw i64 %indvars.iv3158, 1
  %.not2688 = icmp eq i64 %indvars.iv.next3159, %184
  br i1 %.not2688, label %"end for blur_y.s0.x.x.rebased119", label %"for blur_y.s0.x.x.rebased118"

"for blur_y.s0.x.x.rebased126":                   ; preds = %"for blur_y.s0.x.x.rebased126.preheader", %"consume blur_x134"
  %blur_y.s0.x.x.rebased128 = phi i32 [ %2807, %"consume blur_x134" ], [ 0, %"for blur_y.s0.x.x.rebased126.preheader" ]
  %2695 = add nsw i32 %blur_y.s0.x.x.rebased128, %t1626
  %a112 = shl nsw i32 %2695, 5
  %2696 = icmp sgt i32 %a14, %a112
  %b118 = select i1 %2696, i32 %a112, i32 %a14
  %2697 = icmp slt i32 %2695, 1
  %2698 = icmp sgt i32 %4, %a112
  %2699 = or i1 %2697, %2698
  br i1 %2699, label %"produce blur_x132", label %"consume blur_x134"

"end for blur_y.s0.x.x.rebased127":               ; preds = %"consume blur_x134", %"end for blur_y.s0.x.x.rebased119"
  br i1 %34, label %"produce blur_x138", label %"end for blur_y.s0.x.x.rebased127.after_bb135_crit_edge"

"end for blur_y.s0.x.x.rebased127.after_bb135_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased127"
  %.pre3399 = add nsw i32 %a26, 6
  %.pre3401 = and i32 %.pre3399, 7
  br label %after_bb135

"produce blur_x132":                              ; preds = %"for blur_y.s0.x.x.rebased126"
  %2700 = icmp slt i32 %b118, %4
  %blur_x.s0.x.v1.base.s133 = select i1 %2700, i32 %b118, i32 %4
  %t733 = add nsw i32 %blur_x.s0.x.v1.base.s133, %t1721
  %2701 = sext i32 %t733 to i64
  %2702 = getelementptr inbounds i16, i16* %read_input, i64 %2701
  %2703 = getelementptr inbounds i16, i16* %2702, i64 1
  %2704 = bitcast i16* %2703 to <16 x i16>*
  %2705 = load <16 x i16>, <16 x i16>* %2704, align 2, !tbaa !396
  %2706 = getelementptr inbounds i16, i16* %2702, i64 17
  %2707 = bitcast i16* %2706 to <16 x i16>*
  %2708 = load <16 x i16>, <16 x i16>* %2707, align 2, !tbaa !396
  %2709 = bitcast i16* %2702 to <16 x i16>*
  %2710 = load <16 x i16>, <16 x i16>* %2709, align 2, !tbaa !396
  %2711 = getelementptr inbounds i16, i16* %2702, i64 16
  %2712 = bitcast i16* %2711 to <16 x i16>*
  %2713 = load <16 x i16>, <16 x i16>* %2712, align 2, !tbaa !396
  %2714 = getelementptr inbounds i16, i16* %2702, i64 2
  %2715 = bitcast i16* %2714 to <16 x i16>*
  %2716 = load <16 x i16>, <16 x i16>* %2715, align 2, !tbaa !396
  %2717 = getelementptr inbounds i16, i16* %2702, i64 18
  %2718 = bitcast i16* %2717 to <16 x i16>*
  %2719 = load <16 x i16>, <16 x i16>* %2718, align 2, !tbaa !396
  %2720 = getelementptr inbounds i16, i16* %2702, i64 4
  %2721 = bitcast i16* %2720 to <16 x i16>*
  %2722 = load <16 x i16>, <16 x i16>* %2721, align 2, !tbaa !396
  %2723 = getelementptr inbounds i16, i16* %2702, i64 20
  %2724 = bitcast i16* %2723 to <16 x i16>*
  %2725 = load <16 x i16>, <16 x i16>* %2724, align 2, !tbaa !396
  %2726 = getelementptr inbounds i16, i16* %2702, i64 3
  %2727 = bitcast i16* %2726 to <16 x i16>*
  %2728 = load <16 x i16>, <16 x i16>* %2727, align 2, !tbaa !396
  %2729 = getelementptr inbounds i16, i16* %2702, i64 19
  %2730 = bitcast i16* %2729 to <16 x i16>*
  %2731 = load <16 x i16>, <16 x i16>* %2730, align 2, !tbaa !396
  %2732 = add <16 x i16> %2710, %2705
  %2733 = add <16 x i16> %2732, %2716
  %2734 = add <16 x i16> %2733, %2722
  %2735 = add <16 x i16> %2734, %2728
  %2736 = add <16 x i16> %2713, %2708
  %2737 = add <16 x i16> %2736, %2719
  %2738 = add <16 x i16> %2737, %2725
  %2739 = add <16 x i16> %2738, %2731
  %2740 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2735, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2741 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2739, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2742 = shufflevector <16 x i16> %2740, <16 x i16> %2741, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2743 = lshr <32 x i16> %2742, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2744 = shufflevector <32 x i16> %2743, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2745 = sext i32 %blur_x.s0.x.v1.base.s133 to i64
  %2746 = add nsw i64 %2745, %2570
  %2747 = getelementptr inbounds i16, i16* %blur_x, i64 %2746
  %2748 = bitcast i16* %2747 to <16 x i16>*
  store <16 x i16> %2744, <16 x i16>* %2748, align 2, !tbaa !399
  %2749 = shufflevector <32 x i16> %2743, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2750 = getelementptr inbounds i16, i16* %2747, i64 16
  %2751 = bitcast i16* %2750 to <16 x i16>*
  store <16 x i16> %2749, <16 x i16>* %2751, align 2, !tbaa !399
  br label %"consume blur_x134"

"consume blur_x134":                              ; preds = %"for blur_y.s0.x.x.rebased126", %"produce blur_x132"
  %2752 = sext i32 %b118 to i64
  %2753 = add nsw i64 %2573, %2752
  %2754 = getelementptr inbounds i16, i16* %blur_x, i64 %2753
  %2755 = bitcast i16* %2754 to <16 x i16>*
  %2756 = load <16 x i16>, <16 x i16>* %2755, align 2, !tbaa !399
  %2757 = getelementptr inbounds i16, i16* %2754, i64 16
  %2758 = bitcast i16* %2757 to <16 x i16>*
  %2759 = load <16 x i16>, <16 x i16>* %2758, align 2, !tbaa !399
  %2760 = add nsw i64 %2576, %2752
  %2761 = getelementptr inbounds i16, i16* %blur_x, i64 %2760
  %2762 = bitcast i16* %2761 to <16 x i16>*
  %2763 = load <16 x i16>, <16 x i16>* %2762, align 2, !tbaa !399
  %2764 = getelementptr inbounds i16, i16* %2761, i64 16
  %2765 = bitcast i16* %2764 to <16 x i16>*
  %2766 = load <16 x i16>, <16 x i16>* %2765, align 2, !tbaa !399
  %2767 = add nsw i64 %2579, %2752
  %2768 = getelementptr inbounds i16, i16* %blur_x, i64 %2767
  %2769 = bitcast i16* %2768 to <16 x i16>*
  %2770 = load <16 x i16>, <16 x i16>* %2769, align 2, !tbaa !399
  %2771 = getelementptr inbounds i16, i16* %2768, i64 16
  %2772 = bitcast i16* %2771 to <16 x i16>*
  %2773 = load <16 x i16>, <16 x i16>* %2772, align 2, !tbaa !399
  %2774 = add nsw i64 %2582, %2752
  %2775 = getelementptr inbounds i16, i16* %blur_x, i64 %2774
  %2776 = bitcast i16* %2775 to <16 x i16>*
  %2777 = load <16 x i16>, <16 x i16>* %2776, align 2, !tbaa !399
  %2778 = getelementptr inbounds i16, i16* %2775, i64 16
  %2779 = bitcast i16* %2778 to <16 x i16>*
  %2780 = load <16 x i16>, <16 x i16>* %2779, align 2, !tbaa !399
  %2781 = add nsw i64 %2585, %2752
  %2782 = getelementptr inbounds i16, i16* %blur_x, i64 %2781
  %2783 = bitcast i16* %2782 to <16 x i16>*
  %2784 = load <16 x i16>, <16 x i16>* %2783, align 2, !tbaa !399
  %2785 = getelementptr inbounds i16, i16* %2782, i64 16
  %2786 = bitcast i16* %2785 to <16 x i16>*
  %2787 = load <16 x i16>, <16 x i16>* %2786, align 2, !tbaa !399
  %2788 = add <16 x i16> %2763, %2756
  %2789 = add <16 x i16> %2788, %2770
  %2790 = add <16 x i16> %2789, %2777
  %2791 = add <16 x i16> %2790, %2784
  %2792 = add <16 x i16> %2766, %2759
  %2793 = add <16 x i16> %2792, %2773
  %2794 = add <16 x i16> %2793, %2780
  %2795 = add <16 x i16> %2794, %2787
  %2796 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2791, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2797 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2795, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2798 = shufflevector <16 x i16> %2796, <16 x i16> %2797, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2799 = lshr <32 x i16> %2798, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2800 = shufflevector <32 x i16> %2799, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2801 = add nsw i64 %2589, %2752
  %2802 = getelementptr inbounds i16, i16* %66, i64 %2801
  %2803 = bitcast i16* %2802 to <16 x i16>*
  store <16 x i16> %2800, <16 x i16>* %2803, align 2, !tbaa !401
  %2804 = shufflevector <32 x i16> %2799, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2805 = getelementptr inbounds i16, i16* %2802, i64 16
  %2806 = bitcast i16* %2805 to <16 x i16>*
  store <16 x i16> %2804, <16 x i16>* %2806, align 2, !tbaa !401
  %2807 = add nuw nsw i32 %blur_y.s0.x.x.rebased128, 1
  %.not2687 = icmp eq i32 %2807, %t1683
  br i1 %.not2687, label %"end for blur_y.s0.x.x.rebased127", label %"for blur_y.s0.x.x.rebased126"

after_bb135:                                      ; preds = %"end for blur_y.s0.x.x.rebased127.after_bb135_crit_edge", %"produce blur_x138"
  %.pre-phi3402 = phi i32 [ %.pre3401, %"end for blur_y.s0.x.x.rebased127.after_bb135_crit_edge" ], [ %2874, %"produce blur_x138" ]
  %2808 = mul nsw i32 %.pre-phi3402, %a73
  %t1738 = sub nsw i32 %2808, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased140.preheader", label %"end for blur_y.s0.x.x.rebased141", !prof !386

"for blur_y.s0.x.x.rebased140.preheader":         ; preds = %after_bb135
  %2809 = sext i32 %t1738 to i64
  %2810 = zext i32 %.pre-phi3386 to i64
  %2811 = mul nsw i64 %2810, %112
  %2812 = sub nsw i64 %2811, %96
  %2813 = zext i32 %.pre-phi3382 to i64
  %2814 = mul nsw i64 %2813, %112
  %2815 = sub nsw i64 %2814, %96
  %2816 = zext i32 %.pre-phi3390 to i64
  %2817 = mul nsw i64 %2816, %112
  %2818 = sub nsw i64 %2817, %96
  %2819 = zext i32 %.pre-phi3402 to i64
  %2820 = mul nsw i64 %2819, %112
  %2821 = sub nsw i64 %2820, %96
  %2822 = zext i32 %.pre-phi3396 to i64
  %2823 = mul nsw i64 %2822, %112
  %2824 = sub nsw i64 %2823, %96
  %2825 = sext i32 %a26 to i64
  %2826 = add nsw i64 %2825, 2
  %2827 = mul nsw i64 %2826, %113
  %2828 = add nsw i64 %2827, %116
  br label %"for blur_y.s0.x.x.rebased140"

"produce blur_x138":                              ; preds = %"end for blur_y.s0.x.x.rebased127"
  %2829 = getelementptr inbounds i16, i16* %read_input, i64 %119
  %2830 = getelementptr inbounds i16, i16* %2829, i64 -31
  %2831 = bitcast i16* %2830 to <16 x i16>*
  %2832 = load <16 x i16>, <16 x i16>* %2831, align 2, !tbaa !396
  %2833 = getelementptr inbounds i16, i16* %2829, i64 -15
  %2834 = bitcast i16* %2833 to <16 x i16>*
  %2835 = load <16 x i16>, <16 x i16>* %2834, align 2, !tbaa !396
  %2836 = getelementptr inbounds i16, i16* %2829, i64 -32
  %2837 = bitcast i16* %2836 to <16 x i16>*
  %2838 = load <16 x i16>, <16 x i16>* %2837, align 2, !tbaa !396
  %2839 = getelementptr inbounds i16, i16* %2829, i64 -16
  %2840 = bitcast i16* %2839 to <16 x i16>*
  %2841 = load <16 x i16>, <16 x i16>* %2840, align 2, !tbaa !396
  %2842 = getelementptr inbounds i16, i16* %2829, i64 -30
  %2843 = bitcast i16* %2842 to <16 x i16>*
  %2844 = load <16 x i16>, <16 x i16>* %2843, align 2, !tbaa !396
  %2845 = getelementptr inbounds i16, i16* %2829, i64 -14
  %2846 = bitcast i16* %2845 to <16 x i16>*
  %2847 = load <16 x i16>, <16 x i16>* %2846, align 2, !tbaa !396
  %2848 = getelementptr inbounds i16, i16* %2829, i64 -28
  %2849 = bitcast i16* %2848 to <16 x i16>*
  %2850 = load <16 x i16>, <16 x i16>* %2849, align 2, !tbaa !396
  %2851 = getelementptr inbounds i16, i16* %2829, i64 -12
  %2852 = bitcast i16* %2851 to <16 x i16>*
  %2853 = load <16 x i16>, <16 x i16>* %2852, align 2, !tbaa !396
  %2854 = getelementptr inbounds i16, i16* %2829, i64 -29
  %2855 = bitcast i16* %2854 to <16 x i16>*
  %2856 = load <16 x i16>, <16 x i16>* %2855, align 2, !tbaa !396
  %2857 = getelementptr inbounds i16, i16* %2829, i64 -13
  %2858 = bitcast i16* %2857 to <16 x i16>*
  %2859 = load <16 x i16>, <16 x i16>* %2858, align 2, !tbaa !396
  %2860 = add <16 x i16> %2838, %2832
  %2861 = add <16 x i16> %2860, %2844
  %2862 = add <16 x i16> %2861, %2850
  %2863 = add <16 x i16> %2862, %2856
  %2864 = add <16 x i16> %2841, %2835
  %2865 = add <16 x i16> %2864, %2847
  %2866 = add <16 x i16> %2865, %2853
  %2867 = add <16 x i16> %2866, %2859
  %2868 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2863, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2869 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2867, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2870 = shufflevector <16 x i16> %2868, <16 x i16> %2869, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2871 = lshr <32 x i16> %2870, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2872 = shufflevector <32 x i16> %2871, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2873 = add nsw i32 %a26, 6
  %2874 = and i32 %2873, 7
  %2875 = zext i32 %2874 to i64
  %2876 = mul nsw i64 %97, %2875
  %2877 = add nsw i64 %99, %2876
  %2878 = getelementptr inbounds i16, i16* %blur_x, i64 %2877
  %2879 = getelementptr inbounds i16, i16* %2878, i64 -32
  %2880 = bitcast i16* %2879 to <16 x i16>*
  store <16 x i16> %2872, <16 x i16>* %2880, align 2, !tbaa !399
  %2881 = shufflevector <32 x i16> %2871, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2882 = getelementptr inbounds i16, i16* %2878, i64 -16
  %2883 = bitcast i16* %2882 to <16 x i16>*
  store <16 x i16> %2881, <16 x i16>* %2883, align 2, !tbaa !399
  %2884 = zext i32 %.pre-phi3386 to i64
  %2885 = mul nsw i64 %2884, %112
  %2886 = add nsw i64 %2885, %94
  %2887 = getelementptr inbounds i16, i16* %blur_x, i64 %2886
  %2888 = getelementptr inbounds i16, i16* %2887, i64 -32
  %2889 = bitcast i16* %2888 to <16 x i16>*
  %2890 = load <16 x i16>, <16 x i16>* %2889, align 2, !tbaa !399
  %2891 = getelementptr inbounds i16, i16* %2887, i64 -16
  %2892 = bitcast i16* %2891 to <16 x i16>*
  %2893 = load <16 x i16>, <16 x i16>* %2892, align 2, !tbaa !399
  %2894 = zext i32 %.pre-phi3382 to i64
  %2895 = mul nsw i64 %2894, %112
  %2896 = add nsw i64 %2895, %94
  %2897 = getelementptr inbounds i16, i16* %blur_x, i64 %2896
  %2898 = getelementptr inbounds i16, i16* %2897, i64 -32
  %2899 = bitcast i16* %2898 to <16 x i16>*
  %2900 = load <16 x i16>, <16 x i16>* %2899, align 2, !tbaa !399
  %2901 = getelementptr inbounds i16, i16* %2897, i64 -16
  %2902 = bitcast i16* %2901 to <16 x i16>*
  %2903 = load <16 x i16>, <16 x i16>* %2902, align 2, !tbaa !399
  %2904 = zext i32 %.pre-phi3390 to i64
  %2905 = mul nsw i64 %2904, %112
  %2906 = add nsw i64 %2905, %94
  %2907 = getelementptr inbounds i16, i16* %blur_x, i64 %2906
  %2908 = getelementptr inbounds i16, i16* %2907, i64 -32
  %2909 = bitcast i16* %2908 to <16 x i16>*
  %2910 = load <16 x i16>, <16 x i16>* %2909, align 2, !tbaa !399
  %2911 = getelementptr inbounds i16, i16* %2907, i64 -16
  %2912 = bitcast i16* %2911 to <16 x i16>*
  %2913 = load <16 x i16>, <16 x i16>* %2912, align 2, !tbaa !399
  %2914 = mul nsw i64 %2875, %112
  %2915 = add nsw i64 %2914, %94
  %2916 = getelementptr inbounds i16, i16* %blur_x, i64 %2915
  %2917 = getelementptr inbounds i16, i16* %2916, i64 -32
  %2918 = bitcast i16* %2917 to <16 x i16>*
  %2919 = load <16 x i16>, <16 x i16>* %2918, align 2, !tbaa !399
  %2920 = getelementptr inbounds i16, i16* %2916, i64 -16
  %2921 = bitcast i16* %2920 to <16 x i16>*
  %2922 = load <16 x i16>, <16 x i16>* %2921, align 2, !tbaa !399
  %2923 = zext i32 %.pre-phi3396 to i64
  %2924 = mul nsw i64 %2923, %112
  %2925 = add nsw i64 %2924, %94
  %2926 = getelementptr inbounds i16, i16* %blur_x, i64 %2925
  %2927 = getelementptr inbounds i16, i16* %2926, i64 -32
  %2928 = bitcast i16* %2927 to <16 x i16>*
  %2929 = load <16 x i16>, <16 x i16>* %2928, align 2, !tbaa !399
  %2930 = getelementptr inbounds i16, i16* %2926, i64 -16
  %2931 = bitcast i16* %2930 to <16 x i16>*
  %2932 = load <16 x i16>, <16 x i16>* %2931, align 2, !tbaa !399
  %2933 = add <16 x i16> %2900, %2890
  %2934 = add <16 x i16> %2933, %2910
  %2935 = add <16 x i16> %2934, %2919
  %2936 = add <16 x i16> %2935, %2929
  %2937 = add <16 x i16> %2903, %2893
  %2938 = add <16 x i16> %2937, %2913
  %2939 = add <16 x i16> %2938, %2922
  %2940 = add <16 x i16> %2939, %2932
  %2941 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2936, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2942 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2940, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %2943 = shufflevector <16 x i16> %2941, <16 x i16> %2942, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2944 = lshr <32 x i16> %2943, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %2945 = shufflevector <32 x i16> %2944, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2946 = sext i32 %a26 to i64
  %2947 = add nsw i64 %2946, 2
  %2948 = mul nsw i64 %2947, %113
  %2949 = add nsw i64 %115, %2948
  %2950 = getelementptr inbounds i16, i16* %66, i64 %2949
  %2951 = getelementptr inbounds i16, i16* %2950, i64 -32
  %2952 = bitcast i16* %2951 to <16 x i16>*
  store <16 x i16> %2945, <16 x i16>* %2952, align 2, !tbaa !401
  %2953 = shufflevector <32 x i16> %2944, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2954 = getelementptr inbounds i16, i16* %2950, i64 -16
  %2955 = bitcast i16* %2954 to <16 x i16>*
  store <16 x i16> %2953, <16 x i16>* %2955, align 2, !tbaa !401
  br label %after_bb135

"for blur_y.s0.x.x.rebased140":                   ; preds = %"for blur_y.s0.x.x.rebased140.preheader", %"consume blur_x147"
  %indvars.iv3161 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased140.preheader" ], [ %indvars.iv.next3162, %"consume blur_x147" ]
  %2956 = add nsw i64 %indvars.iv3161, %101
  %2957 = icmp slt i64 %2956, 1
  %2958 = trunc i64 %2956 to i32
  %2959 = shl nsw i32 %2958, 5
  %2960 = icmp sgt i32 %4, %2959
  %2961 = or i1 %2957, %2960
  br i1 %2961, label %"produce blur_x146", label %"for blur_y.s0.x.x.rebased140.consume blur_x147_crit_edge"

"for blur_y.s0.x.x.rebased140.consume blur_x147_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased140"
  %.pre3403 = shl nsw i64 %2956, 5
  br label %"consume blur_x147"

"end for blur_y.s0.x.x.rebased141":               ; preds = %"consume blur_x147", %after_bb135
  br i1 %102, label %"for blur_y.s0.x.x.rebased148.preheader", label %"end for blur_y.s0.x.x.rebased149", !prof !386

"for blur_y.s0.x.x.rebased148.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased141"
  %2962 = sext i32 %t1738 to i64
  %2963 = zext i32 %.pre-phi3386 to i64
  %2964 = mul nsw i64 %2963, %112
  %2965 = sub nsw i64 %2964, %96
  %2966 = zext i32 %.pre-phi3382 to i64
  %2967 = mul nsw i64 %2966, %112
  %2968 = sub nsw i64 %2967, %96
  %2969 = zext i32 %.pre-phi3390 to i64
  %2970 = mul nsw i64 %2969, %112
  %2971 = sub nsw i64 %2970, %96
  %2972 = zext i32 %.pre-phi3402 to i64
  %2973 = mul nsw i64 %2972, %112
  %2974 = sub nsw i64 %2973, %96
  %2975 = zext i32 %.pre-phi3396 to i64
  %2976 = mul nsw i64 %2975, %112
  %2977 = sub nsw i64 %2976, %96
  %2978 = sext i32 %a26 to i64
  %2979 = add nsw i64 %2978, 2
  %2980 = mul nsw i64 %2979, %113
  %2981 = add nsw i64 %2980, %116
  br label %"for blur_y.s0.x.x.rebased148"

"produce blur_x146":                              ; preds = %"for blur_y.s0.x.x.rebased140"
  %t744 = add nsw i32 %2959, %t1737
  %2982 = sext i32 %t744 to i64
  %2983 = getelementptr inbounds i16, i16* %read_input, i64 %2982
  %2984 = getelementptr inbounds i16, i16* %2983, i64 1
  %2985 = bitcast i16* %2984 to <16 x i16>*
  %2986 = load <16 x i16>, <16 x i16>* %2985, align 2, !tbaa !396
  %2987 = getelementptr inbounds i16, i16* %2983, i64 17
  %2988 = bitcast i16* %2987 to <16 x i16>*
  %2989 = load <16 x i16>, <16 x i16>* %2988, align 2, !tbaa !396
  %2990 = bitcast i16* %2983 to <16 x i16>*
  %2991 = load <16 x i16>, <16 x i16>* %2990, align 2, !tbaa !396
  %2992 = getelementptr inbounds i16, i16* %2983, i64 16
  %2993 = bitcast i16* %2992 to <16 x i16>*
  %2994 = load <16 x i16>, <16 x i16>* %2993, align 2, !tbaa !396
  %2995 = getelementptr inbounds i16, i16* %2983, i64 2
  %2996 = bitcast i16* %2995 to <16 x i16>*
  %2997 = load <16 x i16>, <16 x i16>* %2996, align 2, !tbaa !396
  %2998 = getelementptr inbounds i16, i16* %2983, i64 18
  %2999 = bitcast i16* %2998 to <16 x i16>*
  %3000 = load <16 x i16>, <16 x i16>* %2999, align 2, !tbaa !396
  %3001 = getelementptr inbounds i16, i16* %2983, i64 4
  %3002 = bitcast i16* %3001 to <16 x i16>*
  %3003 = load <16 x i16>, <16 x i16>* %3002, align 2, !tbaa !396
  %3004 = getelementptr inbounds i16, i16* %2983, i64 20
  %3005 = bitcast i16* %3004 to <16 x i16>*
  %3006 = load <16 x i16>, <16 x i16>* %3005, align 2, !tbaa !396
  %3007 = getelementptr inbounds i16, i16* %2983, i64 3
  %3008 = bitcast i16* %3007 to <16 x i16>*
  %3009 = load <16 x i16>, <16 x i16>* %3008, align 2, !tbaa !396
  %3010 = getelementptr inbounds i16, i16* %2983, i64 19
  %3011 = bitcast i16* %3010 to <16 x i16>*
  %3012 = load <16 x i16>, <16 x i16>* %3011, align 2, !tbaa !396
  %3013 = add <16 x i16> %2991, %2986
  %3014 = add <16 x i16> %3013, %2997
  %3015 = add <16 x i16> %3014, %3003
  %3016 = add <16 x i16> %3015, %3009
  %3017 = add <16 x i16> %2994, %2989
  %3018 = add <16 x i16> %3017, %3000
  %3019 = add <16 x i16> %3018, %3006
  %3020 = add <16 x i16> %3019, %3012
  %3021 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3016, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3022 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3020, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3023 = shufflevector <16 x i16> %3021, <16 x i16> %3022, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3024 = lshr <32 x i16> %3023, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3025 = shufflevector <32 x i16> %3024, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3026 = shl nsw i64 %2956, 5
  %3027 = add nsw i64 %3026, %2809
  %3028 = getelementptr inbounds i16, i16* %blur_x, i64 %3027
  %3029 = bitcast i16* %3028 to <16 x i16>*
  store <16 x i16> %3025, <16 x i16>* %3029, align 2, !tbaa !399
  %3030 = shufflevector <32 x i16> %3024, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3031 = getelementptr inbounds i16, i16* %3028, i64 16
  %3032 = bitcast i16* %3031 to <16 x i16>*
  store <16 x i16> %3030, <16 x i16>* %3032, align 2, !tbaa !399
  br label %"consume blur_x147"

"consume blur_x147":                              ; preds = %"for blur_y.s0.x.x.rebased140.consume blur_x147_crit_edge", %"produce blur_x146"
  %.pre-phi3404 = phi i64 [ %.pre3403, %"for blur_y.s0.x.x.rebased140.consume blur_x147_crit_edge" ], [ %3026, %"produce blur_x146" ]
  %3033 = add nsw i64 %2812, %.pre-phi3404
  %3034 = getelementptr inbounds i16, i16* %blur_x, i64 %3033
  %3035 = bitcast i16* %3034 to <16 x i16>*
  %3036 = load <16 x i16>, <16 x i16>* %3035, align 2, !tbaa !399
  %3037 = getelementptr inbounds i16, i16* %3034, i64 16
  %3038 = bitcast i16* %3037 to <16 x i16>*
  %3039 = load <16 x i16>, <16 x i16>* %3038, align 2, !tbaa !399
  %3040 = add nsw i64 %2815, %.pre-phi3404
  %3041 = getelementptr inbounds i16, i16* %blur_x, i64 %3040
  %3042 = bitcast i16* %3041 to <16 x i16>*
  %3043 = load <16 x i16>, <16 x i16>* %3042, align 2, !tbaa !399
  %3044 = getelementptr inbounds i16, i16* %3041, i64 16
  %3045 = bitcast i16* %3044 to <16 x i16>*
  %3046 = load <16 x i16>, <16 x i16>* %3045, align 2, !tbaa !399
  %3047 = add nsw i64 %2818, %.pre-phi3404
  %3048 = getelementptr inbounds i16, i16* %blur_x, i64 %3047
  %3049 = bitcast i16* %3048 to <16 x i16>*
  %3050 = load <16 x i16>, <16 x i16>* %3049, align 2, !tbaa !399
  %3051 = getelementptr inbounds i16, i16* %3048, i64 16
  %3052 = bitcast i16* %3051 to <16 x i16>*
  %3053 = load <16 x i16>, <16 x i16>* %3052, align 2, !tbaa !399
  %3054 = add nsw i64 %2821, %.pre-phi3404
  %3055 = getelementptr inbounds i16, i16* %blur_x, i64 %3054
  %3056 = bitcast i16* %3055 to <16 x i16>*
  %3057 = load <16 x i16>, <16 x i16>* %3056, align 2, !tbaa !399
  %3058 = getelementptr inbounds i16, i16* %3055, i64 16
  %3059 = bitcast i16* %3058 to <16 x i16>*
  %3060 = load <16 x i16>, <16 x i16>* %3059, align 2, !tbaa !399
  %3061 = add nsw i64 %2824, %.pre-phi3404
  %3062 = getelementptr inbounds i16, i16* %blur_x, i64 %3061
  %3063 = bitcast i16* %3062 to <16 x i16>*
  %3064 = load <16 x i16>, <16 x i16>* %3063, align 2, !tbaa !399
  %3065 = getelementptr inbounds i16, i16* %3062, i64 16
  %3066 = bitcast i16* %3065 to <16 x i16>*
  %3067 = load <16 x i16>, <16 x i16>* %3066, align 2, !tbaa !399
  %3068 = add <16 x i16> %3043, %3036
  %3069 = add <16 x i16> %3068, %3050
  %3070 = add <16 x i16> %3069, %3057
  %3071 = add <16 x i16> %3070, %3064
  %3072 = add <16 x i16> %3046, %3039
  %3073 = add <16 x i16> %3072, %3053
  %3074 = add <16 x i16> %3073, %3060
  %3075 = add <16 x i16> %3074, %3067
  %3076 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3071, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3077 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3075, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3078 = shufflevector <16 x i16> %3076, <16 x i16> %3077, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3079 = lshr <32 x i16> %3078, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3080 = shufflevector <32 x i16> %3079, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3081 = add nsw i64 %2828, %.pre-phi3404
  %3082 = getelementptr inbounds i16, i16* %66, i64 %3081
  %3083 = bitcast i16* %3082 to <16 x i16>*
  store <16 x i16> %3080, <16 x i16>* %3083, align 2, !tbaa !401
  %3084 = shufflevector <32 x i16> %3079, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3085 = getelementptr inbounds i16, i16* %3082, i64 16
  %3086 = bitcast i16* %3085 to <16 x i16>*
  store <16 x i16> %3084, <16 x i16>* %3086, align 2, !tbaa !401
  %indvars.iv.next3162 = add nuw nsw i64 %indvars.iv3161, 1
  %.not2686 = icmp eq i64 %indvars.iv.next3162, %184
  br i1 %.not2686, label %"end for blur_y.s0.x.x.rebased141", label %"for blur_y.s0.x.x.rebased140"

"for blur_y.s0.x.x.rebased148":                   ; preds = %"for blur_y.s0.x.x.rebased148.preheader", %"consume blur_x156"
  %blur_y.s0.x.x.rebased150 = phi i32 [ %3199, %"consume blur_x156" ], [ 0, %"for blur_y.s0.x.x.rebased148.preheader" ]
  %3087 = add nsw i32 %blur_y.s0.x.x.rebased150, %t1626
  %a119 = shl nsw i32 %3087, 5
  %3088 = icmp sgt i32 %a14, %a119
  %b125 = select i1 %3088, i32 %a119, i32 %a14
  %3089 = icmp slt i32 %3087, 1
  %3090 = icmp sgt i32 %4, %a119
  %3091 = or i1 %3089, %3090
  br i1 %3091, label %"produce blur_x154", label %"consume blur_x156"

"end for blur_y.s0.x.x.rebased149":               ; preds = %"consume blur_x156", %"end for blur_y.s0.x.x.rebased141"
  br i1 %34, label %"produce blur_x160", label %"end for blur_y.s0.x.x.rebased149.after_bb157_crit_edge"

"end for blur_y.s0.x.x.rebased149.after_bb157_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased149"
  %.pre3405 = add nsw i32 %a26, 7
  %.pre3407 = and i32 %.pre3405, 7
  br label %after_bb157

"produce blur_x154":                              ; preds = %"for blur_y.s0.x.x.rebased148"
  %3092 = icmp slt i32 %b125, %4
  %blur_x.s0.x.v1.base.s155 = select i1 %3092, i32 %b125, i32 %4
  %t749 = add nsw i32 %blur_x.s0.x.v1.base.s155, %t1737
  %3093 = sext i32 %t749 to i64
  %3094 = getelementptr inbounds i16, i16* %read_input, i64 %3093
  %3095 = getelementptr inbounds i16, i16* %3094, i64 1
  %3096 = bitcast i16* %3095 to <16 x i16>*
  %3097 = load <16 x i16>, <16 x i16>* %3096, align 2, !tbaa !396
  %3098 = getelementptr inbounds i16, i16* %3094, i64 17
  %3099 = bitcast i16* %3098 to <16 x i16>*
  %3100 = load <16 x i16>, <16 x i16>* %3099, align 2, !tbaa !396
  %3101 = bitcast i16* %3094 to <16 x i16>*
  %3102 = load <16 x i16>, <16 x i16>* %3101, align 2, !tbaa !396
  %3103 = getelementptr inbounds i16, i16* %3094, i64 16
  %3104 = bitcast i16* %3103 to <16 x i16>*
  %3105 = load <16 x i16>, <16 x i16>* %3104, align 2, !tbaa !396
  %3106 = getelementptr inbounds i16, i16* %3094, i64 2
  %3107 = bitcast i16* %3106 to <16 x i16>*
  %3108 = load <16 x i16>, <16 x i16>* %3107, align 2, !tbaa !396
  %3109 = getelementptr inbounds i16, i16* %3094, i64 18
  %3110 = bitcast i16* %3109 to <16 x i16>*
  %3111 = load <16 x i16>, <16 x i16>* %3110, align 2, !tbaa !396
  %3112 = getelementptr inbounds i16, i16* %3094, i64 4
  %3113 = bitcast i16* %3112 to <16 x i16>*
  %3114 = load <16 x i16>, <16 x i16>* %3113, align 2, !tbaa !396
  %3115 = getelementptr inbounds i16, i16* %3094, i64 20
  %3116 = bitcast i16* %3115 to <16 x i16>*
  %3117 = load <16 x i16>, <16 x i16>* %3116, align 2, !tbaa !396
  %3118 = getelementptr inbounds i16, i16* %3094, i64 3
  %3119 = bitcast i16* %3118 to <16 x i16>*
  %3120 = load <16 x i16>, <16 x i16>* %3119, align 2, !tbaa !396
  %3121 = getelementptr inbounds i16, i16* %3094, i64 19
  %3122 = bitcast i16* %3121 to <16 x i16>*
  %3123 = load <16 x i16>, <16 x i16>* %3122, align 2, !tbaa !396
  %3124 = add <16 x i16> %3102, %3097
  %3125 = add <16 x i16> %3124, %3108
  %3126 = add <16 x i16> %3125, %3114
  %3127 = add <16 x i16> %3126, %3120
  %3128 = add <16 x i16> %3105, %3100
  %3129 = add <16 x i16> %3128, %3111
  %3130 = add <16 x i16> %3129, %3117
  %3131 = add <16 x i16> %3130, %3123
  %3132 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3127, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3133 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3131, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3134 = shufflevector <16 x i16> %3132, <16 x i16> %3133, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3135 = lshr <32 x i16> %3134, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3136 = shufflevector <32 x i16> %3135, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3137 = sext i32 %blur_x.s0.x.v1.base.s155 to i64
  %3138 = add nsw i64 %3137, %2962
  %3139 = getelementptr inbounds i16, i16* %blur_x, i64 %3138
  %3140 = bitcast i16* %3139 to <16 x i16>*
  store <16 x i16> %3136, <16 x i16>* %3140, align 2, !tbaa !399
  %3141 = shufflevector <32 x i16> %3135, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3142 = getelementptr inbounds i16, i16* %3139, i64 16
  %3143 = bitcast i16* %3142 to <16 x i16>*
  store <16 x i16> %3141, <16 x i16>* %3143, align 2, !tbaa !399
  br label %"consume blur_x156"

"consume blur_x156":                              ; preds = %"for blur_y.s0.x.x.rebased148", %"produce blur_x154"
  %3144 = sext i32 %b125 to i64
  %3145 = add nsw i64 %2965, %3144
  %3146 = getelementptr inbounds i16, i16* %blur_x, i64 %3145
  %3147 = bitcast i16* %3146 to <16 x i16>*
  %3148 = load <16 x i16>, <16 x i16>* %3147, align 2, !tbaa !399
  %3149 = getelementptr inbounds i16, i16* %3146, i64 16
  %3150 = bitcast i16* %3149 to <16 x i16>*
  %3151 = load <16 x i16>, <16 x i16>* %3150, align 2, !tbaa !399
  %3152 = add nsw i64 %2968, %3144
  %3153 = getelementptr inbounds i16, i16* %blur_x, i64 %3152
  %3154 = bitcast i16* %3153 to <16 x i16>*
  %3155 = load <16 x i16>, <16 x i16>* %3154, align 2, !tbaa !399
  %3156 = getelementptr inbounds i16, i16* %3153, i64 16
  %3157 = bitcast i16* %3156 to <16 x i16>*
  %3158 = load <16 x i16>, <16 x i16>* %3157, align 2, !tbaa !399
  %3159 = add nsw i64 %2971, %3144
  %3160 = getelementptr inbounds i16, i16* %blur_x, i64 %3159
  %3161 = bitcast i16* %3160 to <16 x i16>*
  %3162 = load <16 x i16>, <16 x i16>* %3161, align 2, !tbaa !399
  %3163 = getelementptr inbounds i16, i16* %3160, i64 16
  %3164 = bitcast i16* %3163 to <16 x i16>*
  %3165 = load <16 x i16>, <16 x i16>* %3164, align 2, !tbaa !399
  %3166 = add nsw i64 %2974, %3144
  %3167 = getelementptr inbounds i16, i16* %blur_x, i64 %3166
  %3168 = bitcast i16* %3167 to <16 x i16>*
  %3169 = load <16 x i16>, <16 x i16>* %3168, align 2, !tbaa !399
  %3170 = getelementptr inbounds i16, i16* %3167, i64 16
  %3171 = bitcast i16* %3170 to <16 x i16>*
  %3172 = load <16 x i16>, <16 x i16>* %3171, align 2, !tbaa !399
  %3173 = add nsw i64 %2977, %3144
  %3174 = getelementptr inbounds i16, i16* %blur_x, i64 %3173
  %3175 = bitcast i16* %3174 to <16 x i16>*
  %3176 = load <16 x i16>, <16 x i16>* %3175, align 2, !tbaa !399
  %3177 = getelementptr inbounds i16, i16* %3174, i64 16
  %3178 = bitcast i16* %3177 to <16 x i16>*
  %3179 = load <16 x i16>, <16 x i16>* %3178, align 2, !tbaa !399
  %3180 = add <16 x i16> %3155, %3148
  %3181 = add <16 x i16> %3180, %3162
  %3182 = add <16 x i16> %3181, %3169
  %3183 = add <16 x i16> %3182, %3176
  %3184 = add <16 x i16> %3158, %3151
  %3185 = add <16 x i16> %3184, %3165
  %3186 = add <16 x i16> %3185, %3172
  %3187 = add <16 x i16> %3186, %3179
  %3188 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3183, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3189 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3187, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3190 = shufflevector <16 x i16> %3188, <16 x i16> %3189, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3191 = lshr <32 x i16> %3190, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3192 = shufflevector <32 x i16> %3191, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3193 = add nsw i64 %2981, %3144
  %3194 = getelementptr inbounds i16, i16* %66, i64 %3193
  %3195 = bitcast i16* %3194 to <16 x i16>*
  store <16 x i16> %3192, <16 x i16>* %3195, align 2, !tbaa !401
  %3196 = shufflevector <32 x i16> %3191, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3197 = getelementptr inbounds i16, i16* %3194, i64 16
  %3198 = bitcast i16* %3197 to <16 x i16>*
  store <16 x i16> %3196, <16 x i16>* %3198, align 2, !tbaa !401
  %3199 = add nuw nsw i32 %blur_y.s0.x.x.rebased150, 1
  %.not2685 = icmp eq i32 %3199, %t1683
  br i1 %.not2685, label %"end for blur_y.s0.x.x.rebased149", label %"for blur_y.s0.x.x.rebased148"

after_bb157:                                      ; preds = %"end for blur_y.s0.x.x.rebased149.after_bb157_crit_edge", %"produce blur_x160"
  %.pre-phi3408 = phi i32 [ %.pre3407, %"end for blur_y.s0.x.x.rebased149.after_bb157_crit_edge" ], [ %3266, %"produce blur_x160" ]
  %3200 = mul nsw i32 %.pre-phi3408, %a73
  %t1754 = sub nsw i32 %3200, %t1645
  br i1 %100, label %"for blur_y.s0.x.x.rebased162.preheader", label %"end for blur_y.s0.x.x.rebased163", !prof !386

"for blur_y.s0.x.x.rebased162.preheader":         ; preds = %after_bb157
  %3201 = sext i32 %t1754 to i64
  %3202 = zext i32 %.pre-phi3390 to i64
  %3203 = mul nsw i64 %3202, %112
  %3204 = sub nsw i64 %3203, %96
  %3205 = zext i32 %.pre-phi3386 to i64
  %3206 = mul nsw i64 %3205, %112
  %3207 = sub nsw i64 %3206, %96
  %3208 = zext i32 %.pre-phi3396 to i64
  %3209 = mul nsw i64 %3208, %112
  %3210 = sub nsw i64 %3209, %96
  %3211 = zext i32 %.pre-phi3408 to i64
  %3212 = mul nsw i64 %3211, %112
  %3213 = sub nsw i64 %3212, %96
  %3214 = zext i32 %.pre-phi3402 to i64
  %3215 = mul nsw i64 %3214, %112
  %3216 = sub nsw i64 %3215, %96
  %3217 = sext i32 %a26 to i64
  %3218 = add nsw i64 %3217, 3
  %3219 = mul nsw i64 %3218, %113
  %3220 = add nsw i64 %3219, %116
  br label %"for blur_y.s0.x.x.rebased162"

"produce blur_x160":                              ; preds = %"end for blur_y.s0.x.x.rebased149"
  %3221 = getelementptr inbounds i16, i16* %read_input, i64 %121
  %3222 = getelementptr inbounds i16, i16* %3221, i64 -31
  %3223 = bitcast i16* %3222 to <16 x i16>*
  %3224 = load <16 x i16>, <16 x i16>* %3223, align 2, !tbaa !396
  %3225 = getelementptr inbounds i16, i16* %3221, i64 -15
  %3226 = bitcast i16* %3225 to <16 x i16>*
  %3227 = load <16 x i16>, <16 x i16>* %3226, align 2, !tbaa !396
  %3228 = getelementptr inbounds i16, i16* %3221, i64 -32
  %3229 = bitcast i16* %3228 to <16 x i16>*
  %3230 = load <16 x i16>, <16 x i16>* %3229, align 2, !tbaa !396
  %3231 = getelementptr inbounds i16, i16* %3221, i64 -16
  %3232 = bitcast i16* %3231 to <16 x i16>*
  %3233 = load <16 x i16>, <16 x i16>* %3232, align 2, !tbaa !396
  %3234 = getelementptr inbounds i16, i16* %3221, i64 -30
  %3235 = bitcast i16* %3234 to <16 x i16>*
  %3236 = load <16 x i16>, <16 x i16>* %3235, align 2, !tbaa !396
  %3237 = getelementptr inbounds i16, i16* %3221, i64 -14
  %3238 = bitcast i16* %3237 to <16 x i16>*
  %3239 = load <16 x i16>, <16 x i16>* %3238, align 2, !tbaa !396
  %3240 = getelementptr inbounds i16, i16* %3221, i64 -28
  %3241 = bitcast i16* %3240 to <16 x i16>*
  %3242 = load <16 x i16>, <16 x i16>* %3241, align 2, !tbaa !396
  %3243 = getelementptr inbounds i16, i16* %3221, i64 -12
  %3244 = bitcast i16* %3243 to <16 x i16>*
  %3245 = load <16 x i16>, <16 x i16>* %3244, align 2, !tbaa !396
  %3246 = getelementptr inbounds i16, i16* %3221, i64 -29
  %3247 = bitcast i16* %3246 to <16 x i16>*
  %3248 = load <16 x i16>, <16 x i16>* %3247, align 2, !tbaa !396
  %3249 = getelementptr inbounds i16, i16* %3221, i64 -13
  %3250 = bitcast i16* %3249 to <16 x i16>*
  %3251 = load <16 x i16>, <16 x i16>* %3250, align 2, !tbaa !396
  %3252 = add <16 x i16> %3230, %3224
  %3253 = add <16 x i16> %3252, %3236
  %3254 = add <16 x i16> %3253, %3242
  %3255 = add <16 x i16> %3254, %3248
  %3256 = add <16 x i16> %3233, %3227
  %3257 = add <16 x i16> %3256, %3239
  %3258 = add <16 x i16> %3257, %3245
  %3259 = add <16 x i16> %3258, %3251
  %3260 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3255, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3261 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3259, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3262 = shufflevector <16 x i16> %3260, <16 x i16> %3261, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3263 = lshr <32 x i16> %3262, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3264 = shufflevector <32 x i16> %3263, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3265 = add nsw i32 %a26, 7
  %3266 = and i32 %3265, 7
  %3267 = zext i32 %3266 to i64
  %3268 = mul nsw i64 %97, %3267
  %3269 = add nsw i64 %99, %3268
  %3270 = getelementptr inbounds i16, i16* %blur_x, i64 %3269
  %3271 = getelementptr inbounds i16, i16* %3270, i64 -32
  %3272 = bitcast i16* %3271 to <16 x i16>*
  store <16 x i16> %3264, <16 x i16>* %3272, align 2, !tbaa !399
  %3273 = shufflevector <32 x i16> %3263, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3274 = getelementptr inbounds i16, i16* %3270, i64 -16
  %3275 = bitcast i16* %3274 to <16 x i16>*
  store <16 x i16> %3273, <16 x i16>* %3275, align 2, !tbaa !399
  %3276 = zext i32 %.pre-phi3390 to i64
  %3277 = mul nsw i64 %3276, %112
  %3278 = add nsw i64 %3277, %94
  %3279 = getelementptr inbounds i16, i16* %blur_x, i64 %3278
  %3280 = getelementptr inbounds i16, i16* %3279, i64 -32
  %3281 = bitcast i16* %3280 to <16 x i16>*
  %3282 = load <16 x i16>, <16 x i16>* %3281, align 2, !tbaa !399
  %3283 = getelementptr inbounds i16, i16* %3279, i64 -16
  %3284 = bitcast i16* %3283 to <16 x i16>*
  %3285 = load <16 x i16>, <16 x i16>* %3284, align 2, !tbaa !399
  %3286 = zext i32 %.pre-phi3386 to i64
  %3287 = mul nsw i64 %3286, %112
  %3288 = add nsw i64 %3287, %94
  %3289 = getelementptr inbounds i16, i16* %blur_x, i64 %3288
  %3290 = getelementptr inbounds i16, i16* %3289, i64 -32
  %3291 = bitcast i16* %3290 to <16 x i16>*
  %3292 = load <16 x i16>, <16 x i16>* %3291, align 2, !tbaa !399
  %3293 = getelementptr inbounds i16, i16* %3289, i64 -16
  %3294 = bitcast i16* %3293 to <16 x i16>*
  %3295 = load <16 x i16>, <16 x i16>* %3294, align 2, !tbaa !399
  %3296 = zext i32 %.pre-phi3396 to i64
  %3297 = mul nsw i64 %3296, %112
  %3298 = add nsw i64 %3297, %94
  %3299 = getelementptr inbounds i16, i16* %blur_x, i64 %3298
  %3300 = getelementptr inbounds i16, i16* %3299, i64 -32
  %3301 = bitcast i16* %3300 to <16 x i16>*
  %3302 = load <16 x i16>, <16 x i16>* %3301, align 2, !tbaa !399
  %3303 = getelementptr inbounds i16, i16* %3299, i64 -16
  %3304 = bitcast i16* %3303 to <16 x i16>*
  %3305 = load <16 x i16>, <16 x i16>* %3304, align 2, !tbaa !399
  %3306 = mul nsw i64 %3267, %112
  %3307 = add nsw i64 %3306, %94
  %3308 = getelementptr inbounds i16, i16* %blur_x, i64 %3307
  %3309 = getelementptr inbounds i16, i16* %3308, i64 -32
  %3310 = bitcast i16* %3309 to <16 x i16>*
  %3311 = load <16 x i16>, <16 x i16>* %3310, align 2, !tbaa !399
  %3312 = getelementptr inbounds i16, i16* %3308, i64 -16
  %3313 = bitcast i16* %3312 to <16 x i16>*
  %3314 = load <16 x i16>, <16 x i16>* %3313, align 2, !tbaa !399
  %3315 = zext i32 %.pre-phi3402 to i64
  %3316 = mul nsw i64 %3315, %112
  %3317 = add nsw i64 %3316, %94
  %3318 = getelementptr inbounds i16, i16* %blur_x, i64 %3317
  %3319 = getelementptr inbounds i16, i16* %3318, i64 -32
  %3320 = bitcast i16* %3319 to <16 x i16>*
  %3321 = load <16 x i16>, <16 x i16>* %3320, align 2, !tbaa !399
  %3322 = getelementptr inbounds i16, i16* %3318, i64 -16
  %3323 = bitcast i16* %3322 to <16 x i16>*
  %3324 = load <16 x i16>, <16 x i16>* %3323, align 2, !tbaa !399
  %3325 = add <16 x i16> %3292, %3282
  %3326 = add <16 x i16> %3325, %3302
  %3327 = add <16 x i16> %3326, %3311
  %3328 = add <16 x i16> %3327, %3321
  %3329 = add <16 x i16> %3295, %3285
  %3330 = add <16 x i16> %3329, %3305
  %3331 = add <16 x i16> %3330, %3314
  %3332 = add <16 x i16> %3331, %3324
  %3333 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3328, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3334 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3332, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3335 = shufflevector <16 x i16> %3333, <16 x i16> %3334, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3336 = lshr <32 x i16> %3335, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3337 = shufflevector <32 x i16> %3336, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3338 = sext i32 %a26 to i64
  %3339 = add nsw i64 %3338, 3
  %3340 = mul nsw i64 %3339, %113
  %3341 = add nsw i64 %115, %3340
  %3342 = getelementptr inbounds i16, i16* %66, i64 %3341
  %3343 = getelementptr inbounds i16, i16* %3342, i64 -32
  %3344 = bitcast i16* %3343 to <16 x i16>*
  store <16 x i16> %3337, <16 x i16>* %3344, align 2, !tbaa !401
  %3345 = shufflevector <32 x i16> %3336, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3346 = getelementptr inbounds i16, i16* %3342, i64 -16
  %3347 = bitcast i16* %3346 to <16 x i16>*
  store <16 x i16> %3345, <16 x i16>* %3347, align 2, !tbaa !401
  br label %after_bb157

"for blur_y.s0.x.x.rebased162":                   ; preds = %"for blur_y.s0.x.x.rebased162.preheader", %"consume blur_x169"
  %indvars.iv3164 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased162.preheader" ], [ %indvars.iv.next3165, %"consume blur_x169" ]
  %3348 = add nsw i64 %indvars.iv3164, %101
  %3349 = icmp slt i64 %3348, 1
  %3350 = trunc i64 %3348 to i32
  %3351 = shl nsw i32 %3350, 5
  %3352 = icmp sgt i32 %4, %3351
  %3353 = or i1 %3349, %3352
  br i1 %3353, label %"produce blur_x168", label %"for blur_y.s0.x.x.rebased162.consume blur_x169_crit_edge"

"for blur_y.s0.x.x.rebased162.consume blur_x169_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased162"
  %.pre3409 = shl nsw i64 %3348, 5
  br label %"consume blur_x169"

"end for blur_y.s0.x.x.rebased163":               ; preds = %"consume blur_x169", %after_bb157
  br i1 %102, label %"for blur_y.s0.x.x.rebased170.preheader", label %"end for blur_y.s0.x.x.rebased171", !prof !386

"for blur_y.s0.x.x.rebased170.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased163"
  %3354 = sext i32 %t1754 to i64
  %3355 = zext i32 %.pre-phi3390 to i64
  %3356 = mul nsw i64 %3355, %112
  %3357 = sub nsw i64 %3356, %96
  %3358 = zext i32 %.pre-phi3386 to i64
  %3359 = mul nsw i64 %3358, %112
  %3360 = sub nsw i64 %3359, %96
  %3361 = zext i32 %.pre-phi3396 to i64
  %3362 = mul nsw i64 %3361, %112
  %3363 = sub nsw i64 %3362, %96
  %3364 = zext i32 %.pre-phi3408 to i64
  %3365 = mul nsw i64 %3364, %112
  %3366 = sub nsw i64 %3365, %96
  %3367 = zext i32 %.pre-phi3402 to i64
  %3368 = mul nsw i64 %3367, %112
  %3369 = sub nsw i64 %3368, %96
  %3370 = sext i32 %a26 to i64
  %3371 = add nsw i64 %3370, 3
  %3372 = mul nsw i64 %3371, %113
  %3373 = add nsw i64 %3372, %116
  br label %"for blur_y.s0.x.x.rebased170"

"produce blur_x168":                              ; preds = %"for blur_y.s0.x.x.rebased162"
  %t760 = add nsw i32 %3351, %t1753
  %3374 = sext i32 %t760 to i64
  %3375 = getelementptr inbounds i16, i16* %read_input, i64 %3374
  %3376 = getelementptr inbounds i16, i16* %3375, i64 1
  %3377 = bitcast i16* %3376 to <16 x i16>*
  %3378 = load <16 x i16>, <16 x i16>* %3377, align 2, !tbaa !396
  %3379 = getelementptr inbounds i16, i16* %3375, i64 17
  %3380 = bitcast i16* %3379 to <16 x i16>*
  %3381 = load <16 x i16>, <16 x i16>* %3380, align 2, !tbaa !396
  %3382 = bitcast i16* %3375 to <16 x i16>*
  %3383 = load <16 x i16>, <16 x i16>* %3382, align 2, !tbaa !396
  %3384 = getelementptr inbounds i16, i16* %3375, i64 16
  %3385 = bitcast i16* %3384 to <16 x i16>*
  %3386 = load <16 x i16>, <16 x i16>* %3385, align 2, !tbaa !396
  %3387 = getelementptr inbounds i16, i16* %3375, i64 2
  %3388 = bitcast i16* %3387 to <16 x i16>*
  %3389 = load <16 x i16>, <16 x i16>* %3388, align 2, !tbaa !396
  %3390 = getelementptr inbounds i16, i16* %3375, i64 18
  %3391 = bitcast i16* %3390 to <16 x i16>*
  %3392 = load <16 x i16>, <16 x i16>* %3391, align 2, !tbaa !396
  %3393 = getelementptr inbounds i16, i16* %3375, i64 4
  %3394 = bitcast i16* %3393 to <16 x i16>*
  %3395 = load <16 x i16>, <16 x i16>* %3394, align 2, !tbaa !396
  %3396 = getelementptr inbounds i16, i16* %3375, i64 20
  %3397 = bitcast i16* %3396 to <16 x i16>*
  %3398 = load <16 x i16>, <16 x i16>* %3397, align 2, !tbaa !396
  %3399 = getelementptr inbounds i16, i16* %3375, i64 3
  %3400 = bitcast i16* %3399 to <16 x i16>*
  %3401 = load <16 x i16>, <16 x i16>* %3400, align 2, !tbaa !396
  %3402 = getelementptr inbounds i16, i16* %3375, i64 19
  %3403 = bitcast i16* %3402 to <16 x i16>*
  %3404 = load <16 x i16>, <16 x i16>* %3403, align 2, !tbaa !396
  %3405 = add <16 x i16> %3383, %3378
  %3406 = add <16 x i16> %3405, %3389
  %3407 = add <16 x i16> %3406, %3395
  %3408 = add <16 x i16> %3407, %3401
  %3409 = add <16 x i16> %3386, %3381
  %3410 = add <16 x i16> %3409, %3392
  %3411 = add <16 x i16> %3410, %3398
  %3412 = add <16 x i16> %3411, %3404
  %3413 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3408, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3414 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3412, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3415 = shufflevector <16 x i16> %3413, <16 x i16> %3414, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3416 = lshr <32 x i16> %3415, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3417 = shufflevector <32 x i16> %3416, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3418 = shl nsw i64 %3348, 5
  %3419 = add nsw i64 %3418, %3201
  %3420 = getelementptr inbounds i16, i16* %blur_x, i64 %3419
  %3421 = bitcast i16* %3420 to <16 x i16>*
  store <16 x i16> %3417, <16 x i16>* %3421, align 2, !tbaa !399
  %3422 = shufflevector <32 x i16> %3416, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3423 = getelementptr inbounds i16, i16* %3420, i64 16
  %3424 = bitcast i16* %3423 to <16 x i16>*
  store <16 x i16> %3422, <16 x i16>* %3424, align 2, !tbaa !399
  br label %"consume blur_x169"

"consume blur_x169":                              ; preds = %"for blur_y.s0.x.x.rebased162.consume blur_x169_crit_edge", %"produce blur_x168"
  %.pre-phi3410 = phi i64 [ %.pre3409, %"for blur_y.s0.x.x.rebased162.consume blur_x169_crit_edge" ], [ %3418, %"produce blur_x168" ]
  %3425 = add nsw i64 %3204, %.pre-phi3410
  %3426 = getelementptr inbounds i16, i16* %blur_x, i64 %3425
  %3427 = bitcast i16* %3426 to <16 x i16>*
  %3428 = load <16 x i16>, <16 x i16>* %3427, align 2, !tbaa !399
  %3429 = getelementptr inbounds i16, i16* %3426, i64 16
  %3430 = bitcast i16* %3429 to <16 x i16>*
  %3431 = load <16 x i16>, <16 x i16>* %3430, align 2, !tbaa !399
  %3432 = add nsw i64 %3207, %.pre-phi3410
  %3433 = getelementptr inbounds i16, i16* %blur_x, i64 %3432
  %3434 = bitcast i16* %3433 to <16 x i16>*
  %3435 = load <16 x i16>, <16 x i16>* %3434, align 2, !tbaa !399
  %3436 = getelementptr inbounds i16, i16* %3433, i64 16
  %3437 = bitcast i16* %3436 to <16 x i16>*
  %3438 = load <16 x i16>, <16 x i16>* %3437, align 2, !tbaa !399
  %3439 = add nsw i64 %3210, %.pre-phi3410
  %3440 = getelementptr inbounds i16, i16* %blur_x, i64 %3439
  %3441 = bitcast i16* %3440 to <16 x i16>*
  %3442 = load <16 x i16>, <16 x i16>* %3441, align 2, !tbaa !399
  %3443 = getelementptr inbounds i16, i16* %3440, i64 16
  %3444 = bitcast i16* %3443 to <16 x i16>*
  %3445 = load <16 x i16>, <16 x i16>* %3444, align 2, !tbaa !399
  %3446 = add nsw i64 %3213, %.pre-phi3410
  %3447 = getelementptr inbounds i16, i16* %blur_x, i64 %3446
  %3448 = bitcast i16* %3447 to <16 x i16>*
  %3449 = load <16 x i16>, <16 x i16>* %3448, align 2, !tbaa !399
  %3450 = getelementptr inbounds i16, i16* %3447, i64 16
  %3451 = bitcast i16* %3450 to <16 x i16>*
  %3452 = load <16 x i16>, <16 x i16>* %3451, align 2, !tbaa !399
  %3453 = add nsw i64 %3216, %.pre-phi3410
  %3454 = getelementptr inbounds i16, i16* %blur_x, i64 %3453
  %3455 = bitcast i16* %3454 to <16 x i16>*
  %3456 = load <16 x i16>, <16 x i16>* %3455, align 2, !tbaa !399
  %3457 = getelementptr inbounds i16, i16* %3454, i64 16
  %3458 = bitcast i16* %3457 to <16 x i16>*
  %3459 = load <16 x i16>, <16 x i16>* %3458, align 2, !tbaa !399
  %3460 = add <16 x i16> %3435, %3428
  %3461 = add <16 x i16> %3460, %3442
  %3462 = add <16 x i16> %3461, %3449
  %3463 = add <16 x i16> %3462, %3456
  %3464 = add <16 x i16> %3438, %3431
  %3465 = add <16 x i16> %3464, %3445
  %3466 = add <16 x i16> %3465, %3452
  %3467 = add <16 x i16> %3466, %3459
  %3468 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3463, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3469 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3467, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3470 = shufflevector <16 x i16> %3468, <16 x i16> %3469, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3471 = lshr <32 x i16> %3470, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3472 = shufflevector <32 x i16> %3471, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3473 = add nsw i64 %3220, %.pre-phi3410
  %3474 = getelementptr inbounds i16, i16* %66, i64 %3473
  %3475 = bitcast i16* %3474 to <16 x i16>*
  store <16 x i16> %3472, <16 x i16>* %3475, align 2, !tbaa !401
  %3476 = shufflevector <32 x i16> %3471, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3477 = getelementptr inbounds i16, i16* %3474, i64 16
  %3478 = bitcast i16* %3477 to <16 x i16>*
  store <16 x i16> %3476, <16 x i16>* %3478, align 2, !tbaa !401
  %indvars.iv.next3165 = add nuw nsw i64 %indvars.iv3164, 1
  %.not2684 = icmp eq i64 %indvars.iv.next3165, %184
  br i1 %.not2684, label %"end for blur_y.s0.x.x.rebased163", label %"for blur_y.s0.x.x.rebased162"

"for blur_y.s0.x.x.rebased170":                   ; preds = %"for blur_y.s0.x.x.rebased170.preheader", %"consume blur_x178"
  %blur_y.s0.x.x.rebased172 = phi i32 [ %3591, %"consume blur_x178" ], [ 0, %"for blur_y.s0.x.x.rebased170.preheader" ]
  %3479 = add nsw i32 %blur_y.s0.x.x.rebased172, %t1626
  %a126 = shl nsw i32 %3479, 5
  %3480 = icmp sgt i32 %a14, %a126
  %b132 = select i1 %3480, i32 %a126, i32 %a14
  %3481 = icmp slt i32 %3479, 1
  %3482 = icmp sgt i32 %4, %a126
  %3483 = or i1 %3481, %3482
  br i1 %3483, label %"produce blur_x176", label %"consume blur_x178"

"end for blur_y.s0.x.x.rebased171":               ; preds = %"consume blur_x178", %"end for blur_y.s0.x.x.rebased163"
  br i1 %34, label %"produce blur_x182", label %after_bb179

"produce blur_x176":                              ; preds = %"for blur_y.s0.x.x.rebased170"
  %3484 = icmp slt i32 %b132, %4
  %blur_x.s0.x.v1.base.s177 = select i1 %3484, i32 %b132, i32 %4
  %t765 = add nsw i32 %blur_x.s0.x.v1.base.s177, %t1753
  %3485 = sext i32 %t765 to i64
  %3486 = getelementptr inbounds i16, i16* %read_input, i64 %3485
  %3487 = getelementptr inbounds i16, i16* %3486, i64 1
  %3488 = bitcast i16* %3487 to <16 x i16>*
  %3489 = load <16 x i16>, <16 x i16>* %3488, align 2, !tbaa !396
  %3490 = getelementptr inbounds i16, i16* %3486, i64 17
  %3491 = bitcast i16* %3490 to <16 x i16>*
  %3492 = load <16 x i16>, <16 x i16>* %3491, align 2, !tbaa !396
  %3493 = bitcast i16* %3486 to <16 x i16>*
  %3494 = load <16 x i16>, <16 x i16>* %3493, align 2, !tbaa !396
  %3495 = getelementptr inbounds i16, i16* %3486, i64 16
  %3496 = bitcast i16* %3495 to <16 x i16>*
  %3497 = load <16 x i16>, <16 x i16>* %3496, align 2, !tbaa !396
  %3498 = getelementptr inbounds i16, i16* %3486, i64 2
  %3499 = bitcast i16* %3498 to <16 x i16>*
  %3500 = load <16 x i16>, <16 x i16>* %3499, align 2, !tbaa !396
  %3501 = getelementptr inbounds i16, i16* %3486, i64 18
  %3502 = bitcast i16* %3501 to <16 x i16>*
  %3503 = load <16 x i16>, <16 x i16>* %3502, align 2, !tbaa !396
  %3504 = getelementptr inbounds i16, i16* %3486, i64 4
  %3505 = bitcast i16* %3504 to <16 x i16>*
  %3506 = load <16 x i16>, <16 x i16>* %3505, align 2, !tbaa !396
  %3507 = getelementptr inbounds i16, i16* %3486, i64 20
  %3508 = bitcast i16* %3507 to <16 x i16>*
  %3509 = load <16 x i16>, <16 x i16>* %3508, align 2, !tbaa !396
  %3510 = getelementptr inbounds i16, i16* %3486, i64 3
  %3511 = bitcast i16* %3510 to <16 x i16>*
  %3512 = load <16 x i16>, <16 x i16>* %3511, align 2, !tbaa !396
  %3513 = getelementptr inbounds i16, i16* %3486, i64 19
  %3514 = bitcast i16* %3513 to <16 x i16>*
  %3515 = load <16 x i16>, <16 x i16>* %3514, align 2, !tbaa !396
  %3516 = add <16 x i16> %3494, %3489
  %3517 = add <16 x i16> %3516, %3500
  %3518 = add <16 x i16> %3517, %3506
  %3519 = add <16 x i16> %3518, %3512
  %3520 = add <16 x i16> %3497, %3492
  %3521 = add <16 x i16> %3520, %3503
  %3522 = add <16 x i16> %3521, %3509
  %3523 = add <16 x i16> %3522, %3515
  %3524 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3519, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3525 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3523, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3526 = shufflevector <16 x i16> %3524, <16 x i16> %3525, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3527 = lshr <32 x i16> %3526, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3528 = shufflevector <32 x i16> %3527, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3529 = sext i32 %blur_x.s0.x.v1.base.s177 to i64
  %3530 = add nsw i64 %3529, %3354
  %3531 = getelementptr inbounds i16, i16* %blur_x, i64 %3530
  %3532 = bitcast i16* %3531 to <16 x i16>*
  store <16 x i16> %3528, <16 x i16>* %3532, align 2, !tbaa !399
  %3533 = shufflevector <32 x i16> %3527, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3534 = getelementptr inbounds i16, i16* %3531, i64 16
  %3535 = bitcast i16* %3534 to <16 x i16>*
  store <16 x i16> %3533, <16 x i16>* %3535, align 2, !tbaa !399
  br label %"consume blur_x178"

"consume blur_x178":                              ; preds = %"for blur_y.s0.x.x.rebased170", %"produce blur_x176"
  %3536 = sext i32 %b132 to i64
  %3537 = add nsw i64 %3357, %3536
  %3538 = getelementptr inbounds i16, i16* %blur_x, i64 %3537
  %3539 = bitcast i16* %3538 to <16 x i16>*
  %3540 = load <16 x i16>, <16 x i16>* %3539, align 2, !tbaa !399
  %3541 = getelementptr inbounds i16, i16* %3538, i64 16
  %3542 = bitcast i16* %3541 to <16 x i16>*
  %3543 = load <16 x i16>, <16 x i16>* %3542, align 2, !tbaa !399
  %3544 = add nsw i64 %3360, %3536
  %3545 = getelementptr inbounds i16, i16* %blur_x, i64 %3544
  %3546 = bitcast i16* %3545 to <16 x i16>*
  %3547 = load <16 x i16>, <16 x i16>* %3546, align 2, !tbaa !399
  %3548 = getelementptr inbounds i16, i16* %3545, i64 16
  %3549 = bitcast i16* %3548 to <16 x i16>*
  %3550 = load <16 x i16>, <16 x i16>* %3549, align 2, !tbaa !399
  %3551 = add nsw i64 %3363, %3536
  %3552 = getelementptr inbounds i16, i16* %blur_x, i64 %3551
  %3553 = bitcast i16* %3552 to <16 x i16>*
  %3554 = load <16 x i16>, <16 x i16>* %3553, align 2, !tbaa !399
  %3555 = getelementptr inbounds i16, i16* %3552, i64 16
  %3556 = bitcast i16* %3555 to <16 x i16>*
  %3557 = load <16 x i16>, <16 x i16>* %3556, align 2, !tbaa !399
  %3558 = add nsw i64 %3366, %3536
  %3559 = getelementptr inbounds i16, i16* %blur_x, i64 %3558
  %3560 = bitcast i16* %3559 to <16 x i16>*
  %3561 = load <16 x i16>, <16 x i16>* %3560, align 2, !tbaa !399
  %3562 = getelementptr inbounds i16, i16* %3559, i64 16
  %3563 = bitcast i16* %3562 to <16 x i16>*
  %3564 = load <16 x i16>, <16 x i16>* %3563, align 2, !tbaa !399
  %3565 = add nsw i64 %3369, %3536
  %3566 = getelementptr inbounds i16, i16* %blur_x, i64 %3565
  %3567 = bitcast i16* %3566 to <16 x i16>*
  %3568 = load <16 x i16>, <16 x i16>* %3567, align 2, !tbaa !399
  %3569 = getelementptr inbounds i16, i16* %3566, i64 16
  %3570 = bitcast i16* %3569 to <16 x i16>*
  %3571 = load <16 x i16>, <16 x i16>* %3570, align 2, !tbaa !399
  %3572 = add <16 x i16> %3547, %3540
  %3573 = add <16 x i16> %3572, %3554
  %3574 = add <16 x i16> %3573, %3561
  %3575 = add <16 x i16> %3574, %3568
  %3576 = add <16 x i16> %3550, %3543
  %3577 = add <16 x i16> %3576, %3557
  %3578 = add <16 x i16> %3577, %3564
  %3579 = add <16 x i16> %3578, %3571
  %3580 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3575, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3581 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3579, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3582 = shufflevector <16 x i16> %3580, <16 x i16> %3581, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3583 = lshr <32 x i16> %3582, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3584 = shufflevector <32 x i16> %3583, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3585 = add nsw i64 %3373, %3536
  %3586 = getelementptr inbounds i16, i16* %66, i64 %3585
  %3587 = bitcast i16* %3586 to <16 x i16>*
  store <16 x i16> %3584, <16 x i16>* %3587, align 2, !tbaa !401
  %3588 = shufflevector <32 x i16> %3583, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3589 = getelementptr inbounds i16, i16* %3586, i64 16
  %3590 = bitcast i16* %3589 to <16 x i16>*
  store <16 x i16> %3588, <16 x i16>* %3590, align 2, !tbaa !401
  %3591 = add nuw nsw i32 %blur_y.s0.x.x.rebased172, 1
  %.not2683 = icmp eq i32 %3591, %t1683
  br i1 %.not2683, label %"end for blur_y.s0.x.x.rebased171", label %"for blur_y.s0.x.x.rebased170"

after_bb179:                                      ; preds = %"end for blur_y.s0.x.x.rebased171", %"produce blur_x182"
  br i1 %100, label %"for blur_y.s0.x.x.rebased184.preheader", label %"end for blur_y.s0.x.x.rebased185", !prof !386

"for blur_y.s0.x.x.rebased184.preheader":         ; preds = %after_bb179
  %3592 = sext i32 %t1682 to i64
  %3593 = zext i32 %.pre-phi3396 to i64
  %3594 = mul nsw i64 %3593, %112
  %3595 = sub nsw i64 %3594, %96
  %3596 = zext i32 %.pre-phi3390 to i64
  %3597 = mul nsw i64 %3596, %112
  %3598 = sub nsw i64 %3597, %96
  %3599 = zext i32 %.pre-phi3402 to i64
  %3600 = mul nsw i64 %3599, %112
  %3601 = sub nsw i64 %3600, %96
  %3602 = zext i32 %.pre-phi to i64
  %3603 = mul nsw i64 %3602, %112
  %3604 = sub nsw i64 %3603, %96
  %3605 = zext i32 %.pre-phi3408 to i64
  %3606 = mul nsw i64 %3605, %112
  %3607 = sub nsw i64 %3606, %96
  %3608 = sext i32 %a26 to i64
  %3609 = add nsw i64 %3608, 4
  %3610 = mul nsw i64 %3609, %113
  %3611 = add nsw i64 %3610, %116
  br label %"for blur_y.s0.x.x.rebased184"

"produce blur_x182":                              ; preds = %"end for blur_y.s0.x.x.rebased171"
  %3612 = getelementptr inbounds i16, i16* %read_input, i64 %123
  %3613 = getelementptr inbounds i16, i16* %3612, i64 -31
  %3614 = bitcast i16* %3613 to <16 x i16>*
  %3615 = load <16 x i16>, <16 x i16>* %3614, align 2, !tbaa !396
  %3616 = getelementptr inbounds i16, i16* %3612, i64 -15
  %3617 = bitcast i16* %3616 to <16 x i16>*
  %3618 = load <16 x i16>, <16 x i16>* %3617, align 2, !tbaa !396
  %3619 = getelementptr inbounds i16, i16* %3612, i64 -32
  %3620 = bitcast i16* %3619 to <16 x i16>*
  %3621 = load <16 x i16>, <16 x i16>* %3620, align 2, !tbaa !396
  %3622 = getelementptr inbounds i16, i16* %3612, i64 -16
  %3623 = bitcast i16* %3622 to <16 x i16>*
  %3624 = load <16 x i16>, <16 x i16>* %3623, align 2, !tbaa !396
  %3625 = getelementptr inbounds i16, i16* %3612, i64 -30
  %3626 = bitcast i16* %3625 to <16 x i16>*
  %3627 = load <16 x i16>, <16 x i16>* %3626, align 2, !tbaa !396
  %3628 = getelementptr inbounds i16, i16* %3612, i64 -14
  %3629 = bitcast i16* %3628 to <16 x i16>*
  %3630 = load <16 x i16>, <16 x i16>* %3629, align 2, !tbaa !396
  %3631 = getelementptr inbounds i16, i16* %3612, i64 -28
  %3632 = bitcast i16* %3631 to <16 x i16>*
  %3633 = load <16 x i16>, <16 x i16>* %3632, align 2, !tbaa !396
  %3634 = getelementptr inbounds i16, i16* %3612, i64 -12
  %3635 = bitcast i16* %3634 to <16 x i16>*
  %3636 = load <16 x i16>, <16 x i16>* %3635, align 2, !tbaa !396
  %3637 = getelementptr inbounds i16, i16* %3612, i64 -29
  %3638 = bitcast i16* %3637 to <16 x i16>*
  %3639 = load <16 x i16>, <16 x i16>* %3638, align 2, !tbaa !396
  %3640 = getelementptr inbounds i16, i16* %3612, i64 -13
  %3641 = bitcast i16* %3640 to <16 x i16>*
  %3642 = load <16 x i16>, <16 x i16>* %3641, align 2, !tbaa !396
  %3643 = add <16 x i16> %3621, %3615
  %3644 = add <16 x i16> %3643, %3627
  %3645 = add <16 x i16> %3644, %3633
  %3646 = add <16 x i16> %3645, %3639
  %3647 = add <16 x i16> %3624, %3618
  %3648 = add <16 x i16> %3647, %3630
  %3649 = add <16 x i16> %3648, %3636
  %3650 = add <16 x i16> %3649, %3642
  %3651 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3646, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3652 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3650, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3653 = shufflevector <16 x i16> %3651, <16 x i16> %3652, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3654 = lshr <32 x i16> %3653, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3655 = shufflevector <32 x i16> %3654, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3656 = zext i32 %.pre-phi to i64
  %3657 = mul nsw i64 %97, %3656
  %3658 = add nsw i64 %99, %3657
  %3659 = getelementptr inbounds i16, i16* %blur_x, i64 %3658
  %3660 = getelementptr inbounds i16, i16* %3659, i64 -32
  %3661 = bitcast i16* %3660 to <16 x i16>*
  store <16 x i16> %3655, <16 x i16>* %3661, align 2, !tbaa !399
  %3662 = shufflevector <32 x i16> %3654, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3663 = getelementptr inbounds i16, i16* %3659, i64 -16
  %3664 = bitcast i16* %3663 to <16 x i16>*
  store <16 x i16> %3662, <16 x i16>* %3664, align 2, !tbaa !399
  %3665 = zext i32 %.pre-phi3396 to i64
  %3666 = mul nsw i64 %3665, %112
  %3667 = add nsw i64 %3666, %94
  %3668 = getelementptr inbounds i16, i16* %blur_x, i64 %3667
  %3669 = getelementptr inbounds i16, i16* %3668, i64 -32
  %3670 = bitcast i16* %3669 to <16 x i16>*
  %3671 = load <16 x i16>, <16 x i16>* %3670, align 2, !tbaa !399
  %3672 = getelementptr inbounds i16, i16* %3668, i64 -16
  %3673 = bitcast i16* %3672 to <16 x i16>*
  %3674 = load <16 x i16>, <16 x i16>* %3673, align 2, !tbaa !399
  %3675 = zext i32 %.pre-phi3390 to i64
  %3676 = mul nsw i64 %3675, %112
  %3677 = add nsw i64 %3676, %94
  %3678 = getelementptr inbounds i16, i16* %blur_x, i64 %3677
  %3679 = getelementptr inbounds i16, i16* %3678, i64 -32
  %3680 = bitcast i16* %3679 to <16 x i16>*
  %3681 = load <16 x i16>, <16 x i16>* %3680, align 2, !tbaa !399
  %3682 = getelementptr inbounds i16, i16* %3678, i64 -16
  %3683 = bitcast i16* %3682 to <16 x i16>*
  %3684 = load <16 x i16>, <16 x i16>* %3683, align 2, !tbaa !399
  %3685 = zext i32 %.pre-phi3402 to i64
  %3686 = mul nsw i64 %3685, %112
  %3687 = add nsw i64 %3686, %94
  %3688 = getelementptr inbounds i16, i16* %blur_x, i64 %3687
  %3689 = getelementptr inbounds i16, i16* %3688, i64 -32
  %3690 = bitcast i16* %3689 to <16 x i16>*
  %3691 = load <16 x i16>, <16 x i16>* %3690, align 2, !tbaa !399
  %3692 = getelementptr inbounds i16, i16* %3688, i64 -16
  %3693 = bitcast i16* %3692 to <16 x i16>*
  %3694 = load <16 x i16>, <16 x i16>* %3693, align 2, !tbaa !399
  %3695 = mul nsw i64 %3656, %112
  %3696 = add nsw i64 %3695, %94
  %3697 = getelementptr inbounds i16, i16* %blur_x, i64 %3696
  %3698 = getelementptr inbounds i16, i16* %3697, i64 -32
  %3699 = bitcast i16* %3698 to <16 x i16>*
  %3700 = load <16 x i16>, <16 x i16>* %3699, align 2, !tbaa !399
  %3701 = getelementptr inbounds i16, i16* %3697, i64 -16
  %3702 = bitcast i16* %3701 to <16 x i16>*
  %3703 = load <16 x i16>, <16 x i16>* %3702, align 2, !tbaa !399
  %3704 = zext i32 %.pre-phi3408 to i64
  %3705 = mul nsw i64 %3704, %112
  %3706 = add nsw i64 %3705, %94
  %3707 = getelementptr inbounds i16, i16* %blur_x, i64 %3706
  %3708 = getelementptr inbounds i16, i16* %3707, i64 -32
  %3709 = bitcast i16* %3708 to <16 x i16>*
  %3710 = load <16 x i16>, <16 x i16>* %3709, align 2, !tbaa !399
  %3711 = getelementptr inbounds i16, i16* %3707, i64 -16
  %3712 = bitcast i16* %3711 to <16 x i16>*
  %3713 = load <16 x i16>, <16 x i16>* %3712, align 2, !tbaa !399
  %3714 = add <16 x i16> %3681, %3671
  %3715 = add <16 x i16> %3714, %3691
  %3716 = add <16 x i16> %3715, %3700
  %3717 = add <16 x i16> %3716, %3710
  %3718 = add <16 x i16> %3684, %3674
  %3719 = add <16 x i16> %3718, %3694
  %3720 = add <16 x i16> %3719, %3703
  %3721 = add <16 x i16> %3720, %3713
  %3722 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3717, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3723 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3721, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3724 = shufflevector <16 x i16> %3722, <16 x i16> %3723, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3725 = lshr <32 x i16> %3724, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3726 = shufflevector <32 x i16> %3725, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3727 = sext i32 %a26 to i64
  %3728 = add nsw i64 %3727, 4
  %3729 = mul nsw i64 %3728, %113
  %3730 = add nsw i64 %115, %3729
  %3731 = getelementptr inbounds i16, i16* %66, i64 %3730
  %3732 = getelementptr inbounds i16, i16* %3731, i64 -32
  %3733 = bitcast i16* %3732 to <16 x i16>*
  store <16 x i16> %3726, <16 x i16>* %3733, align 2, !tbaa !401
  %3734 = shufflevector <32 x i16> %3725, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3735 = getelementptr inbounds i16, i16* %3731, i64 -16
  %3736 = bitcast i16* %3735 to <16 x i16>*
  store <16 x i16> %3734, <16 x i16>* %3736, align 2, !tbaa !401
  br label %after_bb179

"for blur_y.s0.x.x.rebased184":                   ; preds = %"for blur_y.s0.x.x.rebased184.preheader", %"consume blur_x191"
  %indvars.iv3167 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased184.preheader" ], [ %indvars.iv.next3168, %"consume blur_x191" ]
  %3737 = add nsw i64 %indvars.iv3167, %101
  %3738 = icmp slt i64 %3737, 1
  %3739 = trunc i64 %3737 to i32
  %3740 = shl nsw i32 %3739, 5
  %3741 = icmp sgt i32 %4, %3740
  %3742 = or i1 %3738, %3741
  br i1 %3742, label %"produce blur_x190", label %"for blur_y.s0.x.x.rebased184.consume blur_x191_crit_edge"

"for blur_y.s0.x.x.rebased184.consume blur_x191_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased184"
  %.pre3411 = shl nsw i64 %3737, 5
  br label %"consume blur_x191"

"end for blur_y.s0.x.x.rebased185":               ; preds = %"consume blur_x191", %after_bb179
  br i1 %102, label %"for blur_y.s0.x.x.rebased192.preheader", label %"end for blur_y.s0.x.x.rebased193", !prof !386

"for blur_y.s0.x.x.rebased192.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased185"
  %3743 = sext i32 %t1682 to i64
  %3744 = zext i32 %.pre-phi3396 to i64
  %3745 = mul nsw i64 %3744, %112
  %3746 = sub nsw i64 %3745, %96
  %3747 = zext i32 %.pre-phi3390 to i64
  %3748 = mul nsw i64 %3747, %112
  %3749 = sub nsw i64 %3748, %96
  %3750 = zext i32 %.pre-phi3402 to i64
  %3751 = mul nsw i64 %3750, %112
  %3752 = sub nsw i64 %3751, %96
  %3753 = zext i32 %.pre-phi to i64
  %3754 = mul nsw i64 %3753, %112
  %3755 = sub nsw i64 %3754, %96
  %3756 = zext i32 %.pre-phi3408 to i64
  %3757 = mul nsw i64 %3756, %112
  %3758 = sub nsw i64 %3757, %96
  %3759 = sext i32 %a26 to i64
  %3760 = add nsw i64 %3759, 4
  %3761 = mul nsw i64 %3760, %113
  %3762 = add nsw i64 %3761, %116
  br label %"for blur_y.s0.x.x.rebased192"

"produce blur_x190":                              ; preds = %"for blur_y.s0.x.x.rebased184"
  %t776 = add nsw i32 %3740, %t1769
  %3763 = sext i32 %t776 to i64
  %3764 = getelementptr inbounds i16, i16* %read_input, i64 %3763
  %3765 = getelementptr inbounds i16, i16* %3764, i64 1
  %3766 = bitcast i16* %3765 to <16 x i16>*
  %3767 = load <16 x i16>, <16 x i16>* %3766, align 2, !tbaa !396
  %3768 = getelementptr inbounds i16, i16* %3764, i64 17
  %3769 = bitcast i16* %3768 to <16 x i16>*
  %3770 = load <16 x i16>, <16 x i16>* %3769, align 2, !tbaa !396
  %3771 = bitcast i16* %3764 to <16 x i16>*
  %3772 = load <16 x i16>, <16 x i16>* %3771, align 2, !tbaa !396
  %3773 = getelementptr inbounds i16, i16* %3764, i64 16
  %3774 = bitcast i16* %3773 to <16 x i16>*
  %3775 = load <16 x i16>, <16 x i16>* %3774, align 2, !tbaa !396
  %3776 = getelementptr inbounds i16, i16* %3764, i64 2
  %3777 = bitcast i16* %3776 to <16 x i16>*
  %3778 = load <16 x i16>, <16 x i16>* %3777, align 2, !tbaa !396
  %3779 = getelementptr inbounds i16, i16* %3764, i64 18
  %3780 = bitcast i16* %3779 to <16 x i16>*
  %3781 = load <16 x i16>, <16 x i16>* %3780, align 2, !tbaa !396
  %3782 = getelementptr inbounds i16, i16* %3764, i64 4
  %3783 = bitcast i16* %3782 to <16 x i16>*
  %3784 = load <16 x i16>, <16 x i16>* %3783, align 2, !tbaa !396
  %3785 = getelementptr inbounds i16, i16* %3764, i64 20
  %3786 = bitcast i16* %3785 to <16 x i16>*
  %3787 = load <16 x i16>, <16 x i16>* %3786, align 2, !tbaa !396
  %3788 = getelementptr inbounds i16, i16* %3764, i64 3
  %3789 = bitcast i16* %3788 to <16 x i16>*
  %3790 = load <16 x i16>, <16 x i16>* %3789, align 2, !tbaa !396
  %3791 = getelementptr inbounds i16, i16* %3764, i64 19
  %3792 = bitcast i16* %3791 to <16 x i16>*
  %3793 = load <16 x i16>, <16 x i16>* %3792, align 2, !tbaa !396
  %3794 = add <16 x i16> %3772, %3767
  %3795 = add <16 x i16> %3794, %3778
  %3796 = add <16 x i16> %3795, %3784
  %3797 = add <16 x i16> %3796, %3790
  %3798 = add <16 x i16> %3775, %3770
  %3799 = add <16 x i16> %3798, %3781
  %3800 = add <16 x i16> %3799, %3787
  %3801 = add <16 x i16> %3800, %3793
  %3802 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3797, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3803 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3801, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3804 = shufflevector <16 x i16> %3802, <16 x i16> %3803, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3805 = lshr <32 x i16> %3804, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3806 = shufflevector <32 x i16> %3805, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3807 = shl nsw i64 %3737, 5
  %3808 = add nsw i64 %3807, %3592
  %3809 = getelementptr inbounds i16, i16* %blur_x, i64 %3808
  %3810 = bitcast i16* %3809 to <16 x i16>*
  store <16 x i16> %3806, <16 x i16>* %3810, align 2, !tbaa !399
  %3811 = shufflevector <32 x i16> %3805, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3812 = getelementptr inbounds i16, i16* %3809, i64 16
  %3813 = bitcast i16* %3812 to <16 x i16>*
  store <16 x i16> %3811, <16 x i16>* %3813, align 2, !tbaa !399
  br label %"consume blur_x191"

"consume blur_x191":                              ; preds = %"for blur_y.s0.x.x.rebased184.consume blur_x191_crit_edge", %"produce blur_x190"
  %.pre-phi3412 = phi i64 [ %.pre3411, %"for blur_y.s0.x.x.rebased184.consume blur_x191_crit_edge" ], [ %3807, %"produce blur_x190" ]
  %3814 = add nsw i64 %3595, %.pre-phi3412
  %3815 = getelementptr inbounds i16, i16* %blur_x, i64 %3814
  %3816 = bitcast i16* %3815 to <16 x i16>*
  %3817 = load <16 x i16>, <16 x i16>* %3816, align 2, !tbaa !399
  %3818 = getelementptr inbounds i16, i16* %3815, i64 16
  %3819 = bitcast i16* %3818 to <16 x i16>*
  %3820 = load <16 x i16>, <16 x i16>* %3819, align 2, !tbaa !399
  %3821 = add nsw i64 %3598, %.pre-phi3412
  %3822 = getelementptr inbounds i16, i16* %blur_x, i64 %3821
  %3823 = bitcast i16* %3822 to <16 x i16>*
  %3824 = load <16 x i16>, <16 x i16>* %3823, align 2, !tbaa !399
  %3825 = getelementptr inbounds i16, i16* %3822, i64 16
  %3826 = bitcast i16* %3825 to <16 x i16>*
  %3827 = load <16 x i16>, <16 x i16>* %3826, align 2, !tbaa !399
  %3828 = add nsw i64 %3601, %.pre-phi3412
  %3829 = getelementptr inbounds i16, i16* %blur_x, i64 %3828
  %3830 = bitcast i16* %3829 to <16 x i16>*
  %3831 = load <16 x i16>, <16 x i16>* %3830, align 2, !tbaa !399
  %3832 = getelementptr inbounds i16, i16* %3829, i64 16
  %3833 = bitcast i16* %3832 to <16 x i16>*
  %3834 = load <16 x i16>, <16 x i16>* %3833, align 2, !tbaa !399
  %3835 = add nsw i64 %3604, %.pre-phi3412
  %3836 = getelementptr inbounds i16, i16* %blur_x, i64 %3835
  %3837 = bitcast i16* %3836 to <16 x i16>*
  %3838 = load <16 x i16>, <16 x i16>* %3837, align 2, !tbaa !399
  %3839 = getelementptr inbounds i16, i16* %3836, i64 16
  %3840 = bitcast i16* %3839 to <16 x i16>*
  %3841 = load <16 x i16>, <16 x i16>* %3840, align 2, !tbaa !399
  %3842 = add nsw i64 %3607, %.pre-phi3412
  %3843 = getelementptr inbounds i16, i16* %blur_x, i64 %3842
  %3844 = bitcast i16* %3843 to <16 x i16>*
  %3845 = load <16 x i16>, <16 x i16>* %3844, align 2, !tbaa !399
  %3846 = getelementptr inbounds i16, i16* %3843, i64 16
  %3847 = bitcast i16* %3846 to <16 x i16>*
  %3848 = load <16 x i16>, <16 x i16>* %3847, align 2, !tbaa !399
  %3849 = add <16 x i16> %3824, %3817
  %3850 = add <16 x i16> %3849, %3831
  %3851 = add <16 x i16> %3850, %3838
  %3852 = add <16 x i16> %3851, %3845
  %3853 = add <16 x i16> %3827, %3820
  %3854 = add <16 x i16> %3853, %3834
  %3855 = add <16 x i16> %3854, %3841
  %3856 = add <16 x i16> %3855, %3848
  %3857 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3852, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3858 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3856, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3859 = shufflevector <16 x i16> %3857, <16 x i16> %3858, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3860 = lshr <32 x i16> %3859, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3861 = shufflevector <32 x i16> %3860, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3862 = add nsw i64 %3611, %.pre-phi3412
  %3863 = getelementptr inbounds i16, i16* %66, i64 %3862
  %3864 = bitcast i16* %3863 to <16 x i16>*
  store <16 x i16> %3861, <16 x i16>* %3864, align 2, !tbaa !401
  %3865 = shufflevector <32 x i16> %3860, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3866 = getelementptr inbounds i16, i16* %3863, i64 16
  %3867 = bitcast i16* %3866 to <16 x i16>*
  store <16 x i16> %3865, <16 x i16>* %3867, align 2, !tbaa !401
  %indvars.iv.next3168 = add nuw nsw i64 %indvars.iv3167, 1
  %.not2682 = icmp eq i64 %indvars.iv.next3168, %184
  br i1 %.not2682, label %"end for blur_y.s0.x.x.rebased185", label %"for blur_y.s0.x.x.rebased184"

"for blur_y.s0.x.x.rebased192":                   ; preds = %"for blur_y.s0.x.x.rebased192.preheader", %"consume blur_x200"
  %blur_y.s0.x.x.rebased194 = phi i32 [ %3980, %"consume blur_x200" ], [ 0, %"for blur_y.s0.x.x.rebased192.preheader" ]
  %3868 = add nsw i32 %blur_y.s0.x.x.rebased194, %t1626
  %a133 = shl nsw i32 %3868, 5
  %3869 = icmp sgt i32 %a14, %a133
  %b139 = select i1 %3869, i32 %a133, i32 %a14
  %3870 = icmp slt i32 %3868, 1
  %3871 = icmp sgt i32 %4, %a133
  %3872 = or i1 %3870, %3871
  br i1 %3872, label %"produce blur_x198", label %"consume blur_x200"

"end for blur_y.s0.x.x.rebased193":               ; preds = %"consume blur_x200", %"end for blur_y.s0.x.x.rebased185"
  br i1 %34, label %"produce blur_x204", label %after_bb201

"produce blur_x198":                              ; preds = %"for blur_y.s0.x.x.rebased192"
  %3873 = icmp slt i32 %b139, %4
  %blur_x.s0.x.v1.base.s199 = select i1 %3873, i32 %b139, i32 %4
  %t781 = add nsw i32 %blur_x.s0.x.v1.base.s199, %t1769
  %3874 = sext i32 %t781 to i64
  %3875 = getelementptr inbounds i16, i16* %read_input, i64 %3874
  %3876 = getelementptr inbounds i16, i16* %3875, i64 1
  %3877 = bitcast i16* %3876 to <16 x i16>*
  %3878 = load <16 x i16>, <16 x i16>* %3877, align 2, !tbaa !396
  %3879 = getelementptr inbounds i16, i16* %3875, i64 17
  %3880 = bitcast i16* %3879 to <16 x i16>*
  %3881 = load <16 x i16>, <16 x i16>* %3880, align 2, !tbaa !396
  %3882 = bitcast i16* %3875 to <16 x i16>*
  %3883 = load <16 x i16>, <16 x i16>* %3882, align 2, !tbaa !396
  %3884 = getelementptr inbounds i16, i16* %3875, i64 16
  %3885 = bitcast i16* %3884 to <16 x i16>*
  %3886 = load <16 x i16>, <16 x i16>* %3885, align 2, !tbaa !396
  %3887 = getelementptr inbounds i16, i16* %3875, i64 2
  %3888 = bitcast i16* %3887 to <16 x i16>*
  %3889 = load <16 x i16>, <16 x i16>* %3888, align 2, !tbaa !396
  %3890 = getelementptr inbounds i16, i16* %3875, i64 18
  %3891 = bitcast i16* %3890 to <16 x i16>*
  %3892 = load <16 x i16>, <16 x i16>* %3891, align 2, !tbaa !396
  %3893 = getelementptr inbounds i16, i16* %3875, i64 4
  %3894 = bitcast i16* %3893 to <16 x i16>*
  %3895 = load <16 x i16>, <16 x i16>* %3894, align 2, !tbaa !396
  %3896 = getelementptr inbounds i16, i16* %3875, i64 20
  %3897 = bitcast i16* %3896 to <16 x i16>*
  %3898 = load <16 x i16>, <16 x i16>* %3897, align 2, !tbaa !396
  %3899 = getelementptr inbounds i16, i16* %3875, i64 3
  %3900 = bitcast i16* %3899 to <16 x i16>*
  %3901 = load <16 x i16>, <16 x i16>* %3900, align 2, !tbaa !396
  %3902 = getelementptr inbounds i16, i16* %3875, i64 19
  %3903 = bitcast i16* %3902 to <16 x i16>*
  %3904 = load <16 x i16>, <16 x i16>* %3903, align 2, !tbaa !396
  %3905 = add <16 x i16> %3883, %3878
  %3906 = add <16 x i16> %3905, %3889
  %3907 = add <16 x i16> %3906, %3895
  %3908 = add <16 x i16> %3907, %3901
  %3909 = add <16 x i16> %3886, %3881
  %3910 = add <16 x i16> %3909, %3892
  %3911 = add <16 x i16> %3910, %3898
  %3912 = add <16 x i16> %3911, %3904
  %3913 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3908, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3914 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3912, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3915 = shufflevector <16 x i16> %3913, <16 x i16> %3914, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3916 = lshr <32 x i16> %3915, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3917 = shufflevector <32 x i16> %3916, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3918 = sext i32 %blur_x.s0.x.v1.base.s199 to i64
  %3919 = add nsw i64 %3918, %3743
  %3920 = getelementptr inbounds i16, i16* %blur_x, i64 %3919
  %3921 = bitcast i16* %3920 to <16 x i16>*
  store <16 x i16> %3917, <16 x i16>* %3921, align 2, !tbaa !399
  %3922 = shufflevector <32 x i16> %3916, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3923 = getelementptr inbounds i16, i16* %3920, i64 16
  %3924 = bitcast i16* %3923 to <16 x i16>*
  store <16 x i16> %3922, <16 x i16>* %3924, align 2, !tbaa !399
  br label %"consume blur_x200"

"consume blur_x200":                              ; preds = %"for blur_y.s0.x.x.rebased192", %"produce blur_x198"
  %3925 = sext i32 %b139 to i64
  %3926 = add nsw i64 %3746, %3925
  %3927 = getelementptr inbounds i16, i16* %blur_x, i64 %3926
  %3928 = bitcast i16* %3927 to <16 x i16>*
  %3929 = load <16 x i16>, <16 x i16>* %3928, align 2, !tbaa !399
  %3930 = getelementptr inbounds i16, i16* %3927, i64 16
  %3931 = bitcast i16* %3930 to <16 x i16>*
  %3932 = load <16 x i16>, <16 x i16>* %3931, align 2, !tbaa !399
  %3933 = add nsw i64 %3749, %3925
  %3934 = getelementptr inbounds i16, i16* %blur_x, i64 %3933
  %3935 = bitcast i16* %3934 to <16 x i16>*
  %3936 = load <16 x i16>, <16 x i16>* %3935, align 2, !tbaa !399
  %3937 = getelementptr inbounds i16, i16* %3934, i64 16
  %3938 = bitcast i16* %3937 to <16 x i16>*
  %3939 = load <16 x i16>, <16 x i16>* %3938, align 2, !tbaa !399
  %3940 = add nsw i64 %3752, %3925
  %3941 = getelementptr inbounds i16, i16* %blur_x, i64 %3940
  %3942 = bitcast i16* %3941 to <16 x i16>*
  %3943 = load <16 x i16>, <16 x i16>* %3942, align 2, !tbaa !399
  %3944 = getelementptr inbounds i16, i16* %3941, i64 16
  %3945 = bitcast i16* %3944 to <16 x i16>*
  %3946 = load <16 x i16>, <16 x i16>* %3945, align 2, !tbaa !399
  %3947 = add nsw i64 %3755, %3925
  %3948 = getelementptr inbounds i16, i16* %blur_x, i64 %3947
  %3949 = bitcast i16* %3948 to <16 x i16>*
  %3950 = load <16 x i16>, <16 x i16>* %3949, align 2, !tbaa !399
  %3951 = getelementptr inbounds i16, i16* %3948, i64 16
  %3952 = bitcast i16* %3951 to <16 x i16>*
  %3953 = load <16 x i16>, <16 x i16>* %3952, align 2, !tbaa !399
  %3954 = add nsw i64 %3758, %3925
  %3955 = getelementptr inbounds i16, i16* %blur_x, i64 %3954
  %3956 = bitcast i16* %3955 to <16 x i16>*
  %3957 = load <16 x i16>, <16 x i16>* %3956, align 2, !tbaa !399
  %3958 = getelementptr inbounds i16, i16* %3955, i64 16
  %3959 = bitcast i16* %3958 to <16 x i16>*
  %3960 = load <16 x i16>, <16 x i16>* %3959, align 2, !tbaa !399
  %3961 = add <16 x i16> %3936, %3929
  %3962 = add <16 x i16> %3961, %3943
  %3963 = add <16 x i16> %3962, %3950
  %3964 = add <16 x i16> %3963, %3957
  %3965 = add <16 x i16> %3939, %3932
  %3966 = add <16 x i16> %3965, %3946
  %3967 = add <16 x i16> %3966, %3953
  %3968 = add <16 x i16> %3967, %3960
  %3969 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3964, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3970 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3968, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %3971 = shufflevector <16 x i16> %3969, <16 x i16> %3970, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3972 = lshr <32 x i16> %3971, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %3973 = shufflevector <32 x i16> %3972, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3974 = add nsw i64 %3762, %3925
  %3975 = getelementptr inbounds i16, i16* %66, i64 %3974
  %3976 = bitcast i16* %3975 to <16 x i16>*
  store <16 x i16> %3973, <16 x i16>* %3976, align 2, !tbaa !401
  %3977 = shufflevector <32 x i16> %3972, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3978 = getelementptr inbounds i16, i16* %3975, i64 16
  %3979 = bitcast i16* %3978 to <16 x i16>*
  store <16 x i16> %3977, <16 x i16>* %3979, align 2, !tbaa !401
  %3980 = add nuw nsw i32 %blur_y.s0.x.x.rebased194, 1
  %.not2681 = icmp eq i32 %3980, %t1683
  br i1 %.not2681, label %"end for blur_y.s0.x.x.rebased193", label %"for blur_y.s0.x.x.rebased192"

after_bb201:                                      ; preds = %"end for blur_y.s0.x.x.rebased193", %"produce blur_x204"
  br i1 %100, label %"for blur_y.s0.x.x.rebased206.preheader", label %"end for blur_y.s0.x.x.rebased207", !prof !386

"for blur_y.s0.x.x.rebased206.preheader":         ; preds = %after_bb201
  %3981 = sext i32 %t1688 to i64
  %3982 = zext i32 %.pre-phi3402 to i64
  %3983 = mul nsw i64 %3982, %112
  %3984 = sub nsw i64 %3983, %96
  %3985 = zext i32 %.pre-phi3396 to i64
  %3986 = mul nsw i64 %3985, %112
  %3987 = sub nsw i64 %3986, %96
  %3988 = zext i32 %.pre-phi3408 to i64
  %3989 = mul nsw i64 %3988, %112
  %3990 = sub nsw i64 %3989, %96
  %3991 = zext i32 %.pre-phi3378 to i64
  %3992 = mul nsw i64 %3991, %112
  %3993 = sub nsw i64 %3992, %96
  %3994 = zext i32 %.pre-phi to i64
  %3995 = mul nsw i64 %3994, %112
  %3996 = sub nsw i64 %3995, %96
  %3997 = sext i32 %a26 to i64
  %3998 = add nsw i64 %3997, 5
  %3999 = mul nsw i64 %3998, %113
  %4000 = add nsw i64 %3999, %116
  br label %"for blur_y.s0.x.x.rebased206"

"produce blur_x204":                              ; preds = %"end for blur_y.s0.x.x.rebased193"
  %4001 = getelementptr inbounds i16, i16* %read_input, i64 %125
  %4002 = getelementptr inbounds i16, i16* %4001, i64 -31
  %4003 = bitcast i16* %4002 to <16 x i16>*
  %4004 = load <16 x i16>, <16 x i16>* %4003, align 2, !tbaa !396
  %4005 = getelementptr inbounds i16, i16* %4001, i64 -15
  %4006 = bitcast i16* %4005 to <16 x i16>*
  %4007 = load <16 x i16>, <16 x i16>* %4006, align 2, !tbaa !396
  %4008 = getelementptr inbounds i16, i16* %4001, i64 -32
  %4009 = bitcast i16* %4008 to <16 x i16>*
  %4010 = load <16 x i16>, <16 x i16>* %4009, align 2, !tbaa !396
  %4011 = getelementptr inbounds i16, i16* %4001, i64 -16
  %4012 = bitcast i16* %4011 to <16 x i16>*
  %4013 = load <16 x i16>, <16 x i16>* %4012, align 2, !tbaa !396
  %4014 = getelementptr inbounds i16, i16* %4001, i64 -30
  %4015 = bitcast i16* %4014 to <16 x i16>*
  %4016 = load <16 x i16>, <16 x i16>* %4015, align 2, !tbaa !396
  %4017 = getelementptr inbounds i16, i16* %4001, i64 -14
  %4018 = bitcast i16* %4017 to <16 x i16>*
  %4019 = load <16 x i16>, <16 x i16>* %4018, align 2, !tbaa !396
  %4020 = getelementptr inbounds i16, i16* %4001, i64 -28
  %4021 = bitcast i16* %4020 to <16 x i16>*
  %4022 = load <16 x i16>, <16 x i16>* %4021, align 2, !tbaa !396
  %4023 = getelementptr inbounds i16, i16* %4001, i64 -12
  %4024 = bitcast i16* %4023 to <16 x i16>*
  %4025 = load <16 x i16>, <16 x i16>* %4024, align 2, !tbaa !396
  %4026 = getelementptr inbounds i16, i16* %4001, i64 -29
  %4027 = bitcast i16* %4026 to <16 x i16>*
  %4028 = load <16 x i16>, <16 x i16>* %4027, align 2, !tbaa !396
  %4029 = getelementptr inbounds i16, i16* %4001, i64 -13
  %4030 = bitcast i16* %4029 to <16 x i16>*
  %4031 = load <16 x i16>, <16 x i16>* %4030, align 2, !tbaa !396
  %4032 = add <16 x i16> %4010, %4004
  %4033 = add <16 x i16> %4032, %4016
  %4034 = add <16 x i16> %4033, %4022
  %4035 = add <16 x i16> %4034, %4028
  %4036 = add <16 x i16> %4013, %4007
  %4037 = add <16 x i16> %4036, %4019
  %4038 = add <16 x i16> %4037, %4025
  %4039 = add <16 x i16> %4038, %4031
  %4040 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4035, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4041 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4039, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4042 = shufflevector <16 x i16> %4040, <16 x i16> %4041, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4043 = lshr <32 x i16> %4042, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4044 = shufflevector <32 x i16> %4043, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4045 = zext i32 %.pre-phi3378 to i64
  %4046 = mul nsw i64 %97, %4045
  %4047 = add nsw i64 %99, %4046
  %4048 = getelementptr inbounds i16, i16* %blur_x, i64 %4047
  %4049 = getelementptr inbounds i16, i16* %4048, i64 -32
  %4050 = bitcast i16* %4049 to <16 x i16>*
  store <16 x i16> %4044, <16 x i16>* %4050, align 2, !tbaa !399
  %4051 = shufflevector <32 x i16> %4043, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4052 = getelementptr inbounds i16, i16* %4048, i64 -16
  %4053 = bitcast i16* %4052 to <16 x i16>*
  store <16 x i16> %4051, <16 x i16>* %4053, align 2, !tbaa !399
  %4054 = zext i32 %.pre-phi3402 to i64
  %4055 = mul nsw i64 %4054, %112
  %4056 = add nsw i64 %4055, %94
  %4057 = getelementptr inbounds i16, i16* %blur_x, i64 %4056
  %4058 = getelementptr inbounds i16, i16* %4057, i64 -32
  %4059 = bitcast i16* %4058 to <16 x i16>*
  %4060 = load <16 x i16>, <16 x i16>* %4059, align 2, !tbaa !399
  %4061 = getelementptr inbounds i16, i16* %4057, i64 -16
  %4062 = bitcast i16* %4061 to <16 x i16>*
  %4063 = load <16 x i16>, <16 x i16>* %4062, align 2, !tbaa !399
  %4064 = zext i32 %.pre-phi3396 to i64
  %4065 = mul nsw i64 %4064, %112
  %4066 = add nsw i64 %4065, %94
  %4067 = getelementptr inbounds i16, i16* %blur_x, i64 %4066
  %4068 = getelementptr inbounds i16, i16* %4067, i64 -32
  %4069 = bitcast i16* %4068 to <16 x i16>*
  %4070 = load <16 x i16>, <16 x i16>* %4069, align 2, !tbaa !399
  %4071 = getelementptr inbounds i16, i16* %4067, i64 -16
  %4072 = bitcast i16* %4071 to <16 x i16>*
  %4073 = load <16 x i16>, <16 x i16>* %4072, align 2, !tbaa !399
  %4074 = zext i32 %.pre-phi3408 to i64
  %4075 = mul nsw i64 %4074, %112
  %4076 = add nsw i64 %4075, %94
  %4077 = getelementptr inbounds i16, i16* %blur_x, i64 %4076
  %4078 = getelementptr inbounds i16, i16* %4077, i64 -32
  %4079 = bitcast i16* %4078 to <16 x i16>*
  %4080 = load <16 x i16>, <16 x i16>* %4079, align 2, !tbaa !399
  %4081 = getelementptr inbounds i16, i16* %4077, i64 -16
  %4082 = bitcast i16* %4081 to <16 x i16>*
  %4083 = load <16 x i16>, <16 x i16>* %4082, align 2, !tbaa !399
  %4084 = mul nsw i64 %4045, %112
  %4085 = add nsw i64 %4084, %94
  %4086 = getelementptr inbounds i16, i16* %blur_x, i64 %4085
  %4087 = getelementptr inbounds i16, i16* %4086, i64 -32
  %4088 = bitcast i16* %4087 to <16 x i16>*
  %4089 = load <16 x i16>, <16 x i16>* %4088, align 2, !tbaa !399
  %4090 = getelementptr inbounds i16, i16* %4086, i64 -16
  %4091 = bitcast i16* %4090 to <16 x i16>*
  %4092 = load <16 x i16>, <16 x i16>* %4091, align 2, !tbaa !399
  %4093 = zext i32 %.pre-phi to i64
  %4094 = mul nsw i64 %4093, %112
  %4095 = add nsw i64 %4094, %94
  %4096 = getelementptr inbounds i16, i16* %blur_x, i64 %4095
  %4097 = getelementptr inbounds i16, i16* %4096, i64 -32
  %4098 = bitcast i16* %4097 to <16 x i16>*
  %4099 = load <16 x i16>, <16 x i16>* %4098, align 2, !tbaa !399
  %4100 = getelementptr inbounds i16, i16* %4096, i64 -16
  %4101 = bitcast i16* %4100 to <16 x i16>*
  %4102 = load <16 x i16>, <16 x i16>* %4101, align 2, !tbaa !399
  %4103 = add <16 x i16> %4070, %4060
  %4104 = add <16 x i16> %4103, %4080
  %4105 = add <16 x i16> %4104, %4089
  %4106 = add <16 x i16> %4105, %4099
  %4107 = add <16 x i16> %4073, %4063
  %4108 = add <16 x i16> %4107, %4083
  %4109 = add <16 x i16> %4108, %4092
  %4110 = add <16 x i16> %4109, %4102
  %4111 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4106, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4112 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4110, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4113 = shufflevector <16 x i16> %4111, <16 x i16> %4112, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4114 = lshr <32 x i16> %4113, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4115 = shufflevector <32 x i16> %4114, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4116 = sext i32 %a26 to i64
  %4117 = add nsw i64 %4116, 5
  %4118 = mul nsw i64 %4117, %113
  %4119 = add nsw i64 %115, %4118
  %4120 = getelementptr inbounds i16, i16* %66, i64 %4119
  %4121 = getelementptr inbounds i16, i16* %4120, i64 -32
  %4122 = bitcast i16* %4121 to <16 x i16>*
  store <16 x i16> %4115, <16 x i16>* %4122, align 2, !tbaa !401
  %4123 = shufflevector <32 x i16> %4114, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4124 = getelementptr inbounds i16, i16* %4120, i64 -16
  %4125 = bitcast i16* %4124 to <16 x i16>*
  store <16 x i16> %4123, <16 x i16>* %4125, align 2, !tbaa !401
  br label %after_bb201

"for blur_y.s0.x.x.rebased206":                   ; preds = %"for blur_y.s0.x.x.rebased206.preheader", %"consume blur_x213"
  %indvars.iv3170 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased206.preheader" ], [ %indvars.iv.next3171, %"consume blur_x213" ]
  %4126 = add nsw i64 %indvars.iv3170, %101
  %4127 = icmp slt i64 %4126, 1
  %4128 = trunc i64 %4126 to i32
  %4129 = shl nsw i32 %4128, 5
  %4130 = icmp sgt i32 %4, %4129
  %4131 = or i1 %4127, %4130
  br i1 %4131, label %"produce blur_x212", label %"for blur_y.s0.x.x.rebased206.consume blur_x213_crit_edge"

"for blur_y.s0.x.x.rebased206.consume blur_x213_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased206"
  %.pre3413 = shl nsw i64 %4126, 5
  br label %"consume blur_x213"

"end for blur_y.s0.x.x.rebased207":               ; preds = %"consume blur_x213", %after_bb201
  br i1 %102, label %"for blur_y.s0.x.x.rebased214.preheader", label %"end for blur_y.s0.x.x.rebased215", !prof !386

"for blur_y.s0.x.x.rebased214.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased207"
  %4132 = sext i32 %t1688 to i64
  %4133 = zext i32 %.pre-phi3402 to i64
  %4134 = mul nsw i64 %4133, %112
  %4135 = sub nsw i64 %4134, %96
  %4136 = zext i32 %.pre-phi3396 to i64
  %4137 = mul nsw i64 %4136, %112
  %4138 = sub nsw i64 %4137, %96
  %4139 = zext i32 %.pre-phi3408 to i64
  %4140 = mul nsw i64 %4139, %112
  %4141 = sub nsw i64 %4140, %96
  %4142 = zext i32 %.pre-phi3378 to i64
  %4143 = mul nsw i64 %4142, %112
  %4144 = sub nsw i64 %4143, %96
  %4145 = zext i32 %.pre-phi to i64
  %4146 = mul nsw i64 %4145, %112
  %4147 = sub nsw i64 %4146, %96
  %4148 = sext i32 %a26 to i64
  %4149 = add nsw i64 %4148, 5
  %4150 = mul nsw i64 %4149, %113
  %4151 = add nsw i64 %4150, %116
  br label %"for blur_y.s0.x.x.rebased214"

"produce blur_x212":                              ; preds = %"for blur_y.s0.x.x.rebased206"
  %t792 = add nsw i32 %4129, %t1785
  %4152 = sext i32 %t792 to i64
  %4153 = getelementptr inbounds i16, i16* %read_input, i64 %4152
  %4154 = getelementptr inbounds i16, i16* %4153, i64 1
  %4155 = bitcast i16* %4154 to <16 x i16>*
  %4156 = load <16 x i16>, <16 x i16>* %4155, align 2, !tbaa !396
  %4157 = getelementptr inbounds i16, i16* %4153, i64 17
  %4158 = bitcast i16* %4157 to <16 x i16>*
  %4159 = load <16 x i16>, <16 x i16>* %4158, align 2, !tbaa !396
  %4160 = bitcast i16* %4153 to <16 x i16>*
  %4161 = load <16 x i16>, <16 x i16>* %4160, align 2, !tbaa !396
  %4162 = getelementptr inbounds i16, i16* %4153, i64 16
  %4163 = bitcast i16* %4162 to <16 x i16>*
  %4164 = load <16 x i16>, <16 x i16>* %4163, align 2, !tbaa !396
  %4165 = getelementptr inbounds i16, i16* %4153, i64 2
  %4166 = bitcast i16* %4165 to <16 x i16>*
  %4167 = load <16 x i16>, <16 x i16>* %4166, align 2, !tbaa !396
  %4168 = getelementptr inbounds i16, i16* %4153, i64 18
  %4169 = bitcast i16* %4168 to <16 x i16>*
  %4170 = load <16 x i16>, <16 x i16>* %4169, align 2, !tbaa !396
  %4171 = getelementptr inbounds i16, i16* %4153, i64 4
  %4172 = bitcast i16* %4171 to <16 x i16>*
  %4173 = load <16 x i16>, <16 x i16>* %4172, align 2, !tbaa !396
  %4174 = getelementptr inbounds i16, i16* %4153, i64 20
  %4175 = bitcast i16* %4174 to <16 x i16>*
  %4176 = load <16 x i16>, <16 x i16>* %4175, align 2, !tbaa !396
  %4177 = getelementptr inbounds i16, i16* %4153, i64 3
  %4178 = bitcast i16* %4177 to <16 x i16>*
  %4179 = load <16 x i16>, <16 x i16>* %4178, align 2, !tbaa !396
  %4180 = getelementptr inbounds i16, i16* %4153, i64 19
  %4181 = bitcast i16* %4180 to <16 x i16>*
  %4182 = load <16 x i16>, <16 x i16>* %4181, align 2, !tbaa !396
  %4183 = add <16 x i16> %4161, %4156
  %4184 = add <16 x i16> %4183, %4167
  %4185 = add <16 x i16> %4184, %4173
  %4186 = add <16 x i16> %4185, %4179
  %4187 = add <16 x i16> %4164, %4159
  %4188 = add <16 x i16> %4187, %4170
  %4189 = add <16 x i16> %4188, %4176
  %4190 = add <16 x i16> %4189, %4182
  %4191 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4186, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4192 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4190, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4193 = shufflevector <16 x i16> %4191, <16 x i16> %4192, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4194 = lshr <32 x i16> %4193, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4195 = shufflevector <32 x i16> %4194, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4196 = shl nsw i64 %4126, 5
  %4197 = add nsw i64 %4196, %3981
  %4198 = getelementptr inbounds i16, i16* %blur_x, i64 %4197
  %4199 = bitcast i16* %4198 to <16 x i16>*
  store <16 x i16> %4195, <16 x i16>* %4199, align 2, !tbaa !399
  %4200 = shufflevector <32 x i16> %4194, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4201 = getelementptr inbounds i16, i16* %4198, i64 16
  %4202 = bitcast i16* %4201 to <16 x i16>*
  store <16 x i16> %4200, <16 x i16>* %4202, align 2, !tbaa !399
  br label %"consume blur_x213"

"consume blur_x213":                              ; preds = %"for blur_y.s0.x.x.rebased206.consume blur_x213_crit_edge", %"produce blur_x212"
  %.pre-phi3414 = phi i64 [ %.pre3413, %"for blur_y.s0.x.x.rebased206.consume blur_x213_crit_edge" ], [ %4196, %"produce blur_x212" ]
  %4203 = add nsw i64 %3984, %.pre-phi3414
  %4204 = getelementptr inbounds i16, i16* %blur_x, i64 %4203
  %4205 = bitcast i16* %4204 to <16 x i16>*
  %4206 = load <16 x i16>, <16 x i16>* %4205, align 2, !tbaa !399
  %4207 = getelementptr inbounds i16, i16* %4204, i64 16
  %4208 = bitcast i16* %4207 to <16 x i16>*
  %4209 = load <16 x i16>, <16 x i16>* %4208, align 2, !tbaa !399
  %4210 = add nsw i64 %3987, %.pre-phi3414
  %4211 = getelementptr inbounds i16, i16* %blur_x, i64 %4210
  %4212 = bitcast i16* %4211 to <16 x i16>*
  %4213 = load <16 x i16>, <16 x i16>* %4212, align 2, !tbaa !399
  %4214 = getelementptr inbounds i16, i16* %4211, i64 16
  %4215 = bitcast i16* %4214 to <16 x i16>*
  %4216 = load <16 x i16>, <16 x i16>* %4215, align 2, !tbaa !399
  %4217 = add nsw i64 %3990, %.pre-phi3414
  %4218 = getelementptr inbounds i16, i16* %blur_x, i64 %4217
  %4219 = bitcast i16* %4218 to <16 x i16>*
  %4220 = load <16 x i16>, <16 x i16>* %4219, align 2, !tbaa !399
  %4221 = getelementptr inbounds i16, i16* %4218, i64 16
  %4222 = bitcast i16* %4221 to <16 x i16>*
  %4223 = load <16 x i16>, <16 x i16>* %4222, align 2, !tbaa !399
  %4224 = add nsw i64 %3993, %.pre-phi3414
  %4225 = getelementptr inbounds i16, i16* %blur_x, i64 %4224
  %4226 = bitcast i16* %4225 to <16 x i16>*
  %4227 = load <16 x i16>, <16 x i16>* %4226, align 2, !tbaa !399
  %4228 = getelementptr inbounds i16, i16* %4225, i64 16
  %4229 = bitcast i16* %4228 to <16 x i16>*
  %4230 = load <16 x i16>, <16 x i16>* %4229, align 2, !tbaa !399
  %4231 = add nsw i64 %3996, %.pre-phi3414
  %4232 = getelementptr inbounds i16, i16* %blur_x, i64 %4231
  %4233 = bitcast i16* %4232 to <16 x i16>*
  %4234 = load <16 x i16>, <16 x i16>* %4233, align 2, !tbaa !399
  %4235 = getelementptr inbounds i16, i16* %4232, i64 16
  %4236 = bitcast i16* %4235 to <16 x i16>*
  %4237 = load <16 x i16>, <16 x i16>* %4236, align 2, !tbaa !399
  %4238 = add <16 x i16> %4213, %4206
  %4239 = add <16 x i16> %4238, %4220
  %4240 = add <16 x i16> %4239, %4227
  %4241 = add <16 x i16> %4240, %4234
  %4242 = add <16 x i16> %4216, %4209
  %4243 = add <16 x i16> %4242, %4223
  %4244 = add <16 x i16> %4243, %4230
  %4245 = add <16 x i16> %4244, %4237
  %4246 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4241, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4247 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4245, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4248 = shufflevector <16 x i16> %4246, <16 x i16> %4247, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4249 = lshr <32 x i16> %4248, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4250 = shufflevector <32 x i16> %4249, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4251 = add nsw i64 %4000, %.pre-phi3414
  %4252 = getelementptr inbounds i16, i16* %66, i64 %4251
  %4253 = bitcast i16* %4252 to <16 x i16>*
  store <16 x i16> %4250, <16 x i16>* %4253, align 2, !tbaa !401
  %4254 = shufflevector <32 x i16> %4249, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4255 = getelementptr inbounds i16, i16* %4252, i64 16
  %4256 = bitcast i16* %4255 to <16 x i16>*
  store <16 x i16> %4254, <16 x i16>* %4256, align 2, !tbaa !401
  %indvars.iv.next3171 = add nuw nsw i64 %indvars.iv3170, 1
  %.not2680 = icmp eq i64 %indvars.iv.next3171, %184
  br i1 %.not2680, label %"end for blur_y.s0.x.x.rebased207", label %"for blur_y.s0.x.x.rebased206"

"for blur_y.s0.x.x.rebased214":                   ; preds = %"for blur_y.s0.x.x.rebased214.preheader", %"consume blur_x222"
  %blur_y.s0.x.x.rebased216 = phi i32 [ %4369, %"consume blur_x222" ], [ 0, %"for blur_y.s0.x.x.rebased214.preheader" ]
  %4257 = add nsw i32 %blur_y.s0.x.x.rebased216, %t1626
  %a140 = shl nsw i32 %4257, 5
  %4258 = icmp sgt i32 %a14, %a140
  %b146 = select i1 %4258, i32 %a140, i32 %a14
  %4259 = icmp slt i32 %4257, 1
  %4260 = icmp sgt i32 %4, %a140
  %4261 = or i1 %4259, %4260
  br i1 %4261, label %"produce blur_x220", label %"consume blur_x222"

"end for blur_y.s0.x.x.rebased215":               ; preds = %"consume blur_x222", %"end for blur_y.s0.x.x.rebased207"
  br i1 %34, label %"produce blur_x226", label %after_bb223

"produce blur_x220":                              ; preds = %"for blur_y.s0.x.x.rebased214"
  %4262 = icmp slt i32 %b146, %4
  %blur_x.s0.x.v1.base.s221 = select i1 %4262, i32 %b146, i32 %4
  %t797 = add nsw i32 %blur_x.s0.x.v1.base.s221, %t1785
  %4263 = sext i32 %t797 to i64
  %4264 = getelementptr inbounds i16, i16* %read_input, i64 %4263
  %4265 = getelementptr inbounds i16, i16* %4264, i64 1
  %4266 = bitcast i16* %4265 to <16 x i16>*
  %4267 = load <16 x i16>, <16 x i16>* %4266, align 2, !tbaa !396
  %4268 = getelementptr inbounds i16, i16* %4264, i64 17
  %4269 = bitcast i16* %4268 to <16 x i16>*
  %4270 = load <16 x i16>, <16 x i16>* %4269, align 2, !tbaa !396
  %4271 = bitcast i16* %4264 to <16 x i16>*
  %4272 = load <16 x i16>, <16 x i16>* %4271, align 2, !tbaa !396
  %4273 = getelementptr inbounds i16, i16* %4264, i64 16
  %4274 = bitcast i16* %4273 to <16 x i16>*
  %4275 = load <16 x i16>, <16 x i16>* %4274, align 2, !tbaa !396
  %4276 = getelementptr inbounds i16, i16* %4264, i64 2
  %4277 = bitcast i16* %4276 to <16 x i16>*
  %4278 = load <16 x i16>, <16 x i16>* %4277, align 2, !tbaa !396
  %4279 = getelementptr inbounds i16, i16* %4264, i64 18
  %4280 = bitcast i16* %4279 to <16 x i16>*
  %4281 = load <16 x i16>, <16 x i16>* %4280, align 2, !tbaa !396
  %4282 = getelementptr inbounds i16, i16* %4264, i64 4
  %4283 = bitcast i16* %4282 to <16 x i16>*
  %4284 = load <16 x i16>, <16 x i16>* %4283, align 2, !tbaa !396
  %4285 = getelementptr inbounds i16, i16* %4264, i64 20
  %4286 = bitcast i16* %4285 to <16 x i16>*
  %4287 = load <16 x i16>, <16 x i16>* %4286, align 2, !tbaa !396
  %4288 = getelementptr inbounds i16, i16* %4264, i64 3
  %4289 = bitcast i16* %4288 to <16 x i16>*
  %4290 = load <16 x i16>, <16 x i16>* %4289, align 2, !tbaa !396
  %4291 = getelementptr inbounds i16, i16* %4264, i64 19
  %4292 = bitcast i16* %4291 to <16 x i16>*
  %4293 = load <16 x i16>, <16 x i16>* %4292, align 2, !tbaa !396
  %4294 = add <16 x i16> %4272, %4267
  %4295 = add <16 x i16> %4294, %4278
  %4296 = add <16 x i16> %4295, %4284
  %4297 = add <16 x i16> %4296, %4290
  %4298 = add <16 x i16> %4275, %4270
  %4299 = add <16 x i16> %4298, %4281
  %4300 = add <16 x i16> %4299, %4287
  %4301 = add <16 x i16> %4300, %4293
  %4302 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4297, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4303 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4301, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4304 = shufflevector <16 x i16> %4302, <16 x i16> %4303, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4305 = lshr <32 x i16> %4304, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4306 = shufflevector <32 x i16> %4305, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4307 = sext i32 %blur_x.s0.x.v1.base.s221 to i64
  %4308 = add nsw i64 %4307, %4132
  %4309 = getelementptr inbounds i16, i16* %blur_x, i64 %4308
  %4310 = bitcast i16* %4309 to <16 x i16>*
  store <16 x i16> %4306, <16 x i16>* %4310, align 2, !tbaa !399
  %4311 = shufflevector <32 x i16> %4305, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4312 = getelementptr inbounds i16, i16* %4309, i64 16
  %4313 = bitcast i16* %4312 to <16 x i16>*
  store <16 x i16> %4311, <16 x i16>* %4313, align 2, !tbaa !399
  br label %"consume blur_x222"

"consume blur_x222":                              ; preds = %"for blur_y.s0.x.x.rebased214", %"produce blur_x220"
  %4314 = sext i32 %b146 to i64
  %4315 = add nsw i64 %4135, %4314
  %4316 = getelementptr inbounds i16, i16* %blur_x, i64 %4315
  %4317 = bitcast i16* %4316 to <16 x i16>*
  %4318 = load <16 x i16>, <16 x i16>* %4317, align 2, !tbaa !399
  %4319 = getelementptr inbounds i16, i16* %4316, i64 16
  %4320 = bitcast i16* %4319 to <16 x i16>*
  %4321 = load <16 x i16>, <16 x i16>* %4320, align 2, !tbaa !399
  %4322 = add nsw i64 %4138, %4314
  %4323 = getelementptr inbounds i16, i16* %blur_x, i64 %4322
  %4324 = bitcast i16* %4323 to <16 x i16>*
  %4325 = load <16 x i16>, <16 x i16>* %4324, align 2, !tbaa !399
  %4326 = getelementptr inbounds i16, i16* %4323, i64 16
  %4327 = bitcast i16* %4326 to <16 x i16>*
  %4328 = load <16 x i16>, <16 x i16>* %4327, align 2, !tbaa !399
  %4329 = add nsw i64 %4141, %4314
  %4330 = getelementptr inbounds i16, i16* %blur_x, i64 %4329
  %4331 = bitcast i16* %4330 to <16 x i16>*
  %4332 = load <16 x i16>, <16 x i16>* %4331, align 2, !tbaa !399
  %4333 = getelementptr inbounds i16, i16* %4330, i64 16
  %4334 = bitcast i16* %4333 to <16 x i16>*
  %4335 = load <16 x i16>, <16 x i16>* %4334, align 2, !tbaa !399
  %4336 = add nsw i64 %4144, %4314
  %4337 = getelementptr inbounds i16, i16* %blur_x, i64 %4336
  %4338 = bitcast i16* %4337 to <16 x i16>*
  %4339 = load <16 x i16>, <16 x i16>* %4338, align 2, !tbaa !399
  %4340 = getelementptr inbounds i16, i16* %4337, i64 16
  %4341 = bitcast i16* %4340 to <16 x i16>*
  %4342 = load <16 x i16>, <16 x i16>* %4341, align 2, !tbaa !399
  %4343 = add nsw i64 %4147, %4314
  %4344 = getelementptr inbounds i16, i16* %blur_x, i64 %4343
  %4345 = bitcast i16* %4344 to <16 x i16>*
  %4346 = load <16 x i16>, <16 x i16>* %4345, align 2, !tbaa !399
  %4347 = getelementptr inbounds i16, i16* %4344, i64 16
  %4348 = bitcast i16* %4347 to <16 x i16>*
  %4349 = load <16 x i16>, <16 x i16>* %4348, align 2, !tbaa !399
  %4350 = add <16 x i16> %4325, %4318
  %4351 = add <16 x i16> %4350, %4332
  %4352 = add <16 x i16> %4351, %4339
  %4353 = add <16 x i16> %4352, %4346
  %4354 = add <16 x i16> %4328, %4321
  %4355 = add <16 x i16> %4354, %4335
  %4356 = add <16 x i16> %4355, %4342
  %4357 = add <16 x i16> %4356, %4349
  %4358 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4353, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4359 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4357, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4360 = shufflevector <16 x i16> %4358, <16 x i16> %4359, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4361 = lshr <32 x i16> %4360, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4362 = shufflevector <32 x i16> %4361, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4363 = add nsw i64 %4151, %4314
  %4364 = getelementptr inbounds i16, i16* %66, i64 %4363
  %4365 = bitcast i16* %4364 to <16 x i16>*
  store <16 x i16> %4362, <16 x i16>* %4365, align 2, !tbaa !401
  %4366 = shufflevector <32 x i16> %4361, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4367 = getelementptr inbounds i16, i16* %4364, i64 16
  %4368 = bitcast i16* %4367 to <16 x i16>*
  store <16 x i16> %4366, <16 x i16>* %4368, align 2, !tbaa !401
  %4369 = add nuw nsw i32 %blur_y.s0.x.x.rebased216, 1
  %.not2679 = icmp eq i32 %4369, %t1683
  br i1 %.not2679, label %"end for blur_y.s0.x.x.rebased215", label %"for blur_y.s0.x.x.rebased214"

after_bb223:                                      ; preds = %"end for blur_y.s0.x.x.rebased215", %"produce blur_x226"
  br i1 %100, label %"for blur_y.s0.x.x.rebased228.preheader", label %"end for blur_y.s0.x.x.rebased229", !prof !386

"for blur_y.s0.x.x.rebased228.preheader":         ; preds = %after_bb223
  %4370 = sext i32 %t1694 to i64
  %4371 = zext i32 %.pre-phi3408 to i64
  %4372 = mul nsw i64 %4371, %112
  %4373 = sub nsw i64 %4372, %96
  %4374 = zext i32 %.pre-phi3402 to i64
  %4375 = mul nsw i64 %4374, %112
  %4376 = sub nsw i64 %4375, %96
  %4377 = zext i32 %.pre-phi to i64
  %4378 = mul nsw i64 %4377, %112
  %4379 = sub nsw i64 %4378, %96
  %4380 = zext i32 %.pre-phi3382 to i64
  %4381 = mul nsw i64 %4380, %112
  %4382 = sub nsw i64 %4381, %96
  %4383 = zext i32 %.pre-phi3378 to i64
  %4384 = mul nsw i64 %4383, %112
  %4385 = sub nsw i64 %4384, %96
  %4386 = sext i32 %a26 to i64
  %4387 = add nsw i64 %4386, 6
  %4388 = mul nsw i64 %4387, %113
  %4389 = add nsw i64 %4388, %116
  br label %"for blur_y.s0.x.x.rebased228"

"produce blur_x226":                              ; preds = %"end for blur_y.s0.x.x.rebased215"
  %4390 = getelementptr inbounds i16, i16* %read_input, i64 %127
  %4391 = getelementptr inbounds i16, i16* %4390, i64 -31
  %4392 = bitcast i16* %4391 to <16 x i16>*
  %4393 = load <16 x i16>, <16 x i16>* %4392, align 2, !tbaa !396
  %4394 = getelementptr inbounds i16, i16* %4390, i64 -15
  %4395 = bitcast i16* %4394 to <16 x i16>*
  %4396 = load <16 x i16>, <16 x i16>* %4395, align 2, !tbaa !396
  %4397 = getelementptr inbounds i16, i16* %4390, i64 -32
  %4398 = bitcast i16* %4397 to <16 x i16>*
  %4399 = load <16 x i16>, <16 x i16>* %4398, align 2, !tbaa !396
  %4400 = getelementptr inbounds i16, i16* %4390, i64 -16
  %4401 = bitcast i16* %4400 to <16 x i16>*
  %4402 = load <16 x i16>, <16 x i16>* %4401, align 2, !tbaa !396
  %4403 = getelementptr inbounds i16, i16* %4390, i64 -30
  %4404 = bitcast i16* %4403 to <16 x i16>*
  %4405 = load <16 x i16>, <16 x i16>* %4404, align 2, !tbaa !396
  %4406 = getelementptr inbounds i16, i16* %4390, i64 -14
  %4407 = bitcast i16* %4406 to <16 x i16>*
  %4408 = load <16 x i16>, <16 x i16>* %4407, align 2, !tbaa !396
  %4409 = getelementptr inbounds i16, i16* %4390, i64 -28
  %4410 = bitcast i16* %4409 to <16 x i16>*
  %4411 = load <16 x i16>, <16 x i16>* %4410, align 2, !tbaa !396
  %4412 = getelementptr inbounds i16, i16* %4390, i64 -12
  %4413 = bitcast i16* %4412 to <16 x i16>*
  %4414 = load <16 x i16>, <16 x i16>* %4413, align 2, !tbaa !396
  %4415 = getelementptr inbounds i16, i16* %4390, i64 -29
  %4416 = bitcast i16* %4415 to <16 x i16>*
  %4417 = load <16 x i16>, <16 x i16>* %4416, align 2, !tbaa !396
  %4418 = getelementptr inbounds i16, i16* %4390, i64 -13
  %4419 = bitcast i16* %4418 to <16 x i16>*
  %4420 = load <16 x i16>, <16 x i16>* %4419, align 2, !tbaa !396
  %4421 = add <16 x i16> %4399, %4393
  %4422 = add <16 x i16> %4421, %4405
  %4423 = add <16 x i16> %4422, %4411
  %4424 = add <16 x i16> %4423, %4417
  %4425 = add <16 x i16> %4402, %4396
  %4426 = add <16 x i16> %4425, %4408
  %4427 = add <16 x i16> %4426, %4414
  %4428 = add <16 x i16> %4427, %4420
  %4429 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4424, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4430 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4428, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4431 = shufflevector <16 x i16> %4429, <16 x i16> %4430, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4432 = lshr <32 x i16> %4431, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4433 = shufflevector <32 x i16> %4432, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4434 = zext i32 %.pre-phi3382 to i64
  %4435 = mul nsw i64 %97, %4434
  %4436 = add nsw i64 %99, %4435
  %4437 = getelementptr inbounds i16, i16* %blur_x, i64 %4436
  %4438 = getelementptr inbounds i16, i16* %4437, i64 -32
  %4439 = bitcast i16* %4438 to <16 x i16>*
  store <16 x i16> %4433, <16 x i16>* %4439, align 2, !tbaa !399
  %4440 = shufflevector <32 x i16> %4432, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4441 = getelementptr inbounds i16, i16* %4437, i64 -16
  %4442 = bitcast i16* %4441 to <16 x i16>*
  store <16 x i16> %4440, <16 x i16>* %4442, align 2, !tbaa !399
  %4443 = zext i32 %.pre-phi3408 to i64
  %4444 = mul nsw i64 %4443, %112
  %4445 = add nsw i64 %4444, %94
  %4446 = getelementptr inbounds i16, i16* %blur_x, i64 %4445
  %4447 = getelementptr inbounds i16, i16* %4446, i64 -32
  %4448 = bitcast i16* %4447 to <16 x i16>*
  %4449 = load <16 x i16>, <16 x i16>* %4448, align 2, !tbaa !399
  %4450 = getelementptr inbounds i16, i16* %4446, i64 -16
  %4451 = bitcast i16* %4450 to <16 x i16>*
  %4452 = load <16 x i16>, <16 x i16>* %4451, align 2, !tbaa !399
  %4453 = zext i32 %.pre-phi3402 to i64
  %4454 = mul nsw i64 %4453, %112
  %4455 = add nsw i64 %4454, %94
  %4456 = getelementptr inbounds i16, i16* %blur_x, i64 %4455
  %4457 = getelementptr inbounds i16, i16* %4456, i64 -32
  %4458 = bitcast i16* %4457 to <16 x i16>*
  %4459 = load <16 x i16>, <16 x i16>* %4458, align 2, !tbaa !399
  %4460 = getelementptr inbounds i16, i16* %4456, i64 -16
  %4461 = bitcast i16* %4460 to <16 x i16>*
  %4462 = load <16 x i16>, <16 x i16>* %4461, align 2, !tbaa !399
  %4463 = zext i32 %.pre-phi to i64
  %4464 = mul nsw i64 %4463, %112
  %4465 = add nsw i64 %4464, %94
  %4466 = getelementptr inbounds i16, i16* %blur_x, i64 %4465
  %4467 = getelementptr inbounds i16, i16* %4466, i64 -32
  %4468 = bitcast i16* %4467 to <16 x i16>*
  %4469 = load <16 x i16>, <16 x i16>* %4468, align 2, !tbaa !399
  %4470 = getelementptr inbounds i16, i16* %4466, i64 -16
  %4471 = bitcast i16* %4470 to <16 x i16>*
  %4472 = load <16 x i16>, <16 x i16>* %4471, align 2, !tbaa !399
  %4473 = mul nsw i64 %4434, %112
  %4474 = add nsw i64 %4473, %94
  %4475 = getelementptr inbounds i16, i16* %blur_x, i64 %4474
  %4476 = getelementptr inbounds i16, i16* %4475, i64 -32
  %4477 = bitcast i16* %4476 to <16 x i16>*
  %4478 = load <16 x i16>, <16 x i16>* %4477, align 2, !tbaa !399
  %4479 = getelementptr inbounds i16, i16* %4475, i64 -16
  %4480 = bitcast i16* %4479 to <16 x i16>*
  %4481 = load <16 x i16>, <16 x i16>* %4480, align 2, !tbaa !399
  %4482 = zext i32 %.pre-phi3378 to i64
  %4483 = mul nsw i64 %4482, %112
  %4484 = add nsw i64 %4483, %94
  %4485 = getelementptr inbounds i16, i16* %blur_x, i64 %4484
  %4486 = getelementptr inbounds i16, i16* %4485, i64 -32
  %4487 = bitcast i16* %4486 to <16 x i16>*
  %4488 = load <16 x i16>, <16 x i16>* %4487, align 2, !tbaa !399
  %4489 = getelementptr inbounds i16, i16* %4485, i64 -16
  %4490 = bitcast i16* %4489 to <16 x i16>*
  %4491 = load <16 x i16>, <16 x i16>* %4490, align 2, !tbaa !399
  %4492 = add <16 x i16> %4459, %4449
  %4493 = add <16 x i16> %4492, %4469
  %4494 = add <16 x i16> %4493, %4478
  %4495 = add <16 x i16> %4494, %4488
  %4496 = add <16 x i16> %4462, %4452
  %4497 = add <16 x i16> %4496, %4472
  %4498 = add <16 x i16> %4497, %4481
  %4499 = add <16 x i16> %4498, %4491
  %4500 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4495, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4501 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4499, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4502 = shufflevector <16 x i16> %4500, <16 x i16> %4501, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4503 = lshr <32 x i16> %4502, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4504 = shufflevector <32 x i16> %4503, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4505 = sext i32 %a26 to i64
  %4506 = add nsw i64 %4505, 6
  %4507 = mul nsw i64 %4506, %113
  %4508 = add nsw i64 %115, %4507
  %4509 = getelementptr inbounds i16, i16* %66, i64 %4508
  %4510 = getelementptr inbounds i16, i16* %4509, i64 -32
  %4511 = bitcast i16* %4510 to <16 x i16>*
  store <16 x i16> %4504, <16 x i16>* %4511, align 2, !tbaa !401
  %4512 = shufflevector <32 x i16> %4503, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4513 = getelementptr inbounds i16, i16* %4509, i64 -16
  %4514 = bitcast i16* %4513 to <16 x i16>*
  store <16 x i16> %4512, <16 x i16>* %4514, align 2, !tbaa !401
  br label %after_bb223

"for blur_y.s0.x.x.rebased228":                   ; preds = %"for blur_y.s0.x.x.rebased228.preheader", %"consume blur_x235"
  %indvars.iv3173 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased228.preheader" ], [ %indvars.iv.next3174, %"consume blur_x235" ]
  %4515 = add nsw i64 %indvars.iv3173, %101
  %4516 = icmp slt i64 %4515, 1
  %4517 = trunc i64 %4515 to i32
  %4518 = shl nsw i32 %4517, 5
  %4519 = icmp sgt i32 %4, %4518
  %4520 = or i1 %4516, %4519
  br i1 %4520, label %"produce blur_x234", label %"for blur_y.s0.x.x.rebased228.consume blur_x235_crit_edge"

"for blur_y.s0.x.x.rebased228.consume blur_x235_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased228"
  %.pre3415 = shl nsw i64 %4515, 5
  br label %"consume blur_x235"

"end for blur_y.s0.x.x.rebased229":               ; preds = %"consume blur_x235", %after_bb223
  br i1 %102, label %"for blur_y.s0.x.x.rebased236.preheader", label %"end for blur_y.s0.x.x.rebased237", !prof !386

"for blur_y.s0.x.x.rebased236.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased229"
  %4521 = sext i32 %t1694 to i64
  %4522 = zext i32 %.pre-phi3408 to i64
  %4523 = mul nsw i64 %4522, %112
  %4524 = sub nsw i64 %4523, %96
  %4525 = zext i32 %.pre-phi3402 to i64
  %4526 = mul nsw i64 %4525, %112
  %4527 = sub nsw i64 %4526, %96
  %4528 = zext i32 %.pre-phi to i64
  %4529 = mul nsw i64 %4528, %112
  %4530 = sub nsw i64 %4529, %96
  %4531 = zext i32 %.pre-phi3382 to i64
  %4532 = mul nsw i64 %4531, %112
  %4533 = sub nsw i64 %4532, %96
  %4534 = zext i32 %.pre-phi3378 to i64
  %4535 = mul nsw i64 %4534, %112
  %4536 = sub nsw i64 %4535, %96
  %4537 = sext i32 %a26 to i64
  %4538 = add nsw i64 %4537, 6
  %4539 = mul nsw i64 %4538, %113
  %4540 = add nsw i64 %4539, %116
  br label %"for blur_y.s0.x.x.rebased236"

"produce blur_x234":                              ; preds = %"for blur_y.s0.x.x.rebased228"
  %t808 = add nsw i32 %4518, %t1801
  %4541 = sext i32 %t808 to i64
  %4542 = getelementptr inbounds i16, i16* %read_input, i64 %4541
  %4543 = getelementptr inbounds i16, i16* %4542, i64 1
  %4544 = bitcast i16* %4543 to <16 x i16>*
  %4545 = load <16 x i16>, <16 x i16>* %4544, align 2, !tbaa !396
  %4546 = getelementptr inbounds i16, i16* %4542, i64 17
  %4547 = bitcast i16* %4546 to <16 x i16>*
  %4548 = load <16 x i16>, <16 x i16>* %4547, align 2, !tbaa !396
  %4549 = bitcast i16* %4542 to <16 x i16>*
  %4550 = load <16 x i16>, <16 x i16>* %4549, align 2, !tbaa !396
  %4551 = getelementptr inbounds i16, i16* %4542, i64 16
  %4552 = bitcast i16* %4551 to <16 x i16>*
  %4553 = load <16 x i16>, <16 x i16>* %4552, align 2, !tbaa !396
  %4554 = getelementptr inbounds i16, i16* %4542, i64 2
  %4555 = bitcast i16* %4554 to <16 x i16>*
  %4556 = load <16 x i16>, <16 x i16>* %4555, align 2, !tbaa !396
  %4557 = getelementptr inbounds i16, i16* %4542, i64 18
  %4558 = bitcast i16* %4557 to <16 x i16>*
  %4559 = load <16 x i16>, <16 x i16>* %4558, align 2, !tbaa !396
  %4560 = getelementptr inbounds i16, i16* %4542, i64 4
  %4561 = bitcast i16* %4560 to <16 x i16>*
  %4562 = load <16 x i16>, <16 x i16>* %4561, align 2, !tbaa !396
  %4563 = getelementptr inbounds i16, i16* %4542, i64 20
  %4564 = bitcast i16* %4563 to <16 x i16>*
  %4565 = load <16 x i16>, <16 x i16>* %4564, align 2, !tbaa !396
  %4566 = getelementptr inbounds i16, i16* %4542, i64 3
  %4567 = bitcast i16* %4566 to <16 x i16>*
  %4568 = load <16 x i16>, <16 x i16>* %4567, align 2, !tbaa !396
  %4569 = getelementptr inbounds i16, i16* %4542, i64 19
  %4570 = bitcast i16* %4569 to <16 x i16>*
  %4571 = load <16 x i16>, <16 x i16>* %4570, align 2, !tbaa !396
  %4572 = add <16 x i16> %4550, %4545
  %4573 = add <16 x i16> %4572, %4556
  %4574 = add <16 x i16> %4573, %4562
  %4575 = add <16 x i16> %4574, %4568
  %4576 = add <16 x i16> %4553, %4548
  %4577 = add <16 x i16> %4576, %4559
  %4578 = add <16 x i16> %4577, %4565
  %4579 = add <16 x i16> %4578, %4571
  %4580 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4575, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4581 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4579, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4582 = shufflevector <16 x i16> %4580, <16 x i16> %4581, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4583 = lshr <32 x i16> %4582, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4584 = shufflevector <32 x i16> %4583, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4585 = shl nsw i64 %4515, 5
  %4586 = add nsw i64 %4585, %4370
  %4587 = getelementptr inbounds i16, i16* %blur_x, i64 %4586
  %4588 = bitcast i16* %4587 to <16 x i16>*
  store <16 x i16> %4584, <16 x i16>* %4588, align 2, !tbaa !399
  %4589 = shufflevector <32 x i16> %4583, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4590 = getelementptr inbounds i16, i16* %4587, i64 16
  %4591 = bitcast i16* %4590 to <16 x i16>*
  store <16 x i16> %4589, <16 x i16>* %4591, align 2, !tbaa !399
  br label %"consume blur_x235"

"consume blur_x235":                              ; preds = %"for blur_y.s0.x.x.rebased228.consume blur_x235_crit_edge", %"produce blur_x234"
  %.pre-phi3416 = phi i64 [ %.pre3415, %"for blur_y.s0.x.x.rebased228.consume blur_x235_crit_edge" ], [ %4585, %"produce blur_x234" ]
  %4592 = add nsw i64 %4373, %.pre-phi3416
  %4593 = getelementptr inbounds i16, i16* %blur_x, i64 %4592
  %4594 = bitcast i16* %4593 to <16 x i16>*
  %4595 = load <16 x i16>, <16 x i16>* %4594, align 2, !tbaa !399
  %4596 = getelementptr inbounds i16, i16* %4593, i64 16
  %4597 = bitcast i16* %4596 to <16 x i16>*
  %4598 = load <16 x i16>, <16 x i16>* %4597, align 2, !tbaa !399
  %4599 = add nsw i64 %4376, %.pre-phi3416
  %4600 = getelementptr inbounds i16, i16* %blur_x, i64 %4599
  %4601 = bitcast i16* %4600 to <16 x i16>*
  %4602 = load <16 x i16>, <16 x i16>* %4601, align 2, !tbaa !399
  %4603 = getelementptr inbounds i16, i16* %4600, i64 16
  %4604 = bitcast i16* %4603 to <16 x i16>*
  %4605 = load <16 x i16>, <16 x i16>* %4604, align 2, !tbaa !399
  %4606 = add nsw i64 %4379, %.pre-phi3416
  %4607 = getelementptr inbounds i16, i16* %blur_x, i64 %4606
  %4608 = bitcast i16* %4607 to <16 x i16>*
  %4609 = load <16 x i16>, <16 x i16>* %4608, align 2, !tbaa !399
  %4610 = getelementptr inbounds i16, i16* %4607, i64 16
  %4611 = bitcast i16* %4610 to <16 x i16>*
  %4612 = load <16 x i16>, <16 x i16>* %4611, align 2, !tbaa !399
  %4613 = add nsw i64 %4382, %.pre-phi3416
  %4614 = getelementptr inbounds i16, i16* %blur_x, i64 %4613
  %4615 = bitcast i16* %4614 to <16 x i16>*
  %4616 = load <16 x i16>, <16 x i16>* %4615, align 2, !tbaa !399
  %4617 = getelementptr inbounds i16, i16* %4614, i64 16
  %4618 = bitcast i16* %4617 to <16 x i16>*
  %4619 = load <16 x i16>, <16 x i16>* %4618, align 2, !tbaa !399
  %4620 = add nsw i64 %4385, %.pre-phi3416
  %4621 = getelementptr inbounds i16, i16* %blur_x, i64 %4620
  %4622 = bitcast i16* %4621 to <16 x i16>*
  %4623 = load <16 x i16>, <16 x i16>* %4622, align 2, !tbaa !399
  %4624 = getelementptr inbounds i16, i16* %4621, i64 16
  %4625 = bitcast i16* %4624 to <16 x i16>*
  %4626 = load <16 x i16>, <16 x i16>* %4625, align 2, !tbaa !399
  %4627 = add <16 x i16> %4602, %4595
  %4628 = add <16 x i16> %4627, %4609
  %4629 = add <16 x i16> %4628, %4616
  %4630 = add <16 x i16> %4629, %4623
  %4631 = add <16 x i16> %4605, %4598
  %4632 = add <16 x i16> %4631, %4612
  %4633 = add <16 x i16> %4632, %4619
  %4634 = add <16 x i16> %4633, %4626
  %4635 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4630, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4636 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4634, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4637 = shufflevector <16 x i16> %4635, <16 x i16> %4636, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4638 = lshr <32 x i16> %4637, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4639 = shufflevector <32 x i16> %4638, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4640 = add nsw i64 %4389, %.pre-phi3416
  %4641 = getelementptr inbounds i16, i16* %66, i64 %4640
  %4642 = bitcast i16* %4641 to <16 x i16>*
  store <16 x i16> %4639, <16 x i16>* %4642, align 2, !tbaa !401
  %4643 = shufflevector <32 x i16> %4638, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4644 = getelementptr inbounds i16, i16* %4641, i64 16
  %4645 = bitcast i16* %4644 to <16 x i16>*
  store <16 x i16> %4643, <16 x i16>* %4645, align 2, !tbaa !401
  %indvars.iv.next3174 = add nuw nsw i64 %indvars.iv3173, 1
  %.not2678 = icmp eq i64 %indvars.iv.next3174, %184
  br i1 %.not2678, label %"end for blur_y.s0.x.x.rebased229", label %"for blur_y.s0.x.x.rebased228"

"for blur_y.s0.x.x.rebased236":                   ; preds = %"for blur_y.s0.x.x.rebased236.preheader", %"consume blur_x244"
  %blur_y.s0.x.x.rebased238 = phi i32 [ %4758, %"consume blur_x244" ], [ 0, %"for blur_y.s0.x.x.rebased236.preheader" ]
  %4646 = add nsw i32 %blur_y.s0.x.x.rebased238, %t1626
  %a147 = shl nsw i32 %4646, 5
  %4647 = icmp sgt i32 %a14, %a147
  %b153 = select i1 %4647, i32 %a147, i32 %a14
  %4648 = icmp slt i32 %4646, 1
  %4649 = icmp sgt i32 %4, %a147
  %4650 = or i1 %4648, %4649
  br i1 %4650, label %"produce blur_x242", label %"consume blur_x244"

"end for blur_y.s0.x.x.rebased237":               ; preds = %"consume blur_x244", %"end for blur_y.s0.x.x.rebased229"
  br i1 %34, label %"produce blur_x248", label %after_bb245

"produce blur_x242":                              ; preds = %"for blur_y.s0.x.x.rebased236"
  %4651 = icmp slt i32 %b153, %4
  %blur_x.s0.x.v1.base.s243 = select i1 %4651, i32 %b153, i32 %4
  %t813 = add nsw i32 %blur_x.s0.x.v1.base.s243, %t1801
  %4652 = sext i32 %t813 to i64
  %4653 = getelementptr inbounds i16, i16* %read_input, i64 %4652
  %4654 = getelementptr inbounds i16, i16* %4653, i64 1
  %4655 = bitcast i16* %4654 to <16 x i16>*
  %4656 = load <16 x i16>, <16 x i16>* %4655, align 2, !tbaa !396
  %4657 = getelementptr inbounds i16, i16* %4653, i64 17
  %4658 = bitcast i16* %4657 to <16 x i16>*
  %4659 = load <16 x i16>, <16 x i16>* %4658, align 2, !tbaa !396
  %4660 = bitcast i16* %4653 to <16 x i16>*
  %4661 = load <16 x i16>, <16 x i16>* %4660, align 2, !tbaa !396
  %4662 = getelementptr inbounds i16, i16* %4653, i64 16
  %4663 = bitcast i16* %4662 to <16 x i16>*
  %4664 = load <16 x i16>, <16 x i16>* %4663, align 2, !tbaa !396
  %4665 = getelementptr inbounds i16, i16* %4653, i64 2
  %4666 = bitcast i16* %4665 to <16 x i16>*
  %4667 = load <16 x i16>, <16 x i16>* %4666, align 2, !tbaa !396
  %4668 = getelementptr inbounds i16, i16* %4653, i64 18
  %4669 = bitcast i16* %4668 to <16 x i16>*
  %4670 = load <16 x i16>, <16 x i16>* %4669, align 2, !tbaa !396
  %4671 = getelementptr inbounds i16, i16* %4653, i64 4
  %4672 = bitcast i16* %4671 to <16 x i16>*
  %4673 = load <16 x i16>, <16 x i16>* %4672, align 2, !tbaa !396
  %4674 = getelementptr inbounds i16, i16* %4653, i64 20
  %4675 = bitcast i16* %4674 to <16 x i16>*
  %4676 = load <16 x i16>, <16 x i16>* %4675, align 2, !tbaa !396
  %4677 = getelementptr inbounds i16, i16* %4653, i64 3
  %4678 = bitcast i16* %4677 to <16 x i16>*
  %4679 = load <16 x i16>, <16 x i16>* %4678, align 2, !tbaa !396
  %4680 = getelementptr inbounds i16, i16* %4653, i64 19
  %4681 = bitcast i16* %4680 to <16 x i16>*
  %4682 = load <16 x i16>, <16 x i16>* %4681, align 2, !tbaa !396
  %4683 = add <16 x i16> %4661, %4656
  %4684 = add <16 x i16> %4683, %4667
  %4685 = add <16 x i16> %4684, %4673
  %4686 = add <16 x i16> %4685, %4679
  %4687 = add <16 x i16> %4664, %4659
  %4688 = add <16 x i16> %4687, %4670
  %4689 = add <16 x i16> %4688, %4676
  %4690 = add <16 x i16> %4689, %4682
  %4691 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4686, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4692 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4690, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4693 = shufflevector <16 x i16> %4691, <16 x i16> %4692, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4694 = lshr <32 x i16> %4693, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4695 = shufflevector <32 x i16> %4694, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4696 = sext i32 %blur_x.s0.x.v1.base.s243 to i64
  %4697 = add nsw i64 %4696, %4521
  %4698 = getelementptr inbounds i16, i16* %blur_x, i64 %4697
  %4699 = bitcast i16* %4698 to <16 x i16>*
  store <16 x i16> %4695, <16 x i16>* %4699, align 2, !tbaa !399
  %4700 = shufflevector <32 x i16> %4694, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4701 = getelementptr inbounds i16, i16* %4698, i64 16
  %4702 = bitcast i16* %4701 to <16 x i16>*
  store <16 x i16> %4700, <16 x i16>* %4702, align 2, !tbaa !399
  br label %"consume blur_x244"

"consume blur_x244":                              ; preds = %"for blur_y.s0.x.x.rebased236", %"produce blur_x242"
  %4703 = sext i32 %b153 to i64
  %4704 = add nsw i64 %4524, %4703
  %4705 = getelementptr inbounds i16, i16* %blur_x, i64 %4704
  %4706 = bitcast i16* %4705 to <16 x i16>*
  %4707 = load <16 x i16>, <16 x i16>* %4706, align 2, !tbaa !399
  %4708 = getelementptr inbounds i16, i16* %4705, i64 16
  %4709 = bitcast i16* %4708 to <16 x i16>*
  %4710 = load <16 x i16>, <16 x i16>* %4709, align 2, !tbaa !399
  %4711 = add nsw i64 %4527, %4703
  %4712 = getelementptr inbounds i16, i16* %blur_x, i64 %4711
  %4713 = bitcast i16* %4712 to <16 x i16>*
  %4714 = load <16 x i16>, <16 x i16>* %4713, align 2, !tbaa !399
  %4715 = getelementptr inbounds i16, i16* %4712, i64 16
  %4716 = bitcast i16* %4715 to <16 x i16>*
  %4717 = load <16 x i16>, <16 x i16>* %4716, align 2, !tbaa !399
  %4718 = add nsw i64 %4530, %4703
  %4719 = getelementptr inbounds i16, i16* %blur_x, i64 %4718
  %4720 = bitcast i16* %4719 to <16 x i16>*
  %4721 = load <16 x i16>, <16 x i16>* %4720, align 2, !tbaa !399
  %4722 = getelementptr inbounds i16, i16* %4719, i64 16
  %4723 = bitcast i16* %4722 to <16 x i16>*
  %4724 = load <16 x i16>, <16 x i16>* %4723, align 2, !tbaa !399
  %4725 = add nsw i64 %4533, %4703
  %4726 = getelementptr inbounds i16, i16* %blur_x, i64 %4725
  %4727 = bitcast i16* %4726 to <16 x i16>*
  %4728 = load <16 x i16>, <16 x i16>* %4727, align 2, !tbaa !399
  %4729 = getelementptr inbounds i16, i16* %4726, i64 16
  %4730 = bitcast i16* %4729 to <16 x i16>*
  %4731 = load <16 x i16>, <16 x i16>* %4730, align 2, !tbaa !399
  %4732 = add nsw i64 %4536, %4703
  %4733 = getelementptr inbounds i16, i16* %blur_x, i64 %4732
  %4734 = bitcast i16* %4733 to <16 x i16>*
  %4735 = load <16 x i16>, <16 x i16>* %4734, align 2, !tbaa !399
  %4736 = getelementptr inbounds i16, i16* %4733, i64 16
  %4737 = bitcast i16* %4736 to <16 x i16>*
  %4738 = load <16 x i16>, <16 x i16>* %4737, align 2, !tbaa !399
  %4739 = add <16 x i16> %4714, %4707
  %4740 = add <16 x i16> %4739, %4721
  %4741 = add <16 x i16> %4740, %4728
  %4742 = add <16 x i16> %4741, %4735
  %4743 = add <16 x i16> %4717, %4710
  %4744 = add <16 x i16> %4743, %4724
  %4745 = add <16 x i16> %4744, %4731
  %4746 = add <16 x i16> %4745, %4738
  %4747 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4742, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4748 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4746, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4749 = shufflevector <16 x i16> %4747, <16 x i16> %4748, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4750 = lshr <32 x i16> %4749, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4751 = shufflevector <32 x i16> %4750, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4752 = add nsw i64 %4540, %4703
  %4753 = getelementptr inbounds i16, i16* %66, i64 %4752
  %4754 = bitcast i16* %4753 to <16 x i16>*
  store <16 x i16> %4751, <16 x i16>* %4754, align 2, !tbaa !401
  %4755 = shufflevector <32 x i16> %4750, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4756 = getelementptr inbounds i16, i16* %4753, i64 16
  %4757 = bitcast i16* %4756 to <16 x i16>*
  store <16 x i16> %4755, <16 x i16>* %4757, align 2, !tbaa !401
  %4758 = add nuw nsw i32 %blur_y.s0.x.x.rebased238, 1
  %.not2677 = icmp eq i32 %4758, %t1683
  br i1 %.not2677, label %"end for blur_y.s0.x.x.rebased237", label %"for blur_y.s0.x.x.rebased236"

after_bb245:                                      ; preds = %"end for blur_y.s0.x.x.rebased237", %"produce blur_x248"
  br i1 %100, label %"for blur_y.s0.x.x.rebased250.preheader", label %"end for blur_y.s0.x.x.rebased251", !prof !386

"for blur_y.s0.x.x.rebased250.preheader":         ; preds = %after_bb245
  %4759 = sext i32 %t1700 to i64
  %4760 = zext i32 %.pre-phi to i64
  %4761 = mul nsw i64 %4760, %112
  %4762 = sub nsw i64 %4761, %96
  %4763 = zext i32 %.pre-phi3408 to i64
  %4764 = mul nsw i64 %4763, %112
  %4765 = sub nsw i64 %4764, %96
  %4766 = zext i32 %.pre-phi3378 to i64
  %4767 = mul nsw i64 %4766, %112
  %4768 = sub nsw i64 %4767, %96
  %4769 = zext i32 %.pre-phi3386 to i64
  %4770 = mul nsw i64 %4769, %112
  %4771 = sub nsw i64 %4770, %96
  %4772 = zext i32 %.pre-phi3382 to i64
  %4773 = mul nsw i64 %4772, %112
  %4774 = sub nsw i64 %4773, %96
  %4775 = sext i32 %a26 to i64
  %4776 = add nsw i64 %4775, 7
  %4777 = mul nsw i64 %4776, %113
  %4778 = add nsw i64 %4777, %116
  br label %"for blur_y.s0.x.x.rebased250"

"produce blur_x248":                              ; preds = %"end for blur_y.s0.x.x.rebased237"
  %4779 = getelementptr inbounds i16, i16* %read_input, i64 %129
  %4780 = getelementptr inbounds i16, i16* %4779, i64 -31
  %4781 = bitcast i16* %4780 to <16 x i16>*
  %4782 = load <16 x i16>, <16 x i16>* %4781, align 2, !tbaa !396
  %4783 = getelementptr inbounds i16, i16* %4779, i64 -15
  %4784 = bitcast i16* %4783 to <16 x i16>*
  %4785 = load <16 x i16>, <16 x i16>* %4784, align 2, !tbaa !396
  %4786 = getelementptr inbounds i16, i16* %4779, i64 -32
  %4787 = bitcast i16* %4786 to <16 x i16>*
  %4788 = load <16 x i16>, <16 x i16>* %4787, align 2, !tbaa !396
  %4789 = getelementptr inbounds i16, i16* %4779, i64 -16
  %4790 = bitcast i16* %4789 to <16 x i16>*
  %4791 = load <16 x i16>, <16 x i16>* %4790, align 2, !tbaa !396
  %4792 = getelementptr inbounds i16, i16* %4779, i64 -30
  %4793 = bitcast i16* %4792 to <16 x i16>*
  %4794 = load <16 x i16>, <16 x i16>* %4793, align 2, !tbaa !396
  %4795 = getelementptr inbounds i16, i16* %4779, i64 -14
  %4796 = bitcast i16* %4795 to <16 x i16>*
  %4797 = load <16 x i16>, <16 x i16>* %4796, align 2, !tbaa !396
  %4798 = getelementptr inbounds i16, i16* %4779, i64 -28
  %4799 = bitcast i16* %4798 to <16 x i16>*
  %4800 = load <16 x i16>, <16 x i16>* %4799, align 2, !tbaa !396
  %4801 = getelementptr inbounds i16, i16* %4779, i64 -12
  %4802 = bitcast i16* %4801 to <16 x i16>*
  %4803 = load <16 x i16>, <16 x i16>* %4802, align 2, !tbaa !396
  %4804 = getelementptr inbounds i16, i16* %4779, i64 -29
  %4805 = bitcast i16* %4804 to <16 x i16>*
  %4806 = load <16 x i16>, <16 x i16>* %4805, align 2, !tbaa !396
  %4807 = getelementptr inbounds i16, i16* %4779, i64 -13
  %4808 = bitcast i16* %4807 to <16 x i16>*
  %4809 = load <16 x i16>, <16 x i16>* %4808, align 2, !tbaa !396
  %4810 = add <16 x i16> %4788, %4782
  %4811 = add <16 x i16> %4810, %4794
  %4812 = add <16 x i16> %4811, %4800
  %4813 = add <16 x i16> %4812, %4806
  %4814 = add <16 x i16> %4791, %4785
  %4815 = add <16 x i16> %4814, %4797
  %4816 = add <16 x i16> %4815, %4803
  %4817 = add <16 x i16> %4816, %4809
  %4818 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4813, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4819 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4817, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4820 = shufflevector <16 x i16> %4818, <16 x i16> %4819, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4821 = lshr <32 x i16> %4820, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4822 = shufflevector <32 x i16> %4821, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4823 = zext i32 %.pre-phi3386 to i64
  %4824 = mul nsw i64 %97, %4823
  %4825 = add nsw i64 %99, %4824
  %4826 = getelementptr inbounds i16, i16* %blur_x, i64 %4825
  %4827 = getelementptr inbounds i16, i16* %4826, i64 -32
  %4828 = bitcast i16* %4827 to <16 x i16>*
  store <16 x i16> %4822, <16 x i16>* %4828, align 2, !tbaa !399
  %4829 = shufflevector <32 x i16> %4821, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4830 = getelementptr inbounds i16, i16* %4826, i64 -16
  %4831 = bitcast i16* %4830 to <16 x i16>*
  store <16 x i16> %4829, <16 x i16>* %4831, align 2, !tbaa !399
  %4832 = zext i32 %.pre-phi to i64
  %4833 = mul nsw i64 %4832, %112
  %4834 = add nsw i64 %4833, %94
  %4835 = getelementptr inbounds i16, i16* %blur_x, i64 %4834
  %4836 = getelementptr inbounds i16, i16* %4835, i64 -32
  %4837 = bitcast i16* %4836 to <16 x i16>*
  %4838 = load <16 x i16>, <16 x i16>* %4837, align 2, !tbaa !399
  %4839 = getelementptr inbounds i16, i16* %4835, i64 -16
  %4840 = bitcast i16* %4839 to <16 x i16>*
  %4841 = load <16 x i16>, <16 x i16>* %4840, align 2, !tbaa !399
  %4842 = zext i32 %.pre-phi3408 to i64
  %4843 = mul nsw i64 %4842, %112
  %4844 = add nsw i64 %4843, %94
  %4845 = getelementptr inbounds i16, i16* %blur_x, i64 %4844
  %4846 = getelementptr inbounds i16, i16* %4845, i64 -32
  %4847 = bitcast i16* %4846 to <16 x i16>*
  %4848 = load <16 x i16>, <16 x i16>* %4847, align 2, !tbaa !399
  %4849 = getelementptr inbounds i16, i16* %4845, i64 -16
  %4850 = bitcast i16* %4849 to <16 x i16>*
  %4851 = load <16 x i16>, <16 x i16>* %4850, align 2, !tbaa !399
  %4852 = zext i32 %.pre-phi3378 to i64
  %4853 = mul nsw i64 %4852, %112
  %4854 = add nsw i64 %4853, %94
  %4855 = getelementptr inbounds i16, i16* %blur_x, i64 %4854
  %4856 = getelementptr inbounds i16, i16* %4855, i64 -32
  %4857 = bitcast i16* %4856 to <16 x i16>*
  %4858 = load <16 x i16>, <16 x i16>* %4857, align 2, !tbaa !399
  %4859 = getelementptr inbounds i16, i16* %4855, i64 -16
  %4860 = bitcast i16* %4859 to <16 x i16>*
  %4861 = load <16 x i16>, <16 x i16>* %4860, align 2, !tbaa !399
  %4862 = mul nsw i64 %4823, %112
  %4863 = add nsw i64 %4862, %94
  %4864 = getelementptr inbounds i16, i16* %blur_x, i64 %4863
  %4865 = getelementptr inbounds i16, i16* %4864, i64 -32
  %4866 = bitcast i16* %4865 to <16 x i16>*
  %4867 = load <16 x i16>, <16 x i16>* %4866, align 2, !tbaa !399
  %4868 = getelementptr inbounds i16, i16* %4864, i64 -16
  %4869 = bitcast i16* %4868 to <16 x i16>*
  %4870 = load <16 x i16>, <16 x i16>* %4869, align 2, !tbaa !399
  %4871 = zext i32 %.pre-phi3382 to i64
  %4872 = mul nsw i64 %4871, %112
  %4873 = add nsw i64 %4872, %94
  %4874 = getelementptr inbounds i16, i16* %blur_x, i64 %4873
  %4875 = getelementptr inbounds i16, i16* %4874, i64 -32
  %4876 = bitcast i16* %4875 to <16 x i16>*
  %4877 = load <16 x i16>, <16 x i16>* %4876, align 2, !tbaa !399
  %4878 = getelementptr inbounds i16, i16* %4874, i64 -16
  %4879 = bitcast i16* %4878 to <16 x i16>*
  %4880 = load <16 x i16>, <16 x i16>* %4879, align 2, !tbaa !399
  %4881 = add <16 x i16> %4848, %4838
  %4882 = add <16 x i16> %4881, %4858
  %4883 = add <16 x i16> %4882, %4867
  %4884 = add <16 x i16> %4883, %4877
  %4885 = add <16 x i16> %4851, %4841
  %4886 = add <16 x i16> %4885, %4861
  %4887 = add <16 x i16> %4886, %4870
  %4888 = add <16 x i16> %4887, %4880
  %4889 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4884, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4890 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4888, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4891 = shufflevector <16 x i16> %4889, <16 x i16> %4890, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4892 = lshr <32 x i16> %4891, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4893 = shufflevector <32 x i16> %4892, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4894 = sext i32 %a26 to i64
  %4895 = add nsw i64 %4894, 7
  %4896 = mul nsw i64 %4895, %113
  %4897 = add nsw i64 %115, %4896
  %4898 = getelementptr inbounds i16, i16* %66, i64 %4897
  %4899 = getelementptr inbounds i16, i16* %4898, i64 -32
  %4900 = bitcast i16* %4899 to <16 x i16>*
  store <16 x i16> %4893, <16 x i16>* %4900, align 2, !tbaa !401
  %4901 = shufflevector <32 x i16> %4892, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4902 = getelementptr inbounds i16, i16* %4898, i64 -16
  %4903 = bitcast i16* %4902 to <16 x i16>*
  store <16 x i16> %4901, <16 x i16>* %4903, align 2, !tbaa !401
  br label %after_bb245

"for blur_y.s0.x.x.rebased250":                   ; preds = %"for blur_y.s0.x.x.rebased250.preheader", %"consume blur_x257"
  %indvars.iv3176 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased250.preheader" ], [ %indvars.iv.next3177, %"consume blur_x257" ]
  %4904 = add nsw i64 %indvars.iv3176, %101
  %4905 = icmp slt i64 %4904, 1
  %4906 = trunc i64 %4904 to i32
  %4907 = shl nsw i32 %4906, 5
  %4908 = icmp sgt i32 %4, %4907
  %4909 = or i1 %4905, %4908
  br i1 %4909, label %"produce blur_x256", label %"for blur_y.s0.x.x.rebased250.consume blur_x257_crit_edge"

"for blur_y.s0.x.x.rebased250.consume blur_x257_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased250"
  %.pre3417 = shl nsw i64 %4904, 5
  br label %"consume blur_x257"

"end for blur_y.s0.x.x.rebased251":               ; preds = %"consume blur_x257", %after_bb245
  br i1 %102, label %"for blur_y.s0.x.x.rebased258.preheader", label %"end for blur_y.s0.x.x.rebased259", !prof !386

"for blur_y.s0.x.x.rebased258.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased251"
  %4910 = sext i32 %t1700 to i64
  %4911 = zext i32 %.pre-phi to i64
  %4912 = mul nsw i64 %4911, %112
  %4913 = sub nsw i64 %4912, %96
  %4914 = zext i32 %.pre-phi3408 to i64
  %4915 = mul nsw i64 %4914, %112
  %4916 = sub nsw i64 %4915, %96
  %4917 = zext i32 %.pre-phi3378 to i64
  %4918 = mul nsw i64 %4917, %112
  %4919 = sub nsw i64 %4918, %96
  %4920 = zext i32 %.pre-phi3386 to i64
  %4921 = mul nsw i64 %4920, %112
  %4922 = sub nsw i64 %4921, %96
  %4923 = zext i32 %.pre-phi3382 to i64
  %4924 = mul nsw i64 %4923, %112
  %4925 = sub nsw i64 %4924, %96
  %4926 = sext i32 %a26 to i64
  %4927 = add nsw i64 %4926, 7
  %4928 = mul nsw i64 %4927, %113
  %4929 = add nsw i64 %4928, %116
  br label %"for blur_y.s0.x.x.rebased258"

"produce blur_x256":                              ; preds = %"for blur_y.s0.x.x.rebased250"
  %t824 = add nsw i32 %4907, %t1817
  %4930 = sext i32 %t824 to i64
  %4931 = getelementptr inbounds i16, i16* %read_input, i64 %4930
  %4932 = getelementptr inbounds i16, i16* %4931, i64 1
  %4933 = bitcast i16* %4932 to <16 x i16>*
  %4934 = load <16 x i16>, <16 x i16>* %4933, align 2, !tbaa !396
  %4935 = getelementptr inbounds i16, i16* %4931, i64 17
  %4936 = bitcast i16* %4935 to <16 x i16>*
  %4937 = load <16 x i16>, <16 x i16>* %4936, align 2, !tbaa !396
  %4938 = bitcast i16* %4931 to <16 x i16>*
  %4939 = load <16 x i16>, <16 x i16>* %4938, align 2, !tbaa !396
  %4940 = getelementptr inbounds i16, i16* %4931, i64 16
  %4941 = bitcast i16* %4940 to <16 x i16>*
  %4942 = load <16 x i16>, <16 x i16>* %4941, align 2, !tbaa !396
  %4943 = getelementptr inbounds i16, i16* %4931, i64 2
  %4944 = bitcast i16* %4943 to <16 x i16>*
  %4945 = load <16 x i16>, <16 x i16>* %4944, align 2, !tbaa !396
  %4946 = getelementptr inbounds i16, i16* %4931, i64 18
  %4947 = bitcast i16* %4946 to <16 x i16>*
  %4948 = load <16 x i16>, <16 x i16>* %4947, align 2, !tbaa !396
  %4949 = getelementptr inbounds i16, i16* %4931, i64 4
  %4950 = bitcast i16* %4949 to <16 x i16>*
  %4951 = load <16 x i16>, <16 x i16>* %4950, align 2, !tbaa !396
  %4952 = getelementptr inbounds i16, i16* %4931, i64 20
  %4953 = bitcast i16* %4952 to <16 x i16>*
  %4954 = load <16 x i16>, <16 x i16>* %4953, align 2, !tbaa !396
  %4955 = getelementptr inbounds i16, i16* %4931, i64 3
  %4956 = bitcast i16* %4955 to <16 x i16>*
  %4957 = load <16 x i16>, <16 x i16>* %4956, align 2, !tbaa !396
  %4958 = getelementptr inbounds i16, i16* %4931, i64 19
  %4959 = bitcast i16* %4958 to <16 x i16>*
  %4960 = load <16 x i16>, <16 x i16>* %4959, align 2, !tbaa !396
  %4961 = add <16 x i16> %4939, %4934
  %4962 = add <16 x i16> %4961, %4945
  %4963 = add <16 x i16> %4962, %4951
  %4964 = add <16 x i16> %4963, %4957
  %4965 = add <16 x i16> %4942, %4937
  %4966 = add <16 x i16> %4965, %4948
  %4967 = add <16 x i16> %4966, %4954
  %4968 = add <16 x i16> %4967, %4960
  %4969 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4964, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4970 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4968, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %4971 = shufflevector <16 x i16> %4969, <16 x i16> %4970, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4972 = lshr <32 x i16> %4971, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %4973 = shufflevector <32 x i16> %4972, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4974 = shl nsw i64 %4904, 5
  %4975 = add nsw i64 %4974, %4759
  %4976 = getelementptr inbounds i16, i16* %blur_x, i64 %4975
  %4977 = bitcast i16* %4976 to <16 x i16>*
  store <16 x i16> %4973, <16 x i16>* %4977, align 2, !tbaa !399
  %4978 = shufflevector <32 x i16> %4972, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4979 = getelementptr inbounds i16, i16* %4976, i64 16
  %4980 = bitcast i16* %4979 to <16 x i16>*
  store <16 x i16> %4978, <16 x i16>* %4980, align 2, !tbaa !399
  br label %"consume blur_x257"

"consume blur_x257":                              ; preds = %"for blur_y.s0.x.x.rebased250.consume blur_x257_crit_edge", %"produce blur_x256"
  %.pre-phi3418 = phi i64 [ %.pre3417, %"for blur_y.s0.x.x.rebased250.consume blur_x257_crit_edge" ], [ %4974, %"produce blur_x256" ]
  %4981 = add nsw i64 %4762, %.pre-phi3418
  %4982 = getelementptr inbounds i16, i16* %blur_x, i64 %4981
  %4983 = bitcast i16* %4982 to <16 x i16>*
  %4984 = load <16 x i16>, <16 x i16>* %4983, align 2, !tbaa !399
  %4985 = getelementptr inbounds i16, i16* %4982, i64 16
  %4986 = bitcast i16* %4985 to <16 x i16>*
  %4987 = load <16 x i16>, <16 x i16>* %4986, align 2, !tbaa !399
  %4988 = add nsw i64 %4765, %.pre-phi3418
  %4989 = getelementptr inbounds i16, i16* %blur_x, i64 %4988
  %4990 = bitcast i16* %4989 to <16 x i16>*
  %4991 = load <16 x i16>, <16 x i16>* %4990, align 2, !tbaa !399
  %4992 = getelementptr inbounds i16, i16* %4989, i64 16
  %4993 = bitcast i16* %4992 to <16 x i16>*
  %4994 = load <16 x i16>, <16 x i16>* %4993, align 2, !tbaa !399
  %4995 = add nsw i64 %4768, %.pre-phi3418
  %4996 = getelementptr inbounds i16, i16* %blur_x, i64 %4995
  %4997 = bitcast i16* %4996 to <16 x i16>*
  %4998 = load <16 x i16>, <16 x i16>* %4997, align 2, !tbaa !399
  %4999 = getelementptr inbounds i16, i16* %4996, i64 16
  %5000 = bitcast i16* %4999 to <16 x i16>*
  %5001 = load <16 x i16>, <16 x i16>* %5000, align 2, !tbaa !399
  %5002 = add nsw i64 %4771, %.pre-phi3418
  %5003 = getelementptr inbounds i16, i16* %blur_x, i64 %5002
  %5004 = bitcast i16* %5003 to <16 x i16>*
  %5005 = load <16 x i16>, <16 x i16>* %5004, align 2, !tbaa !399
  %5006 = getelementptr inbounds i16, i16* %5003, i64 16
  %5007 = bitcast i16* %5006 to <16 x i16>*
  %5008 = load <16 x i16>, <16 x i16>* %5007, align 2, !tbaa !399
  %5009 = add nsw i64 %4774, %.pre-phi3418
  %5010 = getelementptr inbounds i16, i16* %blur_x, i64 %5009
  %5011 = bitcast i16* %5010 to <16 x i16>*
  %5012 = load <16 x i16>, <16 x i16>* %5011, align 2, !tbaa !399
  %5013 = getelementptr inbounds i16, i16* %5010, i64 16
  %5014 = bitcast i16* %5013 to <16 x i16>*
  %5015 = load <16 x i16>, <16 x i16>* %5014, align 2, !tbaa !399
  %5016 = add <16 x i16> %4991, %4984
  %5017 = add <16 x i16> %5016, %4998
  %5018 = add <16 x i16> %5017, %5005
  %5019 = add <16 x i16> %5018, %5012
  %5020 = add <16 x i16> %4994, %4987
  %5021 = add <16 x i16> %5020, %5001
  %5022 = add <16 x i16> %5021, %5008
  %5023 = add <16 x i16> %5022, %5015
  %5024 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5019, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5025 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5023, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5026 = shufflevector <16 x i16> %5024, <16 x i16> %5025, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5027 = lshr <32 x i16> %5026, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5028 = shufflevector <32 x i16> %5027, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5029 = add nsw i64 %4778, %.pre-phi3418
  %5030 = getelementptr inbounds i16, i16* %66, i64 %5029
  %5031 = bitcast i16* %5030 to <16 x i16>*
  store <16 x i16> %5028, <16 x i16>* %5031, align 2, !tbaa !401
  %5032 = shufflevector <32 x i16> %5027, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5033 = getelementptr inbounds i16, i16* %5030, i64 16
  %5034 = bitcast i16* %5033 to <16 x i16>*
  store <16 x i16> %5032, <16 x i16>* %5034, align 2, !tbaa !401
  %indvars.iv.next3177 = add nuw nsw i64 %indvars.iv3176, 1
  %.not2676 = icmp eq i64 %indvars.iv.next3177, %184
  br i1 %.not2676, label %"end for blur_y.s0.x.x.rebased251", label %"for blur_y.s0.x.x.rebased250"

"for blur_y.s0.x.x.rebased258":                   ; preds = %"for blur_y.s0.x.x.rebased258.preheader", %"consume blur_x266"
  %blur_y.s0.x.x.rebased260 = phi i32 [ %5147, %"consume blur_x266" ], [ 0, %"for blur_y.s0.x.x.rebased258.preheader" ]
  %5035 = add nsw i32 %blur_y.s0.x.x.rebased260, %t1626
  %a154 = shl nsw i32 %5035, 5
  %5036 = icmp sgt i32 %a14, %a154
  %b160 = select i1 %5036, i32 %a154, i32 %a14
  %5037 = icmp slt i32 %5035, 1
  %5038 = icmp sgt i32 %4, %a154
  %5039 = or i1 %5037, %5038
  br i1 %5039, label %"produce blur_x264", label %"consume blur_x266"

"end for blur_y.s0.x.x.rebased259":               ; preds = %"consume blur_x266", %"end for blur_y.s0.x.x.rebased251"
  br i1 %34, label %"produce blur_x270", label %after_bb267

"produce blur_x264":                              ; preds = %"for blur_y.s0.x.x.rebased258"
  %5040 = icmp slt i32 %b160, %4
  %blur_x.s0.x.v1.base.s265 = select i1 %5040, i32 %b160, i32 %4
  %t829 = add nsw i32 %blur_x.s0.x.v1.base.s265, %t1817
  %5041 = sext i32 %t829 to i64
  %5042 = getelementptr inbounds i16, i16* %read_input, i64 %5041
  %5043 = getelementptr inbounds i16, i16* %5042, i64 1
  %5044 = bitcast i16* %5043 to <16 x i16>*
  %5045 = load <16 x i16>, <16 x i16>* %5044, align 2, !tbaa !396
  %5046 = getelementptr inbounds i16, i16* %5042, i64 17
  %5047 = bitcast i16* %5046 to <16 x i16>*
  %5048 = load <16 x i16>, <16 x i16>* %5047, align 2, !tbaa !396
  %5049 = bitcast i16* %5042 to <16 x i16>*
  %5050 = load <16 x i16>, <16 x i16>* %5049, align 2, !tbaa !396
  %5051 = getelementptr inbounds i16, i16* %5042, i64 16
  %5052 = bitcast i16* %5051 to <16 x i16>*
  %5053 = load <16 x i16>, <16 x i16>* %5052, align 2, !tbaa !396
  %5054 = getelementptr inbounds i16, i16* %5042, i64 2
  %5055 = bitcast i16* %5054 to <16 x i16>*
  %5056 = load <16 x i16>, <16 x i16>* %5055, align 2, !tbaa !396
  %5057 = getelementptr inbounds i16, i16* %5042, i64 18
  %5058 = bitcast i16* %5057 to <16 x i16>*
  %5059 = load <16 x i16>, <16 x i16>* %5058, align 2, !tbaa !396
  %5060 = getelementptr inbounds i16, i16* %5042, i64 4
  %5061 = bitcast i16* %5060 to <16 x i16>*
  %5062 = load <16 x i16>, <16 x i16>* %5061, align 2, !tbaa !396
  %5063 = getelementptr inbounds i16, i16* %5042, i64 20
  %5064 = bitcast i16* %5063 to <16 x i16>*
  %5065 = load <16 x i16>, <16 x i16>* %5064, align 2, !tbaa !396
  %5066 = getelementptr inbounds i16, i16* %5042, i64 3
  %5067 = bitcast i16* %5066 to <16 x i16>*
  %5068 = load <16 x i16>, <16 x i16>* %5067, align 2, !tbaa !396
  %5069 = getelementptr inbounds i16, i16* %5042, i64 19
  %5070 = bitcast i16* %5069 to <16 x i16>*
  %5071 = load <16 x i16>, <16 x i16>* %5070, align 2, !tbaa !396
  %5072 = add <16 x i16> %5050, %5045
  %5073 = add <16 x i16> %5072, %5056
  %5074 = add <16 x i16> %5073, %5062
  %5075 = add <16 x i16> %5074, %5068
  %5076 = add <16 x i16> %5053, %5048
  %5077 = add <16 x i16> %5076, %5059
  %5078 = add <16 x i16> %5077, %5065
  %5079 = add <16 x i16> %5078, %5071
  %5080 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5075, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5081 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5079, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5082 = shufflevector <16 x i16> %5080, <16 x i16> %5081, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5083 = lshr <32 x i16> %5082, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5084 = shufflevector <32 x i16> %5083, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5085 = sext i32 %blur_x.s0.x.v1.base.s265 to i64
  %5086 = add nsw i64 %5085, %4910
  %5087 = getelementptr inbounds i16, i16* %blur_x, i64 %5086
  %5088 = bitcast i16* %5087 to <16 x i16>*
  store <16 x i16> %5084, <16 x i16>* %5088, align 2, !tbaa !399
  %5089 = shufflevector <32 x i16> %5083, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5090 = getelementptr inbounds i16, i16* %5087, i64 16
  %5091 = bitcast i16* %5090 to <16 x i16>*
  store <16 x i16> %5089, <16 x i16>* %5091, align 2, !tbaa !399
  br label %"consume blur_x266"

"consume blur_x266":                              ; preds = %"for blur_y.s0.x.x.rebased258", %"produce blur_x264"
  %5092 = sext i32 %b160 to i64
  %5093 = add nsw i64 %4913, %5092
  %5094 = getelementptr inbounds i16, i16* %blur_x, i64 %5093
  %5095 = bitcast i16* %5094 to <16 x i16>*
  %5096 = load <16 x i16>, <16 x i16>* %5095, align 2, !tbaa !399
  %5097 = getelementptr inbounds i16, i16* %5094, i64 16
  %5098 = bitcast i16* %5097 to <16 x i16>*
  %5099 = load <16 x i16>, <16 x i16>* %5098, align 2, !tbaa !399
  %5100 = add nsw i64 %4916, %5092
  %5101 = getelementptr inbounds i16, i16* %blur_x, i64 %5100
  %5102 = bitcast i16* %5101 to <16 x i16>*
  %5103 = load <16 x i16>, <16 x i16>* %5102, align 2, !tbaa !399
  %5104 = getelementptr inbounds i16, i16* %5101, i64 16
  %5105 = bitcast i16* %5104 to <16 x i16>*
  %5106 = load <16 x i16>, <16 x i16>* %5105, align 2, !tbaa !399
  %5107 = add nsw i64 %4919, %5092
  %5108 = getelementptr inbounds i16, i16* %blur_x, i64 %5107
  %5109 = bitcast i16* %5108 to <16 x i16>*
  %5110 = load <16 x i16>, <16 x i16>* %5109, align 2, !tbaa !399
  %5111 = getelementptr inbounds i16, i16* %5108, i64 16
  %5112 = bitcast i16* %5111 to <16 x i16>*
  %5113 = load <16 x i16>, <16 x i16>* %5112, align 2, !tbaa !399
  %5114 = add nsw i64 %4922, %5092
  %5115 = getelementptr inbounds i16, i16* %blur_x, i64 %5114
  %5116 = bitcast i16* %5115 to <16 x i16>*
  %5117 = load <16 x i16>, <16 x i16>* %5116, align 2, !tbaa !399
  %5118 = getelementptr inbounds i16, i16* %5115, i64 16
  %5119 = bitcast i16* %5118 to <16 x i16>*
  %5120 = load <16 x i16>, <16 x i16>* %5119, align 2, !tbaa !399
  %5121 = add nsw i64 %4925, %5092
  %5122 = getelementptr inbounds i16, i16* %blur_x, i64 %5121
  %5123 = bitcast i16* %5122 to <16 x i16>*
  %5124 = load <16 x i16>, <16 x i16>* %5123, align 2, !tbaa !399
  %5125 = getelementptr inbounds i16, i16* %5122, i64 16
  %5126 = bitcast i16* %5125 to <16 x i16>*
  %5127 = load <16 x i16>, <16 x i16>* %5126, align 2, !tbaa !399
  %5128 = add <16 x i16> %5103, %5096
  %5129 = add <16 x i16> %5128, %5110
  %5130 = add <16 x i16> %5129, %5117
  %5131 = add <16 x i16> %5130, %5124
  %5132 = add <16 x i16> %5106, %5099
  %5133 = add <16 x i16> %5132, %5113
  %5134 = add <16 x i16> %5133, %5120
  %5135 = add <16 x i16> %5134, %5127
  %5136 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5131, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5137 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5135, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5138 = shufflevector <16 x i16> %5136, <16 x i16> %5137, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5139 = lshr <32 x i16> %5138, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5140 = shufflevector <32 x i16> %5139, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5141 = add nsw i64 %4929, %5092
  %5142 = getelementptr inbounds i16, i16* %66, i64 %5141
  %5143 = bitcast i16* %5142 to <16 x i16>*
  store <16 x i16> %5140, <16 x i16>* %5143, align 2, !tbaa !401
  %5144 = shufflevector <32 x i16> %5139, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5145 = getelementptr inbounds i16, i16* %5142, i64 16
  %5146 = bitcast i16* %5145 to <16 x i16>*
  store <16 x i16> %5144, <16 x i16>* %5146, align 2, !tbaa !401
  %5147 = add nuw nsw i32 %blur_y.s0.x.x.rebased260, 1
  %.not2675 = icmp eq i32 %5147, %t1683
  br i1 %.not2675, label %"end for blur_y.s0.x.x.rebased259", label %"for blur_y.s0.x.x.rebased258"

after_bb267:                                      ; preds = %"end for blur_y.s0.x.x.rebased259", %"produce blur_x270"
  br i1 %100, label %"for blur_y.s0.x.x.rebased272.preheader", label %"end for blur_y.s0.x.x.rebased273", !prof !386

"for blur_y.s0.x.x.rebased272.preheader":         ; preds = %after_bb267
  %5148 = sext i32 %t1706 to i64
  %5149 = zext i32 %.pre-phi3378 to i64
  %5150 = mul nsw i64 %5149, %112
  %5151 = sub nsw i64 %5150, %96
  %5152 = zext i32 %.pre-phi to i64
  %5153 = mul nsw i64 %5152, %112
  %5154 = sub nsw i64 %5153, %96
  %5155 = zext i32 %.pre-phi3382 to i64
  %5156 = mul nsw i64 %5155, %112
  %5157 = sub nsw i64 %5156, %96
  %5158 = zext i32 %.pre-phi3390 to i64
  %5159 = mul nsw i64 %5158, %112
  %5160 = sub nsw i64 %5159, %96
  %5161 = zext i32 %.pre-phi3386 to i64
  %5162 = mul nsw i64 %5161, %112
  %5163 = sub nsw i64 %5162, %96
  %5164 = sext i32 %a26 to i64
  %5165 = add nsw i64 %5164, 8
  %5166 = mul nsw i64 %5165, %113
  %5167 = add nsw i64 %5166, %116
  br label %"for blur_y.s0.x.x.rebased272"

"produce blur_x270":                              ; preds = %"end for blur_y.s0.x.x.rebased259"
  %5168 = getelementptr inbounds i16, i16* %read_input, i64 %131
  %5169 = getelementptr inbounds i16, i16* %5168, i64 -31
  %5170 = bitcast i16* %5169 to <16 x i16>*
  %5171 = load <16 x i16>, <16 x i16>* %5170, align 2, !tbaa !396
  %5172 = getelementptr inbounds i16, i16* %5168, i64 -15
  %5173 = bitcast i16* %5172 to <16 x i16>*
  %5174 = load <16 x i16>, <16 x i16>* %5173, align 2, !tbaa !396
  %5175 = getelementptr inbounds i16, i16* %5168, i64 -32
  %5176 = bitcast i16* %5175 to <16 x i16>*
  %5177 = load <16 x i16>, <16 x i16>* %5176, align 2, !tbaa !396
  %5178 = getelementptr inbounds i16, i16* %5168, i64 -16
  %5179 = bitcast i16* %5178 to <16 x i16>*
  %5180 = load <16 x i16>, <16 x i16>* %5179, align 2, !tbaa !396
  %5181 = getelementptr inbounds i16, i16* %5168, i64 -30
  %5182 = bitcast i16* %5181 to <16 x i16>*
  %5183 = load <16 x i16>, <16 x i16>* %5182, align 2, !tbaa !396
  %5184 = getelementptr inbounds i16, i16* %5168, i64 -14
  %5185 = bitcast i16* %5184 to <16 x i16>*
  %5186 = load <16 x i16>, <16 x i16>* %5185, align 2, !tbaa !396
  %5187 = getelementptr inbounds i16, i16* %5168, i64 -28
  %5188 = bitcast i16* %5187 to <16 x i16>*
  %5189 = load <16 x i16>, <16 x i16>* %5188, align 2, !tbaa !396
  %5190 = getelementptr inbounds i16, i16* %5168, i64 -12
  %5191 = bitcast i16* %5190 to <16 x i16>*
  %5192 = load <16 x i16>, <16 x i16>* %5191, align 2, !tbaa !396
  %5193 = getelementptr inbounds i16, i16* %5168, i64 -29
  %5194 = bitcast i16* %5193 to <16 x i16>*
  %5195 = load <16 x i16>, <16 x i16>* %5194, align 2, !tbaa !396
  %5196 = getelementptr inbounds i16, i16* %5168, i64 -13
  %5197 = bitcast i16* %5196 to <16 x i16>*
  %5198 = load <16 x i16>, <16 x i16>* %5197, align 2, !tbaa !396
  %5199 = add <16 x i16> %5177, %5171
  %5200 = add <16 x i16> %5199, %5183
  %5201 = add <16 x i16> %5200, %5189
  %5202 = add <16 x i16> %5201, %5195
  %5203 = add <16 x i16> %5180, %5174
  %5204 = add <16 x i16> %5203, %5186
  %5205 = add <16 x i16> %5204, %5192
  %5206 = add <16 x i16> %5205, %5198
  %5207 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5202, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5208 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5206, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5209 = shufflevector <16 x i16> %5207, <16 x i16> %5208, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5210 = lshr <32 x i16> %5209, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5211 = shufflevector <32 x i16> %5210, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5212 = zext i32 %.pre-phi3390 to i64
  %5213 = mul nsw i64 %97, %5212
  %5214 = add nsw i64 %99, %5213
  %5215 = getelementptr inbounds i16, i16* %blur_x, i64 %5214
  %5216 = getelementptr inbounds i16, i16* %5215, i64 -32
  %5217 = bitcast i16* %5216 to <16 x i16>*
  store <16 x i16> %5211, <16 x i16>* %5217, align 2, !tbaa !399
  %5218 = shufflevector <32 x i16> %5210, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5219 = getelementptr inbounds i16, i16* %5215, i64 -16
  %5220 = bitcast i16* %5219 to <16 x i16>*
  store <16 x i16> %5218, <16 x i16>* %5220, align 2, !tbaa !399
  %5221 = zext i32 %.pre-phi3378 to i64
  %5222 = mul nsw i64 %5221, %112
  %5223 = add nsw i64 %5222, %94
  %5224 = getelementptr inbounds i16, i16* %blur_x, i64 %5223
  %5225 = getelementptr inbounds i16, i16* %5224, i64 -32
  %5226 = bitcast i16* %5225 to <16 x i16>*
  %5227 = load <16 x i16>, <16 x i16>* %5226, align 2, !tbaa !399
  %5228 = getelementptr inbounds i16, i16* %5224, i64 -16
  %5229 = bitcast i16* %5228 to <16 x i16>*
  %5230 = load <16 x i16>, <16 x i16>* %5229, align 2, !tbaa !399
  %5231 = zext i32 %.pre-phi to i64
  %5232 = mul nsw i64 %5231, %112
  %5233 = add nsw i64 %5232, %94
  %5234 = getelementptr inbounds i16, i16* %blur_x, i64 %5233
  %5235 = getelementptr inbounds i16, i16* %5234, i64 -32
  %5236 = bitcast i16* %5235 to <16 x i16>*
  %5237 = load <16 x i16>, <16 x i16>* %5236, align 2, !tbaa !399
  %5238 = getelementptr inbounds i16, i16* %5234, i64 -16
  %5239 = bitcast i16* %5238 to <16 x i16>*
  %5240 = load <16 x i16>, <16 x i16>* %5239, align 2, !tbaa !399
  %5241 = zext i32 %.pre-phi3382 to i64
  %5242 = mul nsw i64 %5241, %112
  %5243 = add nsw i64 %5242, %94
  %5244 = getelementptr inbounds i16, i16* %blur_x, i64 %5243
  %5245 = getelementptr inbounds i16, i16* %5244, i64 -32
  %5246 = bitcast i16* %5245 to <16 x i16>*
  %5247 = load <16 x i16>, <16 x i16>* %5246, align 2, !tbaa !399
  %5248 = getelementptr inbounds i16, i16* %5244, i64 -16
  %5249 = bitcast i16* %5248 to <16 x i16>*
  %5250 = load <16 x i16>, <16 x i16>* %5249, align 2, !tbaa !399
  %5251 = mul nsw i64 %5212, %112
  %5252 = add nsw i64 %5251, %94
  %5253 = getelementptr inbounds i16, i16* %blur_x, i64 %5252
  %5254 = getelementptr inbounds i16, i16* %5253, i64 -32
  %5255 = bitcast i16* %5254 to <16 x i16>*
  %5256 = load <16 x i16>, <16 x i16>* %5255, align 2, !tbaa !399
  %5257 = getelementptr inbounds i16, i16* %5253, i64 -16
  %5258 = bitcast i16* %5257 to <16 x i16>*
  %5259 = load <16 x i16>, <16 x i16>* %5258, align 2, !tbaa !399
  %5260 = zext i32 %.pre-phi3386 to i64
  %5261 = mul nsw i64 %5260, %112
  %5262 = add nsw i64 %5261, %94
  %5263 = getelementptr inbounds i16, i16* %blur_x, i64 %5262
  %5264 = getelementptr inbounds i16, i16* %5263, i64 -32
  %5265 = bitcast i16* %5264 to <16 x i16>*
  %5266 = load <16 x i16>, <16 x i16>* %5265, align 2, !tbaa !399
  %5267 = getelementptr inbounds i16, i16* %5263, i64 -16
  %5268 = bitcast i16* %5267 to <16 x i16>*
  %5269 = load <16 x i16>, <16 x i16>* %5268, align 2, !tbaa !399
  %5270 = add <16 x i16> %5237, %5227
  %5271 = add <16 x i16> %5270, %5247
  %5272 = add <16 x i16> %5271, %5256
  %5273 = add <16 x i16> %5272, %5266
  %5274 = add <16 x i16> %5240, %5230
  %5275 = add <16 x i16> %5274, %5250
  %5276 = add <16 x i16> %5275, %5259
  %5277 = add <16 x i16> %5276, %5269
  %5278 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5273, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5279 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5277, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5280 = shufflevector <16 x i16> %5278, <16 x i16> %5279, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5281 = lshr <32 x i16> %5280, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5282 = shufflevector <32 x i16> %5281, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5283 = sext i32 %a26 to i64
  %5284 = add nsw i64 %5283, 8
  %5285 = mul nsw i64 %5284, %113
  %5286 = add nsw i64 %115, %5285
  %5287 = getelementptr inbounds i16, i16* %66, i64 %5286
  %5288 = getelementptr inbounds i16, i16* %5287, i64 -32
  %5289 = bitcast i16* %5288 to <16 x i16>*
  store <16 x i16> %5282, <16 x i16>* %5289, align 2, !tbaa !401
  %5290 = shufflevector <32 x i16> %5281, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5291 = getelementptr inbounds i16, i16* %5287, i64 -16
  %5292 = bitcast i16* %5291 to <16 x i16>*
  store <16 x i16> %5290, <16 x i16>* %5292, align 2, !tbaa !401
  br label %after_bb267

"for blur_y.s0.x.x.rebased272":                   ; preds = %"for blur_y.s0.x.x.rebased272.preheader", %"consume blur_x279"
  %indvars.iv3179 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased272.preheader" ], [ %indvars.iv.next3180, %"consume blur_x279" ]
  %5293 = add nsw i64 %indvars.iv3179, %101
  %5294 = icmp slt i64 %5293, 1
  %5295 = trunc i64 %5293 to i32
  %5296 = shl nsw i32 %5295, 5
  %5297 = icmp sgt i32 %4, %5296
  %5298 = or i1 %5294, %5297
  br i1 %5298, label %"produce blur_x278", label %"for blur_y.s0.x.x.rebased272.consume blur_x279_crit_edge"

"for blur_y.s0.x.x.rebased272.consume blur_x279_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased272"
  %.pre3419 = shl nsw i64 %5293, 5
  br label %"consume blur_x279"

"end for blur_y.s0.x.x.rebased273":               ; preds = %"consume blur_x279", %after_bb267
  br i1 %102, label %"for blur_y.s0.x.x.rebased280.preheader", label %"end for blur_y.s0.x.x.rebased281", !prof !386

"for blur_y.s0.x.x.rebased280.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased273"
  %5299 = sext i32 %t1706 to i64
  %5300 = zext i32 %.pre-phi3378 to i64
  %5301 = mul nsw i64 %5300, %112
  %5302 = sub nsw i64 %5301, %96
  %5303 = zext i32 %.pre-phi to i64
  %5304 = mul nsw i64 %5303, %112
  %5305 = sub nsw i64 %5304, %96
  %5306 = zext i32 %.pre-phi3382 to i64
  %5307 = mul nsw i64 %5306, %112
  %5308 = sub nsw i64 %5307, %96
  %5309 = zext i32 %.pre-phi3390 to i64
  %5310 = mul nsw i64 %5309, %112
  %5311 = sub nsw i64 %5310, %96
  %5312 = zext i32 %.pre-phi3386 to i64
  %5313 = mul nsw i64 %5312, %112
  %5314 = sub nsw i64 %5313, %96
  %5315 = sext i32 %a26 to i64
  %5316 = add nsw i64 %5315, 8
  %5317 = mul nsw i64 %5316, %113
  %5318 = add nsw i64 %5317, %116
  br label %"for blur_y.s0.x.x.rebased280"

"produce blur_x278":                              ; preds = %"for blur_y.s0.x.x.rebased272"
  %t840 = add nsw i32 %5296, %t1833
  %5319 = sext i32 %t840 to i64
  %5320 = getelementptr inbounds i16, i16* %read_input, i64 %5319
  %5321 = getelementptr inbounds i16, i16* %5320, i64 1
  %5322 = bitcast i16* %5321 to <16 x i16>*
  %5323 = load <16 x i16>, <16 x i16>* %5322, align 2, !tbaa !396
  %5324 = getelementptr inbounds i16, i16* %5320, i64 17
  %5325 = bitcast i16* %5324 to <16 x i16>*
  %5326 = load <16 x i16>, <16 x i16>* %5325, align 2, !tbaa !396
  %5327 = bitcast i16* %5320 to <16 x i16>*
  %5328 = load <16 x i16>, <16 x i16>* %5327, align 2, !tbaa !396
  %5329 = getelementptr inbounds i16, i16* %5320, i64 16
  %5330 = bitcast i16* %5329 to <16 x i16>*
  %5331 = load <16 x i16>, <16 x i16>* %5330, align 2, !tbaa !396
  %5332 = getelementptr inbounds i16, i16* %5320, i64 2
  %5333 = bitcast i16* %5332 to <16 x i16>*
  %5334 = load <16 x i16>, <16 x i16>* %5333, align 2, !tbaa !396
  %5335 = getelementptr inbounds i16, i16* %5320, i64 18
  %5336 = bitcast i16* %5335 to <16 x i16>*
  %5337 = load <16 x i16>, <16 x i16>* %5336, align 2, !tbaa !396
  %5338 = getelementptr inbounds i16, i16* %5320, i64 4
  %5339 = bitcast i16* %5338 to <16 x i16>*
  %5340 = load <16 x i16>, <16 x i16>* %5339, align 2, !tbaa !396
  %5341 = getelementptr inbounds i16, i16* %5320, i64 20
  %5342 = bitcast i16* %5341 to <16 x i16>*
  %5343 = load <16 x i16>, <16 x i16>* %5342, align 2, !tbaa !396
  %5344 = getelementptr inbounds i16, i16* %5320, i64 3
  %5345 = bitcast i16* %5344 to <16 x i16>*
  %5346 = load <16 x i16>, <16 x i16>* %5345, align 2, !tbaa !396
  %5347 = getelementptr inbounds i16, i16* %5320, i64 19
  %5348 = bitcast i16* %5347 to <16 x i16>*
  %5349 = load <16 x i16>, <16 x i16>* %5348, align 2, !tbaa !396
  %5350 = add <16 x i16> %5328, %5323
  %5351 = add <16 x i16> %5350, %5334
  %5352 = add <16 x i16> %5351, %5340
  %5353 = add <16 x i16> %5352, %5346
  %5354 = add <16 x i16> %5331, %5326
  %5355 = add <16 x i16> %5354, %5337
  %5356 = add <16 x i16> %5355, %5343
  %5357 = add <16 x i16> %5356, %5349
  %5358 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5353, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5359 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5357, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5360 = shufflevector <16 x i16> %5358, <16 x i16> %5359, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5361 = lshr <32 x i16> %5360, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5362 = shufflevector <32 x i16> %5361, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5363 = shl nsw i64 %5293, 5
  %5364 = add nsw i64 %5363, %5148
  %5365 = getelementptr inbounds i16, i16* %blur_x, i64 %5364
  %5366 = bitcast i16* %5365 to <16 x i16>*
  store <16 x i16> %5362, <16 x i16>* %5366, align 2, !tbaa !399
  %5367 = shufflevector <32 x i16> %5361, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5368 = getelementptr inbounds i16, i16* %5365, i64 16
  %5369 = bitcast i16* %5368 to <16 x i16>*
  store <16 x i16> %5367, <16 x i16>* %5369, align 2, !tbaa !399
  br label %"consume blur_x279"

"consume blur_x279":                              ; preds = %"for blur_y.s0.x.x.rebased272.consume blur_x279_crit_edge", %"produce blur_x278"
  %.pre-phi3420 = phi i64 [ %.pre3419, %"for blur_y.s0.x.x.rebased272.consume blur_x279_crit_edge" ], [ %5363, %"produce blur_x278" ]
  %5370 = add nsw i64 %5151, %.pre-phi3420
  %5371 = getelementptr inbounds i16, i16* %blur_x, i64 %5370
  %5372 = bitcast i16* %5371 to <16 x i16>*
  %5373 = load <16 x i16>, <16 x i16>* %5372, align 2, !tbaa !399
  %5374 = getelementptr inbounds i16, i16* %5371, i64 16
  %5375 = bitcast i16* %5374 to <16 x i16>*
  %5376 = load <16 x i16>, <16 x i16>* %5375, align 2, !tbaa !399
  %5377 = add nsw i64 %5154, %.pre-phi3420
  %5378 = getelementptr inbounds i16, i16* %blur_x, i64 %5377
  %5379 = bitcast i16* %5378 to <16 x i16>*
  %5380 = load <16 x i16>, <16 x i16>* %5379, align 2, !tbaa !399
  %5381 = getelementptr inbounds i16, i16* %5378, i64 16
  %5382 = bitcast i16* %5381 to <16 x i16>*
  %5383 = load <16 x i16>, <16 x i16>* %5382, align 2, !tbaa !399
  %5384 = add nsw i64 %5157, %.pre-phi3420
  %5385 = getelementptr inbounds i16, i16* %blur_x, i64 %5384
  %5386 = bitcast i16* %5385 to <16 x i16>*
  %5387 = load <16 x i16>, <16 x i16>* %5386, align 2, !tbaa !399
  %5388 = getelementptr inbounds i16, i16* %5385, i64 16
  %5389 = bitcast i16* %5388 to <16 x i16>*
  %5390 = load <16 x i16>, <16 x i16>* %5389, align 2, !tbaa !399
  %5391 = add nsw i64 %5160, %.pre-phi3420
  %5392 = getelementptr inbounds i16, i16* %blur_x, i64 %5391
  %5393 = bitcast i16* %5392 to <16 x i16>*
  %5394 = load <16 x i16>, <16 x i16>* %5393, align 2, !tbaa !399
  %5395 = getelementptr inbounds i16, i16* %5392, i64 16
  %5396 = bitcast i16* %5395 to <16 x i16>*
  %5397 = load <16 x i16>, <16 x i16>* %5396, align 2, !tbaa !399
  %5398 = add nsw i64 %5163, %.pre-phi3420
  %5399 = getelementptr inbounds i16, i16* %blur_x, i64 %5398
  %5400 = bitcast i16* %5399 to <16 x i16>*
  %5401 = load <16 x i16>, <16 x i16>* %5400, align 2, !tbaa !399
  %5402 = getelementptr inbounds i16, i16* %5399, i64 16
  %5403 = bitcast i16* %5402 to <16 x i16>*
  %5404 = load <16 x i16>, <16 x i16>* %5403, align 2, !tbaa !399
  %5405 = add <16 x i16> %5380, %5373
  %5406 = add <16 x i16> %5405, %5387
  %5407 = add <16 x i16> %5406, %5394
  %5408 = add <16 x i16> %5407, %5401
  %5409 = add <16 x i16> %5383, %5376
  %5410 = add <16 x i16> %5409, %5390
  %5411 = add <16 x i16> %5410, %5397
  %5412 = add <16 x i16> %5411, %5404
  %5413 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5408, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5414 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5412, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5415 = shufflevector <16 x i16> %5413, <16 x i16> %5414, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5416 = lshr <32 x i16> %5415, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5417 = shufflevector <32 x i16> %5416, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5418 = add nsw i64 %5167, %.pre-phi3420
  %5419 = getelementptr inbounds i16, i16* %66, i64 %5418
  %5420 = bitcast i16* %5419 to <16 x i16>*
  store <16 x i16> %5417, <16 x i16>* %5420, align 2, !tbaa !401
  %5421 = shufflevector <32 x i16> %5416, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5422 = getelementptr inbounds i16, i16* %5419, i64 16
  %5423 = bitcast i16* %5422 to <16 x i16>*
  store <16 x i16> %5421, <16 x i16>* %5423, align 2, !tbaa !401
  %indvars.iv.next3180 = add nuw nsw i64 %indvars.iv3179, 1
  %.not2674 = icmp eq i64 %indvars.iv.next3180, %184
  br i1 %.not2674, label %"end for blur_y.s0.x.x.rebased273", label %"for blur_y.s0.x.x.rebased272"

"for blur_y.s0.x.x.rebased280":                   ; preds = %"for blur_y.s0.x.x.rebased280.preheader", %"consume blur_x288"
  %blur_y.s0.x.x.rebased282 = phi i32 [ %5536, %"consume blur_x288" ], [ 0, %"for blur_y.s0.x.x.rebased280.preheader" ]
  %5424 = add nsw i32 %blur_y.s0.x.x.rebased282, %t1626
  %a161 = shl nsw i32 %5424, 5
  %5425 = icmp sgt i32 %a14, %a161
  %b167 = select i1 %5425, i32 %a161, i32 %a14
  %5426 = icmp slt i32 %5424, 1
  %5427 = icmp sgt i32 %4, %a161
  %5428 = or i1 %5426, %5427
  br i1 %5428, label %"produce blur_x286", label %"consume blur_x288"

"end for blur_y.s0.x.x.rebased281":               ; preds = %"consume blur_x288", %"end for blur_y.s0.x.x.rebased273"
  br i1 %34, label %"produce blur_x292", label %after_bb289

"produce blur_x286":                              ; preds = %"for blur_y.s0.x.x.rebased280"
  %5429 = icmp slt i32 %b167, %4
  %blur_x.s0.x.v1.base.s287 = select i1 %5429, i32 %b167, i32 %4
  %t845 = add nsw i32 %blur_x.s0.x.v1.base.s287, %t1833
  %5430 = sext i32 %t845 to i64
  %5431 = getelementptr inbounds i16, i16* %read_input, i64 %5430
  %5432 = getelementptr inbounds i16, i16* %5431, i64 1
  %5433 = bitcast i16* %5432 to <16 x i16>*
  %5434 = load <16 x i16>, <16 x i16>* %5433, align 2, !tbaa !396
  %5435 = getelementptr inbounds i16, i16* %5431, i64 17
  %5436 = bitcast i16* %5435 to <16 x i16>*
  %5437 = load <16 x i16>, <16 x i16>* %5436, align 2, !tbaa !396
  %5438 = bitcast i16* %5431 to <16 x i16>*
  %5439 = load <16 x i16>, <16 x i16>* %5438, align 2, !tbaa !396
  %5440 = getelementptr inbounds i16, i16* %5431, i64 16
  %5441 = bitcast i16* %5440 to <16 x i16>*
  %5442 = load <16 x i16>, <16 x i16>* %5441, align 2, !tbaa !396
  %5443 = getelementptr inbounds i16, i16* %5431, i64 2
  %5444 = bitcast i16* %5443 to <16 x i16>*
  %5445 = load <16 x i16>, <16 x i16>* %5444, align 2, !tbaa !396
  %5446 = getelementptr inbounds i16, i16* %5431, i64 18
  %5447 = bitcast i16* %5446 to <16 x i16>*
  %5448 = load <16 x i16>, <16 x i16>* %5447, align 2, !tbaa !396
  %5449 = getelementptr inbounds i16, i16* %5431, i64 4
  %5450 = bitcast i16* %5449 to <16 x i16>*
  %5451 = load <16 x i16>, <16 x i16>* %5450, align 2, !tbaa !396
  %5452 = getelementptr inbounds i16, i16* %5431, i64 20
  %5453 = bitcast i16* %5452 to <16 x i16>*
  %5454 = load <16 x i16>, <16 x i16>* %5453, align 2, !tbaa !396
  %5455 = getelementptr inbounds i16, i16* %5431, i64 3
  %5456 = bitcast i16* %5455 to <16 x i16>*
  %5457 = load <16 x i16>, <16 x i16>* %5456, align 2, !tbaa !396
  %5458 = getelementptr inbounds i16, i16* %5431, i64 19
  %5459 = bitcast i16* %5458 to <16 x i16>*
  %5460 = load <16 x i16>, <16 x i16>* %5459, align 2, !tbaa !396
  %5461 = add <16 x i16> %5439, %5434
  %5462 = add <16 x i16> %5461, %5445
  %5463 = add <16 x i16> %5462, %5451
  %5464 = add <16 x i16> %5463, %5457
  %5465 = add <16 x i16> %5442, %5437
  %5466 = add <16 x i16> %5465, %5448
  %5467 = add <16 x i16> %5466, %5454
  %5468 = add <16 x i16> %5467, %5460
  %5469 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5464, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5470 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5468, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5471 = shufflevector <16 x i16> %5469, <16 x i16> %5470, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5472 = lshr <32 x i16> %5471, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5473 = shufflevector <32 x i16> %5472, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5474 = sext i32 %blur_x.s0.x.v1.base.s287 to i64
  %5475 = add nsw i64 %5474, %5299
  %5476 = getelementptr inbounds i16, i16* %blur_x, i64 %5475
  %5477 = bitcast i16* %5476 to <16 x i16>*
  store <16 x i16> %5473, <16 x i16>* %5477, align 2, !tbaa !399
  %5478 = shufflevector <32 x i16> %5472, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5479 = getelementptr inbounds i16, i16* %5476, i64 16
  %5480 = bitcast i16* %5479 to <16 x i16>*
  store <16 x i16> %5478, <16 x i16>* %5480, align 2, !tbaa !399
  br label %"consume blur_x288"

"consume blur_x288":                              ; preds = %"for blur_y.s0.x.x.rebased280", %"produce blur_x286"
  %5481 = sext i32 %b167 to i64
  %5482 = add nsw i64 %5302, %5481
  %5483 = getelementptr inbounds i16, i16* %blur_x, i64 %5482
  %5484 = bitcast i16* %5483 to <16 x i16>*
  %5485 = load <16 x i16>, <16 x i16>* %5484, align 2, !tbaa !399
  %5486 = getelementptr inbounds i16, i16* %5483, i64 16
  %5487 = bitcast i16* %5486 to <16 x i16>*
  %5488 = load <16 x i16>, <16 x i16>* %5487, align 2, !tbaa !399
  %5489 = add nsw i64 %5305, %5481
  %5490 = getelementptr inbounds i16, i16* %blur_x, i64 %5489
  %5491 = bitcast i16* %5490 to <16 x i16>*
  %5492 = load <16 x i16>, <16 x i16>* %5491, align 2, !tbaa !399
  %5493 = getelementptr inbounds i16, i16* %5490, i64 16
  %5494 = bitcast i16* %5493 to <16 x i16>*
  %5495 = load <16 x i16>, <16 x i16>* %5494, align 2, !tbaa !399
  %5496 = add nsw i64 %5308, %5481
  %5497 = getelementptr inbounds i16, i16* %blur_x, i64 %5496
  %5498 = bitcast i16* %5497 to <16 x i16>*
  %5499 = load <16 x i16>, <16 x i16>* %5498, align 2, !tbaa !399
  %5500 = getelementptr inbounds i16, i16* %5497, i64 16
  %5501 = bitcast i16* %5500 to <16 x i16>*
  %5502 = load <16 x i16>, <16 x i16>* %5501, align 2, !tbaa !399
  %5503 = add nsw i64 %5311, %5481
  %5504 = getelementptr inbounds i16, i16* %blur_x, i64 %5503
  %5505 = bitcast i16* %5504 to <16 x i16>*
  %5506 = load <16 x i16>, <16 x i16>* %5505, align 2, !tbaa !399
  %5507 = getelementptr inbounds i16, i16* %5504, i64 16
  %5508 = bitcast i16* %5507 to <16 x i16>*
  %5509 = load <16 x i16>, <16 x i16>* %5508, align 2, !tbaa !399
  %5510 = add nsw i64 %5314, %5481
  %5511 = getelementptr inbounds i16, i16* %blur_x, i64 %5510
  %5512 = bitcast i16* %5511 to <16 x i16>*
  %5513 = load <16 x i16>, <16 x i16>* %5512, align 2, !tbaa !399
  %5514 = getelementptr inbounds i16, i16* %5511, i64 16
  %5515 = bitcast i16* %5514 to <16 x i16>*
  %5516 = load <16 x i16>, <16 x i16>* %5515, align 2, !tbaa !399
  %5517 = add <16 x i16> %5492, %5485
  %5518 = add <16 x i16> %5517, %5499
  %5519 = add <16 x i16> %5518, %5506
  %5520 = add <16 x i16> %5519, %5513
  %5521 = add <16 x i16> %5495, %5488
  %5522 = add <16 x i16> %5521, %5502
  %5523 = add <16 x i16> %5522, %5509
  %5524 = add <16 x i16> %5523, %5516
  %5525 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5520, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5526 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5524, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5527 = shufflevector <16 x i16> %5525, <16 x i16> %5526, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5528 = lshr <32 x i16> %5527, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5529 = shufflevector <32 x i16> %5528, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5530 = add nsw i64 %5318, %5481
  %5531 = getelementptr inbounds i16, i16* %66, i64 %5530
  %5532 = bitcast i16* %5531 to <16 x i16>*
  store <16 x i16> %5529, <16 x i16>* %5532, align 2, !tbaa !401
  %5533 = shufflevector <32 x i16> %5528, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5534 = getelementptr inbounds i16, i16* %5531, i64 16
  %5535 = bitcast i16* %5534 to <16 x i16>*
  store <16 x i16> %5533, <16 x i16>* %5535, align 2, !tbaa !401
  %5536 = add nuw nsw i32 %blur_y.s0.x.x.rebased282, 1
  %.not2673 = icmp eq i32 %5536, %t1683
  br i1 %.not2673, label %"end for blur_y.s0.x.x.rebased281", label %"for blur_y.s0.x.x.rebased280"

after_bb289:                                      ; preds = %"end for blur_y.s0.x.x.rebased281", %"produce blur_x292"
  br i1 %100, label %"for blur_y.s0.x.x.rebased294.preheader", label %"end for blur_y.s0.x.x.rebased295", !prof !386

"for blur_y.s0.x.x.rebased294.preheader":         ; preds = %after_bb289
  %5537 = sext i32 %t1722 to i64
  %5538 = zext i32 %.pre-phi3382 to i64
  %5539 = mul nsw i64 %5538, %112
  %5540 = sub nsw i64 %5539, %96
  %5541 = zext i32 %.pre-phi3378 to i64
  %5542 = mul nsw i64 %5541, %112
  %5543 = sub nsw i64 %5542, %96
  %5544 = zext i32 %.pre-phi3386 to i64
  %5545 = mul nsw i64 %5544, %112
  %5546 = sub nsw i64 %5545, %96
  %5547 = zext i32 %.pre-phi3396 to i64
  %5548 = mul nsw i64 %5547, %112
  %5549 = sub nsw i64 %5548, %96
  %5550 = zext i32 %.pre-phi3390 to i64
  %5551 = mul nsw i64 %5550, %112
  %5552 = sub nsw i64 %5551, %96
  %5553 = sext i32 %a26 to i64
  %5554 = add nsw i64 %5553, 9
  %5555 = mul nsw i64 %5554, %113
  %5556 = add nsw i64 %5555, %116
  br label %"for blur_y.s0.x.x.rebased294"

"produce blur_x292":                              ; preds = %"end for blur_y.s0.x.x.rebased281"
  %5557 = getelementptr inbounds i16, i16* %read_input, i64 %133
  %5558 = getelementptr inbounds i16, i16* %5557, i64 -31
  %5559 = bitcast i16* %5558 to <16 x i16>*
  %5560 = load <16 x i16>, <16 x i16>* %5559, align 2, !tbaa !396
  %5561 = getelementptr inbounds i16, i16* %5557, i64 -15
  %5562 = bitcast i16* %5561 to <16 x i16>*
  %5563 = load <16 x i16>, <16 x i16>* %5562, align 2, !tbaa !396
  %5564 = getelementptr inbounds i16, i16* %5557, i64 -32
  %5565 = bitcast i16* %5564 to <16 x i16>*
  %5566 = load <16 x i16>, <16 x i16>* %5565, align 2, !tbaa !396
  %5567 = getelementptr inbounds i16, i16* %5557, i64 -16
  %5568 = bitcast i16* %5567 to <16 x i16>*
  %5569 = load <16 x i16>, <16 x i16>* %5568, align 2, !tbaa !396
  %5570 = getelementptr inbounds i16, i16* %5557, i64 -30
  %5571 = bitcast i16* %5570 to <16 x i16>*
  %5572 = load <16 x i16>, <16 x i16>* %5571, align 2, !tbaa !396
  %5573 = getelementptr inbounds i16, i16* %5557, i64 -14
  %5574 = bitcast i16* %5573 to <16 x i16>*
  %5575 = load <16 x i16>, <16 x i16>* %5574, align 2, !tbaa !396
  %5576 = getelementptr inbounds i16, i16* %5557, i64 -28
  %5577 = bitcast i16* %5576 to <16 x i16>*
  %5578 = load <16 x i16>, <16 x i16>* %5577, align 2, !tbaa !396
  %5579 = getelementptr inbounds i16, i16* %5557, i64 -12
  %5580 = bitcast i16* %5579 to <16 x i16>*
  %5581 = load <16 x i16>, <16 x i16>* %5580, align 2, !tbaa !396
  %5582 = getelementptr inbounds i16, i16* %5557, i64 -29
  %5583 = bitcast i16* %5582 to <16 x i16>*
  %5584 = load <16 x i16>, <16 x i16>* %5583, align 2, !tbaa !396
  %5585 = getelementptr inbounds i16, i16* %5557, i64 -13
  %5586 = bitcast i16* %5585 to <16 x i16>*
  %5587 = load <16 x i16>, <16 x i16>* %5586, align 2, !tbaa !396
  %5588 = add <16 x i16> %5566, %5560
  %5589 = add <16 x i16> %5588, %5572
  %5590 = add <16 x i16> %5589, %5578
  %5591 = add <16 x i16> %5590, %5584
  %5592 = add <16 x i16> %5569, %5563
  %5593 = add <16 x i16> %5592, %5575
  %5594 = add <16 x i16> %5593, %5581
  %5595 = add <16 x i16> %5594, %5587
  %5596 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5591, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5597 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5595, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5598 = shufflevector <16 x i16> %5596, <16 x i16> %5597, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5599 = lshr <32 x i16> %5598, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5600 = shufflevector <32 x i16> %5599, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5601 = zext i32 %.pre-phi3396 to i64
  %5602 = mul nsw i64 %97, %5601
  %5603 = add nsw i64 %99, %5602
  %5604 = getelementptr inbounds i16, i16* %blur_x, i64 %5603
  %5605 = getelementptr inbounds i16, i16* %5604, i64 -32
  %5606 = bitcast i16* %5605 to <16 x i16>*
  store <16 x i16> %5600, <16 x i16>* %5606, align 2, !tbaa !399
  %5607 = shufflevector <32 x i16> %5599, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5608 = getelementptr inbounds i16, i16* %5604, i64 -16
  %5609 = bitcast i16* %5608 to <16 x i16>*
  store <16 x i16> %5607, <16 x i16>* %5609, align 2, !tbaa !399
  %5610 = zext i32 %.pre-phi3382 to i64
  %5611 = mul nsw i64 %5610, %112
  %5612 = add nsw i64 %5611, %94
  %5613 = getelementptr inbounds i16, i16* %blur_x, i64 %5612
  %5614 = getelementptr inbounds i16, i16* %5613, i64 -32
  %5615 = bitcast i16* %5614 to <16 x i16>*
  %5616 = load <16 x i16>, <16 x i16>* %5615, align 2, !tbaa !399
  %5617 = getelementptr inbounds i16, i16* %5613, i64 -16
  %5618 = bitcast i16* %5617 to <16 x i16>*
  %5619 = load <16 x i16>, <16 x i16>* %5618, align 2, !tbaa !399
  %5620 = zext i32 %.pre-phi3378 to i64
  %5621 = mul nsw i64 %5620, %112
  %5622 = add nsw i64 %5621, %94
  %5623 = getelementptr inbounds i16, i16* %blur_x, i64 %5622
  %5624 = getelementptr inbounds i16, i16* %5623, i64 -32
  %5625 = bitcast i16* %5624 to <16 x i16>*
  %5626 = load <16 x i16>, <16 x i16>* %5625, align 2, !tbaa !399
  %5627 = getelementptr inbounds i16, i16* %5623, i64 -16
  %5628 = bitcast i16* %5627 to <16 x i16>*
  %5629 = load <16 x i16>, <16 x i16>* %5628, align 2, !tbaa !399
  %5630 = zext i32 %.pre-phi3386 to i64
  %5631 = mul nsw i64 %5630, %112
  %5632 = add nsw i64 %5631, %94
  %5633 = getelementptr inbounds i16, i16* %blur_x, i64 %5632
  %5634 = getelementptr inbounds i16, i16* %5633, i64 -32
  %5635 = bitcast i16* %5634 to <16 x i16>*
  %5636 = load <16 x i16>, <16 x i16>* %5635, align 2, !tbaa !399
  %5637 = getelementptr inbounds i16, i16* %5633, i64 -16
  %5638 = bitcast i16* %5637 to <16 x i16>*
  %5639 = load <16 x i16>, <16 x i16>* %5638, align 2, !tbaa !399
  %5640 = mul nsw i64 %5601, %112
  %5641 = add nsw i64 %5640, %94
  %5642 = getelementptr inbounds i16, i16* %blur_x, i64 %5641
  %5643 = getelementptr inbounds i16, i16* %5642, i64 -32
  %5644 = bitcast i16* %5643 to <16 x i16>*
  %5645 = load <16 x i16>, <16 x i16>* %5644, align 2, !tbaa !399
  %5646 = getelementptr inbounds i16, i16* %5642, i64 -16
  %5647 = bitcast i16* %5646 to <16 x i16>*
  %5648 = load <16 x i16>, <16 x i16>* %5647, align 2, !tbaa !399
  %5649 = zext i32 %.pre-phi3390 to i64
  %5650 = mul nsw i64 %5649, %112
  %5651 = add nsw i64 %5650, %94
  %5652 = getelementptr inbounds i16, i16* %blur_x, i64 %5651
  %5653 = getelementptr inbounds i16, i16* %5652, i64 -32
  %5654 = bitcast i16* %5653 to <16 x i16>*
  %5655 = load <16 x i16>, <16 x i16>* %5654, align 2, !tbaa !399
  %5656 = getelementptr inbounds i16, i16* %5652, i64 -16
  %5657 = bitcast i16* %5656 to <16 x i16>*
  %5658 = load <16 x i16>, <16 x i16>* %5657, align 2, !tbaa !399
  %5659 = add <16 x i16> %5626, %5616
  %5660 = add <16 x i16> %5659, %5636
  %5661 = add <16 x i16> %5660, %5645
  %5662 = add <16 x i16> %5661, %5655
  %5663 = add <16 x i16> %5629, %5619
  %5664 = add <16 x i16> %5663, %5639
  %5665 = add <16 x i16> %5664, %5648
  %5666 = add <16 x i16> %5665, %5658
  %5667 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5662, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5668 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5666, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5669 = shufflevector <16 x i16> %5667, <16 x i16> %5668, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5670 = lshr <32 x i16> %5669, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5671 = shufflevector <32 x i16> %5670, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5672 = sext i32 %a26 to i64
  %5673 = add nsw i64 %5672, 9
  %5674 = mul nsw i64 %5673, %113
  %5675 = add nsw i64 %115, %5674
  %5676 = getelementptr inbounds i16, i16* %66, i64 %5675
  %5677 = getelementptr inbounds i16, i16* %5676, i64 -32
  %5678 = bitcast i16* %5677 to <16 x i16>*
  store <16 x i16> %5671, <16 x i16>* %5678, align 2, !tbaa !401
  %5679 = shufflevector <32 x i16> %5670, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5680 = getelementptr inbounds i16, i16* %5676, i64 -16
  %5681 = bitcast i16* %5680 to <16 x i16>*
  store <16 x i16> %5679, <16 x i16>* %5681, align 2, !tbaa !401
  br label %after_bb289

"for blur_y.s0.x.x.rebased294":                   ; preds = %"for blur_y.s0.x.x.rebased294.preheader", %"consume blur_x301"
  %indvars.iv3182 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased294.preheader" ], [ %indvars.iv.next3183, %"consume blur_x301" ]
  %5682 = add nsw i64 %indvars.iv3182, %101
  %5683 = icmp slt i64 %5682, 1
  %5684 = trunc i64 %5682 to i32
  %5685 = shl nsw i32 %5684, 5
  %5686 = icmp sgt i32 %4, %5685
  %5687 = or i1 %5683, %5686
  br i1 %5687, label %"produce blur_x300", label %"for blur_y.s0.x.x.rebased294.consume blur_x301_crit_edge"

"for blur_y.s0.x.x.rebased294.consume blur_x301_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased294"
  %.pre3421 = shl nsw i64 %5682, 5
  br label %"consume blur_x301"

"end for blur_y.s0.x.x.rebased295":               ; preds = %"consume blur_x301", %after_bb289
  br i1 %102, label %"for blur_y.s0.x.x.rebased302.preheader", label %"end for blur_y.s0.x.x.rebased303", !prof !386

"for blur_y.s0.x.x.rebased302.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased295"
  %5688 = sext i32 %t1722 to i64
  %5689 = zext i32 %.pre-phi3382 to i64
  %5690 = mul nsw i64 %5689, %112
  %5691 = sub nsw i64 %5690, %96
  %5692 = zext i32 %.pre-phi3378 to i64
  %5693 = mul nsw i64 %5692, %112
  %5694 = sub nsw i64 %5693, %96
  %5695 = zext i32 %.pre-phi3386 to i64
  %5696 = mul nsw i64 %5695, %112
  %5697 = sub nsw i64 %5696, %96
  %5698 = zext i32 %.pre-phi3396 to i64
  %5699 = mul nsw i64 %5698, %112
  %5700 = sub nsw i64 %5699, %96
  %5701 = zext i32 %.pre-phi3390 to i64
  %5702 = mul nsw i64 %5701, %112
  %5703 = sub nsw i64 %5702, %96
  %5704 = sext i32 %a26 to i64
  %5705 = add nsw i64 %5704, 9
  %5706 = mul nsw i64 %5705, %113
  %5707 = add nsw i64 %5706, %116
  br label %"for blur_y.s0.x.x.rebased302"

"produce blur_x300":                              ; preds = %"for blur_y.s0.x.x.rebased294"
  %t856 = add nsw i32 %5685, %t1849
  %5708 = sext i32 %t856 to i64
  %5709 = getelementptr inbounds i16, i16* %read_input, i64 %5708
  %5710 = getelementptr inbounds i16, i16* %5709, i64 1
  %5711 = bitcast i16* %5710 to <16 x i16>*
  %5712 = load <16 x i16>, <16 x i16>* %5711, align 2, !tbaa !396
  %5713 = getelementptr inbounds i16, i16* %5709, i64 17
  %5714 = bitcast i16* %5713 to <16 x i16>*
  %5715 = load <16 x i16>, <16 x i16>* %5714, align 2, !tbaa !396
  %5716 = bitcast i16* %5709 to <16 x i16>*
  %5717 = load <16 x i16>, <16 x i16>* %5716, align 2, !tbaa !396
  %5718 = getelementptr inbounds i16, i16* %5709, i64 16
  %5719 = bitcast i16* %5718 to <16 x i16>*
  %5720 = load <16 x i16>, <16 x i16>* %5719, align 2, !tbaa !396
  %5721 = getelementptr inbounds i16, i16* %5709, i64 2
  %5722 = bitcast i16* %5721 to <16 x i16>*
  %5723 = load <16 x i16>, <16 x i16>* %5722, align 2, !tbaa !396
  %5724 = getelementptr inbounds i16, i16* %5709, i64 18
  %5725 = bitcast i16* %5724 to <16 x i16>*
  %5726 = load <16 x i16>, <16 x i16>* %5725, align 2, !tbaa !396
  %5727 = getelementptr inbounds i16, i16* %5709, i64 4
  %5728 = bitcast i16* %5727 to <16 x i16>*
  %5729 = load <16 x i16>, <16 x i16>* %5728, align 2, !tbaa !396
  %5730 = getelementptr inbounds i16, i16* %5709, i64 20
  %5731 = bitcast i16* %5730 to <16 x i16>*
  %5732 = load <16 x i16>, <16 x i16>* %5731, align 2, !tbaa !396
  %5733 = getelementptr inbounds i16, i16* %5709, i64 3
  %5734 = bitcast i16* %5733 to <16 x i16>*
  %5735 = load <16 x i16>, <16 x i16>* %5734, align 2, !tbaa !396
  %5736 = getelementptr inbounds i16, i16* %5709, i64 19
  %5737 = bitcast i16* %5736 to <16 x i16>*
  %5738 = load <16 x i16>, <16 x i16>* %5737, align 2, !tbaa !396
  %5739 = add <16 x i16> %5717, %5712
  %5740 = add <16 x i16> %5739, %5723
  %5741 = add <16 x i16> %5740, %5729
  %5742 = add <16 x i16> %5741, %5735
  %5743 = add <16 x i16> %5720, %5715
  %5744 = add <16 x i16> %5743, %5726
  %5745 = add <16 x i16> %5744, %5732
  %5746 = add <16 x i16> %5745, %5738
  %5747 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5742, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5748 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5746, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5749 = shufflevector <16 x i16> %5747, <16 x i16> %5748, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5750 = lshr <32 x i16> %5749, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5751 = shufflevector <32 x i16> %5750, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5752 = shl nsw i64 %5682, 5
  %5753 = add nsw i64 %5752, %5537
  %5754 = getelementptr inbounds i16, i16* %blur_x, i64 %5753
  %5755 = bitcast i16* %5754 to <16 x i16>*
  store <16 x i16> %5751, <16 x i16>* %5755, align 2, !tbaa !399
  %5756 = shufflevector <32 x i16> %5750, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5757 = getelementptr inbounds i16, i16* %5754, i64 16
  %5758 = bitcast i16* %5757 to <16 x i16>*
  store <16 x i16> %5756, <16 x i16>* %5758, align 2, !tbaa !399
  br label %"consume blur_x301"

"consume blur_x301":                              ; preds = %"for blur_y.s0.x.x.rebased294.consume blur_x301_crit_edge", %"produce blur_x300"
  %.pre-phi3422 = phi i64 [ %.pre3421, %"for blur_y.s0.x.x.rebased294.consume blur_x301_crit_edge" ], [ %5752, %"produce blur_x300" ]
  %5759 = add nsw i64 %5540, %.pre-phi3422
  %5760 = getelementptr inbounds i16, i16* %blur_x, i64 %5759
  %5761 = bitcast i16* %5760 to <16 x i16>*
  %5762 = load <16 x i16>, <16 x i16>* %5761, align 2, !tbaa !399
  %5763 = getelementptr inbounds i16, i16* %5760, i64 16
  %5764 = bitcast i16* %5763 to <16 x i16>*
  %5765 = load <16 x i16>, <16 x i16>* %5764, align 2, !tbaa !399
  %5766 = add nsw i64 %5543, %.pre-phi3422
  %5767 = getelementptr inbounds i16, i16* %blur_x, i64 %5766
  %5768 = bitcast i16* %5767 to <16 x i16>*
  %5769 = load <16 x i16>, <16 x i16>* %5768, align 2, !tbaa !399
  %5770 = getelementptr inbounds i16, i16* %5767, i64 16
  %5771 = bitcast i16* %5770 to <16 x i16>*
  %5772 = load <16 x i16>, <16 x i16>* %5771, align 2, !tbaa !399
  %5773 = add nsw i64 %5546, %.pre-phi3422
  %5774 = getelementptr inbounds i16, i16* %blur_x, i64 %5773
  %5775 = bitcast i16* %5774 to <16 x i16>*
  %5776 = load <16 x i16>, <16 x i16>* %5775, align 2, !tbaa !399
  %5777 = getelementptr inbounds i16, i16* %5774, i64 16
  %5778 = bitcast i16* %5777 to <16 x i16>*
  %5779 = load <16 x i16>, <16 x i16>* %5778, align 2, !tbaa !399
  %5780 = add nsw i64 %5549, %.pre-phi3422
  %5781 = getelementptr inbounds i16, i16* %blur_x, i64 %5780
  %5782 = bitcast i16* %5781 to <16 x i16>*
  %5783 = load <16 x i16>, <16 x i16>* %5782, align 2, !tbaa !399
  %5784 = getelementptr inbounds i16, i16* %5781, i64 16
  %5785 = bitcast i16* %5784 to <16 x i16>*
  %5786 = load <16 x i16>, <16 x i16>* %5785, align 2, !tbaa !399
  %5787 = add nsw i64 %5552, %.pre-phi3422
  %5788 = getelementptr inbounds i16, i16* %blur_x, i64 %5787
  %5789 = bitcast i16* %5788 to <16 x i16>*
  %5790 = load <16 x i16>, <16 x i16>* %5789, align 2, !tbaa !399
  %5791 = getelementptr inbounds i16, i16* %5788, i64 16
  %5792 = bitcast i16* %5791 to <16 x i16>*
  %5793 = load <16 x i16>, <16 x i16>* %5792, align 2, !tbaa !399
  %5794 = add <16 x i16> %5769, %5762
  %5795 = add <16 x i16> %5794, %5776
  %5796 = add <16 x i16> %5795, %5783
  %5797 = add <16 x i16> %5796, %5790
  %5798 = add <16 x i16> %5772, %5765
  %5799 = add <16 x i16> %5798, %5779
  %5800 = add <16 x i16> %5799, %5786
  %5801 = add <16 x i16> %5800, %5793
  %5802 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5797, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5803 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5801, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5804 = shufflevector <16 x i16> %5802, <16 x i16> %5803, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5805 = lshr <32 x i16> %5804, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5806 = shufflevector <32 x i16> %5805, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5807 = add nsw i64 %5556, %.pre-phi3422
  %5808 = getelementptr inbounds i16, i16* %66, i64 %5807
  %5809 = bitcast i16* %5808 to <16 x i16>*
  store <16 x i16> %5806, <16 x i16>* %5809, align 2, !tbaa !401
  %5810 = shufflevector <32 x i16> %5805, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5811 = getelementptr inbounds i16, i16* %5808, i64 16
  %5812 = bitcast i16* %5811 to <16 x i16>*
  store <16 x i16> %5810, <16 x i16>* %5812, align 2, !tbaa !401
  %indvars.iv.next3183 = add nuw nsw i64 %indvars.iv3182, 1
  %.not2672 = icmp eq i64 %indvars.iv.next3183, %184
  br i1 %.not2672, label %"end for blur_y.s0.x.x.rebased295", label %"for blur_y.s0.x.x.rebased294"

"for blur_y.s0.x.x.rebased302":                   ; preds = %"for blur_y.s0.x.x.rebased302.preheader", %"consume blur_x310"
  %blur_y.s0.x.x.rebased304 = phi i32 [ %5925, %"consume blur_x310" ], [ 0, %"for blur_y.s0.x.x.rebased302.preheader" ]
  %5813 = add nsw i32 %blur_y.s0.x.x.rebased304, %t1626
  %a168 = shl nsw i32 %5813, 5
  %5814 = icmp sgt i32 %a14, %a168
  %b174 = select i1 %5814, i32 %a168, i32 %a14
  %5815 = icmp slt i32 %5813, 1
  %5816 = icmp sgt i32 %4, %a168
  %5817 = or i1 %5815, %5816
  br i1 %5817, label %"produce blur_x308", label %"consume blur_x310"

"end for blur_y.s0.x.x.rebased303":               ; preds = %"consume blur_x310", %"end for blur_y.s0.x.x.rebased295"
  br i1 %34, label %"produce blur_x314", label %after_bb311

"produce blur_x308":                              ; preds = %"for blur_y.s0.x.x.rebased302"
  %5818 = icmp slt i32 %b174, %4
  %blur_x.s0.x.v1.base.s309 = select i1 %5818, i32 %b174, i32 %4
  %t861 = add nsw i32 %blur_x.s0.x.v1.base.s309, %t1849
  %5819 = sext i32 %t861 to i64
  %5820 = getelementptr inbounds i16, i16* %read_input, i64 %5819
  %5821 = getelementptr inbounds i16, i16* %5820, i64 1
  %5822 = bitcast i16* %5821 to <16 x i16>*
  %5823 = load <16 x i16>, <16 x i16>* %5822, align 2, !tbaa !396
  %5824 = getelementptr inbounds i16, i16* %5820, i64 17
  %5825 = bitcast i16* %5824 to <16 x i16>*
  %5826 = load <16 x i16>, <16 x i16>* %5825, align 2, !tbaa !396
  %5827 = bitcast i16* %5820 to <16 x i16>*
  %5828 = load <16 x i16>, <16 x i16>* %5827, align 2, !tbaa !396
  %5829 = getelementptr inbounds i16, i16* %5820, i64 16
  %5830 = bitcast i16* %5829 to <16 x i16>*
  %5831 = load <16 x i16>, <16 x i16>* %5830, align 2, !tbaa !396
  %5832 = getelementptr inbounds i16, i16* %5820, i64 2
  %5833 = bitcast i16* %5832 to <16 x i16>*
  %5834 = load <16 x i16>, <16 x i16>* %5833, align 2, !tbaa !396
  %5835 = getelementptr inbounds i16, i16* %5820, i64 18
  %5836 = bitcast i16* %5835 to <16 x i16>*
  %5837 = load <16 x i16>, <16 x i16>* %5836, align 2, !tbaa !396
  %5838 = getelementptr inbounds i16, i16* %5820, i64 4
  %5839 = bitcast i16* %5838 to <16 x i16>*
  %5840 = load <16 x i16>, <16 x i16>* %5839, align 2, !tbaa !396
  %5841 = getelementptr inbounds i16, i16* %5820, i64 20
  %5842 = bitcast i16* %5841 to <16 x i16>*
  %5843 = load <16 x i16>, <16 x i16>* %5842, align 2, !tbaa !396
  %5844 = getelementptr inbounds i16, i16* %5820, i64 3
  %5845 = bitcast i16* %5844 to <16 x i16>*
  %5846 = load <16 x i16>, <16 x i16>* %5845, align 2, !tbaa !396
  %5847 = getelementptr inbounds i16, i16* %5820, i64 19
  %5848 = bitcast i16* %5847 to <16 x i16>*
  %5849 = load <16 x i16>, <16 x i16>* %5848, align 2, !tbaa !396
  %5850 = add <16 x i16> %5828, %5823
  %5851 = add <16 x i16> %5850, %5834
  %5852 = add <16 x i16> %5851, %5840
  %5853 = add <16 x i16> %5852, %5846
  %5854 = add <16 x i16> %5831, %5826
  %5855 = add <16 x i16> %5854, %5837
  %5856 = add <16 x i16> %5855, %5843
  %5857 = add <16 x i16> %5856, %5849
  %5858 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5853, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5859 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5857, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5860 = shufflevector <16 x i16> %5858, <16 x i16> %5859, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5861 = lshr <32 x i16> %5860, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5862 = shufflevector <32 x i16> %5861, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5863 = sext i32 %blur_x.s0.x.v1.base.s309 to i64
  %5864 = add nsw i64 %5863, %5688
  %5865 = getelementptr inbounds i16, i16* %blur_x, i64 %5864
  %5866 = bitcast i16* %5865 to <16 x i16>*
  store <16 x i16> %5862, <16 x i16>* %5866, align 2, !tbaa !399
  %5867 = shufflevector <32 x i16> %5861, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5868 = getelementptr inbounds i16, i16* %5865, i64 16
  %5869 = bitcast i16* %5868 to <16 x i16>*
  store <16 x i16> %5867, <16 x i16>* %5869, align 2, !tbaa !399
  br label %"consume blur_x310"

"consume blur_x310":                              ; preds = %"for blur_y.s0.x.x.rebased302", %"produce blur_x308"
  %5870 = sext i32 %b174 to i64
  %5871 = add nsw i64 %5691, %5870
  %5872 = getelementptr inbounds i16, i16* %blur_x, i64 %5871
  %5873 = bitcast i16* %5872 to <16 x i16>*
  %5874 = load <16 x i16>, <16 x i16>* %5873, align 2, !tbaa !399
  %5875 = getelementptr inbounds i16, i16* %5872, i64 16
  %5876 = bitcast i16* %5875 to <16 x i16>*
  %5877 = load <16 x i16>, <16 x i16>* %5876, align 2, !tbaa !399
  %5878 = add nsw i64 %5694, %5870
  %5879 = getelementptr inbounds i16, i16* %blur_x, i64 %5878
  %5880 = bitcast i16* %5879 to <16 x i16>*
  %5881 = load <16 x i16>, <16 x i16>* %5880, align 2, !tbaa !399
  %5882 = getelementptr inbounds i16, i16* %5879, i64 16
  %5883 = bitcast i16* %5882 to <16 x i16>*
  %5884 = load <16 x i16>, <16 x i16>* %5883, align 2, !tbaa !399
  %5885 = add nsw i64 %5697, %5870
  %5886 = getelementptr inbounds i16, i16* %blur_x, i64 %5885
  %5887 = bitcast i16* %5886 to <16 x i16>*
  %5888 = load <16 x i16>, <16 x i16>* %5887, align 2, !tbaa !399
  %5889 = getelementptr inbounds i16, i16* %5886, i64 16
  %5890 = bitcast i16* %5889 to <16 x i16>*
  %5891 = load <16 x i16>, <16 x i16>* %5890, align 2, !tbaa !399
  %5892 = add nsw i64 %5700, %5870
  %5893 = getelementptr inbounds i16, i16* %blur_x, i64 %5892
  %5894 = bitcast i16* %5893 to <16 x i16>*
  %5895 = load <16 x i16>, <16 x i16>* %5894, align 2, !tbaa !399
  %5896 = getelementptr inbounds i16, i16* %5893, i64 16
  %5897 = bitcast i16* %5896 to <16 x i16>*
  %5898 = load <16 x i16>, <16 x i16>* %5897, align 2, !tbaa !399
  %5899 = add nsw i64 %5703, %5870
  %5900 = getelementptr inbounds i16, i16* %blur_x, i64 %5899
  %5901 = bitcast i16* %5900 to <16 x i16>*
  %5902 = load <16 x i16>, <16 x i16>* %5901, align 2, !tbaa !399
  %5903 = getelementptr inbounds i16, i16* %5900, i64 16
  %5904 = bitcast i16* %5903 to <16 x i16>*
  %5905 = load <16 x i16>, <16 x i16>* %5904, align 2, !tbaa !399
  %5906 = add <16 x i16> %5881, %5874
  %5907 = add <16 x i16> %5906, %5888
  %5908 = add <16 x i16> %5907, %5895
  %5909 = add <16 x i16> %5908, %5902
  %5910 = add <16 x i16> %5884, %5877
  %5911 = add <16 x i16> %5910, %5891
  %5912 = add <16 x i16> %5911, %5898
  %5913 = add <16 x i16> %5912, %5905
  %5914 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5909, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5915 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5913, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5916 = shufflevector <16 x i16> %5914, <16 x i16> %5915, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5917 = lshr <32 x i16> %5916, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5918 = shufflevector <32 x i16> %5917, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5919 = add nsw i64 %5707, %5870
  %5920 = getelementptr inbounds i16, i16* %66, i64 %5919
  %5921 = bitcast i16* %5920 to <16 x i16>*
  store <16 x i16> %5918, <16 x i16>* %5921, align 2, !tbaa !401
  %5922 = shufflevector <32 x i16> %5917, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5923 = getelementptr inbounds i16, i16* %5920, i64 16
  %5924 = bitcast i16* %5923 to <16 x i16>*
  store <16 x i16> %5922, <16 x i16>* %5924, align 2, !tbaa !401
  %5925 = add nuw nsw i32 %blur_y.s0.x.x.rebased304, 1
  %.not2671 = icmp eq i32 %5925, %t1683
  br i1 %.not2671, label %"end for blur_y.s0.x.x.rebased303", label %"for blur_y.s0.x.x.rebased302"

after_bb311:                                      ; preds = %"end for blur_y.s0.x.x.rebased303", %"produce blur_x314"
  br i1 %100, label %"for blur_y.s0.x.x.rebased316.preheader", label %"end for blur_y.s0.x.x.rebased317", !prof !386

"for blur_y.s0.x.x.rebased316.preheader":         ; preds = %after_bb311
  %5926 = sext i32 %t1738 to i64
  %5927 = zext i32 %.pre-phi3386 to i64
  %5928 = mul nsw i64 %5927, %112
  %5929 = sub nsw i64 %5928, %96
  %5930 = zext i32 %.pre-phi3382 to i64
  %5931 = mul nsw i64 %5930, %112
  %5932 = sub nsw i64 %5931, %96
  %5933 = zext i32 %.pre-phi3390 to i64
  %5934 = mul nsw i64 %5933, %112
  %5935 = sub nsw i64 %5934, %96
  %5936 = zext i32 %.pre-phi3402 to i64
  %5937 = mul nsw i64 %5936, %112
  %5938 = sub nsw i64 %5937, %96
  %5939 = zext i32 %.pre-phi3396 to i64
  %5940 = mul nsw i64 %5939, %112
  %5941 = sub nsw i64 %5940, %96
  %5942 = sext i32 %a26 to i64
  %5943 = add nsw i64 %5942, 10
  %5944 = mul nsw i64 %5943, %113
  %5945 = add nsw i64 %5944, %116
  br label %"for blur_y.s0.x.x.rebased316"

"produce blur_x314":                              ; preds = %"end for blur_y.s0.x.x.rebased303"
  %5946 = getelementptr inbounds i16, i16* %read_input, i64 %135
  %5947 = getelementptr inbounds i16, i16* %5946, i64 -31
  %5948 = bitcast i16* %5947 to <16 x i16>*
  %5949 = load <16 x i16>, <16 x i16>* %5948, align 2, !tbaa !396
  %5950 = getelementptr inbounds i16, i16* %5946, i64 -15
  %5951 = bitcast i16* %5950 to <16 x i16>*
  %5952 = load <16 x i16>, <16 x i16>* %5951, align 2, !tbaa !396
  %5953 = getelementptr inbounds i16, i16* %5946, i64 -32
  %5954 = bitcast i16* %5953 to <16 x i16>*
  %5955 = load <16 x i16>, <16 x i16>* %5954, align 2, !tbaa !396
  %5956 = getelementptr inbounds i16, i16* %5946, i64 -16
  %5957 = bitcast i16* %5956 to <16 x i16>*
  %5958 = load <16 x i16>, <16 x i16>* %5957, align 2, !tbaa !396
  %5959 = getelementptr inbounds i16, i16* %5946, i64 -30
  %5960 = bitcast i16* %5959 to <16 x i16>*
  %5961 = load <16 x i16>, <16 x i16>* %5960, align 2, !tbaa !396
  %5962 = getelementptr inbounds i16, i16* %5946, i64 -14
  %5963 = bitcast i16* %5962 to <16 x i16>*
  %5964 = load <16 x i16>, <16 x i16>* %5963, align 2, !tbaa !396
  %5965 = getelementptr inbounds i16, i16* %5946, i64 -28
  %5966 = bitcast i16* %5965 to <16 x i16>*
  %5967 = load <16 x i16>, <16 x i16>* %5966, align 2, !tbaa !396
  %5968 = getelementptr inbounds i16, i16* %5946, i64 -12
  %5969 = bitcast i16* %5968 to <16 x i16>*
  %5970 = load <16 x i16>, <16 x i16>* %5969, align 2, !tbaa !396
  %5971 = getelementptr inbounds i16, i16* %5946, i64 -29
  %5972 = bitcast i16* %5971 to <16 x i16>*
  %5973 = load <16 x i16>, <16 x i16>* %5972, align 2, !tbaa !396
  %5974 = getelementptr inbounds i16, i16* %5946, i64 -13
  %5975 = bitcast i16* %5974 to <16 x i16>*
  %5976 = load <16 x i16>, <16 x i16>* %5975, align 2, !tbaa !396
  %5977 = add <16 x i16> %5955, %5949
  %5978 = add <16 x i16> %5977, %5961
  %5979 = add <16 x i16> %5978, %5967
  %5980 = add <16 x i16> %5979, %5973
  %5981 = add <16 x i16> %5958, %5952
  %5982 = add <16 x i16> %5981, %5964
  %5983 = add <16 x i16> %5982, %5970
  %5984 = add <16 x i16> %5983, %5976
  %5985 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5980, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5986 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5984, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %5987 = shufflevector <16 x i16> %5985, <16 x i16> %5986, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5988 = lshr <32 x i16> %5987, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %5989 = shufflevector <32 x i16> %5988, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5990 = zext i32 %.pre-phi3402 to i64
  %5991 = mul nsw i64 %97, %5990
  %5992 = add nsw i64 %99, %5991
  %5993 = getelementptr inbounds i16, i16* %blur_x, i64 %5992
  %5994 = getelementptr inbounds i16, i16* %5993, i64 -32
  %5995 = bitcast i16* %5994 to <16 x i16>*
  store <16 x i16> %5989, <16 x i16>* %5995, align 2, !tbaa !399
  %5996 = shufflevector <32 x i16> %5988, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5997 = getelementptr inbounds i16, i16* %5993, i64 -16
  %5998 = bitcast i16* %5997 to <16 x i16>*
  store <16 x i16> %5996, <16 x i16>* %5998, align 2, !tbaa !399
  %5999 = zext i32 %.pre-phi3386 to i64
  %6000 = mul nsw i64 %5999, %112
  %6001 = add nsw i64 %6000, %94
  %6002 = getelementptr inbounds i16, i16* %blur_x, i64 %6001
  %6003 = getelementptr inbounds i16, i16* %6002, i64 -32
  %6004 = bitcast i16* %6003 to <16 x i16>*
  %6005 = load <16 x i16>, <16 x i16>* %6004, align 2, !tbaa !399
  %6006 = getelementptr inbounds i16, i16* %6002, i64 -16
  %6007 = bitcast i16* %6006 to <16 x i16>*
  %6008 = load <16 x i16>, <16 x i16>* %6007, align 2, !tbaa !399
  %6009 = zext i32 %.pre-phi3382 to i64
  %6010 = mul nsw i64 %6009, %112
  %6011 = add nsw i64 %6010, %94
  %6012 = getelementptr inbounds i16, i16* %blur_x, i64 %6011
  %6013 = getelementptr inbounds i16, i16* %6012, i64 -32
  %6014 = bitcast i16* %6013 to <16 x i16>*
  %6015 = load <16 x i16>, <16 x i16>* %6014, align 2, !tbaa !399
  %6016 = getelementptr inbounds i16, i16* %6012, i64 -16
  %6017 = bitcast i16* %6016 to <16 x i16>*
  %6018 = load <16 x i16>, <16 x i16>* %6017, align 2, !tbaa !399
  %6019 = zext i32 %.pre-phi3390 to i64
  %6020 = mul nsw i64 %6019, %112
  %6021 = add nsw i64 %6020, %94
  %6022 = getelementptr inbounds i16, i16* %blur_x, i64 %6021
  %6023 = getelementptr inbounds i16, i16* %6022, i64 -32
  %6024 = bitcast i16* %6023 to <16 x i16>*
  %6025 = load <16 x i16>, <16 x i16>* %6024, align 2, !tbaa !399
  %6026 = getelementptr inbounds i16, i16* %6022, i64 -16
  %6027 = bitcast i16* %6026 to <16 x i16>*
  %6028 = load <16 x i16>, <16 x i16>* %6027, align 2, !tbaa !399
  %6029 = mul nsw i64 %5990, %112
  %6030 = add nsw i64 %6029, %94
  %6031 = getelementptr inbounds i16, i16* %blur_x, i64 %6030
  %6032 = getelementptr inbounds i16, i16* %6031, i64 -32
  %6033 = bitcast i16* %6032 to <16 x i16>*
  %6034 = load <16 x i16>, <16 x i16>* %6033, align 2, !tbaa !399
  %6035 = getelementptr inbounds i16, i16* %6031, i64 -16
  %6036 = bitcast i16* %6035 to <16 x i16>*
  %6037 = load <16 x i16>, <16 x i16>* %6036, align 2, !tbaa !399
  %6038 = zext i32 %.pre-phi3396 to i64
  %6039 = mul nsw i64 %6038, %112
  %6040 = add nsw i64 %6039, %94
  %6041 = getelementptr inbounds i16, i16* %blur_x, i64 %6040
  %6042 = getelementptr inbounds i16, i16* %6041, i64 -32
  %6043 = bitcast i16* %6042 to <16 x i16>*
  %6044 = load <16 x i16>, <16 x i16>* %6043, align 2, !tbaa !399
  %6045 = getelementptr inbounds i16, i16* %6041, i64 -16
  %6046 = bitcast i16* %6045 to <16 x i16>*
  %6047 = load <16 x i16>, <16 x i16>* %6046, align 2, !tbaa !399
  %6048 = add <16 x i16> %6015, %6005
  %6049 = add <16 x i16> %6048, %6025
  %6050 = add <16 x i16> %6049, %6034
  %6051 = add <16 x i16> %6050, %6044
  %6052 = add <16 x i16> %6018, %6008
  %6053 = add <16 x i16> %6052, %6028
  %6054 = add <16 x i16> %6053, %6037
  %6055 = add <16 x i16> %6054, %6047
  %6056 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6051, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6057 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6055, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6058 = shufflevector <16 x i16> %6056, <16 x i16> %6057, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6059 = lshr <32 x i16> %6058, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6060 = shufflevector <32 x i16> %6059, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6061 = sext i32 %a26 to i64
  %6062 = add nsw i64 %6061, 10
  %6063 = mul nsw i64 %6062, %113
  %6064 = add nsw i64 %115, %6063
  %6065 = getelementptr inbounds i16, i16* %66, i64 %6064
  %6066 = getelementptr inbounds i16, i16* %6065, i64 -32
  %6067 = bitcast i16* %6066 to <16 x i16>*
  store <16 x i16> %6060, <16 x i16>* %6067, align 2, !tbaa !401
  %6068 = shufflevector <32 x i16> %6059, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6069 = getelementptr inbounds i16, i16* %6065, i64 -16
  %6070 = bitcast i16* %6069 to <16 x i16>*
  store <16 x i16> %6068, <16 x i16>* %6070, align 2, !tbaa !401
  br label %after_bb311

"for blur_y.s0.x.x.rebased316":                   ; preds = %"for blur_y.s0.x.x.rebased316.preheader", %"consume blur_x323"
  %indvars.iv3185 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased316.preheader" ], [ %indvars.iv.next3186, %"consume blur_x323" ]
  %6071 = add nsw i64 %indvars.iv3185, %101
  %6072 = icmp slt i64 %6071, 1
  %6073 = trunc i64 %6071 to i32
  %6074 = shl nsw i32 %6073, 5
  %6075 = icmp sgt i32 %4, %6074
  %6076 = or i1 %6072, %6075
  br i1 %6076, label %"produce blur_x322", label %"for blur_y.s0.x.x.rebased316.consume blur_x323_crit_edge"

"for blur_y.s0.x.x.rebased316.consume blur_x323_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased316"
  %.pre3423 = shl nsw i64 %6071, 5
  br label %"consume blur_x323"

"end for blur_y.s0.x.x.rebased317":               ; preds = %"consume blur_x323", %after_bb311
  br i1 %102, label %"for blur_y.s0.x.x.rebased324.preheader", label %"end for blur_y.s0.x.x.rebased325", !prof !386

"for blur_y.s0.x.x.rebased324.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased317"
  %6077 = sext i32 %t1738 to i64
  %6078 = zext i32 %.pre-phi3386 to i64
  %6079 = mul nsw i64 %6078, %112
  %6080 = sub nsw i64 %6079, %96
  %6081 = zext i32 %.pre-phi3382 to i64
  %6082 = mul nsw i64 %6081, %112
  %6083 = sub nsw i64 %6082, %96
  %6084 = zext i32 %.pre-phi3390 to i64
  %6085 = mul nsw i64 %6084, %112
  %6086 = sub nsw i64 %6085, %96
  %6087 = zext i32 %.pre-phi3402 to i64
  %6088 = mul nsw i64 %6087, %112
  %6089 = sub nsw i64 %6088, %96
  %6090 = zext i32 %.pre-phi3396 to i64
  %6091 = mul nsw i64 %6090, %112
  %6092 = sub nsw i64 %6091, %96
  %6093 = sext i32 %a26 to i64
  %6094 = add nsw i64 %6093, 10
  %6095 = mul nsw i64 %6094, %113
  %6096 = add nsw i64 %6095, %116
  br label %"for blur_y.s0.x.x.rebased324"

"produce blur_x322":                              ; preds = %"for blur_y.s0.x.x.rebased316"
  %t872 = add nsw i32 %6074, %t1865
  %6097 = sext i32 %t872 to i64
  %6098 = getelementptr inbounds i16, i16* %read_input, i64 %6097
  %6099 = getelementptr inbounds i16, i16* %6098, i64 1
  %6100 = bitcast i16* %6099 to <16 x i16>*
  %6101 = load <16 x i16>, <16 x i16>* %6100, align 2, !tbaa !396
  %6102 = getelementptr inbounds i16, i16* %6098, i64 17
  %6103 = bitcast i16* %6102 to <16 x i16>*
  %6104 = load <16 x i16>, <16 x i16>* %6103, align 2, !tbaa !396
  %6105 = bitcast i16* %6098 to <16 x i16>*
  %6106 = load <16 x i16>, <16 x i16>* %6105, align 2, !tbaa !396
  %6107 = getelementptr inbounds i16, i16* %6098, i64 16
  %6108 = bitcast i16* %6107 to <16 x i16>*
  %6109 = load <16 x i16>, <16 x i16>* %6108, align 2, !tbaa !396
  %6110 = getelementptr inbounds i16, i16* %6098, i64 2
  %6111 = bitcast i16* %6110 to <16 x i16>*
  %6112 = load <16 x i16>, <16 x i16>* %6111, align 2, !tbaa !396
  %6113 = getelementptr inbounds i16, i16* %6098, i64 18
  %6114 = bitcast i16* %6113 to <16 x i16>*
  %6115 = load <16 x i16>, <16 x i16>* %6114, align 2, !tbaa !396
  %6116 = getelementptr inbounds i16, i16* %6098, i64 4
  %6117 = bitcast i16* %6116 to <16 x i16>*
  %6118 = load <16 x i16>, <16 x i16>* %6117, align 2, !tbaa !396
  %6119 = getelementptr inbounds i16, i16* %6098, i64 20
  %6120 = bitcast i16* %6119 to <16 x i16>*
  %6121 = load <16 x i16>, <16 x i16>* %6120, align 2, !tbaa !396
  %6122 = getelementptr inbounds i16, i16* %6098, i64 3
  %6123 = bitcast i16* %6122 to <16 x i16>*
  %6124 = load <16 x i16>, <16 x i16>* %6123, align 2, !tbaa !396
  %6125 = getelementptr inbounds i16, i16* %6098, i64 19
  %6126 = bitcast i16* %6125 to <16 x i16>*
  %6127 = load <16 x i16>, <16 x i16>* %6126, align 2, !tbaa !396
  %6128 = add <16 x i16> %6106, %6101
  %6129 = add <16 x i16> %6128, %6112
  %6130 = add <16 x i16> %6129, %6118
  %6131 = add <16 x i16> %6130, %6124
  %6132 = add <16 x i16> %6109, %6104
  %6133 = add <16 x i16> %6132, %6115
  %6134 = add <16 x i16> %6133, %6121
  %6135 = add <16 x i16> %6134, %6127
  %6136 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6131, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6137 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6135, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6138 = shufflevector <16 x i16> %6136, <16 x i16> %6137, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6139 = lshr <32 x i16> %6138, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6140 = shufflevector <32 x i16> %6139, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6141 = shl nsw i64 %6071, 5
  %6142 = add nsw i64 %6141, %5926
  %6143 = getelementptr inbounds i16, i16* %blur_x, i64 %6142
  %6144 = bitcast i16* %6143 to <16 x i16>*
  store <16 x i16> %6140, <16 x i16>* %6144, align 2, !tbaa !399
  %6145 = shufflevector <32 x i16> %6139, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6146 = getelementptr inbounds i16, i16* %6143, i64 16
  %6147 = bitcast i16* %6146 to <16 x i16>*
  store <16 x i16> %6145, <16 x i16>* %6147, align 2, !tbaa !399
  br label %"consume blur_x323"

"consume blur_x323":                              ; preds = %"for blur_y.s0.x.x.rebased316.consume blur_x323_crit_edge", %"produce blur_x322"
  %.pre-phi3424 = phi i64 [ %.pre3423, %"for blur_y.s0.x.x.rebased316.consume blur_x323_crit_edge" ], [ %6141, %"produce blur_x322" ]
  %6148 = add nsw i64 %5929, %.pre-phi3424
  %6149 = getelementptr inbounds i16, i16* %blur_x, i64 %6148
  %6150 = bitcast i16* %6149 to <16 x i16>*
  %6151 = load <16 x i16>, <16 x i16>* %6150, align 2, !tbaa !399
  %6152 = getelementptr inbounds i16, i16* %6149, i64 16
  %6153 = bitcast i16* %6152 to <16 x i16>*
  %6154 = load <16 x i16>, <16 x i16>* %6153, align 2, !tbaa !399
  %6155 = add nsw i64 %5932, %.pre-phi3424
  %6156 = getelementptr inbounds i16, i16* %blur_x, i64 %6155
  %6157 = bitcast i16* %6156 to <16 x i16>*
  %6158 = load <16 x i16>, <16 x i16>* %6157, align 2, !tbaa !399
  %6159 = getelementptr inbounds i16, i16* %6156, i64 16
  %6160 = bitcast i16* %6159 to <16 x i16>*
  %6161 = load <16 x i16>, <16 x i16>* %6160, align 2, !tbaa !399
  %6162 = add nsw i64 %5935, %.pre-phi3424
  %6163 = getelementptr inbounds i16, i16* %blur_x, i64 %6162
  %6164 = bitcast i16* %6163 to <16 x i16>*
  %6165 = load <16 x i16>, <16 x i16>* %6164, align 2, !tbaa !399
  %6166 = getelementptr inbounds i16, i16* %6163, i64 16
  %6167 = bitcast i16* %6166 to <16 x i16>*
  %6168 = load <16 x i16>, <16 x i16>* %6167, align 2, !tbaa !399
  %6169 = add nsw i64 %5938, %.pre-phi3424
  %6170 = getelementptr inbounds i16, i16* %blur_x, i64 %6169
  %6171 = bitcast i16* %6170 to <16 x i16>*
  %6172 = load <16 x i16>, <16 x i16>* %6171, align 2, !tbaa !399
  %6173 = getelementptr inbounds i16, i16* %6170, i64 16
  %6174 = bitcast i16* %6173 to <16 x i16>*
  %6175 = load <16 x i16>, <16 x i16>* %6174, align 2, !tbaa !399
  %6176 = add nsw i64 %5941, %.pre-phi3424
  %6177 = getelementptr inbounds i16, i16* %blur_x, i64 %6176
  %6178 = bitcast i16* %6177 to <16 x i16>*
  %6179 = load <16 x i16>, <16 x i16>* %6178, align 2, !tbaa !399
  %6180 = getelementptr inbounds i16, i16* %6177, i64 16
  %6181 = bitcast i16* %6180 to <16 x i16>*
  %6182 = load <16 x i16>, <16 x i16>* %6181, align 2, !tbaa !399
  %6183 = add <16 x i16> %6158, %6151
  %6184 = add <16 x i16> %6183, %6165
  %6185 = add <16 x i16> %6184, %6172
  %6186 = add <16 x i16> %6185, %6179
  %6187 = add <16 x i16> %6161, %6154
  %6188 = add <16 x i16> %6187, %6168
  %6189 = add <16 x i16> %6188, %6175
  %6190 = add <16 x i16> %6189, %6182
  %6191 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6186, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6192 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6190, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6193 = shufflevector <16 x i16> %6191, <16 x i16> %6192, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6194 = lshr <32 x i16> %6193, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6195 = shufflevector <32 x i16> %6194, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6196 = add nsw i64 %5945, %.pre-phi3424
  %6197 = getelementptr inbounds i16, i16* %66, i64 %6196
  %6198 = bitcast i16* %6197 to <16 x i16>*
  store <16 x i16> %6195, <16 x i16>* %6198, align 2, !tbaa !401
  %6199 = shufflevector <32 x i16> %6194, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6200 = getelementptr inbounds i16, i16* %6197, i64 16
  %6201 = bitcast i16* %6200 to <16 x i16>*
  store <16 x i16> %6199, <16 x i16>* %6201, align 2, !tbaa !401
  %indvars.iv.next3186 = add nuw nsw i64 %indvars.iv3185, 1
  %.not2670 = icmp eq i64 %indvars.iv.next3186, %184
  br i1 %.not2670, label %"end for blur_y.s0.x.x.rebased317", label %"for blur_y.s0.x.x.rebased316"

"for blur_y.s0.x.x.rebased324":                   ; preds = %"for blur_y.s0.x.x.rebased324.preheader", %"consume blur_x332"
  %blur_y.s0.x.x.rebased326 = phi i32 [ %6314, %"consume blur_x332" ], [ 0, %"for blur_y.s0.x.x.rebased324.preheader" ]
  %6202 = add nsw i32 %blur_y.s0.x.x.rebased326, %t1626
  %a175 = shl nsw i32 %6202, 5
  %6203 = icmp sgt i32 %a14, %a175
  %b181 = select i1 %6203, i32 %a175, i32 %a14
  %6204 = icmp slt i32 %6202, 1
  %6205 = icmp sgt i32 %4, %a175
  %6206 = or i1 %6204, %6205
  br i1 %6206, label %"produce blur_x330", label %"consume blur_x332"

"end for blur_y.s0.x.x.rebased325":               ; preds = %"consume blur_x332", %"end for blur_y.s0.x.x.rebased317"
  br i1 %34, label %"produce blur_x336", label %after_bb333

"produce blur_x330":                              ; preds = %"for blur_y.s0.x.x.rebased324"
  %6207 = icmp slt i32 %b181, %4
  %blur_x.s0.x.v1.base.s331 = select i1 %6207, i32 %b181, i32 %4
  %t877 = add nsw i32 %blur_x.s0.x.v1.base.s331, %t1865
  %6208 = sext i32 %t877 to i64
  %6209 = getelementptr inbounds i16, i16* %read_input, i64 %6208
  %6210 = getelementptr inbounds i16, i16* %6209, i64 1
  %6211 = bitcast i16* %6210 to <16 x i16>*
  %6212 = load <16 x i16>, <16 x i16>* %6211, align 2, !tbaa !396
  %6213 = getelementptr inbounds i16, i16* %6209, i64 17
  %6214 = bitcast i16* %6213 to <16 x i16>*
  %6215 = load <16 x i16>, <16 x i16>* %6214, align 2, !tbaa !396
  %6216 = bitcast i16* %6209 to <16 x i16>*
  %6217 = load <16 x i16>, <16 x i16>* %6216, align 2, !tbaa !396
  %6218 = getelementptr inbounds i16, i16* %6209, i64 16
  %6219 = bitcast i16* %6218 to <16 x i16>*
  %6220 = load <16 x i16>, <16 x i16>* %6219, align 2, !tbaa !396
  %6221 = getelementptr inbounds i16, i16* %6209, i64 2
  %6222 = bitcast i16* %6221 to <16 x i16>*
  %6223 = load <16 x i16>, <16 x i16>* %6222, align 2, !tbaa !396
  %6224 = getelementptr inbounds i16, i16* %6209, i64 18
  %6225 = bitcast i16* %6224 to <16 x i16>*
  %6226 = load <16 x i16>, <16 x i16>* %6225, align 2, !tbaa !396
  %6227 = getelementptr inbounds i16, i16* %6209, i64 4
  %6228 = bitcast i16* %6227 to <16 x i16>*
  %6229 = load <16 x i16>, <16 x i16>* %6228, align 2, !tbaa !396
  %6230 = getelementptr inbounds i16, i16* %6209, i64 20
  %6231 = bitcast i16* %6230 to <16 x i16>*
  %6232 = load <16 x i16>, <16 x i16>* %6231, align 2, !tbaa !396
  %6233 = getelementptr inbounds i16, i16* %6209, i64 3
  %6234 = bitcast i16* %6233 to <16 x i16>*
  %6235 = load <16 x i16>, <16 x i16>* %6234, align 2, !tbaa !396
  %6236 = getelementptr inbounds i16, i16* %6209, i64 19
  %6237 = bitcast i16* %6236 to <16 x i16>*
  %6238 = load <16 x i16>, <16 x i16>* %6237, align 2, !tbaa !396
  %6239 = add <16 x i16> %6217, %6212
  %6240 = add <16 x i16> %6239, %6223
  %6241 = add <16 x i16> %6240, %6229
  %6242 = add <16 x i16> %6241, %6235
  %6243 = add <16 x i16> %6220, %6215
  %6244 = add <16 x i16> %6243, %6226
  %6245 = add <16 x i16> %6244, %6232
  %6246 = add <16 x i16> %6245, %6238
  %6247 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6242, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6248 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6246, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6249 = shufflevector <16 x i16> %6247, <16 x i16> %6248, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6250 = lshr <32 x i16> %6249, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6251 = shufflevector <32 x i16> %6250, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6252 = sext i32 %blur_x.s0.x.v1.base.s331 to i64
  %6253 = add nsw i64 %6252, %6077
  %6254 = getelementptr inbounds i16, i16* %blur_x, i64 %6253
  %6255 = bitcast i16* %6254 to <16 x i16>*
  store <16 x i16> %6251, <16 x i16>* %6255, align 2, !tbaa !399
  %6256 = shufflevector <32 x i16> %6250, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6257 = getelementptr inbounds i16, i16* %6254, i64 16
  %6258 = bitcast i16* %6257 to <16 x i16>*
  store <16 x i16> %6256, <16 x i16>* %6258, align 2, !tbaa !399
  br label %"consume blur_x332"

"consume blur_x332":                              ; preds = %"for blur_y.s0.x.x.rebased324", %"produce blur_x330"
  %6259 = sext i32 %b181 to i64
  %6260 = add nsw i64 %6080, %6259
  %6261 = getelementptr inbounds i16, i16* %blur_x, i64 %6260
  %6262 = bitcast i16* %6261 to <16 x i16>*
  %6263 = load <16 x i16>, <16 x i16>* %6262, align 2, !tbaa !399
  %6264 = getelementptr inbounds i16, i16* %6261, i64 16
  %6265 = bitcast i16* %6264 to <16 x i16>*
  %6266 = load <16 x i16>, <16 x i16>* %6265, align 2, !tbaa !399
  %6267 = add nsw i64 %6083, %6259
  %6268 = getelementptr inbounds i16, i16* %blur_x, i64 %6267
  %6269 = bitcast i16* %6268 to <16 x i16>*
  %6270 = load <16 x i16>, <16 x i16>* %6269, align 2, !tbaa !399
  %6271 = getelementptr inbounds i16, i16* %6268, i64 16
  %6272 = bitcast i16* %6271 to <16 x i16>*
  %6273 = load <16 x i16>, <16 x i16>* %6272, align 2, !tbaa !399
  %6274 = add nsw i64 %6086, %6259
  %6275 = getelementptr inbounds i16, i16* %blur_x, i64 %6274
  %6276 = bitcast i16* %6275 to <16 x i16>*
  %6277 = load <16 x i16>, <16 x i16>* %6276, align 2, !tbaa !399
  %6278 = getelementptr inbounds i16, i16* %6275, i64 16
  %6279 = bitcast i16* %6278 to <16 x i16>*
  %6280 = load <16 x i16>, <16 x i16>* %6279, align 2, !tbaa !399
  %6281 = add nsw i64 %6089, %6259
  %6282 = getelementptr inbounds i16, i16* %blur_x, i64 %6281
  %6283 = bitcast i16* %6282 to <16 x i16>*
  %6284 = load <16 x i16>, <16 x i16>* %6283, align 2, !tbaa !399
  %6285 = getelementptr inbounds i16, i16* %6282, i64 16
  %6286 = bitcast i16* %6285 to <16 x i16>*
  %6287 = load <16 x i16>, <16 x i16>* %6286, align 2, !tbaa !399
  %6288 = add nsw i64 %6092, %6259
  %6289 = getelementptr inbounds i16, i16* %blur_x, i64 %6288
  %6290 = bitcast i16* %6289 to <16 x i16>*
  %6291 = load <16 x i16>, <16 x i16>* %6290, align 2, !tbaa !399
  %6292 = getelementptr inbounds i16, i16* %6289, i64 16
  %6293 = bitcast i16* %6292 to <16 x i16>*
  %6294 = load <16 x i16>, <16 x i16>* %6293, align 2, !tbaa !399
  %6295 = add <16 x i16> %6270, %6263
  %6296 = add <16 x i16> %6295, %6277
  %6297 = add <16 x i16> %6296, %6284
  %6298 = add <16 x i16> %6297, %6291
  %6299 = add <16 x i16> %6273, %6266
  %6300 = add <16 x i16> %6299, %6280
  %6301 = add <16 x i16> %6300, %6287
  %6302 = add <16 x i16> %6301, %6294
  %6303 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6298, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6304 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6302, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6305 = shufflevector <16 x i16> %6303, <16 x i16> %6304, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6306 = lshr <32 x i16> %6305, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6307 = shufflevector <32 x i16> %6306, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6308 = add nsw i64 %6096, %6259
  %6309 = getelementptr inbounds i16, i16* %66, i64 %6308
  %6310 = bitcast i16* %6309 to <16 x i16>*
  store <16 x i16> %6307, <16 x i16>* %6310, align 2, !tbaa !401
  %6311 = shufflevector <32 x i16> %6306, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6312 = getelementptr inbounds i16, i16* %6309, i64 16
  %6313 = bitcast i16* %6312 to <16 x i16>*
  store <16 x i16> %6311, <16 x i16>* %6313, align 2, !tbaa !401
  %6314 = add nuw nsw i32 %blur_y.s0.x.x.rebased326, 1
  %.not2669 = icmp eq i32 %6314, %t1683
  br i1 %.not2669, label %"end for blur_y.s0.x.x.rebased325", label %"for blur_y.s0.x.x.rebased324"

after_bb333:                                      ; preds = %"end for blur_y.s0.x.x.rebased325", %"produce blur_x336"
  br i1 %100, label %"for blur_y.s0.x.x.rebased338.preheader", label %"end for blur_y.s0.x.x.rebased339", !prof !386

"for blur_y.s0.x.x.rebased338.preheader":         ; preds = %after_bb333
  %6315 = sext i32 %t1754 to i64
  %6316 = zext i32 %.pre-phi3390 to i64
  %6317 = mul nsw i64 %6316, %112
  %6318 = sub nsw i64 %6317, %96
  %6319 = zext i32 %.pre-phi3386 to i64
  %6320 = mul nsw i64 %6319, %112
  %6321 = sub nsw i64 %6320, %96
  %6322 = zext i32 %.pre-phi3396 to i64
  %6323 = mul nsw i64 %6322, %112
  %6324 = sub nsw i64 %6323, %96
  %6325 = zext i32 %.pre-phi3408 to i64
  %6326 = mul nsw i64 %6325, %112
  %6327 = sub nsw i64 %6326, %96
  %6328 = zext i32 %.pre-phi3402 to i64
  %6329 = mul nsw i64 %6328, %112
  %6330 = sub nsw i64 %6329, %96
  %6331 = sext i32 %a26 to i64
  %6332 = add nsw i64 %6331, 11
  %6333 = mul nsw i64 %6332, %113
  %6334 = add nsw i64 %6333, %116
  br label %"for blur_y.s0.x.x.rebased338"

"produce blur_x336":                              ; preds = %"end for blur_y.s0.x.x.rebased325"
  %6335 = getelementptr inbounds i16, i16* %read_input, i64 %137
  %6336 = getelementptr inbounds i16, i16* %6335, i64 -31
  %6337 = bitcast i16* %6336 to <16 x i16>*
  %6338 = load <16 x i16>, <16 x i16>* %6337, align 2, !tbaa !396
  %6339 = getelementptr inbounds i16, i16* %6335, i64 -15
  %6340 = bitcast i16* %6339 to <16 x i16>*
  %6341 = load <16 x i16>, <16 x i16>* %6340, align 2, !tbaa !396
  %6342 = getelementptr inbounds i16, i16* %6335, i64 -32
  %6343 = bitcast i16* %6342 to <16 x i16>*
  %6344 = load <16 x i16>, <16 x i16>* %6343, align 2, !tbaa !396
  %6345 = getelementptr inbounds i16, i16* %6335, i64 -16
  %6346 = bitcast i16* %6345 to <16 x i16>*
  %6347 = load <16 x i16>, <16 x i16>* %6346, align 2, !tbaa !396
  %6348 = getelementptr inbounds i16, i16* %6335, i64 -30
  %6349 = bitcast i16* %6348 to <16 x i16>*
  %6350 = load <16 x i16>, <16 x i16>* %6349, align 2, !tbaa !396
  %6351 = getelementptr inbounds i16, i16* %6335, i64 -14
  %6352 = bitcast i16* %6351 to <16 x i16>*
  %6353 = load <16 x i16>, <16 x i16>* %6352, align 2, !tbaa !396
  %6354 = getelementptr inbounds i16, i16* %6335, i64 -28
  %6355 = bitcast i16* %6354 to <16 x i16>*
  %6356 = load <16 x i16>, <16 x i16>* %6355, align 2, !tbaa !396
  %6357 = getelementptr inbounds i16, i16* %6335, i64 -12
  %6358 = bitcast i16* %6357 to <16 x i16>*
  %6359 = load <16 x i16>, <16 x i16>* %6358, align 2, !tbaa !396
  %6360 = getelementptr inbounds i16, i16* %6335, i64 -29
  %6361 = bitcast i16* %6360 to <16 x i16>*
  %6362 = load <16 x i16>, <16 x i16>* %6361, align 2, !tbaa !396
  %6363 = getelementptr inbounds i16, i16* %6335, i64 -13
  %6364 = bitcast i16* %6363 to <16 x i16>*
  %6365 = load <16 x i16>, <16 x i16>* %6364, align 2, !tbaa !396
  %6366 = add <16 x i16> %6344, %6338
  %6367 = add <16 x i16> %6366, %6350
  %6368 = add <16 x i16> %6367, %6356
  %6369 = add <16 x i16> %6368, %6362
  %6370 = add <16 x i16> %6347, %6341
  %6371 = add <16 x i16> %6370, %6353
  %6372 = add <16 x i16> %6371, %6359
  %6373 = add <16 x i16> %6372, %6365
  %6374 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6369, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6375 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6373, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6376 = shufflevector <16 x i16> %6374, <16 x i16> %6375, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6377 = lshr <32 x i16> %6376, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6378 = shufflevector <32 x i16> %6377, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6379 = zext i32 %.pre-phi3408 to i64
  %6380 = mul nsw i64 %97, %6379
  %6381 = add nsw i64 %99, %6380
  %6382 = getelementptr inbounds i16, i16* %blur_x, i64 %6381
  %6383 = getelementptr inbounds i16, i16* %6382, i64 -32
  %6384 = bitcast i16* %6383 to <16 x i16>*
  store <16 x i16> %6378, <16 x i16>* %6384, align 2, !tbaa !399
  %6385 = shufflevector <32 x i16> %6377, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6386 = getelementptr inbounds i16, i16* %6382, i64 -16
  %6387 = bitcast i16* %6386 to <16 x i16>*
  store <16 x i16> %6385, <16 x i16>* %6387, align 2, !tbaa !399
  %6388 = zext i32 %.pre-phi3390 to i64
  %6389 = mul nsw i64 %6388, %112
  %6390 = add nsw i64 %6389, %94
  %6391 = getelementptr inbounds i16, i16* %blur_x, i64 %6390
  %6392 = getelementptr inbounds i16, i16* %6391, i64 -32
  %6393 = bitcast i16* %6392 to <16 x i16>*
  %6394 = load <16 x i16>, <16 x i16>* %6393, align 2, !tbaa !399
  %6395 = getelementptr inbounds i16, i16* %6391, i64 -16
  %6396 = bitcast i16* %6395 to <16 x i16>*
  %6397 = load <16 x i16>, <16 x i16>* %6396, align 2, !tbaa !399
  %6398 = zext i32 %.pre-phi3386 to i64
  %6399 = mul nsw i64 %6398, %112
  %6400 = add nsw i64 %6399, %94
  %6401 = getelementptr inbounds i16, i16* %blur_x, i64 %6400
  %6402 = getelementptr inbounds i16, i16* %6401, i64 -32
  %6403 = bitcast i16* %6402 to <16 x i16>*
  %6404 = load <16 x i16>, <16 x i16>* %6403, align 2, !tbaa !399
  %6405 = getelementptr inbounds i16, i16* %6401, i64 -16
  %6406 = bitcast i16* %6405 to <16 x i16>*
  %6407 = load <16 x i16>, <16 x i16>* %6406, align 2, !tbaa !399
  %6408 = zext i32 %.pre-phi3396 to i64
  %6409 = mul nsw i64 %6408, %112
  %6410 = add nsw i64 %6409, %94
  %6411 = getelementptr inbounds i16, i16* %blur_x, i64 %6410
  %6412 = getelementptr inbounds i16, i16* %6411, i64 -32
  %6413 = bitcast i16* %6412 to <16 x i16>*
  %6414 = load <16 x i16>, <16 x i16>* %6413, align 2, !tbaa !399
  %6415 = getelementptr inbounds i16, i16* %6411, i64 -16
  %6416 = bitcast i16* %6415 to <16 x i16>*
  %6417 = load <16 x i16>, <16 x i16>* %6416, align 2, !tbaa !399
  %6418 = mul nsw i64 %6379, %112
  %6419 = add nsw i64 %6418, %94
  %6420 = getelementptr inbounds i16, i16* %blur_x, i64 %6419
  %6421 = getelementptr inbounds i16, i16* %6420, i64 -32
  %6422 = bitcast i16* %6421 to <16 x i16>*
  %6423 = load <16 x i16>, <16 x i16>* %6422, align 2, !tbaa !399
  %6424 = getelementptr inbounds i16, i16* %6420, i64 -16
  %6425 = bitcast i16* %6424 to <16 x i16>*
  %6426 = load <16 x i16>, <16 x i16>* %6425, align 2, !tbaa !399
  %6427 = zext i32 %.pre-phi3402 to i64
  %6428 = mul nsw i64 %6427, %112
  %6429 = add nsw i64 %6428, %94
  %6430 = getelementptr inbounds i16, i16* %blur_x, i64 %6429
  %6431 = getelementptr inbounds i16, i16* %6430, i64 -32
  %6432 = bitcast i16* %6431 to <16 x i16>*
  %6433 = load <16 x i16>, <16 x i16>* %6432, align 2, !tbaa !399
  %6434 = getelementptr inbounds i16, i16* %6430, i64 -16
  %6435 = bitcast i16* %6434 to <16 x i16>*
  %6436 = load <16 x i16>, <16 x i16>* %6435, align 2, !tbaa !399
  %6437 = add <16 x i16> %6404, %6394
  %6438 = add <16 x i16> %6437, %6414
  %6439 = add <16 x i16> %6438, %6423
  %6440 = add <16 x i16> %6439, %6433
  %6441 = add <16 x i16> %6407, %6397
  %6442 = add <16 x i16> %6441, %6417
  %6443 = add <16 x i16> %6442, %6426
  %6444 = add <16 x i16> %6443, %6436
  %6445 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6440, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6446 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6444, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6447 = shufflevector <16 x i16> %6445, <16 x i16> %6446, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6448 = lshr <32 x i16> %6447, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6449 = shufflevector <32 x i16> %6448, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6450 = sext i32 %a26 to i64
  %6451 = add nsw i64 %6450, 11
  %6452 = mul nsw i64 %6451, %113
  %6453 = add nsw i64 %115, %6452
  %6454 = getelementptr inbounds i16, i16* %66, i64 %6453
  %6455 = getelementptr inbounds i16, i16* %6454, i64 -32
  %6456 = bitcast i16* %6455 to <16 x i16>*
  store <16 x i16> %6449, <16 x i16>* %6456, align 2, !tbaa !401
  %6457 = shufflevector <32 x i16> %6448, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6458 = getelementptr inbounds i16, i16* %6454, i64 -16
  %6459 = bitcast i16* %6458 to <16 x i16>*
  store <16 x i16> %6457, <16 x i16>* %6459, align 2, !tbaa !401
  br label %after_bb333

"for blur_y.s0.x.x.rebased338":                   ; preds = %"for blur_y.s0.x.x.rebased338.preheader", %"consume blur_x345"
  %indvars.iv3188 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased338.preheader" ], [ %indvars.iv.next3189, %"consume blur_x345" ]
  %6460 = add nsw i64 %indvars.iv3188, %101
  %6461 = icmp slt i64 %6460, 1
  %6462 = trunc i64 %6460 to i32
  %6463 = shl nsw i32 %6462, 5
  %6464 = icmp sgt i32 %4, %6463
  %6465 = or i1 %6461, %6464
  br i1 %6465, label %"produce blur_x344", label %"for blur_y.s0.x.x.rebased338.consume blur_x345_crit_edge"

"for blur_y.s0.x.x.rebased338.consume blur_x345_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased338"
  %.pre3425 = shl nsw i64 %6460, 5
  br label %"consume blur_x345"

"end for blur_y.s0.x.x.rebased339":               ; preds = %"consume blur_x345", %after_bb333
  br i1 %102, label %"for blur_y.s0.x.x.rebased346.preheader", label %"end for blur_y.s0.x.x.rebased347", !prof !386

"for blur_y.s0.x.x.rebased346.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased339"
  %6466 = sext i32 %t1754 to i64
  %6467 = zext i32 %.pre-phi3390 to i64
  %6468 = mul nsw i64 %6467, %112
  %6469 = sub nsw i64 %6468, %96
  %6470 = zext i32 %.pre-phi3386 to i64
  %6471 = mul nsw i64 %6470, %112
  %6472 = sub nsw i64 %6471, %96
  %6473 = zext i32 %.pre-phi3396 to i64
  %6474 = mul nsw i64 %6473, %112
  %6475 = sub nsw i64 %6474, %96
  %6476 = zext i32 %.pre-phi3408 to i64
  %6477 = mul nsw i64 %6476, %112
  %6478 = sub nsw i64 %6477, %96
  %6479 = zext i32 %.pre-phi3402 to i64
  %6480 = mul nsw i64 %6479, %112
  %6481 = sub nsw i64 %6480, %96
  %6482 = sext i32 %a26 to i64
  %6483 = add nsw i64 %6482, 11
  %6484 = mul nsw i64 %6483, %113
  %6485 = add nsw i64 %6484, %116
  br label %"for blur_y.s0.x.x.rebased346"

"produce blur_x344":                              ; preds = %"for blur_y.s0.x.x.rebased338"
  %t888 = add nsw i32 %6463, %t1881
  %6486 = sext i32 %t888 to i64
  %6487 = getelementptr inbounds i16, i16* %read_input, i64 %6486
  %6488 = getelementptr inbounds i16, i16* %6487, i64 1
  %6489 = bitcast i16* %6488 to <16 x i16>*
  %6490 = load <16 x i16>, <16 x i16>* %6489, align 2, !tbaa !396
  %6491 = getelementptr inbounds i16, i16* %6487, i64 17
  %6492 = bitcast i16* %6491 to <16 x i16>*
  %6493 = load <16 x i16>, <16 x i16>* %6492, align 2, !tbaa !396
  %6494 = bitcast i16* %6487 to <16 x i16>*
  %6495 = load <16 x i16>, <16 x i16>* %6494, align 2, !tbaa !396
  %6496 = getelementptr inbounds i16, i16* %6487, i64 16
  %6497 = bitcast i16* %6496 to <16 x i16>*
  %6498 = load <16 x i16>, <16 x i16>* %6497, align 2, !tbaa !396
  %6499 = getelementptr inbounds i16, i16* %6487, i64 2
  %6500 = bitcast i16* %6499 to <16 x i16>*
  %6501 = load <16 x i16>, <16 x i16>* %6500, align 2, !tbaa !396
  %6502 = getelementptr inbounds i16, i16* %6487, i64 18
  %6503 = bitcast i16* %6502 to <16 x i16>*
  %6504 = load <16 x i16>, <16 x i16>* %6503, align 2, !tbaa !396
  %6505 = getelementptr inbounds i16, i16* %6487, i64 4
  %6506 = bitcast i16* %6505 to <16 x i16>*
  %6507 = load <16 x i16>, <16 x i16>* %6506, align 2, !tbaa !396
  %6508 = getelementptr inbounds i16, i16* %6487, i64 20
  %6509 = bitcast i16* %6508 to <16 x i16>*
  %6510 = load <16 x i16>, <16 x i16>* %6509, align 2, !tbaa !396
  %6511 = getelementptr inbounds i16, i16* %6487, i64 3
  %6512 = bitcast i16* %6511 to <16 x i16>*
  %6513 = load <16 x i16>, <16 x i16>* %6512, align 2, !tbaa !396
  %6514 = getelementptr inbounds i16, i16* %6487, i64 19
  %6515 = bitcast i16* %6514 to <16 x i16>*
  %6516 = load <16 x i16>, <16 x i16>* %6515, align 2, !tbaa !396
  %6517 = add <16 x i16> %6495, %6490
  %6518 = add <16 x i16> %6517, %6501
  %6519 = add <16 x i16> %6518, %6507
  %6520 = add <16 x i16> %6519, %6513
  %6521 = add <16 x i16> %6498, %6493
  %6522 = add <16 x i16> %6521, %6504
  %6523 = add <16 x i16> %6522, %6510
  %6524 = add <16 x i16> %6523, %6516
  %6525 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6520, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6526 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6524, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6527 = shufflevector <16 x i16> %6525, <16 x i16> %6526, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6528 = lshr <32 x i16> %6527, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6529 = shufflevector <32 x i16> %6528, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6530 = shl nsw i64 %6460, 5
  %6531 = add nsw i64 %6530, %6315
  %6532 = getelementptr inbounds i16, i16* %blur_x, i64 %6531
  %6533 = bitcast i16* %6532 to <16 x i16>*
  store <16 x i16> %6529, <16 x i16>* %6533, align 2, !tbaa !399
  %6534 = shufflevector <32 x i16> %6528, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6535 = getelementptr inbounds i16, i16* %6532, i64 16
  %6536 = bitcast i16* %6535 to <16 x i16>*
  store <16 x i16> %6534, <16 x i16>* %6536, align 2, !tbaa !399
  br label %"consume blur_x345"

"consume blur_x345":                              ; preds = %"for blur_y.s0.x.x.rebased338.consume blur_x345_crit_edge", %"produce blur_x344"
  %.pre-phi3426 = phi i64 [ %.pre3425, %"for blur_y.s0.x.x.rebased338.consume blur_x345_crit_edge" ], [ %6530, %"produce blur_x344" ]
  %6537 = add nsw i64 %6318, %.pre-phi3426
  %6538 = getelementptr inbounds i16, i16* %blur_x, i64 %6537
  %6539 = bitcast i16* %6538 to <16 x i16>*
  %6540 = load <16 x i16>, <16 x i16>* %6539, align 2, !tbaa !399
  %6541 = getelementptr inbounds i16, i16* %6538, i64 16
  %6542 = bitcast i16* %6541 to <16 x i16>*
  %6543 = load <16 x i16>, <16 x i16>* %6542, align 2, !tbaa !399
  %6544 = add nsw i64 %6321, %.pre-phi3426
  %6545 = getelementptr inbounds i16, i16* %blur_x, i64 %6544
  %6546 = bitcast i16* %6545 to <16 x i16>*
  %6547 = load <16 x i16>, <16 x i16>* %6546, align 2, !tbaa !399
  %6548 = getelementptr inbounds i16, i16* %6545, i64 16
  %6549 = bitcast i16* %6548 to <16 x i16>*
  %6550 = load <16 x i16>, <16 x i16>* %6549, align 2, !tbaa !399
  %6551 = add nsw i64 %6324, %.pre-phi3426
  %6552 = getelementptr inbounds i16, i16* %blur_x, i64 %6551
  %6553 = bitcast i16* %6552 to <16 x i16>*
  %6554 = load <16 x i16>, <16 x i16>* %6553, align 2, !tbaa !399
  %6555 = getelementptr inbounds i16, i16* %6552, i64 16
  %6556 = bitcast i16* %6555 to <16 x i16>*
  %6557 = load <16 x i16>, <16 x i16>* %6556, align 2, !tbaa !399
  %6558 = add nsw i64 %6327, %.pre-phi3426
  %6559 = getelementptr inbounds i16, i16* %blur_x, i64 %6558
  %6560 = bitcast i16* %6559 to <16 x i16>*
  %6561 = load <16 x i16>, <16 x i16>* %6560, align 2, !tbaa !399
  %6562 = getelementptr inbounds i16, i16* %6559, i64 16
  %6563 = bitcast i16* %6562 to <16 x i16>*
  %6564 = load <16 x i16>, <16 x i16>* %6563, align 2, !tbaa !399
  %6565 = add nsw i64 %6330, %.pre-phi3426
  %6566 = getelementptr inbounds i16, i16* %blur_x, i64 %6565
  %6567 = bitcast i16* %6566 to <16 x i16>*
  %6568 = load <16 x i16>, <16 x i16>* %6567, align 2, !tbaa !399
  %6569 = getelementptr inbounds i16, i16* %6566, i64 16
  %6570 = bitcast i16* %6569 to <16 x i16>*
  %6571 = load <16 x i16>, <16 x i16>* %6570, align 2, !tbaa !399
  %6572 = add <16 x i16> %6547, %6540
  %6573 = add <16 x i16> %6572, %6554
  %6574 = add <16 x i16> %6573, %6561
  %6575 = add <16 x i16> %6574, %6568
  %6576 = add <16 x i16> %6550, %6543
  %6577 = add <16 x i16> %6576, %6557
  %6578 = add <16 x i16> %6577, %6564
  %6579 = add <16 x i16> %6578, %6571
  %6580 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6575, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6581 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6579, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6582 = shufflevector <16 x i16> %6580, <16 x i16> %6581, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6583 = lshr <32 x i16> %6582, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6584 = shufflevector <32 x i16> %6583, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6585 = add nsw i64 %6334, %.pre-phi3426
  %6586 = getelementptr inbounds i16, i16* %66, i64 %6585
  %6587 = bitcast i16* %6586 to <16 x i16>*
  store <16 x i16> %6584, <16 x i16>* %6587, align 2, !tbaa !401
  %6588 = shufflevector <32 x i16> %6583, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6589 = getelementptr inbounds i16, i16* %6586, i64 16
  %6590 = bitcast i16* %6589 to <16 x i16>*
  store <16 x i16> %6588, <16 x i16>* %6590, align 2, !tbaa !401
  %indvars.iv.next3189 = add nuw nsw i64 %indvars.iv3188, 1
  %.not2668 = icmp eq i64 %indvars.iv.next3189, %184
  br i1 %.not2668, label %"end for blur_y.s0.x.x.rebased339", label %"for blur_y.s0.x.x.rebased338"

"for blur_y.s0.x.x.rebased346":                   ; preds = %"for blur_y.s0.x.x.rebased346.preheader", %"consume blur_x354"
  %blur_y.s0.x.x.rebased348 = phi i32 [ %6703, %"consume blur_x354" ], [ 0, %"for blur_y.s0.x.x.rebased346.preheader" ]
  %6591 = add nsw i32 %blur_y.s0.x.x.rebased348, %t1626
  %a182 = shl nsw i32 %6591, 5
  %6592 = icmp sgt i32 %a14, %a182
  %b188 = select i1 %6592, i32 %a182, i32 %a14
  %6593 = icmp slt i32 %6591, 1
  %6594 = icmp sgt i32 %4, %a182
  %6595 = or i1 %6593, %6594
  br i1 %6595, label %"produce blur_x352", label %"consume blur_x354"

"end for blur_y.s0.x.x.rebased347":               ; preds = %"consume blur_x354", %"end for blur_y.s0.x.x.rebased339"
  br i1 %34, label %"produce blur_x358", label %after_bb355

"produce blur_x352":                              ; preds = %"for blur_y.s0.x.x.rebased346"
  %6596 = icmp slt i32 %b188, %4
  %blur_x.s0.x.v1.base.s353 = select i1 %6596, i32 %b188, i32 %4
  %t893 = add nsw i32 %blur_x.s0.x.v1.base.s353, %t1881
  %6597 = sext i32 %t893 to i64
  %6598 = getelementptr inbounds i16, i16* %read_input, i64 %6597
  %6599 = getelementptr inbounds i16, i16* %6598, i64 1
  %6600 = bitcast i16* %6599 to <16 x i16>*
  %6601 = load <16 x i16>, <16 x i16>* %6600, align 2, !tbaa !396
  %6602 = getelementptr inbounds i16, i16* %6598, i64 17
  %6603 = bitcast i16* %6602 to <16 x i16>*
  %6604 = load <16 x i16>, <16 x i16>* %6603, align 2, !tbaa !396
  %6605 = bitcast i16* %6598 to <16 x i16>*
  %6606 = load <16 x i16>, <16 x i16>* %6605, align 2, !tbaa !396
  %6607 = getelementptr inbounds i16, i16* %6598, i64 16
  %6608 = bitcast i16* %6607 to <16 x i16>*
  %6609 = load <16 x i16>, <16 x i16>* %6608, align 2, !tbaa !396
  %6610 = getelementptr inbounds i16, i16* %6598, i64 2
  %6611 = bitcast i16* %6610 to <16 x i16>*
  %6612 = load <16 x i16>, <16 x i16>* %6611, align 2, !tbaa !396
  %6613 = getelementptr inbounds i16, i16* %6598, i64 18
  %6614 = bitcast i16* %6613 to <16 x i16>*
  %6615 = load <16 x i16>, <16 x i16>* %6614, align 2, !tbaa !396
  %6616 = getelementptr inbounds i16, i16* %6598, i64 4
  %6617 = bitcast i16* %6616 to <16 x i16>*
  %6618 = load <16 x i16>, <16 x i16>* %6617, align 2, !tbaa !396
  %6619 = getelementptr inbounds i16, i16* %6598, i64 20
  %6620 = bitcast i16* %6619 to <16 x i16>*
  %6621 = load <16 x i16>, <16 x i16>* %6620, align 2, !tbaa !396
  %6622 = getelementptr inbounds i16, i16* %6598, i64 3
  %6623 = bitcast i16* %6622 to <16 x i16>*
  %6624 = load <16 x i16>, <16 x i16>* %6623, align 2, !tbaa !396
  %6625 = getelementptr inbounds i16, i16* %6598, i64 19
  %6626 = bitcast i16* %6625 to <16 x i16>*
  %6627 = load <16 x i16>, <16 x i16>* %6626, align 2, !tbaa !396
  %6628 = add <16 x i16> %6606, %6601
  %6629 = add <16 x i16> %6628, %6612
  %6630 = add <16 x i16> %6629, %6618
  %6631 = add <16 x i16> %6630, %6624
  %6632 = add <16 x i16> %6609, %6604
  %6633 = add <16 x i16> %6632, %6615
  %6634 = add <16 x i16> %6633, %6621
  %6635 = add <16 x i16> %6634, %6627
  %6636 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6631, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6637 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6635, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6638 = shufflevector <16 x i16> %6636, <16 x i16> %6637, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6639 = lshr <32 x i16> %6638, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6640 = shufflevector <32 x i16> %6639, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6641 = sext i32 %blur_x.s0.x.v1.base.s353 to i64
  %6642 = add nsw i64 %6641, %6466
  %6643 = getelementptr inbounds i16, i16* %blur_x, i64 %6642
  %6644 = bitcast i16* %6643 to <16 x i16>*
  store <16 x i16> %6640, <16 x i16>* %6644, align 2, !tbaa !399
  %6645 = shufflevector <32 x i16> %6639, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6646 = getelementptr inbounds i16, i16* %6643, i64 16
  %6647 = bitcast i16* %6646 to <16 x i16>*
  store <16 x i16> %6645, <16 x i16>* %6647, align 2, !tbaa !399
  br label %"consume blur_x354"

"consume blur_x354":                              ; preds = %"for blur_y.s0.x.x.rebased346", %"produce blur_x352"
  %6648 = sext i32 %b188 to i64
  %6649 = add nsw i64 %6469, %6648
  %6650 = getelementptr inbounds i16, i16* %blur_x, i64 %6649
  %6651 = bitcast i16* %6650 to <16 x i16>*
  %6652 = load <16 x i16>, <16 x i16>* %6651, align 2, !tbaa !399
  %6653 = getelementptr inbounds i16, i16* %6650, i64 16
  %6654 = bitcast i16* %6653 to <16 x i16>*
  %6655 = load <16 x i16>, <16 x i16>* %6654, align 2, !tbaa !399
  %6656 = add nsw i64 %6472, %6648
  %6657 = getelementptr inbounds i16, i16* %blur_x, i64 %6656
  %6658 = bitcast i16* %6657 to <16 x i16>*
  %6659 = load <16 x i16>, <16 x i16>* %6658, align 2, !tbaa !399
  %6660 = getelementptr inbounds i16, i16* %6657, i64 16
  %6661 = bitcast i16* %6660 to <16 x i16>*
  %6662 = load <16 x i16>, <16 x i16>* %6661, align 2, !tbaa !399
  %6663 = add nsw i64 %6475, %6648
  %6664 = getelementptr inbounds i16, i16* %blur_x, i64 %6663
  %6665 = bitcast i16* %6664 to <16 x i16>*
  %6666 = load <16 x i16>, <16 x i16>* %6665, align 2, !tbaa !399
  %6667 = getelementptr inbounds i16, i16* %6664, i64 16
  %6668 = bitcast i16* %6667 to <16 x i16>*
  %6669 = load <16 x i16>, <16 x i16>* %6668, align 2, !tbaa !399
  %6670 = add nsw i64 %6478, %6648
  %6671 = getelementptr inbounds i16, i16* %blur_x, i64 %6670
  %6672 = bitcast i16* %6671 to <16 x i16>*
  %6673 = load <16 x i16>, <16 x i16>* %6672, align 2, !tbaa !399
  %6674 = getelementptr inbounds i16, i16* %6671, i64 16
  %6675 = bitcast i16* %6674 to <16 x i16>*
  %6676 = load <16 x i16>, <16 x i16>* %6675, align 2, !tbaa !399
  %6677 = add nsw i64 %6481, %6648
  %6678 = getelementptr inbounds i16, i16* %blur_x, i64 %6677
  %6679 = bitcast i16* %6678 to <16 x i16>*
  %6680 = load <16 x i16>, <16 x i16>* %6679, align 2, !tbaa !399
  %6681 = getelementptr inbounds i16, i16* %6678, i64 16
  %6682 = bitcast i16* %6681 to <16 x i16>*
  %6683 = load <16 x i16>, <16 x i16>* %6682, align 2, !tbaa !399
  %6684 = add <16 x i16> %6659, %6652
  %6685 = add <16 x i16> %6684, %6666
  %6686 = add <16 x i16> %6685, %6673
  %6687 = add <16 x i16> %6686, %6680
  %6688 = add <16 x i16> %6662, %6655
  %6689 = add <16 x i16> %6688, %6669
  %6690 = add <16 x i16> %6689, %6676
  %6691 = add <16 x i16> %6690, %6683
  %6692 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6687, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6693 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6691, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6694 = shufflevector <16 x i16> %6692, <16 x i16> %6693, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6695 = lshr <32 x i16> %6694, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6696 = shufflevector <32 x i16> %6695, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6697 = add nsw i64 %6485, %6648
  %6698 = getelementptr inbounds i16, i16* %66, i64 %6697
  %6699 = bitcast i16* %6698 to <16 x i16>*
  store <16 x i16> %6696, <16 x i16>* %6699, align 2, !tbaa !401
  %6700 = shufflevector <32 x i16> %6695, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6701 = getelementptr inbounds i16, i16* %6698, i64 16
  %6702 = bitcast i16* %6701 to <16 x i16>*
  store <16 x i16> %6700, <16 x i16>* %6702, align 2, !tbaa !401
  %6703 = add nuw nsw i32 %blur_y.s0.x.x.rebased348, 1
  %.not2667 = icmp eq i32 %6703, %t1683
  br i1 %.not2667, label %"end for blur_y.s0.x.x.rebased347", label %"for blur_y.s0.x.x.rebased346"

after_bb355:                                      ; preds = %"end for blur_y.s0.x.x.rebased347", %"produce blur_x358"
  br i1 %100, label %"for blur_y.s0.x.x.rebased360.preheader", label %"end for blur_y.s0.x.x.rebased361", !prof !386

"for blur_y.s0.x.x.rebased360.preheader":         ; preds = %after_bb355
  %6704 = sext i32 %t1682 to i64
  %6705 = zext i32 %.pre-phi3396 to i64
  %6706 = mul nsw i64 %6705, %112
  %6707 = sub nsw i64 %6706, %96
  %6708 = zext i32 %.pre-phi3390 to i64
  %6709 = mul nsw i64 %6708, %112
  %6710 = sub nsw i64 %6709, %96
  %6711 = zext i32 %.pre-phi3402 to i64
  %6712 = mul nsw i64 %6711, %112
  %6713 = sub nsw i64 %6712, %96
  %6714 = zext i32 %.pre-phi to i64
  %6715 = mul nsw i64 %6714, %112
  %6716 = sub nsw i64 %6715, %96
  %6717 = zext i32 %.pre-phi3408 to i64
  %6718 = mul nsw i64 %6717, %112
  %6719 = sub nsw i64 %6718, %96
  %6720 = sext i32 %a26 to i64
  %6721 = add nsw i64 %6720, 12
  %6722 = mul nsw i64 %6721, %113
  %6723 = add nsw i64 %6722, %116
  br label %"for blur_y.s0.x.x.rebased360"

"produce blur_x358":                              ; preds = %"end for blur_y.s0.x.x.rebased347"
  %6724 = getelementptr inbounds i16, i16* %read_input, i64 %139
  %6725 = getelementptr inbounds i16, i16* %6724, i64 -31
  %6726 = bitcast i16* %6725 to <16 x i16>*
  %6727 = load <16 x i16>, <16 x i16>* %6726, align 2, !tbaa !396
  %6728 = getelementptr inbounds i16, i16* %6724, i64 -15
  %6729 = bitcast i16* %6728 to <16 x i16>*
  %6730 = load <16 x i16>, <16 x i16>* %6729, align 2, !tbaa !396
  %6731 = getelementptr inbounds i16, i16* %6724, i64 -32
  %6732 = bitcast i16* %6731 to <16 x i16>*
  %6733 = load <16 x i16>, <16 x i16>* %6732, align 2, !tbaa !396
  %6734 = getelementptr inbounds i16, i16* %6724, i64 -16
  %6735 = bitcast i16* %6734 to <16 x i16>*
  %6736 = load <16 x i16>, <16 x i16>* %6735, align 2, !tbaa !396
  %6737 = getelementptr inbounds i16, i16* %6724, i64 -30
  %6738 = bitcast i16* %6737 to <16 x i16>*
  %6739 = load <16 x i16>, <16 x i16>* %6738, align 2, !tbaa !396
  %6740 = getelementptr inbounds i16, i16* %6724, i64 -14
  %6741 = bitcast i16* %6740 to <16 x i16>*
  %6742 = load <16 x i16>, <16 x i16>* %6741, align 2, !tbaa !396
  %6743 = getelementptr inbounds i16, i16* %6724, i64 -28
  %6744 = bitcast i16* %6743 to <16 x i16>*
  %6745 = load <16 x i16>, <16 x i16>* %6744, align 2, !tbaa !396
  %6746 = getelementptr inbounds i16, i16* %6724, i64 -12
  %6747 = bitcast i16* %6746 to <16 x i16>*
  %6748 = load <16 x i16>, <16 x i16>* %6747, align 2, !tbaa !396
  %6749 = getelementptr inbounds i16, i16* %6724, i64 -29
  %6750 = bitcast i16* %6749 to <16 x i16>*
  %6751 = load <16 x i16>, <16 x i16>* %6750, align 2, !tbaa !396
  %6752 = getelementptr inbounds i16, i16* %6724, i64 -13
  %6753 = bitcast i16* %6752 to <16 x i16>*
  %6754 = load <16 x i16>, <16 x i16>* %6753, align 2, !tbaa !396
  %6755 = add <16 x i16> %6733, %6727
  %6756 = add <16 x i16> %6755, %6739
  %6757 = add <16 x i16> %6756, %6745
  %6758 = add <16 x i16> %6757, %6751
  %6759 = add <16 x i16> %6736, %6730
  %6760 = add <16 x i16> %6759, %6742
  %6761 = add <16 x i16> %6760, %6748
  %6762 = add <16 x i16> %6761, %6754
  %6763 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6758, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6764 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6762, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6765 = shufflevector <16 x i16> %6763, <16 x i16> %6764, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6766 = lshr <32 x i16> %6765, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6767 = shufflevector <32 x i16> %6766, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6768 = zext i32 %.pre-phi to i64
  %6769 = mul nsw i64 %97, %6768
  %6770 = add nsw i64 %99, %6769
  %6771 = getelementptr inbounds i16, i16* %blur_x, i64 %6770
  %6772 = getelementptr inbounds i16, i16* %6771, i64 -32
  %6773 = bitcast i16* %6772 to <16 x i16>*
  store <16 x i16> %6767, <16 x i16>* %6773, align 2, !tbaa !399
  %6774 = shufflevector <32 x i16> %6766, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6775 = getelementptr inbounds i16, i16* %6771, i64 -16
  %6776 = bitcast i16* %6775 to <16 x i16>*
  store <16 x i16> %6774, <16 x i16>* %6776, align 2, !tbaa !399
  %6777 = zext i32 %.pre-phi3396 to i64
  %6778 = mul nsw i64 %6777, %112
  %6779 = add nsw i64 %6778, %94
  %6780 = getelementptr inbounds i16, i16* %blur_x, i64 %6779
  %6781 = getelementptr inbounds i16, i16* %6780, i64 -32
  %6782 = bitcast i16* %6781 to <16 x i16>*
  %6783 = load <16 x i16>, <16 x i16>* %6782, align 2, !tbaa !399
  %6784 = getelementptr inbounds i16, i16* %6780, i64 -16
  %6785 = bitcast i16* %6784 to <16 x i16>*
  %6786 = load <16 x i16>, <16 x i16>* %6785, align 2, !tbaa !399
  %6787 = zext i32 %.pre-phi3390 to i64
  %6788 = mul nsw i64 %6787, %112
  %6789 = add nsw i64 %6788, %94
  %6790 = getelementptr inbounds i16, i16* %blur_x, i64 %6789
  %6791 = getelementptr inbounds i16, i16* %6790, i64 -32
  %6792 = bitcast i16* %6791 to <16 x i16>*
  %6793 = load <16 x i16>, <16 x i16>* %6792, align 2, !tbaa !399
  %6794 = getelementptr inbounds i16, i16* %6790, i64 -16
  %6795 = bitcast i16* %6794 to <16 x i16>*
  %6796 = load <16 x i16>, <16 x i16>* %6795, align 2, !tbaa !399
  %6797 = zext i32 %.pre-phi3402 to i64
  %6798 = mul nsw i64 %6797, %112
  %6799 = add nsw i64 %6798, %94
  %6800 = getelementptr inbounds i16, i16* %blur_x, i64 %6799
  %6801 = getelementptr inbounds i16, i16* %6800, i64 -32
  %6802 = bitcast i16* %6801 to <16 x i16>*
  %6803 = load <16 x i16>, <16 x i16>* %6802, align 2, !tbaa !399
  %6804 = getelementptr inbounds i16, i16* %6800, i64 -16
  %6805 = bitcast i16* %6804 to <16 x i16>*
  %6806 = load <16 x i16>, <16 x i16>* %6805, align 2, !tbaa !399
  %6807 = mul nsw i64 %6768, %112
  %6808 = add nsw i64 %6807, %94
  %6809 = getelementptr inbounds i16, i16* %blur_x, i64 %6808
  %6810 = getelementptr inbounds i16, i16* %6809, i64 -32
  %6811 = bitcast i16* %6810 to <16 x i16>*
  %6812 = load <16 x i16>, <16 x i16>* %6811, align 2, !tbaa !399
  %6813 = getelementptr inbounds i16, i16* %6809, i64 -16
  %6814 = bitcast i16* %6813 to <16 x i16>*
  %6815 = load <16 x i16>, <16 x i16>* %6814, align 2, !tbaa !399
  %6816 = zext i32 %.pre-phi3408 to i64
  %6817 = mul nsw i64 %6816, %112
  %6818 = add nsw i64 %6817, %94
  %6819 = getelementptr inbounds i16, i16* %blur_x, i64 %6818
  %6820 = getelementptr inbounds i16, i16* %6819, i64 -32
  %6821 = bitcast i16* %6820 to <16 x i16>*
  %6822 = load <16 x i16>, <16 x i16>* %6821, align 2, !tbaa !399
  %6823 = getelementptr inbounds i16, i16* %6819, i64 -16
  %6824 = bitcast i16* %6823 to <16 x i16>*
  %6825 = load <16 x i16>, <16 x i16>* %6824, align 2, !tbaa !399
  %6826 = add <16 x i16> %6793, %6783
  %6827 = add <16 x i16> %6826, %6803
  %6828 = add <16 x i16> %6827, %6812
  %6829 = add <16 x i16> %6828, %6822
  %6830 = add <16 x i16> %6796, %6786
  %6831 = add <16 x i16> %6830, %6806
  %6832 = add <16 x i16> %6831, %6815
  %6833 = add <16 x i16> %6832, %6825
  %6834 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6829, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6835 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6833, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6836 = shufflevector <16 x i16> %6834, <16 x i16> %6835, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6837 = lshr <32 x i16> %6836, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6838 = shufflevector <32 x i16> %6837, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6839 = sext i32 %a26 to i64
  %6840 = add nsw i64 %6839, 12
  %6841 = mul nsw i64 %6840, %113
  %6842 = add nsw i64 %115, %6841
  %6843 = getelementptr inbounds i16, i16* %66, i64 %6842
  %6844 = getelementptr inbounds i16, i16* %6843, i64 -32
  %6845 = bitcast i16* %6844 to <16 x i16>*
  store <16 x i16> %6838, <16 x i16>* %6845, align 2, !tbaa !401
  %6846 = shufflevector <32 x i16> %6837, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6847 = getelementptr inbounds i16, i16* %6843, i64 -16
  %6848 = bitcast i16* %6847 to <16 x i16>*
  store <16 x i16> %6846, <16 x i16>* %6848, align 2, !tbaa !401
  br label %after_bb355

"for blur_y.s0.x.x.rebased360":                   ; preds = %"for blur_y.s0.x.x.rebased360.preheader", %"consume blur_x367"
  %indvars.iv3191 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased360.preheader" ], [ %indvars.iv.next3192, %"consume blur_x367" ]
  %6849 = add nsw i64 %indvars.iv3191, %101
  %6850 = icmp slt i64 %6849, 1
  %6851 = trunc i64 %6849 to i32
  %6852 = shl nsw i32 %6851, 5
  %6853 = icmp sgt i32 %4, %6852
  %6854 = or i1 %6850, %6853
  br i1 %6854, label %"produce blur_x366", label %"for blur_y.s0.x.x.rebased360.consume blur_x367_crit_edge"

"for blur_y.s0.x.x.rebased360.consume blur_x367_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased360"
  %.pre3427 = shl nsw i64 %6849, 5
  br label %"consume blur_x367"

"end for blur_y.s0.x.x.rebased361":               ; preds = %"consume blur_x367", %after_bb355
  br i1 %102, label %"for blur_y.s0.x.x.rebased368.preheader", label %"end for blur_y.s0.x.x.rebased369", !prof !386

"for blur_y.s0.x.x.rebased368.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased361"
  %6855 = sext i32 %t1682 to i64
  %6856 = zext i32 %.pre-phi3396 to i64
  %6857 = mul nsw i64 %6856, %112
  %6858 = sub nsw i64 %6857, %96
  %6859 = zext i32 %.pre-phi3390 to i64
  %6860 = mul nsw i64 %6859, %112
  %6861 = sub nsw i64 %6860, %96
  %6862 = zext i32 %.pre-phi3402 to i64
  %6863 = mul nsw i64 %6862, %112
  %6864 = sub nsw i64 %6863, %96
  %6865 = zext i32 %.pre-phi to i64
  %6866 = mul nsw i64 %6865, %112
  %6867 = sub nsw i64 %6866, %96
  %6868 = zext i32 %.pre-phi3408 to i64
  %6869 = mul nsw i64 %6868, %112
  %6870 = sub nsw i64 %6869, %96
  %6871 = sext i32 %a26 to i64
  %6872 = add nsw i64 %6871, 12
  %6873 = mul nsw i64 %6872, %113
  %6874 = add nsw i64 %6873, %116
  br label %"for blur_y.s0.x.x.rebased368"

"produce blur_x366":                              ; preds = %"for blur_y.s0.x.x.rebased360"
  %t904 = add nsw i32 %6852, %t1897
  %6875 = sext i32 %t904 to i64
  %6876 = getelementptr inbounds i16, i16* %read_input, i64 %6875
  %6877 = getelementptr inbounds i16, i16* %6876, i64 1
  %6878 = bitcast i16* %6877 to <16 x i16>*
  %6879 = load <16 x i16>, <16 x i16>* %6878, align 2, !tbaa !396
  %6880 = getelementptr inbounds i16, i16* %6876, i64 17
  %6881 = bitcast i16* %6880 to <16 x i16>*
  %6882 = load <16 x i16>, <16 x i16>* %6881, align 2, !tbaa !396
  %6883 = bitcast i16* %6876 to <16 x i16>*
  %6884 = load <16 x i16>, <16 x i16>* %6883, align 2, !tbaa !396
  %6885 = getelementptr inbounds i16, i16* %6876, i64 16
  %6886 = bitcast i16* %6885 to <16 x i16>*
  %6887 = load <16 x i16>, <16 x i16>* %6886, align 2, !tbaa !396
  %6888 = getelementptr inbounds i16, i16* %6876, i64 2
  %6889 = bitcast i16* %6888 to <16 x i16>*
  %6890 = load <16 x i16>, <16 x i16>* %6889, align 2, !tbaa !396
  %6891 = getelementptr inbounds i16, i16* %6876, i64 18
  %6892 = bitcast i16* %6891 to <16 x i16>*
  %6893 = load <16 x i16>, <16 x i16>* %6892, align 2, !tbaa !396
  %6894 = getelementptr inbounds i16, i16* %6876, i64 4
  %6895 = bitcast i16* %6894 to <16 x i16>*
  %6896 = load <16 x i16>, <16 x i16>* %6895, align 2, !tbaa !396
  %6897 = getelementptr inbounds i16, i16* %6876, i64 20
  %6898 = bitcast i16* %6897 to <16 x i16>*
  %6899 = load <16 x i16>, <16 x i16>* %6898, align 2, !tbaa !396
  %6900 = getelementptr inbounds i16, i16* %6876, i64 3
  %6901 = bitcast i16* %6900 to <16 x i16>*
  %6902 = load <16 x i16>, <16 x i16>* %6901, align 2, !tbaa !396
  %6903 = getelementptr inbounds i16, i16* %6876, i64 19
  %6904 = bitcast i16* %6903 to <16 x i16>*
  %6905 = load <16 x i16>, <16 x i16>* %6904, align 2, !tbaa !396
  %6906 = add <16 x i16> %6884, %6879
  %6907 = add <16 x i16> %6906, %6890
  %6908 = add <16 x i16> %6907, %6896
  %6909 = add <16 x i16> %6908, %6902
  %6910 = add <16 x i16> %6887, %6882
  %6911 = add <16 x i16> %6910, %6893
  %6912 = add <16 x i16> %6911, %6899
  %6913 = add <16 x i16> %6912, %6905
  %6914 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6909, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6915 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6913, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6916 = shufflevector <16 x i16> %6914, <16 x i16> %6915, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6917 = lshr <32 x i16> %6916, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6918 = shufflevector <32 x i16> %6917, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6919 = shl nsw i64 %6849, 5
  %6920 = add nsw i64 %6919, %6704
  %6921 = getelementptr inbounds i16, i16* %blur_x, i64 %6920
  %6922 = bitcast i16* %6921 to <16 x i16>*
  store <16 x i16> %6918, <16 x i16>* %6922, align 2, !tbaa !399
  %6923 = shufflevector <32 x i16> %6917, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6924 = getelementptr inbounds i16, i16* %6921, i64 16
  %6925 = bitcast i16* %6924 to <16 x i16>*
  store <16 x i16> %6923, <16 x i16>* %6925, align 2, !tbaa !399
  br label %"consume blur_x367"

"consume blur_x367":                              ; preds = %"for blur_y.s0.x.x.rebased360.consume blur_x367_crit_edge", %"produce blur_x366"
  %.pre-phi3428 = phi i64 [ %.pre3427, %"for blur_y.s0.x.x.rebased360.consume blur_x367_crit_edge" ], [ %6919, %"produce blur_x366" ]
  %6926 = add nsw i64 %6707, %.pre-phi3428
  %6927 = getelementptr inbounds i16, i16* %blur_x, i64 %6926
  %6928 = bitcast i16* %6927 to <16 x i16>*
  %6929 = load <16 x i16>, <16 x i16>* %6928, align 2, !tbaa !399
  %6930 = getelementptr inbounds i16, i16* %6927, i64 16
  %6931 = bitcast i16* %6930 to <16 x i16>*
  %6932 = load <16 x i16>, <16 x i16>* %6931, align 2, !tbaa !399
  %6933 = add nsw i64 %6710, %.pre-phi3428
  %6934 = getelementptr inbounds i16, i16* %blur_x, i64 %6933
  %6935 = bitcast i16* %6934 to <16 x i16>*
  %6936 = load <16 x i16>, <16 x i16>* %6935, align 2, !tbaa !399
  %6937 = getelementptr inbounds i16, i16* %6934, i64 16
  %6938 = bitcast i16* %6937 to <16 x i16>*
  %6939 = load <16 x i16>, <16 x i16>* %6938, align 2, !tbaa !399
  %6940 = add nsw i64 %6713, %.pre-phi3428
  %6941 = getelementptr inbounds i16, i16* %blur_x, i64 %6940
  %6942 = bitcast i16* %6941 to <16 x i16>*
  %6943 = load <16 x i16>, <16 x i16>* %6942, align 2, !tbaa !399
  %6944 = getelementptr inbounds i16, i16* %6941, i64 16
  %6945 = bitcast i16* %6944 to <16 x i16>*
  %6946 = load <16 x i16>, <16 x i16>* %6945, align 2, !tbaa !399
  %6947 = add nsw i64 %6716, %.pre-phi3428
  %6948 = getelementptr inbounds i16, i16* %blur_x, i64 %6947
  %6949 = bitcast i16* %6948 to <16 x i16>*
  %6950 = load <16 x i16>, <16 x i16>* %6949, align 2, !tbaa !399
  %6951 = getelementptr inbounds i16, i16* %6948, i64 16
  %6952 = bitcast i16* %6951 to <16 x i16>*
  %6953 = load <16 x i16>, <16 x i16>* %6952, align 2, !tbaa !399
  %6954 = add nsw i64 %6719, %.pre-phi3428
  %6955 = getelementptr inbounds i16, i16* %blur_x, i64 %6954
  %6956 = bitcast i16* %6955 to <16 x i16>*
  %6957 = load <16 x i16>, <16 x i16>* %6956, align 2, !tbaa !399
  %6958 = getelementptr inbounds i16, i16* %6955, i64 16
  %6959 = bitcast i16* %6958 to <16 x i16>*
  %6960 = load <16 x i16>, <16 x i16>* %6959, align 2, !tbaa !399
  %6961 = add <16 x i16> %6936, %6929
  %6962 = add <16 x i16> %6961, %6943
  %6963 = add <16 x i16> %6962, %6950
  %6964 = add <16 x i16> %6963, %6957
  %6965 = add <16 x i16> %6939, %6932
  %6966 = add <16 x i16> %6965, %6946
  %6967 = add <16 x i16> %6966, %6953
  %6968 = add <16 x i16> %6967, %6960
  %6969 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6964, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6970 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6968, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %6971 = shufflevector <16 x i16> %6969, <16 x i16> %6970, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6972 = lshr <32 x i16> %6971, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %6973 = shufflevector <32 x i16> %6972, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6974 = add nsw i64 %6723, %.pre-phi3428
  %6975 = getelementptr inbounds i16, i16* %66, i64 %6974
  %6976 = bitcast i16* %6975 to <16 x i16>*
  store <16 x i16> %6973, <16 x i16>* %6976, align 2, !tbaa !401
  %6977 = shufflevector <32 x i16> %6972, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6978 = getelementptr inbounds i16, i16* %6975, i64 16
  %6979 = bitcast i16* %6978 to <16 x i16>*
  store <16 x i16> %6977, <16 x i16>* %6979, align 2, !tbaa !401
  %indvars.iv.next3192 = add nuw nsw i64 %indvars.iv3191, 1
  %.not2666 = icmp eq i64 %indvars.iv.next3192, %184
  br i1 %.not2666, label %"end for blur_y.s0.x.x.rebased361", label %"for blur_y.s0.x.x.rebased360"

"for blur_y.s0.x.x.rebased368":                   ; preds = %"for blur_y.s0.x.x.rebased368.preheader", %"consume blur_x376"
  %blur_y.s0.x.x.rebased370 = phi i32 [ %7092, %"consume blur_x376" ], [ 0, %"for blur_y.s0.x.x.rebased368.preheader" ]
  %6980 = add nsw i32 %blur_y.s0.x.x.rebased370, %t1626
  %a189 = shl nsw i32 %6980, 5
  %6981 = icmp sgt i32 %a14, %a189
  %b195 = select i1 %6981, i32 %a189, i32 %a14
  %6982 = icmp slt i32 %6980, 1
  %6983 = icmp sgt i32 %4, %a189
  %6984 = or i1 %6982, %6983
  br i1 %6984, label %"produce blur_x374", label %"consume blur_x376"

"end for blur_y.s0.x.x.rebased369":               ; preds = %"consume blur_x376", %"end for blur_y.s0.x.x.rebased361"
  br i1 %34, label %"produce blur_x380", label %after_bb377

"produce blur_x374":                              ; preds = %"for blur_y.s0.x.x.rebased368"
  %6985 = icmp slt i32 %b195, %4
  %blur_x.s0.x.v1.base.s375 = select i1 %6985, i32 %b195, i32 %4
  %t909 = add nsw i32 %blur_x.s0.x.v1.base.s375, %t1897
  %6986 = sext i32 %t909 to i64
  %6987 = getelementptr inbounds i16, i16* %read_input, i64 %6986
  %6988 = getelementptr inbounds i16, i16* %6987, i64 1
  %6989 = bitcast i16* %6988 to <16 x i16>*
  %6990 = load <16 x i16>, <16 x i16>* %6989, align 2, !tbaa !396
  %6991 = getelementptr inbounds i16, i16* %6987, i64 17
  %6992 = bitcast i16* %6991 to <16 x i16>*
  %6993 = load <16 x i16>, <16 x i16>* %6992, align 2, !tbaa !396
  %6994 = bitcast i16* %6987 to <16 x i16>*
  %6995 = load <16 x i16>, <16 x i16>* %6994, align 2, !tbaa !396
  %6996 = getelementptr inbounds i16, i16* %6987, i64 16
  %6997 = bitcast i16* %6996 to <16 x i16>*
  %6998 = load <16 x i16>, <16 x i16>* %6997, align 2, !tbaa !396
  %6999 = getelementptr inbounds i16, i16* %6987, i64 2
  %7000 = bitcast i16* %6999 to <16 x i16>*
  %7001 = load <16 x i16>, <16 x i16>* %7000, align 2, !tbaa !396
  %7002 = getelementptr inbounds i16, i16* %6987, i64 18
  %7003 = bitcast i16* %7002 to <16 x i16>*
  %7004 = load <16 x i16>, <16 x i16>* %7003, align 2, !tbaa !396
  %7005 = getelementptr inbounds i16, i16* %6987, i64 4
  %7006 = bitcast i16* %7005 to <16 x i16>*
  %7007 = load <16 x i16>, <16 x i16>* %7006, align 2, !tbaa !396
  %7008 = getelementptr inbounds i16, i16* %6987, i64 20
  %7009 = bitcast i16* %7008 to <16 x i16>*
  %7010 = load <16 x i16>, <16 x i16>* %7009, align 2, !tbaa !396
  %7011 = getelementptr inbounds i16, i16* %6987, i64 3
  %7012 = bitcast i16* %7011 to <16 x i16>*
  %7013 = load <16 x i16>, <16 x i16>* %7012, align 2, !tbaa !396
  %7014 = getelementptr inbounds i16, i16* %6987, i64 19
  %7015 = bitcast i16* %7014 to <16 x i16>*
  %7016 = load <16 x i16>, <16 x i16>* %7015, align 2, !tbaa !396
  %7017 = add <16 x i16> %6995, %6990
  %7018 = add <16 x i16> %7017, %7001
  %7019 = add <16 x i16> %7018, %7007
  %7020 = add <16 x i16> %7019, %7013
  %7021 = add <16 x i16> %6998, %6993
  %7022 = add <16 x i16> %7021, %7004
  %7023 = add <16 x i16> %7022, %7010
  %7024 = add <16 x i16> %7023, %7016
  %7025 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7020, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7026 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7024, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7027 = shufflevector <16 x i16> %7025, <16 x i16> %7026, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7028 = lshr <32 x i16> %7027, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7029 = shufflevector <32 x i16> %7028, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7030 = sext i32 %blur_x.s0.x.v1.base.s375 to i64
  %7031 = add nsw i64 %7030, %6855
  %7032 = getelementptr inbounds i16, i16* %blur_x, i64 %7031
  %7033 = bitcast i16* %7032 to <16 x i16>*
  store <16 x i16> %7029, <16 x i16>* %7033, align 2, !tbaa !399
  %7034 = shufflevector <32 x i16> %7028, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7035 = getelementptr inbounds i16, i16* %7032, i64 16
  %7036 = bitcast i16* %7035 to <16 x i16>*
  store <16 x i16> %7034, <16 x i16>* %7036, align 2, !tbaa !399
  br label %"consume blur_x376"

"consume blur_x376":                              ; preds = %"for blur_y.s0.x.x.rebased368", %"produce blur_x374"
  %7037 = sext i32 %b195 to i64
  %7038 = add nsw i64 %6858, %7037
  %7039 = getelementptr inbounds i16, i16* %blur_x, i64 %7038
  %7040 = bitcast i16* %7039 to <16 x i16>*
  %7041 = load <16 x i16>, <16 x i16>* %7040, align 2, !tbaa !399
  %7042 = getelementptr inbounds i16, i16* %7039, i64 16
  %7043 = bitcast i16* %7042 to <16 x i16>*
  %7044 = load <16 x i16>, <16 x i16>* %7043, align 2, !tbaa !399
  %7045 = add nsw i64 %6861, %7037
  %7046 = getelementptr inbounds i16, i16* %blur_x, i64 %7045
  %7047 = bitcast i16* %7046 to <16 x i16>*
  %7048 = load <16 x i16>, <16 x i16>* %7047, align 2, !tbaa !399
  %7049 = getelementptr inbounds i16, i16* %7046, i64 16
  %7050 = bitcast i16* %7049 to <16 x i16>*
  %7051 = load <16 x i16>, <16 x i16>* %7050, align 2, !tbaa !399
  %7052 = add nsw i64 %6864, %7037
  %7053 = getelementptr inbounds i16, i16* %blur_x, i64 %7052
  %7054 = bitcast i16* %7053 to <16 x i16>*
  %7055 = load <16 x i16>, <16 x i16>* %7054, align 2, !tbaa !399
  %7056 = getelementptr inbounds i16, i16* %7053, i64 16
  %7057 = bitcast i16* %7056 to <16 x i16>*
  %7058 = load <16 x i16>, <16 x i16>* %7057, align 2, !tbaa !399
  %7059 = add nsw i64 %6867, %7037
  %7060 = getelementptr inbounds i16, i16* %blur_x, i64 %7059
  %7061 = bitcast i16* %7060 to <16 x i16>*
  %7062 = load <16 x i16>, <16 x i16>* %7061, align 2, !tbaa !399
  %7063 = getelementptr inbounds i16, i16* %7060, i64 16
  %7064 = bitcast i16* %7063 to <16 x i16>*
  %7065 = load <16 x i16>, <16 x i16>* %7064, align 2, !tbaa !399
  %7066 = add nsw i64 %6870, %7037
  %7067 = getelementptr inbounds i16, i16* %blur_x, i64 %7066
  %7068 = bitcast i16* %7067 to <16 x i16>*
  %7069 = load <16 x i16>, <16 x i16>* %7068, align 2, !tbaa !399
  %7070 = getelementptr inbounds i16, i16* %7067, i64 16
  %7071 = bitcast i16* %7070 to <16 x i16>*
  %7072 = load <16 x i16>, <16 x i16>* %7071, align 2, !tbaa !399
  %7073 = add <16 x i16> %7048, %7041
  %7074 = add <16 x i16> %7073, %7055
  %7075 = add <16 x i16> %7074, %7062
  %7076 = add <16 x i16> %7075, %7069
  %7077 = add <16 x i16> %7051, %7044
  %7078 = add <16 x i16> %7077, %7058
  %7079 = add <16 x i16> %7078, %7065
  %7080 = add <16 x i16> %7079, %7072
  %7081 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7076, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7082 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7080, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7083 = shufflevector <16 x i16> %7081, <16 x i16> %7082, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7084 = lshr <32 x i16> %7083, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7085 = shufflevector <32 x i16> %7084, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7086 = add nsw i64 %6874, %7037
  %7087 = getelementptr inbounds i16, i16* %66, i64 %7086
  %7088 = bitcast i16* %7087 to <16 x i16>*
  store <16 x i16> %7085, <16 x i16>* %7088, align 2, !tbaa !401
  %7089 = shufflevector <32 x i16> %7084, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7090 = getelementptr inbounds i16, i16* %7087, i64 16
  %7091 = bitcast i16* %7090 to <16 x i16>*
  store <16 x i16> %7089, <16 x i16>* %7091, align 2, !tbaa !401
  %7092 = add nuw nsw i32 %blur_y.s0.x.x.rebased370, 1
  %.not2665 = icmp eq i32 %7092, %t1683
  br i1 %.not2665, label %"end for blur_y.s0.x.x.rebased369", label %"for blur_y.s0.x.x.rebased368"

after_bb377:                                      ; preds = %"end for blur_y.s0.x.x.rebased369", %"produce blur_x380"
  br i1 %100, label %"for blur_y.s0.x.x.rebased382.preheader", label %"end for blur_y.s0.x.x.rebased383", !prof !386

"for blur_y.s0.x.x.rebased382.preheader":         ; preds = %after_bb377
  %7093 = sext i32 %t1688 to i64
  %7094 = zext i32 %.pre-phi3402 to i64
  %7095 = mul nsw i64 %7094, %112
  %7096 = sub nsw i64 %7095, %96
  %7097 = zext i32 %.pre-phi3396 to i64
  %7098 = mul nsw i64 %7097, %112
  %7099 = sub nsw i64 %7098, %96
  %7100 = zext i32 %.pre-phi3408 to i64
  %7101 = mul nsw i64 %7100, %112
  %7102 = sub nsw i64 %7101, %96
  %7103 = zext i32 %.pre-phi3378 to i64
  %7104 = mul nsw i64 %7103, %112
  %7105 = sub nsw i64 %7104, %96
  %7106 = zext i32 %.pre-phi to i64
  %7107 = mul nsw i64 %7106, %112
  %7108 = sub nsw i64 %7107, %96
  %7109 = sext i32 %a26 to i64
  %7110 = add nsw i64 %7109, 13
  %7111 = mul nsw i64 %7110, %113
  %7112 = add nsw i64 %7111, %116
  br label %"for blur_y.s0.x.x.rebased382"

"produce blur_x380":                              ; preds = %"end for blur_y.s0.x.x.rebased369"
  %7113 = getelementptr inbounds i16, i16* %read_input, i64 %141
  %7114 = getelementptr inbounds i16, i16* %7113, i64 -31
  %7115 = bitcast i16* %7114 to <16 x i16>*
  %7116 = load <16 x i16>, <16 x i16>* %7115, align 2, !tbaa !396
  %7117 = getelementptr inbounds i16, i16* %7113, i64 -15
  %7118 = bitcast i16* %7117 to <16 x i16>*
  %7119 = load <16 x i16>, <16 x i16>* %7118, align 2, !tbaa !396
  %7120 = getelementptr inbounds i16, i16* %7113, i64 -32
  %7121 = bitcast i16* %7120 to <16 x i16>*
  %7122 = load <16 x i16>, <16 x i16>* %7121, align 2, !tbaa !396
  %7123 = getelementptr inbounds i16, i16* %7113, i64 -16
  %7124 = bitcast i16* %7123 to <16 x i16>*
  %7125 = load <16 x i16>, <16 x i16>* %7124, align 2, !tbaa !396
  %7126 = getelementptr inbounds i16, i16* %7113, i64 -30
  %7127 = bitcast i16* %7126 to <16 x i16>*
  %7128 = load <16 x i16>, <16 x i16>* %7127, align 2, !tbaa !396
  %7129 = getelementptr inbounds i16, i16* %7113, i64 -14
  %7130 = bitcast i16* %7129 to <16 x i16>*
  %7131 = load <16 x i16>, <16 x i16>* %7130, align 2, !tbaa !396
  %7132 = getelementptr inbounds i16, i16* %7113, i64 -28
  %7133 = bitcast i16* %7132 to <16 x i16>*
  %7134 = load <16 x i16>, <16 x i16>* %7133, align 2, !tbaa !396
  %7135 = getelementptr inbounds i16, i16* %7113, i64 -12
  %7136 = bitcast i16* %7135 to <16 x i16>*
  %7137 = load <16 x i16>, <16 x i16>* %7136, align 2, !tbaa !396
  %7138 = getelementptr inbounds i16, i16* %7113, i64 -29
  %7139 = bitcast i16* %7138 to <16 x i16>*
  %7140 = load <16 x i16>, <16 x i16>* %7139, align 2, !tbaa !396
  %7141 = getelementptr inbounds i16, i16* %7113, i64 -13
  %7142 = bitcast i16* %7141 to <16 x i16>*
  %7143 = load <16 x i16>, <16 x i16>* %7142, align 2, !tbaa !396
  %7144 = add <16 x i16> %7122, %7116
  %7145 = add <16 x i16> %7144, %7128
  %7146 = add <16 x i16> %7145, %7134
  %7147 = add <16 x i16> %7146, %7140
  %7148 = add <16 x i16> %7125, %7119
  %7149 = add <16 x i16> %7148, %7131
  %7150 = add <16 x i16> %7149, %7137
  %7151 = add <16 x i16> %7150, %7143
  %7152 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7147, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7153 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7151, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7154 = shufflevector <16 x i16> %7152, <16 x i16> %7153, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7155 = lshr <32 x i16> %7154, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7156 = shufflevector <32 x i16> %7155, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7157 = zext i32 %.pre-phi3378 to i64
  %7158 = mul nsw i64 %97, %7157
  %7159 = add nsw i64 %99, %7158
  %7160 = getelementptr inbounds i16, i16* %blur_x, i64 %7159
  %7161 = getelementptr inbounds i16, i16* %7160, i64 -32
  %7162 = bitcast i16* %7161 to <16 x i16>*
  store <16 x i16> %7156, <16 x i16>* %7162, align 2, !tbaa !399
  %7163 = shufflevector <32 x i16> %7155, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7164 = getelementptr inbounds i16, i16* %7160, i64 -16
  %7165 = bitcast i16* %7164 to <16 x i16>*
  store <16 x i16> %7163, <16 x i16>* %7165, align 2, !tbaa !399
  %7166 = zext i32 %.pre-phi3402 to i64
  %7167 = mul nsw i64 %7166, %112
  %7168 = add nsw i64 %7167, %94
  %7169 = getelementptr inbounds i16, i16* %blur_x, i64 %7168
  %7170 = getelementptr inbounds i16, i16* %7169, i64 -32
  %7171 = bitcast i16* %7170 to <16 x i16>*
  %7172 = load <16 x i16>, <16 x i16>* %7171, align 2, !tbaa !399
  %7173 = getelementptr inbounds i16, i16* %7169, i64 -16
  %7174 = bitcast i16* %7173 to <16 x i16>*
  %7175 = load <16 x i16>, <16 x i16>* %7174, align 2, !tbaa !399
  %7176 = zext i32 %.pre-phi3396 to i64
  %7177 = mul nsw i64 %7176, %112
  %7178 = add nsw i64 %7177, %94
  %7179 = getelementptr inbounds i16, i16* %blur_x, i64 %7178
  %7180 = getelementptr inbounds i16, i16* %7179, i64 -32
  %7181 = bitcast i16* %7180 to <16 x i16>*
  %7182 = load <16 x i16>, <16 x i16>* %7181, align 2, !tbaa !399
  %7183 = getelementptr inbounds i16, i16* %7179, i64 -16
  %7184 = bitcast i16* %7183 to <16 x i16>*
  %7185 = load <16 x i16>, <16 x i16>* %7184, align 2, !tbaa !399
  %7186 = zext i32 %.pre-phi3408 to i64
  %7187 = mul nsw i64 %7186, %112
  %7188 = add nsw i64 %7187, %94
  %7189 = getelementptr inbounds i16, i16* %blur_x, i64 %7188
  %7190 = getelementptr inbounds i16, i16* %7189, i64 -32
  %7191 = bitcast i16* %7190 to <16 x i16>*
  %7192 = load <16 x i16>, <16 x i16>* %7191, align 2, !tbaa !399
  %7193 = getelementptr inbounds i16, i16* %7189, i64 -16
  %7194 = bitcast i16* %7193 to <16 x i16>*
  %7195 = load <16 x i16>, <16 x i16>* %7194, align 2, !tbaa !399
  %7196 = mul nsw i64 %7157, %112
  %7197 = add nsw i64 %7196, %94
  %7198 = getelementptr inbounds i16, i16* %blur_x, i64 %7197
  %7199 = getelementptr inbounds i16, i16* %7198, i64 -32
  %7200 = bitcast i16* %7199 to <16 x i16>*
  %7201 = load <16 x i16>, <16 x i16>* %7200, align 2, !tbaa !399
  %7202 = getelementptr inbounds i16, i16* %7198, i64 -16
  %7203 = bitcast i16* %7202 to <16 x i16>*
  %7204 = load <16 x i16>, <16 x i16>* %7203, align 2, !tbaa !399
  %7205 = zext i32 %.pre-phi to i64
  %7206 = mul nsw i64 %7205, %112
  %7207 = add nsw i64 %7206, %94
  %7208 = getelementptr inbounds i16, i16* %blur_x, i64 %7207
  %7209 = getelementptr inbounds i16, i16* %7208, i64 -32
  %7210 = bitcast i16* %7209 to <16 x i16>*
  %7211 = load <16 x i16>, <16 x i16>* %7210, align 2, !tbaa !399
  %7212 = getelementptr inbounds i16, i16* %7208, i64 -16
  %7213 = bitcast i16* %7212 to <16 x i16>*
  %7214 = load <16 x i16>, <16 x i16>* %7213, align 2, !tbaa !399
  %7215 = add <16 x i16> %7182, %7172
  %7216 = add <16 x i16> %7215, %7192
  %7217 = add <16 x i16> %7216, %7201
  %7218 = add <16 x i16> %7217, %7211
  %7219 = add <16 x i16> %7185, %7175
  %7220 = add <16 x i16> %7219, %7195
  %7221 = add <16 x i16> %7220, %7204
  %7222 = add <16 x i16> %7221, %7214
  %7223 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7218, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7224 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7222, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7225 = shufflevector <16 x i16> %7223, <16 x i16> %7224, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7226 = lshr <32 x i16> %7225, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7227 = shufflevector <32 x i16> %7226, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7228 = sext i32 %a26 to i64
  %7229 = add nsw i64 %7228, 13
  %7230 = mul nsw i64 %7229, %113
  %7231 = add nsw i64 %115, %7230
  %7232 = getelementptr inbounds i16, i16* %66, i64 %7231
  %7233 = getelementptr inbounds i16, i16* %7232, i64 -32
  %7234 = bitcast i16* %7233 to <16 x i16>*
  store <16 x i16> %7227, <16 x i16>* %7234, align 2, !tbaa !401
  %7235 = shufflevector <32 x i16> %7226, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7236 = getelementptr inbounds i16, i16* %7232, i64 -16
  %7237 = bitcast i16* %7236 to <16 x i16>*
  store <16 x i16> %7235, <16 x i16>* %7237, align 2, !tbaa !401
  br label %after_bb377

"for blur_y.s0.x.x.rebased382":                   ; preds = %"for blur_y.s0.x.x.rebased382.preheader", %"consume blur_x389"
  %indvars.iv3194 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased382.preheader" ], [ %indvars.iv.next3195, %"consume blur_x389" ]
  %7238 = add nsw i64 %indvars.iv3194, %101
  %7239 = icmp slt i64 %7238, 1
  %7240 = trunc i64 %7238 to i32
  %7241 = shl nsw i32 %7240, 5
  %7242 = icmp sgt i32 %4, %7241
  %7243 = or i1 %7239, %7242
  br i1 %7243, label %"produce blur_x388", label %"for blur_y.s0.x.x.rebased382.consume blur_x389_crit_edge"

"for blur_y.s0.x.x.rebased382.consume blur_x389_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased382"
  %.pre3429 = shl nsw i64 %7238, 5
  br label %"consume blur_x389"

"end for blur_y.s0.x.x.rebased383":               ; preds = %"consume blur_x389", %after_bb377
  br i1 %102, label %"for blur_y.s0.x.x.rebased390.preheader", label %"end for blur_y.s0.x.x.rebased391", !prof !386

"for blur_y.s0.x.x.rebased390.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased383"
  %7244 = sext i32 %t1688 to i64
  %7245 = zext i32 %.pre-phi3402 to i64
  %7246 = mul nsw i64 %7245, %112
  %7247 = sub nsw i64 %7246, %96
  %7248 = zext i32 %.pre-phi3396 to i64
  %7249 = mul nsw i64 %7248, %112
  %7250 = sub nsw i64 %7249, %96
  %7251 = zext i32 %.pre-phi3408 to i64
  %7252 = mul nsw i64 %7251, %112
  %7253 = sub nsw i64 %7252, %96
  %7254 = zext i32 %.pre-phi3378 to i64
  %7255 = mul nsw i64 %7254, %112
  %7256 = sub nsw i64 %7255, %96
  %7257 = zext i32 %.pre-phi to i64
  %7258 = mul nsw i64 %7257, %112
  %7259 = sub nsw i64 %7258, %96
  %7260 = sext i32 %a26 to i64
  %7261 = add nsw i64 %7260, 13
  %7262 = mul nsw i64 %7261, %113
  %7263 = add nsw i64 %7262, %116
  br label %"for blur_y.s0.x.x.rebased390"

"produce blur_x388":                              ; preds = %"for blur_y.s0.x.x.rebased382"
  %t920 = add nsw i32 %7241, %t1913
  %7264 = sext i32 %t920 to i64
  %7265 = getelementptr inbounds i16, i16* %read_input, i64 %7264
  %7266 = getelementptr inbounds i16, i16* %7265, i64 1
  %7267 = bitcast i16* %7266 to <16 x i16>*
  %7268 = load <16 x i16>, <16 x i16>* %7267, align 2, !tbaa !396
  %7269 = getelementptr inbounds i16, i16* %7265, i64 17
  %7270 = bitcast i16* %7269 to <16 x i16>*
  %7271 = load <16 x i16>, <16 x i16>* %7270, align 2, !tbaa !396
  %7272 = bitcast i16* %7265 to <16 x i16>*
  %7273 = load <16 x i16>, <16 x i16>* %7272, align 2, !tbaa !396
  %7274 = getelementptr inbounds i16, i16* %7265, i64 16
  %7275 = bitcast i16* %7274 to <16 x i16>*
  %7276 = load <16 x i16>, <16 x i16>* %7275, align 2, !tbaa !396
  %7277 = getelementptr inbounds i16, i16* %7265, i64 2
  %7278 = bitcast i16* %7277 to <16 x i16>*
  %7279 = load <16 x i16>, <16 x i16>* %7278, align 2, !tbaa !396
  %7280 = getelementptr inbounds i16, i16* %7265, i64 18
  %7281 = bitcast i16* %7280 to <16 x i16>*
  %7282 = load <16 x i16>, <16 x i16>* %7281, align 2, !tbaa !396
  %7283 = getelementptr inbounds i16, i16* %7265, i64 4
  %7284 = bitcast i16* %7283 to <16 x i16>*
  %7285 = load <16 x i16>, <16 x i16>* %7284, align 2, !tbaa !396
  %7286 = getelementptr inbounds i16, i16* %7265, i64 20
  %7287 = bitcast i16* %7286 to <16 x i16>*
  %7288 = load <16 x i16>, <16 x i16>* %7287, align 2, !tbaa !396
  %7289 = getelementptr inbounds i16, i16* %7265, i64 3
  %7290 = bitcast i16* %7289 to <16 x i16>*
  %7291 = load <16 x i16>, <16 x i16>* %7290, align 2, !tbaa !396
  %7292 = getelementptr inbounds i16, i16* %7265, i64 19
  %7293 = bitcast i16* %7292 to <16 x i16>*
  %7294 = load <16 x i16>, <16 x i16>* %7293, align 2, !tbaa !396
  %7295 = add <16 x i16> %7273, %7268
  %7296 = add <16 x i16> %7295, %7279
  %7297 = add <16 x i16> %7296, %7285
  %7298 = add <16 x i16> %7297, %7291
  %7299 = add <16 x i16> %7276, %7271
  %7300 = add <16 x i16> %7299, %7282
  %7301 = add <16 x i16> %7300, %7288
  %7302 = add <16 x i16> %7301, %7294
  %7303 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7298, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7304 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7302, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7305 = shufflevector <16 x i16> %7303, <16 x i16> %7304, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7306 = lshr <32 x i16> %7305, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7307 = shufflevector <32 x i16> %7306, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7308 = shl nsw i64 %7238, 5
  %7309 = add nsw i64 %7308, %7093
  %7310 = getelementptr inbounds i16, i16* %blur_x, i64 %7309
  %7311 = bitcast i16* %7310 to <16 x i16>*
  store <16 x i16> %7307, <16 x i16>* %7311, align 2, !tbaa !399
  %7312 = shufflevector <32 x i16> %7306, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7313 = getelementptr inbounds i16, i16* %7310, i64 16
  %7314 = bitcast i16* %7313 to <16 x i16>*
  store <16 x i16> %7312, <16 x i16>* %7314, align 2, !tbaa !399
  br label %"consume blur_x389"

"consume blur_x389":                              ; preds = %"for blur_y.s0.x.x.rebased382.consume blur_x389_crit_edge", %"produce blur_x388"
  %.pre-phi3430 = phi i64 [ %.pre3429, %"for blur_y.s0.x.x.rebased382.consume blur_x389_crit_edge" ], [ %7308, %"produce blur_x388" ]
  %7315 = add nsw i64 %7096, %.pre-phi3430
  %7316 = getelementptr inbounds i16, i16* %blur_x, i64 %7315
  %7317 = bitcast i16* %7316 to <16 x i16>*
  %7318 = load <16 x i16>, <16 x i16>* %7317, align 2, !tbaa !399
  %7319 = getelementptr inbounds i16, i16* %7316, i64 16
  %7320 = bitcast i16* %7319 to <16 x i16>*
  %7321 = load <16 x i16>, <16 x i16>* %7320, align 2, !tbaa !399
  %7322 = add nsw i64 %7099, %.pre-phi3430
  %7323 = getelementptr inbounds i16, i16* %blur_x, i64 %7322
  %7324 = bitcast i16* %7323 to <16 x i16>*
  %7325 = load <16 x i16>, <16 x i16>* %7324, align 2, !tbaa !399
  %7326 = getelementptr inbounds i16, i16* %7323, i64 16
  %7327 = bitcast i16* %7326 to <16 x i16>*
  %7328 = load <16 x i16>, <16 x i16>* %7327, align 2, !tbaa !399
  %7329 = add nsw i64 %7102, %.pre-phi3430
  %7330 = getelementptr inbounds i16, i16* %blur_x, i64 %7329
  %7331 = bitcast i16* %7330 to <16 x i16>*
  %7332 = load <16 x i16>, <16 x i16>* %7331, align 2, !tbaa !399
  %7333 = getelementptr inbounds i16, i16* %7330, i64 16
  %7334 = bitcast i16* %7333 to <16 x i16>*
  %7335 = load <16 x i16>, <16 x i16>* %7334, align 2, !tbaa !399
  %7336 = add nsw i64 %7105, %.pre-phi3430
  %7337 = getelementptr inbounds i16, i16* %blur_x, i64 %7336
  %7338 = bitcast i16* %7337 to <16 x i16>*
  %7339 = load <16 x i16>, <16 x i16>* %7338, align 2, !tbaa !399
  %7340 = getelementptr inbounds i16, i16* %7337, i64 16
  %7341 = bitcast i16* %7340 to <16 x i16>*
  %7342 = load <16 x i16>, <16 x i16>* %7341, align 2, !tbaa !399
  %7343 = add nsw i64 %7108, %.pre-phi3430
  %7344 = getelementptr inbounds i16, i16* %blur_x, i64 %7343
  %7345 = bitcast i16* %7344 to <16 x i16>*
  %7346 = load <16 x i16>, <16 x i16>* %7345, align 2, !tbaa !399
  %7347 = getelementptr inbounds i16, i16* %7344, i64 16
  %7348 = bitcast i16* %7347 to <16 x i16>*
  %7349 = load <16 x i16>, <16 x i16>* %7348, align 2, !tbaa !399
  %7350 = add <16 x i16> %7325, %7318
  %7351 = add <16 x i16> %7350, %7332
  %7352 = add <16 x i16> %7351, %7339
  %7353 = add <16 x i16> %7352, %7346
  %7354 = add <16 x i16> %7328, %7321
  %7355 = add <16 x i16> %7354, %7335
  %7356 = add <16 x i16> %7355, %7342
  %7357 = add <16 x i16> %7356, %7349
  %7358 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7353, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7359 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7357, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7360 = shufflevector <16 x i16> %7358, <16 x i16> %7359, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7361 = lshr <32 x i16> %7360, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7362 = shufflevector <32 x i16> %7361, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7363 = add nsw i64 %7112, %.pre-phi3430
  %7364 = getelementptr inbounds i16, i16* %66, i64 %7363
  %7365 = bitcast i16* %7364 to <16 x i16>*
  store <16 x i16> %7362, <16 x i16>* %7365, align 2, !tbaa !401
  %7366 = shufflevector <32 x i16> %7361, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7367 = getelementptr inbounds i16, i16* %7364, i64 16
  %7368 = bitcast i16* %7367 to <16 x i16>*
  store <16 x i16> %7366, <16 x i16>* %7368, align 2, !tbaa !401
  %indvars.iv.next3195 = add nuw nsw i64 %indvars.iv3194, 1
  %.not2664 = icmp eq i64 %indvars.iv.next3195, %184
  br i1 %.not2664, label %"end for blur_y.s0.x.x.rebased383", label %"for blur_y.s0.x.x.rebased382"

"for blur_y.s0.x.x.rebased390":                   ; preds = %"for blur_y.s0.x.x.rebased390.preheader", %"consume blur_x398"
  %blur_y.s0.x.x.rebased392 = phi i32 [ %7481, %"consume blur_x398" ], [ 0, %"for blur_y.s0.x.x.rebased390.preheader" ]
  %7369 = add nsw i32 %blur_y.s0.x.x.rebased392, %t1626
  %a196 = shl nsw i32 %7369, 5
  %7370 = icmp sgt i32 %a14, %a196
  %b202 = select i1 %7370, i32 %a196, i32 %a14
  %7371 = icmp slt i32 %7369, 1
  %7372 = icmp sgt i32 %4, %a196
  %7373 = or i1 %7371, %7372
  br i1 %7373, label %"produce blur_x396", label %"consume blur_x398"

"end for blur_y.s0.x.x.rebased391":               ; preds = %"consume blur_x398", %"end for blur_y.s0.x.x.rebased383"
  br i1 %34, label %"produce blur_x402", label %after_bb399

"produce blur_x396":                              ; preds = %"for blur_y.s0.x.x.rebased390"
  %7374 = icmp slt i32 %b202, %4
  %blur_x.s0.x.v1.base.s397 = select i1 %7374, i32 %b202, i32 %4
  %t925 = add nsw i32 %blur_x.s0.x.v1.base.s397, %t1913
  %7375 = sext i32 %t925 to i64
  %7376 = getelementptr inbounds i16, i16* %read_input, i64 %7375
  %7377 = getelementptr inbounds i16, i16* %7376, i64 1
  %7378 = bitcast i16* %7377 to <16 x i16>*
  %7379 = load <16 x i16>, <16 x i16>* %7378, align 2, !tbaa !396
  %7380 = getelementptr inbounds i16, i16* %7376, i64 17
  %7381 = bitcast i16* %7380 to <16 x i16>*
  %7382 = load <16 x i16>, <16 x i16>* %7381, align 2, !tbaa !396
  %7383 = bitcast i16* %7376 to <16 x i16>*
  %7384 = load <16 x i16>, <16 x i16>* %7383, align 2, !tbaa !396
  %7385 = getelementptr inbounds i16, i16* %7376, i64 16
  %7386 = bitcast i16* %7385 to <16 x i16>*
  %7387 = load <16 x i16>, <16 x i16>* %7386, align 2, !tbaa !396
  %7388 = getelementptr inbounds i16, i16* %7376, i64 2
  %7389 = bitcast i16* %7388 to <16 x i16>*
  %7390 = load <16 x i16>, <16 x i16>* %7389, align 2, !tbaa !396
  %7391 = getelementptr inbounds i16, i16* %7376, i64 18
  %7392 = bitcast i16* %7391 to <16 x i16>*
  %7393 = load <16 x i16>, <16 x i16>* %7392, align 2, !tbaa !396
  %7394 = getelementptr inbounds i16, i16* %7376, i64 4
  %7395 = bitcast i16* %7394 to <16 x i16>*
  %7396 = load <16 x i16>, <16 x i16>* %7395, align 2, !tbaa !396
  %7397 = getelementptr inbounds i16, i16* %7376, i64 20
  %7398 = bitcast i16* %7397 to <16 x i16>*
  %7399 = load <16 x i16>, <16 x i16>* %7398, align 2, !tbaa !396
  %7400 = getelementptr inbounds i16, i16* %7376, i64 3
  %7401 = bitcast i16* %7400 to <16 x i16>*
  %7402 = load <16 x i16>, <16 x i16>* %7401, align 2, !tbaa !396
  %7403 = getelementptr inbounds i16, i16* %7376, i64 19
  %7404 = bitcast i16* %7403 to <16 x i16>*
  %7405 = load <16 x i16>, <16 x i16>* %7404, align 2, !tbaa !396
  %7406 = add <16 x i16> %7384, %7379
  %7407 = add <16 x i16> %7406, %7390
  %7408 = add <16 x i16> %7407, %7396
  %7409 = add <16 x i16> %7408, %7402
  %7410 = add <16 x i16> %7387, %7382
  %7411 = add <16 x i16> %7410, %7393
  %7412 = add <16 x i16> %7411, %7399
  %7413 = add <16 x i16> %7412, %7405
  %7414 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7409, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7415 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7413, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7416 = shufflevector <16 x i16> %7414, <16 x i16> %7415, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7417 = lshr <32 x i16> %7416, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7418 = shufflevector <32 x i16> %7417, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7419 = sext i32 %blur_x.s0.x.v1.base.s397 to i64
  %7420 = add nsw i64 %7419, %7244
  %7421 = getelementptr inbounds i16, i16* %blur_x, i64 %7420
  %7422 = bitcast i16* %7421 to <16 x i16>*
  store <16 x i16> %7418, <16 x i16>* %7422, align 2, !tbaa !399
  %7423 = shufflevector <32 x i16> %7417, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7424 = getelementptr inbounds i16, i16* %7421, i64 16
  %7425 = bitcast i16* %7424 to <16 x i16>*
  store <16 x i16> %7423, <16 x i16>* %7425, align 2, !tbaa !399
  br label %"consume blur_x398"

"consume blur_x398":                              ; preds = %"for blur_y.s0.x.x.rebased390", %"produce blur_x396"
  %7426 = sext i32 %b202 to i64
  %7427 = add nsw i64 %7247, %7426
  %7428 = getelementptr inbounds i16, i16* %blur_x, i64 %7427
  %7429 = bitcast i16* %7428 to <16 x i16>*
  %7430 = load <16 x i16>, <16 x i16>* %7429, align 2, !tbaa !399
  %7431 = getelementptr inbounds i16, i16* %7428, i64 16
  %7432 = bitcast i16* %7431 to <16 x i16>*
  %7433 = load <16 x i16>, <16 x i16>* %7432, align 2, !tbaa !399
  %7434 = add nsw i64 %7250, %7426
  %7435 = getelementptr inbounds i16, i16* %blur_x, i64 %7434
  %7436 = bitcast i16* %7435 to <16 x i16>*
  %7437 = load <16 x i16>, <16 x i16>* %7436, align 2, !tbaa !399
  %7438 = getelementptr inbounds i16, i16* %7435, i64 16
  %7439 = bitcast i16* %7438 to <16 x i16>*
  %7440 = load <16 x i16>, <16 x i16>* %7439, align 2, !tbaa !399
  %7441 = add nsw i64 %7253, %7426
  %7442 = getelementptr inbounds i16, i16* %blur_x, i64 %7441
  %7443 = bitcast i16* %7442 to <16 x i16>*
  %7444 = load <16 x i16>, <16 x i16>* %7443, align 2, !tbaa !399
  %7445 = getelementptr inbounds i16, i16* %7442, i64 16
  %7446 = bitcast i16* %7445 to <16 x i16>*
  %7447 = load <16 x i16>, <16 x i16>* %7446, align 2, !tbaa !399
  %7448 = add nsw i64 %7256, %7426
  %7449 = getelementptr inbounds i16, i16* %blur_x, i64 %7448
  %7450 = bitcast i16* %7449 to <16 x i16>*
  %7451 = load <16 x i16>, <16 x i16>* %7450, align 2, !tbaa !399
  %7452 = getelementptr inbounds i16, i16* %7449, i64 16
  %7453 = bitcast i16* %7452 to <16 x i16>*
  %7454 = load <16 x i16>, <16 x i16>* %7453, align 2, !tbaa !399
  %7455 = add nsw i64 %7259, %7426
  %7456 = getelementptr inbounds i16, i16* %blur_x, i64 %7455
  %7457 = bitcast i16* %7456 to <16 x i16>*
  %7458 = load <16 x i16>, <16 x i16>* %7457, align 2, !tbaa !399
  %7459 = getelementptr inbounds i16, i16* %7456, i64 16
  %7460 = bitcast i16* %7459 to <16 x i16>*
  %7461 = load <16 x i16>, <16 x i16>* %7460, align 2, !tbaa !399
  %7462 = add <16 x i16> %7437, %7430
  %7463 = add <16 x i16> %7462, %7444
  %7464 = add <16 x i16> %7463, %7451
  %7465 = add <16 x i16> %7464, %7458
  %7466 = add <16 x i16> %7440, %7433
  %7467 = add <16 x i16> %7466, %7447
  %7468 = add <16 x i16> %7467, %7454
  %7469 = add <16 x i16> %7468, %7461
  %7470 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7465, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7471 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7469, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7472 = shufflevector <16 x i16> %7470, <16 x i16> %7471, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7473 = lshr <32 x i16> %7472, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7474 = shufflevector <32 x i16> %7473, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7475 = add nsw i64 %7263, %7426
  %7476 = getelementptr inbounds i16, i16* %66, i64 %7475
  %7477 = bitcast i16* %7476 to <16 x i16>*
  store <16 x i16> %7474, <16 x i16>* %7477, align 2, !tbaa !401
  %7478 = shufflevector <32 x i16> %7473, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7479 = getelementptr inbounds i16, i16* %7476, i64 16
  %7480 = bitcast i16* %7479 to <16 x i16>*
  store <16 x i16> %7478, <16 x i16>* %7480, align 2, !tbaa !401
  %7481 = add nuw nsw i32 %blur_y.s0.x.x.rebased392, 1
  %.not2663 = icmp eq i32 %7481, %t1683
  br i1 %.not2663, label %"end for blur_y.s0.x.x.rebased391", label %"for blur_y.s0.x.x.rebased390"

after_bb399:                                      ; preds = %"end for blur_y.s0.x.x.rebased391", %"produce blur_x402"
  br i1 %100, label %"for blur_y.s0.x.x.rebased404.preheader", label %"end for blur_y.s0.x.x.rebased405", !prof !386

"for blur_y.s0.x.x.rebased404.preheader":         ; preds = %after_bb399
  %7482 = sext i32 %t1694 to i64
  %7483 = zext i32 %.pre-phi3408 to i64
  %7484 = mul nsw i64 %7483, %112
  %7485 = sub nsw i64 %7484, %96
  %7486 = zext i32 %.pre-phi3402 to i64
  %7487 = mul nsw i64 %7486, %112
  %7488 = sub nsw i64 %7487, %96
  %7489 = zext i32 %.pre-phi to i64
  %7490 = mul nsw i64 %7489, %112
  %7491 = sub nsw i64 %7490, %96
  %7492 = zext i32 %.pre-phi3382 to i64
  %7493 = mul nsw i64 %7492, %112
  %7494 = sub nsw i64 %7493, %96
  %7495 = zext i32 %.pre-phi3378 to i64
  %7496 = mul nsw i64 %7495, %112
  %7497 = sub nsw i64 %7496, %96
  %7498 = sext i32 %a26 to i64
  %7499 = add nsw i64 %7498, 14
  %7500 = mul nsw i64 %7499, %113
  %7501 = add nsw i64 %7500, %116
  br label %"for blur_y.s0.x.x.rebased404"

"produce blur_x402":                              ; preds = %"end for blur_y.s0.x.x.rebased391"
  %7502 = getelementptr inbounds i16, i16* %read_input, i64 %143
  %7503 = getelementptr inbounds i16, i16* %7502, i64 -31
  %7504 = bitcast i16* %7503 to <16 x i16>*
  %7505 = load <16 x i16>, <16 x i16>* %7504, align 2, !tbaa !396
  %7506 = getelementptr inbounds i16, i16* %7502, i64 -15
  %7507 = bitcast i16* %7506 to <16 x i16>*
  %7508 = load <16 x i16>, <16 x i16>* %7507, align 2, !tbaa !396
  %7509 = getelementptr inbounds i16, i16* %7502, i64 -32
  %7510 = bitcast i16* %7509 to <16 x i16>*
  %7511 = load <16 x i16>, <16 x i16>* %7510, align 2, !tbaa !396
  %7512 = getelementptr inbounds i16, i16* %7502, i64 -16
  %7513 = bitcast i16* %7512 to <16 x i16>*
  %7514 = load <16 x i16>, <16 x i16>* %7513, align 2, !tbaa !396
  %7515 = getelementptr inbounds i16, i16* %7502, i64 -30
  %7516 = bitcast i16* %7515 to <16 x i16>*
  %7517 = load <16 x i16>, <16 x i16>* %7516, align 2, !tbaa !396
  %7518 = getelementptr inbounds i16, i16* %7502, i64 -14
  %7519 = bitcast i16* %7518 to <16 x i16>*
  %7520 = load <16 x i16>, <16 x i16>* %7519, align 2, !tbaa !396
  %7521 = getelementptr inbounds i16, i16* %7502, i64 -28
  %7522 = bitcast i16* %7521 to <16 x i16>*
  %7523 = load <16 x i16>, <16 x i16>* %7522, align 2, !tbaa !396
  %7524 = getelementptr inbounds i16, i16* %7502, i64 -12
  %7525 = bitcast i16* %7524 to <16 x i16>*
  %7526 = load <16 x i16>, <16 x i16>* %7525, align 2, !tbaa !396
  %7527 = getelementptr inbounds i16, i16* %7502, i64 -29
  %7528 = bitcast i16* %7527 to <16 x i16>*
  %7529 = load <16 x i16>, <16 x i16>* %7528, align 2, !tbaa !396
  %7530 = getelementptr inbounds i16, i16* %7502, i64 -13
  %7531 = bitcast i16* %7530 to <16 x i16>*
  %7532 = load <16 x i16>, <16 x i16>* %7531, align 2, !tbaa !396
  %7533 = add <16 x i16> %7511, %7505
  %7534 = add <16 x i16> %7533, %7517
  %7535 = add <16 x i16> %7534, %7523
  %7536 = add <16 x i16> %7535, %7529
  %7537 = add <16 x i16> %7514, %7508
  %7538 = add <16 x i16> %7537, %7520
  %7539 = add <16 x i16> %7538, %7526
  %7540 = add <16 x i16> %7539, %7532
  %7541 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7536, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7542 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7540, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7543 = shufflevector <16 x i16> %7541, <16 x i16> %7542, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7544 = lshr <32 x i16> %7543, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7545 = shufflevector <32 x i16> %7544, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7546 = zext i32 %.pre-phi3382 to i64
  %7547 = mul nsw i64 %97, %7546
  %7548 = add nsw i64 %99, %7547
  %7549 = getelementptr inbounds i16, i16* %blur_x, i64 %7548
  %7550 = getelementptr inbounds i16, i16* %7549, i64 -32
  %7551 = bitcast i16* %7550 to <16 x i16>*
  store <16 x i16> %7545, <16 x i16>* %7551, align 2, !tbaa !399
  %7552 = shufflevector <32 x i16> %7544, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7553 = getelementptr inbounds i16, i16* %7549, i64 -16
  %7554 = bitcast i16* %7553 to <16 x i16>*
  store <16 x i16> %7552, <16 x i16>* %7554, align 2, !tbaa !399
  %7555 = zext i32 %.pre-phi3408 to i64
  %7556 = mul nsw i64 %7555, %112
  %7557 = add nsw i64 %7556, %94
  %7558 = getelementptr inbounds i16, i16* %blur_x, i64 %7557
  %7559 = getelementptr inbounds i16, i16* %7558, i64 -32
  %7560 = bitcast i16* %7559 to <16 x i16>*
  %7561 = load <16 x i16>, <16 x i16>* %7560, align 2, !tbaa !399
  %7562 = getelementptr inbounds i16, i16* %7558, i64 -16
  %7563 = bitcast i16* %7562 to <16 x i16>*
  %7564 = load <16 x i16>, <16 x i16>* %7563, align 2, !tbaa !399
  %7565 = zext i32 %.pre-phi3402 to i64
  %7566 = mul nsw i64 %7565, %112
  %7567 = add nsw i64 %7566, %94
  %7568 = getelementptr inbounds i16, i16* %blur_x, i64 %7567
  %7569 = getelementptr inbounds i16, i16* %7568, i64 -32
  %7570 = bitcast i16* %7569 to <16 x i16>*
  %7571 = load <16 x i16>, <16 x i16>* %7570, align 2, !tbaa !399
  %7572 = getelementptr inbounds i16, i16* %7568, i64 -16
  %7573 = bitcast i16* %7572 to <16 x i16>*
  %7574 = load <16 x i16>, <16 x i16>* %7573, align 2, !tbaa !399
  %7575 = zext i32 %.pre-phi to i64
  %7576 = mul nsw i64 %7575, %112
  %7577 = add nsw i64 %7576, %94
  %7578 = getelementptr inbounds i16, i16* %blur_x, i64 %7577
  %7579 = getelementptr inbounds i16, i16* %7578, i64 -32
  %7580 = bitcast i16* %7579 to <16 x i16>*
  %7581 = load <16 x i16>, <16 x i16>* %7580, align 2, !tbaa !399
  %7582 = getelementptr inbounds i16, i16* %7578, i64 -16
  %7583 = bitcast i16* %7582 to <16 x i16>*
  %7584 = load <16 x i16>, <16 x i16>* %7583, align 2, !tbaa !399
  %7585 = mul nsw i64 %7546, %112
  %7586 = add nsw i64 %7585, %94
  %7587 = getelementptr inbounds i16, i16* %blur_x, i64 %7586
  %7588 = getelementptr inbounds i16, i16* %7587, i64 -32
  %7589 = bitcast i16* %7588 to <16 x i16>*
  %7590 = load <16 x i16>, <16 x i16>* %7589, align 2, !tbaa !399
  %7591 = getelementptr inbounds i16, i16* %7587, i64 -16
  %7592 = bitcast i16* %7591 to <16 x i16>*
  %7593 = load <16 x i16>, <16 x i16>* %7592, align 2, !tbaa !399
  %7594 = zext i32 %.pre-phi3378 to i64
  %7595 = mul nsw i64 %7594, %112
  %7596 = add nsw i64 %7595, %94
  %7597 = getelementptr inbounds i16, i16* %blur_x, i64 %7596
  %7598 = getelementptr inbounds i16, i16* %7597, i64 -32
  %7599 = bitcast i16* %7598 to <16 x i16>*
  %7600 = load <16 x i16>, <16 x i16>* %7599, align 2, !tbaa !399
  %7601 = getelementptr inbounds i16, i16* %7597, i64 -16
  %7602 = bitcast i16* %7601 to <16 x i16>*
  %7603 = load <16 x i16>, <16 x i16>* %7602, align 2, !tbaa !399
  %7604 = add <16 x i16> %7571, %7561
  %7605 = add <16 x i16> %7604, %7581
  %7606 = add <16 x i16> %7605, %7590
  %7607 = add <16 x i16> %7606, %7600
  %7608 = add <16 x i16> %7574, %7564
  %7609 = add <16 x i16> %7608, %7584
  %7610 = add <16 x i16> %7609, %7593
  %7611 = add <16 x i16> %7610, %7603
  %7612 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7607, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7613 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7611, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7614 = shufflevector <16 x i16> %7612, <16 x i16> %7613, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7615 = lshr <32 x i16> %7614, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7616 = shufflevector <32 x i16> %7615, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7617 = sext i32 %a26 to i64
  %7618 = add nsw i64 %7617, 14
  %7619 = mul nsw i64 %7618, %113
  %7620 = add nsw i64 %115, %7619
  %7621 = getelementptr inbounds i16, i16* %66, i64 %7620
  %7622 = getelementptr inbounds i16, i16* %7621, i64 -32
  %7623 = bitcast i16* %7622 to <16 x i16>*
  store <16 x i16> %7616, <16 x i16>* %7623, align 2, !tbaa !401
  %7624 = shufflevector <32 x i16> %7615, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7625 = getelementptr inbounds i16, i16* %7621, i64 -16
  %7626 = bitcast i16* %7625 to <16 x i16>*
  store <16 x i16> %7624, <16 x i16>* %7626, align 2, !tbaa !401
  br label %after_bb399

"for blur_y.s0.x.x.rebased404":                   ; preds = %"for blur_y.s0.x.x.rebased404.preheader", %"consume blur_x411"
  %indvars.iv3197 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased404.preheader" ], [ %indvars.iv.next3198, %"consume blur_x411" ]
  %7627 = add nsw i64 %indvars.iv3197, %101
  %7628 = icmp slt i64 %7627, 1
  %7629 = trunc i64 %7627 to i32
  %7630 = shl nsw i32 %7629, 5
  %7631 = icmp sgt i32 %4, %7630
  %7632 = or i1 %7628, %7631
  br i1 %7632, label %"produce blur_x410", label %"for blur_y.s0.x.x.rebased404.consume blur_x411_crit_edge"

"for blur_y.s0.x.x.rebased404.consume blur_x411_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased404"
  %.pre3431 = shl nsw i64 %7627, 5
  br label %"consume blur_x411"

"end for blur_y.s0.x.x.rebased405":               ; preds = %"consume blur_x411", %after_bb399
  br i1 %102, label %"for blur_y.s0.x.x.rebased412.preheader", label %"end for blur_y.s0.x.x.rebased413", !prof !386

"for blur_y.s0.x.x.rebased412.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased405"
  %7633 = sext i32 %t1694 to i64
  %7634 = zext i32 %.pre-phi3408 to i64
  %7635 = mul nsw i64 %7634, %112
  %7636 = sub nsw i64 %7635, %96
  %7637 = zext i32 %.pre-phi3402 to i64
  %7638 = mul nsw i64 %7637, %112
  %7639 = sub nsw i64 %7638, %96
  %7640 = zext i32 %.pre-phi to i64
  %7641 = mul nsw i64 %7640, %112
  %7642 = sub nsw i64 %7641, %96
  %7643 = zext i32 %.pre-phi3382 to i64
  %7644 = mul nsw i64 %7643, %112
  %7645 = sub nsw i64 %7644, %96
  %7646 = zext i32 %.pre-phi3378 to i64
  %7647 = mul nsw i64 %7646, %112
  %7648 = sub nsw i64 %7647, %96
  %7649 = sext i32 %a26 to i64
  %7650 = add nsw i64 %7649, 14
  %7651 = mul nsw i64 %7650, %113
  %7652 = add nsw i64 %7651, %116
  br label %"for blur_y.s0.x.x.rebased412"

"produce blur_x410":                              ; preds = %"for blur_y.s0.x.x.rebased404"
  %t936 = add nsw i32 %7630, %t1929
  %7653 = sext i32 %t936 to i64
  %7654 = getelementptr inbounds i16, i16* %read_input, i64 %7653
  %7655 = getelementptr inbounds i16, i16* %7654, i64 1
  %7656 = bitcast i16* %7655 to <16 x i16>*
  %7657 = load <16 x i16>, <16 x i16>* %7656, align 2, !tbaa !396
  %7658 = getelementptr inbounds i16, i16* %7654, i64 17
  %7659 = bitcast i16* %7658 to <16 x i16>*
  %7660 = load <16 x i16>, <16 x i16>* %7659, align 2, !tbaa !396
  %7661 = bitcast i16* %7654 to <16 x i16>*
  %7662 = load <16 x i16>, <16 x i16>* %7661, align 2, !tbaa !396
  %7663 = getelementptr inbounds i16, i16* %7654, i64 16
  %7664 = bitcast i16* %7663 to <16 x i16>*
  %7665 = load <16 x i16>, <16 x i16>* %7664, align 2, !tbaa !396
  %7666 = getelementptr inbounds i16, i16* %7654, i64 2
  %7667 = bitcast i16* %7666 to <16 x i16>*
  %7668 = load <16 x i16>, <16 x i16>* %7667, align 2, !tbaa !396
  %7669 = getelementptr inbounds i16, i16* %7654, i64 18
  %7670 = bitcast i16* %7669 to <16 x i16>*
  %7671 = load <16 x i16>, <16 x i16>* %7670, align 2, !tbaa !396
  %7672 = getelementptr inbounds i16, i16* %7654, i64 4
  %7673 = bitcast i16* %7672 to <16 x i16>*
  %7674 = load <16 x i16>, <16 x i16>* %7673, align 2, !tbaa !396
  %7675 = getelementptr inbounds i16, i16* %7654, i64 20
  %7676 = bitcast i16* %7675 to <16 x i16>*
  %7677 = load <16 x i16>, <16 x i16>* %7676, align 2, !tbaa !396
  %7678 = getelementptr inbounds i16, i16* %7654, i64 3
  %7679 = bitcast i16* %7678 to <16 x i16>*
  %7680 = load <16 x i16>, <16 x i16>* %7679, align 2, !tbaa !396
  %7681 = getelementptr inbounds i16, i16* %7654, i64 19
  %7682 = bitcast i16* %7681 to <16 x i16>*
  %7683 = load <16 x i16>, <16 x i16>* %7682, align 2, !tbaa !396
  %7684 = add <16 x i16> %7662, %7657
  %7685 = add <16 x i16> %7684, %7668
  %7686 = add <16 x i16> %7685, %7674
  %7687 = add <16 x i16> %7686, %7680
  %7688 = add <16 x i16> %7665, %7660
  %7689 = add <16 x i16> %7688, %7671
  %7690 = add <16 x i16> %7689, %7677
  %7691 = add <16 x i16> %7690, %7683
  %7692 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7687, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7693 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7691, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7694 = shufflevector <16 x i16> %7692, <16 x i16> %7693, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7695 = lshr <32 x i16> %7694, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7696 = shufflevector <32 x i16> %7695, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7697 = shl nsw i64 %7627, 5
  %7698 = add nsw i64 %7697, %7482
  %7699 = getelementptr inbounds i16, i16* %blur_x, i64 %7698
  %7700 = bitcast i16* %7699 to <16 x i16>*
  store <16 x i16> %7696, <16 x i16>* %7700, align 2, !tbaa !399
  %7701 = shufflevector <32 x i16> %7695, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7702 = getelementptr inbounds i16, i16* %7699, i64 16
  %7703 = bitcast i16* %7702 to <16 x i16>*
  store <16 x i16> %7701, <16 x i16>* %7703, align 2, !tbaa !399
  br label %"consume blur_x411"

"consume blur_x411":                              ; preds = %"for blur_y.s0.x.x.rebased404.consume blur_x411_crit_edge", %"produce blur_x410"
  %.pre-phi3432 = phi i64 [ %.pre3431, %"for blur_y.s0.x.x.rebased404.consume blur_x411_crit_edge" ], [ %7697, %"produce blur_x410" ]
  %7704 = add nsw i64 %7485, %.pre-phi3432
  %7705 = getelementptr inbounds i16, i16* %blur_x, i64 %7704
  %7706 = bitcast i16* %7705 to <16 x i16>*
  %7707 = load <16 x i16>, <16 x i16>* %7706, align 2, !tbaa !399
  %7708 = getelementptr inbounds i16, i16* %7705, i64 16
  %7709 = bitcast i16* %7708 to <16 x i16>*
  %7710 = load <16 x i16>, <16 x i16>* %7709, align 2, !tbaa !399
  %7711 = add nsw i64 %7488, %.pre-phi3432
  %7712 = getelementptr inbounds i16, i16* %blur_x, i64 %7711
  %7713 = bitcast i16* %7712 to <16 x i16>*
  %7714 = load <16 x i16>, <16 x i16>* %7713, align 2, !tbaa !399
  %7715 = getelementptr inbounds i16, i16* %7712, i64 16
  %7716 = bitcast i16* %7715 to <16 x i16>*
  %7717 = load <16 x i16>, <16 x i16>* %7716, align 2, !tbaa !399
  %7718 = add nsw i64 %7491, %.pre-phi3432
  %7719 = getelementptr inbounds i16, i16* %blur_x, i64 %7718
  %7720 = bitcast i16* %7719 to <16 x i16>*
  %7721 = load <16 x i16>, <16 x i16>* %7720, align 2, !tbaa !399
  %7722 = getelementptr inbounds i16, i16* %7719, i64 16
  %7723 = bitcast i16* %7722 to <16 x i16>*
  %7724 = load <16 x i16>, <16 x i16>* %7723, align 2, !tbaa !399
  %7725 = add nsw i64 %7494, %.pre-phi3432
  %7726 = getelementptr inbounds i16, i16* %blur_x, i64 %7725
  %7727 = bitcast i16* %7726 to <16 x i16>*
  %7728 = load <16 x i16>, <16 x i16>* %7727, align 2, !tbaa !399
  %7729 = getelementptr inbounds i16, i16* %7726, i64 16
  %7730 = bitcast i16* %7729 to <16 x i16>*
  %7731 = load <16 x i16>, <16 x i16>* %7730, align 2, !tbaa !399
  %7732 = add nsw i64 %7497, %.pre-phi3432
  %7733 = getelementptr inbounds i16, i16* %blur_x, i64 %7732
  %7734 = bitcast i16* %7733 to <16 x i16>*
  %7735 = load <16 x i16>, <16 x i16>* %7734, align 2, !tbaa !399
  %7736 = getelementptr inbounds i16, i16* %7733, i64 16
  %7737 = bitcast i16* %7736 to <16 x i16>*
  %7738 = load <16 x i16>, <16 x i16>* %7737, align 2, !tbaa !399
  %7739 = add <16 x i16> %7714, %7707
  %7740 = add <16 x i16> %7739, %7721
  %7741 = add <16 x i16> %7740, %7728
  %7742 = add <16 x i16> %7741, %7735
  %7743 = add <16 x i16> %7717, %7710
  %7744 = add <16 x i16> %7743, %7724
  %7745 = add <16 x i16> %7744, %7731
  %7746 = add <16 x i16> %7745, %7738
  %7747 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7742, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7748 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7746, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7749 = shufflevector <16 x i16> %7747, <16 x i16> %7748, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7750 = lshr <32 x i16> %7749, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7751 = shufflevector <32 x i16> %7750, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7752 = add nsw i64 %7501, %.pre-phi3432
  %7753 = getelementptr inbounds i16, i16* %66, i64 %7752
  %7754 = bitcast i16* %7753 to <16 x i16>*
  store <16 x i16> %7751, <16 x i16>* %7754, align 2, !tbaa !401
  %7755 = shufflevector <32 x i16> %7750, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7756 = getelementptr inbounds i16, i16* %7753, i64 16
  %7757 = bitcast i16* %7756 to <16 x i16>*
  store <16 x i16> %7755, <16 x i16>* %7757, align 2, !tbaa !401
  %indvars.iv.next3198 = add nuw nsw i64 %indvars.iv3197, 1
  %.not2662 = icmp eq i64 %indvars.iv.next3198, %184
  br i1 %.not2662, label %"end for blur_y.s0.x.x.rebased405", label %"for blur_y.s0.x.x.rebased404"

"for blur_y.s0.x.x.rebased412":                   ; preds = %"for blur_y.s0.x.x.rebased412.preheader", %"consume blur_x420"
  %blur_y.s0.x.x.rebased414 = phi i32 [ %7870, %"consume blur_x420" ], [ 0, %"for blur_y.s0.x.x.rebased412.preheader" ]
  %7758 = add nsw i32 %blur_y.s0.x.x.rebased414, %t1626
  %a203 = shl nsw i32 %7758, 5
  %7759 = icmp sgt i32 %a14, %a203
  %b209 = select i1 %7759, i32 %a203, i32 %a14
  %7760 = icmp slt i32 %7758, 1
  %7761 = icmp sgt i32 %4, %a203
  %7762 = or i1 %7760, %7761
  br i1 %7762, label %"produce blur_x418", label %"consume blur_x420"

"end for blur_y.s0.x.x.rebased413":               ; preds = %"consume blur_x420", %"end for blur_y.s0.x.x.rebased405"
  br i1 %34, label %"produce blur_x424", label %after_bb421

"produce blur_x418":                              ; preds = %"for blur_y.s0.x.x.rebased412"
  %7763 = icmp slt i32 %b209, %4
  %blur_x.s0.x.v1.base.s419 = select i1 %7763, i32 %b209, i32 %4
  %t941 = add nsw i32 %blur_x.s0.x.v1.base.s419, %t1929
  %7764 = sext i32 %t941 to i64
  %7765 = getelementptr inbounds i16, i16* %read_input, i64 %7764
  %7766 = getelementptr inbounds i16, i16* %7765, i64 1
  %7767 = bitcast i16* %7766 to <16 x i16>*
  %7768 = load <16 x i16>, <16 x i16>* %7767, align 2, !tbaa !396
  %7769 = getelementptr inbounds i16, i16* %7765, i64 17
  %7770 = bitcast i16* %7769 to <16 x i16>*
  %7771 = load <16 x i16>, <16 x i16>* %7770, align 2, !tbaa !396
  %7772 = bitcast i16* %7765 to <16 x i16>*
  %7773 = load <16 x i16>, <16 x i16>* %7772, align 2, !tbaa !396
  %7774 = getelementptr inbounds i16, i16* %7765, i64 16
  %7775 = bitcast i16* %7774 to <16 x i16>*
  %7776 = load <16 x i16>, <16 x i16>* %7775, align 2, !tbaa !396
  %7777 = getelementptr inbounds i16, i16* %7765, i64 2
  %7778 = bitcast i16* %7777 to <16 x i16>*
  %7779 = load <16 x i16>, <16 x i16>* %7778, align 2, !tbaa !396
  %7780 = getelementptr inbounds i16, i16* %7765, i64 18
  %7781 = bitcast i16* %7780 to <16 x i16>*
  %7782 = load <16 x i16>, <16 x i16>* %7781, align 2, !tbaa !396
  %7783 = getelementptr inbounds i16, i16* %7765, i64 4
  %7784 = bitcast i16* %7783 to <16 x i16>*
  %7785 = load <16 x i16>, <16 x i16>* %7784, align 2, !tbaa !396
  %7786 = getelementptr inbounds i16, i16* %7765, i64 20
  %7787 = bitcast i16* %7786 to <16 x i16>*
  %7788 = load <16 x i16>, <16 x i16>* %7787, align 2, !tbaa !396
  %7789 = getelementptr inbounds i16, i16* %7765, i64 3
  %7790 = bitcast i16* %7789 to <16 x i16>*
  %7791 = load <16 x i16>, <16 x i16>* %7790, align 2, !tbaa !396
  %7792 = getelementptr inbounds i16, i16* %7765, i64 19
  %7793 = bitcast i16* %7792 to <16 x i16>*
  %7794 = load <16 x i16>, <16 x i16>* %7793, align 2, !tbaa !396
  %7795 = add <16 x i16> %7773, %7768
  %7796 = add <16 x i16> %7795, %7779
  %7797 = add <16 x i16> %7796, %7785
  %7798 = add <16 x i16> %7797, %7791
  %7799 = add <16 x i16> %7776, %7771
  %7800 = add <16 x i16> %7799, %7782
  %7801 = add <16 x i16> %7800, %7788
  %7802 = add <16 x i16> %7801, %7794
  %7803 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7798, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7804 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7802, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7805 = shufflevector <16 x i16> %7803, <16 x i16> %7804, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7806 = lshr <32 x i16> %7805, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7807 = shufflevector <32 x i16> %7806, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7808 = sext i32 %blur_x.s0.x.v1.base.s419 to i64
  %7809 = add nsw i64 %7808, %7633
  %7810 = getelementptr inbounds i16, i16* %blur_x, i64 %7809
  %7811 = bitcast i16* %7810 to <16 x i16>*
  store <16 x i16> %7807, <16 x i16>* %7811, align 2, !tbaa !399
  %7812 = shufflevector <32 x i16> %7806, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7813 = getelementptr inbounds i16, i16* %7810, i64 16
  %7814 = bitcast i16* %7813 to <16 x i16>*
  store <16 x i16> %7812, <16 x i16>* %7814, align 2, !tbaa !399
  br label %"consume blur_x420"

"consume blur_x420":                              ; preds = %"for blur_y.s0.x.x.rebased412", %"produce blur_x418"
  %7815 = sext i32 %b209 to i64
  %7816 = add nsw i64 %7636, %7815
  %7817 = getelementptr inbounds i16, i16* %blur_x, i64 %7816
  %7818 = bitcast i16* %7817 to <16 x i16>*
  %7819 = load <16 x i16>, <16 x i16>* %7818, align 2, !tbaa !399
  %7820 = getelementptr inbounds i16, i16* %7817, i64 16
  %7821 = bitcast i16* %7820 to <16 x i16>*
  %7822 = load <16 x i16>, <16 x i16>* %7821, align 2, !tbaa !399
  %7823 = add nsw i64 %7639, %7815
  %7824 = getelementptr inbounds i16, i16* %blur_x, i64 %7823
  %7825 = bitcast i16* %7824 to <16 x i16>*
  %7826 = load <16 x i16>, <16 x i16>* %7825, align 2, !tbaa !399
  %7827 = getelementptr inbounds i16, i16* %7824, i64 16
  %7828 = bitcast i16* %7827 to <16 x i16>*
  %7829 = load <16 x i16>, <16 x i16>* %7828, align 2, !tbaa !399
  %7830 = add nsw i64 %7642, %7815
  %7831 = getelementptr inbounds i16, i16* %blur_x, i64 %7830
  %7832 = bitcast i16* %7831 to <16 x i16>*
  %7833 = load <16 x i16>, <16 x i16>* %7832, align 2, !tbaa !399
  %7834 = getelementptr inbounds i16, i16* %7831, i64 16
  %7835 = bitcast i16* %7834 to <16 x i16>*
  %7836 = load <16 x i16>, <16 x i16>* %7835, align 2, !tbaa !399
  %7837 = add nsw i64 %7645, %7815
  %7838 = getelementptr inbounds i16, i16* %blur_x, i64 %7837
  %7839 = bitcast i16* %7838 to <16 x i16>*
  %7840 = load <16 x i16>, <16 x i16>* %7839, align 2, !tbaa !399
  %7841 = getelementptr inbounds i16, i16* %7838, i64 16
  %7842 = bitcast i16* %7841 to <16 x i16>*
  %7843 = load <16 x i16>, <16 x i16>* %7842, align 2, !tbaa !399
  %7844 = add nsw i64 %7648, %7815
  %7845 = getelementptr inbounds i16, i16* %blur_x, i64 %7844
  %7846 = bitcast i16* %7845 to <16 x i16>*
  %7847 = load <16 x i16>, <16 x i16>* %7846, align 2, !tbaa !399
  %7848 = getelementptr inbounds i16, i16* %7845, i64 16
  %7849 = bitcast i16* %7848 to <16 x i16>*
  %7850 = load <16 x i16>, <16 x i16>* %7849, align 2, !tbaa !399
  %7851 = add <16 x i16> %7826, %7819
  %7852 = add <16 x i16> %7851, %7833
  %7853 = add <16 x i16> %7852, %7840
  %7854 = add <16 x i16> %7853, %7847
  %7855 = add <16 x i16> %7829, %7822
  %7856 = add <16 x i16> %7855, %7836
  %7857 = add <16 x i16> %7856, %7843
  %7858 = add <16 x i16> %7857, %7850
  %7859 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7854, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7860 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7858, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7861 = shufflevector <16 x i16> %7859, <16 x i16> %7860, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7862 = lshr <32 x i16> %7861, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7863 = shufflevector <32 x i16> %7862, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7864 = add nsw i64 %7652, %7815
  %7865 = getelementptr inbounds i16, i16* %66, i64 %7864
  %7866 = bitcast i16* %7865 to <16 x i16>*
  store <16 x i16> %7863, <16 x i16>* %7866, align 2, !tbaa !401
  %7867 = shufflevector <32 x i16> %7862, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7868 = getelementptr inbounds i16, i16* %7865, i64 16
  %7869 = bitcast i16* %7868 to <16 x i16>*
  store <16 x i16> %7867, <16 x i16>* %7869, align 2, !tbaa !401
  %7870 = add nuw nsw i32 %blur_y.s0.x.x.rebased414, 1
  %.not2661 = icmp eq i32 %7870, %t1683
  br i1 %.not2661, label %"end for blur_y.s0.x.x.rebased413", label %"for blur_y.s0.x.x.rebased412"

after_bb421:                                      ; preds = %"end for blur_y.s0.x.x.rebased413", %"produce blur_x424"
  br i1 %100, label %"for blur_y.s0.x.x.rebased426.preheader", label %"end for blur_y.s0.x.x.rebased427", !prof !386

"for blur_y.s0.x.x.rebased426.preheader":         ; preds = %after_bb421
  %7871 = sext i32 %t1700 to i64
  %7872 = zext i32 %.pre-phi to i64
  %7873 = mul nsw i64 %7872, %112
  %7874 = sub nsw i64 %7873, %96
  %7875 = zext i32 %.pre-phi3408 to i64
  %7876 = mul nsw i64 %7875, %112
  %7877 = sub nsw i64 %7876, %96
  %7878 = zext i32 %.pre-phi3378 to i64
  %7879 = mul nsw i64 %7878, %112
  %7880 = sub nsw i64 %7879, %96
  %7881 = zext i32 %.pre-phi3386 to i64
  %7882 = mul nsw i64 %7881, %112
  %7883 = sub nsw i64 %7882, %96
  %7884 = zext i32 %.pre-phi3382 to i64
  %7885 = mul nsw i64 %7884, %112
  %7886 = sub nsw i64 %7885, %96
  %7887 = sext i32 %a26 to i64
  %7888 = add nsw i64 %7887, 15
  %7889 = mul nsw i64 %7888, %113
  %7890 = add nsw i64 %7889, %116
  br label %"for blur_y.s0.x.x.rebased426"

"produce blur_x424":                              ; preds = %"end for blur_y.s0.x.x.rebased413"
  %7891 = getelementptr inbounds i16, i16* %read_input, i64 %145
  %7892 = getelementptr inbounds i16, i16* %7891, i64 -31
  %7893 = bitcast i16* %7892 to <16 x i16>*
  %7894 = load <16 x i16>, <16 x i16>* %7893, align 2, !tbaa !396
  %7895 = getelementptr inbounds i16, i16* %7891, i64 -15
  %7896 = bitcast i16* %7895 to <16 x i16>*
  %7897 = load <16 x i16>, <16 x i16>* %7896, align 2, !tbaa !396
  %7898 = getelementptr inbounds i16, i16* %7891, i64 -32
  %7899 = bitcast i16* %7898 to <16 x i16>*
  %7900 = load <16 x i16>, <16 x i16>* %7899, align 2, !tbaa !396
  %7901 = getelementptr inbounds i16, i16* %7891, i64 -16
  %7902 = bitcast i16* %7901 to <16 x i16>*
  %7903 = load <16 x i16>, <16 x i16>* %7902, align 2, !tbaa !396
  %7904 = getelementptr inbounds i16, i16* %7891, i64 -30
  %7905 = bitcast i16* %7904 to <16 x i16>*
  %7906 = load <16 x i16>, <16 x i16>* %7905, align 2, !tbaa !396
  %7907 = getelementptr inbounds i16, i16* %7891, i64 -14
  %7908 = bitcast i16* %7907 to <16 x i16>*
  %7909 = load <16 x i16>, <16 x i16>* %7908, align 2, !tbaa !396
  %7910 = getelementptr inbounds i16, i16* %7891, i64 -28
  %7911 = bitcast i16* %7910 to <16 x i16>*
  %7912 = load <16 x i16>, <16 x i16>* %7911, align 2, !tbaa !396
  %7913 = getelementptr inbounds i16, i16* %7891, i64 -12
  %7914 = bitcast i16* %7913 to <16 x i16>*
  %7915 = load <16 x i16>, <16 x i16>* %7914, align 2, !tbaa !396
  %7916 = getelementptr inbounds i16, i16* %7891, i64 -29
  %7917 = bitcast i16* %7916 to <16 x i16>*
  %7918 = load <16 x i16>, <16 x i16>* %7917, align 2, !tbaa !396
  %7919 = getelementptr inbounds i16, i16* %7891, i64 -13
  %7920 = bitcast i16* %7919 to <16 x i16>*
  %7921 = load <16 x i16>, <16 x i16>* %7920, align 2, !tbaa !396
  %7922 = add <16 x i16> %7900, %7894
  %7923 = add <16 x i16> %7922, %7906
  %7924 = add <16 x i16> %7923, %7912
  %7925 = add <16 x i16> %7924, %7918
  %7926 = add <16 x i16> %7903, %7897
  %7927 = add <16 x i16> %7926, %7909
  %7928 = add <16 x i16> %7927, %7915
  %7929 = add <16 x i16> %7928, %7921
  %7930 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7925, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7931 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7929, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %7932 = shufflevector <16 x i16> %7930, <16 x i16> %7931, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7933 = lshr <32 x i16> %7932, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %7934 = shufflevector <32 x i16> %7933, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7935 = zext i32 %.pre-phi3386 to i64
  %7936 = mul nsw i64 %97, %7935
  %7937 = add nsw i64 %99, %7936
  %7938 = getelementptr inbounds i16, i16* %blur_x, i64 %7937
  %7939 = getelementptr inbounds i16, i16* %7938, i64 -32
  %7940 = bitcast i16* %7939 to <16 x i16>*
  store <16 x i16> %7934, <16 x i16>* %7940, align 2, !tbaa !399
  %7941 = shufflevector <32 x i16> %7933, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7942 = getelementptr inbounds i16, i16* %7938, i64 -16
  %7943 = bitcast i16* %7942 to <16 x i16>*
  store <16 x i16> %7941, <16 x i16>* %7943, align 2, !tbaa !399
  %7944 = zext i32 %.pre-phi to i64
  %7945 = mul nsw i64 %7944, %112
  %7946 = add nsw i64 %7945, %94
  %7947 = getelementptr inbounds i16, i16* %blur_x, i64 %7946
  %7948 = getelementptr inbounds i16, i16* %7947, i64 -32
  %7949 = bitcast i16* %7948 to <16 x i16>*
  %7950 = load <16 x i16>, <16 x i16>* %7949, align 2, !tbaa !399
  %7951 = getelementptr inbounds i16, i16* %7947, i64 -16
  %7952 = bitcast i16* %7951 to <16 x i16>*
  %7953 = load <16 x i16>, <16 x i16>* %7952, align 2, !tbaa !399
  %7954 = zext i32 %.pre-phi3408 to i64
  %7955 = mul nsw i64 %7954, %112
  %7956 = add nsw i64 %7955, %94
  %7957 = getelementptr inbounds i16, i16* %blur_x, i64 %7956
  %7958 = getelementptr inbounds i16, i16* %7957, i64 -32
  %7959 = bitcast i16* %7958 to <16 x i16>*
  %7960 = load <16 x i16>, <16 x i16>* %7959, align 2, !tbaa !399
  %7961 = getelementptr inbounds i16, i16* %7957, i64 -16
  %7962 = bitcast i16* %7961 to <16 x i16>*
  %7963 = load <16 x i16>, <16 x i16>* %7962, align 2, !tbaa !399
  %7964 = zext i32 %.pre-phi3378 to i64
  %7965 = mul nsw i64 %7964, %112
  %7966 = add nsw i64 %7965, %94
  %7967 = getelementptr inbounds i16, i16* %blur_x, i64 %7966
  %7968 = getelementptr inbounds i16, i16* %7967, i64 -32
  %7969 = bitcast i16* %7968 to <16 x i16>*
  %7970 = load <16 x i16>, <16 x i16>* %7969, align 2, !tbaa !399
  %7971 = getelementptr inbounds i16, i16* %7967, i64 -16
  %7972 = bitcast i16* %7971 to <16 x i16>*
  %7973 = load <16 x i16>, <16 x i16>* %7972, align 2, !tbaa !399
  %7974 = mul nsw i64 %7935, %112
  %7975 = add nsw i64 %7974, %94
  %7976 = getelementptr inbounds i16, i16* %blur_x, i64 %7975
  %7977 = getelementptr inbounds i16, i16* %7976, i64 -32
  %7978 = bitcast i16* %7977 to <16 x i16>*
  %7979 = load <16 x i16>, <16 x i16>* %7978, align 2, !tbaa !399
  %7980 = getelementptr inbounds i16, i16* %7976, i64 -16
  %7981 = bitcast i16* %7980 to <16 x i16>*
  %7982 = load <16 x i16>, <16 x i16>* %7981, align 2, !tbaa !399
  %7983 = zext i32 %.pre-phi3382 to i64
  %7984 = mul nsw i64 %7983, %112
  %7985 = add nsw i64 %7984, %94
  %7986 = getelementptr inbounds i16, i16* %blur_x, i64 %7985
  %7987 = getelementptr inbounds i16, i16* %7986, i64 -32
  %7988 = bitcast i16* %7987 to <16 x i16>*
  %7989 = load <16 x i16>, <16 x i16>* %7988, align 2, !tbaa !399
  %7990 = getelementptr inbounds i16, i16* %7986, i64 -16
  %7991 = bitcast i16* %7990 to <16 x i16>*
  %7992 = load <16 x i16>, <16 x i16>* %7991, align 2, !tbaa !399
  %7993 = add <16 x i16> %7960, %7950
  %7994 = add <16 x i16> %7993, %7970
  %7995 = add <16 x i16> %7994, %7979
  %7996 = add <16 x i16> %7995, %7989
  %7997 = add <16 x i16> %7963, %7953
  %7998 = add <16 x i16> %7997, %7973
  %7999 = add <16 x i16> %7998, %7982
  %8000 = add <16 x i16> %7999, %7992
  %8001 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7996, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8002 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8000, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8003 = shufflevector <16 x i16> %8001, <16 x i16> %8002, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8004 = lshr <32 x i16> %8003, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8005 = shufflevector <32 x i16> %8004, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8006 = sext i32 %a26 to i64
  %8007 = add nsw i64 %8006, 15
  %8008 = mul nsw i64 %8007, %113
  %8009 = add nsw i64 %115, %8008
  %8010 = getelementptr inbounds i16, i16* %66, i64 %8009
  %8011 = getelementptr inbounds i16, i16* %8010, i64 -32
  %8012 = bitcast i16* %8011 to <16 x i16>*
  store <16 x i16> %8005, <16 x i16>* %8012, align 2, !tbaa !401
  %8013 = shufflevector <32 x i16> %8004, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8014 = getelementptr inbounds i16, i16* %8010, i64 -16
  %8015 = bitcast i16* %8014 to <16 x i16>*
  store <16 x i16> %8013, <16 x i16>* %8015, align 2, !tbaa !401
  br label %after_bb421

"for blur_y.s0.x.x.rebased426":                   ; preds = %"for blur_y.s0.x.x.rebased426.preheader", %"consume blur_x433"
  %indvars.iv3200 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased426.preheader" ], [ %indvars.iv.next3201, %"consume blur_x433" ]
  %8016 = add nsw i64 %indvars.iv3200, %101
  %8017 = icmp slt i64 %8016, 1
  %8018 = trunc i64 %8016 to i32
  %8019 = shl nsw i32 %8018, 5
  %8020 = icmp sgt i32 %4, %8019
  %8021 = or i1 %8017, %8020
  br i1 %8021, label %"produce blur_x432", label %"for blur_y.s0.x.x.rebased426.consume blur_x433_crit_edge"

"for blur_y.s0.x.x.rebased426.consume blur_x433_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased426"
  %.pre3433 = shl nsw i64 %8016, 5
  br label %"consume blur_x433"

"end for blur_y.s0.x.x.rebased427":               ; preds = %"consume blur_x433", %after_bb421
  br i1 %102, label %"for blur_y.s0.x.x.rebased434.preheader", label %"end for blur_y.s0.x.x.rebased435", !prof !386

"for blur_y.s0.x.x.rebased434.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased427"
  %8022 = sext i32 %t1700 to i64
  %8023 = zext i32 %.pre-phi to i64
  %8024 = mul nsw i64 %8023, %112
  %8025 = sub nsw i64 %8024, %96
  %8026 = zext i32 %.pre-phi3408 to i64
  %8027 = mul nsw i64 %8026, %112
  %8028 = sub nsw i64 %8027, %96
  %8029 = zext i32 %.pre-phi3378 to i64
  %8030 = mul nsw i64 %8029, %112
  %8031 = sub nsw i64 %8030, %96
  %8032 = zext i32 %.pre-phi3386 to i64
  %8033 = mul nsw i64 %8032, %112
  %8034 = sub nsw i64 %8033, %96
  %8035 = zext i32 %.pre-phi3382 to i64
  %8036 = mul nsw i64 %8035, %112
  %8037 = sub nsw i64 %8036, %96
  %8038 = sext i32 %a26 to i64
  %8039 = add nsw i64 %8038, 15
  %8040 = mul nsw i64 %8039, %113
  %8041 = add nsw i64 %8040, %116
  br label %"for blur_y.s0.x.x.rebased434"

"produce blur_x432":                              ; preds = %"for blur_y.s0.x.x.rebased426"
  %t952 = add nsw i32 %8019, %t1945
  %8042 = sext i32 %t952 to i64
  %8043 = getelementptr inbounds i16, i16* %read_input, i64 %8042
  %8044 = getelementptr inbounds i16, i16* %8043, i64 1
  %8045 = bitcast i16* %8044 to <16 x i16>*
  %8046 = load <16 x i16>, <16 x i16>* %8045, align 2, !tbaa !396
  %8047 = getelementptr inbounds i16, i16* %8043, i64 17
  %8048 = bitcast i16* %8047 to <16 x i16>*
  %8049 = load <16 x i16>, <16 x i16>* %8048, align 2, !tbaa !396
  %8050 = bitcast i16* %8043 to <16 x i16>*
  %8051 = load <16 x i16>, <16 x i16>* %8050, align 2, !tbaa !396
  %8052 = getelementptr inbounds i16, i16* %8043, i64 16
  %8053 = bitcast i16* %8052 to <16 x i16>*
  %8054 = load <16 x i16>, <16 x i16>* %8053, align 2, !tbaa !396
  %8055 = getelementptr inbounds i16, i16* %8043, i64 2
  %8056 = bitcast i16* %8055 to <16 x i16>*
  %8057 = load <16 x i16>, <16 x i16>* %8056, align 2, !tbaa !396
  %8058 = getelementptr inbounds i16, i16* %8043, i64 18
  %8059 = bitcast i16* %8058 to <16 x i16>*
  %8060 = load <16 x i16>, <16 x i16>* %8059, align 2, !tbaa !396
  %8061 = getelementptr inbounds i16, i16* %8043, i64 4
  %8062 = bitcast i16* %8061 to <16 x i16>*
  %8063 = load <16 x i16>, <16 x i16>* %8062, align 2, !tbaa !396
  %8064 = getelementptr inbounds i16, i16* %8043, i64 20
  %8065 = bitcast i16* %8064 to <16 x i16>*
  %8066 = load <16 x i16>, <16 x i16>* %8065, align 2, !tbaa !396
  %8067 = getelementptr inbounds i16, i16* %8043, i64 3
  %8068 = bitcast i16* %8067 to <16 x i16>*
  %8069 = load <16 x i16>, <16 x i16>* %8068, align 2, !tbaa !396
  %8070 = getelementptr inbounds i16, i16* %8043, i64 19
  %8071 = bitcast i16* %8070 to <16 x i16>*
  %8072 = load <16 x i16>, <16 x i16>* %8071, align 2, !tbaa !396
  %8073 = add <16 x i16> %8051, %8046
  %8074 = add <16 x i16> %8073, %8057
  %8075 = add <16 x i16> %8074, %8063
  %8076 = add <16 x i16> %8075, %8069
  %8077 = add <16 x i16> %8054, %8049
  %8078 = add <16 x i16> %8077, %8060
  %8079 = add <16 x i16> %8078, %8066
  %8080 = add <16 x i16> %8079, %8072
  %8081 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8076, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8082 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8080, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8083 = shufflevector <16 x i16> %8081, <16 x i16> %8082, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8084 = lshr <32 x i16> %8083, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8085 = shufflevector <32 x i16> %8084, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8086 = shl nsw i64 %8016, 5
  %8087 = add nsw i64 %8086, %7871
  %8088 = getelementptr inbounds i16, i16* %blur_x, i64 %8087
  %8089 = bitcast i16* %8088 to <16 x i16>*
  store <16 x i16> %8085, <16 x i16>* %8089, align 2, !tbaa !399
  %8090 = shufflevector <32 x i16> %8084, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8091 = getelementptr inbounds i16, i16* %8088, i64 16
  %8092 = bitcast i16* %8091 to <16 x i16>*
  store <16 x i16> %8090, <16 x i16>* %8092, align 2, !tbaa !399
  br label %"consume blur_x433"

"consume blur_x433":                              ; preds = %"for blur_y.s0.x.x.rebased426.consume blur_x433_crit_edge", %"produce blur_x432"
  %.pre-phi3434 = phi i64 [ %.pre3433, %"for blur_y.s0.x.x.rebased426.consume blur_x433_crit_edge" ], [ %8086, %"produce blur_x432" ]
  %8093 = add nsw i64 %7874, %.pre-phi3434
  %8094 = getelementptr inbounds i16, i16* %blur_x, i64 %8093
  %8095 = bitcast i16* %8094 to <16 x i16>*
  %8096 = load <16 x i16>, <16 x i16>* %8095, align 2, !tbaa !399
  %8097 = getelementptr inbounds i16, i16* %8094, i64 16
  %8098 = bitcast i16* %8097 to <16 x i16>*
  %8099 = load <16 x i16>, <16 x i16>* %8098, align 2, !tbaa !399
  %8100 = add nsw i64 %7877, %.pre-phi3434
  %8101 = getelementptr inbounds i16, i16* %blur_x, i64 %8100
  %8102 = bitcast i16* %8101 to <16 x i16>*
  %8103 = load <16 x i16>, <16 x i16>* %8102, align 2, !tbaa !399
  %8104 = getelementptr inbounds i16, i16* %8101, i64 16
  %8105 = bitcast i16* %8104 to <16 x i16>*
  %8106 = load <16 x i16>, <16 x i16>* %8105, align 2, !tbaa !399
  %8107 = add nsw i64 %7880, %.pre-phi3434
  %8108 = getelementptr inbounds i16, i16* %blur_x, i64 %8107
  %8109 = bitcast i16* %8108 to <16 x i16>*
  %8110 = load <16 x i16>, <16 x i16>* %8109, align 2, !tbaa !399
  %8111 = getelementptr inbounds i16, i16* %8108, i64 16
  %8112 = bitcast i16* %8111 to <16 x i16>*
  %8113 = load <16 x i16>, <16 x i16>* %8112, align 2, !tbaa !399
  %8114 = add nsw i64 %7883, %.pre-phi3434
  %8115 = getelementptr inbounds i16, i16* %blur_x, i64 %8114
  %8116 = bitcast i16* %8115 to <16 x i16>*
  %8117 = load <16 x i16>, <16 x i16>* %8116, align 2, !tbaa !399
  %8118 = getelementptr inbounds i16, i16* %8115, i64 16
  %8119 = bitcast i16* %8118 to <16 x i16>*
  %8120 = load <16 x i16>, <16 x i16>* %8119, align 2, !tbaa !399
  %8121 = add nsw i64 %7886, %.pre-phi3434
  %8122 = getelementptr inbounds i16, i16* %blur_x, i64 %8121
  %8123 = bitcast i16* %8122 to <16 x i16>*
  %8124 = load <16 x i16>, <16 x i16>* %8123, align 2, !tbaa !399
  %8125 = getelementptr inbounds i16, i16* %8122, i64 16
  %8126 = bitcast i16* %8125 to <16 x i16>*
  %8127 = load <16 x i16>, <16 x i16>* %8126, align 2, !tbaa !399
  %8128 = add <16 x i16> %8103, %8096
  %8129 = add <16 x i16> %8128, %8110
  %8130 = add <16 x i16> %8129, %8117
  %8131 = add <16 x i16> %8130, %8124
  %8132 = add <16 x i16> %8106, %8099
  %8133 = add <16 x i16> %8132, %8113
  %8134 = add <16 x i16> %8133, %8120
  %8135 = add <16 x i16> %8134, %8127
  %8136 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8131, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8137 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8135, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8138 = shufflevector <16 x i16> %8136, <16 x i16> %8137, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8139 = lshr <32 x i16> %8138, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8140 = shufflevector <32 x i16> %8139, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8141 = add nsw i64 %7890, %.pre-phi3434
  %8142 = getelementptr inbounds i16, i16* %66, i64 %8141
  %8143 = bitcast i16* %8142 to <16 x i16>*
  store <16 x i16> %8140, <16 x i16>* %8143, align 2, !tbaa !401
  %8144 = shufflevector <32 x i16> %8139, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8145 = getelementptr inbounds i16, i16* %8142, i64 16
  %8146 = bitcast i16* %8145 to <16 x i16>*
  store <16 x i16> %8144, <16 x i16>* %8146, align 2, !tbaa !401
  %indvars.iv.next3201 = add nuw nsw i64 %indvars.iv3200, 1
  %.not2660 = icmp eq i64 %indvars.iv.next3201, %184
  br i1 %.not2660, label %"end for blur_y.s0.x.x.rebased427", label %"for blur_y.s0.x.x.rebased426"

"for blur_y.s0.x.x.rebased434":                   ; preds = %"for blur_y.s0.x.x.rebased434.preheader", %"consume blur_x442"
  %blur_y.s0.x.x.rebased436 = phi i32 [ %8259, %"consume blur_x442" ], [ 0, %"for blur_y.s0.x.x.rebased434.preheader" ]
  %8147 = add nsw i32 %blur_y.s0.x.x.rebased436, %t1626
  %a210 = shl nsw i32 %8147, 5
  %8148 = icmp sgt i32 %a14, %a210
  %b216 = select i1 %8148, i32 %a210, i32 %a14
  %8149 = icmp slt i32 %8147, 1
  %8150 = icmp sgt i32 %4, %a210
  %8151 = or i1 %8149, %8150
  br i1 %8151, label %"produce blur_x440", label %"consume blur_x442"

"end for blur_y.s0.x.x.rebased435":               ; preds = %"consume blur_x442", %"end for blur_y.s0.x.x.rebased427"
  br i1 %34, label %"produce blur_x446", label %after_bb443

"produce blur_x440":                              ; preds = %"for blur_y.s0.x.x.rebased434"
  %8152 = icmp slt i32 %b216, %4
  %blur_x.s0.x.v1.base.s441 = select i1 %8152, i32 %b216, i32 %4
  %t957 = add nsw i32 %blur_x.s0.x.v1.base.s441, %t1945
  %8153 = sext i32 %t957 to i64
  %8154 = getelementptr inbounds i16, i16* %read_input, i64 %8153
  %8155 = getelementptr inbounds i16, i16* %8154, i64 1
  %8156 = bitcast i16* %8155 to <16 x i16>*
  %8157 = load <16 x i16>, <16 x i16>* %8156, align 2, !tbaa !396
  %8158 = getelementptr inbounds i16, i16* %8154, i64 17
  %8159 = bitcast i16* %8158 to <16 x i16>*
  %8160 = load <16 x i16>, <16 x i16>* %8159, align 2, !tbaa !396
  %8161 = bitcast i16* %8154 to <16 x i16>*
  %8162 = load <16 x i16>, <16 x i16>* %8161, align 2, !tbaa !396
  %8163 = getelementptr inbounds i16, i16* %8154, i64 16
  %8164 = bitcast i16* %8163 to <16 x i16>*
  %8165 = load <16 x i16>, <16 x i16>* %8164, align 2, !tbaa !396
  %8166 = getelementptr inbounds i16, i16* %8154, i64 2
  %8167 = bitcast i16* %8166 to <16 x i16>*
  %8168 = load <16 x i16>, <16 x i16>* %8167, align 2, !tbaa !396
  %8169 = getelementptr inbounds i16, i16* %8154, i64 18
  %8170 = bitcast i16* %8169 to <16 x i16>*
  %8171 = load <16 x i16>, <16 x i16>* %8170, align 2, !tbaa !396
  %8172 = getelementptr inbounds i16, i16* %8154, i64 4
  %8173 = bitcast i16* %8172 to <16 x i16>*
  %8174 = load <16 x i16>, <16 x i16>* %8173, align 2, !tbaa !396
  %8175 = getelementptr inbounds i16, i16* %8154, i64 20
  %8176 = bitcast i16* %8175 to <16 x i16>*
  %8177 = load <16 x i16>, <16 x i16>* %8176, align 2, !tbaa !396
  %8178 = getelementptr inbounds i16, i16* %8154, i64 3
  %8179 = bitcast i16* %8178 to <16 x i16>*
  %8180 = load <16 x i16>, <16 x i16>* %8179, align 2, !tbaa !396
  %8181 = getelementptr inbounds i16, i16* %8154, i64 19
  %8182 = bitcast i16* %8181 to <16 x i16>*
  %8183 = load <16 x i16>, <16 x i16>* %8182, align 2, !tbaa !396
  %8184 = add <16 x i16> %8162, %8157
  %8185 = add <16 x i16> %8184, %8168
  %8186 = add <16 x i16> %8185, %8174
  %8187 = add <16 x i16> %8186, %8180
  %8188 = add <16 x i16> %8165, %8160
  %8189 = add <16 x i16> %8188, %8171
  %8190 = add <16 x i16> %8189, %8177
  %8191 = add <16 x i16> %8190, %8183
  %8192 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8187, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8193 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8191, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8194 = shufflevector <16 x i16> %8192, <16 x i16> %8193, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8195 = lshr <32 x i16> %8194, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8196 = shufflevector <32 x i16> %8195, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8197 = sext i32 %blur_x.s0.x.v1.base.s441 to i64
  %8198 = add nsw i64 %8197, %8022
  %8199 = getelementptr inbounds i16, i16* %blur_x, i64 %8198
  %8200 = bitcast i16* %8199 to <16 x i16>*
  store <16 x i16> %8196, <16 x i16>* %8200, align 2, !tbaa !399
  %8201 = shufflevector <32 x i16> %8195, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8202 = getelementptr inbounds i16, i16* %8199, i64 16
  %8203 = bitcast i16* %8202 to <16 x i16>*
  store <16 x i16> %8201, <16 x i16>* %8203, align 2, !tbaa !399
  br label %"consume blur_x442"

"consume blur_x442":                              ; preds = %"for blur_y.s0.x.x.rebased434", %"produce blur_x440"
  %8204 = sext i32 %b216 to i64
  %8205 = add nsw i64 %8025, %8204
  %8206 = getelementptr inbounds i16, i16* %blur_x, i64 %8205
  %8207 = bitcast i16* %8206 to <16 x i16>*
  %8208 = load <16 x i16>, <16 x i16>* %8207, align 2, !tbaa !399
  %8209 = getelementptr inbounds i16, i16* %8206, i64 16
  %8210 = bitcast i16* %8209 to <16 x i16>*
  %8211 = load <16 x i16>, <16 x i16>* %8210, align 2, !tbaa !399
  %8212 = add nsw i64 %8028, %8204
  %8213 = getelementptr inbounds i16, i16* %blur_x, i64 %8212
  %8214 = bitcast i16* %8213 to <16 x i16>*
  %8215 = load <16 x i16>, <16 x i16>* %8214, align 2, !tbaa !399
  %8216 = getelementptr inbounds i16, i16* %8213, i64 16
  %8217 = bitcast i16* %8216 to <16 x i16>*
  %8218 = load <16 x i16>, <16 x i16>* %8217, align 2, !tbaa !399
  %8219 = add nsw i64 %8031, %8204
  %8220 = getelementptr inbounds i16, i16* %blur_x, i64 %8219
  %8221 = bitcast i16* %8220 to <16 x i16>*
  %8222 = load <16 x i16>, <16 x i16>* %8221, align 2, !tbaa !399
  %8223 = getelementptr inbounds i16, i16* %8220, i64 16
  %8224 = bitcast i16* %8223 to <16 x i16>*
  %8225 = load <16 x i16>, <16 x i16>* %8224, align 2, !tbaa !399
  %8226 = add nsw i64 %8034, %8204
  %8227 = getelementptr inbounds i16, i16* %blur_x, i64 %8226
  %8228 = bitcast i16* %8227 to <16 x i16>*
  %8229 = load <16 x i16>, <16 x i16>* %8228, align 2, !tbaa !399
  %8230 = getelementptr inbounds i16, i16* %8227, i64 16
  %8231 = bitcast i16* %8230 to <16 x i16>*
  %8232 = load <16 x i16>, <16 x i16>* %8231, align 2, !tbaa !399
  %8233 = add nsw i64 %8037, %8204
  %8234 = getelementptr inbounds i16, i16* %blur_x, i64 %8233
  %8235 = bitcast i16* %8234 to <16 x i16>*
  %8236 = load <16 x i16>, <16 x i16>* %8235, align 2, !tbaa !399
  %8237 = getelementptr inbounds i16, i16* %8234, i64 16
  %8238 = bitcast i16* %8237 to <16 x i16>*
  %8239 = load <16 x i16>, <16 x i16>* %8238, align 2, !tbaa !399
  %8240 = add <16 x i16> %8215, %8208
  %8241 = add <16 x i16> %8240, %8222
  %8242 = add <16 x i16> %8241, %8229
  %8243 = add <16 x i16> %8242, %8236
  %8244 = add <16 x i16> %8218, %8211
  %8245 = add <16 x i16> %8244, %8225
  %8246 = add <16 x i16> %8245, %8232
  %8247 = add <16 x i16> %8246, %8239
  %8248 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8243, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8249 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8247, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8250 = shufflevector <16 x i16> %8248, <16 x i16> %8249, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8251 = lshr <32 x i16> %8250, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8252 = shufflevector <32 x i16> %8251, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8253 = add nsw i64 %8041, %8204
  %8254 = getelementptr inbounds i16, i16* %66, i64 %8253
  %8255 = bitcast i16* %8254 to <16 x i16>*
  store <16 x i16> %8252, <16 x i16>* %8255, align 2, !tbaa !401
  %8256 = shufflevector <32 x i16> %8251, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8257 = getelementptr inbounds i16, i16* %8254, i64 16
  %8258 = bitcast i16* %8257 to <16 x i16>*
  store <16 x i16> %8256, <16 x i16>* %8258, align 2, !tbaa !401
  %8259 = add nuw nsw i32 %blur_y.s0.x.x.rebased436, 1
  %.not2659 = icmp eq i32 %8259, %t1683
  br i1 %.not2659, label %"end for blur_y.s0.x.x.rebased435", label %"for blur_y.s0.x.x.rebased434"

after_bb443:                                      ; preds = %"end for blur_y.s0.x.x.rebased435", %"produce blur_x446"
  br i1 %100, label %"for blur_y.s0.x.x.rebased448.preheader", label %"end for blur_y.s0.x.x.rebased449", !prof !386

"for blur_y.s0.x.x.rebased448.preheader":         ; preds = %after_bb443
  %8260 = sext i32 %t1706 to i64
  %8261 = zext i32 %.pre-phi3378 to i64
  %8262 = mul nsw i64 %8261, %112
  %8263 = sub nsw i64 %8262, %96
  %8264 = zext i32 %.pre-phi to i64
  %8265 = mul nsw i64 %8264, %112
  %8266 = sub nsw i64 %8265, %96
  %8267 = zext i32 %.pre-phi3382 to i64
  %8268 = mul nsw i64 %8267, %112
  %8269 = sub nsw i64 %8268, %96
  %8270 = zext i32 %.pre-phi3390 to i64
  %8271 = mul nsw i64 %8270, %112
  %8272 = sub nsw i64 %8271, %96
  %8273 = zext i32 %.pre-phi3386 to i64
  %8274 = mul nsw i64 %8273, %112
  %8275 = sub nsw i64 %8274, %96
  %8276 = sext i32 %a26 to i64
  %8277 = add nsw i64 %8276, 16
  %8278 = mul nsw i64 %8277, %113
  %8279 = add nsw i64 %8278, %116
  br label %"for blur_y.s0.x.x.rebased448"

"produce blur_x446":                              ; preds = %"end for blur_y.s0.x.x.rebased435"
  %8280 = getelementptr inbounds i16, i16* %read_input, i64 %147
  %8281 = getelementptr inbounds i16, i16* %8280, i64 -31
  %8282 = bitcast i16* %8281 to <16 x i16>*
  %8283 = load <16 x i16>, <16 x i16>* %8282, align 2, !tbaa !396
  %8284 = getelementptr inbounds i16, i16* %8280, i64 -15
  %8285 = bitcast i16* %8284 to <16 x i16>*
  %8286 = load <16 x i16>, <16 x i16>* %8285, align 2, !tbaa !396
  %8287 = getelementptr inbounds i16, i16* %8280, i64 -32
  %8288 = bitcast i16* %8287 to <16 x i16>*
  %8289 = load <16 x i16>, <16 x i16>* %8288, align 2, !tbaa !396
  %8290 = getelementptr inbounds i16, i16* %8280, i64 -16
  %8291 = bitcast i16* %8290 to <16 x i16>*
  %8292 = load <16 x i16>, <16 x i16>* %8291, align 2, !tbaa !396
  %8293 = getelementptr inbounds i16, i16* %8280, i64 -30
  %8294 = bitcast i16* %8293 to <16 x i16>*
  %8295 = load <16 x i16>, <16 x i16>* %8294, align 2, !tbaa !396
  %8296 = getelementptr inbounds i16, i16* %8280, i64 -14
  %8297 = bitcast i16* %8296 to <16 x i16>*
  %8298 = load <16 x i16>, <16 x i16>* %8297, align 2, !tbaa !396
  %8299 = getelementptr inbounds i16, i16* %8280, i64 -28
  %8300 = bitcast i16* %8299 to <16 x i16>*
  %8301 = load <16 x i16>, <16 x i16>* %8300, align 2, !tbaa !396
  %8302 = getelementptr inbounds i16, i16* %8280, i64 -12
  %8303 = bitcast i16* %8302 to <16 x i16>*
  %8304 = load <16 x i16>, <16 x i16>* %8303, align 2, !tbaa !396
  %8305 = getelementptr inbounds i16, i16* %8280, i64 -29
  %8306 = bitcast i16* %8305 to <16 x i16>*
  %8307 = load <16 x i16>, <16 x i16>* %8306, align 2, !tbaa !396
  %8308 = getelementptr inbounds i16, i16* %8280, i64 -13
  %8309 = bitcast i16* %8308 to <16 x i16>*
  %8310 = load <16 x i16>, <16 x i16>* %8309, align 2, !tbaa !396
  %8311 = add <16 x i16> %8289, %8283
  %8312 = add <16 x i16> %8311, %8295
  %8313 = add <16 x i16> %8312, %8301
  %8314 = add <16 x i16> %8313, %8307
  %8315 = add <16 x i16> %8292, %8286
  %8316 = add <16 x i16> %8315, %8298
  %8317 = add <16 x i16> %8316, %8304
  %8318 = add <16 x i16> %8317, %8310
  %8319 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8314, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8320 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8318, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8321 = shufflevector <16 x i16> %8319, <16 x i16> %8320, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8322 = lshr <32 x i16> %8321, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8323 = shufflevector <32 x i16> %8322, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8324 = zext i32 %.pre-phi3390 to i64
  %8325 = mul nsw i64 %97, %8324
  %8326 = add nsw i64 %99, %8325
  %8327 = getelementptr inbounds i16, i16* %blur_x, i64 %8326
  %8328 = getelementptr inbounds i16, i16* %8327, i64 -32
  %8329 = bitcast i16* %8328 to <16 x i16>*
  store <16 x i16> %8323, <16 x i16>* %8329, align 2, !tbaa !399
  %8330 = shufflevector <32 x i16> %8322, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8331 = getelementptr inbounds i16, i16* %8327, i64 -16
  %8332 = bitcast i16* %8331 to <16 x i16>*
  store <16 x i16> %8330, <16 x i16>* %8332, align 2, !tbaa !399
  %8333 = zext i32 %.pre-phi3378 to i64
  %8334 = mul nsw i64 %8333, %112
  %8335 = add nsw i64 %8334, %94
  %8336 = getelementptr inbounds i16, i16* %blur_x, i64 %8335
  %8337 = getelementptr inbounds i16, i16* %8336, i64 -32
  %8338 = bitcast i16* %8337 to <16 x i16>*
  %8339 = load <16 x i16>, <16 x i16>* %8338, align 2, !tbaa !399
  %8340 = getelementptr inbounds i16, i16* %8336, i64 -16
  %8341 = bitcast i16* %8340 to <16 x i16>*
  %8342 = load <16 x i16>, <16 x i16>* %8341, align 2, !tbaa !399
  %8343 = zext i32 %.pre-phi to i64
  %8344 = mul nsw i64 %8343, %112
  %8345 = add nsw i64 %8344, %94
  %8346 = getelementptr inbounds i16, i16* %blur_x, i64 %8345
  %8347 = getelementptr inbounds i16, i16* %8346, i64 -32
  %8348 = bitcast i16* %8347 to <16 x i16>*
  %8349 = load <16 x i16>, <16 x i16>* %8348, align 2, !tbaa !399
  %8350 = getelementptr inbounds i16, i16* %8346, i64 -16
  %8351 = bitcast i16* %8350 to <16 x i16>*
  %8352 = load <16 x i16>, <16 x i16>* %8351, align 2, !tbaa !399
  %8353 = zext i32 %.pre-phi3382 to i64
  %8354 = mul nsw i64 %8353, %112
  %8355 = add nsw i64 %8354, %94
  %8356 = getelementptr inbounds i16, i16* %blur_x, i64 %8355
  %8357 = getelementptr inbounds i16, i16* %8356, i64 -32
  %8358 = bitcast i16* %8357 to <16 x i16>*
  %8359 = load <16 x i16>, <16 x i16>* %8358, align 2, !tbaa !399
  %8360 = getelementptr inbounds i16, i16* %8356, i64 -16
  %8361 = bitcast i16* %8360 to <16 x i16>*
  %8362 = load <16 x i16>, <16 x i16>* %8361, align 2, !tbaa !399
  %8363 = mul nsw i64 %8324, %112
  %8364 = add nsw i64 %8363, %94
  %8365 = getelementptr inbounds i16, i16* %blur_x, i64 %8364
  %8366 = getelementptr inbounds i16, i16* %8365, i64 -32
  %8367 = bitcast i16* %8366 to <16 x i16>*
  %8368 = load <16 x i16>, <16 x i16>* %8367, align 2, !tbaa !399
  %8369 = getelementptr inbounds i16, i16* %8365, i64 -16
  %8370 = bitcast i16* %8369 to <16 x i16>*
  %8371 = load <16 x i16>, <16 x i16>* %8370, align 2, !tbaa !399
  %8372 = zext i32 %.pre-phi3386 to i64
  %8373 = mul nsw i64 %8372, %112
  %8374 = add nsw i64 %8373, %94
  %8375 = getelementptr inbounds i16, i16* %blur_x, i64 %8374
  %8376 = getelementptr inbounds i16, i16* %8375, i64 -32
  %8377 = bitcast i16* %8376 to <16 x i16>*
  %8378 = load <16 x i16>, <16 x i16>* %8377, align 2, !tbaa !399
  %8379 = getelementptr inbounds i16, i16* %8375, i64 -16
  %8380 = bitcast i16* %8379 to <16 x i16>*
  %8381 = load <16 x i16>, <16 x i16>* %8380, align 2, !tbaa !399
  %8382 = add <16 x i16> %8349, %8339
  %8383 = add <16 x i16> %8382, %8359
  %8384 = add <16 x i16> %8383, %8368
  %8385 = add <16 x i16> %8384, %8378
  %8386 = add <16 x i16> %8352, %8342
  %8387 = add <16 x i16> %8386, %8362
  %8388 = add <16 x i16> %8387, %8371
  %8389 = add <16 x i16> %8388, %8381
  %8390 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8385, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8391 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8389, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8392 = shufflevector <16 x i16> %8390, <16 x i16> %8391, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8393 = lshr <32 x i16> %8392, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8394 = shufflevector <32 x i16> %8393, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8395 = sext i32 %a26 to i64
  %8396 = add nsw i64 %8395, 16
  %8397 = mul nsw i64 %8396, %113
  %8398 = add nsw i64 %115, %8397
  %8399 = getelementptr inbounds i16, i16* %66, i64 %8398
  %8400 = getelementptr inbounds i16, i16* %8399, i64 -32
  %8401 = bitcast i16* %8400 to <16 x i16>*
  store <16 x i16> %8394, <16 x i16>* %8401, align 2, !tbaa !401
  %8402 = shufflevector <32 x i16> %8393, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8403 = getelementptr inbounds i16, i16* %8399, i64 -16
  %8404 = bitcast i16* %8403 to <16 x i16>*
  store <16 x i16> %8402, <16 x i16>* %8404, align 2, !tbaa !401
  br label %after_bb443

"for blur_y.s0.x.x.rebased448":                   ; preds = %"for blur_y.s0.x.x.rebased448.preheader", %"consume blur_x455"
  %indvars.iv3203 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased448.preheader" ], [ %indvars.iv.next3204, %"consume blur_x455" ]
  %8405 = add nsw i64 %indvars.iv3203, %101
  %8406 = icmp slt i64 %8405, 1
  %8407 = trunc i64 %8405 to i32
  %8408 = shl nsw i32 %8407, 5
  %8409 = icmp sgt i32 %4, %8408
  %8410 = or i1 %8406, %8409
  br i1 %8410, label %"produce blur_x454", label %"for blur_y.s0.x.x.rebased448.consume blur_x455_crit_edge"

"for blur_y.s0.x.x.rebased448.consume blur_x455_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased448"
  %.pre3435 = shl nsw i64 %8405, 5
  br label %"consume blur_x455"

"end for blur_y.s0.x.x.rebased449":               ; preds = %"consume blur_x455", %after_bb443
  br i1 %102, label %"for blur_y.s0.x.x.rebased456.preheader", label %"end for blur_y.s0.x.x.rebased457", !prof !386

"for blur_y.s0.x.x.rebased456.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased449"
  %8411 = sext i32 %t1706 to i64
  %8412 = zext i32 %.pre-phi3378 to i64
  %8413 = mul nsw i64 %8412, %112
  %8414 = sub nsw i64 %8413, %96
  %8415 = zext i32 %.pre-phi to i64
  %8416 = mul nsw i64 %8415, %112
  %8417 = sub nsw i64 %8416, %96
  %8418 = zext i32 %.pre-phi3382 to i64
  %8419 = mul nsw i64 %8418, %112
  %8420 = sub nsw i64 %8419, %96
  %8421 = zext i32 %.pre-phi3390 to i64
  %8422 = mul nsw i64 %8421, %112
  %8423 = sub nsw i64 %8422, %96
  %8424 = zext i32 %.pre-phi3386 to i64
  %8425 = mul nsw i64 %8424, %112
  %8426 = sub nsw i64 %8425, %96
  %8427 = sext i32 %a26 to i64
  %8428 = add nsw i64 %8427, 16
  %8429 = mul nsw i64 %8428, %113
  %8430 = add nsw i64 %8429, %116
  br label %"for blur_y.s0.x.x.rebased456"

"produce blur_x454":                              ; preds = %"for blur_y.s0.x.x.rebased448"
  %t968 = add nsw i32 %8408, %t1961
  %8431 = sext i32 %t968 to i64
  %8432 = getelementptr inbounds i16, i16* %read_input, i64 %8431
  %8433 = getelementptr inbounds i16, i16* %8432, i64 1
  %8434 = bitcast i16* %8433 to <16 x i16>*
  %8435 = load <16 x i16>, <16 x i16>* %8434, align 2, !tbaa !396
  %8436 = getelementptr inbounds i16, i16* %8432, i64 17
  %8437 = bitcast i16* %8436 to <16 x i16>*
  %8438 = load <16 x i16>, <16 x i16>* %8437, align 2, !tbaa !396
  %8439 = bitcast i16* %8432 to <16 x i16>*
  %8440 = load <16 x i16>, <16 x i16>* %8439, align 2, !tbaa !396
  %8441 = getelementptr inbounds i16, i16* %8432, i64 16
  %8442 = bitcast i16* %8441 to <16 x i16>*
  %8443 = load <16 x i16>, <16 x i16>* %8442, align 2, !tbaa !396
  %8444 = getelementptr inbounds i16, i16* %8432, i64 2
  %8445 = bitcast i16* %8444 to <16 x i16>*
  %8446 = load <16 x i16>, <16 x i16>* %8445, align 2, !tbaa !396
  %8447 = getelementptr inbounds i16, i16* %8432, i64 18
  %8448 = bitcast i16* %8447 to <16 x i16>*
  %8449 = load <16 x i16>, <16 x i16>* %8448, align 2, !tbaa !396
  %8450 = getelementptr inbounds i16, i16* %8432, i64 4
  %8451 = bitcast i16* %8450 to <16 x i16>*
  %8452 = load <16 x i16>, <16 x i16>* %8451, align 2, !tbaa !396
  %8453 = getelementptr inbounds i16, i16* %8432, i64 20
  %8454 = bitcast i16* %8453 to <16 x i16>*
  %8455 = load <16 x i16>, <16 x i16>* %8454, align 2, !tbaa !396
  %8456 = getelementptr inbounds i16, i16* %8432, i64 3
  %8457 = bitcast i16* %8456 to <16 x i16>*
  %8458 = load <16 x i16>, <16 x i16>* %8457, align 2, !tbaa !396
  %8459 = getelementptr inbounds i16, i16* %8432, i64 19
  %8460 = bitcast i16* %8459 to <16 x i16>*
  %8461 = load <16 x i16>, <16 x i16>* %8460, align 2, !tbaa !396
  %8462 = add <16 x i16> %8440, %8435
  %8463 = add <16 x i16> %8462, %8446
  %8464 = add <16 x i16> %8463, %8452
  %8465 = add <16 x i16> %8464, %8458
  %8466 = add <16 x i16> %8443, %8438
  %8467 = add <16 x i16> %8466, %8449
  %8468 = add <16 x i16> %8467, %8455
  %8469 = add <16 x i16> %8468, %8461
  %8470 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8465, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8471 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8469, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8472 = shufflevector <16 x i16> %8470, <16 x i16> %8471, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8473 = lshr <32 x i16> %8472, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8474 = shufflevector <32 x i16> %8473, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8475 = shl nsw i64 %8405, 5
  %8476 = add nsw i64 %8475, %8260
  %8477 = getelementptr inbounds i16, i16* %blur_x, i64 %8476
  %8478 = bitcast i16* %8477 to <16 x i16>*
  store <16 x i16> %8474, <16 x i16>* %8478, align 2, !tbaa !399
  %8479 = shufflevector <32 x i16> %8473, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8480 = getelementptr inbounds i16, i16* %8477, i64 16
  %8481 = bitcast i16* %8480 to <16 x i16>*
  store <16 x i16> %8479, <16 x i16>* %8481, align 2, !tbaa !399
  br label %"consume blur_x455"

"consume blur_x455":                              ; preds = %"for blur_y.s0.x.x.rebased448.consume blur_x455_crit_edge", %"produce blur_x454"
  %.pre-phi3436 = phi i64 [ %.pre3435, %"for blur_y.s0.x.x.rebased448.consume blur_x455_crit_edge" ], [ %8475, %"produce blur_x454" ]
  %8482 = add nsw i64 %8263, %.pre-phi3436
  %8483 = getelementptr inbounds i16, i16* %blur_x, i64 %8482
  %8484 = bitcast i16* %8483 to <16 x i16>*
  %8485 = load <16 x i16>, <16 x i16>* %8484, align 2, !tbaa !399
  %8486 = getelementptr inbounds i16, i16* %8483, i64 16
  %8487 = bitcast i16* %8486 to <16 x i16>*
  %8488 = load <16 x i16>, <16 x i16>* %8487, align 2, !tbaa !399
  %8489 = add nsw i64 %8266, %.pre-phi3436
  %8490 = getelementptr inbounds i16, i16* %blur_x, i64 %8489
  %8491 = bitcast i16* %8490 to <16 x i16>*
  %8492 = load <16 x i16>, <16 x i16>* %8491, align 2, !tbaa !399
  %8493 = getelementptr inbounds i16, i16* %8490, i64 16
  %8494 = bitcast i16* %8493 to <16 x i16>*
  %8495 = load <16 x i16>, <16 x i16>* %8494, align 2, !tbaa !399
  %8496 = add nsw i64 %8269, %.pre-phi3436
  %8497 = getelementptr inbounds i16, i16* %blur_x, i64 %8496
  %8498 = bitcast i16* %8497 to <16 x i16>*
  %8499 = load <16 x i16>, <16 x i16>* %8498, align 2, !tbaa !399
  %8500 = getelementptr inbounds i16, i16* %8497, i64 16
  %8501 = bitcast i16* %8500 to <16 x i16>*
  %8502 = load <16 x i16>, <16 x i16>* %8501, align 2, !tbaa !399
  %8503 = add nsw i64 %8272, %.pre-phi3436
  %8504 = getelementptr inbounds i16, i16* %blur_x, i64 %8503
  %8505 = bitcast i16* %8504 to <16 x i16>*
  %8506 = load <16 x i16>, <16 x i16>* %8505, align 2, !tbaa !399
  %8507 = getelementptr inbounds i16, i16* %8504, i64 16
  %8508 = bitcast i16* %8507 to <16 x i16>*
  %8509 = load <16 x i16>, <16 x i16>* %8508, align 2, !tbaa !399
  %8510 = add nsw i64 %8275, %.pre-phi3436
  %8511 = getelementptr inbounds i16, i16* %blur_x, i64 %8510
  %8512 = bitcast i16* %8511 to <16 x i16>*
  %8513 = load <16 x i16>, <16 x i16>* %8512, align 2, !tbaa !399
  %8514 = getelementptr inbounds i16, i16* %8511, i64 16
  %8515 = bitcast i16* %8514 to <16 x i16>*
  %8516 = load <16 x i16>, <16 x i16>* %8515, align 2, !tbaa !399
  %8517 = add <16 x i16> %8492, %8485
  %8518 = add <16 x i16> %8517, %8499
  %8519 = add <16 x i16> %8518, %8506
  %8520 = add <16 x i16> %8519, %8513
  %8521 = add <16 x i16> %8495, %8488
  %8522 = add <16 x i16> %8521, %8502
  %8523 = add <16 x i16> %8522, %8509
  %8524 = add <16 x i16> %8523, %8516
  %8525 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8520, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8526 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8524, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8527 = shufflevector <16 x i16> %8525, <16 x i16> %8526, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8528 = lshr <32 x i16> %8527, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8529 = shufflevector <32 x i16> %8528, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8530 = add nsw i64 %8279, %.pre-phi3436
  %8531 = getelementptr inbounds i16, i16* %66, i64 %8530
  %8532 = bitcast i16* %8531 to <16 x i16>*
  store <16 x i16> %8529, <16 x i16>* %8532, align 2, !tbaa !401
  %8533 = shufflevector <32 x i16> %8528, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8534 = getelementptr inbounds i16, i16* %8531, i64 16
  %8535 = bitcast i16* %8534 to <16 x i16>*
  store <16 x i16> %8533, <16 x i16>* %8535, align 2, !tbaa !401
  %indvars.iv.next3204 = add nuw nsw i64 %indvars.iv3203, 1
  %.not2658 = icmp eq i64 %indvars.iv.next3204, %184
  br i1 %.not2658, label %"end for blur_y.s0.x.x.rebased449", label %"for blur_y.s0.x.x.rebased448"

"for blur_y.s0.x.x.rebased456":                   ; preds = %"for blur_y.s0.x.x.rebased456.preheader", %"consume blur_x464"
  %blur_y.s0.x.x.rebased458 = phi i32 [ %8648, %"consume blur_x464" ], [ 0, %"for blur_y.s0.x.x.rebased456.preheader" ]
  %8536 = add nsw i32 %blur_y.s0.x.x.rebased458, %t1626
  %a217 = shl nsw i32 %8536, 5
  %8537 = icmp sgt i32 %a14, %a217
  %b223 = select i1 %8537, i32 %a217, i32 %a14
  %8538 = icmp slt i32 %8536, 1
  %8539 = icmp sgt i32 %4, %a217
  %8540 = or i1 %8538, %8539
  br i1 %8540, label %"produce blur_x462", label %"consume blur_x464"

"end for blur_y.s0.x.x.rebased457":               ; preds = %"consume blur_x464", %"end for blur_y.s0.x.x.rebased449"
  br i1 %34, label %"produce blur_x468", label %after_bb465

"produce blur_x462":                              ; preds = %"for blur_y.s0.x.x.rebased456"
  %8541 = icmp slt i32 %b223, %4
  %blur_x.s0.x.v1.base.s463 = select i1 %8541, i32 %b223, i32 %4
  %t973 = add nsw i32 %blur_x.s0.x.v1.base.s463, %t1961
  %8542 = sext i32 %t973 to i64
  %8543 = getelementptr inbounds i16, i16* %read_input, i64 %8542
  %8544 = getelementptr inbounds i16, i16* %8543, i64 1
  %8545 = bitcast i16* %8544 to <16 x i16>*
  %8546 = load <16 x i16>, <16 x i16>* %8545, align 2, !tbaa !396
  %8547 = getelementptr inbounds i16, i16* %8543, i64 17
  %8548 = bitcast i16* %8547 to <16 x i16>*
  %8549 = load <16 x i16>, <16 x i16>* %8548, align 2, !tbaa !396
  %8550 = bitcast i16* %8543 to <16 x i16>*
  %8551 = load <16 x i16>, <16 x i16>* %8550, align 2, !tbaa !396
  %8552 = getelementptr inbounds i16, i16* %8543, i64 16
  %8553 = bitcast i16* %8552 to <16 x i16>*
  %8554 = load <16 x i16>, <16 x i16>* %8553, align 2, !tbaa !396
  %8555 = getelementptr inbounds i16, i16* %8543, i64 2
  %8556 = bitcast i16* %8555 to <16 x i16>*
  %8557 = load <16 x i16>, <16 x i16>* %8556, align 2, !tbaa !396
  %8558 = getelementptr inbounds i16, i16* %8543, i64 18
  %8559 = bitcast i16* %8558 to <16 x i16>*
  %8560 = load <16 x i16>, <16 x i16>* %8559, align 2, !tbaa !396
  %8561 = getelementptr inbounds i16, i16* %8543, i64 4
  %8562 = bitcast i16* %8561 to <16 x i16>*
  %8563 = load <16 x i16>, <16 x i16>* %8562, align 2, !tbaa !396
  %8564 = getelementptr inbounds i16, i16* %8543, i64 20
  %8565 = bitcast i16* %8564 to <16 x i16>*
  %8566 = load <16 x i16>, <16 x i16>* %8565, align 2, !tbaa !396
  %8567 = getelementptr inbounds i16, i16* %8543, i64 3
  %8568 = bitcast i16* %8567 to <16 x i16>*
  %8569 = load <16 x i16>, <16 x i16>* %8568, align 2, !tbaa !396
  %8570 = getelementptr inbounds i16, i16* %8543, i64 19
  %8571 = bitcast i16* %8570 to <16 x i16>*
  %8572 = load <16 x i16>, <16 x i16>* %8571, align 2, !tbaa !396
  %8573 = add <16 x i16> %8551, %8546
  %8574 = add <16 x i16> %8573, %8557
  %8575 = add <16 x i16> %8574, %8563
  %8576 = add <16 x i16> %8575, %8569
  %8577 = add <16 x i16> %8554, %8549
  %8578 = add <16 x i16> %8577, %8560
  %8579 = add <16 x i16> %8578, %8566
  %8580 = add <16 x i16> %8579, %8572
  %8581 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8576, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8582 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8580, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8583 = shufflevector <16 x i16> %8581, <16 x i16> %8582, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8584 = lshr <32 x i16> %8583, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8585 = shufflevector <32 x i16> %8584, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8586 = sext i32 %blur_x.s0.x.v1.base.s463 to i64
  %8587 = add nsw i64 %8586, %8411
  %8588 = getelementptr inbounds i16, i16* %blur_x, i64 %8587
  %8589 = bitcast i16* %8588 to <16 x i16>*
  store <16 x i16> %8585, <16 x i16>* %8589, align 2, !tbaa !399
  %8590 = shufflevector <32 x i16> %8584, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8591 = getelementptr inbounds i16, i16* %8588, i64 16
  %8592 = bitcast i16* %8591 to <16 x i16>*
  store <16 x i16> %8590, <16 x i16>* %8592, align 2, !tbaa !399
  br label %"consume blur_x464"

"consume blur_x464":                              ; preds = %"for blur_y.s0.x.x.rebased456", %"produce blur_x462"
  %8593 = sext i32 %b223 to i64
  %8594 = add nsw i64 %8414, %8593
  %8595 = getelementptr inbounds i16, i16* %blur_x, i64 %8594
  %8596 = bitcast i16* %8595 to <16 x i16>*
  %8597 = load <16 x i16>, <16 x i16>* %8596, align 2, !tbaa !399
  %8598 = getelementptr inbounds i16, i16* %8595, i64 16
  %8599 = bitcast i16* %8598 to <16 x i16>*
  %8600 = load <16 x i16>, <16 x i16>* %8599, align 2, !tbaa !399
  %8601 = add nsw i64 %8417, %8593
  %8602 = getelementptr inbounds i16, i16* %blur_x, i64 %8601
  %8603 = bitcast i16* %8602 to <16 x i16>*
  %8604 = load <16 x i16>, <16 x i16>* %8603, align 2, !tbaa !399
  %8605 = getelementptr inbounds i16, i16* %8602, i64 16
  %8606 = bitcast i16* %8605 to <16 x i16>*
  %8607 = load <16 x i16>, <16 x i16>* %8606, align 2, !tbaa !399
  %8608 = add nsw i64 %8420, %8593
  %8609 = getelementptr inbounds i16, i16* %blur_x, i64 %8608
  %8610 = bitcast i16* %8609 to <16 x i16>*
  %8611 = load <16 x i16>, <16 x i16>* %8610, align 2, !tbaa !399
  %8612 = getelementptr inbounds i16, i16* %8609, i64 16
  %8613 = bitcast i16* %8612 to <16 x i16>*
  %8614 = load <16 x i16>, <16 x i16>* %8613, align 2, !tbaa !399
  %8615 = add nsw i64 %8423, %8593
  %8616 = getelementptr inbounds i16, i16* %blur_x, i64 %8615
  %8617 = bitcast i16* %8616 to <16 x i16>*
  %8618 = load <16 x i16>, <16 x i16>* %8617, align 2, !tbaa !399
  %8619 = getelementptr inbounds i16, i16* %8616, i64 16
  %8620 = bitcast i16* %8619 to <16 x i16>*
  %8621 = load <16 x i16>, <16 x i16>* %8620, align 2, !tbaa !399
  %8622 = add nsw i64 %8426, %8593
  %8623 = getelementptr inbounds i16, i16* %blur_x, i64 %8622
  %8624 = bitcast i16* %8623 to <16 x i16>*
  %8625 = load <16 x i16>, <16 x i16>* %8624, align 2, !tbaa !399
  %8626 = getelementptr inbounds i16, i16* %8623, i64 16
  %8627 = bitcast i16* %8626 to <16 x i16>*
  %8628 = load <16 x i16>, <16 x i16>* %8627, align 2, !tbaa !399
  %8629 = add <16 x i16> %8604, %8597
  %8630 = add <16 x i16> %8629, %8611
  %8631 = add <16 x i16> %8630, %8618
  %8632 = add <16 x i16> %8631, %8625
  %8633 = add <16 x i16> %8607, %8600
  %8634 = add <16 x i16> %8633, %8614
  %8635 = add <16 x i16> %8634, %8621
  %8636 = add <16 x i16> %8635, %8628
  %8637 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8632, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8638 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8636, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8639 = shufflevector <16 x i16> %8637, <16 x i16> %8638, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8640 = lshr <32 x i16> %8639, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8641 = shufflevector <32 x i16> %8640, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8642 = add nsw i64 %8430, %8593
  %8643 = getelementptr inbounds i16, i16* %66, i64 %8642
  %8644 = bitcast i16* %8643 to <16 x i16>*
  store <16 x i16> %8641, <16 x i16>* %8644, align 2, !tbaa !401
  %8645 = shufflevector <32 x i16> %8640, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8646 = getelementptr inbounds i16, i16* %8643, i64 16
  %8647 = bitcast i16* %8646 to <16 x i16>*
  store <16 x i16> %8645, <16 x i16>* %8647, align 2, !tbaa !401
  %8648 = add nuw nsw i32 %blur_y.s0.x.x.rebased458, 1
  %.not2657 = icmp eq i32 %8648, %t1683
  br i1 %.not2657, label %"end for blur_y.s0.x.x.rebased457", label %"for blur_y.s0.x.x.rebased456"

after_bb465:                                      ; preds = %"end for blur_y.s0.x.x.rebased457", %"produce blur_x468"
  br i1 %100, label %"for blur_y.s0.x.x.rebased470.preheader", label %"end for blur_y.s0.x.x.rebased471", !prof !386

"for blur_y.s0.x.x.rebased470.preheader":         ; preds = %after_bb465
  %8649 = sext i32 %t1722 to i64
  %8650 = zext i32 %.pre-phi3382 to i64
  %8651 = mul nsw i64 %8650, %112
  %8652 = sub nsw i64 %8651, %96
  %8653 = zext i32 %.pre-phi3378 to i64
  %8654 = mul nsw i64 %8653, %112
  %8655 = sub nsw i64 %8654, %96
  %8656 = zext i32 %.pre-phi3386 to i64
  %8657 = mul nsw i64 %8656, %112
  %8658 = sub nsw i64 %8657, %96
  %8659 = zext i32 %.pre-phi3396 to i64
  %8660 = mul nsw i64 %8659, %112
  %8661 = sub nsw i64 %8660, %96
  %8662 = zext i32 %.pre-phi3390 to i64
  %8663 = mul nsw i64 %8662, %112
  %8664 = sub nsw i64 %8663, %96
  %8665 = sext i32 %a26 to i64
  %8666 = add nsw i64 %8665, 17
  %8667 = mul nsw i64 %8666, %113
  %8668 = add nsw i64 %8667, %116
  br label %"for blur_y.s0.x.x.rebased470"

"produce blur_x468":                              ; preds = %"end for blur_y.s0.x.x.rebased457"
  %8669 = getelementptr inbounds i16, i16* %read_input, i64 %149
  %8670 = getelementptr inbounds i16, i16* %8669, i64 -31
  %8671 = bitcast i16* %8670 to <16 x i16>*
  %8672 = load <16 x i16>, <16 x i16>* %8671, align 2, !tbaa !396
  %8673 = getelementptr inbounds i16, i16* %8669, i64 -15
  %8674 = bitcast i16* %8673 to <16 x i16>*
  %8675 = load <16 x i16>, <16 x i16>* %8674, align 2, !tbaa !396
  %8676 = getelementptr inbounds i16, i16* %8669, i64 -32
  %8677 = bitcast i16* %8676 to <16 x i16>*
  %8678 = load <16 x i16>, <16 x i16>* %8677, align 2, !tbaa !396
  %8679 = getelementptr inbounds i16, i16* %8669, i64 -16
  %8680 = bitcast i16* %8679 to <16 x i16>*
  %8681 = load <16 x i16>, <16 x i16>* %8680, align 2, !tbaa !396
  %8682 = getelementptr inbounds i16, i16* %8669, i64 -30
  %8683 = bitcast i16* %8682 to <16 x i16>*
  %8684 = load <16 x i16>, <16 x i16>* %8683, align 2, !tbaa !396
  %8685 = getelementptr inbounds i16, i16* %8669, i64 -14
  %8686 = bitcast i16* %8685 to <16 x i16>*
  %8687 = load <16 x i16>, <16 x i16>* %8686, align 2, !tbaa !396
  %8688 = getelementptr inbounds i16, i16* %8669, i64 -28
  %8689 = bitcast i16* %8688 to <16 x i16>*
  %8690 = load <16 x i16>, <16 x i16>* %8689, align 2, !tbaa !396
  %8691 = getelementptr inbounds i16, i16* %8669, i64 -12
  %8692 = bitcast i16* %8691 to <16 x i16>*
  %8693 = load <16 x i16>, <16 x i16>* %8692, align 2, !tbaa !396
  %8694 = getelementptr inbounds i16, i16* %8669, i64 -29
  %8695 = bitcast i16* %8694 to <16 x i16>*
  %8696 = load <16 x i16>, <16 x i16>* %8695, align 2, !tbaa !396
  %8697 = getelementptr inbounds i16, i16* %8669, i64 -13
  %8698 = bitcast i16* %8697 to <16 x i16>*
  %8699 = load <16 x i16>, <16 x i16>* %8698, align 2, !tbaa !396
  %8700 = add <16 x i16> %8678, %8672
  %8701 = add <16 x i16> %8700, %8684
  %8702 = add <16 x i16> %8701, %8690
  %8703 = add <16 x i16> %8702, %8696
  %8704 = add <16 x i16> %8681, %8675
  %8705 = add <16 x i16> %8704, %8687
  %8706 = add <16 x i16> %8705, %8693
  %8707 = add <16 x i16> %8706, %8699
  %8708 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8703, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8709 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8707, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8710 = shufflevector <16 x i16> %8708, <16 x i16> %8709, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8711 = lshr <32 x i16> %8710, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8712 = shufflevector <32 x i16> %8711, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8713 = zext i32 %.pre-phi3396 to i64
  %8714 = mul nsw i64 %97, %8713
  %8715 = add nsw i64 %99, %8714
  %8716 = getelementptr inbounds i16, i16* %blur_x, i64 %8715
  %8717 = getelementptr inbounds i16, i16* %8716, i64 -32
  %8718 = bitcast i16* %8717 to <16 x i16>*
  store <16 x i16> %8712, <16 x i16>* %8718, align 2, !tbaa !399
  %8719 = shufflevector <32 x i16> %8711, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8720 = getelementptr inbounds i16, i16* %8716, i64 -16
  %8721 = bitcast i16* %8720 to <16 x i16>*
  store <16 x i16> %8719, <16 x i16>* %8721, align 2, !tbaa !399
  %8722 = zext i32 %.pre-phi3382 to i64
  %8723 = mul nsw i64 %8722, %112
  %8724 = add nsw i64 %8723, %94
  %8725 = getelementptr inbounds i16, i16* %blur_x, i64 %8724
  %8726 = getelementptr inbounds i16, i16* %8725, i64 -32
  %8727 = bitcast i16* %8726 to <16 x i16>*
  %8728 = load <16 x i16>, <16 x i16>* %8727, align 2, !tbaa !399
  %8729 = getelementptr inbounds i16, i16* %8725, i64 -16
  %8730 = bitcast i16* %8729 to <16 x i16>*
  %8731 = load <16 x i16>, <16 x i16>* %8730, align 2, !tbaa !399
  %8732 = zext i32 %.pre-phi3378 to i64
  %8733 = mul nsw i64 %8732, %112
  %8734 = add nsw i64 %8733, %94
  %8735 = getelementptr inbounds i16, i16* %blur_x, i64 %8734
  %8736 = getelementptr inbounds i16, i16* %8735, i64 -32
  %8737 = bitcast i16* %8736 to <16 x i16>*
  %8738 = load <16 x i16>, <16 x i16>* %8737, align 2, !tbaa !399
  %8739 = getelementptr inbounds i16, i16* %8735, i64 -16
  %8740 = bitcast i16* %8739 to <16 x i16>*
  %8741 = load <16 x i16>, <16 x i16>* %8740, align 2, !tbaa !399
  %8742 = zext i32 %.pre-phi3386 to i64
  %8743 = mul nsw i64 %8742, %112
  %8744 = add nsw i64 %8743, %94
  %8745 = getelementptr inbounds i16, i16* %blur_x, i64 %8744
  %8746 = getelementptr inbounds i16, i16* %8745, i64 -32
  %8747 = bitcast i16* %8746 to <16 x i16>*
  %8748 = load <16 x i16>, <16 x i16>* %8747, align 2, !tbaa !399
  %8749 = getelementptr inbounds i16, i16* %8745, i64 -16
  %8750 = bitcast i16* %8749 to <16 x i16>*
  %8751 = load <16 x i16>, <16 x i16>* %8750, align 2, !tbaa !399
  %8752 = mul nsw i64 %8713, %112
  %8753 = add nsw i64 %8752, %94
  %8754 = getelementptr inbounds i16, i16* %blur_x, i64 %8753
  %8755 = getelementptr inbounds i16, i16* %8754, i64 -32
  %8756 = bitcast i16* %8755 to <16 x i16>*
  %8757 = load <16 x i16>, <16 x i16>* %8756, align 2, !tbaa !399
  %8758 = getelementptr inbounds i16, i16* %8754, i64 -16
  %8759 = bitcast i16* %8758 to <16 x i16>*
  %8760 = load <16 x i16>, <16 x i16>* %8759, align 2, !tbaa !399
  %8761 = zext i32 %.pre-phi3390 to i64
  %8762 = mul nsw i64 %8761, %112
  %8763 = add nsw i64 %8762, %94
  %8764 = getelementptr inbounds i16, i16* %blur_x, i64 %8763
  %8765 = getelementptr inbounds i16, i16* %8764, i64 -32
  %8766 = bitcast i16* %8765 to <16 x i16>*
  %8767 = load <16 x i16>, <16 x i16>* %8766, align 2, !tbaa !399
  %8768 = getelementptr inbounds i16, i16* %8764, i64 -16
  %8769 = bitcast i16* %8768 to <16 x i16>*
  %8770 = load <16 x i16>, <16 x i16>* %8769, align 2, !tbaa !399
  %8771 = add <16 x i16> %8738, %8728
  %8772 = add <16 x i16> %8771, %8748
  %8773 = add <16 x i16> %8772, %8757
  %8774 = add <16 x i16> %8773, %8767
  %8775 = add <16 x i16> %8741, %8731
  %8776 = add <16 x i16> %8775, %8751
  %8777 = add <16 x i16> %8776, %8760
  %8778 = add <16 x i16> %8777, %8770
  %8779 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8774, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8780 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8778, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8781 = shufflevector <16 x i16> %8779, <16 x i16> %8780, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8782 = lshr <32 x i16> %8781, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8783 = shufflevector <32 x i16> %8782, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8784 = sext i32 %a26 to i64
  %8785 = add nsw i64 %8784, 17
  %8786 = mul nsw i64 %8785, %113
  %8787 = add nsw i64 %115, %8786
  %8788 = getelementptr inbounds i16, i16* %66, i64 %8787
  %8789 = getelementptr inbounds i16, i16* %8788, i64 -32
  %8790 = bitcast i16* %8789 to <16 x i16>*
  store <16 x i16> %8783, <16 x i16>* %8790, align 2, !tbaa !401
  %8791 = shufflevector <32 x i16> %8782, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8792 = getelementptr inbounds i16, i16* %8788, i64 -16
  %8793 = bitcast i16* %8792 to <16 x i16>*
  store <16 x i16> %8791, <16 x i16>* %8793, align 2, !tbaa !401
  br label %after_bb465

"for blur_y.s0.x.x.rebased470":                   ; preds = %"for blur_y.s0.x.x.rebased470.preheader", %"consume blur_x477"
  %indvars.iv3206 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased470.preheader" ], [ %indvars.iv.next3207, %"consume blur_x477" ]
  %8794 = add nsw i64 %indvars.iv3206, %101
  %8795 = icmp slt i64 %8794, 1
  %8796 = trunc i64 %8794 to i32
  %8797 = shl nsw i32 %8796, 5
  %8798 = icmp sgt i32 %4, %8797
  %8799 = or i1 %8795, %8798
  br i1 %8799, label %"produce blur_x476", label %"for blur_y.s0.x.x.rebased470.consume blur_x477_crit_edge"

"for blur_y.s0.x.x.rebased470.consume blur_x477_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased470"
  %.pre3437 = shl nsw i64 %8794, 5
  br label %"consume blur_x477"

"end for blur_y.s0.x.x.rebased471":               ; preds = %"consume blur_x477", %after_bb465
  br i1 %102, label %"for blur_y.s0.x.x.rebased478.preheader", label %"end for blur_y.s0.x.x.rebased479", !prof !386

"for blur_y.s0.x.x.rebased478.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased471"
  %8800 = sext i32 %t1722 to i64
  %8801 = zext i32 %.pre-phi3382 to i64
  %8802 = mul nsw i64 %8801, %112
  %8803 = sub nsw i64 %8802, %96
  %8804 = zext i32 %.pre-phi3378 to i64
  %8805 = mul nsw i64 %8804, %112
  %8806 = sub nsw i64 %8805, %96
  %8807 = zext i32 %.pre-phi3386 to i64
  %8808 = mul nsw i64 %8807, %112
  %8809 = sub nsw i64 %8808, %96
  %8810 = zext i32 %.pre-phi3396 to i64
  %8811 = mul nsw i64 %8810, %112
  %8812 = sub nsw i64 %8811, %96
  %8813 = zext i32 %.pre-phi3390 to i64
  %8814 = mul nsw i64 %8813, %112
  %8815 = sub nsw i64 %8814, %96
  %8816 = sext i32 %a26 to i64
  %8817 = add nsw i64 %8816, 17
  %8818 = mul nsw i64 %8817, %113
  %8819 = add nsw i64 %8818, %116
  br label %"for blur_y.s0.x.x.rebased478"

"produce blur_x476":                              ; preds = %"for blur_y.s0.x.x.rebased470"
  %t984 = add nsw i32 %8797, %t1977
  %8820 = sext i32 %t984 to i64
  %8821 = getelementptr inbounds i16, i16* %read_input, i64 %8820
  %8822 = getelementptr inbounds i16, i16* %8821, i64 1
  %8823 = bitcast i16* %8822 to <16 x i16>*
  %8824 = load <16 x i16>, <16 x i16>* %8823, align 2, !tbaa !396
  %8825 = getelementptr inbounds i16, i16* %8821, i64 17
  %8826 = bitcast i16* %8825 to <16 x i16>*
  %8827 = load <16 x i16>, <16 x i16>* %8826, align 2, !tbaa !396
  %8828 = bitcast i16* %8821 to <16 x i16>*
  %8829 = load <16 x i16>, <16 x i16>* %8828, align 2, !tbaa !396
  %8830 = getelementptr inbounds i16, i16* %8821, i64 16
  %8831 = bitcast i16* %8830 to <16 x i16>*
  %8832 = load <16 x i16>, <16 x i16>* %8831, align 2, !tbaa !396
  %8833 = getelementptr inbounds i16, i16* %8821, i64 2
  %8834 = bitcast i16* %8833 to <16 x i16>*
  %8835 = load <16 x i16>, <16 x i16>* %8834, align 2, !tbaa !396
  %8836 = getelementptr inbounds i16, i16* %8821, i64 18
  %8837 = bitcast i16* %8836 to <16 x i16>*
  %8838 = load <16 x i16>, <16 x i16>* %8837, align 2, !tbaa !396
  %8839 = getelementptr inbounds i16, i16* %8821, i64 4
  %8840 = bitcast i16* %8839 to <16 x i16>*
  %8841 = load <16 x i16>, <16 x i16>* %8840, align 2, !tbaa !396
  %8842 = getelementptr inbounds i16, i16* %8821, i64 20
  %8843 = bitcast i16* %8842 to <16 x i16>*
  %8844 = load <16 x i16>, <16 x i16>* %8843, align 2, !tbaa !396
  %8845 = getelementptr inbounds i16, i16* %8821, i64 3
  %8846 = bitcast i16* %8845 to <16 x i16>*
  %8847 = load <16 x i16>, <16 x i16>* %8846, align 2, !tbaa !396
  %8848 = getelementptr inbounds i16, i16* %8821, i64 19
  %8849 = bitcast i16* %8848 to <16 x i16>*
  %8850 = load <16 x i16>, <16 x i16>* %8849, align 2, !tbaa !396
  %8851 = add <16 x i16> %8829, %8824
  %8852 = add <16 x i16> %8851, %8835
  %8853 = add <16 x i16> %8852, %8841
  %8854 = add <16 x i16> %8853, %8847
  %8855 = add <16 x i16> %8832, %8827
  %8856 = add <16 x i16> %8855, %8838
  %8857 = add <16 x i16> %8856, %8844
  %8858 = add <16 x i16> %8857, %8850
  %8859 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8854, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8860 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8858, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8861 = shufflevector <16 x i16> %8859, <16 x i16> %8860, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8862 = lshr <32 x i16> %8861, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8863 = shufflevector <32 x i16> %8862, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8864 = shl nsw i64 %8794, 5
  %8865 = add nsw i64 %8864, %8649
  %8866 = getelementptr inbounds i16, i16* %blur_x, i64 %8865
  %8867 = bitcast i16* %8866 to <16 x i16>*
  store <16 x i16> %8863, <16 x i16>* %8867, align 2, !tbaa !399
  %8868 = shufflevector <32 x i16> %8862, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8869 = getelementptr inbounds i16, i16* %8866, i64 16
  %8870 = bitcast i16* %8869 to <16 x i16>*
  store <16 x i16> %8868, <16 x i16>* %8870, align 2, !tbaa !399
  br label %"consume blur_x477"

"consume blur_x477":                              ; preds = %"for blur_y.s0.x.x.rebased470.consume blur_x477_crit_edge", %"produce blur_x476"
  %.pre-phi3438 = phi i64 [ %.pre3437, %"for blur_y.s0.x.x.rebased470.consume blur_x477_crit_edge" ], [ %8864, %"produce blur_x476" ]
  %8871 = add nsw i64 %8652, %.pre-phi3438
  %8872 = getelementptr inbounds i16, i16* %blur_x, i64 %8871
  %8873 = bitcast i16* %8872 to <16 x i16>*
  %8874 = load <16 x i16>, <16 x i16>* %8873, align 2, !tbaa !399
  %8875 = getelementptr inbounds i16, i16* %8872, i64 16
  %8876 = bitcast i16* %8875 to <16 x i16>*
  %8877 = load <16 x i16>, <16 x i16>* %8876, align 2, !tbaa !399
  %8878 = add nsw i64 %8655, %.pre-phi3438
  %8879 = getelementptr inbounds i16, i16* %blur_x, i64 %8878
  %8880 = bitcast i16* %8879 to <16 x i16>*
  %8881 = load <16 x i16>, <16 x i16>* %8880, align 2, !tbaa !399
  %8882 = getelementptr inbounds i16, i16* %8879, i64 16
  %8883 = bitcast i16* %8882 to <16 x i16>*
  %8884 = load <16 x i16>, <16 x i16>* %8883, align 2, !tbaa !399
  %8885 = add nsw i64 %8658, %.pre-phi3438
  %8886 = getelementptr inbounds i16, i16* %blur_x, i64 %8885
  %8887 = bitcast i16* %8886 to <16 x i16>*
  %8888 = load <16 x i16>, <16 x i16>* %8887, align 2, !tbaa !399
  %8889 = getelementptr inbounds i16, i16* %8886, i64 16
  %8890 = bitcast i16* %8889 to <16 x i16>*
  %8891 = load <16 x i16>, <16 x i16>* %8890, align 2, !tbaa !399
  %8892 = add nsw i64 %8661, %.pre-phi3438
  %8893 = getelementptr inbounds i16, i16* %blur_x, i64 %8892
  %8894 = bitcast i16* %8893 to <16 x i16>*
  %8895 = load <16 x i16>, <16 x i16>* %8894, align 2, !tbaa !399
  %8896 = getelementptr inbounds i16, i16* %8893, i64 16
  %8897 = bitcast i16* %8896 to <16 x i16>*
  %8898 = load <16 x i16>, <16 x i16>* %8897, align 2, !tbaa !399
  %8899 = add nsw i64 %8664, %.pre-phi3438
  %8900 = getelementptr inbounds i16, i16* %blur_x, i64 %8899
  %8901 = bitcast i16* %8900 to <16 x i16>*
  %8902 = load <16 x i16>, <16 x i16>* %8901, align 2, !tbaa !399
  %8903 = getelementptr inbounds i16, i16* %8900, i64 16
  %8904 = bitcast i16* %8903 to <16 x i16>*
  %8905 = load <16 x i16>, <16 x i16>* %8904, align 2, !tbaa !399
  %8906 = add <16 x i16> %8881, %8874
  %8907 = add <16 x i16> %8906, %8888
  %8908 = add <16 x i16> %8907, %8895
  %8909 = add <16 x i16> %8908, %8902
  %8910 = add <16 x i16> %8884, %8877
  %8911 = add <16 x i16> %8910, %8891
  %8912 = add <16 x i16> %8911, %8898
  %8913 = add <16 x i16> %8912, %8905
  %8914 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8909, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8915 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8913, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8916 = shufflevector <16 x i16> %8914, <16 x i16> %8915, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8917 = lshr <32 x i16> %8916, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8918 = shufflevector <32 x i16> %8917, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8919 = add nsw i64 %8668, %.pre-phi3438
  %8920 = getelementptr inbounds i16, i16* %66, i64 %8919
  %8921 = bitcast i16* %8920 to <16 x i16>*
  store <16 x i16> %8918, <16 x i16>* %8921, align 2, !tbaa !401
  %8922 = shufflevector <32 x i16> %8917, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8923 = getelementptr inbounds i16, i16* %8920, i64 16
  %8924 = bitcast i16* %8923 to <16 x i16>*
  store <16 x i16> %8922, <16 x i16>* %8924, align 2, !tbaa !401
  %indvars.iv.next3207 = add nuw nsw i64 %indvars.iv3206, 1
  %.not2656 = icmp eq i64 %indvars.iv.next3207, %184
  br i1 %.not2656, label %"end for blur_y.s0.x.x.rebased471", label %"for blur_y.s0.x.x.rebased470"

"for blur_y.s0.x.x.rebased478":                   ; preds = %"for blur_y.s0.x.x.rebased478.preheader", %"consume blur_x486"
  %blur_y.s0.x.x.rebased480 = phi i32 [ %9037, %"consume blur_x486" ], [ 0, %"for blur_y.s0.x.x.rebased478.preheader" ]
  %8925 = add nsw i32 %blur_y.s0.x.x.rebased480, %t1626
  %a224 = shl nsw i32 %8925, 5
  %8926 = icmp sgt i32 %a14, %a224
  %b230 = select i1 %8926, i32 %a224, i32 %a14
  %8927 = icmp slt i32 %8925, 1
  %8928 = icmp sgt i32 %4, %a224
  %8929 = or i1 %8927, %8928
  br i1 %8929, label %"produce blur_x484", label %"consume blur_x486"

"end for blur_y.s0.x.x.rebased479":               ; preds = %"consume blur_x486", %"end for blur_y.s0.x.x.rebased471"
  br i1 %34, label %"produce blur_x490", label %after_bb487

"produce blur_x484":                              ; preds = %"for blur_y.s0.x.x.rebased478"
  %8930 = icmp slt i32 %b230, %4
  %blur_x.s0.x.v1.base.s485 = select i1 %8930, i32 %b230, i32 %4
  %t989 = add nsw i32 %blur_x.s0.x.v1.base.s485, %t1977
  %8931 = sext i32 %t989 to i64
  %8932 = getelementptr inbounds i16, i16* %read_input, i64 %8931
  %8933 = getelementptr inbounds i16, i16* %8932, i64 1
  %8934 = bitcast i16* %8933 to <16 x i16>*
  %8935 = load <16 x i16>, <16 x i16>* %8934, align 2, !tbaa !396
  %8936 = getelementptr inbounds i16, i16* %8932, i64 17
  %8937 = bitcast i16* %8936 to <16 x i16>*
  %8938 = load <16 x i16>, <16 x i16>* %8937, align 2, !tbaa !396
  %8939 = bitcast i16* %8932 to <16 x i16>*
  %8940 = load <16 x i16>, <16 x i16>* %8939, align 2, !tbaa !396
  %8941 = getelementptr inbounds i16, i16* %8932, i64 16
  %8942 = bitcast i16* %8941 to <16 x i16>*
  %8943 = load <16 x i16>, <16 x i16>* %8942, align 2, !tbaa !396
  %8944 = getelementptr inbounds i16, i16* %8932, i64 2
  %8945 = bitcast i16* %8944 to <16 x i16>*
  %8946 = load <16 x i16>, <16 x i16>* %8945, align 2, !tbaa !396
  %8947 = getelementptr inbounds i16, i16* %8932, i64 18
  %8948 = bitcast i16* %8947 to <16 x i16>*
  %8949 = load <16 x i16>, <16 x i16>* %8948, align 2, !tbaa !396
  %8950 = getelementptr inbounds i16, i16* %8932, i64 4
  %8951 = bitcast i16* %8950 to <16 x i16>*
  %8952 = load <16 x i16>, <16 x i16>* %8951, align 2, !tbaa !396
  %8953 = getelementptr inbounds i16, i16* %8932, i64 20
  %8954 = bitcast i16* %8953 to <16 x i16>*
  %8955 = load <16 x i16>, <16 x i16>* %8954, align 2, !tbaa !396
  %8956 = getelementptr inbounds i16, i16* %8932, i64 3
  %8957 = bitcast i16* %8956 to <16 x i16>*
  %8958 = load <16 x i16>, <16 x i16>* %8957, align 2, !tbaa !396
  %8959 = getelementptr inbounds i16, i16* %8932, i64 19
  %8960 = bitcast i16* %8959 to <16 x i16>*
  %8961 = load <16 x i16>, <16 x i16>* %8960, align 2, !tbaa !396
  %8962 = add <16 x i16> %8940, %8935
  %8963 = add <16 x i16> %8962, %8946
  %8964 = add <16 x i16> %8963, %8952
  %8965 = add <16 x i16> %8964, %8958
  %8966 = add <16 x i16> %8943, %8938
  %8967 = add <16 x i16> %8966, %8949
  %8968 = add <16 x i16> %8967, %8955
  %8969 = add <16 x i16> %8968, %8961
  %8970 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8965, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8971 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8969, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %8972 = shufflevector <16 x i16> %8970, <16 x i16> %8971, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8973 = lshr <32 x i16> %8972, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %8974 = shufflevector <32 x i16> %8973, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8975 = sext i32 %blur_x.s0.x.v1.base.s485 to i64
  %8976 = add nsw i64 %8975, %8800
  %8977 = getelementptr inbounds i16, i16* %blur_x, i64 %8976
  %8978 = bitcast i16* %8977 to <16 x i16>*
  store <16 x i16> %8974, <16 x i16>* %8978, align 2, !tbaa !399
  %8979 = shufflevector <32 x i16> %8973, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8980 = getelementptr inbounds i16, i16* %8977, i64 16
  %8981 = bitcast i16* %8980 to <16 x i16>*
  store <16 x i16> %8979, <16 x i16>* %8981, align 2, !tbaa !399
  br label %"consume blur_x486"

"consume blur_x486":                              ; preds = %"for blur_y.s0.x.x.rebased478", %"produce blur_x484"
  %8982 = sext i32 %b230 to i64
  %8983 = add nsw i64 %8803, %8982
  %8984 = getelementptr inbounds i16, i16* %blur_x, i64 %8983
  %8985 = bitcast i16* %8984 to <16 x i16>*
  %8986 = load <16 x i16>, <16 x i16>* %8985, align 2, !tbaa !399
  %8987 = getelementptr inbounds i16, i16* %8984, i64 16
  %8988 = bitcast i16* %8987 to <16 x i16>*
  %8989 = load <16 x i16>, <16 x i16>* %8988, align 2, !tbaa !399
  %8990 = add nsw i64 %8806, %8982
  %8991 = getelementptr inbounds i16, i16* %blur_x, i64 %8990
  %8992 = bitcast i16* %8991 to <16 x i16>*
  %8993 = load <16 x i16>, <16 x i16>* %8992, align 2, !tbaa !399
  %8994 = getelementptr inbounds i16, i16* %8991, i64 16
  %8995 = bitcast i16* %8994 to <16 x i16>*
  %8996 = load <16 x i16>, <16 x i16>* %8995, align 2, !tbaa !399
  %8997 = add nsw i64 %8809, %8982
  %8998 = getelementptr inbounds i16, i16* %blur_x, i64 %8997
  %8999 = bitcast i16* %8998 to <16 x i16>*
  %9000 = load <16 x i16>, <16 x i16>* %8999, align 2, !tbaa !399
  %9001 = getelementptr inbounds i16, i16* %8998, i64 16
  %9002 = bitcast i16* %9001 to <16 x i16>*
  %9003 = load <16 x i16>, <16 x i16>* %9002, align 2, !tbaa !399
  %9004 = add nsw i64 %8812, %8982
  %9005 = getelementptr inbounds i16, i16* %blur_x, i64 %9004
  %9006 = bitcast i16* %9005 to <16 x i16>*
  %9007 = load <16 x i16>, <16 x i16>* %9006, align 2, !tbaa !399
  %9008 = getelementptr inbounds i16, i16* %9005, i64 16
  %9009 = bitcast i16* %9008 to <16 x i16>*
  %9010 = load <16 x i16>, <16 x i16>* %9009, align 2, !tbaa !399
  %9011 = add nsw i64 %8815, %8982
  %9012 = getelementptr inbounds i16, i16* %blur_x, i64 %9011
  %9013 = bitcast i16* %9012 to <16 x i16>*
  %9014 = load <16 x i16>, <16 x i16>* %9013, align 2, !tbaa !399
  %9015 = getelementptr inbounds i16, i16* %9012, i64 16
  %9016 = bitcast i16* %9015 to <16 x i16>*
  %9017 = load <16 x i16>, <16 x i16>* %9016, align 2, !tbaa !399
  %9018 = add <16 x i16> %8993, %8986
  %9019 = add <16 x i16> %9018, %9000
  %9020 = add <16 x i16> %9019, %9007
  %9021 = add <16 x i16> %9020, %9014
  %9022 = add <16 x i16> %8996, %8989
  %9023 = add <16 x i16> %9022, %9003
  %9024 = add <16 x i16> %9023, %9010
  %9025 = add <16 x i16> %9024, %9017
  %9026 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9021, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9027 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9025, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9028 = shufflevector <16 x i16> %9026, <16 x i16> %9027, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9029 = lshr <32 x i16> %9028, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9030 = shufflevector <32 x i16> %9029, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9031 = add nsw i64 %8819, %8982
  %9032 = getelementptr inbounds i16, i16* %66, i64 %9031
  %9033 = bitcast i16* %9032 to <16 x i16>*
  store <16 x i16> %9030, <16 x i16>* %9033, align 2, !tbaa !401
  %9034 = shufflevector <32 x i16> %9029, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9035 = getelementptr inbounds i16, i16* %9032, i64 16
  %9036 = bitcast i16* %9035 to <16 x i16>*
  store <16 x i16> %9034, <16 x i16>* %9036, align 2, !tbaa !401
  %9037 = add nuw nsw i32 %blur_y.s0.x.x.rebased480, 1
  %.not2655 = icmp eq i32 %9037, %t1683
  br i1 %.not2655, label %"end for blur_y.s0.x.x.rebased479", label %"for blur_y.s0.x.x.rebased478"

after_bb487:                                      ; preds = %"end for blur_y.s0.x.x.rebased479", %"produce blur_x490"
  br i1 %100, label %"for blur_y.s0.x.x.rebased492.preheader", label %"end for blur_y.s0.x.x.rebased493", !prof !386

"for blur_y.s0.x.x.rebased492.preheader":         ; preds = %after_bb487
  %9038 = sext i32 %t1738 to i64
  %9039 = zext i32 %.pre-phi3386 to i64
  %9040 = mul nsw i64 %9039, %112
  %9041 = sub nsw i64 %9040, %96
  %9042 = zext i32 %.pre-phi3382 to i64
  %9043 = mul nsw i64 %9042, %112
  %9044 = sub nsw i64 %9043, %96
  %9045 = zext i32 %.pre-phi3390 to i64
  %9046 = mul nsw i64 %9045, %112
  %9047 = sub nsw i64 %9046, %96
  %9048 = zext i32 %.pre-phi3402 to i64
  %9049 = mul nsw i64 %9048, %112
  %9050 = sub nsw i64 %9049, %96
  %9051 = zext i32 %.pre-phi3396 to i64
  %9052 = mul nsw i64 %9051, %112
  %9053 = sub nsw i64 %9052, %96
  %9054 = sext i32 %a26 to i64
  %9055 = add nsw i64 %9054, 18
  %9056 = mul nsw i64 %9055, %113
  %9057 = add nsw i64 %9056, %116
  br label %"for blur_y.s0.x.x.rebased492"

"produce blur_x490":                              ; preds = %"end for blur_y.s0.x.x.rebased479"
  %9058 = getelementptr inbounds i16, i16* %read_input, i64 %151
  %9059 = getelementptr inbounds i16, i16* %9058, i64 -31
  %9060 = bitcast i16* %9059 to <16 x i16>*
  %9061 = load <16 x i16>, <16 x i16>* %9060, align 2, !tbaa !396
  %9062 = getelementptr inbounds i16, i16* %9058, i64 -15
  %9063 = bitcast i16* %9062 to <16 x i16>*
  %9064 = load <16 x i16>, <16 x i16>* %9063, align 2, !tbaa !396
  %9065 = getelementptr inbounds i16, i16* %9058, i64 -32
  %9066 = bitcast i16* %9065 to <16 x i16>*
  %9067 = load <16 x i16>, <16 x i16>* %9066, align 2, !tbaa !396
  %9068 = getelementptr inbounds i16, i16* %9058, i64 -16
  %9069 = bitcast i16* %9068 to <16 x i16>*
  %9070 = load <16 x i16>, <16 x i16>* %9069, align 2, !tbaa !396
  %9071 = getelementptr inbounds i16, i16* %9058, i64 -30
  %9072 = bitcast i16* %9071 to <16 x i16>*
  %9073 = load <16 x i16>, <16 x i16>* %9072, align 2, !tbaa !396
  %9074 = getelementptr inbounds i16, i16* %9058, i64 -14
  %9075 = bitcast i16* %9074 to <16 x i16>*
  %9076 = load <16 x i16>, <16 x i16>* %9075, align 2, !tbaa !396
  %9077 = getelementptr inbounds i16, i16* %9058, i64 -28
  %9078 = bitcast i16* %9077 to <16 x i16>*
  %9079 = load <16 x i16>, <16 x i16>* %9078, align 2, !tbaa !396
  %9080 = getelementptr inbounds i16, i16* %9058, i64 -12
  %9081 = bitcast i16* %9080 to <16 x i16>*
  %9082 = load <16 x i16>, <16 x i16>* %9081, align 2, !tbaa !396
  %9083 = getelementptr inbounds i16, i16* %9058, i64 -29
  %9084 = bitcast i16* %9083 to <16 x i16>*
  %9085 = load <16 x i16>, <16 x i16>* %9084, align 2, !tbaa !396
  %9086 = getelementptr inbounds i16, i16* %9058, i64 -13
  %9087 = bitcast i16* %9086 to <16 x i16>*
  %9088 = load <16 x i16>, <16 x i16>* %9087, align 2, !tbaa !396
  %9089 = add <16 x i16> %9067, %9061
  %9090 = add <16 x i16> %9089, %9073
  %9091 = add <16 x i16> %9090, %9079
  %9092 = add <16 x i16> %9091, %9085
  %9093 = add <16 x i16> %9070, %9064
  %9094 = add <16 x i16> %9093, %9076
  %9095 = add <16 x i16> %9094, %9082
  %9096 = add <16 x i16> %9095, %9088
  %9097 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9092, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9098 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9096, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9099 = shufflevector <16 x i16> %9097, <16 x i16> %9098, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9100 = lshr <32 x i16> %9099, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9101 = shufflevector <32 x i16> %9100, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9102 = zext i32 %.pre-phi3402 to i64
  %9103 = mul nsw i64 %97, %9102
  %9104 = add nsw i64 %99, %9103
  %9105 = getelementptr inbounds i16, i16* %blur_x, i64 %9104
  %9106 = getelementptr inbounds i16, i16* %9105, i64 -32
  %9107 = bitcast i16* %9106 to <16 x i16>*
  store <16 x i16> %9101, <16 x i16>* %9107, align 2, !tbaa !399
  %9108 = shufflevector <32 x i16> %9100, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9109 = getelementptr inbounds i16, i16* %9105, i64 -16
  %9110 = bitcast i16* %9109 to <16 x i16>*
  store <16 x i16> %9108, <16 x i16>* %9110, align 2, !tbaa !399
  %9111 = zext i32 %.pre-phi3386 to i64
  %9112 = mul nsw i64 %9111, %112
  %9113 = add nsw i64 %9112, %94
  %9114 = getelementptr inbounds i16, i16* %blur_x, i64 %9113
  %9115 = getelementptr inbounds i16, i16* %9114, i64 -32
  %9116 = bitcast i16* %9115 to <16 x i16>*
  %9117 = load <16 x i16>, <16 x i16>* %9116, align 2, !tbaa !399
  %9118 = getelementptr inbounds i16, i16* %9114, i64 -16
  %9119 = bitcast i16* %9118 to <16 x i16>*
  %9120 = load <16 x i16>, <16 x i16>* %9119, align 2, !tbaa !399
  %9121 = zext i32 %.pre-phi3382 to i64
  %9122 = mul nsw i64 %9121, %112
  %9123 = add nsw i64 %9122, %94
  %9124 = getelementptr inbounds i16, i16* %blur_x, i64 %9123
  %9125 = getelementptr inbounds i16, i16* %9124, i64 -32
  %9126 = bitcast i16* %9125 to <16 x i16>*
  %9127 = load <16 x i16>, <16 x i16>* %9126, align 2, !tbaa !399
  %9128 = getelementptr inbounds i16, i16* %9124, i64 -16
  %9129 = bitcast i16* %9128 to <16 x i16>*
  %9130 = load <16 x i16>, <16 x i16>* %9129, align 2, !tbaa !399
  %9131 = zext i32 %.pre-phi3390 to i64
  %9132 = mul nsw i64 %9131, %112
  %9133 = add nsw i64 %9132, %94
  %9134 = getelementptr inbounds i16, i16* %blur_x, i64 %9133
  %9135 = getelementptr inbounds i16, i16* %9134, i64 -32
  %9136 = bitcast i16* %9135 to <16 x i16>*
  %9137 = load <16 x i16>, <16 x i16>* %9136, align 2, !tbaa !399
  %9138 = getelementptr inbounds i16, i16* %9134, i64 -16
  %9139 = bitcast i16* %9138 to <16 x i16>*
  %9140 = load <16 x i16>, <16 x i16>* %9139, align 2, !tbaa !399
  %9141 = mul nsw i64 %9102, %112
  %9142 = add nsw i64 %9141, %94
  %9143 = getelementptr inbounds i16, i16* %blur_x, i64 %9142
  %9144 = getelementptr inbounds i16, i16* %9143, i64 -32
  %9145 = bitcast i16* %9144 to <16 x i16>*
  %9146 = load <16 x i16>, <16 x i16>* %9145, align 2, !tbaa !399
  %9147 = getelementptr inbounds i16, i16* %9143, i64 -16
  %9148 = bitcast i16* %9147 to <16 x i16>*
  %9149 = load <16 x i16>, <16 x i16>* %9148, align 2, !tbaa !399
  %9150 = zext i32 %.pre-phi3396 to i64
  %9151 = mul nsw i64 %9150, %112
  %9152 = add nsw i64 %9151, %94
  %9153 = getelementptr inbounds i16, i16* %blur_x, i64 %9152
  %9154 = getelementptr inbounds i16, i16* %9153, i64 -32
  %9155 = bitcast i16* %9154 to <16 x i16>*
  %9156 = load <16 x i16>, <16 x i16>* %9155, align 2, !tbaa !399
  %9157 = getelementptr inbounds i16, i16* %9153, i64 -16
  %9158 = bitcast i16* %9157 to <16 x i16>*
  %9159 = load <16 x i16>, <16 x i16>* %9158, align 2, !tbaa !399
  %9160 = add <16 x i16> %9127, %9117
  %9161 = add <16 x i16> %9160, %9137
  %9162 = add <16 x i16> %9161, %9146
  %9163 = add <16 x i16> %9162, %9156
  %9164 = add <16 x i16> %9130, %9120
  %9165 = add <16 x i16> %9164, %9140
  %9166 = add <16 x i16> %9165, %9149
  %9167 = add <16 x i16> %9166, %9159
  %9168 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9163, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9169 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9167, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9170 = shufflevector <16 x i16> %9168, <16 x i16> %9169, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9171 = lshr <32 x i16> %9170, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9172 = shufflevector <32 x i16> %9171, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9173 = sext i32 %a26 to i64
  %9174 = add nsw i64 %9173, 18
  %9175 = mul nsw i64 %9174, %113
  %9176 = add nsw i64 %115, %9175
  %9177 = getelementptr inbounds i16, i16* %66, i64 %9176
  %9178 = getelementptr inbounds i16, i16* %9177, i64 -32
  %9179 = bitcast i16* %9178 to <16 x i16>*
  store <16 x i16> %9172, <16 x i16>* %9179, align 2, !tbaa !401
  %9180 = shufflevector <32 x i16> %9171, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9181 = getelementptr inbounds i16, i16* %9177, i64 -16
  %9182 = bitcast i16* %9181 to <16 x i16>*
  store <16 x i16> %9180, <16 x i16>* %9182, align 2, !tbaa !401
  br label %after_bb487

"for blur_y.s0.x.x.rebased492":                   ; preds = %"for blur_y.s0.x.x.rebased492.preheader", %"consume blur_x499"
  %indvars.iv3209 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased492.preheader" ], [ %indvars.iv.next3210, %"consume blur_x499" ]
  %9183 = add nsw i64 %indvars.iv3209, %101
  %9184 = icmp slt i64 %9183, 1
  %9185 = trunc i64 %9183 to i32
  %9186 = shl nsw i32 %9185, 5
  %9187 = icmp sgt i32 %4, %9186
  %9188 = or i1 %9184, %9187
  br i1 %9188, label %"produce blur_x498", label %"for blur_y.s0.x.x.rebased492.consume blur_x499_crit_edge"

"for blur_y.s0.x.x.rebased492.consume blur_x499_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased492"
  %.pre3439 = shl nsw i64 %9183, 5
  br label %"consume blur_x499"

"end for blur_y.s0.x.x.rebased493":               ; preds = %"consume blur_x499", %after_bb487
  br i1 %102, label %"for blur_y.s0.x.x.rebased500.preheader", label %"end for blur_y.s0.x.x.rebased501", !prof !386

"for blur_y.s0.x.x.rebased500.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased493"
  %9189 = sext i32 %t1738 to i64
  %9190 = zext i32 %.pre-phi3386 to i64
  %9191 = mul nsw i64 %9190, %112
  %9192 = sub nsw i64 %9191, %96
  %9193 = zext i32 %.pre-phi3382 to i64
  %9194 = mul nsw i64 %9193, %112
  %9195 = sub nsw i64 %9194, %96
  %9196 = zext i32 %.pre-phi3390 to i64
  %9197 = mul nsw i64 %9196, %112
  %9198 = sub nsw i64 %9197, %96
  %9199 = zext i32 %.pre-phi3402 to i64
  %9200 = mul nsw i64 %9199, %112
  %9201 = sub nsw i64 %9200, %96
  %9202 = zext i32 %.pre-phi3396 to i64
  %9203 = mul nsw i64 %9202, %112
  %9204 = sub nsw i64 %9203, %96
  %9205 = sext i32 %a26 to i64
  %9206 = add nsw i64 %9205, 18
  %9207 = mul nsw i64 %9206, %113
  %9208 = add nsw i64 %9207, %116
  br label %"for blur_y.s0.x.x.rebased500"

"produce blur_x498":                              ; preds = %"for blur_y.s0.x.x.rebased492"
  %t1000 = add nsw i32 %9186, %t1993
  %9209 = sext i32 %t1000 to i64
  %9210 = getelementptr inbounds i16, i16* %read_input, i64 %9209
  %9211 = getelementptr inbounds i16, i16* %9210, i64 1
  %9212 = bitcast i16* %9211 to <16 x i16>*
  %9213 = load <16 x i16>, <16 x i16>* %9212, align 2, !tbaa !396
  %9214 = getelementptr inbounds i16, i16* %9210, i64 17
  %9215 = bitcast i16* %9214 to <16 x i16>*
  %9216 = load <16 x i16>, <16 x i16>* %9215, align 2, !tbaa !396
  %9217 = bitcast i16* %9210 to <16 x i16>*
  %9218 = load <16 x i16>, <16 x i16>* %9217, align 2, !tbaa !396
  %9219 = getelementptr inbounds i16, i16* %9210, i64 16
  %9220 = bitcast i16* %9219 to <16 x i16>*
  %9221 = load <16 x i16>, <16 x i16>* %9220, align 2, !tbaa !396
  %9222 = getelementptr inbounds i16, i16* %9210, i64 2
  %9223 = bitcast i16* %9222 to <16 x i16>*
  %9224 = load <16 x i16>, <16 x i16>* %9223, align 2, !tbaa !396
  %9225 = getelementptr inbounds i16, i16* %9210, i64 18
  %9226 = bitcast i16* %9225 to <16 x i16>*
  %9227 = load <16 x i16>, <16 x i16>* %9226, align 2, !tbaa !396
  %9228 = getelementptr inbounds i16, i16* %9210, i64 4
  %9229 = bitcast i16* %9228 to <16 x i16>*
  %9230 = load <16 x i16>, <16 x i16>* %9229, align 2, !tbaa !396
  %9231 = getelementptr inbounds i16, i16* %9210, i64 20
  %9232 = bitcast i16* %9231 to <16 x i16>*
  %9233 = load <16 x i16>, <16 x i16>* %9232, align 2, !tbaa !396
  %9234 = getelementptr inbounds i16, i16* %9210, i64 3
  %9235 = bitcast i16* %9234 to <16 x i16>*
  %9236 = load <16 x i16>, <16 x i16>* %9235, align 2, !tbaa !396
  %9237 = getelementptr inbounds i16, i16* %9210, i64 19
  %9238 = bitcast i16* %9237 to <16 x i16>*
  %9239 = load <16 x i16>, <16 x i16>* %9238, align 2, !tbaa !396
  %9240 = add <16 x i16> %9218, %9213
  %9241 = add <16 x i16> %9240, %9224
  %9242 = add <16 x i16> %9241, %9230
  %9243 = add <16 x i16> %9242, %9236
  %9244 = add <16 x i16> %9221, %9216
  %9245 = add <16 x i16> %9244, %9227
  %9246 = add <16 x i16> %9245, %9233
  %9247 = add <16 x i16> %9246, %9239
  %9248 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9243, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9249 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9247, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9250 = shufflevector <16 x i16> %9248, <16 x i16> %9249, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9251 = lshr <32 x i16> %9250, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9252 = shufflevector <32 x i16> %9251, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9253 = shl nsw i64 %9183, 5
  %9254 = add nsw i64 %9253, %9038
  %9255 = getelementptr inbounds i16, i16* %blur_x, i64 %9254
  %9256 = bitcast i16* %9255 to <16 x i16>*
  store <16 x i16> %9252, <16 x i16>* %9256, align 2, !tbaa !399
  %9257 = shufflevector <32 x i16> %9251, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9258 = getelementptr inbounds i16, i16* %9255, i64 16
  %9259 = bitcast i16* %9258 to <16 x i16>*
  store <16 x i16> %9257, <16 x i16>* %9259, align 2, !tbaa !399
  br label %"consume blur_x499"

"consume blur_x499":                              ; preds = %"for blur_y.s0.x.x.rebased492.consume blur_x499_crit_edge", %"produce blur_x498"
  %.pre-phi3440 = phi i64 [ %.pre3439, %"for blur_y.s0.x.x.rebased492.consume blur_x499_crit_edge" ], [ %9253, %"produce blur_x498" ]
  %9260 = add nsw i64 %9041, %.pre-phi3440
  %9261 = getelementptr inbounds i16, i16* %blur_x, i64 %9260
  %9262 = bitcast i16* %9261 to <16 x i16>*
  %9263 = load <16 x i16>, <16 x i16>* %9262, align 2, !tbaa !399
  %9264 = getelementptr inbounds i16, i16* %9261, i64 16
  %9265 = bitcast i16* %9264 to <16 x i16>*
  %9266 = load <16 x i16>, <16 x i16>* %9265, align 2, !tbaa !399
  %9267 = add nsw i64 %9044, %.pre-phi3440
  %9268 = getelementptr inbounds i16, i16* %blur_x, i64 %9267
  %9269 = bitcast i16* %9268 to <16 x i16>*
  %9270 = load <16 x i16>, <16 x i16>* %9269, align 2, !tbaa !399
  %9271 = getelementptr inbounds i16, i16* %9268, i64 16
  %9272 = bitcast i16* %9271 to <16 x i16>*
  %9273 = load <16 x i16>, <16 x i16>* %9272, align 2, !tbaa !399
  %9274 = add nsw i64 %9047, %.pre-phi3440
  %9275 = getelementptr inbounds i16, i16* %blur_x, i64 %9274
  %9276 = bitcast i16* %9275 to <16 x i16>*
  %9277 = load <16 x i16>, <16 x i16>* %9276, align 2, !tbaa !399
  %9278 = getelementptr inbounds i16, i16* %9275, i64 16
  %9279 = bitcast i16* %9278 to <16 x i16>*
  %9280 = load <16 x i16>, <16 x i16>* %9279, align 2, !tbaa !399
  %9281 = add nsw i64 %9050, %.pre-phi3440
  %9282 = getelementptr inbounds i16, i16* %blur_x, i64 %9281
  %9283 = bitcast i16* %9282 to <16 x i16>*
  %9284 = load <16 x i16>, <16 x i16>* %9283, align 2, !tbaa !399
  %9285 = getelementptr inbounds i16, i16* %9282, i64 16
  %9286 = bitcast i16* %9285 to <16 x i16>*
  %9287 = load <16 x i16>, <16 x i16>* %9286, align 2, !tbaa !399
  %9288 = add nsw i64 %9053, %.pre-phi3440
  %9289 = getelementptr inbounds i16, i16* %blur_x, i64 %9288
  %9290 = bitcast i16* %9289 to <16 x i16>*
  %9291 = load <16 x i16>, <16 x i16>* %9290, align 2, !tbaa !399
  %9292 = getelementptr inbounds i16, i16* %9289, i64 16
  %9293 = bitcast i16* %9292 to <16 x i16>*
  %9294 = load <16 x i16>, <16 x i16>* %9293, align 2, !tbaa !399
  %9295 = add <16 x i16> %9270, %9263
  %9296 = add <16 x i16> %9295, %9277
  %9297 = add <16 x i16> %9296, %9284
  %9298 = add <16 x i16> %9297, %9291
  %9299 = add <16 x i16> %9273, %9266
  %9300 = add <16 x i16> %9299, %9280
  %9301 = add <16 x i16> %9300, %9287
  %9302 = add <16 x i16> %9301, %9294
  %9303 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9298, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9304 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9302, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9305 = shufflevector <16 x i16> %9303, <16 x i16> %9304, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9306 = lshr <32 x i16> %9305, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9307 = shufflevector <32 x i16> %9306, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9308 = add nsw i64 %9057, %.pre-phi3440
  %9309 = getelementptr inbounds i16, i16* %66, i64 %9308
  %9310 = bitcast i16* %9309 to <16 x i16>*
  store <16 x i16> %9307, <16 x i16>* %9310, align 2, !tbaa !401
  %9311 = shufflevector <32 x i16> %9306, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9312 = getelementptr inbounds i16, i16* %9309, i64 16
  %9313 = bitcast i16* %9312 to <16 x i16>*
  store <16 x i16> %9311, <16 x i16>* %9313, align 2, !tbaa !401
  %indvars.iv.next3210 = add nuw nsw i64 %indvars.iv3209, 1
  %.not2654 = icmp eq i64 %indvars.iv.next3210, %184
  br i1 %.not2654, label %"end for blur_y.s0.x.x.rebased493", label %"for blur_y.s0.x.x.rebased492"

"for blur_y.s0.x.x.rebased500":                   ; preds = %"for blur_y.s0.x.x.rebased500.preheader", %"consume blur_x508"
  %blur_y.s0.x.x.rebased502 = phi i32 [ %9426, %"consume blur_x508" ], [ 0, %"for blur_y.s0.x.x.rebased500.preheader" ]
  %9314 = add nsw i32 %blur_y.s0.x.x.rebased502, %t1626
  %a231 = shl nsw i32 %9314, 5
  %9315 = icmp sgt i32 %a14, %a231
  %b237 = select i1 %9315, i32 %a231, i32 %a14
  %9316 = icmp slt i32 %9314, 1
  %9317 = icmp sgt i32 %4, %a231
  %9318 = or i1 %9316, %9317
  br i1 %9318, label %"produce blur_x506", label %"consume blur_x508"

"end for blur_y.s0.x.x.rebased501":               ; preds = %"consume blur_x508", %"end for blur_y.s0.x.x.rebased493"
  br i1 %34, label %"produce blur_x512", label %after_bb509

"produce blur_x506":                              ; preds = %"for blur_y.s0.x.x.rebased500"
  %9319 = icmp slt i32 %b237, %4
  %blur_x.s0.x.v1.base.s507 = select i1 %9319, i32 %b237, i32 %4
  %t1005 = add nsw i32 %blur_x.s0.x.v1.base.s507, %t1993
  %9320 = sext i32 %t1005 to i64
  %9321 = getelementptr inbounds i16, i16* %read_input, i64 %9320
  %9322 = getelementptr inbounds i16, i16* %9321, i64 1
  %9323 = bitcast i16* %9322 to <16 x i16>*
  %9324 = load <16 x i16>, <16 x i16>* %9323, align 2, !tbaa !396
  %9325 = getelementptr inbounds i16, i16* %9321, i64 17
  %9326 = bitcast i16* %9325 to <16 x i16>*
  %9327 = load <16 x i16>, <16 x i16>* %9326, align 2, !tbaa !396
  %9328 = bitcast i16* %9321 to <16 x i16>*
  %9329 = load <16 x i16>, <16 x i16>* %9328, align 2, !tbaa !396
  %9330 = getelementptr inbounds i16, i16* %9321, i64 16
  %9331 = bitcast i16* %9330 to <16 x i16>*
  %9332 = load <16 x i16>, <16 x i16>* %9331, align 2, !tbaa !396
  %9333 = getelementptr inbounds i16, i16* %9321, i64 2
  %9334 = bitcast i16* %9333 to <16 x i16>*
  %9335 = load <16 x i16>, <16 x i16>* %9334, align 2, !tbaa !396
  %9336 = getelementptr inbounds i16, i16* %9321, i64 18
  %9337 = bitcast i16* %9336 to <16 x i16>*
  %9338 = load <16 x i16>, <16 x i16>* %9337, align 2, !tbaa !396
  %9339 = getelementptr inbounds i16, i16* %9321, i64 4
  %9340 = bitcast i16* %9339 to <16 x i16>*
  %9341 = load <16 x i16>, <16 x i16>* %9340, align 2, !tbaa !396
  %9342 = getelementptr inbounds i16, i16* %9321, i64 20
  %9343 = bitcast i16* %9342 to <16 x i16>*
  %9344 = load <16 x i16>, <16 x i16>* %9343, align 2, !tbaa !396
  %9345 = getelementptr inbounds i16, i16* %9321, i64 3
  %9346 = bitcast i16* %9345 to <16 x i16>*
  %9347 = load <16 x i16>, <16 x i16>* %9346, align 2, !tbaa !396
  %9348 = getelementptr inbounds i16, i16* %9321, i64 19
  %9349 = bitcast i16* %9348 to <16 x i16>*
  %9350 = load <16 x i16>, <16 x i16>* %9349, align 2, !tbaa !396
  %9351 = add <16 x i16> %9329, %9324
  %9352 = add <16 x i16> %9351, %9335
  %9353 = add <16 x i16> %9352, %9341
  %9354 = add <16 x i16> %9353, %9347
  %9355 = add <16 x i16> %9332, %9327
  %9356 = add <16 x i16> %9355, %9338
  %9357 = add <16 x i16> %9356, %9344
  %9358 = add <16 x i16> %9357, %9350
  %9359 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9354, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9360 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9358, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9361 = shufflevector <16 x i16> %9359, <16 x i16> %9360, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9362 = lshr <32 x i16> %9361, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9363 = shufflevector <32 x i16> %9362, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9364 = sext i32 %blur_x.s0.x.v1.base.s507 to i64
  %9365 = add nsw i64 %9364, %9189
  %9366 = getelementptr inbounds i16, i16* %blur_x, i64 %9365
  %9367 = bitcast i16* %9366 to <16 x i16>*
  store <16 x i16> %9363, <16 x i16>* %9367, align 2, !tbaa !399
  %9368 = shufflevector <32 x i16> %9362, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9369 = getelementptr inbounds i16, i16* %9366, i64 16
  %9370 = bitcast i16* %9369 to <16 x i16>*
  store <16 x i16> %9368, <16 x i16>* %9370, align 2, !tbaa !399
  br label %"consume blur_x508"

"consume blur_x508":                              ; preds = %"for blur_y.s0.x.x.rebased500", %"produce blur_x506"
  %9371 = sext i32 %b237 to i64
  %9372 = add nsw i64 %9192, %9371
  %9373 = getelementptr inbounds i16, i16* %blur_x, i64 %9372
  %9374 = bitcast i16* %9373 to <16 x i16>*
  %9375 = load <16 x i16>, <16 x i16>* %9374, align 2, !tbaa !399
  %9376 = getelementptr inbounds i16, i16* %9373, i64 16
  %9377 = bitcast i16* %9376 to <16 x i16>*
  %9378 = load <16 x i16>, <16 x i16>* %9377, align 2, !tbaa !399
  %9379 = add nsw i64 %9195, %9371
  %9380 = getelementptr inbounds i16, i16* %blur_x, i64 %9379
  %9381 = bitcast i16* %9380 to <16 x i16>*
  %9382 = load <16 x i16>, <16 x i16>* %9381, align 2, !tbaa !399
  %9383 = getelementptr inbounds i16, i16* %9380, i64 16
  %9384 = bitcast i16* %9383 to <16 x i16>*
  %9385 = load <16 x i16>, <16 x i16>* %9384, align 2, !tbaa !399
  %9386 = add nsw i64 %9198, %9371
  %9387 = getelementptr inbounds i16, i16* %blur_x, i64 %9386
  %9388 = bitcast i16* %9387 to <16 x i16>*
  %9389 = load <16 x i16>, <16 x i16>* %9388, align 2, !tbaa !399
  %9390 = getelementptr inbounds i16, i16* %9387, i64 16
  %9391 = bitcast i16* %9390 to <16 x i16>*
  %9392 = load <16 x i16>, <16 x i16>* %9391, align 2, !tbaa !399
  %9393 = add nsw i64 %9201, %9371
  %9394 = getelementptr inbounds i16, i16* %blur_x, i64 %9393
  %9395 = bitcast i16* %9394 to <16 x i16>*
  %9396 = load <16 x i16>, <16 x i16>* %9395, align 2, !tbaa !399
  %9397 = getelementptr inbounds i16, i16* %9394, i64 16
  %9398 = bitcast i16* %9397 to <16 x i16>*
  %9399 = load <16 x i16>, <16 x i16>* %9398, align 2, !tbaa !399
  %9400 = add nsw i64 %9204, %9371
  %9401 = getelementptr inbounds i16, i16* %blur_x, i64 %9400
  %9402 = bitcast i16* %9401 to <16 x i16>*
  %9403 = load <16 x i16>, <16 x i16>* %9402, align 2, !tbaa !399
  %9404 = getelementptr inbounds i16, i16* %9401, i64 16
  %9405 = bitcast i16* %9404 to <16 x i16>*
  %9406 = load <16 x i16>, <16 x i16>* %9405, align 2, !tbaa !399
  %9407 = add <16 x i16> %9382, %9375
  %9408 = add <16 x i16> %9407, %9389
  %9409 = add <16 x i16> %9408, %9396
  %9410 = add <16 x i16> %9409, %9403
  %9411 = add <16 x i16> %9385, %9378
  %9412 = add <16 x i16> %9411, %9392
  %9413 = add <16 x i16> %9412, %9399
  %9414 = add <16 x i16> %9413, %9406
  %9415 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9410, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9416 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9414, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9417 = shufflevector <16 x i16> %9415, <16 x i16> %9416, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9418 = lshr <32 x i16> %9417, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9419 = shufflevector <32 x i16> %9418, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9420 = add nsw i64 %9208, %9371
  %9421 = getelementptr inbounds i16, i16* %66, i64 %9420
  %9422 = bitcast i16* %9421 to <16 x i16>*
  store <16 x i16> %9419, <16 x i16>* %9422, align 2, !tbaa !401
  %9423 = shufflevector <32 x i16> %9418, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9424 = getelementptr inbounds i16, i16* %9421, i64 16
  %9425 = bitcast i16* %9424 to <16 x i16>*
  store <16 x i16> %9423, <16 x i16>* %9425, align 2, !tbaa !401
  %9426 = add nuw nsw i32 %blur_y.s0.x.x.rebased502, 1
  %.not2653 = icmp eq i32 %9426, %t1683
  br i1 %.not2653, label %"end for blur_y.s0.x.x.rebased501", label %"for blur_y.s0.x.x.rebased500"

after_bb509:                                      ; preds = %"end for blur_y.s0.x.x.rebased501", %"produce blur_x512"
  br i1 %100, label %"for blur_y.s0.x.x.rebased514.preheader", label %"end for blur_y.s0.x.x.rebased515", !prof !386

"for blur_y.s0.x.x.rebased514.preheader":         ; preds = %after_bb509
  %9427 = sext i32 %t1754 to i64
  %9428 = zext i32 %.pre-phi3390 to i64
  %9429 = mul nsw i64 %9428, %112
  %9430 = sub nsw i64 %9429, %96
  %9431 = zext i32 %.pre-phi3386 to i64
  %9432 = mul nsw i64 %9431, %112
  %9433 = sub nsw i64 %9432, %96
  %9434 = zext i32 %.pre-phi3396 to i64
  %9435 = mul nsw i64 %9434, %112
  %9436 = sub nsw i64 %9435, %96
  %9437 = zext i32 %.pre-phi3408 to i64
  %9438 = mul nsw i64 %9437, %112
  %9439 = sub nsw i64 %9438, %96
  %9440 = zext i32 %.pre-phi3402 to i64
  %9441 = mul nsw i64 %9440, %112
  %9442 = sub nsw i64 %9441, %96
  %9443 = sext i32 %a26 to i64
  %9444 = add nsw i64 %9443, 19
  %9445 = mul nsw i64 %9444, %113
  %9446 = add nsw i64 %9445, %116
  br label %"for blur_y.s0.x.x.rebased514"

"produce blur_x512":                              ; preds = %"end for blur_y.s0.x.x.rebased501"
  %9447 = getelementptr inbounds i16, i16* %read_input, i64 %153
  %9448 = getelementptr inbounds i16, i16* %9447, i64 -31
  %9449 = bitcast i16* %9448 to <16 x i16>*
  %9450 = load <16 x i16>, <16 x i16>* %9449, align 2, !tbaa !396
  %9451 = getelementptr inbounds i16, i16* %9447, i64 -15
  %9452 = bitcast i16* %9451 to <16 x i16>*
  %9453 = load <16 x i16>, <16 x i16>* %9452, align 2, !tbaa !396
  %9454 = getelementptr inbounds i16, i16* %9447, i64 -32
  %9455 = bitcast i16* %9454 to <16 x i16>*
  %9456 = load <16 x i16>, <16 x i16>* %9455, align 2, !tbaa !396
  %9457 = getelementptr inbounds i16, i16* %9447, i64 -16
  %9458 = bitcast i16* %9457 to <16 x i16>*
  %9459 = load <16 x i16>, <16 x i16>* %9458, align 2, !tbaa !396
  %9460 = getelementptr inbounds i16, i16* %9447, i64 -30
  %9461 = bitcast i16* %9460 to <16 x i16>*
  %9462 = load <16 x i16>, <16 x i16>* %9461, align 2, !tbaa !396
  %9463 = getelementptr inbounds i16, i16* %9447, i64 -14
  %9464 = bitcast i16* %9463 to <16 x i16>*
  %9465 = load <16 x i16>, <16 x i16>* %9464, align 2, !tbaa !396
  %9466 = getelementptr inbounds i16, i16* %9447, i64 -28
  %9467 = bitcast i16* %9466 to <16 x i16>*
  %9468 = load <16 x i16>, <16 x i16>* %9467, align 2, !tbaa !396
  %9469 = getelementptr inbounds i16, i16* %9447, i64 -12
  %9470 = bitcast i16* %9469 to <16 x i16>*
  %9471 = load <16 x i16>, <16 x i16>* %9470, align 2, !tbaa !396
  %9472 = getelementptr inbounds i16, i16* %9447, i64 -29
  %9473 = bitcast i16* %9472 to <16 x i16>*
  %9474 = load <16 x i16>, <16 x i16>* %9473, align 2, !tbaa !396
  %9475 = getelementptr inbounds i16, i16* %9447, i64 -13
  %9476 = bitcast i16* %9475 to <16 x i16>*
  %9477 = load <16 x i16>, <16 x i16>* %9476, align 2, !tbaa !396
  %9478 = add <16 x i16> %9456, %9450
  %9479 = add <16 x i16> %9478, %9462
  %9480 = add <16 x i16> %9479, %9468
  %9481 = add <16 x i16> %9480, %9474
  %9482 = add <16 x i16> %9459, %9453
  %9483 = add <16 x i16> %9482, %9465
  %9484 = add <16 x i16> %9483, %9471
  %9485 = add <16 x i16> %9484, %9477
  %9486 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9481, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9487 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9485, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9488 = shufflevector <16 x i16> %9486, <16 x i16> %9487, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9489 = lshr <32 x i16> %9488, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9490 = shufflevector <32 x i16> %9489, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9491 = zext i32 %.pre-phi3408 to i64
  %9492 = mul nsw i64 %97, %9491
  %9493 = add nsw i64 %99, %9492
  %9494 = getelementptr inbounds i16, i16* %blur_x, i64 %9493
  %9495 = getelementptr inbounds i16, i16* %9494, i64 -32
  %9496 = bitcast i16* %9495 to <16 x i16>*
  store <16 x i16> %9490, <16 x i16>* %9496, align 2, !tbaa !399
  %9497 = shufflevector <32 x i16> %9489, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9498 = getelementptr inbounds i16, i16* %9494, i64 -16
  %9499 = bitcast i16* %9498 to <16 x i16>*
  store <16 x i16> %9497, <16 x i16>* %9499, align 2, !tbaa !399
  %9500 = zext i32 %.pre-phi3390 to i64
  %9501 = mul nsw i64 %9500, %112
  %9502 = add nsw i64 %9501, %94
  %9503 = getelementptr inbounds i16, i16* %blur_x, i64 %9502
  %9504 = getelementptr inbounds i16, i16* %9503, i64 -32
  %9505 = bitcast i16* %9504 to <16 x i16>*
  %9506 = load <16 x i16>, <16 x i16>* %9505, align 2, !tbaa !399
  %9507 = getelementptr inbounds i16, i16* %9503, i64 -16
  %9508 = bitcast i16* %9507 to <16 x i16>*
  %9509 = load <16 x i16>, <16 x i16>* %9508, align 2, !tbaa !399
  %9510 = zext i32 %.pre-phi3386 to i64
  %9511 = mul nsw i64 %9510, %112
  %9512 = add nsw i64 %9511, %94
  %9513 = getelementptr inbounds i16, i16* %blur_x, i64 %9512
  %9514 = getelementptr inbounds i16, i16* %9513, i64 -32
  %9515 = bitcast i16* %9514 to <16 x i16>*
  %9516 = load <16 x i16>, <16 x i16>* %9515, align 2, !tbaa !399
  %9517 = getelementptr inbounds i16, i16* %9513, i64 -16
  %9518 = bitcast i16* %9517 to <16 x i16>*
  %9519 = load <16 x i16>, <16 x i16>* %9518, align 2, !tbaa !399
  %9520 = zext i32 %.pre-phi3396 to i64
  %9521 = mul nsw i64 %9520, %112
  %9522 = add nsw i64 %9521, %94
  %9523 = getelementptr inbounds i16, i16* %blur_x, i64 %9522
  %9524 = getelementptr inbounds i16, i16* %9523, i64 -32
  %9525 = bitcast i16* %9524 to <16 x i16>*
  %9526 = load <16 x i16>, <16 x i16>* %9525, align 2, !tbaa !399
  %9527 = getelementptr inbounds i16, i16* %9523, i64 -16
  %9528 = bitcast i16* %9527 to <16 x i16>*
  %9529 = load <16 x i16>, <16 x i16>* %9528, align 2, !tbaa !399
  %9530 = mul nsw i64 %9491, %112
  %9531 = add nsw i64 %9530, %94
  %9532 = getelementptr inbounds i16, i16* %blur_x, i64 %9531
  %9533 = getelementptr inbounds i16, i16* %9532, i64 -32
  %9534 = bitcast i16* %9533 to <16 x i16>*
  %9535 = load <16 x i16>, <16 x i16>* %9534, align 2, !tbaa !399
  %9536 = getelementptr inbounds i16, i16* %9532, i64 -16
  %9537 = bitcast i16* %9536 to <16 x i16>*
  %9538 = load <16 x i16>, <16 x i16>* %9537, align 2, !tbaa !399
  %9539 = zext i32 %.pre-phi3402 to i64
  %9540 = mul nsw i64 %9539, %112
  %9541 = add nsw i64 %9540, %94
  %9542 = getelementptr inbounds i16, i16* %blur_x, i64 %9541
  %9543 = getelementptr inbounds i16, i16* %9542, i64 -32
  %9544 = bitcast i16* %9543 to <16 x i16>*
  %9545 = load <16 x i16>, <16 x i16>* %9544, align 2, !tbaa !399
  %9546 = getelementptr inbounds i16, i16* %9542, i64 -16
  %9547 = bitcast i16* %9546 to <16 x i16>*
  %9548 = load <16 x i16>, <16 x i16>* %9547, align 2, !tbaa !399
  %9549 = add <16 x i16> %9516, %9506
  %9550 = add <16 x i16> %9549, %9526
  %9551 = add <16 x i16> %9550, %9535
  %9552 = add <16 x i16> %9551, %9545
  %9553 = add <16 x i16> %9519, %9509
  %9554 = add <16 x i16> %9553, %9529
  %9555 = add <16 x i16> %9554, %9538
  %9556 = add <16 x i16> %9555, %9548
  %9557 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9552, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9558 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9556, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9559 = shufflevector <16 x i16> %9557, <16 x i16> %9558, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9560 = lshr <32 x i16> %9559, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9561 = shufflevector <32 x i16> %9560, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9562 = sext i32 %a26 to i64
  %9563 = add nsw i64 %9562, 19
  %9564 = mul nsw i64 %9563, %113
  %9565 = add nsw i64 %115, %9564
  %9566 = getelementptr inbounds i16, i16* %66, i64 %9565
  %9567 = getelementptr inbounds i16, i16* %9566, i64 -32
  %9568 = bitcast i16* %9567 to <16 x i16>*
  store <16 x i16> %9561, <16 x i16>* %9568, align 2, !tbaa !401
  %9569 = shufflevector <32 x i16> %9560, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9570 = getelementptr inbounds i16, i16* %9566, i64 -16
  %9571 = bitcast i16* %9570 to <16 x i16>*
  store <16 x i16> %9569, <16 x i16>* %9571, align 2, !tbaa !401
  br label %after_bb509

"for blur_y.s0.x.x.rebased514":                   ; preds = %"for blur_y.s0.x.x.rebased514.preheader", %"consume blur_x521"
  %indvars.iv3212 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased514.preheader" ], [ %indvars.iv.next3213, %"consume blur_x521" ]
  %9572 = add nsw i64 %indvars.iv3212, %101
  %9573 = icmp slt i64 %9572, 1
  %9574 = trunc i64 %9572 to i32
  %9575 = shl nsw i32 %9574, 5
  %9576 = icmp sgt i32 %4, %9575
  %9577 = or i1 %9573, %9576
  br i1 %9577, label %"produce blur_x520", label %"for blur_y.s0.x.x.rebased514.consume blur_x521_crit_edge"

"for blur_y.s0.x.x.rebased514.consume blur_x521_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased514"
  %.pre3441 = shl nsw i64 %9572, 5
  br label %"consume blur_x521"

"end for blur_y.s0.x.x.rebased515":               ; preds = %"consume blur_x521", %after_bb509
  br i1 %102, label %"for blur_y.s0.x.x.rebased522.preheader", label %"end for blur_y.s0.x.x.rebased523", !prof !386

"for blur_y.s0.x.x.rebased522.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased515"
  %9578 = sext i32 %t1754 to i64
  %9579 = zext i32 %.pre-phi3390 to i64
  %9580 = mul nsw i64 %9579, %112
  %9581 = sub nsw i64 %9580, %96
  %9582 = zext i32 %.pre-phi3386 to i64
  %9583 = mul nsw i64 %9582, %112
  %9584 = sub nsw i64 %9583, %96
  %9585 = zext i32 %.pre-phi3396 to i64
  %9586 = mul nsw i64 %9585, %112
  %9587 = sub nsw i64 %9586, %96
  %9588 = zext i32 %.pre-phi3408 to i64
  %9589 = mul nsw i64 %9588, %112
  %9590 = sub nsw i64 %9589, %96
  %9591 = zext i32 %.pre-phi3402 to i64
  %9592 = mul nsw i64 %9591, %112
  %9593 = sub nsw i64 %9592, %96
  %9594 = sext i32 %a26 to i64
  %9595 = add nsw i64 %9594, 19
  %9596 = mul nsw i64 %9595, %113
  %9597 = add nsw i64 %9596, %116
  br label %"for blur_y.s0.x.x.rebased522"

"produce blur_x520":                              ; preds = %"for blur_y.s0.x.x.rebased514"
  %t1016 = add nsw i32 %9575, %t2009
  %9598 = sext i32 %t1016 to i64
  %9599 = getelementptr inbounds i16, i16* %read_input, i64 %9598
  %9600 = getelementptr inbounds i16, i16* %9599, i64 1
  %9601 = bitcast i16* %9600 to <16 x i16>*
  %9602 = load <16 x i16>, <16 x i16>* %9601, align 2, !tbaa !396
  %9603 = getelementptr inbounds i16, i16* %9599, i64 17
  %9604 = bitcast i16* %9603 to <16 x i16>*
  %9605 = load <16 x i16>, <16 x i16>* %9604, align 2, !tbaa !396
  %9606 = bitcast i16* %9599 to <16 x i16>*
  %9607 = load <16 x i16>, <16 x i16>* %9606, align 2, !tbaa !396
  %9608 = getelementptr inbounds i16, i16* %9599, i64 16
  %9609 = bitcast i16* %9608 to <16 x i16>*
  %9610 = load <16 x i16>, <16 x i16>* %9609, align 2, !tbaa !396
  %9611 = getelementptr inbounds i16, i16* %9599, i64 2
  %9612 = bitcast i16* %9611 to <16 x i16>*
  %9613 = load <16 x i16>, <16 x i16>* %9612, align 2, !tbaa !396
  %9614 = getelementptr inbounds i16, i16* %9599, i64 18
  %9615 = bitcast i16* %9614 to <16 x i16>*
  %9616 = load <16 x i16>, <16 x i16>* %9615, align 2, !tbaa !396
  %9617 = getelementptr inbounds i16, i16* %9599, i64 4
  %9618 = bitcast i16* %9617 to <16 x i16>*
  %9619 = load <16 x i16>, <16 x i16>* %9618, align 2, !tbaa !396
  %9620 = getelementptr inbounds i16, i16* %9599, i64 20
  %9621 = bitcast i16* %9620 to <16 x i16>*
  %9622 = load <16 x i16>, <16 x i16>* %9621, align 2, !tbaa !396
  %9623 = getelementptr inbounds i16, i16* %9599, i64 3
  %9624 = bitcast i16* %9623 to <16 x i16>*
  %9625 = load <16 x i16>, <16 x i16>* %9624, align 2, !tbaa !396
  %9626 = getelementptr inbounds i16, i16* %9599, i64 19
  %9627 = bitcast i16* %9626 to <16 x i16>*
  %9628 = load <16 x i16>, <16 x i16>* %9627, align 2, !tbaa !396
  %9629 = add <16 x i16> %9607, %9602
  %9630 = add <16 x i16> %9629, %9613
  %9631 = add <16 x i16> %9630, %9619
  %9632 = add <16 x i16> %9631, %9625
  %9633 = add <16 x i16> %9610, %9605
  %9634 = add <16 x i16> %9633, %9616
  %9635 = add <16 x i16> %9634, %9622
  %9636 = add <16 x i16> %9635, %9628
  %9637 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9632, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9638 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9636, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9639 = shufflevector <16 x i16> %9637, <16 x i16> %9638, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9640 = lshr <32 x i16> %9639, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9641 = shufflevector <32 x i16> %9640, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9642 = shl nsw i64 %9572, 5
  %9643 = add nsw i64 %9642, %9427
  %9644 = getelementptr inbounds i16, i16* %blur_x, i64 %9643
  %9645 = bitcast i16* %9644 to <16 x i16>*
  store <16 x i16> %9641, <16 x i16>* %9645, align 2, !tbaa !399
  %9646 = shufflevector <32 x i16> %9640, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9647 = getelementptr inbounds i16, i16* %9644, i64 16
  %9648 = bitcast i16* %9647 to <16 x i16>*
  store <16 x i16> %9646, <16 x i16>* %9648, align 2, !tbaa !399
  br label %"consume blur_x521"

"consume blur_x521":                              ; preds = %"for blur_y.s0.x.x.rebased514.consume blur_x521_crit_edge", %"produce blur_x520"
  %.pre-phi3442 = phi i64 [ %.pre3441, %"for blur_y.s0.x.x.rebased514.consume blur_x521_crit_edge" ], [ %9642, %"produce blur_x520" ]
  %9649 = add nsw i64 %9430, %.pre-phi3442
  %9650 = getelementptr inbounds i16, i16* %blur_x, i64 %9649
  %9651 = bitcast i16* %9650 to <16 x i16>*
  %9652 = load <16 x i16>, <16 x i16>* %9651, align 2, !tbaa !399
  %9653 = getelementptr inbounds i16, i16* %9650, i64 16
  %9654 = bitcast i16* %9653 to <16 x i16>*
  %9655 = load <16 x i16>, <16 x i16>* %9654, align 2, !tbaa !399
  %9656 = add nsw i64 %9433, %.pre-phi3442
  %9657 = getelementptr inbounds i16, i16* %blur_x, i64 %9656
  %9658 = bitcast i16* %9657 to <16 x i16>*
  %9659 = load <16 x i16>, <16 x i16>* %9658, align 2, !tbaa !399
  %9660 = getelementptr inbounds i16, i16* %9657, i64 16
  %9661 = bitcast i16* %9660 to <16 x i16>*
  %9662 = load <16 x i16>, <16 x i16>* %9661, align 2, !tbaa !399
  %9663 = add nsw i64 %9436, %.pre-phi3442
  %9664 = getelementptr inbounds i16, i16* %blur_x, i64 %9663
  %9665 = bitcast i16* %9664 to <16 x i16>*
  %9666 = load <16 x i16>, <16 x i16>* %9665, align 2, !tbaa !399
  %9667 = getelementptr inbounds i16, i16* %9664, i64 16
  %9668 = bitcast i16* %9667 to <16 x i16>*
  %9669 = load <16 x i16>, <16 x i16>* %9668, align 2, !tbaa !399
  %9670 = add nsw i64 %9439, %.pre-phi3442
  %9671 = getelementptr inbounds i16, i16* %blur_x, i64 %9670
  %9672 = bitcast i16* %9671 to <16 x i16>*
  %9673 = load <16 x i16>, <16 x i16>* %9672, align 2, !tbaa !399
  %9674 = getelementptr inbounds i16, i16* %9671, i64 16
  %9675 = bitcast i16* %9674 to <16 x i16>*
  %9676 = load <16 x i16>, <16 x i16>* %9675, align 2, !tbaa !399
  %9677 = add nsw i64 %9442, %.pre-phi3442
  %9678 = getelementptr inbounds i16, i16* %blur_x, i64 %9677
  %9679 = bitcast i16* %9678 to <16 x i16>*
  %9680 = load <16 x i16>, <16 x i16>* %9679, align 2, !tbaa !399
  %9681 = getelementptr inbounds i16, i16* %9678, i64 16
  %9682 = bitcast i16* %9681 to <16 x i16>*
  %9683 = load <16 x i16>, <16 x i16>* %9682, align 2, !tbaa !399
  %9684 = add <16 x i16> %9659, %9652
  %9685 = add <16 x i16> %9684, %9666
  %9686 = add <16 x i16> %9685, %9673
  %9687 = add <16 x i16> %9686, %9680
  %9688 = add <16 x i16> %9662, %9655
  %9689 = add <16 x i16> %9688, %9669
  %9690 = add <16 x i16> %9689, %9676
  %9691 = add <16 x i16> %9690, %9683
  %9692 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9687, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9693 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9691, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9694 = shufflevector <16 x i16> %9692, <16 x i16> %9693, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9695 = lshr <32 x i16> %9694, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9696 = shufflevector <32 x i16> %9695, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9697 = add nsw i64 %9446, %.pre-phi3442
  %9698 = getelementptr inbounds i16, i16* %66, i64 %9697
  %9699 = bitcast i16* %9698 to <16 x i16>*
  store <16 x i16> %9696, <16 x i16>* %9699, align 2, !tbaa !401
  %9700 = shufflevector <32 x i16> %9695, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9701 = getelementptr inbounds i16, i16* %9698, i64 16
  %9702 = bitcast i16* %9701 to <16 x i16>*
  store <16 x i16> %9700, <16 x i16>* %9702, align 2, !tbaa !401
  %indvars.iv.next3213 = add nuw nsw i64 %indvars.iv3212, 1
  %.not2652 = icmp eq i64 %indvars.iv.next3213, %184
  br i1 %.not2652, label %"end for blur_y.s0.x.x.rebased515", label %"for blur_y.s0.x.x.rebased514"

"for blur_y.s0.x.x.rebased522":                   ; preds = %"for blur_y.s0.x.x.rebased522.preheader", %"consume blur_x530"
  %blur_y.s0.x.x.rebased524 = phi i32 [ %9815, %"consume blur_x530" ], [ 0, %"for blur_y.s0.x.x.rebased522.preheader" ]
  %9703 = add nsw i32 %blur_y.s0.x.x.rebased524, %t1626
  %a238 = shl nsw i32 %9703, 5
  %9704 = icmp sgt i32 %a14, %a238
  %b244 = select i1 %9704, i32 %a238, i32 %a14
  %9705 = icmp slt i32 %9703, 1
  %9706 = icmp sgt i32 %4, %a238
  %9707 = or i1 %9705, %9706
  br i1 %9707, label %"produce blur_x528", label %"consume blur_x530"

"end for blur_y.s0.x.x.rebased523":               ; preds = %"consume blur_x530", %"end for blur_y.s0.x.x.rebased515"
  br i1 %34, label %"produce blur_x534", label %after_bb531

"produce blur_x528":                              ; preds = %"for blur_y.s0.x.x.rebased522"
  %9708 = icmp slt i32 %b244, %4
  %blur_x.s0.x.v1.base.s529 = select i1 %9708, i32 %b244, i32 %4
  %t1021 = add nsw i32 %blur_x.s0.x.v1.base.s529, %t2009
  %9709 = sext i32 %t1021 to i64
  %9710 = getelementptr inbounds i16, i16* %read_input, i64 %9709
  %9711 = getelementptr inbounds i16, i16* %9710, i64 1
  %9712 = bitcast i16* %9711 to <16 x i16>*
  %9713 = load <16 x i16>, <16 x i16>* %9712, align 2, !tbaa !396
  %9714 = getelementptr inbounds i16, i16* %9710, i64 17
  %9715 = bitcast i16* %9714 to <16 x i16>*
  %9716 = load <16 x i16>, <16 x i16>* %9715, align 2, !tbaa !396
  %9717 = bitcast i16* %9710 to <16 x i16>*
  %9718 = load <16 x i16>, <16 x i16>* %9717, align 2, !tbaa !396
  %9719 = getelementptr inbounds i16, i16* %9710, i64 16
  %9720 = bitcast i16* %9719 to <16 x i16>*
  %9721 = load <16 x i16>, <16 x i16>* %9720, align 2, !tbaa !396
  %9722 = getelementptr inbounds i16, i16* %9710, i64 2
  %9723 = bitcast i16* %9722 to <16 x i16>*
  %9724 = load <16 x i16>, <16 x i16>* %9723, align 2, !tbaa !396
  %9725 = getelementptr inbounds i16, i16* %9710, i64 18
  %9726 = bitcast i16* %9725 to <16 x i16>*
  %9727 = load <16 x i16>, <16 x i16>* %9726, align 2, !tbaa !396
  %9728 = getelementptr inbounds i16, i16* %9710, i64 4
  %9729 = bitcast i16* %9728 to <16 x i16>*
  %9730 = load <16 x i16>, <16 x i16>* %9729, align 2, !tbaa !396
  %9731 = getelementptr inbounds i16, i16* %9710, i64 20
  %9732 = bitcast i16* %9731 to <16 x i16>*
  %9733 = load <16 x i16>, <16 x i16>* %9732, align 2, !tbaa !396
  %9734 = getelementptr inbounds i16, i16* %9710, i64 3
  %9735 = bitcast i16* %9734 to <16 x i16>*
  %9736 = load <16 x i16>, <16 x i16>* %9735, align 2, !tbaa !396
  %9737 = getelementptr inbounds i16, i16* %9710, i64 19
  %9738 = bitcast i16* %9737 to <16 x i16>*
  %9739 = load <16 x i16>, <16 x i16>* %9738, align 2, !tbaa !396
  %9740 = add <16 x i16> %9718, %9713
  %9741 = add <16 x i16> %9740, %9724
  %9742 = add <16 x i16> %9741, %9730
  %9743 = add <16 x i16> %9742, %9736
  %9744 = add <16 x i16> %9721, %9716
  %9745 = add <16 x i16> %9744, %9727
  %9746 = add <16 x i16> %9745, %9733
  %9747 = add <16 x i16> %9746, %9739
  %9748 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9743, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9749 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9747, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9750 = shufflevector <16 x i16> %9748, <16 x i16> %9749, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9751 = lshr <32 x i16> %9750, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9752 = shufflevector <32 x i16> %9751, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9753 = sext i32 %blur_x.s0.x.v1.base.s529 to i64
  %9754 = add nsw i64 %9753, %9578
  %9755 = getelementptr inbounds i16, i16* %blur_x, i64 %9754
  %9756 = bitcast i16* %9755 to <16 x i16>*
  store <16 x i16> %9752, <16 x i16>* %9756, align 2, !tbaa !399
  %9757 = shufflevector <32 x i16> %9751, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9758 = getelementptr inbounds i16, i16* %9755, i64 16
  %9759 = bitcast i16* %9758 to <16 x i16>*
  store <16 x i16> %9757, <16 x i16>* %9759, align 2, !tbaa !399
  br label %"consume blur_x530"

"consume blur_x530":                              ; preds = %"for blur_y.s0.x.x.rebased522", %"produce blur_x528"
  %9760 = sext i32 %b244 to i64
  %9761 = add nsw i64 %9581, %9760
  %9762 = getelementptr inbounds i16, i16* %blur_x, i64 %9761
  %9763 = bitcast i16* %9762 to <16 x i16>*
  %9764 = load <16 x i16>, <16 x i16>* %9763, align 2, !tbaa !399
  %9765 = getelementptr inbounds i16, i16* %9762, i64 16
  %9766 = bitcast i16* %9765 to <16 x i16>*
  %9767 = load <16 x i16>, <16 x i16>* %9766, align 2, !tbaa !399
  %9768 = add nsw i64 %9584, %9760
  %9769 = getelementptr inbounds i16, i16* %blur_x, i64 %9768
  %9770 = bitcast i16* %9769 to <16 x i16>*
  %9771 = load <16 x i16>, <16 x i16>* %9770, align 2, !tbaa !399
  %9772 = getelementptr inbounds i16, i16* %9769, i64 16
  %9773 = bitcast i16* %9772 to <16 x i16>*
  %9774 = load <16 x i16>, <16 x i16>* %9773, align 2, !tbaa !399
  %9775 = add nsw i64 %9587, %9760
  %9776 = getelementptr inbounds i16, i16* %blur_x, i64 %9775
  %9777 = bitcast i16* %9776 to <16 x i16>*
  %9778 = load <16 x i16>, <16 x i16>* %9777, align 2, !tbaa !399
  %9779 = getelementptr inbounds i16, i16* %9776, i64 16
  %9780 = bitcast i16* %9779 to <16 x i16>*
  %9781 = load <16 x i16>, <16 x i16>* %9780, align 2, !tbaa !399
  %9782 = add nsw i64 %9590, %9760
  %9783 = getelementptr inbounds i16, i16* %blur_x, i64 %9782
  %9784 = bitcast i16* %9783 to <16 x i16>*
  %9785 = load <16 x i16>, <16 x i16>* %9784, align 2, !tbaa !399
  %9786 = getelementptr inbounds i16, i16* %9783, i64 16
  %9787 = bitcast i16* %9786 to <16 x i16>*
  %9788 = load <16 x i16>, <16 x i16>* %9787, align 2, !tbaa !399
  %9789 = add nsw i64 %9593, %9760
  %9790 = getelementptr inbounds i16, i16* %blur_x, i64 %9789
  %9791 = bitcast i16* %9790 to <16 x i16>*
  %9792 = load <16 x i16>, <16 x i16>* %9791, align 2, !tbaa !399
  %9793 = getelementptr inbounds i16, i16* %9790, i64 16
  %9794 = bitcast i16* %9793 to <16 x i16>*
  %9795 = load <16 x i16>, <16 x i16>* %9794, align 2, !tbaa !399
  %9796 = add <16 x i16> %9771, %9764
  %9797 = add <16 x i16> %9796, %9778
  %9798 = add <16 x i16> %9797, %9785
  %9799 = add <16 x i16> %9798, %9792
  %9800 = add <16 x i16> %9774, %9767
  %9801 = add <16 x i16> %9800, %9781
  %9802 = add <16 x i16> %9801, %9788
  %9803 = add <16 x i16> %9802, %9795
  %9804 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9799, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9805 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9803, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9806 = shufflevector <16 x i16> %9804, <16 x i16> %9805, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9807 = lshr <32 x i16> %9806, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9808 = shufflevector <32 x i16> %9807, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9809 = add nsw i64 %9597, %9760
  %9810 = getelementptr inbounds i16, i16* %66, i64 %9809
  %9811 = bitcast i16* %9810 to <16 x i16>*
  store <16 x i16> %9808, <16 x i16>* %9811, align 2, !tbaa !401
  %9812 = shufflevector <32 x i16> %9807, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9813 = getelementptr inbounds i16, i16* %9810, i64 16
  %9814 = bitcast i16* %9813 to <16 x i16>*
  store <16 x i16> %9812, <16 x i16>* %9814, align 2, !tbaa !401
  %9815 = add nuw nsw i32 %blur_y.s0.x.x.rebased524, 1
  %.not2651 = icmp eq i32 %9815, %t1683
  br i1 %.not2651, label %"end for blur_y.s0.x.x.rebased523", label %"for blur_y.s0.x.x.rebased522"

after_bb531:                                      ; preds = %"end for blur_y.s0.x.x.rebased523", %"produce blur_x534"
  br i1 %100, label %"for blur_y.s0.x.x.rebased536.preheader", label %"end for blur_y.s0.x.x.rebased537", !prof !386

"for blur_y.s0.x.x.rebased536.preheader":         ; preds = %after_bb531
  %9816 = sext i32 %t1682 to i64
  %9817 = zext i32 %.pre-phi3396 to i64
  %9818 = mul nsw i64 %9817, %112
  %9819 = sub nsw i64 %9818, %96
  %9820 = zext i32 %.pre-phi3390 to i64
  %9821 = mul nsw i64 %9820, %112
  %9822 = sub nsw i64 %9821, %96
  %9823 = zext i32 %.pre-phi3402 to i64
  %9824 = mul nsw i64 %9823, %112
  %9825 = sub nsw i64 %9824, %96
  %9826 = zext i32 %.pre-phi to i64
  %9827 = mul nsw i64 %9826, %112
  %9828 = sub nsw i64 %9827, %96
  %9829 = zext i32 %.pre-phi3408 to i64
  %9830 = mul nsw i64 %9829, %112
  %9831 = sub nsw i64 %9830, %96
  %9832 = sext i32 %a26 to i64
  %9833 = add nsw i64 %9832, 20
  %9834 = mul nsw i64 %9833, %113
  %9835 = add nsw i64 %9834, %116
  br label %"for blur_y.s0.x.x.rebased536"

"produce blur_x534":                              ; preds = %"end for blur_y.s0.x.x.rebased523"
  %9836 = getelementptr inbounds i16, i16* %read_input, i64 %155
  %9837 = getelementptr inbounds i16, i16* %9836, i64 -31
  %9838 = bitcast i16* %9837 to <16 x i16>*
  %9839 = load <16 x i16>, <16 x i16>* %9838, align 2, !tbaa !396
  %9840 = getelementptr inbounds i16, i16* %9836, i64 -15
  %9841 = bitcast i16* %9840 to <16 x i16>*
  %9842 = load <16 x i16>, <16 x i16>* %9841, align 2, !tbaa !396
  %9843 = getelementptr inbounds i16, i16* %9836, i64 -32
  %9844 = bitcast i16* %9843 to <16 x i16>*
  %9845 = load <16 x i16>, <16 x i16>* %9844, align 2, !tbaa !396
  %9846 = getelementptr inbounds i16, i16* %9836, i64 -16
  %9847 = bitcast i16* %9846 to <16 x i16>*
  %9848 = load <16 x i16>, <16 x i16>* %9847, align 2, !tbaa !396
  %9849 = getelementptr inbounds i16, i16* %9836, i64 -30
  %9850 = bitcast i16* %9849 to <16 x i16>*
  %9851 = load <16 x i16>, <16 x i16>* %9850, align 2, !tbaa !396
  %9852 = getelementptr inbounds i16, i16* %9836, i64 -14
  %9853 = bitcast i16* %9852 to <16 x i16>*
  %9854 = load <16 x i16>, <16 x i16>* %9853, align 2, !tbaa !396
  %9855 = getelementptr inbounds i16, i16* %9836, i64 -28
  %9856 = bitcast i16* %9855 to <16 x i16>*
  %9857 = load <16 x i16>, <16 x i16>* %9856, align 2, !tbaa !396
  %9858 = getelementptr inbounds i16, i16* %9836, i64 -12
  %9859 = bitcast i16* %9858 to <16 x i16>*
  %9860 = load <16 x i16>, <16 x i16>* %9859, align 2, !tbaa !396
  %9861 = getelementptr inbounds i16, i16* %9836, i64 -29
  %9862 = bitcast i16* %9861 to <16 x i16>*
  %9863 = load <16 x i16>, <16 x i16>* %9862, align 2, !tbaa !396
  %9864 = getelementptr inbounds i16, i16* %9836, i64 -13
  %9865 = bitcast i16* %9864 to <16 x i16>*
  %9866 = load <16 x i16>, <16 x i16>* %9865, align 2, !tbaa !396
  %9867 = add <16 x i16> %9845, %9839
  %9868 = add <16 x i16> %9867, %9851
  %9869 = add <16 x i16> %9868, %9857
  %9870 = add <16 x i16> %9869, %9863
  %9871 = add <16 x i16> %9848, %9842
  %9872 = add <16 x i16> %9871, %9854
  %9873 = add <16 x i16> %9872, %9860
  %9874 = add <16 x i16> %9873, %9866
  %9875 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9870, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9876 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9874, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9877 = shufflevector <16 x i16> %9875, <16 x i16> %9876, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9878 = lshr <32 x i16> %9877, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9879 = shufflevector <32 x i16> %9878, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9880 = zext i32 %.pre-phi to i64
  %9881 = mul nsw i64 %97, %9880
  %9882 = add nsw i64 %99, %9881
  %9883 = getelementptr inbounds i16, i16* %blur_x, i64 %9882
  %9884 = getelementptr inbounds i16, i16* %9883, i64 -32
  %9885 = bitcast i16* %9884 to <16 x i16>*
  store <16 x i16> %9879, <16 x i16>* %9885, align 2, !tbaa !399
  %9886 = shufflevector <32 x i16> %9878, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9887 = getelementptr inbounds i16, i16* %9883, i64 -16
  %9888 = bitcast i16* %9887 to <16 x i16>*
  store <16 x i16> %9886, <16 x i16>* %9888, align 2, !tbaa !399
  %9889 = zext i32 %.pre-phi3396 to i64
  %9890 = mul nsw i64 %9889, %112
  %9891 = add nsw i64 %9890, %94
  %9892 = getelementptr inbounds i16, i16* %blur_x, i64 %9891
  %9893 = getelementptr inbounds i16, i16* %9892, i64 -32
  %9894 = bitcast i16* %9893 to <16 x i16>*
  %9895 = load <16 x i16>, <16 x i16>* %9894, align 2, !tbaa !399
  %9896 = getelementptr inbounds i16, i16* %9892, i64 -16
  %9897 = bitcast i16* %9896 to <16 x i16>*
  %9898 = load <16 x i16>, <16 x i16>* %9897, align 2, !tbaa !399
  %9899 = zext i32 %.pre-phi3390 to i64
  %9900 = mul nsw i64 %9899, %112
  %9901 = add nsw i64 %9900, %94
  %9902 = getelementptr inbounds i16, i16* %blur_x, i64 %9901
  %9903 = getelementptr inbounds i16, i16* %9902, i64 -32
  %9904 = bitcast i16* %9903 to <16 x i16>*
  %9905 = load <16 x i16>, <16 x i16>* %9904, align 2, !tbaa !399
  %9906 = getelementptr inbounds i16, i16* %9902, i64 -16
  %9907 = bitcast i16* %9906 to <16 x i16>*
  %9908 = load <16 x i16>, <16 x i16>* %9907, align 2, !tbaa !399
  %9909 = zext i32 %.pre-phi3402 to i64
  %9910 = mul nsw i64 %9909, %112
  %9911 = add nsw i64 %9910, %94
  %9912 = getelementptr inbounds i16, i16* %blur_x, i64 %9911
  %9913 = getelementptr inbounds i16, i16* %9912, i64 -32
  %9914 = bitcast i16* %9913 to <16 x i16>*
  %9915 = load <16 x i16>, <16 x i16>* %9914, align 2, !tbaa !399
  %9916 = getelementptr inbounds i16, i16* %9912, i64 -16
  %9917 = bitcast i16* %9916 to <16 x i16>*
  %9918 = load <16 x i16>, <16 x i16>* %9917, align 2, !tbaa !399
  %9919 = mul nsw i64 %9880, %112
  %9920 = add nsw i64 %9919, %94
  %9921 = getelementptr inbounds i16, i16* %blur_x, i64 %9920
  %9922 = getelementptr inbounds i16, i16* %9921, i64 -32
  %9923 = bitcast i16* %9922 to <16 x i16>*
  %9924 = load <16 x i16>, <16 x i16>* %9923, align 2, !tbaa !399
  %9925 = getelementptr inbounds i16, i16* %9921, i64 -16
  %9926 = bitcast i16* %9925 to <16 x i16>*
  %9927 = load <16 x i16>, <16 x i16>* %9926, align 2, !tbaa !399
  %9928 = zext i32 %.pre-phi3408 to i64
  %9929 = mul nsw i64 %9928, %112
  %9930 = add nsw i64 %9929, %94
  %9931 = getelementptr inbounds i16, i16* %blur_x, i64 %9930
  %9932 = getelementptr inbounds i16, i16* %9931, i64 -32
  %9933 = bitcast i16* %9932 to <16 x i16>*
  %9934 = load <16 x i16>, <16 x i16>* %9933, align 2, !tbaa !399
  %9935 = getelementptr inbounds i16, i16* %9931, i64 -16
  %9936 = bitcast i16* %9935 to <16 x i16>*
  %9937 = load <16 x i16>, <16 x i16>* %9936, align 2, !tbaa !399
  %9938 = add <16 x i16> %9905, %9895
  %9939 = add <16 x i16> %9938, %9915
  %9940 = add <16 x i16> %9939, %9924
  %9941 = add <16 x i16> %9940, %9934
  %9942 = add <16 x i16> %9908, %9898
  %9943 = add <16 x i16> %9942, %9918
  %9944 = add <16 x i16> %9943, %9927
  %9945 = add <16 x i16> %9944, %9937
  %9946 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9941, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9947 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9945, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %9948 = shufflevector <16 x i16> %9946, <16 x i16> %9947, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9949 = lshr <32 x i16> %9948, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %9950 = shufflevector <32 x i16> %9949, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9951 = sext i32 %a26 to i64
  %9952 = add nsw i64 %9951, 20
  %9953 = mul nsw i64 %9952, %113
  %9954 = add nsw i64 %115, %9953
  %9955 = getelementptr inbounds i16, i16* %66, i64 %9954
  %9956 = getelementptr inbounds i16, i16* %9955, i64 -32
  %9957 = bitcast i16* %9956 to <16 x i16>*
  store <16 x i16> %9950, <16 x i16>* %9957, align 2, !tbaa !401
  %9958 = shufflevector <32 x i16> %9949, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9959 = getelementptr inbounds i16, i16* %9955, i64 -16
  %9960 = bitcast i16* %9959 to <16 x i16>*
  store <16 x i16> %9958, <16 x i16>* %9960, align 2, !tbaa !401
  br label %after_bb531

"for blur_y.s0.x.x.rebased536":                   ; preds = %"for blur_y.s0.x.x.rebased536.preheader", %"consume blur_x543"
  %indvars.iv3215 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased536.preheader" ], [ %indvars.iv.next3216, %"consume blur_x543" ]
  %9961 = add nsw i64 %indvars.iv3215, %101
  %9962 = icmp slt i64 %9961, 1
  %9963 = trunc i64 %9961 to i32
  %9964 = shl nsw i32 %9963, 5
  %9965 = icmp sgt i32 %4, %9964
  %9966 = or i1 %9962, %9965
  br i1 %9966, label %"produce blur_x542", label %"for blur_y.s0.x.x.rebased536.consume blur_x543_crit_edge"

"for blur_y.s0.x.x.rebased536.consume blur_x543_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased536"
  %.pre3443 = shl nsw i64 %9961, 5
  br label %"consume blur_x543"

"end for blur_y.s0.x.x.rebased537":               ; preds = %"consume blur_x543", %after_bb531
  br i1 %102, label %"for blur_y.s0.x.x.rebased544.preheader", label %"end for blur_y.s0.x.x.rebased545", !prof !386

"for blur_y.s0.x.x.rebased544.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased537"
  %9967 = sext i32 %t1682 to i64
  %9968 = zext i32 %.pre-phi3396 to i64
  %9969 = mul nsw i64 %9968, %112
  %9970 = sub nsw i64 %9969, %96
  %9971 = zext i32 %.pre-phi3390 to i64
  %9972 = mul nsw i64 %9971, %112
  %9973 = sub nsw i64 %9972, %96
  %9974 = zext i32 %.pre-phi3402 to i64
  %9975 = mul nsw i64 %9974, %112
  %9976 = sub nsw i64 %9975, %96
  %9977 = zext i32 %.pre-phi to i64
  %9978 = mul nsw i64 %9977, %112
  %9979 = sub nsw i64 %9978, %96
  %9980 = zext i32 %.pre-phi3408 to i64
  %9981 = mul nsw i64 %9980, %112
  %9982 = sub nsw i64 %9981, %96
  %9983 = sext i32 %a26 to i64
  %9984 = add nsw i64 %9983, 20
  %9985 = mul nsw i64 %9984, %113
  %9986 = add nsw i64 %9985, %116
  br label %"for blur_y.s0.x.x.rebased544"

"produce blur_x542":                              ; preds = %"for blur_y.s0.x.x.rebased536"
  %t1032 = add nsw i32 %9964, %t2025
  %9987 = sext i32 %t1032 to i64
  %9988 = getelementptr inbounds i16, i16* %read_input, i64 %9987
  %9989 = getelementptr inbounds i16, i16* %9988, i64 1
  %9990 = bitcast i16* %9989 to <16 x i16>*
  %9991 = load <16 x i16>, <16 x i16>* %9990, align 2, !tbaa !396
  %9992 = getelementptr inbounds i16, i16* %9988, i64 17
  %9993 = bitcast i16* %9992 to <16 x i16>*
  %9994 = load <16 x i16>, <16 x i16>* %9993, align 2, !tbaa !396
  %9995 = bitcast i16* %9988 to <16 x i16>*
  %9996 = load <16 x i16>, <16 x i16>* %9995, align 2, !tbaa !396
  %9997 = getelementptr inbounds i16, i16* %9988, i64 16
  %9998 = bitcast i16* %9997 to <16 x i16>*
  %9999 = load <16 x i16>, <16 x i16>* %9998, align 2, !tbaa !396
  %10000 = getelementptr inbounds i16, i16* %9988, i64 2
  %10001 = bitcast i16* %10000 to <16 x i16>*
  %10002 = load <16 x i16>, <16 x i16>* %10001, align 2, !tbaa !396
  %10003 = getelementptr inbounds i16, i16* %9988, i64 18
  %10004 = bitcast i16* %10003 to <16 x i16>*
  %10005 = load <16 x i16>, <16 x i16>* %10004, align 2, !tbaa !396
  %10006 = getelementptr inbounds i16, i16* %9988, i64 4
  %10007 = bitcast i16* %10006 to <16 x i16>*
  %10008 = load <16 x i16>, <16 x i16>* %10007, align 2, !tbaa !396
  %10009 = getelementptr inbounds i16, i16* %9988, i64 20
  %10010 = bitcast i16* %10009 to <16 x i16>*
  %10011 = load <16 x i16>, <16 x i16>* %10010, align 2, !tbaa !396
  %10012 = getelementptr inbounds i16, i16* %9988, i64 3
  %10013 = bitcast i16* %10012 to <16 x i16>*
  %10014 = load <16 x i16>, <16 x i16>* %10013, align 2, !tbaa !396
  %10015 = getelementptr inbounds i16, i16* %9988, i64 19
  %10016 = bitcast i16* %10015 to <16 x i16>*
  %10017 = load <16 x i16>, <16 x i16>* %10016, align 2, !tbaa !396
  %10018 = add <16 x i16> %9996, %9991
  %10019 = add <16 x i16> %10018, %10002
  %10020 = add <16 x i16> %10019, %10008
  %10021 = add <16 x i16> %10020, %10014
  %10022 = add <16 x i16> %9999, %9994
  %10023 = add <16 x i16> %10022, %10005
  %10024 = add <16 x i16> %10023, %10011
  %10025 = add <16 x i16> %10024, %10017
  %10026 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10021, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10027 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10025, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10028 = shufflevector <16 x i16> %10026, <16 x i16> %10027, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10029 = lshr <32 x i16> %10028, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10030 = shufflevector <32 x i16> %10029, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10031 = shl nsw i64 %9961, 5
  %10032 = add nsw i64 %10031, %9816
  %10033 = getelementptr inbounds i16, i16* %blur_x, i64 %10032
  %10034 = bitcast i16* %10033 to <16 x i16>*
  store <16 x i16> %10030, <16 x i16>* %10034, align 2, !tbaa !399
  %10035 = shufflevector <32 x i16> %10029, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10036 = getelementptr inbounds i16, i16* %10033, i64 16
  %10037 = bitcast i16* %10036 to <16 x i16>*
  store <16 x i16> %10035, <16 x i16>* %10037, align 2, !tbaa !399
  br label %"consume blur_x543"

"consume blur_x543":                              ; preds = %"for blur_y.s0.x.x.rebased536.consume blur_x543_crit_edge", %"produce blur_x542"
  %.pre-phi3444 = phi i64 [ %.pre3443, %"for blur_y.s0.x.x.rebased536.consume blur_x543_crit_edge" ], [ %10031, %"produce blur_x542" ]
  %10038 = add nsw i64 %9819, %.pre-phi3444
  %10039 = getelementptr inbounds i16, i16* %blur_x, i64 %10038
  %10040 = bitcast i16* %10039 to <16 x i16>*
  %10041 = load <16 x i16>, <16 x i16>* %10040, align 2, !tbaa !399
  %10042 = getelementptr inbounds i16, i16* %10039, i64 16
  %10043 = bitcast i16* %10042 to <16 x i16>*
  %10044 = load <16 x i16>, <16 x i16>* %10043, align 2, !tbaa !399
  %10045 = add nsw i64 %9822, %.pre-phi3444
  %10046 = getelementptr inbounds i16, i16* %blur_x, i64 %10045
  %10047 = bitcast i16* %10046 to <16 x i16>*
  %10048 = load <16 x i16>, <16 x i16>* %10047, align 2, !tbaa !399
  %10049 = getelementptr inbounds i16, i16* %10046, i64 16
  %10050 = bitcast i16* %10049 to <16 x i16>*
  %10051 = load <16 x i16>, <16 x i16>* %10050, align 2, !tbaa !399
  %10052 = add nsw i64 %9825, %.pre-phi3444
  %10053 = getelementptr inbounds i16, i16* %blur_x, i64 %10052
  %10054 = bitcast i16* %10053 to <16 x i16>*
  %10055 = load <16 x i16>, <16 x i16>* %10054, align 2, !tbaa !399
  %10056 = getelementptr inbounds i16, i16* %10053, i64 16
  %10057 = bitcast i16* %10056 to <16 x i16>*
  %10058 = load <16 x i16>, <16 x i16>* %10057, align 2, !tbaa !399
  %10059 = add nsw i64 %9828, %.pre-phi3444
  %10060 = getelementptr inbounds i16, i16* %blur_x, i64 %10059
  %10061 = bitcast i16* %10060 to <16 x i16>*
  %10062 = load <16 x i16>, <16 x i16>* %10061, align 2, !tbaa !399
  %10063 = getelementptr inbounds i16, i16* %10060, i64 16
  %10064 = bitcast i16* %10063 to <16 x i16>*
  %10065 = load <16 x i16>, <16 x i16>* %10064, align 2, !tbaa !399
  %10066 = add nsw i64 %9831, %.pre-phi3444
  %10067 = getelementptr inbounds i16, i16* %blur_x, i64 %10066
  %10068 = bitcast i16* %10067 to <16 x i16>*
  %10069 = load <16 x i16>, <16 x i16>* %10068, align 2, !tbaa !399
  %10070 = getelementptr inbounds i16, i16* %10067, i64 16
  %10071 = bitcast i16* %10070 to <16 x i16>*
  %10072 = load <16 x i16>, <16 x i16>* %10071, align 2, !tbaa !399
  %10073 = add <16 x i16> %10048, %10041
  %10074 = add <16 x i16> %10073, %10055
  %10075 = add <16 x i16> %10074, %10062
  %10076 = add <16 x i16> %10075, %10069
  %10077 = add <16 x i16> %10051, %10044
  %10078 = add <16 x i16> %10077, %10058
  %10079 = add <16 x i16> %10078, %10065
  %10080 = add <16 x i16> %10079, %10072
  %10081 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10076, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10082 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10080, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10083 = shufflevector <16 x i16> %10081, <16 x i16> %10082, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10084 = lshr <32 x i16> %10083, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10085 = shufflevector <32 x i16> %10084, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10086 = add nsw i64 %9835, %.pre-phi3444
  %10087 = getelementptr inbounds i16, i16* %66, i64 %10086
  %10088 = bitcast i16* %10087 to <16 x i16>*
  store <16 x i16> %10085, <16 x i16>* %10088, align 2, !tbaa !401
  %10089 = shufflevector <32 x i16> %10084, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10090 = getelementptr inbounds i16, i16* %10087, i64 16
  %10091 = bitcast i16* %10090 to <16 x i16>*
  store <16 x i16> %10089, <16 x i16>* %10091, align 2, !tbaa !401
  %indvars.iv.next3216 = add nuw nsw i64 %indvars.iv3215, 1
  %.not2650 = icmp eq i64 %indvars.iv.next3216, %184
  br i1 %.not2650, label %"end for blur_y.s0.x.x.rebased537", label %"for blur_y.s0.x.x.rebased536"

"for blur_y.s0.x.x.rebased544":                   ; preds = %"for blur_y.s0.x.x.rebased544.preheader", %"consume blur_x552"
  %blur_y.s0.x.x.rebased546 = phi i32 [ %10204, %"consume blur_x552" ], [ 0, %"for blur_y.s0.x.x.rebased544.preheader" ]
  %10092 = add nsw i32 %blur_y.s0.x.x.rebased546, %t1626
  %a245 = shl nsw i32 %10092, 5
  %10093 = icmp sgt i32 %a14, %a245
  %b251 = select i1 %10093, i32 %a245, i32 %a14
  %10094 = icmp slt i32 %10092, 1
  %10095 = icmp sgt i32 %4, %a245
  %10096 = or i1 %10094, %10095
  br i1 %10096, label %"produce blur_x550", label %"consume blur_x552"

"end for blur_y.s0.x.x.rebased545":               ; preds = %"consume blur_x552", %"end for blur_y.s0.x.x.rebased537"
  br i1 %34, label %"produce blur_x556", label %after_bb553

"produce blur_x550":                              ; preds = %"for blur_y.s0.x.x.rebased544"
  %10097 = icmp slt i32 %b251, %4
  %blur_x.s0.x.v1.base.s551 = select i1 %10097, i32 %b251, i32 %4
  %t1037 = add nsw i32 %blur_x.s0.x.v1.base.s551, %t2025
  %10098 = sext i32 %t1037 to i64
  %10099 = getelementptr inbounds i16, i16* %read_input, i64 %10098
  %10100 = getelementptr inbounds i16, i16* %10099, i64 1
  %10101 = bitcast i16* %10100 to <16 x i16>*
  %10102 = load <16 x i16>, <16 x i16>* %10101, align 2, !tbaa !396
  %10103 = getelementptr inbounds i16, i16* %10099, i64 17
  %10104 = bitcast i16* %10103 to <16 x i16>*
  %10105 = load <16 x i16>, <16 x i16>* %10104, align 2, !tbaa !396
  %10106 = bitcast i16* %10099 to <16 x i16>*
  %10107 = load <16 x i16>, <16 x i16>* %10106, align 2, !tbaa !396
  %10108 = getelementptr inbounds i16, i16* %10099, i64 16
  %10109 = bitcast i16* %10108 to <16 x i16>*
  %10110 = load <16 x i16>, <16 x i16>* %10109, align 2, !tbaa !396
  %10111 = getelementptr inbounds i16, i16* %10099, i64 2
  %10112 = bitcast i16* %10111 to <16 x i16>*
  %10113 = load <16 x i16>, <16 x i16>* %10112, align 2, !tbaa !396
  %10114 = getelementptr inbounds i16, i16* %10099, i64 18
  %10115 = bitcast i16* %10114 to <16 x i16>*
  %10116 = load <16 x i16>, <16 x i16>* %10115, align 2, !tbaa !396
  %10117 = getelementptr inbounds i16, i16* %10099, i64 4
  %10118 = bitcast i16* %10117 to <16 x i16>*
  %10119 = load <16 x i16>, <16 x i16>* %10118, align 2, !tbaa !396
  %10120 = getelementptr inbounds i16, i16* %10099, i64 20
  %10121 = bitcast i16* %10120 to <16 x i16>*
  %10122 = load <16 x i16>, <16 x i16>* %10121, align 2, !tbaa !396
  %10123 = getelementptr inbounds i16, i16* %10099, i64 3
  %10124 = bitcast i16* %10123 to <16 x i16>*
  %10125 = load <16 x i16>, <16 x i16>* %10124, align 2, !tbaa !396
  %10126 = getelementptr inbounds i16, i16* %10099, i64 19
  %10127 = bitcast i16* %10126 to <16 x i16>*
  %10128 = load <16 x i16>, <16 x i16>* %10127, align 2, !tbaa !396
  %10129 = add <16 x i16> %10107, %10102
  %10130 = add <16 x i16> %10129, %10113
  %10131 = add <16 x i16> %10130, %10119
  %10132 = add <16 x i16> %10131, %10125
  %10133 = add <16 x i16> %10110, %10105
  %10134 = add <16 x i16> %10133, %10116
  %10135 = add <16 x i16> %10134, %10122
  %10136 = add <16 x i16> %10135, %10128
  %10137 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10132, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10138 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10136, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10139 = shufflevector <16 x i16> %10137, <16 x i16> %10138, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10140 = lshr <32 x i16> %10139, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10141 = shufflevector <32 x i16> %10140, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10142 = sext i32 %blur_x.s0.x.v1.base.s551 to i64
  %10143 = add nsw i64 %10142, %9967
  %10144 = getelementptr inbounds i16, i16* %blur_x, i64 %10143
  %10145 = bitcast i16* %10144 to <16 x i16>*
  store <16 x i16> %10141, <16 x i16>* %10145, align 2, !tbaa !399
  %10146 = shufflevector <32 x i16> %10140, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10147 = getelementptr inbounds i16, i16* %10144, i64 16
  %10148 = bitcast i16* %10147 to <16 x i16>*
  store <16 x i16> %10146, <16 x i16>* %10148, align 2, !tbaa !399
  br label %"consume blur_x552"

"consume blur_x552":                              ; preds = %"for blur_y.s0.x.x.rebased544", %"produce blur_x550"
  %10149 = sext i32 %b251 to i64
  %10150 = add nsw i64 %9970, %10149
  %10151 = getelementptr inbounds i16, i16* %blur_x, i64 %10150
  %10152 = bitcast i16* %10151 to <16 x i16>*
  %10153 = load <16 x i16>, <16 x i16>* %10152, align 2, !tbaa !399
  %10154 = getelementptr inbounds i16, i16* %10151, i64 16
  %10155 = bitcast i16* %10154 to <16 x i16>*
  %10156 = load <16 x i16>, <16 x i16>* %10155, align 2, !tbaa !399
  %10157 = add nsw i64 %9973, %10149
  %10158 = getelementptr inbounds i16, i16* %blur_x, i64 %10157
  %10159 = bitcast i16* %10158 to <16 x i16>*
  %10160 = load <16 x i16>, <16 x i16>* %10159, align 2, !tbaa !399
  %10161 = getelementptr inbounds i16, i16* %10158, i64 16
  %10162 = bitcast i16* %10161 to <16 x i16>*
  %10163 = load <16 x i16>, <16 x i16>* %10162, align 2, !tbaa !399
  %10164 = add nsw i64 %9976, %10149
  %10165 = getelementptr inbounds i16, i16* %blur_x, i64 %10164
  %10166 = bitcast i16* %10165 to <16 x i16>*
  %10167 = load <16 x i16>, <16 x i16>* %10166, align 2, !tbaa !399
  %10168 = getelementptr inbounds i16, i16* %10165, i64 16
  %10169 = bitcast i16* %10168 to <16 x i16>*
  %10170 = load <16 x i16>, <16 x i16>* %10169, align 2, !tbaa !399
  %10171 = add nsw i64 %9979, %10149
  %10172 = getelementptr inbounds i16, i16* %blur_x, i64 %10171
  %10173 = bitcast i16* %10172 to <16 x i16>*
  %10174 = load <16 x i16>, <16 x i16>* %10173, align 2, !tbaa !399
  %10175 = getelementptr inbounds i16, i16* %10172, i64 16
  %10176 = bitcast i16* %10175 to <16 x i16>*
  %10177 = load <16 x i16>, <16 x i16>* %10176, align 2, !tbaa !399
  %10178 = add nsw i64 %9982, %10149
  %10179 = getelementptr inbounds i16, i16* %blur_x, i64 %10178
  %10180 = bitcast i16* %10179 to <16 x i16>*
  %10181 = load <16 x i16>, <16 x i16>* %10180, align 2, !tbaa !399
  %10182 = getelementptr inbounds i16, i16* %10179, i64 16
  %10183 = bitcast i16* %10182 to <16 x i16>*
  %10184 = load <16 x i16>, <16 x i16>* %10183, align 2, !tbaa !399
  %10185 = add <16 x i16> %10160, %10153
  %10186 = add <16 x i16> %10185, %10167
  %10187 = add <16 x i16> %10186, %10174
  %10188 = add <16 x i16> %10187, %10181
  %10189 = add <16 x i16> %10163, %10156
  %10190 = add <16 x i16> %10189, %10170
  %10191 = add <16 x i16> %10190, %10177
  %10192 = add <16 x i16> %10191, %10184
  %10193 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10188, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10194 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10192, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10195 = shufflevector <16 x i16> %10193, <16 x i16> %10194, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10196 = lshr <32 x i16> %10195, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10197 = shufflevector <32 x i16> %10196, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10198 = add nsw i64 %9986, %10149
  %10199 = getelementptr inbounds i16, i16* %66, i64 %10198
  %10200 = bitcast i16* %10199 to <16 x i16>*
  store <16 x i16> %10197, <16 x i16>* %10200, align 2, !tbaa !401
  %10201 = shufflevector <32 x i16> %10196, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10202 = getelementptr inbounds i16, i16* %10199, i64 16
  %10203 = bitcast i16* %10202 to <16 x i16>*
  store <16 x i16> %10201, <16 x i16>* %10203, align 2, !tbaa !401
  %10204 = add nuw nsw i32 %blur_y.s0.x.x.rebased546, 1
  %.not2649 = icmp eq i32 %10204, %t1683
  br i1 %.not2649, label %"end for blur_y.s0.x.x.rebased545", label %"for blur_y.s0.x.x.rebased544"

after_bb553:                                      ; preds = %"end for blur_y.s0.x.x.rebased545", %"produce blur_x556"
  br i1 %100, label %"for blur_y.s0.x.x.rebased558.preheader", label %"end for blur_y.s0.x.x.rebased559", !prof !386

"for blur_y.s0.x.x.rebased558.preheader":         ; preds = %after_bb553
  %10205 = sext i32 %t1688 to i64
  %10206 = zext i32 %.pre-phi3402 to i64
  %10207 = mul nsw i64 %10206, %112
  %10208 = sub nsw i64 %10207, %96
  %10209 = zext i32 %.pre-phi3396 to i64
  %10210 = mul nsw i64 %10209, %112
  %10211 = sub nsw i64 %10210, %96
  %10212 = zext i32 %.pre-phi3408 to i64
  %10213 = mul nsw i64 %10212, %112
  %10214 = sub nsw i64 %10213, %96
  %10215 = zext i32 %.pre-phi3378 to i64
  %10216 = mul nsw i64 %10215, %112
  %10217 = sub nsw i64 %10216, %96
  %10218 = zext i32 %.pre-phi to i64
  %10219 = mul nsw i64 %10218, %112
  %10220 = sub nsw i64 %10219, %96
  %10221 = sext i32 %a26 to i64
  %10222 = add nsw i64 %10221, 21
  %10223 = mul nsw i64 %10222, %113
  %10224 = add nsw i64 %10223, %116
  br label %"for blur_y.s0.x.x.rebased558"

"produce blur_x556":                              ; preds = %"end for blur_y.s0.x.x.rebased545"
  %10225 = getelementptr inbounds i16, i16* %read_input, i64 %157
  %10226 = getelementptr inbounds i16, i16* %10225, i64 -31
  %10227 = bitcast i16* %10226 to <16 x i16>*
  %10228 = load <16 x i16>, <16 x i16>* %10227, align 2, !tbaa !396
  %10229 = getelementptr inbounds i16, i16* %10225, i64 -15
  %10230 = bitcast i16* %10229 to <16 x i16>*
  %10231 = load <16 x i16>, <16 x i16>* %10230, align 2, !tbaa !396
  %10232 = getelementptr inbounds i16, i16* %10225, i64 -32
  %10233 = bitcast i16* %10232 to <16 x i16>*
  %10234 = load <16 x i16>, <16 x i16>* %10233, align 2, !tbaa !396
  %10235 = getelementptr inbounds i16, i16* %10225, i64 -16
  %10236 = bitcast i16* %10235 to <16 x i16>*
  %10237 = load <16 x i16>, <16 x i16>* %10236, align 2, !tbaa !396
  %10238 = getelementptr inbounds i16, i16* %10225, i64 -30
  %10239 = bitcast i16* %10238 to <16 x i16>*
  %10240 = load <16 x i16>, <16 x i16>* %10239, align 2, !tbaa !396
  %10241 = getelementptr inbounds i16, i16* %10225, i64 -14
  %10242 = bitcast i16* %10241 to <16 x i16>*
  %10243 = load <16 x i16>, <16 x i16>* %10242, align 2, !tbaa !396
  %10244 = getelementptr inbounds i16, i16* %10225, i64 -28
  %10245 = bitcast i16* %10244 to <16 x i16>*
  %10246 = load <16 x i16>, <16 x i16>* %10245, align 2, !tbaa !396
  %10247 = getelementptr inbounds i16, i16* %10225, i64 -12
  %10248 = bitcast i16* %10247 to <16 x i16>*
  %10249 = load <16 x i16>, <16 x i16>* %10248, align 2, !tbaa !396
  %10250 = getelementptr inbounds i16, i16* %10225, i64 -29
  %10251 = bitcast i16* %10250 to <16 x i16>*
  %10252 = load <16 x i16>, <16 x i16>* %10251, align 2, !tbaa !396
  %10253 = getelementptr inbounds i16, i16* %10225, i64 -13
  %10254 = bitcast i16* %10253 to <16 x i16>*
  %10255 = load <16 x i16>, <16 x i16>* %10254, align 2, !tbaa !396
  %10256 = add <16 x i16> %10234, %10228
  %10257 = add <16 x i16> %10256, %10240
  %10258 = add <16 x i16> %10257, %10246
  %10259 = add <16 x i16> %10258, %10252
  %10260 = add <16 x i16> %10237, %10231
  %10261 = add <16 x i16> %10260, %10243
  %10262 = add <16 x i16> %10261, %10249
  %10263 = add <16 x i16> %10262, %10255
  %10264 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10259, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10265 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10263, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10266 = shufflevector <16 x i16> %10264, <16 x i16> %10265, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10267 = lshr <32 x i16> %10266, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10268 = shufflevector <32 x i16> %10267, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10269 = zext i32 %.pre-phi3378 to i64
  %10270 = mul nsw i64 %97, %10269
  %10271 = add nsw i64 %99, %10270
  %10272 = getelementptr inbounds i16, i16* %blur_x, i64 %10271
  %10273 = getelementptr inbounds i16, i16* %10272, i64 -32
  %10274 = bitcast i16* %10273 to <16 x i16>*
  store <16 x i16> %10268, <16 x i16>* %10274, align 2, !tbaa !399
  %10275 = shufflevector <32 x i16> %10267, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10276 = getelementptr inbounds i16, i16* %10272, i64 -16
  %10277 = bitcast i16* %10276 to <16 x i16>*
  store <16 x i16> %10275, <16 x i16>* %10277, align 2, !tbaa !399
  %10278 = zext i32 %.pre-phi3402 to i64
  %10279 = mul nsw i64 %10278, %112
  %10280 = add nsw i64 %10279, %94
  %10281 = getelementptr inbounds i16, i16* %blur_x, i64 %10280
  %10282 = getelementptr inbounds i16, i16* %10281, i64 -32
  %10283 = bitcast i16* %10282 to <16 x i16>*
  %10284 = load <16 x i16>, <16 x i16>* %10283, align 2, !tbaa !399
  %10285 = getelementptr inbounds i16, i16* %10281, i64 -16
  %10286 = bitcast i16* %10285 to <16 x i16>*
  %10287 = load <16 x i16>, <16 x i16>* %10286, align 2, !tbaa !399
  %10288 = zext i32 %.pre-phi3396 to i64
  %10289 = mul nsw i64 %10288, %112
  %10290 = add nsw i64 %10289, %94
  %10291 = getelementptr inbounds i16, i16* %blur_x, i64 %10290
  %10292 = getelementptr inbounds i16, i16* %10291, i64 -32
  %10293 = bitcast i16* %10292 to <16 x i16>*
  %10294 = load <16 x i16>, <16 x i16>* %10293, align 2, !tbaa !399
  %10295 = getelementptr inbounds i16, i16* %10291, i64 -16
  %10296 = bitcast i16* %10295 to <16 x i16>*
  %10297 = load <16 x i16>, <16 x i16>* %10296, align 2, !tbaa !399
  %10298 = zext i32 %.pre-phi3408 to i64
  %10299 = mul nsw i64 %10298, %112
  %10300 = add nsw i64 %10299, %94
  %10301 = getelementptr inbounds i16, i16* %blur_x, i64 %10300
  %10302 = getelementptr inbounds i16, i16* %10301, i64 -32
  %10303 = bitcast i16* %10302 to <16 x i16>*
  %10304 = load <16 x i16>, <16 x i16>* %10303, align 2, !tbaa !399
  %10305 = getelementptr inbounds i16, i16* %10301, i64 -16
  %10306 = bitcast i16* %10305 to <16 x i16>*
  %10307 = load <16 x i16>, <16 x i16>* %10306, align 2, !tbaa !399
  %10308 = mul nsw i64 %10269, %112
  %10309 = add nsw i64 %10308, %94
  %10310 = getelementptr inbounds i16, i16* %blur_x, i64 %10309
  %10311 = getelementptr inbounds i16, i16* %10310, i64 -32
  %10312 = bitcast i16* %10311 to <16 x i16>*
  %10313 = load <16 x i16>, <16 x i16>* %10312, align 2, !tbaa !399
  %10314 = getelementptr inbounds i16, i16* %10310, i64 -16
  %10315 = bitcast i16* %10314 to <16 x i16>*
  %10316 = load <16 x i16>, <16 x i16>* %10315, align 2, !tbaa !399
  %10317 = zext i32 %.pre-phi to i64
  %10318 = mul nsw i64 %10317, %112
  %10319 = add nsw i64 %10318, %94
  %10320 = getelementptr inbounds i16, i16* %blur_x, i64 %10319
  %10321 = getelementptr inbounds i16, i16* %10320, i64 -32
  %10322 = bitcast i16* %10321 to <16 x i16>*
  %10323 = load <16 x i16>, <16 x i16>* %10322, align 2, !tbaa !399
  %10324 = getelementptr inbounds i16, i16* %10320, i64 -16
  %10325 = bitcast i16* %10324 to <16 x i16>*
  %10326 = load <16 x i16>, <16 x i16>* %10325, align 2, !tbaa !399
  %10327 = add <16 x i16> %10294, %10284
  %10328 = add <16 x i16> %10327, %10304
  %10329 = add <16 x i16> %10328, %10313
  %10330 = add <16 x i16> %10329, %10323
  %10331 = add <16 x i16> %10297, %10287
  %10332 = add <16 x i16> %10331, %10307
  %10333 = add <16 x i16> %10332, %10316
  %10334 = add <16 x i16> %10333, %10326
  %10335 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10330, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10336 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10334, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10337 = shufflevector <16 x i16> %10335, <16 x i16> %10336, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10338 = lshr <32 x i16> %10337, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10339 = shufflevector <32 x i16> %10338, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10340 = sext i32 %a26 to i64
  %10341 = add nsw i64 %10340, 21
  %10342 = mul nsw i64 %10341, %113
  %10343 = add nsw i64 %115, %10342
  %10344 = getelementptr inbounds i16, i16* %66, i64 %10343
  %10345 = getelementptr inbounds i16, i16* %10344, i64 -32
  %10346 = bitcast i16* %10345 to <16 x i16>*
  store <16 x i16> %10339, <16 x i16>* %10346, align 2, !tbaa !401
  %10347 = shufflevector <32 x i16> %10338, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10348 = getelementptr inbounds i16, i16* %10344, i64 -16
  %10349 = bitcast i16* %10348 to <16 x i16>*
  store <16 x i16> %10347, <16 x i16>* %10349, align 2, !tbaa !401
  br label %after_bb553

"for blur_y.s0.x.x.rebased558":                   ; preds = %"for blur_y.s0.x.x.rebased558.preheader", %"consume blur_x565"
  %indvars.iv3218 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased558.preheader" ], [ %indvars.iv.next3219, %"consume blur_x565" ]
  %10350 = add nsw i64 %indvars.iv3218, %101
  %10351 = icmp slt i64 %10350, 1
  %10352 = trunc i64 %10350 to i32
  %10353 = shl nsw i32 %10352, 5
  %10354 = icmp sgt i32 %4, %10353
  %10355 = or i1 %10351, %10354
  br i1 %10355, label %"produce blur_x564", label %"for blur_y.s0.x.x.rebased558.consume blur_x565_crit_edge"

"for blur_y.s0.x.x.rebased558.consume blur_x565_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased558"
  %.pre3445 = shl nsw i64 %10350, 5
  br label %"consume blur_x565"

"end for blur_y.s0.x.x.rebased559":               ; preds = %"consume blur_x565", %after_bb553
  br i1 %102, label %"for blur_y.s0.x.x.rebased566.preheader", label %"end for blur_y.s0.x.x.rebased567", !prof !386

"for blur_y.s0.x.x.rebased566.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased559"
  %10356 = sext i32 %t1688 to i64
  %10357 = zext i32 %.pre-phi3402 to i64
  %10358 = mul nsw i64 %10357, %112
  %10359 = sub nsw i64 %10358, %96
  %10360 = zext i32 %.pre-phi3396 to i64
  %10361 = mul nsw i64 %10360, %112
  %10362 = sub nsw i64 %10361, %96
  %10363 = zext i32 %.pre-phi3408 to i64
  %10364 = mul nsw i64 %10363, %112
  %10365 = sub nsw i64 %10364, %96
  %10366 = zext i32 %.pre-phi3378 to i64
  %10367 = mul nsw i64 %10366, %112
  %10368 = sub nsw i64 %10367, %96
  %10369 = zext i32 %.pre-phi to i64
  %10370 = mul nsw i64 %10369, %112
  %10371 = sub nsw i64 %10370, %96
  %10372 = sext i32 %a26 to i64
  %10373 = add nsw i64 %10372, 21
  %10374 = mul nsw i64 %10373, %113
  %10375 = add nsw i64 %10374, %116
  br label %"for blur_y.s0.x.x.rebased566"

"produce blur_x564":                              ; preds = %"for blur_y.s0.x.x.rebased558"
  %t1048 = add nsw i32 %10353, %t2041
  %10376 = sext i32 %t1048 to i64
  %10377 = getelementptr inbounds i16, i16* %read_input, i64 %10376
  %10378 = getelementptr inbounds i16, i16* %10377, i64 1
  %10379 = bitcast i16* %10378 to <16 x i16>*
  %10380 = load <16 x i16>, <16 x i16>* %10379, align 2, !tbaa !396
  %10381 = getelementptr inbounds i16, i16* %10377, i64 17
  %10382 = bitcast i16* %10381 to <16 x i16>*
  %10383 = load <16 x i16>, <16 x i16>* %10382, align 2, !tbaa !396
  %10384 = bitcast i16* %10377 to <16 x i16>*
  %10385 = load <16 x i16>, <16 x i16>* %10384, align 2, !tbaa !396
  %10386 = getelementptr inbounds i16, i16* %10377, i64 16
  %10387 = bitcast i16* %10386 to <16 x i16>*
  %10388 = load <16 x i16>, <16 x i16>* %10387, align 2, !tbaa !396
  %10389 = getelementptr inbounds i16, i16* %10377, i64 2
  %10390 = bitcast i16* %10389 to <16 x i16>*
  %10391 = load <16 x i16>, <16 x i16>* %10390, align 2, !tbaa !396
  %10392 = getelementptr inbounds i16, i16* %10377, i64 18
  %10393 = bitcast i16* %10392 to <16 x i16>*
  %10394 = load <16 x i16>, <16 x i16>* %10393, align 2, !tbaa !396
  %10395 = getelementptr inbounds i16, i16* %10377, i64 4
  %10396 = bitcast i16* %10395 to <16 x i16>*
  %10397 = load <16 x i16>, <16 x i16>* %10396, align 2, !tbaa !396
  %10398 = getelementptr inbounds i16, i16* %10377, i64 20
  %10399 = bitcast i16* %10398 to <16 x i16>*
  %10400 = load <16 x i16>, <16 x i16>* %10399, align 2, !tbaa !396
  %10401 = getelementptr inbounds i16, i16* %10377, i64 3
  %10402 = bitcast i16* %10401 to <16 x i16>*
  %10403 = load <16 x i16>, <16 x i16>* %10402, align 2, !tbaa !396
  %10404 = getelementptr inbounds i16, i16* %10377, i64 19
  %10405 = bitcast i16* %10404 to <16 x i16>*
  %10406 = load <16 x i16>, <16 x i16>* %10405, align 2, !tbaa !396
  %10407 = add <16 x i16> %10385, %10380
  %10408 = add <16 x i16> %10407, %10391
  %10409 = add <16 x i16> %10408, %10397
  %10410 = add <16 x i16> %10409, %10403
  %10411 = add <16 x i16> %10388, %10383
  %10412 = add <16 x i16> %10411, %10394
  %10413 = add <16 x i16> %10412, %10400
  %10414 = add <16 x i16> %10413, %10406
  %10415 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10410, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10416 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10414, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10417 = shufflevector <16 x i16> %10415, <16 x i16> %10416, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10418 = lshr <32 x i16> %10417, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10419 = shufflevector <32 x i16> %10418, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10420 = shl nsw i64 %10350, 5
  %10421 = add nsw i64 %10420, %10205
  %10422 = getelementptr inbounds i16, i16* %blur_x, i64 %10421
  %10423 = bitcast i16* %10422 to <16 x i16>*
  store <16 x i16> %10419, <16 x i16>* %10423, align 2, !tbaa !399
  %10424 = shufflevector <32 x i16> %10418, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10425 = getelementptr inbounds i16, i16* %10422, i64 16
  %10426 = bitcast i16* %10425 to <16 x i16>*
  store <16 x i16> %10424, <16 x i16>* %10426, align 2, !tbaa !399
  br label %"consume blur_x565"

"consume blur_x565":                              ; preds = %"for blur_y.s0.x.x.rebased558.consume blur_x565_crit_edge", %"produce blur_x564"
  %.pre-phi3446 = phi i64 [ %.pre3445, %"for blur_y.s0.x.x.rebased558.consume blur_x565_crit_edge" ], [ %10420, %"produce blur_x564" ]
  %10427 = add nsw i64 %10208, %.pre-phi3446
  %10428 = getelementptr inbounds i16, i16* %blur_x, i64 %10427
  %10429 = bitcast i16* %10428 to <16 x i16>*
  %10430 = load <16 x i16>, <16 x i16>* %10429, align 2, !tbaa !399
  %10431 = getelementptr inbounds i16, i16* %10428, i64 16
  %10432 = bitcast i16* %10431 to <16 x i16>*
  %10433 = load <16 x i16>, <16 x i16>* %10432, align 2, !tbaa !399
  %10434 = add nsw i64 %10211, %.pre-phi3446
  %10435 = getelementptr inbounds i16, i16* %blur_x, i64 %10434
  %10436 = bitcast i16* %10435 to <16 x i16>*
  %10437 = load <16 x i16>, <16 x i16>* %10436, align 2, !tbaa !399
  %10438 = getelementptr inbounds i16, i16* %10435, i64 16
  %10439 = bitcast i16* %10438 to <16 x i16>*
  %10440 = load <16 x i16>, <16 x i16>* %10439, align 2, !tbaa !399
  %10441 = add nsw i64 %10214, %.pre-phi3446
  %10442 = getelementptr inbounds i16, i16* %blur_x, i64 %10441
  %10443 = bitcast i16* %10442 to <16 x i16>*
  %10444 = load <16 x i16>, <16 x i16>* %10443, align 2, !tbaa !399
  %10445 = getelementptr inbounds i16, i16* %10442, i64 16
  %10446 = bitcast i16* %10445 to <16 x i16>*
  %10447 = load <16 x i16>, <16 x i16>* %10446, align 2, !tbaa !399
  %10448 = add nsw i64 %10217, %.pre-phi3446
  %10449 = getelementptr inbounds i16, i16* %blur_x, i64 %10448
  %10450 = bitcast i16* %10449 to <16 x i16>*
  %10451 = load <16 x i16>, <16 x i16>* %10450, align 2, !tbaa !399
  %10452 = getelementptr inbounds i16, i16* %10449, i64 16
  %10453 = bitcast i16* %10452 to <16 x i16>*
  %10454 = load <16 x i16>, <16 x i16>* %10453, align 2, !tbaa !399
  %10455 = add nsw i64 %10220, %.pre-phi3446
  %10456 = getelementptr inbounds i16, i16* %blur_x, i64 %10455
  %10457 = bitcast i16* %10456 to <16 x i16>*
  %10458 = load <16 x i16>, <16 x i16>* %10457, align 2, !tbaa !399
  %10459 = getelementptr inbounds i16, i16* %10456, i64 16
  %10460 = bitcast i16* %10459 to <16 x i16>*
  %10461 = load <16 x i16>, <16 x i16>* %10460, align 2, !tbaa !399
  %10462 = add <16 x i16> %10437, %10430
  %10463 = add <16 x i16> %10462, %10444
  %10464 = add <16 x i16> %10463, %10451
  %10465 = add <16 x i16> %10464, %10458
  %10466 = add <16 x i16> %10440, %10433
  %10467 = add <16 x i16> %10466, %10447
  %10468 = add <16 x i16> %10467, %10454
  %10469 = add <16 x i16> %10468, %10461
  %10470 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10465, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10471 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10469, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10472 = shufflevector <16 x i16> %10470, <16 x i16> %10471, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10473 = lshr <32 x i16> %10472, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10474 = shufflevector <32 x i16> %10473, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10475 = add nsw i64 %10224, %.pre-phi3446
  %10476 = getelementptr inbounds i16, i16* %66, i64 %10475
  %10477 = bitcast i16* %10476 to <16 x i16>*
  store <16 x i16> %10474, <16 x i16>* %10477, align 2, !tbaa !401
  %10478 = shufflevector <32 x i16> %10473, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10479 = getelementptr inbounds i16, i16* %10476, i64 16
  %10480 = bitcast i16* %10479 to <16 x i16>*
  store <16 x i16> %10478, <16 x i16>* %10480, align 2, !tbaa !401
  %indvars.iv.next3219 = add nuw nsw i64 %indvars.iv3218, 1
  %.not2648 = icmp eq i64 %indvars.iv.next3219, %184
  br i1 %.not2648, label %"end for blur_y.s0.x.x.rebased559", label %"for blur_y.s0.x.x.rebased558"

"for blur_y.s0.x.x.rebased566":                   ; preds = %"for blur_y.s0.x.x.rebased566.preheader", %"consume blur_x574"
  %blur_y.s0.x.x.rebased568 = phi i32 [ %10593, %"consume blur_x574" ], [ 0, %"for blur_y.s0.x.x.rebased566.preheader" ]
  %10481 = add nsw i32 %blur_y.s0.x.x.rebased568, %t1626
  %a252 = shl nsw i32 %10481, 5
  %10482 = icmp sgt i32 %a14, %a252
  %b258 = select i1 %10482, i32 %a252, i32 %a14
  %10483 = icmp slt i32 %10481, 1
  %10484 = icmp sgt i32 %4, %a252
  %10485 = or i1 %10483, %10484
  br i1 %10485, label %"produce blur_x572", label %"consume blur_x574"

"end for blur_y.s0.x.x.rebased567":               ; preds = %"consume blur_x574", %"end for blur_y.s0.x.x.rebased559"
  br i1 %34, label %"produce blur_x578", label %after_bb575

"produce blur_x572":                              ; preds = %"for blur_y.s0.x.x.rebased566"
  %10486 = icmp slt i32 %b258, %4
  %blur_x.s0.x.v1.base.s573 = select i1 %10486, i32 %b258, i32 %4
  %t1053 = add nsw i32 %blur_x.s0.x.v1.base.s573, %t2041
  %10487 = sext i32 %t1053 to i64
  %10488 = getelementptr inbounds i16, i16* %read_input, i64 %10487
  %10489 = getelementptr inbounds i16, i16* %10488, i64 1
  %10490 = bitcast i16* %10489 to <16 x i16>*
  %10491 = load <16 x i16>, <16 x i16>* %10490, align 2, !tbaa !396
  %10492 = getelementptr inbounds i16, i16* %10488, i64 17
  %10493 = bitcast i16* %10492 to <16 x i16>*
  %10494 = load <16 x i16>, <16 x i16>* %10493, align 2, !tbaa !396
  %10495 = bitcast i16* %10488 to <16 x i16>*
  %10496 = load <16 x i16>, <16 x i16>* %10495, align 2, !tbaa !396
  %10497 = getelementptr inbounds i16, i16* %10488, i64 16
  %10498 = bitcast i16* %10497 to <16 x i16>*
  %10499 = load <16 x i16>, <16 x i16>* %10498, align 2, !tbaa !396
  %10500 = getelementptr inbounds i16, i16* %10488, i64 2
  %10501 = bitcast i16* %10500 to <16 x i16>*
  %10502 = load <16 x i16>, <16 x i16>* %10501, align 2, !tbaa !396
  %10503 = getelementptr inbounds i16, i16* %10488, i64 18
  %10504 = bitcast i16* %10503 to <16 x i16>*
  %10505 = load <16 x i16>, <16 x i16>* %10504, align 2, !tbaa !396
  %10506 = getelementptr inbounds i16, i16* %10488, i64 4
  %10507 = bitcast i16* %10506 to <16 x i16>*
  %10508 = load <16 x i16>, <16 x i16>* %10507, align 2, !tbaa !396
  %10509 = getelementptr inbounds i16, i16* %10488, i64 20
  %10510 = bitcast i16* %10509 to <16 x i16>*
  %10511 = load <16 x i16>, <16 x i16>* %10510, align 2, !tbaa !396
  %10512 = getelementptr inbounds i16, i16* %10488, i64 3
  %10513 = bitcast i16* %10512 to <16 x i16>*
  %10514 = load <16 x i16>, <16 x i16>* %10513, align 2, !tbaa !396
  %10515 = getelementptr inbounds i16, i16* %10488, i64 19
  %10516 = bitcast i16* %10515 to <16 x i16>*
  %10517 = load <16 x i16>, <16 x i16>* %10516, align 2, !tbaa !396
  %10518 = add <16 x i16> %10496, %10491
  %10519 = add <16 x i16> %10518, %10502
  %10520 = add <16 x i16> %10519, %10508
  %10521 = add <16 x i16> %10520, %10514
  %10522 = add <16 x i16> %10499, %10494
  %10523 = add <16 x i16> %10522, %10505
  %10524 = add <16 x i16> %10523, %10511
  %10525 = add <16 x i16> %10524, %10517
  %10526 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10521, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10527 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10525, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10528 = shufflevector <16 x i16> %10526, <16 x i16> %10527, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10529 = lshr <32 x i16> %10528, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10530 = shufflevector <32 x i16> %10529, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10531 = sext i32 %blur_x.s0.x.v1.base.s573 to i64
  %10532 = add nsw i64 %10531, %10356
  %10533 = getelementptr inbounds i16, i16* %blur_x, i64 %10532
  %10534 = bitcast i16* %10533 to <16 x i16>*
  store <16 x i16> %10530, <16 x i16>* %10534, align 2, !tbaa !399
  %10535 = shufflevector <32 x i16> %10529, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10536 = getelementptr inbounds i16, i16* %10533, i64 16
  %10537 = bitcast i16* %10536 to <16 x i16>*
  store <16 x i16> %10535, <16 x i16>* %10537, align 2, !tbaa !399
  br label %"consume blur_x574"

"consume blur_x574":                              ; preds = %"for blur_y.s0.x.x.rebased566", %"produce blur_x572"
  %10538 = sext i32 %b258 to i64
  %10539 = add nsw i64 %10359, %10538
  %10540 = getelementptr inbounds i16, i16* %blur_x, i64 %10539
  %10541 = bitcast i16* %10540 to <16 x i16>*
  %10542 = load <16 x i16>, <16 x i16>* %10541, align 2, !tbaa !399
  %10543 = getelementptr inbounds i16, i16* %10540, i64 16
  %10544 = bitcast i16* %10543 to <16 x i16>*
  %10545 = load <16 x i16>, <16 x i16>* %10544, align 2, !tbaa !399
  %10546 = add nsw i64 %10362, %10538
  %10547 = getelementptr inbounds i16, i16* %blur_x, i64 %10546
  %10548 = bitcast i16* %10547 to <16 x i16>*
  %10549 = load <16 x i16>, <16 x i16>* %10548, align 2, !tbaa !399
  %10550 = getelementptr inbounds i16, i16* %10547, i64 16
  %10551 = bitcast i16* %10550 to <16 x i16>*
  %10552 = load <16 x i16>, <16 x i16>* %10551, align 2, !tbaa !399
  %10553 = add nsw i64 %10365, %10538
  %10554 = getelementptr inbounds i16, i16* %blur_x, i64 %10553
  %10555 = bitcast i16* %10554 to <16 x i16>*
  %10556 = load <16 x i16>, <16 x i16>* %10555, align 2, !tbaa !399
  %10557 = getelementptr inbounds i16, i16* %10554, i64 16
  %10558 = bitcast i16* %10557 to <16 x i16>*
  %10559 = load <16 x i16>, <16 x i16>* %10558, align 2, !tbaa !399
  %10560 = add nsw i64 %10368, %10538
  %10561 = getelementptr inbounds i16, i16* %blur_x, i64 %10560
  %10562 = bitcast i16* %10561 to <16 x i16>*
  %10563 = load <16 x i16>, <16 x i16>* %10562, align 2, !tbaa !399
  %10564 = getelementptr inbounds i16, i16* %10561, i64 16
  %10565 = bitcast i16* %10564 to <16 x i16>*
  %10566 = load <16 x i16>, <16 x i16>* %10565, align 2, !tbaa !399
  %10567 = add nsw i64 %10371, %10538
  %10568 = getelementptr inbounds i16, i16* %blur_x, i64 %10567
  %10569 = bitcast i16* %10568 to <16 x i16>*
  %10570 = load <16 x i16>, <16 x i16>* %10569, align 2, !tbaa !399
  %10571 = getelementptr inbounds i16, i16* %10568, i64 16
  %10572 = bitcast i16* %10571 to <16 x i16>*
  %10573 = load <16 x i16>, <16 x i16>* %10572, align 2, !tbaa !399
  %10574 = add <16 x i16> %10549, %10542
  %10575 = add <16 x i16> %10574, %10556
  %10576 = add <16 x i16> %10575, %10563
  %10577 = add <16 x i16> %10576, %10570
  %10578 = add <16 x i16> %10552, %10545
  %10579 = add <16 x i16> %10578, %10559
  %10580 = add <16 x i16> %10579, %10566
  %10581 = add <16 x i16> %10580, %10573
  %10582 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10577, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10583 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10581, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10584 = shufflevector <16 x i16> %10582, <16 x i16> %10583, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10585 = lshr <32 x i16> %10584, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10586 = shufflevector <32 x i16> %10585, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10587 = add nsw i64 %10375, %10538
  %10588 = getelementptr inbounds i16, i16* %66, i64 %10587
  %10589 = bitcast i16* %10588 to <16 x i16>*
  store <16 x i16> %10586, <16 x i16>* %10589, align 2, !tbaa !401
  %10590 = shufflevector <32 x i16> %10585, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10591 = getelementptr inbounds i16, i16* %10588, i64 16
  %10592 = bitcast i16* %10591 to <16 x i16>*
  store <16 x i16> %10590, <16 x i16>* %10592, align 2, !tbaa !401
  %10593 = add nuw nsw i32 %blur_y.s0.x.x.rebased568, 1
  %.not2647 = icmp eq i32 %10593, %t1683
  br i1 %.not2647, label %"end for blur_y.s0.x.x.rebased567", label %"for blur_y.s0.x.x.rebased566"

after_bb575:                                      ; preds = %"end for blur_y.s0.x.x.rebased567", %"produce blur_x578"
  br i1 %100, label %"for blur_y.s0.x.x.rebased580.preheader", label %"end for blur_y.s0.x.x.rebased581", !prof !386

"for blur_y.s0.x.x.rebased580.preheader":         ; preds = %after_bb575
  %10594 = sext i32 %t1694 to i64
  %10595 = zext i32 %.pre-phi3408 to i64
  %10596 = mul nsw i64 %10595, %112
  %10597 = sub nsw i64 %10596, %96
  %10598 = zext i32 %.pre-phi3402 to i64
  %10599 = mul nsw i64 %10598, %112
  %10600 = sub nsw i64 %10599, %96
  %10601 = zext i32 %.pre-phi to i64
  %10602 = mul nsw i64 %10601, %112
  %10603 = sub nsw i64 %10602, %96
  %10604 = zext i32 %.pre-phi3382 to i64
  %10605 = mul nsw i64 %10604, %112
  %10606 = sub nsw i64 %10605, %96
  %10607 = zext i32 %.pre-phi3378 to i64
  %10608 = mul nsw i64 %10607, %112
  %10609 = sub nsw i64 %10608, %96
  %10610 = sext i32 %a26 to i64
  %10611 = add nsw i64 %10610, 22
  %10612 = mul nsw i64 %10611, %113
  %10613 = add nsw i64 %10612, %116
  br label %"for blur_y.s0.x.x.rebased580"

"produce blur_x578":                              ; preds = %"end for blur_y.s0.x.x.rebased567"
  %10614 = getelementptr inbounds i16, i16* %read_input, i64 %159
  %10615 = getelementptr inbounds i16, i16* %10614, i64 -31
  %10616 = bitcast i16* %10615 to <16 x i16>*
  %10617 = load <16 x i16>, <16 x i16>* %10616, align 2, !tbaa !396
  %10618 = getelementptr inbounds i16, i16* %10614, i64 -15
  %10619 = bitcast i16* %10618 to <16 x i16>*
  %10620 = load <16 x i16>, <16 x i16>* %10619, align 2, !tbaa !396
  %10621 = getelementptr inbounds i16, i16* %10614, i64 -32
  %10622 = bitcast i16* %10621 to <16 x i16>*
  %10623 = load <16 x i16>, <16 x i16>* %10622, align 2, !tbaa !396
  %10624 = getelementptr inbounds i16, i16* %10614, i64 -16
  %10625 = bitcast i16* %10624 to <16 x i16>*
  %10626 = load <16 x i16>, <16 x i16>* %10625, align 2, !tbaa !396
  %10627 = getelementptr inbounds i16, i16* %10614, i64 -30
  %10628 = bitcast i16* %10627 to <16 x i16>*
  %10629 = load <16 x i16>, <16 x i16>* %10628, align 2, !tbaa !396
  %10630 = getelementptr inbounds i16, i16* %10614, i64 -14
  %10631 = bitcast i16* %10630 to <16 x i16>*
  %10632 = load <16 x i16>, <16 x i16>* %10631, align 2, !tbaa !396
  %10633 = getelementptr inbounds i16, i16* %10614, i64 -28
  %10634 = bitcast i16* %10633 to <16 x i16>*
  %10635 = load <16 x i16>, <16 x i16>* %10634, align 2, !tbaa !396
  %10636 = getelementptr inbounds i16, i16* %10614, i64 -12
  %10637 = bitcast i16* %10636 to <16 x i16>*
  %10638 = load <16 x i16>, <16 x i16>* %10637, align 2, !tbaa !396
  %10639 = getelementptr inbounds i16, i16* %10614, i64 -29
  %10640 = bitcast i16* %10639 to <16 x i16>*
  %10641 = load <16 x i16>, <16 x i16>* %10640, align 2, !tbaa !396
  %10642 = getelementptr inbounds i16, i16* %10614, i64 -13
  %10643 = bitcast i16* %10642 to <16 x i16>*
  %10644 = load <16 x i16>, <16 x i16>* %10643, align 2, !tbaa !396
  %10645 = add <16 x i16> %10623, %10617
  %10646 = add <16 x i16> %10645, %10629
  %10647 = add <16 x i16> %10646, %10635
  %10648 = add <16 x i16> %10647, %10641
  %10649 = add <16 x i16> %10626, %10620
  %10650 = add <16 x i16> %10649, %10632
  %10651 = add <16 x i16> %10650, %10638
  %10652 = add <16 x i16> %10651, %10644
  %10653 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10648, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10654 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10652, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10655 = shufflevector <16 x i16> %10653, <16 x i16> %10654, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10656 = lshr <32 x i16> %10655, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10657 = shufflevector <32 x i16> %10656, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10658 = zext i32 %.pre-phi3382 to i64
  %10659 = mul nsw i64 %97, %10658
  %10660 = add nsw i64 %99, %10659
  %10661 = getelementptr inbounds i16, i16* %blur_x, i64 %10660
  %10662 = getelementptr inbounds i16, i16* %10661, i64 -32
  %10663 = bitcast i16* %10662 to <16 x i16>*
  store <16 x i16> %10657, <16 x i16>* %10663, align 2, !tbaa !399
  %10664 = shufflevector <32 x i16> %10656, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10665 = getelementptr inbounds i16, i16* %10661, i64 -16
  %10666 = bitcast i16* %10665 to <16 x i16>*
  store <16 x i16> %10664, <16 x i16>* %10666, align 2, !tbaa !399
  %10667 = zext i32 %.pre-phi3408 to i64
  %10668 = mul nsw i64 %10667, %112
  %10669 = add nsw i64 %10668, %94
  %10670 = getelementptr inbounds i16, i16* %blur_x, i64 %10669
  %10671 = getelementptr inbounds i16, i16* %10670, i64 -32
  %10672 = bitcast i16* %10671 to <16 x i16>*
  %10673 = load <16 x i16>, <16 x i16>* %10672, align 2, !tbaa !399
  %10674 = getelementptr inbounds i16, i16* %10670, i64 -16
  %10675 = bitcast i16* %10674 to <16 x i16>*
  %10676 = load <16 x i16>, <16 x i16>* %10675, align 2, !tbaa !399
  %10677 = zext i32 %.pre-phi3402 to i64
  %10678 = mul nsw i64 %10677, %112
  %10679 = add nsw i64 %10678, %94
  %10680 = getelementptr inbounds i16, i16* %blur_x, i64 %10679
  %10681 = getelementptr inbounds i16, i16* %10680, i64 -32
  %10682 = bitcast i16* %10681 to <16 x i16>*
  %10683 = load <16 x i16>, <16 x i16>* %10682, align 2, !tbaa !399
  %10684 = getelementptr inbounds i16, i16* %10680, i64 -16
  %10685 = bitcast i16* %10684 to <16 x i16>*
  %10686 = load <16 x i16>, <16 x i16>* %10685, align 2, !tbaa !399
  %10687 = zext i32 %.pre-phi to i64
  %10688 = mul nsw i64 %10687, %112
  %10689 = add nsw i64 %10688, %94
  %10690 = getelementptr inbounds i16, i16* %blur_x, i64 %10689
  %10691 = getelementptr inbounds i16, i16* %10690, i64 -32
  %10692 = bitcast i16* %10691 to <16 x i16>*
  %10693 = load <16 x i16>, <16 x i16>* %10692, align 2, !tbaa !399
  %10694 = getelementptr inbounds i16, i16* %10690, i64 -16
  %10695 = bitcast i16* %10694 to <16 x i16>*
  %10696 = load <16 x i16>, <16 x i16>* %10695, align 2, !tbaa !399
  %10697 = mul nsw i64 %10658, %112
  %10698 = add nsw i64 %10697, %94
  %10699 = getelementptr inbounds i16, i16* %blur_x, i64 %10698
  %10700 = getelementptr inbounds i16, i16* %10699, i64 -32
  %10701 = bitcast i16* %10700 to <16 x i16>*
  %10702 = load <16 x i16>, <16 x i16>* %10701, align 2, !tbaa !399
  %10703 = getelementptr inbounds i16, i16* %10699, i64 -16
  %10704 = bitcast i16* %10703 to <16 x i16>*
  %10705 = load <16 x i16>, <16 x i16>* %10704, align 2, !tbaa !399
  %10706 = zext i32 %.pre-phi3378 to i64
  %10707 = mul nsw i64 %10706, %112
  %10708 = add nsw i64 %10707, %94
  %10709 = getelementptr inbounds i16, i16* %blur_x, i64 %10708
  %10710 = getelementptr inbounds i16, i16* %10709, i64 -32
  %10711 = bitcast i16* %10710 to <16 x i16>*
  %10712 = load <16 x i16>, <16 x i16>* %10711, align 2, !tbaa !399
  %10713 = getelementptr inbounds i16, i16* %10709, i64 -16
  %10714 = bitcast i16* %10713 to <16 x i16>*
  %10715 = load <16 x i16>, <16 x i16>* %10714, align 2, !tbaa !399
  %10716 = add <16 x i16> %10683, %10673
  %10717 = add <16 x i16> %10716, %10693
  %10718 = add <16 x i16> %10717, %10702
  %10719 = add <16 x i16> %10718, %10712
  %10720 = add <16 x i16> %10686, %10676
  %10721 = add <16 x i16> %10720, %10696
  %10722 = add <16 x i16> %10721, %10705
  %10723 = add <16 x i16> %10722, %10715
  %10724 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10719, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10725 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10723, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10726 = shufflevector <16 x i16> %10724, <16 x i16> %10725, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10727 = lshr <32 x i16> %10726, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10728 = shufflevector <32 x i16> %10727, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10729 = sext i32 %a26 to i64
  %10730 = add nsw i64 %10729, 22
  %10731 = mul nsw i64 %10730, %113
  %10732 = add nsw i64 %115, %10731
  %10733 = getelementptr inbounds i16, i16* %66, i64 %10732
  %10734 = getelementptr inbounds i16, i16* %10733, i64 -32
  %10735 = bitcast i16* %10734 to <16 x i16>*
  store <16 x i16> %10728, <16 x i16>* %10735, align 2, !tbaa !401
  %10736 = shufflevector <32 x i16> %10727, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10737 = getelementptr inbounds i16, i16* %10733, i64 -16
  %10738 = bitcast i16* %10737 to <16 x i16>*
  store <16 x i16> %10736, <16 x i16>* %10738, align 2, !tbaa !401
  br label %after_bb575

"for blur_y.s0.x.x.rebased580":                   ; preds = %"for blur_y.s0.x.x.rebased580.preheader", %"consume blur_x587"
  %indvars.iv3221 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased580.preheader" ], [ %indvars.iv.next3222, %"consume blur_x587" ]
  %10739 = add nsw i64 %indvars.iv3221, %101
  %10740 = icmp slt i64 %10739, 1
  %10741 = trunc i64 %10739 to i32
  %10742 = shl nsw i32 %10741, 5
  %10743 = icmp sgt i32 %4, %10742
  %10744 = or i1 %10740, %10743
  br i1 %10744, label %"produce blur_x586", label %"for blur_y.s0.x.x.rebased580.consume blur_x587_crit_edge"

"for blur_y.s0.x.x.rebased580.consume blur_x587_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased580"
  %.pre3447 = shl nsw i64 %10739, 5
  br label %"consume blur_x587"

"end for blur_y.s0.x.x.rebased581":               ; preds = %"consume blur_x587", %after_bb575
  br i1 %102, label %"for blur_y.s0.x.x.rebased588.preheader", label %"end for blur_y.s0.x.x.rebased589", !prof !386

"for blur_y.s0.x.x.rebased588.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased581"
  %10745 = sext i32 %t1694 to i64
  %10746 = zext i32 %.pre-phi3408 to i64
  %10747 = mul nsw i64 %10746, %112
  %10748 = sub nsw i64 %10747, %96
  %10749 = zext i32 %.pre-phi3402 to i64
  %10750 = mul nsw i64 %10749, %112
  %10751 = sub nsw i64 %10750, %96
  %10752 = zext i32 %.pre-phi to i64
  %10753 = mul nsw i64 %10752, %112
  %10754 = sub nsw i64 %10753, %96
  %10755 = zext i32 %.pre-phi3382 to i64
  %10756 = mul nsw i64 %10755, %112
  %10757 = sub nsw i64 %10756, %96
  %10758 = zext i32 %.pre-phi3378 to i64
  %10759 = mul nsw i64 %10758, %112
  %10760 = sub nsw i64 %10759, %96
  %10761 = sext i32 %a26 to i64
  %10762 = add nsw i64 %10761, 22
  %10763 = mul nsw i64 %10762, %113
  %10764 = add nsw i64 %10763, %116
  br label %"for blur_y.s0.x.x.rebased588"

"produce blur_x586":                              ; preds = %"for blur_y.s0.x.x.rebased580"
  %t1064 = add nsw i32 %10742, %t2057
  %10765 = sext i32 %t1064 to i64
  %10766 = getelementptr inbounds i16, i16* %read_input, i64 %10765
  %10767 = getelementptr inbounds i16, i16* %10766, i64 1
  %10768 = bitcast i16* %10767 to <16 x i16>*
  %10769 = load <16 x i16>, <16 x i16>* %10768, align 2, !tbaa !396
  %10770 = getelementptr inbounds i16, i16* %10766, i64 17
  %10771 = bitcast i16* %10770 to <16 x i16>*
  %10772 = load <16 x i16>, <16 x i16>* %10771, align 2, !tbaa !396
  %10773 = bitcast i16* %10766 to <16 x i16>*
  %10774 = load <16 x i16>, <16 x i16>* %10773, align 2, !tbaa !396
  %10775 = getelementptr inbounds i16, i16* %10766, i64 16
  %10776 = bitcast i16* %10775 to <16 x i16>*
  %10777 = load <16 x i16>, <16 x i16>* %10776, align 2, !tbaa !396
  %10778 = getelementptr inbounds i16, i16* %10766, i64 2
  %10779 = bitcast i16* %10778 to <16 x i16>*
  %10780 = load <16 x i16>, <16 x i16>* %10779, align 2, !tbaa !396
  %10781 = getelementptr inbounds i16, i16* %10766, i64 18
  %10782 = bitcast i16* %10781 to <16 x i16>*
  %10783 = load <16 x i16>, <16 x i16>* %10782, align 2, !tbaa !396
  %10784 = getelementptr inbounds i16, i16* %10766, i64 4
  %10785 = bitcast i16* %10784 to <16 x i16>*
  %10786 = load <16 x i16>, <16 x i16>* %10785, align 2, !tbaa !396
  %10787 = getelementptr inbounds i16, i16* %10766, i64 20
  %10788 = bitcast i16* %10787 to <16 x i16>*
  %10789 = load <16 x i16>, <16 x i16>* %10788, align 2, !tbaa !396
  %10790 = getelementptr inbounds i16, i16* %10766, i64 3
  %10791 = bitcast i16* %10790 to <16 x i16>*
  %10792 = load <16 x i16>, <16 x i16>* %10791, align 2, !tbaa !396
  %10793 = getelementptr inbounds i16, i16* %10766, i64 19
  %10794 = bitcast i16* %10793 to <16 x i16>*
  %10795 = load <16 x i16>, <16 x i16>* %10794, align 2, !tbaa !396
  %10796 = add <16 x i16> %10774, %10769
  %10797 = add <16 x i16> %10796, %10780
  %10798 = add <16 x i16> %10797, %10786
  %10799 = add <16 x i16> %10798, %10792
  %10800 = add <16 x i16> %10777, %10772
  %10801 = add <16 x i16> %10800, %10783
  %10802 = add <16 x i16> %10801, %10789
  %10803 = add <16 x i16> %10802, %10795
  %10804 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10799, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10805 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10803, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10806 = shufflevector <16 x i16> %10804, <16 x i16> %10805, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10807 = lshr <32 x i16> %10806, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10808 = shufflevector <32 x i16> %10807, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10809 = shl nsw i64 %10739, 5
  %10810 = add nsw i64 %10809, %10594
  %10811 = getelementptr inbounds i16, i16* %blur_x, i64 %10810
  %10812 = bitcast i16* %10811 to <16 x i16>*
  store <16 x i16> %10808, <16 x i16>* %10812, align 2, !tbaa !399
  %10813 = shufflevector <32 x i16> %10807, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10814 = getelementptr inbounds i16, i16* %10811, i64 16
  %10815 = bitcast i16* %10814 to <16 x i16>*
  store <16 x i16> %10813, <16 x i16>* %10815, align 2, !tbaa !399
  br label %"consume blur_x587"

"consume blur_x587":                              ; preds = %"for blur_y.s0.x.x.rebased580.consume blur_x587_crit_edge", %"produce blur_x586"
  %.pre-phi3448 = phi i64 [ %.pre3447, %"for blur_y.s0.x.x.rebased580.consume blur_x587_crit_edge" ], [ %10809, %"produce blur_x586" ]
  %10816 = add nsw i64 %10597, %.pre-phi3448
  %10817 = getelementptr inbounds i16, i16* %blur_x, i64 %10816
  %10818 = bitcast i16* %10817 to <16 x i16>*
  %10819 = load <16 x i16>, <16 x i16>* %10818, align 2, !tbaa !399
  %10820 = getelementptr inbounds i16, i16* %10817, i64 16
  %10821 = bitcast i16* %10820 to <16 x i16>*
  %10822 = load <16 x i16>, <16 x i16>* %10821, align 2, !tbaa !399
  %10823 = add nsw i64 %10600, %.pre-phi3448
  %10824 = getelementptr inbounds i16, i16* %blur_x, i64 %10823
  %10825 = bitcast i16* %10824 to <16 x i16>*
  %10826 = load <16 x i16>, <16 x i16>* %10825, align 2, !tbaa !399
  %10827 = getelementptr inbounds i16, i16* %10824, i64 16
  %10828 = bitcast i16* %10827 to <16 x i16>*
  %10829 = load <16 x i16>, <16 x i16>* %10828, align 2, !tbaa !399
  %10830 = add nsw i64 %10603, %.pre-phi3448
  %10831 = getelementptr inbounds i16, i16* %blur_x, i64 %10830
  %10832 = bitcast i16* %10831 to <16 x i16>*
  %10833 = load <16 x i16>, <16 x i16>* %10832, align 2, !tbaa !399
  %10834 = getelementptr inbounds i16, i16* %10831, i64 16
  %10835 = bitcast i16* %10834 to <16 x i16>*
  %10836 = load <16 x i16>, <16 x i16>* %10835, align 2, !tbaa !399
  %10837 = add nsw i64 %10606, %.pre-phi3448
  %10838 = getelementptr inbounds i16, i16* %blur_x, i64 %10837
  %10839 = bitcast i16* %10838 to <16 x i16>*
  %10840 = load <16 x i16>, <16 x i16>* %10839, align 2, !tbaa !399
  %10841 = getelementptr inbounds i16, i16* %10838, i64 16
  %10842 = bitcast i16* %10841 to <16 x i16>*
  %10843 = load <16 x i16>, <16 x i16>* %10842, align 2, !tbaa !399
  %10844 = add nsw i64 %10609, %.pre-phi3448
  %10845 = getelementptr inbounds i16, i16* %blur_x, i64 %10844
  %10846 = bitcast i16* %10845 to <16 x i16>*
  %10847 = load <16 x i16>, <16 x i16>* %10846, align 2, !tbaa !399
  %10848 = getelementptr inbounds i16, i16* %10845, i64 16
  %10849 = bitcast i16* %10848 to <16 x i16>*
  %10850 = load <16 x i16>, <16 x i16>* %10849, align 2, !tbaa !399
  %10851 = add <16 x i16> %10826, %10819
  %10852 = add <16 x i16> %10851, %10833
  %10853 = add <16 x i16> %10852, %10840
  %10854 = add <16 x i16> %10853, %10847
  %10855 = add <16 x i16> %10829, %10822
  %10856 = add <16 x i16> %10855, %10836
  %10857 = add <16 x i16> %10856, %10843
  %10858 = add <16 x i16> %10857, %10850
  %10859 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10854, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10860 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10858, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10861 = shufflevector <16 x i16> %10859, <16 x i16> %10860, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10862 = lshr <32 x i16> %10861, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10863 = shufflevector <32 x i16> %10862, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10864 = add nsw i64 %10613, %.pre-phi3448
  %10865 = getelementptr inbounds i16, i16* %66, i64 %10864
  %10866 = bitcast i16* %10865 to <16 x i16>*
  store <16 x i16> %10863, <16 x i16>* %10866, align 2, !tbaa !401
  %10867 = shufflevector <32 x i16> %10862, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10868 = getelementptr inbounds i16, i16* %10865, i64 16
  %10869 = bitcast i16* %10868 to <16 x i16>*
  store <16 x i16> %10867, <16 x i16>* %10869, align 2, !tbaa !401
  %indvars.iv.next3222 = add nuw nsw i64 %indvars.iv3221, 1
  %.not2646 = icmp eq i64 %indvars.iv.next3222, %184
  br i1 %.not2646, label %"end for blur_y.s0.x.x.rebased581", label %"for blur_y.s0.x.x.rebased580"

"for blur_y.s0.x.x.rebased588":                   ; preds = %"for blur_y.s0.x.x.rebased588.preheader", %"consume blur_x596"
  %blur_y.s0.x.x.rebased590 = phi i32 [ %10982, %"consume blur_x596" ], [ 0, %"for blur_y.s0.x.x.rebased588.preheader" ]
  %10870 = add nsw i32 %blur_y.s0.x.x.rebased590, %t1626
  %a259 = shl nsw i32 %10870, 5
  %10871 = icmp sgt i32 %a14, %a259
  %b265 = select i1 %10871, i32 %a259, i32 %a14
  %10872 = icmp slt i32 %10870, 1
  %10873 = icmp sgt i32 %4, %a259
  %10874 = or i1 %10872, %10873
  br i1 %10874, label %"produce blur_x594", label %"consume blur_x596"

"end for blur_y.s0.x.x.rebased589":               ; preds = %"consume blur_x596", %"end for blur_y.s0.x.x.rebased581"
  br i1 %34, label %"produce blur_x600", label %after_bb597

"produce blur_x594":                              ; preds = %"for blur_y.s0.x.x.rebased588"
  %10875 = icmp slt i32 %b265, %4
  %blur_x.s0.x.v1.base.s595 = select i1 %10875, i32 %b265, i32 %4
  %t1069 = add nsw i32 %blur_x.s0.x.v1.base.s595, %t2057
  %10876 = sext i32 %t1069 to i64
  %10877 = getelementptr inbounds i16, i16* %read_input, i64 %10876
  %10878 = getelementptr inbounds i16, i16* %10877, i64 1
  %10879 = bitcast i16* %10878 to <16 x i16>*
  %10880 = load <16 x i16>, <16 x i16>* %10879, align 2, !tbaa !396
  %10881 = getelementptr inbounds i16, i16* %10877, i64 17
  %10882 = bitcast i16* %10881 to <16 x i16>*
  %10883 = load <16 x i16>, <16 x i16>* %10882, align 2, !tbaa !396
  %10884 = bitcast i16* %10877 to <16 x i16>*
  %10885 = load <16 x i16>, <16 x i16>* %10884, align 2, !tbaa !396
  %10886 = getelementptr inbounds i16, i16* %10877, i64 16
  %10887 = bitcast i16* %10886 to <16 x i16>*
  %10888 = load <16 x i16>, <16 x i16>* %10887, align 2, !tbaa !396
  %10889 = getelementptr inbounds i16, i16* %10877, i64 2
  %10890 = bitcast i16* %10889 to <16 x i16>*
  %10891 = load <16 x i16>, <16 x i16>* %10890, align 2, !tbaa !396
  %10892 = getelementptr inbounds i16, i16* %10877, i64 18
  %10893 = bitcast i16* %10892 to <16 x i16>*
  %10894 = load <16 x i16>, <16 x i16>* %10893, align 2, !tbaa !396
  %10895 = getelementptr inbounds i16, i16* %10877, i64 4
  %10896 = bitcast i16* %10895 to <16 x i16>*
  %10897 = load <16 x i16>, <16 x i16>* %10896, align 2, !tbaa !396
  %10898 = getelementptr inbounds i16, i16* %10877, i64 20
  %10899 = bitcast i16* %10898 to <16 x i16>*
  %10900 = load <16 x i16>, <16 x i16>* %10899, align 2, !tbaa !396
  %10901 = getelementptr inbounds i16, i16* %10877, i64 3
  %10902 = bitcast i16* %10901 to <16 x i16>*
  %10903 = load <16 x i16>, <16 x i16>* %10902, align 2, !tbaa !396
  %10904 = getelementptr inbounds i16, i16* %10877, i64 19
  %10905 = bitcast i16* %10904 to <16 x i16>*
  %10906 = load <16 x i16>, <16 x i16>* %10905, align 2, !tbaa !396
  %10907 = add <16 x i16> %10885, %10880
  %10908 = add <16 x i16> %10907, %10891
  %10909 = add <16 x i16> %10908, %10897
  %10910 = add <16 x i16> %10909, %10903
  %10911 = add <16 x i16> %10888, %10883
  %10912 = add <16 x i16> %10911, %10894
  %10913 = add <16 x i16> %10912, %10900
  %10914 = add <16 x i16> %10913, %10906
  %10915 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10910, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10916 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10914, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10917 = shufflevector <16 x i16> %10915, <16 x i16> %10916, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10918 = lshr <32 x i16> %10917, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10919 = shufflevector <32 x i16> %10918, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10920 = sext i32 %blur_x.s0.x.v1.base.s595 to i64
  %10921 = add nsw i64 %10920, %10745
  %10922 = getelementptr inbounds i16, i16* %blur_x, i64 %10921
  %10923 = bitcast i16* %10922 to <16 x i16>*
  store <16 x i16> %10919, <16 x i16>* %10923, align 2, !tbaa !399
  %10924 = shufflevector <32 x i16> %10918, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10925 = getelementptr inbounds i16, i16* %10922, i64 16
  %10926 = bitcast i16* %10925 to <16 x i16>*
  store <16 x i16> %10924, <16 x i16>* %10926, align 2, !tbaa !399
  br label %"consume blur_x596"

"consume blur_x596":                              ; preds = %"for blur_y.s0.x.x.rebased588", %"produce blur_x594"
  %10927 = sext i32 %b265 to i64
  %10928 = add nsw i64 %10748, %10927
  %10929 = getelementptr inbounds i16, i16* %blur_x, i64 %10928
  %10930 = bitcast i16* %10929 to <16 x i16>*
  %10931 = load <16 x i16>, <16 x i16>* %10930, align 2, !tbaa !399
  %10932 = getelementptr inbounds i16, i16* %10929, i64 16
  %10933 = bitcast i16* %10932 to <16 x i16>*
  %10934 = load <16 x i16>, <16 x i16>* %10933, align 2, !tbaa !399
  %10935 = add nsw i64 %10751, %10927
  %10936 = getelementptr inbounds i16, i16* %blur_x, i64 %10935
  %10937 = bitcast i16* %10936 to <16 x i16>*
  %10938 = load <16 x i16>, <16 x i16>* %10937, align 2, !tbaa !399
  %10939 = getelementptr inbounds i16, i16* %10936, i64 16
  %10940 = bitcast i16* %10939 to <16 x i16>*
  %10941 = load <16 x i16>, <16 x i16>* %10940, align 2, !tbaa !399
  %10942 = add nsw i64 %10754, %10927
  %10943 = getelementptr inbounds i16, i16* %blur_x, i64 %10942
  %10944 = bitcast i16* %10943 to <16 x i16>*
  %10945 = load <16 x i16>, <16 x i16>* %10944, align 2, !tbaa !399
  %10946 = getelementptr inbounds i16, i16* %10943, i64 16
  %10947 = bitcast i16* %10946 to <16 x i16>*
  %10948 = load <16 x i16>, <16 x i16>* %10947, align 2, !tbaa !399
  %10949 = add nsw i64 %10757, %10927
  %10950 = getelementptr inbounds i16, i16* %blur_x, i64 %10949
  %10951 = bitcast i16* %10950 to <16 x i16>*
  %10952 = load <16 x i16>, <16 x i16>* %10951, align 2, !tbaa !399
  %10953 = getelementptr inbounds i16, i16* %10950, i64 16
  %10954 = bitcast i16* %10953 to <16 x i16>*
  %10955 = load <16 x i16>, <16 x i16>* %10954, align 2, !tbaa !399
  %10956 = add nsw i64 %10760, %10927
  %10957 = getelementptr inbounds i16, i16* %blur_x, i64 %10956
  %10958 = bitcast i16* %10957 to <16 x i16>*
  %10959 = load <16 x i16>, <16 x i16>* %10958, align 2, !tbaa !399
  %10960 = getelementptr inbounds i16, i16* %10957, i64 16
  %10961 = bitcast i16* %10960 to <16 x i16>*
  %10962 = load <16 x i16>, <16 x i16>* %10961, align 2, !tbaa !399
  %10963 = add <16 x i16> %10938, %10931
  %10964 = add <16 x i16> %10963, %10945
  %10965 = add <16 x i16> %10964, %10952
  %10966 = add <16 x i16> %10965, %10959
  %10967 = add <16 x i16> %10941, %10934
  %10968 = add <16 x i16> %10967, %10948
  %10969 = add <16 x i16> %10968, %10955
  %10970 = add <16 x i16> %10969, %10962
  %10971 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10966, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10972 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10970, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %10973 = shufflevector <16 x i16> %10971, <16 x i16> %10972, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10974 = lshr <32 x i16> %10973, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %10975 = shufflevector <32 x i16> %10974, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10976 = add nsw i64 %10764, %10927
  %10977 = getelementptr inbounds i16, i16* %66, i64 %10976
  %10978 = bitcast i16* %10977 to <16 x i16>*
  store <16 x i16> %10975, <16 x i16>* %10978, align 2, !tbaa !401
  %10979 = shufflevector <32 x i16> %10974, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10980 = getelementptr inbounds i16, i16* %10977, i64 16
  %10981 = bitcast i16* %10980 to <16 x i16>*
  store <16 x i16> %10979, <16 x i16>* %10981, align 2, !tbaa !401
  %10982 = add nuw nsw i32 %blur_y.s0.x.x.rebased590, 1
  %.not2645 = icmp eq i32 %10982, %t1683
  br i1 %.not2645, label %"end for blur_y.s0.x.x.rebased589", label %"for blur_y.s0.x.x.rebased588"

after_bb597:                                      ; preds = %"end for blur_y.s0.x.x.rebased589", %"produce blur_x600"
  br i1 %100, label %"for blur_y.s0.x.x.rebased602.preheader", label %"end for blur_y.s0.x.x.rebased603", !prof !386

"for blur_y.s0.x.x.rebased602.preheader":         ; preds = %after_bb597
  %10983 = sext i32 %t1700 to i64
  %10984 = zext i32 %.pre-phi to i64
  %10985 = mul nsw i64 %10984, %112
  %10986 = sub nsw i64 %10985, %96
  %10987 = zext i32 %.pre-phi3408 to i64
  %10988 = mul nsw i64 %10987, %112
  %10989 = sub nsw i64 %10988, %96
  %10990 = zext i32 %.pre-phi3378 to i64
  %10991 = mul nsw i64 %10990, %112
  %10992 = sub nsw i64 %10991, %96
  %10993 = zext i32 %.pre-phi3386 to i64
  %10994 = mul nsw i64 %10993, %112
  %10995 = sub nsw i64 %10994, %96
  %10996 = zext i32 %.pre-phi3382 to i64
  %10997 = mul nsw i64 %10996, %112
  %10998 = sub nsw i64 %10997, %96
  %10999 = sext i32 %a26 to i64
  %11000 = add nsw i64 %10999, 23
  %11001 = mul nsw i64 %11000, %113
  %11002 = add nsw i64 %11001, %116
  br label %"for blur_y.s0.x.x.rebased602"

"produce blur_x600":                              ; preds = %"end for blur_y.s0.x.x.rebased589"
  %11003 = getelementptr inbounds i16, i16* %read_input, i64 %161
  %11004 = getelementptr inbounds i16, i16* %11003, i64 -31
  %11005 = bitcast i16* %11004 to <16 x i16>*
  %11006 = load <16 x i16>, <16 x i16>* %11005, align 2, !tbaa !396
  %11007 = getelementptr inbounds i16, i16* %11003, i64 -15
  %11008 = bitcast i16* %11007 to <16 x i16>*
  %11009 = load <16 x i16>, <16 x i16>* %11008, align 2, !tbaa !396
  %11010 = getelementptr inbounds i16, i16* %11003, i64 -32
  %11011 = bitcast i16* %11010 to <16 x i16>*
  %11012 = load <16 x i16>, <16 x i16>* %11011, align 2, !tbaa !396
  %11013 = getelementptr inbounds i16, i16* %11003, i64 -16
  %11014 = bitcast i16* %11013 to <16 x i16>*
  %11015 = load <16 x i16>, <16 x i16>* %11014, align 2, !tbaa !396
  %11016 = getelementptr inbounds i16, i16* %11003, i64 -30
  %11017 = bitcast i16* %11016 to <16 x i16>*
  %11018 = load <16 x i16>, <16 x i16>* %11017, align 2, !tbaa !396
  %11019 = getelementptr inbounds i16, i16* %11003, i64 -14
  %11020 = bitcast i16* %11019 to <16 x i16>*
  %11021 = load <16 x i16>, <16 x i16>* %11020, align 2, !tbaa !396
  %11022 = getelementptr inbounds i16, i16* %11003, i64 -28
  %11023 = bitcast i16* %11022 to <16 x i16>*
  %11024 = load <16 x i16>, <16 x i16>* %11023, align 2, !tbaa !396
  %11025 = getelementptr inbounds i16, i16* %11003, i64 -12
  %11026 = bitcast i16* %11025 to <16 x i16>*
  %11027 = load <16 x i16>, <16 x i16>* %11026, align 2, !tbaa !396
  %11028 = getelementptr inbounds i16, i16* %11003, i64 -29
  %11029 = bitcast i16* %11028 to <16 x i16>*
  %11030 = load <16 x i16>, <16 x i16>* %11029, align 2, !tbaa !396
  %11031 = getelementptr inbounds i16, i16* %11003, i64 -13
  %11032 = bitcast i16* %11031 to <16 x i16>*
  %11033 = load <16 x i16>, <16 x i16>* %11032, align 2, !tbaa !396
  %11034 = add <16 x i16> %11012, %11006
  %11035 = add <16 x i16> %11034, %11018
  %11036 = add <16 x i16> %11035, %11024
  %11037 = add <16 x i16> %11036, %11030
  %11038 = add <16 x i16> %11015, %11009
  %11039 = add <16 x i16> %11038, %11021
  %11040 = add <16 x i16> %11039, %11027
  %11041 = add <16 x i16> %11040, %11033
  %11042 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11037, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11043 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11041, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11044 = shufflevector <16 x i16> %11042, <16 x i16> %11043, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11045 = lshr <32 x i16> %11044, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11046 = shufflevector <32 x i16> %11045, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11047 = zext i32 %.pre-phi3386 to i64
  %11048 = mul nsw i64 %97, %11047
  %11049 = add nsw i64 %99, %11048
  %11050 = getelementptr inbounds i16, i16* %blur_x, i64 %11049
  %11051 = getelementptr inbounds i16, i16* %11050, i64 -32
  %11052 = bitcast i16* %11051 to <16 x i16>*
  store <16 x i16> %11046, <16 x i16>* %11052, align 2, !tbaa !399
  %11053 = shufflevector <32 x i16> %11045, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11054 = getelementptr inbounds i16, i16* %11050, i64 -16
  %11055 = bitcast i16* %11054 to <16 x i16>*
  store <16 x i16> %11053, <16 x i16>* %11055, align 2, !tbaa !399
  %11056 = zext i32 %.pre-phi to i64
  %11057 = mul nsw i64 %11056, %112
  %11058 = add nsw i64 %11057, %94
  %11059 = getelementptr inbounds i16, i16* %blur_x, i64 %11058
  %11060 = getelementptr inbounds i16, i16* %11059, i64 -32
  %11061 = bitcast i16* %11060 to <16 x i16>*
  %11062 = load <16 x i16>, <16 x i16>* %11061, align 2, !tbaa !399
  %11063 = getelementptr inbounds i16, i16* %11059, i64 -16
  %11064 = bitcast i16* %11063 to <16 x i16>*
  %11065 = load <16 x i16>, <16 x i16>* %11064, align 2, !tbaa !399
  %11066 = zext i32 %.pre-phi3408 to i64
  %11067 = mul nsw i64 %11066, %112
  %11068 = add nsw i64 %11067, %94
  %11069 = getelementptr inbounds i16, i16* %blur_x, i64 %11068
  %11070 = getelementptr inbounds i16, i16* %11069, i64 -32
  %11071 = bitcast i16* %11070 to <16 x i16>*
  %11072 = load <16 x i16>, <16 x i16>* %11071, align 2, !tbaa !399
  %11073 = getelementptr inbounds i16, i16* %11069, i64 -16
  %11074 = bitcast i16* %11073 to <16 x i16>*
  %11075 = load <16 x i16>, <16 x i16>* %11074, align 2, !tbaa !399
  %11076 = zext i32 %.pre-phi3378 to i64
  %11077 = mul nsw i64 %11076, %112
  %11078 = add nsw i64 %11077, %94
  %11079 = getelementptr inbounds i16, i16* %blur_x, i64 %11078
  %11080 = getelementptr inbounds i16, i16* %11079, i64 -32
  %11081 = bitcast i16* %11080 to <16 x i16>*
  %11082 = load <16 x i16>, <16 x i16>* %11081, align 2, !tbaa !399
  %11083 = getelementptr inbounds i16, i16* %11079, i64 -16
  %11084 = bitcast i16* %11083 to <16 x i16>*
  %11085 = load <16 x i16>, <16 x i16>* %11084, align 2, !tbaa !399
  %11086 = mul nsw i64 %11047, %112
  %11087 = add nsw i64 %11086, %94
  %11088 = getelementptr inbounds i16, i16* %blur_x, i64 %11087
  %11089 = getelementptr inbounds i16, i16* %11088, i64 -32
  %11090 = bitcast i16* %11089 to <16 x i16>*
  %11091 = load <16 x i16>, <16 x i16>* %11090, align 2, !tbaa !399
  %11092 = getelementptr inbounds i16, i16* %11088, i64 -16
  %11093 = bitcast i16* %11092 to <16 x i16>*
  %11094 = load <16 x i16>, <16 x i16>* %11093, align 2, !tbaa !399
  %11095 = zext i32 %.pre-phi3382 to i64
  %11096 = mul nsw i64 %11095, %112
  %11097 = add nsw i64 %11096, %94
  %11098 = getelementptr inbounds i16, i16* %blur_x, i64 %11097
  %11099 = getelementptr inbounds i16, i16* %11098, i64 -32
  %11100 = bitcast i16* %11099 to <16 x i16>*
  %11101 = load <16 x i16>, <16 x i16>* %11100, align 2, !tbaa !399
  %11102 = getelementptr inbounds i16, i16* %11098, i64 -16
  %11103 = bitcast i16* %11102 to <16 x i16>*
  %11104 = load <16 x i16>, <16 x i16>* %11103, align 2, !tbaa !399
  %11105 = add <16 x i16> %11072, %11062
  %11106 = add <16 x i16> %11105, %11082
  %11107 = add <16 x i16> %11106, %11091
  %11108 = add <16 x i16> %11107, %11101
  %11109 = add <16 x i16> %11075, %11065
  %11110 = add <16 x i16> %11109, %11085
  %11111 = add <16 x i16> %11110, %11094
  %11112 = add <16 x i16> %11111, %11104
  %11113 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11108, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11114 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11112, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11115 = shufflevector <16 x i16> %11113, <16 x i16> %11114, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11116 = lshr <32 x i16> %11115, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11117 = shufflevector <32 x i16> %11116, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11118 = sext i32 %a26 to i64
  %11119 = add nsw i64 %11118, 23
  %11120 = mul nsw i64 %11119, %113
  %11121 = add nsw i64 %115, %11120
  %11122 = getelementptr inbounds i16, i16* %66, i64 %11121
  %11123 = getelementptr inbounds i16, i16* %11122, i64 -32
  %11124 = bitcast i16* %11123 to <16 x i16>*
  store <16 x i16> %11117, <16 x i16>* %11124, align 2, !tbaa !401
  %11125 = shufflevector <32 x i16> %11116, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11126 = getelementptr inbounds i16, i16* %11122, i64 -16
  %11127 = bitcast i16* %11126 to <16 x i16>*
  store <16 x i16> %11125, <16 x i16>* %11127, align 2, !tbaa !401
  br label %after_bb597

"for blur_y.s0.x.x.rebased602":                   ; preds = %"for blur_y.s0.x.x.rebased602.preheader", %"consume blur_x609"
  %indvars.iv3224 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased602.preheader" ], [ %indvars.iv.next3225, %"consume blur_x609" ]
  %11128 = add nsw i64 %indvars.iv3224, %101
  %11129 = icmp slt i64 %11128, 1
  %11130 = trunc i64 %11128 to i32
  %11131 = shl nsw i32 %11130, 5
  %11132 = icmp sgt i32 %4, %11131
  %11133 = or i1 %11129, %11132
  br i1 %11133, label %"produce blur_x608", label %"for blur_y.s0.x.x.rebased602.consume blur_x609_crit_edge"

"for blur_y.s0.x.x.rebased602.consume blur_x609_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased602"
  %.pre3449 = shl nsw i64 %11128, 5
  br label %"consume blur_x609"

"end for blur_y.s0.x.x.rebased603":               ; preds = %"consume blur_x609", %after_bb597
  br i1 %102, label %"for blur_y.s0.x.x.rebased610.preheader", label %"end for blur_y.s0.x.x.rebased611", !prof !386

"for blur_y.s0.x.x.rebased610.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased603"
  %11134 = sext i32 %t1700 to i64
  %11135 = zext i32 %.pre-phi to i64
  %11136 = mul nsw i64 %11135, %112
  %11137 = sub nsw i64 %11136, %96
  %11138 = zext i32 %.pre-phi3408 to i64
  %11139 = mul nsw i64 %11138, %112
  %11140 = sub nsw i64 %11139, %96
  %11141 = zext i32 %.pre-phi3378 to i64
  %11142 = mul nsw i64 %11141, %112
  %11143 = sub nsw i64 %11142, %96
  %11144 = zext i32 %.pre-phi3386 to i64
  %11145 = mul nsw i64 %11144, %112
  %11146 = sub nsw i64 %11145, %96
  %11147 = zext i32 %.pre-phi3382 to i64
  %11148 = mul nsw i64 %11147, %112
  %11149 = sub nsw i64 %11148, %96
  %11150 = sext i32 %a26 to i64
  %11151 = add nsw i64 %11150, 23
  %11152 = mul nsw i64 %11151, %113
  %11153 = add nsw i64 %11152, %116
  br label %"for blur_y.s0.x.x.rebased610"

"produce blur_x608":                              ; preds = %"for blur_y.s0.x.x.rebased602"
  %t1080 = add nsw i32 %11131, %t2073
  %11154 = sext i32 %t1080 to i64
  %11155 = getelementptr inbounds i16, i16* %read_input, i64 %11154
  %11156 = getelementptr inbounds i16, i16* %11155, i64 1
  %11157 = bitcast i16* %11156 to <16 x i16>*
  %11158 = load <16 x i16>, <16 x i16>* %11157, align 2, !tbaa !396
  %11159 = getelementptr inbounds i16, i16* %11155, i64 17
  %11160 = bitcast i16* %11159 to <16 x i16>*
  %11161 = load <16 x i16>, <16 x i16>* %11160, align 2, !tbaa !396
  %11162 = bitcast i16* %11155 to <16 x i16>*
  %11163 = load <16 x i16>, <16 x i16>* %11162, align 2, !tbaa !396
  %11164 = getelementptr inbounds i16, i16* %11155, i64 16
  %11165 = bitcast i16* %11164 to <16 x i16>*
  %11166 = load <16 x i16>, <16 x i16>* %11165, align 2, !tbaa !396
  %11167 = getelementptr inbounds i16, i16* %11155, i64 2
  %11168 = bitcast i16* %11167 to <16 x i16>*
  %11169 = load <16 x i16>, <16 x i16>* %11168, align 2, !tbaa !396
  %11170 = getelementptr inbounds i16, i16* %11155, i64 18
  %11171 = bitcast i16* %11170 to <16 x i16>*
  %11172 = load <16 x i16>, <16 x i16>* %11171, align 2, !tbaa !396
  %11173 = getelementptr inbounds i16, i16* %11155, i64 4
  %11174 = bitcast i16* %11173 to <16 x i16>*
  %11175 = load <16 x i16>, <16 x i16>* %11174, align 2, !tbaa !396
  %11176 = getelementptr inbounds i16, i16* %11155, i64 20
  %11177 = bitcast i16* %11176 to <16 x i16>*
  %11178 = load <16 x i16>, <16 x i16>* %11177, align 2, !tbaa !396
  %11179 = getelementptr inbounds i16, i16* %11155, i64 3
  %11180 = bitcast i16* %11179 to <16 x i16>*
  %11181 = load <16 x i16>, <16 x i16>* %11180, align 2, !tbaa !396
  %11182 = getelementptr inbounds i16, i16* %11155, i64 19
  %11183 = bitcast i16* %11182 to <16 x i16>*
  %11184 = load <16 x i16>, <16 x i16>* %11183, align 2, !tbaa !396
  %11185 = add <16 x i16> %11163, %11158
  %11186 = add <16 x i16> %11185, %11169
  %11187 = add <16 x i16> %11186, %11175
  %11188 = add <16 x i16> %11187, %11181
  %11189 = add <16 x i16> %11166, %11161
  %11190 = add <16 x i16> %11189, %11172
  %11191 = add <16 x i16> %11190, %11178
  %11192 = add <16 x i16> %11191, %11184
  %11193 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11188, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11194 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11192, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11195 = shufflevector <16 x i16> %11193, <16 x i16> %11194, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11196 = lshr <32 x i16> %11195, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11197 = shufflevector <32 x i16> %11196, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11198 = shl nsw i64 %11128, 5
  %11199 = add nsw i64 %11198, %10983
  %11200 = getelementptr inbounds i16, i16* %blur_x, i64 %11199
  %11201 = bitcast i16* %11200 to <16 x i16>*
  store <16 x i16> %11197, <16 x i16>* %11201, align 2, !tbaa !399
  %11202 = shufflevector <32 x i16> %11196, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11203 = getelementptr inbounds i16, i16* %11200, i64 16
  %11204 = bitcast i16* %11203 to <16 x i16>*
  store <16 x i16> %11202, <16 x i16>* %11204, align 2, !tbaa !399
  br label %"consume blur_x609"

"consume blur_x609":                              ; preds = %"for blur_y.s0.x.x.rebased602.consume blur_x609_crit_edge", %"produce blur_x608"
  %.pre-phi3450 = phi i64 [ %.pre3449, %"for blur_y.s0.x.x.rebased602.consume blur_x609_crit_edge" ], [ %11198, %"produce blur_x608" ]
  %11205 = add nsw i64 %10986, %.pre-phi3450
  %11206 = getelementptr inbounds i16, i16* %blur_x, i64 %11205
  %11207 = bitcast i16* %11206 to <16 x i16>*
  %11208 = load <16 x i16>, <16 x i16>* %11207, align 2, !tbaa !399
  %11209 = getelementptr inbounds i16, i16* %11206, i64 16
  %11210 = bitcast i16* %11209 to <16 x i16>*
  %11211 = load <16 x i16>, <16 x i16>* %11210, align 2, !tbaa !399
  %11212 = add nsw i64 %10989, %.pre-phi3450
  %11213 = getelementptr inbounds i16, i16* %blur_x, i64 %11212
  %11214 = bitcast i16* %11213 to <16 x i16>*
  %11215 = load <16 x i16>, <16 x i16>* %11214, align 2, !tbaa !399
  %11216 = getelementptr inbounds i16, i16* %11213, i64 16
  %11217 = bitcast i16* %11216 to <16 x i16>*
  %11218 = load <16 x i16>, <16 x i16>* %11217, align 2, !tbaa !399
  %11219 = add nsw i64 %10992, %.pre-phi3450
  %11220 = getelementptr inbounds i16, i16* %blur_x, i64 %11219
  %11221 = bitcast i16* %11220 to <16 x i16>*
  %11222 = load <16 x i16>, <16 x i16>* %11221, align 2, !tbaa !399
  %11223 = getelementptr inbounds i16, i16* %11220, i64 16
  %11224 = bitcast i16* %11223 to <16 x i16>*
  %11225 = load <16 x i16>, <16 x i16>* %11224, align 2, !tbaa !399
  %11226 = add nsw i64 %10995, %.pre-phi3450
  %11227 = getelementptr inbounds i16, i16* %blur_x, i64 %11226
  %11228 = bitcast i16* %11227 to <16 x i16>*
  %11229 = load <16 x i16>, <16 x i16>* %11228, align 2, !tbaa !399
  %11230 = getelementptr inbounds i16, i16* %11227, i64 16
  %11231 = bitcast i16* %11230 to <16 x i16>*
  %11232 = load <16 x i16>, <16 x i16>* %11231, align 2, !tbaa !399
  %11233 = add nsw i64 %10998, %.pre-phi3450
  %11234 = getelementptr inbounds i16, i16* %blur_x, i64 %11233
  %11235 = bitcast i16* %11234 to <16 x i16>*
  %11236 = load <16 x i16>, <16 x i16>* %11235, align 2, !tbaa !399
  %11237 = getelementptr inbounds i16, i16* %11234, i64 16
  %11238 = bitcast i16* %11237 to <16 x i16>*
  %11239 = load <16 x i16>, <16 x i16>* %11238, align 2, !tbaa !399
  %11240 = add <16 x i16> %11215, %11208
  %11241 = add <16 x i16> %11240, %11222
  %11242 = add <16 x i16> %11241, %11229
  %11243 = add <16 x i16> %11242, %11236
  %11244 = add <16 x i16> %11218, %11211
  %11245 = add <16 x i16> %11244, %11225
  %11246 = add <16 x i16> %11245, %11232
  %11247 = add <16 x i16> %11246, %11239
  %11248 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11243, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11249 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11247, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11250 = shufflevector <16 x i16> %11248, <16 x i16> %11249, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11251 = lshr <32 x i16> %11250, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11252 = shufflevector <32 x i16> %11251, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11253 = add nsw i64 %11002, %.pre-phi3450
  %11254 = getelementptr inbounds i16, i16* %66, i64 %11253
  %11255 = bitcast i16* %11254 to <16 x i16>*
  store <16 x i16> %11252, <16 x i16>* %11255, align 2, !tbaa !401
  %11256 = shufflevector <32 x i16> %11251, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11257 = getelementptr inbounds i16, i16* %11254, i64 16
  %11258 = bitcast i16* %11257 to <16 x i16>*
  store <16 x i16> %11256, <16 x i16>* %11258, align 2, !tbaa !401
  %indvars.iv.next3225 = add nuw nsw i64 %indvars.iv3224, 1
  %.not2644 = icmp eq i64 %indvars.iv.next3225, %184
  br i1 %.not2644, label %"end for blur_y.s0.x.x.rebased603", label %"for blur_y.s0.x.x.rebased602"

"for blur_y.s0.x.x.rebased610":                   ; preds = %"for blur_y.s0.x.x.rebased610.preheader", %"consume blur_x618"
  %blur_y.s0.x.x.rebased612 = phi i32 [ %11371, %"consume blur_x618" ], [ 0, %"for blur_y.s0.x.x.rebased610.preheader" ]
  %11259 = add nsw i32 %blur_y.s0.x.x.rebased612, %t1626
  %a266 = shl nsw i32 %11259, 5
  %11260 = icmp sgt i32 %a14, %a266
  %b272 = select i1 %11260, i32 %a266, i32 %a14
  %11261 = icmp slt i32 %11259, 1
  %11262 = icmp sgt i32 %4, %a266
  %11263 = or i1 %11261, %11262
  br i1 %11263, label %"produce blur_x616", label %"consume blur_x618"

"end for blur_y.s0.x.x.rebased611":               ; preds = %"consume blur_x618", %"end for blur_y.s0.x.x.rebased603"
  br i1 %34, label %"produce blur_x622", label %after_bb619

"produce blur_x616":                              ; preds = %"for blur_y.s0.x.x.rebased610"
  %11264 = icmp slt i32 %b272, %4
  %blur_x.s0.x.v1.base.s617 = select i1 %11264, i32 %b272, i32 %4
  %t1085 = add nsw i32 %blur_x.s0.x.v1.base.s617, %t2073
  %11265 = sext i32 %t1085 to i64
  %11266 = getelementptr inbounds i16, i16* %read_input, i64 %11265
  %11267 = getelementptr inbounds i16, i16* %11266, i64 1
  %11268 = bitcast i16* %11267 to <16 x i16>*
  %11269 = load <16 x i16>, <16 x i16>* %11268, align 2, !tbaa !396
  %11270 = getelementptr inbounds i16, i16* %11266, i64 17
  %11271 = bitcast i16* %11270 to <16 x i16>*
  %11272 = load <16 x i16>, <16 x i16>* %11271, align 2, !tbaa !396
  %11273 = bitcast i16* %11266 to <16 x i16>*
  %11274 = load <16 x i16>, <16 x i16>* %11273, align 2, !tbaa !396
  %11275 = getelementptr inbounds i16, i16* %11266, i64 16
  %11276 = bitcast i16* %11275 to <16 x i16>*
  %11277 = load <16 x i16>, <16 x i16>* %11276, align 2, !tbaa !396
  %11278 = getelementptr inbounds i16, i16* %11266, i64 2
  %11279 = bitcast i16* %11278 to <16 x i16>*
  %11280 = load <16 x i16>, <16 x i16>* %11279, align 2, !tbaa !396
  %11281 = getelementptr inbounds i16, i16* %11266, i64 18
  %11282 = bitcast i16* %11281 to <16 x i16>*
  %11283 = load <16 x i16>, <16 x i16>* %11282, align 2, !tbaa !396
  %11284 = getelementptr inbounds i16, i16* %11266, i64 4
  %11285 = bitcast i16* %11284 to <16 x i16>*
  %11286 = load <16 x i16>, <16 x i16>* %11285, align 2, !tbaa !396
  %11287 = getelementptr inbounds i16, i16* %11266, i64 20
  %11288 = bitcast i16* %11287 to <16 x i16>*
  %11289 = load <16 x i16>, <16 x i16>* %11288, align 2, !tbaa !396
  %11290 = getelementptr inbounds i16, i16* %11266, i64 3
  %11291 = bitcast i16* %11290 to <16 x i16>*
  %11292 = load <16 x i16>, <16 x i16>* %11291, align 2, !tbaa !396
  %11293 = getelementptr inbounds i16, i16* %11266, i64 19
  %11294 = bitcast i16* %11293 to <16 x i16>*
  %11295 = load <16 x i16>, <16 x i16>* %11294, align 2, !tbaa !396
  %11296 = add <16 x i16> %11274, %11269
  %11297 = add <16 x i16> %11296, %11280
  %11298 = add <16 x i16> %11297, %11286
  %11299 = add <16 x i16> %11298, %11292
  %11300 = add <16 x i16> %11277, %11272
  %11301 = add <16 x i16> %11300, %11283
  %11302 = add <16 x i16> %11301, %11289
  %11303 = add <16 x i16> %11302, %11295
  %11304 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11299, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11305 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11303, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11306 = shufflevector <16 x i16> %11304, <16 x i16> %11305, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11307 = lshr <32 x i16> %11306, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11308 = shufflevector <32 x i16> %11307, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11309 = sext i32 %blur_x.s0.x.v1.base.s617 to i64
  %11310 = add nsw i64 %11309, %11134
  %11311 = getelementptr inbounds i16, i16* %blur_x, i64 %11310
  %11312 = bitcast i16* %11311 to <16 x i16>*
  store <16 x i16> %11308, <16 x i16>* %11312, align 2, !tbaa !399
  %11313 = shufflevector <32 x i16> %11307, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11314 = getelementptr inbounds i16, i16* %11311, i64 16
  %11315 = bitcast i16* %11314 to <16 x i16>*
  store <16 x i16> %11313, <16 x i16>* %11315, align 2, !tbaa !399
  br label %"consume blur_x618"

"consume blur_x618":                              ; preds = %"for blur_y.s0.x.x.rebased610", %"produce blur_x616"
  %11316 = sext i32 %b272 to i64
  %11317 = add nsw i64 %11137, %11316
  %11318 = getelementptr inbounds i16, i16* %blur_x, i64 %11317
  %11319 = bitcast i16* %11318 to <16 x i16>*
  %11320 = load <16 x i16>, <16 x i16>* %11319, align 2, !tbaa !399
  %11321 = getelementptr inbounds i16, i16* %11318, i64 16
  %11322 = bitcast i16* %11321 to <16 x i16>*
  %11323 = load <16 x i16>, <16 x i16>* %11322, align 2, !tbaa !399
  %11324 = add nsw i64 %11140, %11316
  %11325 = getelementptr inbounds i16, i16* %blur_x, i64 %11324
  %11326 = bitcast i16* %11325 to <16 x i16>*
  %11327 = load <16 x i16>, <16 x i16>* %11326, align 2, !tbaa !399
  %11328 = getelementptr inbounds i16, i16* %11325, i64 16
  %11329 = bitcast i16* %11328 to <16 x i16>*
  %11330 = load <16 x i16>, <16 x i16>* %11329, align 2, !tbaa !399
  %11331 = add nsw i64 %11143, %11316
  %11332 = getelementptr inbounds i16, i16* %blur_x, i64 %11331
  %11333 = bitcast i16* %11332 to <16 x i16>*
  %11334 = load <16 x i16>, <16 x i16>* %11333, align 2, !tbaa !399
  %11335 = getelementptr inbounds i16, i16* %11332, i64 16
  %11336 = bitcast i16* %11335 to <16 x i16>*
  %11337 = load <16 x i16>, <16 x i16>* %11336, align 2, !tbaa !399
  %11338 = add nsw i64 %11146, %11316
  %11339 = getelementptr inbounds i16, i16* %blur_x, i64 %11338
  %11340 = bitcast i16* %11339 to <16 x i16>*
  %11341 = load <16 x i16>, <16 x i16>* %11340, align 2, !tbaa !399
  %11342 = getelementptr inbounds i16, i16* %11339, i64 16
  %11343 = bitcast i16* %11342 to <16 x i16>*
  %11344 = load <16 x i16>, <16 x i16>* %11343, align 2, !tbaa !399
  %11345 = add nsw i64 %11149, %11316
  %11346 = getelementptr inbounds i16, i16* %blur_x, i64 %11345
  %11347 = bitcast i16* %11346 to <16 x i16>*
  %11348 = load <16 x i16>, <16 x i16>* %11347, align 2, !tbaa !399
  %11349 = getelementptr inbounds i16, i16* %11346, i64 16
  %11350 = bitcast i16* %11349 to <16 x i16>*
  %11351 = load <16 x i16>, <16 x i16>* %11350, align 2, !tbaa !399
  %11352 = add <16 x i16> %11327, %11320
  %11353 = add <16 x i16> %11352, %11334
  %11354 = add <16 x i16> %11353, %11341
  %11355 = add <16 x i16> %11354, %11348
  %11356 = add <16 x i16> %11330, %11323
  %11357 = add <16 x i16> %11356, %11337
  %11358 = add <16 x i16> %11357, %11344
  %11359 = add <16 x i16> %11358, %11351
  %11360 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11355, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11361 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11359, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11362 = shufflevector <16 x i16> %11360, <16 x i16> %11361, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11363 = lshr <32 x i16> %11362, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11364 = shufflevector <32 x i16> %11363, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11365 = add nsw i64 %11153, %11316
  %11366 = getelementptr inbounds i16, i16* %66, i64 %11365
  %11367 = bitcast i16* %11366 to <16 x i16>*
  store <16 x i16> %11364, <16 x i16>* %11367, align 2, !tbaa !401
  %11368 = shufflevector <32 x i16> %11363, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11369 = getelementptr inbounds i16, i16* %11366, i64 16
  %11370 = bitcast i16* %11369 to <16 x i16>*
  store <16 x i16> %11368, <16 x i16>* %11370, align 2, !tbaa !401
  %11371 = add nuw nsw i32 %blur_y.s0.x.x.rebased612, 1
  %.not2643 = icmp eq i32 %11371, %t1683
  br i1 %.not2643, label %"end for blur_y.s0.x.x.rebased611", label %"for blur_y.s0.x.x.rebased610"

after_bb619:                                      ; preds = %"end for blur_y.s0.x.x.rebased611", %"produce blur_x622"
  br i1 %100, label %"for blur_y.s0.x.x.rebased624.preheader", label %"end for blur_y.s0.x.x.rebased625", !prof !386

"for blur_y.s0.x.x.rebased624.preheader":         ; preds = %after_bb619
  %11372 = sext i32 %t1706 to i64
  %11373 = zext i32 %.pre-phi3378 to i64
  %11374 = mul nsw i64 %11373, %112
  %11375 = sub nsw i64 %11374, %96
  %11376 = zext i32 %.pre-phi to i64
  %11377 = mul nsw i64 %11376, %112
  %11378 = sub nsw i64 %11377, %96
  %11379 = zext i32 %.pre-phi3382 to i64
  %11380 = mul nsw i64 %11379, %112
  %11381 = sub nsw i64 %11380, %96
  %11382 = zext i32 %.pre-phi3390 to i64
  %11383 = mul nsw i64 %11382, %112
  %11384 = sub nsw i64 %11383, %96
  %11385 = zext i32 %.pre-phi3386 to i64
  %11386 = mul nsw i64 %11385, %112
  %11387 = sub nsw i64 %11386, %96
  %11388 = sext i32 %a26 to i64
  %11389 = add nsw i64 %11388, 24
  %11390 = mul nsw i64 %11389, %113
  %11391 = add nsw i64 %11390, %116
  br label %"for blur_y.s0.x.x.rebased624"

"produce blur_x622":                              ; preds = %"end for blur_y.s0.x.x.rebased611"
  %11392 = getelementptr inbounds i16, i16* %read_input, i64 %163
  %11393 = getelementptr inbounds i16, i16* %11392, i64 -31
  %11394 = bitcast i16* %11393 to <16 x i16>*
  %11395 = load <16 x i16>, <16 x i16>* %11394, align 2, !tbaa !396
  %11396 = getelementptr inbounds i16, i16* %11392, i64 -15
  %11397 = bitcast i16* %11396 to <16 x i16>*
  %11398 = load <16 x i16>, <16 x i16>* %11397, align 2, !tbaa !396
  %11399 = getelementptr inbounds i16, i16* %11392, i64 -32
  %11400 = bitcast i16* %11399 to <16 x i16>*
  %11401 = load <16 x i16>, <16 x i16>* %11400, align 2, !tbaa !396
  %11402 = getelementptr inbounds i16, i16* %11392, i64 -16
  %11403 = bitcast i16* %11402 to <16 x i16>*
  %11404 = load <16 x i16>, <16 x i16>* %11403, align 2, !tbaa !396
  %11405 = getelementptr inbounds i16, i16* %11392, i64 -30
  %11406 = bitcast i16* %11405 to <16 x i16>*
  %11407 = load <16 x i16>, <16 x i16>* %11406, align 2, !tbaa !396
  %11408 = getelementptr inbounds i16, i16* %11392, i64 -14
  %11409 = bitcast i16* %11408 to <16 x i16>*
  %11410 = load <16 x i16>, <16 x i16>* %11409, align 2, !tbaa !396
  %11411 = getelementptr inbounds i16, i16* %11392, i64 -28
  %11412 = bitcast i16* %11411 to <16 x i16>*
  %11413 = load <16 x i16>, <16 x i16>* %11412, align 2, !tbaa !396
  %11414 = getelementptr inbounds i16, i16* %11392, i64 -12
  %11415 = bitcast i16* %11414 to <16 x i16>*
  %11416 = load <16 x i16>, <16 x i16>* %11415, align 2, !tbaa !396
  %11417 = getelementptr inbounds i16, i16* %11392, i64 -29
  %11418 = bitcast i16* %11417 to <16 x i16>*
  %11419 = load <16 x i16>, <16 x i16>* %11418, align 2, !tbaa !396
  %11420 = getelementptr inbounds i16, i16* %11392, i64 -13
  %11421 = bitcast i16* %11420 to <16 x i16>*
  %11422 = load <16 x i16>, <16 x i16>* %11421, align 2, !tbaa !396
  %11423 = add <16 x i16> %11401, %11395
  %11424 = add <16 x i16> %11423, %11407
  %11425 = add <16 x i16> %11424, %11413
  %11426 = add <16 x i16> %11425, %11419
  %11427 = add <16 x i16> %11404, %11398
  %11428 = add <16 x i16> %11427, %11410
  %11429 = add <16 x i16> %11428, %11416
  %11430 = add <16 x i16> %11429, %11422
  %11431 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11426, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11432 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11430, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11433 = shufflevector <16 x i16> %11431, <16 x i16> %11432, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11434 = lshr <32 x i16> %11433, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11435 = shufflevector <32 x i16> %11434, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11436 = zext i32 %.pre-phi3390 to i64
  %11437 = mul nsw i64 %97, %11436
  %11438 = add nsw i64 %99, %11437
  %11439 = getelementptr inbounds i16, i16* %blur_x, i64 %11438
  %11440 = getelementptr inbounds i16, i16* %11439, i64 -32
  %11441 = bitcast i16* %11440 to <16 x i16>*
  store <16 x i16> %11435, <16 x i16>* %11441, align 2, !tbaa !399
  %11442 = shufflevector <32 x i16> %11434, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11443 = getelementptr inbounds i16, i16* %11439, i64 -16
  %11444 = bitcast i16* %11443 to <16 x i16>*
  store <16 x i16> %11442, <16 x i16>* %11444, align 2, !tbaa !399
  %11445 = zext i32 %.pre-phi3378 to i64
  %11446 = mul nsw i64 %11445, %112
  %11447 = add nsw i64 %11446, %94
  %11448 = getelementptr inbounds i16, i16* %blur_x, i64 %11447
  %11449 = getelementptr inbounds i16, i16* %11448, i64 -32
  %11450 = bitcast i16* %11449 to <16 x i16>*
  %11451 = load <16 x i16>, <16 x i16>* %11450, align 2, !tbaa !399
  %11452 = getelementptr inbounds i16, i16* %11448, i64 -16
  %11453 = bitcast i16* %11452 to <16 x i16>*
  %11454 = load <16 x i16>, <16 x i16>* %11453, align 2, !tbaa !399
  %11455 = zext i32 %.pre-phi to i64
  %11456 = mul nsw i64 %11455, %112
  %11457 = add nsw i64 %11456, %94
  %11458 = getelementptr inbounds i16, i16* %blur_x, i64 %11457
  %11459 = getelementptr inbounds i16, i16* %11458, i64 -32
  %11460 = bitcast i16* %11459 to <16 x i16>*
  %11461 = load <16 x i16>, <16 x i16>* %11460, align 2, !tbaa !399
  %11462 = getelementptr inbounds i16, i16* %11458, i64 -16
  %11463 = bitcast i16* %11462 to <16 x i16>*
  %11464 = load <16 x i16>, <16 x i16>* %11463, align 2, !tbaa !399
  %11465 = zext i32 %.pre-phi3382 to i64
  %11466 = mul nsw i64 %11465, %112
  %11467 = add nsw i64 %11466, %94
  %11468 = getelementptr inbounds i16, i16* %blur_x, i64 %11467
  %11469 = getelementptr inbounds i16, i16* %11468, i64 -32
  %11470 = bitcast i16* %11469 to <16 x i16>*
  %11471 = load <16 x i16>, <16 x i16>* %11470, align 2, !tbaa !399
  %11472 = getelementptr inbounds i16, i16* %11468, i64 -16
  %11473 = bitcast i16* %11472 to <16 x i16>*
  %11474 = load <16 x i16>, <16 x i16>* %11473, align 2, !tbaa !399
  %11475 = mul nsw i64 %11436, %112
  %11476 = add nsw i64 %11475, %94
  %11477 = getelementptr inbounds i16, i16* %blur_x, i64 %11476
  %11478 = getelementptr inbounds i16, i16* %11477, i64 -32
  %11479 = bitcast i16* %11478 to <16 x i16>*
  %11480 = load <16 x i16>, <16 x i16>* %11479, align 2, !tbaa !399
  %11481 = getelementptr inbounds i16, i16* %11477, i64 -16
  %11482 = bitcast i16* %11481 to <16 x i16>*
  %11483 = load <16 x i16>, <16 x i16>* %11482, align 2, !tbaa !399
  %11484 = zext i32 %.pre-phi3386 to i64
  %11485 = mul nsw i64 %11484, %112
  %11486 = add nsw i64 %11485, %94
  %11487 = getelementptr inbounds i16, i16* %blur_x, i64 %11486
  %11488 = getelementptr inbounds i16, i16* %11487, i64 -32
  %11489 = bitcast i16* %11488 to <16 x i16>*
  %11490 = load <16 x i16>, <16 x i16>* %11489, align 2, !tbaa !399
  %11491 = getelementptr inbounds i16, i16* %11487, i64 -16
  %11492 = bitcast i16* %11491 to <16 x i16>*
  %11493 = load <16 x i16>, <16 x i16>* %11492, align 2, !tbaa !399
  %11494 = add <16 x i16> %11461, %11451
  %11495 = add <16 x i16> %11494, %11471
  %11496 = add <16 x i16> %11495, %11480
  %11497 = add <16 x i16> %11496, %11490
  %11498 = add <16 x i16> %11464, %11454
  %11499 = add <16 x i16> %11498, %11474
  %11500 = add <16 x i16> %11499, %11483
  %11501 = add <16 x i16> %11500, %11493
  %11502 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11497, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11503 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11501, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11504 = shufflevector <16 x i16> %11502, <16 x i16> %11503, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11505 = lshr <32 x i16> %11504, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11506 = shufflevector <32 x i16> %11505, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11507 = sext i32 %a26 to i64
  %11508 = add nsw i64 %11507, 24
  %11509 = mul nsw i64 %11508, %113
  %11510 = add nsw i64 %115, %11509
  %11511 = getelementptr inbounds i16, i16* %66, i64 %11510
  %11512 = getelementptr inbounds i16, i16* %11511, i64 -32
  %11513 = bitcast i16* %11512 to <16 x i16>*
  store <16 x i16> %11506, <16 x i16>* %11513, align 2, !tbaa !401
  %11514 = shufflevector <32 x i16> %11505, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11515 = getelementptr inbounds i16, i16* %11511, i64 -16
  %11516 = bitcast i16* %11515 to <16 x i16>*
  store <16 x i16> %11514, <16 x i16>* %11516, align 2, !tbaa !401
  br label %after_bb619

"for blur_y.s0.x.x.rebased624":                   ; preds = %"for blur_y.s0.x.x.rebased624.preheader", %"consume blur_x631"
  %indvars.iv3227 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased624.preheader" ], [ %indvars.iv.next3228, %"consume blur_x631" ]
  %11517 = add nsw i64 %indvars.iv3227, %101
  %11518 = icmp slt i64 %11517, 1
  %11519 = trunc i64 %11517 to i32
  %11520 = shl nsw i32 %11519, 5
  %11521 = icmp sgt i32 %4, %11520
  %11522 = or i1 %11518, %11521
  br i1 %11522, label %"produce blur_x630", label %"for blur_y.s0.x.x.rebased624.consume blur_x631_crit_edge"

"for blur_y.s0.x.x.rebased624.consume blur_x631_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased624"
  %.pre3451 = shl nsw i64 %11517, 5
  br label %"consume blur_x631"

"end for blur_y.s0.x.x.rebased625":               ; preds = %"consume blur_x631", %after_bb619
  br i1 %102, label %"for blur_y.s0.x.x.rebased632.preheader", label %"end for blur_y.s0.x.x.rebased633", !prof !386

"for blur_y.s0.x.x.rebased632.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased625"
  %11523 = sext i32 %t1706 to i64
  %11524 = zext i32 %.pre-phi3378 to i64
  %11525 = mul nsw i64 %11524, %112
  %11526 = sub nsw i64 %11525, %96
  %11527 = zext i32 %.pre-phi to i64
  %11528 = mul nsw i64 %11527, %112
  %11529 = sub nsw i64 %11528, %96
  %11530 = zext i32 %.pre-phi3382 to i64
  %11531 = mul nsw i64 %11530, %112
  %11532 = sub nsw i64 %11531, %96
  %11533 = zext i32 %.pre-phi3390 to i64
  %11534 = mul nsw i64 %11533, %112
  %11535 = sub nsw i64 %11534, %96
  %11536 = zext i32 %.pre-phi3386 to i64
  %11537 = mul nsw i64 %11536, %112
  %11538 = sub nsw i64 %11537, %96
  %11539 = sext i32 %a26 to i64
  %11540 = add nsw i64 %11539, 24
  %11541 = mul nsw i64 %11540, %113
  %11542 = add nsw i64 %11541, %116
  br label %"for blur_y.s0.x.x.rebased632"

"produce blur_x630":                              ; preds = %"for blur_y.s0.x.x.rebased624"
  %t1096 = add nsw i32 %11520, %t2089
  %11543 = sext i32 %t1096 to i64
  %11544 = getelementptr inbounds i16, i16* %read_input, i64 %11543
  %11545 = getelementptr inbounds i16, i16* %11544, i64 1
  %11546 = bitcast i16* %11545 to <16 x i16>*
  %11547 = load <16 x i16>, <16 x i16>* %11546, align 2, !tbaa !396
  %11548 = getelementptr inbounds i16, i16* %11544, i64 17
  %11549 = bitcast i16* %11548 to <16 x i16>*
  %11550 = load <16 x i16>, <16 x i16>* %11549, align 2, !tbaa !396
  %11551 = bitcast i16* %11544 to <16 x i16>*
  %11552 = load <16 x i16>, <16 x i16>* %11551, align 2, !tbaa !396
  %11553 = getelementptr inbounds i16, i16* %11544, i64 16
  %11554 = bitcast i16* %11553 to <16 x i16>*
  %11555 = load <16 x i16>, <16 x i16>* %11554, align 2, !tbaa !396
  %11556 = getelementptr inbounds i16, i16* %11544, i64 2
  %11557 = bitcast i16* %11556 to <16 x i16>*
  %11558 = load <16 x i16>, <16 x i16>* %11557, align 2, !tbaa !396
  %11559 = getelementptr inbounds i16, i16* %11544, i64 18
  %11560 = bitcast i16* %11559 to <16 x i16>*
  %11561 = load <16 x i16>, <16 x i16>* %11560, align 2, !tbaa !396
  %11562 = getelementptr inbounds i16, i16* %11544, i64 4
  %11563 = bitcast i16* %11562 to <16 x i16>*
  %11564 = load <16 x i16>, <16 x i16>* %11563, align 2, !tbaa !396
  %11565 = getelementptr inbounds i16, i16* %11544, i64 20
  %11566 = bitcast i16* %11565 to <16 x i16>*
  %11567 = load <16 x i16>, <16 x i16>* %11566, align 2, !tbaa !396
  %11568 = getelementptr inbounds i16, i16* %11544, i64 3
  %11569 = bitcast i16* %11568 to <16 x i16>*
  %11570 = load <16 x i16>, <16 x i16>* %11569, align 2, !tbaa !396
  %11571 = getelementptr inbounds i16, i16* %11544, i64 19
  %11572 = bitcast i16* %11571 to <16 x i16>*
  %11573 = load <16 x i16>, <16 x i16>* %11572, align 2, !tbaa !396
  %11574 = add <16 x i16> %11552, %11547
  %11575 = add <16 x i16> %11574, %11558
  %11576 = add <16 x i16> %11575, %11564
  %11577 = add <16 x i16> %11576, %11570
  %11578 = add <16 x i16> %11555, %11550
  %11579 = add <16 x i16> %11578, %11561
  %11580 = add <16 x i16> %11579, %11567
  %11581 = add <16 x i16> %11580, %11573
  %11582 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11577, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11583 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11581, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11584 = shufflevector <16 x i16> %11582, <16 x i16> %11583, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11585 = lshr <32 x i16> %11584, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11586 = shufflevector <32 x i16> %11585, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11587 = shl nsw i64 %11517, 5
  %11588 = add nsw i64 %11587, %11372
  %11589 = getelementptr inbounds i16, i16* %blur_x, i64 %11588
  %11590 = bitcast i16* %11589 to <16 x i16>*
  store <16 x i16> %11586, <16 x i16>* %11590, align 2, !tbaa !399
  %11591 = shufflevector <32 x i16> %11585, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11592 = getelementptr inbounds i16, i16* %11589, i64 16
  %11593 = bitcast i16* %11592 to <16 x i16>*
  store <16 x i16> %11591, <16 x i16>* %11593, align 2, !tbaa !399
  br label %"consume blur_x631"

"consume blur_x631":                              ; preds = %"for blur_y.s0.x.x.rebased624.consume blur_x631_crit_edge", %"produce blur_x630"
  %.pre-phi3452 = phi i64 [ %.pre3451, %"for blur_y.s0.x.x.rebased624.consume blur_x631_crit_edge" ], [ %11587, %"produce blur_x630" ]
  %11594 = add nsw i64 %11375, %.pre-phi3452
  %11595 = getelementptr inbounds i16, i16* %blur_x, i64 %11594
  %11596 = bitcast i16* %11595 to <16 x i16>*
  %11597 = load <16 x i16>, <16 x i16>* %11596, align 2, !tbaa !399
  %11598 = getelementptr inbounds i16, i16* %11595, i64 16
  %11599 = bitcast i16* %11598 to <16 x i16>*
  %11600 = load <16 x i16>, <16 x i16>* %11599, align 2, !tbaa !399
  %11601 = add nsw i64 %11378, %.pre-phi3452
  %11602 = getelementptr inbounds i16, i16* %blur_x, i64 %11601
  %11603 = bitcast i16* %11602 to <16 x i16>*
  %11604 = load <16 x i16>, <16 x i16>* %11603, align 2, !tbaa !399
  %11605 = getelementptr inbounds i16, i16* %11602, i64 16
  %11606 = bitcast i16* %11605 to <16 x i16>*
  %11607 = load <16 x i16>, <16 x i16>* %11606, align 2, !tbaa !399
  %11608 = add nsw i64 %11381, %.pre-phi3452
  %11609 = getelementptr inbounds i16, i16* %blur_x, i64 %11608
  %11610 = bitcast i16* %11609 to <16 x i16>*
  %11611 = load <16 x i16>, <16 x i16>* %11610, align 2, !tbaa !399
  %11612 = getelementptr inbounds i16, i16* %11609, i64 16
  %11613 = bitcast i16* %11612 to <16 x i16>*
  %11614 = load <16 x i16>, <16 x i16>* %11613, align 2, !tbaa !399
  %11615 = add nsw i64 %11384, %.pre-phi3452
  %11616 = getelementptr inbounds i16, i16* %blur_x, i64 %11615
  %11617 = bitcast i16* %11616 to <16 x i16>*
  %11618 = load <16 x i16>, <16 x i16>* %11617, align 2, !tbaa !399
  %11619 = getelementptr inbounds i16, i16* %11616, i64 16
  %11620 = bitcast i16* %11619 to <16 x i16>*
  %11621 = load <16 x i16>, <16 x i16>* %11620, align 2, !tbaa !399
  %11622 = add nsw i64 %11387, %.pre-phi3452
  %11623 = getelementptr inbounds i16, i16* %blur_x, i64 %11622
  %11624 = bitcast i16* %11623 to <16 x i16>*
  %11625 = load <16 x i16>, <16 x i16>* %11624, align 2, !tbaa !399
  %11626 = getelementptr inbounds i16, i16* %11623, i64 16
  %11627 = bitcast i16* %11626 to <16 x i16>*
  %11628 = load <16 x i16>, <16 x i16>* %11627, align 2, !tbaa !399
  %11629 = add <16 x i16> %11604, %11597
  %11630 = add <16 x i16> %11629, %11611
  %11631 = add <16 x i16> %11630, %11618
  %11632 = add <16 x i16> %11631, %11625
  %11633 = add <16 x i16> %11607, %11600
  %11634 = add <16 x i16> %11633, %11614
  %11635 = add <16 x i16> %11634, %11621
  %11636 = add <16 x i16> %11635, %11628
  %11637 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11632, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11638 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11636, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11639 = shufflevector <16 x i16> %11637, <16 x i16> %11638, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11640 = lshr <32 x i16> %11639, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11641 = shufflevector <32 x i16> %11640, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11642 = add nsw i64 %11391, %.pre-phi3452
  %11643 = getelementptr inbounds i16, i16* %66, i64 %11642
  %11644 = bitcast i16* %11643 to <16 x i16>*
  store <16 x i16> %11641, <16 x i16>* %11644, align 2, !tbaa !401
  %11645 = shufflevector <32 x i16> %11640, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11646 = getelementptr inbounds i16, i16* %11643, i64 16
  %11647 = bitcast i16* %11646 to <16 x i16>*
  store <16 x i16> %11645, <16 x i16>* %11647, align 2, !tbaa !401
  %indvars.iv.next3228 = add nuw nsw i64 %indvars.iv3227, 1
  %.not2642 = icmp eq i64 %indvars.iv.next3228, %184
  br i1 %.not2642, label %"end for blur_y.s0.x.x.rebased625", label %"for blur_y.s0.x.x.rebased624"

"for blur_y.s0.x.x.rebased632":                   ; preds = %"for blur_y.s0.x.x.rebased632.preheader", %"consume blur_x640"
  %blur_y.s0.x.x.rebased634 = phi i32 [ %11760, %"consume blur_x640" ], [ 0, %"for blur_y.s0.x.x.rebased632.preheader" ]
  %11648 = add nsw i32 %blur_y.s0.x.x.rebased634, %t1626
  %a273 = shl nsw i32 %11648, 5
  %11649 = icmp sgt i32 %a14, %a273
  %b279 = select i1 %11649, i32 %a273, i32 %a14
  %11650 = icmp slt i32 %11648, 1
  %11651 = icmp sgt i32 %4, %a273
  %11652 = or i1 %11650, %11651
  br i1 %11652, label %"produce blur_x638", label %"consume blur_x640"

"end for blur_y.s0.x.x.rebased633":               ; preds = %"consume blur_x640", %"end for blur_y.s0.x.x.rebased625"
  br i1 %34, label %"produce blur_x644", label %after_bb641

"produce blur_x638":                              ; preds = %"for blur_y.s0.x.x.rebased632"
  %11653 = icmp slt i32 %b279, %4
  %blur_x.s0.x.v1.base.s639 = select i1 %11653, i32 %b279, i32 %4
  %t1101 = add nsw i32 %blur_x.s0.x.v1.base.s639, %t2089
  %11654 = sext i32 %t1101 to i64
  %11655 = getelementptr inbounds i16, i16* %read_input, i64 %11654
  %11656 = getelementptr inbounds i16, i16* %11655, i64 1
  %11657 = bitcast i16* %11656 to <16 x i16>*
  %11658 = load <16 x i16>, <16 x i16>* %11657, align 2, !tbaa !396
  %11659 = getelementptr inbounds i16, i16* %11655, i64 17
  %11660 = bitcast i16* %11659 to <16 x i16>*
  %11661 = load <16 x i16>, <16 x i16>* %11660, align 2, !tbaa !396
  %11662 = bitcast i16* %11655 to <16 x i16>*
  %11663 = load <16 x i16>, <16 x i16>* %11662, align 2, !tbaa !396
  %11664 = getelementptr inbounds i16, i16* %11655, i64 16
  %11665 = bitcast i16* %11664 to <16 x i16>*
  %11666 = load <16 x i16>, <16 x i16>* %11665, align 2, !tbaa !396
  %11667 = getelementptr inbounds i16, i16* %11655, i64 2
  %11668 = bitcast i16* %11667 to <16 x i16>*
  %11669 = load <16 x i16>, <16 x i16>* %11668, align 2, !tbaa !396
  %11670 = getelementptr inbounds i16, i16* %11655, i64 18
  %11671 = bitcast i16* %11670 to <16 x i16>*
  %11672 = load <16 x i16>, <16 x i16>* %11671, align 2, !tbaa !396
  %11673 = getelementptr inbounds i16, i16* %11655, i64 4
  %11674 = bitcast i16* %11673 to <16 x i16>*
  %11675 = load <16 x i16>, <16 x i16>* %11674, align 2, !tbaa !396
  %11676 = getelementptr inbounds i16, i16* %11655, i64 20
  %11677 = bitcast i16* %11676 to <16 x i16>*
  %11678 = load <16 x i16>, <16 x i16>* %11677, align 2, !tbaa !396
  %11679 = getelementptr inbounds i16, i16* %11655, i64 3
  %11680 = bitcast i16* %11679 to <16 x i16>*
  %11681 = load <16 x i16>, <16 x i16>* %11680, align 2, !tbaa !396
  %11682 = getelementptr inbounds i16, i16* %11655, i64 19
  %11683 = bitcast i16* %11682 to <16 x i16>*
  %11684 = load <16 x i16>, <16 x i16>* %11683, align 2, !tbaa !396
  %11685 = add <16 x i16> %11663, %11658
  %11686 = add <16 x i16> %11685, %11669
  %11687 = add <16 x i16> %11686, %11675
  %11688 = add <16 x i16> %11687, %11681
  %11689 = add <16 x i16> %11666, %11661
  %11690 = add <16 x i16> %11689, %11672
  %11691 = add <16 x i16> %11690, %11678
  %11692 = add <16 x i16> %11691, %11684
  %11693 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11688, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11694 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11692, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11695 = shufflevector <16 x i16> %11693, <16 x i16> %11694, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11696 = lshr <32 x i16> %11695, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11697 = shufflevector <32 x i16> %11696, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11698 = sext i32 %blur_x.s0.x.v1.base.s639 to i64
  %11699 = add nsw i64 %11698, %11523
  %11700 = getelementptr inbounds i16, i16* %blur_x, i64 %11699
  %11701 = bitcast i16* %11700 to <16 x i16>*
  store <16 x i16> %11697, <16 x i16>* %11701, align 2, !tbaa !399
  %11702 = shufflevector <32 x i16> %11696, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11703 = getelementptr inbounds i16, i16* %11700, i64 16
  %11704 = bitcast i16* %11703 to <16 x i16>*
  store <16 x i16> %11702, <16 x i16>* %11704, align 2, !tbaa !399
  br label %"consume blur_x640"

"consume blur_x640":                              ; preds = %"for blur_y.s0.x.x.rebased632", %"produce blur_x638"
  %11705 = sext i32 %b279 to i64
  %11706 = add nsw i64 %11526, %11705
  %11707 = getelementptr inbounds i16, i16* %blur_x, i64 %11706
  %11708 = bitcast i16* %11707 to <16 x i16>*
  %11709 = load <16 x i16>, <16 x i16>* %11708, align 2, !tbaa !399
  %11710 = getelementptr inbounds i16, i16* %11707, i64 16
  %11711 = bitcast i16* %11710 to <16 x i16>*
  %11712 = load <16 x i16>, <16 x i16>* %11711, align 2, !tbaa !399
  %11713 = add nsw i64 %11529, %11705
  %11714 = getelementptr inbounds i16, i16* %blur_x, i64 %11713
  %11715 = bitcast i16* %11714 to <16 x i16>*
  %11716 = load <16 x i16>, <16 x i16>* %11715, align 2, !tbaa !399
  %11717 = getelementptr inbounds i16, i16* %11714, i64 16
  %11718 = bitcast i16* %11717 to <16 x i16>*
  %11719 = load <16 x i16>, <16 x i16>* %11718, align 2, !tbaa !399
  %11720 = add nsw i64 %11532, %11705
  %11721 = getelementptr inbounds i16, i16* %blur_x, i64 %11720
  %11722 = bitcast i16* %11721 to <16 x i16>*
  %11723 = load <16 x i16>, <16 x i16>* %11722, align 2, !tbaa !399
  %11724 = getelementptr inbounds i16, i16* %11721, i64 16
  %11725 = bitcast i16* %11724 to <16 x i16>*
  %11726 = load <16 x i16>, <16 x i16>* %11725, align 2, !tbaa !399
  %11727 = add nsw i64 %11535, %11705
  %11728 = getelementptr inbounds i16, i16* %blur_x, i64 %11727
  %11729 = bitcast i16* %11728 to <16 x i16>*
  %11730 = load <16 x i16>, <16 x i16>* %11729, align 2, !tbaa !399
  %11731 = getelementptr inbounds i16, i16* %11728, i64 16
  %11732 = bitcast i16* %11731 to <16 x i16>*
  %11733 = load <16 x i16>, <16 x i16>* %11732, align 2, !tbaa !399
  %11734 = add nsw i64 %11538, %11705
  %11735 = getelementptr inbounds i16, i16* %blur_x, i64 %11734
  %11736 = bitcast i16* %11735 to <16 x i16>*
  %11737 = load <16 x i16>, <16 x i16>* %11736, align 2, !tbaa !399
  %11738 = getelementptr inbounds i16, i16* %11735, i64 16
  %11739 = bitcast i16* %11738 to <16 x i16>*
  %11740 = load <16 x i16>, <16 x i16>* %11739, align 2, !tbaa !399
  %11741 = add <16 x i16> %11716, %11709
  %11742 = add <16 x i16> %11741, %11723
  %11743 = add <16 x i16> %11742, %11730
  %11744 = add <16 x i16> %11743, %11737
  %11745 = add <16 x i16> %11719, %11712
  %11746 = add <16 x i16> %11745, %11726
  %11747 = add <16 x i16> %11746, %11733
  %11748 = add <16 x i16> %11747, %11740
  %11749 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11744, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11750 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11748, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11751 = shufflevector <16 x i16> %11749, <16 x i16> %11750, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11752 = lshr <32 x i16> %11751, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11753 = shufflevector <32 x i16> %11752, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11754 = add nsw i64 %11542, %11705
  %11755 = getelementptr inbounds i16, i16* %66, i64 %11754
  %11756 = bitcast i16* %11755 to <16 x i16>*
  store <16 x i16> %11753, <16 x i16>* %11756, align 2, !tbaa !401
  %11757 = shufflevector <32 x i16> %11752, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11758 = getelementptr inbounds i16, i16* %11755, i64 16
  %11759 = bitcast i16* %11758 to <16 x i16>*
  store <16 x i16> %11757, <16 x i16>* %11759, align 2, !tbaa !401
  %11760 = add nuw nsw i32 %blur_y.s0.x.x.rebased634, 1
  %.not2641 = icmp eq i32 %11760, %t1683
  br i1 %.not2641, label %"end for blur_y.s0.x.x.rebased633", label %"for blur_y.s0.x.x.rebased632"

after_bb641:                                      ; preds = %"end for blur_y.s0.x.x.rebased633", %"produce blur_x644"
  br i1 %100, label %"for blur_y.s0.x.x.rebased646.preheader", label %"end for blur_y.s0.x.x.rebased647", !prof !386

"for blur_y.s0.x.x.rebased646.preheader":         ; preds = %after_bb641
  %11761 = sext i32 %t1722 to i64
  %11762 = zext i32 %.pre-phi3382 to i64
  %11763 = mul nsw i64 %11762, %112
  %11764 = sub nsw i64 %11763, %96
  %11765 = zext i32 %.pre-phi3378 to i64
  %11766 = mul nsw i64 %11765, %112
  %11767 = sub nsw i64 %11766, %96
  %11768 = zext i32 %.pre-phi3386 to i64
  %11769 = mul nsw i64 %11768, %112
  %11770 = sub nsw i64 %11769, %96
  %11771 = zext i32 %.pre-phi3396 to i64
  %11772 = mul nsw i64 %11771, %112
  %11773 = sub nsw i64 %11772, %96
  %11774 = zext i32 %.pre-phi3390 to i64
  %11775 = mul nsw i64 %11774, %112
  %11776 = sub nsw i64 %11775, %96
  %11777 = sext i32 %a26 to i64
  %11778 = add nsw i64 %11777, 25
  %11779 = mul nsw i64 %11778, %113
  %11780 = add nsw i64 %11779, %116
  br label %"for blur_y.s0.x.x.rebased646"

"produce blur_x644":                              ; preds = %"end for blur_y.s0.x.x.rebased633"
  %11781 = getelementptr inbounds i16, i16* %read_input, i64 %165
  %11782 = getelementptr inbounds i16, i16* %11781, i64 -31
  %11783 = bitcast i16* %11782 to <16 x i16>*
  %11784 = load <16 x i16>, <16 x i16>* %11783, align 2, !tbaa !396
  %11785 = getelementptr inbounds i16, i16* %11781, i64 -15
  %11786 = bitcast i16* %11785 to <16 x i16>*
  %11787 = load <16 x i16>, <16 x i16>* %11786, align 2, !tbaa !396
  %11788 = getelementptr inbounds i16, i16* %11781, i64 -32
  %11789 = bitcast i16* %11788 to <16 x i16>*
  %11790 = load <16 x i16>, <16 x i16>* %11789, align 2, !tbaa !396
  %11791 = getelementptr inbounds i16, i16* %11781, i64 -16
  %11792 = bitcast i16* %11791 to <16 x i16>*
  %11793 = load <16 x i16>, <16 x i16>* %11792, align 2, !tbaa !396
  %11794 = getelementptr inbounds i16, i16* %11781, i64 -30
  %11795 = bitcast i16* %11794 to <16 x i16>*
  %11796 = load <16 x i16>, <16 x i16>* %11795, align 2, !tbaa !396
  %11797 = getelementptr inbounds i16, i16* %11781, i64 -14
  %11798 = bitcast i16* %11797 to <16 x i16>*
  %11799 = load <16 x i16>, <16 x i16>* %11798, align 2, !tbaa !396
  %11800 = getelementptr inbounds i16, i16* %11781, i64 -28
  %11801 = bitcast i16* %11800 to <16 x i16>*
  %11802 = load <16 x i16>, <16 x i16>* %11801, align 2, !tbaa !396
  %11803 = getelementptr inbounds i16, i16* %11781, i64 -12
  %11804 = bitcast i16* %11803 to <16 x i16>*
  %11805 = load <16 x i16>, <16 x i16>* %11804, align 2, !tbaa !396
  %11806 = getelementptr inbounds i16, i16* %11781, i64 -29
  %11807 = bitcast i16* %11806 to <16 x i16>*
  %11808 = load <16 x i16>, <16 x i16>* %11807, align 2, !tbaa !396
  %11809 = getelementptr inbounds i16, i16* %11781, i64 -13
  %11810 = bitcast i16* %11809 to <16 x i16>*
  %11811 = load <16 x i16>, <16 x i16>* %11810, align 2, !tbaa !396
  %11812 = add <16 x i16> %11790, %11784
  %11813 = add <16 x i16> %11812, %11796
  %11814 = add <16 x i16> %11813, %11802
  %11815 = add <16 x i16> %11814, %11808
  %11816 = add <16 x i16> %11793, %11787
  %11817 = add <16 x i16> %11816, %11799
  %11818 = add <16 x i16> %11817, %11805
  %11819 = add <16 x i16> %11818, %11811
  %11820 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11815, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11821 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11819, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11822 = shufflevector <16 x i16> %11820, <16 x i16> %11821, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11823 = lshr <32 x i16> %11822, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11824 = shufflevector <32 x i16> %11823, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11825 = zext i32 %.pre-phi3396 to i64
  %11826 = mul nsw i64 %97, %11825
  %11827 = add nsw i64 %99, %11826
  %11828 = getelementptr inbounds i16, i16* %blur_x, i64 %11827
  %11829 = getelementptr inbounds i16, i16* %11828, i64 -32
  %11830 = bitcast i16* %11829 to <16 x i16>*
  store <16 x i16> %11824, <16 x i16>* %11830, align 2, !tbaa !399
  %11831 = shufflevector <32 x i16> %11823, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11832 = getelementptr inbounds i16, i16* %11828, i64 -16
  %11833 = bitcast i16* %11832 to <16 x i16>*
  store <16 x i16> %11831, <16 x i16>* %11833, align 2, !tbaa !399
  %11834 = zext i32 %.pre-phi3382 to i64
  %11835 = mul nsw i64 %11834, %112
  %11836 = add nsw i64 %11835, %94
  %11837 = getelementptr inbounds i16, i16* %blur_x, i64 %11836
  %11838 = getelementptr inbounds i16, i16* %11837, i64 -32
  %11839 = bitcast i16* %11838 to <16 x i16>*
  %11840 = load <16 x i16>, <16 x i16>* %11839, align 2, !tbaa !399
  %11841 = getelementptr inbounds i16, i16* %11837, i64 -16
  %11842 = bitcast i16* %11841 to <16 x i16>*
  %11843 = load <16 x i16>, <16 x i16>* %11842, align 2, !tbaa !399
  %11844 = zext i32 %.pre-phi3378 to i64
  %11845 = mul nsw i64 %11844, %112
  %11846 = add nsw i64 %11845, %94
  %11847 = getelementptr inbounds i16, i16* %blur_x, i64 %11846
  %11848 = getelementptr inbounds i16, i16* %11847, i64 -32
  %11849 = bitcast i16* %11848 to <16 x i16>*
  %11850 = load <16 x i16>, <16 x i16>* %11849, align 2, !tbaa !399
  %11851 = getelementptr inbounds i16, i16* %11847, i64 -16
  %11852 = bitcast i16* %11851 to <16 x i16>*
  %11853 = load <16 x i16>, <16 x i16>* %11852, align 2, !tbaa !399
  %11854 = zext i32 %.pre-phi3386 to i64
  %11855 = mul nsw i64 %11854, %112
  %11856 = add nsw i64 %11855, %94
  %11857 = getelementptr inbounds i16, i16* %blur_x, i64 %11856
  %11858 = getelementptr inbounds i16, i16* %11857, i64 -32
  %11859 = bitcast i16* %11858 to <16 x i16>*
  %11860 = load <16 x i16>, <16 x i16>* %11859, align 2, !tbaa !399
  %11861 = getelementptr inbounds i16, i16* %11857, i64 -16
  %11862 = bitcast i16* %11861 to <16 x i16>*
  %11863 = load <16 x i16>, <16 x i16>* %11862, align 2, !tbaa !399
  %11864 = mul nsw i64 %11825, %112
  %11865 = add nsw i64 %11864, %94
  %11866 = getelementptr inbounds i16, i16* %blur_x, i64 %11865
  %11867 = getelementptr inbounds i16, i16* %11866, i64 -32
  %11868 = bitcast i16* %11867 to <16 x i16>*
  %11869 = load <16 x i16>, <16 x i16>* %11868, align 2, !tbaa !399
  %11870 = getelementptr inbounds i16, i16* %11866, i64 -16
  %11871 = bitcast i16* %11870 to <16 x i16>*
  %11872 = load <16 x i16>, <16 x i16>* %11871, align 2, !tbaa !399
  %11873 = zext i32 %.pre-phi3390 to i64
  %11874 = mul nsw i64 %11873, %112
  %11875 = add nsw i64 %11874, %94
  %11876 = getelementptr inbounds i16, i16* %blur_x, i64 %11875
  %11877 = getelementptr inbounds i16, i16* %11876, i64 -32
  %11878 = bitcast i16* %11877 to <16 x i16>*
  %11879 = load <16 x i16>, <16 x i16>* %11878, align 2, !tbaa !399
  %11880 = getelementptr inbounds i16, i16* %11876, i64 -16
  %11881 = bitcast i16* %11880 to <16 x i16>*
  %11882 = load <16 x i16>, <16 x i16>* %11881, align 2, !tbaa !399
  %11883 = add <16 x i16> %11850, %11840
  %11884 = add <16 x i16> %11883, %11860
  %11885 = add <16 x i16> %11884, %11869
  %11886 = add <16 x i16> %11885, %11879
  %11887 = add <16 x i16> %11853, %11843
  %11888 = add <16 x i16> %11887, %11863
  %11889 = add <16 x i16> %11888, %11872
  %11890 = add <16 x i16> %11889, %11882
  %11891 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11886, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11892 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11890, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11893 = shufflevector <16 x i16> %11891, <16 x i16> %11892, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11894 = lshr <32 x i16> %11893, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11895 = shufflevector <32 x i16> %11894, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11896 = sext i32 %a26 to i64
  %11897 = add nsw i64 %11896, 25
  %11898 = mul nsw i64 %11897, %113
  %11899 = add nsw i64 %115, %11898
  %11900 = getelementptr inbounds i16, i16* %66, i64 %11899
  %11901 = getelementptr inbounds i16, i16* %11900, i64 -32
  %11902 = bitcast i16* %11901 to <16 x i16>*
  store <16 x i16> %11895, <16 x i16>* %11902, align 2, !tbaa !401
  %11903 = shufflevector <32 x i16> %11894, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11904 = getelementptr inbounds i16, i16* %11900, i64 -16
  %11905 = bitcast i16* %11904 to <16 x i16>*
  store <16 x i16> %11903, <16 x i16>* %11905, align 2, !tbaa !401
  br label %after_bb641

"for blur_y.s0.x.x.rebased646":                   ; preds = %"for blur_y.s0.x.x.rebased646.preheader", %"consume blur_x653"
  %indvars.iv3230 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased646.preheader" ], [ %indvars.iv.next3231, %"consume blur_x653" ]
  %11906 = add nsw i64 %indvars.iv3230, %101
  %11907 = icmp slt i64 %11906, 1
  %11908 = trunc i64 %11906 to i32
  %11909 = shl nsw i32 %11908, 5
  %11910 = icmp sgt i32 %4, %11909
  %11911 = or i1 %11907, %11910
  br i1 %11911, label %"produce blur_x652", label %"for blur_y.s0.x.x.rebased646.consume blur_x653_crit_edge"

"for blur_y.s0.x.x.rebased646.consume blur_x653_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased646"
  %.pre3453 = shl nsw i64 %11906, 5
  br label %"consume blur_x653"

"end for blur_y.s0.x.x.rebased647":               ; preds = %"consume blur_x653", %after_bb641
  br i1 %102, label %"for blur_y.s0.x.x.rebased654.preheader", label %"end for blur_y.s0.x.x.rebased655", !prof !386

"for blur_y.s0.x.x.rebased654.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased647"
  %11912 = sext i32 %t1722 to i64
  %11913 = zext i32 %.pre-phi3382 to i64
  %11914 = mul nsw i64 %11913, %112
  %11915 = sub nsw i64 %11914, %96
  %11916 = zext i32 %.pre-phi3378 to i64
  %11917 = mul nsw i64 %11916, %112
  %11918 = sub nsw i64 %11917, %96
  %11919 = zext i32 %.pre-phi3386 to i64
  %11920 = mul nsw i64 %11919, %112
  %11921 = sub nsw i64 %11920, %96
  %11922 = zext i32 %.pre-phi3396 to i64
  %11923 = mul nsw i64 %11922, %112
  %11924 = sub nsw i64 %11923, %96
  %11925 = zext i32 %.pre-phi3390 to i64
  %11926 = mul nsw i64 %11925, %112
  %11927 = sub nsw i64 %11926, %96
  %11928 = sext i32 %a26 to i64
  %11929 = add nsw i64 %11928, 25
  %11930 = mul nsw i64 %11929, %113
  %11931 = add nsw i64 %11930, %116
  br label %"for blur_y.s0.x.x.rebased654"

"produce blur_x652":                              ; preds = %"for blur_y.s0.x.x.rebased646"
  %t1112 = add nsw i32 %11909, %t2105
  %11932 = sext i32 %t1112 to i64
  %11933 = getelementptr inbounds i16, i16* %read_input, i64 %11932
  %11934 = getelementptr inbounds i16, i16* %11933, i64 1
  %11935 = bitcast i16* %11934 to <16 x i16>*
  %11936 = load <16 x i16>, <16 x i16>* %11935, align 2, !tbaa !396
  %11937 = getelementptr inbounds i16, i16* %11933, i64 17
  %11938 = bitcast i16* %11937 to <16 x i16>*
  %11939 = load <16 x i16>, <16 x i16>* %11938, align 2, !tbaa !396
  %11940 = bitcast i16* %11933 to <16 x i16>*
  %11941 = load <16 x i16>, <16 x i16>* %11940, align 2, !tbaa !396
  %11942 = getelementptr inbounds i16, i16* %11933, i64 16
  %11943 = bitcast i16* %11942 to <16 x i16>*
  %11944 = load <16 x i16>, <16 x i16>* %11943, align 2, !tbaa !396
  %11945 = getelementptr inbounds i16, i16* %11933, i64 2
  %11946 = bitcast i16* %11945 to <16 x i16>*
  %11947 = load <16 x i16>, <16 x i16>* %11946, align 2, !tbaa !396
  %11948 = getelementptr inbounds i16, i16* %11933, i64 18
  %11949 = bitcast i16* %11948 to <16 x i16>*
  %11950 = load <16 x i16>, <16 x i16>* %11949, align 2, !tbaa !396
  %11951 = getelementptr inbounds i16, i16* %11933, i64 4
  %11952 = bitcast i16* %11951 to <16 x i16>*
  %11953 = load <16 x i16>, <16 x i16>* %11952, align 2, !tbaa !396
  %11954 = getelementptr inbounds i16, i16* %11933, i64 20
  %11955 = bitcast i16* %11954 to <16 x i16>*
  %11956 = load <16 x i16>, <16 x i16>* %11955, align 2, !tbaa !396
  %11957 = getelementptr inbounds i16, i16* %11933, i64 3
  %11958 = bitcast i16* %11957 to <16 x i16>*
  %11959 = load <16 x i16>, <16 x i16>* %11958, align 2, !tbaa !396
  %11960 = getelementptr inbounds i16, i16* %11933, i64 19
  %11961 = bitcast i16* %11960 to <16 x i16>*
  %11962 = load <16 x i16>, <16 x i16>* %11961, align 2, !tbaa !396
  %11963 = add <16 x i16> %11941, %11936
  %11964 = add <16 x i16> %11963, %11947
  %11965 = add <16 x i16> %11964, %11953
  %11966 = add <16 x i16> %11965, %11959
  %11967 = add <16 x i16> %11944, %11939
  %11968 = add <16 x i16> %11967, %11950
  %11969 = add <16 x i16> %11968, %11956
  %11970 = add <16 x i16> %11969, %11962
  %11971 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11966, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11972 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11970, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %11973 = shufflevector <16 x i16> %11971, <16 x i16> %11972, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11974 = lshr <32 x i16> %11973, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %11975 = shufflevector <32 x i16> %11974, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11976 = shl nsw i64 %11906, 5
  %11977 = add nsw i64 %11976, %11761
  %11978 = getelementptr inbounds i16, i16* %blur_x, i64 %11977
  %11979 = bitcast i16* %11978 to <16 x i16>*
  store <16 x i16> %11975, <16 x i16>* %11979, align 2, !tbaa !399
  %11980 = shufflevector <32 x i16> %11974, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11981 = getelementptr inbounds i16, i16* %11978, i64 16
  %11982 = bitcast i16* %11981 to <16 x i16>*
  store <16 x i16> %11980, <16 x i16>* %11982, align 2, !tbaa !399
  br label %"consume blur_x653"

"consume blur_x653":                              ; preds = %"for blur_y.s0.x.x.rebased646.consume blur_x653_crit_edge", %"produce blur_x652"
  %.pre-phi3454 = phi i64 [ %.pre3453, %"for blur_y.s0.x.x.rebased646.consume blur_x653_crit_edge" ], [ %11976, %"produce blur_x652" ]
  %11983 = add nsw i64 %11764, %.pre-phi3454
  %11984 = getelementptr inbounds i16, i16* %blur_x, i64 %11983
  %11985 = bitcast i16* %11984 to <16 x i16>*
  %11986 = load <16 x i16>, <16 x i16>* %11985, align 2, !tbaa !399
  %11987 = getelementptr inbounds i16, i16* %11984, i64 16
  %11988 = bitcast i16* %11987 to <16 x i16>*
  %11989 = load <16 x i16>, <16 x i16>* %11988, align 2, !tbaa !399
  %11990 = add nsw i64 %11767, %.pre-phi3454
  %11991 = getelementptr inbounds i16, i16* %blur_x, i64 %11990
  %11992 = bitcast i16* %11991 to <16 x i16>*
  %11993 = load <16 x i16>, <16 x i16>* %11992, align 2, !tbaa !399
  %11994 = getelementptr inbounds i16, i16* %11991, i64 16
  %11995 = bitcast i16* %11994 to <16 x i16>*
  %11996 = load <16 x i16>, <16 x i16>* %11995, align 2, !tbaa !399
  %11997 = add nsw i64 %11770, %.pre-phi3454
  %11998 = getelementptr inbounds i16, i16* %blur_x, i64 %11997
  %11999 = bitcast i16* %11998 to <16 x i16>*
  %12000 = load <16 x i16>, <16 x i16>* %11999, align 2, !tbaa !399
  %12001 = getelementptr inbounds i16, i16* %11998, i64 16
  %12002 = bitcast i16* %12001 to <16 x i16>*
  %12003 = load <16 x i16>, <16 x i16>* %12002, align 2, !tbaa !399
  %12004 = add nsw i64 %11773, %.pre-phi3454
  %12005 = getelementptr inbounds i16, i16* %blur_x, i64 %12004
  %12006 = bitcast i16* %12005 to <16 x i16>*
  %12007 = load <16 x i16>, <16 x i16>* %12006, align 2, !tbaa !399
  %12008 = getelementptr inbounds i16, i16* %12005, i64 16
  %12009 = bitcast i16* %12008 to <16 x i16>*
  %12010 = load <16 x i16>, <16 x i16>* %12009, align 2, !tbaa !399
  %12011 = add nsw i64 %11776, %.pre-phi3454
  %12012 = getelementptr inbounds i16, i16* %blur_x, i64 %12011
  %12013 = bitcast i16* %12012 to <16 x i16>*
  %12014 = load <16 x i16>, <16 x i16>* %12013, align 2, !tbaa !399
  %12015 = getelementptr inbounds i16, i16* %12012, i64 16
  %12016 = bitcast i16* %12015 to <16 x i16>*
  %12017 = load <16 x i16>, <16 x i16>* %12016, align 2, !tbaa !399
  %12018 = add <16 x i16> %11993, %11986
  %12019 = add <16 x i16> %12018, %12000
  %12020 = add <16 x i16> %12019, %12007
  %12021 = add <16 x i16> %12020, %12014
  %12022 = add <16 x i16> %11996, %11989
  %12023 = add <16 x i16> %12022, %12003
  %12024 = add <16 x i16> %12023, %12010
  %12025 = add <16 x i16> %12024, %12017
  %12026 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12021, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12027 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12025, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12028 = shufflevector <16 x i16> %12026, <16 x i16> %12027, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12029 = lshr <32 x i16> %12028, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12030 = shufflevector <32 x i16> %12029, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12031 = add nsw i64 %11780, %.pre-phi3454
  %12032 = getelementptr inbounds i16, i16* %66, i64 %12031
  %12033 = bitcast i16* %12032 to <16 x i16>*
  store <16 x i16> %12030, <16 x i16>* %12033, align 2, !tbaa !401
  %12034 = shufflevector <32 x i16> %12029, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12035 = getelementptr inbounds i16, i16* %12032, i64 16
  %12036 = bitcast i16* %12035 to <16 x i16>*
  store <16 x i16> %12034, <16 x i16>* %12036, align 2, !tbaa !401
  %indvars.iv.next3231 = add nuw nsw i64 %indvars.iv3230, 1
  %.not2640 = icmp eq i64 %indvars.iv.next3231, %184
  br i1 %.not2640, label %"end for blur_y.s0.x.x.rebased647", label %"for blur_y.s0.x.x.rebased646"

"for blur_y.s0.x.x.rebased654":                   ; preds = %"for blur_y.s0.x.x.rebased654.preheader", %"consume blur_x662"
  %blur_y.s0.x.x.rebased656 = phi i32 [ %12149, %"consume blur_x662" ], [ 0, %"for blur_y.s0.x.x.rebased654.preheader" ]
  %12037 = add nsw i32 %blur_y.s0.x.x.rebased656, %t1626
  %a280 = shl nsw i32 %12037, 5
  %12038 = icmp sgt i32 %a14, %a280
  %b286 = select i1 %12038, i32 %a280, i32 %a14
  %12039 = icmp slt i32 %12037, 1
  %12040 = icmp sgt i32 %4, %a280
  %12041 = or i1 %12039, %12040
  br i1 %12041, label %"produce blur_x660", label %"consume blur_x662"

"end for blur_y.s0.x.x.rebased655":               ; preds = %"consume blur_x662", %"end for blur_y.s0.x.x.rebased647"
  br i1 %34, label %"produce blur_x666", label %after_bb663

"produce blur_x660":                              ; preds = %"for blur_y.s0.x.x.rebased654"
  %12042 = icmp slt i32 %b286, %4
  %blur_x.s0.x.v1.base.s661 = select i1 %12042, i32 %b286, i32 %4
  %t1117 = add nsw i32 %blur_x.s0.x.v1.base.s661, %t2105
  %12043 = sext i32 %t1117 to i64
  %12044 = getelementptr inbounds i16, i16* %read_input, i64 %12043
  %12045 = getelementptr inbounds i16, i16* %12044, i64 1
  %12046 = bitcast i16* %12045 to <16 x i16>*
  %12047 = load <16 x i16>, <16 x i16>* %12046, align 2, !tbaa !396
  %12048 = getelementptr inbounds i16, i16* %12044, i64 17
  %12049 = bitcast i16* %12048 to <16 x i16>*
  %12050 = load <16 x i16>, <16 x i16>* %12049, align 2, !tbaa !396
  %12051 = bitcast i16* %12044 to <16 x i16>*
  %12052 = load <16 x i16>, <16 x i16>* %12051, align 2, !tbaa !396
  %12053 = getelementptr inbounds i16, i16* %12044, i64 16
  %12054 = bitcast i16* %12053 to <16 x i16>*
  %12055 = load <16 x i16>, <16 x i16>* %12054, align 2, !tbaa !396
  %12056 = getelementptr inbounds i16, i16* %12044, i64 2
  %12057 = bitcast i16* %12056 to <16 x i16>*
  %12058 = load <16 x i16>, <16 x i16>* %12057, align 2, !tbaa !396
  %12059 = getelementptr inbounds i16, i16* %12044, i64 18
  %12060 = bitcast i16* %12059 to <16 x i16>*
  %12061 = load <16 x i16>, <16 x i16>* %12060, align 2, !tbaa !396
  %12062 = getelementptr inbounds i16, i16* %12044, i64 4
  %12063 = bitcast i16* %12062 to <16 x i16>*
  %12064 = load <16 x i16>, <16 x i16>* %12063, align 2, !tbaa !396
  %12065 = getelementptr inbounds i16, i16* %12044, i64 20
  %12066 = bitcast i16* %12065 to <16 x i16>*
  %12067 = load <16 x i16>, <16 x i16>* %12066, align 2, !tbaa !396
  %12068 = getelementptr inbounds i16, i16* %12044, i64 3
  %12069 = bitcast i16* %12068 to <16 x i16>*
  %12070 = load <16 x i16>, <16 x i16>* %12069, align 2, !tbaa !396
  %12071 = getelementptr inbounds i16, i16* %12044, i64 19
  %12072 = bitcast i16* %12071 to <16 x i16>*
  %12073 = load <16 x i16>, <16 x i16>* %12072, align 2, !tbaa !396
  %12074 = add <16 x i16> %12052, %12047
  %12075 = add <16 x i16> %12074, %12058
  %12076 = add <16 x i16> %12075, %12064
  %12077 = add <16 x i16> %12076, %12070
  %12078 = add <16 x i16> %12055, %12050
  %12079 = add <16 x i16> %12078, %12061
  %12080 = add <16 x i16> %12079, %12067
  %12081 = add <16 x i16> %12080, %12073
  %12082 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12077, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12083 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12081, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12084 = shufflevector <16 x i16> %12082, <16 x i16> %12083, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12085 = lshr <32 x i16> %12084, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12086 = shufflevector <32 x i16> %12085, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12087 = sext i32 %blur_x.s0.x.v1.base.s661 to i64
  %12088 = add nsw i64 %12087, %11912
  %12089 = getelementptr inbounds i16, i16* %blur_x, i64 %12088
  %12090 = bitcast i16* %12089 to <16 x i16>*
  store <16 x i16> %12086, <16 x i16>* %12090, align 2, !tbaa !399
  %12091 = shufflevector <32 x i16> %12085, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12092 = getelementptr inbounds i16, i16* %12089, i64 16
  %12093 = bitcast i16* %12092 to <16 x i16>*
  store <16 x i16> %12091, <16 x i16>* %12093, align 2, !tbaa !399
  br label %"consume blur_x662"

"consume blur_x662":                              ; preds = %"for blur_y.s0.x.x.rebased654", %"produce blur_x660"
  %12094 = sext i32 %b286 to i64
  %12095 = add nsw i64 %11915, %12094
  %12096 = getelementptr inbounds i16, i16* %blur_x, i64 %12095
  %12097 = bitcast i16* %12096 to <16 x i16>*
  %12098 = load <16 x i16>, <16 x i16>* %12097, align 2, !tbaa !399
  %12099 = getelementptr inbounds i16, i16* %12096, i64 16
  %12100 = bitcast i16* %12099 to <16 x i16>*
  %12101 = load <16 x i16>, <16 x i16>* %12100, align 2, !tbaa !399
  %12102 = add nsw i64 %11918, %12094
  %12103 = getelementptr inbounds i16, i16* %blur_x, i64 %12102
  %12104 = bitcast i16* %12103 to <16 x i16>*
  %12105 = load <16 x i16>, <16 x i16>* %12104, align 2, !tbaa !399
  %12106 = getelementptr inbounds i16, i16* %12103, i64 16
  %12107 = bitcast i16* %12106 to <16 x i16>*
  %12108 = load <16 x i16>, <16 x i16>* %12107, align 2, !tbaa !399
  %12109 = add nsw i64 %11921, %12094
  %12110 = getelementptr inbounds i16, i16* %blur_x, i64 %12109
  %12111 = bitcast i16* %12110 to <16 x i16>*
  %12112 = load <16 x i16>, <16 x i16>* %12111, align 2, !tbaa !399
  %12113 = getelementptr inbounds i16, i16* %12110, i64 16
  %12114 = bitcast i16* %12113 to <16 x i16>*
  %12115 = load <16 x i16>, <16 x i16>* %12114, align 2, !tbaa !399
  %12116 = add nsw i64 %11924, %12094
  %12117 = getelementptr inbounds i16, i16* %blur_x, i64 %12116
  %12118 = bitcast i16* %12117 to <16 x i16>*
  %12119 = load <16 x i16>, <16 x i16>* %12118, align 2, !tbaa !399
  %12120 = getelementptr inbounds i16, i16* %12117, i64 16
  %12121 = bitcast i16* %12120 to <16 x i16>*
  %12122 = load <16 x i16>, <16 x i16>* %12121, align 2, !tbaa !399
  %12123 = add nsw i64 %11927, %12094
  %12124 = getelementptr inbounds i16, i16* %blur_x, i64 %12123
  %12125 = bitcast i16* %12124 to <16 x i16>*
  %12126 = load <16 x i16>, <16 x i16>* %12125, align 2, !tbaa !399
  %12127 = getelementptr inbounds i16, i16* %12124, i64 16
  %12128 = bitcast i16* %12127 to <16 x i16>*
  %12129 = load <16 x i16>, <16 x i16>* %12128, align 2, !tbaa !399
  %12130 = add <16 x i16> %12105, %12098
  %12131 = add <16 x i16> %12130, %12112
  %12132 = add <16 x i16> %12131, %12119
  %12133 = add <16 x i16> %12132, %12126
  %12134 = add <16 x i16> %12108, %12101
  %12135 = add <16 x i16> %12134, %12115
  %12136 = add <16 x i16> %12135, %12122
  %12137 = add <16 x i16> %12136, %12129
  %12138 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12133, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12139 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12137, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12140 = shufflevector <16 x i16> %12138, <16 x i16> %12139, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12141 = lshr <32 x i16> %12140, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12142 = shufflevector <32 x i16> %12141, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12143 = add nsw i64 %11931, %12094
  %12144 = getelementptr inbounds i16, i16* %66, i64 %12143
  %12145 = bitcast i16* %12144 to <16 x i16>*
  store <16 x i16> %12142, <16 x i16>* %12145, align 2, !tbaa !401
  %12146 = shufflevector <32 x i16> %12141, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12147 = getelementptr inbounds i16, i16* %12144, i64 16
  %12148 = bitcast i16* %12147 to <16 x i16>*
  store <16 x i16> %12146, <16 x i16>* %12148, align 2, !tbaa !401
  %12149 = add nuw nsw i32 %blur_y.s0.x.x.rebased656, 1
  %.not2639 = icmp eq i32 %12149, %t1683
  br i1 %.not2639, label %"end for blur_y.s0.x.x.rebased655", label %"for blur_y.s0.x.x.rebased654"

after_bb663:                                      ; preds = %"end for blur_y.s0.x.x.rebased655", %"produce blur_x666"
  br i1 %100, label %"for blur_y.s0.x.x.rebased668.preheader", label %"end for blur_y.s0.x.x.rebased669", !prof !386

"for blur_y.s0.x.x.rebased668.preheader":         ; preds = %after_bb663
  %12150 = sext i32 %t1738 to i64
  %12151 = zext i32 %.pre-phi3386 to i64
  %12152 = mul nsw i64 %12151, %112
  %12153 = sub nsw i64 %12152, %96
  %12154 = zext i32 %.pre-phi3382 to i64
  %12155 = mul nsw i64 %12154, %112
  %12156 = sub nsw i64 %12155, %96
  %12157 = zext i32 %.pre-phi3390 to i64
  %12158 = mul nsw i64 %12157, %112
  %12159 = sub nsw i64 %12158, %96
  %12160 = zext i32 %.pre-phi3402 to i64
  %12161 = mul nsw i64 %12160, %112
  %12162 = sub nsw i64 %12161, %96
  %12163 = zext i32 %.pre-phi3396 to i64
  %12164 = mul nsw i64 %12163, %112
  %12165 = sub nsw i64 %12164, %96
  %12166 = sext i32 %a26 to i64
  %12167 = add nsw i64 %12166, 26
  %12168 = mul nsw i64 %12167, %113
  %12169 = add nsw i64 %12168, %116
  br label %"for blur_y.s0.x.x.rebased668"

"produce blur_x666":                              ; preds = %"end for blur_y.s0.x.x.rebased655"
  %12170 = getelementptr inbounds i16, i16* %read_input, i64 %167
  %12171 = getelementptr inbounds i16, i16* %12170, i64 -31
  %12172 = bitcast i16* %12171 to <16 x i16>*
  %12173 = load <16 x i16>, <16 x i16>* %12172, align 2, !tbaa !396
  %12174 = getelementptr inbounds i16, i16* %12170, i64 -15
  %12175 = bitcast i16* %12174 to <16 x i16>*
  %12176 = load <16 x i16>, <16 x i16>* %12175, align 2, !tbaa !396
  %12177 = getelementptr inbounds i16, i16* %12170, i64 -32
  %12178 = bitcast i16* %12177 to <16 x i16>*
  %12179 = load <16 x i16>, <16 x i16>* %12178, align 2, !tbaa !396
  %12180 = getelementptr inbounds i16, i16* %12170, i64 -16
  %12181 = bitcast i16* %12180 to <16 x i16>*
  %12182 = load <16 x i16>, <16 x i16>* %12181, align 2, !tbaa !396
  %12183 = getelementptr inbounds i16, i16* %12170, i64 -30
  %12184 = bitcast i16* %12183 to <16 x i16>*
  %12185 = load <16 x i16>, <16 x i16>* %12184, align 2, !tbaa !396
  %12186 = getelementptr inbounds i16, i16* %12170, i64 -14
  %12187 = bitcast i16* %12186 to <16 x i16>*
  %12188 = load <16 x i16>, <16 x i16>* %12187, align 2, !tbaa !396
  %12189 = getelementptr inbounds i16, i16* %12170, i64 -28
  %12190 = bitcast i16* %12189 to <16 x i16>*
  %12191 = load <16 x i16>, <16 x i16>* %12190, align 2, !tbaa !396
  %12192 = getelementptr inbounds i16, i16* %12170, i64 -12
  %12193 = bitcast i16* %12192 to <16 x i16>*
  %12194 = load <16 x i16>, <16 x i16>* %12193, align 2, !tbaa !396
  %12195 = getelementptr inbounds i16, i16* %12170, i64 -29
  %12196 = bitcast i16* %12195 to <16 x i16>*
  %12197 = load <16 x i16>, <16 x i16>* %12196, align 2, !tbaa !396
  %12198 = getelementptr inbounds i16, i16* %12170, i64 -13
  %12199 = bitcast i16* %12198 to <16 x i16>*
  %12200 = load <16 x i16>, <16 x i16>* %12199, align 2, !tbaa !396
  %12201 = add <16 x i16> %12179, %12173
  %12202 = add <16 x i16> %12201, %12185
  %12203 = add <16 x i16> %12202, %12191
  %12204 = add <16 x i16> %12203, %12197
  %12205 = add <16 x i16> %12182, %12176
  %12206 = add <16 x i16> %12205, %12188
  %12207 = add <16 x i16> %12206, %12194
  %12208 = add <16 x i16> %12207, %12200
  %12209 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12204, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12210 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12208, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12211 = shufflevector <16 x i16> %12209, <16 x i16> %12210, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12212 = lshr <32 x i16> %12211, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12213 = shufflevector <32 x i16> %12212, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12214 = zext i32 %.pre-phi3402 to i64
  %12215 = mul nsw i64 %97, %12214
  %12216 = add nsw i64 %99, %12215
  %12217 = getelementptr inbounds i16, i16* %blur_x, i64 %12216
  %12218 = getelementptr inbounds i16, i16* %12217, i64 -32
  %12219 = bitcast i16* %12218 to <16 x i16>*
  store <16 x i16> %12213, <16 x i16>* %12219, align 2, !tbaa !399
  %12220 = shufflevector <32 x i16> %12212, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12221 = getelementptr inbounds i16, i16* %12217, i64 -16
  %12222 = bitcast i16* %12221 to <16 x i16>*
  store <16 x i16> %12220, <16 x i16>* %12222, align 2, !tbaa !399
  %12223 = zext i32 %.pre-phi3386 to i64
  %12224 = mul nsw i64 %12223, %112
  %12225 = add nsw i64 %12224, %94
  %12226 = getelementptr inbounds i16, i16* %blur_x, i64 %12225
  %12227 = getelementptr inbounds i16, i16* %12226, i64 -32
  %12228 = bitcast i16* %12227 to <16 x i16>*
  %12229 = load <16 x i16>, <16 x i16>* %12228, align 2, !tbaa !399
  %12230 = getelementptr inbounds i16, i16* %12226, i64 -16
  %12231 = bitcast i16* %12230 to <16 x i16>*
  %12232 = load <16 x i16>, <16 x i16>* %12231, align 2, !tbaa !399
  %12233 = zext i32 %.pre-phi3382 to i64
  %12234 = mul nsw i64 %12233, %112
  %12235 = add nsw i64 %12234, %94
  %12236 = getelementptr inbounds i16, i16* %blur_x, i64 %12235
  %12237 = getelementptr inbounds i16, i16* %12236, i64 -32
  %12238 = bitcast i16* %12237 to <16 x i16>*
  %12239 = load <16 x i16>, <16 x i16>* %12238, align 2, !tbaa !399
  %12240 = getelementptr inbounds i16, i16* %12236, i64 -16
  %12241 = bitcast i16* %12240 to <16 x i16>*
  %12242 = load <16 x i16>, <16 x i16>* %12241, align 2, !tbaa !399
  %12243 = zext i32 %.pre-phi3390 to i64
  %12244 = mul nsw i64 %12243, %112
  %12245 = add nsw i64 %12244, %94
  %12246 = getelementptr inbounds i16, i16* %blur_x, i64 %12245
  %12247 = getelementptr inbounds i16, i16* %12246, i64 -32
  %12248 = bitcast i16* %12247 to <16 x i16>*
  %12249 = load <16 x i16>, <16 x i16>* %12248, align 2, !tbaa !399
  %12250 = getelementptr inbounds i16, i16* %12246, i64 -16
  %12251 = bitcast i16* %12250 to <16 x i16>*
  %12252 = load <16 x i16>, <16 x i16>* %12251, align 2, !tbaa !399
  %12253 = mul nsw i64 %12214, %112
  %12254 = add nsw i64 %12253, %94
  %12255 = getelementptr inbounds i16, i16* %blur_x, i64 %12254
  %12256 = getelementptr inbounds i16, i16* %12255, i64 -32
  %12257 = bitcast i16* %12256 to <16 x i16>*
  %12258 = load <16 x i16>, <16 x i16>* %12257, align 2, !tbaa !399
  %12259 = getelementptr inbounds i16, i16* %12255, i64 -16
  %12260 = bitcast i16* %12259 to <16 x i16>*
  %12261 = load <16 x i16>, <16 x i16>* %12260, align 2, !tbaa !399
  %12262 = zext i32 %.pre-phi3396 to i64
  %12263 = mul nsw i64 %12262, %112
  %12264 = add nsw i64 %12263, %94
  %12265 = getelementptr inbounds i16, i16* %blur_x, i64 %12264
  %12266 = getelementptr inbounds i16, i16* %12265, i64 -32
  %12267 = bitcast i16* %12266 to <16 x i16>*
  %12268 = load <16 x i16>, <16 x i16>* %12267, align 2, !tbaa !399
  %12269 = getelementptr inbounds i16, i16* %12265, i64 -16
  %12270 = bitcast i16* %12269 to <16 x i16>*
  %12271 = load <16 x i16>, <16 x i16>* %12270, align 2, !tbaa !399
  %12272 = add <16 x i16> %12239, %12229
  %12273 = add <16 x i16> %12272, %12249
  %12274 = add <16 x i16> %12273, %12258
  %12275 = add <16 x i16> %12274, %12268
  %12276 = add <16 x i16> %12242, %12232
  %12277 = add <16 x i16> %12276, %12252
  %12278 = add <16 x i16> %12277, %12261
  %12279 = add <16 x i16> %12278, %12271
  %12280 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12275, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12281 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12279, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12282 = shufflevector <16 x i16> %12280, <16 x i16> %12281, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12283 = lshr <32 x i16> %12282, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12284 = shufflevector <32 x i16> %12283, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12285 = sext i32 %a26 to i64
  %12286 = add nsw i64 %12285, 26
  %12287 = mul nsw i64 %12286, %113
  %12288 = add nsw i64 %115, %12287
  %12289 = getelementptr inbounds i16, i16* %66, i64 %12288
  %12290 = getelementptr inbounds i16, i16* %12289, i64 -32
  %12291 = bitcast i16* %12290 to <16 x i16>*
  store <16 x i16> %12284, <16 x i16>* %12291, align 2, !tbaa !401
  %12292 = shufflevector <32 x i16> %12283, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12293 = getelementptr inbounds i16, i16* %12289, i64 -16
  %12294 = bitcast i16* %12293 to <16 x i16>*
  store <16 x i16> %12292, <16 x i16>* %12294, align 2, !tbaa !401
  br label %after_bb663

"for blur_y.s0.x.x.rebased668":                   ; preds = %"for blur_y.s0.x.x.rebased668.preheader", %"consume blur_x675"
  %indvars.iv3233 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased668.preheader" ], [ %indvars.iv.next3234, %"consume blur_x675" ]
  %12295 = add nsw i64 %indvars.iv3233, %101
  %12296 = icmp slt i64 %12295, 1
  %12297 = trunc i64 %12295 to i32
  %12298 = shl nsw i32 %12297, 5
  %12299 = icmp sgt i32 %4, %12298
  %12300 = or i1 %12296, %12299
  br i1 %12300, label %"produce blur_x674", label %"for blur_y.s0.x.x.rebased668.consume blur_x675_crit_edge"

"for blur_y.s0.x.x.rebased668.consume blur_x675_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased668"
  %.pre3455 = shl nsw i64 %12295, 5
  br label %"consume blur_x675"

"end for blur_y.s0.x.x.rebased669":               ; preds = %"consume blur_x675", %after_bb663
  br i1 %102, label %"for blur_y.s0.x.x.rebased676.preheader", label %"end for blur_y.s0.x.x.rebased677", !prof !386

"for blur_y.s0.x.x.rebased676.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased669"
  %12301 = sext i32 %t1738 to i64
  %12302 = zext i32 %.pre-phi3386 to i64
  %12303 = mul nsw i64 %12302, %112
  %12304 = sub nsw i64 %12303, %96
  %12305 = zext i32 %.pre-phi3382 to i64
  %12306 = mul nsw i64 %12305, %112
  %12307 = sub nsw i64 %12306, %96
  %12308 = zext i32 %.pre-phi3390 to i64
  %12309 = mul nsw i64 %12308, %112
  %12310 = sub nsw i64 %12309, %96
  %12311 = zext i32 %.pre-phi3402 to i64
  %12312 = mul nsw i64 %12311, %112
  %12313 = sub nsw i64 %12312, %96
  %12314 = zext i32 %.pre-phi3396 to i64
  %12315 = mul nsw i64 %12314, %112
  %12316 = sub nsw i64 %12315, %96
  %12317 = sext i32 %a26 to i64
  %12318 = add nsw i64 %12317, 26
  %12319 = mul nsw i64 %12318, %113
  %12320 = add nsw i64 %12319, %116
  br label %"for blur_y.s0.x.x.rebased676"

"produce blur_x674":                              ; preds = %"for blur_y.s0.x.x.rebased668"
  %t1128 = add nsw i32 %12298, %t2121
  %12321 = sext i32 %t1128 to i64
  %12322 = getelementptr inbounds i16, i16* %read_input, i64 %12321
  %12323 = getelementptr inbounds i16, i16* %12322, i64 1
  %12324 = bitcast i16* %12323 to <16 x i16>*
  %12325 = load <16 x i16>, <16 x i16>* %12324, align 2, !tbaa !396
  %12326 = getelementptr inbounds i16, i16* %12322, i64 17
  %12327 = bitcast i16* %12326 to <16 x i16>*
  %12328 = load <16 x i16>, <16 x i16>* %12327, align 2, !tbaa !396
  %12329 = bitcast i16* %12322 to <16 x i16>*
  %12330 = load <16 x i16>, <16 x i16>* %12329, align 2, !tbaa !396
  %12331 = getelementptr inbounds i16, i16* %12322, i64 16
  %12332 = bitcast i16* %12331 to <16 x i16>*
  %12333 = load <16 x i16>, <16 x i16>* %12332, align 2, !tbaa !396
  %12334 = getelementptr inbounds i16, i16* %12322, i64 2
  %12335 = bitcast i16* %12334 to <16 x i16>*
  %12336 = load <16 x i16>, <16 x i16>* %12335, align 2, !tbaa !396
  %12337 = getelementptr inbounds i16, i16* %12322, i64 18
  %12338 = bitcast i16* %12337 to <16 x i16>*
  %12339 = load <16 x i16>, <16 x i16>* %12338, align 2, !tbaa !396
  %12340 = getelementptr inbounds i16, i16* %12322, i64 4
  %12341 = bitcast i16* %12340 to <16 x i16>*
  %12342 = load <16 x i16>, <16 x i16>* %12341, align 2, !tbaa !396
  %12343 = getelementptr inbounds i16, i16* %12322, i64 20
  %12344 = bitcast i16* %12343 to <16 x i16>*
  %12345 = load <16 x i16>, <16 x i16>* %12344, align 2, !tbaa !396
  %12346 = getelementptr inbounds i16, i16* %12322, i64 3
  %12347 = bitcast i16* %12346 to <16 x i16>*
  %12348 = load <16 x i16>, <16 x i16>* %12347, align 2, !tbaa !396
  %12349 = getelementptr inbounds i16, i16* %12322, i64 19
  %12350 = bitcast i16* %12349 to <16 x i16>*
  %12351 = load <16 x i16>, <16 x i16>* %12350, align 2, !tbaa !396
  %12352 = add <16 x i16> %12330, %12325
  %12353 = add <16 x i16> %12352, %12336
  %12354 = add <16 x i16> %12353, %12342
  %12355 = add <16 x i16> %12354, %12348
  %12356 = add <16 x i16> %12333, %12328
  %12357 = add <16 x i16> %12356, %12339
  %12358 = add <16 x i16> %12357, %12345
  %12359 = add <16 x i16> %12358, %12351
  %12360 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12355, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12361 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12359, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12362 = shufflevector <16 x i16> %12360, <16 x i16> %12361, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12363 = lshr <32 x i16> %12362, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12364 = shufflevector <32 x i16> %12363, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12365 = shl nsw i64 %12295, 5
  %12366 = add nsw i64 %12365, %12150
  %12367 = getelementptr inbounds i16, i16* %blur_x, i64 %12366
  %12368 = bitcast i16* %12367 to <16 x i16>*
  store <16 x i16> %12364, <16 x i16>* %12368, align 2, !tbaa !399
  %12369 = shufflevector <32 x i16> %12363, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12370 = getelementptr inbounds i16, i16* %12367, i64 16
  %12371 = bitcast i16* %12370 to <16 x i16>*
  store <16 x i16> %12369, <16 x i16>* %12371, align 2, !tbaa !399
  br label %"consume blur_x675"

"consume blur_x675":                              ; preds = %"for blur_y.s0.x.x.rebased668.consume blur_x675_crit_edge", %"produce blur_x674"
  %.pre-phi3456 = phi i64 [ %.pre3455, %"for blur_y.s0.x.x.rebased668.consume blur_x675_crit_edge" ], [ %12365, %"produce blur_x674" ]
  %12372 = add nsw i64 %12153, %.pre-phi3456
  %12373 = getelementptr inbounds i16, i16* %blur_x, i64 %12372
  %12374 = bitcast i16* %12373 to <16 x i16>*
  %12375 = load <16 x i16>, <16 x i16>* %12374, align 2, !tbaa !399
  %12376 = getelementptr inbounds i16, i16* %12373, i64 16
  %12377 = bitcast i16* %12376 to <16 x i16>*
  %12378 = load <16 x i16>, <16 x i16>* %12377, align 2, !tbaa !399
  %12379 = add nsw i64 %12156, %.pre-phi3456
  %12380 = getelementptr inbounds i16, i16* %blur_x, i64 %12379
  %12381 = bitcast i16* %12380 to <16 x i16>*
  %12382 = load <16 x i16>, <16 x i16>* %12381, align 2, !tbaa !399
  %12383 = getelementptr inbounds i16, i16* %12380, i64 16
  %12384 = bitcast i16* %12383 to <16 x i16>*
  %12385 = load <16 x i16>, <16 x i16>* %12384, align 2, !tbaa !399
  %12386 = add nsw i64 %12159, %.pre-phi3456
  %12387 = getelementptr inbounds i16, i16* %blur_x, i64 %12386
  %12388 = bitcast i16* %12387 to <16 x i16>*
  %12389 = load <16 x i16>, <16 x i16>* %12388, align 2, !tbaa !399
  %12390 = getelementptr inbounds i16, i16* %12387, i64 16
  %12391 = bitcast i16* %12390 to <16 x i16>*
  %12392 = load <16 x i16>, <16 x i16>* %12391, align 2, !tbaa !399
  %12393 = add nsw i64 %12162, %.pre-phi3456
  %12394 = getelementptr inbounds i16, i16* %blur_x, i64 %12393
  %12395 = bitcast i16* %12394 to <16 x i16>*
  %12396 = load <16 x i16>, <16 x i16>* %12395, align 2, !tbaa !399
  %12397 = getelementptr inbounds i16, i16* %12394, i64 16
  %12398 = bitcast i16* %12397 to <16 x i16>*
  %12399 = load <16 x i16>, <16 x i16>* %12398, align 2, !tbaa !399
  %12400 = add nsw i64 %12165, %.pre-phi3456
  %12401 = getelementptr inbounds i16, i16* %blur_x, i64 %12400
  %12402 = bitcast i16* %12401 to <16 x i16>*
  %12403 = load <16 x i16>, <16 x i16>* %12402, align 2, !tbaa !399
  %12404 = getelementptr inbounds i16, i16* %12401, i64 16
  %12405 = bitcast i16* %12404 to <16 x i16>*
  %12406 = load <16 x i16>, <16 x i16>* %12405, align 2, !tbaa !399
  %12407 = add <16 x i16> %12382, %12375
  %12408 = add <16 x i16> %12407, %12389
  %12409 = add <16 x i16> %12408, %12396
  %12410 = add <16 x i16> %12409, %12403
  %12411 = add <16 x i16> %12385, %12378
  %12412 = add <16 x i16> %12411, %12392
  %12413 = add <16 x i16> %12412, %12399
  %12414 = add <16 x i16> %12413, %12406
  %12415 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12410, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12416 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12414, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12417 = shufflevector <16 x i16> %12415, <16 x i16> %12416, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12418 = lshr <32 x i16> %12417, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12419 = shufflevector <32 x i16> %12418, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12420 = add nsw i64 %12169, %.pre-phi3456
  %12421 = getelementptr inbounds i16, i16* %66, i64 %12420
  %12422 = bitcast i16* %12421 to <16 x i16>*
  store <16 x i16> %12419, <16 x i16>* %12422, align 2, !tbaa !401
  %12423 = shufflevector <32 x i16> %12418, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12424 = getelementptr inbounds i16, i16* %12421, i64 16
  %12425 = bitcast i16* %12424 to <16 x i16>*
  store <16 x i16> %12423, <16 x i16>* %12425, align 2, !tbaa !401
  %indvars.iv.next3234 = add nuw nsw i64 %indvars.iv3233, 1
  %.not2638 = icmp eq i64 %indvars.iv.next3234, %184
  br i1 %.not2638, label %"end for blur_y.s0.x.x.rebased669", label %"for blur_y.s0.x.x.rebased668"

"for blur_y.s0.x.x.rebased676":                   ; preds = %"for blur_y.s0.x.x.rebased676.preheader", %"consume blur_x684"
  %blur_y.s0.x.x.rebased678 = phi i32 [ %12538, %"consume blur_x684" ], [ 0, %"for blur_y.s0.x.x.rebased676.preheader" ]
  %12426 = add nsw i32 %blur_y.s0.x.x.rebased678, %t1626
  %a287 = shl nsw i32 %12426, 5
  %12427 = icmp sgt i32 %a14, %a287
  %b293 = select i1 %12427, i32 %a287, i32 %a14
  %12428 = icmp slt i32 %12426, 1
  %12429 = icmp sgt i32 %4, %a287
  %12430 = or i1 %12428, %12429
  br i1 %12430, label %"produce blur_x682", label %"consume blur_x684"

"end for blur_y.s0.x.x.rebased677":               ; preds = %"consume blur_x684", %"end for blur_y.s0.x.x.rebased669"
  br i1 %34, label %"produce blur_x688", label %after_bb685

"produce blur_x682":                              ; preds = %"for blur_y.s0.x.x.rebased676"
  %12431 = icmp slt i32 %b293, %4
  %blur_x.s0.x.v1.base.s683 = select i1 %12431, i32 %b293, i32 %4
  %t1133 = add nsw i32 %blur_x.s0.x.v1.base.s683, %t2121
  %12432 = sext i32 %t1133 to i64
  %12433 = getelementptr inbounds i16, i16* %read_input, i64 %12432
  %12434 = getelementptr inbounds i16, i16* %12433, i64 1
  %12435 = bitcast i16* %12434 to <16 x i16>*
  %12436 = load <16 x i16>, <16 x i16>* %12435, align 2, !tbaa !396
  %12437 = getelementptr inbounds i16, i16* %12433, i64 17
  %12438 = bitcast i16* %12437 to <16 x i16>*
  %12439 = load <16 x i16>, <16 x i16>* %12438, align 2, !tbaa !396
  %12440 = bitcast i16* %12433 to <16 x i16>*
  %12441 = load <16 x i16>, <16 x i16>* %12440, align 2, !tbaa !396
  %12442 = getelementptr inbounds i16, i16* %12433, i64 16
  %12443 = bitcast i16* %12442 to <16 x i16>*
  %12444 = load <16 x i16>, <16 x i16>* %12443, align 2, !tbaa !396
  %12445 = getelementptr inbounds i16, i16* %12433, i64 2
  %12446 = bitcast i16* %12445 to <16 x i16>*
  %12447 = load <16 x i16>, <16 x i16>* %12446, align 2, !tbaa !396
  %12448 = getelementptr inbounds i16, i16* %12433, i64 18
  %12449 = bitcast i16* %12448 to <16 x i16>*
  %12450 = load <16 x i16>, <16 x i16>* %12449, align 2, !tbaa !396
  %12451 = getelementptr inbounds i16, i16* %12433, i64 4
  %12452 = bitcast i16* %12451 to <16 x i16>*
  %12453 = load <16 x i16>, <16 x i16>* %12452, align 2, !tbaa !396
  %12454 = getelementptr inbounds i16, i16* %12433, i64 20
  %12455 = bitcast i16* %12454 to <16 x i16>*
  %12456 = load <16 x i16>, <16 x i16>* %12455, align 2, !tbaa !396
  %12457 = getelementptr inbounds i16, i16* %12433, i64 3
  %12458 = bitcast i16* %12457 to <16 x i16>*
  %12459 = load <16 x i16>, <16 x i16>* %12458, align 2, !tbaa !396
  %12460 = getelementptr inbounds i16, i16* %12433, i64 19
  %12461 = bitcast i16* %12460 to <16 x i16>*
  %12462 = load <16 x i16>, <16 x i16>* %12461, align 2, !tbaa !396
  %12463 = add <16 x i16> %12441, %12436
  %12464 = add <16 x i16> %12463, %12447
  %12465 = add <16 x i16> %12464, %12453
  %12466 = add <16 x i16> %12465, %12459
  %12467 = add <16 x i16> %12444, %12439
  %12468 = add <16 x i16> %12467, %12450
  %12469 = add <16 x i16> %12468, %12456
  %12470 = add <16 x i16> %12469, %12462
  %12471 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12466, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12472 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12470, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12473 = shufflevector <16 x i16> %12471, <16 x i16> %12472, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12474 = lshr <32 x i16> %12473, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12475 = shufflevector <32 x i16> %12474, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12476 = sext i32 %blur_x.s0.x.v1.base.s683 to i64
  %12477 = add nsw i64 %12476, %12301
  %12478 = getelementptr inbounds i16, i16* %blur_x, i64 %12477
  %12479 = bitcast i16* %12478 to <16 x i16>*
  store <16 x i16> %12475, <16 x i16>* %12479, align 2, !tbaa !399
  %12480 = shufflevector <32 x i16> %12474, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12481 = getelementptr inbounds i16, i16* %12478, i64 16
  %12482 = bitcast i16* %12481 to <16 x i16>*
  store <16 x i16> %12480, <16 x i16>* %12482, align 2, !tbaa !399
  br label %"consume blur_x684"

"consume blur_x684":                              ; preds = %"for blur_y.s0.x.x.rebased676", %"produce blur_x682"
  %12483 = sext i32 %b293 to i64
  %12484 = add nsw i64 %12304, %12483
  %12485 = getelementptr inbounds i16, i16* %blur_x, i64 %12484
  %12486 = bitcast i16* %12485 to <16 x i16>*
  %12487 = load <16 x i16>, <16 x i16>* %12486, align 2, !tbaa !399
  %12488 = getelementptr inbounds i16, i16* %12485, i64 16
  %12489 = bitcast i16* %12488 to <16 x i16>*
  %12490 = load <16 x i16>, <16 x i16>* %12489, align 2, !tbaa !399
  %12491 = add nsw i64 %12307, %12483
  %12492 = getelementptr inbounds i16, i16* %blur_x, i64 %12491
  %12493 = bitcast i16* %12492 to <16 x i16>*
  %12494 = load <16 x i16>, <16 x i16>* %12493, align 2, !tbaa !399
  %12495 = getelementptr inbounds i16, i16* %12492, i64 16
  %12496 = bitcast i16* %12495 to <16 x i16>*
  %12497 = load <16 x i16>, <16 x i16>* %12496, align 2, !tbaa !399
  %12498 = add nsw i64 %12310, %12483
  %12499 = getelementptr inbounds i16, i16* %blur_x, i64 %12498
  %12500 = bitcast i16* %12499 to <16 x i16>*
  %12501 = load <16 x i16>, <16 x i16>* %12500, align 2, !tbaa !399
  %12502 = getelementptr inbounds i16, i16* %12499, i64 16
  %12503 = bitcast i16* %12502 to <16 x i16>*
  %12504 = load <16 x i16>, <16 x i16>* %12503, align 2, !tbaa !399
  %12505 = add nsw i64 %12313, %12483
  %12506 = getelementptr inbounds i16, i16* %blur_x, i64 %12505
  %12507 = bitcast i16* %12506 to <16 x i16>*
  %12508 = load <16 x i16>, <16 x i16>* %12507, align 2, !tbaa !399
  %12509 = getelementptr inbounds i16, i16* %12506, i64 16
  %12510 = bitcast i16* %12509 to <16 x i16>*
  %12511 = load <16 x i16>, <16 x i16>* %12510, align 2, !tbaa !399
  %12512 = add nsw i64 %12316, %12483
  %12513 = getelementptr inbounds i16, i16* %blur_x, i64 %12512
  %12514 = bitcast i16* %12513 to <16 x i16>*
  %12515 = load <16 x i16>, <16 x i16>* %12514, align 2, !tbaa !399
  %12516 = getelementptr inbounds i16, i16* %12513, i64 16
  %12517 = bitcast i16* %12516 to <16 x i16>*
  %12518 = load <16 x i16>, <16 x i16>* %12517, align 2, !tbaa !399
  %12519 = add <16 x i16> %12494, %12487
  %12520 = add <16 x i16> %12519, %12501
  %12521 = add <16 x i16> %12520, %12508
  %12522 = add <16 x i16> %12521, %12515
  %12523 = add <16 x i16> %12497, %12490
  %12524 = add <16 x i16> %12523, %12504
  %12525 = add <16 x i16> %12524, %12511
  %12526 = add <16 x i16> %12525, %12518
  %12527 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12522, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12528 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12526, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12529 = shufflevector <16 x i16> %12527, <16 x i16> %12528, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12530 = lshr <32 x i16> %12529, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12531 = shufflevector <32 x i16> %12530, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12532 = add nsw i64 %12320, %12483
  %12533 = getelementptr inbounds i16, i16* %66, i64 %12532
  %12534 = bitcast i16* %12533 to <16 x i16>*
  store <16 x i16> %12531, <16 x i16>* %12534, align 2, !tbaa !401
  %12535 = shufflevector <32 x i16> %12530, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12536 = getelementptr inbounds i16, i16* %12533, i64 16
  %12537 = bitcast i16* %12536 to <16 x i16>*
  store <16 x i16> %12535, <16 x i16>* %12537, align 2, !tbaa !401
  %12538 = add nuw nsw i32 %blur_y.s0.x.x.rebased678, 1
  %.not2637 = icmp eq i32 %12538, %t1683
  br i1 %.not2637, label %"end for blur_y.s0.x.x.rebased677", label %"for blur_y.s0.x.x.rebased676"

after_bb685:                                      ; preds = %"end for blur_y.s0.x.x.rebased677", %"produce blur_x688"
  br i1 %100, label %"for blur_y.s0.x.x.rebased690.preheader", label %"end for blur_y.s0.x.x.rebased691", !prof !386

"for blur_y.s0.x.x.rebased690.preheader":         ; preds = %after_bb685
  %12539 = sext i32 %t1754 to i64
  %12540 = zext i32 %.pre-phi3390 to i64
  %12541 = mul nsw i64 %12540, %112
  %12542 = sub nsw i64 %12541, %96
  %12543 = zext i32 %.pre-phi3386 to i64
  %12544 = mul nsw i64 %12543, %112
  %12545 = sub nsw i64 %12544, %96
  %12546 = zext i32 %.pre-phi3396 to i64
  %12547 = mul nsw i64 %12546, %112
  %12548 = sub nsw i64 %12547, %96
  %12549 = zext i32 %.pre-phi3408 to i64
  %12550 = mul nsw i64 %12549, %112
  %12551 = sub nsw i64 %12550, %96
  %12552 = zext i32 %.pre-phi3402 to i64
  %12553 = mul nsw i64 %12552, %112
  %12554 = sub nsw i64 %12553, %96
  %12555 = sext i32 %a26 to i64
  %12556 = add nsw i64 %12555, 27
  %12557 = mul nsw i64 %12556, %113
  %12558 = add nsw i64 %12557, %116
  br label %"for blur_y.s0.x.x.rebased690"

"produce blur_x688":                              ; preds = %"end for blur_y.s0.x.x.rebased677"
  %12559 = getelementptr inbounds i16, i16* %read_input, i64 %169
  %12560 = getelementptr inbounds i16, i16* %12559, i64 -31
  %12561 = bitcast i16* %12560 to <16 x i16>*
  %12562 = load <16 x i16>, <16 x i16>* %12561, align 2, !tbaa !396
  %12563 = getelementptr inbounds i16, i16* %12559, i64 -15
  %12564 = bitcast i16* %12563 to <16 x i16>*
  %12565 = load <16 x i16>, <16 x i16>* %12564, align 2, !tbaa !396
  %12566 = getelementptr inbounds i16, i16* %12559, i64 -32
  %12567 = bitcast i16* %12566 to <16 x i16>*
  %12568 = load <16 x i16>, <16 x i16>* %12567, align 2, !tbaa !396
  %12569 = getelementptr inbounds i16, i16* %12559, i64 -16
  %12570 = bitcast i16* %12569 to <16 x i16>*
  %12571 = load <16 x i16>, <16 x i16>* %12570, align 2, !tbaa !396
  %12572 = getelementptr inbounds i16, i16* %12559, i64 -30
  %12573 = bitcast i16* %12572 to <16 x i16>*
  %12574 = load <16 x i16>, <16 x i16>* %12573, align 2, !tbaa !396
  %12575 = getelementptr inbounds i16, i16* %12559, i64 -14
  %12576 = bitcast i16* %12575 to <16 x i16>*
  %12577 = load <16 x i16>, <16 x i16>* %12576, align 2, !tbaa !396
  %12578 = getelementptr inbounds i16, i16* %12559, i64 -28
  %12579 = bitcast i16* %12578 to <16 x i16>*
  %12580 = load <16 x i16>, <16 x i16>* %12579, align 2, !tbaa !396
  %12581 = getelementptr inbounds i16, i16* %12559, i64 -12
  %12582 = bitcast i16* %12581 to <16 x i16>*
  %12583 = load <16 x i16>, <16 x i16>* %12582, align 2, !tbaa !396
  %12584 = getelementptr inbounds i16, i16* %12559, i64 -29
  %12585 = bitcast i16* %12584 to <16 x i16>*
  %12586 = load <16 x i16>, <16 x i16>* %12585, align 2, !tbaa !396
  %12587 = getelementptr inbounds i16, i16* %12559, i64 -13
  %12588 = bitcast i16* %12587 to <16 x i16>*
  %12589 = load <16 x i16>, <16 x i16>* %12588, align 2, !tbaa !396
  %12590 = add <16 x i16> %12568, %12562
  %12591 = add <16 x i16> %12590, %12574
  %12592 = add <16 x i16> %12591, %12580
  %12593 = add <16 x i16> %12592, %12586
  %12594 = add <16 x i16> %12571, %12565
  %12595 = add <16 x i16> %12594, %12577
  %12596 = add <16 x i16> %12595, %12583
  %12597 = add <16 x i16> %12596, %12589
  %12598 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12593, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12599 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12597, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12600 = shufflevector <16 x i16> %12598, <16 x i16> %12599, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12601 = lshr <32 x i16> %12600, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12602 = shufflevector <32 x i16> %12601, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12603 = zext i32 %.pre-phi3408 to i64
  %12604 = mul nsw i64 %97, %12603
  %12605 = add nsw i64 %99, %12604
  %12606 = getelementptr inbounds i16, i16* %blur_x, i64 %12605
  %12607 = getelementptr inbounds i16, i16* %12606, i64 -32
  %12608 = bitcast i16* %12607 to <16 x i16>*
  store <16 x i16> %12602, <16 x i16>* %12608, align 2, !tbaa !399
  %12609 = shufflevector <32 x i16> %12601, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12610 = getelementptr inbounds i16, i16* %12606, i64 -16
  %12611 = bitcast i16* %12610 to <16 x i16>*
  store <16 x i16> %12609, <16 x i16>* %12611, align 2, !tbaa !399
  %12612 = zext i32 %.pre-phi3390 to i64
  %12613 = mul nsw i64 %12612, %112
  %12614 = add nsw i64 %12613, %94
  %12615 = getelementptr inbounds i16, i16* %blur_x, i64 %12614
  %12616 = getelementptr inbounds i16, i16* %12615, i64 -32
  %12617 = bitcast i16* %12616 to <16 x i16>*
  %12618 = load <16 x i16>, <16 x i16>* %12617, align 2, !tbaa !399
  %12619 = getelementptr inbounds i16, i16* %12615, i64 -16
  %12620 = bitcast i16* %12619 to <16 x i16>*
  %12621 = load <16 x i16>, <16 x i16>* %12620, align 2, !tbaa !399
  %12622 = zext i32 %.pre-phi3386 to i64
  %12623 = mul nsw i64 %12622, %112
  %12624 = add nsw i64 %12623, %94
  %12625 = getelementptr inbounds i16, i16* %blur_x, i64 %12624
  %12626 = getelementptr inbounds i16, i16* %12625, i64 -32
  %12627 = bitcast i16* %12626 to <16 x i16>*
  %12628 = load <16 x i16>, <16 x i16>* %12627, align 2, !tbaa !399
  %12629 = getelementptr inbounds i16, i16* %12625, i64 -16
  %12630 = bitcast i16* %12629 to <16 x i16>*
  %12631 = load <16 x i16>, <16 x i16>* %12630, align 2, !tbaa !399
  %12632 = zext i32 %.pre-phi3396 to i64
  %12633 = mul nsw i64 %12632, %112
  %12634 = add nsw i64 %12633, %94
  %12635 = getelementptr inbounds i16, i16* %blur_x, i64 %12634
  %12636 = getelementptr inbounds i16, i16* %12635, i64 -32
  %12637 = bitcast i16* %12636 to <16 x i16>*
  %12638 = load <16 x i16>, <16 x i16>* %12637, align 2, !tbaa !399
  %12639 = getelementptr inbounds i16, i16* %12635, i64 -16
  %12640 = bitcast i16* %12639 to <16 x i16>*
  %12641 = load <16 x i16>, <16 x i16>* %12640, align 2, !tbaa !399
  %12642 = mul nsw i64 %12603, %112
  %12643 = add nsw i64 %12642, %94
  %12644 = getelementptr inbounds i16, i16* %blur_x, i64 %12643
  %12645 = getelementptr inbounds i16, i16* %12644, i64 -32
  %12646 = bitcast i16* %12645 to <16 x i16>*
  %12647 = load <16 x i16>, <16 x i16>* %12646, align 2, !tbaa !399
  %12648 = getelementptr inbounds i16, i16* %12644, i64 -16
  %12649 = bitcast i16* %12648 to <16 x i16>*
  %12650 = load <16 x i16>, <16 x i16>* %12649, align 2, !tbaa !399
  %12651 = zext i32 %.pre-phi3402 to i64
  %12652 = mul nsw i64 %12651, %112
  %12653 = add nsw i64 %12652, %94
  %12654 = getelementptr inbounds i16, i16* %blur_x, i64 %12653
  %12655 = getelementptr inbounds i16, i16* %12654, i64 -32
  %12656 = bitcast i16* %12655 to <16 x i16>*
  %12657 = load <16 x i16>, <16 x i16>* %12656, align 2, !tbaa !399
  %12658 = getelementptr inbounds i16, i16* %12654, i64 -16
  %12659 = bitcast i16* %12658 to <16 x i16>*
  %12660 = load <16 x i16>, <16 x i16>* %12659, align 2, !tbaa !399
  %12661 = add <16 x i16> %12628, %12618
  %12662 = add <16 x i16> %12661, %12638
  %12663 = add <16 x i16> %12662, %12647
  %12664 = add <16 x i16> %12663, %12657
  %12665 = add <16 x i16> %12631, %12621
  %12666 = add <16 x i16> %12665, %12641
  %12667 = add <16 x i16> %12666, %12650
  %12668 = add <16 x i16> %12667, %12660
  %12669 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12664, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12670 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12668, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12671 = shufflevector <16 x i16> %12669, <16 x i16> %12670, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12672 = lshr <32 x i16> %12671, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12673 = shufflevector <32 x i16> %12672, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12674 = sext i32 %a26 to i64
  %12675 = add nsw i64 %12674, 27
  %12676 = mul nsw i64 %12675, %113
  %12677 = add nsw i64 %115, %12676
  %12678 = getelementptr inbounds i16, i16* %66, i64 %12677
  %12679 = getelementptr inbounds i16, i16* %12678, i64 -32
  %12680 = bitcast i16* %12679 to <16 x i16>*
  store <16 x i16> %12673, <16 x i16>* %12680, align 2, !tbaa !401
  %12681 = shufflevector <32 x i16> %12672, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12682 = getelementptr inbounds i16, i16* %12678, i64 -16
  %12683 = bitcast i16* %12682 to <16 x i16>*
  store <16 x i16> %12681, <16 x i16>* %12683, align 2, !tbaa !401
  br label %after_bb685

"for blur_y.s0.x.x.rebased690":                   ; preds = %"for blur_y.s0.x.x.rebased690.preheader", %"consume blur_x697"
  %indvars.iv3236 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased690.preheader" ], [ %indvars.iv.next3237, %"consume blur_x697" ]
  %12684 = add nsw i64 %indvars.iv3236, %101
  %12685 = icmp slt i64 %12684, 1
  %12686 = trunc i64 %12684 to i32
  %12687 = shl nsw i32 %12686, 5
  %12688 = icmp sgt i32 %4, %12687
  %12689 = or i1 %12685, %12688
  br i1 %12689, label %"produce blur_x696", label %"for blur_y.s0.x.x.rebased690.consume blur_x697_crit_edge"

"for blur_y.s0.x.x.rebased690.consume blur_x697_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased690"
  %.pre3457 = shl nsw i64 %12684, 5
  br label %"consume blur_x697"

"end for blur_y.s0.x.x.rebased691":               ; preds = %"consume blur_x697", %after_bb685
  br i1 %102, label %"for blur_y.s0.x.x.rebased698.preheader", label %"end for blur_y.s0.x.x.rebased699", !prof !386

"for blur_y.s0.x.x.rebased698.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased691"
  %12690 = sext i32 %t1754 to i64
  %12691 = zext i32 %.pre-phi3390 to i64
  %12692 = mul nsw i64 %12691, %112
  %12693 = sub nsw i64 %12692, %96
  %12694 = zext i32 %.pre-phi3386 to i64
  %12695 = mul nsw i64 %12694, %112
  %12696 = sub nsw i64 %12695, %96
  %12697 = zext i32 %.pre-phi3396 to i64
  %12698 = mul nsw i64 %12697, %112
  %12699 = sub nsw i64 %12698, %96
  %12700 = zext i32 %.pre-phi3408 to i64
  %12701 = mul nsw i64 %12700, %112
  %12702 = sub nsw i64 %12701, %96
  %12703 = zext i32 %.pre-phi3402 to i64
  %12704 = mul nsw i64 %12703, %112
  %12705 = sub nsw i64 %12704, %96
  %12706 = sext i32 %a26 to i64
  %12707 = add nsw i64 %12706, 27
  %12708 = mul nsw i64 %12707, %113
  %12709 = add nsw i64 %12708, %116
  br label %"for blur_y.s0.x.x.rebased698"

"produce blur_x696":                              ; preds = %"for blur_y.s0.x.x.rebased690"
  %t1144 = add nsw i32 %12687, %t2137
  %12710 = sext i32 %t1144 to i64
  %12711 = getelementptr inbounds i16, i16* %read_input, i64 %12710
  %12712 = getelementptr inbounds i16, i16* %12711, i64 1
  %12713 = bitcast i16* %12712 to <16 x i16>*
  %12714 = load <16 x i16>, <16 x i16>* %12713, align 2, !tbaa !396
  %12715 = getelementptr inbounds i16, i16* %12711, i64 17
  %12716 = bitcast i16* %12715 to <16 x i16>*
  %12717 = load <16 x i16>, <16 x i16>* %12716, align 2, !tbaa !396
  %12718 = bitcast i16* %12711 to <16 x i16>*
  %12719 = load <16 x i16>, <16 x i16>* %12718, align 2, !tbaa !396
  %12720 = getelementptr inbounds i16, i16* %12711, i64 16
  %12721 = bitcast i16* %12720 to <16 x i16>*
  %12722 = load <16 x i16>, <16 x i16>* %12721, align 2, !tbaa !396
  %12723 = getelementptr inbounds i16, i16* %12711, i64 2
  %12724 = bitcast i16* %12723 to <16 x i16>*
  %12725 = load <16 x i16>, <16 x i16>* %12724, align 2, !tbaa !396
  %12726 = getelementptr inbounds i16, i16* %12711, i64 18
  %12727 = bitcast i16* %12726 to <16 x i16>*
  %12728 = load <16 x i16>, <16 x i16>* %12727, align 2, !tbaa !396
  %12729 = getelementptr inbounds i16, i16* %12711, i64 4
  %12730 = bitcast i16* %12729 to <16 x i16>*
  %12731 = load <16 x i16>, <16 x i16>* %12730, align 2, !tbaa !396
  %12732 = getelementptr inbounds i16, i16* %12711, i64 20
  %12733 = bitcast i16* %12732 to <16 x i16>*
  %12734 = load <16 x i16>, <16 x i16>* %12733, align 2, !tbaa !396
  %12735 = getelementptr inbounds i16, i16* %12711, i64 3
  %12736 = bitcast i16* %12735 to <16 x i16>*
  %12737 = load <16 x i16>, <16 x i16>* %12736, align 2, !tbaa !396
  %12738 = getelementptr inbounds i16, i16* %12711, i64 19
  %12739 = bitcast i16* %12738 to <16 x i16>*
  %12740 = load <16 x i16>, <16 x i16>* %12739, align 2, !tbaa !396
  %12741 = add <16 x i16> %12719, %12714
  %12742 = add <16 x i16> %12741, %12725
  %12743 = add <16 x i16> %12742, %12731
  %12744 = add <16 x i16> %12743, %12737
  %12745 = add <16 x i16> %12722, %12717
  %12746 = add <16 x i16> %12745, %12728
  %12747 = add <16 x i16> %12746, %12734
  %12748 = add <16 x i16> %12747, %12740
  %12749 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12744, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12750 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12748, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12751 = shufflevector <16 x i16> %12749, <16 x i16> %12750, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12752 = lshr <32 x i16> %12751, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12753 = shufflevector <32 x i16> %12752, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12754 = shl nsw i64 %12684, 5
  %12755 = add nsw i64 %12754, %12539
  %12756 = getelementptr inbounds i16, i16* %blur_x, i64 %12755
  %12757 = bitcast i16* %12756 to <16 x i16>*
  store <16 x i16> %12753, <16 x i16>* %12757, align 2, !tbaa !399
  %12758 = shufflevector <32 x i16> %12752, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12759 = getelementptr inbounds i16, i16* %12756, i64 16
  %12760 = bitcast i16* %12759 to <16 x i16>*
  store <16 x i16> %12758, <16 x i16>* %12760, align 2, !tbaa !399
  br label %"consume blur_x697"

"consume blur_x697":                              ; preds = %"for blur_y.s0.x.x.rebased690.consume blur_x697_crit_edge", %"produce blur_x696"
  %.pre-phi3458 = phi i64 [ %.pre3457, %"for blur_y.s0.x.x.rebased690.consume blur_x697_crit_edge" ], [ %12754, %"produce blur_x696" ]
  %12761 = add nsw i64 %12542, %.pre-phi3458
  %12762 = getelementptr inbounds i16, i16* %blur_x, i64 %12761
  %12763 = bitcast i16* %12762 to <16 x i16>*
  %12764 = load <16 x i16>, <16 x i16>* %12763, align 2, !tbaa !399
  %12765 = getelementptr inbounds i16, i16* %12762, i64 16
  %12766 = bitcast i16* %12765 to <16 x i16>*
  %12767 = load <16 x i16>, <16 x i16>* %12766, align 2, !tbaa !399
  %12768 = add nsw i64 %12545, %.pre-phi3458
  %12769 = getelementptr inbounds i16, i16* %blur_x, i64 %12768
  %12770 = bitcast i16* %12769 to <16 x i16>*
  %12771 = load <16 x i16>, <16 x i16>* %12770, align 2, !tbaa !399
  %12772 = getelementptr inbounds i16, i16* %12769, i64 16
  %12773 = bitcast i16* %12772 to <16 x i16>*
  %12774 = load <16 x i16>, <16 x i16>* %12773, align 2, !tbaa !399
  %12775 = add nsw i64 %12548, %.pre-phi3458
  %12776 = getelementptr inbounds i16, i16* %blur_x, i64 %12775
  %12777 = bitcast i16* %12776 to <16 x i16>*
  %12778 = load <16 x i16>, <16 x i16>* %12777, align 2, !tbaa !399
  %12779 = getelementptr inbounds i16, i16* %12776, i64 16
  %12780 = bitcast i16* %12779 to <16 x i16>*
  %12781 = load <16 x i16>, <16 x i16>* %12780, align 2, !tbaa !399
  %12782 = add nsw i64 %12551, %.pre-phi3458
  %12783 = getelementptr inbounds i16, i16* %blur_x, i64 %12782
  %12784 = bitcast i16* %12783 to <16 x i16>*
  %12785 = load <16 x i16>, <16 x i16>* %12784, align 2, !tbaa !399
  %12786 = getelementptr inbounds i16, i16* %12783, i64 16
  %12787 = bitcast i16* %12786 to <16 x i16>*
  %12788 = load <16 x i16>, <16 x i16>* %12787, align 2, !tbaa !399
  %12789 = add nsw i64 %12554, %.pre-phi3458
  %12790 = getelementptr inbounds i16, i16* %blur_x, i64 %12789
  %12791 = bitcast i16* %12790 to <16 x i16>*
  %12792 = load <16 x i16>, <16 x i16>* %12791, align 2, !tbaa !399
  %12793 = getelementptr inbounds i16, i16* %12790, i64 16
  %12794 = bitcast i16* %12793 to <16 x i16>*
  %12795 = load <16 x i16>, <16 x i16>* %12794, align 2, !tbaa !399
  %12796 = add <16 x i16> %12771, %12764
  %12797 = add <16 x i16> %12796, %12778
  %12798 = add <16 x i16> %12797, %12785
  %12799 = add <16 x i16> %12798, %12792
  %12800 = add <16 x i16> %12774, %12767
  %12801 = add <16 x i16> %12800, %12781
  %12802 = add <16 x i16> %12801, %12788
  %12803 = add <16 x i16> %12802, %12795
  %12804 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12799, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12805 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12803, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12806 = shufflevector <16 x i16> %12804, <16 x i16> %12805, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12807 = lshr <32 x i16> %12806, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12808 = shufflevector <32 x i16> %12807, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12809 = add nsw i64 %12558, %.pre-phi3458
  %12810 = getelementptr inbounds i16, i16* %66, i64 %12809
  %12811 = bitcast i16* %12810 to <16 x i16>*
  store <16 x i16> %12808, <16 x i16>* %12811, align 2, !tbaa !401
  %12812 = shufflevector <32 x i16> %12807, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12813 = getelementptr inbounds i16, i16* %12810, i64 16
  %12814 = bitcast i16* %12813 to <16 x i16>*
  store <16 x i16> %12812, <16 x i16>* %12814, align 2, !tbaa !401
  %indvars.iv.next3237 = add nuw nsw i64 %indvars.iv3236, 1
  %.not2636 = icmp eq i64 %indvars.iv.next3237, %184
  br i1 %.not2636, label %"end for blur_y.s0.x.x.rebased691", label %"for blur_y.s0.x.x.rebased690"

"for blur_y.s0.x.x.rebased698":                   ; preds = %"for blur_y.s0.x.x.rebased698.preheader", %"consume blur_x706"
  %blur_y.s0.x.x.rebased700 = phi i32 [ %12927, %"consume blur_x706" ], [ 0, %"for blur_y.s0.x.x.rebased698.preheader" ]
  %12815 = add nsw i32 %blur_y.s0.x.x.rebased700, %t1626
  %a294 = shl nsw i32 %12815, 5
  %12816 = icmp sgt i32 %a14, %a294
  %b300 = select i1 %12816, i32 %a294, i32 %a14
  %12817 = icmp slt i32 %12815, 1
  %12818 = icmp sgt i32 %4, %a294
  %12819 = or i1 %12817, %12818
  br i1 %12819, label %"produce blur_x704", label %"consume blur_x706"

"end for blur_y.s0.x.x.rebased699":               ; preds = %"consume blur_x706", %"end for blur_y.s0.x.x.rebased691"
  br i1 %34, label %"produce blur_x710", label %after_bb707

"produce blur_x704":                              ; preds = %"for blur_y.s0.x.x.rebased698"
  %12820 = icmp slt i32 %b300, %4
  %blur_x.s0.x.v1.base.s705 = select i1 %12820, i32 %b300, i32 %4
  %t1149 = add nsw i32 %blur_x.s0.x.v1.base.s705, %t2137
  %12821 = sext i32 %t1149 to i64
  %12822 = getelementptr inbounds i16, i16* %read_input, i64 %12821
  %12823 = getelementptr inbounds i16, i16* %12822, i64 1
  %12824 = bitcast i16* %12823 to <16 x i16>*
  %12825 = load <16 x i16>, <16 x i16>* %12824, align 2, !tbaa !396
  %12826 = getelementptr inbounds i16, i16* %12822, i64 17
  %12827 = bitcast i16* %12826 to <16 x i16>*
  %12828 = load <16 x i16>, <16 x i16>* %12827, align 2, !tbaa !396
  %12829 = bitcast i16* %12822 to <16 x i16>*
  %12830 = load <16 x i16>, <16 x i16>* %12829, align 2, !tbaa !396
  %12831 = getelementptr inbounds i16, i16* %12822, i64 16
  %12832 = bitcast i16* %12831 to <16 x i16>*
  %12833 = load <16 x i16>, <16 x i16>* %12832, align 2, !tbaa !396
  %12834 = getelementptr inbounds i16, i16* %12822, i64 2
  %12835 = bitcast i16* %12834 to <16 x i16>*
  %12836 = load <16 x i16>, <16 x i16>* %12835, align 2, !tbaa !396
  %12837 = getelementptr inbounds i16, i16* %12822, i64 18
  %12838 = bitcast i16* %12837 to <16 x i16>*
  %12839 = load <16 x i16>, <16 x i16>* %12838, align 2, !tbaa !396
  %12840 = getelementptr inbounds i16, i16* %12822, i64 4
  %12841 = bitcast i16* %12840 to <16 x i16>*
  %12842 = load <16 x i16>, <16 x i16>* %12841, align 2, !tbaa !396
  %12843 = getelementptr inbounds i16, i16* %12822, i64 20
  %12844 = bitcast i16* %12843 to <16 x i16>*
  %12845 = load <16 x i16>, <16 x i16>* %12844, align 2, !tbaa !396
  %12846 = getelementptr inbounds i16, i16* %12822, i64 3
  %12847 = bitcast i16* %12846 to <16 x i16>*
  %12848 = load <16 x i16>, <16 x i16>* %12847, align 2, !tbaa !396
  %12849 = getelementptr inbounds i16, i16* %12822, i64 19
  %12850 = bitcast i16* %12849 to <16 x i16>*
  %12851 = load <16 x i16>, <16 x i16>* %12850, align 2, !tbaa !396
  %12852 = add <16 x i16> %12830, %12825
  %12853 = add <16 x i16> %12852, %12836
  %12854 = add <16 x i16> %12853, %12842
  %12855 = add <16 x i16> %12854, %12848
  %12856 = add <16 x i16> %12833, %12828
  %12857 = add <16 x i16> %12856, %12839
  %12858 = add <16 x i16> %12857, %12845
  %12859 = add <16 x i16> %12858, %12851
  %12860 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12855, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12861 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12859, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12862 = shufflevector <16 x i16> %12860, <16 x i16> %12861, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12863 = lshr <32 x i16> %12862, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12864 = shufflevector <32 x i16> %12863, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12865 = sext i32 %blur_x.s0.x.v1.base.s705 to i64
  %12866 = add nsw i64 %12865, %12690
  %12867 = getelementptr inbounds i16, i16* %blur_x, i64 %12866
  %12868 = bitcast i16* %12867 to <16 x i16>*
  store <16 x i16> %12864, <16 x i16>* %12868, align 2, !tbaa !399
  %12869 = shufflevector <32 x i16> %12863, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12870 = getelementptr inbounds i16, i16* %12867, i64 16
  %12871 = bitcast i16* %12870 to <16 x i16>*
  store <16 x i16> %12869, <16 x i16>* %12871, align 2, !tbaa !399
  br label %"consume blur_x706"

"consume blur_x706":                              ; preds = %"for blur_y.s0.x.x.rebased698", %"produce blur_x704"
  %12872 = sext i32 %b300 to i64
  %12873 = add nsw i64 %12693, %12872
  %12874 = getelementptr inbounds i16, i16* %blur_x, i64 %12873
  %12875 = bitcast i16* %12874 to <16 x i16>*
  %12876 = load <16 x i16>, <16 x i16>* %12875, align 2, !tbaa !399
  %12877 = getelementptr inbounds i16, i16* %12874, i64 16
  %12878 = bitcast i16* %12877 to <16 x i16>*
  %12879 = load <16 x i16>, <16 x i16>* %12878, align 2, !tbaa !399
  %12880 = add nsw i64 %12696, %12872
  %12881 = getelementptr inbounds i16, i16* %blur_x, i64 %12880
  %12882 = bitcast i16* %12881 to <16 x i16>*
  %12883 = load <16 x i16>, <16 x i16>* %12882, align 2, !tbaa !399
  %12884 = getelementptr inbounds i16, i16* %12881, i64 16
  %12885 = bitcast i16* %12884 to <16 x i16>*
  %12886 = load <16 x i16>, <16 x i16>* %12885, align 2, !tbaa !399
  %12887 = add nsw i64 %12699, %12872
  %12888 = getelementptr inbounds i16, i16* %blur_x, i64 %12887
  %12889 = bitcast i16* %12888 to <16 x i16>*
  %12890 = load <16 x i16>, <16 x i16>* %12889, align 2, !tbaa !399
  %12891 = getelementptr inbounds i16, i16* %12888, i64 16
  %12892 = bitcast i16* %12891 to <16 x i16>*
  %12893 = load <16 x i16>, <16 x i16>* %12892, align 2, !tbaa !399
  %12894 = add nsw i64 %12702, %12872
  %12895 = getelementptr inbounds i16, i16* %blur_x, i64 %12894
  %12896 = bitcast i16* %12895 to <16 x i16>*
  %12897 = load <16 x i16>, <16 x i16>* %12896, align 2, !tbaa !399
  %12898 = getelementptr inbounds i16, i16* %12895, i64 16
  %12899 = bitcast i16* %12898 to <16 x i16>*
  %12900 = load <16 x i16>, <16 x i16>* %12899, align 2, !tbaa !399
  %12901 = add nsw i64 %12705, %12872
  %12902 = getelementptr inbounds i16, i16* %blur_x, i64 %12901
  %12903 = bitcast i16* %12902 to <16 x i16>*
  %12904 = load <16 x i16>, <16 x i16>* %12903, align 2, !tbaa !399
  %12905 = getelementptr inbounds i16, i16* %12902, i64 16
  %12906 = bitcast i16* %12905 to <16 x i16>*
  %12907 = load <16 x i16>, <16 x i16>* %12906, align 2, !tbaa !399
  %12908 = add <16 x i16> %12883, %12876
  %12909 = add <16 x i16> %12908, %12890
  %12910 = add <16 x i16> %12909, %12897
  %12911 = add <16 x i16> %12910, %12904
  %12912 = add <16 x i16> %12886, %12879
  %12913 = add <16 x i16> %12912, %12893
  %12914 = add <16 x i16> %12913, %12900
  %12915 = add <16 x i16> %12914, %12907
  %12916 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12911, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12917 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12915, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12918 = shufflevector <16 x i16> %12916, <16 x i16> %12917, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12919 = lshr <32 x i16> %12918, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12920 = shufflevector <32 x i16> %12919, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12921 = add nsw i64 %12709, %12872
  %12922 = getelementptr inbounds i16, i16* %66, i64 %12921
  %12923 = bitcast i16* %12922 to <16 x i16>*
  store <16 x i16> %12920, <16 x i16>* %12923, align 2, !tbaa !401
  %12924 = shufflevector <32 x i16> %12919, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12925 = getelementptr inbounds i16, i16* %12922, i64 16
  %12926 = bitcast i16* %12925 to <16 x i16>*
  store <16 x i16> %12924, <16 x i16>* %12926, align 2, !tbaa !401
  %12927 = add nuw nsw i32 %blur_y.s0.x.x.rebased700, 1
  %.not2635 = icmp eq i32 %12927, %t1683
  br i1 %.not2635, label %"end for blur_y.s0.x.x.rebased699", label %"for blur_y.s0.x.x.rebased698"

after_bb707:                                      ; preds = %"end for blur_y.s0.x.x.rebased699", %"produce blur_x710"
  br i1 %100, label %"for blur_y.s0.x.x.rebased712.preheader", label %"end for blur_y.s0.x.x.rebased713", !prof !386

"for blur_y.s0.x.x.rebased712.preheader":         ; preds = %after_bb707
  %12928 = sext i32 %t1682 to i64
  %12929 = zext i32 %.pre-phi3396 to i64
  %12930 = mul nsw i64 %12929, %112
  %12931 = sub nsw i64 %12930, %96
  %12932 = zext i32 %.pre-phi3390 to i64
  %12933 = mul nsw i64 %12932, %112
  %12934 = sub nsw i64 %12933, %96
  %12935 = zext i32 %.pre-phi3402 to i64
  %12936 = mul nsw i64 %12935, %112
  %12937 = sub nsw i64 %12936, %96
  %12938 = zext i32 %.pre-phi to i64
  %12939 = mul nsw i64 %12938, %112
  %12940 = sub nsw i64 %12939, %96
  %12941 = zext i32 %.pre-phi3408 to i64
  %12942 = mul nsw i64 %12941, %112
  %12943 = sub nsw i64 %12942, %96
  %12944 = sext i32 %a26 to i64
  %12945 = add nsw i64 %12944, 28
  %12946 = mul nsw i64 %12945, %113
  %12947 = add nsw i64 %12946, %116
  br label %"for blur_y.s0.x.x.rebased712"

"produce blur_x710":                              ; preds = %"end for blur_y.s0.x.x.rebased699"
  %12948 = getelementptr inbounds i16, i16* %read_input, i64 %171
  %12949 = getelementptr inbounds i16, i16* %12948, i64 -31
  %12950 = bitcast i16* %12949 to <16 x i16>*
  %12951 = load <16 x i16>, <16 x i16>* %12950, align 2, !tbaa !396
  %12952 = getelementptr inbounds i16, i16* %12948, i64 -15
  %12953 = bitcast i16* %12952 to <16 x i16>*
  %12954 = load <16 x i16>, <16 x i16>* %12953, align 2, !tbaa !396
  %12955 = getelementptr inbounds i16, i16* %12948, i64 -32
  %12956 = bitcast i16* %12955 to <16 x i16>*
  %12957 = load <16 x i16>, <16 x i16>* %12956, align 2, !tbaa !396
  %12958 = getelementptr inbounds i16, i16* %12948, i64 -16
  %12959 = bitcast i16* %12958 to <16 x i16>*
  %12960 = load <16 x i16>, <16 x i16>* %12959, align 2, !tbaa !396
  %12961 = getelementptr inbounds i16, i16* %12948, i64 -30
  %12962 = bitcast i16* %12961 to <16 x i16>*
  %12963 = load <16 x i16>, <16 x i16>* %12962, align 2, !tbaa !396
  %12964 = getelementptr inbounds i16, i16* %12948, i64 -14
  %12965 = bitcast i16* %12964 to <16 x i16>*
  %12966 = load <16 x i16>, <16 x i16>* %12965, align 2, !tbaa !396
  %12967 = getelementptr inbounds i16, i16* %12948, i64 -28
  %12968 = bitcast i16* %12967 to <16 x i16>*
  %12969 = load <16 x i16>, <16 x i16>* %12968, align 2, !tbaa !396
  %12970 = getelementptr inbounds i16, i16* %12948, i64 -12
  %12971 = bitcast i16* %12970 to <16 x i16>*
  %12972 = load <16 x i16>, <16 x i16>* %12971, align 2, !tbaa !396
  %12973 = getelementptr inbounds i16, i16* %12948, i64 -29
  %12974 = bitcast i16* %12973 to <16 x i16>*
  %12975 = load <16 x i16>, <16 x i16>* %12974, align 2, !tbaa !396
  %12976 = getelementptr inbounds i16, i16* %12948, i64 -13
  %12977 = bitcast i16* %12976 to <16 x i16>*
  %12978 = load <16 x i16>, <16 x i16>* %12977, align 2, !tbaa !396
  %12979 = add <16 x i16> %12957, %12951
  %12980 = add <16 x i16> %12979, %12963
  %12981 = add <16 x i16> %12980, %12969
  %12982 = add <16 x i16> %12981, %12975
  %12983 = add <16 x i16> %12960, %12954
  %12984 = add <16 x i16> %12983, %12966
  %12985 = add <16 x i16> %12984, %12972
  %12986 = add <16 x i16> %12985, %12978
  %12987 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12982, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12988 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12986, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %12989 = shufflevector <16 x i16> %12987, <16 x i16> %12988, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12990 = lshr <32 x i16> %12989, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %12991 = shufflevector <32 x i16> %12990, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12992 = zext i32 %.pre-phi to i64
  %12993 = mul nsw i64 %97, %12992
  %12994 = add nsw i64 %99, %12993
  %12995 = getelementptr inbounds i16, i16* %blur_x, i64 %12994
  %12996 = getelementptr inbounds i16, i16* %12995, i64 -32
  %12997 = bitcast i16* %12996 to <16 x i16>*
  store <16 x i16> %12991, <16 x i16>* %12997, align 2, !tbaa !399
  %12998 = shufflevector <32 x i16> %12990, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12999 = getelementptr inbounds i16, i16* %12995, i64 -16
  %13000 = bitcast i16* %12999 to <16 x i16>*
  store <16 x i16> %12998, <16 x i16>* %13000, align 2, !tbaa !399
  %13001 = zext i32 %.pre-phi3396 to i64
  %13002 = mul nsw i64 %13001, %112
  %13003 = add nsw i64 %13002, %94
  %13004 = getelementptr inbounds i16, i16* %blur_x, i64 %13003
  %13005 = getelementptr inbounds i16, i16* %13004, i64 -32
  %13006 = bitcast i16* %13005 to <16 x i16>*
  %13007 = load <16 x i16>, <16 x i16>* %13006, align 2, !tbaa !399
  %13008 = getelementptr inbounds i16, i16* %13004, i64 -16
  %13009 = bitcast i16* %13008 to <16 x i16>*
  %13010 = load <16 x i16>, <16 x i16>* %13009, align 2, !tbaa !399
  %13011 = zext i32 %.pre-phi3390 to i64
  %13012 = mul nsw i64 %13011, %112
  %13013 = add nsw i64 %13012, %94
  %13014 = getelementptr inbounds i16, i16* %blur_x, i64 %13013
  %13015 = getelementptr inbounds i16, i16* %13014, i64 -32
  %13016 = bitcast i16* %13015 to <16 x i16>*
  %13017 = load <16 x i16>, <16 x i16>* %13016, align 2, !tbaa !399
  %13018 = getelementptr inbounds i16, i16* %13014, i64 -16
  %13019 = bitcast i16* %13018 to <16 x i16>*
  %13020 = load <16 x i16>, <16 x i16>* %13019, align 2, !tbaa !399
  %13021 = zext i32 %.pre-phi3402 to i64
  %13022 = mul nsw i64 %13021, %112
  %13023 = add nsw i64 %13022, %94
  %13024 = getelementptr inbounds i16, i16* %blur_x, i64 %13023
  %13025 = getelementptr inbounds i16, i16* %13024, i64 -32
  %13026 = bitcast i16* %13025 to <16 x i16>*
  %13027 = load <16 x i16>, <16 x i16>* %13026, align 2, !tbaa !399
  %13028 = getelementptr inbounds i16, i16* %13024, i64 -16
  %13029 = bitcast i16* %13028 to <16 x i16>*
  %13030 = load <16 x i16>, <16 x i16>* %13029, align 2, !tbaa !399
  %13031 = mul nsw i64 %12992, %112
  %13032 = add nsw i64 %13031, %94
  %13033 = getelementptr inbounds i16, i16* %blur_x, i64 %13032
  %13034 = getelementptr inbounds i16, i16* %13033, i64 -32
  %13035 = bitcast i16* %13034 to <16 x i16>*
  %13036 = load <16 x i16>, <16 x i16>* %13035, align 2, !tbaa !399
  %13037 = getelementptr inbounds i16, i16* %13033, i64 -16
  %13038 = bitcast i16* %13037 to <16 x i16>*
  %13039 = load <16 x i16>, <16 x i16>* %13038, align 2, !tbaa !399
  %13040 = zext i32 %.pre-phi3408 to i64
  %13041 = mul nsw i64 %13040, %112
  %13042 = add nsw i64 %13041, %94
  %13043 = getelementptr inbounds i16, i16* %blur_x, i64 %13042
  %13044 = getelementptr inbounds i16, i16* %13043, i64 -32
  %13045 = bitcast i16* %13044 to <16 x i16>*
  %13046 = load <16 x i16>, <16 x i16>* %13045, align 2, !tbaa !399
  %13047 = getelementptr inbounds i16, i16* %13043, i64 -16
  %13048 = bitcast i16* %13047 to <16 x i16>*
  %13049 = load <16 x i16>, <16 x i16>* %13048, align 2, !tbaa !399
  %13050 = add <16 x i16> %13017, %13007
  %13051 = add <16 x i16> %13050, %13027
  %13052 = add <16 x i16> %13051, %13036
  %13053 = add <16 x i16> %13052, %13046
  %13054 = add <16 x i16> %13020, %13010
  %13055 = add <16 x i16> %13054, %13030
  %13056 = add <16 x i16> %13055, %13039
  %13057 = add <16 x i16> %13056, %13049
  %13058 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13053, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13059 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13057, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13060 = shufflevector <16 x i16> %13058, <16 x i16> %13059, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13061 = lshr <32 x i16> %13060, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13062 = shufflevector <32 x i16> %13061, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13063 = sext i32 %a26 to i64
  %13064 = add nsw i64 %13063, 28
  %13065 = mul nsw i64 %13064, %113
  %13066 = add nsw i64 %115, %13065
  %13067 = getelementptr inbounds i16, i16* %66, i64 %13066
  %13068 = getelementptr inbounds i16, i16* %13067, i64 -32
  %13069 = bitcast i16* %13068 to <16 x i16>*
  store <16 x i16> %13062, <16 x i16>* %13069, align 2, !tbaa !401
  %13070 = shufflevector <32 x i16> %13061, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13071 = getelementptr inbounds i16, i16* %13067, i64 -16
  %13072 = bitcast i16* %13071 to <16 x i16>*
  store <16 x i16> %13070, <16 x i16>* %13072, align 2, !tbaa !401
  br label %after_bb707

"for blur_y.s0.x.x.rebased712":                   ; preds = %"for blur_y.s0.x.x.rebased712.preheader", %"consume blur_x719"
  %indvars.iv3239 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased712.preheader" ], [ %indvars.iv.next3240, %"consume blur_x719" ]
  %13073 = add nsw i64 %indvars.iv3239, %101
  %13074 = icmp slt i64 %13073, 1
  %13075 = trunc i64 %13073 to i32
  %13076 = shl nsw i32 %13075, 5
  %13077 = icmp sgt i32 %4, %13076
  %13078 = or i1 %13074, %13077
  br i1 %13078, label %"produce blur_x718", label %"for blur_y.s0.x.x.rebased712.consume blur_x719_crit_edge"

"for blur_y.s0.x.x.rebased712.consume blur_x719_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased712"
  %.pre3459 = shl nsw i64 %13073, 5
  br label %"consume blur_x719"

"end for blur_y.s0.x.x.rebased713":               ; preds = %"consume blur_x719", %after_bb707
  br i1 %102, label %"for blur_y.s0.x.x.rebased720.preheader", label %"end for blur_y.s0.x.x.rebased721", !prof !386

"for blur_y.s0.x.x.rebased720.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased713"
  %13079 = sext i32 %t1682 to i64
  %13080 = zext i32 %.pre-phi3396 to i64
  %13081 = mul nsw i64 %13080, %112
  %13082 = sub nsw i64 %13081, %96
  %13083 = zext i32 %.pre-phi3390 to i64
  %13084 = mul nsw i64 %13083, %112
  %13085 = sub nsw i64 %13084, %96
  %13086 = zext i32 %.pre-phi3402 to i64
  %13087 = mul nsw i64 %13086, %112
  %13088 = sub nsw i64 %13087, %96
  %13089 = zext i32 %.pre-phi to i64
  %13090 = mul nsw i64 %13089, %112
  %13091 = sub nsw i64 %13090, %96
  %13092 = zext i32 %.pre-phi3408 to i64
  %13093 = mul nsw i64 %13092, %112
  %13094 = sub nsw i64 %13093, %96
  %13095 = sext i32 %a26 to i64
  %13096 = add nsw i64 %13095, 28
  %13097 = mul nsw i64 %13096, %113
  %13098 = add nsw i64 %13097, %116
  br label %"for blur_y.s0.x.x.rebased720"

"produce blur_x718":                              ; preds = %"for blur_y.s0.x.x.rebased712"
  %t1160 = add nsw i32 %13076, %t2153
  %13099 = sext i32 %t1160 to i64
  %13100 = getelementptr inbounds i16, i16* %read_input, i64 %13099
  %13101 = getelementptr inbounds i16, i16* %13100, i64 1
  %13102 = bitcast i16* %13101 to <16 x i16>*
  %13103 = load <16 x i16>, <16 x i16>* %13102, align 2, !tbaa !396
  %13104 = getelementptr inbounds i16, i16* %13100, i64 17
  %13105 = bitcast i16* %13104 to <16 x i16>*
  %13106 = load <16 x i16>, <16 x i16>* %13105, align 2, !tbaa !396
  %13107 = bitcast i16* %13100 to <16 x i16>*
  %13108 = load <16 x i16>, <16 x i16>* %13107, align 2, !tbaa !396
  %13109 = getelementptr inbounds i16, i16* %13100, i64 16
  %13110 = bitcast i16* %13109 to <16 x i16>*
  %13111 = load <16 x i16>, <16 x i16>* %13110, align 2, !tbaa !396
  %13112 = getelementptr inbounds i16, i16* %13100, i64 2
  %13113 = bitcast i16* %13112 to <16 x i16>*
  %13114 = load <16 x i16>, <16 x i16>* %13113, align 2, !tbaa !396
  %13115 = getelementptr inbounds i16, i16* %13100, i64 18
  %13116 = bitcast i16* %13115 to <16 x i16>*
  %13117 = load <16 x i16>, <16 x i16>* %13116, align 2, !tbaa !396
  %13118 = getelementptr inbounds i16, i16* %13100, i64 4
  %13119 = bitcast i16* %13118 to <16 x i16>*
  %13120 = load <16 x i16>, <16 x i16>* %13119, align 2, !tbaa !396
  %13121 = getelementptr inbounds i16, i16* %13100, i64 20
  %13122 = bitcast i16* %13121 to <16 x i16>*
  %13123 = load <16 x i16>, <16 x i16>* %13122, align 2, !tbaa !396
  %13124 = getelementptr inbounds i16, i16* %13100, i64 3
  %13125 = bitcast i16* %13124 to <16 x i16>*
  %13126 = load <16 x i16>, <16 x i16>* %13125, align 2, !tbaa !396
  %13127 = getelementptr inbounds i16, i16* %13100, i64 19
  %13128 = bitcast i16* %13127 to <16 x i16>*
  %13129 = load <16 x i16>, <16 x i16>* %13128, align 2, !tbaa !396
  %13130 = add <16 x i16> %13108, %13103
  %13131 = add <16 x i16> %13130, %13114
  %13132 = add <16 x i16> %13131, %13120
  %13133 = add <16 x i16> %13132, %13126
  %13134 = add <16 x i16> %13111, %13106
  %13135 = add <16 x i16> %13134, %13117
  %13136 = add <16 x i16> %13135, %13123
  %13137 = add <16 x i16> %13136, %13129
  %13138 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13133, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13139 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13137, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13140 = shufflevector <16 x i16> %13138, <16 x i16> %13139, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13141 = lshr <32 x i16> %13140, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13142 = shufflevector <32 x i16> %13141, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13143 = shl nsw i64 %13073, 5
  %13144 = add nsw i64 %13143, %12928
  %13145 = getelementptr inbounds i16, i16* %blur_x, i64 %13144
  %13146 = bitcast i16* %13145 to <16 x i16>*
  store <16 x i16> %13142, <16 x i16>* %13146, align 2, !tbaa !399
  %13147 = shufflevector <32 x i16> %13141, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13148 = getelementptr inbounds i16, i16* %13145, i64 16
  %13149 = bitcast i16* %13148 to <16 x i16>*
  store <16 x i16> %13147, <16 x i16>* %13149, align 2, !tbaa !399
  br label %"consume blur_x719"

"consume blur_x719":                              ; preds = %"for blur_y.s0.x.x.rebased712.consume blur_x719_crit_edge", %"produce blur_x718"
  %.pre-phi3460 = phi i64 [ %.pre3459, %"for blur_y.s0.x.x.rebased712.consume blur_x719_crit_edge" ], [ %13143, %"produce blur_x718" ]
  %13150 = add nsw i64 %12931, %.pre-phi3460
  %13151 = getelementptr inbounds i16, i16* %blur_x, i64 %13150
  %13152 = bitcast i16* %13151 to <16 x i16>*
  %13153 = load <16 x i16>, <16 x i16>* %13152, align 2, !tbaa !399
  %13154 = getelementptr inbounds i16, i16* %13151, i64 16
  %13155 = bitcast i16* %13154 to <16 x i16>*
  %13156 = load <16 x i16>, <16 x i16>* %13155, align 2, !tbaa !399
  %13157 = add nsw i64 %12934, %.pre-phi3460
  %13158 = getelementptr inbounds i16, i16* %blur_x, i64 %13157
  %13159 = bitcast i16* %13158 to <16 x i16>*
  %13160 = load <16 x i16>, <16 x i16>* %13159, align 2, !tbaa !399
  %13161 = getelementptr inbounds i16, i16* %13158, i64 16
  %13162 = bitcast i16* %13161 to <16 x i16>*
  %13163 = load <16 x i16>, <16 x i16>* %13162, align 2, !tbaa !399
  %13164 = add nsw i64 %12937, %.pre-phi3460
  %13165 = getelementptr inbounds i16, i16* %blur_x, i64 %13164
  %13166 = bitcast i16* %13165 to <16 x i16>*
  %13167 = load <16 x i16>, <16 x i16>* %13166, align 2, !tbaa !399
  %13168 = getelementptr inbounds i16, i16* %13165, i64 16
  %13169 = bitcast i16* %13168 to <16 x i16>*
  %13170 = load <16 x i16>, <16 x i16>* %13169, align 2, !tbaa !399
  %13171 = add nsw i64 %12940, %.pre-phi3460
  %13172 = getelementptr inbounds i16, i16* %blur_x, i64 %13171
  %13173 = bitcast i16* %13172 to <16 x i16>*
  %13174 = load <16 x i16>, <16 x i16>* %13173, align 2, !tbaa !399
  %13175 = getelementptr inbounds i16, i16* %13172, i64 16
  %13176 = bitcast i16* %13175 to <16 x i16>*
  %13177 = load <16 x i16>, <16 x i16>* %13176, align 2, !tbaa !399
  %13178 = add nsw i64 %12943, %.pre-phi3460
  %13179 = getelementptr inbounds i16, i16* %blur_x, i64 %13178
  %13180 = bitcast i16* %13179 to <16 x i16>*
  %13181 = load <16 x i16>, <16 x i16>* %13180, align 2, !tbaa !399
  %13182 = getelementptr inbounds i16, i16* %13179, i64 16
  %13183 = bitcast i16* %13182 to <16 x i16>*
  %13184 = load <16 x i16>, <16 x i16>* %13183, align 2, !tbaa !399
  %13185 = add <16 x i16> %13160, %13153
  %13186 = add <16 x i16> %13185, %13167
  %13187 = add <16 x i16> %13186, %13174
  %13188 = add <16 x i16> %13187, %13181
  %13189 = add <16 x i16> %13163, %13156
  %13190 = add <16 x i16> %13189, %13170
  %13191 = add <16 x i16> %13190, %13177
  %13192 = add <16 x i16> %13191, %13184
  %13193 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13188, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13194 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13192, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13195 = shufflevector <16 x i16> %13193, <16 x i16> %13194, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13196 = lshr <32 x i16> %13195, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13197 = shufflevector <32 x i16> %13196, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13198 = add nsw i64 %12947, %.pre-phi3460
  %13199 = getelementptr inbounds i16, i16* %66, i64 %13198
  %13200 = bitcast i16* %13199 to <16 x i16>*
  store <16 x i16> %13197, <16 x i16>* %13200, align 2, !tbaa !401
  %13201 = shufflevector <32 x i16> %13196, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13202 = getelementptr inbounds i16, i16* %13199, i64 16
  %13203 = bitcast i16* %13202 to <16 x i16>*
  store <16 x i16> %13201, <16 x i16>* %13203, align 2, !tbaa !401
  %indvars.iv.next3240 = add nuw nsw i64 %indvars.iv3239, 1
  %.not2634 = icmp eq i64 %indvars.iv.next3240, %184
  br i1 %.not2634, label %"end for blur_y.s0.x.x.rebased713", label %"for blur_y.s0.x.x.rebased712"

"for blur_y.s0.x.x.rebased720":                   ; preds = %"for blur_y.s0.x.x.rebased720.preheader", %"consume blur_x728"
  %blur_y.s0.x.x.rebased722 = phi i32 [ %13316, %"consume blur_x728" ], [ 0, %"for blur_y.s0.x.x.rebased720.preheader" ]
  %13204 = add nsw i32 %blur_y.s0.x.x.rebased722, %t1626
  %a301 = shl nsw i32 %13204, 5
  %13205 = icmp sgt i32 %a14, %a301
  %b307 = select i1 %13205, i32 %a301, i32 %a14
  %13206 = icmp slt i32 %13204, 1
  %13207 = icmp sgt i32 %4, %a301
  %13208 = or i1 %13206, %13207
  br i1 %13208, label %"produce blur_x726", label %"consume blur_x728"

"end for blur_y.s0.x.x.rebased721":               ; preds = %"consume blur_x728", %"end for blur_y.s0.x.x.rebased713"
  br i1 %34, label %"produce blur_x732", label %after_bb729

"produce blur_x726":                              ; preds = %"for blur_y.s0.x.x.rebased720"
  %13209 = icmp slt i32 %b307, %4
  %blur_x.s0.x.v1.base.s727 = select i1 %13209, i32 %b307, i32 %4
  %t1165 = add nsw i32 %blur_x.s0.x.v1.base.s727, %t2153
  %13210 = sext i32 %t1165 to i64
  %13211 = getelementptr inbounds i16, i16* %read_input, i64 %13210
  %13212 = getelementptr inbounds i16, i16* %13211, i64 1
  %13213 = bitcast i16* %13212 to <16 x i16>*
  %13214 = load <16 x i16>, <16 x i16>* %13213, align 2, !tbaa !396
  %13215 = getelementptr inbounds i16, i16* %13211, i64 17
  %13216 = bitcast i16* %13215 to <16 x i16>*
  %13217 = load <16 x i16>, <16 x i16>* %13216, align 2, !tbaa !396
  %13218 = bitcast i16* %13211 to <16 x i16>*
  %13219 = load <16 x i16>, <16 x i16>* %13218, align 2, !tbaa !396
  %13220 = getelementptr inbounds i16, i16* %13211, i64 16
  %13221 = bitcast i16* %13220 to <16 x i16>*
  %13222 = load <16 x i16>, <16 x i16>* %13221, align 2, !tbaa !396
  %13223 = getelementptr inbounds i16, i16* %13211, i64 2
  %13224 = bitcast i16* %13223 to <16 x i16>*
  %13225 = load <16 x i16>, <16 x i16>* %13224, align 2, !tbaa !396
  %13226 = getelementptr inbounds i16, i16* %13211, i64 18
  %13227 = bitcast i16* %13226 to <16 x i16>*
  %13228 = load <16 x i16>, <16 x i16>* %13227, align 2, !tbaa !396
  %13229 = getelementptr inbounds i16, i16* %13211, i64 4
  %13230 = bitcast i16* %13229 to <16 x i16>*
  %13231 = load <16 x i16>, <16 x i16>* %13230, align 2, !tbaa !396
  %13232 = getelementptr inbounds i16, i16* %13211, i64 20
  %13233 = bitcast i16* %13232 to <16 x i16>*
  %13234 = load <16 x i16>, <16 x i16>* %13233, align 2, !tbaa !396
  %13235 = getelementptr inbounds i16, i16* %13211, i64 3
  %13236 = bitcast i16* %13235 to <16 x i16>*
  %13237 = load <16 x i16>, <16 x i16>* %13236, align 2, !tbaa !396
  %13238 = getelementptr inbounds i16, i16* %13211, i64 19
  %13239 = bitcast i16* %13238 to <16 x i16>*
  %13240 = load <16 x i16>, <16 x i16>* %13239, align 2, !tbaa !396
  %13241 = add <16 x i16> %13219, %13214
  %13242 = add <16 x i16> %13241, %13225
  %13243 = add <16 x i16> %13242, %13231
  %13244 = add <16 x i16> %13243, %13237
  %13245 = add <16 x i16> %13222, %13217
  %13246 = add <16 x i16> %13245, %13228
  %13247 = add <16 x i16> %13246, %13234
  %13248 = add <16 x i16> %13247, %13240
  %13249 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13244, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13250 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13248, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13251 = shufflevector <16 x i16> %13249, <16 x i16> %13250, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13252 = lshr <32 x i16> %13251, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13253 = shufflevector <32 x i16> %13252, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13254 = sext i32 %blur_x.s0.x.v1.base.s727 to i64
  %13255 = add nsw i64 %13254, %13079
  %13256 = getelementptr inbounds i16, i16* %blur_x, i64 %13255
  %13257 = bitcast i16* %13256 to <16 x i16>*
  store <16 x i16> %13253, <16 x i16>* %13257, align 2, !tbaa !399
  %13258 = shufflevector <32 x i16> %13252, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13259 = getelementptr inbounds i16, i16* %13256, i64 16
  %13260 = bitcast i16* %13259 to <16 x i16>*
  store <16 x i16> %13258, <16 x i16>* %13260, align 2, !tbaa !399
  br label %"consume blur_x728"

"consume blur_x728":                              ; preds = %"for blur_y.s0.x.x.rebased720", %"produce blur_x726"
  %13261 = sext i32 %b307 to i64
  %13262 = add nsw i64 %13082, %13261
  %13263 = getelementptr inbounds i16, i16* %blur_x, i64 %13262
  %13264 = bitcast i16* %13263 to <16 x i16>*
  %13265 = load <16 x i16>, <16 x i16>* %13264, align 2, !tbaa !399
  %13266 = getelementptr inbounds i16, i16* %13263, i64 16
  %13267 = bitcast i16* %13266 to <16 x i16>*
  %13268 = load <16 x i16>, <16 x i16>* %13267, align 2, !tbaa !399
  %13269 = add nsw i64 %13085, %13261
  %13270 = getelementptr inbounds i16, i16* %blur_x, i64 %13269
  %13271 = bitcast i16* %13270 to <16 x i16>*
  %13272 = load <16 x i16>, <16 x i16>* %13271, align 2, !tbaa !399
  %13273 = getelementptr inbounds i16, i16* %13270, i64 16
  %13274 = bitcast i16* %13273 to <16 x i16>*
  %13275 = load <16 x i16>, <16 x i16>* %13274, align 2, !tbaa !399
  %13276 = add nsw i64 %13088, %13261
  %13277 = getelementptr inbounds i16, i16* %blur_x, i64 %13276
  %13278 = bitcast i16* %13277 to <16 x i16>*
  %13279 = load <16 x i16>, <16 x i16>* %13278, align 2, !tbaa !399
  %13280 = getelementptr inbounds i16, i16* %13277, i64 16
  %13281 = bitcast i16* %13280 to <16 x i16>*
  %13282 = load <16 x i16>, <16 x i16>* %13281, align 2, !tbaa !399
  %13283 = add nsw i64 %13091, %13261
  %13284 = getelementptr inbounds i16, i16* %blur_x, i64 %13283
  %13285 = bitcast i16* %13284 to <16 x i16>*
  %13286 = load <16 x i16>, <16 x i16>* %13285, align 2, !tbaa !399
  %13287 = getelementptr inbounds i16, i16* %13284, i64 16
  %13288 = bitcast i16* %13287 to <16 x i16>*
  %13289 = load <16 x i16>, <16 x i16>* %13288, align 2, !tbaa !399
  %13290 = add nsw i64 %13094, %13261
  %13291 = getelementptr inbounds i16, i16* %blur_x, i64 %13290
  %13292 = bitcast i16* %13291 to <16 x i16>*
  %13293 = load <16 x i16>, <16 x i16>* %13292, align 2, !tbaa !399
  %13294 = getelementptr inbounds i16, i16* %13291, i64 16
  %13295 = bitcast i16* %13294 to <16 x i16>*
  %13296 = load <16 x i16>, <16 x i16>* %13295, align 2, !tbaa !399
  %13297 = add <16 x i16> %13272, %13265
  %13298 = add <16 x i16> %13297, %13279
  %13299 = add <16 x i16> %13298, %13286
  %13300 = add <16 x i16> %13299, %13293
  %13301 = add <16 x i16> %13275, %13268
  %13302 = add <16 x i16> %13301, %13282
  %13303 = add <16 x i16> %13302, %13289
  %13304 = add <16 x i16> %13303, %13296
  %13305 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13300, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13306 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13304, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13307 = shufflevector <16 x i16> %13305, <16 x i16> %13306, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13308 = lshr <32 x i16> %13307, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13309 = shufflevector <32 x i16> %13308, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13310 = add nsw i64 %13098, %13261
  %13311 = getelementptr inbounds i16, i16* %66, i64 %13310
  %13312 = bitcast i16* %13311 to <16 x i16>*
  store <16 x i16> %13309, <16 x i16>* %13312, align 2, !tbaa !401
  %13313 = shufflevector <32 x i16> %13308, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13314 = getelementptr inbounds i16, i16* %13311, i64 16
  %13315 = bitcast i16* %13314 to <16 x i16>*
  store <16 x i16> %13313, <16 x i16>* %13315, align 2, !tbaa !401
  %13316 = add nuw nsw i32 %blur_y.s0.x.x.rebased722, 1
  %.not2633 = icmp eq i32 %13316, %t1683
  br i1 %.not2633, label %"end for blur_y.s0.x.x.rebased721", label %"for blur_y.s0.x.x.rebased720"

after_bb729:                                      ; preds = %"end for blur_y.s0.x.x.rebased721", %"produce blur_x732"
  br i1 %100, label %"for blur_y.s0.x.x.rebased734.preheader", label %"end for blur_y.s0.x.x.rebased735", !prof !386

"for blur_y.s0.x.x.rebased734.preheader":         ; preds = %after_bb729
  %13317 = sext i32 %t1688 to i64
  %13318 = zext i32 %.pre-phi3402 to i64
  %13319 = mul nsw i64 %13318, %112
  %13320 = sub nsw i64 %13319, %96
  %13321 = zext i32 %.pre-phi3396 to i64
  %13322 = mul nsw i64 %13321, %112
  %13323 = sub nsw i64 %13322, %96
  %13324 = zext i32 %.pre-phi3408 to i64
  %13325 = mul nsw i64 %13324, %112
  %13326 = sub nsw i64 %13325, %96
  %13327 = zext i32 %.pre-phi3378 to i64
  %13328 = mul nsw i64 %13327, %112
  %13329 = sub nsw i64 %13328, %96
  %13330 = zext i32 %.pre-phi to i64
  %13331 = mul nsw i64 %13330, %112
  %13332 = sub nsw i64 %13331, %96
  %13333 = sext i32 %a26 to i64
  %13334 = add nsw i64 %13333, 29
  %13335 = mul nsw i64 %13334, %113
  %13336 = add nsw i64 %13335, %116
  br label %"for blur_y.s0.x.x.rebased734"

"produce blur_x732":                              ; preds = %"end for blur_y.s0.x.x.rebased721"
  %13337 = getelementptr inbounds i16, i16* %read_input, i64 %173
  %13338 = getelementptr inbounds i16, i16* %13337, i64 -31
  %13339 = bitcast i16* %13338 to <16 x i16>*
  %13340 = load <16 x i16>, <16 x i16>* %13339, align 2, !tbaa !396
  %13341 = getelementptr inbounds i16, i16* %13337, i64 -15
  %13342 = bitcast i16* %13341 to <16 x i16>*
  %13343 = load <16 x i16>, <16 x i16>* %13342, align 2, !tbaa !396
  %13344 = getelementptr inbounds i16, i16* %13337, i64 -32
  %13345 = bitcast i16* %13344 to <16 x i16>*
  %13346 = load <16 x i16>, <16 x i16>* %13345, align 2, !tbaa !396
  %13347 = getelementptr inbounds i16, i16* %13337, i64 -16
  %13348 = bitcast i16* %13347 to <16 x i16>*
  %13349 = load <16 x i16>, <16 x i16>* %13348, align 2, !tbaa !396
  %13350 = getelementptr inbounds i16, i16* %13337, i64 -30
  %13351 = bitcast i16* %13350 to <16 x i16>*
  %13352 = load <16 x i16>, <16 x i16>* %13351, align 2, !tbaa !396
  %13353 = getelementptr inbounds i16, i16* %13337, i64 -14
  %13354 = bitcast i16* %13353 to <16 x i16>*
  %13355 = load <16 x i16>, <16 x i16>* %13354, align 2, !tbaa !396
  %13356 = getelementptr inbounds i16, i16* %13337, i64 -28
  %13357 = bitcast i16* %13356 to <16 x i16>*
  %13358 = load <16 x i16>, <16 x i16>* %13357, align 2, !tbaa !396
  %13359 = getelementptr inbounds i16, i16* %13337, i64 -12
  %13360 = bitcast i16* %13359 to <16 x i16>*
  %13361 = load <16 x i16>, <16 x i16>* %13360, align 2, !tbaa !396
  %13362 = getelementptr inbounds i16, i16* %13337, i64 -29
  %13363 = bitcast i16* %13362 to <16 x i16>*
  %13364 = load <16 x i16>, <16 x i16>* %13363, align 2, !tbaa !396
  %13365 = getelementptr inbounds i16, i16* %13337, i64 -13
  %13366 = bitcast i16* %13365 to <16 x i16>*
  %13367 = load <16 x i16>, <16 x i16>* %13366, align 2, !tbaa !396
  %13368 = add <16 x i16> %13346, %13340
  %13369 = add <16 x i16> %13368, %13352
  %13370 = add <16 x i16> %13369, %13358
  %13371 = add <16 x i16> %13370, %13364
  %13372 = add <16 x i16> %13349, %13343
  %13373 = add <16 x i16> %13372, %13355
  %13374 = add <16 x i16> %13373, %13361
  %13375 = add <16 x i16> %13374, %13367
  %13376 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13371, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13377 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13375, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13378 = shufflevector <16 x i16> %13376, <16 x i16> %13377, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13379 = lshr <32 x i16> %13378, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13380 = shufflevector <32 x i16> %13379, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13381 = zext i32 %.pre-phi3378 to i64
  %13382 = mul nsw i64 %97, %13381
  %13383 = add nsw i64 %99, %13382
  %13384 = getelementptr inbounds i16, i16* %blur_x, i64 %13383
  %13385 = getelementptr inbounds i16, i16* %13384, i64 -32
  %13386 = bitcast i16* %13385 to <16 x i16>*
  store <16 x i16> %13380, <16 x i16>* %13386, align 2, !tbaa !399
  %13387 = shufflevector <32 x i16> %13379, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13388 = getelementptr inbounds i16, i16* %13384, i64 -16
  %13389 = bitcast i16* %13388 to <16 x i16>*
  store <16 x i16> %13387, <16 x i16>* %13389, align 2, !tbaa !399
  %13390 = zext i32 %.pre-phi3402 to i64
  %13391 = mul nsw i64 %13390, %112
  %13392 = add nsw i64 %13391, %94
  %13393 = getelementptr inbounds i16, i16* %blur_x, i64 %13392
  %13394 = getelementptr inbounds i16, i16* %13393, i64 -32
  %13395 = bitcast i16* %13394 to <16 x i16>*
  %13396 = load <16 x i16>, <16 x i16>* %13395, align 2, !tbaa !399
  %13397 = getelementptr inbounds i16, i16* %13393, i64 -16
  %13398 = bitcast i16* %13397 to <16 x i16>*
  %13399 = load <16 x i16>, <16 x i16>* %13398, align 2, !tbaa !399
  %13400 = zext i32 %.pre-phi3396 to i64
  %13401 = mul nsw i64 %13400, %112
  %13402 = add nsw i64 %13401, %94
  %13403 = getelementptr inbounds i16, i16* %blur_x, i64 %13402
  %13404 = getelementptr inbounds i16, i16* %13403, i64 -32
  %13405 = bitcast i16* %13404 to <16 x i16>*
  %13406 = load <16 x i16>, <16 x i16>* %13405, align 2, !tbaa !399
  %13407 = getelementptr inbounds i16, i16* %13403, i64 -16
  %13408 = bitcast i16* %13407 to <16 x i16>*
  %13409 = load <16 x i16>, <16 x i16>* %13408, align 2, !tbaa !399
  %13410 = zext i32 %.pre-phi3408 to i64
  %13411 = mul nsw i64 %13410, %112
  %13412 = add nsw i64 %13411, %94
  %13413 = getelementptr inbounds i16, i16* %blur_x, i64 %13412
  %13414 = getelementptr inbounds i16, i16* %13413, i64 -32
  %13415 = bitcast i16* %13414 to <16 x i16>*
  %13416 = load <16 x i16>, <16 x i16>* %13415, align 2, !tbaa !399
  %13417 = getelementptr inbounds i16, i16* %13413, i64 -16
  %13418 = bitcast i16* %13417 to <16 x i16>*
  %13419 = load <16 x i16>, <16 x i16>* %13418, align 2, !tbaa !399
  %13420 = mul nsw i64 %13381, %112
  %13421 = add nsw i64 %13420, %94
  %13422 = getelementptr inbounds i16, i16* %blur_x, i64 %13421
  %13423 = getelementptr inbounds i16, i16* %13422, i64 -32
  %13424 = bitcast i16* %13423 to <16 x i16>*
  %13425 = load <16 x i16>, <16 x i16>* %13424, align 2, !tbaa !399
  %13426 = getelementptr inbounds i16, i16* %13422, i64 -16
  %13427 = bitcast i16* %13426 to <16 x i16>*
  %13428 = load <16 x i16>, <16 x i16>* %13427, align 2, !tbaa !399
  %13429 = zext i32 %.pre-phi to i64
  %13430 = mul nsw i64 %13429, %112
  %13431 = add nsw i64 %13430, %94
  %13432 = getelementptr inbounds i16, i16* %blur_x, i64 %13431
  %13433 = getelementptr inbounds i16, i16* %13432, i64 -32
  %13434 = bitcast i16* %13433 to <16 x i16>*
  %13435 = load <16 x i16>, <16 x i16>* %13434, align 2, !tbaa !399
  %13436 = getelementptr inbounds i16, i16* %13432, i64 -16
  %13437 = bitcast i16* %13436 to <16 x i16>*
  %13438 = load <16 x i16>, <16 x i16>* %13437, align 2, !tbaa !399
  %13439 = add <16 x i16> %13406, %13396
  %13440 = add <16 x i16> %13439, %13416
  %13441 = add <16 x i16> %13440, %13425
  %13442 = add <16 x i16> %13441, %13435
  %13443 = add <16 x i16> %13409, %13399
  %13444 = add <16 x i16> %13443, %13419
  %13445 = add <16 x i16> %13444, %13428
  %13446 = add <16 x i16> %13445, %13438
  %13447 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13442, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13448 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13446, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13449 = shufflevector <16 x i16> %13447, <16 x i16> %13448, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13450 = lshr <32 x i16> %13449, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13451 = shufflevector <32 x i16> %13450, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13452 = sext i32 %a26 to i64
  %13453 = add nsw i64 %13452, 29
  %13454 = mul nsw i64 %13453, %113
  %13455 = add nsw i64 %115, %13454
  %13456 = getelementptr inbounds i16, i16* %66, i64 %13455
  %13457 = getelementptr inbounds i16, i16* %13456, i64 -32
  %13458 = bitcast i16* %13457 to <16 x i16>*
  store <16 x i16> %13451, <16 x i16>* %13458, align 2, !tbaa !401
  %13459 = shufflevector <32 x i16> %13450, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13460 = getelementptr inbounds i16, i16* %13456, i64 -16
  %13461 = bitcast i16* %13460 to <16 x i16>*
  store <16 x i16> %13459, <16 x i16>* %13461, align 2, !tbaa !401
  br label %after_bb729

"for blur_y.s0.x.x.rebased734":                   ; preds = %"for blur_y.s0.x.x.rebased734.preheader", %"consume blur_x741"
  %indvars.iv3242 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased734.preheader" ], [ %indvars.iv.next3243, %"consume blur_x741" ]
  %13462 = add nsw i64 %indvars.iv3242, %101
  %13463 = icmp slt i64 %13462, 1
  %13464 = trunc i64 %13462 to i32
  %13465 = shl nsw i32 %13464, 5
  %13466 = icmp sgt i32 %4, %13465
  %13467 = or i1 %13463, %13466
  br i1 %13467, label %"produce blur_x740", label %"for blur_y.s0.x.x.rebased734.consume blur_x741_crit_edge"

"for blur_y.s0.x.x.rebased734.consume blur_x741_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased734"
  %.pre3461 = shl nsw i64 %13462, 5
  br label %"consume blur_x741"

"end for blur_y.s0.x.x.rebased735":               ; preds = %"consume blur_x741", %after_bb729
  br i1 %102, label %"for blur_y.s0.x.x.rebased742.preheader", label %"end for blur_y.s0.x.x.rebased743", !prof !386

"for blur_y.s0.x.x.rebased742.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased735"
  %13468 = sext i32 %t1688 to i64
  %13469 = zext i32 %.pre-phi3402 to i64
  %13470 = mul nsw i64 %13469, %112
  %13471 = sub nsw i64 %13470, %96
  %13472 = zext i32 %.pre-phi3396 to i64
  %13473 = mul nsw i64 %13472, %112
  %13474 = sub nsw i64 %13473, %96
  %13475 = zext i32 %.pre-phi3408 to i64
  %13476 = mul nsw i64 %13475, %112
  %13477 = sub nsw i64 %13476, %96
  %13478 = zext i32 %.pre-phi3378 to i64
  %13479 = mul nsw i64 %13478, %112
  %13480 = sub nsw i64 %13479, %96
  %13481 = zext i32 %.pre-phi to i64
  %13482 = mul nsw i64 %13481, %112
  %13483 = sub nsw i64 %13482, %96
  %13484 = sext i32 %a26 to i64
  %13485 = add nsw i64 %13484, 29
  %13486 = mul nsw i64 %13485, %113
  %13487 = add nsw i64 %13486, %116
  br label %"for blur_y.s0.x.x.rebased742"

"produce blur_x740":                              ; preds = %"for blur_y.s0.x.x.rebased734"
  %t1176 = add nsw i32 %13465, %t2169
  %13488 = sext i32 %t1176 to i64
  %13489 = getelementptr inbounds i16, i16* %read_input, i64 %13488
  %13490 = getelementptr inbounds i16, i16* %13489, i64 1
  %13491 = bitcast i16* %13490 to <16 x i16>*
  %13492 = load <16 x i16>, <16 x i16>* %13491, align 2, !tbaa !396
  %13493 = getelementptr inbounds i16, i16* %13489, i64 17
  %13494 = bitcast i16* %13493 to <16 x i16>*
  %13495 = load <16 x i16>, <16 x i16>* %13494, align 2, !tbaa !396
  %13496 = bitcast i16* %13489 to <16 x i16>*
  %13497 = load <16 x i16>, <16 x i16>* %13496, align 2, !tbaa !396
  %13498 = getelementptr inbounds i16, i16* %13489, i64 16
  %13499 = bitcast i16* %13498 to <16 x i16>*
  %13500 = load <16 x i16>, <16 x i16>* %13499, align 2, !tbaa !396
  %13501 = getelementptr inbounds i16, i16* %13489, i64 2
  %13502 = bitcast i16* %13501 to <16 x i16>*
  %13503 = load <16 x i16>, <16 x i16>* %13502, align 2, !tbaa !396
  %13504 = getelementptr inbounds i16, i16* %13489, i64 18
  %13505 = bitcast i16* %13504 to <16 x i16>*
  %13506 = load <16 x i16>, <16 x i16>* %13505, align 2, !tbaa !396
  %13507 = getelementptr inbounds i16, i16* %13489, i64 4
  %13508 = bitcast i16* %13507 to <16 x i16>*
  %13509 = load <16 x i16>, <16 x i16>* %13508, align 2, !tbaa !396
  %13510 = getelementptr inbounds i16, i16* %13489, i64 20
  %13511 = bitcast i16* %13510 to <16 x i16>*
  %13512 = load <16 x i16>, <16 x i16>* %13511, align 2, !tbaa !396
  %13513 = getelementptr inbounds i16, i16* %13489, i64 3
  %13514 = bitcast i16* %13513 to <16 x i16>*
  %13515 = load <16 x i16>, <16 x i16>* %13514, align 2, !tbaa !396
  %13516 = getelementptr inbounds i16, i16* %13489, i64 19
  %13517 = bitcast i16* %13516 to <16 x i16>*
  %13518 = load <16 x i16>, <16 x i16>* %13517, align 2, !tbaa !396
  %13519 = add <16 x i16> %13497, %13492
  %13520 = add <16 x i16> %13519, %13503
  %13521 = add <16 x i16> %13520, %13509
  %13522 = add <16 x i16> %13521, %13515
  %13523 = add <16 x i16> %13500, %13495
  %13524 = add <16 x i16> %13523, %13506
  %13525 = add <16 x i16> %13524, %13512
  %13526 = add <16 x i16> %13525, %13518
  %13527 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13522, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13528 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13526, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13529 = shufflevector <16 x i16> %13527, <16 x i16> %13528, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13530 = lshr <32 x i16> %13529, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13531 = shufflevector <32 x i16> %13530, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13532 = shl nsw i64 %13462, 5
  %13533 = add nsw i64 %13532, %13317
  %13534 = getelementptr inbounds i16, i16* %blur_x, i64 %13533
  %13535 = bitcast i16* %13534 to <16 x i16>*
  store <16 x i16> %13531, <16 x i16>* %13535, align 2, !tbaa !399
  %13536 = shufflevector <32 x i16> %13530, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13537 = getelementptr inbounds i16, i16* %13534, i64 16
  %13538 = bitcast i16* %13537 to <16 x i16>*
  store <16 x i16> %13536, <16 x i16>* %13538, align 2, !tbaa !399
  br label %"consume blur_x741"

"consume blur_x741":                              ; preds = %"for blur_y.s0.x.x.rebased734.consume blur_x741_crit_edge", %"produce blur_x740"
  %.pre-phi3462 = phi i64 [ %.pre3461, %"for blur_y.s0.x.x.rebased734.consume blur_x741_crit_edge" ], [ %13532, %"produce blur_x740" ]
  %13539 = add nsw i64 %13320, %.pre-phi3462
  %13540 = getelementptr inbounds i16, i16* %blur_x, i64 %13539
  %13541 = bitcast i16* %13540 to <16 x i16>*
  %13542 = load <16 x i16>, <16 x i16>* %13541, align 2, !tbaa !399
  %13543 = getelementptr inbounds i16, i16* %13540, i64 16
  %13544 = bitcast i16* %13543 to <16 x i16>*
  %13545 = load <16 x i16>, <16 x i16>* %13544, align 2, !tbaa !399
  %13546 = add nsw i64 %13323, %.pre-phi3462
  %13547 = getelementptr inbounds i16, i16* %blur_x, i64 %13546
  %13548 = bitcast i16* %13547 to <16 x i16>*
  %13549 = load <16 x i16>, <16 x i16>* %13548, align 2, !tbaa !399
  %13550 = getelementptr inbounds i16, i16* %13547, i64 16
  %13551 = bitcast i16* %13550 to <16 x i16>*
  %13552 = load <16 x i16>, <16 x i16>* %13551, align 2, !tbaa !399
  %13553 = add nsw i64 %13326, %.pre-phi3462
  %13554 = getelementptr inbounds i16, i16* %blur_x, i64 %13553
  %13555 = bitcast i16* %13554 to <16 x i16>*
  %13556 = load <16 x i16>, <16 x i16>* %13555, align 2, !tbaa !399
  %13557 = getelementptr inbounds i16, i16* %13554, i64 16
  %13558 = bitcast i16* %13557 to <16 x i16>*
  %13559 = load <16 x i16>, <16 x i16>* %13558, align 2, !tbaa !399
  %13560 = add nsw i64 %13329, %.pre-phi3462
  %13561 = getelementptr inbounds i16, i16* %blur_x, i64 %13560
  %13562 = bitcast i16* %13561 to <16 x i16>*
  %13563 = load <16 x i16>, <16 x i16>* %13562, align 2, !tbaa !399
  %13564 = getelementptr inbounds i16, i16* %13561, i64 16
  %13565 = bitcast i16* %13564 to <16 x i16>*
  %13566 = load <16 x i16>, <16 x i16>* %13565, align 2, !tbaa !399
  %13567 = add nsw i64 %13332, %.pre-phi3462
  %13568 = getelementptr inbounds i16, i16* %blur_x, i64 %13567
  %13569 = bitcast i16* %13568 to <16 x i16>*
  %13570 = load <16 x i16>, <16 x i16>* %13569, align 2, !tbaa !399
  %13571 = getelementptr inbounds i16, i16* %13568, i64 16
  %13572 = bitcast i16* %13571 to <16 x i16>*
  %13573 = load <16 x i16>, <16 x i16>* %13572, align 2, !tbaa !399
  %13574 = add <16 x i16> %13549, %13542
  %13575 = add <16 x i16> %13574, %13556
  %13576 = add <16 x i16> %13575, %13563
  %13577 = add <16 x i16> %13576, %13570
  %13578 = add <16 x i16> %13552, %13545
  %13579 = add <16 x i16> %13578, %13559
  %13580 = add <16 x i16> %13579, %13566
  %13581 = add <16 x i16> %13580, %13573
  %13582 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13577, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13583 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13581, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13584 = shufflevector <16 x i16> %13582, <16 x i16> %13583, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13585 = lshr <32 x i16> %13584, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13586 = shufflevector <32 x i16> %13585, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13587 = add nsw i64 %13336, %.pre-phi3462
  %13588 = getelementptr inbounds i16, i16* %66, i64 %13587
  %13589 = bitcast i16* %13588 to <16 x i16>*
  store <16 x i16> %13586, <16 x i16>* %13589, align 2, !tbaa !401
  %13590 = shufflevector <32 x i16> %13585, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13591 = getelementptr inbounds i16, i16* %13588, i64 16
  %13592 = bitcast i16* %13591 to <16 x i16>*
  store <16 x i16> %13590, <16 x i16>* %13592, align 2, !tbaa !401
  %indvars.iv.next3243 = add nuw nsw i64 %indvars.iv3242, 1
  %.not2632 = icmp eq i64 %indvars.iv.next3243, %184
  br i1 %.not2632, label %"end for blur_y.s0.x.x.rebased735", label %"for blur_y.s0.x.x.rebased734"

"for blur_y.s0.x.x.rebased742":                   ; preds = %"for blur_y.s0.x.x.rebased742.preheader", %"consume blur_x750"
  %blur_y.s0.x.x.rebased744 = phi i32 [ %13705, %"consume blur_x750" ], [ 0, %"for blur_y.s0.x.x.rebased742.preheader" ]
  %13593 = add nsw i32 %blur_y.s0.x.x.rebased744, %t1626
  %a308 = shl nsw i32 %13593, 5
  %13594 = icmp sgt i32 %a14, %a308
  %b314 = select i1 %13594, i32 %a308, i32 %a14
  %13595 = icmp slt i32 %13593, 1
  %13596 = icmp sgt i32 %4, %a308
  %13597 = or i1 %13595, %13596
  br i1 %13597, label %"produce blur_x748", label %"consume blur_x750"

"end for blur_y.s0.x.x.rebased743":               ; preds = %"consume blur_x750", %"end for blur_y.s0.x.x.rebased735"
  br i1 %34, label %"produce blur_x754", label %after_bb751

"produce blur_x748":                              ; preds = %"for blur_y.s0.x.x.rebased742"
  %13598 = icmp slt i32 %b314, %4
  %blur_x.s0.x.v1.base.s749 = select i1 %13598, i32 %b314, i32 %4
  %t1181 = add nsw i32 %blur_x.s0.x.v1.base.s749, %t2169
  %13599 = sext i32 %t1181 to i64
  %13600 = getelementptr inbounds i16, i16* %read_input, i64 %13599
  %13601 = getelementptr inbounds i16, i16* %13600, i64 1
  %13602 = bitcast i16* %13601 to <16 x i16>*
  %13603 = load <16 x i16>, <16 x i16>* %13602, align 2, !tbaa !396
  %13604 = getelementptr inbounds i16, i16* %13600, i64 17
  %13605 = bitcast i16* %13604 to <16 x i16>*
  %13606 = load <16 x i16>, <16 x i16>* %13605, align 2, !tbaa !396
  %13607 = bitcast i16* %13600 to <16 x i16>*
  %13608 = load <16 x i16>, <16 x i16>* %13607, align 2, !tbaa !396
  %13609 = getelementptr inbounds i16, i16* %13600, i64 16
  %13610 = bitcast i16* %13609 to <16 x i16>*
  %13611 = load <16 x i16>, <16 x i16>* %13610, align 2, !tbaa !396
  %13612 = getelementptr inbounds i16, i16* %13600, i64 2
  %13613 = bitcast i16* %13612 to <16 x i16>*
  %13614 = load <16 x i16>, <16 x i16>* %13613, align 2, !tbaa !396
  %13615 = getelementptr inbounds i16, i16* %13600, i64 18
  %13616 = bitcast i16* %13615 to <16 x i16>*
  %13617 = load <16 x i16>, <16 x i16>* %13616, align 2, !tbaa !396
  %13618 = getelementptr inbounds i16, i16* %13600, i64 4
  %13619 = bitcast i16* %13618 to <16 x i16>*
  %13620 = load <16 x i16>, <16 x i16>* %13619, align 2, !tbaa !396
  %13621 = getelementptr inbounds i16, i16* %13600, i64 20
  %13622 = bitcast i16* %13621 to <16 x i16>*
  %13623 = load <16 x i16>, <16 x i16>* %13622, align 2, !tbaa !396
  %13624 = getelementptr inbounds i16, i16* %13600, i64 3
  %13625 = bitcast i16* %13624 to <16 x i16>*
  %13626 = load <16 x i16>, <16 x i16>* %13625, align 2, !tbaa !396
  %13627 = getelementptr inbounds i16, i16* %13600, i64 19
  %13628 = bitcast i16* %13627 to <16 x i16>*
  %13629 = load <16 x i16>, <16 x i16>* %13628, align 2, !tbaa !396
  %13630 = add <16 x i16> %13608, %13603
  %13631 = add <16 x i16> %13630, %13614
  %13632 = add <16 x i16> %13631, %13620
  %13633 = add <16 x i16> %13632, %13626
  %13634 = add <16 x i16> %13611, %13606
  %13635 = add <16 x i16> %13634, %13617
  %13636 = add <16 x i16> %13635, %13623
  %13637 = add <16 x i16> %13636, %13629
  %13638 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13633, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13639 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13637, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13640 = shufflevector <16 x i16> %13638, <16 x i16> %13639, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13641 = lshr <32 x i16> %13640, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13642 = shufflevector <32 x i16> %13641, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13643 = sext i32 %blur_x.s0.x.v1.base.s749 to i64
  %13644 = add nsw i64 %13643, %13468
  %13645 = getelementptr inbounds i16, i16* %blur_x, i64 %13644
  %13646 = bitcast i16* %13645 to <16 x i16>*
  store <16 x i16> %13642, <16 x i16>* %13646, align 2, !tbaa !399
  %13647 = shufflevector <32 x i16> %13641, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13648 = getelementptr inbounds i16, i16* %13645, i64 16
  %13649 = bitcast i16* %13648 to <16 x i16>*
  store <16 x i16> %13647, <16 x i16>* %13649, align 2, !tbaa !399
  br label %"consume blur_x750"

"consume blur_x750":                              ; preds = %"for blur_y.s0.x.x.rebased742", %"produce blur_x748"
  %13650 = sext i32 %b314 to i64
  %13651 = add nsw i64 %13471, %13650
  %13652 = getelementptr inbounds i16, i16* %blur_x, i64 %13651
  %13653 = bitcast i16* %13652 to <16 x i16>*
  %13654 = load <16 x i16>, <16 x i16>* %13653, align 2, !tbaa !399
  %13655 = getelementptr inbounds i16, i16* %13652, i64 16
  %13656 = bitcast i16* %13655 to <16 x i16>*
  %13657 = load <16 x i16>, <16 x i16>* %13656, align 2, !tbaa !399
  %13658 = add nsw i64 %13474, %13650
  %13659 = getelementptr inbounds i16, i16* %blur_x, i64 %13658
  %13660 = bitcast i16* %13659 to <16 x i16>*
  %13661 = load <16 x i16>, <16 x i16>* %13660, align 2, !tbaa !399
  %13662 = getelementptr inbounds i16, i16* %13659, i64 16
  %13663 = bitcast i16* %13662 to <16 x i16>*
  %13664 = load <16 x i16>, <16 x i16>* %13663, align 2, !tbaa !399
  %13665 = add nsw i64 %13477, %13650
  %13666 = getelementptr inbounds i16, i16* %blur_x, i64 %13665
  %13667 = bitcast i16* %13666 to <16 x i16>*
  %13668 = load <16 x i16>, <16 x i16>* %13667, align 2, !tbaa !399
  %13669 = getelementptr inbounds i16, i16* %13666, i64 16
  %13670 = bitcast i16* %13669 to <16 x i16>*
  %13671 = load <16 x i16>, <16 x i16>* %13670, align 2, !tbaa !399
  %13672 = add nsw i64 %13480, %13650
  %13673 = getelementptr inbounds i16, i16* %blur_x, i64 %13672
  %13674 = bitcast i16* %13673 to <16 x i16>*
  %13675 = load <16 x i16>, <16 x i16>* %13674, align 2, !tbaa !399
  %13676 = getelementptr inbounds i16, i16* %13673, i64 16
  %13677 = bitcast i16* %13676 to <16 x i16>*
  %13678 = load <16 x i16>, <16 x i16>* %13677, align 2, !tbaa !399
  %13679 = add nsw i64 %13483, %13650
  %13680 = getelementptr inbounds i16, i16* %blur_x, i64 %13679
  %13681 = bitcast i16* %13680 to <16 x i16>*
  %13682 = load <16 x i16>, <16 x i16>* %13681, align 2, !tbaa !399
  %13683 = getelementptr inbounds i16, i16* %13680, i64 16
  %13684 = bitcast i16* %13683 to <16 x i16>*
  %13685 = load <16 x i16>, <16 x i16>* %13684, align 2, !tbaa !399
  %13686 = add <16 x i16> %13661, %13654
  %13687 = add <16 x i16> %13686, %13668
  %13688 = add <16 x i16> %13687, %13675
  %13689 = add <16 x i16> %13688, %13682
  %13690 = add <16 x i16> %13664, %13657
  %13691 = add <16 x i16> %13690, %13671
  %13692 = add <16 x i16> %13691, %13678
  %13693 = add <16 x i16> %13692, %13685
  %13694 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13689, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13695 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13693, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13696 = shufflevector <16 x i16> %13694, <16 x i16> %13695, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13697 = lshr <32 x i16> %13696, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13698 = shufflevector <32 x i16> %13697, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13699 = add nsw i64 %13487, %13650
  %13700 = getelementptr inbounds i16, i16* %66, i64 %13699
  %13701 = bitcast i16* %13700 to <16 x i16>*
  store <16 x i16> %13698, <16 x i16>* %13701, align 2, !tbaa !401
  %13702 = shufflevector <32 x i16> %13697, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13703 = getelementptr inbounds i16, i16* %13700, i64 16
  %13704 = bitcast i16* %13703 to <16 x i16>*
  store <16 x i16> %13702, <16 x i16>* %13704, align 2, !tbaa !401
  %13705 = add nuw nsw i32 %blur_y.s0.x.x.rebased744, 1
  %.not2631 = icmp eq i32 %13705, %t1683
  br i1 %.not2631, label %"end for blur_y.s0.x.x.rebased743", label %"for blur_y.s0.x.x.rebased742"

after_bb751:                                      ; preds = %"end for blur_y.s0.x.x.rebased743", %"produce blur_x754"
  br i1 %100, label %"for blur_y.s0.x.x.rebased756.preheader", label %"end for blur_y.s0.x.x.rebased757", !prof !386

"for blur_y.s0.x.x.rebased756.preheader":         ; preds = %after_bb751
  %13706 = sext i32 %t1694 to i64
  %13707 = zext i32 %.pre-phi3408 to i64
  %13708 = mul nsw i64 %13707, %112
  %13709 = sub nsw i64 %13708, %96
  %13710 = zext i32 %.pre-phi3402 to i64
  %13711 = mul nsw i64 %13710, %112
  %13712 = sub nsw i64 %13711, %96
  %13713 = zext i32 %.pre-phi to i64
  %13714 = mul nsw i64 %13713, %112
  %13715 = sub nsw i64 %13714, %96
  %13716 = zext i32 %.pre-phi3382 to i64
  %13717 = mul nsw i64 %13716, %112
  %13718 = sub nsw i64 %13717, %96
  %13719 = zext i32 %.pre-phi3378 to i64
  %13720 = mul nsw i64 %13719, %112
  %13721 = sub nsw i64 %13720, %96
  %13722 = sext i32 %a26 to i64
  %13723 = add nsw i64 %13722, 30
  %13724 = mul nsw i64 %13723, %113
  %13725 = add nsw i64 %13724, %116
  br label %"for blur_y.s0.x.x.rebased756"

"produce blur_x754":                              ; preds = %"end for blur_y.s0.x.x.rebased743"
  %13726 = getelementptr inbounds i16, i16* %read_input, i64 %175
  %13727 = getelementptr inbounds i16, i16* %13726, i64 -31
  %13728 = bitcast i16* %13727 to <16 x i16>*
  %13729 = load <16 x i16>, <16 x i16>* %13728, align 2, !tbaa !396
  %13730 = getelementptr inbounds i16, i16* %13726, i64 -15
  %13731 = bitcast i16* %13730 to <16 x i16>*
  %13732 = load <16 x i16>, <16 x i16>* %13731, align 2, !tbaa !396
  %13733 = getelementptr inbounds i16, i16* %13726, i64 -32
  %13734 = bitcast i16* %13733 to <16 x i16>*
  %13735 = load <16 x i16>, <16 x i16>* %13734, align 2, !tbaa !396
  %13736 = getelementptr inbounds i16, i16* %13726, i64 -16
  %13737 = bitcast i16* %13736 to <16 x i16>*
  %13738 = load <16 x i16>, <16 x i16>* %13737, align 2, !tbaa !396
  %13739 = getelementptr inbounds i16, i16* %13726, i64 -30
  %13740 = bitcast i16* %13739 to <16 x i16>*
  %13741 = load <16 x i16>, <16 x i16>* %13740, align 2, !tbaa !396
  %13742 = getelementptr inbounds i16, i16* %13726, i64 -14
  %13743 = bitcast i16* %13742 to <16 x i16>*
  %13744 = load <16 x i16>, <16 x i16>* %13743, align 2, !tbaa !396
  %13745 = getelementptr inbounds i16, i16* %13726, i64 -28
  %13746 = bitcast i16* %13745 to <16 x i16>*
  %13747 = load <16 x i16>, <16 x i16>* %13746, align 2, !tbaa !396
  %13748 = getelementptr inbounds i16, i16* %13726, i64 -12
  %13749 = bitcast i16* %13748 to <16 x i16>*
  %13750 = load <16 x i16>, <16 x i16>* %13749, align 2, !tbaa !396
  %13751 = getelementptr inbounds i16, i16* %13726, i64 -29
  %13752 = bitcast i16* %13751 to <16 x i16>*
  %13753 = load <16 x i16>, <16 x i16>* %13752, align 2, !tbaa !396
  %13754 = getelementptr inbounds i16, i16* %13726, i64 -13
  %13755 = bitcast i16* %13754 to <16 x i16>*
  %13756 = load <16 x i16>, <16 x i16>* %13755, align 2, !tbaa !396
  %13757 = add <16 x i16> %13735, %13729
  %13758 = add <16 x i16> %13757, %13741
  %13759 = add <16 x i16> %13758, %13747
  %13760 = add <16 x i16> %13759, %13753
  %13761 = add <16 x i16> %13738, %13732
  %13762 = add <16 x i16> %13761, %13744
  %13763 = add <16 x i16> %13762, %13750
  %13764 = add <16 x i16> %13763, %13756
  %13765 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13760, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13766 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13764, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13767 = shufflevector <16 x i16> %13765, <16 x i16> %13766, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13768 = lshr <32 x i16> %13767, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13769 = shufflevector <32 x i16> %13768, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13770 = zext i32 %.pre-phi3382 to i64
  %13771 = mul nsw i64 %97, %13770
  %13772 = add nsw i64 %99, %13771
  %13773 = getelementptr inbounds i16, i16* %blur_x, i64 %13772
  %13774 = getelementptr inbounds i16, i16* %13773, i64 -32
  %13775 = bitcast i16* %13774 to <16 x i16>*
  store <16 x i16> %13769, <16 x i16>* %13775, align 2, !tbaa !399
  %13776 = shufflevector <32 x i16> %13768, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13777 = getelementptr inbounds i16, i16* %13773, i64 -16
  %13778 = bitcast i16* %13777 to <16 x i16>*
  store <16 x i16> %13776, <16 x i16>* %13778, align 2, !tbaa !399
  %13779 = zext i32 %.pre-phi3408 to i64
  %13780 = mul nsw i64 %13779, %112
  %13781 = add nsw i64 %13780, %94
  %13782 = getelementptr inbounds i16, i16* %blur_x, i64 %13781
  %13783 = getelementptr inbounds i16, i16* %13782, i64 -32
  %13784 = bitcast i16* %13783 to <16 x i16>*
  %13785 = load <16 x i16>, <16 x i16>* %13784, align 2, !tbaa !399
  %13786 = getelementptr inbounds i16, i16* %13782, i64 -16
  %13787 = bitcast i16* %13786 to <16 x i16>*
  %13788 = load <16 x i16>, <16 x i16>* %13787, align 2, !tbaa !399
  %13789 = zext i32 %.pre-phi3402 to i64
  %13790 = mul nsw i64 %13789, %112
  %13791 = add nsw i64 %13790, %94
  %13792 = getelementptr inbounds i16, i16* %blur_x, i64 %13791
  %13793 = getelementptr inbounds i16, i16* %13792, i64 -32
  %13794 = bitcast i16* %13793 to <16 x i16>*
  %13795 = load <16 x i16>, <16 x i16>* %13794, align 2, !tbaa !399
  %13796 = getelementptr inbounds i16, i16* %13792, i64 -16
  %13797 = bitcast i16* %13796 to <16 x i16>*
  %13798 = load <16 x i16>, <16 x i16>* %13797, align 2, !tbaa !399
  %13799 = zext i32 %.pre-phi to i64
  %13800 = mul nsw i64 %13799, %112
  %13801 = add nsw i64 %13800, %94
  %13802 = getelementptr inbounds i16, i16* %blur_x, i64 %13801
  %13803 = getelementptr inbounds i16, i16* %13802, i64 -32
  %13804 = bitcast i16* %13803 to <16 x i16>*
  %13805 = load <16 x i16>, <16 x i16>* %13804, align 2, !tbaa !399
  %13806 = getelementptr inbounds i16, i16* %13802, i64 -16
  %13807 = bitcast i16* %13806 to <16 x i16>*
  %13808 = load <16 x i16>, <16 x i16>* %13807, align 2, !tbaa !399
  %13809 = mul nsw i64 %13770, %112
  %13810 = add nsw i64 %13809, %94
  %13811 = getelementptr inbounds i16, i16* %blur_x, i64 %13810
  %13812 = getelementptr inbounds i16, i16* %13811, i64 -32
  %13813 = bitcast i16* %13812 to <16 x i16>*
  %13814 = load <16 x i16>, <16 x i16>* %13813, align 2, !tbaa !399
  %13815 = getelementptr inbounds i16, i16* %13811, i64 -16
  %13816 = bitcast i16* %13815 to <16 x i16>*
  %13817 = load <16 x i16>, <16 x i16>* %13816, align 2, !tbaa !399
  %13818 = zext i32 %.pre-phi3378 to i64
  %13819 = mul nsw i64 %13818, %112
  %13820 = add nsw i64 %13819, %94
  %13821 = getelementptr inbounds i16, i16* %blur_x, i64 %13820
  %13822 = getelementptr inbounds i16, i16* %13821, i64 -32
  %13823 = bitcast i16* %13822 to <16 x i16>*
  %13824 = load <16 x i16>, <16 x i16>* %13823, align 2, !tbaa !399
  %13825 = getelementptr inbounds i16, i16* %13821, i64 -16
  %13826 = bitcast i16* %13825 to <16 x i16>*
  %13827 = load <16 x i16>, <16 x i16>* %13826, align 2, !tbaa !399
  %13828 = add <16 x i16> %13795, %13785
  %13829 = add <16 x i16> %13828, %13805
  %13830 = add <16 x i16> %13829, %13814
  %13831 = add <16 x i16> %13830, %13824
  %13832 = add <16 x i16> %13798, %13788
  %13833 = add <16 x i16> %13832, %13808
  %13834 = add <16 x i16> %13833, %13817
  %13835 = add <16 x i16> %13834, %13827
  %13836 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13831, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13837 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13835, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13838 = shufflevector <16 x i16> %13836, <16 x i16> %13837, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13839 = lshr <32 x i16> %13838, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13840 = shufflevector <32 x i16> %13839, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13841 = sext i32 %a26 to i64
  %13842 = add nsw i64 %13841, 30
  %13843 = mul nsw i64 %13842, %113
  %13844 = add nsw i64 %115, %13843
  %13845 = getelementptr inbounds i16, i16* %66, i64 %13844
  %13846 = getelementptr inbounds i16, i16* %13845, i64 -32
  %13847 = bitcast i16* %13846 to <16 x i16>*
  store <16 x i16> %13840, <16 x i16>* %13847, align 2, !tbaa !401
  %13848 = shufflevector <32 x i16> %13839, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13849 = getelementptr inbounds i16, i16* %13845, i64 -16
  %13850 = bitcast i16* %13849 to <16 x i16>*
  store <16 x i16> %13848, <16 x i16>* %13850, align 2, !tbaa !401
  br label %after_bb751

"for blur_y.s0.x.x.rebased756":                   ; preds = %"for blur_y.s0.x.x.rebased756.preheader", %"consume blur_x763"
  %indvars.iv3245 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased756.preheader" ], [ %indvars.iv.next3246, %"consume blur_x763" ]
  %13851 = add nsw i64 %indvars.iv3245, %101
  %13852 = icmp slt i64 %13851, 1
  %13853 = trunc i64 %13851 to i32
  %13854 = shl nsw i32 %13853, 5
  %13855 = icmp sgt i32 %4, %13854
  %13856 = or i1 %13852, %13855
  br i1 %13856, label %"produce blur_x762", label %"for blur_y.s0.x.x.rebased756.consume blur_x763_crit_edge"

"for blur_y.s0.x.x.rebased756.consume blur_x763_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased756"
  %.pre3463 = shl nsw i64 %13851, 5
  br label %"consume blur_x763"

"end for blur_y.s0.x.x.rebased757":               ; preds = %"consume blur_x763", %after_bb751
  br i1 %102, label %"for blur_y.s0.x.x.rebased764.preheader", label %"end for blur_y.s0.x.x.rebased765", !prof !386

"for blur_y.s0.x.x.rebased764.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased757"
  %13857 = sext i32 %t1694 to i64
  %13858 = zext i32 %.pre-phi3408 to i64
  %13859 = mul nsw i64 %13858, %112
  %13860 = sub nsw i64 %13859, %96
  %13861 = zext i32 %.pre-phi3402 to i64
  %13862 = mul nsw i64 %13861, %112
  %13863 = sub nsw i64 %13862, %96
  %13864 = zext i32 %.pre-phi to i64
  %13865 = mul nsw i64 %13864, %112
  %13866 = sub nsw i64 %13865, %96
  %13867 = zext i32 %.pre-phi3382 to i64
  %13868 = mul nsw i64 %13867, %112
  %13869 = sub nsw i64 %13868, %96
  %13870 = zext i32 %.pre-phi3378 to i64
  %13871 = mul nsw i64 %13870, %112
  %13872 = sub nsw i64 %13871, %96
  %13873 = sext i32 %a26 to i64
  %13874 = add nsw i64 %13873, 30
  %13875 = mul nsw i64 %13874, %113
  %13876 = add nsw i64 %13875, %116
  br label %"for blur_y.s0.x.x.rebased764"

"produce blur_x762":                              ; preds = %"for blur_y.s0.x.x.rebased756"
  %t1192 = add nsw i32 %13854, %t2185
  %13877 = sext i32 %t1192 to i64
  %13878 = getelementptr inbounds i16, i16* %read_input, i64 %13877
  %13879 = getelementptr inbounds i16, i16* %13878, i64 1
  %13880 = bitcast i16* %13879 to <16 x i16>*
  %13881 = load <16 x i16>, <16 x i16>* %13880, align 2, !tbaa !396
  %13882 = getelementptr inbounds i16, i16* %13878, i64 17
  %13883 = bitcast i16* %13882 to <16 x i16>*
  %13884 = load <16 x i16>, <16 x i16>* %13883, align 2, !tbaa !396
  %13885 = bitcast i16* %13878 to <16 x i16>*
  %13886 = load <16 x i16>, <16 x i16>* %13885, align 2, !tbaa !396
  %13887 = getelementptr inbounds i16, i16* %13878, i64 16
  %13888 = bitcast i16* %13887 to <16 x i16>*
  %13889 = load <16 x i16>, <16 x i16>* %13888, align 2, !tbaa !396
  %13890 = getelementptr inbounds i16, i16* %13878, i64 2
  %13891 = bitcast i16* %13890 to <16 x i16>*
  %13892 = load <16 x i16>, <16 x i16>* %13891, align 2, !tbaa !396
  %13893 = getelementptr inbounds i16, i16* %13878, i64 18
  %13894 = bitcast i16* %13893 to <16 x i16>*
  %13895 = load <16 x i16>, <16 x i16>* %13894, align 2, !tbaa !396
  %13896 = getelementptr inbounds i16, i16* %13878, i64 4
  %13897 = bitcast i16* %13896 to <16 x i16>*
  %13898 = load <16 x i16>, <16 x i16>* %13897, align 2, !tbaa !396
  %13899 = getelementptr inbounds i16, i16* %13878, i64 20
  %13900 = bitcast i16* %13899 to <16 x i16>*
  %13901 = load <16 x i16>, <16 x i16>* %13900, align 2, !tbaa !396
  %13902 = getelementptr inbounds i16, i16* %13878, i64 3
  %13903 = bitcast i16* %13902 to <16 x i16>*
  %13904 = load <16 x i16>, <16 x i16>* %13903, align 2, !tbaa !396
  %13905 = getelementptr inbounds i16, i16* %13878, i64 19
  %13906 = bitcast i16* %13905 to <16 x i16>*
  %13907 = load <16 x i16>, <16 x i16>* %13906, align 2, !tbaa !396
  %13908 = add <16 x i16> %13886, %13881
  %13909 = add <16 x i16> %13908, %13892
  %13910 = add <16 x i16> %13909, %13898
  %13911 = add <16 x i16> %13910, %13904
  %13912 = add <16 x i16> %13889, %13884
  %13913 = add <16 x i16> %13912, %13895
  %13914 = add <16 x i16> %13913, %13901
  %13915 = add <16 x i16> %13914, %13907
  %13916 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13911, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13917 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13915, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13918 = shufflevector <16 x i16> %13916, <16 x i16> %13917, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13919 = lshr <32 x i16> %13918, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13920 = shufflevector <32 x i16> %13919, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13921 = shl nsw i64 %13851, 5
  %13922 = add nsw i64 %13921, %13706
  %13923 = getelementptr inbounds i16, i16* %blur_x, i64 %13922
  %13924 = bitcast i16* %13923 to <16 x i16>*
  store <16 x i16> %13920, <16 x i16>* %13924, align 2, !tbaa !399
  %13925 = shufflevector <32 x i16> %13919, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13926 = getelementptr inbounds i16, i16* %13923, i64 16
  %13927 = bitcast i16* %13926 to <16 x i16>*
  store <16 x i16> %13925, <16 x i16>* %13927, align 2, !tbaa !399
  br label %"consume blur_x763"

"consume blur_x763":                              ; preds = %"for blur_y.s0.x.x.rebased756.consume blur_x763_crit_edge", %"produce blur_x762"
  %.pre-phi3464 = phi i64 [ %.pre3463, %"for blur_y.s0.x.x.rebased756.consume blur_x763_crit_edge" ], [ %13921, %"produce blur_x762" ]
  %13928 = add nsw i64 %13709, %.pre-phi3464
  %13929 = getelementptr inbounds i16, i16* %blur_x, i64 %13928
  %13930 = bitcast i16* %13929 to <16 x i16>*
  %13931 = load <16 x i16>, <16 x i16>* %13930, align 2, !tbaa !399
  %13932 = getelementptr inbounds i16, i16* %13929, i64 16
  %13933 = bitcast i16* %13932 to <16 x i16>*
  %13934 = load <16 x i16>, <16 x i16>* %13933, align 2, !tbaa !399
  %13935 = add nsw i64 %13712, %.pre-phi3464
  %13936 = getelementptr inbounds i16, i16* %blur_x, i64 %13935
  %13937 = bitcast i16* %13936 to <16 x i16>*
  %13938 = load <16 x i16>, <16 x i16>* %13937, align 2, !tbaa !399
  %13939 = getelementptr inbounds i16, i16* %13936, i64 16
  %13940 = bitcast i16* %13939 to <16 x i16>*
  %13941 = load <16 x i16>, <16 x i16>* %13940, align 2, !tbaa !399
  %13942 = add nsw i64 %13715, %.pre-phi3464
  %13943 = getelementptr inbounds i16, i16* %blur_x, i64 %13942
  %13944 = bitcast i16* %13943 to <16 x i16>*
  %13945 = load <16 x i16>, <16 x i16>* %13944, align 2, !tbaa !399
  %13946 = getelementptr inbounds i16, i16* %13943, i64 16
  %13947 = bitcast i16* %13946 to <16 x i16>*
  %13948 = load <16 x i16>, <16 x i16>* %13947, align 2, !tbaa !399
  %13949 = add nsw i64 %13718, %.pre-phi3464
  %13950 = getelementptr inbounds i16, i16* %blur_x, i64 %13949
  %13951 = bitcast i16* %13950 to <16 x i16>*
  %13952 = load <16 x i16>, <16 x i16>* %13951, align 2, !tbaa !399
  %13953 = getelementptr inbounds i16, i16* %13950, i64 16
  %13954 = bitcast i16* %13953 to <16 x i16>*
  %13955 = load <16 x i16>, <16 x i16>* %13954, align 2, !tbaa !399
  %13956 = add nsw i64 %13721, %.pre-phi3464
  %13957 = getelementptr inbounds i16, i16* %blur_x, i64 %13956
  %13958 = bitcast i16* %13957 to <16 x i16>*
  %13959 = load <16 x i16>, <16 x i16>* %13958, align 2, !tbaa !399
  %13960 = getelementptr inbounds i16, i16* %13957, i64 16
  %13961 = bitcast i16* %13960 to <16 x i16>*
  %13962 = load <16 x i16>, <16 x i16>* %13961, align 2, !tbaa !399
  %13963 = add <16 x i16> %13938, %13931
  %13964 = add <16 x i16> %13963, %13945
  %13965 = add <16 x i16> %13964, %13952
  %13966 = add <16 x i16> %13965, %13959
  %13967 = add <16 x i16> %13941, %13934
  %13968 = add <16 x i16> %13967, %13948
  %13969 = add <16 x i16> %13968, %13955
  %13970 = add <16 x i16> %13969, %13962
  %13971 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13966, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13972 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13970, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %13973 = shufflevector <16 x i16> %13971, <16 x i16> %13972, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13974 = lshr <32 x i16> %13973, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %13975 = shufflevector <32 x i16> %13974, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13976 = add nsw i64 %13725, %.pre-phi3464
  %13977 = getelementptr inbounds i16, i16* %66, i64 %13976
  %13978 = bitcast i16* %13977 to <16 x i16>*
  store <16 x i16> %13975, <16 x i16>* %13978, align 2, !tbaa !401
  %13979 = shufflevector <32 x i16> %13974, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13980 = getelementptr inbounds i16, i16* %13977, i64 16
  %13981 = bitcast i16* %13980 to <16 x i16>*
  store <16 x i16> %13979, <16 x i16>* %13981, align 2, !tbaa !401
  %indvars.iv.next3246 = add nuw nsw i64 %indvars.iv3245, 1
  %.not2630 = icmp eq i64 %indvars.iv.next3246, %184
  br i1 %.not2630, label %"end for blur_y.s0.x.x.rebased757", label %"for blur_y.s0.x.x.rebased756"

"for blur_y.s0.x.x.rebased764":                   ; preds = %"for blur_y.s0.x.x.rebased764.preheader", %"consume blur_x772"
  %blur_y.s0.x.x.rebased766 = phi i32 [ %14094, %"consume blur_x772" ], [ 0, %"for blur_y.s0.x.x.rebased764.preheader" ]
  %13982 = add nsw i32 %blur_y.s0.x.x.rebased766, %t1626
  %a315 = shl nsw i32 %13982, 5
  %13983 = icmp sgt i32 %a14, %a315
  %b321 = select i1 %13983, i32 %a315, i32 %a14
  %13984 = icmp slt i32 %13982, 1
  %13985 = icmp sgt i32 %4, %a315
  %13986 = or i1 %13984, %13985
  br i1 %13986, label %"produce blur_x770", label %"consume blur_x772"

"end for blur_y.s0.x.x.rebased765":               ; preds = %"consume blur_x772", %"end for blur_y.s0.x.x.rebased757"
  br i1 %34, label %"produce blur_x776", label %after_bb773

"produce blur_x770":                              ; preds = %"for blur_y.s0.x.x.rebased764"
  %13987 = icmp slt i32 %b321, %4
  %blur_x.s0.x.v1.base.s771 = select i1 %13987, i32 %b321, i32 %4
  %t1197 = add nsw i32 %blur_x.s0.x.v1.base.s771, %t2185
  %13988 = sext i32 %t1197 to i64
  %13989 = getelementptr inbounds i16, i16* %read_input, i64 %13988
  %13990 = getelementptr inbounds i16, i16* %13989, i64 1
  %13991 = bitcast i16* %13990 to <16 x i16>*
  %13992 = load <16 x i16>, <16 x i16>* %13991, align 2, !tbaa !396
  %13993 = getelementptr inbounds i16, i16* %13989, i64 17
  %13994 = bitcast i16* %13993 to <16 x i16>*
  %13995 = load <16 x i16>, <16 x i16>* %13994, align 2, !tbaa !396
  %13996 = bitcast i16* %13989 to <16 x i16>*
  %13997 = load <16 x i16>, <16 x i16>* %13996, align 2, !tbaa !396
  %13998 = getelementptr inbounds i16, i16* %13989, i64 16
  %13999 = bitcast i16* %13998 to <16 x i16>*
  %14000 = load <16 x i16>, <16 x i16>* %13999, align 2, !tbaa !396
  %14001 = getelementptr inbounds i16, i16* %13989, i64 2
  %14002 = bitcast i16* %14001 to <16 x i16>*
  %14003 = load <16 x i16>, <16 x i16>* %14002, align 2, !tbaa !396
  %14004 = getelementptr inbounds i16, i16* %13989, i64 18
  %14005 = bitcast i16* %14004 to <16 x i16>*
  %14006 = load <16 x i16>, <16 x i16>* %14005, align 2, !tbaa !396
  %14007 = getelementptr inbounds i16, i16* %13989, i64 4
  %14008 = bitcast i16* %14007 to <16 x i16>*
  %14009 = load <16 x i16>, <16 x i16>* %14008, align 2, !tbaa !396
  %14010 = getelementptr inbounds i16, i16* %13989, i64 20
  %14011 = bitcast i16* %14010 to <16 x i16>*
  %14012 = load <16 x i16>, <16 x i16>* %14011, align 2, !tbaa !396
  %14013 = getelementptr inbounds i16, i16* %13989, i64 3
  %14014 = bitcast i16* %14013 to <16 x i16>*
  %14015 = load <16 x i16>, <16 x i16>* %14014, align 2, !tbaa !396
  %14016 = getelementptr inbounds i16, i16* %13989, i64 19
  %14017 = bitcast i16* %14016 to <16 x i16>*
  %14018 = load <16 x i16>, <16 x i16>* %14017, align 2, !tbaa !396
  %14019 = add <16 x i16> %13997, %13992
  %14020 = add <16 x i16> %14019, %14003
  %14021 = add <16 x i16> %14020, %14009
  %14022 = add <16 x i16> %14021, %14015
  %14023 = add <16 x i16> %14000, %13995
  %14024 = add <16 x i16> %14023, %14006
  %14025 = add <16 x i16> %14024, %14012
  %14026 = add <16 x i16> %14025, %14018
  %14027 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14022, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14028 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14026, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14029 = shufflevector <16 x i16> %14027, <16 x i16> %14028, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14030 = lshr <32 x i16> %14029, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14031 = shufflevector <32 x i16> %14030, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14032 = sext i32 %blur_x.s0.x.v1.base.s771 to i64
  %14033 = add nsw i64 %14032, %13857
  %14034 = getelementptr inbounds i16, i16* %blur_x, i64 %14033
  %14035 = bitcast i16* %14034 to <16 x i16>*
  store <16 x i16> %14031, <16 x i16>* %14035, align 2, !tbaa !399
  %14036 = shufflevector <32 x i16> %14030, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14037 = getelementptr inbounds i16, i16* %14034, i64 16
  %14038 = bitcast i16* %14037 to <16 x i16>*
  store <16 x i16> %14036, <16 x i16>* %14038, align 2, !tbaa !399
  br label %"consume blur_x772"

"consume blur_x772":                              ; preds = %"for blur_y.s0.x.x.rebased764", %"produce blur_x770"
  %14039 = sext i32 %b321 to i64
  %14040 = add nsw i64 %13860, %14039
  %14041 = getelementptr inbounds i16, i16* %blur_x, i64 %14040
  %14042 = bitcast i16* %14041 to <16 x i16>*
  %14043 = load <16 x i16>, <16 x i16>* %14042, align 2, !tbaa !399
  %14044 = getelementptr inbounds i16, i16* %14041, i64 16
  %14045 = bitcast i16* %14044 to <16 x i16>*
  %14046 = load <16 x i16>, <16 x i16>* %14045, align 2, !tbaa !399
  %14047 = add nsw i64 %13863, %14039
  %14048 = getelementptr inbounds i16, i16* %blur_x, i64 %14047
  %14049 = bitcast i16* %14048 to <16 x i16>*
  %14050 = load <16 x i16>, <16 x i16>* %14049, align 2, !tbaa !399
  %14051 = getelementptr inbounds i16, i16* %14048, i64 16
  %14052 = bitcast i16* %14051 to <16 x i16>*
  %14053 = load <16 x i16>, <16 x i16>* %14052, align 2, !tbaa !399
  %14054 = add nsw i64 %13866, %14039
  %14055 = getelementptr inbounds i16, i16* %blur_x, i64 %14054
  %14056 = bitcast i16* %14055 to <16 x i16>*
  %14057 = load <16 x i16>, <16 x i16>* %14056, align 2, !tbaa !399
  %14058 = getelementptr inbounds i16, i16* %14055, i64 16
  %14059 = bitcast i16* %14058 to <16 x i16>*
  %14060 = load <16 x i16>, <16 x i16>* %14059, align 2, !tbaa !399
  %14061 = add nsw i64 %13869, %14039
  %14062 = getelementptr inbounds i16, i16* %blur_x, i64 %14061
  %14063 = bitcast i16* %14062 to <16 x i16>*
  %14064 = load <16 x i16>, <16 x i16>* %14063, align 2, !tbaa !399
  %14065 = getelementptr inbounds i16, i16* %14062, i64 16
  %14066 = bitcast i16* %14065 to <16 x i16>*
  %14067 = load <16 x i16>, <16 x i16>* %14066, align 2, !tbaa !399
  %14068 = add nsw i64 %13872, %14039
  %14069 = getelementptr inbounds i16, i16* %blur_x, i64 %14068
  %14070 = bitcast i16* %14069 to <16 x i16>*
  %14071 = load <16 x i16>, <16 x i16>* %14070, align 2, !tbaa !399
  %14072 = getelementptr inbounds i16, i16* %14069, i64 16
  %14073 = bitcast i16* %14072 to <16 x i16>*
  %14074 = load <16 x i16>, <16 x i16>* %14073, align 2, !tbaa !399
  %14075 = add <16 x i16> %14050, %14043
  %14076 = add <16 x i16> %14075, %14057
  %14077 = add <16 x i16> %14076, %14064
  %14078 = add <16 x i16> %14077, %14071
  %14079 = add <16 x i16> %14053, %14046
  %14080 = add <16 x i16> %14079, %14060
  %14081 = add <16 x i16> %14080, %14067
  %14082 = add <16 x i16> %14081, %14074
  %14083 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14078, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14084 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14082, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14085 = shufflevector <16 x i16> %14083, <16 x i16> %14084, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14086 = lshr <32 x i16> %14085, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14087 = shufflevector <32 x i16> %14086, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14088 = add nsw i64 %13876, %14039
  %14089 = getelementptr inbounds i16, i16* %66, i64 %14088
  %14090 = bitcast i16* %14089 to <16 x i16>*
  store <16 x i16> %14087, <16 x i16>* %14090, align 2, !tbaa !401
  %14091 = shufflevector <32 x i16> %14086, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14092 = getelementptr inbounds i16, i16* %14089, i64 16
  %14093 = bitcast i16* %14092 to <16 x i16>*
  store <16 x i16> %14091, <16 x i16>* %14093, align 2, !tbaa !401
  %14094 = add nuw nsw i32 %blur_y.s0.x.x.rebased766, 1
  %.not2629 = icmp eq i32 %14094, %t1683
  br i1 %.not2629, label %"end for blur_y.s0.x.x.rebased765", label %"for blur_y.s0.x.x.rebased764"

after_bb773:                                      ; preds = %"end for blur_y.s0.x.x.rebased765", %"produce blur_x776"
  br i1 %100, label %"for blur_y.s0.x.x.rebased778.preheader", label %"end for blur_y.s0.x.x.rebased779", !prof !386

"for blur_y.s0.x.x.rebased778.preheader":         ; preds = %after_bb773
  %14095 = sext i32 %t1700 to i64
  %14096 = zext i32 %.pre-phi to i64
  %14097 = mul nsw i64 %14096, %112
  %14098 = sub nsw i64 %14097, %96
  %14099 = zext i32 %.pre-phi3408 to i64
  %14100 = mul nsw i64 %14099, %112
  %14101 = sub nsw i64 %14100, %96
  %14102 = zext i32 %.pre-phi3378 to i64
  %14103 = mul nsw i64 %14102, %112
  %14104 = sub nsw i64 %14103, %96
  %14105 = zext i32 %.pre-phi3386 to i64
  %14106 = mul nsw i64 %14105, %112
  %14107 = sub nsw i64 %14106, %96
  %14108 = zext i32 %.pre-phi3382 to i64
  %14109 = mul nsw i64 %14108, %112
  %14110 = sub nsw i64 %14109, %96
  %14111 = sext i32 %a26 to i64
  %14112 = add nsw i64 %14111, 31
  %14113 = mul nsw i64 %14112, %113
  %14114 = add nsw i64 %14113, %116
  br label %"for blur_y.s0.x.x.rebased778"

"produce blur_x776":                              ; preds = %"end for blur_y.s0.x.x.rebased765"
  %14115 = getelementptr inbounds i16, i16* %read_input, i64 %177
  %14116 = getelementptr inbounds i16, i16* %14115, i64 -31
  %14117 = bitcast i16* %14116 to <16 x i16>*
  %14118 = load <16 x i16>, <16 x i16>* %14117, align 2, !tbaa !396
  %14119 = getelementptr inbounds i16, i16* %14115, i64 -15
  %14120 = bitcast i16* %14119 to <16 x i16>*
  %14121 = load <16 x i16>, <16 x i16>* %14120, align 2, !tbaa !396
  %14122 = getelementptr inbounds i16, i16* %14115, i64 -32
  %14123 = bitcast i16* %14122 to <16 x i16>*
  %14124 = load <16 x i16>, <16 x i16>* %14123, align 2, !tbaa !396
  %14125 = getelementptr inbounds i16, i16* %14115, i64 -16
  %14126 = bitcast i16* %14125 to <16 x i16>*
  %14127 = load <16 x i16>, <16 x i16>* %14126, align 2, !tbaa !396
  %14128 = getelementptr inbounds i16, i16* %14115, i64 -30
  %14129 = bitcast i16* %14128 to <16 x i16>*
  %14130 = load <16 x i16>, <16 x i16>* %14129, align 2, !tbaa !396
  %14131 = getelementptr inbounds i16, i16* %14115, i64 -14
  %14132 = bitcast i16* %14131 to <16 x i16>*
  %14133 = load <16 x i16>, <16 x i16>* %14132, align 2, !tbaa !396
  %14134 = getelementptr inbounds i16, i16* %14115, i64 -28
  %14135 = bitcast i16* %14134 to <16 x i16>*
  %14136 = load <16 x i16>, <16 x i16>* %14135, align 2, !tbaa !396
  %14137 = getelementptr inbounds i16, i16* %14115, i64 -12
  %14138 = bitcast i16* %14137 to <16 x i16>*
  %14139 = load <16 x i16>, <16 x i16>* %14138, align 2, !tbaa !396
  %14140 = getelementptr inbounds i16, i16* %14115, i64 -29
  %14141 = bitcast i16* %14140 to <16 x i16>*
  %14142 = load <16 x i16>, <16 x i16>* %14141, align 2, !tbaa !396
  %14143 = getelementptr inbounds i16, i16* %14115, i64 -13
  %14144 = bitcast i16* %14143 to <16 x i16>*
  %14145 = load <16 x i16>, <16 x i16>* %14144, align 2, !tbaa !396
  %14146 = add <16 x i16> %14124, %14118
  %14147 = add <16 x i16> %14146, %14130
  %14148 = add <16 x i16> %14147, %14136
  %14149 = add <16 x i16> %14148, %14142
  %14150 = add <16 x i16> %14127, %14121
  %14151 = add <16 x i16> %14150, %14133
  %14152 = add <16 x i16> %14151, %14139
  %14153 = add <16 x i16> %14152, %14145
  %14154 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14149, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14155 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14153, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14156 = shufflevector <16 x i16> %14154, <16 x i16> %14155, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14157 = lshr <32 x i16> %14156, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14158 = shufflevector <32 x i16> %14157, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14159 = zext i32 %.pre-phi3386 to i64
  %14160 = mul nsw i64 %97, %14159
  %14161 = add nsw i64 %99, %14160
  %14162 = getelementptr inbounds i16, i16* %blur_x, i64 %14161
  %14163 = getelementptr inbounds i16, i16* %14162, i64 -32
  %14164 = bitcast i16* %14163 to <16 x i16>*
  store <16 x i16> %14158, <16 x i16>* %14164, align 2, !tbaa !399
  %14165 = shufflevector <32 x i16> %14157, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14166 = getelementptr inbounds i16, i16* %14162, i64 -16
  %14167 = bitcast i16* %14166 to <16 x i16>*
  store <16 x i16> %14165, <16 x i16>* %14167, align 2, !tbaa !399
  %14168 = zext i32 %.pre-phi to i64
  %14169 = mul nsw i64 %14168, %112
  %14170 = add nsw i64 %14169, %94
  %14171 = getelementptr inbounds i16, i16* %blur_x, i64 %14170
  %14172 = getelementptr inbounds i16, i16* %14171, i64 -32
  %14173 = bitcast i16* %14172 to <16 x i16>*
  %14174 = load <16 x i16>, <16 x i16>* %14173, align 2, !tbaa !399
  %14175 = getelementptr inbounds i16, i16* %14171, i64 -16
  %14176 = bitcast i16* %14175 to <16 x i16>*
  %14177 = load <16 x i16>, <16 x i16>* %14176, align 2, !tbaa !399
  %14178 = zext i32 %.pre-phi3408 to i64
  %14179 = mul nsw i64 %14178, %112
  %14180 = add nsw i64 %14179, %94
  %14181 = getelementptr inbounds i16, i16* %blur_x, i64 %14180
  %14182 = getelementptr inbounds i16, i16* %14181, i64 -32
  %14183 = bitcast i16* %14182 to <16 x i16>*
  %14184 = load <16 x i16>, <16 x i16>* %14183, align 2, !tbaa !399
  %14185 = getelementptr inbounds i16, i16* %14181, i64 -16
  %14186 = bitcast i16* %14185 to <16 x i16>*
  %14187 = load <16 x i16>, <16 x i16>* %14186, align 2, !tbaa !399
  %14188 = zext i32 %.pre-phi3378 to i64
  %14189 = mul nsw i64 %14188, %112
  %14190 = add nsw i64 %14189, %94
  %14191 = getelementptr inbounds i16, i16* %blur_x, i64 %14190
  %14192 = getelementptr inbounds i16, i16* %14191, i64 -32
  %14193 = bitcast i16* %14192 to <16 x i16>*
  %14194 = load <16 x i16>, <16 x i16>* %14193, align 2, !tbaa !399
  %14195 = getelementptr inbounds i16, i16* %14191, i64 -16
  %14196 = bitcast i16* %14195 to <16 x i16>*
  %14197 = load <16 x i16>, <16 x i16>* %14196, align 2, !tbaa !399
  %14198 = mul nsw i64 %14159, %112
  %14199 = add nsw i64 %14198, %94
  %14200 = getelementptr inbounds i16, i16* %blur_x, i64 %14199
  %14201 = getelementptr inbounds i16, i16* %14200, i64 -32
  %14202 = bitcast i16* %14201 to <16 x i16>*
  %14203 = load <16 x i16>, <16 x i16>* %14202, align 2, !tbaa !399
  %14204 = getelementptr inbounds i16, i16* %14200, i64 -16
  %14205 = bitcast i16* %14204 to <16 x i16>*
  %14206 = load <16 x i16>, <16 x i16>* %14205, align 2, !tbaa !399
  %14207 = zext i32 %.pre-phi3382 to i64
  %14208 = mul nsw i64 %14207, %112
  %14209 = add nsw i64 %14208, %94
  %14210 = getelementptr inbounds i16, i16* %blur_x, i64 %14209
  %14211 = getelementptr inbounds i16, i16* %14210, i64 -32
  %14212 = bitcast i16* %14211 to <16 x i16>*
  %14213 = load <16 x i16>, <16 x i16>* %14212, align 2, !tbaa !399
  %14214 = getelementptr inbounds i16, i16* %14210, i64 -16
  %14215 = bitcast i16* %14214 to <16 x i16>*
  %14216 = load <16 x i16>, <16 x i16>* %14215, align 2, !tbaa !399
  %14217 = add <16 x i16> %14184, %14174
  %14218 = add <16 x i16> %14217, %14194
  %14219 = add <16 x i16> %14218, %14203
  %14220 = add <16 x i16> %14219, %14213
  %14221 = add <16 x i16> %14187, %14177
  %14222 = add <16 x i16> %14221, %14197
  %14223 = add <16 x i16> %14222, %14206
  %14224 = add <16 x i16> %14223, %14216
  %14225 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14220, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14226 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14224, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14227 = shufflevector <16 x i16> %14225, <16 x i16> %14226, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14228 = lshr <32 x i16> %14227, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14229 = shufflevector <32 x i16> %14228, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14230 = sext i32 %a26 to i64
  %14231 = add nsw i64 %14230, 31
  %14232 = mul nsw i64 %14231, %113
  %14233 = add nsw i64 %115, %14232
  %14234 = getelementptr inbounds i16, i16* %66, i64 %14233
  %14235 = getelementptr inbounds i16, i16* %14234, i64 -32
  %14236 = bitcast i16* %14235 to <16 x i16>*
  store <16 x i16> %14229, <16 x i16>* %14236, align 2, !tbaa !401
  %14237 = shufflevector <32 x i16> %14228, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14238 = getelementptr inbounds i16, i16* %14234, i64 -16
  %14239 = bitcast i16* %14238 to <16 x i16>*
  store <16 x i16> %14237, <16 x i16>* %14239, align 2, !tbaa !401
  br label %after_bb773

"for blur_y.s0.x.x.rebased778":                   ; preds = %"for blur_y.s0.x.x.rebased778.preheader", %"consume blur_x785"
  %indvars.iv3248 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased778.preheader" ], [ %indvars.iv.next3249, %"consume blur_x785" ]
  %14240 = add nsw i64 %indvars.iv3248, %101
  %14241 = icmp slt i64 %14240, 1
  %14242 = trunc i64 %14240 to i32
  %14243 = shl nsw i32 %14242, 5
  %14244 = icmp sgt i32 %4, %14243
  %14245 = or i1 %14241, %14244
  br i1 %14245, label %"produce blur_x784", label %"for blur_y.s0.x.x.rebased778.consume blur_x785_crit_edge"

"for blur_y.s0.x.x.rebased778.consume blur_x785_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased778"
  %.pre3465 = shl nsw i64 %14240, 5
  br label %"consume blur_x785"

"end for blur_y.s0.x.x.rebased779":               ; preds = %"consume blur_x785", %after_bb773
  br i1 %102, label %"for blur_y.s0.x.x.rebased786.preheader", label %"end for blur_y.s0.x.x.rebased787", !prof !386

"for blur_y.s0.x.x.rebased786.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased779"
  %14246 = sext i32 %t1700 to i64
  %14247 = zext i32 %.pre-phi to i64
  %14248 = mul nsw i64 %14247, %112
  %14249 = sub nsw i64 %14248, %96
  %14250 = zext i32 %.pre-phi3408 to i64
  %14251 = mul nsw i64 %14250, %112
  %14252 = sub nsw i64 %14251, %96
  %14253 = zext i32 %.pre-phi3378 to i64
  %14254 = mul nsw i64 %14253, %112
  %14255 = sub nsw i64 %14254, %96
  %14256 = zext i32 %.pre-phi3386 to i64
  %14257 = mul nsw i64 %14256, %112
  %14258 = sub nsw i64 %14257, %96
  %14259 = zext i32 %.pre-phi3382 to i64
  %14260 = mul nsw i64 %14259, %112
  %14261 = sub nsw i64 %14260, %96
  %14262 = sext i32 %a26 to i64
  %14263 = add nsw i64 %14262, 31
  %14264 = mul nsw i64 %14263, %113
  %14265 = add nsw i64 %14264, %116
  br label %"for blur_y.s0.x.x.rebased786"

"produce blur_x784":                              ; preds = %"for blur_y.s0.x.x.rebased778"
  %t1208 = add nsw i32 %14243, %t2201
  %14266 = sext i32 %t1208 to i64
  %14267 = getelementptr inbounds i16, i16* %read_input, i64 %14266
  %14268 = getelementptr inbounds i16, i16* %14267, i64 1
  %14269 = bitcast i16* %14268 to <16 x i16>*
  %14270 = load <16 x i16>, <16 x i16>* %14269, align 2, !tbaa !396
  %14271 = getelementptr inbounds i16, i16* %14267, i64 17
  %14272 = bitcast i16* %14271 to <16 x i16>*
  %14273 = load <16 x i16>, <16 x i16>* %14272, align 2, !tbaa !396
  %14274 = bitcast i16* %14267 to <16 x i16>*
  %14275 = load <16 x i16>, <16 x i16>* %14274, align 2, !tbaa !396
  %14276 = getelementptr inbounds i16, i16* %14267, i64 16
  %14277 = bitcast i16* %14276 to <16 x i16>*
  %14278 = load <16 x i16>, <16 x i16>* %14277, align 2, !tbaa !396
  %14279 = getelementptr inbounds i16, i16* %14267, i64 2
  %14280 = bitcast i16* %14279 to <16 x i16>*
  %14281 = load <16 x i16>, <16 x i16>* %14280, align 2, !tbaa !396
  %14282 = getelementptr inbounds i16, i16* %14267, i64 18
  %14283 = bitcast i16* %14282 to <16 x i16>*
  %14284 = load <16 x i16>, <16 x i16>* %14283, align 2, !tbaa !396
  %14285 = getelementptr inbounds i16, i16* %14267, i64 4
  %14286 = bitcast i16* %14285 to <16 x i16>*
  %14287 = load <16 x i16>, <16 x i16>* %14286, align 2, !tbaa !396
  %14288 = getelementptr inbounds i16, i16* %14267, i64 20
  %14289 = bitcast i16* %14288 to <16 x i16>*
  %14290 = load <16 x i16>, <16 x i16>* %14289, align 2, !tbaa !396
  %14291 = getelementptr inbounds i16, i16* %14267, i64 3
  %14292 = bitcast i16* %14291 to <16 x i16>*
  %14293 = load <16 x i16>, <16 x i16>* %14292, align 2, !tbaa !396
  %14294 = getelementptr inbounds i16, i16* %14267, i64 19
  %14295 = bitcast i16* %14294 to <16 x i16>*
  %14296 = load <16 x i16>, <16 x i16>* %14295, align 2, !tbaa !396
  %14297 = add <16 x i16> %14275, %14270
  %14298 = add <16 x i16> %14297, %14281
  %14299 = add <16 x i16> %14298, %14287
  %14300 = add <16 x i16> %14299, %14293
  %14301 = add <16 x i16> %14278, %14273
  %14302 = add <16 x i16> %14301, %14284
  %14303 = add <16 x i16> %14302, %14290
  %14304 = add <16 x i16> %14303, %14296
  %14305 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14300, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14306 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14304, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14307 = shufflevector <16 x i16> %14305, <16 x i16> %14306, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14308 = lshr <32 x i16> %14307, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14309 = shufflevector <32 x i16> %14308, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14310 = shl nsw i64 %14240, 5
  %14311 = add nsw i64 %14310, %14095
  %14312 = getelementptr inbounds i16, i16* %blur_x, i64 %14311
  %14313 = bitcast i16* %14312 to <16 x i16>*
  store <16 x i16> %14309, <16 x i16>* %14313, align 2, !tbaa !399
  %14314 = shufflevector <32 x i16> %14308, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14315 = getelementptr inbounds i16, i16* %14312, i64 16
  %14316 = bitcast i16* %14315 to <16 x i16>*
  store <16 x i16> %14314, <16 x i16>* %14316, align 2, !tbaa !399
  br label %"consume blur_x785"

"consume blur_x785":                              ; preds = %"for blur_y.s0.x.x.rebased778.consume blur_x785_crit_edge", %"produce blur_x784"
  %.pre-phi3466 = phi i64 [ %.pre3465, %"for blur_y.s0.x.x.rebased778.consume blur_x785_crit_edge" ], [ %14310, %"produce blur_x784" ]
  %14317 = add nsw i64 %14098, %.pre-phi3466
  %14318 = getelementptr inbounds i16, i16* %blur_x, i64 %14317
  %14319 = bitcast i16* %14318 to <16 x i16>*
  %14320 = load <16 x i16>, <16 x i16>* %14319, align 2, !tbaa !399
  %14321 = getelementptr inbounds i16, i16* %14318, i64 16
  %14322 = bitcast i16* %14321 to <16 x i16>*
  %14323 = load <16 x i16>, <16 x i16>* %14322, align 2, !tbaa !399
  %14324 = add nsw i64 %14101, %.pre-phi3466
  %14325 = getelementptr inbounds i16, i16* %blur_x, i64 %14324
  %14326 = bitcast i16* %14325 to <16 x i16>*
  %14327 = load <16 x i16>, <16 x i16>* %14326, align 2, !tbaa !399
  %14328 = getelementptr inbounds i16, i16* %14325, i64 16
  %14329 = bitcast i16* %14328 to <16 x i16>*
  %14330 = load <16 x i16>, <16 x i16>* %14329, align 2, !tbaa !399
  %14331 = add nsw i64 %14104, %.pre-phi3466
  %14332 = getelementptr inbounds i16, i16* %blur_x, i64 %14331
  %14333 = bitcast i16* %14332 to <16 x i16>*
  %14334 = load <16 x i16>, <16 x i16>* %14333, align 2, !tbaa !399
  %14335 = getelementptr inbounds i16, i16* %14332, i64 16
  %14336 = bitcast i16* %14335 to <16 x i16>*
  %14337 = load <16 x i16>, <16 x i16>* %14336, align 2, !tbaa !399
  %14338 = add nsw i64 %14107, %.pre-phi3466
  %14339 = getelementptr inbounds i16, i16* %blur_x, i64 %14338
  %14340 = bitcast i16* %14339 to <16 x i16>*
  %14341 = load <16 x i16>, <16 x i16>* %14340, align 2, !tbaa !399
  %14342 = getelementptr inbounds i16, i16* %14339, i64 16
  %14343 = bitcast i16* %14342 to <16 x i16>*
  %14344 = load <16 x i16>, <16 x i16>* %14343, align 2, !tbaa !399
  %14345 = add nsw i64 %14110, %.pre-phi3466
  %14346 = getelementptr inbounds i16, i16* %blur_x, i64 %14345
  %14347 = bitcast i16* %14346 to <16 x i16>*
  %14348 = load <16 x i16>, <16 x i16>* %14347, align 2, !tbaa !399
  %14349 = getelementptr inbounds i16, i16* %14346, i64 16
  %14350 = bitcast i16* %14349 to <16 x i16>*
  %14351 = load <16 x i16>, <16 x i16>* %14350, align 2, !tbaa !399
  %14352 = add <16 x i16> %14327, %14320
  %14353 = add <16 x i16> %14352, %14334
  %14354 = add <16 x i16> %14353, %14341
  %14355 = add <16 x i16> %14354, %14348
  %14356 = add <16 x i16> %14330, %14323
  %14357 = add <16 x i16> %14356, %14337
  %14358 = add <16 x i16> %14357, %14344
  %14359 = add <16 x i16> %14358, %14351
  %14360 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14355, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14361 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14359, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14362 = shufflevector <16 x i16> %14360, <16 x i16> %14361, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14363 = lshr <32 x i16> %14362, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14364 = shufflevector <32 x i16> %14363, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14365 = add nsw i64 %14114, %.pre-phi3466
  %14366 = getelementptr inbounds i16, i16* %66, i64 %14365
  %14367 = bitcast i16* %14366 to <16 x i16>*
  store <16 x i16> %14364, <16 x i16>* %14367, align 2, !tbaa !401
  %14368 = shufflevector <32 x i16> %14363, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14369 = getelementptr inbounds i16, i16* %14366, i64 16
  %14370 = bitcast i16* %14369 to <16 x i16>*
  store <16 x i16> %14368, <16 x i16>* %14370, align 2, !tbaa !401
  %indvars.iv.next3249 = add nuw nsw i64 %indvars.iv3248, 1
  %.not2628 = icmp eq i64 %indvars.iv.next3249, %184
  br i1 %.not2628, label %"end for blur_y.s0.x.x.rebased779", label %"for blur_y.s0.x.x.rebased778"

"for blur_y.s0.x.x.rebased786":                   ; preds = %"for blur_y.s0.x.x.rebased786.preheader", %"consume blur_x794"
  %blur_y.s0.x.x.rebased788 = phi i32 [ %14484, %"consume blur_x794" ], [ 0, %"for blur_y.s0.x.x.rebased786.preheader" ]
  %14371 = add nsw i32 %blur_y.s0.x.x.rebased788, %t1626
  %a322 = shl nsw i32 %14371, 5
  %14372 = icmp sgt i32 %a14, %a322
  %b328 = select i1 %14372, i32 %a322, i32 %a14
  %14373 = icmp slt i32 %14371, 1
  %14374 = icmp sgt i32 %4, %a322
  %14375 = or i1 %14373, %14374
  br i1 %14375, label %"produce blur_x792", label %"consume blur_x794"

"end for blur_y.s0.x.x.rebased787":               ; preds = %"consume blur_x794", %"end for blur_y.s0.x.x.rebased779"
  %14376 = add nuw nsw i32 %blur_y.s0.y.y, 1
  %.not2626 = icmp eq i32 %14376, %t1612
  br i1 %.not2626, label %"end for blur_y.s0.y.y.loopexit", label %"for blur_y.s0.y.y"

"produce blur_x792":                              ; preds = %"for blur_y.s0.x.x.rebased786"
  %14377 = icmp slt i32 %b328, %4
  %blur_x.s0.x.v1.base.s793 = select i1 %14377, i32 %b328, i32 %4
  %t1213 = add nsw i32 %blur_x.s0.x.v1.base.s793, %t2201
  %14378 = sext i32 %t1213 to i64
  %14379 = getelementptr inbounds i16, i16* %read_input, i64 %14378
  %14380 = getelementptr inbounds i16, i16* %14379, i64 1
  %14381 = bitcast i16* %14380 to <16 x i16>*
  %14382 = load <16 x i16>, <16 x i16>* %14381, align 2, !tbaa !396
  %14383 = getelementptr inbounds i16, i16* %14379, i64 17
  %14384 = bitcast i16* %14383 to <16 x i16>*
  %14385 = load <16 x i16>, <16 x i16>* %14384, align 2, !tbaa !396
  %14386 = bitcast i16* %14379 to <16 x i16>*
  %14387 = load <16 x i16>, <16 x i16>* %14386, align 2, !tbaa !396
  %14388 = getelementptr inbounds i16, i16* %14379, i64 16
  %14389 = bitcast i16* %14388 to <16 x i16>*
  %14390 = load <16 x i16>, <16 x i16>* %14389, align 2, !tbaa !396
  %14391 = getelementptr inbounds i16, i16* %14379, i64 2
  %14392 = bitcast i16* %14391 to <16 x i16>*
  %14393 = load <16 x i16>, <16 x i16>* %14392, align 2, !tbaa !396
  %14394 = getelementptr inbounds i16, i16* %14379, i64 18
  %14395 = bitcast i16* %14394 to <16 x i16>*
  %14396 = load <16 x i16>, <16 x i16>* %14395, align 2, !tbaa !396
  %14397 = getelementptr inbounds i16, i16* %14379, i64 4
  %14398 = bitcast i16* %14397 to <16 x i16>*
  %14399 = load <16 x i16>, <16 x i16>* %14398, align 2, !tbaa !396
  %14400 = getelementptr inbounds i16, i16* %14379, i64 20
  %14401 = bitcast i16* %14400 to <16 x i16>*
  %14402 = load <16 x i16>, <16 x i16>* %14401, align 2, !tbaa !396
  %14403 = getelementptr inbounds i16, i16* %14379, i64 3
  %14404 = bitcast i16* %14403 to <16 x i16>*
  %14405 = load <16 x i16>, <16 x i16>* %14404, align 2, !tbaa !396
  %14406 = getelementptr inbounds i16, i16* %14379, i64 19
  %14407 = bitcast i16* %14406 to <16 x i16>*
  %14408 = load <16 x i16>, <16 x i16>* %14407, align 2, !tbaa !396
  %14409 = add <16 x i16> %14387, %14382
  %14410 = add <16 x i16> %14409, %14393
  %14411 = add <16 x i16> %14410, %14399
  %14412 = add <16 x i16> %14411, %14405
  %14413 = add <16 x i16> %14390, %14385
  %14414 = add <16 x i16> %14413, %14396
  %14415 = add <16 x i16> %14414, %14402
  %14416 = add <16 x i16> %14415, %14408
  %14417 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14412, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14418 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14416, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14419 = shufflevector <16 x i16> %14417, <16 x i16> %14418, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14420 = lshr <32 x i16> %14419, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14421 = shufflevector <32 x i16> %14420, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14422 = sext i32 %blur_x.s0.x.v1.base.s793 to i64
  %14423 = add nsw i64 %14422, %14246
  %14424 = getelementptr inbounds i16, i16* %blur_x, i64 %14423
  %14425 = bitcast i16* %14424 to <16 x i16>*
  store <16 x i16> %14421, <16 x i16>* %14425, align 2, !tbaa !399
  %14426 = shufflevector <32 x i16> %14420, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14427 = getelementptr inbounds i16, i16* %14424, i64 16
  %14428 = bitcast i16* %14427 to <16 x i16>*
  store <16 x i16> %14426, <16 x i16>* %14428, align 2, !tbaa !399
  br label %"consume blur_x794"

"consume blur_x794":                              ; preds = %"for blur_y.s0.x.x.rebased786", %"produce blur_x792"
  %14429 = sext i32 %b328 to i64
  %14430 = add nsw i64 %14249, %14429
  %14431 = getelementptr inbounds i16, i16* %blur_x, i64 %14430
  %14432 = bitcast i16* %14431 to <16 x i16>*
  %14433 = load <16 x i16>, <16 x i16>* %14432, align 2, !tbaa !399
  %14434 = getelementptr inbounds i16, i16* %14431, i64 16
  %14435 = bitcast i16* %14434 to <16 x i16>*
  %14436 = load <16 x i16>, <16 x i16>* %14435, align 2, !tbaa !399
  %14437 = add nsw i64 %14252, %14429
  %14438 = getelementptr inbounds i16, i16* %blur_x, i64 %14437
  %14439 = bitcast i16* %14438 to <16 x i16>*
  %14440 = load <16 x i16>, <16 x i16>* %14439, align 2, !tbaa !399
  %14441 = getelementptr inbounds i16, i16* %14438, i64 16
  %14442 = bitcast i16* %14441 to <16 x i16>*
  %14443 = load <16 x i16>, <16 x i16>* %14442, align 2, !tbaa !399
  %14444 = add nsw i64 %14255, %14429
  %14445 = getelementptr inbounds i16, i16* %blur_x, i64 %14444
  %14446 = bitcast i16* %14445 to <16 x i16>*
  %14447 = load <16 x i16>, <16 x i16>* %14446, align 2, !tbaa !399
  %14448 = getelementptr inbounds i16, i16* %14445, i64 16
  %14449 = bitcast i16* %14448 to <16 x i16>*
  %14450 = load <16 x i16>, <16 x i16>* %14449, align 2, !tbaa !399
  %14451 = add nsw i64 %14258, %14429
  %14452 = getelementptr inbounds i16, i16* %blur_x, i64 %14451
  %14453 = bitcast i16* %14452 to <16 x i16>*
  %14454 = load <16 x i16>, <16 x i16>* %14453, align 2, !tbaa !399
  %14455 = getelementptr inbounds i16, i16* %14452, i64 16
  %14456 = bitcast i16* %14455 to <16 x i16>*
  %14457 = load <16 x i16>, <16 x i16>* %14456, align 2, !tbaa !399
  %14458 = add nsw i64 %14261, %14429
  %14459 = getelementptr inbounds i16, i16* %blur_x, i64 %14458
  %14460 = bitcast i16* %14459 to <16 x i16>*
  %14461 = load <16 x i16>, <16 x i16>* %14460, align 2, !tbaa !399
  %14462 = getelementptr inbounds i16, i16* %14459, i64 16
  %14463 = bitcast i16* %14462 to <16 x i16>*
  %14464 = load <16 x i16>, <16 x i16>* %14463, align 2, !tbaa !399
  %14465 = add <16 x i16> %14440, %14433
  %14466 = add <16 x i16> %14465, %14447
  %14467 = add <16 x i16> %14466, %14454
  %14468 = add <16 x i16> %14467, %14461
  %14469 = add <16 x i16> %14443, %14436
  %14470 = add <16 x i16> %14469, %14450
  %14471 = add <16 x i16> %14470, %14457
  %14472 = add <16 x i16> %14471, %14464
  %14473 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14468, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14474 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14472, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %14475 = shufflevector <16 x i16> %14473, <16 x i16> %14474, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14476 = lshr <32 x i16> %14475, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %14477 = shufflevector <32 x i16> %14476, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14478 = add nsw i64 %14265, %14429
  %14479 = getelementptr inbounds i16, i16* %66, i64 %14478
  %14480 = bitcast i16* %14479 to <16 x i16>*
  store <16 x i16> %14477, <16 x i16>* %14480, align 2, !tbaa !401
  %14481 = shufflevector <32 x i16> %14476, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14482 = getelementptr inbounds i16, i16* %14479, i64 16
  %14483 = bitcast i16* %14482 to <16 x i16>*
  store <16 x i16> %14481, <16 x i16>* %14483, align 2, !tbaa !401
  %14484 = add nuw nsw i32 %blur_y.s0.x.x.rebased788, 1
  %.not2627 = icmp eq i32 %14484, %t1683
  br i1 %.not2627, label %"end for blur_y.s0.x.x.rebased787", label %"for blur_y.s0.x.x.rebased786"

"for blur_y.s0.y.y816":                           ; preds = %"for blur_y.s0.y.y816.preheader", %"end for blur_y.s0.x.x.rebased2367"
  %blur_y.s0.y.y818 = phi i32 [ %28495, %"end for blur_y.s0.x.x.rebased2367" ], [ 0, %"for blur_y.s0.y.y816.preheader" ]
  %a349 = shl nsw i32 %blur_y.s0.y.y818, 5
  %14485 = icmp sgt i32 %b351, %a349
  %blur_y.s0.y.yi.base.s819 = select i1 %14485, i32 %a349, i32 %b351
  %14486 = load i64, i64* %.fca.1.gep, align 8, !tbaa !387
  %cmp.i2775 = icmp ult i64 %14486, %263
  %14487 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !389
  br i1 %cmp.i2775, label %if.then.i2778, label %pseudostack_alloc.exit2791, !prof !390

if.then.i2778:                                    ; preds = %"for blur_y.s0.y.y816"
  %tobool1.not.i2777 = icmp ne i8* %14487, null
  %14488 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i2780 = icmp ugt i64 %14488, 16384
  %or.cond2845 = and i1 %tobool1.not.i2777, %cmp2.i2780
  br i1 %or.cond2845, label %if.then3.i2782, label %if.end.i2786

if.then3.i2782:                                   ; preds = %if.then.i2778
  call void @halide_free(i8* null, i8* nonnull %14487) #16
  %.pre3372 = load i64, i64* %.fca.2.gep, align 8, !tbaa !391
  br label %if.end.i2786

if.end.i2786:                                     ; preds = %if.then3.i2782, %if.then.i2778
  %14489 = phi i64 [ %.pre3372, %if.then3.i2782 ], [ %14488, %if.then.i2778 ]
  %add.i2784 = add i64 %14489, %263
  store i64 %add.i2784, i64* %.fca.2.gep, align 8, !tbaa !391
  %cmp7.i2785 = icmp ugt i64 %add.i2784, 16384
  br i1 %cmp7.i2785, label %if.then8.i2788, label %if.end11.i2790

if.then8.i2788:                                   ; preds = %if.end.i2786
  %call.i2787 = call i8* @halide_malloc(i8* null, i64 %263) #16
  br label %if.end11.i2790

if.end11.i2790:                                   ; preds = %if.then8.i2788, %if.end.i2786
  %storemerge.i2789 = phi i8* [ %call.i2787, %if.then8.i2788 ], [ null, %if.end.i2786 ]
  store i8* %storemerge.i2789, i8** %.fca.0.gep, align 8, !tbaa !389
  store i64 %263, i64* %.fca.1.gep, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2791

pseudostack_alloc.exit2791:                       ; preds = %"for blur_y.s0.y.y816", %if.end11.i2790
  %14490 = phi i8* [ %storemerge.i2789, %if.end11.i2790 ], [ %14487, %"for blur_y.s0.y.y816" ]
  %14491 = bitcast i8* %14490 to i16*
  %.not2538 = icmp eq i8* %14490, null
  br i1 %.not2538, label %then_bb821, label %"produce read_input823", !prof !392

"end for blur_y.s0.y.y817":                       ; preds = %"end for blur_y.s0.y.y"
  %tobool.not.i.not = icmp eq i8* %.02834, null
  br i1 %tobool.not.i.not, label %call_destructor.exit, label %if.then.i2792

if.then.i2792.loopexit:                           ; preds = %"end for blur_y.s0.x.x.rebased2367"
  %14492 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  %14493 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  br label %if.then.i2792

if.then.i2792:                                    ; preds = %if.then.i2792.loopexit, %"end for blur_y.s0.y.y817"
  %.12842 = phi i8* [ %.0, %"end for blur_y.s0.y.y817" ], [ %14492, %if.then.i2792.loopexit ]
  %.128352839 = phi i8* [ %.02834, %"end for blur_y.s0.y.y817" ], [ %14493, %if.then.i2792.loopexit ]
  %ptr1.i = bitcast i8* %.128352839 to i8**
  %14494 = load i8*, i8** %ptr1.i, align 8, !tbaa !389
  %tobool.not.i2816 = icmp eq i8* %14494, null
  br i1 %tobool.not.i2816, label %pseudostack_free.exit, label %land.lhs.true.i2819

land.lhs.true.i2819:                              ; preds = %if.then.i2792
  %cumulative_size.i2817 = getelementptr inbounds i8, i8* %.128352839, i64 16
  %14495 = bitcast i8* %cumulative_size.i2817 to i64*
  %14496 = load i64, i64* %14495, align 8, !tbaa !391
  %cmp.i2818 = icmp ugt i64 %14496, 16384
  br i1 %cmp.i2818, label %if.then.i2820, label %pseudostack_free.exit

if.then.i2820:                                    ; preds = %land.lhs.true.i2819
  call void @halide_free(i8* null, i8* nonnull %14494) #16
  br label %pseudostack_free.exit

pseudostack_free.exit:                            ; preds = %if.then.i2792, %land.lhs.true.i2819, %if.then.i2820
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %.128352839, i8 0, i64 24, i1 false)
  br label %call_destructor.exit

call_destructor.exit:                             ; preds = %"end for blur_y.s0.y.y817", %pseudostack_free.exit
  %.12841 = phi i8* [ %.0, %"end for blur_y.s0.y.y817" ], [ %.12842, %pseudostack_free.exit ]
  %tobool.not.i2794.not = icmp eq i8* %.12841, null
  br i1 %tobool.not.i2794.not, label %call_destructor.exit2797, label %if.then.i2795

if.then.i2795:                                    ; preds = %call_destructor.exit
  %ptr1.i2823 = bitcast i8* %.12841 to i8**
  %14497 = load i8*, i8** %ptr1.i2823, align 8, !tbaa !389
  %tobool.not.i2824 = icmp eq i8* %14497, null
  br i1 %tobool.not.i2824, label %pseudostack_free.exit2832, label %land.lhs.true.i2827

land.lhs.true.i2827:                              ; preds = %if.then.i2795
  %cumulative_size.i2825 = getelementptr inbounds i8, i8* %.12841, i64 16
  %14498 = bitcast i8* %cumulative_size.i2825 to i64*
  %14499 = load i64, i64* %14498, align 8, !tbaa !391
  %cmp.i2826 = icmp ugt i64 %14499, 16384
  br i1 %cmp.i2826, label %if.then.i2828, label %pseudostack_free.exit2832

if.then.i2828:                                    ; preds = %land.lhs.true.i2827
  call void @halide_free(i8* null, i8* nonnull %14497) #16
  br label %pseudostack_free.exit2832

pseudostack_free.exit2832:                        ; preds = %if.then.i2795, %land.lhs.true.i2827, %if.then.i2828
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %.12841, i8 0, i64 24, i1 false)
  br label %call_destructor.exit2797

call_destructor.exit2797:                         ; preds = %call_destructor.exit, %pseudostack_free.exit2832
  ret i32 0

then_bb821:                                       ; preds = %pseudostack_alloc.exit2791
  %14500 = alloca i8*, i64 %263, align 32
  %14501 = bitcast i8** %14500 to i16*
  store i8** %14500, i8*** %264, align 8
  br label %"produce read_input823"

"produce read_input823":                          ; preds = %pseudostack_alloc.exit2791, %then_bb821
  %read_input822 = phi i16* [ %14501, %then_bb821 ], [ %14491, %pseudostack_alloc.exit2791 ]
  %a353 = add nsw i32 %blur_y.s0.y.yi.base.s819, %199
  %14502 = icmp sgt i32 %a353, %205
  %a352 = select i1 %14502, i32 %a353, i32 %205
  %b354 = add nsw i32 %a353, 36
  %14503 = icmp sgt i32 %b354, %a352
  %read_input.s0.y.prologue824 = select i1 %14503, i32 %a352, i32 %b354
  %14504 = icmp sgt i32 %a352, %b357
  %a354 = select i1 %14504, i32 %a352, i32 %b357
  %14505 = icmp sgt i32 %b354, %a354
  %read_input.s0.y.epilogue825 = select i1 %14505, i32 %a354, i32 %b354
  %a358 = sub i32 %265, %blur_y.s0.y.yi.base.s819
  %14506 = icmp sgt i32 %a358, 0
  br i1 %14506, label %"for read_input.s0.y.rebased830.preheader", label %"end for read_input.s0.y.rebased831", !prof !386

"for read_input.s0.y.rebased830.preheader":       ; preds = %"produce read_input823"
  %t1651827 = add nsw i32 %266, %blur_y.s0.y.yi.base.s819
  %14507 = icmp slt i32 %a358, 36
  %a357 = select i1 %14507, i32 %a358, i32 36
  %14508 = sext i32 %t1651827 to i64
  %14509 = zext i32 %a357 to i64
  br label %"for read_input.s0.y.rebased830"

"for read_input.s0.y.rebased830":                 ; preds = %"for read_input.s0.y.rebased830.preheader", %"end for read_input.s0.x.x836"
  %indvars.iv3251 = phi i64 [ 0, %"for read_input.s0.y.rebased830.preheader" ], [ %indvars.iv.next3252, %"end for read_input.s0.x.x836" ]
  %14510 = add nsw i64 %indvars.iv3251, %14508
  %14511 = icmp slt i64 %14510, %372
  %14512 = trunc i64 %14510 to i32
  %a360 = select i1 %14511, i32 %14512, i32 %b363
  %14513 = mul nsw i64 %indvars.iv3251, %276
  %14514 = sub nsw i64 %14513, %277
  %14515 = icmp sgt i32 %a360, 0
  %14516 = select i1 %14515, i32 %a360, i32 0
  %14517 = mul nsw i32 %14516, %207
  %t1653833 = sub nsw i32 %14517, %203
  %14518 = insertelement <32 x i32> undef, i32 %t1653833, i32 0
  %14519 = shufflevector <32 x i32> %14518, <32 x i32> undef, <32 x i32> zeroinitializer
  br label %"for read_input.s0.x.x835"

"end for read_input.s0.y.rebased831":             ; preds = %"end for read_input.s0.x.x836", %"produce read_input823"
  %14520 = icmp sgt i32 %a367, %a353
  %a366 = select i1 %14520, i32 %a367, i32 %a353
  %14521 = icmp sgt i32 %b354, %a366
  %14522 = select i1 %14521, i32 %a366, i32 %b354
  %t1655840 = sub nsw i32 %14522, %read_input.s0.y.prologue824
  %14523 = icmp sgt i32 %t1655840, 0
  br i1 %14523, label %"for read_input.s0.y.rebased845.preheader", label %"end for read_input.s0.y.rebased846", !prof !386

"for read_input.s0.y.rebased845.preheader":       ; preds = %"end for read_input.s0.y.rebased831"
  %t1658842 = sub i32 %read_input.s0.y.prologue824, %205
  %14524 = sext i32 %blur_y.s0.y.yi.base.s819 to i64
  %a374 = sub nsw i64 %275, %14524
  %14525 = icmp slt i64 %a374, 36
  %a373 = select i1 %14525, i64 %a374, i64 36
  %14526 = icmp sgt i64 %a373, 0
  %14527 = select i1 %14526, i64 %a373, i64 0
  %14528 = sext i32 %t1658842 to i64
  %14529 = zext i32 %t1655840 to i64
  br label %"for read_input.s0.y.rebased845"

"for read_input.s0.x.x835":                       ; preds = %"for read_input.s0.y.rebased830", %"for read_input.s0.x.x835"
  %read_input.s0.x.x837 = phi i32 [ %14728, %"for read_input.s0.x.x835" ], [ 0, %"for read_input.s0.y.rebased830" ]
  %14530 = shl nsw i32 %read_input.s0.x.x837, 5
  %a362 = add nsw i32 %14530, %t1650829
  %14531 = icmp sgt i32 %b364, %a362
  %read_input.s0.x.v2.base.s838 = select i1 %14531, i32 %a362, i32 %b364
  %14532 = add nsw i32 %read_input.s0.x.v2.base.s838, -32
  %14533 = insertelement <32 x i32> undef, i32 %14532, i32 0
  %14534 = shufflevector <32 x i32> %14533, <32 x i32> undef, <32 x i32> zeroinitializer
  %a364 = add nsw <32 x i32> %14534, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14535 = shufflevector <32 x i32> %a364, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14536 = icmp sgt <8 x i32> %269, %14535
  %14537 = shufflevector <32 x i32> %a364, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14538 = icmp sgt <8 x i32> %269, %14537
  %14539 = shufflevector <32 x i32> %a364, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %14540 = icmp sgt <8 x i32> %269, %14539
  %14541 = shufflevector <32 x i32> %a364, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14542 = icmp sgt <8 x i32> %269, %14541
  %14543 = select <8 x i1> %14536, <8 x i32> %14535, <8 x i32> %269
  %14544 = select <8 x i1> %14538, <8 x i32> %14537, <8 x i32> %269
  %14545 = select <8 x i1> %14540, <8 x i32> %14539, <8 x i32> %269
  %14546 = select <8 x i1> %14542, <8 x i32> %14541, <8 x i32> %269
  %14547 = icmp sgt <8 x i32> %14543, %271
  %14548 = icmp sgt <8 x i32> %14544, %271
  %14549 = icmp sgt <8 x i32> %14545, %271
  %14550 = icmp sgt <8 x i32> %14546, %271
  %14551 = select <8 x i1> %14547, <8 x i32> %14543, <8 x i32> %271
  %14552 = select <8 x i1> %14548, <8 x i32> %14544, <8 x i32> %271
  %14553 = select <8 x i1> %14549, <8 x i32> %14545, <8 x i32> %271
  %14554 = select <8 x i1> %14550, <8 x i32> %14546, <8 x i32> %271
  %14555 = shufflevector <8 x i32> %14551, <8 x i32> %14552, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14556 = shufflevector <8 x i32> %14553, <8 x i32> %14554, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14557 = shufflevector <16 x i32> %14555, <16 x i32> %14556, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14558 = add nsw <32 x i32> %14557, %14519
  %14559 = extractelement <32 x i32> %14558, i32 0
  %14560 = sext i32 %14559 to i64
  %14561 = getelementptr inbounds i16, i16* %258, i64 %14560
  %14562 = load i16, i16* %14561, align 2, !tbaa !393
  %14563 = insertelement <32 x i16> undef, i16 %14562, i32 0
  %14564 = extractelement <32 x i32> %14558, i32 1
  %14565 = sext i32 %14564 to i64
  %14566 = getelementptr inbounds i16, i16* %258, i64 %14565
  %14567 = load i16, i16* %14566, align 2, !tbaa !393
  %14568 = insertelement <32 x i16> %14563, i16 %14567, i32 1
  %14569 = extractelement <32 x i32> %14558, i32 2
  %14570 = sext i32 %14569 to i64
  %14571 = getelementptr inbounds i16, i16* %258, i64 %14570
  %14572 = load i16, i16* %14571, align 2, !tbaa !393
  %14573 = insertelement <32 x i16> %14568, i16 %14572, i32 2
  %14574 = extractelement <32 x i32> %14558, i32 3
  %14575 = sext i32 %14574 to i64
  %14576 = getelementptr inbounds i16, i16* %258, i64 %14575
  %14577 = load i16, i16* %14576, align 2, !tbaa !393
  %14578 = insertelement <32 x i16> %14573, i16 %14577, i32 3
  %14579 = extractelement <32 x i32> %14558, i32 4
  %14580 = sext i32 %14579 to i64
  %14581 = getelementptr inbounds i16, i16* %258, i64 %14580
  %14582 = load i16, i16* %14581, align 2, !tbaa !393
  %14583 = insertelement <32 x i16> %14578, i16 %14582, i32 4
  %14584 = extractelement <32 x i32> %14558, i32 5
  %14585 = sext i32 %14584 to i64
  %14586 = getelementptr inbounds i16, i16* %258, i64 %14585
  %14587 = load i16, i16* %14586, align 2, !tbaa !393
  %14588 = insertelement <32 x i16> %14583, i16 %14587, i32 5
  %14589 = extractelement <32 x i32> %14558, i32 6
  %14590 = sext i32 %14589 to i64
  %14591 = getelementptr inbounds i16, i16* %258, i64 %14590
  %14592 = load i16, i16* %14591, align 2, !tbaa !393
  %14593 = insertelement <32 x i16> %14588, i16 %14592, i32 6
  %14594 = extractelement <32 x i32> %14558, i32 7
  %14595 = sext i32 %14594 to i64
  %14596 = getelementptr inbounds i16, i16* %258, i64 %14595
  %14597 = load i16, i16* %14596, align 2, !tbaa !393
  %14598 = insertelement <32 x i16> %14593, i16 %14597, i32 7
  %14599 = extractelement <32 x i32> %14558, i32 8
  %14600 = sext i32 %14599 to i64
  %14601 = getelementptr inbounds i16, i16* %258, i64 %14600
  %14602 = load i16, i16* %14601, align 2, !tbaa !393
  %14603 = insertelement <32 x i16> %14598, i16 %14602, i32 8
  %14604 = extractelement <32 x i32> %14558, i32 9
  %14605 = sext i32 %14604 to i64
  %14606 = getelementptr inbounds i16, i16* %258, i64 %14605
  %14607 = load i16, i16* %14606, align 2, !tbaa !393
  %14608 = insertelement <32 x i16> %14603, i16 %14607, i32 9
  %14609 = extractelement <32 x i32> %14558, i32 10
  %14610 = sext i32 %14609 to i64
  %14611 = getelementptr inbounds i16, i16* %258, i64 %14610
  %14612 = load i16, i16* %14611, align 2, !tbaa !393
  %14613 = insertelement <32 x i16> %14608, i16 %14612, i32 10
  %14614 = extractelement <32 x i32> %14558, i32 11
  %14615 = sext i32 %14614 to i64
  %14616 = getelementptr inbounds i16, i16* %258, i64 %14615
  %14617 = load i16, i16* %14616, align 2, !tbaa !393
  %14618 = insertelement <32 x i16> %14613, i16 %14617, i32 11
  %14619 = extractelement <32 x i32> %14558, i32 12
  %14620 = sext i32 %14619 to i64
  %14621 = getelementptr inbounds i16, i16* %258, i64 %14620
  %14622 = load i16, i16* %14621, align 2, !tbaa !393
  %14623 = insertelement <32 x i16> %14618, i16 %14622, i32 12
  %14624 = extractelement <32 x i32> %14558, i32 13
  %14625 = sext i32 %14624 to i64
  %14626 = getelementptr inbounds i16, i16* %258, i64 %14625
  %14627 = load i16, i16* %14626, align 2, !tbaa !393
  %14628 = insertelement <32 x i16> %14623, i16 %14627, i32 13
  %14629 = extractelement <32 x i32> %14558, i32 14
  %14630 = sext i32 %14629 to i64
  %14631 = getelementptr inbounds i16, i16* %258, i64 %14630
  %14632 = load i16, i16* %14631, align 2, !tbaa !393
  %14633 = insertelement <32 x i16> %14628, i16 %14632, i32 14
  %14634 = extractelement <32 x i32> %14558, i32 15
  %14635 = sext i32 %14634 to i64
  %14636 = getelementptr inbounds i16, i16* %258, i64 %14635
  %14637 = load i16, i16* %14636, align 2, !tbaa !393
  %14638 = insertelement <32 x i16> %14633, i16 %14637, i32 15
  %14639 = extractelement <32 x i32> %14558, i32 16
  %14640 = sext i32 %14639 to i64
  %14641 = getelementptr inbounds i16, i16* %258, i64 %14640
  %14642 = load i16, i16* %14641, align 2, !tbaa !393
  %14643 = insertelement <32 x i16> %14638, i16 %14642, i32 16
  %14644 = extractelement <32 x i32> %14558, i32 17
  %14645 = sext i32 %14644 to i64
  %14646 = getelementptr inbounds i16, i16* %258, i64 %14645
  %14647 = load i16, i16* %14646, align 2, !tbaa !393
  %14648 = insertelement <32 x i16> %14643, i16 %14647, i32 17
  %14649 = extractelement <32 x i32> %14558, i32 18
  %14650 = sext i32 %14649 to i64
  %14651 = getelementptr inbounds i16, i16* %258, i64 %14650
  %14652 = load i16, i16* %14651, align 2, !tbaa !393
  %14653 = insertelement <32 x i16> %14648, i16 %14652, i32 18
  %14654 = extractelement <32 x i32> %14558, i32 19
  %14655 = sext i32 %14654 to i64
  %14656 = getelementptr inbounds i16, i16* %258, i64 %14655
  %14657 = load i16, i16* %14656, align 2, !tbaa !393
  %14658 = insertelement <32 x i16> %14653, i16 %14657, i32 19
  %14659 = extractelement <32 x i32> %14558, i32 20
  %14660 = sext i32 %14659 to i64
  %14661 = getelementptr inbounds i16, i16* %258, i64 %14660
  %14662 = load i16, i16* %14661, align 2, !tbaa !393
  %14663 = insertelement <32 x i16> %14658, i16 %14662, i32 20
  %14664 = extractelement <32 x i32> %14558, i32 21
  %14665 = sext i32 %14664 to i64
  %14666 = getelementptr inbounds i16, i16* %258, i64 %14665
  %14667 = load i16, i16* %14666, align 2, !tbaa !393
  %14668 = insertelement <32 x i16> %14663, i16 %14667, i32 21
  %14669 = extractelement <32 x i32> %14558, i32 22
  %14670 = sext i32 %14669 to i64
  %14671 = getelementptr inbounds i16, i16* %258, i64 %14670
  %14672 = load i16, i16* %14671, align 2, !tbaa !393
  %14673 = insertelement <32 x i16> %14668, i16 %14672, i32 22
  %14674 = extractelement <32 x i32> %14558, i32 23
  %14675 = sext i32 %14674 to i64
  %14676 = getelementptr inbounds i16, i16* %258, i64 %14675
  %14677 = load i16, i16* %14676, align 2, !tbaa !393
  %14678 = insertelement <32 x i16> %14673, i16 %14677, i32 23
  %14679 = extractelement <32 x i32> %14558, i32 24
  %14680 = sext i32 %14679 to i64
  %14681 = getelementptr inbounds i16, i16* %258, i64 %14680
  %14682 = load i16, i16* %14681, align 2, !tbaa !393
  %14683 = insertelement <32 x i16> %14678, i16 %14682, i32 24
  %14684 = extractelement <32 x i32> %14558, i32 25
  %14685 = sext i32 %14684 to i64
  %14686 = getelementptr inbounds i16, i16* %258, i64 %14685
  %14687 = load i16, i16* %14686, align 2, !tbaa !393
  %14688 = insertelement <32 x i16> %14683, i16 %14687, i32 25
  %14689 = extractelement <32 x i32> %14558, i32 26
  %14690 = sext i32 %14689 to i64
  %14691 = getelementptr inbounds i16, i16* %258, i64 %14690
  %14692 = load i16, i16* %14691, align 2, !tbaa !393
  %14693 = insertelement <32 x i16> %14688, i16 %14692, i32 26
  %14694 = extractelement <32 x i32> %14558, i32 27
  %14695 = sext i32 %14694 to i64
  %14696 = getelementptr inbounds i16, i16* %258, i64 %14695
  %14697 = load i16, i16* %14696, align 2, !tbaa !393
  %14698 = insertelement <32 x i16> %14693, i16 %14697, i32 27
  %14699 = extractelement <32 x i32> %14558, i32 28
  %14700 = sext i32 %14699 to i64
  %14701 = getelementptr inbounds i16, i16* %258, i64 %14700
  %14702 = load i16, i16* %14701, align 2, !tbaa !393
  %14703 = insertelement <32 x i16> %14698, i16 %14702, i32 28
  %14704 = extractelement <32 x i32> %14558, i32 29
  %14705 = sext i32 %14704 to i64
  %14706 = getelementptr inbounds i16, i16* %258, i64 %14705
  %14707 = load i16, i16* %14706, align 2, !tbaa !393
  %14708 = insertelement <32 x i16> %14703, i16 %14707, i32 29
  %14709 = extractelement <32 x i32> %14558, i32 30
  %14710 = sext i32 %14709 to i64
  %14711 = getelementptr inbounds i16, i16* %258, i64 %14710
  %14712 = load i16, i16* %14711, align 2, !tbaa !393
  %14713 = insertelement <32 x i16> %14708, i16 %14712, i32 30
  %14714 = extractelement <32 x i32> %14558, i32 31
  %14715 = sext i32 %14714 to i64
  %14716 = getelementptr inbounds i16, i16* %258, i64 %14715
  %14717 = load i16, i16* %14716, align 2, !tbaa !393
  %14718 = insertelement <32 x i16> %14713, i16 %14717, i32 31
  %14719 = shufflevector <32 x i16> %14718, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14720 = sext i32 %read_input.s0.x.v2.base.s838 to i64
  %14721 = add nsw i64 %14514, %14720
  %14722 = getelementptr inbounds i16, i16* %read_input822, i64 %14721
  %14723 = getelementptr inbounds i16, i16* %14722, i64 -32
  %14724 = bitcast i16* %14723 to <16 x i16>*
  store <16 x i16> %14719, <16 x i16>* %14724, align 2, !tbaa !396
  %14725 = shufflevector <32 x i16> %14718, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14726 = getelementptr inbounds i16, i16* %14722, i64 -16
  %14727 = bitcast i16* %14726 to <16 x i16>*
  store <16 x i16> %14725, <16 x i16>* %14727, align 2, !tbaa !396
  %14728 = add nuw nsw i32 %read_input.s0.x.x837, 1
  %.not2622 = icmp eq i32 %14728, %214
  br i1 %.not2622, label %"end for read_input.s0.x.x836", label %"for read_input.s0.x.x835"

"end for read_input.s0.x.x836":                   ; preds = %"for read_input.s0.x.x835"
  %indvars.iv.next3252 = add nuw nsw i64 %indvars.iv3251, 1
  %.not2621 = icmp eq i64 %indvars.iv.next3252, %14509
  br i1 %.not2621, label %"end for read_input.s0.y.rebased831", label %"for read_input.s0.y.rebased830"

"for read_input.s0.y.rebased845":                 ; preds = %"for read_input.s0.y.rebased845.preheader", %"end for read_input.s0.x.x.rebased861"
  %indvars.iv3258 = phi i64 [ 0, %"for read_input.s0.y.rebased845.preheader" ], [ %indvars.iv.next3259, %"end for read_input.s0.x.x.rebased861" ]
  %14729 = add nsw i64 %indvars.iv3258, %14528
  %14730 = mul nsw i64 %14729, %376
  %14731 = sub nsw i64 %14730, %377
  br i1 %272, label %"for read_input.s0.x.x849.preheader", label %"end for read_input.s0.x.x850", !prof !386

"for read_input.s0.x.x849.preheader":             ; preds = %"for read_input.s0.y.rebased845"
  %14732 = trunc i64 %14731 to i32
  %14733 = insertelement <32 x i32> undef, i32 %14732, i32 0
  %14734 = shufflevector <32 x i32> %14733, <32 x i32> undef, <32 x i32> zeroinitializer
  %14735 = add nuw nsw i64 %14527, %indvars.iv3258
  %14736 = mul nsw i64 %14735, %276
  %14737 = sub i64 %14736, %277
  br label %"for read_input.s0.x.x849"

"end for read_input.s0.y.rebased846":             ; preds = %"end for read_input.s0.x.x.rebased861", %"end for read_input.s0.y.rebased831"
  %a390 = add nsw i32 %blur_y.s0.y.yi.base.s819, %280
  %14738 = icmp slt i32 %a390, 0
  %a389 = select i1 %14738, i32 %a390, i32 0
  %14739 = icmp sgt i32 %a389, -36
  %t1675866 = sub nsw i32 %read_input.s0.y.epilogue825, %205
  br i1 %14739, label %"for read_input.s0.y.rebased869.preheader", label %"end for read_input.s0.y.rebased870", !prof !386

"for read_input.s0.y.rebased869.preheader":       ; preds = %"end for read_input.s0.y.rebased846"
  %14740 = sext i32 %blur_y.s0.y.yi.base.s819 to i64
  %a397 = sub nsw i64 %282, %14740
  %14741 = icmp slt i64 %a397, 36
  %a396 = select i1 %14741, i64 %a397, i64 36
  %14742 = icmp sgt i64 %a396, 0
  %14743 = select i1 %14742, i64 %a396, i64 0
  %a389.op = add nsw i32 %a389, 35
  %14744 = zext i32 %a389.op to i64
  br label %"for read_input.s0.y.rebased869"

"for read_input.s0.x.x849":                       ; preds = %"for read_input.s0.x.x849.preheader", %"for read_input.s0.x.x849"
  %read_input.s0.x.x851 = phi i32 [ %14943, %"for read_input.s0.x.x849" ], [ 0, %"for read_input.s0.x.x849.preheader" ]
  %14745 = shl nsw i32 %read_input.s0.x.x851, 5
  %a370 = add nsw i32 %14745, %t1650829
  %14746 = icmp sgt i32 %b364, %a370
  %read_input.s0.x.v2.base.s852 = select i1 %14746, i32 %a370, i32 %b364
  %14747 = add nsw i32 %read_input.s0.x.v2.base.s852, -32
  %14748 = insertelement <32 x i32> undef, i32 %14747, i32 0
  %14749 = shufflevector <32 x i32> %14748, <32 x i32> undef, <32 x i32> zeroinitializer
  %a372 = add nsw <32 x i32> %14749, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14750 = shufflevector <32 x i32> %a372, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %14751 = icmp sgt <8 x i32> %269, %14750
  %14752 = shufflevector <32 x i32> %a372, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14753 = icmp sgt <8 x i32> %269, %14752
  %14754 = shufflevector <32 x i32> %a372, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %14755 = icmp sgt <8 x i32> %269, %14754
  %14756 = shufflevector <32 x i32> %a372, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14757 = icmp sgt <8 x i32> %269, %14756
  %14758 = select <8 x i1> %14751, <8 x i32> %14750, <8 x i32> %269
  %14759 = select <8 x i1> %14753, <8 x i32> %14752, <8 x i32> %269
  %14760 = select <8 x i1> %14755, <8 x i32> %14754, <8 x i32> %269
  %14761 = select <8 x i1> %14757, <8 x i32> %14756, <8 x i32> %269
  %14762 = icmp sgt <8 x i32> %14758, %271
  %14763 = icmp sgt <8 x i32> %14759, %271
  %14764 = icmp sgt <8 x i32> %14760, %271
  %14765 = icmp sgt <8 x i32> %14761, %271
  %14766 = select <8 x i1> %14762, <8 x i32> %14758, <8 x i32> %271
  %14767 = select <8 x i1> %14763, <8 x i32> %14759, <8 x i32> %271
  %14768 = select <8 x i1> %14764, <8 x i32> %14760, <8 x i32> %271
  %14769 = select <8 x i1> %14765, <8 x i32> %14761, <8 x i32> %271
  %14770 = shufflevector <8 x i32> %14766, <8 x i32> %14767, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14771 = shufflevector <8 x i32> %14768, <8 x i32> %14769, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14772 = shufflevector <16 x i32> %14770, <16 x i32> %14771, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14773 = add nsw <32 x i32> %14772, %14734
  %14774 = extractelement <32 x i32> %14773, i32 0
  %14775 = sext i32 %14774 to i64
  %14776 = getelementptr inbounds i16, i16* %258, i64 %14775
  %14777 = load i16, i16* %14776, align 2, !tbaa !393
  %14778 = insertelement <32 x i16> undef, i16 %14777, i32 0
  %14779 = extractelement <32 x i32> %14773, i32 1
  %14780 = sext i32 %14779 to i64
  %14781 = getelementptr inbounds i16, i16* %258, i64 %14780
  %14782 = load i16, i16* %14781, align 2, !tbaa !393
  %14783 = insertelement <32 x i16> %14778, i16 %14782, i32 1
  %14784 = extractelement <32 x i32> %14773, i32 2
  %14785 = sext i32 %14784 to i64
  %14786 = getelementptr inbounds i16, i16* %258, i64 %14785
  %14787 = load i16, i16* %14786, align 2, !tbaa !393
  %14788 = insertelement <32 x i16> %14783, i16 %14787, i32 2
  %14789 = extractelement <32 x i32> %14773, i32 3
  %14790 = sext i32 %14789 to i64
  %14791 = getelementptr inbounds i16, i16* %258, i64 %14790
  %14792 = load i16, i16* %14791, align 2, !tbaa !393
  %14793 = insertelement <32 x i16> %14788, i16 %14792, i32 3
  %14794 = extractelement <32 x i32> %14773, i32 4
  %14795 = sext i32 %14794 to i64
  %14796 = getelementptr inbounds i16, i16* %258, i64 %14795
  %14797 = load i16, i16* %14796, align 2, !tbaa !393
  %14798 = insertelement <32 x i16> %14793, i16 %14797, i32 4
  %14799 = extractelement <32 x i32> %14773, i32 5
  %14800 = sext i32 %14799 to i64
  %14801 = getelementptr inbounds i16, i16* %258, i64 %14800
  %14802 = load i16, i16* %14801, align 2, !tbaa !393
  %14803 = insertelement <32 x i16> %14798, i16 %14802, i32 5
  %14804 = extractelement <32 x i32> %14773, i32 6
  %14805 = sext i32 %14804 to i64
  %14806 = getelementptr inbounds i16, i16* %258, i64 %14805
  %14807 = load i16, i16* %14806, align 2, !tbaa !393
  %14808 = insertelement <32 x i16> %14803, i16 %14807, i32 6
  %14809 = extractelement <32 x i32> %14773, i32 7
  %14810 = sext i32 %14809 to i64
  %14811 = getelementptr inbounds i16, i16* %258, i64 %14810
  %14812 = load i16, i16* %14811, align 2, !tbaa !393
  %14813 = insertelement <32 x i16> %14808, i16 %14812, i32 7
  %14814 = extractelement <32 x i32> %14773, i32 8
  %14815 = sext i32 %14814 to i64
  %14816 = getelementptr inbounds i16, i16* %258, i64 %14815
  %14817 = load i16, i16* %14816, align 2, !tbaa !393
  %14818 = insertelement <32 x i16> %14813, i16 %14817, i32 8
  %14819 = extractelement <32 x i32> %14773, i32 9
  %14820 = sext i32 %14819 to i64
  %14821 = getelementptr inbounds i16, i16* %258, i64 %14820
  %14822 = load i16, i16* %14821, align 2, !tbaa !393
  %14823 = insertelement <32 x i16> %14818, i16 %14822, i32 9
  %14824 = extractelement <32 x i32> %14773, i32 10
  %14825 = sext i32 %14824 to i64
  %14826 = getelementptr inbounds i16, i16* %258, i64 %14825
  %14827 = load i16, i16* %14826, align 2, !tbaa !393
  %14828 = insertelement <32 x i16> %14823, i16 %14827, i32 10
  %14829 = extractelement <32 x i32> %14773, i32 11
  %14830 = sext i32 %14829 to i64
  %14831 = getelementptr inbounds i16, i16* %258, i64 %14830
  %14832 = load i16, i16* %14831, align 2, !tbaa !393
  %14833 = insertelement <32 x i16> %14828, i16 %14832, i32 11
  %14834 = extractelement <32 x i32> %14773, i32 12
  %14835 = sext i32 %14834 to i64
  %14836 = getelementptr inbounds i16, i16* %258, i64 %14835
  %14837 = load i16, i16* %14836, align 2, !tbaa !393
  %14838 = insertelement <32 x i16> %14833, i16 %14837, i32 12
  %14839 = extractelement <32 x i32> %14773, i32 13
  %14840 = sext i32 %14839 to i64
  %14841 = getelementptr inbounds i16, i16* %258, i64 %14840
  %14842 = load i16, i16* %14841, align 2, !tbaa !393
  %14843 = insertelement <32 x i16> %14838, i16 %14842, i32 13
  %14844 = extractelement <32 x i32> %14773, i32 14
  %14845 = sext i32 %14844 to i64
  %14846 = getelementptr inbounds i16, i16* %258, i64 %14845
  %14847 = load i16, i16* %14846, align 2, !tbaa !393
  %14848 = insertelement <32 x i16> %14843, i16 %14847, i32 14
  %14849 = extractelement <32 x i32> %14773, i32 15
  %14850 = sext i32 %14849 to i64
  %14851 = getelementptr inbounds i16, i16* %258, i64 %14850
  %14852 = load i16, i16* %14851, align 2, !tbaa !393
  %14853 = insertelement <32 x i16> %14848, i16 %14852, i32 15
  %14854 = extractelement <32 x i32> %14773, i32 16
  %14855 = sext i32 %14854 to i64
  %14856 = getelementptr inbounds i16, i16* %258, i64 %14855
  %14857 = load i16, i16* %14856, align 2, !tbaa !393
  %14858 = insertelement <32 x i16> %14853, i16 %14857, i32 16
  %14859 = extractelement <32 x i32> %14773, i32 17
  %14860 = sext i32 %14859 to i64
  %14861 = getelementptr inbounds i16, i16* %258, i64 %14860
  %14862 = load i16, i16* %14861, align 2, !tbaa !393
  %14863 = insertelement <32 x i16> %14858, i16 %14862, i32 17
  %14864 = extractelement <32 x i32> %14773, i32 18
  %14865 = sext i32 %14864 to i64
  %14866 = getelementptr inbounds i16, i16* %258, i64 %14865
  %14867 = load i16, i16* %14866, align 2, !tbaa !393
  %14868 = insertelement <32 x i16> %14863, i16 %14867, i32 18
  %14869 = extractelement <32 x i32> %14773, i32 19
  %14870 = sext i32 %14869 to i64
  %14871 = getelementptr inbounds i16, i16* %258, i64 %14870
  %14872 = load i16, i16* %14871, align 2, !tbaa !393
  %14873 = insertelement <32 x i16> %14868, i16 %14872, i32 19
  %14874 = extractelement <32 x i32> %14773, i32 20
  %14875 = sext i32 %14874 to i64
  %14876 = getelementptr inbounds i16, i16* %258, i64 %14875
  %14877 = load i16, i16* %14876, align 2, !tbaa !393
  %14878 = insertelement <32 x i16> %14873, i16 %14877, i32 20
  %14879 = extractelement <32 x i32> %14773, i32 21
  %14880 = sext i32 %14879 to i64
  %14881 = getelementptr inbounds i16, i16* %258, i64 %14880
  %14882 = load i16, i16* %14881, align 2, !tbaa !393
  %14883 = insertelement <32 x i16> %14878, i16 %14882, i32 21
  %14884 = extractelement <32 x i32> %14773, i32 22
  %14885 = sext i32 %14884 to i64
  %14886 = getelementptr inbounds i16, i16* %258, i64 %14885
  %14887 = load i16, i16* %14886, align 2, !tbaa !393
  %14888 = insertelement <32 x i16> %14883, i16 %14887, i32 22
  %14889 = extractelement <32 x i32> %14773, i32 23
  %14890 = sext i32 %14889 to i64
  %14891 = getelementptr inbounds i16, i16* %258, i64 %14890
  %14892 = load i16, i16* %14891, align 2, !tbaa !393
  %14893 = insertelement <32 x i16> %14888, i16 %14892, i32 23
  %14894 = extractelement <32 x i32> %14773, i32 24
  %14895 = sext i32 %14894 to i64
  %14896 = getelementptr inbounds i16, i16* %258, i64 %14895
  %14897 = load i16, i16* %14896, align 2, !tbaa !393
  %14898 = insertelement <32 x i16> %14893, i16 %14897, i32 24
  %14899 = extractelement <32 x i32> %14773, i32 25
  %14900 = sext i32 %14899 to i64
  %14901 = getelementptr inbounds i16, i16* %258, i64 %14900
  %14902 = load i16, i16* %14901, align 2, !tbaa !393
  %14903 = insertelement <32 x i16> %14898, i16 %14902, i32 25
  %14904 = extractelement <32 x i32> %14773, i32 26
  %14905 = sext i32 %14904 to i64
  %14906 = getelementptr inbounds i16, i16* %258, i64 %14905
  %14907 = load i16, i16* %14906, align 2, !tbaa !393
  %14908 = insertelement <32 x i16> %14903, i16 %14907, i32 26
  %14909 = extractelement <32 x i32> %14773, i32 27
  %14910 = sext i32 %14909 to i64
  %14911 = getelementptr inbounds i16, i16* %258, i64 %14910
  %14912 = load i16, i16* %14911, align 2, !tbaa !393
  %14913 = insertelement <32 x i16> %14908, i16 %14912, i32 27
  %14914 = extractelement <32 x i32> %14773, i32 28
  %14915 = sext i32 %14914 to i64
  %14916 = getelementptr inbounds i16, i16* %258, i64 %14915
  %14917 = load i16, i16* %14916, align 2, !tbaa !393
  %14918 = insertelement <32 x i16> %14913, i16 %14917, i32 28
  %14919 = extractelement <32 x i32> %14773, i32 29
  %14920 = sext i32 %14919 to i64
  %14921 = getelementptr inbounds i16, i16* %258, i64 %14920
  %14922 = load i16, i16* %14921, align 2, !tbaa !393
  %14923 = insertelement <32 x i16> %14918, i16 %14922, i32 29
  %14924 = extractelement <32 x i32> %14773, i32 30
  %14925 = sext i32 %14924 to i64
  %14926 = getelementptr inbounds i16, i16* %258, i64 %14925
  %14927 = load i16, i16* %14926, align 2, !tbaa !393
  %14928 = insertelement <32 x i16> %14923, i16 %14927, i32 30
  %14929 = extractelement <32 x i32> %14773, i32 31
  %14930 = sext i32 %14929 to i64
  %14931 = getelementptr inbounds i16, i16* %258, i64 %14930
  %14932 = load i16, i16* %14931, align 2, !tbaa !393
  %14933 = insertelement <32 x i16> %14928, i16 %14932, i32 31
  %14934 = shufflevector <32 x i16> %14933, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14935 = sext i32 %read_input.s0.x.v2.base.s852 to i64
  %14936 = add nsw i64 %14737, %14935
  %14937 = getelementptr inbounds i16, i16* %read_input822, i64 %14936
  %14938 = getelementptr inbounds i16, i16* %14937, i64 -32
  %14939 = bitcast i16* %14938 to <16 x i16>*
  store <16 x i16> %14934, <16 x i16>* %14939, align 2, !tbaa !396
  %14940 = shufflevector <32 x i16> %14933, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14941 = getelementptr inbounds i16, i16* %14937, i64 -16
  %14942 = bitcast i16* %14941 to <16 x i16>*
  store <16 x i16> %14940, <16 x i16>* %14942, align 2, !tbaa !396
  %14943 = add nuw nsw i32 %read_input.s0.x.x851, 1
  %.not2619 = icmp eq i32 %14943, %b345
  br i1 %.not2619, label %"end for read_input.s0.x.x850", label %"for read_input.s0.x.x849"

"end for read_input.s0.x.x850":                   ; preds = %"for read_input.s0.x.x849", %"for read_input.s0.y.rebased845"
  br i1 %278, label %"for read_input.s0.x.x.rebased855.preheader", label %"end for read_input.s0.x.x.rebased856", !prof !386

"for read_input.s0.x.x.rebased855.preheader":     ; preds = %"end for read_input.s0.x.x850"
  %14944 = add nuw nsw i64 %14527, %indvars.iv3258
  %14945 = mul nsw i64 %14944, %276
  %14946 = sub i64 %14945, %277
  br i1 %380, label %"end for read_input.s0.x.x.rebased856.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased855"

"for read_input.s0.x.x.rebased855":               ; preds = %"for read_input.s0.x.x.rebased855.preheader", %"for read_input.s0.x.x.rebased855"
  %indvars.iv3255 = phi i64 [ %indvars.iv.next3256.3, %"for read_input.s0.x.x.rebased855" ], [ 0, %"for read_input.s0.x.x.rebased855.preheader" ]
  %niter3565 = phi i64 [ %niter3565.nsub.3, %"for read_input.s0.x.x.rebased855" ], [ %unroll_iter3564, %"for read_input.s0.x.x.rebased855.preheader" ]
  %14947 = add nuw nsw i64 %indvars.iv3255, %373
  %14948 = shl nsw i64 %14947, 5
  %14949 = add nsw i64 %14948, %374
  %14950 = add nsw i64 %14949, %14731
  %14951 = getelementptr inbounds i16, i16* %258, i64 %14950
  %14952 = getelementptr inbounds i16, i16* %14951, i64 -32
  %14953 = bitcast i16* %14952 to <16 x i16>*
  %14954 = load <16 x i16>, <16 x i16>* %14953, align 2, !tbaa !393
  %14955 = getelementptr inbounds i16, i16* %14951, i64 -16
  %14956 = bitcast i16* %14955 to <16 x i16>*
  %14957 = load <16 x i16>, <16 x i16>* %14956, align 2, !tbaa !393
  %14958 = add nsw i64 %14946, %14949
  %14959 = getelementptr inbounds i16, i16* %read_input822, i64 %14958
  %14960 = getelementptr inbounds i16, i16* %14959, i64 -32
  %14961 = bitcast i16* %14960 to <16 x i16>*
  store <16 x i16> %14954, <16 x i16>* %14961, align 2, !tbaa !396
  %14962 = getelementptr inbounds i16, i16* %14959, i64 -16
  %14963 = bitcast i16* %14962 to <16 x i16>*
  store <16 x i16> %14957, <16 x i16>* %14963, align 2, !tbaa !396
  %indvars.iv.next3256 = or i64 %indvars.iv3255, 1
  %14964 = add nuw nsw i64 %indvars.iv.next3256, %373
  %14965 = shl nsw i64 %14964, 5
  %14966 = add nsw i64 %14965, %374
  %14967 = add nsw i64 %14966, %14731
  %14968 = getelementptr inbounds i16, i16* %258, i64 %14967
  %14969 = getelementptr inbounds i16, i16* %14968, i64 -32
  %14970 = bitcast i16* %14969 to <16 x i16>*
  %14971 = load <16 x i16>, <16 x i16>* %14970, align 2, !tbaa !393
  %14972 = getelementptr inbounds i16, i16* %14968, i64 -16
  %14973 = bitcast i16* %14972 to <16 x i16>*
  %14974 = load <16 x i16>, <16 x i16>* %14973, align 2, !tbaa !393
  %14975 = add nsw i64 %14946, %14966
  %14976 = getelementptr inbounds i16, i16* %read_input822, i64 %14975
  %14977 = getelementptr inbounds i16, i16* %14976, i64 -32
  %14978 = bitcast i16* %14977 to <16 x i16>*
  store <16 x i16> %14971, <16 x i16>* %14978, align 2, !tbaa !396
  %14979 = getelementptr inbounds i16, i16* %14976, i64 -16
  %14980 = bitcast i16* %14979 to <16 x i16>*
  store <16 x i16> %14974, <16 x i16>* %14980, align 2, !tbaa !396
  %indvars.iv.next3256.1 = or i64 %indvars.iv3255, 2
  %14981 = add nuw nsw i64 %indvars.iv.next3256.1, %373
  %14982 = shl nsw i64 %14981, 5
  %14983 = add nsw i64 %14982, %374
  %14984 = add nsw i64 %14983, %14731
  %14985 = getelementptr inbounds i16, i16* %258, i64 %14984
  %14986 = getelementptr inbounds i16, i16* %14985, i64 -32
  %14987 = bitcast i16* %14986 to <16 x i16>*
  %14988 = load <16 x i16>, <16 x i16>* %14987, align 2, !tbaa !393
  %14989 = getelementptr inbounds i16, i16* %14985, i64 -16
  %14990 = bitcast i16* %14989 to <16 x i16>*
  %14991 = load <16 x i16>, <16 x i16>* %14990, align 2, !tbaa !393
  %14992 = add nsw i64 %14946, %14983
  %14993 = getelementptr inbounds i16, i16* %read_input822, i64 %14992
  %14994 = getelementptr inbounds i16, i16* %14993, i64 -32
  %14995 = bitcast i16* %14994 to <16 x i16>*
  store <16 x i16> %14988, <16 x i16>* %14995, align 2, !tbaa !396
  %14996 = getelementptr inbounds i16, i16* %14993, i64 -16
  %14997 = bitcast i16* %14996 to <16 x i16>*
  store <16 x i16> %14991, <16 x i16>* %14997, align 2, !tbaa !396
  %indvars.iv.next3256.2 = or i64 %indvars.iv3255, 3
  %14998 = add nuw nsw i64 %indvars.iv.next3256.2, %373
  %14999 = shl nsw i64 %14998, 5
  %15000 = add nsw i64 %14999, %374
  %15001 = add nsw i64 %15000, %14731
  %15002 = getelementptr inbounds i16, i16* %258, i64 %15001
  %15003 = getelementptr inbounds i16, i16* %15002, i64 -32
  %15004 = bitcast i16* %15003 to <16 x i16>*
  %15005 = load <16 x i16>, <16 x i16>* %15004, align 2, !tbaa !393
  %15006 = getelementptr inbounds i16, i16* %15002, i64 -16
  %15007 = bitcast i16* %15006 to <16 x i16>*
  %15008 = load <16 x i16>, <16 x i16>* %15007, align 2, !tbaa !393
  %15009 = add nsw i64 %14946, %15000
  %15010 = getelementptr inbounds i16, i16* %read_input822, i64 %15009
  %15011 = getelementptr inbounds i16, i16* %15010, i64 -32
  %15012 = bitcast i16* %15011 to <16 x i16>*
  store <16 x i16> %15005, <16 x i16>* %15012, align 2, !tbaa !396
  %15013 = getelementptr inbounds i16, i16* %15010, i64 -16
  %15014 = bitcast i16* %15013 to <16 x i16>*
  store <16 x i16> %15008, <16 x i16>* %15014, align 2, !tbaa !396
  %indvars.iv.next3256.3 = add nuw nsw i64 %indvars.iv3255, 4
  %niter3565.nsub.3 = add i64 %niter3565, -4
  %niter3565.ncmp.3 = icmp eq i64 %niter3565.nsub.3, 0
  br i1 %niter3565.ncmp.3, label %"end for read_input.s0.x.x.rebased856.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased855"

"end for read_input.s0.x.x.rebased856.loopexit.unr-lcssa": ; preds = %"for read_input.s0.x.x.rebased855", %"for read_input.s0.x.x.rebased855.preheader"
  %indvars.iv3255.unr = phi i64 [ 0, %"for read_input.s0.x.x.rebased855.preheader" ], [ %indvars.iv.next3256.3, %"for read_input.s0.x.x.rebased855" ]
  br i1 %lcmp.mod3563.not, label %"end for read_input.s0.x.x.rebased856", label %"for read_input.s0.x.x.rebased855.epil"

"for read_input.s0.x.x.rebased855.epil":          ; preds = %"end for read_input.s0.x.x.rebased856.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased855.epil"
  %indvars.iv3255.epil = phi i64 [ %indvars.iv.next3256.epil, %"for read_input.s0.x.x.rebased855.epil" ], [ %indvars.iv3255.unr, %"end for read_input.s0.x.x.rebased856.loopexit.unr-lcssa" ]
  %epil.iter3562 = phi i64 [ %epil.iter3562.sub, %"for read_input.s0.x.x.rebased855.epil" ], [ %xtraiter3561, %"end for read_input.s0.x.x.rebased856.loopexit.unr-lcssa" ]
  %15015 = add nuw nsw i64 %indvars.iv3255.epil, %373
  %15016 = shl nsw i64 %15015, 5
  %15017 = add nsw i64 %15016, %374
  %15018 = add nsw i64 %15017, %14731
  %15019 = getelementptr inbounds i16, i16* %258, i64 %15018
  %15020 = getelementptr inbounds i16, i16* %15019, i64 -32
  %15021 = bitcast i16* %15020 to <16 x i16>*
  %15022 = load <16 x i16>, <16 x i16>* %15021, align 2, !tbaa !393
  %15023 = getelementptr inbounds i16, i16* %15019, i64 -16
  %15024 = bitcast i16* %15023 to <16 x i16>*
  %15025 = load <16 x i16>, <16 x i16>* %15024, align 2, !tbaa !393
  %15026 = add nsw i64 %14946, %15017
  %15027 = getelementptr inbounds i16, i16* %read_input822, i64 %15026
  %15028 = getelementptr inbounds i16, i16* %15027, i64 -32
  %15029 = bitcast i16* %15028 to <16 x i16>*
  store <16 x i16> %15022, <16 x i16>* %15029, align 2, !tbaa !396
  %15030 = getelementptr inbounds i16, i16* %15027, i64 -16
  %15031 = bitcast i16* %15030 to <16 x i16>*
  store <16 x i16> %15025, <16 x i16>* %15031, align 2, !tbaa !396
  %indvars.iv.next3256.epil = add nuw nsw i64 %indvars.iv3255.epil, 1
  %epil.iter3562.sub = add i64 %epil.iter3562, -1
  %epil.iter3562.cmp.not = icmp eq i64 %epil.iter3562.sub, 0
  br i1 %epil.iter3562.cmp.not, label %"end for read_input.s0.x.x.rebased856", label %"for read_input.s0.x.x.rebased855.epil", !llvm.loop !403

"end for read_input.s0.x.x.rebased856":           ; preds = %"end for read_input.s0.x.x.rebased856.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased855.epil", %"end for read_input.s0.x.x850"
  br i1 %279, label %"for read_input.s0.x.x.rebased860.preheader", label %"end for read_input.s0.x.x.rebased861", !prof !386

"for read_input.s0.x.x.rebased860.preheader":     ; preds = %"end for read_input.s0.x.x.rebased856"
  %15032 = trunc i64 %14731 to i32
  %15033 = insertelement <32 x i32> undef, i32 %15032, i32 0
  %15034 = shufflevector <32 x i32> %15033, <32 x i32> undef, <32 x i32> zeroinitializer
  %15035 = add nuw nsw i64 %14527, %indvars.iv3258
  %15036 = mul nsw i64 %15035, %276
  %15037 = sub i64 %15036, %277
  br label %"for read_input.s0.x.x.rebased860"

"for read_input.s0.x.x.rebased860":               ; preds = %"for read_input.s0.x.x.rebased860.preheader", %"for read_input.s0.x.x.rebased860"
  %read_input.s0.x.x.rebased862 = phi i32 [ %15237, %"for read_input.s0.x.x.rebased860" ], [ 0, %"for read_input.s0.x.x.rebased860.preheader" ]
  %15038 = add nsw i32 %read_input.s0.x.x.rebased862, %t1624813
  %15039 = shl nsw i32 %15038, 5
  %a381 = add nsw i32 %15039, %t1650829
  %15040 = icmp sgt i32 %b364, %a381
  %read_input.s0.x.v2.base.s863 = select i1 %15040, i32 %a381, i32 %b364
  %15041 = add nsw i32 %read_input.s0.x.v2.base.s863, -32
  %15042 = insertelement <32 x i32> undef, i32 %15041, i32 0
  %15043 = shufflevector <32 x i32> %15042, <32 x i32> undef, <32 x i32> zeroinitializer
  %a383 = add nsw <32 x i32> %15043, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15044 = shufflevector <32 x i32> %a383, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15045 = icmp sgt <8 x i32> %269, %15044
  %15046 = shufflevector <32 x i32> %a383, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15047 = icmp sgt <8 x i32> %269, %15046
  %15048 = shufflevector <32 x i32> %a383, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %15049 = icmp sgt <8 x i32> %269, %15048
  %15050 = shufflevector <32 x i32> %a383, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15051 = icmp sgt <8 x i32> %269, %15050
  %15052 = select <8 x i1> %15045, <8 x i32> %15044, <8 x i32> %269
  %15053 = select <8 x i1> %15047, <8 x i32> %15046, <8 x i32> %269
  %15054 = select <8 x i1> %15049, <8 x i32> %15048, <8 x i32> %269
  %15055 = select <8 x i1> %15051, <8 x i32> %15050, <8 x i32> %269
  %15056 = icmp sgt <8 x i32> %15052, %271
  %15057 = icmp sgt <8 x i32> %15053, %271
  %15058 = icmp sgt <8 x i32> %15054, %271
  %15059 = icmp sgt <8 x i32> %15055, %271
  %15060 = select <8 x i1> %15056, <8 x i32> %15052, <8 x i32> %271
  %15061 = select <8 x i1> %15057, <8 x i32> %15053, <8 x i32> %271
  %15062 = select <8 x i1> %15058, <8 x i32> %15054, <8 x i32> %271
  %15063 = select <8 x i1> %15059, <8 x i32> %15055, <8 x i32> %271
  %15064 = shufflevector <8 x i32> %15060, <8 x i32> %15061, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15065 = shufflevector <8 x i32> %15062, <8 x i32> %15063, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15066 = shufflevector <16 x i32> %15064, <16 x i32> %15065, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15067 = add nsw <32 x i32> %15066, %15034
  %15068 = extractelement <32 x i32> %15067, i32 0
  %15069 = sext i32 %15068 to i64
  %15070 = getelementptr inbounds i16, i16* %258, i64 %15069
  %15071 = load i16, i16* %15070, align 2, !tbaa !393
  %15072 = insertelement <32 x i16> undef, i16 %15071, i32 0
  %15073 = extractelement <32 x i32> %15067, i32 1
  %15074 = sext i32 %15073 to i64
  %15075 = getelementptr inbounds i16, i16* %258, i64 %15074
  %15076 = load i16, i16* %15075, align 2, !tbaa !393
  %15077 = insertelement <32 x i16> %15072, i16 %15076, i32 1
  %15078 = extractelement <32 x i32> %15067, i32 2
  %15079 = sext i32 %15078 to i64
  %15080 = getelementptr inbounds i16, i16* %258, i64 %15079
  %15081 = load i16, i16* %15080, align 2, !tbaa !393
  %15082 = insertelement <32 x i16> %15077, i16 %15081, i32 2
  %15083 = extractelement <32 x i32> %15067, i32 3
  %15084 = sext i32 %15083 to i64
  %15085 = getelementptr inbounds i16, i16* %258, i64 %15084
  %15086 = load i16, i16* %15085, align 2, !tbaa !393
  %15087 = insertelement <32 x i16> %15082, i16 %15086, i32 3
  %15088 = extractelement <32 x i32> %15067, i32 4
  %15089 = sext i32 %15088 to i64
  %15090 = getelementptr inbounds i16, i16* %258, i64 %15089
  %15091 = load i16, i16* %15090, align 2, !tbaa !393
  %15092 = insertelement <32 x i16> %15087, i16 %15091, i32 4
  %15093 = extractelement <32 x i32> %15067, i32 5
  %15094 = sext i32 %15093 to i64
  %15095 = getelementptr inbounds i16, i16* %258, i64 %15094
  %15096 = load i16, i16* %15095, align 2, !tbaa !393
  %15097 = insertelement <32 x i16> %15092, i16 %15096, i32 5
  %15098 = extractelement <32 x i32> %15067, i32 6
  %15099 = sext i32 %15098 to i64
  %15100 = getelementptr inbounds i16, i16* %258, i64 %15099
  %15101 = load i16, i16* %15100, align 2, !tbaa !393
  %15102 = insertelement <32 x i16> %15097, i16 %15101, i32 6
  %15103 = extractelement <32 x i32> %15067, i32 7
  %15104 = sext i32 %15103 to i64
  %15105 = getelementptr inbounds i16, i16* %258, i64 %15104
  %15106 = load i16, i16* %15105, align 2, !tbaa !393
  %15107 = insertelement <32 x i16> %15102, i16 %15106, i32 7
  %15108 = extractelement <32 x i32> %15067, i32 8
  %15109 = sext i32 %15108 to i64
  %15110 = getelementptr inbounds i16, i16* %258, i64 %15109
  %15111 = load i16, i16* %15110, align 2, !tbaa !393
  %15112 = insertelement <32 x i16> %15107, i16 %15111, i32 8
  %15113 = extractelement <32 x i32> %15067, i32 9
  %15114 = sext i32 %15113 to i64
  %15115 = getelementptr inbounds i16, i16* %258, i64 %15114
  %15116 = load i16, i16* %15115, align 2, !tbaa !393
  %15117 = insertelement <32 x i16> %15112, i16 %15116, i32 9
  %15118 = extractelement <32 x i32> %15067, i32 10
  %15119 = sext i32 %15118 to i64
  %15120 = getelementptr inbounds i16, i16* %258, i64 %15119
  %15121 = load i16, i16* %15120, align 2, !tbaa !393
  %15122 = insertelement <32 x i16> %15117, i16 %15121, i32 10
  %15123 = extractelement <32 x i32> %15067, i32 11
  %15124 = sext i32 %15123 to i64
  %15125 = getelementptr inbounds i16, i16* %258, i64 %15124
  %15126 = load i16, i16* %15125, align 2, !tbaa !393
  %15127 = insertelement <32 x i16> %15122, i16 %15126, i32 11
  %15128 = extractelement <32 x i32> %15067, i32 12
  %15129 = sext i32 %15128 to i64
  %15130 = getelementptr inbounds i16, i16* %258, i64 %15129
  %15131 = load i16, i16* %15130, align 2, !tbaa !393
  %15132 = insertelement <32 x i16> %15127, i16 %15131, i32 12
  %15133 = extractelement <32 x i32> %15067, i32 13
  %15134 = sext i32 %15133 to i64
  %15135 = getelementptr inbounds i16, i16* %258, i64 %15134
  %15136 = load i16, i16* %15135, align 2, !tbaa !393
  %15137 = insertelement <32 x i16> %15132, i16 %15136, i32 13
  %15138 = extractelement <32 x i32> %15067, i32 14
  %15139 = sext i32 %15138 to i64
  %15140 = getelementptr inbounds i16, i16* %258, i64 %15139
  %15141 = load i16, i16* %15140, align 2, !tbaa !393
  %15142 = insertelement <32 x i16> %15137, i16 %15141, i32 14
  %15143 = extractelement <32 x i32> %15067, i32 15
  %15144 = sext i32 %15143 to i64
  %15145 = getelementptr inbounds i16, i16* %258, i64 %15144
  %15146 = load i16, i16* %15145, align 2, !tbaa !393
  %15147 = insertelement <32 x i16> %15142, i16 %15146, i32 15
  %15148 = extractelement <32 x i32> %15067, i32 16
  %15149 = sext i32 %15148 to i64
  %15150 = getelementptr inbounds i16, i16* %258, i64 %15149
  %15151 = load i16, i16* %15150, align 2, !tbaa !393
  %15152 = insertelement <32 x i16> %15147, i16 %15151, i32 16
  %15153 = extractelement <32 x i32> %15067, i32 17
  %15154 = sext i32 %15153 to i64
  %15155 = getelementptr inbounds i16, i16* %258, i64 %15154
  %15156 = load i16, i16* %15155, align 2, !tbaa !393
  %15157 = insertelement <32 x i16> %15152, i16 %15156, i32 17
  %15158 = extractelement <32 x i32> %15067, i32 18
  %15159 = sext i32 %15158 to i64
  %15160 = getelementptr inbounds i16, i16* %258, i64 %15159
  %15161 = load i16, i16* %15160, align 2, !tbaa !393
  %15162 = insertelement <32 x i16> %15157, i16 %15161, i32 18
  %15163 = extractelement <32 x i32> %15067, i32 19
  %15164 = sext i32 %15163 to i64
  %15165 = getelementptr inbounds i16, i16* %258, i64 %15164
  %15166 = load i16, i16* %15165, align 2, !tbaa !393
  %15167 = insertelement <32 x i16> %15162, i16 %15166, i32 19
  %15168 = extractelement <32 x i32> %15067, i32 20
  %15169 = sext i32 %15168 to i64
  %15170 = getelementptr inbounds i16, i16* %258, i64 %15169
  %15171 = load i16, i16* %15170, align 2, !tbaa !393
  %15172 = insertelement <32 x i16> %15167, i16 %15171, i32 20
  %15173 = extractelement <32 x i32> %15067, i32 21
  %15174 = sext i32 %15173 to i64
  %15175 = getelementptr inbounds i16, i16* %258, i64 %15174
  %15176 = load i16, i16* %15175, align 2, !tbaa !393
  %15177 = insertelement <32 x i16> %15172, i16 %15176, i32 21
  %15178 = extractelement <32 x i32> %15067, i32 22
  %15179 = sext i32 %15178 to i64
  %15180 = getelementptr inbounds i16, i16* %258, i64 %15179
  %15181 = load i16, i16* %15180, align 2, !tbaa !393
  %15182 = insertelement <32 x i16> %15177, i16 %15181, i32 22
  %15183 = extractelement <32 x i32> %15067, i32 23
  %15184 = sext i32 %15183 to i64
  %15185 = getelementptr inbounds i16, i16* %258, i64 %15184
  %15186 = load i16, i16* %15185, align 2, !tbaa !393
  %15187 = insertelement <32 x i16> %15182, i16 %15186, i32 23
  %15188 = extractelement <32 x i32> %15067, i32 24
  %15189 = sext i32 %15188 to i64
  %15190 = getelementptr inbounds i16, i16* %258, i64 %15189
  %15191 = load i16, i16* %15190, align 2, !tbaa !393
  %15192 = insertelement <32 x i16> %15187, i16 %15191, i32 24
  %15193 = extractelement <32 x i32> %15067, i32 25
  %15194 = sext i32 %15193 to i64
  %15195 = getelementptr inbounds i16, i16* %258, i64 %15194
  %15196 = load i16, i16* %15195, align 2, !tbaa !393
  %15197 = insertelement <32 x i16> %15192, i16 %15196, i32 25
  %15198 = extractelement <32 x i32> %15067, i32 26
  %15199 = sext i32 %15198 to i64
  %15200 = getelementptr inbounds i16, i16* %258, i64 %15199
  %15201 = load i16, i16* %15200, align 2, !tbaa !393
  %15202 = insertelement <32 x i16> %15197, i16 %15201, i32 26
  %15203 = extractelement <32 x i32> %15067, i32 27
  %15204 = sext i32 %15203 to i64
  %15205 = getelementptr inbounds i16, i16* %258, i64 %15204
  %15206 = load i16, i16* %15205, align 2, !tbaa !393
  %15207 = insertelement <32 x i16> %15202, i16 %15206, i32 27
  %15208 = extractelement <32 x i32> %15067, i32 28
  %15209 = sext i32 %15208 to i64
  %15210 = getelementptr inbounds i16, i16* %258, i64 %15209
  %15211 = load i16, i16* %15210, align 2, !tbaa !393
  %15212 = insertelement <32 x i16> %15207, i16 %15211, i32 28
  %15213 = extractelement <32 x i32> %15067, i32 29
  %15214 = sext i32 %15213 to i64
  %15215 = getelementptr inbounds i16, i16* %258, i64 %15214
  %15216 = load i16, i16* %15215, align 2, !tbaa !393
  %15217 = insertelement <32 x i16> %15212, i16 %15216, i32 29
  %15218 = extractelement <32 x i32> %15067, i32 30
  %15219 = sext i32 %15218 to i64
  %15220 = getelementptr inbounds i16, i16* %258, i64 %15219
  %15221 = load i16, i16* %15220, align 2, !tbaa !393
  %15222 = insertelement <32 x i16> %15217, i16 %15221, i32 30
  %15223 = extractelement <32 x i32> %15067, i32 31
  %15224 = sext i32 %15223 to i64
  %15225 = getelementptr inbounds i16, i16* %258, i64 %15224
  %15226 = load i16, i16* %15225, align 2, !tbaa !393
  %15227 = insertelement <32 x i16> %15222, i16 %15226, i32 31
  %15228 = shufflevector <32 x i16> %15227, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15229 = sext i32 %read_input.s0.x.v2.base.s863 to i64
  %15230 = add nsw i64 %15037, %15229
  %15231 = getelementptr inbounds i16, i16* %read_input822, i64 %15230
  %15232 = getelementptr inbounds i16, i16* %15231, i64 -32
  %15233 = bitcast i16* %15232 to <16 x i16>*
  store <16 x i16> %15228, <16 x i16>* %15233, align 2, !tbaa !396
  %15234 = shufflevector <32 x i16> %15227, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15235 = getelementptr inbounds i16, i16* %15231, i64 -16
  %15236 = bitcast i16* %15235 to <16 x i16>*
  store <16 x i16> %15234, <16 x i16>* %15236, align 2, !tbaa !396
  %15237 = add nuw nsw i32 %read_input.s0.x.x.rebased862, 1
  %.not2617 = icmp eq i32 %15237, %t1661841
  br i1 %.not2617, label %"end for read_input.s0.x.x.rebased861", label %"for read_input.s0.x.x.rebased860"

"end for read_input.s0.x.x.rebased861":           ; preds = %"for read_input.s0.x.x.rebased860", %"end for read_input.s0.x.x.rebased856"
  %indvars.iv.next3259 = add nuw nsw i64 %indvars.iv3258, 1
  %.not2616 = icmp eq i64 %indvars.iv.next3259, %14529
  br i1 %.not2616, label %"end for read_input.s0.y.rebased846", label %"for read_input.s0.y.rebased845"

"for read_input.s0.y.rebased869":                 ; preds = %"for read_input.s0.y.rebased869.preheader", %"end for read_input.s0.x.x874"
  %indvars.iv3261 = phi i64 [ 0, %"for read_input.s0.y.rebased869.preheader" ], [ %indvars.iv.next3262, %"end for read_input.s0.x.x874" ]
  %15238 = trunc i64 %indvars.iv3261 to i32
  %a392 = add nsw i32 %t1675866, %15238
  %15239 = icmp sgt i32 %b363, %a392
  %a391 = select i1 %15239, i32 %a392, i32 %b363
  %15240 = icmp sgt i32 %a391, 0
  %15241 = select i1 %15240, i32 %a391, i32 0
  %15242 = mul nsw i32 %15241, %207
  %t1679872 = sub nsw i32 %15242, %203
  %15243 = insertelement <32 x i32> undef, i32 %t1679872, i32 0
  %15244 = shufflevector <32 x i32> %15243, <32 x i32> undef, <32 x i32> zeroinitializer
  %15245 = add nuw nsw i64 %14743, %indvars.iv3261
  %15246 = mul nsw i64 %15245, %276
  %15247 = sub i64 %15246, %277
  br label %"for read_input.s0.x.x873"

"end for read_input.s0.y.rebased870":             ; preds = %"end for read_input.s0.x.x874", %"end for read_input.s0.y.rebased846"
  %15248 = load i64, i64* %.fca.1.gep2378, align 8, !tbaa !387
  %cmp.i2799 = icmp ult i64 %15248, %286
  %15249 = load i8*, i8** %.fca.0.gep2377, align 8, !tbaa !389
  br i1 %cmp.i2799, label %if.then.i2802, label %pseudostack_alloc.exit2815, !prof !390

if.then.i2802:                                    ; preds = %"end for read_input.s0.y.rebased870"
  %tobool1.not.i2801 = icmp ne i8* %15249, null
  %15250 = load i64, i64* %.fca.2.gep2379, align 8
  %cmp2.i2804 = icmp ugt i64 %15250, 16384
  %or.cond2846 = and i1 %tobool1.not.i2801, %cmp2.i2804
  br i1 %or.cond2846, label %if.then3.i2806, label %if.end.i2810

if.then3.i2806:                                   ; preds = %if.then.i2802
  call void @halide_free(i8* null, i8* nonnull %15249) #16
  %.pre3373 = load i64, i64* %.fca.2.gep2379, align 8, !tbaa !391
  br label %if.end.i2810

if.end.i2810:                                     ; preds = %if.then3.i2806, %if.then.i2802
  %15251 = phi i64 [ %.pre3373, %if.then3.i2806 ], [ %15250, %if.then.i2802 ]
  %add.i2808 = add i64 %15251, %286
  store i64 %add.i2808, i64* %.fca.2.gep2379, align 8, !tbaa !391
  %cmp7.i2809 = icmp ugt i64 %add.i2808, 16384
  br i1 %cmp7.i2809, label %if.then8.i2812, label %if.end11.i2814

if.then8.i2812:                                   ; preds = %if.end.i2810
  %call.i2811 = call i8* @halide_malloc(i8* null, i64 %286) #16
  br label %if.end11.i2814

if.end11.i2814:                                   ; preds = %if.then8.i2812, %if.end.i2810
  %storemerge.i2813 = phi i8* [ %call.i2811, %if.then8.i2812 ], [ null, %if.end.i2810 ]
  store i8* %storemerge.i2813, i8** %.fca.0.gep2377, align 8, !tbaa !389
  store i64 %286, i64* %.fca.1.gep2378, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2815

pseudostack_alloc.exit2815:                       ; preds = %"end for read_input.s0.y.rebased870", %if.end11.i2814
  %15252 = phi i8* [ %storemerge.i2813, %if.end11.i2814 ], [ %15249, %"end for read_input.s0.y.rebased870" ]
  %15253 = bitcast i8* %15252 to i16*
  %.not2539 = icmp eq i8* %15252, null
  br i1 %.not2539, label %then_bb878, label %"consume read_input880", !prof !392

"for read_input.s0.x.x873":                       ; preds = %"for read_input.s0.y.rebased869", %"for read_input.s0.x.x873"
  %read_input.s0.x.x875 = phi i32 [ %15452, %"for read_input.s0.x.x873" ], [ 0, %"for read_input.s0.y.rebased869" ]
  %15254 = shl nsw i32 %read_input.s0.x.x875, 5
  %a393 = add nsw i32 %15254, %t1650829
  %15255 = icmp sgt i32 %b364, %a393
  %read_input.s0.x.v2.base.s876 = select i1 %15255, i32 %a393, i32 %b364
  %15256 = add nsw i32 %read_input.s0.x.v2.base.s876, -32
  %15257 = insertelement <32 x i32> undef, i32 %15256, i32 0
  %15258 = shufflevector <32 x i32> %15257, <32 x i32> undef, <32 x i32> zeroinitializer
  %a395 = add nsw <32 x i32> %15258, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15259 = shufflevector <32 x i32> %a395, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %15260 = icmp sgt <8 x i32> %269, %15259
  %15261 = shufflevector <32 x i32> %a395, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15262 = icmp sgt <8 x i32> %269, %15261
  %15263 = shufflevector <32 x i32> %a395, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %15264 = icmp sgt <8 x i32> %269, %15263
  %15265 = shufflevector <32 x i32> %a395, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15266 = icmp sgt <8 x i32> %269, %15265
  %15267 = select <8 x i1> %15260, <8 x i32> %15259, <8 x i32> %269
  %15268 = select <8 x i1> %15262, <8 x i32> %15261, <8 x i32> %269
  %15269 = select <8 x i1> %15264, <8 x i32> %15263, <8 x i32> %269
  %15270 = select <8 x i1> %15266, <8 x i32> %15265, <8 x i32> %269
  %15271 = icmp sgt <8 x i32> %15267, %271
  %15272 = icmp sgt <8 x i32> %15268, %271
  %15273 = icmp sgt <8 x i32> %15269, %271
  %15274 = icmp sgt <8 x i32> %15270, %271
  %15275 = select <8 x i1> %15271, <8 x i32> %15267, <8 x i32> %271
  %15276 = select <8 x i1> %15272, <8 x i32> %15268, <8 x i32> %271
  %15277 = select <8 x i1> %15273, <8 x i32> %15269, <8 x i32> %271
  %15278 = select <8 x i1> %15274, <8 x i32> %15270, <8 x i32> %271
  %15279 = shufflevector <8 x i32> %15275, <8 x i32> %15276, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15280 = shufflevector <8 x i32> %15277, <8 x i32> %15278, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15281 = shufflevector <16 x i32> %15279, <16 x i32> %15280, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15282 = add nsw <32 x i32> %15281, %15244
  %15283 = extractelement <32 x i32> %15282, i32 0
  %15284 = sext i32 %15283 to i64
  %15285 = getelementptr inbounds i16, i16* %258, i64 %15284
  %15286 = load i16, i16* %15285, align 2, !tbaa !393
  %15287 = insertelement <32 x i16> undef, i16 %15286, i32 0
  %15288 = extractelement <32 x i32> %15282, i32 1
  %15289 = sext i32 %15288 to i64
  %15290 = getelementptr inbounds i16, i16* %258, i64 %15289
  %15291 = load i16, i16* %15290, align 2, !tbaa !393
  %15292 = insertelement <32 x i16> %15287, i16 %15291, i32 1
  %15293 = extractelement <32 x i32> %15282, i32 2
  %15294 = sext i32 %15293 to i64
  %15295 = getelementptr inbounds i16, i16* %258, i64 %15294
  %15296 = load i16, i16* %15295, align 2, !tbaa !393
  %15297 = insertelement <32 x i16> %15292, i16 %15296, i32 2
  %15298 = extractelement <32 x i32> %15282, i32 3
  %15299 = sext i32 %15298 to i64
  %15300 = getelementptr inbounds i16, i16* %258, i64 %15299
  %15301 = load i16, i16* %15300, align 2, !tbaa !393
  %15302 = insertelement <32 x i16> %15297, i16 %15301, i32 3
  %15303 = extractelement <32 x i32> %15282, i32 4
  %15304 = sext i32 %15303 to i64
  %15305 = getelementptr inbounds i16, i16* %258, i64 %15304
  %15306 = load i16, i16* %15305, align 2, !tbaa !393
  %15307 = insertelement <32 x i16> %15302, i16 %15306, i32 4
  %15308 = extractelement <32 x i32> %15282, i32 5
  %15309 = sext i32 %15308 to i64
  %15310 = getelementptr inbounds i16, i16* %258, i64 %15309
  %15311 = load i16, i16* %15310, align 2, !tbaa !393
  %15312 = insertelement <32 x i16> %15307, i16 %15311, i32 5
  %15313 = extractelement <32 x i32> %15282, i32 6
  %15314 = sext i32 %15313 to i64
  %15315 = getelementptr inbounds i16, i16* %258, i64 %15314
  %15316 = load i16, i16* %15315, align 2, !tbaa !393
  %15317 = insertelement <32 x i16> %15312, i16 %15316, i32 6
  %15318 = extractelement <32 x i32> %15282, i32 7
  %15319 = sext i32 %15318 to i64
  %15320 = getelementptr inbounds i16, i16* %258, i64 %15319
  %15321 = load i16, i16* %15320, align 2, !tbaa !393
  %15322 = insertelement <32 x i16> %15317, i16 %15321, i32 7
  %15323 = extractelement <32 x i32> %15282, i32 8
  %15324 = sext i32 %15323 to i64
  %15325 = getelementptr inbounds i16, i16* %258, i64 %15324
  %15326 = load i16, i16* %15325, align 2, !tbaa !393
  %15327 = insertelement <32 x i16> %15322, i16 %15326, i32 8
  %15328 = extractelement <32 x i32> %15282, i32 9
  %15329 = sext i32 %15328 to i64
  %15330 = getelementptr inbounds i16, i16* %258, i64 %15329
  %15331 = load i16, i16* %15330, align 2, !tbaa !393
  %15332 = insertelement <32 x i16> %15327, i16 %15331, i32 9
  %15333 = extractelement <32 x i32> %15282, i32 10
  %15334 = sext i32 %15333 to i64
  %15335 = getelementptr inbounds i16, i16* %258, i64 %15334
  %15336 = load i16, i16* %15335, align 2, !tbaa !393
  %15337 = insertelement <32 x i16> %15332, i16 %15336, i32 10
  %15338 = extractelement <32 x i32> %15282, i32 11
  %15339 = sext i32 %15338 to i64
  %15340 = getelementptr inbounds i16, i16* %258, i64 %15339
  %15341 = load i16, i16* %15340, align 2, !tbaa !393
  %15342 = insertelement <32 x i16> %15337, i16 %15341, i32 11
  %15343 = extractelement <32 x i32> %15282, i32 12
  %15344 = sext i32 %15343 to i64
  %15345 = getelementptr inbounds i16, i16* %258, i64 %15344
  %15346 = load i16, i16* %15345, align 2, !tbaa !393
  %15347 = insertelement <32 x i16> %15342, i16 %15346, i32 12
  %15348 = extractelement <32 x i32> %15282, i32 13
  %15349 = sext i32 %15348 to i64
  %15350 = getelementptr inbounds i16, i16* %258, i64 %15349
  %15351 = load i16, i16* %15350, align 2, !tbaa !393
  %15352 = insertelement <32 x i16> %15347, i16 %15351, i32 13
  %15353 = extractelement <32 x i32> %15282, i32 14
  %15354 = sext i32 %15353 to i64
  %15355 = getelementptr inbounds i16, i16* %258, i64 %15354
  %15356 = load i16, i16* %15355, align 2, !tbaa !393
  %15357 = insertelement <32 x i16> %15352, i16 %15356, i32 14
  %15358 = extractelement <32 x i32> %15282, i32 15
  %15359 = sext i32 %15358 to i64
  %15360 = getelementptr inbounds i16, i16* %258, i64 %15359
  %15361 = load i16, i16* %15360, align 2, !tbaa !393
  %15362 = insertelement <32 x i16> %15357, i16 %15361, i32 15
  %15363 = extractelement <32 x i32> %15282, i32 16
  %15364 = sext i32 %15363 to i64
  %15365 = getelementptr inbounds i16, i16* %258, i64 %15364
  %15366 = load i16, i16* %15365, align 2, !tbaa !393
  %15367 = insertelement <32 x i16> %15362, i16 %15366, i32 16
  %15368 = extractelement <32 x i32> %15282, i32 17
  %15369 = sext i32 %15368 to i64
  %15370 = getelementptr inbounds i16, i16* %258, i64 %15369
  %15371 = load i16, i16* %15370, align 2, !tbaa !393
  %15372 = insertelement <32 x i16> %15367, i16 %15371, i32 17
  %15373 = extractelement <32 x i32> %15282, i32 18
  %15374 = sext i32 %15373 to i64
  %15375 = getelementptr inbounds i16, i16* %258, i64 %15374
  %15376 = load i16, i16* %15375, align 2, !tbaa !393
  %15377 = insertelement <32 x i16> %15372, i16 %15376, i32 18
  %15378 = extractelement <32 x i32> %15282, i32 19
  %15379 = sext i32 %15378 to i64
  %15380 = getelementptr inbounds i16, i16* %258, i64 %15379
  %15381 = load i16, i16* %15380, align 2, !tbaa !393
  %15382 = insertelement <32 x i16> %15377, i16 %15381, i32 19
  %15383 = extractelement <32 x i32> %15282, i32 20
  %15384 = sext i32 %15383 to i64
  %15385 = getelementptr inbounds i16, i16* %258, i64 %15384
  %15386 = load i16, i16* %15385, align 2, !tbaa !393
  %15387 = insertelement <32 x i16> %15382, i16 %15386, i32 20
  %15388 = extractelement <32 x i32> %15282, i32 21
  %15389 = sext i32 %15388 to i64
  %15390 = getelementptr inbounds i16, i16* %258, i64 %15389
  %15391 = load i16, i16* %15390, align 2, !tbaa !393
  %15392 = insertelement <32 x i16> %15387, i16 %15391, i32 21
  %15393 = extractelement <32 x i32> %15282, i32 22
  %15394 = sext i32 %15393 to i64
  %15395 = getelementptr inbounds i16, i16* %258, i64 %15394
  %15396 = load i16, i16* %15395, align 2, !tbaa !393
  %15397 = insertelement <32 x i16> %15392, i16 %15396, i32 22
  %15398 = extractelement <32 x i32> %15282, i32 23
  %15399 = sext i32 %15398 to i64
  %15400 = getelementptr inbounds i16, i16* %258, i64 %15399
  %15401 = load i16, i16* %15400, align 2, !tbaa !393
  %15402 = insertelement <32 x i16> %15397, i16 %15401, i32 23
  %15403 = extractelement <32 x i32> %15282, i32 24
  %15404 = sext i32 %15403 to i64
  %15405 = getelementptr inbounds i16, i16* %258, i64 %15404
  %15406 = load i16, i16* %15405, align 2, !tbaa !393
  %15407 = insertelement <32 x i16> %15402, i16 %15406, i32 24
  %15408 = extractelement <32 x i32> %15282, i32 25
  %15409 = sext i32 %15408 to i64
  %15410 = getelementptr inbounds i16, i16* %258, i64 %15409
  %15411 = load i16, i16* %15410, align 2, !tbaa !393
  %15412 = insertelement <32 x i16> %15407, i16 %15411, i32 25
  %15413 = extractelement <32 x i32> %15282, i32 26
  %15414 = sext i32 %15413 to i64
  %15415 = getelementptr inbounds i16, i16* %258, i64 %15414
  %15416 = load i16, i16* %15415, align 2, !tbaa !393
  %15417 = insertelement <32 x i16> %15412, i16 %15416, i32 26
  %15418 = extractelement <32 x i32> %15282, i32 27
  %15419 = sext i32 %15418 to i64
  %15420 = getelementptr inbounds i16, i16* %258, i64 %15419
  %15421 = load i16, i16* %15420, align 2, !tbaa !393
  %15422 = insertelement <32 x i16> %15417, i16 %15421, i32 27
  %15423 = extractelement <32 x i32> %15282, i32 28
  %15424 = sext i32 %15423 to i64
  %15425 = getelementptr inbounds i16, i16* %258, i64 %15424
  %15426 = load i16, i16* %15425, align 2, !tbaa !393
  %15427 = insertelement <32 x i16> %15422, i16 %15426, i32 28
  %15428 = extractelement <32 x i32> %15282, i32 29
  %15429 = sext i32 %15428 to i64
  %15430 = getelementptr inbounds i16, i16* %258, i64 %15429
  %15431 = load i16, i16* %15430, align 2, !tbaa !393
  %15432 = insertelement <32 x i16> %15427, i16 %15431, i32 29
  %15433 = extractelement <32 x i32> %15282, i32 30
  %15434 = sext i32 %15433 to i64
  %15435 = getelementptr inbounds i16, i16* %258, i64 %15434
  %15436 = load i16, i16* %15435, align 2, !tbaa !393
  %15437 = insertelement <32 x i16> %15432, i16 %15436, i32 30
  %15438 = extractelement <32 x i32> %15282, i32 31
  %15439 = sext i32 %15438 to i64
  %15440 = getelementptr inbounds i16, i16* %258, i64 %15439
  %15441 = load i16, i16* %15440, align 2, !tbaa !393
  %15442 = insertelement <32 x i16> %15437, i16 %15441, i32 31
  %15443 = shufflevector <32 x i16> %15442, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15444 = sext i32 %read_input.s0.x.v2.base.s876 to i64
  %15445 = add nsw i64 %15247, %15444
  %15446 = getelementptr inbounds i16, i16* %read_input822, i64 %15445
  %15447 = getelementptr inbounds i16, i16* %15446, i64 -32
  %15448 = bitcast i16* %15447 to <16 x i16>*
  store <16 x i16> %15443, <16 x i16>* %15448, align 2, !tbaa !396
  %15449 = shufflevector <32 x i16> %15442, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15450 = getelementptr inbounds i16, i16* %15446, i64 -16
  %15451 = bitcast i16* %15450 to <16 x i16>*
  store <16 x i16> %15449, <16 x i16>* %15451, align 2, !tbaa !396
  %15452 = add nuw nsw i32 %read_input.s0.x.x875, 1
  %.not2615 = icmp eq i32 %15452, %214
  br i1 %.not2615, label %"end for read_input.s0.x.x874", label %"for read_input.s0.x.x873"

"end for read_input.s0.x.x874":                   ; preds = %"for read_input.s0.x.x873"
  %indvars.iv.next3262 = add nuw nsw i64 %indvars.iv3261, 1
  %.not2614 = icmp eq i64 %indvars.iv3261, %14744
  br i1 %.not2614, label %"end for read_input.s0.y.rebased870", label %"for read_input.s0.y.rebased869"

then_bb878:                                       ; preds = %pseudostack_alloc.exit2815
  %15453 = alloca i8*, i64 %286, align 32
  %15454 = bitcast i8** %15453 to i16*
  store i8** %15453, i8*** %287, align 8
  br label %"consume read_input880"

"consume read_input880":                          ; preds = %pseudostack_alloc.exit2815, %then_bb878
  %blur_x879 = phi i16* [ %15454, %then_bb878 ], [ %15253, %pseudostack_alloc.exit2815 ]
  br i1 %228, label %"produce blur_x884", label %"consume read_input880.after_bb881_crit_edge"

"consume read_input880.after_bb881_crit_edge":    ; preds = %"consume read_input880"
  %.pre3467 = and i32 %a353, 7
  br label %after_bb881

after_bb881:                                      ; preds = %"consume read_input880.after_bb881_crit_edge", %"produce blur_x884"
  %.pre-phi3468 = phi i32 [ %.pre3467, %"consume read_input880.after_bb881_crit_edge" ], [ %15501, %"produce blur_x884" ]
  %15455 = mul nsw i32 %.pre-phi3468, %a400
  %t1682886 = sub nsw i32 %15455, %t1645811
  br i1 %294, label %"for blur_y.s0.x.x.rebased889.preheader", label %"end for blur_y.s0.x.x.rebased890", !prof !386

"for blur_y.s0.x.x.rebased889.preheader":         ; preds = %after_bb881
  %15456 = sext i32 %t1682886 to i64
  br label %"for blur_y.s0.x.x.rebased889"

"produce blur_x884":                              ; preds = %"consume read_input880"
  %15457 = getelementptr inbounds i16, i16* %read_input822, i64 %288
  %15458 = getelementptr inbounds i16, i16* %15457, i64 -31
  %15459 = bitcast i16* %15458 to <16 x i16>*
  %15460 = load <16 x i16>, <16 x i16>* %15459, align 2, !tbaa !396
  %15461 = getelementptr inbounds i16, i16* %15457, i64 -15
  %15462 = bitcast i16* %15461 to <16 x i16>*
  %15463 = load <16 x i16>, <16 x i16>* %15462, align 2, !tbaa !396
  %15464 = getelementptr inbounds i16, i16* %15457, i64 -32
  %15465 = bitcast i16* %15464 to <16 x i16>*
  %15466 = load <16 x i16>, <16 x i16>* %15465, align 2, !tbaa !396
  %15467 = getelementptr inbounds i16, i16* %15457, i64 -16
  %15468 = bitcast i16* %15467 to <16 x i16>*
  %15469 = load <16 x i16>, <16 x i16>* %15468, align 2, !tbaa !396
  %15470 = getelementptr inbounds i16, i16* %15457, i64 -30
  %15471 = bitcast i16* %15470 to <16 x i16>*
  %15472 = load <16 x i16>, <16 x i16>* %15471, align 2, !tbaa !396
  %15473 = getelementptr inbounds i16, i16* %15457, i64 -14
  %15474 = bitcast i16* %15473 to <16 x i16>*
  %15475 = load <16 x i16>, <16 x i16>* %15474, align 2, !tbaa !396
  %15476 = getelementptr inbounds i16, i16* %15457, i64 -28
  %15477 = bitcast i16* %15476 to <16 x i16>*
  %15478 = load <16 x i16>, <16 x i16>* %15477, align 2, !tbaa !396
  %15479 = getelementptr inbounds i16, i16* %15457, i64 -12
  %15480 = bitcast i16* %15479 to <16 x i16>*
  %15481 = load <16 x i16>, <16 x i16>* %15480, align 2, !tbaa !396
  %15482 = getelementptr inbounds i16, i16* %15457, i64 -29
  %15483 = bitcast i16* %15482 to <16 x i16>*
  %15484 = load <16 x i16>, <16 x i16>* %15483, align 2, !tbaa !396
  %15485 = getelementptr inbounds i16, i16* %15457, i64 -13
  %15486 = bitcast i16* %15485 to <16 x i16>*
  %15487 = load <16 x i16>, <16 x i16>* %15486, align 2, !tbaa !396
  %15488 = add <16 x i16> %15466, %15460
  %15489 = add <16 x i16> %15488, %15472
  %15490 = add <16 x i16> %15489, %15478
  %15491 = add <16 x i16> %15490, %15484
  %15492 = add <16 x i16> %15469, %15463
  %15493 = add <16 x i16> %15492, %15475
  %15494 = add <16 x i16> %15493, %15481
  %15495 = add <16 x i16> %15494, %15487
  %15496 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15491, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %15497 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15495, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %15498 = shufflevector <16 x i16> %15496, <16 x i16> %15497, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15499 = lshr <32 x i16> %15498, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15500 = shufflevector <32 x i16> %15499, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15501 = and i32 %a353, 7
  %15502 = zext i32 %15501 to i64
  %15503 = mul nsw i64 %291, %15502
  %15504 = add nsw i64 %293, %15503
  %15505 = getelementptr inbounds i16, i16* %blur_x879, i64 %15504
  %15506 = getelementptr inbounds i16, i16* %15505, i64 -32
  %15507 = bitcast i16* %15506 to <16 x i16>*
  store <16 x i16> %15500, <16 x i16>* %15507, align 2, !tbaa !399
  %15508 = shufflevector <32 x i16> %15499, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15509 = getelementptr inbounds i16, i16* %15505, i64 -16
  %15510 = bitcast i16* %15509 to <16 x i16>*
  store <16 x i16> %15508, <16 x i16>* %15510, align 2, !tbaa !399
  br label %after_bb881

"for blur_y.s0.x.x.rebased889":                   ; preds = %"for blur_y.s0.x.x.rebased889.preheader", %after_bb892
  %indvars.iv3263 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased889.preheader" ], [ %indvars.iv.next3264, %after_bb892 ]
  %15511 = add nsw i64 %indvars.iv3263, %295
  %15512 = icmp slt i64 %15511, 1
  %15513 = trunc i64 %15511 to i32
  %15514 = shl nsw i32 %15513, 5
  %15515 = icmp sgt i32 %198, %15514
  %15516 = or i1 %15512, %15515
  br i1 %15516, label %"produce blur_x896", label %after_bb892

"end for blur_y.s0.x.x.rebased890":               ; preds = %after_bb892, %after_bb881
  br i1 %296, label %"for blur_y.s0.x.x.rebased901.preheader", label %"end for blur_y.s0.x.x.rebased902", !prof !386

"for blur_y.s0.x.x.rebased901.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased890"
  %15517 = sext i32 %t1682886 to i64
  br label %"for blur_y.s0.x.x.rebased901"

after_bb892:                                      ; preds = %"for blur_y.s0.x.x.rebased889", %"produce blur_x896"
  %indvars.iv.next3264 = add nuw nsw i64 %indvars.iv3263, 1
  %.not2612 = icmp eq i64 %indvars.iv.next3264, %378
  br i1 %.not2612, label %"end for blur_y.s0.x.x.rebased890", label %"for blur_y.s0.x.x.rebased889"

"produce blur_x896":                              ; preds = %"for blur_y.s0.x.x.rebased889"
  %t684897 = sub i32 %15514, %t1645811
  %15518 = sext i32 %t684897 to i64
  %15519 = getelementptr inbounds i16, i16* %read_input822, i64 %15518
  %15520 = getelementptr inbounds i16, i16* %15519, i64 1
  %15521 = bitcast i16* %15520 to <16 x i16>*
  %15522 = load <16 x i16>, <16 x i16>* %15521, align 2, !tbaa !396
  %15523 = getelementptr inbounds i16, i16* %15519, i64 17
  %15524 = bitcast i16* %15523 to <16 x i16>*
  %15525 = load <16 x i16>, <16 x i16>* %15524, align 2, !tbaa !396
  %15526 = bitcast i16* %15519 to <16 x i16>*
  %15527 = load <16 x i16>, <16 x i16>* %15526, align 2, !tbaa !396
  %15528 = getelementptr inbounds i16, i16* %15519, i64 16
  %15529 = bitcast i16* %15528 to <16 x i16>*
  %15530 = load <16 x i16>, <16 x i16>* %15529, align 2, !tbaa !396
  %15531 = getelementptr inbounds i16, i16* %15519, i64 2
  %15532 = bitcast i16* %15531 to <16 x i16>*
  %15533 = load <16 x i16>, <16 x i16>* %15532, align 2, !tbaa !396
  %15534 = getelementptr inbounds i16, i16* %15519, i64 18
  %15535 = bitcast i16* %15534 to <16 x i16>*
  %15536 = load <16 x i16>, <16 x i16>* %15535, align 2, !tbaa !396
  %15537 = getelementptr inbounds i16, i16* %15519, i64 4
  %15538 = bitcast i16* %15537 to <16 x i16>*
  %15539 = load <16 x i16>, <16 x i16>* %15538, align 2, !tbaa !396
  %15540 = getelementptr inbounds i16, i16* %15519, i64 20
  %15541 = bitcast i16* %15540 to <16 x i16>*
  %15542 = load <16 x i16>, <16 x i16>* %15541, align 2, !tbaa !396
  %15543 = getelementptr inbounds i16, i16* %15519, i64 3
  %15544 = bitcast i16* %15543 to <16 x i16>*
  %15545 = load <16 x i16>, <16 x i16>* %15544, align 2, !tbaa !396
  %15546 = getelementptr inbounds i16, i16* %15519, i64 19
  %15547 = bitcast i16* %15546 to <16 x i16>*
  %15548 = load <16 x i16>, <16 x i16>* %15547, align 2, !tbaa !396
  %15549 = add <16 x i16> %15527, %15522
  %15550 = add <16 x i16> %15549, %15533
  %15551 = add <16 x i16> %15550, %15539
  %15552 = add <16 x i16> %15551, %15545
  %15553 = add <16 x i16> %15530, %15525
  %15554 = add <16 x i16> %15553, %15536
  %15555 = add <16 x i16> %15554, %15542
  %15556 = add <16 x i16> %15555, %15548
  %15557 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15552, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %15558 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15556, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %15559 = shufflevector <16 x i16> %15557, <16 x i16> %15558, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15560 = lshr <32 x i16> %15559, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15561 = shufflevector <32 x i16> %15560, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15562 = shl nsw i64 %15511, 5
  %15563 = add nsw i64 %15562, %15456
  %15564 = getelementptr inbounds i16, i16* %blur_x879, i64 %15563
  %15565 = bitcast i16* %15564 to <16 x i16>*
  store <16 x i16> %15561, <16 x i16>* %15565, align 2, !tbaa !399
  %15566 = shufflevector <32 x i16> %15560, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15567 = getelementptr inbounds i16, i16* %15564, i64 16
  %15568 = bitcast i16* %15567 to <16 x i16>*
  store <16 x i16> %15566, <16 x i16>* %15568, align 2, !tbaa !399
  br label %after_bb892

"for blur_y.s0.x.x.rebased901":                   ; preds = %"for blur_y.s0.x.x.rebased901.preheader", %after_bb904
  %blur_y.s0.x.x.rebased903 = phi i32 [ %15573, %after_bb904 ], [ 0, %"for blur_y.s0.x.x.rebased901.preheader" ]
  %t2219907 = add nsw i32 %blur_y.s0.x.x.rebased903, %t1626814
  %15569 = icmp slt i32 %t2219907, 1
  %15570 = shl nsw i32 %t2219907, 5
  %15571 = icmp sgt i32 %198, %15570
  %15572 = or i1 %15569, %15571
  br i1 %15572, label %then_bb905, label %after_bb904

"end for blur_y.s0.x.x.rebased902":               ; preds = %after_bb904, %"end for blur_y.s0.x.x.rebased890"
  br i1 %228, label %"produce blur_x914", label %"end for blur_y.s0.x.x.rebased902.after_bb911_crit_edge"

"end for blur_y.s0.x.x.rebased902.after_bb911_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased902"
  %.pre3469 = add nsw i32 %a353, 1
  %.pre3471 = and i32 %.pre3469, 7
  br label %after_bb911

after_bb904:                                      ; preds = %"for blur_y.s0.x.x.rebased901", %then_bb905
  %15573 = add nuw nsw i32 %blur_y.s0.x.x.rebased903, 1
  %.not2611 = icmp eq i32 %15573, %t1683899
  br i1 %.not2611, label %"end for blur_y.s0.x.x.rebased902", label %"for blur_y.s0.x.x.rebased901"

then_bb905:                                       ; preds = %"for blur_y.s0.x.x.rebased901"
  %15574 = icmp sgt i32 %a341, %15570
  %b410 = select i1 %15574, i32 %15570, i32 %a341
  %15575 = icmp slt i32 %b410, %198
  %blur_x.s0.x.v1.base.s909 = select i1 %15575, i32 %b410, i32 %198
  %t686910 = sub i32 %blur_x.s0.x.v1.base.s909, %t1645811
  %15576 = sext i32 %t686910 to i64
  %15577 = getelementptr inbounds i16, i16* %read_input822, i64 %15576
  %15578 = getelementptr inbounds i16, i16* %15577, i64 1
  %15579 = bitcast i16* %15578 to <16 x i16>*
  %15580 = load <16 x i16>, <16 x i16>* %15579, align 2, !tbaa !396
  %15581 = getelementptr inbounds i16, i16* %15577, i64 17
  %15582 = bitcast i16* %15581 to <16 x i16>*
  %15583 = load <16 x i16>, <16 x i16>* %15582, align 2, !tbaa !396
  %15584 = bitcast i16* %15577 to <16 x i16>*
  %15585 = load <16 x i16>, <16 x i16>* %15584, align 2, !tbaa !396
  %15586 = getelementptr inbounds i16, i16* %15577, i64 16
  %15587 = bitcast i16* %15586 to <16 x i16>*
  %15588 = load <16 x i16>, <16 x i16>* %15587, align 2, !tbaa !396
  %15589 = getelementptr inbounds i16, i16* %15577, i64 2
  %15590 = bitcast i16* %15589 to <16 x i16>*
  %15591 = load <16 x i16>, <16 x i16>* %15590, align 2, !tbaa !396
  %15592 = getelementptr inbounds i16, i16* %15577, i64 18
  %15593 = bitcast i16* %15592 to <16 x i16>*
  %15594 = load <16 x i16>, <16 x i16>* %15593, align 2, !tbaa !396
  %15595 = getelementptr inbounds i16, i16* %15577, i64 4
  %15596 = bitcast i16* %15595 to <16 x i16>*
  %15597 = load <16 x i16>, <16 x i16>* %15596, align 2, !tbaa !396
  %15598 = getelementptr inbounds i16, i16* %15577, i64 20
  %15599 = bitcast i16* %15598 to <16 x i16>*
  %15600 = load <16 x i16>, <16 x i16>* %15599, align 2, !tbaa !396
  %15601 = getelementptr inbounds i16, i16* %15577, i64 3
  %15602 = bitcast i16* %15601 to <16 x i16>*
  %15603 = load <16 x i16>, <16 x i16>* %15602, align 2, !tbaa !396
  %15604 = getelementptr inbounds i16, i16* %15577, i64 19
  %15605 = bitcast i16* %15604 to <16 x i16>*
  %15606 = load <16 x i16>, <16 x i16>* %15605, align 2, !tbaa !396
  %15607 = add <16 x i16> %15585, %15580
  %15608 = add <16 x i16> %15607, %15591
  %15609 = add <16 x i16> %15608, %15597
  %15610 = add <16 x i16> %15609, %15603
  %15611 = add <16 x i16> %15588, %15583
  %15612 = add <16 x i16> %15611, %15594
  %15613 = add <16 x i16> %15612, %15600
  %15614 = add <16 x i16> %15613, %15606
  %15615 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15610, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %15616 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15614, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %15617 = shufflevector <16 x i16> %15615, <16 x i16> %15616, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15618 = lshr <32 x i16> %15617, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15619 = shufflevector <32 x i16> %15618, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15620 = sext i32 %blur_x.s0.x.v1.base.s909 to i64
  %15621 = add nsw i64 %15620, %15517
  %15622 = getelementptr inbounds i16, i16* %blur_x879, i64 %15621
  %15623 = bitcast i16* %15622 to <16 x i16>*
  store <16 x i16> %15619, <16 x i16>* %15623, align 2, !tbaa !399
  %15624 = shufflevector <32 x i16> %15618, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15625 = getelementptr inbounds i16, i16* %15622, i64 16
  %15626 = bitcast i16* %15625 to <16 x i16>*
  store <16 x i16> %15624, <16 x i16>* %15626, align 2, !tbaa !399
  br label %after_bb904

after_bb911:                                      ; preds = %"end for blur_y.s0.x.x.rebased902.after_bb911_crit_edge", %"produce blur_x914"
  %.pre-phi3472 = phi i32 [ %.pre3471, %"end for blur_y.s0.x.x.rebased902.after_bb911_crit_edge" ], [ %15674, %"produce blur_x914" ]
  %15627 = mul nsw i32 %.pre-phi3472, %a400
  %t1688916 = sub nsw i32 %15627, %t1645811
  br i1 %294, label %"for blur_y.s0.x.x.rebased919.preheader", label %"end for blur_y.s0.x.x.rebased920", !prof !386

"for blur_y.s0.x.x.rebased919.preheader":         ; preds = %after_bb911
  %15628 = sext i32 %t1688916 to i64
  br label %"for blur_y.s0.x.x.rebased919"

"produce blur_x914":                              ; preds = %"end for blur_y.s0.x.x.rebased902"
  %15629 = getelementptr inbounds i16, i16* %read_input822, i64 %297
  %15630 = getelementptr inbounds i16, i16* %15629, i64 -31
  %15631 = bitcast i16* %15630 to <16 x i16>*
  %15632 = load <16 x i16>, <16 x i16>* %15631, align 2, !tbaa !396
  %15633 = getelementptr inbounds i16, i16* %15629, i64 -15
  %15634 = bitcast i16* %15633 to <16 x i16>*
  %15635 = load <16 x i16>, <16 x i16>* %15634, align 2, !tbaa !396
  %15636 = getelementptr inbounds i16, i16* %15629, i64 -32
  %15637 = bitcast i16* %15636 to <16 x i16>*
  %15638 = load <16 x i16>, <16 x i16>* %15637, align 2, !tbaa !396
  %15639 = getelementptr inbounds i16, i16* %15629, i64 -16
  %15640 = bitcast i16* %15639 to <16 x i16>*
  %15641 = load <16 x i16>, <16 x i16>* %15640, align 2, !tbaa !396
  %15642 = getelementptr inbounds i16, i16* %15629, i64 -30
  %15643 = bitcast i16* %15642 to <16 x i16>*
  %15644 = load <16 x i16>, <16 x i16>* %15643, align 2, !tbaa !396
  %15645 = getelementptr inbounds i16, i16* %15629, i64 -14
  %15646 = bitcast i16* %15645 to <16 x i16>*
  %15647 = load <16 x i16>, <16 x i16>* %15646, align 2, !tbaa !396
  %15648 = getelementptr inbounds i16, i16* %15629, i64 -28
  %15649 = bitcast i16* %15648 to <16 x i16>*
  %15650 = load <16 x i16>, <16 x i16>* %15649, align 2, !tbaa !396
  %15651 = getelementptr inbounds i16, i16* %15629, i64 -12
  %15652 = bitcast i16* %15651 to <16 x i16>*
  %15653 = load <16 x i16>, <16 x i16>* %15652, align 2, !tbaa !396
  %15654 = getelementptr inbounds i16, i16* %15629, i64 -29
  %15655 = bitcast i16* %15654 to <16 x i16>*
  %15656 = load <16 x i16>, <16 x i16>* %15655, align 2, !tbaa !396
  %15657 = getelementptr inbounds i16, i16* %15629, i64 -13
  %15658 = bitcast i16* %15657 to <16 x i16>*
  %15659 = load <16 x i16>, <16 x i16>* %15658, align 2, !tbaa !396
  %15660 = add <16 x i16> %15638, %15632
  %15661 = add <16 x i16> %15660, %15644
  %15662 = add <16 x i16> %15661, %15650
  %15663 = add <16 x i16> %15662, %15656
  %15664 = add <16 x i16> %15641, %15635
  %15665 = add <16 x i16> %15664, %15647
  %15666 = add <16 x i16> %15665, %15653
  %15667 = add <16 x i16> %15666, %15659
  %15668 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15663, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %15669 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15667, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %15670 = shufflevector <16 x i16> %15668, <16 x i16> %15669, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15671 = lshr <32 x i16> %15670, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15672 = shufflevector <32 x i16> %15671, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15673 = add nsw i32 %a353, 1
  %15674 = and i32 %15673, 7
  %15675 = zext i32 %15674 to i64
  %15676 = mul nsw i64 %291, %15675
  %15677 = add nsw i64 %293, %15676
  %15678 = getelementptr inbounds i16, i16* %blur_x879, i64 %15677
  %15679 = getelementptr inbounds i16, i16* %15678, i64 -32
  %15680 = bitcast i16* %15679 to <16 x i16>*
  store <16 x i16> %15672, <16 x i16>* %15680, align 2, !tbaa !399
  %15681 = shufflevector <32 x i16> %15671, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15682 = getelementptr inbounds i16, i16* %15678, i64 -16
  %15683 = bitcast i16* %15682 to <16 x i16>*
  store <16 x i16> %15681, <16 x i16>* %15683, align 2, !tbaa !399
  br label %after_bb911

"for blur_y.s0.x.x.rebased919":                   ; preds = %"for blur_y.s0.x.x.rebased919.preheader", %after_bb922
  %indvars.iv3266 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased919.preheader" ], [ %indvars.iv.next3267, %after_bb922 ]
  %15684 = add nsw i64 %indvars.iv3266, %295
  %15685 = icmp slt i64 %15684, 1
  %15686 = trunc i64 %15684 to i32
  %15687 = shl nsw i32 %15686, 5
  %15688 = icmp sgt i32 %198, %15687
  %15689 = or i1 %15685, %15688
  br i1 %15689, label %"produce blur_x926", label %after_bb922

"end for blur_y.s0.x.x.rebased920":               ; preds = %after_bb922, %after_bb911
  br i1 %296, label %"for blur_y.s0.x.x.rebased931.preheader", label %"end for blur_y.s0.x.x.rebased932", !prof !386

"for blur_y.s0.x.x.rebased931.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased920"
  %15690 = sext i32 %t1688916 to i64
  br label %"for blur_y.s0.x.x.rebased931"

after_bb922:                                      ; preds = %"for blur_y.s0.x.x.rebased919", %"produce blur_x926"
  %indvars.iv.next3267 = add nuw nsw i64 %indvars.iv3266, 1
  %.not2610 = icmp eq i64 %indvars.iv.next3267, %378
  br i1 %.not2610, label %"end for blur_y.s0.x.x.rebased920", label %"for blur_y.s0.x.x.rebased919"

"produce blur_x926":                              ; preds = %"for blur_y.s0.x.x.rebased919"
  %t690927 = add nsw i32 %15687, %t1687918
  %15691 = sext i32 %t690927 to i64
  %15692 = getelementptr inbounds i16, i16* %read_input822, i64 %15691
  %15693 = getelementptr inbounds i16, i16* %15692, i64 1
  %15694 = bitcast i16* %15693 to <16 x i16>*
  %15695 = load <16 x i16>, <16 x i16>* %15694, align 2, !tbaa !396
  %15696 = getelementptr inbounds i16, i16* %15692, i64 17
  %15697 = bitcast i16* %15696 to <16 x i16>*
  %15698 = load <16 x i16>, <16 x i16>* %15697, align 2, !tbaa !396
  %15699 = bitcast i16* %15692 to <16 x i16>*
  %15700 = load <16 x i16>, <16 x i16>* %15699, align 2, !tbaa !396
  %15701 = getelementptr inbounds i16, i16* %15692, i64 16
  %15702 = bitcast i16* %15701 to <16 x i16>*
  %15703 = load <16 x i16>, <16 x i16>* %15702, align 2, !tbaa !396
  %15704 = getelementptr inbounds i16, i16* %15692, i64 2
  %15705 = bitcast i16* %15704 to <16 x i16>*
  %15706 = load <16 x i16>, <16 x i16>* %15705, align 2, !tbaa !396
  %15707 = getelementptr inbounds i16, i16* %15692, i64 18
  %15708 = bitcast i16* %15707 to <16 x i16>*
  %15709 = load <16 x i16>, <16 x i16>* %15708, align 2, !tbaa !396
  %15710 = getelementptr inbounds i16, i16* %15692, i64 4
  %15711 = bitcast i16* %15710 to <16 x i16>*
  %15712 = load <16 x i16>, <16 x i16>* %15711, align 2, !tbaa !396
  %15713 = getelementptr inbounds i16, i16* %15692, i64 20
  %15714 = bitcast i16* %15713 to <16 x i16>*
  %15715 = load <16 x i16>, <16 x i16>* %15714, align 2, !tbaa !396
  %15716 = getelementptr inbounds i16, i16* %15692, i64 3
  %15717 = bitcast i16* %15716 to <16 x i16>*
  %15718 = load <16 x i16>, <16 x i16>* %15717, align 2, !tbaa !396
  %15719 = getelementptr inbounds i16, i16* %15692, i64 19
  %15720 = bitcast i16* %15719 to <16 x i16>*
  %15721 = load <16 x i16>, <16 x i16>* %15720, align 2, !tbaa !396
  %15722 = add <16 x i16> %15700, %15695
  %15723 = add <16 x i16> %15722, %15706
  %15724 = add <16 x i16> %15723, %15712
  %15725 = add <16 x i16> %15724, %15718
  %15726 = add <16 x i16> %15703, %15698
  %15727 = add <16 x i16> %15726, %15709
  %15728 = add <16 x i16> %15727, %15715
  %15729 = add <16 x i16> %15728, %15721
  %15730 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15725, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %15731 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15729, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %15732 = shufflevector <16 x i16> %15730, <16 x i16> %15731, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15733 = lshr <32 x i16> %15732, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15734 = shufflevector <32 x i16> %15733, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15735 = shl nsw i64 %15684, 5
  %15736 = add nsw i64 %15735, %15628
  %15737 = getelementptr inbounds i16, i16* %blur_x879, i64 %15736
  %15738 = bitcast i16* %15737 to <16 x i16>*
  store <16 x i16> %15734, <16 x i16>* %15738, align 2, !tbaa !399
  %15739 = shufflevector <32 x i16> %15733, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15740 = getelementptr inbounds i16, i16* %15737, i64 16
  %15741 = bitcast i16* %15740 to <16 x i16>*
  store <16 x i16> %15739, <16 x i16>* %15741, align 2, !tbaa !399
  br label %after_bb922

"for blur_y.s0.x.x.rebased931":                   ; preds = %"for blur_y.s0.x.x.rebased931.preheader", %after_bb934
  %blur_y.s0.x.x.rebased933 = phi i32 [ %15746, %after_bb934 ], [ 0, %"for blur_y.s0.x.x.rebased931.preheader" ]
  %t2221937 = add nsw i32 %blur_y.s0.x.x.rebased933, %t1626814
  %15742 = icmp slt i32 %t2221937, 1
  %15743 = shl nsw i32 %t2221937, 5
  %15744 = icmp sgt i32 %198, %15743
  %15745 = or i1 %15742, %15744
  br i1 %15745, label %then_bb935, label %after_bb934

"end for blur_y.s0.x.x.rebased932":               ; preds = %after_bb934, %"end for blur_y.s0.x.x.rebased920"
  br i1 %228, label %"produce blur_x944", label %"end for blur_y.s0.x.x.rebased932.after_bb941_crit_edge"

"end for blur_y.s0.x.x.rebased932.after_bb941_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased932"
  %.pre3473 = add nsw i32 %a353, 2
  %.pre3475 = and i32 %.pre3473, 7
  br label %after_bb941

after_bb934:                                      ; preds = %"for blur_y.s0.x.x.rebased931", %then_bb935
  %15746 = add nuw nsw i32 %blur_y.s0.x.x.rebased933, 1
  %.not2609 = icmp eq i32 %15746, %t1683899
  br i1 %.not2609, label %"end for blur_y.s0.x.x.rebased932", label %"for blur_y.s0.x.x.rebased931"

then_bb935:                                       ; preds = %"for blur_y.s0.x.x.rebased931"
  %15747 = icmp sgt i32 %a341, %15743
  %b417 = select i1 %15747, i32 %15743, i32 %a341
  %15748 = icmp slt i32 %b417, %198
  %blur_x.s0.x.v1.base.s939 = select i1 %15748, i32 %b417, i32 %198
  %t692940 = add nsw i32 %blur_x.s0.x.v1.base.s939, %t1687918
  %15749 = sext i32 %t692940 to i64
  %15750 = getelementptr inbounds i16, i16* %read_input822, i64 %15749
  %15751 = getelementptr inbounds i16, i16* %15750, i64 1
  %15752 = bitcast i16* %15751 to <16 x i16>*
  %15753 = load <16 x i16>, <16 x i16>* %15752, align 2, !tbaa !396
  %15754 = getelementptr inbounds i16, i16* %15750, i64 17
  %15755 = bitcast i16* %15754 to <16 x i16>*
  %15756 = load <16 x i16>, <16 x i16>* %15755, align 2, !tbaa !396
  %15757 = bitcast i16* %15750 to <16 x i16>*
  %15758 = load <16 x i16>, <16 x i16>* %15757, align 2, !tbaa !396
  %15759 = getelementptr inbounds i16, i16* %15750, i64 16
  %15760 = bitcast i16* %15759 to <16 x i16>*
  %15761 = load <16 x i16>, <16 x i16>* %15760, align 2, !tbaa !396
  %15762 = getelementptr inbounds i16, i16* %15750, i64 2
  %15763 = bitcast i16* %15762 to <16 x i16>*
  %15764 = load <16 x i16>, <16 x i16>* %15763, align 2, !tbaa !396
  %15765 = getelementptr inbounds i16, i16* %15750, i64 18
  %15766 = bitcast i16* %15765 to <16 x i16>*
  %15767 = load <16 x i16>, <16 x i16>* %15766, align 2, !tbaa !396
  %15768 = getelementptr inbounds i16, i16* %15750, i64 4
  %15769 = bitcast i16* %15768 to <16 x i16>*
  %15770 = load <16 x i16>, <16 x i16>* %15769, align 2, !tbaa !396
  %15771 = getelementptr inbounds i16, i16* %15750, i64 20
  %15772 = bitcast i16* %15771 to <16 x i16>*
  %15773 = load <16 x i16>, <16 x i16>* %15772, align 2, !tbaa !396
  %15774 = getelementptr inbounds i16, i16* %15750, i64 3
  %15775 = bitcast i16* %15774 to <16 x i16>*
  %15776 = load <16 x i16>, <16 x i16>* %15775, align 2, !tbaa !396
  %15777 = getelementptr inbounds i16, i16* %15750, i64 19
  %15778 = bitcast i16* %15777 to <16 x i16>*
  %15779 = load <16 x i16>, <16 x i16>* %15778, align 2, !tbaa !396
  %15780 = add <16 x i16> %15758, %15753
  %15781 = add <16 x i16> %15780, %15764
  %15782 = add <16 x i16> %15781, %15770
  %15783 = add <16 x i16> %15782, %15776
  %15784 = add <16 x i16> %15761, %15756
  %15785 = add <16 x i16> %15784, %15767
  %15786 = add <16 x i16> %15785, %15773
  %15787 = add <16 x i16> %15786, %15779
  %15788 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15783, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %15789 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15787, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %15790 = shufflevector <16 x i16> %15788, <16 x i16> %15789, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15791 = lshr <32 x i16> %15790, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15792 = shufflevector <32 x i16> %15791, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15793 = sext i32 %blur_x.s0.x.v1.base.s939 to i64
  %15794 = add nsw i64 %15793, %15690
  %15795 = getelementptr inbounds i16, i16* %blur_x879, i64 %15794
  %15796 = bitcast i16* %15795 to <16 x i16>*
  store <16 x i16> %15792, <16 x i16>* %15796, align 2, !tbaa !399
  %15797 = shufflevector <32 x i16> %15791, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15798 = getelementptr inbounds i16, i16* %15795, i64 16
  %15799 = bitcast i16* %15798 to <16 x i16>*
  store <16 x i16> %15797, <16 x i16>* %15799, align 2, !tbaa !399
  br label %after_bb934

after_bb941:                                      ; preds = %"end for blur_y.s0.x.x.rebased932.after_bb941_crit_edge", %"produce blur_x944"
  %.pre-phi3476 = phi i32 [ %.pre3475, %"end for blur_y.s0.x.x.rebased932.after_bb941_crit_edge" ], [ %15847, %"produce blur_x944" ]
  %15800 = mul nsw i32 %.pre-phi3476, %a400
  %t1694946 = sub nsw i32 %15800, %t1645811
  br i1 %294, label %"for blur_y.s0.x.x.rebased949.preheader", label %"end for blur_y.s0.x.x.rebased950", !prof !386

"for blur_y.s0.x.x.rebased949.preheader":         ; preds = %after_bb941
  %15801 = sext i32 %t1694946 to i64
  br label %"for blur_y.s0.x.x.rebased949"

"produce blur_x944":                              ; preds = %"end for blur_y.s0.x.x.rebased932"
  %15802 = getelementptr inbounds i16, i16* %read_input822, i64 %299
  %15803 = getelementptr inbounds i16, i16* %15802, i64 -31
  %15804 = bitcast i16* %15803 to <16 x i16>*
  %15805 = load <16 x i16>, <16 x i16>* %15804, align 2, !tbaa !396
  %15806 = getelementptr inbounds i16, i16* %15802, i64 -15
  %15807 = bitcast i16* %15806 to <16 x i16>*
  %15808 = load <16 x i16>, <16 x i16>* %15807, align 2, !tbaa !396
  %15809 = getelementptr inbounds i16, i16* %15802, i64 -32
  %15810 = bitcast i16* %15809 to <16 x i16>*
  %15811 = load <16 x i16>, <16 x i16>* %15810, align 2, !tbaa !396
  %15812 = getelementptr inbounds i16, i16* %15802, i64 -16
  %15813 = bitcast i16* %15812 to <16 x i16>*
  %15814 = load <16 x i16>, <16 x i16>* %15813, align 2, !tbaa !396
  %15815 = getelementptr inbounds i16, i16* %15802, i64 -30
  %15816 = bitcast i16* %15815 to <16 x i16>*
  %15817 = load <16 x i16>, <16 x i16>* %15816, align 2, !tbaa !396
  %15818 = getelementptr inbounds i16, i16* %15802, i64 -14
  %15819 = bitcast i16* %15818 to <16 x i16>*
  %15820 = load <16 x i16>, <16 x i16>* %15819, align 2, !tbaa !396
  %15821 = getelementptr inbounds i16, i16* %15802, i64 -28
  %15822 = bitcast i16* %15821 to <16 x i16>*
  %15823 = load <16 x i16>, <16 x i16>* %15822, align 2, !tbaa !396
  %15824 = getelementptr inbounds i16, i16* %15802, i64 -12
  %15825 = bitcast i16* %15824 to <16 x i16>*
  %15826 = load <16 x i16>, <16 x i16>* %15825, align 2, !tbaa !396
  %15827 = getelementptr inbounds i16, i16* %15802, i64 -29
  %15828 = bitcast i16* %15827 to <16 x i16>*
  %15829 = load <16 x i16>, <16 x i16>* %15828, align 2, !tbaa !396
  %15830 = getelementptr inbounds i16, i16* %15802, i64 -13
  %15831 = bitcast i16* %15830 to <16 x i16>*
  %15832 = load <16 x i16>, <16 x i16>* %15831, align 2, !tbaa !396
  %15833 = add <16 x i16> %15811, %15805
  %15834 = add <16 x i16> %15833, %15817
  %15835 = add <16 x i16> %15834, %15823
  %15836 = add <16 x i16> %15835, %15829
  %15837 = add <16 x i16> %15814, %15808
  %15838 = add <16 x i16> %15837, %15820
  %15839 = add <16 x i16> %15838, %15826
  %15840 = add <16 x i16> %15839, %15832
  %15841 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15836, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %15842 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15840, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %15843 = shufflevector <16 x i16> %15841, <16 x i16> %15842, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15844 = lshr <32 x i16> %15843, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15845 = shufflevector <32 x i16> %15844, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15846 = add nsw i32 %a353, 2
  %15847 = and i32 %15846, 7
  %15848 = zext i32 %15847 to i64
  %15849 = mul nsw i64 %291, %15848
  %15850 = add nsw i64 %293, %15849
  %15851 = getelementptr inbounds i16, i16* %blur_x879, i64 %15850
  %15852 = getelementptr inbounds i16, i16* %15851, i64 -32
  %15853 = bitcast i16* %15852 to <16 x i16>*
  store <16 x i16> %15845, <16 x i16>* %15853, align 2, !tbaa !399
  %15854 = shufflevector <32 x i16> %15844, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15855 = getelementptr inbounds i16, i16* %15851, i64 -16
  %15856 = bitcast i16* %15855 to <16 x i16>*
  store <16 x i16> %15854, <16 x i16>* %15856, align 2, !tbaa !399
  br label %after_bb941

"for blur_y.s0.x.x.rebased949":                   ; preds = %"for blur_y.s0.x.x.rebased949.preheader", %after_bb952
  %indvars.iv3269 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased949.preheader" ], [ %indvars.iv.next3270, %after_bb952 ]
  %15857 = add nsw i64 %indvars.iv3269, %295
  %15858 = icmp slt i64 %15857, 1
  %15859 = trunc i64 %15857 to i32
  %15860 = shl nsw i32 %15859, 5
  %15861 = icmp sgt i32 %198, %15860
  %15862 = or i1 %15858, %15861
  br i1 %15862, label %"produce blur_x956", label %after_bb952

"end for blur_y.s0.x.x.rebased950":               ; preds = %after_bb952, %after_bb941
  br i1 %296, label %"for blur_y.s0.x.x.rebased961.preheader", label %"end for blur_y.s0.x.x.rebased962", !prof !386

"for blur_y.s0.x.x.rebased961.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased950"
  %15863 = sext i32 %t1694946 to i64
  br label %"for blur_y.s0.x.x.rebased961"

after_bb952:                                      ; preds = %"for blur_y.s0.x.x.rebased949", %"produce blur_x956"
  %indvars.iv.next3270 = add nuw nsw i64 %indvars.iv3269, 1
  %.not2608 = icmp eq i64 %indvars.iv.next3270, %378
  br i1 %.not2608, label %"end for blur_y.s0.x.x.rebased950", label %"for blur_y.s0.x.x.rebased949"

"produce blur_x956":                              ; preds = %"for blur_y.s0.x.x.rebased949"
  %t696957 = add nsw i32 %15860, %t1693947
  %15864 = sext i32 %t696957 to i64
  %15865 = getelementptr inbounds i16, i16* %read_input822, i64 %15864
  %15866 = getelementptr inbounds i16, i16* %15865, i64 1
  %15867 = bitcast i16* %15866 to <16 x i16>*
  %15868 = load <16 x i16>, <16 x i16>* %15867, align 2, !tbaa !396
  %15869 = getelementptr inbounds i16, i16* %15865, i64 17
  %15870 = bitcast i16* %15869 to <16 x i16>*
  %15871 = load <16 x i16>, <16 x i16>* %15870, align 2, !tbaa !396
  %15872 = bitcast i16* %15865 to <16 x i16>*
  %15873 = load <16 x i16>, <16 x i16>* %15872, align 2, !tbaa !396
  %15874 = getelementptr inbounds i16, i16* %15865, i64 16
  %15875 = bitcast i16* %15874 to <16 x i16>*
  %15876 = load <16 x i16>, <16 x i16>* %15875, align 2, !tbaa !396
  %15877 = getelementptr inbounds i16, i16* %15865, i64 2
  %15878 = bitcast i16* %15877 to <16 x i16>*
  %15879 = load <16 x i16>, <16 x i16>* %15878, align 2, !tbaa !396
  %15880 = getelementptr inbounds i16, i16* %15865, i64 18
  %15881 = bitcast i16* %15880 to <16 x i16>*
  %15882 = load <16 x i16>, <16 x i16>* %15881, align 2, !tbaa !396
  %15883 = getelementptr inbounds i16, i16* %15865, i64 4
  %15884 = bitcast i16* %15883 to <16 x i16>*
  %15885 = load <16 x i16>, <16 x i16>* %15884, align 2, !tbaa !396
  %15886 = getelementptr inbounds i16, i16* %15865, i64 20
  %15887 = bitcast i16* %15886 to <16 x i16>*
  %15888 = load <16 x i16>, <16 x i16>* %15887, align 2, !tbaa !396
  %15889 = getelementptr inbounds i16, i16* %15865, i64 3
  %15890 = bitcast i16* %15889 to <16 x i16>*
  %15891 = load <16 x i16>, <16 x i16>* %15890, align 2, !tbaa !396
  %15892 = getelementptr inbounds i16, i16* %15865, i64 19
  %15893 = bitcast i16* %15892 to <16 x i16>*
  %15894 = load <16 x i16>, <16 x i16>* %15893, align 2, !tbaa !396
  %15895 = add <16 x i16> %15873, %15868
  %15896 = add <16 x i16> %15895, %15879
  %15897 = add <16 x i16> %15896, %15885
  %15898 = add <16 x i16> %15897, %15891
  %15899 = add <16 x i16> %15876, %15871
  %15900 = add <16 x i16> %15899, %15882
  %15901 = add <16 x i16> %15900, %15888
  %15902 = add <16 x i16> %15901, %15894
  %15903 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15898, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %15904 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15902, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %15905 = shufflevector <16 x i16> %15903, <16 x i16> %15904, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15906 = lshr <32 x i16> %15905, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15907 = shufflevector <32 x i16> %15906, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15908 = shl nsw i64 %15857, 5
  %15909 = add nsw i64 %15908, %15801
  %15910 = getelementptr inbounds i16, i16* %blur_x879, i64 %15909
  %15911 = bitcast i16* %15910 to <16 x i16>*
  store <16 x i16> %15907, <16 x i16>* %15911, align 2, !tbaa !399
  %15912 = shufflevector <32 x i16> %15906, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15913 = getelementptr inbounds i16, i16* %15910, i64 16
  %15914 = bitcast i16* %15913 to <16 x i16>*
  store <16 x i16> %15912, <16 x i16>* %15914, align 2, !tbaa !399
  br label %after_bb952

"for blur_y.s0.x.x.rebased961":                   ; preds = %"for blur_y.s0.x.x.rebased961.preheader", %after_bb964
  %blur_y.s0.x.x.rebased963 = phi i32 [ %15919, %after_bb964 ], [ 0, %"for blur_y.s0.x.x.rebased961.preheader" ]
  %t2223967 = add nsw i32 %blur_y.s0.x.x.rebased963, %t1626814
  %15915 = icmp slt i32 %t2223967, 1
  %15916 = shl nsw i32 %t2223967, 5
  %15917 = icmp sgt i32 %198, %15916
  %15918 = or i1 %15915, %15917
  br i1 %15918, label %then_bb965, label %after_bb964

"end for blur_y.s0.x.x.rebased962":               ; preds = %after_bb964, %"end for blur_y.s0.x.x.rebased950"
  br i1 %228, label %"produce blur_x974", label %"end for blur_y.s0.x.x.rebased962.after_bb971_crit_edge"

"end for blur_y.s0.x.x.rebased962.after_bb971_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased962"
  %.pre3477 = add nsw i32 %a353, 3
  %.pre3479 = and i32 %.pre3477, 7
  br label %after_bb971

after_bb964:                                      ; preds = %"for blur_y.s0.x.x.rebased961", %then_bb965
  %15919 = add nuw nsw i32 %blur_y.s0.x.x.rebased963, 1
  %.not2607 = icmp eq i32 %15919, %t1683899
  br i1 %.not2607, label %"end for blur_y.s0.x.x.rebased962", label %"for blur_y.s0.x.x.rebased961"

then_bb965:                                       ; preds = %"for blur_y.s0.x.x.rebased961"
  %15920 = icmp sgt i32 %a341, %15916
  %b424 = select i1 %15920, i32 %15916, i32 %a341
  %15921 = icmp slt i32 %b424, %198
  %blur_x.s0.x.v1.base.s969 = select i1 %15921, i32 %b424, i32 %198
  %t698970 = add nsw i32 %blur_x.s0.x.v1.base.s969, %t1693947
  %15922 = sext i32 %t698970 to i64
  %15923 = getelementptr inbounds i16, i16* %read_input822, i64 %15922
  %15924 = getelementptr inbounds i16, i16* %15923, i64 1
  %15925 = bitcast i16* %15924 to <16 x i16>*
  %15926 = load <16 x i16>, <16 x i16>* %15925, align 2, !tbaa !396
  %15927 = getelementptr inbounds i16, i16* %15923, i64 17
  %15928 = bitcast i16* %15927 to <16 x i16>*
  %15929 = load <16 x i16>, <16 x i16>* %15928, align 2, !tbaa !396
  %15930 = bitcast i16* %15923 to <16 x i16>*
  %15931 = load <16 x i16>, <16 x i16>* %15930, align 2, !tbaa !396
  %15932 = getelementptr inbounds i16, i16* %15923, i64 16
  %15933 = bitcast i16* %15932 to <16 x i16>*
  %15934 = load <16 x i16>, <16 x i16>* %15933, align 2, !tbaa !396
  %15935 = getelementptr inbounds i16, i16* %15923, i64 2
  %15936 = bitcast i16* %15935 to <16 x i16>*
  %15937 = load <16 x i16>, <16 x i16>* %15936, align 2, !tbaa !396
  %15938 = getelementptr inbounds i16, i16* %15923, i64 18
  %15939 = bitcast i16* %15938 to <16 x i16>*
  %15940 = load <16 x i16>, <16 x i16>* %15939, align 2, !tbaa !396
  %15941 = getelementptr inbounds i16, i16* %15923, i64 4
  %15942 = bitcast i16* %15941 to <16 x i16>*
  %15943 = load <16 x i16>, <16 x i16>* %15942, align 2, !tbaa !396
  %15944 = getelementptr inbounds i16, i16* %15923, i64 20
  %15945 = bitcast i16* %15944 to <16 x i16>*
  %15946 = load <16 x i16>, <16 x i16>* %15945, align 2, !tbaa !396
  %15947 = getelementptr inbounds i16, i16* %15923, i64 3
  %15948 = bitcast i16* %15947 to <16 x i16>*
  %15949 = load <16 x i16>, <16 x i16>* %15948, align 2, !tbaa !396
  %15950 = getelementptr inbounds i16, i16* %15923, i64 19
  %15951 = bitcast i16* %15950 to <16 x i16>*
  %15952 = load <16 x i16>, <16 x i16>* %15951, align 2, !tbaa !396
  %15953 = add <16 x i16> %15931, %15926
  %15954 = add <16 x i16> %15953, %15937
  %15955 = add <16 x i16> %15954, %15943
  %15956 = add <16 x i16> %15955, %15949
  %15957 = add <16 x i16> %15934, %15929
  %15958 = add <16 x i16> %15957, %15940
  %15959 = add <16 x i16> %15958, %15946
  %15960 = add <16 x i16> %15959, %15952
  %15961 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15956, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %15962 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15960, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %15963 = shufflevector <16 x i16> %15961, <16 x i16> %15962, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15964 = lshr <32 x i16> %15963, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %15965 = shufflevector <32 x i16> %15964, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15966 = sext i32 %blur_x.s0.x.v1.base.s969 to i64
  %15967 = add nsw i64 %15966, %15863
  %15968 = getelementptr inbounds i16, i16* %blur_x879, i64 %15967
  %15969 = bitcast i16* %15968 to <16 x i16>*
  store <16 x i16> %15965, <16 x i16>* %15969, align 2, !tbaa !399
  %15970 = shufflevector <32 x i16> %15964, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15971 = getelementptr inbounds i16, i16* %15968, i64 16
  %15972 = bitcast i16* %15971 to <16 x i16>*
  store <16 x i16> %15970, <16 x i16>* %15972, align 2, !tbaa !399
  br label %after_bb964

after_bb971:                                      ; preds = %"end for blur_y.s0.x.x.rebased962.after_bb971_crit_edge", %"produce blur_x974"
  %.pre-phi3480 = phi i32 [ %.pre3479, %"end for blur_y.s0.x.x.rebased962.after_bb971_crit_edge" ], [ %16020, %"produce blur_x974" ]
  %15973 = mul nsw i32 %.pre-phi3480, %a400
  %t1700976 = sub nsw i32 %15973, %t1645811
  br i1 %294, label %"for blur_y.s0.x.x.rebased979.preheader", label %"end for blur_y.s0.x.x.rebased980", !prof !386

"for blur_y.s0.x.x.rebased979.preheader":         ; preds = %after_bb971
  %15974 = sext i32 %t1700976 to i64
  br label %"for blur_y.s0.x.x.rebased979"

"produce blur_x974":                              ; preds = %"end for blur_y.s0.x.x.rebased962"
  %15975 = getelementptr inbounds i16, i16* %read_input822, i64 %302
  %15976 = getelementptr inbounds i16, i16* %15975, i64 -31
  %15977 = bitcast i16* %15976 to <16 x i16>*
  %15978 = load <16 x i16>, <16 x i16>* %15977, align 2, !tbaa !396
  %15979 = getelementptr inbounds i16, i16* %15975, i64 -15
  %15980 = bitcast i16* %15979 to <16 x i16>*
  %15981 = load <16 x i16>, <16 x i16>* %15980, align 2, !tbaa !396
  %15982 = getelementptr inbounds i16, i16* %15975, i64 -32
  %15983 = bitcast i16* %15982 to <16 x i16>*
  %15984 = load <16 x i16>, <16 x i16>* %15983, align 2, !tbaa !396
  %15985 = getelementptr inbounds i16, i16* %15975, i64 -16
  %15986 = bitcast i16* %15985 to <16 x i16>*
  %15987 = load <16 x i16>, <16 x i16>* %15986, align 2, !tbaa !396
  %15988 = getelementptr inbounds i16, i16* %15975, i64 -30
  %15989 = bitcast i16* %15988 to <16 x i16>*
  %15990 = load <16 x i16>, <16 x i16>* %15989, align 2, !tbaa !396
  %15991 = getelementptr inbounds i16, i16* %15975, i64 -14
  %15992 = bitcast i16* %15991 to <16 x i16>*
  %15993 = load <16 x i16>, <16 x i16>* %15992, align 2, !tbaa !396
  %15994 = getelementptr inbounds i16, i16* %15975, i64 -28
  %15995 = bitcast i16* %15994 to <16 x i16>*
  %15996 = load <16 x i16>, <16 x i16>* %15995, align 2, !tbaa !396
  %15997 = getelementptr inbounds i16, i16* %15975, i64 -12
  %15998 = bitcast i16* %15997 to <16 x i16>*
  %15999 = load <16 x i16>, <16 x i16>* %15998, align 2, !tbaa !396
  %16000 = getelementptr inbounds i16, i16* %15975, i64 -29
  %16001 = bitcast i16* %16000 to <16 x i16>*
  %16002 = load <16 x i16>, <16 x i16>* %16001, align 2, !tbaa !396
  %16003 = getelementptr inbounds i16, i16* %15975, i64 -13
  %16004 = bitcast i16* %16003 to <16 x i16>*
  %16005 = load <16 x i16>, <16 x i16>* %16004, align 2, !tbaa !396
  %16006 = add <16 x i16> %15984, %15978
  %16007 = add <16 x i16> %16006, %15990
  %16008 = add <16 x i16> %16007, %15996
  %16009 = add <16 x i16> %16008, %16002
  %16010 = add <16 x i16> %15987, %15981
  %16011 = add <16 x i16> %16010, %15993
  %16012 = add <16 x i16> %16011, %15999
  %16013 = add <16 x i16> %16012, %16005
  %16014 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16009, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16015 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16013, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16016 = shufflevector <16 x i16> %16014, <16 x i16> %16015, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16017 = lshr <32 x i16> %16016, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16018 = shufflevector <32 x i16> %16017, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16019 = add nsw i32 %a353, 3
  %16020 = and i32 %16019, 7
  %16021 = zext i32 %16020 to i64
  %16022 = mul nsw i64 %291, %16021
  %16023 = add nsw i64 %293, %16022
  %16024 = getelementptr inbounds i16, i16* %blur_x879, i64 %16023
  %16025 = getelementptr inbounds i16, i16* %16024, i64 -32
  %16026 = bitcast i16* %16025 to <16 x i16>*
  store <16 x i16> %16018, <16 x i16>* %16026, align 2, !tbaa !399
  %16027 = shufflevector <32 x i16> %16017, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16028 = getelementptr inbounds i16, i16* %16024, i64 -16
  %16029 = bitcast i16* %16028 to <16 x i16>*
  store <16 x i16> %16027, <16 x i16>* %16029, align 2, !tbaa !399
  br label %after_bb971

"for blur_y.s0.x.x.rebased979":                   ; preds = %"for blur_y.s0.x.x.rebased979.preheader", %after_bb982
  %indvars.iv3272 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased979.preheader" ], [ %indvars.iv.next3273, %after_bb982 ]
  %16030 = add nsw i64 %indvars.iv3272, %295
  %16031 = icmp slt i64 %16030, 1
  %16032 = trunc i64 %16030 to i32
  %16033 = shl nsw i32 %16032, 5
  %16034 = icmp sgt i32 %198, %16033
  %16035 = or i1 %16031, %16034
  br i1 %16035, label %"produce blur_x986", label %after_bb982

"end for blur_y.s0.x.x.rebased980":               ; preds = %after_bb982, %after_bb971
  br i1 %296, label %"for blur_y.s0.x.x.rebased991.preheader", label %"end for blur_y.s0.x.x.rebased992", !prof !386

"for blur_y.s0.x.x.rebased991.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased980"
  %16036 = sext i32 %t1700976 to i64
  br label %"for blur_y.s0.x.x.rebased991"

after_bb982:                                      ; preds = %"for blur_y.s0.x.x.rebased979", %"produce blur_x986"
  %indvars.iv.next3273 = add nuw nsw i64 %indvars.iv3272, 1
  %.not2606 = icmp eq i64 %indvars.iv.next3273, %378
  br i1 %.not2606, label %"end for blur_y.s0.x.x.rebased980", label %"for blur_y.s0.x.x.rebased979"

"produce blur_x986":                              ; preds = %"for blur_y.s0.x.x.rebased979"
  %t702987 = add nsw i32 %16033, %t1699977
  %16037 = sext i32 %t702987 to i64
  %16038 = getelementptr inbounds i16, i16* %read_input822, i64 %16037
  %16039 = getelementptr inbounds i16, i16* %16038, i64 1
  %16040 = bitcast i16* %16039 to <16 x i16>*
  %16041 = load <16 x i16>, <16 x i16>* %16040, align 2, !tbaa !396
  %16042 = getelementptr inbounds i16, i16* %16038, i64 17
  %16043 = bitcast i16* %16042 to <16 x i16>*
  %16044 = load <16 x i16>, <16 x i16>* %16043, align 2, !tbaa !396
  %16045 = bitcast i16* %16038 to <16 x i16>*
  %16046 = load <16 x i16>, <16 x i16>* %16045, align 2, !tbaa !396
  %16047 = getelementptr inbounds i16, i16* %16038, i64 16
  %16048 = bitcast i16* %16047 to <16 x i16>*
  %16049 = load <16 x i16>, <16 x i16>* %16048, align 2, !tbaa !396
  %16050 = getelementptr inbounds i16, i16* %16038, i64 2
  %16051 = bitcast i16* %16050 to <16 x i16>*
  %16052 = load <16 x i16>, <16 x i16>* %16051, align 2, !tbaa !396
  %16053 = getelementptr inbounds i16, i16* %16038, i64 18
  %16054 = bitcast i16* %16053 to <16 x i16>*
  %16055 = load <16 x i16>, <16 x i16>* %16054, align 2, !tbaa !396
  %16056 = getelementptr inbounds i16, i16* %16038, i64 4
  %16057 = bitcast i16* %16056 to <16 x i16>*
  %16058 = load <16 x i16>, <16 x i16>* %16057, align 2, !tbaa !396
  %16059 = getelementptr inbounds i16, i16* %16038, i64 20
  %16060 = bitcast i16* %16059 to <16 x i16>*
  %16061 = load <16 x i16>, <16 x i16>* %16060, align 2, !tbaa !396
  %16062 = getelementptr inbounds i16, i16* %16038, i64 3
  %16063 = bitcast i16* %16062 to <16 x i16>*
  %16064 = load <16 x i16>, <16 x i16>* %16063, align 2, !tbaa !396
  %16065 = getelementptr inbounds i16, i16* %16038, i64 19
  %16066 = bitcast i16* %16065 to <16 x i16>*
  %16067 = load <16 x i16>, <16 x i16>* %16066, align 2, !tbaa !396
  %16068 = add <16 x i16> %16046, %16041
  %16069 = add <16 x i16> %16068, %16052
  %16070 = add <16 x i16> %16069, %16058
  %16071 = add <16 x i16> %16070, %16064
  %16072 = add <16 x i16> %16049, %16044
  %16073 = add <16 x i16> %16072, %16055
  %16074 = add <16 x i16> %16073, %16061
  %16075 = add <16 x i16> %16074, %16067
  %16076 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16071, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16077 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16075, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16078 = shufflevector <16 x i16> %16076, <16 x i16> %16077, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16079 = lshr <32 x i16> %16078, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16080 = shufflevector <32 x i16> %16079, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16081 = shl nsw i64 %16030, 5
  %16082 = add nsw i64 %16081, %15974
  %16083 = getelementptr inbounds i16, i16* %blur_x879, i64 %16082
  %16084 = bitcast i16* %16083 to <16 x i16>*
  store <16 x i16> %16080, <16 x i16>* %16084, align 2, !tbaa !399
  %16085 = shufflevector <32 x i16> %16079, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16086 = getelementptr inbounds i16, i16* %16083, i64 16
  %16087 = bitcast i16* %16086 to <16 x i16>*
  store <16 x i16> %16085, <16 x i16>* %16087, align 2, !tbaa !399
  br label %after_bb982

"for blur_y.s0.x.x.rebased991":                   ; preds = %"for blur_y.s0.x.x.rebased991.preheader", %after_bb994
  %blur_y.s0.x.x.rebased993 = phi i32 [ %16092, %after_bb994 ], [ 0, %"for blur_y.s0.x.x.rebased991.preheader" ]
  %t2225997 = add nsw i32 %blur_y.s0.x.x.rebased993, %t1626814
  %16088 = icmp slt i32 %t2225997, 1
  %16089 = shl nsw i32 %t2225997, 5
  %16090 = icmp sgt i32 %198, %16089
  %16091 = or i1 %16088, %16090
  br i1 %16091, label %then_bb995, label %after_bb994

"end for blur_y.s0.x.x.rebased992":               ; preds = %after_bb994, %"end for blur_y.s0.x.x.rebased980"
  br i1 %228, label %"produce blur_x1004", label %"end for blur_y.s0.x.x.rebased992.after_bb1001_crit_edge"

"end for blur_y.s0.x.x.rebased992.after_bb1001_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased992"
  %.pre3481 = add nsw i32 %a353, 4
  %.pre3483 = and i32 %.pre3481, 7
  br label %after_bb1001

after_bb994:                                      ; preds = %"for blur_y.s0.x.x.rebased991", %then_bb995
  %16092 = add nuw nsw i32 %blur_y.s0.x.x.rebased993, 1
  %.not2605 = icmp eq i32 %16092, %t1683899
  br i1 %.not2605, label %"end for blur_y.s0.x.x.rebased992", label %"for blur_y.s0.x.x.rebased991"

then_bb995:                                       ; preds = %"for blur_y.s0.x.x.rebased991"
  %16093 = icmp sgt i32 %a341, %16089
  %b431 = select i1 %16093, i32 %16089, i32 %a341
  %16094 = icmp slt i32 %b431, %198
  %blur_x.s0.x.v1.base.s999 = select i1 %16094, i32 %b431, i32 %198
  %t7041000 = add nsw i32 %blur_x.s0.x.v1.base.s999, %t1699977
  %16095 = sext i32 %t7041000 to i64
  %16096 = getelementptr inbounds i16, i16* %read_input822, i64 %16095
  %16097 = getelementptr inbounds i16, i16* %16096, i64 1
  %16098 = bitcast i16* %16097 to <16 x i16>*
  %16099 = load <16 x i16>, <16 x i16>* %16098, align 2, !tbaa !396
  %16100 = getelementptr inbounds i16, i16* %16096, i64 17
  %16101 = bitcast i16* %16100 to <16 x i16>*
  %16102 = load <16 x i16>, <16 x i16>* %16101, align 2, !tbaa !396
  %16103 = bitcast i16* %16096 to <16 x i16>*
  %16104 = load <16 x i16>, <16 x i16>* %16103, align 2, !tbaa !396
  %16105 = getelementptr inbounds i16, i16* %16096, i64 16
  %16106 = bitcast i16* %16105 to <16 x i16>*
  %16107 = load <16 x i16>, <16 x i16>* %16106, align 2, !tbaa !396
  %16108 = getelementptr inbounds i16, i16* %16096, i64 2
  %16109 = bitcast i16* %16108 to <16 x i16>*
  %16110 = load <16 x i16>, <16 x i16>* %16109, align 2, !tbaa !396
  %16111 = getelementptr inbounds i16, i16* %16096, i64 18
  %16112 = bitcast i16* %16111 to <16 x i16>*
  %16113 = load <16 x i16>, <16 x i16>* %16112, align 2, !tbaa !396
  %16114 = getelementptr inbounds i16, i16* %16096, i64 4
  %16115 = bitcast i16* %16114 to <16 x i16>*
  %16116 = load <16 x i16>, <16 x i16>* %16115, align 2, !tbaa !396
  %16117 = getelementptr inbounds i16, i16* %16096, i64 20
  %16118 = bitcast i16* %16117 to <16 x i16>*
  %16119 = load <16 x i16>, <16 x i16>* %16118, align 2, !tbaa !396
  %16120 = getelementptr inbounds i16, i16* %16096, i64 3
  %16121 = bitcast i16* %16120 to <16 x i16>*
  %16122 = load <16 x i16>, <16 x i16>* %16121, align 2, !tbaa !396
  %16123 = getelementptr inbounds i16, i16* %16096, i64 19
  %16124 = bitcast i16* %16123 to <16 x i16>*
  %16125 = load <16 x i16>, <16 x i16>* %16124, align 2, !tbaa !396
  %16126 = add <16 x i16> %16104, %16099
  %16127 = add <16 x i16> %16126, %16110
  %16128 = add <16 x i16> %16127, %16116
  %16129 = add <16 x i16> %16128, %16122
  %16130 = add <16 x i16> %16107, %16102
  %16131 = add <16 x i16> %16130, %16113
  %16132 = add <16 x i16> %16131, %16119
  %16133 = add <16 x i16> %16132, %16125
  %16134 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16129, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16135 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16133, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16136 = shufflevector <16 x i16> %16134, <16 x i16> %16135, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16137 = lshr <32 x i16> %16136, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16138 = shufflevector <32 x i16> %16137, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16139 = sext i32 %blur_x.s0.x.v1.base.s999 to i64
  %16140 = add nsw i64 %16139, %16036
  %16141 = getelementptr inbounds i16, i16* %blur_x879, i64 %16140
  %16142 = bitcast i16* %16141 to <16 x i16>*
  store <16 x i16> %16138, <16 x i16>* %16142, align 2, !tbaa !399
  %16143 = shufflevector <32 x i16> %16137, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16144 = getelementptr inbounds i16, i16* %16141, i64 16
  %16145 = bitcast i16* %16144 to <16 x i16>*
  store <16 x i16> %16143, <16 x i16>* %16145, align 2, !tbaa !399
  br label %after_bb994

after_bb1001:                                     ; preds = %"end for blur_y.s0.x.x.rebased992.after_bb1001_crit_edge", %"produce blur_x1004"
  %.pre-phi3484 = phi i32 [ %.pre3483, %"end for blur_y.s0.x.x.rebased992.after_bb1001_crit_edge" ], [ %16211, %"produce blur_x1004" ]
  %16146 = mul nsw i32 %.pre-phi3484, %a400
  %t17061012 = sub nsw i32 %16146, %t1645811
  br i1 %294, label %"for blur_y.s0.x.x.rebased1016.preheader", label %"end for blur_y.s0.x.x.rebased1017", !prof !386

"for blur_y.s0.x.x.rebased1016.preheader":        ; preds = %after_bb1001
  %16147 = sext i32 %t17061012 to i64
  %16148 = zext i32 %.pre-phi3472 to i64
  %16149 = mul nsw i64 %16148, %306
  %16150 = sub nsw i64 %16149, %290
  %16151 = zext i32 %.pre-phi3468 to i64
  %16152 = mul nsw i64 %16151, %306
  %16153 = sub nsw i64 %16152, %290
  %16154 = zext i32 %.pre-phi3476 to i64
  %16155 = mul nsw i64 %16154, %306
  %16156 = sub nsw i64 %16155, %290
  %16157 = zext i32 %.pre-phi3484 to i64
  %16158 = mul nsw i64 %16157, %306
  %16159 = sub nsw i64 %16158, %290
  %16160 = zext i32 %.pre-phi3480 to i64
  %16161 = mul nsw i64 %16160, %306
  %16162 = sub nsw i64 %16161, %290
  %16163 = sext i32 %a353 to i64
  %16164 = mul nsw i64 %16163, %307
  %16165 = add nsw i64 %16164, %310
  br label %"for blur_y.s0.x.x.rebased1016"

"produce blur_x1004":                             ; preds = %"end for blur_y.s0.x.x.rebased992"
  %16166 = getelementptr inbounds i16, i16* %read_input822, i64 %305
  %16167 = getelementptr inbounds i16, i16* %16166, i64 -31
  %16168 = bitcast i16* %16167 to <16 x i16>*
  %16169 = load <16 x i16>, <16 x i16>* %16168, align 2, !tbaa !396
  %16170 = getelementptr inbounds i16, i16* %16166, i64 -15
  %16171 = bitcast i16* %16170 to <16 x i16>*
  %16172 = load <16 x i16>, <16 x i16>* %16171, align 2, !tbaa !396
  %16173 = getelementptr inbounds i16, i16* %16166, i64 -32
  %16174 = bitcast i16* %16173 to <16 x i16>*
  %16175 = load <16 x i16>, <16 x i16>* %16174, align 2, !tbaa !396
  %16176 = getelementptr inbounds i16, i16* %16166, i64 -16
  %16177 = bitcast i16* %16176 to <16 x i16>*
  %16178 = load <16 x i16>, <16 x i16>* %16177, align 2, !tbaa !396
  %16179 = getelementptr inbounds i16, i16* %16166, i64 -30
  %16180 = bitcast i16* %16179 to <16 x i16>*
  %16181 = load <16 x i16>, <16 x i16>* %16180, align 2, !tbaa !396
  %16182 = getelementptr inbounds i16, i16* %16166, i64 -14
  %16183 = bitcast i16* %16182 to <16 x i16>*
  %16184 = load <16 x i16>, <16 x i16>* %16183, align 2, !tbaa !396
  %16185 = getelementptr inbounds i16, i16* %16166, i64 -28
  %16186 = bitcast i16* %16185 to <16 x i16>*
  %16187 = load <16 x i16>, <16 x i16>* %16186, align 2, !tbaa !396
  %16188 = getelementptr inbounds i16, i16* %16166, i64 -12
  %16189 = bitcast i16* %16188 to <16 x i16>*
  %16190 = load <16 x i16>, <16 x i16>* %16189, align 2, !tbaa !396
  %16191 = getelementptr inbounds i16, i16* %16166, i64 -29
  %16192 = bitcast i16* %16191 to <16 x i16>*
  %16193 = load <16 x i16>, <16 x i16>* %16192, align 2, !tbaa !396
  %16194 = getelementptr inbounds i16, i16* %16166, i64 -13
  %16195 = bitcast i16* %16194 to <16 x i16>*
  %16196 = load <16 x i16>, <16 x i16>* %16195, align 2, !tbaa !396
  %16197 = add <16 x i16> %16175, %16169
  %16198 = add <16 x i16> %16197, %16181
  %16199 = add <16 x i16> %16198, %16187
  %16200 = add <16 x i16> %16199, %16193
  %16201 = add <16 x i16> %16178, %16172
  %16202 = add <16 x i16> %16201, %16184
  %16203 = add <16 x i16> %16202, %16190
  %16204 = add <16 x i16> %16203, %16196
  %16205 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16200, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16206 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16204, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16207 = shufflevector <16 x i16> %16205, <16 x i16> %16206, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16208 = lshr <32 x i16> %16207, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16209 = shufflevector <32 x i16> %16208, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16210 = add nsw i32 %a353, 4
  %16211 = and i32 %16210, 7
  %16212 = zext i32 %16211 to i64
  %16213 = mul nsw i64 %291, %16212
  %16214 = add nsw i64 %293, %16213
  %16215 = getelementptr inbounds i16, i16* %blur_x879, i64 %16214
  %16216 = getelementptr inbounds i16, i16* %16215, i64 -32
  %16217 = bitcast i16* %16216 to <16 x i16>*
  store <16 x i16> %16209, <16 x i16>* %16217, align 2, !tbaa !399
  %16218 = shufflevector <32 x i16> %16208, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16219 = getelementptr inbounds i16, i16* %16215, i64 -16
  %16220 = bitcast i16* %16219 to <16 x i16>*
  store <16 x i16> %16218, <16 x i16>* %16220, align 2, !tbaa !399
  %16221 = zext i32 %.pre-phi3472 to i64
  %16222 = mul nsw i64 %16221, %306
  %16223 = add nsw i64 %16222, %288
  %16224 = getelementptr inbounds i16, i16* %blur_x879, i64 %16223
  %16225 = getelementptr inbounds i16, i16* %16224, i64 -32
  %16226 = bitcast i16* %16225 to <16 x i16>*
  %16227 = load <16 x i16>, <16 x i16>* %16226, align 2, !tbaa !399
  %16228 = getelementptr inbounds i16, i16* %16224, i64 -16
  %16229 = bitcast i16* %16228 to <16 x i16>*
  %16230 = load <16 x i16>, <16 x i16>* %16229, align 2, !tbaa !399
  %16231 = zext i32 %.pre-phi3468 to i64
  %16232 = mul nsw i64 %16231, %306
  %16233 = add nsw i64 %16232, %288
  %16234 = getelementptr inbounds i16, i16* %blur_x879, i64 %16233
  %16235 = getelementptr inbounds i16, i16* %16234, i64 -32
  %16236 = bitcast i16* %16235 to <16 x i16>*
  %16237 = load <16 x i16>, <16 x i16>* %16236, align 2, !tbaa !399
  %16238 = getelementptr inbounds i16, i16* %16234, i64 -16
  %16239 = bitcast i16* %16238 to <16 x i16>*
  %16240 = load <16 x i16>, <16 x i16>* %16239, align 2, !tbaa !399
  %16241 = zext i32 %.pre-phi3476 to i64
  %16242 = mul nsw i64 %16241, %306
  %16243 = add nsw i64 %16242, %288
  %16244 = getelementptr inbounds i16, i16* %blur_x879, i64 %16243
  %16245 = getelementptr inbounds i16, i16* %16244, i64 -32
  %16246 = bitcast i16* %16245 to <16 x i16>*
  %16247 = load <16 x i16>, <16 x i16>* %16246, align 2, !tbaa !399
  %16248 = getelementptr inbounds i16, i16* %16244, i64 -16
  %16249 = bitcast i16* %16248 to <16 x i16>*
  %16250 = load <16 x i16>, <16 x i16>* %16249, align 2, !tbaa !399
  %16251 = mul nsw i64 %16212, %306
  %16252 = add nsw i64 %16251, %288
  %16253 = getelementptr inbounds i16, i16* %blur_x879, i64 %16252
  %16254 = getelementptr inbounds i16, i16* %16253, i64 -32
  %16255 = bitcast i16* %16254 to <16 x i16>*
  %16256 = load <16 x i16>, <16 x i16>* %16255, align 2, !tbaa !399
  %16257 = getelementptr inbounds i16, i16* %16253, i64 -16
  %16258 = bitcast i16* %16257 to <16 x i16>*
  %16259 = load <16 x i16>, <16 x i16>* %16258, align 2, !tbaa !399
  %16260 = zext i32 %.pre-phi3480 to i64
  %16261 = mul nsw i64 %16260, %306
  %16262 = add nsw i64 %16261, %288
  %16263 = getelementptr inbounds i16, i16* %blur_x879, i64 %16262
  %16264 = getelementptr inbounds i16, i16* %16263, i64 -32
  %16265 = bitcast i16* %16264 to <16 x i16>*
  %16266 = load <16 x i16>, <16 x i16>* %16265, align 2, !tbaa !399
  %16267 = getelementptr inbounds i16, i16* %16263, i64 -16
  %16268 = bitcast i16* %16267 to <16 x i16>*
  %16269 = load <16 x i16>, <16 x i16>* %16268, align 2, !tbaa !399
  %16270 = add <16 x i16> %16237, %16227
  %16271 = add <16 x i16> %16270, %16247
  %16272 = add <16 x i16> %16271, %16256
  %16273 = add <16 x i16> %16272, %16266
  %16274 = add <16 x i16> %16240, %16230
  %16275 = add <16 x i16> %16274, %16250
  %16276 = add <16 x i16> %16275, %16259
  %16277 = add <16 x i16> %16276, %16269
  %16278 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16273, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16279 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16277, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16280 = shufflevector <16 x i16> %16278, <16 x i16> %16279, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16281 = lshr <32 x i16> %16280, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16282 = shufflevector <32 x i16> %16281, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16283 = sext i32 %a353 to i64
  %16284 = mul nsw i64 %16283, %307
  %16285 = add nsw i64 %309, %16284
  %16286 = getelementptr inbounds i16, i16* %260, i64 %16285
  %16287 = getelementptr inbounds i16, i16* %16286, i64 -32
  %16288 = bitcast i16* %16287 to <16 x i16>*
  store <16 x i16> %16282, <16 x i16>* %16288, align 2, !tbaa !401
  %16289 = shufflevector <32 x i16> %16281, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16290 = getelementptr inbounds i16, i16* %16286, i64 -16
  %16291 = bitcast i16* %16290 to <16 x i16>*
  store <16 x i16> %16289, <16 x i16>* %16291, align 2, !tbaa !401
  br label %after_bb1001

"for blur_y.s0.x.x.rebased1016":                  ; preds = %"for blur_y.s0.x.x.rebased1016.preheader", %"consume blur_x1025"
  %indvars.iv3275 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1016.preheader" ], [ %indvars.iv.next3276, %"consume blur_x1025" ]
  %16292 = add nsw i64 %indvars.iv3275, %295
  %16293 = icmp slt i64 %16292, 1
  %16294 = trunc i64 %16292 to i32
  %16295 = shl nsw i32 %16294, 5
  %16296 = icmp sgt i32 %198, %16295
  %16297 = or i1 %16293, %16296
  br i1 %16297, label %"produce blur_x1023", label %"for blur_y.s0.x.x.rebased1016.consume blur_x1025_crit_edge"

"for blur_y.s0.x.x.rebased1016.consume blur_x1025_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1016"
  %.pre3485 = shl nsw i64 %16292, 5
  br label %"consume blur_x1025"

"end for blur_y.s0.x.x.rebased1017":              ; preds = %"consume blur_x1025", %after_bb1001
  br i1 %296, label %"for blur_y.s0.x.x.rebased1033.preheader", label %"end for blur_y.s0.x.x.rebased1034", !prof !386

"for blur_y.s0.x.x.rebased1033.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1017"
  %16298 = sext i32 %t17061012 to i64
  %16299 = zext i32 %.pre-phi3472 to i64
  %16300 = mul nsw i64 %16299, %306
  %16301 = sub nsw i64 %16300, %290
  %16302 = zext i32 %.pre-phi3468 to i64
  %16303 = mul nsw i64 %16302, %306
  %16304 = sub nsw i64 %16303, %290
  %16305 = zext i32 %.pre-phi3476 to i64
  %16306 = mul nsw i64 %16305, %306
  %16307 = sub nsw i64 %16306, %290
  %16308 = zext i32 %.pre-phi3484 to i64
  %16309 = mul nsw i64 %16308, %306
  %16310 = sub nsw i64 %16309, %290
  %16311 = zext i32 %.pre-phi3480 to i64
  %16312 = mul nsw i64 %16311, %306
  %16313 = sub nsw i64 %16312, %290
  %16314 = sext i32 %a353 to i64
  %16315 = mul nsw i64 %16314, %307
  %16316 = add nsw i64 %16315, %310
  br label %"for blur_y.s0.x.x.rebased1033"

"produce blur_x1023":                             ; preds = %"for blur_y.s0.x.x.rebased1016"
  %t7121024 = add nsw i32 %16295, %303
  %16317 = sext i32 %t7121024 to i64
  %16318 = getelementptr inbounds i16, i16* %read_input822, i64 %16317
  %16319 = getelementptr inbounds i16, i16* %16318, i64 1
  %16320 = bitcast i16* %16319 to <16 x i16>*
  %16321 = load <16 x i16>, <16 x i16>* %16320, align 2, !tbaa !396
  %16322 = getelementptr inbounds i16, i16* %16318, i64 17
  %16323 = bitcast i16* %16322 to <16 x i16>*
  %16324 = load <16 x i16>, <16 x i16>* %16323, align 2, !tbaa !396
  %16325 = bitcast i16* %16318 to <16 x i16>*
  %16326 = load <16 x i16>, <16 x i16>* %16325, align 2, !tbaa !396
  %16327 = getelementptr inbounds i16, i16* %16318, i64 16
  %16328 = bitcast i16* %16327 to <16 x i16>*
  %16329 = load <16 x i16>, <16 x i16>* %16328, align 2, !tbaa !396
  %16330 = getelementptr inbounds i16, i16* %16318, i64 2
  %16331 = bitcast i16* %16330 to <16 x i16>*
  %16332 = load <16 x i16>, <16 x i16>* %16331, align 2, !tbaa !396
  %16333 = getelementptr inbounds i16, i16* %16318, i64 18
  %16334 = bitcast i16* %16333 to <16 x i16>*
  %16335 = load <16 x i16>, <16 x i16>* %16334, align 2, !tbaa !396
  %16336 = getelementptr inbounds i16, i16* %16318, i64 4
  %16337 = bitcast i16* %16336 to <16 x i16>*
  %16338 = load <16 x i16>, <16 x i16>* %16337, align 2, !tbaa !396
  %16339 = getelementptr inbounds i16, i16* %16318, i64 20
  %16340 = bitcast i16* %16339 to <16 x i16>*
  %16341 = load <16 x i16>, <16 x i16>* %16340, align 2, !tbaa !396
  %16342 = getelementptr inbounds i16, i16* %16318, i64 3
  %16343 = bitcast i16* %16342 to <16 x i16>*
  %16344 = load <16 x i16>, <16 x i16>* %16343, align 2, !tbaa !396
  %16345 = getelementptr inbounds i16, i16* %16318, i64 19
  %16346 = bitcast i16* %16345 to <16 x i16>*
  %16347 = load <16 x i16>, <16 x i16>* %16346, align 2, !tbaa !396
  %16348 = add <16 x i16> %16326, %16321
  %16349 = add <16 x i16> %16348, %16332
  %16350 = add <16 x i16> %16349, %16338
  %16351 = add <16 x i16> %16350, %16344
  %16352 = add <16 x i16> %16329, %16324
  %16353 = add <16 x i16> %16352, %16335
  %16354 = add <16 x i16> %16353, %16341
  %16355 = add <16 x i16> %16354, %16347
  %16356 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16351, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16357 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16355, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16358 = shufflevector <16 x i16> %16356, <16 x i16> %16357, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16359 = lshr <32 x i16> %16358, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16360 = shufflevector <32 x i16> %16359, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16361 = shl nsw i64 %16292, 5
  %16362 = add nsw i64 %16361, %16147
  %16363 = getelementptr inbounds i16, i16* %blur_x879, i64 %16362
  %16364 = bitcast i16* %16363 to <16 x i16>*
  store <16 x i16> %16360, <16 x i16>* %16364, align 2, !tbaa !399
  %16365 = shufflevector <32 x i16> %16359, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16366 = getelementptr inbounds i16, i16* %16363, i64 16
  %16367 = bitcast i16* %16366 to <16 x i16>*
  store <16 x i16> %16365, <16 x i16>* %16367, align 2, !tbaa !399
  br label %"consume blur_x1025"

"consume blur_x1025":                             ; preds = %"for blur_y.s0.x.x.rebased1016.consume blur_x1025_crit_edge", %"produce blur_x1023"
  %.pre-phi3486 = phi i64 [ %.pre3485, %"for blur_y.s0.x.x.rebased1016.consume blur_x1025_crit_edge" ], [ %16361, %"produce blur_x1023" ]
  %16368 = add nsw i64 %16150, %.pre-phi3486
  %16369 = getelementptr inbounds i16, i16* %blur_x879, i64 %16368
  %16370 = bitcast i16* %16369 to <16 x i16>*
  %16371 = load <16 x i16>, <16 x i16>* %16370, align 2, !tbaa !399
  %16372 = getelementptr inbounds i16, i16* %16369, i64 16
  %16373 = bitcast i16* %16372 to <16 x i16>*
  %16374 = load <16 x i16>, <16 x i16>* %16373, align 2, !tbaa !399
  %16375 = add nsw i64 %16153, %.pre-phi3486
  %16376 = getelementptr inbounds i16, i16* %blur_x879, i64 %16375
  %16377 = bitcast i16* %16376 to <16 x i16>*
  %16378 = load <16 x i16>, <16 x i16>* %16377, align 2, !tbaa !399
  %16379 = getelementptr inbounds i16, i16* %16376, i64 16
  %16380 = bitcast i16* %16379 to <16 x i16>*
  %16381 = load <16 x i16>, <16 x i16>* %16380, align 2, !tbaa !399
  %16382 = add nsw i64 %16156, %.pre-phi3486
  %16383 = getelementptr inbounds i16, i16* %blur_x879, i64 %16382
  %16384 = bitcast i16* %16383 to <16 x i16>*
  %16385 = load <16 x i16>, <16 x i16>* %16384, align 2, !tbaa !399
  %16386 = getelementptr inbounds i16, i16* %16383, i64 16
  %16387 = bitcast i16* %16386 to <16 x i16>*
  %16388 = load <16 x i16>, <16 x i16>* %16387, align 2, !tbaa !399
  %16389 = add nsw i64 %16159, %.pre-phi3486
  %16390 = getelementptr inbounds i16, i16* %blur_x879, i64 %16389
  %16391 = bitcast i16* %16390 to <16 x i16>*
  %16392 = load <16 x i16>, <16 x i16>* %16391, align 2, !tbaa !399
  %16393 = getelementptr inbounds i16, i16* %16390, i64 16
  %16394 = bitcast i16* %16393 to <16 x i16>*
  %16395 = load <16 x i16>, <16 x i16>* %16394, align 2, !tbaa !399
  %16396 = add nsw i64 %16162, %.pre-phi3486
  %16397 = getelementptr inbounds i16, i16* %blur_x879, i64 %16396
  %16398 = bitcast i16* %16397 to <16 x i16>*
  %16399 = load <16 x i16>, <16 x i16>* %16398, align 2, !tbaa !399
  %16400 = getelementptr inbounds i16, i16* %16397, i64 16
  %16401 = bitcast i16* %16400 to <16 x i16>*
  %16402 = load <16 x i16>, <16 x i16>* %16401, align 2, !tbaa !399
  %16403 = add <16 x i16> %16378, %16371
  %16404 = add <16 x i16> %16403, %16385
  %16405 = add <16 x i16> %16404, %16392
  %16406 = add <16 x i16> %16405, %16399
  %16407 = add <16 x i16> %16381, %16374
  %16408 = add <16 x i16> %16407, %16388
  %16409 = add <16 x i16> %16408, %16395
  %16410 = add <16 x i16> %16409, %16402
  %16411 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16406, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16412 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16410, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16413 = shufflevector <16 x i16> %16411, <16 x i16> %16412, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16414 = lshr <32 x i16> %16413, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16415 = shufflevector <32 x i16> %16414, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16416 = add nsw i64 %16165, %.pre-phi3486
  %16417 = getelementptr inbounds i16, i16* %260, i64 %16416
  %16418 = bitcast i16* %16417 to <16 x i16>*
  store <16 x i16> %16415, <16 x i16>* %16418, align 2, !tbaa !401
  %16419 = shufflevector <32 x i16> %16414, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16420 = getelementptr inbounds i16, i16* %16417, i64 16
  %16421 = bitcast i16* %16420 to <16 x i16>*
  store <16 x i16> %16419, <16 x i16>* %16421, align 2, !tbaa !401
  %indvars.iv.next3276 = add nuw nsw i64 %indvars.iv3275, 1
  %.not2604 = icmp eq i64 %indvars.iv.next3276, %378
  br i1 %.not2604, label %"end for blur_y.s0.x.x.rebased1017", label %"for blur_y.s0.x.x.rebased1016"

"for blur_y.s0.x.x.rebased1033":                  ; preds = %"for blur_y.s0.x.x.rebased1033.preheader", %"consume blur_x1043"
  %blur_y.s0.x.x.rebased1035 = phi i32 [ %16534, %"consume blur_x1043" ], [ 0, %"for blur_y.s0.x.x.rebased1033.preheader" ]
  %16422 = add nsw i32 %blur_y.s0.x.x.rebased1035, %t1626814
  %a432 = shl nsw i32 %16422, 5
  %16423 = icmp sgt i32 %a341, %a432
  %b438 = select i1 %16423, i32 %a432, i32 %a341
  %16424 = icmp slt i32 %16422, 1
  %16425 = icmp sgt i32 %198, %a432
  %16426 = or i1 %16424, %16425
  br i1 %16426, label %"produce blur_x1040", label %"consume blur_x1043"

"end for blur_y.s0.x.x.rebased1034":              ; preds = %"consume blur_x1043", %"end for blur_y.s0.x.x.rebased1017"
  br i1 %228, label %"produce blur_x1047", label %"end for blur_y.s0.x.x.rebased1034.after_bb1044_crit_edge"

"end for blur_y.s0.x.x.rebased1034.after_bb1044_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased1034"
  %.pre3487 = add nsw i32 %a353, 5
  %.pre3489 = and i32 %.pre3487, 7
  br label %after_bb1044

"produce blur_x1040":                             ; preds = %"for blur_y.s0.x.x.rebased1033"
  %16427 = icmp slt i32 %b438, %198
  %blur_x.s0.x.v1.base.s1041 = select i1 %16427, i32 %b438, i32 %198
  %t7171042 = add nsw i32 %blur_x.s0.x.v1.base.s1041, %303
  %16428 = sext i32 %t7171042 to i64
  %16429 = getelementptr inbounds i16, i16* %read_input822, i64 %16428
  %16430 = getelementptr inbounds i16, i16* %16429, i64 1
  %16431 = bitcast i16* %16430 to <16 x i16>*
  %16432 = load <16 x i16>, <16 x i16>* %16431, align 2, !tbaa !396
  %16433 = getelementptr inbounds i16, i16* %16429, i64 17
  %16434 = bitcast i16* %16433 to <16 x i16>*
  %16435 = load <16 x i16>, <16 x i16>* %16434, align 2, !tbaa !396
  %16436 = bitcast i16* %16429 to <16 x i16>*
  %16437 = load <16 x i16>, <16 x i16>* %16436, align 2, !tbaa !396
  %16438 = getelementptr inbounds i16, i16* %16429, i64 16
  %16439 = bitcast i16* %16438 to <16 x i16>*
  %16440 = load <16 x i16>, <16 x i16>* %16439, align 2, !tbaa !396
  %16441 = getelementptr inbounds i16, i16* %16429, i64 2
  %16442 = bitcast i16* %16441 to <16 x i16>*
  %16443 = load <16 x i16>, <16 x i16>* %16442, align 2, !tbaa !396
  %16444 = getelementptr inbounds i16, i16* %16429, i64 18
  %16445 = bitcast i16* %16444 to <16 x i16>*
  %16446 = load <16 x i16>, <16 x i16>* %16445, align 2, !tbaa !396
  %16447 = getelementptr inbounds i16, i16* %16429, i64 4
  %16448 = bitcast i16* %16447 to <16 x i16>*
  %16449 = load <16 x i16>, <16 x i16>* %16448, align 2, !tbaa !396
  %16450 = getelementptr inbounds i16, i16* %16429, i64 20
  %16451 = bitcast i16* %16450 to <16 x i16>*
  %16452 = load <16 x i16>, <16 x i16>* %16451, align 2, !tbaa !396
  %16453 = getelementptr inbounds i16, i16* %16429, i64 3
  %16454 = bitcast i16* %16453 to <16 x i16>*
  %16455 = load <16 x i16>, <16 x i16>* %16454, align 2, !tbaa !396
  %16456 = getelementptr inbounds i16, i16* %16429, i64 19
  %16457 = bitcast i16* %16456 to <16 x i16>*
  %16458 = load <16 x i16>, <16 x i16>* %16457, align 2, !tbaa !396
  %16459 = add <16 x i16> %16437, %16432
  %16460 = add <16 x i16> %16459, %16443
  %16461 = add <16 x i16> %16460, %16449
  %16462 = add <16 x i16> %16461, %16455
  %16463 = add <16 x i16> %16440, %16435
  %16464 = add <16 x i16> %16463, %16446
  %16465 = add <16 x i16> %16464, %16452
  %16466 = add <16 x i16> %16465, %16458
  %16467 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16462, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16468 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16466, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16469 = shufflevector <16 x i16> %16467, <16 x i16> %16468, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16470 = lshr <32 x i16> %16469, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16471 = shufflevector <32 x i16> %16470, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16472 = sext i32 %blur_x.s0.x.v1.base.s1041 to i64
  %16473 = add nsw i64 %16472, %16298
  %16474 = getelementptr inbounds i16, i16* %blur_x879, i64 %16473
  %16475 = bitcast i16* %16474 to <16 x i16>*
  store <16 x i16> %16471, <16 x i16>* %16475, align 2, !tbaa !399
  %16476 = shufflevector <32 x i16> %16470, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16477 = getelementptr inbounds i16, i16* %16474, i64 16
  %16478 = bitcast i16* %16477 to <16 x i16>*
  store <16 x i16> %16476, <16 x i16>* %16478, align 2, !tbaa !399
  br label %"consume blur_x1043"

"consume blur_x1043":                             ; preds = %"for blur_y.s0.x.x.rebased1033", %"produce blur_x1040"
  %16479 = sext i32 %b438 to i64
  %16480 = add nsw i64 %16301, %16479
  %16481 = getelementptr inbounds i16, i16* %blur_x879, i64 %16480
  %16482 = bitcast i16* %16481 to <16 x i16>*
  %16483 = load <16 x i16>, <16 x i16>* %16482, align 2, !tbaa !399
  %16484 = getelementptr inbounds i16, i16* %16481, i64 16
  %16485 = bitcast i16* %16484 to <16 x i16>*
  %16486 = load <16 x i16>, <16 x i16>* %16485, align 2, !tbaa !399
  %16487 = add nsw i64 %16304, %16479
  %16488 = getelementptr inbounds i16, i16* %blur_x879, i64 %16487
  %16489 = bitcast i16* %16488 to <16 x i16>*
  %16490 = load <16 x i16>, <16 x i16>* %16489, align 2, !tbaa !399
  %16491 = getelementptr inbounds i16, i16* %16488, i64 16
  %16492 = bitcast i16* %16491 to <16 x i16>*
  %16493 = load <16 x i16>, <16 x i16>* %16492, align 2, !tbaa !399
  %16494 = add nsw i64 %16307, %16479
  %16495 = getelementptr inbounds i16, i16* %blur_x879, i64 %16494
  %16496 = bitcast i16* %16495 to <16 x i16>*
  %16497 = load <16 x i16>, <16 x i16>* %16496, align 2, !tbaa !399
  %16498 = getelementptr inbounds i16, i16* %16495, i64 16
  %16499 = bitcast i16* %16498 to <16 x i16>*
  %16500 = load <16 x i16>, <16 x i16>* %16499, align 2, !tbaa !399
  %16501 = add nsw i64 %16310, %16479
  %16502 = getelementptr inbounds i16, i16* %blur_x879, i64 %16501
  %16503 = bitcast i16* %16502 to <16 x i16>*
  %16504 = load <16 x i16>, <16 x i16>* %16503, align 2, !tbaa !399
  %16505 = getelementptr inbounds i16, i16* %16502, i64 16
  %16506 = bitcast i16* %16505 to <16 x i16>*
  %16507 = load <16 x i16>, <16 x i16>* %16506, align 2, !tbaa !399
  %16508 = add nsw i64 %16313, %16479
  %16509 = getelementptr inbounds i16, i16* %blur_x879, i64 %16508
  %16510 = bitcast i16* %16509 to <16 x i16>*
  %16511 = load <16 x i16>, <16 x i16>* %16510, align 2, !tbaa !399
  %16512 = getelementptr inbounds i16, i16* %16509, i64 16
  %16513 = bitcast i16* %16512 to <16 x i16>*
  %16514 = load <16 x i16>, <16 x i16>* %16513, align 2, !tbaa !399
  %16515 = add <16 x i16> %16490, %16483
  %16516 = add <16 x i16> %16515, %16497
  %16517 = add <16 x i16> %16516, %16504
  %16518 = add <16 x i16> %16517, %16511
  %16519 = add <16 x i16> %16493, %16486
  %16520 = add <16 x i16> %16519, %16500
  %16521 = add <16 x i16> %16520, %16507
  %16522 = add <16 x i16> %16521, %16514
  %16523 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16518, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16524 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16522, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16525 = shufflevector <16 x i16> %16523, <16 x i16> %16524, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16526 = lshr <32 x i16> %16525, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16527 = shufflevector <32 x i16> %16526, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16528 = add nsw i64 %16316, %16479
  %16529 = getelementptr inbounds i16, i16* %260, i64 %16528
  %16530 = bitcast i16* %16529 to <16 x i16>*
  store <16 x i16> %16527, <16 x i16>* %16530, align 2, !tbaa !401
  %16531 = shufflevector <32 x i16> %16526, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16532 = getelementptr inbounds i16, i16* %16529, i64 16
  %16533 = bitcast i16* %16532 to <16 x i16>*
  store <16 x i16> %16531, <16 x i16>* %16533, align 2, !tbaa !401
  %16534 = add nuw nsw i32 %blur_y.s0.x.x.rebased1035, 1
  %.not2603 = icmp eq i32 %16534, %t1683899
  br i1 %.not2603, label %"end for blur_y.s0.x.x.rebased1034", label %"for blur_y.s0.x.x.rebased1033"

after_bb1044:                                     ; preds = %"end for blur_y.s0.x.x.rebased1034.after_bb1044_crit_edge", %"produce blur_x1047"
  %.pre-phi3490 = phi i32 [ %.pre3489, %"end for blur_y.s0.x.x.rebased1034.after_bb1044_crit_edge" ], [ %16601, %"produce blur_x1047" ]
  %16535 = mul nsw i32 %.pre-phi3490, %a400
  %t17221055 = sub nsw i32 %16535, %t1645811
  br i1 %294, label %"for blur_y.s0.x.x.rebased1059.preheader", label %"end for blur_y.s0.x.x.rebased1060", !prof !386

"for blur_y.s0.x.x.rebased1059.preheader":        ; preds = %after_bb1044
  %16536 = sext i32 %t17221055 to i64
  %16537 = zext i32 %.pre-phi3476 to i64
  %16538 = mul nsw i64 %16537, %306
  %16539 = sub nsw i64 %16538, %290
  %16540 = zext i32 %.pre-phi3472 to i64
  %16541 = mul nsw i64 %16540, %306
  %16542 = sub nsw i64 %16541, %290
  %16543 = zext i32 %.pre-phi3480 to i64
  %16544 = mul nsw i64 %16543, %306
  %16545 = sub nsw i64 %16544, %290
  %16546 = zext i32 %.pre-phi3490 to i64
  %16547 = mul nsw i64 %16546, %306
  %16548 = sub nsw i64 %16547, %290
  %16549 = zext i32 %.pre-phi3484 to i64
  %16550 = mul nsw i64 %16549, %306
  %16551 = sub nsw i64 %16550, %290
  %16552 = sext i32 %a353 to i64
  %16553 = add nsw i64 %16552, 1
  %16554 = mul nsw i64 %16553, %307
  %16555 = add nsw i64 %16554, %310
  br label %"for blur_y.s0.x.x.rebased1059"

"produce blur_x1047":                             ; preds = %"end for blur_y.s0.x.x.rebased1034"
  %16556 = getelementptr inbounds i16, i16* %read_input822, i64 %311
  %16557 = getelementptr inbounds i16, i16* %16556, i64 -31
  %16558 = bitcast i16* %16557 to <16 x i16>*
  %16559 = load <16 x i16>, <16 x i16>* %16558, align 2, !tbaa !396
  %16560 = getelementptr inbounds i16, i16* %16556, i64 -15
  %16561 = bitcast i16* %16560 to <16 x i16>*
  %16562 = load <16 x i16>, <16 x i16>* %16561, align 2, !tbaa !396
  %16563 = getelementptr inbounds i16, i16* %16556, i64 -32
  %16564 = bitcast i16* %16563 to <16 x i16>*
  %16565 = load <16 x i16>, <16 x i16>* %16564, align 2, !tbaa !396
  %16566 = getelementptr inbounds i16, i16* %16556, i64 -16
  %16567 = bitcast i16* %16566 to <16 x i16>*
  %16568 = load <16 x i16>, <16 x i16>* %16567, align 2, !tbaa !396
  %16569 = getelementptr inbounds i16, i16* %16556, i64 -30
  %16570 = bitcast i16* %16569 to <16 x i16>*
  %16571 = load <16 x i16>, <16 x i16>* %16570, align 2, !tbaa !396
  %16572 = getelementptr inbounds i16, i16* %16556, i64 -14
  %16573 = bitcast i16* %16572 to <16 x i16>*
  %16574 = load <16 x i16>, <16 x i16>* %16573, align 2, !tbaa !396
  %16575 = getelementptr inbounds i16, i16* %16556, i64 -28
  %16576 = bitcast i16* %16575 to <16 x i16>*
  %16577 = load <16 x i16>, <16 x i16>* %16576, align 2, !tbaa !396
  %16578 = getelementptr inbounds i16, i16* %16556, i64 -12
  %16579 = bitcast i16* %16578 to <16 x i16>*
  %16580 = load <16 x i16>, <16 x i16>* %16579, align 2, !tbaa !396
  %16581 = getelementptr inbounds i16, i16* %16556, i64 -29
  %16582 = bitcast i16* %16581 to <16 x i16>*
  %16583 = load <16 x i16>, <16 x i16>* %16582, align 2, !tbaa !396
  %16584 = getelementptr inbounds i16, i16* %16556, i64 -13
  %16585 = bitcast i16* %16584 to <16 x i16>*
  %16586 = load <16 x i16>, <16 x i16>* %16585, align 2, !tbaa !396
  %16587 = add <16 x i16> %16565, %16559
  %16588 = add <16 x i16> %16587, %16571
  %16589 = add <16 x i16> %16588, %16577
  %16590 = add <16 x i16> %16589, %16583
  %16591 = add <16 x i16> %16568, %16562
  %16592 = add <16 x i16> %16591, %16574
  %16593 = add <16 x i16> %16592, %16580
  %16594 = add <16 x i16> %16593, %16586
  %16595 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16590, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16596 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16594, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16597 = shufflevector <16 x i16> %16595, <16 x i16> %16596, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16598 = lshr <32 x i16> %16597, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16599 = shufflevector <32 x i16> %16598, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16600 = add nsw i32 %a353, 5
  %16601 = and i32 %16600, 7
  %16602 = zext i32 %16601 to i64
  %16603 = mul nsw i64 %291, %16602
  %16604 = add nsw i64 %293, %16603
  %16605 = getelementptr inbounds i16, i16* %blur_x879, i64 %16604
  %16606 = getelementptr inbounds i16, i16* %16605, i64 -32
  %16607 = bitcast i16* %16606 to <16 x i16>*
  store <16 x i16> %16599, <16 x i16>* %16607, align 2, !tbaa !399
  %16608 = shufflevector <32 x i16> %16598, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16609 = getelementptr inbounds i16, i16* %16605, i64 -16
  %16610 = bitcast i16* %16609 to <16 x i16>*
  store <16 x i16> %16608, <16 x i16>* %16610, align 2, !tbaa !399
  %16611 = zext i32 %.pre-phi3476 to i64
  %16612 = mul nsw i64 %16611, %306
  %16613 = add nsw i64 %16612, %288
  %16614 = getelementptr inbounds i16, i16* %blur_x879, i64 %16613
  %16615 = getelementptr inbounds i16, i16* %16614, i64 -32
  %16616 = bitcast i16* %16615 to <16 x i16>*
  %16617 = load <16 x i16>, <16 x i16>* %16616, align 2, !tbaa !399
  %16618 = getelementptr inbounds i16, i16* %16614, i64 -16
  %16619 = bitcast i16* %16618 to <16 x i16>*
  %16620 = load <16 x i16>, <16 x i16>* %16619, align 2, !tbaa !399
  %16621 = zext i32 %.pre-phi3472 to i64
  %16622 = mul nsw i64 %16621, %306
  %16623 = add nsw i64 %16622, %288
  %16624 = getelementptr inbounds i16, i16* %blur_x879, i64 %16623
  %16625 = getelementptr inbounds i16, i16* %16624, i64 -32
  %16626 = bitcast i16* %16625 to <16 x i16>*
  %16627 = load <16 x i16>, <16 x i16>* %16626, align 2, !tbaa !399
  %16628 = getelementptr inbounds i16, i16* %16624, i64 -16
  %16629 = bitcast i16* %16628 to <16 x i16>*
  %16630 = load <16 x i16>, <16 x i16>* %16629, align 2, !tbaa !399
  %16631 = zext i32 %.pre-phi3480 to i64
  %16632 = mul nsw i64 %16631, %306
  %16633 = add nsw i64 %16632, %288
  %16634 = getelementptr inbounds i16, i16* %blur_x879, i64 %16633
  %16635 = getelementptr inbounds i16, i16* %16634, i64 -32
  %16636 = bitcast i16* %16635 to <16 x i16>*
  %16637 = load <16 x i16>, <16 x i16>* %16636, align 2, !tbaa !399
  %16638 = getelementptr inbounds i16, i16* %16634, i64 -16
  %16639 = bitcast i16* %16638 to <16 x i16>*
  %16640 = load <16 x i16>, <16 x i16>* %16639, align 2, !tbaa !399
  %16641 = mul nsw i64 %16602, %306
  %16642 = add nsw i64 %16641, %288
  %16643 = getelementptr inbounds i16, i16* %blur_x879, i64 %16642
  %16644 = getelementptr inbounds i16, i16* %16643, i64 -32
  %16645 = bitcast i16* %16644 to <16 x i16>*
  %16646 = load <16 x i16>, <16 x i16>* %16645, align 2, !tbaa !399
  %16647 = getelementptr inbounds i16, i16* %16643, i64 -16
  %16648 = bitcast i16* %16647 to <16 x i16>*
  %16649 = load <16 x i16>, <16 x i16>* %16648, align 2, !tbaa !399
  %16650 = zext i32 %.pre-phi3484 to i64
  %16651 = mul nsw i64 %16650, %306
  %16652 = add nsw i64 %16651, %288
  %16653 = getelementptr inbounds i16, i16* %blur_x879, i64 %16652
  %16654 = getelementptr inbounds i16, i16* %16653, i64 -32
  %16655 = bitcast i16* %16654 to <16 x i16>*
  %16656 = load <16 x i16>, <16 x i16>* %16655, align 2, !tbaa !399
  %16657 = getelementptr inbounds i16, i16* %16653, i64 -16
  %16658 = bitcast i16* %16657 to <16 x i16>*
  %16659 = load <16 x i16>, <16 x i16>* %16658, align 2, !tbaa !399
  %16660 = add <16 x i16> %16627, %16617
  %16661 = add <16 x i16> %16660, %16637
  %16662 = add <16 x i16> %16661, %16646
  %16663 = add <16 x i16> %16662, %16656
  %16664 = add <16 x i16> %16630, %16620
  %16665 = add <16 x i16> %16664, %16640
  %16666 = add <16 x i16> %16665, %16649
  %16667 = add <16 x i16> %16666, %16659
  %16668 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16663, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16669 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16667, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16670 = shufflevector <16 x i16> %16668, <16 x i16> %16669, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16671 = lshr <32 x i16> %16670, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16672 = shufflevector <32 x i16> %16671, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16673 = sext i32 %a353 to i64
  %16674 = add nsw i64 %16673, 1
  %16675 = mul nsw i64 %16674, %307
  %16676 = add nsw i64 %309, %16675
  %16677 = getelementptr inbounds i16, i16* %260, i64 %16676
  %16678 = getelementptr inbounds i16, i16* %16677, i64 -32
  %16679 = bitcast i16* %16678 to <16 x i16>*
  store <16 x i16> %16672, <16 x i16>* %16679, align 2, !tbaa !401
  %16680 = shufflevector <32 x i16> %16671, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16681 = getelementptr inbounds i16, i16* %16677, i64 -16
  %16682 = bitcast i16* %16681 to <16 x i16>*
  store <16 x i16> %16680, <16 x i16>* %16682, align 2, !tbaa !401
  br label %after_bb1044

"for blur_y.s0.x.x.rebased1059":                  ; preds = %"for blur_y.s0.x.x.rebased1059.preheader", %"consume blur_x1068"
  %indvars.iv3278 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1059.preheader" ], [ %indvars.iv.next3279, %"consume blur_x1068" ]
  %16683 = add nsw i64 %indvars.iv3278, %295
  %16684 = icmp slt i64 %16683, 1
  %16685 = trunc i64 %16683 to i32
  %16686 = shl nsw i32 %16685, 5
  %16687 = icmp sgt i32 %198, %16686
  %16688 = or i1 %16684, %16687
  br i1 %16688, label %"produce blur_x1066", label %"for blur_y.s0.x.x.rebased1059.consume blur_x1068_crit_edge"

"for blur_y.s0.x.x.rebased1059.consume blur_x1068_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1059"
  %.pre3491 = shl nsw i64 %16683, 5
  br label %"consume blur_x1068"

"end for blur_y.s0.x.x.rebased1060":              ; preds = %"consume blur_x1068", %after_bb1044
  br i1 %296, label %"for blur_y.s0.x.x.rebased1076.preheader", label %"end for blur_y.s0.x.x.rebased1077", !prof !386

"for blur_y.s0.x.x.rebased1076.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1060"
  %16689 = sext i32 %t17221055 to i64
  %16690 = zext i32 %.pre-phi3476 to i64
  %16691 = mul nsw i64 %16690, %306
  %16692 = sub nsw i64 %16691, %290
  %16693 = zext i32 %.pre-phi3472 to i64
  %16694 = mul nsw i64 %16693, %306
  %16695 = sub nsw i64 %16694, %290
  %16696 = zext i32 %.pre-phi3480 to i64
  %16697 = mul nsw i64 %16696, %306
  %16698 = sub nsw i64 %16697, %290
  %16699 = zext i32 %.pre-phi3490 to i64
  %16700 = mul nsw i64 %16699, %306
  %16701 = sub nsw i64 %16700, %290
  %16702 = zext i32 %.pre-phi3484 to i64
  %16703 = mul nsw i64 %16702, %306
  %16704 = sub nsw i64 %16703, %290
  %16705 = sext i32 %a353 to i64
  %16706 = add nsw i64 %16705, 1
  %16707 = mul nsw i64 %16706, %307
  %16708 = add nsw i64 %16707, %310
  br label %"for blur_y.s0.x.x.rebased1076"

"produce blur_x1066":                             ; preds = %"for blur_y.s0.x.x.rebased1059"
  %t7281067 = add nsw i32 %16686, %t17211058
  %16709 = sext i32 %t7281067 to i64
  %16710 = getelementptr inbounds i16, i16* %read_input822, i64 %16709
  %16711 = getelementptr inbounds i16, i16* %16710, i64 1
  %16712 = bitcast i16* %16711 to <16 x i16>*
  %16713 = load <16 x i16>, <16 x i16>* %16712, align 2, !tbaa !396
  %16714 = getelementptr inbounds i16, i16* %16710, i64 17
  %16715 = bitcast i16* %16714 to <16 x i16>*
  %16716 = load <16 x i16>, <16 x i16>* %16715, align 2, !tbaa !396
  %16717 = bitcast i16* %16710 to <16 x i16>*
  %16718 = load <16 x i16>, <16 x i16>* %16717, align 2, !tbaa !396
  %16719 = getelementptr inbounds i16, i16* %16710, i64 16
  %16720 = bitcast i16* %16719 to <16 x i16>*
  %16721 = load <16 x i16>, <16 x i16>* %16720, align 2, !tbaa !396
  %16722 = getelementptr inbounds i16, i16* %16710, i64 2
  %16723 = bitcast i16* %16722 to <16 x i16>*
  %16724 = load <16 x i16>, <16 x i16>* %16723, align 2, !tbaa !396
  %16725 = getelementptr inbounds i16, i16* %16710, i64 18
  %16726 = bitcast i16* %16725 to <16 x i16>*
  %16727 = load <16 x i16>, <16 x i16>* %16726, align 2, !tbaa !396
  %16728 = getelementptr inbounds i16, i16* %16710, i64 4
  %16729 = bitcast i16* %16728 to <16 x i16>*
  %16730 = load <16 x i16>, <16 x i16>* %16729, align 2, !tbaa !396
  %16731 = getelementptr inbounds i16, i16* %16710, i64 20
  %16732 = bitcast i16* %16731 to <16 x i16>*
  %16733 = load <16 x i16>, <16 x i16>* %16732, align 2, !tbaa !396
  %16734 = getelementptr inbounds i16, i16* %16710, i64 3
  %16735 = bitcast i16* %16734 to <16 x i16>*
  %16736 = load <16 x i16>, <16 x i16>* %16735, align 2, !tbaa !396
  %16737 = getelementptr inbounds i16, i16* %16710, i64 19
  %16738 = bitcast i16* %16737 to <16 x i16>*
  %16739 = load <16 x i16>, <16 x i16>* %16738, align 2, !tbaa !396
  %16740 = add <16 x i16> %16718, %16713
  %16741 = add <16 x i16> %16740, %16724
  %16742 = add <16 x i16> %16741, %16730
  %16743 = add <16 x i16> %16742, %16736
  %16744 = add <16 x i16> %16721, %16716
  %16745 = add <16 x i16> %16744, %16727
  %16746 = add <16 x i16> %16745, %16733
  %16747 = add <16 x i16> %16746, %16739
  %16748 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16743, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16749 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16747, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16750 = shufflevector <16 x i16> %16748, <16 x i16> %16749, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16751 = lshr <32 x i16> %16750, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16752 = shufflevector <32 x i16> %16751, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16753 = shl nsw i64 %16683, 5
  %16754 = add nsw i64 %16753, %16536
  %16755 = getelementptr inbounds i16, i16* %blur_x879, i64 %16754
  %16756 = bitcast i16* %16755 to <16 x i16>*
  store <16 x i16> %16752, <16 x i16>* %16756, align 2, !tbaa !399
  %16757 = shufflevector <32 x i16> %16751, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16758 = getelementptr inbounds i16, i16* %16755, i64 16
  %16759 = bitcast i16* %16758 to <16 x i16>*
  store <16 x i16> %16757, <16 x i16>* %16759, align 2, !tbaa !399
  br label %"consume blur_x1068"

"consume blur_x1068":                             ; preds = %"for blur_y.s0.x.x.rebased1059.consume blur_x1068_crit_edge", %"produce blur_x1066"
  %.pre-phi3492 = phi i64 [ %.pre3491, %"for blur_y.s0.x.x.rebased1059.consume blur_x1068_crit_edge" ], [ %16753, %"produce blur_x1066" ]
  %16760 = add nsw i64 %16539, %.pre-phi3492
  %16761 = getelementptr inbounds i16, i16* %blur_x879, i64 %16760
  %16762 = bitcast i16* %16761 to <16 x i16>*
  %16763 = load <16 x i16>, <16 x i16>* %16762, align 2, !tbaa !399
  %16764 = getelementptr inbounds i16, i16* %16761, i64 16
  %16765 = bitcast i16* %16764 to <16 x i16>*
  %16766 = load <16 x i16>, <16 x i16>* %16765, align 2, !tbaa !399
  %16767 = add nsw i64 %16542, %.pre-phi3492
  %16768 = getelementptr inbounds i16, i16* %blur_x879, i64 %16767
  %16769 = bitcast i16* %16768 to <16 x i16>*
  %16770 = load <16 x i16>, <16 x i16>* %16769, align 2, !tbaa !399
  %16771 = getelementptr inbounds i16, i16* %16768, i64 16
  %16772 = bitcast i16* %16771 to <16 x i16>*
  %16773 = load <16 x i16>, <16 x i16>* %16772, align 2, !tbaa !399
  %16774 = add nsw i64 %16545, %.pre-phi3492
  %16775 = getelementptr inbounds i16, i16* %blur_x879, i64 %16774
  %16776 = bitcast i16* %16775 to <16 x i16>*
  %16777 = load <16 x i16>, <16 x i16>* %16776, align 2, !tbaa !399
  %16778 = getelementptr inbounds i16, i16* %16775, i64 16
  %16779 = bitcast i16* %16778 to <16 x i16>*
  %16780 = load <16 x i16>, <16 x i16>* %16779, align 2, !tbaa !399
  %16781 = add nsw i64 %16548, %.pre-phi3492
  %16782 = getelementptr inbounds i16, i16* %blur_x879, i64 %16781
  %16783 = bitcast i16* %16782 to <16 x i16>*
  %16784 = load <16 x i16>, <16 x i16>* %16783, align 2, !tbaa !399
  %16785 = getelementptr inbounds i16, i16* %16782, i64 16
  %16786 = bitcast i16* %16785 to <16 x i16>*
  %16787 = load <16 x i16>, <16 x i16>* %16786, align 2, !tbaa !399
  %16788 = add nsw i64 %16551, %.pre-phi3492
  %16789 = getelementptr inbounds i16, i16* %blur_x879, i64 %16788
  %16790 = bitcast i16* %16789 to <16 x i16>*
  %16791 = load <16 x i16>, <16 x i16>* %16790, align 2, !tbaa !399
  %16792 = getelementptr inbounds i16, i16* %16789, i64 16
  %16793 = bitcast i16* %16792 to <16 x i16>*
  %16794 = load <16 x i16>, <16 x i16>* %16793, align 2, !tbaa !399
  %16795 = add <16 x i16> %16770, %16763
  %16796 = add <16 x i16> %16795, %16777
  %16797 = add <16 x i16> %16796, %16784
  %16798 = add <16 x i16> %16797, %16791
  %16799 = add <16 x i16> %16773, %16766
  %16800 = add <16 x i16> %16799, %16780
  %16801 = add <16 x i16> %16800, %16787
  %16802 = add <16 x i16> %16801, %16794
  %16803 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16798, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16804 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16802, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16805 = shufflevector <16 x i16> %16803, <16 x i16> %16804, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16806 = lshr <32 x i16> %16805, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16807 = shufflevector <32 x i16> %16806, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16808 = add nsw i64 %16555, %.pre-phi3492
  %16809 = getelementptr inbounds i16, i16* %260, i64 %16808
  %16810 = bitcast i16* %16809 to <16 x i16>*
  store <16 x i16> %16807, <16 x i16>* %16810, align 2, !tbaa !401
  %16811 = shufflevector <32 x i16> %16806, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16812 = getelementptr inbounds i16, i16* %16809, i64 16
  %16813 = bitcast i16* %16812 to <16 x i16>*
  store <16 x i16> %16811, <16 x i16>* %16813, align 2, !tbaa !401
  %indvars.iv.next3279 = add nuw nsw i64 %indvars.iv3278, 1
  %.not2602 = icmp eq i64 %indvars.iv.next3279, %378
  br i1 %.not2602, label %"end for blur_y.s0.x.x.rebased1060", label %"for blur_y.s0.x.x.rebased1059"

"for blur_y.s0.x.x.rebased1076":                  ; preds = %"for blur_y.s0.x.x.rebased1076.preheader", %"consume blur_x1086"
  %blur_y.s0.x.x.rebased1078 = phi i32 [ %16926, %"consume blur_x1086" ], [ 0, %"for blur_y.s0.x.x.rebased1076.preheader" ]
  %16814 = add nsw i32 %blur_y.s0.x.x.rebased1078, %t1626814
  %a439 = shl nsw i32 %16814, 5
  %16815 = icmp sgt i32 %a341, %a439
  %b445 = select i1 %16815, i32 %a439, i32 %a341
  %16816 = icmp slt i32 %16814, 1
  %16817 = icmp sgt i32 %198, %a439
  %16818 = or i1 %16816, %16817
  br i1 %16818, label %"produce blur_x1083", label %"consume blur_x1086"

"end for blur_y.s0.x.x.rebased1077":              ; preds = %"consume blur_x1086", %"end for blur_y.s0.x.x.rebased1060"
  br i1 %228, label %"produce blur_x1090", label %"end for blur_y.s0.x.x.rebased1077.after_bb1087_crit_edge"

"end for blur_y.s0.x.x.rebased1077.after_bb1087_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased1077"
  %.pre3493 = add nsw i32 %a353, 6
  %.pre3495 = and i32 %.pre3493, 7
  br label %after_bb1087

"produce blur_x1083":                             ; preds = %"for blur_y.s0.x.x.rebased1076"
  %16819 = icmp slt i32 %b445, %198
  %blur_x.s0.x.v1.base.s1084 = select i1 %16819, i32 %b445, i32 %198
  %t7331085 = add nsw i32 %blur_x.s0.x.v1.base.s1084, %t17211058
  %16820 = sext i32 %t7331085 to i64
  %16821 = getelementptr inbounds i16, i16* %read_input822, i64 %16820
  %16822 = getelementptr inbounds i16, i16* %16821, i64 1
  %16823 = bitcast i16* %16822 to <16 x i16>*
  %16824 = load <16 x i16>, <16 x i16>* %16823, align 2, !tbaa !396
  %16825 = getelementptr inbounds i16, i16* %16821, i64 17
  %16826 = bitcast i16* %16825 to <16 x i16>*
  %16827 = load <16 x i16>, <16 x i16>* %16826, align 2, !tbaa !396
  %16828 = bitcast i16* %16821 to <16 x i16>*
  %16829 = load <16 x i16>, <16 x i16>* %16828, align 2, !tbaa !396
  %16830 = getelementptr inbounds i16, i16* %16821, i64 16
  %16831 = bitcast i16* %16830 to <16 x i16>*
  %16832 = load <16 x i16>, <16 x i16>* %16831, align 2, !tbaa !396
  %16833 = getelementptr inbounds i16, i16* %16821, i64 2
  %16834 = bitcast i16* %16833 to <16 x i16>*
  %16835 = load <16 x i16>, <16 x i16>* %16834, align 2, !tbaa !396
  %16836 = getelementptr inbounds i16, i16* %16821, i64 18
  %16837 = bitcast i16* %16836 to <16 x i16>*
  %16838 = load <16 x i16>, <16 x i16>* %16837, align 2, !tbaa !396
  %16839 = getelementptr inbounds i16, i16* %16821, i64 4
  %16840 = bitcast i16* %16839 to <16 x i16>*
  %16841 = load <16 x i16>, <16 x i16>* %16840, align 2, !tbaa !396
  %16842 = getelementptr inbounds i16, i16* %16821, i64 20
  %16843 = bitcast i16* %16842 to <16 x i16>*
  %16844 = load <16 x i16>, <16 x i16>* %16843, align 2, !tbaa !396
  %16845 = getelementptr inbounds i16, i16* %16821, i64 3
  %16846 = bitcast i16* %16845 to <16 x i16>*
  %16847 = load <16 x i16>, <16 x i16>* %16846, align 2, !tbaa !396
  %16848 = getelementptr inbounds i16, i16* %16821, i64 19
  %16849 = bitcast i16* %16848 to <16 x i16>*
  %16850 = load <16 x i16>, <16 x i16>* %16849, align 2, !tbaa !396
  %16851 = add <16 x i16> %16829, %16824
  %16852 = add <16 x i16> %16851, %16835
  %16853 = add <16 x i16> %16852, %16841
  %16854 = add <16 x i16> %16853, %16847
  %16855 = add <16 x i16> %16832, %16827
  %16856 = add <16 x i16> %16855, %16838
  %16857 = add <16 x i16> %16856, %16844
  %16858 = add <16 x i16> %16857, %16850
  %16859 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16854, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16860 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16858, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16861 = shufflevector <16 x i16> %16859, <16 x i16> %16860, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16862 = lshr <32 x i16> %16861, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16863 = shufflevector <32 x i16> %16862, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16864 = sext i32 %blur_x.s0.x.v1.base.s1084 to i64
  %16865 = add nsw i64 %16864, %16689
  %16866 = getelementptr inbounds i16, i16* %blur_x879, i64 %16865
  %16867 = bitcast i16* %16866 to <16 x i16>*
  store <16 x i16> %16863, <16 x i16>* %16867, align 2, !tbaa !399
  %16868 = shufflevector <32 x i16> %16862, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16869 = getelementptr inbounds i16, i16* %16866, i64 16
  %16870 = bitcast i16* %16869 to <16 x i16>*
  store <16 x i16> %16868, <16 x i16>* %16870, align 2, !tbaa !399
  br label %"consume blur_x1086"

"consume blur_x1086":                             ; preds = %"for blur_y.s0.x.x.rebased1076", %"produce blur_x1083"
  %16871 = sext i32 %b445 to i64
  %16872 = add nsw i64 %16692, %16871
  %16873 = getelementptr inbounds i16, i16* %blur_x879, i64 %16872
  %16874 = bitcast i16* %16873 to <16 x i16>*
  %16875 = load <16 x i16>, <16 x i16>* %16874, align 2, !tbaa !399
  %16876 = getelementptr inbounds i16, i16* %16873, i64 16
  %16877 = bitcast i16* %16876 to <16 x i16>*
  %16878 = load <16 x i16>, <16 x i16>* %16877, align 2, !tbaa !399
  %16879 = add nsw i64 %16695, %16871
  %16880 = getelementptr inbounds i16, i16* %blur_x879, i64 %16879
  %16881 = bitcast i16* %16880 to <16 x i16>*
  %16882 = load <16 x i16>, <16 x i16>* %16881, align 2, !tbaa !399
  %16883 = getelementptr inbounds i16, i16* %16880, i64 16
  %16884 = bitcast i16* %16883 to <16 x i16>*
  %16885 = load <16 x i16>, <16 x i16>* %16884, align 2, !tbaa !399
  %16886 = add nsw i64 %16698, %16871
  %16887 = getelementptr inbounds i16, i16* %blur_x879, i64 %16886
  %16888 = bitcast i16* %16887 to <16 x i16>*
  %16889 = load <16 x i16>, <16 x i16>* %16888, align 2, !tbaa !399
  %16890 = getelementptr inbounds i16, i16* %16887, i64 16
  %16891 = bitcast i16* %16890 to <16 x i16>*
  %16892 = load <16 x i16>, <16 x i16>* %16891, align 2, !tbaa !399
  %16893 = add nsw i64 %16701, %16871
  %16894 = getelementptr inbounds i16, i16* %blur_x879, i64 %16893
  %16895 = bitcast i16* %16894 to <16 x i16>*
  %16896 = load <16 x i16>, <16 x i16>* %16895, align 2, !tbaa !399
  %16897 = getelementptr inbounds i16, i16* %16894, i64 16
  %16898 = bitcast i16* %16897 to <16 x i16>*
  %16899 = load <16 x i16>, <16 x i16>* %16898, align 2, !tbaa !399
  %16900 = add nsw i64 %16704, %16871
  %16901 = getelementptr inbounds i16, i16* %blur_x879, i64 %16900
  %16902 = bitcast i16* %16901 to <16 x i16>*
  %16903 = load <16 x i16>, <16 x i16>* %16902, align 2, !tbaa !399
  %16904 = getelementptr inbounds i16, i16* %16901, i64 16
  %16905 = bitcast i16* %16904 to <16 x i16>*
  %16906 = load <16 x i16>, <16 x i16>* %16905, align 2, !tbaa !399
  %16907 = add <16 x i16> %16882, %16875
  %16908 = add <16 x i16> %16907, %16889
  %16909 = add <16 x i16> %16908, %16896
  %16910 = add <16 x i16> %16909, %16903
  %16911 = add <16 x i16> %16885, %16878
  %16912 = add <16 x i16> %16911, %16892
  %16913 = add <16 x i16> %16912, %16899
  %16914 = add <16 x i16> %16913, %16906
  %16915 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16910, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16916 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16914, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16917 = shufflevector <16 x i16> %16915, <16 x i16> %16916, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16918 = lshr <32 x i16> %16917, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16919 = shufflevector <32 x i16> %16918, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16920 = add nsw i64 %16708, %16871
  %16921 = getelementptr inbounds i16, i16* %260, i64 %16920
  %16922 = bitcast i16* %16921 to <16 x i16>*
  store <16 x i16> %16919, <16 x i16>* %16922, align 2, !tbaa !401
  %16923 = shufflevector <32 x i16> %16918, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16924 = getelementptr inbounds i16, i16* %16921, i64 16
  %16925 = bitcast i16* %16924 to <16 x i16>*
  store <16 x i16> %16923, <16 x i16>* %16925, align 2, !tbaa !401
  %16926 = add nuw nsw i32 %blur_y.s0.x.x.rebased1078, 1
  %.not2601 = icmp eq i32 %16926, %t1683899
  br i1 %.not2601, label %"end for blur_y.s0.x.x.rebased1077", label %"for blur_y.s0.x.x.rebased1076"

after_bb1087:                                     ; preds = %"end for blur_y.s0.x.x.rebased1077.after_bb1087_crit_edge", %"produce blur_x1090"
  %.pre-phi3496 = phi i32 [ %.pre3495, %"end for blur_y.s0.x.x.rebased1077.after_bb1087_crit_edge" ], [ %16993, %"produce blur_x1090" ]
  %16927 = mul nsw i32 %.pre-phi3496, %a400
  %t17381098 = sub nsw i32 %16927, %t1645811
  br i1 %294, label %"for blur_y.s0.x.x.rebased1102.preheader", label %"end for blur_y.s0.x.x.rebased1103", !prof !386

"for blur_y.s0.x.x.rebased1102.preheader":        ; preds = %after_bb1087
  %16928 = sext i32 %t17381098 to i64
  %16929 = zext i32 %.pre-phi3480 to i64
  %16930 = mul nsw i64 %16929, %306
  %16931 = sub nsw i64 %16930, %290
  %16932 = zext i32 %.pre-phi3476 to i64
  %16933 = mul nsw i64 %16932, %306
  %16934 = sub nsw i64 %16933, %290
  %16935 = zext i32 %.pre-phi3484 to i64
  %16936 = mul nsw i64 %16935, %306
  %16937 = sub nsw i64 %16936, %290
  %16938 = zext i32 %.pre-phi3496 to i64
  %16939 = mul nsw i64 %16938, %306
  %16940 = sub nsw i64 %16939, %290
  %16941 = zext i32 %.pre-phi3490 to i64
  %16942 = mul nsw i64 %16941, %306
  %16943 = sub nsw i64 %16942, %290
  %16944 = sext i32 %a353 to i64
  %16945 = add nsw i64 %16944, 2
  %16946 = mul nsw i64 %16945, %307
  %16947 = add nsw i64 %16946, %310
  br label %"for blur_y.s0.x.x.rebased1102"

"produce blur_x1090":                             ; preds = %"end for blur_y.s0.x.x.rebased1077"
  %16948 = getelementptr inbounds i16, i16* %read_input822, i64 %313
  %16949 = getelementptr inbounds i16, i16* %16948, i64 -31
  %16950 = bitcast i16* %16949 to <16 x i16>*
  %16951 = load <16 x i16>, <16 x i16>* %16950, align 2, !tbaa !396
  %16952 = getelementptr inbounds i16, i16* %16948, i64 -15
  %16953 = bitcast i16* %16952 to <16 x i16>*
  %16954 = load <16 x i16>, <16 x i16>* %16953, align 2, !tbaa !396
  %16955 = getelementptr inbounds i16, i16* %16948, i64 -32
  %16956 = bitcast i16* %16955 to <16 x i16>*
  %16957 = load <16 x i16>, <16 x i16>* %16956, align 2, !tbaa !396
  %16958 = getelementptr inbounds i16, i16* %16948, i64 -16
  %16959 = bitcast i16* %16958 to <16 x i16>*
  %16960 = load <16 x i16>, <16 x i16>* %16959, align 2, !tbaa !396
  %16961 = getelementptr inbounds i16, i16* %16948, i64 -30
  %16962 = bitcast i16* %16961 to <16 x i16>*
  %16963 = load <16 x i16>, <16 x i16>* %16962, align 2, !tbaa !396
  %16964 = getelementptr inbounds i16, i16* %16948, i64 -14
  %16965 = bitcast i16* %16964 to <16 x i16>*
  %16966 = load <16 x i16>, <16 x i16>* %16965, align 2, !tbaa !396
  %16967 = getelementptr inbounds i16, i16* %16948, i64 -28
  %16968 = bitcast i16* %16967 to <16 x i16>*
  %16969 = load <16 x i16>, <16 x i16>* %16968, align 2, !tbaa !396
  %16970 = getelementptr inbounds i16, i16* %16948, i64 -12
  %16971 = bitcast i16* %16970 to <16 x i16>*
  %16972 = load <16 x i16>, <16 x i16>* %16971, align 2, !tbaa !396
  %16973 = getelementptr inbounds i16, i16* %16948, i64 -29
  %16974 = bitcast i16* %16973 to <16 x i16>*
  %16975 = load <16 x i16>, <16 x i16>* %16974, align 2, !tbaa !396
  %16976 = getelementptr inbounds i16, i16* %16948, i64 -13
  %16977 = bitcast i16* %16976 to <16 x i16>*
  %16978 = load <16 x i16>, <16 x i16>* %16977, align 2, !tbaa !396
  %16979 = add <16 x i16> %16957, %16951
  %16980 = add <16 x i16> %16979, %16963
  %16981 = add <16 x i16> %16980, %16969
  %16982 = add <16 x i16> %16981, %16975
  %16983 = add <16 x i16> %16960, %16954
  %16984 = add <16 x i16> %16983, %16966
  %16985 = add <16 x i16> %16984, %16972
  %16986 = add <16 x i16> %16985, %16978
  %16987 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16982, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16988 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16986, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %16989 = shufflevector <16 x i16> %16987, <16 x i16> %16988, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16990 = lshr <32 x i16> %16989, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %16991 = shufflevector <32 x i16> %16990, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16992 = add nsw i32 %a353, 6
  %16993 = and i32 %16992, 7
  %16994 = zext i32 %16993 to i64
  %16995 = mul nsw i64 %291, %16994
  %16996 = add nsw i64 %293, %16995
  %16997 = getelementptr inbounds i16, i16* %blur_x879, i64 %16996
  %16998 = getelementptr inbounds i16, i16* %16997, i64 -32
  %16999 = bitcast i16* %16998 to <16 x i16>*
  store <16 x i16> %16991, <16 x i16>* %16999, align 2, !tbaa !399
  %17000 = shufflevector <32 x i16> %16990, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17001 = getelementptr inbounds i16, i16* %16997, i64 -16
  %17002 = bitcast i16* %17001 to <16 x i16>*
  store <16 x i16> %17000, <16 x i16>* %17002, align 2, !tbaa !399
  %17003 = zext i32 %.pre-phi3480 to i64
  %17004 = mul nsw i64 %17003, %306
  %17005 = add nsw i64 %17004, %288
  %17006 = getelementptr inbounds i16, i16* %blur_x879, i64 %17005
  %17007 = getelementptr inbounds i16, i16* %17006, i64 -32
  %17008 = bitcast i16* %17007 to <16 x i16>*
  %17009 = load <16 x i16>, <16 x i16>* %17008, align 2, !tbaa !399
  %17010 = getelementptr inbounds i16, i16* %17006, i64 -16
  %17011 = bitcast i16* %17010 to <16 x i16>*
  %17012 = load <16 x i16>, <16 x i16>* %17011, align 2, !tbaa !399
  %17013 = zext i32 %.pre-phi3476 to i64
  %17014 = mul nsw i64 %17013, %306
  %17015 = add nsw i64 %17014, %288
  %17016 = getelementptr inbounds i16, i16* %blur_x879, i64 %17015
  %17017 = getelementptr inbounds i16, i16* %17016, i64 -32
  %17018 = bitcast i16* %17017 to <16 x i16>*
  %17019 = load <16 x i16>, <16 x i16>* %17018, align 2, !tbaa !399
  %17020 = getelementptr inbounds i16, i16* %17016, i64 -16
  %17021 = bitcast i16* %17020 to <16 x i16>*
  %17022 = load <16 x i16>, <16 x i16>* %17021, align 2, !tbaa !399
  %17023 = zext i32 %.pre-phi3484 to i64
  %17024 = mul nsw i64 %17023, %306
  %17025 = add nsw i64 %17024, %288
  %17026 = getelementptr inbounds i16, i16* %blur_x879, i64 %17025
  %17027 = getelementptr inbounds i16, i16* %17026, i64 -32
  %17028 = bitcast i16* %17027 to <16 x i16>*
  %17029 = load <16 x i16>, <16 x i16>* %17028, align 2, !tbaa !399
  %17030 = getelementptr inbounds i16, i16* %17026, i64 -16
  %17031 = bitcast i16* %17030 to <16 x i16>*
  %17032 = load <16 x i16>, <16 x i16>* %17031, align 2, !tbaa !399
  %17033 = mul nsw i64 %16994, %306
  %17034 = add nsw i64 %17033, %288
  %17035 = getelementptr inbounds i16, i16* %blur_x879, i64 %17034
  %17036 = getelementptr inbounds i16, i16* %17035, i64 -32
  %17037 = bitcast i16* %17036 to <16 x i16>*
  %17038 = load <16 x i16>, <16 x i16>* %17037, align 2, !tbaa !399
  %17039 = getelementptr inbounds i16, i16* %17035, i64 -16
  %17040 = bitcast i16* %17039 to <16 x i16>*
  %17041 = load <16 x i16>, <16 x i16>* %17040, align 2, !tbaa !399
  %17042 = zext i32 %.pre-phi3490 to i64
  %17043 = mul nsw i64 %17042, %306
  %17044 = add nsw i64 %17043, %288
  %17045 = getelementptr inbounds i16, i16* %blur_x879, i64 %17044
  %17046 = getelementptr inbounds i16, i16* %17045, i64 -32
  %17047 = bitcast i16* %17046 to <16 x i16>*
  %17048 = load <16 x i16>, <16 x i16>* %17047, align 2, !tbaa !399
  %17049 = getelementptr inbounds i16, i16* %17045, i64 -16
  %17050 = bitcast i16* %17049 to <16 x i16>*
  %17051 = load <16 x i16>, <16 x i16>* %17050, align 2, !tbaa !399
  %17052 = add <16 x i16> %17019, %17009
  %17053 = add <16 x i16> %17052, %17029
  %17054 = add <16 x i16> %17053, %17038
  %17055 = add <16 x i16> %17054, %17048
  %17056 = add <16 x i16> %17022, %17012
  %17057 = add <16 x i16> %17056, %17032
  %17058 = add <16 x i16> %17057, %17041
  %17059 = add <16 x i16> %17058, %17051
  %17060 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17055, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17061 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17059, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17062 = shufflevector <16 x i16> %17060, <16 x i16> %17061, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17063 = lshr <32 x i16> %17062, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17064 = shufflevector <32 x i16> %17063, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17065 = sext i32 %a353 to i64
  %17066 = add nsw i64 %17065, 2
  %17067 = mul nsw i64 %17066, %307
  %17068 = add nsw i64 %309, %17067
  %17069 = getelementptr inbounds i16, i16* %260, i64 %17068
  %17070 = getelementptr inbounds i16, i16* %17069, i64 -32
  %17071 = bitcast i16* %17070 to <16 x i16>*
  store <16 x i16> %17064, <16 x i16>* %17071, align 2, !tbaa !401
  %17072 = shufflevector <32 x i16> %17063, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17073 = getelementptr inbounds i16, i16* %17069, i64 -16
  %17074 = bitcast i16* %17073 to <16 x i16>*
  store <16 x i16> %17072, <16 x i16>* %17074, align 2, !tbaa !401
  br label %after_bb1087

"for blur_y.s0.x.x.rebased1102":                  ; preds = %"for blur_y.s0.x.x.rebased1102.preheader", %"consume blur_x1111"
  %indvars.iv3281 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1102.preheader" ], [ %indvars.iv.next3282, %"consume blur_x1111" ]
  %17075 = add nsw i64 %indvars.iv3281, %295
  %17076 = icmp slt i64 %17075, 1
  %17077 = trunc i64 %17075 to i32
  %17078 = shl nsw i32 %17077, 5
  %17079 = icmp sgt i32 %198, %17078
  %17080 = or i1 %17076, %17079
  br i1 %17080, label %"produce blur_x1109", label %"for blur_y.s0.x.x.rebased1102.consume blur_x1111_crit_edge"

"for blur_y.s0.x.x.rebased1102.consume blur_x1111_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1102"
  %.pre3497 = shl nsw i64 %17075, 5
  br label %"consume blur_x1111"

"end for blur_y.s0.x.x.rebased1103":              ; preds = %"consume blur_x1111", %after_bb1087
  br i1 %296, label %"for blur_y.s0.x.x.rebased1119.preheader", label %"end for blur_y.s0.x.x.rebased1120", !prof !386

"for blur_y.s0.x.x.rebased1119.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1103"
  %17081 = sext i32 %t17381098 to i64
  %17082 = zext i32 %.pre-phi3480 to i64
  %17083 = mul nsw i64 %17082, %306
  %17084 = sub nsw i64 %17083, %290
  %17085 = zext i32 %.pre-phi3476 to i64
  %17086 = mul nsw i64 %17085, %306
  %17087 = sub nsw i64 %17086, %290
  %17088 = zext i32 %.pre-phi3484 to i64
  %17089 = mul nsw i64 %17088, %306
  %17090 = sub nsw i64 %17089, %290
  %17091 = zext i32 %.pre-phi3496 to i64
  %17092 = mul nsw i64 %17091, %306
  %17093 = sub nsw i64 %17092, %290
  %17094 = zext i32 %.pre-phi3490 to i64
  %17095 = mul nsw i64 %17094, %306
  %17096 = sub nsw i64 %17095, %290
  %17097 = sext i32 %a353 to i64
  %17098 = add nsw i64 %17097, 2
  %17099 = mul nsw i64 %17098, %307
  %17100 = add nsw i64 %17099, %310
  br label %"for blur_y.s0.x.x.rebased1119"

"produce blur_x1109":                             ; preds = %"for blur_y.s0.x.x.rebased1102"
  %t7441110 = add nsw i32 %17078, %t17371099
  %17101 = sext i32 %t7441110 to i64
  %17102 = getelementptr inbounds i16, i16* %read_input822, i64 %17101
  %17103 = getelementptr inbounds i16, i16* %17102, i64 1
  %17104 = bitcast i16* %17103 to <16 x i16>*
  %17105 = load <16 x i16>, <16 x i16>* %17104, align 2, !tbaa !396
  %17106 = getelementptr inbounds i16, i16* %17102, i64 17
  %17107 = bitcast i16* %17106 to <16 x i16>*
  %17108 = load <16 x i16>, <16 x i16>* %17107, align 2, !tbaa !396
  %17109 = bitcast i16* %17102 to <16 x i16>*
  %17110 = load <16 x i16>, <16 x i16>* %17109, align 2, !tbaa !396
  %17111 = getelementptr inbounds i16, i16* %17102, i64 16
  %17112 = bitcast i16* %17111 to <16 x i16>*
  %17113 = load <16 x i16>, <16 x i16>* %17112, align 2, !tbaa !396
  %17114 = getelementptr inbounds i16, i16* %17102, i64 2
  %17115 = bitcast i16* %17114 to <16 x i16>*
  %17116 = load <16 x i16>, <16 x i16>* %17115, align 2, !tbaa !396
  %17117 = getelementptr inbounds i16, i16* %17102, i64 18
  %17118 = bitcast i16* %17117 to <16 x i16>*
  %17119 = load <16 x i16>, <16 x i16>* %17118, align 2, !tbaa !396
  %17120 = getelementptr inbounds i16, i16* %17102, i64 4
  %17121 = bitcast i16* %17120 to <16 x i16>*
  %17122 = load <16 x i16>, <16 x i16>* %17121, align 2, !tbaa !396
  %17123 = getelementptr inbounds i16, i16* %17102, i64 20
  %17124 = bitcast i16* %17123 to <16 x i16>*
  %17125 = load <16 x i16>, <16 x i16>* %17124, align 2, !tbaa !396
  %17126 = getelementptr inbounds i16, i16* %17102, i64 3
  %17127 = bitcast i16* %17126 to <16 x i16>*
  %17128 = load <16 x i16>, <16 x i16>* %17127, align 2, !tbaa !396
  %17129 = getelementptr inbounds i16, i16* %17102, i64 19
  %17130 = bitcast i16* %17129 to <16 x i16>*
  %17131 = load <16 x i16>, <16 x i16>* %17130, align 2, !tbaa !396
  %17132 = add <16 x i16> %17110, %17105
  %17133 = add <16 x i16> %17132, %17116
  %17134 = add <16 x i16> %17133, %17122
  %17135 = add <16 x i16> %17134, %17128
  %17136 = add <16 x i16> %17113, %17108
  %17137 = add <16 x i16> %17136, %17119
  %17138 = add <16 x i16> %17137, %17125
  %17139 = add <16 x i16> %17138, %17131
  %17140 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17135, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17141 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17139, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17142 = shufflevector <16 x i16> %17140, <16 x i16> %17141, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17143 = lshr <32 x i16> %17142, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17144 = shufflevector <32 x i16> %17143, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17145 = shl nsw i64 %17075, 5
  %17146 = add nsw i64 %17145, %16928
  %17147 = getelementptr inbounds i16, i16* %blur_x879, i64 %17146
  %17148 = bitcast i16* %17147 to <16 x i16>*
  store <16 x i16> %17144, <16 x i16>* %17148, align 2, !tbaa !399
  %17149 = shufflevector <32 x i16> %17143, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17150 = getelementptr inbounds i16, i16* %17147, i64 16
  %17151 = bitcast i16* %17150 to <16 x i16>*
  store <16 x i16> %17149, <16 x i16>* %17151, align 2, !tbaa !399
  br label %"consume blur_x1111"

"consume blur_x1111":                             ; preds = %"for blur_y.s0.x.x.rebased1102.consume blur_x1111_crit_edge", %"produce blur_x1109"
  %.pre-phi3498 = phi i64 [ %.pre3497, %"for blur_y.s0.x.x.rebased1102.consume blur_x1111_crit_edge" ], [ %17145, %"produce blur_x1109" ]
  %17152 = add nsw i64 %16931, %.pre-phi3498
  %17153 = getelementptr inbounds i16, i16* %blur_x879, i64 %17152
  %17154 = bitcast i16* %17153 to <16 x i16>*
  %17155 = load <16 x i16>, <16 x i16>* %17154, align 2, !tbaa !399
  %17156 = getelementptr inbounds i16, i16* %17153, i64 16
  %17157 = bitcast i16* %17156 to <16 x i16>*
  %17158 = load <16 x i16>, <16 x i16>* %17157, align 2, !tbaa !399
  %17159 = add nsw i64 %16934, %.pre-phi3498
  %17160 = getelementptr inbounds i16, i16* %blur_x879, i64 %17159
  %17161 = bitcast i16* %17160 to <16 x i16>*
  %17162 = load <16 x i16>, <16 x i16>* %17161, align 2, !tbaa !399
  %17163 = getelementptr inbounds i16, i16* %17160, i64 16
  %17164 = bitcast i16* %17163 to <16 x i16>*
  %17165 = load <16 x i16>, <16 x i16>* %17164, align 2, !tbaa !399
  %17166 = add nsw i64 %16937, %.pre-phi3498
  %17167 = getelementptr inbounds i16, i16* %blur_x879, i64 %17166
  %17168 = bitcast i16* %17167 to <16 x i16>*
  %17169 = load <16 x i16>, <16 x i16>* %17168, align 2, !tbaa !399
  %17170 = getelementptr inbounds i16, i16* %17167, i64 16
  %17171 = bitcast i16* %17170 to <16 x i16>*
  %17172 = load <16 x i16>, <16 x i16>* %17171, align 2, !tbaa !399
  %17173 = add nsw i64 %16940, %.pre-phi3498
  %17174 = getelementptr inbounds i16, i16* %blur_x879, i64 %17173
  %17175 = bitcast i16* %17174 to <16 x i16>*
  %17176 = load <16 x i16>, <16 x i16>* %17175, align 2, !tbaa !399
  %17177 = getelementptr inbounds i16, i16* %17174, i64 16
  %17178 = bitcast i16* %17177 to <16 x i16>*
  %17179 = load <16 x i16>, <16 x i16>* %17178, align 2, !tbaa !399
  %17180 = add nsw i64 %16943, %.pre-phi3498
  %17181 = getelementptr inbounds i16, i16* %blur_x879, i64 %17180
  %17182 = bitcast i16* %17181 to <16 x i16>*
  %17183 = load <16 x i16>, <16 x i16>* %17182, align 2, !tbaa !399
  %17184 = getelementptr inbounds i16, i16* %17181, i64 16
  %17185 = bitcast i16* %17184 to <16 x i16>*
  %17186 = load <16 x i16>, <16 x i16>* %17185, align 2, !tbaa !399
  %17187 = add <16 x i16> %17162, %17155
  %17188 = add <16 x i16> %17187, %17169
  %17189 = add <16 x i16> %17188, %17176
  %17190 = add <16 x i16> %17189, %17183
  %17191 = add <16 x i16> %17165, %17158
  %17192 = add <16 x i16> %17191, %17172
  %17193 = add <16 x i16> %17192, %17179
  %17194 = add <16 x i16> %17193, %17186
  %17195 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17190, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17196 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17194, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17197 = shufflevector <16 x i16> %17195, <16 x i16> %17196, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17198 = lshr <32 x i16> %17197, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17199 = shufflevector <32 x i16> %17198, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17200 = add nsw i64 %16947, %.pre-phi3498
  %17201 = getelementptr inbounds i16, i16* %260, i64 %17200
  %17202 = bitcast i16* %17201 to <16 x i16>*
  store <16 x i16> %17199, <16 x i16>* %17202, align 2, !tbaa !401
  %17203 = shufflevector <32 x i16> %17198, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17204 = getelementptr inbounds i16, i16* %17201, i64 16
  %17205 = bitcast i16* %17204 to <16 x i16>*
  store <16 x i16> %17203, <16 x i16>* %17205, align 2, !tbaa !401
  %indvars.iv.next3282 = add nuw nsw i64 %indvars.iv3281, 1
  %.not2600 = icmp eq i64 %indvars.iv.next3282, %378
  br i1 %.not2600, label %"end for blur_y.s0.x.x.rebased1103", label %"for blur_y.s0.x.x.rebased1102"

"for blur_y.s0.x.x.rebased1119":                  ; preds = %"for blur_y.s0.x.x.rebased1119.preheader", %"consume blur_x1129"
  %blur_y.s0.x.x.rebased1121 = phi i32 [ %17318, %"consume blur_x1129" ], [ 0, %"for blur_y.s0.x.x.rebased1119.preheader" ]
  %17206 = add nsw i32 %blur_y.s0.x.x.rebased1121, %t1626814
  %a446 = shl nsw i32 %17206, 5
  %17207 = icmp sgt i32 %a341, %a446
  %b452 = select i1 %17207, i32 %a446, i32 %a341
  %17208 = icmp slt i32 %17206, 1
  %17209 = icmp sgt i32 %198, %a446
  %17210 = or i1 %17208, %17209
  br i1 %17210, label %"produce blur_x1126", label %"consume blur_x1129"

"end for blur_y.s0.x.x.rebased1120":              ; preds = %"consume blur_x1129", %"end for blur_y.s0.x.x.rebased1103"
  br i1 %228, label %"produce blur_x1133", label %"end for blur_y.s0.x.x.rebased1120.after_bb1130_crit_edge"

"end for blur_y.s0.x.x.rebased1120.after_bb1130_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased1120"
  %.pre3499 = add nsw i32 %a353, 7
  %.pre3501 = and i32 %.pre3499, 7
  br label %after_bb1130

"produce blur_x1126":                             ; preds = %"for blur_y.s0.x.x.rebased1119"
  %17211 = icmp slt i32 %b452, %198
  %blur_x.s0.x.v1.base.s1127 = select i1 %17211, i32 %b452, i32 %198
  %t7491128 = add nsw i32 %blur_x.s0.x.v1.base.s1127, %t17371099
  %17212 = sext i32 %t7491128 to i64
  %17213 = getelementptr inbounds i16, i16* %read_input822, i64 %17212
  %17214 = getelementptr inbounds i16, i16* %17213, i64 1
  %17215 = bitcast i16* %17214 to <16 x i16>*
  %17216 = load <16 x i16>, <16 x i16>* %17215, align 2, !tbaa !396
  %17217 = getelementptr inbounds i16, i16* %17213, i64 17
  %17218 = bitcast i16* %17217 to <16 x i16>*
  %17219 = load <16 x i16>, <16 x i16>* %17218, align 2, !tbaa !396
  %17220 = bitcast i16* %17213 to <16 x i16>*
  %17221 = load <16 x i16>, <16 x i16>* %17220, align 2, !tbaa !396
  %17222 = getelementptr inbounds i16, i16* %17213, i64 16
  %17223 = bitcast i16* %17222 to <16 x i16>*
  %17224 = load <16 x i16>, <16 x i16>* %17223, align 2, !tbaa !396
  %17225 = getelementptr inbounds i16, i16* %17213, i64 2
  %17226 = bitcast i16* %17225 to <16 x i16>*
  %17227 = load <16 x i16>, <16 x i16>* %17226, align 2, !tbaa !396
  %17228 = getelementptr inbounds i16, i16* %17213, i64 18
  %17229 = bitcast i16* %17228 to <16 x i16>*
  %17230 = load <16 x i16>, <16 x i16>* %17229, align 2, !tbaa !396
  %17231 = getelementptr inbounds i16, i16* %17213, i64 4
  %17232 = bitcast i16* %17231 to <16 x i16>*
  %17233 = load <16 x i16>, <16 x i16>* %17232, align 2, !tbaa !396
  %17234 = getelementptr inbounds i16, i16* %17213, i64 20
  %17235 = bitcast i16* %17234 to <16 x i16>*
  %17236 = load <16 x i16>, <16 x i16>* %17235, align 2, !tbaa !396
  %17237 = getelementptr inbounds i16, i16* %17213, i64 3
  %17238 = bitcast i16* %17237 to <16 x i16>*
  %17239 = load <16 x i16>, <16 x i16>* %17238, align 2, !tbaa !396
  %17240 = getelementptr inbounds i16, i16* %17213, i64 19
  %17241 = bitcast i16* %17240 to <16 x i16>*
  %17242 = load <16 x i16>, <16 x i16>* %17241, align 2, !tbaa !396
  %17243 = add <16 x i16> %17221, %17216
  %17244 = add <16 x i16> %17243, %17227
  %17245 = add <16 x i16> %17244, %17233
  %17246 = add <16 x i16> %17245, %17239
  %17247 = add <16 x i16> %17224, %17219
  %17248 = add <16 x i16> %17247, %17230
  %17249 = add <16 x i16> %17248, %17236
  %17250 = add <16 x i16> %17249, %17242
  %17251 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17246, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17252 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17250, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17253 = shufflevector <16 x i16> %17251, <16 x i16> %17252, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17254 = lshr <32 x i16> %17253, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17255 = shufflevector <32 x i16> %17254, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17256 = sext i32 %blur_x.s0.x.v1.base.s1127 to i64
  %17257 = add nsw i64 %17256, %17081
  %17258 = getelementptr inbounds i16, i16* %blur_x879, i64 %17257
  %17259 = bitcast i16* %17258 to <16 x i16>*
  store <16 x i16> %17255, <16 x i16>* %17259, align 2, !tbaa !399
  %17260 = shufflevector <32 x i16> %17254, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17261 = getelementptr inbounds i16, i16* %17258, i64 16
  %17262 = bitcast i16* %17261 to <16 x i16>*
  store <16 x i16> %17260, <16 x i16>* %17262, align 2, !tbaa !399
  br label %"consume blur_x1129"

"consume blur_x1129":                             ; preds = %"for blur_y.s0.x.x.rebased1119", %"produce blur_x1126"
  %17263 = sext i32 %b452 to i64
  %17264 = add nsw i64 %17084, %17263
  %17265 = getelementptr inbounds i16, i16* %blur_x879, i64 %17264
  %17266 = bitcast i16* %17265 to <16 x i16>*
  %17267 = load <16 x i16>, <16 x i16>* %17266, align 2, !tbaa !399
  %17268 = getelementptr inbounds i16, i16* %17265, i64 16
  %17269 = bitcast i16* %17268 to <16 x i16>*
  %17270 = load <16 x i16>, <16 x i16>* %17269, align 2, !tbaa !399
  %17271 = add nsw i64 %17087, %17263
  %17272 = getelementptr inbounds i16, i16* %blur_x879, i64 %17271
  %17273 = bitcast i16* %17272 to <16 x i16>*
  %17274 = load <16 x i16>, <16 x i16>* %17273, align 2, !tbaa !399
  %17275 = getelementptr inbounds i16, i16* %17272, i64 16
  %17276 = bitcast i16* %17275 to <16 x i16>*
  %17277 = load <16 x i16>, <16 x i16>* %17276, align 2, !tbaa !399
  %17278 = add nsw i64 %17090, %17263
  %17279 = getelementptr inbounds i16, i16* %blur_x879, i64 %17278
  %17280 = bitcast i16* %17279 to <16 x i16>*
  %17281 = load <16 x i16>, <16 x i16>* %17280, align 2, !tbaa !399
  %17282 = getelementptr inbounds i16, i16* %17279, i64 16
  %17283 = bitcast i16* %17282 to <16 x i16>*
  %17284 = load <16 x i16>, <16 x i16>* %17283, align 2, !tbaa !399
  %17285 = add nsw i64 %17093, %17263
  %17286 = getelementptr inbounds i16, i16* %blur_x879, i64 %17285
  %17287 = bitcast i16* %17286 to <16 x i16>*
  %17288 = load <16 x i16>, <16 x i16>* %17287, align 2, !tbaa !399
  %17289 = getelementptr inbounds i16, i16* %17286, i64 16
  %17290 = bitcast i16* %17289 to <16 x i16>*
  %17291 = load <16 x i16>, <16 x i16>* %17290, align 2, !tbaa !399
  %17292 = add nsw i64 %17096, %17263
  %17293 = getelementptr inbounds i16, i16* %blur_x879, i64 %17292
  %17294 = bitcast i16* %17293 to <16 x i16>*
  %17295 = load <16 x i16>, <16 x i16>* %17294, align 2, !tbaa !399
  %17296 = getelementptr inbounds i16, i16* %17293, i64 16
  %17297 = bitcast i16* %17296 to <16 x i16>*
  %17298 = load <16 x i16>, <16 x i16>* %17297, align 2, !tbaa !399
  %17299 = add <16 x i16> %17274, %17267
  %17300 = add <16 x i16> %17299, %17281
  %17301 = add <16 x i16> %17300, %17288
  %17302 = add <16 x i16> %17301, %17295
  %17303 = add <16 x i16> %17277, %17270
  %17304 = add <16 x i16> %17303, %17284
  %17305 = add <16 x i16> %17304, %17291
  %17306 = add <16 x i16> %17305, %17298
  %17307 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17302, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17308 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17306, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17309 = shufflevector <16 x i16> %17307, <16 x i16> %17308, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17310 = lshr <32 x i16> %17309, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17311 = shufflevector <32 x i16> %17310, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17312 = add nsw i64 %17100, %17263
  %17313 = getelementptr inbounds i16, i16* %260, i64 %17312
  %17314 = bitcast i16* %17313 to <16 x i16>*
  store <16 x i16> %17311, <16 x i16>* %17314, align 2, !tbaa !401
  %17315 = shufflevector <32 x i16> %17310, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17316 = getelementptr inbounds i16, i16* %17313, i64 16
  %17317 = bitcast i16* %17316 to <16 x i16>*
  store <16 x i16> %17315, <16 x i16>* %17317, align 2, !tbaa !401
  %17318 = add nuw nsw i32 %blur_y.s0.x.x.rebased1121, 1
  %.not2599 = icmp eq i32 %17318, %t1683899
  br i1 %.not2599, label %"end for blur_y.s0.x.x.rebased1120", label %"for blur_y.s0.x.x.rebased1119"

after_bb1130:                                     ; preds = %"end for blur_y.s0.x.x.rebased1120.after_bb1130_crit_edge", %"produce blur_x1133"
  %.pre-phi3502 = phi i32 [ %.pre3501, %"end for blur_y.s0.x.x.rebased1120.after_bb1130_crit_edge" ], [ %17385, %"produce blur_x1133" ]
  %17319 = mul nsw i32 %.pre-phi3502, %a400
  %t17541141 = sub nsw i32 %17319, %t1645811
  br i1 %294, label %"for blur_y.s0.x.x.rebased1145.preheader", label %"end for blur_y.s0.x.x.rebased1146", !prof !386

"for blur_y.s0.x.x.rebased1145.preheader":        ; preds = %after_bb1130
  %17320 = sext i32 %t17541141 to i64
  %17321 = zext i32 %.pre-phi3484 to i64
  %17322 = mul nsw i64 %17321, %306
  %17323 = sub nsw i64 %17322, %290
  %17324 = zext i32 %.pre-phi3480 to i64
  %17325 = mul nsw i64 %17324, %306
  %17326 = sub nsw i64 %17325, %290
  %17327 = zext i32 %.pre-phi3490 to i64
  %17328 = mul nsw i64 %17327, %306
  %17329 = sub nsw i64 %17328, %290
  %17330 = zext i32 %.pre-phi3502 to i64
  %17331 = mul nsw i64 %17330, %306
  %17332 = sub nsw i64 %17331, %290
  %17333 = zext i32 %.pre-phi3496 to i64
  %17334 = mul nsw i64 %17333, %306
  %17335 = sub nsw i64 %17334, %290
  %17336 = sext i32 %a353 to i64
  %17337 = add nsw i64 %17336, 3
  %17338 = mul nsw i64 %17337, %307
  %17339 = add nsw i64 %17338, %310
  br label %"for blur_y.s0.x.x.rebased1145"

"produce blur_x1133":                             ; preds = %"end for blur_y.s0.x.x.rebased1120"
  %17340 = getelementptr inbounds i16, i16* %read_input822, i64 %315
  %17341 = getelementptr inbounds i16, i16* %17340, i64 -31
  %17342 = bitcast i16* %17341 to <16 x i16>*
  %17343 = load <16 x i16>, <16 x i16>* %17342, align 2, !tbaa !396
  %17344 = getelementptr inbounds i16, i16* %17340, i64 -15
  %17345 = bitcast i16* %17344 to <16 x i16>*
  %17346 = load <16 x i16>, <16 x i16>* %17345, align 2, !tbaa !396
  %17347 = getelementptr inbounds i16, i16* %17340, i64 -32
  %17348 = bitcast i16* %17347 to <16 x i16>*
  %17349 = load <16 x i16>, <16 x i16>* %17348, align 2, !tbaa !396
  %17350 = getelementptr inbounds i16, i16* %17340, i64 -16
  %17351 = bitcast i16* %17350 to <16 x i16>*
  %17352 = load <16 x i16>, <16 x i16>* %17351, align 2, !tbaa !396
  %17353 = getelementptr inbounds i16, i16* %17340, i64 -30
  %17354 = bitcast i16* %17353 to <16 x i16>*
  %17355 = load <16 x i16>, <16 x i16>* %17354, align 2, !tbaa !396
  %17356 = getelementptr inbounds i16, i16* %17340, i64 -14
  %17357 = bitcast i16* %17356 to <16 x i16>*
  %17358 = load <16 x i16>, <16 x i16>* %17357, align 2, !tbaa !396
  %17359 = getelementptr inbounds i16, i16* %17340, i64 -28
  %17360 = bitcast i16* %17359 to <16 x i16>*
  %17361 = load <16 x i16>, <16 x i16>* %17360, align 2, !tbaa !396
  %17362 = getelementptr inbounds i16, i16* %17340, i64 -12
  %17363 = bitcast i16* %17362 to <16 x i16>*
  %17364 = load <16 x i16>, <16 x i16>* %17363, align 2, !tbaa !396
  %17365 = getelementptr inbounds i16, i16* %17340, i64 -29
  %17366 = bitcast i16* %17365 to <16 x i16>*
  %17367 = load <16 x i16>, <16 x i16>* %17366, align 2, !tbaa !396
  %17368 = getelementptr inbounds i16, i16* %17340, i64 -13
  %17369 = bitcast i16* %17368 to <16 x i16>*
  %17370 = load <16 x i16>, <16 x i16>* %17369, align 2, !tbaa !396
  %17371 = add <16 x i16> %17349, %17343
  %17372 = add <16 x i16> %17371, %17355
  %17373 = add <16 x i16> %17372, %17361
  %17374 = add <16 x i16> %17373, %17367
  %17375 = add <16 x i16> %17352, %17346
  %17376 = add <16 x i16> %17375, %17358
  %17377 = add <16 x i16> %17376, %17364
  %17378 = add <16 x i16> %17377, %17370
  %17379 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17374, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17380 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17378, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17381 = shufflevector <16 x i16> %17379, <16 x i16> %17380, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17382 = lshr <32 x i16> %17381, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17383 = shufflevector <32 x i16> %17382, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17384 = add nsw i32 %a353, 7
  %17385 = and i32 %17384, 7
  %17386 = zext i32 %17385 to i64
  %17387 = mul nsw i64 %291, %17386
  %17388 = add nsw i64 %293, %17387
  %17389 = getelementptr inbounds i16, i16* %blur_x879, i64 %17388
  %17390 = getelementptr inbounds i16, i16* %17389, i64 -32
  %17391 = bitcast i16* %17390 to <16 x i16>*
  store <16 x i16> %17383, <16 x i16>* %17391, align 2, !tbaa !399
  %17392 = shufflevector <32 x i16> %17382, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17393 = getelementptr inbounds i16, i16* %17389, i64 -16
  %17394 = bitcast i16* %17393 to <16 x i16>*
  store <16 x i16> %17392, <16 x i16>* %17394, align 2, !tbaa !399
  %17395 = zext i32 %.pre-phi3484 to i64
  %17396 = mul nsw i64 %17395, %306
  %17397 = add nsw i64 %17396, %288
  %17398 = getelementptr inbounds i16, i16* %blur_x879, i64 %17397
  %17399 = getelementptr inbounds i16, i16* %17398, i64 -32
  %17400 = bitcast i16* %17399 to <16 x i16>*
  %17401 = load <16 x i16>, <16 x i16>* %17400, align 2, !tbaa !399
  %17402 = getelementptr inbounds i16, i16* %17398, i64 -16
  %17403 = bitcast i16* %17402 to <16 x i16>*
  %17404 = load <16 x i16>, <16 x i16>* %17403, align 2, !tbaa !399
  %17405 = zext i32 %.pre-phi3480 to i64
  %17406 = mul nsw i64 %17405, %306
  %17407 = add nsw i64 %17406, %288
  %17408 = getelementptr inbounds i16, i16* %blur_x879, i64 %17407
  %17409 = getelementptr inbounds i16, i16* %17408, i64 -32
  %17410 = bitcast i16* %17409 to <16 x i16>*
  %17411 = load <16 x i16>, <16 x i16>* %17410, align 2, !tbaa !399
  %17412 = getelementptr inbounds i16, i16* %17408, i64 -16
  %17413 = bitcast i16* %17412 to <16 x i16>*
  %17414 = load <16 x i16>, <16 x i16>* %17413, align 2, !tbaa !399
  %17415 = zext i32 %.pre-phi3490 to i64
  %17416 = mul nsw i64 %17415, %306
  %17417 = add nsw i64 %17416, %288
  %17418 = getelementptr inbounds i16, i16* %blur_x879, i64 %17417
  %17419 = getelementptr inbounds i16, i16* %17418, i64 -32
  %17420 = bitcast i16* %17419 to <16 x i16>*
  %17421 = load <16 x i16>, <16 x i16>* %17420, align 2, !tbaa !399
  %17422 = getelementptr inbounds i16, i16* %17418, i64 -16
  %17423 = bitcast i16* %17422 to <16 x i16>*
  %17424 = load <16 x i16>, <16 x i16>* %17423, align 2, !tbaa !399
  %17425 = mul nsw i64 %17386, %306
  %17426 = add nsw i64 %17425, %288
  %17427 = getelementptr inbounds i16, i16* %blur_x879, i64 %17426
  %17428 = getelementptr inbounds i16, i16* %17427, i64 -32
  %17429 = bitcast i16* %17428 to <16 x i16>*
  %17430 = load <16 x i16>, <16 x i16>* %17429, align 2, !tbaa !399
  %17431 = getelementptr inbounds i16, i16* %17427, i64 -16
  %17432 = bitcast i16* %17431 to <16 x i16>*
  %17433 = load <16 x i16>, <16 x i16>* %17432, align 2, !tbaa !399
  %17434 = zext i32 %.pre-phi3496 to i64
  %17435 = mul nsw i64 %17434, %306
  %17436 = add nsw i64 %17435, %288
  %17437 = getelementptr inbounds i16, i16* %blur_x879, i64 %17436
  %17438 = getelementptr inbounds i16, i16* %17437, i64 -32
  %17439 = bitcast i16* %17438 to <16 x i16>*
  %17440 = load <16 x i16>, <16 x i16>* %17439, align 2, !tbaa !399
  %17441 = getelementptr inbounds i16, i16* %17437, i64 -16
  %17442 = bitcast i16* %17441 to <16 x i16>*
  %17443 = load <16 x i16>, <16 x i16>* %17442, align 2, !tbaa !399
  %17444 = add <16 x i16> %17411, %17401
  %17445 = add <16 x i16> %17444, %17421
  %17446 = add <16 x i16> %17445, %17430
  %17447 = add <16 x i16> %17446, %17440
  %17448 = add <16 x i16> %17414, %17404
  %17449 = add <16 x i16> %17448, %17424
  %17450 = add <16 x i16> %17449, %17433
  %17451 = add <16 x i16> %17450, %17443
  %17452 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17447, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17453 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17451, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17454 = shufflevector <16 x i16> %17452, <16 x i16> %17453, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17455 = lshr <32 x i16> %17454, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17456 = shufflevector <32 x i16> %17455, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17457 = sext i32 %a353 to i64
  %17458 = add nsw i64 %17457, 3
  %17459 = mul nsw i64 %17458, %307
  %17460 = add nsw i64 %309, %17459
  %17461 = getelementptr inbounds i16, i16* %260, i64 %17460
  %17462 = getelementptr inbounds i16, i16* %17461, i64 -32
  %17463 = bitcast i16* %17462 to <16 x i16>*
  store <16 x i16> %17456, <16 x i16>* %17463, align 2, !tbaa !401
  %17464 = shufflevector <32 x i16> %17455, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17465 = getelementptr inbounds i16, i16* %17461, i64 -16
  %17466 = bitcast i16* %17465 to <16 x i16>*
  store <16 x i16> %17464, <16 x i16>* %17466, align 2, !tbaa !401
  br label %after_bb1130

"for blur_y.s0.x.x.rebased1145":                  ; preds = %"for blur_y.s0.x.x.rebased1145.preheader", %"consume blur_x1154"
  %indvars.iv3284 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1145.preheader" ], [ %indvars.iv.next3285, %"consume blur_x1154" ]
  %17467 = add nsw i64 %indvars.iv3284, %295
  %17468 = icmp slt i64 %17467, 1
  %17469 = trunc i64 %17467 to i32
  %17470 = shl nsw i32 %17469, 5
  %17471 = icmp sgt i32 %198, %17470
  %17472 = or i1 %17468, %17471
  br i1 %17472, label %"produce blur_x1152", label %"for blur_y.s0.x.x.rebased1145.consume blur_x1154_crit_edge"

"for blur_y.s0.x.x.rebased1145.consume blur_x1154_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1145"
  %.pre3503 = shl nsw i64 %17467, 5
  br label %"consume blur_x1154"

"end for blur_y.s0.x.x.rebased1146":              ; preds = %"consume blur_x1154", %after_bb1130
  br i1 %296, label %"for blur_y.s0.x.x.rebased1162.preheader", label %"end for blur_y.s0.x.x.rebased1163", !prof !386

"for blur_y.s0.x.x.rebased1162.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1146"
  %17473 = sext i32 %t17541141 to i64
  %17474 = zext i32 %.pre-phi3484 to i64
  %17475 = mul nsw i64 %17474, %306
  %17476 = sub nsw i64 %17475, %290
  %17477 = zext i32 %.pre-phi3480 to i64
  %17478 = mul nsw i64 %17477, %306
  %17479 = sub nsw i64 %17478, %290
  %17480 = zext i32 %.pre-phi3490 to i64
  %17481 = mul nsw i64 %17480, %306
  %17482 = sub nsw i64 %17481, %290
  %17483 = zext i32 %.pre-phi3502 to i64
  %17484 = mul nsw i64 %17483, %306
  %17485 = sub nsw i64 %17484, %290
  %17486 = zext i32 %.pre-phi3496 to i64
  %17487 = mul nsw i64 %17486, %306
  %17488 = sub nsw i64 %17487, %290
  %17489 = sext i32 %a353 to i64
  %17490 = add nsw i64 %17489, 3
  %17491 = mul nsw i64 %17490, %307
  %17492 = add nsw i64 %17491, %310
  br label %"for blur_y.s0.x.x.rebased1162"

"produce blur_x1152":                             ; preds = %"for blur_y.s0.x.x.rebased1145"
  %t7601153 = add nsw i32 %17470, %t17531142
  %17493 = sext i32 %t7601153 to i64
  %17494 = getelementptr inbounds i16, i16* %read_input822, i64 %17493
  %17495 = getelementptr inbounds i16, i16* %17494, i64 1
  %17496 = bitcast i16* %17495 to <16 x i16>*
  %17497 = load <16 x i16>, <16 x i16>* %17496, align 2, !tbaa !396
  %17498 = getelementptr inbounds i16, i16* %17494, i64 17
  %17499 = bitcast i16* %17498 to <16 x i16>*
  %17500 = load <16 x i16>, <16 x i16>* %17499, align 2, !tbaa !396
  %17501 = bitcast i16* %17494 to <16 x i16>*
  %17502 = load <16 x i16>, <16 x i16>* %17501, align 2, !tbaa !396
  %17503 = getelementptr inbounds i16, i16* %17494, i64 16
  %17504 = bitcast i16* %17503 to <16 x i16>*
  %17505 = load <16 x i16>, <16 x i16>* %17504, align 2, !tbaa !396
  %17506 = getelementptr inbounds i16, i16* %17494, i64 2
  %17507 = bitcast i16* %17506 to <16 x i16>*
  %17508 = load <16 x i16>, <16 x i16>* %17507, align 2, !tbaa !396
  %17509 = getelementptr inbounds i16, i16* %17494, i64 18
  %17510 = bitcast i16* %17509 to <16 x i16>*
  %17511 = load <16 x i16>, <16 x i16>* %17510, align 2, !tbaa !396
  %17512 = getelementptr inbounds i16, i16* %17494, i64 4
  %17513 = bitcast i16* %17512 to <16 x i16>*
  %17514 = load <16 x i16>, <16 x i16>* %17513, align 2, !tbaa !396
  %17515 = getelementptr inbounds i16, i16* %17494, i64 20
  %17516 = bitcast i16* %17515 to <16 x i16>*
  %17517 = load <16 x i16>, <16 x i16>* %17516, align 2, !tbaa !396
  %17518 = getelementptr inbounds i16, i16* %17494, i64 3
  %17519 = bitcast i16* %17518 to <16 x i16>*
  %17520 = load <16 x i16>, <16 x i16>* %17519, align 2, !tbaa !396
  %17521 = getelementptr inbounds i16, i16* %17494, i64 19
  %17522 = bitcast i16* %17521 to <16 x i16>*
  %17523 = load <16 x i16>, <16 x i16>* %17522, align 2, !tbaa !396
  %17524 = add <16 x i16> %17502, %17497
  %17525 = add <16 x i16> %17524, %17508
  %17526 = add <16 x i16> %17525, %17514
  %17527 = add <16 x i16> %17526, %17520
  %17528 = add <16 x i16> %17505, %17500
  %17529 = add <16 x i16> %17528, %17511
  %17530 = add <16 x i16> %17529, %17517
  %17531 = add <16 x i16> %17530, %17523
  %17532 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17527, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17533 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17531, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17534 = shufflevector <16 x i16> %17532, <16 x i16> %17533, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17535 = lshr <32 x i16> %17534, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17536 = shufflevector <32 x i16> %17535, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17537 = shl nsw i64 %17467, 5
  %17538 = add nsw i64 %17537, %17320
  %17539 = getelementptr inbounds i16, i16* %blur_x879, i64 %17538
  %17540 = bitcast i16* %17539 to <16 x i16>*
  store <16 x i16> %17536, <16 x i16>* %17540, align 2, !tbaa !399
  %17541 = shufflevector <32 x i16> %17535, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17542 = getelementptr inbounds i16, i16* %17539, i64 16
  %17543 = bitcast i16* %17542 to <16 x i16>*
  store <16 x i16> %17541, <16 x i16>* %17543, align 2, !tbaa !399
  br label %"consume blur_x1154"

"consume blur_x1154":                             ; preds = %"for blur_y.s0.x.x.rebased1145.consume blur_x1154_crit_edge", %"produce blur_x1152"
  %.pre-phi3504 = phi i64 [ %.pre3503, %"for blur_y.s0.x.x.rebased1145.consume blur_x1154_crit_edge" ], [ %17537, %"produce blur_x1152" ]
  %17544 = add nsw i64 %17323, %.pre-phi3504
  %17545 = getelementptr inbounds i16, i16* %blur_x879, i64 %17544
  %17546 = bitcast i16* %17545 to <16 x i16>*
  %17547 = load <16 x i16>, <16 x i16>* %17546, align 2, !tbaa !399
  %17548 = getelementptr inbounds i16, i16* %17545, i64 16
  %17549 = bitcast i16* %17548 to <16 x i16>*
  %17550 = load <16 x i16>, <16 x i16>* %17549, align 2, !tbaa !399
  %17551 = add nsw i64 %17326, %.pre-phi3504
  %17552 = getelementptr inbounds i16, i16* %blur_x879, i64 %17551
  %17553 = bitcast i16* %17552 to <16 x i16>*
  %17554 = load <16 x i16>, <16 x i16>* %17553, align 2, !tbaa !399
  %17555 = getelementptr inbounds i16, i16* %17552, i64 16
  %17556 = bitcast i16* %17555 to <16 x i16>*
  %17557 = load <16 x i16>, <16 x i16>* %17556, align 2, !tbaa !399
  %17558 = add nsw i64 %17329, %.pre-phi3504
  %17559 = getelementptr inbounds i16, i16* %blur_x879, i64 %17558
  %17560 = bitcast i16* %17559 to <16 x i16>*
  %17561 = load <16 x i16>, <16 x i16>* %17560, align 2, !tbaa !399
  %17562 = getelementptr inbounds i16, i16* %17559, i64 16
  %17563 = bitcast i16* %17562 to <16 x i16>*
  %17564 = load <16 x i16>, <16 x i16>* %17563, align 2, !tbaa !399
  %17565 = add nsw i64 %17332, %.pre-phi3504
  %17566 = getelementptr inbounds i16, i16* %blur_x879, i64 %17565
  %17567 = bitcast i16* %17566 to <16 x i16>*
  %17568 = load <16 x i16>, <16 x i16>* %17567, align 2, !tbaa !399
  %17569 = getelementptr inbounds i16, i16* %17566, i64 16
  %17570 = bitcast i16* %17569 to <16 x i16>*
  %17571 = load <16 x i16>, <16 x i16>* %17570, align 2, !tbaa !399
  %17572 = add nsw i64 %17335, %.pre-phi3504
  %17573 = getelementptr inbounds i16, i16* %blur_x879, i64 %17572
  %17574 = bitcast i16* %17573 to <16 x i16>*
  %17575 = load <16 x i16>, <16 x i16>* %17574, align 2, !tbaa !399
  %17576 = getelementptr inbounds i16, i16* %17573, i64 16
  %17577 = bitcast i16* %17576 to <16 x i16>*
  %17578 = load <16 x i16>, <16 x i16>* %17577, align 2, !tbaa !399
  %17579 = add <16 x i16> %17554, %17547
  %17580 = add <16 x i16> %17579, %17561
  %17581 = add <16 x i16> %17580, %17568
  %17582 = add <16 x i16> %17581, %17575
  %17583 = add <16 x i16> %17557, %17550
  %17584 = add <16 x i16> %17583, %17564
  %17585 = add <16 x i16> %17584, %17571
  %17586 = add <16 x i16> %17585, %17578
  %17587 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17582, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17588 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17586, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17589 = shufflevector <16 x i16> %17587, <16 x i16> %17588, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17590 = lshr <32 x i16> %17589, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17591 = shufflevector <32 x i16> %17590, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17592 = add nsw i64 %17339, %.pre-phi3504
  %17593 = getelementptr inbounds i16, i16* %260, i64 %17592
  %17594 = bitcast i16* %17593 to <16 x i16>*
  store <16 x i16> %17591, <16 x i16>* %17594, align 2, !tbaa !401
  %17595 = shufflevector <32 x i16> %17590, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17596 = getelementptr inbounds i16, i16* %17593, i64 16
  %17597 = bitcast i16* %17596 to <16 x i16>*
  store <16 x i16> %17595, <16 x i16>* %17597, align 2, !tbaa !401
  %indvars.iv.next3285 = add nuw nsw i64 %indvars.iv3284, 1
  %.not2598 = icmp eq i64 %indvars.iv.next3285, %378
  br i1 %.not2598, label %"end for blur_y.s0.x.x.rebased1146", label %"for blur_y.s0.x.x.rebased1145"

"for blur_y.s0.x.x.rebased1162":                  ; preds = %"for blur_y.s0.x.x.rebased1162.preheader", %"consume blur_x1172"
  %blur_y.s0.x.x.rebased1164 = phi i32 [ %17710, %"consume blur_x1172" ], [ 0, %"for blur_y.s0.x.x.rebased1162.preheader" ]
  %17598 = add nsw i32 %blur_y.s0.x.x.rebased1164, %t1626814
  %a453 = shl nsw i32 %17598, 5
  %17599 = icmp sgt i32 %a341, %a453
  %b459 = select i1 %17599, i32 %a453, i32 %a341
  %17600 = icmp slt i32 %17598, 1
  %17601 = icmp sgt i32 %198, %a453
  %17602 = or i1 %17600, %17601
  br i1 %17602, label %"produce blur_x1169", label %"consume blur_x1172"

"end for blur_y.s0.x.x.rebased1163":              ; preds = %"consume blur_x1172", %"end for blur_y.s0.x.x.rebased1146"
  br i1 %228, label %"produce blur_x1176", label %after_bb1173

"produce blur_x1169":                             ; preds = %"for blur_y.s0.x.x.rebased1162"
  %17603 = icmp slt i32 %b459, %198
  %blur_x.s0.x.v1.base.s1170 = select i1 %17603, i32 %b459, i32 %198
  %t7651171 = add nsw i32 %blur_x.s0.x.v1.base.s1170, %t17531142
  %17604 = sext i32 %t7651171 to i64
  %17605 = getelementptr inbounds i16, i16* %read_input822, i64 %17604
  %17606 = getelementptr inbounds i16, i16* %17605, i64 1
  %17607 = bitcast i16* %17606 to <16 x i16>*
  %17608 = load <16 x i16>, <16 x i16>* %17607, align 2, !tbaa !396
  %17609 = getelementptr inbounds i16, i16* %17605, i64 17
  %17610 = bitcast i16* %17609 to <16 x i16>*
  %17611 = load <16 x i16>, <16 x i16>* %17610, align 2, !tbaa !396
  %17612 = bitcast i16* %17605 to <16 x i16>*
  %17613 = load <16 x i16>, <16 x i16>* %17612, align 2, !tbaa !396
  %17614 = getelementptr inbounds i16, i16* %17605, i64 16
  %17615 = bitcast i16* %17614 to <16 x i16>*
  %17616 = load <16 x i16>, <16 x i16>* %17615, align 2, !tbaa !396
  %17617 = getelementptr inbounds i16, i16* %17605, i64 2
  %17618 = bitcast i16* %17617 to <16 x i16>*
  %17619 = load <16 x i16>, <16 x i16>* %17618, align 2, !tbaa !396
  %17620 = getelementptr inbounds i16, i16* %17605, i64 18
  %17621 = bitcast i16* %17620 to <16 x i16>*
  %17622 = load <16 x i16>, <16 x i16>* %17621, align 2, !tbaa !396
  %17623 = getelementptr inbounds i16, i16* %17605, i64 4
  %17624 = bitcast i16* %17623 to <16 x i16>*
  %17625 = load <16 x i16>, <16 x i16>* %17624, align 2, !tbaa !396
  %17626 = getelementptr inbounds i16, i16* %17605, i64 20
  %17627 = bitcast i16* %17626 to <16 x i16>*
  %17628 = load <16 x i16>, <16 x i16>* %17627, align 2, !tbaa !396
  %17629 = getelementptr inbounds i16, i16* %17605, i64 3
  %17630 = bitcast i16* %17629 to <16 x i16>*
  %17631 = load <16 x i16>, <16 x i16>* %17630, align 2, !tbaa !396
  %17632 = getelementptr inbounds i16, i16* %17605, i64 19
  %17633 = bitcast i16* %17632 to <16 x i16>*
  %17634 = load <16 x i16>, <16 x i16>* %17633, align 2, !tbaa !396
  %17635 = add <16 x i16> %17613, %17608
  %17636 = add <16 x i16> %17635, %17619
  %17637 = add <16 x i16> %17636, %17625
  %17638 = add <16 x i16> %17637, %17631
  %17639 = add <16 x i16> %17616, %17611
  %17640 = add <16 x i16> %17639, %17622
  %17641 = add <16 x i16> %17640, %17628
  %17642 = add <16 x i16> %17641, %17634
  %17643 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17638, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17644 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17642, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17645 = shufflevector <16 x i16> %17643, <16 x i16> %17644, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17646 = lshr <32 x i16> %17645, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17647 = shufflevector <32 x i16> %17646, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17648 = sext i32 %blur_x.s0.x.v1.base.s1170 to i64
  %17649 = add nsw i64 %17648, %17473
  %17650 = getelementptr inbounds i16, i16* %blur_x879, i64 %17649
  %17651 = bitcast i16* %17650 to <16 x i16>*
  store <16 x i16> %17647, <16 x i16>* %17651, align 2, !tbaa !399
  %17652 = shufflevector <32 x i16> %17646, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17653 = getelementptr inbounds i16, i16* %17650, i64 16
  %17654 = bitcast i16* %17653 to <16 x i16>*
  store <16 x i16> %17652, <16 x i16>* %17654, align 2, !tbaa !399
  br label %"consume blur_x1172"

"consume blur_x1172":                             ; preds = %"for blur_y.s0.x.x.rebased1162", %"produce blur_x1169"
  %17655 = sext i32 %b459 to i64
  %17656 = add nsw i64 %17476, %17655
  %17657 = getelementptr inbounds i16, i16* %blur_x879, i64 %17656
  %17658 = bitcast i16* %17657 to <16 x i16>*
  %17659 = load <16 x i16>, <16 x i16>* %17658, align 2, !tbaa !399
  %17660 = getelementptr inbounds i16, i16* %17657, i64 16
  %17661 = bitcast i16* %17660 to <16 x i16>*
  %17662 = load <16 x i16>, <16 x i16>* %17661, align 2, !tbaa !399
  %17663 = add nsw i64 %17479, %17655
  %17664 = getelementptr inbounds i16, i16* %blur_x879, i64 %17663
  %17665 = bitcast i16* %17664 to <16 x i16>*
  %17666 = load <16 x i16>, <16 x i16>* %17665, align 2, !tbaa !399
  %17667 = getelementptr inbounds i16, i16* %17664, i64 16
  %17668 = bitcast i16* %17667 to <16 x i16>*
  %17669 = load <16 x i16>, <16 x i16>* %17668, align 2, !tbaa !399
  %17670 = add nsw i64 %17482, %17655
  %17671 = getelementptr inbounds i16, i16* %blur_x879, i64 %17670
  %17672 = bitcast i16* %17671 to <16 x i16>*
  %17673 = load <16 x i16>, <16 x i16>* %17672, align 2, !tbaa !399
  %17674 = getelementptr inbounds i16, i16* %17671, i64 16
  %17675 = bitcast i16* %17674 to <16 x i16>*
  %17676 = load <16 x i16>, <16 x i16>* %17675, align 2, !tbaa !399
  %17677 = add nsw i64 %17485, %17655
  %17678 = getelementptr inbounds i16, i16* %blur_x879, i64 %17677
  %17679 = bitcast i16* %17678 to <16 x i16>*
  %17680 = load <16 x i16>, <16 x i16>* %17679, align 2, !tbaa !399
  %17681 = getelementptr inbounds i16, i16* %17678, i64 16
  %17682 = bitcast i16* %17681 to <16 x i16>*
  %17683 = load <16 x i16>, <16 x i16>* %17682, align 2, !tbaa !399
  %17684 = add nsw i64 %17488, %17655
  %17685 = getelementptr inbounds i16, i16* %blur_x879, i64 %17684
  %17686 = bitcast i16* %17685 to <16 x i16>*
  %17687 = load <16 x i16>, <16 x i16>* %17686, align 2, !tbaa !399
  %17688 = getelementptr inbounds i16, i16* %17685, i64 16
  %17689 = bitcast i16* %17688 to <16 x i16>*
  %17690 = load <16 x i16>, <16 x i16>* %17689, align 2, !tbaa !399
  %17691 = add <16 x i16> %17666, %17659
  %17692 = add <16 x i16> %17691, %17673
  %17693 = add <16 x i16> %17692, %17680
  %17694 = add <16 x i16> %17693, %17687
  %17695 = add <16 x i16> %17669, %17662
  %17696 = add <16 x i16> %17695, %17676
  %17697 = add <16 x i16> %17696, %17683
  %17698 = add <16 x i16> %17697, %17690
  %17699 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17694, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17700 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17698, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17701 = shufflevector <16 x i16> %17699, <16 x i16> %17700, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17702 = lshr <32 x i16> %17701, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17703 = shufflevector <32 x i16> %17702, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17704 = add nsw i64 %17492, %17655
  %17705 = getelementptr inbounds i16, i16* %260, i64 %17704
  %17706 = bitcast i16* %17705 to <16 x i16>*
  store <16 x i16> %17703, <16 x i16>* %17706, align 2, !tbaa !401
  %17707 = shufflevector <32 x i16> %17702, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17708 = getelementptr inbounds i16, i16* %17705, i64 16
  %17709 = bitcast i16* %17708 to <16 x i16>*
  store <16 x i16> %17707, <16 x i16>* %17709, align 2, !tbaa !401
  %17710 = add nuw nsw i32 %blur_y.s0.x.x.rebased1164, 1
  %.not2597 = icmp eq i32 %17710, %t1683899
  br i1 %.not2597, label %"end for blur_y.s0.x.x.rebased1163", label %"for blur_y.s0.x.x.rebased1162"

after_bb1173:                                     ; preds = %"end for blur_y.s0.x.x.rebased1163", %"produce blur_x1176"
  br i1 %294, label %"for blur_y.s0.x.x.rebased1188.preheader", label %"end for blur_y.s0.x.x.rebased1189", !prof !386

"for blur_y.s0.x.x.rebased1188.preheader":        ; preds = %after_bb1173
  %17711 = sext i32 %t1682886 to i64
  %17712 = zext i32 %.pre-phi3490 to i64
  %17713 = mul nsw i64 %17712, %306
  %17714 = sub nsw i64 %17713, %290
  %17715 = zext i32 %.pre-phi3484 to i64
  %17716 = mul nsw i64 %17715, %306
  %17717 = sub nsw i64 %17716, %290
  %17718 = zext i32 %.pre-phi3496 to i64
  %17719 = mul nsw i64 %17718, %306
  %17720 = sub nsw i64 %17719, %290
  %17721 = zext i32 %.pre-phi3468 to i64
  %17722 = mul nsw i64 %17721, %306
  %17723 = sub nsw i64 %17722, %290
  %17724 = zext i32 %.pre-phi3502 to i64
  %17725 = mul nsw i64 %17724, %306
  %17726 = sub nsw i64 %17725, %290
  %17727 = sext i32 %a353 to i64
  %17728 = add nsw i64 %17727, 4
  %17729 = mul nsw i64 %17728, %307
  %17730 = add nsw i64 %17729, %310
  br label %"for blur_y.s0.x.x.rebased1188"

"produce blur_x1176":                             ; preds = %"end for blur_y.s0.x.x.rebased1163"
  %17731 = getelementptr inbounds i16, i16* %read_input822, i64 %317
  %17732 = getelementptr inbounds i16, i16* %17731, i64 -31
  %17733 = bitcast i16* %17732 to <16 x i16>*
  %17734 = load <16 x i16>, <16 x i16>* %17733, align 2, !tbaa !396
  %17735 = getelementptr inbounds i16, i16* %17731, i64 -15
  %17736 = bitcast i16* %17735 to <16 x i16>*
  %17737 = load <16 x i16>, <16 x i16>* %17736, align 2, !tbaa !396
  %17738 = getelementptr inbounds i16, i16* %17731, i64 -32
  %17739 = bitcast i16* %17738 to <16 x i16>*
  %17740 = load <16 x i16>, <16 x i16>* %17739, align 2, !tbaa !396
  %17741 = getelementptr inbounds i16, i16* %17731, i64 -16
  %17742 = bitcast i16* %17741 to <16 x i16>*
  %17743 = load <16 x i16>, <16 x i16>* %17742, align 2, !tbaa !396
  %17744 = getelementptr inbounds i16, i16* %17731, i64 -30
  %17745 = bitcast i16* %17744 to <16 x i16>*
  %17746 = load <16 x i16>, <16 x i16>* %17745, align 2, !tbaa !396
  %17747 = getelementptr inbounds i16, i16* %17731, i64 -14
  %17748 = bitcast i16* %17747 to <16 x i16>*
  %17749 = load <16 x i16>, <16 x i16>* %17748, align 2, !tbaa !396
  %17750 = getelementptr inbounds i16, i16* %17731, i64 -28
  %17751 = bitcast i16* %17750 to <16 x i16>*
  %17752 = load <16 x i16>, <16 x i16>* %17751, align 2, !tbaa !396
  %17753 = getelementptr inbounds i16, i16* %17731, i64 -12
  %17754 = bitcast i16* %17753 to <16 x i16>*
  %17755 = load <16 x i16>, <16 x i16>* %17754, align 2, !tbaa !396
  %17756 = getelementptr inbounds i16, i16* %17731, i64 -29
  %17757 = bitcast i16* %17756 to <16 x i16>*
  %17758 = load <16 x i16>, <16 x i16>* %17757, align 2, !tbaa !396
  %17759 = getelementptr inbounds i16, i16* %17731, i64 -13
  %17760 = bitcast i16* %17759 to <16 x i16>*
  %17761 = load <16 x i16>, <16 x i16>* %17760, align 2, !tbaa !396
  %17762 = add <16 x i16> %17740, %17734
  %17763 = add <16 x i16> %17762, %17746
  %17764 = add <16 x i16> %17763, %17752
  %17765 = add <16 x i16> %17764, %17758
  %17766 = add <16 x i16> %17743, %17737
  %17767 = add <16 x i16> %17766, %17749
  %17768 = add <16 x i16> %17767, %17755
  %17769 = add <16 x i16> %17768, %17761
  %17770 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17765, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17771 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17769, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17772 = shufflevector <16 x i16> %17770, <16 x i16> %17771, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17773 = lshr <32 x i16> %17772, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17774 = shufflevector <32 x i16> %17773, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17775 = zext i32 %.pre-phi3468 to i64
  %17776 = mul nsw i64 %291, %17775
  %17777 = add nsw i64 %293, %17776
  %17778 = getelementptr inbounds i16, i16* %blur_x879, i64 %17777
  %17779 = getelementptr inbounds i16, i16* %17778, i64 -32
  %17780 = bitcast i16* %17779 to <16 x i16>*
  store <16 x i16> %17774, <16 x i16>* %17780, align 2, !tbaa !399
  %17781 = shufflevector <32 x i16> %17773, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17782 = getelementptr inbounds i16, i16* %17778, i64 -16
  %17783 = bitcast i16* %17782 to <16 x i16>*
  store <16 x i16> %17781, <16 x i16>* %17783, align 2, !tbaa !399
  %17784 = zext i32 %.pre-phi3490 to i64
  %17785 = mul nsw i64 %17784, %306
  %17786 = add nsw i64 %17785, %288
  %17787 = getelementptr inbounds i16, i16* %blur_x879, i64 %17786
  %17788 = getelementptr inbounds i16, i16* %17787, i64 -32
  %17789 = bitcast i16* %17788 to <16 x i16>*
  %17790 = load <16 x i16>, <16 x i16>* %17789, align 2, !tbaa !399
  %17791 = getelementptr inbounds i16, i16* %17787, i64 -16
  %17792 = bitcast i16* %17791 to <16 x i16>*
  %17793 = load <16 x i16>, <16 x i16>* %17792, align 2, !tbaa !399
  %17794 = zext i32 %.pre-phi3484 to i64
  %17795 = mul nsw i64 %17794, %306
  %17796 = add nsw i64 %17795, %288
  %17797 = getelementptr inbounds i16, i16* %blur_x879, i64 %17796
  %17798 = getelementptr inbounds i16, i16* %17797, i64 -32
  %17799 = bitcast i16* %17798 to <16 x i16>*
  %17800 = load <16 x i16>, <16 x i16>* %17799, align 2, !tbaa !399
  %17801 = getelementptr inbounds i16, i16* %17797, i64 -16
  %17802 = bitcast i16* %17801 to <16 x i16>*
  %17803 = load <16 x i16>, <16 x i16>* %17802, align 2, !tbaa !399
  %17804 = zext i32 %.pre-phi3496 to i64
  %17805 = mul nsw i64 %17804, %306
  %17806 = add nsw i64 %17805, %288
  %17807 = getelementptr inbounds i16, i16* %blur_x879, i64 %17806
  %17808 = getelementptr inbounds i16, i16* %17807, i64 -32
  %17809 = bitcast i16* %17808 to <16 x i16>*
  %17810 = load <16 x i16>, <16 x i16>* %17809, align 2, !tbaa !399
  %17811 = getelementptr inbounds i16, i16* %17807, i64 -16
  %17812 = bitcast i16* %17811 to <16 x i16>*
  %17813 = load <16 x i16>, <16 x i16>* %17812, align 2, !tbaa !399
  %17814 = mul nsw i64 %17775, %306
  %17815 = add nsw i64 %17814, %288
  %17816 = getelementptr inbounds i16, i16* %blur_x879, i64 %17815
  %17817 = getelementptr inbounds i16, i16* %17816, i64 -32
  %17818 = bitcast i16* %17817 to <16 x i16>*
  %17819 = load <16 x i16>, <16 x i16>* %17818, align 2, !tbaa !399
  %17820 = getelementptr inbounds i16, i16* %17816, i64 -16
  %17821 = bitcast i16* %17820 to <16 x i16>*
  %17822 = load <16 x i16>, <16 x i16>* %17821, align 2, !tbaa !399
  %17823 = zext i32 %.pre-phi3502 to i64
  %17824 = mul nsw i64 %17823, %306
  %17825 = add nsw i64 %17824, %288
  %17826 = getelementptr inbounds i16, i16* %blur_x879, i64 %17825
  %17827 = getelementptr inbounds i16, i16* %17826, i64 -32
  %17828 = bitcast i16* %17827 to <16 x i16>*
  %17829 = load <16 x i16>, <16 x i16>* %17828, align 2, !tbaa !399
  %17830 = getelementptr inbounds i16, i16* %17826, i64 -16
  %17831 = bitcast i16* %17830 to <16 x i16>*
  %17832 = load <16 x i16>, <16 x i16>* %17831, align 2, !tbaa !399
  %17833 = add <16 x i16> %17800, %17790
  %17834 = add <16 x i16> %17833, %17810
  %17835 = add <16 x i16> %17834, %17819
  %17836 = add <16 x i16> %17835, %17829
  %17837 = add <16 x i16> %17803, %17793
  %17838 = add <16 x i16> %17837, %17813
  %17839 = add <16 x i16> %17838, %17822
  %17840 = add <16 x i16> %17839, %17832
  %17841 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17836, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17842 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17840, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17843 = shufflevector <16 x i16> %17841, <16 x i16> %17842, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17844 = lshr <32 x i16> %17843, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17845 = shufflevector <32 x i16> %17844, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17846 = sext i32 %a353 to i64
  %17847 = add nsw i64 %17846, 4
  %17848 = mul nsw i64 %17847, %307
  %17849 = add nsw i64 %309, %17848
  %17850 = getelementptr inbounds i16, i16* %260, i64 %17849
  %17851 = getelementptr inbounds i16, i16* %17850, i64 -32
  %17852 = bitcast i16* %17851 to <16 x i16>*
  store <16 x i16> %17845, <16 x i16>* %17852, align 2, !tbaa !401
  %17853 = shufflevector <32 x i16> %17844, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17854 = getelementptr inbounds i16, i16* %17850, i64 -16
  %17855 = bitcast i16* %17854 to <16 x i16>*
  store <16 x i16> %17853, <16 x i16>* %17855, align 2, !tbaa !401
  br label %after_bb1173

"for blur_y.s0.x.x.rebased1188":                  ; preds = %"for blur_y.s0.x.x.rebased1188.preheader", %"consume blur_x1197"
  %indvars.iv3287 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1188.preheader" ], [ %indvars.iv.next3288, %"consume blur_x1197" ]
  %17856 = add nsw i64 %indvars.iv3287, %295
  %17857 = icmp slt i64 %17856, 1
  %17858 = trunc i64 %17856 to i32
  %17859 = shl nsw i32 %17858, 5
  %17860 = icmp sgt i32 %198, %17859
  %17861 = or i1 %17857, %17860
  br i1 %17861, label %"produce blur_x1195", label %"for blur_y.s0.x.x.rebased1188.consume blur_x1197_crit_edge"

"for blur_y.s0.x.x.rebased1188.consume blur_x1197_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1188"
  %.pre3505 = shl nsw i64 %17856, 5
  br label %"consume blur_x1197"

"end for blur_y.s0.x.x.rebased1189":              ; preds = %"consume blur_x1197", %after_bb1173
  br i1 %296, label %"for blur_y.s0.x.x.rebased1205.preheader", label %"end for blur_y.s0.x.x.rebased1206", !prof !386

"for blur_y.s0.x.x.rebased1205.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1189"
  %17862 = sext i32 %t1682886 to i64
  %17863 = zext i32 %.pre-phi3490 to i64
  %17864 = mul nsw i64 %17863, %306
  %17865 = sub nsw i64 %17864, %290
  %17866 = zext i32 %.pre-phi3484 to i64
  %17867 = mul nsw i64 %17866, %306
  %17868 = sub nsw i64 %17867, %290
  %17869 = zext i32 %.pre-phi3496 to i64
  %17870 = mul nsw i64 %17869, %306
  %17871 = sub nsw i64 %17870, %290
  %17872 = zext i32 %.pre-phi3468 to i64
  %17873 = mul nsw i64 %17872, %306
  %17874 = sub nsw i64 %17873, %290
  %17875 = zext i32 %.pre-phi3502 to i64
  %17876 = mul nsw i64 %17875, %306
  %17877 = sub nsw i64 %17876, %290
  %17878 = sext i32 %a353 to i64
  %17879 = add nsw i64 %17878, 4
  %17880 = mul nsw i64 %17879, %307
  %17881 = add nsw i64 %17880, %310
  br label %"for blur_y.s0.x.x.rebased1205"

"produce blur_x1195":                             ; preds = %"for blur_y.s0.x.x.rebased1188"
  %t7761196 = add nsw i32 %17859, %t17691185
  %17882 = sext i32 %t7761196 to i64
  %17883 = getelementptr inbounds i16, i16* %read_input822, i64 %17882
  %17884 = getelementptr inbounds i16, i16* %17883, i64 1
  %17885 = bitcast i16* %17884 to <16 x i16>*
  %17886 = load <16 x i16>, <16 x i16>* %17885, align 2, !tbaa !396
  %17887 = getelementptr inbounds i16, i16* %17883, i64 17
  %17888 = bitcast i16* %17887 to <16 x i16>*
  %17889 = load <16 x i16>, <16 x i16>* %17888, align 2, !tbaa !396
  %17890 = bitcast i16* %17883 to <16 x i16>*
  %17891 = load <16 x i16>, <16 x i16>* %17890, align 2, !tbaa !396
  %17892 = getelementptr inbounds i16, i16* %17883, i64 16
  %17893 = bitcast i16* %17892 to <16 x i16>*
  %17894 = load <16 x i16>, <16 x i16>* %17893, align 2, !tbaa !396
  %17895 = getelementptr inbounds i16, i16* %17883, i64 2
  %17896 = bitcast i16* %17895 to <16 x i16>*
  %17897 = load <16 x i16>, <16 x i16>* %17896, align 2, !tbaa !396
  %17898 = getelementptr inbounds i16, i16* %17883, i64 18
  %17899 = bitcast i16* %17898 to <16 x i16>*
  %17900 = load <16 x i16>, <16 x i16>* %17899, align 2, !tbaa !396
  %17901 = getelementptr inbounds i16, i16* %17883, i64 4
  %17902 = bitcast i16* %17901 to <16 x i16>*
  %17903 = load <16 x i16>, <16 x i16>* %17902, align 2, !tbaa !396
  %17904 = getelementptr inbounds i16, i16* %17883, i64 20
  %17905 = bitcast i16* %17904 to <16 x i16>*
  %17906 = load <16 x i16>, <16 x i16>* %17905, align 2, !tbaa !396
  %17907 = getelementptr inbounds i16, i16* %17883, i64 3
  %17908 = bitcast i16* %17907 to <16 x i16>*
  %17909 = load <16 x i16>, <16 x i16>* %17908, align 2, !tbaa !396
  %17910 = getelementptr inbounds i16, i16* %17883, i64 19
  %17911 = bitcast i16* %17910 to <16 x i16>*
  %17912 = load <16 x i16>, <16 x i16>* %17911, align 2, !tbaa !396
  %17913 = add <16 x i16> %17891, %17886
  %17914 = add <16 x i16> %17913, %17897
  %17915 = add <16 x i16> %17914, %17903
  %17916 = add <16 x i16> %17915, %17909
  %17917 = add <16 x i16> %17894, %17889
  %17918 = add <16 x i16> %17917, %17900
  %17919 = add <16 x i16> %17918, %17906
  %17920 = add <16 x i16> %17919, %17912
  %17921 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17916, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17922 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17920, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17923 = shufflevector <16 x i16> %17921, <16 x i16> %17922, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17924 = lshr <32 x i16> %17923, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17925 = shufflevector <32 x i16> %17924, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17926 = shl nsw i64 %17856, 5
  %17927 = add nsw i64 %17926, %17711
  %17928 = getelementptr inbounds i16, i16* %blur_x879, i64 %17927
  %17929 = bitcast i16* %17928 to <16 x i16>*
  store <16 x i16> %17925, <16 x i16>* %17929, align 2, !tbaa !399
  %17930 = shufflevector <32 x i16> %17924, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17931 = getelementptr inbounds i16, i16* %17928, i64 16
  %17932 = bitcast i16* %17931 to <16 x i16>*
  store <16 x i16> %17930, <16 x i16>* %17932, align 2, !tbaa !399
  br label %"consume blur_x1197"

"consume blur_x1197":                             ; preds = %"for blur_y.s0.x.x.rebased1188.consume blur_x1197_crit_edge", %"produce blur_x1195"
  %.pre-phi3506 = phi i64 [ %.pre3505, %"for blur_y.s0.x.x.rebased1188.consume blur_x1197_crit_edge" ], [ %17926, %"produce blur_x1195" ]
  %17933 = add nsw i64 %17714, %.pre-phi3506
  %17934 = getelementptr inbounds i16, i16* %blur_x879, i64 %17933
  %17935 = bitcast i16* %17934 to <16 x i16>*
  %17936 = load <16 x i16>, <16 x i16>* %17935, align 2, !tbaa !399
  %17937 = getelementptr inbounds i16, i16* %17934, i64 16
  %17938 = bitcast i16* %17937 to <16 x i16>*
  %17939 = load <16 x i16>, <16 x i16>* %17938, align 2, !tbaa !399
  %17940 = add nsw i64 %17717, %.pre-phi3506
  %17941 = getelementptr inbounds i16, i16* %blur_x879, i64 %17940
  %17942 = bitcast i16* %17941 to <16 x i16>*
  %17943 = load <16 x i16>, <16 x i16>* %17942, align 2, !tbaa !399
  %17944 = getelementptr inbounds i16, i16* %17941, i64 16
  %17945 = bitcast i16* %17944 to <16 x i16>*
  %17946 = load <16 x i16>, <16 x i16>* %17945, align 2, !tbaa !399
  %17947 = add nsw i64 %17720, %.pre-phi3506
  %17948 = getelementptr inbounds i16, i16* %blur_x879, i64 %17947
  %17949 = bitcast i16* %17948 to <16 x i16>*
  %17950 = load <16 x i16>, <16 x i16>* %17949, align 2, !tbaa !399
  %17951 = getelementptr inbounds i16, i16* %17948, i64 16
  %17952 = bitcast i16* %17951 to <16 x i16>*
  %17953 = load <16 x i16>, <16 x i16>* %17952, align 2, !tbaa !399
  %17954 = add nsw i64 %17723, %.pre-phi3506
  %17955 = getelementptr inbounds i16, i16* %blur_x879, i64 %17954
  %17956 = bitcast i16* %17955 to <16 x i16>*
  %17957 = load <16 x i16>, <16 x i16>* %17956, align 2, !tbaa !399
  %17958 = getelementptr inbounds i16, i16* %17955, i64 16
  %17959 = bitcast i16* %17958 to <16 x i16>*
  %17960 = load <16 x i16>, <16 x i16>* %17959, align 2, !tbaa !399
  %17961 = add nsw i64 %17726, %.pre-phi3506
  %17962 = getelementptr inbounds i16, i16* %blur_x879, i64 %17961
  %17963 = bitcast i16* %17962 to <16 x i16>*
  %17964 = load <16 x i16>, <16 x i16>* %17963, align 2, !tbaa !399
  %17965 = getelementptr inbounds i16, i16* %17962, i64 16
  %17966 = bitcast i16* %17965 to <16 x i16>*
  %17967 = load <16 x i16>, <16 x i16>* %17966, align 2, !tbaa !399
  %17968 = add <16 x i16> %17943, %17936
  %17969 = add <16 x i16> %17968, %17950
  %17970 = add <16 x i16> %17969, %17957
  %17971 = add <16 x i16> %17970, %17964
  %17972 = add <16 x i16> %17946, %17939
  %17973 = add <16 x i16> %17972, %17953
  %17974 = add <16 x i16> %17973, %17960
  %17975 = add <16 x i16> %17974, %17967
  %17976 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17971, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17977 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17975, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %17978 = shufflevector <16 x i16> %17976, <16 x i16> %17977, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17979 = lshr <32 x i16> %17978, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %17980 = shufflevector <32 x i16> %17979, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17981 = add nsw i64 %17730, %.pre-phi3506
  %17982 = getelementptr inbounds i16, i16* %260, i64 %17981
  %17983 = bitcast i16* %17982 to <16 x i16>*
  store <16 x i16> %17980, <16 x i16>* %17983, align 2, !tbaa !401
  %17984 = shufflevector <32 x i16> %17979, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17985 = getelementptr inbounds i16, i16* %17982, i64 16
  %17986 = bitcast i16* %17985 to <16 x i16>*
  store <16 x i16> %17984, <16 x i16>* %17986, align 2, !tbaa !401
  %indvars.iv.next3288 = add nuw nsw i64 %indvars.iv3287, 1
  %.not2596 = icmp eq i64 %indvars.iv.next3288, %378
  br i1 %.not2596, label %"end for blur_y.s0.x.x.rebased1189", label %"for blur_y.s0.x.x.rebased1188"

"for blur_y.s0.x.x.rebased1205":                  ; preds = %"for blur_y.s0.x.x.rebased1205.preheader", %"consume blur_x1215"
  %blur_y.s0.x.x.rebased1207 = phi i32 [ %18099, %"consume blur_x1215" ], [ 0, %"for blur_y.s0.x.x.rebased1205.preheader" ]
  %17987 = add nsw i32 %blur_y.s0.x.x.rebased1207, %t1626814
  %a460 = shl nsw i32 %17987, 5
  %17988 = icmp sgt i32 %a341, %a460
  %b466 = select i1 %17988, i32 %a460, i32 %a341
  %17989 = icmp slt i32 %17987, 1
  %17990 = icmp sgt i32 %198, %a460
  %17991 = or i1 %17989, %17990
  br i1 %17991, label %"produce blur_x1212", label %"consume blur_x1215"

"end for blur_y.s0.x.x.rebased1206":              ; preds = %"consume blur_x1215", %"end for blur_y.s0.x.x.rebased1189"
  br i1 %228, label %"produce blur_x1219", label %after_bb1216

"produce blur_x1212":                             ; preds = %"for blur_y.s0.x.x.rebased1205"
  %17992 = icmp slt i32 %b466, %198
  %blur_x.s0.x.v1.base.s1213 = select i1 %17992, i32 %b466, i32 %198
  %t7811214 = add nsw i32 %blur_x.s0.x.v1.base.s1213, %t17691185
  %17993 = sext i32 %t7811214 to i64
  %17994 = getelementptr inbounds i16, i16* %read_input822, i64 %17993
  %17995 = getelementptr inbounds i16, i16* %17994, i64 1
  %17996 = bitcast i16* %17995 to <16 x i16>*
  %17997 = load <16 x i16>, <16 x i16>* %17996, align 2, !tbaa !396
  %17998 = getelementptr inbounds i16, i16* %17994, i64 17
  %17999 = bitcast i16* %17998 to <16 x i16>*
  %18000 = load <16 x i16>, <16 x i16>* %17999, align 2, !tbaa !396
  %18001 = bitcast i16* %17994 to <16 x i16>*
  %18002 = load <16 x i16>, <16 x i16>* %18001, align 2, !tbaa !396
  %18003 = getelementptr inbounds i16, i16* %17994, i64 16
  %18004 = bitcast i16* %18003 to <16 x i16>*
  %18005 = load <16 x i16>, <16 x i16>* %18004, align 2, !tbaa !396
  %18006 = getelementptr inbounds i16, i16* %17994, i64 2
  %18007 = bitcast i16* %18006 to <16 x i16>*
  %18008 = load <16 x i16>, <16 x i16>* %18007, align 2, !tbaa !396
  %18009 = getelementptr inbounds i16, i16* %17994, i64 18
  %18010 = bitcast i16* %18009 to <16 x i16>*
  %18011 = load <16 x i16>, <16 x i16>* %18010, align 2, !tbaa !396
  %18012 = getelementptr inbounds i16, i16* %17994, i64 4
  %18013 = bitcast i16* %18012 to <16 x i16>*
  %18014 = load <16 x i16>, <16 x i16>* %18013, align 2, !tbaa !396
  %18015 = getelementptr inbounds i16, i16* %17994, i64 20
  %18016 = bitcast i16* %18015 to <16 x i16>*
  %18017 = load <16 x i16>, <16 x i16>* %18016, align 2, !tbaa !396
  %18018 = getelementptr inbounds i16, i16* %17994, i64 3
  %18019 = bitcast i16* %18018 to <16 x i16>*
  %18020 = load <16 x i16>, <16 x i16>* %18019, align 2, !tbaa !396
  %18021 = getelementptr inbounds i16, i16* %17994, i64 19
  %18022 = bitcast i16* %18021 to <16 x i16>*
  %18023 = load <16 x i16>, <16 x i16>* %18022, align 2, !tbaa !396
  %18024 = add <16 x i16> %18002, %17997
  %18025 = add <16 x i16> %18024, %18008
  %18026 = add <16 x i16> %18025, %18014
  %18027 = add <16 x i16> %18026, %18020
  %18028 = add <16 x i16> %18005, %18000
  %18029 = add <16 x i16> %18028, %18011
  %18030 = add <16 x i16> %18029, %18017
  %18031 = add <16 x i16> %18030, %18023
  %18032 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18027, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18033 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18031, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18034 = shufflevector <16 x i16> %18032, <16 x i16> %18033, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18035 = lshr <32 x i16> %18034, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18036 = shufflevector <32 x i16> %18035, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18037 = sext i32 %blur_x.s0.x.v1.base.s1213 to i64
  %18038 = add nsw i64 %18037, %17862
  %18039 = getelementptr inbounds i16, i16* %blur_x879, i64 %18038
  %18040 = bitcast i16* %18039 to <16 x i16>*
  store <16 x i16> %18036, <16 x i16>* %18040, align 2, !tbaa !399
  %18041 = shufflevector <32 x i16> %18035, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18042 = getelementptr inbounds i16, i16* %18039, i64 16
  %18043 = bitcast i16* %18042 to <16 x i16>*
  store <16 x i16> %18041, <16 x i16>* %18043, align 2, !tbaa !399
  br label %"consume blur_x1215"

"consume blur_x1215":                             ; preds = %"for blur_y.s0.x.x.rebased1205", %"produce blur_x1212"
  %18044 = sext i32 %b466 to i64
  %18045 = add nsw i64 %17865, %18044
  %18046 = getelementptr inbounds i16, i16* %blur_x879, i64 %18045
  %18047 = bitcast i16* %18046 to <16 x i16>*
  %18048 = load <16 x i16>, <16 x i16>* %18047, align 2, !tbaa !399
  %18049 = getelementptr inbounds i16, i16* %18046, i64 16
  %18050 = bitcast i16* %18049 to <16 x i16>*
  %18051 = load <16 x i16>, <16 x i16>* %18050, align 2, !tbaa !399
  %18052 = add nsw i64 %17868, %18044
  %18053 = getelementptr inbounds i16, i16* %blur_x879, i64 %18052
  %18054 = bitcast i16* %18053 to <16 x i16>*
  %18055 = load <16 x i16>, <16 x i16>* %18054, align 2, !tbaa !399
  %18056 = getelementptr inbounds i16, i16* %18053, i64 16
  %18057 = bitcast i16* %18056 to <16 x i16>*
  %18058 = load <16 x i16>, <16 x i16>* %18057, align 2, !tbaa !399
  %18059 = add nsw i64 %17871, %18044
  %18060 = getelementptr inbounds i16, i16* %blur_x879, i64 %18059
  %18061 = bitcast i16* %18060 to <16 x i16>*
  %18062 = load <16 x i16>, <16 x i16>* %18061, align 2, !tbaa !399
  %18063 = getelementptr inbounds i16, i16* %18060, i64 16
  %18064 = bitcast i16* %18063 to <16 x i16>*
  %18065 = load <16 x i16>, <16 x i16>* %18064, align 2, !tbaa !399
  %18066 = add nsw i64 %17874, %18044
  %18067 = getelementptr inbounds i16, i16* %blur_x879, i64 %18066
  %18068 = bitcast i16* %18067 to <16 x i16>*
  %18069 = load <16 x i16>, <16 x i16>* %18068, align 2, !tbaa !399
  %18070 = getelementptr inbounds i16, i16* %18067, i64 16
  %18071 = bitcast i16* %18070 to <16 x i16>*
  %18072 = load <16 x i16>, <16 x i16>* %18071, align 2, !tbaa !399
  %18073 = add nsw i64 %17877, %18044
  %18074 = getelementptr inbounds i16, i16* %blur_x879, i64 %18073
  %18075 = bitcast i16* %18074 to <16 x i16>*
  %18076 = load <16 x i16>, <16 x i16>* %18075, align 2, !tbaa !399
  %18077 = getelementptr inbounds i16, i16* %18074, i64 16
  %18078 = bitcast i16* %18077 to <16 x i16>*
  %18079 = load <16 x i16>, <16 x i16>* %18078, align 2, !tbaa !399
  %18080 = add <16 x i16> %18055, %18048
  %18081 = add <16 x i16> %18080, %18062
  %18082 = add <16 x i16> %18081, %18069
  %18083 = add <16 x i16> %18082, %18076
  %18084 = add <16 x i16> %18058, %18051
  %18085 = add <16 x i16> %18084, %18065
  %18086 = add <16 x i16> %18085, %18072
  %18087 = add <16 x i16> %18086, %18079
  %18088 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18083, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18089 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18087, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18090 = shufflevector <16 x i16> %18088, <16 x i16> %18089, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18091 = lshr <32 x i16> %18090, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18092 = shufflevector <32 x i16> %18091, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18093 = add nsw i64 %17881, %18044
  %18094 = getelementptr inbounds i16, i16* %260, i64 %18093
  %18095 = bitcast i16* %18094 to <16 x i16>*
  store <16 x i16> %18092, <16 x i16>* %18095, align 2, !tbaa !401
  %18096 = shufflevector <32 x i16> %18091, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18097 = getelementptr inbounds i16, i16* %18094, i64 16
  %18098 = bitcast i16* %18097 to <16 x i16>*
  store <16 x i16> %18096, <16 x i16>* %18098, align 2, !tbaa !401
  %18099 = add nuw nsw i32 %blur_y.s0.x.x.rebased1207, 1
  %.not2595 = icmp eq i32 %18099, %t1683899
  br i1 %.not2595, label %"end for blur_y.s0.x.x.rebased1206", label %"for blur_y.s0.x.x.rebased1205"

after_bb1216:                                     ; preds = %"end for blur_y.s0.x.x.rebased1206", %"produce blur_x1219"
  br i1 %294, label %"for blur_y.s0.x.x.rebased1231.preheader", label %"end for blur_y.s0.x.x.rebased1232", !prof !386

"for blur_y.s0.x.x.rebased1231.preheader":        ; preds = %after_bb1216
  %18100 = sext i32 %t1688916 to i64
  %18101 = zext i32 %.pre-phi3496 to i64
  %18102 = mul nsw i64 %18101, %306
  %18103 = sub nsw i64 %18102, %290
  %18104 = zext i32 %.pre-phi3490 to i64
  %18105 = mul nsw i64 %18104, %306
  %18106 = sub nsw i64 %18105, %290
  %18107 = zext i32 %.pre-phi3502 to i64
  %18108 = mul nsw i64 %18107, %306
  %18109 = sub nsw i64 %18108, %290
  %18110 = zext i32 %.pre-phi3472 to i64
  %18111 = mul nsw i64 %18110, %306
  %18112 = sub nsw i64 %18111, %290
  %18113 = zext i32 %.pre-phi3468 to i64
  %18114 = mul nsw i64 %18113, %306
  %18115 = sub nsw i64 %18114, %290
  %18116 = sext i32 %a353 to i64
  %18117 = add nsw i64 %18116, 5
  %18118 = mul nsw i64 %18117, %307
  %18119 = add nsw i64 %18118, %310
  br label %"for blur_y.s0.x.x.rebased1231"

"produce blur_x1219":                             ; preds = %"end for blur_y.s0.x.x.rebased1206"
  %18120 = getelementptr inbounds i16, i16* %read_input822, i64 %319
  %18121 = getelementptr inbounds i16, i16* %18120, i64 -31
  %18122 = bitcast i16* %18121 to <16 x i16>*
  %18123 = load <16 x i16>, <16 x i16>* %18122, align 2, !tbaa !396
  %18124 = getelementptr inbounds i16, i16* %18120, i64 -15
  %18125 = bitcast i16* %18124 to <16 x i16>*
  %18126 = load <16 x i16>, <16 x i16>* %18125, align 2, !tbaa !396
  %18127 = getelementptr inbounds i16, i16* %18120, i64 -32
  %18128 = bitcast i16* %18127 to <16 x i16>*
  %18129 = load <16 x i16>, <16 x i16>* %18128, align 2, !tbaa !396
  %18130 = getelementptr inbounds i16, i16* %18120, i64 -16
  %18131 = bitcast i16* %18130 to <16 x i16>*
  %18132 = load <16 x i16>, <16 x i16>* %18131, align 2, !tbaa !396
  %18133 = getelementptr inbounds i16, i16* %18120, i64 -30
  %18134 = bitcast i16* %18133 to <16 x i16>*
  %18135 = load <16 x i16>, <16 x i16>* %18134, align 2, !tbaa !396
  %18136 = getelementptr inbounds i16, i16* %18120, i64 -14
  %18137 = bitcast i16* %18136 to <16 x i16>*
  %18138 = load <16 x i16>, <16 x i16>* %18137, align 2, !tbaa !396
  %18139 = getelementptr inbounds i16, i16* %18120, i64 -28
  %18140 = bitcast i16* %18139 to <16 x i16>*
  %18141 = load <16 x i16>, <16 x i16>* %18140, align 2, !tbaa !396
  %18142 = getelementptr inbounds i16, i16* %18120, i64 -12
  %18143 = bitcast i16* %18142 to <16 x i16>*
  %18144 = load <16 x i16>, <16 x i16>* %18143, align 2, !tbaa !396
  %18145 = getelementptr inbounds i16, i16* %18120, i64 -29
  %18146 = bitcast i16* %18145 to <16 x i16>*
  %18147 = load <16 x i16>, <16 x i16>* %18146, align 2, !tbaa !396
  %18148 = getelementptr inbounds i16, i16* %18120, i64 -13
  %18149 = bitcast i16* %18148 to <16 x i16>*
  %18150 = load <16 x i16>, <16 x i16>* %18149, align 2, !tbaa !396
  %18151 = add <16 x i16> %18129, %18123
  %18152 = add <16 x i16> %18151, %18135
  %18153 = add <16 x i16> %18152, %18141
  %18154 = add <16 x i16> %18153, %18147
  %18155 = add <16 x i16> %18132, %18126
  %18156 = add <16 x i16> %18155, %18138
  %18157 = add <16 x i16> %18156, %18144
  %18158 = add <16 x i16> %18157, %18150
  %18159 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18154, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18160 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18158, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18161 = shufflevector <16 x i16> %18159, <16 x i16> %18160, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18162 = lshr <32 x i16> %18161, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18163 = shufflevector <32 x i16> %18162, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18164 = zext i32 %.pre-phi3472 to i64
  %18165 = mul nsw i64 %291, %18164
  %18166 = add nsw i64 %293, %18165
  %18167 = getelementptr inbounds i16, i16* %blur_x879, i64 %18166
  %18168 = getelementptr inbounds i16, i16* %18167, i64 -32
  %18169 = bitcast i16* %18168 to <16 x i16>*
  store <16 x i16> %18163, <16 x i16>* %18169, align 2, !tbaa !399
  %18170 = shufflevector <32 x i16> %18162, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18171 = getelementptr inbounds i16, i16* %18167, i64 -16
  %18172 = bitcast i16* %18171 to <16 x i16>*
  store <16 x i16> %18170, <16 x i16>* %18172, align 2, !tbaa !399
  %18173 = zext i32 %.pre-phi3496 to i64
  %18174 = mul nsw i64 %18173, %306
  %18175 = add nsw i64 %18174, %288
  %18176 = getelementptr inbounds i16, i16* %blur_x879, i64 %18175
  %18177 = getelementptr inbounds i16, i16* %18176, i64 -32
  %18178 = bitcast i16* %18177 to <16 x i16>*
  %18179 = load <16 x i16>, <16 x i16>* %18178, align 2, !tbaa !399
  %18180 = getelementptr inbounds i16, i16* %18176, i64 -16
  %18181 = bitcast i16* %18180 to <16 x i16>*
  %18182 = load <16 x i16>, <16 x i16>* %18181, align 2, !tbaa !399
  %18183 = zext i32 %.pre-phi3490 to i64
  %18184 = mul nsw i64 %18183, %306
  %18185 = add nsw i64 %18184, %288
  %18186 = getelementptr inbounds i16, i16* %blur_x879, i64 %18185
  %18187 = getelementptr inbounds i16, i16* %18186, i64 -32
  %18188 = bitcast i16* %18187 to <16 x i16>*
  %18189 = load <16 x i16>, <16 x i16>* %18188, align 2, !tbaa !399
  %18190 = getelementptr inbounds i16, i16* %18186, i64 -16
  %18191 = bitcast i16* %18190 to <16 x i16>*
  %18192 = load <16 x i16>, <16 x i16>* %18191, align 2, !tbaa !399
  %18193 = zext i32 %.pre-phi3502 to i64
  %18194 = mul nsw i64 %18193, %306
  %18195 = add nsw i64 %18194, %288
  %18196 = getelementptr inbounds i16, i16* %blur_x879, i64 %18195
  %18197 = getelementptr inbounds i16, i16* %18196, i64 -32
  %18198 = bitcast i16* %18197 to <16 x i16>*
  %18199 = load <16 x i16>, <16 x i16>* %18198, align 2, !tbaa !399
  %18200 = getelementptr inbounds i16, i16* %18196, i64 -16
  %18201 = bitcast i16* %18200 to <16 x i16>*
  %18202 = load <16 x i16>, <16 x i16>* %18201, align 2, !tbaa !399
  %18203 = mul nsw i64 %18164, %306
  %18204 = add nsw i64 %18203, %288
  %18205 = getelementptr inbounds i16, i16* %blur_x879, i64 %18204
  %18206 = getelementptr inbounds i16, i16* %18205, i64 -32
  %18207 = bitcast i16* %18206 to <16 x i16>*
  %18208 = load <16 x i16>, <16 x i16>* %18207, align 2, !tbaa !399
  %18209 = getelementptr inbounds i16, i16* %18205, i64 -16
  %18210 = bitcast i16* %18209 to <16 x i16>*
  %18211 = load <16 x i16>, <16 x i16>* %18210, align 2, !tbaa !399
  %18212 = zext i32 %.pre-phi3468 to i64
  %18213 = mul nsw i64 %18212, %306
  %18214 = add nsw i64 %18213, %288
  %18215 = getelementptr inbounds i16, i16* %blur_x879, i64 %18214
  %18216 = getelementptr inbounds i16, i16* %18215, i64 -32
  %18217 = bitcast i16* %18216 to <16 x i16>*
  %18218 = load <16 x i16>, <16 x i16>* %18217, align 2, !tbaa !399
  %18219 = getelementptr inbounds i16, i16* %18215, i64 -16
  %18220 = bitcast i16* %18219 to <16 x i16>*
  %18221 = load <16 x i16>, <16 x i16>* %18220, align 2, !tbaa !399
  %18222 = add <16 x i16> %18189, %18179
  %18223 = add <16 x i16> %18222, %18199
  %18224 = add <16 x i16> %18223, %18208
  %18225 = add <16 x i16> %18224, %18218
  %18226 = add <16 x i16> %18192, %18182
  %18227 = add <16 x i16> %18226, %18202
  %18228 = add <16 x i16> %18227, %18211
  %18229 = add <16 x i16> %18228, %18221
  %18230 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18225, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18231 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18229, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18232 = shufflevector <16 x i16> %18230, <16 x i16> %18231, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18233 = lshr <32 x i16> %18232, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18234 = shufflevector <32 x i16> %18233, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18235 = sext i32 %a353 to i64
  %18236 = add nsw i64 %18235, 5
  %18237 = mul nsw i64 %18236, %307
  %18238 = add nsw i64 %309, %18237
  %18239 = getelementptr inbounds i16, i16* %260, i64 %18238
  %18240 = getelementptr inbounds i16, i16* %18239, i64 -32
  %18241 = bitcast i16* %18240 to <16 x i16>*
  store <16 x i16> %18234, <16 x i16>* %18241, align 2, !tbaa !401
  %18242 = shufflevector <32 x i16> %18233, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18243 = getelementptr inbounds i16, i16* %18239, i64 -16
  %18244 = bitcast i16* %18243 to <16 x i16>*
  store <16 x i16> %18242, <16 x i16>* %18244, align 2, !tbaa !401
  br label %after_bb1216

"for blur_y.s0.x.x.rebased1231":                  ; preds = %"for blur_y.s0.x.x.rebased1231.preheader", %"consume blur_x1240"
  %indvars.iv3290 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1231.preheader" ], [ %indvars.iv.next3291, %"consume blur_x1240" ]
  %18245 = add nsw i64 %indvars.iv3290, %295
  %18246 = icmp slt i64 %18245, 1
  %18247 = trunc i64 %18245 to i32
  %18248 = shl nsw i32 %18247, 5
  %18249 = icmp sgt i32 %198, %18248
  %18250 = or i1 %18246, %18249
  br i1 %18250, label %"produce blur_x1238", label %"for blur_y.s0.x.x.rebased1231.consume blur_x1240_crit_edge"

"for blur_y.s0.x.x.rebased1231.consume blur_x1240_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1231"
  %.pre3507 = shl nsw i64 %18245, 5
  br label %"consume blur_x1240"

"end for blur_y.s0.x.x.rebased1232":              ; preds = %"consume blur_x1240", %after_bb1216
  br i1 %296, label %"for blur_y.s0.x.x.rebased1248.preheader", label %"end for blur_y.s0.x.x.rebased1249", !prof !386

"for blur_y.s0.x.x.rebased1248.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1232"
  %18251 = sext i32 %t1688916 to i64
  %18252 = zext i32 %.pre-phi3496 to i64
  %18253 = mul nsw i64 %18252, %306
  %18254 = sub nsw i64 %18253, %290
  %18255 = zext i32 %.pre-phi3490 to i64
  %18256 = mul nsw i64 %18255, %306
  %18257 = sub nsw i64 %18256, %290
  %18258 = zext i32 %.pre-phi3502 to i64
  %18259 = mul nsw i64 %18258, %306
  %18260 = sub nsw i64 %18259, %290
  %18261 = zext i32 %.pre-phi3472 to i64
  %18262 = mul nsw i64 %18261, %306
  %18263 = sub nsw i64 %18262, %290
  %18264 = zext i32 %.pre-phi3468 to i64
  %18265 = mul nsw i64 %18264, %306
  %18266 = sub nsw i64 %18265, %290
  %18267 = sext i32 %a353 to i64
  %18268 = add nsw i64 %18267, 5
  %18269 = mul nsw i64 %18268, %307
  %18270 = add nsw i64 %18269, %310
  br label %"for blur_y.s0.x.x.rebased1248"

"produce blur_x1238":                             ; preds = %"for blur_y.s0.x.x.rebased1231"
  %t7921239 = add nsw i32 %18248, %t17851228
  %18271 = sext i32 %t7921239 to i64
  %18272 = getelementptr inbounds i16, i16* %read_input822, i64 %18271
  %18273 = getelementptr inbounds i16, i16* %18272, i64 1
  %18274 = bitcast i16* %18273 to <16 x i16>*
  %18275 = load <16 x i16>, <16 x i16>* %18274, align 2, !tbaa !396
  %18276 = getelementptr inbounds i16, i16* %18272, i64 17
  %18277 = bitcast i16* %18276 to <16 x i16>*
  %18278 = load <16 x i16>, <16 x i16>* %18277, align 2, !tbaa !396
  %18279 = bitcast i16* %18272 to <16 x i16>*
  %18280 = load <16 x i16>, <16 x i16>* %18279, align 2, !tbaa !396
  %18281 = getelementptr inbounds i16, i16* %18272, i64 16
  %18282 = bitcast i16* %18281 to <16 x i16>*
  %18283 = load <16 x i16>, <16 x i16>* %18282, align 2, !tbaa !396
  %18284 = getelementptr inbounds i16, i16* %18272, i64 2
  %18285 = bitcast i16* %18284 to <16 x i16>*
  %18286 = load <16 x i16>, <16 x i16>* %18285, align 2, !tbaa !396
  %18287 = getelementptr inbounds i16, i16* %18272, i64 18
  %18288 = bitcast i16* %18287 to <16 x i16>*
  %18289 = load <16 x i16>, <16 x i16>* %18288, align 2, !tbaa !396
  %18290 = getelementptr inbounds i16, i16* %18272, i64 4
  %18291 = bitcast i16* %18290 to <16 x i16>*
  %18292 = load <16 x i16>, <16 x i16>* %18291, align 2, !tbaa !396
  %18293 = getelementptr inbounds i16, i16* %18272, i64 20
  %18294 = bitcast i16* %18293 to <16 x i16>*
  %18295 = load <16 x i16>, <16 x i16>* %18294, align 2, !tbaa !396
  %18296 = getelementptr inbounds i16, i16* %18272, i64 3
  %18297 = bitcast i16* %18296 to <16 x i16>*
  %18298 = load <16 x i16>, <16 x i16>* %18297, align 2, !tbaa !396
  %18299 = getelementptr inbounds i16, i16* %18272, i64 19
  %18300 = bitcast i16* %18299 to <16 x i16>*
  %18301 = load <16 x i16>, <16 x i16>* %18300, align 2, !tbaa !396
  %18302 = add <16 x i16> %18280, %18275
  %18303 = add <16 x i16> %18302, %18286
  %18304 = add <16 x i16> %18303, %18292
  %18305 = add <16 x i16> %18304, %18298
  %18306 = add <16 x i16> %18283, %18278
  %18307 = add <16 x i16> %18306, %18289
  %18308 = add <16 x i16> %18307, %18295
  %18309 = add <16 x i16> %18308, %18301
  %18310 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18305, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18311 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18309, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18312 = shufflevector <16 x i16> %18310, <16 x i16> %18311, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18313 = lshr <32 x i16> %18312, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18314 = shufflevector <32 x i16> %18313, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18315 = shl nsw i64 %18245, 5
  %18316 = add nsw i64 %18315, %18100
  %18317 = getelementptr inbounds i16, i16* %blur_x879, i64 %18316
  %18318 = bitcast i16* %18317 to <16 x i16>*
  store <16 x i16> %18314, <16 x i16>* %18318, align 2, !tbaa !399
  %18319 = shufflevector <32 x i16> %18313, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18320 = getelementptr inbounds i16, i16* %18317, i64 16
  %18321 = bitcast i16* %18320 to <16 x i16>*
  store <16 x i16> %18319, <16 x i16>* %18321, align 2, !tbaa !399
  br label %"consume blur_x1240"

"consume blur_x1240":                             ; preds = %"for blur_y.s0.x.x.rebased1231.consume blur_x1240_crit_edge", %"produce blur_x1238"
  %.pre-phi3508 = phi i64 [ %.pre3507, %"for blur_y.s0.x.x.rebased1231.consume blur_x1240_crit_edge" ], [ %18315, %"produce blur_x1238" ]
  %18322 = add nsw i64 %18103, %.pre-phi3508
  %18323 = getelementptr inbounds i16, i16* %blur_x879, i64 %18322
  %18324 = bitcast i16* %18323 to <16 x i16>*
  %18325 = load <16 x i16>, <16 x i16>* %18324, align 2, !tbaa !399
  %18326 = getelementptr inbounds i16, i16* %18323, i64 16
  %18327 = bitcast i16* %18326 to <16 x i16>*
  %18328 = load <16 x i16>, <16 x i16>* %18327, align 2, !tbaa !399
  %18329 = add nsw i64 %18106, %.pre-phi3508
  %18330 = getelementptr inbounds i16, i16* %blur_x879, i64 %18329
  %18331 = bitcast i16* %18330 to <16 x i16>*
  %18332 = load <16 x i16>, <16 x i16>* %18331, align 2, !tbaa !399
  %18333 = getelementptr inbounds i16, i16* %18330, i64 16
  %18334 = bitcast i16* %18333 to <16 x i16>*
  %18335 = load <16 x i16>, <16 x i16>* %18334, align 2, !tbaa !399
  %18336 = add nsw i64 %18109, %.pre-phi3508
  %18337 = getelementptr inbounds i16, i16* %blur_x879, i64 %18336
  %18338 = bitcast i16* %18337 to <16 x i16>*
  %18339 = load <16 x i16>, <16 x i16>* %18338, align 2, !tbaa !399
  %18340 = getelementptr inbounds i16, i16* %18337, i64 16
  %18341 = bitcast i16* %18340 to <16 x i16>*
  %18342 = load <16 x i16>, <16 x i16>* %18341, align 2, !tbaa !399
  %18343 = add nsw i64 %18112, %.pre-phi3508
  %18344 = getelementptr inbounds i16, i16* %blur_x879, i64 %18343
  %18345 = bitcast i16* %18344 to <16 x i16>*
  %18346 = load <16 x i16>, <16 x i16>* %18345, align 2, !tbaa !399
  %18347 = getelementptr inbounds i16, i16* %18344, i64 16
  %18348 = bitcast i16* %18347 to <16 x i16>*
  %18349 = load <16 x i16>, <16 x i16>* %18348, align 2, !tbaa !399
  %18350 = add nsw i64 %18115, %.pre-phi3508
  %18351 = getelementptr inbounds i16, i16* %blur_x879, i64 %18350
  %18352 = bitcast i16* %18351 to <16 x i16>*
  %18353 = load <16 x i16>, <16 x i16>* %18352, align 2, !tbaa !399
  %18354 = getelementptr inbounds i16, i16* %18351, i64 16
  %18355 = bitcast i16* %18354 to <16 x i16>*
  %18356 = load <16 x i16>, <16 x i16>* %18355, align 2, !tbaa !399
  %18357 = add <16 x i16> %18332, %18325
  %18358 = add <16 x i16> %18357, %18339
  %18359 = add <16 x i16> %18358, %18346
  %18360 = add <16 x i16> %18359, %18353
  %18361 = add <16 x i16> %18335, %18328
  %18362 = add <16 x i16> %18361, %18342
  %18363 = add <16 x i16> %18362, %18349
  %18364 = add <16 x i16> %18363, %18356
  %18365 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18360, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18366 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18364, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18367 = shufflevector <16 x i16> %18365, <16 x i16> %18366, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18368 = lshr <32 x i16> %18367, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18369 = shufflevector <32 x i16> %18368, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18370 = add nsw i64 %18119, %.pre-phi3508
  %18371 = getelementptr inbounds i16, i16* %260, i64 %18370
  %18372 = bitcast i16* %18371 to <16 x i16>*
  store <16 x i16> %18369, <16 x i16>* %18372, align 2, !tbaa !401
  %18373 = shufflevector <32 x i16> %18368, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18374 = getelementptr inbounds i16, i16* %18371, i64 16
  %18375 = bitcast i16* %18374 to <16 x i16>*
  store <16 x i16> %18373, <16 x i16>* %18375, align 2, !tbaa !401
  %indvars.iv.next3291 = add nuw nsw i64 %indvars.iv3290, 1
  %.not2594 = icmp eq i64 %indvars.iv.next3291, %378
  br i1 %.not2594, label %"end for blur_y.s0.x.x.rebased1232", label %"for blur_y.s0.x.x.rebased1231"

"for blur_y.s0.x.x.rebased1248":                  ; preds = %"for blur_y.s0.x.x.rebased1248.preheader", %"consume blur_x1258"
  %blur_y.s0.x.x.rebased1250 = phi i32 [ %18488, %"consume blur_x1258" ], [ 0, %"for blur_y.s0.x.x.rebased1248.preheader" ]
  %18376 = add nsw i32 %blur_y.s0.x.x.rebased1250, %t1626814
  %a467 = shl nsw i32 %18376, 5
  %18377 = icmp sgt i32 %a341, %a467
  %b473 = select i1 %18377, i32 %a467, i32 %a341
  %18378 = icmp slt i32 %18376, 1
  %18379 = icmp sgt i32 %198, %a467
  %18380 = or i1 %18378, %18379
  br i1 %18380, label %"produce blur_x1255", label %"consume blur_x1258"

"end for blur_y.s0.x.x.rebased1249":              ; preds = %"consume blur_x1258", %"end for blur_y.s0.x.x.rebased1232"
  br i1 %228, label %"produce blur_x1262", label %after_bb1259

"produce blur_x1255":                             ; preds = %"for blur_y.s0.x.x.rebased1248"
  %18381 = icmp slt i32 %b473, %198
  %blur_x.s0.x.v1.base.s1256 = select i1 %18381, i32 %b473, i32 %198
  %t7971257 = add nsw i32 %blur_x.s0.x.v1.base.s1256, %t17851228
  %18382 = sext i32 %t7971257 to i64
  %18383 = getelementptr inbounds i16, i16* %read_input822, i64 %18382
  %18384 = getelementptr inbounds i16, i16* %18383, i64 1
  %18385 = bitcast i16* %18384 to <16 x i16>*
  %18386 = load <16 x i16>, <16 x i16>* %18385, align 2, !tbaa !396
  %18387 = getelementptr inbounds i16, i16* %18383, i64 17
  %18388 = bitcast i16* %18387 to <16 x i16>*
  %18389 = load <16 x i16>, <16 x i16>* %18388, align 2, !tbaa !396
  %18390 = bitcast i16* %18383 to <16 x i16>*
  %18391 = load <16 x i16>, <16 x i16>* %18390, align 2, !tbaa !396
  %18392 = getelementptr inbounds i16, i16* %18383, i64 16
  %18393 = bitcast i16* %18392 to <16 x i16>*
  %18394 = load <16 x i16>, <16 x i16>* %18393, align 2, !tbaa !396
  %18395 = getelementptr inbounds i16, i16* %18383, i64 2
  %18396 = bitcast i16* %18395 to <16 x i16>*
  %18397 = load <16 x i16>, <16 x i16>* %18396, align 2, !tbaa !396
  %18398 = getelementptr inbounds i16, i16* %18383, i64 18
  %18399 = bitcast i16* %18398 to <16 x i16>*
  %18400 = load <16 x i16>, <16 x i16>* %18399, align 2, !tbaa !396
  %18401 = getelementptr inbounds i16, i16* %18383, i64 4
  %18402 = bitcast i16* %18401 to <16 x i16>*
  %18403 = load <16 x i16>, <16 x i16>* %18402, align 2, !tbaa !396
  %18404 = getelementptr inbounds i16, i16* %18383, i64 20
  %18405 = bitcast i16* %18404 to <16 x i16>*
  %18406 = load <16 x i16>, <16 x i16>* %18405, align 2, !tbaa !396
  %18407 = getelementptr inbounds i16, i16* %18383, i64 3
  %18408 = bitcast i16* %18407 to <16 x i16>*
  %18409 = load <16 x i16>, <16 x i16>* %18408, align 2, !tbaa !396
  %18410 = getelementptr inbounds i16, i16* %18383, i64 19
  %18411 = bitcast i16* %18410 to <16 x i16>*
  %18412 = load <16 x i16>, <16 x i16>* %18411, align 2, !tbaa !396
  %18413 = add <16 x i16> %18391, %18386
  %18414 = add <16 x i16> %18413, %18397
  %18415 = add <16 x i16> %18414, %18403
  %18416 = add <16 x i16> %18415, %18409
  %18417 = add <16 x i16> %18394, %18389
  %18418 = add <16 x i16> %18417, %18400
  %18419 = add <16 x i16> %18418, %18406
  %18420 = add <16 x i16> %18419, %18412
  %18421 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18416, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18422 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18420, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18423 = shufflevector <16 x i16> %18421, <16 x i16> %18422, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18424 = lshr <32 x i16> %18423, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18425 = shufflevector <32 x i16> %18424, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18426 = sext i32 %blur_x.s0.x.v1.base.s1256 to i64
  %18427 = add nsw i64 %18426, %18251
  %18428 = getelementptr inbounds i16, i16* %blur_x879, i64 %18427
  %18429 = bitcast i16* %18428 to <16 x i16>*
  store <16 x i16> %18425, <16 x i16>* %18429, align 2, !tbaa !399
  %18430 = shufflevector <32 x i16> %18424, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18431 = getelementptr inbounds i16, i16* %18428, i64 16
  %18432 = bitcast i16* %18431 to <16 x i16>*
  store <16 x i16> %18430, <16 x i16>* %18432, align 2, !tbaa !399
  br label %"consume blur_x1258"

"consume blur_x1258":                             ; preds = %"for blur_y.s0.x.x.rebased1248", %"produce blur_x1255"
  %18433 = sext i32 %b473 to i64
  %18434 = add nsw i64 %18254, %18433
  %18435 = getelementptr inbounds i16, i16* %blur_x879, i64 %18434
  %18436 = bitcast i16* %18435 to <16 x i16>*
  %18437 = load <16 x i16>, <16 x i16>* %18436, align 2, !tbaa !399
  %18438 = getelementptr inbounds i16, i16* %18435, i64 16
  %18439 = bitcast i16* %18438 to <16 x i16>*
  %18440 = load <16 x i16>, <16 x i16>* %18439, align 2, !tbaa !399
  %18441 = add nsw i64 %18257, %18433
  %18442 = getelementptr inbounds i16, i16* %blur_x879, i64 %18441
  %18443 = bitcast i16* %18442 to <16 x i16>*
  %18444 = load <16 x i16>, <16 x i16>* %18443, align 2, !tbaa !399
  %18445 = getelementptr inbounds i16, i16* %18442, i64 16
  %18446 = bitcast i16* %18445 to <16 x i16>*
  %18447 = load <16 x i16>, <16 x i16>* %18446, align 2, !tbaa !399
  %18448 = add nsw i64 %18260, %18433
  %18449 = getelementptr inbounds i16, i16* %blur_x879, i64 %18448
  %18450 = bitcast i16* %18449 to <16 x i16>*
  %18451 = load <16 x i16>, <16 x i16>* %18450, align 2, !tbaa !399
  %18452 = getelementptr inbounds i16, i16* %18449, i64 16
  %18453 = bitcast i16* %18452 to <16 x i16>*
  %18454 = load <16 x i16>, <16 x i16>* %18453, align 2, !tbaa !399
  %18455 = add nsw i64 %18263, %18433
  %18456 = getelementptr inbounds i16, i16* %blur_x879, i64 %18455
  %18457 = bitcast i16* %18456 to <16 x i16>*
  %18458 = load <16 x i16>, <16 x i16>* %18457, align 2, !tbaa !399
  %18459 = getelementptr inbounds i16, i16* %18456, i64 16
  %18460 = bitcast i16* %18459 to <16 x i16>*
  %18461 = load <16 x i16>, <16 x i16>* %18460, align 2, !tbaa !399
  %18462 = add nsw i64 %18266, %18433
  %18463 = getelementptr inbounds i16, i16* %blur_x879, i64 %18462
  %18464 = bitcast i16* %18463 to <16 x i16>*
  %18465 = load <16 x i16>, <16 x i16>* %18464, align 2, !tbaa !399
  %18466 = getelementptr inbounds i16, i16* %18463, i64 16
  %18467 = bitcast i16* %18466 to <16 x i16>*
  %18468 = load <16 x i16>, <16 x i16>* %18467, align 2, !tbaa !399
  %18469 = add <16 x i16> %18444, %18437
  %18470 = add <16 x i16> %18469, %18451
  %18471 = add <16 x i16> %18470, %18458
  %18472 = add <16 x i16> %18471, %18465
  %18473 = add <16 x i16> %18447, %18440
  %18474 = add <16 x i16> %18473, %18454
  %18475 = add <16 x i16> %18474, %18461
  %18476 = add <16 x i16> %18475, %18468
  %18477 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18472, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18478 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18476, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18479 = shufflevector <16 x i16> %18477, <16 x i16> %18478, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18480 = lshr <32 x i16> %18479, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18481 = shufflevector <32 x i16> %18480, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18482 = add nsw i64 %18270, %18433
  %18483 = getelementptr inbounds i16, i16* %260, i64 %18482
  %18484 = bitcast i16* %18483 to <16 x i16>*
  store <16 x i16> %18481, <16 x i16>* %18484, align 2, !tbaa !401
  %18485 = shufflevector <32 x i16> %18480, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18486 = getelementptr inbounds i16, i16* %18483, i64 16
  %18487 = bitcast i16* %18486 to <16 x i16>*
  store <16 x i16> %18485, <16 x i16>* %18487, align 2, !tbaa !401
  %18488 = add nuw nsw i32 %blur_y.s0.x.x.rebased1250, 1
  %.not2593 = icmp eq i32 %18488, %t1683899
  br i1 %.not2593, label %"end for blur_y.s0.x.x.rebased1249", label %"for blur_y.s0.x.x.rebased1248"

after_bb1259:                                     ; preds = %"end for blur_y.s0.x.x.rebased1249", %"produce blur_x1262"
  br i1 %294, label %"for blur_y.s0.x.x.rebased1274.preheader", label %"end for blur_y.s0.x.x.rebased1275", !prof !386

"for blur_y.s0.x.x.rebased1274.preheader":        ; preds = %after_bb1259
  %18489 = sext i32 %t1694946 to i64
  %18490 = zext i32 %.pre-phi3502 to i64
  %18491 = mul nsw i64 %18490, %306
  %18492 = sub nsw i64 %18491, %290
  %18493 = zext i32 %.pre-phi3496 to i64
  %18494 = mul nsw i64 %18493, %306
  %18495 = sub nsw i64 %18494, %290
  %18496 = zext i32 %.pre-phi3468 to i64
  %18497 = mul nsw i64 %18496, %306
  %18498 = sub nsw i64 %18497, %290
  %18499 = zext i32 %.pre-phi3476 to i64
  %18500 = mul nsw i64 %18499, %306
  %18501 = sub nsw i64 %18500, %290
  %18502 = zext i32 %.pre-phi3472 to i64
  %18503 = mul nsw i64 %18502, %306
  %18504 = sub nsw i64 %18503, %290
  %18505 = sext i32 %a353 to i64
  %18506 = add nsw i64 %18505, 6
  %18507 = mul nsw i64 %18506, %307
  %18508 = add nsw i64 %18507, %310
  br label %"for blur_y.s0.x.x.rebased1274"

"produce blur_x1262":                             ; preds = %"end for blur_y.s0.x.x.rebased1249"
  %18509 = getelementptr inbounds i16, i16* %read_input822, i64 %321
  %18510 = getelementptr inbounds i16, i16* %18509, i64 -31
  %18511 = bitcast i16* %18510 to <16 x i16>*
  %18512 = load <16 x i16>, <16 x i16>* %18511, align 2, !tbaa !396
  %18513 = getelementptr inbounds i16, i16* %18509, i64 -15
  %18514 = bitcast i16* %18513 to <16 x i16>*
  %18515 = load <16 x i16>, <16 x i16>* %18514, align 2, !tbaa !396
  %18516 = getelementptr inbounds i16, i16* %18509, i64 -32
  %18517 = bitcast i16* %18516 to <16 x i16>*
  %18518 = load <16 x i16>, <16 x i16>* %18517, align 2, !tbaa !396
  %18519 = getelementptr inbounds i16, i16* %18509, i64 -16
  %18520 = bitcast i16* %18519 to <16 x i16>*
  %18521 = load <16 x i16>, <16 x i16>* %18520, align 2, !tbaa !396
  %18522 = getelementptr inbounds i16, i16* %18509, i64 -30
  %18523 = bitcast i16* %18522 to <16 x i16>*
  %18524 = load <16 x i16>, <16 x i16>* %18523, align 2, !tbaa !396
  %18525 = getelementptr inbounds i16, i16* %18509, i64 -14
  %18526 = bitcast i16* %18525 to <16 x i16>*
  %18527 = load <16 x i16>, <16 x i16>* %18526, align 2, !tbaa !396
  %18528 = getelementptr inbounds i16, i16* %18509, i64 -28
  %18529 = bitcast i16* %18528 to <16 x i16>*
  %18530 = load <16 x i16>, <16 x i16>* %18529, align 2, !tbaa !396
  %18531 = getelementptr inbounds i16, i16* %18509, i64 -12
  %18532 = bitcast i16* %18531 to <16 x i16>*
  %18533 = load <16 x i16>, <16 x i16>* %18532, align 2, !tbaa !396
  %18534 = getelementptr inbounds i16, i16* %18509, i64 -29
  %18535 = bitcast i16* %18534 to <16 x i16>*
  %18536 = load <16 x i16>, <16 x i16>* %18535, align 2, !tbaa !396
  %18537 = getelementptr inbounds i16, i16* %18509, i64 -13
  %18538 = bitcast i16* %18537 to <16 x i16>*
  %18539 = load <16 x i16>, <16 x i16>* %18538, align 2, !tbaa !396
  %18540 = add <16 x i16> %18518, %18512
  %18541 = add <16 x i16> %18540, %18524
  %18542 = add <16 x i16> %18541, %18530
  %18543 = add <16 x i16> %18542, %18536
  %18544 = add <16 x i16> %18521, %18515
  %18545 = add <16 x i16> %18544, %18527
  %18546 = add <16 x i16> %18545, %18533
  %18547 = add <16 x i16> %18546, %18539
  %18548 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18543, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18549 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18547, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18550 = shufflevector <16 x i16> %18548, <16 x i16> %18549, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18551 = lshr <32 x i16> %18550, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18552 = shufflevector <32 x i16> %18551, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18553 = zext i32 %.pre-phi3476 to i64
  %18554 = mul nsw i64 %291, %18553
  %18555 = add nsw i64 %293, %18554
  %18556 = getelementptr inbounds i16, i16* %blur_x879, i64 %18555
  %18557 = getelementptr inbounds i16, i16* %18556, i64 -32
  %18558 = bitcast i16* %18557 to <16 x i16>*
  store <16 x i16> %18552, <16 x i16>* %18558, align 2, !tbaa !399
  %18559 = shufflevector <32 x i16> %18551, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18560 = getelementptr inbounds i16, i16* %18556, i64 -16
  %18561 = bitcast i16* %18560 to <16 x i16>*
  store <16 x i16> %18559, <16 x i16>* %18561, align 2, !tbaa !399
  %18562 = zext i32 %.pre-phi3502 to i64
  %18563 = mul nsw i64 %18562, %306
  %18564 = add nsw i64 %18563, %288
  %18565 = getelementptr inbounds i16, i16* %blur_x879, i64 %18564
  %18566 = getelementptr inbounds i16, i16* %18565, i64 -32
  %18567 = bitcast i16* %18566 to <16 x i16>*
  %18568 = load <16 x i16>, <16 x i16>* %18567, align 2, !tbaa !399
  %18569 = getelementptr inbounds i16, i16* %18565, i64 -16
  %18570 = bitcast i16* %18569 to <16 x i16>*
  %18571 = load <16 x i16>, <16 x i16>* %18570, align 2, !tbaa !399
  %18572 = zext i32 %.pre-phi3496 to i64
  %18573 = mul nsw i64 %18572, %306
  %18574 = add nsw i64 %18573, %288
  %18575 = getelementptr inbounds i16, i16* %blur_x879, i64 %18574
  %18576 = getelementptr inbounds i16, i16* %18575, i64 -32
  %18577 = bitcast i16* %18576 to <16 x i16>*
  %18578 = load <16 x i16>, <16 x i16>* %18577, align 2, !tbaa !399
  %18579 = getelementptr inbounds i16, i16* %18575, i64 -16
  %18580 = bitcast i16* %18579 to <16 x i16>*
  %18581 = load <16 x i16>, <16 x i16>* %18580, align 2, !tbaa !399
  %18582 = zext i32 %.pre-phi3468 to i64
  %18583 = mul nsw i64 %18582, %306
  %18584 = add nsw i64 %18583, %288
  %18585 = getelementptr inbounds i16, i16* %blur_x879, i64 %18584
  %18586 = getelementptr inbounds i16, i16* %18585, i64 -32
  %18587 = bitcast i16* %18586 to <16 x i16>*
  %18588 = load <16 x i16>, <16 x i16>* %18587, align 2, !tbaa !399
  %18589 = getelementptr inbounds i16, i16* %18585, i64 -16
  %18590 = bitcast i16* %18589 to <16 x i16>*
  %18591 = load <16 x i16>, <16 x i16>* %18590, align 2, !tbaa !399
  %18592 = mul nsw i64 %18553, %306
  %18593 = add nsw i64 %18592, %288
  %18594 = getelementptr inbounds i16, i16* %blur_x879, i64 %18593
  %18595 = getelementptr inbounds i16, i16* %18594, i64 -32
  %18596 = bitcast i16* %18595 to <16 x i16>*
  %18597 = load <16 x i16>, <16 x i16>* %18596, align 2, !tbaa !399
  %18598 = getelementptr inbounds i16, i16* %18594, i64 -16
  %18599 = bitcast i16* %18598 to <16 x i16>*
  %18600 = load <16 x i16>, <16 x i16>* %18599, align 2, !tbaa !399
  %18601 = zext i32 %.pre-phi3472 to i64
  %18602 = mul nsw i64 %18601, %306
  %18603 = add nsw i64 %18602, %288
  %18604 = getelementptr inbounds i16, i16* %blur_x879, i64 %18603
  %18605 = getelementptr inbounds i16, i16* %18604, i64 -32
  %18606 = bitcast i16* %18605 to <16 x i16>*
  %18607 = load <16 x i16>, <16 x i16>* %18606, align 2, !tbaa !399
  %18608 = getelementptr inbounds i16, i16* %18604, i64 -16
  %18609 = bitcast i16* %18608 to <16 x i16>*
  %18610 = load <16 x i16>, <16 x i16>* %18609, align 2, !tbaa !399
  %18611 = add <16 x i16> %18578, %18568
  %18612 = add <16 x i16> %18611, %18588
  %18613 = add <16 x i16> %18612, %18597
  %18614 = add <16 x i16> %18613, %18607
  %18615 = add <16 x i16> %18581, %18571
  %18616 = add <16 x i16> %18615, %18591
  %18617 = add <16 x i16> %18616, %18600
  %18618 = add <16 x i16> %18617, %18610
  %18619 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18614, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18620 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18618, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18621 = shufflevector <16 x i16> %18619, <16 x i16> %18620, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18622 = lshr <32 x i16> %18621, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18623 = shufflevector <32 x i16> %18622, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18624 = sext i32 %a353 to i64
  %18625 = add nsw i64 %18624, 6
  %18626 = mul nsw i64 %18625, %307
  %18627 = add nsw i64 %309, %18626
  %18628 = getelementptr inbounds i16, i16* %260, i64 %18627
  %18629 = getelementptr inbounds i16, i16* %18628, i64 -32
  %18630 = bitcast i16* %18629 to <16 x i16>*
  store <16 x i16> %18623, <16 x i16>* %18630, align 2, !tbaa !401
  %18631 = shufflevector <32 x i16> %18622, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18632 = getelementptr inbounds i16, i16* %18628, i64 -16
  %18633 = bitcast i16* %18632 to <16 x i16>*
  store <16 x i16> %18631, <16 x i16>* %18633, align 2, !tbaa !401
  br label %after_bb1259

"for blur_y.s0.x.x.rebased1274":                  ; preds = %"for blur_y.s0.x.x.rebased1274.preheader", %"consume blur_x1283"
  %indvars.iv3293 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1274.preheader" ], [ %indvars.iv.next3294, %"consume blur_x1283" ]
  %18634 = add nsw i64 %indvars.iv3293, %295
  %18635 = icmp slt i64 %18634, 1
  %18636 = trunc i64 %18634 to i32
  %18637 = shl nsw i32 %18636, 5
  %18638 = icmp sgt i32 %198, %18637
  %18639 = or i1 %18635, %18638
  br i1 %18639, label %"produce blur_x1281", label %"for blur_y.s0.x.x.rebased1274.consume blur_x1283_crit_edge"

"for blur_y.s0.x.x.rebased1274.consume blur_x1283_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1274"
  %.pre3509 = shl nsw i64 %18634, 5
  br label %"consume blur_x1283"

"end for blur_y.s0.x.x.rebased1275":              ; preds = %"consume blur_x1283", %after_bb1259
  br i1 %296, label %"for blur_y.s0.x.x.rebased1291.preheader", label %"end for blur_y.s0.x.x.rebased1292", !prof !386

"for blur_y.s0.x.x.rebased1291.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1275"
  %18640 = sext i32 %t1694946 to i64
  %18641 = zext i32 %.pre-phi3502 to i64
  %18642 = mul nsw i64 %18641, %306
  %18643 = sub nsw i64 %18642, %290
  %18644 = zext i32 %.pre-phi3496 to i64
  %18645 = mul nsw i64 %18644, %306
  %18646 = sub nsw i64 %18645, %290
  %18647 = zext i32 %.pre-phi3468 to i64
  %18648 = mul nsw i64 %18647, %306
  %18649 = sub nsw i64 %18648, %290
  %18650 = zext i32 %.pre-phi3476 to i64
  %18651 = mul nsw i64 %18650, %306
  %18652 = sub nsw i64 %18651, %290
  %18653 = zext i32 %.pre-phi3472 to i64
  %18654 = mul nsw i64 %18653, %306
  %18655 = sub nsw i64 %18654, %290
  %18656 = sext i32 %a353 to i64
  %18657 = add nsw i64 %18656, 6
  %18658 = mul nsw i64 %18657, %307
  %18659 = add nsw i64 %18658, %310
  br label %"for blur_y.s0.x.x.rebased1291"

"produce blur_x1281":                             ; preds = %"for blur_y.s0.x.x.rebased1274"
  %t8081282 = add nsw i32 %18637, %t18011271
  %18660 = sext i32 %t8081282 to i64
  %18661 = getelementptr inbounds i16, i16* %read_input822, i64 %18660
  %18662 = getelementptr inbounds i16, i16* %18661, i64 1
  %18663 = bitcast i16* %18662 to <16 x i16>*
  %18664 = load <16 x i16>, <16 x i16>* %18663, align 2, !tbaa !396
  %18665 = getelementptr inbounds i16, i16* %18661, i64 17
  %18666 = bitcast i16* %18665 to <16 x i16>*
  %18667 = load <16 x i16>, <16 x i16>* %18666, align 2, !tbaa !396
  %18668 = bitcast i16* %18661 to <16 x i16>*
  %18669 = load <16 x i16>, <16 x i16>* %18668, align 2, !tbaa !396
  %18670 = getelementptr inbounds i16, i16* %18661, i64 16
  %18671 = bitcast i16* %18670 to <16 x i16>*
  %18672 = load <16 x i16>, <16 x i16>* %18671, align 2, !tbaa !396
  %18673 = getelementptr inbounds i16, i16* %18661, i64 2
  %18674 = bitcast i16* %18673 to <16 x i16>*
  %18675 = load <16 x i16>, <16 x i16>* %18674, align 2, !tbaa !396
  %18676 = getelementptr inbounds i16, i16* %18661, i64 18
  %18677 = bitcast i16* %18676 to <16 x i16>*
  %18678 = load <16 x i16>, <16 x i16>* %18677, align 2, !tbaa !396
  %18679 = getelementptr inbounds i16, i16* %18661, i64 4
  %18680 = bitcast i16* %18679 to <16 x i16>*
  %18681 = load <16 x i16>, <16 x i16>* %18680, align 2, !tbaa !396
  %18682 = getelementptr inbounds i16, i16* %18661, i64 20
  %18683 = bitcast i16* %18682 to <16 x i16>*
  %18684 = load <16 x i16>, <16 x i16>* %18683, align 2, !tbaa !396
  %18685 = getelementptr inbounds i16, i16* %18661, i64 3
  %18686 = bitcast i16* %18685 to <16 x i16>*
  %18687 = load <16 x i16>, <16 x i16>* %18686, align 2, !tbaa !396
  %18688 = getelementptr inbounds i16, i16* %18661, i64 19
  %18689 = bitcast i16* %18688 to <16 x i16>*
  %18690 = load <16 x i16>, <16 x i16>* %18689, align 2, !tbaa !396
  %18691 = add <16 x i16> %18669, %18664
  %18692 = add <16 x i16> %18691, %18675
  %18693 = add <16 x i16> %18692, %18681
  %18694 = add <16 x i16> %18693, %18687
  %18695 = add <16 x i16> %18672, %18667
  %18696 = add <16 x i16> %18695, %18678
  %18697 = add <16 x i16> %18696, %18684
  %18698 = add <16 x i16> %18697, %18690
  %18699 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18694, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18700 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18698, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18701 = shufflevector <16 x i16> %18699, <16 x i16> %18700, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18702 = lshr <32 x i16> %18701, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18703 = shufflevector <32 x i16> %18702, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18704 = shl nsw i64 %18634, 5
  %18705 = add nsw i64 %18704, %18489
  %18706 = getelementptr inbounds i16, i16* %blur_x879, i64 %18705
  %18707 = bitcast i16* %18706 to <16 x i16>*
  store <16 x i16> %18703, <16 x i16>* %18707, align 2, !tbaa !399
  %18708 = shufflevector <32 x i16> %18702, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18709 = getelementptr inbounds i16, i16* %18706, i64 16
  %18710 = bitcast i16* %18709 to <16 x i16>*
  store <16 x i16> %18708, <16 x i16>* %18710, align 2, !tbaa !399
  br label %"consume blur_x1283"

"consume blur_x1283":                             ; preds = %"for blur_y.s0.x.x.rebased1274.consume blur_x1283_crit_edge", %"produce blur_x1281"
  %.pre-phi3510 = phi i64 [ %.pre3509, %"for blur_y.s0.x.x.rebased1274.consume blur_x1283_crit_edge" ], [ %18704, %"produce blur_x1281" ]
  %18711 = add nsw i64 %18492, %.pre-phi3510
  %18712 = getelementptr inbounds i16, i16* %blur_x879, i64 %18711
  %18713 = bitcast i16* %18712 to <16 x i16>*
  %18714 = load <16 x i16>, <16 x i16>* %18713, align 2, !tbaa !399
  %18715 = getelementptr inbounds i16, i16* %18712, i64 16
  %18716 = bitcast i16* %18715 to <16 x i16>*
  %18717 = load <16 x i16>, <16 x i16>* %18716, align 2, !tbaa !399
  %18718 = add nsw i64 %18495, %.pre-phi3510
  %18719 = getelementptr inbounds i16, i16* %blur_x879, i64 %18718
  %18720 = bitcast i16* %18719 to <16 x i16>*
  %18721 = load <16 x i16>, <16 x i16>* %18720, align 2, !tbaa !399
  %18722 = getelementptr inbounds i16, i16* %18719, i64 16
  %18723 = bitcast i16* %18722 to <16 x i16>*
  %18724 = load <16 x i16>, <16 x i16>* %18723, align 2, !tbaa !399
  %18725 = add nsw i64 %18498, %.pre-phi3510
  %18726 = getelementptr inbounds i16, i16* %blur_x879, i64 %18725
  %18727 = bitcast i16* %18726 to <16 x i16>*
  %18728 = load <16 x i16>, <16 x i16>* %18727, align 2, !tbaa !399
  %18729 = getelementptr inbounds i16, i16* %18726, i64 16
  %18730 = bitcast i16* %18729 to <16 x i16>*
  %18731 = load <16 x i16>, <16 x i16>* %18730, align 2, !tbaa !399
  %18732 = add nsw i64 %18501, %.pre-phi3510
  %18733 = getelementptr inbounds i16, i16* %blur_x879, i64 %18732
  %18734 = bitcast i16* %18733 to <16 x i16>*
  %18735 = load <16 x i16>, <16 x i16>* %18734, align 2, !tbaa !399
  %18736 = getelementptr inbounds i16, i16* %18733, i64 16
  %18737 = bitcast i16* %18736 to <16 x i16>*
  %18738 = load <16 x i16>, <16 x i16>* %18737, align 2, !tbaa !399
  %18739 = add nsw i64 %18504, %.pre-phi3510
  %18740 = getelementptr inbounds i16, i16* %blur_x879, i64 %18739
  %18741 = bitcast i16* %18740 to <16 x i16>*
  %18742 = load <16 x i16>, <16 x i16>* %18741, align 2, !tbaa !399
  %18743 = getelementptr inbounds i16, i16* %18740, i64 16
  %18744 = bitcast i16* %18743 to <16 x i16>*
  %18745 = load <16 x i16>, <16 x i16>* %18744, align 2, !tbaa !399
  %18746 = add <16 x i16> %18721, %18714
  %18747 = add <16 x i16> %18746, %18728
  %18748 = add <16 x i16> %18747, %18735
  %18749 = add <16 x i16> %18748, %18742
  %18750 = add <16 x i16> %18724, %18717
  %18751 = add <16 x i16> %18750, %18731
  %18752 = add <16 x i16> %18751, %18738
  %18753 = add <16 x i16> %18752, %18745
  %18754 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18749, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18755 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18753, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18756 = shufflevector <16 x i16> %18754, <16 x i16> %18755, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18757 = lshr <32 x i16> %18756, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18758 = shufflevector <32 x i16> %18757, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18759 = add nsw i64 %18508, %.pre-phi3510
  %18760 = getelementptr inbounds i16, i16* %260, i64 %18759
  %18761 = bitcast i16* %18760 to <16 x i16>*
  store <16 x i16> %18758, <16 x i16>* %18761, align 2, !tbaa !401
  %18762 = shufflevector <32 x i16> %18757, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18763 = getelementptr inbounds i16, i16* %18760, i64 16
  %18764 = bitcast i16* %18763 to <16 x i16>*
  store <16 x i16> %18762, <16 x i16>* %18764, align 2, !tbaa !401
  %indvars.iv.next3294 = add nuw nsw i64 %indvars.iv3293, 1
  %.not2592 = icmp eq i64 %indvars.iv.next3294, %378
  br i1 %.not2592, label %"end for blur_y.s0.x.x.rebased1275", label %"for blur_y.s0.x.x.rebased1274"

"for blur_y.s0.x.x.rebased1291":                  ; preds = %"for blur_y.s0.x.x.rebased1291.preheader", %"consume blur_x1301"
  %blur_y.s0.x.x.rebased1293 = phi i32 [ %18877, %"consume blur_x1301" ], [ 0, %"for blur_y.s0.x.x.rebased1291.preheader" ]
  %18765 = add nsw i32 %blur_y.s0.x.x.rebased1293, %t1626814
  %a474 = shl nsw i32 %18765, 5
  %18766 = icmp sgt i32 %a341, %a474
  %b480 = select i1 %18766, i32 %a474, i32 %a341
  %18767 = icmp slt i32 %18765, 1
  %18768 = icmp sgt i32 %198, %a474
  %18769 = or i1 %18767, %18768
  br i1 %18769, label %"produce blur_x1298", label %"consume blur_x1301"

"end for blur_y.s0.x.x.rebased1292":              ; preds = %"consume blur_x1301", %"end for blur_y.s0.x.x.rebased1275"
  br i1 %228, label %"produce blur_x1305", label %after_bb1302

"produce blur_x1298":                             ; preds = %"for blur_y.s0.x.x.rebased1291"
  %18770 = icmp slt i32 %b480, %198
  %blur_x.s0.x.v1.base.s1299 = select i1 %18770, i32 %b480, i32 %198
  %t8131300 = add nsw i32 %blur_x.s0.x.v1.base.s1299, %t18011271
  %18771 = sext i32 %t8131300 to i64
  %18772 = getelementptr inbounds i16, i16* %read_input822, i64 %18771
  %18773 = getelementptr inbounds i16, i16* %18772, i64 1
  %18774 = bitcast i16* %18773 to <16 x i16>*
  %18775 = load <16 x i16>, <16 x i16>* %18774, align 2, !tbaa !396
  %18776 = getelementptr inbounds i16, i16* %18772, i64 17
  %18777 = bitcast i16* %18776 to <16 x i16>*
  %18778 = load <16 x i16>, <16 x i16>* %18777, align 2, !tbaa !396
  %18779 = bitcast i16* %18772 to <16 x i16>*
  %18780 = load <16 x i16>, <16 x i16>* %18779, align 2, !tbaa !396
  %18781 = getelementptr inbounds i16, i16* %18772, i64 16
  %18782 = bitcast i16* %18781 to <16 x i16>*
  %18783 = load <16 x i16>, <16 x i16>* %18782, align 2, !tbaa !396
  %18784 = getelementptr inbounds i16, i16* %18772, i64 2
  %18785 = bitcast i16* %18784 to <16 x i16>*
  %18786 = load <16 x i16>, <16 x i16>* %18785, align 2, !tbaa !396
  %18787 = getelementptr inbounds i16, i16* %18772, i64 18
  %18788 = bitcast i16* %18787 to <16 x i16>*
  %18789 = load <16 x i16>, <16 x i16>* %18788, align 2, !tbaa !396
  %18790 = getelementptr inbounds i16, i16* %18772, i64 4
  %18791 = bitcast i16* %18790 to <16 x i16>*
  %18792 = load <16 x i16>, <16 x i16>* %18791, align 2, !tbaa !396
  %18793 = getelementptr inbounds i16, i16* %18772, i64 20
  %18794 = bitcast i16* %18793 to <16 x i16>*
  %18795 = load <16 x i16>, <16 x i16>* %18794, align 2, !tbaa !396
  %18796 = getelementptr inbounds i16, i16* %18772, i64 3
  %18797 = bitcast i16* %18796 to <16 x i16>*
  %18798 = load <16 x i16>, <16 x i16>* %18797, align 2, !tbaa !396
  %18799 = getelementptr inbounds i16, i16* %18772, i64 19
  %18800 = bitcast i16* %18799 to <16 x i16>*
  %18801 = load <16 x i16>, <16 x i16>* %18800, align 2, !tbaa !396
  %18802 = add <16 x i16> %18780, %18775
  %18803 = add <16 x i16> %18802, %18786
  %18804 = add <16 x i16> %18803, %18792
  %18805 = add <16 x i16> %18804, %18798
  %18806 = add <16 x i16> %18783, %18778
  %18807 = add <16 x i16> %18806, %18789
  %18808 = add <16 x i16> %18807, %18795
  %18809 = add <16 x i16> %18808, %18801
  %18810 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18805, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18811 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18809, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18812 = shufflevector <16 x i16> %18810, <16 x i16> %18811, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18813 = lshr <32 x i16> %18812, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18814 = shufflevector <32 x i16> %18813, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18815 = sext i32 %blur_x.s0.x.v1.base.s1299 to i64
  %18816 = add nsw i64 %18815, %18640
  %18817 = getelementptr inbounds i16, i16* %blur_x879, i64 %18816
  %18818 = bitcast i16* %18817 to <16 x i16>*
  store <16 x i16> %18814, <16 x i16>* %18818, align 2, !tbaa !399
  %18819 = shufflevector <32 x i16> %18813, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18820 = getelementptr inbounds i16, i16* %18817, i64 16
  %18821 = bitcast i16* %18820 to <16 x i16>*
  store <16 x i16> %18819, <16 x i16>* %18821, align 2, !tbaa !399
  br label %"consume blur_x1301"

"consume blur_x1301":                             ; preds = %"for blur_y.s0.x.x.rebased1291", %"produce blur_x1298"
  %18822 = sext i32 %b480 to i64
  %18823 = add nsw i64 %18643, %18822
  %18824 = getelementptr inbounds i16, i16* %blur_x879, i64 %18823
  %18825 = bitcast i16* %18824 to <16 x i16>*
  %18826 = load <16 x i16>, <16 x i16>* %18825, align 2, !tbaa !399
  %18827 = getelementptr inbounds i16, i16* %18824, i64 16
  %18828 = bitcast i16* %18827 to <16 x i16>*
  %18829 = load <16 x i16>, <16 x i16>* %18828, align 2, !tbaa !399
  %18830 = add nsw i64 %18646, %18822
  %18831 = getelementptr inbounds i16, i16* %blur_x879, i64 %18830
  %18832 = bitcast i16* %18831 to <16 x i16>*
  %18833 = load <16 x i16>, <16 x i16>* %18832, align 2, !tbaa !399
  %18834 = getelementptr inbounds i16, i16* %18831, i64 16
  %18835 = bitcast i16* %18834 to <16 x i16>*
  %18836 = load <16 x i16>, <16 x i16>* %18835, align 2, !tbaa !399
  %18837 = add nsw i64 %18649, %18822
  %18838 = getelementptr inbounds i16, i16* %blur_x879, i64 %18837
  %18839 = bitcast i16* %18838 to <16 x i16>*
  %18840 = load <16 x i16>, <16 x i16>* %18839, align 2, !tbaa !399
  %18841 = getelementptr inbounds i16, i16* %18838, i64 16
  %18842 = bitcast i16* %18841 to <16 x i16>*
  %18843 = load <16 x i16>, <16 x i16>* %18842, align 2, !tbaa !399
  %18844 = add nsw i64 %18652, %18822
  %18845 = getelementptr inbounds i16, i16* %blur_x879, i64 %18844
  %18846 = bitcast i16* %18845 to <16 x i16>*
  %18847 = load <16 x i16>, <16 x i16>* %18846, align 2, !tbaa !399
  %18848 = getelementptr inbounds i16, i16* %18845, i64 16
  %18849 = bitcast i16* %18848 to <16 x i16>*
  %18850 = load <16 x i16>, <16 x i16>* %18849, align 2, !tbaa !399
  %18851 = add nsw i64 %18655, %18822
  %18852 = getelementptr inbounds i16, i16* %blur_x879, i64 %18851
  %18853 = bitcast i16* %18852 to <16 x i16>*
  %18854 = load <16 x i16>, <16 x i16>* %18853, align 2, !tbaa !399
  %18855 = getelementptr inbounds i16, i16* %18852, i64 16
  %18856 = bitcast i16* %18855 to <16 x i16>*
  %18857 = load <16 x i16>, <16 x i16>* %18856, align 2, !tbaa !399
  %18858 = add <16 x i16> %18833, %18826
  %18859 = add <16 x i16> %18858, %18840
  %18860 = add <16 x i16> %18859, %18847
  %18861 = add <16 x i16> %18860, %18854
  %18862 = add <16 x i16> %18836, %18829
  %18863 = add <16 x i16> %18862, %18843
  %18864 = add <16 x i16> %18863, %18850
  %18865 = add <16 x i16> %18864, %18857
  %18866 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18861, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18867 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18865, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18868 = shufflevector <16 x i16> %18866, <16 x i16> %18867, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18869 = lshr <32 x i16> %18868, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18870 = shufflevector <32 x i16> %18869, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18871 = add nsw i64 %18659, %18822
  %18872 = getelementptr inbounds i16, i16* %260, i64 %18871
  %18873 = bitcast i16* %18872 to <16 x i16>*
  store <16 x i16> %18870, <16 x i16>* %18873, align 2, !tbaa !401
  %18874 = shufflevector <32 x i16> %18869, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18875 = getelementptr inbounds i16, i16* %18872, i64 16
  %18876 = bitcast i16* %18875 to <16 x i16>*
  store <16 x i16> %18874, <16 x i16>* %18876, align 2, !tbaa !401
  %18877 = add nuw nsw i32 %blur_y.s0.x.x.rebased1293, 1
  %.not2591 = icmp eq i32 %18877, %t1683899
  br i1 %.not2591, label %"end for blur_y.s0.x.x.rebased1292", label %"for blur_y.s0.x.x.rebased1291"

after_bb1302:                                     ; preds = %"end for blur_y.s0.x.x.rebased1292", %"produce blur_x1305"
  br i1 %294, label %"for blur_y.s0.x.x.rebased1317.preheader", label %"end for blur_y.s0.x.x.rebased1318", !prof !386

"for blur_y.s0.x.x.rebased1317.preheader":        ; preds = %after_bb1302
  %18878 = sext i32 %t1700976 to i64
  %18879 = zext i32 %.pre-phi3468 to i64
  %18880 = mul nsw i64 %18879, %306
  %18881 = sub nsw i64 %18880, %290
  %18882 = zext i32 %.pre-phi3502 to i64
  %18883 = mul nsw i64 %18882, %306
  %18884 = sub nsw i64 %18883, %290
  %18885 = zext i32 %.pre-phi3472 to i64
  %18886 = mul nsw i64 %18885, %306
  %18887 = sub nsw i64 %18886, %290
  %18888 = zext i32 %.pre-phi3480 to i64
  %18889 = mul nsw i64 %18888, %306
  %18890 = sub nsw i64 %18889, %290
  %18891 = zext i32 %.pre-phi3476 to i64
  %18892 = mul nsw i64 %18891, %306
  %18893 = sub nsw i64 %18892, %290
  %18894 = sext i32 %a353 to i64
  %18895 = add nsw i64 %18894, 7
  %18896 = mul nsw i64 %18895, %307
  %18897 = add nsw i64 %18896, %310
  br label %"for blur_y.s0.x.x.rebased1317"

"produce blur_x1305":                             ; preds = %"end for blur_y.s0.x.x.rebased1292"
  %18898 = getelementptr inbounds i16, i16* %read_input822, i64 %323
  %18899 = getelementptr inbounds i16, i16* %18898, i64 -31
  %18900 = bitcast i16* %18899 to <16 x i16>*
  %18901 = load <16 x i16>, <16 x i16>* %18900, align 2, !tbaa !396
  %18902 = getelementptr inbounds i16, i16* %18898, i64 -15
  %18903 = bitcast i16* %18902 to <16 x i16>*
  %18904 = load <16 x i16>, <16 x i16>* %18903, align 2, !tbaa !396
  %18905 = getelementptr inbounds i16, i16* %18898, i64 -32
  %18906 = bitcast i16* %18905 to <16 x i16>*
  %18907 = load <16 x i16>, <16 x i16>* %18906, align 2, !tbaa !396
  %18908 = getelementptr inbounds i16, i16* %18898, i64 -16
  %18909 = bitcast i16* %18908 to <16 x i16>*
  %18910 = load <16 x i16>, <16 x i16>* %18909, align 2, !tbaa !396
  %18911 = getelementptr inbounds i16, i16* %18898, i64 -30
  %18912 = bitcast i16* %18911 to <16 x i16>*
  %18913 = load <16 x i16>, <16 x i16>* %18912, align 2, !tbaa !396
  %18914 = getelementptr inbounds i16, i16* %18898, i64 -14
  %18915 = bitcast i16* %18914 to <16 x i16>*
  %18916 = load <16 x i16>, <16 x i16>* %18915, align 2, !tbaa !396
  %18917 = getelementptr inbounds i16, i16* %18898, i64 -28
  %18918 = bitcast i16* %18917 to <16 x i16>*
  %18919 = load <16 x i16>, <16 x i16>* %18918, align 2, !tbaa !396
  %18920 = getelementptr inbounds i16, i16* %18898, i64 -12
  %18921 = bitcast i16* %18920 to <16 x i16>*
  %18922 = load <16 x i16>, <16 x i16>* %18921, align 2, !tbaa !396
  %18923 = getelementptr inbounds i16, i16* %18898, i64 -29
  %18924 = bitcast i16* %18923 to <16 x i16>*
  %18925 = load <16 x i16>, <16 x i16>* %18924, align 2, !tbaa !396
  %18926 = getelementptr inbounds i16, i16* %18898, i64 -13
  %18927 = bitcast i16* %18926 to <16 x i16>*
  %18928 = load <16 x i16>, <16 x i16>* %18927, align 2, !tbaa !396
  %18929 = add <16 x i16> %18907, %18901
  %18930 = add <16 x i16> %18929, %18913
  %18931 = add <16 x i16> %18930, %18919
  %18932 = add <16 x i16> %18931, %18925
  %18933 = add <16 x i16> %18910, %18904
  %18934 = add <16 x i16> %18933, %18916
  %18935 = add <16 x i16> %18934, %18922
  %18936 = add <16 x i16> %18935, %18928
  %18937 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18932, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18938 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18936, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %18939 = shufflevector <16 x i16> %18937, <16 x i16> %18938, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18940 = lshr <32 x i16> %18939, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %18941 = shufflevector <32 x i16> %18940, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18942 = zext i32 %.pre-phi3480 to i64
  %18943 = mul nsw i64 %291, %18942
  %18944 = add nsw i64 %293, %18943
  %18945 = getelementptr inbounds i16, i16* %blur_x879, i64 %18944
  %18946 = getelementptr inbounds i16, i16* %18945, i64 -32
  %18947 = bitcast i16* %18946 to <16 x i16>*
  store <16 x i16> %18941, <16 x i16>* %18947, align 2, !tbaa !399
  %18948 = shufflevector <32 x i16> %18940, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18949 = getelementptr inbounds i16, i16* %18945, i64 -16
  %18950 = bitcast i16* %18949 to <16 x i16>*
  store <16 x i16> %18948, <16 x i16>* %18950, align 2, !tbaa !399
  %18951 = zext i32 %.pre-phi3468 to i64
  %18952 = mul nsw i64 %18951, %306
  %18953 = add nsw i64 %18952, %288
  %18954 = getelementptr inbounds i16, i16* %blur_x879, i64 %18953
  %18955 = getelementptr inbounds i16, i16* %18954, i64 -32
  %18956 = bitcast i16* %18955 to <16 x i16>*
  %18957 = load <16 x i16>, <16 x i16>* %18956, align 2, !tbaa !399
  %18958 = getelementptr inbounds i16, i16* %18954, i64 -16
  %18959 = bitcast i16* %18958 to <16 x i16>*
  %18960 = load <16 x i16>, <16 x i16>* %18959, align 2, !tbaa !399
  %18961 = zext i32 %.pre-phi3502 to i64
  %18962 = mul nsw i64 %18961, %306
  %18963 = add nsw i64 %18962, %288
  %18964 = getelementptr inbounds i16, i16* %blur_x879, i64 %18963
  %18965 = getelementptr inbounds i16, i16* %18964, i64 -32
  %18966 = bitcast i16* %18965 to <16 x i16>*
  %18967 = load <16 x i16>, <16 x i16>* %18966, align 2, !tbaa !399
  %18968 = getelementptr inbounds i16, i16* %18964, i64 -16
  %18969 = bitcast i16* %18968 to <16 x i16>*
  %18970 = load <16 x i16>, <16 x i16>* %18969, align 2, !tbaa !399
  %18971 = zext i32 %.pre-phi3472 to i64
  %18972 = mul nsw i64 %18971, %306
  %18973 = add nsw i64 %18972, %288
  %18974 = getelementptr inbounds i16, i16* %blur_x879, i64 %18973
  %18975 = getelementptr inbounds i16, i16* %18974, i64 -32
  %18976 = bitcast i16* %18975 to <16 x i16>*
  %18977 = load <16 x i16>, <16 x i16>* %18976, align 2, !tbaa !399
  %18978 = getelementptr inbounds i16, i16* %18974, i64 -16
  %18979 = bitcast i16* %18978 to <16 x i16>*
  %18980 = load <16 x i16>, <16 x i16>* %18979, align 2, !tbaa !399
  %18981 = mul nsw i64 %18942, %306
  %18982 = add nsw i64 %18981, %288
  %18983 = getelementptr inbounds i16, i16* %blur_x879, i64 %18982
  %18984 = getelementptr inbounds i16, i16* %18983, i64 -32
  %18985 = bitcast i16* %18984 to <16 x i16>*
  %18986 = load <16 x i16>, <16 x i16>* %18985, align 2, !tbaa !399
  %18987 = getelementptr inbounds i16, i16* %18983, i64 -16
  %18988 = bitcast i16* %18987 to <16 x i16>*
  %18989 = load <16 x i16>, <16 x i16>* %18988, align 2, !tbaa !399
  %18990 = zext i32 %.pre-phi3476 to i64
  %18991 = mul nsw i64 %18990, %306
  %18992 = add nsw i64 %18991, %288
  %18993 = getelementptr inbounds i16, i16* %blur_x879, i64 %18992
  %18994 = getelementptr inbounds i16, i16* %18993, i64 -32
  %18995 = bitcast i16* %18994 to <16 x i16>*
  %18996 = load <16 x i16>, <16 x i16>* %18995, align 2, !tbaa !399
  %18997 = getelementptr inbounds i16, i16* %18993, i64 -16
  %18998 = bitcast i16* %18997 to <16 x i16>*
  %18999 = load <16 x i16>, <16 x i16>* %18998, align 2, !tbaa !399
  %19000 = add <16 x i16> %18967, %18957
  %19001 = add <16 x i16> %19000, %18977
  %19002 = add <16 x i16> %19001, %18986
  %19003 = add <16 x i16> %19002, %18996
  %19004 = add <16 x i16> %18970, %18960
  %19005 = add <16 x i16> %19004, %18980
  %19006 = add <16 x i16> %19005, %18989
  %19007 = add <16 x i16> %19006, %18999
  %19008 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19003, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19009 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19007, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19010 = shufflevector <16 x i16> %19008, <16 x i16> %19009, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19011 = lshr <32 x i16> %19010, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19012 = shufflevector <32 x i16> %19011, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19013 = sext i32 %a353 to i64
  %19014 = add nsw i64 %19013, 7
  %19015 = mul nsw i64 %19014, %307
  %19016 = add nsw i64 %309, %19015
  %19017 = getelementptr inbounds i16, i16* %260, i64 %19016
  %19018 = getelementptr inbounds i16, i16* %19017, i64 -32
  %19019 = bitcast i16* %19018 to <16 x i16>*
  store <16 x i16> %19012, <16 x i16>* %19019, align 2, !tbaa !401
  %19020 = shufflevector <32 x i16> %19011, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19021 = getelementptr inbounds i16, i16* %19017, i64 -16
  %19022 = bitcast i16* %19021 to <16 x i16>*
  store <16 x i16> %19020, <16 x i16>* %19022, align 2, !tbaa !401
  br label %after_bb1302

"for blur_y.s0.x.x.rebased1317":                  ; preds = %"for blur_y.s0.x.x.rebased1317.preheader", %"consume blur_x1326"
  %indvars.iv3296 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1317.preheader" ], [ %indvars.iv.next3297, %"consume blur_x1326" ]
  %19023 = add nsw i64 %indvars.iv3296, %295
  %19024 = icmp slt i64 %19023, 1
  %19025 = trunc i64 %19023 to i32
  %19026 = shl nsw i32 %19025, 5
  %19027 = icmp sgt i32 %198, %19026
  %19028 = or i1 %19024, %19027
  br i1 %19028, label %"produce blur_x1324", label %"for blur_y.s0.x.x.rebased1317.consume blur_x1326_crit_edge"

"for blur_y.s0.x.x.rebased1317.consume blur_x1326_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1317"
  %.pre3511 = shl nsw i64 %19023, 5
  br label %"consume blur_x1326"

"end for blur_y.s0.x.x.rebased1318":              ; preds = %"consume blur_x1326", %after_bb1302
  br i1 %296, label %"for blur_y.s0.x.x.rebased1334.preheader", label %"end for blur_y.s0.x.x.rebased1335", !prof !386

"for blur_y.s0.x.x.rebased1334.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1318"
  %19029 = sext i32 %t1700976 to i64
  %19030 = zext i32 %.pre-phi3468 to i64
  %19031 = mul nsw i64 %19030, %306
  %19032 = sub nsw i64 %19031, %290
  %19033 = zext i32 %.pre-phi3502 to i64
  %19034 = mul nsw i64 %19033, %306
  %19035 = sub nsw i64 %19034, %290
  %19036 = zext i32 %.pre-phi3472 to i64
  %19037 = mul nsw i64 %19036, %306
  %19038 = sub nsw i64 %19037, %290
  %19039 = zext i32 %.pre-phi3480 to i64
  %19040 = mul nsw i64 %19039, %306
  %19041 = sub nsw i64 %19040, %290
  %19042 = zext i32 %.pre-phi3476 to i64
  %19043 = mul nsw i64 %19042, %306
  %19044 = sub nsw i64 %19043, %290
  %19045 = sext i32 %a353 to i64
  %19046 = add nsw i64 %19045, 7
  %19047 = mul nsw i64 %19046, %307
  %19048 = add nsw i64 %19047, %310
  br label %"for blur_y.s0.x.x.rebased1334"

"produce blur_x1324":                             ; preds = %"for blur_y.s0.x.x.rebased1317"
  %t8241325 = add nsw i32 %19026, %t18171314
  %19049 = sext i32 %t8241325 to i64
  %19050 = getelementptr inbounds i16, i16* %read_input822, i64 %19049
  %19051 = getelementptr inbounds i16, i16* %19050, i64 1
  %19052 = bitcast i16* %19051 to <16 x i16>*
  %19053 = load <16 x i16>, <16 x i16>* %19052, align 2, !tbaa !396
  %19054 = getelementptr inbounds i16, i16* %19050, i64 17
  %19055 = bitcast i16* %19054 to <16 x i16>*
  %19056 = load <16 x i16>, <16 x i16>* %19055, align 2, !tbaa !396
  %19057 = bitcast i16* %19050 to <16 x i16>*
  %19058 = load <16 x i16>, <16 x i16>* %19057, align 2, !tbaa !396
  %19059 = getelementptr inbounds i16, i16* %19050, i64 16
  %19060 = bitcast i16* %19059 to <16 x i16>*
  %19061 = load <16 x i16>, <16 x i16>* %19060, align 2, !tbaa !396
  %19062 = getelementptr inbounds i16, i16* %19050, i64 2
  %19063 = bitcast i16* %19062 to <16 x i16>*
  %19064 = load <16 x i16>, <16 x i16>* %19063, align 2, !tbaa !396
  %19065 = getelementptr inbounds i16, i16* %19050, i64 18
  %19066 = bitcast i16* %19065 to <16 x i16>*
  %19067 = load <16 x i16>, <16 x i16>* %19066, align 2, !tbaa !396
  %19068 = getelementptr inbounds i16, i16* %19050, i64 4
  %19069 = bitcast i16* %19068 to <16 x i16>*
  %19070 = load <16 x i16>, <16 x i16>* %19069, align 2, !tbaa !396
  %19071 = getelementptr inbounds i16, i16* %19050, i64 20
  %19072 = bitcast i16* %19071 to <16 x i16>*
  %19073 = load <16 x i16>, <16 x i16>* %19072, align 2, !tbaa !396
  %19074 = getelementptr inbounds i16, i16* %19050, i64 3
  %19075 = bitcast i16* %19074 to <16 x i16>*
  %19076 = load <16 x i16>, <16 x i16>* %19075, align 2, !tbaa !396
  %19077 = getelementptr inbounds i16, i16* %19050, i64 19
  %19078 = bitcast i16* %19077 to <16 x i16>*
  %19079 = load <16 x i16>, <16 x i16>* %19078, align 2, !tbaa !396
  %19080 = add <16 x i16> %19058, %19053
  %19081 = add <16 x i16> %19080, %19064
  %19082 = add <16 x i16> %19081, %19070
  %19083 = add <16 x i16> %19082, %19076
  %19084 = add <16 x i16> %19061, %19056
  %19085 = add <16 x i16> %19084, %19067
  %19086 = add <16 x i16> %19085, %19073
  %19087 = add <16 x i16> %19086, %19079
  %19088 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19083, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19089 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19087, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19090 = shufflevector <16 x i16> %19088, <16 x i16> %19089, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19091 = lshr <32 x i16> %19090, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19092 = shufflevector <32 x i16> %19091, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19093 = shl nsw i64 %19023, 5
  %19094 = add nsw i64 %19093, %18878
  %19095 = getelementptr inbounds i16, i16* %blur_x879, i64 %19094
  %19096 = bitcast i16* %19095 to <16 x i16>*
  store <16 x i16> %19092, <16 x i16>* %19096, align 2, !tbaa !399
  %19097 = shufflevector <32 x i16> %19091, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19098 = getelementptr inbounds i16, i16* %19095, i64 16
  %19099 = bitcast i16* %19098 to <16 x i16>*
  store <16 x i16> %19097, <16 x i16>* %19099, align 2, !tbaa !399
  br label %"consume blur_x1326"

"consume blur_x1326":                             ; preds = %"for blur_y.s0.x.x.rebased1317.consume blur_x1326_crit_edge", %"produce blur_x1324"
  %.pre-phi3512 = phi i64 [ %.pre3511, %"for blur_y.s0.x.x.rebased1317.consume blur_x1326_crit_edge" ], [ %19093, %"produce blur_x1324" ]
  %19100 = add nsw i64 %18881, %.pre-phi3512
  %19101 = getelementptr inbounds i16, i16* %blur_x879, i64 %19100
  %19102 = bitcast i16* %19101 to <16 x i16>*
  %19103 = load <16 x i16>, <16 x i16>* %19102, align 2, !tbaa !399
  %19104 = getelementptr inbounds i16, i16* %19101, i64 16
  %19105 = bitcast i16* %19104 to <16 x i16>*
  %19106 = load <16 x i16>, <16 x i16>* %19105, align 2, !tbaa !399
  %19107 = add nsw i64 %18884, %.pre-phi3512
  %19108 = getelementptr inbounds i16, i16* %blur_x879, i64 %19107
  %19109 = bitcast i16* %19108 to <16 x i16>*
  %19110 = load <16 x i16>, <16 x i16>* %19109, align 2, !tbaa !399
  %19111 = getelementptr inbounds i16, i16* %19108, i64 16
  %19112 = bitcast i16* %19111 to <16 x i16>*
  %19113 = load <16 x i16>, <16 x i16>* %19112, align 2, !tbaa !399
  %19114 = add nsw i64 %18887, %.pre-phi3512
  %19115 = getelementptr inbounds i16, i16* %blur_x879, i64 %19114
  %19116 = bitcast i16* %19115 to <16 x i16>*
  %19117 = load <16 x i16>, <16 x i16>* %19116, align 2, !tbaa !399
  %19118 = getelementptr inbounds i16, i16* %19115, i64 16
  %19119 = bitcast i16* %19118 to <16 x i16>*
  %19120 = load <16 x i16>, <16 x i16>* %19119, align 2, !tbaa !399
  %19121 = add nsw i64 %18890, %.pre-phi3512
  %19122 = getelementptr inbounds i16, i16* %blur_x879, i64 %19121
  %19123 = bitcast i16* %19122 to <16 x i16>*
  %19124 = load <16 x i16>, <16 x i16>* %19123, align 2, !tbaa !399
  %19125 = getelementptr inbounds i16, i16* %19122, i64 16
  %19126 = bitcast i16* %19125 to <16 x i16>*
  %19127 = load <16 x i16>, <16 x i16>* %19126, align 2, !tbaa !399
  %19128 = add nsw i64 %18893, %.pre-phi3512
  %19129 = getelementptr inbounds i16, i16* %blur_x879, i64 %19128
  %19130 = bitcast i16* %19129 to <16 x i16>*
  %19131 = load <16 x i16>, <16 x i16>* %19130, align 2, !tbaa !399
  %19132 = getelementptr inbounds i16, i16* %19129, i64 16
  %19133 = bitcast i16* %19132 to <16 x i16>*
  %19134 = load <16 x i16>, <16 x i16>* %19133, align 2, !tbaa !399
  %19135 = add <16 x i16> %19110, %19103
  %19136 = add <16 x i16> %19135, %19117
  %19137 = add <16 x i16> %19136, %19124
  %19138 = add <16 x i16> %19137, %19131
  %19139 = add <16 x i16> %19113, %19106
  %19140 = add <16 x i16> %19139, %19120
  %19141 = add <16 x i16> %19140, %19127
  %19142 = add <16 x i16> %19141, %19134
  %19143 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19138, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19144 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19142, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19145 = shufflevector <16 x i16> %19143, <16 x i16> %19144, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19146 = lshr <32 x i16> %19145, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19147 = shufflevector <32 x i16> %19146, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19148 = add nsw i64 %18897, %.pre-phi3512
  %19149 = getelementptr inbounds i16, i16* %260, i64 %19148
  %19150 = bitcast i16* %19149 to <16 x i16>*
  store <16 x i16> %19147, <16 x i16>* %19150, align 2, !tbaa !401
  %19151 = shufflevector <32 x i16> %19146, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19152 = getelementptr inbounds i16, i16* %19149, i64 16
  %19153 = bitcast i16* %19152 to <16 x i16>*
  store <16 x i16> %19151, <16 x i16>* %19153, align 2, !tbaa !401
  %indvars.iv.next3297 = add nuw nsw i64 %indvars.iv3296, 1
  %.not2590 = icmp eq i64 %indvars.iv.next3297, %378
  br i1 %.not2590, label %"end for blur_y.s0.x.x.rebased1318", label %"for blur_y.s0.x.x.rebased1317"

"for blur_y.s0.x.x.rebased1334":                  ; preds = %"for blur_y.s0.x.x.rebased1334.preheader", %"consume blur_x1344"
  %blur_y.s0.x.x.rebased1336 = phi i32 [ %19266, %"consume blur_x1344" ], [ 0, %"for blur_y.s0.x.x.rebased1334.preheader" ]
  %19154 = add nsw i32 %blur_y.s0.x.x.rebased1336, %t1626814
  %a481 = shl nsw i32 %19154, 5
  %19155 = icmp sgt i32 %a341, %a481
  %b487 = select i1 %19155, i32 %a481, i32 %a341
  %19156 = icmp slt i32 %19154, 1
  %19157 = icmp sgt i32 %198, %a481
  %19158 = or i1 %19156, %19157
  br i1 %19158, label %"produce blur_x1341", label %"consume blur_x1344"

"end for blur_y.s0.x.x.rebased1335":              ; preds = %"consume blur_x1344", %"end for blur_y.s0.x.x.rebased1318"
  br i1 %228, label %"produce blur_x1348", label %after_bb1345

"produce blur_x1341":                             ; preds = %"for blur_y.s0.x.x.rebased1334"
  %19159 = icmp slt i32 %b487, %198
  %blur_x.s0.x.v1.base.s1342 = select i1 %19159, i32 %b487, i32 %198
  %t8291343 = add nsw i32 %blur_x.s0.x.v1.base.s1342, %t18171314
  %19160 = sext i32 %t8291343 to i64
  %19161 = getelementptr inbounds i16, i16* %read_input822, i64 %19160
  %19162 = getelementptr inbounds i16, i16* %19161, i64 1
  %19163 = bitcast i16* %19162 to <16 x i16>*
  %19164 = load <16 x i16>, <16 x i16>* %19163, align 2, !tbaa !396
  %19165 = getelementptr inbounds i16, i16* %19161, i64 17
  %19166 = bitcast i16* %19165 to <16 x i16>*
  %19167 = load <16 x i16>, <16 x i16>* %19166, align 2, !tbaa !396
  %19168 = bitcast i16* %19161 to <16 x i16>*
  %19169 = load <16 x i16>, <16 x i16>* %19168, align 2, !tbaa !396
  %19170 = getelementptr inbounds i16, i16* %19161, i64 16
  %19171 = bitcast i16* %19170 to <16 x i16>*
  %19172 = load <16 x i16>, <16 x i16>* %19171, align 2, !tbaa !396
  %19173 = getelementptr inbounds i16, i16* %19161, i64 2
  %19174 = bitcast i16* %19173 to <16 x i16>*
  %19175 = load <16 x i16>, <16 x i16>* %19174, align 2, !tbaa !396
  %19176 = getelementptr inbounds i16, i16* %19161, i64 18
  %19177 = bitcast i16* %19176 to <16 x i16>*
  %19178 = load <16 x i16>, <16 x i16>* %19177, align 2, !tbaa !396
  %19179 = getelementptr inbounds i16, i16* %19161, i64 4
  %19180 = bitcast i16* %19179 to <16 x i16>*
  %19181 = load <16 x i16>, <16 x i16>* %19180, align 2, !tbaa !396
  %19182 = getelementptr inbounds i16, i16* %19161, i64 20
  %19183 = bitcast i16* %19182 to <16 x i16>*
  %19184 = load <16 x i16>, <16 x i16>* %19183, align 2, !tbaa !396
  %19185 = getelementptr inbounds i16, i16* %19161, i64 3
  %19186 = bitcast i16* %19185 to <16 x i16>*
  %19187 = load <16 x i16>, <16 x i16>* %19186, align 2, !tbaa !396
  %19188 = getelementptr inbounds i16, i16* %19161, i64 19
  %19189 = bitcast i16* %19188 to <16 x i16>*
  %19190 = load <16 x i16>, <16 x i16>* %19189, align 2, !tbaa !396
  %19191 = add <16 x i16> %19169, %19164
  %19192 = add <16 x i16> %19191, %19175
  %19193 = add <16 x i16> %19192, %19181
  %19194 = add <16 x i16> %19193, %19187
  %19195 = add <16 x i16> %19172, %19167
  %19196 = add <16 x i16> %19195, %19178
  %19197 = add <16 x i16> %19196, %19184
  %19198 = add <16 x i16> %19197, %19190
  %19199 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19194, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19200 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19198, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19201 = shufflevector <16 x i16> %19199, <16 x i16> %19200, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19202 = lshr <32 x i16> %19201, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19203 = shufflevector <32 x i16> %19202, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19204 = sext i32 %blur_x.s0.x.v1.base.s1342 to i64
  %19205 = add nsw i64 %19204, %19029
  %19206 = getelementptr inbounds i16, i16* %blur_x879, i64 %19205
  %19207 = bitcast i16* %19206 to <16 x i16>*
  store <16 x i16> %19203, <16 x i16>* %19207, align 2, !tbaa !399
  %19208 = shufflevector <32 x i16> %19202, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19209 = getelementptr inbounds i16, i16* %19206, i64 16
  %19210 = bitcast i16* %19209 to <16 x i16>*
  store <16 x i16> %19208, <16 x i16>* %19210, align 2, !tbaa !399
  br label %"consume blur_x1344"

"consume blur_x1344":                             ; preds = %"for blur_y.s0.x.x.rebased1334", %"produce blur_x1341"
  %19211 = sext i32 %b487 to i64
  %19212 = add nsw i64 %19032, %19211
  %19213 = getelementptr inbounds i16, i16* %blur_x879, i64 %19212
  %19214 = bitcast i16* %19213 to <16 x i16>*
  %19215 = load <16 x i16>, <16 x i16>* %19214, align 2, !tbaa !399
  %19216 = getelementptr inbounds i16, i16* %19213, i64 16
  %19217 = bitcast i16* %19216 to <16 x i16>*
  %19218 = load <16 x i16>, <16 x i16>* %19217, align 2, !tbaa !399
  %19219 = add nsw i64 %19035, %19211
  %19220 = getelementptr inbounds i16, i16* %blur_x879, i64 %19219
  %19221 = bitcast i16* %19220 to <16 x i16>*
  %19222 = load <16 x i16>, <16 x i16>* %19221, align 2, !tbaa !399
  %19223 = getelementptr inbounds i16, i16* %19220, i64 16
  %19224 = bitcast i16* %19223 to <16 x i16>*
  %19225 = load <16 x i16>, <16 x i16>* %19224, align 2, !tbaa !399
  %19226 = add nsw i64 %19038, %19211
  %19227 = getelementptr inbounds i16, i16* %blur_x879, i64 %19226
  %19228 = bitcast i16* %19227 to <16 x i16>*
  %19229 = load <16 x i16>, <16 x i16>* %19228, align 2, !tbaa !399
  %19230 = getelementptr inbounds i16, i16* %19227, i64 16
  %19231 = bitcast i16* %19230 to <16 x i16>*
  %19232 = load <16 x i16>, <16 x i16>* %19231, align 2, !tbaa !399
  %19233 = add nsw i64 %19041, %19211
  %19234 = getelementptr inbounds i16, i16* %blur_x879, i64 %19233
  %19235 = bitcast i16* %19234 to <16 x i16>*
  %19236 = load <16 x i16>, <16 x i16>* %19235, align 2, !tbaa !399
  %19237 = getelementptr inbounds i16, i16* %19234, i64 16
  %19238 = bitcast i16* %19237 to <16 x i16>*
  %19239 = load <16 x i16>, <16 x i16>* %19238, align 2, !tbaa !399
  %19240 = add nsw i64 %19044, %19211
  %19241 = getelementptr inbounds i16, i16* %blur_x879, i64 %19240
  %19242 = bitcast i16* %19241 to <16 x i16>*
  %19243 = load <16 x i16>, <16 x i16>* %19242, align 2, !tbaa !399
  %19244 = getelementptr inbounds i16, i16* %19241, i64 16
  %19245 = bitcast i16* %19244 to <16 x i16>*
  %19246 = load <16 x i16>, <16 x i16>* %19245, align 2, !tbaa !399
  %19247 = add <16 x i16> %19222, %19215
  %19248 = add <16 x i16> %19247, %19229
  %19249 = add <16 x i16> %19248, %19236
  %19250 = add <16 x i16> %19249, %19243
  %19251 = add <16 x i16> %19225, %19218
  %19252 = add <16 x i16> %19251, %19232
  %19253 = add <16 x i16> %19252, %19239
  %19254 = add <16 x i16> %19253, %19246
  %19255 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19250, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19256 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19254, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19257 = shufflevector <16 x i16> %19255, <16 x i16> %19256, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19258 = lshr <32 x i16> %19257, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19259 = shufflevector <32 x i16> %19258, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19260 = add nsw i64 %19048, %19211
  %19261 = getelementptr inbounds i16, i16* %260, i64 %19260
  %19262 = bitcast i16* %19261 to <16 x i16>*
  store <16 x i16> %19259, <16 x i16>* %19262, align 2, !tbaa !401
  %19263 = shufflevector <32 x i16> %19258, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19264 = getelementptr inbounds i16, i16* %19261, i64 16
  %19265 = bitcast i16* %19264 to <16 x i16>*
  store <16 x i16> %19263, <16 x i16>* %19265, align 2, !tbaa !401
  %19266 = add nuw nsw i32 %blur_y.s0.x.x.rebased1336, 1
  %.not2589 = icmp eq i32 %19266, %t1683899
  br i1 %.not2589, label %"end for blur_y.s0.x.x.rebased1335", label %"for blur_y.s0.x.x.rebased1334"

after_bb1345:                                     ; preds = %"end for blur_y.s0.x.x.rebased1335", %"produce blur_x1348"
  br i1 %294, label %"for blur_y.s0.x.x.rebased1360.preheader", label %"end for blur_y.s0.x.x.rebased1361", !prof !386

"for blur_y.s0.x.x.rebased1360.preheader":        ; preds = %after_bb1345
  %19267 = sext i32 %t17061012 to i64
  %19268 = zext i32 %.pre-phi3472 to i64
  %19269 = mul nsw i64 %19268, %306
  %19270 = sub nsw i64 %19269, %290
  %19271 = zext i32 %.pre-phi3468 to i64
  %19272 = mul nsw i64 %19271, %306
  %19273 = sub nsw i64 %19272, %290
  %19274 = zext i32 %.pre-phi3476 to i64
  %19275 = mul nsw i64 %19274, %306
  %19276 = sub nsw i64 %19275, %290
  %19277 = zext i32 %.pre-phi3484 to i64
  %19278 = mul nsw i64 %19277, %306
  %19279 = sub nsw i64 %19278, %290
  %19280 = zext i32 %.pre-phi3480 to i64
  %19281 = mul nsw i64 %19280, %306
  %19282 = sub nsw i64 %19281, %290
  %19283 = sext i32 %a353 to i64
  %19284 = add nsw i64 %19283, 8
  %19285 = mul nsw i64 %19284, %307
  %19286 = add nsw i64 %19285, %310
  br label %"for blur_y.s0.x.x.rebased1360"

"produce blur_x1348":                             ; preds = %"end for blur_y.s0.x.x.rebased1335"
  %19287 = getelementptr inbounds i16, i16* %read_input822, i64 %325
  %19288 = getelementptr inbounds i16, i16* %19287, i64 -31
  %19289 = bitcast i16* %19288 to <16 x i16>*
  %19290 = load <16 x i16>, <16 x i16>* %19289, align 2, !tbaa !396
  %19291 = getelementptr inbounds i16, i16* %19287, i64 -15
  %19292 = bitcast i16* %19291 to <16 x i16>*
  %19293 = load <16 x i16>, <16 x i16>* %19292, align 2, !tbaa !396
  %19294 = getelementptr inbounds i16, i16* %19287, i64 -32
  %19295 = bitcast i16* %19294 to <16 x i16>*
  %19296 = load <16 x i16>, <16 x i16>* %19295, align 2, !tbaa !396
  %19297 = getelementptr inbounds i16, i16* %19287, i64 -16
  %19298 = bitcast i16* %19297 to <16 x i16>*
  %19299 = load <16 x i16>, <16 x i16>* %19298, align 2, !tbaa !396
  %19300 = getelementptr inbounds i16, i16* %19287, i64 -30
  %19301 = bitcast i16* %19300 to <16 x i16>*
  %19302 = load <16 x i16>, <16 x i16>* %19301, align 2, !tbaa !396
  %19303 = getelementptr inbounds i16, i16* %19287, i64 -14
  %19304 = bitcast i16* %19303 to <16 x i16>*
  %19305 = load <16 x i16>, <16 x i16>* %19304, align 2, !tbaa !396
  %19306 = getelementptr inbounds i16, i16* %19287, i64 -28
  %19307 = bitcast i16* %19306 to <16 x i16>*
  %19308 = load <16 x i16>, <16 x i16>* %19307, align 2, !tbaa !396
  %19309 = getelementptr inbounds i16, i16* %19287, i64 -12
  %19310 = bitcast i16* %19309 to <16 x i16>*
  %19311 = load <16 x i16>, <16 x i16>* %19310, align 2, !tbaa !396
  %19312 = getelementptr inbounds i16, i16* %19287, i64 -29
  %19313 = bitcast i16* %19312 to <16 x i16>*
  %19314 = load <16 x i16>, <16 x i16>* %19313, align 2, !tbaa !396
  %19315 = getelementptr inbounds i16, i16* %19287, i64 -13
  %19316 = bitcast i16* %19315 to <16 x i16>*
  %19317 = load <16 x i16>, <16 x i16>* %19316, align 2, !tbaa !396
  %19318 = add <16 x i16> %19296, %19290
  %19319 = add <16 x i16> %19318, %19302
  %19320 = add <16 x i16> %19319, %19308
  %19321 = add <16 x i16> %19320, %19314
  %19322 = add <16 x i16> %19299, %19293
  %19323 = add <16 x i16> %19322, %19305
  %19324 = add <16 x i16> %19323, %19311
  %19325 = add <16 x i16> %19324, %19317
  %19326 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19321, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19327 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19325, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19328 = shufflevector <16 x i16> %19326, <16 x i16> %19327, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19329 = lshr <32 x i16> %19328, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19330 = shufflevector <32 x i16> %19329, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19331 = zext i32 %.pre-phi3484 to i64
  %19332 = mul nsw i64 %291, %19331
  %19333 = add nsw i64 %293, %19332
  %19334 = getelementptr inbounds i16, i16* %blur_x879, i64 %19333
  %19335 = getelementptr inbounds i16, i16* %19334, i64 -32
  %19336 = bitcast i16* %19335 to <16 x i16>*
  store <16 x i16> %19330, <16 x i16>* %19336, align 2, !tbaa !399
  %19337 = shufflevector <32 x i16> %19329, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19338 = getelementptr inbounds i16, i16* %19334, i64 -16
  %19339 = bitcast i16* %19338 to <16 x i16>*
  store <16 x i16> %19337, <16 x i16>* %19339, align 2, !tbaa !399
  %19340 = zext i32 %.pre-phi3472 to i64
  %19341 = mul nsw i64 %19340, %306
  %19342 = add nsw i64 %19341, %288
  %19343 = getelementptr inbounds i16, i16* %blur_x879, i64 %19342
  %19344 = getelementptr inbounds i16, i16* %19343, i64 -32
  %19345 = bitcast i16* %19344 to <16 x i16>*
  %19346 = load <16 x i16>, <16 x i16>* %19345, align 2, !tbaa !399
  %19347 = getelementptr inbounds i16, i16* %19343, i64 -16
  %19348 = bitcast i16* %19347 to <16 x i16>*
  %19349 = load <16 x i16>, <16 x i16>* %19348, align 2, !tbaa !399
  %19350 = zext i32 %.pre-phi3468 to i64
  %19351 = mul nsw i64 %19350, %306
  %19352 = add nsw i64 %19351, %288
  %19353 = getelementptr inbounds i16, i16* %blur_x879, i64 %19352
  %19354 = getelementptr inbounds i16, i16* %19353, i64 -32
  %19355 = bitcast i16* %19354 to <16 x i16>*
  %19356 = load <16 x i16>, <16 x i16>* %19355, align 2, !tbaa !399
  %19357 = getelementptr inbounds i16, i16* %19353, i64 -16
  %19358 = bitcast i16* %19357 to <16 x i16>*
  %19359 = load <16 x i16>, <16 x i16>* %19358, align 2, !tbaa !399
  %19360 = zext i32 %.pre-phi3476 to i64
  %19361 = mul nsw i64 %19360, %306
  %19362 = add nsw i64 %19361, %288
  %19363 = getelementptr inbounds i16, i16* %blur_x879, i64 %19362
  %19364 = getelementptr inbounds i16, i16* %19363, i64 -32
  %19365 = bitcast i16* %19364 to <16 x i16>*
  %19366 = load <16 x i16>, <16 x i16>* %19365, align 2, !tbaa !399
  %19367 = getelementptr inbounds i16, i16* %19363, i64 -16
  %19368 = bitcast i16* %19367 to <16 x i16>*
  %19369 = load <16 x i16>, <16 x i16>* %19368, align 2, !tbaa !399
  %19370 = mul nsw i64 %19331, %306
  %19371 = add nsw i64 %19370, %288
  %19372 = getelementptr inbounds i16, i16* %blur_x879, i64 %19371
  %19373 = getelementptr inbounds i16, i16* %19372, i64 -32
  %19374 = bitcast i16* %19373 to <16 x i16>*
  %19375 = load <16 x i16>, <16 x i16>* %19374, align 2, !tbaa !399
  %19376 = getelementptr inbounds i16, i16* %19372, i64 -16
  %19377 = bitcast i16* %19376 to <16 x i16>*
  %19378 = load <16 x i16>, <16 x i16>* %19377, align 2, !tbaa !399
  %19379 = zext i32 %.pre-phi3480 to i64
  %19380 = mul nsw i64 %19379, %306
  %19381 = add nsw i64 %19380, %288
  %19382 = getelementptr inbounds i16, i16* %blur_x879, i64 %19381
  %19383 = getelementptr inbounds i16, i16* %19382, i64 -32
  %19384 = bitcast i16* %19383 to <16 x i16>*
  %19385 = load <16 x i16>, <16 x i16>* %19384, align 2, !tbaa !399
  %19386 = getelementptr inbounds i16, i16* %19382, i64 -16
  %19387 = bitcast i16* %19386 to <16 x i16>*
  %19388 = load <16 x i16>, <16 x i16>* %19387, align 2, !tbaa !399
  %19389 = add <16 x i16> %19356, %19346
  %19390 = add <16 x i16> %19389, %19366
  %19391 = add <16 x i16> %19390, %19375
  %19392 = add <16 x i16> %19391, %19385
  %19393 = add <16 x i16> %19359, %19349
  %19394 = add <16 x i16> %19393, %19369
  %19395 = add <16 x i16> %19394, %19378
  %19396 = add <16 x i16> %19395, %19388
  %19397 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19392, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19398 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19396, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19399 = shufflevector <16 x i16> %19397, <16 x i16> %19398, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19400 = lshr <32 x i16> %19399, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19401 = shufflevector <32 x i16> %19400, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19402 = sext i32 %a353 to i64
  %19403 = add nsw i64 %19402, 8
  %19404 = mul nsw i64 %19403, %307
  %19405 = add nsw i64 %309, %19404
  %19406 = getelementptr inbounds i16, i16* %260, i64 %19405
  %19407 = getelementptr inbounds i16, i16* %19406, i64 -32
  %19408 = bitcast i16* %19407 to <16 x i16>*
  store <16 x i16> %19401, <16 x i16>* %19408, align 2, !tbaa !401
  %19409 = shufflevector <32 x i16> %19400, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19410 = getelementptr inbounds i16, i16* %19406, i64 -16
  %19411 = bitcast i16* %19410 to <16 x i16>*
  store <16 x i16> %19409, <16 x i16>* %19411, align 2, !tbaa !401
  br label %after_bb1345

"for blur_y.s0.x.x.rebased1360":                  ; preds = %"for blur_y.s0.x.x.rebased1360.preheader", %"consume blur_x1369"
  %indvars.iv3299 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1360.preheader" ], [ %indvars.iv.next3300, %"consume blur_x1369" ]
  %19412 = add nsw i64 %indvars.iv3299, %295
  %19413 = icmp slt i64 %19412, 1
  %19414 = trunc i64 %19412 to i32
  %19415 = shl nsw i32 %19414, 5
  %19416 = icmp sgt i32 %198, %19415
  %19417 = or i1 %19413, %19416
  br i1 %19417, label %"produce blur_x1367", label %"for blur_y.s0.x.x.rebased1360.consume blur_x1369_crit_edge"

"for blur_y.s0.x.x.rebased1360.consume blur_x1369_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1360"
  %.pre3513 = shl nsw i64 %19412, 5
  br label %"consume blur_x1369"

"end for blur_y.s0.x.x.rebased1361":              ; preds = %"consume blur_x1369", %after_bb1345
  br i1 %296, label %"for blur_y.s0.x.x.rebased1377.preheader", label %"end for blur_y.s0.x.x.rebased1378", !prof !386

"for blur_y.s0.x.x.rebased1377.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1361"
  %19418 = sext i32 %t17061012 to i64
  %19419 = zext i32 %.pre-phi3472 to i64
  %19420 = mul nsw i64 %19419, %306
  %19421 = sub nsw i64 %19420, %290
  %19422 = zext i32 %.pre-phi3468 to i64
  %19423 = mul nsw i64 %19422, %306
  %19424 = sub nsw i64 %19423, %290
  %19425 = zext i32 %.pre-phi3476 to i64
  %19426 = mul nsw i64 %19425, %306
  %19427 = sub nsw i64 %19426, %290
  %19428 = zext i32 %.pre-phi3484 to i64
  %19429 = mul nsw i64 %19428, %306
  %19430 = sub nsw i64 %19429, %290
  %19431 = zext i32 %.pre-phi3480 to i64
  %19432 = mul nsw i64 %19431, %306
  %19433 = sub nsw i64 %19432, %290
  %19434 = sext i32 %a353 to i64
  %19435 = add nsw i64 %19434, 8
  %19436 = mul nsw i64 %19435, %307
  %19437 = add nsw i64 %19436, %310
  br label %"for blur_y.s0.x.x.rebased1377"

"produce blur_x1367":                             ; preds = %"for blur_y.s0.x.x.rebased1360"
  %t8401368 = add nsw i32 %19415, %t18331357
  %19438 = sext i32 %t8401368 to i64
  %19439 = getelementptr inbounds i16, i16* %read_input822, i64 %19438
  %19440 = getelementptr inbounds i16, i16* %19439, i64 1
  %19441 = bitcast i16* %19440 to <16 x i16>*
  %19442 = load <16 x i16>, <16 x i16>* %19441, align 2, !tbaa !396
  %19443 = getelementptr inbounds i16, i16* %19439, i64 17
  %19444 = bitcast i16* %19443 to <16 x i16>*
  %19445 = load <16 x i16>, <16 x i16>* %19444, align 2, !tbaa !396
  %19446 = bitcast i16* %19439 to <16 x i16>*
  %19447 = load <16 x i16>, <16 x i16>* %19446, align 2, !tbaa !396
  %19448 = getelementptr inbounds i16, i16* %19439, i64 16
  %19449 = bitcast i16* %19448 to <16 x i16>*
  %19450 = load <16 x i16>, <16 x i16>* %19449, align 2, !tbaa !396
  %19451 = getelementptr inbounds i16, i16* %19439, i64 2
  %19452 = bitcast i16* %19451 to <16 x i16>*
  %19453 = load <16 x i16>, <16 x i16>* %19452, align 2, !tbaa !396
  %19454 = getelementptr inbounds i16, i16* %19439, i64 18
  %19455 = bitcast i16* %19454 to <16 x i16>*
  %19456 = load <16 x i16>, <16 x i16>* %19455, align 2, !tbaa !396
  %19457 = getelementptr inbounds i16, i16* %19439, i64 4
  %19458 = bitcast i16* %19457 to <16 x i16>*
  %19459 = load <16 x i16>, <16 x i16>* %19458, align 2, !tbaa !396
  %19460 = getelementptr inbounds i16, i16* %19439, i64 20
  %19461 = bitcast i16* %19460 to <16 x i16>*
  %19462 = load <16 x i16>, <16 x i16>* %19461, align 2, !tbaa !396
  %19463 = getelementptr inbounds i16, i16* %19439, i64 3
  %19464 = bitcast i16* %19463 to <16 x i16>*
  %19465 = load <16 x i16>, <16 x i16>* %19464, align 2, !tbaa !396
  %19466 = getelementptr inbounds i16, i16* %19439, i64 19
  %19467 = bitcast i16* %19466 to <16 x i16>*
  %19468 = load <16 x i16>, <16 x i16>* %19467, align 2, !tbaa !396
  %19469 = add <16 x i16> %19447, %19442
  %19470 = add <16 x i16> %19469, %19453
  %19471 = add <16 x i16> %19470, %19459
  %19472 = add <16 x i16> %19471, %19465
  %19473 = add <16 x i16> %19450, %19445
  %19474 = add <16 x i16> %19473, %19456
  %19475 = add <16 x i16> %19474, %19462
  %19476 = add <16 x i16> %19475, %19468
  %19477 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19472, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19478 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19476, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19479 = shufflevector <16 x i16> %19477, <16 x i16> %19478, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19480 = lshr <32 x i16> %19479, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19481 = shufflevector <32 x i16> %19480, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19482 = shl nsw i64 %19412, 5
  %19483 = add nsw i64 %19482, %19267
  %19484 = getelementptr inbounds i16, i16* %blur_x879, i64 %19483
  %19485 = bitcast i16* %19484 to <16 x i16>*
  store <16 x i16> %19481, <16 x i16>* %19485, align 2, !tbaa !399
  %19486 = shufflevector <32 x i16> %19480, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19487 = getelementptr inbounds i16, i16* %19484, i64 16
  %19488 = bitcast i16* %19487 to <16 x i16>*
  store <16 x i16> %19486, <16 x i16>* %19488, align 2, !tbaa !399
  br label %"consume blur_x1369"

"consume blur_x1369":                             ; preds = %"for blur_y.s0.x.x.rebased1360.consume blur_x1369_crit_edge", %"produce blur_x1367"
  %.pre-phi3514 = phi i64 [ %.pre3513, %"for blur_y.s0.x.x.rebased1360.consume blur_x1369_crit_edge" ], [ %19482, %"produce blur_x1367" ]
  %19489 = add nsw i64 %19270, %.pre-phi3514
  %19490 = getelementptr inbounds i16, i16* %blur_x879, i64 %19489
  %19491 = bitcast i16* %19490 to <16 x i16>*
  %19492 = load <16 x i16>, <16 x i16>* %19491, align 2, !tbaa !399
  %19493 = getelementptr inbounds i16, i16* %19490, i64 16
  %19494 = bitcast i16* %19493 to <16 x i16>*
  %19495 = load <16 x i16>, <16 x i16>* %19494, align 2, !tbaa !399
  %19496 = add nsw i64 %19273, %.pre-phi3514
  %19497 = getelementptr inbounds i16, i16* %blur_x879, i64 %19496
  %19498 = bitcast i16* %19497 to <16 x i16>*
  %19499 = load <16 x i16>, <16 x i16>* %19498, align 2, !tbaa !399
  %19500 = getelementptr inbounds i16, i16* %19497, i64 16
  %19501 = bitcast i16* %19500 to <16 x i16>*
  %19502 = load <16 x i16>, <16 x i16>* %19501, align 2, !tbaa !399
  %19503 = add nsw i64 %19276, %.pre-phi3514
  %19504 = getelementptr inbounds i16, i16* %blur_x879, i64 %19503
  %19505 = bitcast i16* %19504 to <16 x i16>*
  %19506 = load <16 x i16>, <16 x i16>* %19505, align 2, !tbaa !399
  %19507 = getelementptr inbounds i16, i16* %19504, i64 16
  %19508 = bitcast i16* %19507 to <16 x i16>*
  %19509 = load <16 x i16>, <16 x i16>* %19508, align 2, !tbaa !399
  %19510 = add nsw i64 %19279, %.pre-phi3514
  %19511 = getelementptr inbounds i16, i16* %blur_x879, i64 %19510
  %19512 = bitcast i16* %19511 to <16 x i16>*
  %19513 = load <16 x i16>, <16 x i16>* %19512, align 2, !tbaa !399
  %19514 = getelementptr inbounds i16, i16* %19511, i64 16
  %19515 = bitcast i16* %19514 to <16 x i16>*
  %19516 = load <16 x i16>, <16 x i16>* %19515, align 2, !tbaa !399
  %19517 = add nsw i64 %19282, %.pre-phi3514
  %19518 = getelementptr inbounds i16, i16* %blur_x879, i64 %19517
  %19519 = bitcast i16* %19518 to <16 x i16>*
  %19520 = load <16 x i16>, <16 x i16>* %19519, align 2, !tbaa !399
  %19521 = getelementptr inbounds i16, i16* %19518, i64 16
  %19522 = bitcast i16* %19521 to <16 x i16>*
  %19523 = load <16 x i16>, <16 x i16>* %19522, align 2, !tbaa !399
  %19524 = add <16 x i16> %19499, %19492
  %19525 = add <16 x i16> %19524, %19506
  %19526 = add <16 x i16> %19525, %19513
  %19527 = add <16 x i16> %19526, %19520
  %19528 = add <16 x i16> %19502, %19495
  %19529 = add <16 x i16> %19528, %19509
  %19530 = add <16 x i16> %19529, %19516
  %19531 = add <16 x i16> %19530, %19523
  %19532 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19527, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19533 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19531, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19534 = shufflevector <16 x i16> %19532, <16 x i16> %19533, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19535 = lshr <32 x i16> %19534, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19536 = shufflevector <32 x i16> %19535, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19537 = add nsw i64 %19286, %.pre-phi3514
  %19538 = getelementptr inbounds i16, i16* %260, i64 %19537
  %19539 = bitcast i16* %19538 to <16 x i16>*
  store <16 x i16> %19536, <16 x i16>* %19539, align 2, !tbaa !401
  %19540 = shufflevector <32 x i16> %19535, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19541 = getelementptr inbounds i16, i16* %19538, i64 16
  %19542 = bitcast i16* %19541 to <16 x i16>*
  store <16 x i16> %19540, <16 x i16>* %19542, align 2, !tbaa !401
  %indvars.iv.next3300 = add nuw nsw i64 %indvars.iv3299, 1
  %.not2588 = icmp eq i64 %indvars.iv.next3300, %378
  br i1 %.not2588, label %"end for blur_y.s0.x.x.rebased1361", label %"for blur_y.s0.x.x.rebased1360"

"for blur_y.s0.x.x.rebased1377":                  ; preds = %"for blur_y.s0.x.x.rebased1377.preheader", %"consume blur_x1387"
  %blur_y.s0.x.x.rebased1379 = phi i32 [ %19655, %"consume blur_x1387" ], [ 0, %"for blur_y.s0.x.x.rebased1377.preheader" ]
  %19543 = add nsw i32 %blur_y.s0.x.x.rebased1379, %t1626814
  %a488 = shl nsw i32 %19543, 5
  %19544 = icmp sgt i32 %a341, %a488
  %b494 = select i1 %19544, i32 %a488, i32 %a341
  %19545 = icmp slt i32 %19543, 1
  %19546 = icmp sgt i32 %198, %a488
  %19547 = or i1 %19545, %19546
  br i1 %19547, label %"produce blur_x1384", label %"consume blur_x1387"

"end for blur_y.s0.x.x.rebased1378":              ; preds = %"consume blur_x1387", %"end for blur_y.s0.x.x.rebased1361"
  br i1 %228, label %"produce blur_x1391", label %after_bb1388

"produce blur_x1384":                             ; preds = %"for blur_y.s0.x.x.rebased1377"
  %19548 = icmp slt i32 %b494, %198
  %blur_x.s0.x.v1.base.s1385 = select i1 %19548, i32 %b494, i32 %198
  %t8451386 = add nsw i32 %blur_x.s0.x.v1.base.s1385, %t18331357
  %19549 = sext i32 %t8451386 to i64
  %19550 = getelementptr inbounds i16, i16* %read_input822, i64 %19549
  %19551 = getelementptr inbounds i16, i16* %19550, i64 1
  %19552 = bitcast i16* %19551 to <16 x i16>*
  %19553 = load <16 x i16>, <16 x i16>* %19552, align 2, !tbaa !396
  %19554 = getelementptr inbounds i16, i16* %19550, i64 17
  %19555 = bitcast i16* %19554 to <16 x i16>*
  %19556 = load <16 x i16>, <16 x i16>* %19555, align 2, !tbaa !396
  %19557 = bitcast i16* %19550 to <16 x i16>*
  %19558 = load <16 x i16>, <16 x i16>* %19557, align 2, !tbaa !396
  %19559 = getelementptr inbounds i16, i16* %19550, i64 16
  %19560 = bitcast i16* %19559 to <16 x i16>*
  %19561 = load <16 x i16>, <16 x i16>* %19560, align 2, !tbaa !396
  %19562 = getelementptr inbounds i16, i16* %19550, i64 2
  %19563 = bitcast i16* %19562 to <16 x i16>*
  %19564 = load <16 x i16>, <16 x i16>* %19563, align 2, !tbaa !396
  %19565 = getelementptr inbounds i16, i16* %19550, i64 18
  %19566 = bitcast i16* %19565 to <16 x i16>*
  %19567 = load <16 x i16>, <16 x i16>* %19566, align 2, !tbaa !396
  %19568 = getelementptr inbounds i16, i16* %19550, i64 4
  %19569 = bitcast i16* %19568 to <16 x i16>*
  %19570 = load <16 x i16>, <16 x i16>* %19569, align 2, !tbaa !396
  %19571 = getelementptr inbounds i16, i16* %19550, i64 20
  %19572 = bitcast i16* %19571 to <16 x i16>*
  %19573 = load <16 x i16>, <16 x i16>* %19572, align 2, !tbaa !396
  %19574 = getelementptr inbounds i16, i16* %19550, i64 3
  %19575 = bitcast i16* %19574 to <16 x i16>*
  %19576 = load <16 x i16>, <16 x i16>* %19575, align 2, !tbaa !396
  %19577 = getelementptr inbounds i16, i16* %19550, i64 19
  %19578 = bitcast i16* %19577 to <16 x i16>*
  %19579 = load <16 x i16>, <16 x i16>* %19578, align 2, !tbaa !396
  %19580 = add <16 x i16> %19558, %19553
  %19581 = add <16 x i16> %19580, %19564
  %19582 = add <16 x i16> %19581, %19570
  %19583 = add <16 x i16> %19582, %19576
  %19584 = add <16 x i16> %19561, %19556
  %19585 = add <16 x i16> %19584, %19567
  %19586 = add <16 x i16> %19585, %19573
  %19587 = add <16 x i16> %19586, %19579
  %19588 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19583, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19589 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19587, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19590 = shufflevector <16 x i16> %19588, <16 x i16> %19589, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19591 = lshr <32 x i16> %19590, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19592 = shufflevector <32 x i16> %19591, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19593 = sext i32 %blur_x.s0.x.v1.base.s1385 to i64
  %19594 = add nsw i64 %19593, %19418
  %19595 = getelementptr inbounds i16, i16* %blur_x879, i64 %19594
  %19596 = bitcast i16* %19595 to <16 x i16>*
  store <16 x i16> %19592, <16 x i16>* %19596, align 2, !tbaa !399
  %19597 = shufflevector <32 x i16> %19591, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19598 = getelementptr inbounds i16, i16* %19595, i64 16
  %19599 = bitcast i16* %19598 to <16 x i16>*
  store <16 x i16> %19597, <16 x i16>* %19599, align 2, !tbaa !399
  br label %"consume blur_x1387"

"consume blur_x1387":                             ; preds = %"for blur_y.s0.x.x.rebased1377", %"produce blur_x1384"
  %19600 = sext i32 %b494 to i64
  %19601 = add nsw i64 %19421, %19600
  %19602 = getelementptr inbounds i16, i16* %blur_x879, i64 %19601
  %19603 = bitcast i16* %19602 to <16 x i16>*
  %19604 = load <16 x i16>, <16 x i16>* %19603, align 2, !tbaa !399
  %19605 = getelementptr inbounds i16, i16* %19602, i64 16
  %19606 = bitcast i16* %19605 to <16 x i16>*
  %19607 = load <16 x i16>, <16 x i16>* %19606, align 2, !tbaa !399
  %19608 = add nsw i64 %19424, %19600
  %19609 = getelementptr inbounds i16, i16* %blur_x879, i64 %19608
  %19610 = bitcast i16* %19609 to <16 x i16>*
  %19611 = load <16 x i16>, <16 x i16>* %19610, align 2, !tbaa !399
  %19612 = getelementptr inbounds i16, i16* %19609, i64 16
  %19613 = bitcast i16* %19612 to <16 x i16>*
  %19614 = load <16 x i16>, <16 x i16>* %19613, align 2, !tbaa !399
  %19615 = add nsw i64 %19427, %19600
  %19616 = getelementptr inbounds i16, i16* %blur_x879, i64 %19615
  %19617 = bitcast i16* %19616 to <16 x i16>*
  %19618 = load <16 x i16>, <16 x i16>* %19617, align 2, !tbaa !399
  %19619 = getelementptr inbounds i16, i16* %19616, i64 16
  %19620 = bitcast i16* %19619 to <16 x i16>*
  %19621 = load <16 x i16>, <16 x i16>* %19620, align 2, !tbaa !399
  %19622 = add nsw i64 %19430, %19600
  %19623 = getelementptr inbounds i16, i16* %blur_x879, i64 %19622
  %19624 = bitcast i16* %19623 to <16 x i16>*
  %19625 = load <16 x i16>, <16 x i16>* %19624, align 2, !tbaa !399
  %19626 = getelementptr inbounds i16, i16* %19623, i64 16
  %19627 = bitcast i16* %19626 to <16 x i16>*
  %19628 = load <16 x i16>, <16 x i16>* %19627, align 2, !tbaa !399
  %19629 = add nsw i64 %19433, %19600
  %19630 = getelementptr inbounds i16, i16* %blur_x879, i64 %19629
  %19631 = bitcast i16* %19630 to <16 x i16>*
  %19632 = load <16 x i16>, <16 x i16>* %19631, align 2, !tbaa !399
  %19633 = getelementptr inbounds i16, i16* %19630, i64 16
  %19634 = bitcast i16* %19633 to <16 x i16>*
  %19635 = load <16 x i16>, <16 x i16>* %19634, align 2, !tbaa !399
  %19636 = add <16 x i16> %19611, %19604
  %19637 = add <16 x i16> %19636, %19618
  %19638 = add <16 x i16> %19637, %19625
  %19639 = add <16 x i16> %19638, %19632
  %19640 = add <16 x i16> %19614, %19607
  %19641 = add <16 x i16> %19640, %19621
  %19642 = add <16 x i16> %19641, %19628
  %19643 = add <16 x i16> %19642, %19635
  %19644 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19639, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19645 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19643, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19646 = shufflevector <16 x i16> %19644, <16 x i16> %19645, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19647 = lshr <32 x i16> %19646, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19648 = shufflevector <32 x i16> %19647, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19649 = add nsw i64 %19437, %19600
  %19650 = getelementptr inbounds i16, i16* %260, i64 %19649
  %19651 = bitcast i16* %19650 to <16 x i16>*
  store <16 x i16> %19648, <16 x i16>* %19651, align 2, !tbaa !401
  %19652 = shufflevector <32 x i16> %19647, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19653 = getelementptr inbounds i16, i16* %19650, i64 16
  %19654 = bitcast i16* %19653 to <16 x i16>*
  store <16 x i16> %19652, <16 x i16>* %19654, align 2, !tbaa !401
  %19655 = add nuw nsw i32 %blur_y.s0.x.x.rebased1379, 1
  %.not2587 = icmp eq i32 %19655, %t1683899
  br i1 %.not2587, label %"end for blur_y.s0.x.x.rebased1378", label %"for blur_y.s0.x.x.rebased1377"

after_bb1388:                                     ; preds = %"end for blur_y.s0.x.x.rebased1378", %"produce blur_x1391"
  br i1 %294, label %"for blur_y.s0.x.x.rebased1403.preheader", label %"end for blur_y.s0.x.x.rebased1404", !prof !386

"for blur_y.s0.x.x.rebased1403.preheader":        ; preds = %after_bb1388
  %19656 = sext i32 %t17221055 to i64
  %19657 = zext i32 %.pre-phi3476 to i64
  %19658 = mul nsw i64 %19657, %306
  %19659 = sub nsw i64 %19658, %290
  %19660 = zext i32 %.pre-phi3472 to i64
  %19661 = mul nsw i64 %19660, %306
  %19662 = sub nsw i64 %19661, %290
  %19663 = zext i32 %.pre-phi3480 to i64
  %19664 = mul nsw i64 %19663, %306
  %19665 = sub nsw i64 %19664, %290
  %19666 = zext i32 %.pre-phi3490 to i64
  %19667 = mul nsw i64 %19666, %306
  %19668 = sub nsw i64 %19667, %290
  %19669 = zext i32 %.pre-phi3484 to i64
  %19670 = mul nsw i64 %19669, %306
  %19671 = sub nsw i64 %19670, %290
  %19672 = sext i32 %a353 to i64
  %19673 = add nsw i64 %19672, 9
  %19674 = mul nsw i64 %19673, %307
  %19675 = add nsw i64 %19674, %310
  br label %"for blur_y.s0.x.x.rebased1403"

"produce blur_x1391":                             ; preds = %"end for blur_y.s0.x.x.rebased1378"
  %19676 = getelementptr inbounds i16, i16* %read_input822, i64 %327
  %19677 = getelementptr inbounds i16, i16* %19676, i64 -31
  %19678 = bitcast i16* %19677 to <16 x i16>*
  %19679 = load <16 x i16>, <16 x i16>* %19678, align 2, !tbaa !396
  %19680 = getelementptr inbounds i16, i16* %19676, i64 -15
  %19681 = bitcast i16* %19680 to <16 x i16>*
  %19682 = load <16 x i16>, <16 x i16>* %19681, align 2, !tbaa !396
  %19683 = getelementptr inbounds i16, i16* %19676, i64 -32
  %19684 = bitcast i16* %19683 to <16 x i16>*
  %19685 = load <16 x i16>, <16 x i16>* %19684, align 2, !tbaa !396
  %19686 = getelementptr inbounds i16, i16* %19676, i64 -16
  %19687 = bitcast i16* %19686 to <16 x i16>*
  %19688 = load <16 x i16>, <16 x i16>* %19687, align 2, !tbaa !396
  %19689 = getelementptr inbounds i16, i16* %19676, i64 -30
  %19690 = bitcast i16* %19689 to <16 x i16>*
  %19691 = load <16 x i16>, <16 x i16>* %19690, align 2, !tbaa !396
  %19692 = getelementptr inbounds i16, i16* %19676, i64 -14
  %19693 = bitcast i16* %19692 to <16 x i16>*
  %19694 = load <16 x i16>, <16 x i16>* %19693, align 2, !tbaa !396
  %19695 = getelementptr inbounds i16, i16* %19676, i64 -28
  %19696 = bitcast i16* %19695 to <16 x i16>*
  %19697 = load <16 x i16>, <16 x i16>* %19696, align 2, !tbaa !396
  %19698 = getelementptr inbounds i16, i16* %19676, i64 -12
  %19699 = bitcast i16* %19698 to <16 x i16>*
  %19700 = load <16 x i16>, <16 x i16>* %19699, align 2, !tbaa !396
  %19701 = getelementptr inbounds i16, i16* %19676, i64 -29
  %19702 = bitcast i16* %19701 to <16 x i16>*
  %19703 = load <16 x i16>, <16 x i16>* %19702, align 2, !tbaa !396
  %19704 = getelementptr inbounds i16, i16* %19676, i64 -13
  %19705 = bitcast i16* %19704 to <16 x i16>*
  %19706 = load <16 x i16>, <16 x i16>* %19705, align 2, !tbaa !396
  %19707 = add <16 x i16> %19685, %19679
  %19708 = add <16 x i16> %19707, %19691
  %19709 = add <16 x i16> %19708, %19697
  %19710 = add <16 x i16> %19709, %19703
  %19711 = add <16 x i16> %19688, %19682
  %19712 = add <16 x i16> %19711, %19694
  %19713 = add <16 x i16> %19712, %19700
  %19714 = add <16 x i16> %19713, %19706
  %19715 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19710, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19716 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19714, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19717 = shufflevector <16 x i16> %19715, <16 x i16> %19716, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19718 = lshr <32 x i16> %19717, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19719 = shufflevector <32 x i16> %19718, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19720 = zext i32 %.pre-phi3490 to i64
  %19721 = mul nsw i64 %291, %19720
  %19722 = add nsw i64 %293, %19721
  %19723 = getelementptr inbounds i16, i16* %blur_x879, i64 %19722
  %19724 = getelementptr inbounds i16, i16* %19723, i64 -32
  %19725 = bitcast i16* %19724 to <16 x i16>*
  store <16 x i16> %19719, <16 x i16>* %19725, align 2, !tbaa !399
  %19726 = shufflevector <32 x i16> %19718, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19727 = getelementptr inbounds i16, i16* %19723, i64 -16
  %19728 = bitcast i16* %19727 to <16 x i16>*
  store <16 x i16> %19726, <16 x i16>* %19728, align 2, !tbaa !399
  %19729 = zext i32 %.pre-phi3476 to i64
  %19730 = mul nsw i64 %19729, %306
  %19731 = add nsw i64 %19730, %288
  %19732 = getelementptr inbounds i16, i16* %blur_x879, i64 %19731
  %19733 = getelementptr inbounds i16, i16* %19732, i64 -32
  %19734 = bitcast i16* %19733 to <16 x i16>*
  %19735 = load <16 x i16>, <16 x i16>* %19734, align 2, !tbaa !399
  %19736 = getelementptr inbounds i16, i16* %19732, i64 -16
  %19737 = bitcast i16* %19736 to <16 x i16>*
  %19738 = load <16 x i16>, <16 x i16>* %19737, align 2, !tbaa !399
  %19739 = zext i32 %.pre-phi3472 to i64
  %19740 = mul nsw i64 %19739, %306
  %19741 = add nsw i64 %19740, %288
  %19742 = getelementptr inbounds i16, i16* %blur_x879, i64 %19741
  %19743 = getelementptr inbounds i16, i16* %19742, i64 -32
  %19744 = bitcast i16* %19743 to <16 x i16>*
  %19745 = load <16 x i16>, <16 x i16>* %19744, align 2, !tbaa !399
  %19746 = getelementptr inbounds i16, i16* %19742, i64 -16
  %19747 = bitcast i16* %19746 to <16 x i16>*
  %19748 = load <16 x i16>, <16 x i16>* %19747, align 2, !tbaa !399
  %19749 = zext i32 %.pre-phi3480 to i64
  %19750 = mul nsw i64 %19749, %306
  %19751 = add nsw i64 %19750, %288
  %19752 = getelementptr inbounds i16, i16* %blur_x879, i64 %19751
  %19753 = getelementptr inbounds i16, i16* %19752, i64 -32
  %19754 = bitcast i16* %19753 to <16 x i16>*
  %19755 = load <16 x i16>, <16 x i16>* %19754, align 2, !tbaa !399
  %19756 = getelementptr inbounds i16, i16* %19752, i64 -16
  %19757 = bitcast i16* %19756 to <16 x i16>*
  %19758 = load <16 x i16>, <16 x i16>* %19757, align 2, !tbaa !399
  %19759 = mul nsw i64 %19720, %306
  %19760 = add nsw i64 %19759, %288
  %19761 = getelementptr inbounds i16, i16* %blur_x879, i64 %19760
  %19762 = getelementptr inbounds i16, i16* %19761, i64 -32
  %19763 = bitcast i16* %19762 to <16 x i16>*
  %19764 = load <16 x i16>, <16 x i16>* %19763, align 2, !tbaa !399
  %19765 = getelementptr inbounds i16, i16* %19761, i64 -16
  %19766 = bitcast i16* %19765 to <16 x i16>*
  %19767 = load <16 x i16>, <16 x i16>* %19766, align 2, !tbaa !399
  %19768 = zext i32 %.pre-phi3484 to i64
  %19769 = mul nsw i64 %19768, %306
  %19770 = add nsw i64 %19769, %288
  %19771 = getelementptr inbounds i16, i16* %blur_x879, i64 %19770
  %19772 = getelementptr inbounds i16, i16* %19771, i64 -32
  %19773 = bitcast i16* %19772 to <16 x i16>*
  %19774 = load <16 x i16>, <16 x i16>* %19773, align 2, !tbaa !399
  %19775 = getelementptr inbounds i16, i16* %19771, i64 -16
  %19776 = bitcast i16* %19775 to <16 x i16>*
  %19777 = load <16 x i16>, <16 x i16>* %19776, align 2, !tbaa !399
  %19778 = add <16 x i16> %19745, %19735
  %19779 = add <16 x i16> %19778, %19755
  %19780 = add <16 x i16> %19779, %19764
  %19781 = add <16 x i16> %19780, %19774
  %19782 = add <16 x i16> %19748, %19738
  %19783 = add <16 x i16> %19782, %19758
  %19784 = add <16 x i16> %19783, %19767
  %19785 = add <16 x i16> %19784, %19777
  %19786 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19781, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19787 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19785, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19788 = shufflevector <16 x i16> %19786, <16 x i16> %19787, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19789 = lshr <32 x i16> %19788, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19790 = shufflevector <32 x i16> %19789, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19791 = sext i32 %a353 to i64
  %19792 = add nsw i64 %19791, 9
  %19793 = mul nsw i64 %19792, %307
  %19794 = add nsw i64 %309, %19793
  %19795 = getelementptr inbounds i16, i16* %260, i64 %19794
  %19796 = getelementptr inbounds i16, i16* %19795, i64 -32
  %19797 = bitcast i16* %19796 to <16 x i16>*
  store <16 x i16> %19790, <16 x i16>* %19797, align 2, !tbaa !401
  %19798 = shufflevector <32 x i16> %19789, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19799 = getelementptr inbounds i16, i16* %19795, i64 -16
  %19800 = bitcast i16* %19799 to <16 x i16>*
  store <16 x i16> %19798, <16 x i16>* %19800, align 2, !tbaa !401
  br label %after_bb1388

"for blur_y.s0.x.x.rebased1403":                  ; preds = %"for blur_y.s0.x.x.rebased1403.preheader", %"consume blur_x1412"
  %indvars.iv3302 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1403.preheader" ], [ %indvars.iv.next3303, %"consume blur_x1412" ]
  %19801 = add nsw i64 %indvars.iv3302, %295
  %19802 = icmp slt i64 %19801, 1
  %19803 = trunc i64 %19801 to i32
  %19804 = shl nsw i32 %19803, 5
  %19805 = icmp sgt i32 %198, %19804
  %19806 = or i1 %19802, %19805
  br i1 %19806, label %"produce blur_x1410", label %"for blur_y.s0.x.x.rebased1403.consume blur_x1412_crit_edge"

"for blur_y.s0.x.x.rebased1403.consume blur_x1412_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1403"
  %.pre3515 = shl nsw i64 %19801, 5
  br label %"consume blur_x1412"

"end for blur_y.s0.x.x.rebased1404":              ; preds = %"consume blur_x1412", %after_bb1388
  br i1 %296, label %"for blur_y.s0.x.x.rebased1420.preheader", label %"end for blur_y.s0.x.x.rebased1421", !prof !386

"for blur_y.s0.x.x.rebased1420.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1404"
  %19807 = sext i32 %t17221055 to i64
  %19808 = zext i32 %.pre-phi3476 to i64
  %19809 = mul nsw i64 %19808, %306
  %19810 = sub nsw i64 %19809, %290
  %19811 = zext i32 %.pre-phi3472 to i64
  %19812 = mul nsw i64 %19811, %306
  %19813 = sub nsw i64 %19812, %290
  %19814 = zext i32 %.pre-phi3480 to i64
  %19815 = mul nsw i64 %19814, %306
  %19816 = sub nsw i64 %19815, %290
  %19817 = zext i32 %.pre-phi3490 to i64
  %19818 = mul nsw i64 %19817, %306
  %19819 = sub nsw i64 %19818, %290
  %19820 = zext i32 %.pre-phi3484 to i64
  %19821 = mul nsw i64 %19820, %306
  %19822 = sub nsw i64 %19821, %290
  %19823 = sext i32 %a353 to i64
  %19824 = add nsw i64 %19823, 9
  %19825 = mul nsw i64 %19824, %307
  %19826 = add nsw i64 %19825, %310
  br label %"for blur_y.s0.x.x.rebased1420"

"produce blur_x1410":                             ; preds = %"for blur_y.s0.x.x.rebased1403"
  %t8561411 = add nsw i32 %19804, %t18491400
  %19827 = sext i32 %t8561411 to i64
  %19828 = getelementptr inbounds i16, i16* %read_input822, i64 %19827
  %19829 = getelementptr inbounds i16, i16* %19828, i64 1
  %19830 = bitcast i16* %19829 to <16 x i16>*
  %19831 = load <16 x i16>, <16 x i16>* %19830, align 2, !tbaa !396
  %19832 = getelementptr inbounds i16, i16* %19828, i64 17
  %19833 = bitcast i16* %19832 to <16 x i16>*
  %19834 = load <16 x i16>, <16 x i16>* %19833, align 2, !tbaa !396
  %19835 = bitcast i16* %19828 to <16 x i16>*
  %19836 = load <16 x i16>, <16 x i16>* %19835, align 2, !tbaa !396
  %19837 = getelementptr inbounds i16, i16* %19828, i64 16
  %19838 = bitcast i16* %19837 to <16 x i16>*
  %19839 = load <16 x i16>, <16 x i16>* %19838, align 2, !tbaa !396
  %19840 = getelementptr inbounds i16, i16* %19828, i64 2
  %19841 = bitcast i16* %19840 to <16 x i16>*
  %19842 = load <16 x i16>, <16 x i16>* %19841, align 2, !tbaa !396
  %19843 = getelementptr inbounds i16, i16* %19828, i64 18
  %19844 = bitcast i16* %19843 to <16 x i16>*
  %19845 = load <16 x i16>, <16 x i16>* %19844, align 2, !tbaa !396
  %19846 = getelementptr inbounds i16, i16* %19828, i64 4
  %19847 = bitcast i16* %19846 to <16 x i16>*
  %19848 = load <16 x i16>, <16 x i16>* %19847, align 2, !tbaa !396
  %19849 = getelementptr inbounds i16, i16* %19828, i64 20
  %19850 = bitcast i16* %19849 to <16 x i16>*
  %19851 = load <16 x i16>, <16 x i16>* %19850, align 2, !tbaa !396
  %19852 = getelementptr inbounds i16, i16* %19828, i64 3
  %19853 = bitcast i16* %19852 to <16 x i16>*
  %19854 = load <16 x i16>, <16 x i16>* %19853, align 2, !tbaa !396
  %19855 = getelementptr inbounds i16, i16* %19828, i64 19
  %19856 = bitcast i16* %19855 to <16 x i16>*
  %19857 = load <16 x i16>, <16 x i16>* %19856, align 2, !tbaa !396
  %19858 = add <16 x i16> %19836, %19831
  %19859 = add <16 x i16> %19858, %19842
  %19860 = add <16 x i16> %19859, %19848
  %19861 = add <16 x i16> %19860, %19854
  %19862 = add <16 x i16> %19839, %19834
  %19863 = add <16 x i16> %19862, %19845
  %19864 = add <16 x i16> %19863, %19851
  %19865 = add <16 x i16> %19864, %19857
  %19866 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19861, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19867 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19865, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19868 = shufflevector <16 x i16> %19866, <16 x i16> %19867, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19869 = lshr <32 x i16> %19868, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19870 = shufflevector <32 x i16> %19869, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19871 = shl nsw i64 %19801, 5
  %19872 = add nsw i64 %19871, %19656
  %19873 = getelementptr inbounds i16, i16* %blur_x879, i64 %19872
  %19874 = bitcast i16* %19873 to <16 x i16>*
  store <16 x i16> %19870, <16 x i16>* %19874, align 2, !tbaa !399
  %19875 = shufflevector <32 x i16> %19869, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19876 = getelementptr inbounds i16, i16* %19873, i64 16
  %19877 = bitcast i16* %19876 to <16 x i16>*
  store <16 x i16> %19875, <16 x i16>* %19877, align 2, !tbaa !399
  br label %"consume blur_x1412"

"consume blur_x1412":                             ; preds = %"for blur_y.s0.x.x.rebased1403.consume blur_x1412_crit_edge", %"produce blur_x1410"
  %.pre-phi3516 = phi i64 [ %.pre3515, %"for blur_y.s0.x.x.rebased1403.consume blur_x1412_crit_edge" ], [ %19871, %"produce blur_x1410" ]
  %19878 = add nsw i64 %19659, %.pre-phi3516
  %19879 = getelementptr inbounds i16, i16* %blur_x879, i64 %19878
  %19880 = bitcast i16* %19879 to <16 x i16>*
  %19881 = load <16 x i16>, <16 x i16>* %19880, align 2, !tbaa !399
  %19882 = getelementptr inbounds i16, i16* %19879, i64 16
  %19883 = bitcast i16* %19882 to <16 x i16>*
  %19884 = load <16 x i16>, <16 x i16>* %19883, align 2, !tbaa !399
  %19885 = add nsw i64 %19662, %.pre-phi3516
  %19886 = getelementptr inbounds i16, i16* %blur_x879, i64 %19885
  %19887 = bitcast i16* %19886 to <16 x i16>*
  %19888 = load <16 x i16>, <16 x i16>* %19887, align 2, !tbaa !399
  %19889 = getelementptr inbounds i16, i16* %19886, i64 16
  %19890 = bitcast i16* %19889 to <16 x i16>*
  %19891 = load <16 x i16>, <16 x i16>* %19890, align 2, !tbaa !399
  %19892 = add nsw i64 %19665, %.pre-phi3516
  %19893 = getelementptr inbounds i16, i16* %blur_x879, i64 %19892
  %19894 = bitcast i16* %19893 to <16 x i16>*
  %19895 = load <16 x i16>, <16 x i16>* %19894, align 2, !tbaa !399
  %19896 = getelementptr inbounds i16, i16* %19893, i64 16
  %19897 = bitcast i16* %19896 to <16 x i16>*
  %19898 = load <16 x i16>, <16 x i16>* %19897, align 2, !tbaa !399
  %19899 = add nsw i64 %19668, %.pre-phi3516
  %19900 = getelementptr inbounds i16, i16* %blur_x879, i64 %19899
  %19901 = bitcast i16* %19900 to <16 x i16>*
  %19902 = load <16 x i16>, <16 x i16>* %19901, align 2, !tbaa !399
  %19903 = getelementptr inbounds i16, i16* %19900, i64 16
  %19904 = bitcast i16* %19903 to <16 x i16>*
  %19905 = load <16 x i16>, <16 x i16>* %19904, align 2, !tbaa !399
  %19906 = add nsw i64 %19671, %.pre-phi3516
  %19907 = getelementptr inbounds i16, i16* %blur_x879, i64 %19906
  %19908 = bitcast i16* %19907 to <16 x i16>*
  %19909 = load <16 x i16>, <16 x i16>* %19908, align 2, !tbaa !399
  %19910 = getelementptr inbounds i16, i16* %19907, i64 16
  %19911 = bitcast i16* %19910 to <16 x i16>*
  %19912 = load <16 x i16>, <16 x i16>* %19911, align 2, !tbaa !399
  %19913 = add <16 x i16> %19888, %19881
  %19914 = add <16 x i16> %19913, %19895
  %19915 = add <16 x i16> %19914, %19902
  %19916 = add <16 x i16> %19915, %19909
  %19917 = add <16 x i16> %19891, %19884
  %19918 = add <16 x i16> %19917, %19898
  %19919 = add <16 x i16> %19918, %19905
  %19920 = add <16 x i16> %19919, %19912
  %19921 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19916, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19922 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19920, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19923 = shufflevector <16 x i16> %19921, <16 x i16> %19922, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19924 = lshr <32 x i16> %19923, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19925 = shufflevector <32 x i16> %19924, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19926 = add nsw i64 %19675, %.pre-phi3516
  %19927 = getelementptr inbounds i16, i16* %260, i64 %19926
  %19928 = bitcast i16* %19927 to <16 x i16>*
  store <16 x i16> %19925, <16 x i16>* %19928, align 2, !tbaa !401
  %19929 = shufflevector <32 x i16> %19924, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19930 = getelementptr inbounds i16, i16* %19927, i64 16
  %19931 = bitcast i16* %19930 to <16 x i16>*
  store <16 x i16> %19929, <16 x i16>* %19931, align 2, !tbaa !401
  %indvars.iv.next3303 = add nuw nsw i64 %indvars.iv3302, 1
  %.not2586 = icmp eq i64 %indvars.iv.next3303, %378
  br i1 %.not2586, label %"end for blur_y.s0.x.x.rebased1404", label %"for blur_y.s0.x.x.rebased1403"

"for blur_y.s0.x.x.rebased1420":                  ; preds = %"for blur_y.s0.x.x.rebased1420.preheader", %"consume blur_x1430"
  %blur_y.s0.x.x.rebased1422 = phi i32 [ %20044, %"consume blur_x1430" ], [ 0, %"for blur_y.s0.x.x.rebased1420.preheader" ]
  %19932 = add nsw i32 %blur_y.s0.x.x.rebased1422, %t1626814
  %a495 = shl nsw i32 %19932, 5
  %19933 = icmp sgt i32 %a341, %a495
  %b501 = select i1 %19933, i32 %a495, i32 %a341
  %19934 = icmp slt i32 %19932, 1
  %19935 = icmp sgt i32 %198, %a495
  %19936 = or i1 %19934, %19935
  br i1 %19936, label %"produce blur_x1427", label %"consume blur_x1430"

"end for blur_y.s0.x.x.rebased1421":              ; preds = %"consume blur_x1430", %"end for blur_y.s0.x.x.rebased1404"
  br i1 %228, label %"produce blur_x1434", label %after_bb1431

"produce blur_x1427":                             ; preds = %"for blur_y.s0.x.x.rebased1420"
  %19937 = icmp slt i32 %b501, %198
  %blur_x.s0.x.v1.base.s1428 = select i1 %19937, i32 %b501, i32 %198
  %t8611429 = add nsw i32 %blur_x.s0.x.v1.base.s1428, %t18491400
  %19938 = sext i32 %t8611429 to i64
  %19939 = getelementptr inbounds i16, i16* %read_input822, i64 %19938
  %19940 = getelementptr inbounds i16, i16* %19939, i64 1
  %19941 = bitcast i16* %19940 to <16 x i16>*
  %19942 = load <16 x i16>, <16 x i16>* %19941, align 2, !tbaa !396
  %19943 = getelementptr inbounds i16, i16* %19939, i64 17
  %19944 = bitcast i16* %19943 to <16 x i16>*
  %19945 = load <16 x i16>, <16 x i16>* %19944, align 2, !tbaa !396
  %19946 = bitcast i16* %19939 to <16 x i16>*
  %19947 = load <16 x i16>, <16 x i16>* %19946, align 2, !tbaa !396
  %19948 = getelementptr inbounds i16, i16* %19939, i64 16
  %19949 = bitcast i16* %19948 to <16 x i16>*
  %19950 = load <16 x i16>, <16 x i16>* %19949, align 2, !tbaa !396
  %19951 = getelementptr inbounds i16, i16* %19939, i64 2
  %19952 = bitcast i16* %19951 to <16 x i16>*
  %19953 = load <16 x i16>, <16 x i16>* %19952, align 2, !tbaa !396
  %19954 = getelementptr inbounds i16, i16* %19939, i64 18
  %19955 = bitcast i16* %19954 to <16 x i16>*
  %19956 = load <16 x i16>, <16 x i16>* %19955, align 2, !tbaa !396
  %19957 = getelementptr inbounds i16, i16* %19939, i64 4
  %19958 = bitcast i16* %19957 to <16 x i16>*
  %19959 = load <16 x i16>, <16 x i16>* %19958, align 2, !tbaa !396
  %19960 = getelementptr inbounds i16, i16* %19939, i64 20
  %19961 = bitcast i16* %19960 to <16 x i16>*
  %19962 = load <16 x i16>, <16 x i16>* %19961, align 2, !tbaa !396
  %19963 = getelementptr inbounds i16, i16* %19939, i64 3
  %19964 = bitcast i16* %19963 to <16 x i16>*
  %19965 = load <16 x i16>, <16 x i16>* %19964, align 2, !tbaa !396
  %19966 = getelementptr inbounds i16, i16* %19939, i64 19
  %19967 = bitcast i16* %19966 to <16 x i16>*
  %19968 = load <16 x i16>, <16 x i16>* %19967, align 2, !tbaa !396
  %19969 = add <16 x i16> %19947, %19942
  %19970 = add <16 x i16> %19969, %19953
  %19971 = add <16 x i16> %19970, %19959
  %19972 = add <16 x i16> %19971, %19965
  %19973 = add <16 x i16> %19950, %19945
  %19974 = add <16 x i16> %19973, %19956
  %19975 = add <16 x i16> %19974, %19962
  %19976 = add <16 x i16> %19975, %19968
  %19977 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19972, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19978 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19976, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %19979 = shufflevector <16 x i16> %19977, <16 x i16> %19978, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19980 = lshr <32 x i16> %19979, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %19981 = shufflevector <32 x i16> %19980, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19982 = sext i32 %blur_x.s0.x.v1.base.s1428 to i64
  %19983 = add nsw i64 %19982, %19807
  %19984 = getelementptr inbounds i16, i16* %blur_x879, i64 %19983
  %19985 = bitcast i16* %19984 to <16 x i16>*
  store <16 x i16> %19981, <16 x i16>* %19985, align 2, !tbaa !399
  %19986 = shufflevector <32 x i16> %19980, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19987 = getelementptr inbounds i16, i16* %19984, i64 16
  %19988 = bitcast i16* %19987 to <16 x i16>*
  store <16 x i16> %19986, <16 x i16>* %19988, align 2, !tbaa !399
  br label %"consume blur_x1430"

"consume blur_x1430":                             ; preds = %"for blur_y.s0.x.x.rebased1420", %"produce blur_x1427"
  %19989 = sext i32 %b501 to i64
  %19990 = add nsw i64 %19810, %19989
  %19991 = getelementptr inbounds i16, i16* %blur_x879, i64 %19990
  %19992 = bitcast i16* %19991 to <16 x i16>*
  %19993 = load <16 x i16>, <16 x i16>* %19992, align 2, !tbaa !399
  %19994 = getelementptr inbounds i16, i16* %19991, i64 16
  %19995 = bitcast i16* %19994 to <16 x i16>*
  %19996 = load <16 x i16>, <16 x i16>* %19995, align 2, !tbaa !399
  %19997 = add nsw i64 %19813, %19989
  %19998 = getelementptr inbounds i16, i16* %blur_x879, i64 %19997
  %19999 = bitcast i16* %19998 to <16 x i16>*
  %20000 = load <16 x i16>, <16 x i16>* %19999, align 2, !tbaa !399
  %20001 = getelementptr inbounds i16, i16* %19998, i64 16
  %20002 = bitcast i16* %20001 to <16 x i16>*
  %20003 = load <16 x i16>, <16 x i16>* %20002, align 2, !tbaa !399
  %20004 = add nsw i64 %19816, %19989
  %20005 = getelementptr inbounds i16, i16* %blur_x879, i64 %20004
  %20006 = bitcast i16* %20005 to <16 x i16>*
  %20007 = load <16 x i16>, <16 x i16>* %20006, align 2, !tbaa !399
  %20008 = getelementptr inbounds i16, i16* %20005, i64 16
  %20009 = bitcast i16* %20008 to <16 x i16>*
  %20010 = load <16 x i16>, <16 x i16>* %20009, align 2, !tbaa !399
  %20011 = add nsw i64 %19819, %19989
  %20012 = getelementptr inbounds i16, i16* %blur_x879, i64 %20011
  %20013 = bitcast i16* %20012 to <16 x i16>*
  %20014 = load <16 x i16>, <16 x i16>* %20013, align 2, !tbaa !399
  %20015 = getelementptr inbounds i16, i16* %20012, i64 16
  %20016 = bitcast i16* %20015 to <16 x i16>*
  %20017 = load <16 x i16>, <16 x i16>* %20016, align 2, !tbaa !399
  %20018 = add nsw i64 %19822, %19989
  %20019 = getelementptr inbounds i16, i16* %blur_x879, i64 %20018
  %20020 = bitcast i16* %20019 to <16 x i16>*
  %20021 = load <16 x i16>, <16 x i16>* %20020, align 2, !tbaa !399
  %20022 = getelementptr inbounds i16, i16* %20019, i64 16
  %20023 = bitcast i16* %20022 to <16 x i16>*
  %20024 = load <16 x i16>, <16 x i16>* %20023, align 2, !tbaa !399
  %20025 = add <16 x i16> %20000, %19993
  %20026 = add <16 x i16> %20025, %20007
  %20027 = add <16 x i16> %20026, %20014
  %20028 = add <16 x i16> %20027, %20021
  %20029 = add <16 x i16> %20003, %19996
  %20030 = add <16 x i16> %20029, %20010
  %20031 = add <16 x i16> %20030, %20017
  %20032 = add <16 x i16> %20031, %20024
  %20033 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20028, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20034 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20032, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20035 = shufflevector <16 x i16> %20033, <16 x i16> %20034, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20036 = lshr <32 x i16> %20035, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20037 = shufflevector <32 x i16> %20036, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20038 = add nsw i64 %19826, %19989
  %20039 = getelementptr inbounds i16, i16* %260, i64 %20038
  %20040 = bitcast i16* %20039 to <16 x i16>*
  store <16 x i16> %20037, <16 x i16>* %20040, align 2, !tbaa !401
  %20041 = shufflevector <32 x i16> %20036, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20042 = getelementptr inbounds i16, i16* %20039, i64 16
  %20043 = bitcast i16* %20042 to <16 x i16>*
  store <16 x i16> %20041, <16 x i16>* %20043, align 2, !tbaa !401
  %20044 = add nuw nsw i32 %blur_y.s0.x.x.rebased1422, 1
  %.not2585 = icmp eq i32 %20044, %t1683899
  br i1 %.not2585, label %"end for blur_y.s0.x.x.rebased1421", label %"for blur_y.s0.x.x.rebased1420"

after_bb1431:                                     ; preds = %"end for blur_y.s0.x.x.rebased1421", %"produce blur_x1434"
  br i1 %294, label %"for blur_y.s0.x.x.rebased1446.preheader", label %"end for blur_y.s0.x.x.rebased1447", !prof !386

"for blur_y.s0.x.x.rebased1446.preheader":        ; preds = %after_bb1431
  %20045 = sext i32 %t17381098 to i64
  %20046 = zext i32 %.pre-phi3480 to i64
  %20047 = mul nsw i64 %20046, %306
  %20048 = sub nsw i64 %20047, %290
  %20049 = zext i32 %.pre-phi3476 to i64
  %20050 = mul nsw i64 %20049, %306
  %20051 = sub nsw i64 %20050, %290
  %20052 = zext i32 %.pre-phi3484 to i64
  %20053 = mul nsw i64 %20052, %306
  %20054 = sub nsw i64 %20053, %290
  %20055 = zext i32 %.pre-phi3496 to i64
  %20056 = mul nsw i64 %20055, %306
  %20057 = sub nsw i64 %20056, %290
  %20058 = zext i32 %.pre-phi3490 to i64
  %20059 = mul nsw i64 %20058, %306
  %20060 = sub nsw i64 %20059, %290
  %20061 = sext i32 %a353 to i64
  %20062 = add nsw i64 %20061, 10
  %20063 = mul nsw i64 %20062, %307
  %20064 = add nsw i64 %20063, %310
  br label %"for blur_y.s0.x.x.rebased1446"

"produce blur_x1434":                             ; preds = %"end for blur_y.s0.x.x.rebased1421"
  %20065 = getelementptr inbounds i16, i16* %read_input822, i64 %329
  %20066 = getelementptr inbounds i16, i16* %20065, i64 -31
  %20067 = bitcast i16* %20066 to <16 x i16>*
  %20068 = load <16 x i16>, <16 x i16>* %20067, align 2, !tbaa !396
  %20069 = getelementptr inbounds i16, i16* %20065, i64 -15
  %20070 = bitcast i16* %20069 to <16 x i16>*
  %20071 = load <16 x i16>, <16 x i16>* %20070, align 2, !tbaa !396
  %20072 = getelementptr inbounds i16, i16* %20065, i64 -32
  %20073 = bitcast i16* %20072 to <16 x i16>*
  %20074 = load <16 x i16>, <16 x i16>* %20073, align 2, !tbaa !396
  %20075 = getelementptr inbounds i16, i16* %20065, i64 -16
  %20076 = bitcast i16* %20075 to <16 x i16>*
  %20077 = load <16 x i16>, <16 x i16>* %20076, align 2, !tbaa !396
  %20078 = getelementptr inbounds i16, i16* %20065, i64 -30
  %20079 = bitcast i16* %20078 to <16 x i16>*
  %20080 = load <16 x i16>, <16 x i16>* %20079, align 2, !tbaa !396
  %20081 = getelementptr inbounds i16, i16* %20065, i64 -14
  %20082 = bitcast i16* %20081 to <16 x i16>*
  %20083 = load <16 x i16>, <16 x i16>* %20082, align 2, !tbaa !396
  %20084 = getelementptr inbounds i16, i16* %20065, i64 -28
  %20085 = bitcast i16* %20084 to <16 x i16>*
  %20086 = load <16 x i16>, <16 x i16>* %20085, align 2, !tbaa !396
  %20087 = getelementptr inbounds i16, i16* %20065, i64 -12
  %20088 = bitcast i16* %20087 to <16 x i16>*
  %20089 = load <16 x i16>, <16 x i16>* %20088, align 2, !tbaa !396
  %20090 = getelementptr inbounds i16, i16* %20065, i64 -29
  %20091 = bitcast i16* %20090 to <16 x i16>*
  %20092 = load <16 x i16>, <16 x i16>* %20091, align 2, !tbaa !396
  %20093 = getelementptr inbounds i16, i16* %20065, i64 -13
  %20094 = bitcast i16* %20093 to <16 x i16>*
  %20095 = load <16 x i16>, <16 x i16>* %20094, align 2, !tbaa !396
  %20096 = add <16 x i16> %20074, %20068
  %20097 = add <16 x i16> %20096, %20080
  %20098 = add <16 x i16> %20097, %20086
  %20099 = add <16 x i16> %20098, %20092
  %20100 = add <16 x i16> %20077, %20071
  %20101 = add <16 x i16> %20100, %20083
  %20102 = add <16 x i16> %20101, %20089
  %20103 = add <16 x i16> %20102, %20095
  %20104 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20099, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20105 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20103, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20106 = shufflevector <16 x i16> %20104, <16 x i16> %20105, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20107 = lshr <32 x i16> %20106, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20108 = shufflevector <32 x i16> %20107, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20109 = zext i32 %.pre-phi3496 to i64
  %20110 = mul nsw i64 %291, %20109
  %20111 = add nsw i64 %293, %20110
  %20112 = getelementptr inbounds i16, i16* %blur_x879, i64 %20111
  %20113 = getelementptr inbounds i16, i16* %20112, i64 -32
  %20114 = bitcast i16* %20113 to <16 x i16>*
  store <16 x i16> %20108, <16 x i16>* %20114, align 2, !tbaa !399
  %20115 = shufflevector <32 x i16> %20107, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20116 = getelementptr inbounds i16, i16* %20112, i64 -16
  %20117 = bitcast i16* %20116 to <16 x i16>*
  store <16 x i16> %20115, <16 x i16>* %20117, align 2, !tbaa !399
  %20118 = zext i32 %.pre-phi3480 to i64
  %20119 = mul nsw i64 %20118, %306
  %20120 = add nsw i64 %20119, %288
  %20121 = getelementptr inbounds i16, i16* %blur_x879, i64 %20120
  %20122 = getelementptr inbounds i16, i16* %20121, i64 -32
  %20123 = bitcast i16* %20122 to <16 x i16>*
  %20124 = load <16 x i16>, <16 x i16>* %20123, align 2, !tbaa !399
  %20125 = getelementptr inbounds i16, i16* %20121, i64 -16
  %20126 = bitcast i16* %20125 to <16 x i16>*
  %20127 = load <16 x i16>, <16 x i16>* %20126, align 2, !tbaa !399
  %20128 = zext i32 %.pre-phi3476 to i64
  %20129 = mul nsw i64 %20128, %306
  %20130 = add nsw i64 %20129, %288
  %20131 = getelementptr inbounds i16, i16* %blur_x879, i64 %20130
  %20132 = getelementptr inbounds i16, i16* %20131, i64 -32
  %20133 = bitcast i16* %20132 to <16 x i16>*
  %20134 = load <16 x i16>, <16 x i16>* %20133, align 2, !tbaa !399
  %20135 = getelementptr inbounds i16, i16* %20131, i64 -16
  %20136 = bitcast i16* %20135 to <16 x i16>*
  %20137 = load <16 x i16>, <16 x i16>* %20136, align 2, !tbaa !399
  %20138 = zext i32 %.pre-phi3484 to i64
  %20139 = mul nsw i64 %20138, %306
  %20140 = add nsw i64 %20139, %288
  %20141 = getelementptr inbounds i16, i16* %blur_x879, i64 %20140
  %20142 = getelementptr inbounds i16, i16* %20141, i64 -32
  %20143 = bitcast i16* %20142 to <16 x i16>*
  %20144 = load <16 x i16>, <16 x i16>* %20143, align 2, !tbaa !399
  %20145 = getelementptr inbounds i16, i16* %20141, i64 -16
  %20146 = bitcast i16* %20145 to <16 x i16>*
  %20147 = load <16 x i16>, <16 x i16>* %20146, align 2, !tbaa !399
  %20148 = mul nsw i64 %20109, %306
  %20149 = add nsw i64 %20148, %288
  %20150 = getelementptr inbounds i16, i16* %blur_x879, i64 %20149
  %20151 = getelementptr inbounds i16, i16* %20150, i64 -32
  %20152 = bitcast i16* %20151 to <16 x i16>*
  %20153 = load <16 x i16>, <16 x i16>* %20152, align 2, !tbaa !399
  %20154 = getelementptr inbounds i16, i16* %20150, i64 -16
  %20155 = bitcast i16* %20154 to <16 x i16>*
  %20156 = load <16 x i16>, <16 x i16>* %20155, align 2, !tbaa !399
  %20157 = zext i32 %.pre-phi3490 to i64
  %20158 = mul nsw i64 %20157, %306
  %20159 = add nsw i64 %20158, %288
  %20160 = getelementptr inbounds i16, i16* %blur_x879, i64 %20159
  %20161 = getelementptr inbounds i16, i16* %20160, i64 -32
  %20162 = bitcast i16* %20161 to <16 x i16>*
  %20163 = load <16 x i16>, <16 x i16>* %20162, align 2, !tbaa !399
  %20164 = getelementptr inbounds i16, i16* %20160, i64 -16
  %20165 = bitcast i16* %20164 to <16 x i16>*
  %20166 = load <16 x i16>, <16 x i16>* %20165, align 2, !tbaa !399
  %20167 = add <16 x i16> %20134, %20124
  %20168 = add <16 x i16> %20167, %20144
  %20169 = add <16 x i16> %20168, %20153
  %20170 = add <16 x i16> %20169, %20163
  %20171 = add <16 x i16> %20137, %20127
  %20172 = add <16 x i16> %20171, %20147
  %20173 = add <16 x i16> %20172, %20156
  %20174 = add <16 x i16> %20173, %20166
  %20175 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20170, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20176 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20174, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20177 = shufflevector <16 x i16> %20175, <16 x i16> %20176, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20178 = lshr <32 x i16> %20177, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20179 = shufflevector <32 x i16> %20178, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20180 = sext i32 %a353 to i64
  %20181 = add nsw i64 %20180, 10
  %20182 = mul nsw i64 %20181, %307
  %20183 = add nsw i64 %309, %20182
  %20184 = getelementptr inbounds i16, i16* %260, i64 %20183
  %20185 = getelementptr inbounds i16, i16* %20184, i64 -32
  %20186 = bitcast i16* %20185 to <16 x i16>*
  store <16 x i16> %20179, <16 x i16>* %20186, align 2, !tbaa !401
  %20187 = shufflevector <32 x i16> %20178, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20188 = getelementptr inbounds i16, i16* %20184, i64 -16
  %20189 = bitcast i16* %20188 to <16 x i16>*
  store <16 x i16> %20187, <16 x i16>* %20189, align 2, !tbaa !401
  br label %after_bb1431

"for blur_y.s0.x.x.rebased1446":                  ; preds = %"for blur_y.s0.x.x.rebased1446.preheader", %"consume blur_x1455"
  %indvars.iv3305 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1446.preheader" ], [ %indvars.iv.next3306, %"consume blur_x1455" ]
  %20190 = add nsw i64 %indvars.iv3305, %295
  %20191 = icmp slt i64 %20190, 1
  %20192 = trunc i64 %20190 to i32
  %20193 = shl nsw i32 %20192, 5
  %20194 = icmp sgt i32 %198, %20193
  %20195 = or i1 %20191, %20194
  br i1 %20195, label %"produce blur_x1453", label %"for blur_y.s0.x.x.rebased1446.consume blur_x1455_crit_edge"

"for blur_y.s0.x.x.rebased1446.consume blur_x1455_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1446"
  %.pre3517 = shl nsw i64 %20190, 5
  br label %"consume blur_x1455"

"end for blur_y.s0.x.x.rebased1447":              ; preds = %"consume blur_x1455", %after_bb1431
  br i1 %296, label %"for blur_y.s0.x.x.rebased1463.preheader", label %"end for blur_y.s0.x.x.rebased1464", !prof !386

"for blur_y.s0.x.x.rebased1463.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1447"
  %20196 = sext i32 %t17381098 to i64
  %20197 = zext i32 %.pre-phi3480 to i64
  %20198 = mul nsw i64 %20197, %306
  %20199 = sub nsw i64 %20198, %290
  %20200 = zext i32 %.pre-phi3476 to i64
  %20201 = mul nsw i64 %20200, %306
  %20202 = sub nsw i64 %20201, %290
  %20203 = zext i32 %.pre-phi3484 to i64
  %20204 = mul nsw i64 %20203, %306
  %20205 = sub nsw i64 %20204, %290
  %20206 = zext i32 %.pre-phi3496 to i64
  %20207 = mul nsw i64 %20206, %306
  %20208 = sub nsw i64 %20207, %290
  %20209 = zext i32 %.pre-phi3490 to i64
  %20210 = mul nsw i64 %20209, %306
  %20211 = sub nsw i64 %20210, %290
  %20212 = sext i32 %a353 to i64
  %20213 = add nsw i64 %20212, 10
  %20214 = mul nsw i64 %20213, %307
  %20215 = add nsw i64 %20214, %310
  br label %"for blur_y.s0.x.x.rebased1463"

"produce blur_x1453":                             ; preds = %"for blur_y.s0.x.x.rebased1446"
  %t8721454 = add nsw i32 %20193, %t18651443
  %20216 = sext i32 %t8721454 to i64
  %20217 = getelementptr inbounds i16, i16* %read_input822, i64 %20216
  %20218 = getelementptr inbounds i16, i16* %20217, i64 1
  %20219 = bitcast i16* %20218 to <16 x i16>*
  %20220 = load <16 x i16>, <16 x i16>* %20219, align 2, !tbaa !396
  %20221 = getelementptr inbounds i16, i16* %20217, i64 17
  %20222 = bitcast i16* %20221 to <16 x i16>*
  %20223 = load <16 x i16>, <16 x i16>* %20222, align 2, !tbaa !396
  %20224 = bitcast i16* %20217 to <16 x i16>*
  %20225 = load <16 x i16>, <16 x i16>* %20224, align 2, !tbaa !396
  %20226 = getelementptr inbounds i16, i16* %20217, i64 16
  %20227 = bitcast i16* %20226 to <16 x i16>*
  %20228 = load <16 x i16>, <16 x i16>* %20227, align 2, !tbaa !396
  %20229 = getelementptr inbounds i16, i16* %20217, i64 2
  %20230 = bitcast i16* %20229 to <16 x i16>*
  %20231 = load <16 x i16>, <16 x i16>* %20230, align 2, !tbaa !396
  %20232 = getelementptr inbounds i16, i16* %20217, i64 18
  %20233 = bitcast i16* %20232 to <16 x i16>*
  %20234 = load <16 x i16>, <16 x i16>* %20233, align 2, !tbaa !396
  %20235 = getelementptr inbounds i16, i16* %20217, i64 4
  %20236 = bitcast i16* %20235 to <16 x i16>*
  %20237 = load <16 x i16>, <16 x i16>* %20236, align 2, !tbaa !396
  %20238 = getelementptr inbounds i16, i16* %20217, i64 20
  %20239 = bitcast i16* %20238 to <16 x i16>*
  %20240 = load <16 x i16>, <16 x i16>* %20239, align 2, !tbaa !396
  %20241 = getelementptr inbounds i16, i16* %20217, i64 3
  %20242 = bitcast i16* %20241 to <16 x i16>*
  %20243 = load <16 x i16>, <16 x i16>* %20242, align 2, !tbaa !396
  %20244 = getelementptr inbounds i16, i16* %20217, i64 19
  %20245 = bitcast i16* %20244 to <16 x i16>*
  %20246 = load <16 x i16>, <16 x i16>* %20245, align 2, !tbaa !396
  %20247 = add <16 x i16> %20225, %20220
  %20248 = add <16 x i16> %20247, %20231
  %20249 = add <16 x i16> %20248, %20237
  %20250 = add <16 x i16> %20249, %20243
  %20251 = add <16 x i16> %20228, %20223
  %20252 = add <16 x i16> %20251, %20234
  %20253 = add <16 x i16> %20252, %20240
  %20254 = add <16 x i16> %20253, %20246
  %20255 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20250, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20256 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20254, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20257 = shufflevector <16 x i16> %20255, <16 x i16> %20256, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20258 = lshr <32 x i16> %20257, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20259 = shufflevector <32 x i16> %20258, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20260 = shl nsw i64 %20190, 5
  %20261 = add nsw i64 %20260, %20045
  %20262 = getelementptr inbounds i16, i16* %blur_x879, i64 %20261
  %20263 = bitcast i16* %20262 to <16 x i16>*
  store <16 x i16> %20259, <16 x i16>* %20263, align 2, !tbaa !399
  %20264 = shufflevector <32 x i16> %20258, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20265 = getelementptr inbounds i16, i16* %20262, i64 16
  %20266 = bitcast i16* %20265 to <16 x i16>*
  store <16 x i16> %20264, <16 x i16>* %20266, align 2, !tbaa !399
  br label %"consume blur_x1455"

"consume blur_x1455":                             ; preds = %"for blur_y.s0.x.x.rebased1446.consume blur_x1455_crit_edge", %"produce blur_x1453"
  %.pre-phi3518 = phi i64 [ %.pre3517, %"for blur_y.s0.x.x.rebased1446.consume blur_x1455_crit_edge" ], [ %20260, %"produce blur_x1453" ]
  %20267 = add nsw i64 %20048, %.pre-phi3518
  %20268 = getelementptr inbounds i16, i16* %blur_x879, i64 %20267
  %20269 = bitcast i16* %20268 to <16 x i16>*
  %20270 = load <16 x i16>, <16 x i16>* %20269, align 2, !tbaa !399
  %20271 = getelementptr inbounds i16, i16* %20268, i64 16
  %20272 = bitcast i16* %20271 to <16 x i16>*
  %20273 = load <16 x i16>, <16 x i16>* %20272, align 2, !tbaa !399
  %20274 = add nsw i64 %20051, %.pre-phi3518
  %20275 = getelementptr inbounds i16, i16* %blur_x879, i64 %20274
  %20276 = bitcast i16* %20275 to <16 x i16>*
  %20277 = load <16 x i16>, <16 x i16>* %20276, align 2, !tbaa !399
  %20278 = getelementptr inbounds i16, i16* %20275, i64 16
  %20279 = bitcast i16* %20278 to <16 x i16>*
  %20280 = load <16 x i16>, <16 x i16>* %20279, align 2, !tbaa !399
  %20281 = add nsw i64 %20054, %.pre-phi3518
  %20282 = getelementptr inbounds i16, i16* %blur_x879, i64 %20281
  %20283 = bitcast i16* %20282 to <16 x i16>*
  %20284 = load <16 x i16>, <16 x i16>* %20283, align 2, !tbaa !399
  %20285 = getelementptr inbounds i16, i16* %20282, i64 16
  %20286 = bitcast i16* %20285 to <16 x i16>*
  %20287 = load <16 x i16>, <16 x i16>* %20286, align 2, !tbaa !399
  %20288 = add nsw i64 %20057, %.pre-phi3518
  %20289 = getelementptr inbounds i16, i16* %blur_x879, i64 %20288
  %20290 = bitcast i16* %20289 to <16 x i16>*
  %20291 = load <16 x i16>, <16 x i16>* %20290, align 2, !tbaa !399
  %20292 = getelementptr inbounds i16, i16* %20289, i64 16
  %20293 = bitcast i16* %20292 to <16 x i16>*
  %20294 = load <16 x i16>, <16 x i16>* %20293, align 2, !tbaa !399
  %20295 = add nsw i64 %20060, %.pre-phi3518
  %20296 = getelementptr inbounds i16, i16* %blur_x879, i64 %20295
  %20297 = bitcast i16* %20296 to <16 x i16>*
  %20298 = load <16 x i16>, <16 x i16>* %20297, align 2, !tbaa !399
  %20299 = getelementptr inbounds i16, i16* %20296, i64 16
  %20300 = bitcast i16* %20299 to <16 x i16>*
  %20301 = load <16 x i16>, <16 x i16>* %20300, align 2, !tbaa !399
  %20302 = add <16 x i16> %20277, %20270
  %20303 = add <16 x i16> %20302, %20284
  %20304 = add <16 x i16> %20303, %20291
  %20305 = add <16 x i16> %20304, %20298
  %20306 = add <16 x i16> %20280, %20273
  %20307 = add <16 x i16> %20306, %20287
  %20308 = add <16 x i16> %20307, %20294
  %20309 = add <16 x i16> %20308, %20301
  %20310 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20305, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20311 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20309, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20312 = shufflevector <16 x i16> %20310, <16 x i16> %20311, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20313 = lshr <32 x i16> %20312, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20314 = shufflevector <32 x i16> %20313, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20315 = add nsw i64 %20064, %.pre-phi3518
  %20316 = getelementptr inbounds i16, i16* %260, i64 %20315
  %20317 = bitcast i16* %20316 to <16 x i16>*
  store <16 x i16> %20314, <16 x i16>* %20317, align 2, !tbaa !401
  %20318 = shufflevector <32 x i16> %20313, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20319 = getelementptr inbounds i16, i16* %20316, i64 16
  %20320 = bitcast i16* %20319 to <16 x i16>*
  store <16 x i16> %20318, <16 x i16>* %20320, align 2, !tbaa !401
  %indvars.iv.next3306 = add nuw nsw i64 %indvars.iv3305, 1
  %.not2584 = icmp eq i64 %indvars.iv.next3306, %378
  br i1 %.not2584, label %"end for blur_y.s0.x.x.rebased1447", label %"for blur_y.s0.x.x.rebased1446"

"for blur_y.s0.x.x.rebased1463":                  ; preds = %"for blur_y.s0.x.x.rebased1463.preheader", %"consume blur_x1473"
  %blur_y.s0.x.x.rebased1465 = phi i32 [ %20433, %"consume blur_x1473" ], [ 0, %"for blur_y.s0.x.x.rebased1463.preheader" ]
  %20321 = add nsw i32 %blur_y.s0.x.x.rebased1465, %t1626814
  %a502 = shl nsw i32 %20321, 5
  %20322 = icmp sgt i32 %a341, %a502
  %b508 = select i1 %20322, i32 %a502, i32 %a341
  %20323 = icmp slt i32 %20321, 1
  %20324 = icmp sgt i32 %198, %a502
  %20325 = or i1 %20323, %20324
  br i1 %20325, label %"produce blur_x1470", label %"consume blur_x1473"

"end for blur_y.s0.x.x.rebased1464":              ; preds = %"consume blur_x1473", %"end for blur_y.s0.x.x.rebased1447"
  br i1 %228, label %"produce blur_x1477", label %after_bb1474

"produce blur_x1470":                             ; preds = %"for blur_y.s0.x.x.rebased1463"
  %20326 = icmp slt i32 %b508, %198
  %blur_x.s0.x.v1.base.s1471 = select i1 %20326, i32 %b508, i32 %198
  %t8771472 = add nsw i32 %blur_x.s0.x.v1.base.s1471, %t18651443
  %20327 = sext i32 %t8771472 to i64
  %20328 = getelementptr inbounds i16, i16* %read_input822, i64 %20327
  %20329 = getelementptr inbounds i16, i16* %20328, i64 1
  %20330 = bitcast i16* %20329 to <16 x i16>*
  %20331 = load <16 x i16>, <16 x i16>* %20330, align 2, !tbaa !396
  %20332 = getelementptr inbounds i16, i16* %20328, i64 17
  %20333 = bitcast i16* %20332 to <16 x i16>*
  %20334 = load <16 x i16>, <16 x i16>* %20333, align 2, !tbaa !396
  %20335 = bitcast i16* %20328 to <16 x i16>*
  %20336 = load <16 x i16>, <16 x i16>* %20335, align 2, !tbaa !396
  %20337 = getelementptr inbounds i16, i16* %20328, i64 16
  %20338 = bitcast i16* %20337 to <16 x i16>*
  %20339 = load <16 x i16>, <16 x i16>* %20338, align 2, !tbaa !396
  %20340 = getelementptr inbounds i16, i16* %20328, i64 2
  %20341 = bitcast i16* %20340 to <16 x i16>*
  %20342 = load <16 x i16>, <16 x i16>* %20341, align 2, !tbaa !396
  %20343 = getelementptr inbounds i16, i16* %20328, i64 18
  %20344 = bitcast i16* %20343 to <16 x i16>*
  %20345 = load <16 x i16>, <16 x i16>* %20344, align 2, !tbaa !396
  %20346 = getelementptr inbounds i16, i16* %20328, i64 4
  %20347 = bitcast i16* %20346 to <16 x i16>*
  %20348 = load <16 x i16>, <16 x i16>* %20347, align 2, !tbaa !396
  %20349 = getelementptr inbounds i16, i16* %20328, i64 20
  %20350 = bitcast i16* %20349 to <16 x i16>*
  %20351 = load <16 x i16>, <16 x i16>* %20350, align 2, !tbaa !396
  %20352 = getelementptr inbounds i16, i16* %20328, i64 3
  %20353 = bitcast i16* %20352 to <16 x i16>*
  %20354 = load <16 x i16>, <16 x i16>* %20353, align 2, !tbaa !396
  %20355 = getelementptr inbounds i16, i16* %20328, i64 19
  %20356 = bitcast i16* %20355 to <16 x i16>*
  %20357 = load <16 x i16>, <16 x i16>* %20356, align 2, !tbaa !396
  %20358 = add <16 x i16> %20336, %20331
  %20359 = add <16 x i16> %20358, %20342
  %20360 = add <16 x i16> %20359, %20348
  %20361 = add <16 x i16> %20360, %20354
  %20362 = add <16 x i16> %20339, %20334
  %20363 = add <16 x i16> %20362, %20345
  %20364 = add <16 x i16> %20363, %20351
  %20365 = add <16 x i16> %20364, %20357
  %20366 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20361, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20367 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20365, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20368 = shufflevector <16 x i16> %20366, <16 x i16> %20367, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20369 = lshr <32 x i16> %20368, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20370 = shufflevector <32 x i16> %20369, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20371 = sext i32 %blur_x.s0.x.v1.base.s1471 to i64
  %20372 = add nsw i64 %20371, %20196
  %20373 = getelementptr inbounds i16, i16* %blur_x879, i64 %20372
  %20374 = bitcast i16* %20373 to <16 x i16>*
  store <16 x i16> %20370, <16 x i16>* %20374, align 2, !tbaa !399
  %20375 = shufflevector <32 x i16> %20369, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20376 = getelementptr inbounds i16, i16* %20373, i64 16
  %20377 = bitcast i16* %20376 to <16 x i16>*
  store <16 x i16> %20375, <16 x i16>* %20377, align 2, !tbaa !399
  br label %"consume blur_x1473"

"consume blur_x1473":                             ; preds = %"for blur_y.s0.x.x.rebased1463", %"produce blur_x1470"
  %20378 = sext i32 %b508 to i64
  %20379 = add nsw i64 %20199, %20378
  %20380 = getelementptr inbounds i16, i16* %blur_x879, i64 %20379
  %20381 = bitcast i16* %20380 to <16 x i16>*
  %20382 = load <16 x i16>, <16 x i16>* %20381, align 2, !tbaa !399
  %20383 = getelementptr inbounds i16, i16* %20380, i64 16
  %20384 = bitcast i16* %20383 to <16 x i16>*
  %20385 = load <16 x i16>, <16 x i16>* %20384, align 2, !tbaa !399
  %20386 = add nsw i64 %20202, %20378
  %20387 = getelementptr inbounds i16, i16* %blur_x879, i64 %20386
  %20388 = bitcast i16* %20387 to <16 x i16>*
  %20389 = load <16 x i16>, <16 x i16>* %20388, align 2, !tbaa !399
  %20390 = getelementptr inbounds i16, i16* %20387, i64 16
  %20391 = bitcast i16* %20390 to <16 x i16>*
  %20392 = load <16 x i16>, <16 x i16>* %20391, align 2, !tbaa !399
  %20393 = add nsw i64 %20205, %20378
  %20394 = getelementptr inbounds i16, i16* %blur_x879, i64 %20393
  %20395 = bitcast i16* %20394 to <16 x i16>*
  %20396 = load <16 x i16>, <16 x i16>* %20395, align 2, !tbaa !399
  %20397 = getelementptr inbounds i16, i16* %20394, i64 16
  %20398 = bitcast i16* %20397 to <16 x i16>*
  %20399 = load <16 x i16>, <16 x i16>* %20398, align 2, !tbaa !399
  %20400 = add nsw i64 %20208, %20378
  %20401 = getelementptr inbounds i16, i16* %blur_x879, i64 %20400
  %20402 = bitcast i16* %20401 to <16 x i16>*
  %20403 = load <16 x i16>, <16 x i16>* %20402, align 2, !tbaa !399
  %20404 = getelementptr inbounds i16, i16* %20401, i64 16
  %20405 = bitcast i16* %20404 to <16 x i16>*
  %20406 = load <16 x i16>, <16 x i16>* %20405, align 2, !tbaa !399
  %20407 = add nsw i64 %20211, %20378
  %20408 = getelementptr inbounds i16, i16* %blur_x879, i64 %20407
  %20409 = bitcast i16* %20408 to <16 x i16>*
  %20410 = load <16 x i16>, <16 x i16>* %20409, align 2, !tbaa !399
  %20411 = getelementptr inbounds i16, i16* %20408, i64 16
  %20412 = bitcast i16* %20411 to <16 x i16>*
  %20413 = load <16 x i16>, <16 x i16>* %20412, align 2, !tbaa !399
  %20414 = add <16 x i16> %20389, %20382
  %20415 = add <16 x i16> %20414, %20396
  %20416 = add <16 x i16> %20415, %20403
  %20417 = add <16 x i16> %20416, %20410
  %20418 = add <16 x i16> %20392, %20385
  %20419 = add <16 x i16> %20418, %20399
  %20420 = add <16 x i16> %20419, %20406
  %20421 = add <16 x i16> %20420, %20413
  %20422 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20417, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20423 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20421, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20424 = shufflevector <16 x i16> %20422, <16 x i16> %20423, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20425 = lshr <32 x i16> %20424, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20426 = shufflevector <32 x i16> %20425, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20427 = add nsw i64 %20215, %20378
  %20428 = getelementptr inbounds i16, i16* %260, i64 %20427
  %20429 = bitcast i16* %20428 to <16 x i16>*
  store <16 x i16> %20426, <16 x i16>* %20429, align 2, !tbaa !401
  %20430 = shufflevector <32 x i16> %20425, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20431 = getelementptr inbounds i16, i16* %20428, i64 16
  %20432 = bitcast i16* %20431 to <16 x i16>*
  store <16 x i16> %20430, <16 x i16>* %20432, align 2, !tbaa !401
  %20433 = add nuw nsw i32 %blur_y.s0.x.x.rebased1465, 1
  %.not2583 = icmp eq i32 %20433, %t1683899
  br i1 %.not2583, label %"end for blur_y.s0.x.x.rebased1464", label %"for blur_y.s0.x.x.rebased1463"

after_bb1474:                                     ; preds = %"end for blur_y.s0.x.x.rebased1464", %"produce blur_x1477"
  br i1 %294, label %"for blur_y.s0.x.x.rebased1489.preheader", label %"end for blur_y.s0.x.x.rebased1490", !prof !386

"for blur_y.s0.x.x.rebased1489.preheader":        ; preds = %after_bb1474
  %20434 = sext i32 %t17541141 to i64
  %20435 = zext i32 %.pre-phi3484 to i64
  %20436 = mul nsw i64 %20435, %306
  %20437 = sub nsw i64 %20436, %290
  %20438 = zext i32 %.pre-phi3480 to i64
  %20439 = mul nsw i64 %20438, %306
  %20440 = sub nsw i64 %20439, %290
  %20441 = zext i32 %.pre-phi3490 to i64
  %20442 = mul nsw i64 %20441, %306
  %20443 = sub nsw i64 %20442, %290
  %20444 = zext i32 %.pre-phi3502 to i64
  %20445 = mul nsw i64 %20444, %306
  %20446 = sub nsw i64 %20445, %290
  %20447 = zext i32 %.pre-phi3496 to i64
  %20448 = mul nsw i64 %20447, %306
  %20449 = sub nsw i64 %20448, %290
  %20450 = sext i32 %a353 to i64
  %20451 = add nsw i64 %20450, 11
  %20452 = mul nsw i64 %20451, %307
  %20453 = add nsw i64 %20452, %310
  br label %"for blur_y.s0.x.x.rebased1489"

"produce blur_x1477":                             ; preds = %"end for blur_y.s0.x.x.rebased1464"
  %20454 = getelementptr inbounds i16, i16* %read_input822, i64 %331
  %20455 = getelementptr inbounds i16, i16* %20454, i64 -31
  %20456 = bitcast i16* %20455 to <16 x i16>*
  %20457 = load <16 x i16>, <16 x i16>* %20456, align 2, !tbaa !396
  %20458 = getelementptr inbounds i16, i16* %20454, i64 -15
  %20459 = bitcast i16* %20458 to <16 x i16>*
  %20460 = load <16 x i16>, <16 x i16>* %20459, align 2, !tbaa !396
  %20461 = getelementptr inbounds i16, i16* %20454, i64 -32
  %20462 = bitcast i16* %20461 to <16 x i16>*
  %20463 = load <16 x i16>, <16 x i16>* %20462, align 2, !tbaa !396
  %20464 = getelementptr inbounds i16, i16* %20454, i64 -16
  %20465 = bitcast i16* %20464 to <16 x i16>*
  %20466 = load <16 x i16>, <16 x i16>* %20465, align 2, !tbaa !396
  %20467 = getelementptr inbounds i16, i16* %20454, i64 -30
  %20468 = bitcast i16* %20467 to <16 x i16>*
  %20469 = load <16 x i16>, <16 x i16>* %20468, align 2, !tbaa !396
  %20470 = getelementptr inbounds i16, i16* %20454, i64 -14
  %20471 = bitcast i16* %20470 to <16 x i16>*
  %20472 = load <16 x i16>, <16 x i16>* %20471, align 2, !tbaa !396
  %20473 = getelementptr inbounds i16, i16* %20454, i64 -28
  %20474 = bitcast i16* %20473 to <16 x i16>*
  %20475 = load <16 x i16>, <16 x i16>* %20474, align 2, !tbaa !396
  %20476 = getelementptr inbounds i16, i16* %20454, i64 -12
  %20477 = bitcast i16* %20476 to <16 x i16>*
  %20478 = load <16 x i16>, <16 x i16>* %20477, align 2, !tbaa !396
  %20479 = getelementptr inbounds i16, i16* %20454, i64 -29
  %20480 = bitcast i16* %20479 to <16 x i16>*
  %20481 = load <16 x i16>, <16 x i16>* %20480, align 2, !tbaa !396
  %20482 = getelementptr inbounds i16, i16* %20454, i64 -13
  %20483 = bitcast i16* %20482 to <16 x i16>*
  %20484 = load <16 x i16>, <16 x i16>* %20483, align 2, !tbaa !396
  %20485 = add <16 x i16> %20463, %20457
  %20486 = add <16 x i16> %20485, %20469
  %20487 = add <16 x i16> %20486, %20475
  %20488 = add <16 x i16> %20487, %20481
  %20489 = add <16 x i16> %20466, %20460
  %20490 = add <16 x i16> %20489, %20472
  %20491 = add <16 x i16> %20490, %20478
  %20492 = add <16 x i16> %20491, %20484
  %20493 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20488, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20494 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20492, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20495 = shufflevector <16 x i16> %20493, <16 x i16> %20494, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20496 = lshr <32 x i16> %20495, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20497 = shufflevector <32 x i16> %20496, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20498 = zext i32 %.pre-phi3502 to i64
  %20499 = mul nsw i64 %291, %20498
  %20500 = add nsw i64 %293, %20499
  %20501 = getelementptr inbounds i16, i16* %blur_x879, i64 %20500
  %20502 = getelementptr inbounds i16, i16* %20501, i64 -32
  %20503 = bitcast i16* %20502 to <16 x i16>*
  store <16 x i16> %20497, <16 x i16>* %20503, align 2, !tbaa !399
  %20504 = shufflevector <32 x i16> %20496, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20505 = getelementptr inbounds i16, i16* %20501, i64 -16
  %20506 = bitcast i16* %20505 to <16 x i16>*
  store <16 x i16> %20504, <16 x i16>* %20506, align 2, !tbaa !399
  %20507 = zext i32 %.pre-phi3484 to i64
  %20508 = mul nsw i64 %20507, %306
  %20509 = add nsw i64 %20508, %288
  %20510 = getelementptr inbounds i16, i16* %blur_x879, i64 %20509
  %20511 = getelementptr inbounds i16, i16* %20510, i64 -32
  %20512 = bitcast i16* %20511 to <16 x i16>*
  %20513 = load <16 x i16>, <16 x i16>* %20512, align 2, !tbaa !399
  %20514 = getelementptr inbounds i16, i16* %20510, i64 -16
  %20515 = bitcast i16* %20514 to <16 x i16>*
  %20516 = load <16 x i16>, <16 x i16>* %20515, align 2, !tbaa !399
  %20517 = zext i32 %.pre-phi3480 to i64
  %20518 = mul nsw i64 %20517, %306
  %20519 = add nsw i64 %20518, %288
  %20520 = getelementptr inbounds i16, i16* %blur_x879, i64 %20519
  %20521 = getelementptr inbounds i16, i16* %20520, i64 -32
  %20522 = bitcast i16* %20521 to <16 x i16>*
  %20523 = load <16 x i16>, <16 x i16>* %20522, align 2, !tbaa !399
  %20524 = getelementptr inbounds i16, i16* %20520, i64 -16
  %20525 = bitcast i16* %20524 to <16 x i16>*
  %20526 = load <16 x i16>, <16 x i16>* %20525, align 2, !tbaa !399
  %20527 = zext i32 %.pre-phi3490 to i64
  %20528 = mul nsw i64 %20527, %306
  %20529 = add nsw i64 %20528, %288
  %20530 = getelementptr inbounds i16, i16* %blur_x879, i64 %20529
  %20531 = getelementptr inbounds i16, i16* %20530, i64 -32
  %20532 = bitcast i16* %20531 to <16 x i16>*
  %20533 = load <16 x i16>, <16 x i16>* %20532, align 2, !tbaa !399
  %20534 = getelementptr inbounds i16, i16* %20530, i64 -16
  %20535 = bitcast i16* %20534 to <16 x i16>*
  %20536 = load <16 x i16>, <16 x i16>* %20535, align 2, !tbaa !399
  %20537 = mul nsw i64 %20498, %306
  %20538 = add nsw i64 %20537, %288
  %20539 = getelementptr inbounds i16, i16* %blur_x879, i64 %20538
  %20540 = getelementptr inbounds i16, i16* %20539, i64 -32
  %20541 = bitcast i16* %20540 to <16 x i16>*
  %20542 = load <16 x i16>, <16 x i16>* %20541, align 2, !tbaa !399
  %20543 = getelementptr inbounds i16, i16* %20539, i64 -16
  %20544 = bitcast i16* %20543 to <16 x i16>*
  %20545 = load <16 x i16>, <16 x i16>* %20544, align 2, !tbaa !399
  %20546 = zext i32 %.pre-phi3496 to i64
  %20547 = mul nsw i64 %20546, %306
  %20548 = add nsw i64 %20547, %288
  %20549 = getelementptr inbounds i16, i16* %blur_x879, i64 %20548
  %20550 = getelementptr inbounds i16, i16* %20549, i64 -32
  %20551 = bitcast i16* %20550 to <16 x i16>*
  %20552 = load <16 x i16>, <16 x i16>* %20551, align 2, !tbaa !399
  %20553 = getelementptr inbounds i16, i16* %20549, i64 -16
  %20554 = bitcast i16* %20553 to <16 x i16>*
  %20555 = load <16 x i16>, <16 x i16>* %20554, align 2, !tbaa !399
  %20556 = add <16 x i16> %20523, %20513
  %20557 = add <16 x i16> %20556, %20533
  %20558 = add <16 x i16> %20557, %20542
  %20559 = add <16 x i16> %20558, %20552
  %20560 = add <16 x i16> %20526, %20516
  %20561 = add <16 x i16> %20560, %20536
  %20562 = add <16 x i16> %20561, %20545
  %20563 = add <16 x i16> %20562, %20555
  %20564 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20559, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20565 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20563, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20566 = shufflevector <16 x i16> %20564, <16 x i16> %20565, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20567 = lshr <32 x i16> %20566, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20568 = shufflevector <32 x i16> %20567, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20569 = sext i32 %a353 to i64
  %20570 = add nsw i64 %20569, 11
  %20571 = mul nsw i64 %20570, %307
  %20572 = add nsw i64 %309, %20571
  %20573 = getelementptr inbounds i16, i16* %260, i64 %20572
  %20574 = getelementptr inbounds i16, i16* %20573, i64 -32
  %20575 = bitcast i16* %20574 to <16 x i16>*
  store <16 x i16> %20568, <16 x i16>* %20575, align 2, !tbaa !401
  %20576 = shufflevector <32 x i16> %20567, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20577 = getelementptr inbounds i16, i16* %20573, i64 -16
  %20578 = bitcast i16* %20577 to <16 x i16>*
  store <16 x i16> %20576, <16 x i16>* %20578, align 2, !tbaa !401
  br label %after_bb1474

"for blur_y.s0.x.x.rebased1489":                  ; preds = %"for blur_y.s0.x.x.rebased1489.preheader", %"consume blur_x1498"
  %indvars.iv3308 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1489.preheader" ], [ %indvars.iv.next3309, %"consume blur_x1498" ]
  %20579 = add nsw i64 %indvars.iv3308, %295
  %20580 = icmp slt i64 %20579, 1
  %20581 = trunc i64 %20579 to i32
  %20582 = shl nsw i32 %20581, 5
  %20583 = icmp sgt i32 %198, %20582
  %20584 = or i1 %20580, %20583
  br i1 %20584, label %"produce blur_x1496", label %"for blur_y.s0.x.x.rebased1489.consume blur_x1498_crit_edge"

"for blur_y.s0.x.x.rebased1489.consume blur_x1498_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1489"
  %.pre3519 = shl nsw i64 %20579, 5
  br label %"consume blur_x1498"

"end for blur_y.s0.x.x.rebased1490":              ; preds = %"consume blur_x1498", %after_bb1474
  br i1 %296, label %"for blur_y.s0.x.x.rebased1506.preheader", label %"end for blur_y.s0.x.x.rebased1507", !prof !386

"for blur_y.s0.x.x.rebased1506.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1490"
  %20585 = sext i32 %t17541141 to i64
  %20586 = zext i32 %.pre-phi3484 to i64
  %20587 = mul nsw i64 %20586, %306
  %20588 = sub nsw i64 %20587, %290
  %20589 = zext i32 %.pre-phi3480 to i64
  %20590 = mul nsw i64 %20589, %306
  %20591 = sub nsw i64 %20590, %290
  %20592 = zext i32 %.pre-phi3490 to i64
  %20593 = mul nsw i64 %20592, %306
  %20594 = sub nsw i64 %20593, %290
  %20595 = zext i32 %.pre-phi3502 to i64
  %20596 = mul nsw i64 %20595, %306
  %20597 = sub nsw i64 %20596, %290
  %20598 = zext i32 %.pre-phi3496 to i64
  %20599 = mul nsw i64 %20598, %306
  %20600 = sub nsw i64 %20599, %290
  %20601 = sext i32 %a353 to i64
  %20602 = add nsw i64 %20601, 11
  %20603 = mul nsw i64 %20602, %307
  %20604 = add nsw i64 %20603, %310
  br label %"for blur_y.s0.x.x.rebased1506"

"produce blur_x1496":                             ; preds = %"for blur_y.s0.x.x.rebased1489"
  %t8881497 = add nsw i32 %20582, %t18811486
  %20605 = sext i32 %t8881497 to i64
  %20606 = getelementptr inbounds i16, i16* %read_input822, i64 %20605
  %20607 = getelementptr inbounds i16, i16* %20606, i64 1
  %20608 = bitcast i16* %20607 to <16 x i16>*
  %20609 = load <16 x i16>, <16 x i16>* %20608, align 2, !tbaa !396
  %20610 = getelementptr inbounds i16, i16* %20606, i64 17
  %20611 = bitcast i16* %20610 to <16 x i16>*
  %20612 = load <16 x i16>, <16 x i16>* %20611, align 2, !tbaa !396
  %20613 = bitcast i16* %20606 to <16 x i16>*
  %20614 = load <16 x i16>, <16 x i16>* %20613, align 2, !tbaa !396
  %20615 = getelementptr inbounds i16, i16* %20606, i64 16
  %20616 = bitcast i16* %20615 to <16 x i16>*
  %20617 = load <16 x i16>, <16 x i16>* %20616, align 2, !tbaa !396
  %20618 = getelementptr inbounds i16, i16* %20606, i64 2
  %20619 = bitcast i16* %20618 to <16 x i16>*
  %20620 = load <16 x i16>, <16 x i16>* %20619, align 2, !tbaa !396
  %20621 = getelementptr inbounds i16, i16* %20606, i64 18
  %20622 = bitcast i16* %20621 to <16 x i16>*
  %20623 = load <16 x i16>, <16 x i16>* %20622, align 2, !tbaa !396
  %20624 = getelementptr inbounds i16, i16* %20606, i64 4
  %20625 = bitcast i16* %20624 to <16 x i16>*
  %20626 = load <16 x i16>, <16 x i16>* %20625, align 2, !tbaa !396
  %20627 = getelementptr inbounds i16, i16* %20606, i64 20
  %20628 = bitcast i16* %20627 to <16 x i16>*
  %20629 = load <16 x i16>, <16 x i16>* %20628, align 2, !tbaa !396
  %20630 = getelementptr inbounds i16, i16* %20606, i64 3
  %20631 = bitcast i16* %20630 to <16 x i16>*
  %20632 = load <16 x i16>, <16 x i16>* %20631, align 2, !tbaa !396
  %20633 = getelementptr inbounds i16, i16* %20606, i64 19
  %20634 = bitcast i16* %20633 to <16 x i16>*
  %20635 = load <16 x i16>, <16 x i16>* %20634, align 2, !tbaa !396
  %20636 = add <16 x i16> %20614, %20609
  %20637 = add <16 x i16> %20636, %20620
  %20638 = add <16 x i16> %20637, %20626
  %20639 = add <16 x i16> %20638, %20632
  %20640 = add <16 x i16> %20617, %20612
  %20641 = add <16 x i16> %20640, %20623
  %20642 = add <16 x i16> %20641, %20629
  %20643 = add <16 x i16> %20642, %20635
  %20644 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20639, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20645 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20643, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20646 = shufflevector <16 x i16> %20644, <16 x i16> %20645, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20647 = lshr <32 x i16> %20646, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20648 = shufflevector <32 x i16> %20647, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20649 = shl nsw i64 %20579, 5
  %20650 = add nsw i64 %20649, %20434
  %20651 = getelementptr inbounds i16, i16* %blur_x879, i64 %20650
  %20652 = bitcast i16* %20651 to <16 x i16>*
  store <16 x i16> %20648, <16 x i16>* %20652, align 2, !tbaa !399
  %20653 = shufflevector <32 x i16> %20647, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20654 = getelementptr inbounds i16, i16* %20651, i64 16
  %20655 = bitcast i16* %20654 to <16 x i16>*
  store <16 x i16> %20653, <16 x i16>* %20655, align 2, !tbaa !399
  br label %"consume blur_x1498"

"consume blur_x1498":                             ; preds = %"for blur_y.s0.x.x.rebased1489.consume blur_x1498_crit_edge", %"produce blur_x1496"
  %.pre-phi3520 = phi i64 [ %.pre3519, %"for blur_y.s0.x.x.rebased1489.consume blur_x1498_crit_edge" ], [ %20649, %"produce blur_x1496" ]
  %20656 = add nsw i64 %20437, %.pre-phi3520
  %20657 = getelementptr inbounds i16, i16* %blur_x879, i64 %20656
  %20658 = bitcast i16* %20657 to <16 x i16>*
  %20659 = load <16 x i16>, <16 x i16>* %20658, align 2, !tbaa !399
  %20660 = getelementptr inbounds i16, i16* %20657, i64 16
  %20661 = bitcast i16* %20660 to <16 x i16>*
  %20662 = load <16 x i16>, <16 x i16>* %20661, align 2, !tbaa !399
  %20663 = add nsw i64 %20440, %.pre-phi3520
  %20664 = getelementptr inbounds i16, i16* %blur_x879, i64 %20663
  %20665 = bitcast i16* %20664 to <16 x i16>*
  %20666 = load <16 x i16>, <16 x i16>* %20665, align 2, !tbaa !399
  %20667 = getelementptr inbounds i16, i16* %20664, i64 16
  %20668 = bitcast i16* %20667 to <16 x i16>*
  %20669 = load <16 x i16>, <16 x i16>* %20668, align 2, !tbaa !399
  %20670 = add nsw i64 %20443, %.pre-phi3520
  %20671 = getelementptr inbounds i16, i16* %blur_x879, i64 %20670
  %20672 = bitcast i16* %20671 to <16 x i16>*
  %20673 = load <16 x i16>, <16 x i16>* %20672, align 2, !tbaa !399
  %20674 = getelementptr inbounds i16, i16* %20671, i64 16
  %20675 = bitcast i16* %20674 to <16 x i16>*
  %20676 = load <16 x i16>, <16 x i16>* %20675, align 2, !tbaa !399
  %20677 = add nsw i64 %20446, %.pre-phi3520
  %20678 = getelementptr inbounds i16, i16* %blur_x879, i64 %20677
  %20679 = bitcast i16* %20678 to <16 x i16>*
  %20680 = load <16 x i16>, <16 x i16>* %20679, align 2, !tbaa !399
  %20681 = getelementptr inbounds i16, i16* %20678, i64 16
  %20682 = bitcast i16* %20681 to <16 x i16>*
  %20683 = load <16 x i16>, <16 x i16>* %20682, align 2, !tbaa !399
  %20684 = add nsw i64 %20449, %.pre-phi3520
  %20685 = getelementptr inbounds i16, i16* %blur_x879, i64 %20684
  %20686 = bitcast i16* %20685 to <16 x i16>*
  %20687 = load <16 x i16>, <16 x i16>* %20686, align 2, !tbaa !399
  %20688 = getelementptr inbounds i16, i16* %20685, i64 16
  %20689 = bitcast i16* %20688 to <16 x i16>*
  %20690 = load <16 x i16>, <16 x i16>* %20689, align 2, !tbaa !399
  %20691 = add <16 x i16> %20666, %20659
  %20692 = add <16 x i16> %20691, %20673
  %20693 = add <16 x i16> %20692, %20680
  %20694 = add <16 x i16> %20693, %20687
  %20695 = add <16 x i16> %20669, %20662
  %20696 = add <16 x i16> %20695, %20676
  %20697 = add <16 x i16> %20696, %20683
  %20698 = add <16 x i16> %20697, %20690
  %20699 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20694, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20700 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20698, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20701 = shufflevector <16 x i16> %20699, <16 x i16> %20700, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20702 = lshr <32 x i16> %20701, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20703 = shufflevector <32 x i16> %20702, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20704 = add nsw i64 %20453, %.pre-phi3520
  %20705 = getelementptr inbounds i16, i16* %260, i64 %20704
  %20706 = bitcast i16* %20705 to <16 x i16>*
  store <16 x i16> %20703, <16 x i16>* %20706, align 2, !tbaa !401
  %20707 = shufflevector <32 x i16> %20702, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20708 = getelementptr inbounds i16, i16* %20705, i64 16
  %20709 = bitcast i16* %20708 to <16 x i16>*
  store <16 x i16> %20707, <16 x i16>* %20709, align 2, !tbaa !401
  %indvars.iv.next3309 = add nuw nsw i64 %indvars.iv3308, 1
  %.not2582 = icmp eq i64 %indvars.iv.next3309, %378
  br i1 %.not2582, label %"end for blur_y.s0.x.x.rebased1490", label %"for blur_y.s0.x.x.rebased1489"

"for blur_y.s0.x.x.rebased1506":                  ; preds = %"for blur_y.s0.x.x.rebased1506.preheader", %"consume blur_x1516"
  %blur_y.s0.x.x.rebased1508 = phi i32 [ %20822, %"consume blur_x1516" ], [ 0, %"for blur_y.s0.x.x.rebased1506.preheader" ]
  %20710 = add nsw i32 %blur_y.s0.x.x.rebased1508, %t1626814
  %a509 = shl nsw i32 %20710, 5
  %20711 = icmp sgt i32 %a341, %a509
  %b515 = select i1 %20711, i32 %a509, i32 %a341
  %20712 = icmp slt i32 %20710, 1
  %20713 = icmp sgt i32 %198, %a509
  %20714 = or i1 %20712, %20713
  br i1 %20714, label %"produce blur_x1513", label %"consume blur_x1516"

"end for blur_y.s0.x.x.rebased1507":              ; preds = %"consume blur_x1516", %"end for blur_y.s0.x.x.rebased1490"
  br i1 %228, label %"produce blur_x1520", label %after_bb1517

"produce blur_x1513":                             ; preds = %"for blur_y.s0.x.x.rebased1506"
  %20715 = icmp slt i32 %b515, %198
  %blur_x.s0.x.v1.base.s1514 = select i1 %20715, i32 %b515, i32 %198
  %t8931515 = add nsw i32 %blur_x.s0.x.v1.base.s1514, %t18811486
  %20716 = sext i32 %t8931515 to i64
  %20717 = getelementptr inbounds i16, i16* %read_input822, i64 %20716
  %20718 = getelementptr inbounds i16, i16* %20717, i64 1
  %20719 = bitcast i16* %20718 to <16 x i16>*
  %20720 = load <16 x i16>, <16 x i16>* %20719, align 2, !tbaa !396
  %20721 = getelementptr inbounds i16, i16* %20717, i64 17
  %20722 = bitcast i16* %20721 to <16 x i16>*
  %20723 = load <16 x i16>, <16 x i16>* %20722, align 2, !tbaa !396
  %20724 = bitcast i16* %20717 to <16 x i16>*
  %20725 = load <16 x i16>, <16 x i16>* %20724, align 2, !tbaa !396
  %20726 = getelementptr inbounds i16, i16* %20717, i64 16
  %20727 = bitcast i16* %20726 to <16 x i16>*
  %20728 = load <16 x i16>, <16 x i16>* %20727, align 2, !tbaa !396
  %20729 = getelementptr inbounds i16, i16* %20717, i64 2
  %20730 = bitcast i16* %20729 to <16 x i16>*
  %20731 = load <16 x i16>, <16 x i16>* %20730, align 2, !tbaa !396
  %20732 = getelementptr inbounds i16, i16* %20717, i64 18
  %20733 = bitcast i16* %20732 to <16 x i16>*
  %20734 = load <16 x i16>, <16 x i16>* %20733, align 2, !tbaa !396
  %20735 = getelementptr inbounds i16, i16* %20717, i64 4
  %20736 = bitcast i16* %20735 to <16 x i16>*
  %20737 = load <16 x i16>, <16 x i16>* %20736, align 2, !tbaa !396
  %20738 = getelementptr inbounds i16, i16* %20717, i64 20
  %20739 = bitcast i16* %20738 to <16 x i16>*
  %20740 = load <16 x i16>, <16 x i16>* %20739, align 2, !tbaa !396
  %20741 = getelementptr inbounds i16, i16* %20717, i64 3
  %20742 = bitcast i16* %20741 to <16 x i16>*
  %20743 = load <16 x i16>, <16 x i16>* %20742, align 2, !tbaa !396
  %20744 = getelementptr inbounds i16, i16* %20717, i64 19
  %20745 = bitcast i16* %20744 to <16 x i16>*
  %20746 = load <16 x i16>, <16 x i16>* %20745, align 2, !tbaa !396
  %20747 = add <16 x i16> %20725, %20720
  %20748 = add <16 x i16> %20747, %20731
  %20749 = add <16 x i16> %20748, %20737
  %20750 = add <16 x i16> %20749, %20743
  %20751 = add <16 x i16> %20728, %20723
  %20752 = add <16 x i16> %20751, %20734
  %20753 = add <16 x i16> %20752, %20740
  %20754 = add <16 x i16> %20753, %20746
  %20755 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20750, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20756 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20754, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20757 = shufflevector <16 x i16> %20755, <16 x i16> %20756, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20758 = lshr <32 x i16> %20757, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20759 = shufflevector <32 x i16> %20758, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20760 = sext i32 %blur_x.s0.x.v1.base.s1514 to i64
  %20761 = add nsw i64 %20760, %20585
  %20762 = getelementptr inbounds i16, i16* %blur_x879, i64 %20761
  %20763 = bitcast i16* %20762 to <16 x i16>*
  store <16 x i16> %20759, <16 x i16>* %20763, align 2, !tbaa !399
  %20764 = shufflevector <32 x i16> %20758, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20765 = getelementptr inbounds i16, i16* %20762, i64 16
  %20766 = bitcast i16* %20765 to <16 x i16>*
  store <16 x i16> %20764, <16 x i16>* %20766, align 2, !tbaa !399
  br label %"consume blur_x1516"

"consume blur_x1516":                             ; preds = %"for blur_y.s0.x.x.rebased1506", %"produce blur_x1513"
  %20767 = sext i32 %b515 to i64
  %20768 = add nsw i64 %20588, %20767
  %20769 = getelementptr inbounds i16, i16* %blur_x879, i64 %20768
  %20770 = bitcast i16* %20769 to <16 x i16>*
  %20771 = load <16 x i16>, <16 x i16>* %20770, align 2, !tbaa !399
  %20772 = getelementptr inbounds i16, i16* %20769, i64 16
  %20773 = bitcast i16* %20772 to <16 x i16>*
  %20774 = load <16 x i16>, <16 x i16>* %20773, align 2, !tbaa !399
  %20775 = add nsw i64 %20591, %20767
  %20776 = getelementptr inbounds i16, i16* %blur_x879, i64 %20775
  %20777 = bitcast i16* %20776 to <16 x i16>*
  %20778 = load <16 x i16>, <16 x i16>* %20777, align 2, !tbaa !399
  %20779 = getelementptr inbounds i16, i16* %20776, i64 16
  %20780 = bitcast i16* %20779 to <16 x i16>*
  %20781 = load <16 x i16>, <16 x i16>* %20780, align 2, !tbaa !399
  %20782 = add nsw i64 %20594, %20767
  %20783 = getelementptr inbounds i16, i16* %blur_x879, i64 %20782
  %20784 = bitcast i16* %20783 to <16 x i16>*
  %20785 = load <16 x i16>, <16 x i16>* %20784, align 2, !tbaa !399
  %20786 = getelementptr inbounds i16, i16* %20783, i64 16
  %20787 = bitcast i16* %20786 to <16 x i16>*
  %20788 = load <16 x i16>, <16 x i16>* %20787, align 2, !tbaa !399
  %20789 = add nsw i64 %20597, %20767
  %20790 = getelementptr inbounds i16, i16* %blur_x879, i64 %20789
  %20791 = bitcast i16* %20790 to <16 x i16>*
  %20792 = load <16 x i16>, <16 x i16>* %20791, align 2, !tbaa !399
  %20793 = getelementptr inbounds i16, i16* %20790, i64 16
  %20794 = bitcast i16* %20793 to <16 x i16>*
  %20795 = load <16 x i16>, <16 x i16>* %20794, align 2, !tbaa !399
  %20796 = add nsw i64 %20600, %20767
  %20797 = getelementptr inbounds i16, i16* %blur_x879, i64 %20796
  %20798 = bitcast i16* %20797 to <16 x i16>*
  %20799 = load <16 x i16>, <16 x i16>* %20798, align 2, !tbaa !399
  %20800 = getelementptr inbounds i16, i16* %20797, i64 16
  %20801 = bitcast i16* %20800 to <16 x i16>*
  %20802 = load <16 x i16>, <16 x i16>* %20801, align 2, !tbaa !399
  %20803 = add <16 x i16> %20778, %20771
  %20804 = add <16 x i16> %20803, %20785
  %20805 = add <16 x i16> %20804, %20792
  %20806 = add <16 x i16> %20805, %20799
  %20807 = add <16 x i16> %20781, %20774
  %20808 = add <16 x i16> %20807, %20788
  %20809 = add <16 x i16> %20808, %20795
  %20810 = add <16 x i16> %20809, %20802
  %20811 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20806, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20812 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20810, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20813 = shufflevector <16 x i16> %20811, <16 x i16> %20812, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20814 = lshr <32 x i16> %20813, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20815 = shufflevector <32 x i16> %20814, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20816 = add nsw i64 %20604, %20767
  %20817 = getelementptr inbounds i16, i16* %260, i64 %20816
  %20818 = bitcast i16* %20817 to <16 x i16>*
  store <16 x i16> %20815, <16 x i16>* %20818, align 2, !tbaa !401
  %20819 = shufflevector <32 x i16> %20814, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20820 = getelementptr inbounds i16, i16* %20817, i64 16
  %20821 = bitcast i16* %20820 to <16 x i16>*
  store <16 x i16> %20819, <16 x i16>* %20821, align 2, !tbaa !401
  %20822 = add nuw nsw i32 %blur_y.s0.x.x.rebased1508, 1
  %.not2581 = icmp eq i32 %20822, %t1683899
  br i1 %.not2581, label %"end for blur_y.s0.x.x.rebased1507", label %"for blur_y.s0.x.x.rebased1506"

after_bb1517:                                     ; preds = %"end for blur_y.s0.x.x.rebased1507", %"produce blur_x1520"
  br i1 %294, label %"for blur_y.s0.x.x.rebased1532.preheader", label %"end for blur_y.s0.x.x.rebased1533", !prof !386

"for blur_y.s0.x.x.rebased1532.preheader":        ; preds = %after_bb1517
  %20823 = sext i32 %t1682886 to i64
  %20824 = zext i32 %.pre-phi3490 to i64
  %20825 = mul nsw i64 %20824, %306
  %20826 = sub nsw i64 %20825, %290
  %20827 = zext i32 %.pre-phi3484 to i64
  %20828 = mul nsw i64 %20827, %306
  %20829 = sub nsw i64 %20828, %290
  %20830 = zext i32 %.pre-phi3496 to i64
  %20831 = mul nsw i64 %20830, %306
  %20832 = sub nsw i64 %20831, %290
  %20833 = zext i32 %.pre-phi3468 to i64
  %20834 = mul nsw i64 %20833, %306
  %20835 = sub nsw i64 %20834, %290
  %20836 = zext i32 %.pre-phi3502 to i64
  %20837 = mul nsw i64 %20836, %306
  %20838 = sub nsw i64 %20837, %290
  %20839 = sext i32 %a353 to i64
  %20840 = add nsw i64 %20839, 12
  %20841 = mul nsw i64 %20840, %307
  %20842 = add nsw i64 %20841, %310
  br label %"for blur_y.s0.x.x.rebased1532"

"produce blur_x1520":                             ; preds = %"end for blur_y.s0.x.x.rebased1507"
  %20843 = getelementptr inbounds i16, i16* %read_input822, i64 %333
  %20844 = getelementptr inbounds i16, i16* %20843, i64 -31
  %20845 = bitcast i16* %20844 to <16 x i16>*
  %20846 = load <16 x i16>, <16 x i16>* %20845, align 2, !tbaa !396
  %20847 = getelementptr inbounds i16, i16* %20843, i64 -15
  %20848 = bitcast i16* %20847 to <16 x i16>*
  %20849 = load <16 x i16>, <16 x i16>* %20848, align 2, !tbaa !396
  %20850 = getelementptr inbounds i16, i16* %20843, i64 -32
  %20851 = bitcast i16* %20850 to <16 x i16>*
  %20852 = load <16 x i16>, <16 x i16>* %20851, align 2, !tbaa !396
  %20853 = getelementptr inbounds i16, i16* %20843, i64 -16
  %20854 = bitcast i16* %20853 to <16 x i16>*
  %20855 = load <16 x i16>, <16 x i16>* %20854, align 2, !tbaa !396
  %20856 = getelementptr inbounds i16, i16* %20843, i64 -30
  %20857 = bitcast i16* %20856 to <16 x i16>*
  %20858 = load <16 x i16>, <16 x i16>* %20857, align 2, !tbaa !396
  %20859 = getelementptr inbounds i16, i16* %20843, i64 -14
  %20860 = bitcast i16* %20859 to <16 x i16>*
  %20861 = load <16 x i16>, <16 x i16>* %20860, align 2, !tbaa !396
  %20862 = getelementptr inbounds i16, i16* %20843, i64 -28
  %20863 = bitcast i16* %20862 to <16 x i16>*
  %20864 = load <16 x i16>, <16 x i16>* %20863, align 2, !tbaa !396
  %20865 = getelementptr inbounds i16, i16* %20843, i64 -12
  %20866 = bitcast i16* %20865 to <16 x i16>*
  %20867 = load <16 x i16>, <16 x i16>* %20866, align 2, !tbaa !396
  %20868 = getelementptr inbounds i16, i16* %20843, i64 -29
  %20869 = bitcast i16* %20868 to <16 x i16>*
  %20870 = load <16 x i16>, <16 x i16>* %20869, align 2, !tbaa !396
  %20871 = getelementptr inbounds i16, i16* %20843, i64 -13
  %20872 = bitcast i16* %20871 to <16 x i16>*
  %20873 = load <16 x i16>, <16 x i16>* %20872, align 2, !tbaa !396
  %20874 = add <16 x i16> %20852, %20846
  %20875 = add <16 x i16> %20874, %20858
  %20876 = add <16 x i16> %20875, %20864
  %20877 = add <16 x i16> %20876, %20870
  %20878 = add <16 x i16> %20855, %20849
  %20879 = add <16 x i16> %20878, %20861
  %20880 = add <16 x i16> %20879, %20867
  %20881 = add <16 x i16> %20880, %20873
  %20882 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20877, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20883 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20881, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20884 = shufflevector <16 x i16> %20882, <16 x i16> %20883, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20885 = lshr <32 x i16> %20884, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20886 = shufflevector <32 x i16> %20885, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20887 = zext i32 %.pre-phi3468 to i64
  %20888 = mul nsw i64 %291, %20887
  %20889 = add nsw i64 %293, %20888
  %20890 = getelementptr inbounds i16, i16* %blur_x879, i64 %20889
  %20891 = getelementptr inbounds i16, i16* %20890, i64 -32
  %20892 = bitcast i16* %20891 to <16 x i16>*
  store <16 x i16> %20886, <16 x i16>* %20892, align 2, !tbaa !399
  %20893 = shufflevector <32 x i16> %20885, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20894 = getelementptr inbounds i16, i16* %20890, i64 -16
  %20895 = bitcast i16* %20894 to <16 x i16>*
  store <16 x i16> %20893, <16 x i16>* %20895, align 2, !tbaa !399
  %20896 = zext i32 %.pre-phi3490 to i64
  %20897 = mul nsw i64 %20896, %306
  %20898 = add nsw i64 %20897, %288
  %20899 = getelementptr inbounds i16, i16* %blur_x879, i64 %20898
  %20900 = getelementptr inbounds i16, i16* %20899, i64 -32
  %20901 = bitcast i16* %20900 to <16 x i16>*
  %20902 = load <16 x i16>, <16 x i16>* %20901, align 2, !tbaa !399
  %20903 = getelementptr inbounds i16, i16* %20899, i64 -16
  %20904 = bitcast i16* %20903 to <16 x i16>*
  %20905 = load <16 x i16>, <16 x i16>* %20904, align 2, !tbaa !399
  %20906 = zext i32 %.pre-phi3484 to i64
  %20907 = mul nsw i64 %20906, %306
  %20908 = add nsw i64 %20907, %288
  %20909 = getelementptr inbounds i16, i16* %blur_x879, i64 %20908
  %20910 = getelementptr inbounds i16, i16* %20909, i64 -32
  %20911 = bitcast i16* %20910 to <16 x i16>*
  %20912 = load <16 x i16>, <16 x i16>* %20911, align 2, !tbaa !399
  %20913 = getelementptr inbounds i16, i16* %20909, i64 -16
  %20914 = bitcast i16* %20913 to <16 x i16>*
  %20915 = load <16 x i16>, <16 x i16>* %20914, align 2, !tbaa !399
  %20916 = zext i32 %.pre-phi3496 to i64
  %20917 = mul nsw i64 %20916, %306
  %20918 = add nsw i64 %20917, %288
  %20919 = getelementptr inbounds i16, i16* %blur_x879, i64 %20918
  %20920 = getelementptr inbounds i16, i16* %20919, i64 -32
  %20921 = bitcast i16* %20920 to <16 x i16>*
  %20922 = load <16 x i16>, <16 x i16>* %20921, align 2, !tbaa !399
  %20923 = getelementptr inbounds i16, i16* %20919, i64 -16
  %20924 = bitcast i16* %20923 to <16 x i16>*
  %20925 = load <16 x i16>, <16 x i16>* %20924, align 2, !tbaa !399
  %20926 = mul nsw i64 %20887, %306
  %20927 = add nsw i64 %20926, %288
  %20928 = getelementptr inbounds i16, i16* %blur_x879, i64 %20927
  %20929 = getelementptr inbounds i16, i16* %20928, i64 -32
  %20930 = bitcast i16* %20929 to <16 x i16>*
  %20931 = load <16 x i16>, <16 x i16>* %20930, align 2, !tbaa !399
  %20932 = getelementptr inbounds i16, i16* %20928, i64 -16
  %20933 = bitcast i16* %20932 to <16 x i16>*
  %20934 = load <16 x i16>, <16 x i16>* %20933, align 2, !tbaa !399
  %20935 = zext i32 %.pre-phi3502 to i64
  %20936 = mul nsw i64 %20935, %306
  %20937 = add nsw i64 %20936, %288
  %20938 = getelementptr inbounds i16, i16* %blur_x879, i64 %20937
  %20939 = getelementptr inbounds i16, i16* %20938, i64 -32
  %20940 = bitcast i16* %20939 to <16 x i16>*
  %20941 = load <16 x i16>, <16 x i16>* %20940, align 2, !tbaa !399
  %20942 = getelementptr inbounds i16, i16* %20938, i64 -16
  %20943 = bitcast i16* %20942 to <16 x i16>*
  %20944 = load <16 x i16>, <16 x i16>* %20943, align 2, !tbaa !399
  %20945 = add <16 x i16> %20912, %20902
  %20946 = add <16 x i16> %20945, %20922
  %20947 = add <16 x i16> %20946, %20931
  %20948 = add <16 x i16> %20947, %20941
  %20949 = add <16 x i16> %20915, %20905
  %20950 = add <16 x i16> %20949, %20925
  %20951 = add <16 x i16> %20950, %20934
  %20952 = add <16 x i16> %20951, %20944
  %20953 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20948, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20954 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20952, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %20955 = shufflevector <16 x i16> %20953, <16 x i16> %20954, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20956 = lshr <32 x i16> %20955, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %20957 = shufflevector <32 x i16> %20956, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20958 = sext i32 %a353 to i64
  %20959 = add nsw i64 %20958, 12
  %20960 = mul nsw i64 %20959, %307
  %20961 = add nsw i64 %309, %20960
  %20962 = getelementptr inbounds i16, i16* %260, i64 %20961
  %20963 = getelementptr inbounds i16, i16* %20962, i64 -32
  %20964 = bitcast i16* %20963 to <16 x i16>*
  store <16 x i16> %20957, <16 x i16>* %20964, align 2, !tbaa !401
  %20965 = shufflevector <32 x i16> %20956, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20966 = getelementptr inbounds i16, i16* %20962, i64 -16
  %20967 = bitcast i16* %20966 to <16 x i16>*
  store <16 x i16> %20965, <16 x i16>* %20967, align 2, !tbaa !401
  br label %after_bb1517

"for blur_y.s0.x.x.rebased1532":                  ; preds = %"for blur_y.s0.x.x.rebased1532.preheader", %"consume blur_x1541"
  %indvars.iv3311 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1532.preheader" ], [ %indvars.iv.next3312, %"consume blur_x1541" ]
  %20968 = add nsw i64 %indvars.iv3311, %295
  %20969 = icmp slt i64 %20968, 1
  %20970 = trunc i64 %20968 to i32
  %20971 = shl nsw i32 %20970, 5
  %20972 = icmp sgt i32 %198, %20971
  %20973 = or i1 %20969, %20972
  br i1 %20973, label %"produce blur_x1539", label %"for blur_y.s0.x.x.rebased1532.consume blur_x1541_crit_edge"

"for blur_y.s0.x.x.rebased1532.consume blur_x1541_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1532"
  %.pre3521 = shl nsw i64 %20968, 5
  br label %"consume blur_x1541"

"end for blur_y.s0.x.x.rebased1533":              ; preds = %"consume blur_x1541", %after_bb1517
  br i1 %296, label %"for blur_y.s0.x.x.rebased1549.preheader", label %"end for blur_y.s0.x.x.rebased1550", !prof !386

"for blur_y.s0.x.x.rebased1549.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1533"
  %20974 = sext i32 %t1682886 to i64
  %20975 = zext i32 %.pre-phi3490 to i64
  %20976 = mul nsw i64 %20975, %306
  %20977 = sub nsw i64 %20976, %290
  %20978 = zext i32 %.pre-phi3484 to i64
  %20979 = mul nsw i64 %20978, %306
  %20980 = sub nsw i64 %20979, %290
  %20981 = zext i32 %.pre-phi3496 to i64
  %20982 = mul nsw i64 %20981, %306
  %20983 = sub nsw i64 %20982, %290
  %20984 = zext i32 %.pre-phi3468 to i64
  %20985 = mul nsw i64 %20984, %306
  %20986 = sub nsw i64 %20985, %290
  %20987 = zext i32 %.pre-phi3502 to i64
  %20988 = mul nsw i64 %20987, %306
  %20989 = sub nsw i64 %20988, %290
  %20990 = sext i32 %a353 to i64
  %20991 = add nsw i64 %20990, 12
  %20992 = mul nsw i64 %20991, %307
  %20993 = add nsw i64 %20992, %310
  br label %"for blur_y.s0.x.x.rebased1549"

"produce blur_x1539":                             ; preds = %"for blur_y.s0.x.x.rebased1532"
  %t9041540 = add nsw i32 %20971, %t18971529
  %20994 = sext i32 %t9041540 to i64
  %20995 = getelementptr inbounds i16, i16* %read_input822, i64 %20994
  %20996 = getelementptr inbounds i16, i16* %20995, i64 1
  %20997 = bitcast i16* %20996 to <16 x i16>*
  %20998 = load <16 x i16>, <16 x i16>* %20997, align 2, !tbaa !396
  %20999 = getelementptr inbounds i16, i16* %20995, i64 17
  %21000 = bitcast i16* %20999 to <16 x i16>*
  %21001 = load <16 x i16>, <16 x i16>* %21000, align 2, !tbaa !396
  %21002 = bitcast i16* %20995 to <16 x i16>*
  %21003 = load <16 x i16>, <16 x i16>* %21002, align 2, !tbaa !396
  %21004 = getelementptr inbounds i16, i16* %20995, i64 16
  %21005 = bitcast i16* %21004 to <16 x i16>*
  %21006 = load <16 x i16>, <16 x i16>* %21005, align 2, !tbaa !396
  %21007 = getelementptr inbounds i16, i16* %20995, i64 2
  %21008 = bitcast i16* %21007 to <16 x i16>*
  %21009 = load <16 x i16>, <16 x i16>* %21008, align 2, !tbaa !396
  %21010 = getelementptr inbounds i16, i16* %20995, i64 18
  %21011 = bitcast i16* %21010 to <16 x i16>*
  %21012 = load <16 x i16>, <16 x i16>* %21011, align 2, !tbaa !396
  %21013 = getelementptr inbounds i16, i16* %20995, i64 4
  %21014 = bitcast i16* %21013 to <16 x i16>*
  %21015 = load <16 x i16>, <16 x i16>* %21014, align 2, !tbaa !396
  %21016 = getelementptr inbounds i16, i16* %20995, i64 20
  %21017 = bitcast i16* %21016 to <16 x i16>*
  %21018 = load <16 x i16>, <16 x i16>* %21017, align 2, !tbaa !396
  %21019 = getelementptr inbounds i16, i16* %20995, i64 3
  %21020 = bitcast i16* %21019 to <16 x i16>*
  %21021 = load <16 x i16>, <16 x i16>* %21020, align 2, !tbaa !396
  %21022 = getelementptr inbounds i16, i16* %20995, i64 19
  %21023 = bitcast i16* %21022 to <16 x i16>*
  %21024 = load <16 x i16>, <16 x i16>* %21023, align 2, !tbaa !396
  %21025 = add <16 x i16> %21003, %20998
  %21026 = add <16 x i16> %21025, %21009
  %21027 = add <16 x i16> %21026, %21015
  %21028 = add <16 x i16> %21027, %21021
  %21029 = add <16 x i16> %21006, %21001
  %21030 = add <16 x i16> %21029, %21012
  %21031 = add <16 x i16> %21030, %21018
  %21032 = add <16 x i16> %21031, %21024
  %21033 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21028, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21034 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21032, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21035 = shufflevector <16 x i16> %21033, <16 x i16> %21034, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21036 = lshr <32 x i16> %21035, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21037 = shufflevector <32 x i16> %21036, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21038 = shl nsw i64 %20968, 5
  %21039 = add nsw i64 %21038, %20823
  %21040 = getelementptr inbounds i16, i16* %blur_x879, i64 %21039
  %21041 = bitcast i16* %21040 to <16 x i16>*
  store <16 x i16> %21037, <16 x i16>* %21041, align 2, !tbaa !399
  %21042 = shufflevector <32 x i16> %21036, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21043 = getelementptr inbounds i16, i16* %21040, i64 16
  %21044 = bitcast i16* %21043 to <16 x i16>*
  store <16 x i16> %21042, <16 x i16>* %21044, align 2, !tbaa !399
  br label %"consume blur_x1541"

"consume blur_x1541":                             ; preds = %"for blur_y.s0.x.x.rebased1532.consume blur_x1541_crit_edge", %"produce blur_x1539"
  %.pre-phi3522 = phi i64 [ %.pre3521, %"for blur_y.s0.x.x.rebased1532.consume blur_x1541_crit_edge" ], [ %21038, %"produce blur_x1539" ]
  %21045 = add nsw i64 %20826, %.pre-phi3522
  %21046 = getelementptr inbounds i16, i16* %blur_x879, i64 %21045
  %21047 = bitcast i16* %21046 to <16 x i16>*
  %21048 = load <16 x i16>, <16 x i16>* %21047, align 2, !tbaa !399
  %21049 = getelementptr inbounds i16, i16* %21046, i64 16
  %21050 = bitcast i16* %21049 to <16 x i16>*
  %21051 = load <16 x i16>, <16 x i16>* %21050, align 2, !tbaa !399
  %21052 = add nsw i64 %20829, %.pre-phi3522
  %21053 = getelementptr inbounds i16, i16* %blur_x879, i64 %21052
  %21054 = bitcast i16* %21053 to <16 x i16>*
  %21055 = load <16 x i16>, <16 x i16>* %21054, align 2, !tbaa !399
  %21056 = getelementptr inbounds i16, i16* %21053, i64 16
  %21057 = bitcast i16* %21056 to <16 x i16>*
  %21058 = load <16 x i16>, <16 x i16>* %21057, align 2, !tbaa !399
  %21059 = add nsw i64 %20832, %.pre-phi3522
  %21060 = getelementptr inbounds i16, i16* %blur_x879, i64 %21059
  %21061 = bitcast i16* %21060 to <16 x i16>*
  %21062 = load <16 x i16>, <16 x i16>* %21061, align 2, !tbaa !399
  %21063 = getelementptr inbounds i16, i16* %21060, i64 16
  %21064 = bitcast i16* %21063 to <16 x i16>*
  %21065 = load <16 x i16>, <16 x i16>* %21064, align 2, !tbaa !399
  %21066 = add nsw i64 %20835, %.pre-phi3522
  %21067 = getelementptr inbounds i16, i16* %blur_x879, i64 %21066
  %21068 = bitcast i16* %21067 to <16 x i16>*
  %21069 = load <16 x i16>, <16 x i16>* %21068, align 2, !tbaa !399
  %21070 = getelementptr inbounds i16, i16* %21067, i64 16
  %21071 = bitcast i16* %21070 to <16 x i16>*
  %21072 = load <16 x i16>, <16 x i16>* %21071, align 2, !tbaa !399
  %21073 = add nsw i64 %20838, %.pre-phi3522
  %21074 = getelementptr inbounds i16, i16* %blur_x879, i64 %21073
  %21075 = bitcast i16* %21074 to <16 x i16>*
  %21076 = load <16 x i16>, <16 x i16>* %21075, align 2, !tbaa !399
  %21077 = getelementptr inbounds i16, i16* %21074, i64 16
  %21078 = bitcast i16* %21077 to <16 x i16>*
  %21079 = load <16 x i16>, <16 x i16>* %21078, align 2, !tbaa !399
  %21080 = add <16 x i16> %21055, %21048
  %21081 = add <16 x i16> %21080, %21062
  %21082 = add <16 x i16> %21081, %21069
  %21083 = add <16 x i16> %21082, %21076
  %21084 = add <16 x i16> %21058, %21051
  %21085 = add <16 x i16> %21084, %21065
  %21086 = add <16 x i16> %21085, %21072
  %21087 = add <16 x i16> %21086, %21079
  %21088 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21083, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21089 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21087, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21090 = shufflevector <16 x i16> %21088, <16 x i16> %21089, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21091 = lshr <32 x i16> %21090, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21092 = shufflevector <32 x i16> %21091, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21093 = add nsw i64 %20842, %.pre-phi3522
  %21094 = getelementptr inbounds i16, i16* %260, i64 %21093
  %21095 = bitcast i16* %21094 to <16 x i16>*
  store <16 x i16> %21092, <16 x i16>* %21095, align 2, !tbaa !401
  %21096 = shufflevector <32 x i16> %21091, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21097 = getelementptr inbounds i16, i16* %21094, i64 16
  %21098 = bitcast i16* %21097 to <16 x i16>*
  store <16 x i16> %21096, <16 x i16>* %21098, align 2, !tbaa !401
  %indvars.iv.next3312 = add nuw nsw i64 %indvars.iv3311, 1
  %.not2580 = icmp eq i64 %indvars.iv.next3312, %378
  br i1 %.not2580, label %"end for blur_y.s0.x.x.rebased1533", label %"for blur_y.s0.x.x.rebased1532"

"for blur_y.s0.x.x.rebased1549":                  ; preds = %"for blur_y.s0.x.x.rebased1549.preheader", %"consume blur_x1559"
  %blur_y.s0.x.x.rebased1551 = phi i32 [ %21211, %"consume blur_x1559" ], [ 0, %"for blur_y.s0.x.x.rebased1549.preheader" ]
  %21099 = add nsw i32 %blur_y.s0.x.x.rebased1551, %t1626814
  %a516 = shl nsw i32 %21099, 5
  %21100 = icmp sgt i32 %a341, %a516
  %b522 = select i1 %21100, i32 %a516, i32 %a341
  %21101 = icmp slt i32 %21099, 1
  %21102 = icmp sgt i32 %198, %a516
  %21103 = or i1 %21101, %21102
  br i1 %21103, label %"produce blur_x1556", label %"consume blur_x1559"

"end for blur_y.s0.x.x.rebased1550":              ; preds = %"consume blur_x1559", %"end for blur_y.s0.x.x.rebased1533"
  br i1 %228, label %"produce blur_x1563", label %after_bb1560

"produce blur_x1556":                             ; preds = %"for blur_y.s0.x.x.rebased1549"
  %21104 = icmp slt i32 %b522, %198
  %blur_x.s0.x.v1.base.s1557 = select i1 %21104, i32 %b522, i32 %198
  %t9091558 = add nsw i32 %blur_x.s0.x.v1.base.s1557, %t18971529
  %21105 = sext i32 %t9091558 to i64
  %21106 = getelementptr inbounds i16, i16* %read_input822, i64 %21105
  %21107 = getelementptr inbounds i16, i16* %21106, i64 1
  %21108 = bitcast i16* %21107 to <16 x i16>*
  %21109 = load <16 x i16>, <16 x i16>* %21108, align 2, !tbaa !396
  %21110 = getelementptr inbounds i16, i16* %21106, i64 17
  %21111 = bitcast i16* %21110 to <16 x i16>*
  %21112 = load <16 x i16>, <16 x i16>* %21111, align 2, !tbaa !396
  %21113 = bitcast i16* %21106 to <16 x i16>*
  %21114 = load <16 x i16>, <16 x i16>* %21113, align 2, !tbaa !396
  %21115 = getelementptr inbounds i16, i16* %21106, i64 16
  %21116 = bitcast i16* %21115 to <16 x i16>*
  %21117 = load <16 x i16>, <16 x i16>* %21116, align 2, !tbaa !396
  %21118 = getelementptr inbounds i16, i16* %21106, i64 2
  %21119 = bitcast i16* %21118 to <16 x i16>*
  %21120 = load <16 x i16>, <16 x i16>* %21119, align 2, !tbaa !396
  %21121 = getelementptr inbounds i16, i16* %21106, i64 18
  %21122 = bitcast i16* %21121 to <16 x i16>*
  %21123 = load <16 x i16>, <16 x i16>* %21122, align 2, !tbaa !396
  %21124 = getelementptr inbounds i16, i16* %21106, i64 4
  %21125 = bitcast i16* %21124 to <16 x i16>*
  %21126 = load <16 x i16>, <16 x i16>* %21125, align 2, !tbaa !396
  %21127 = getelementptr inbounds i16, i16* %21106, i64 20
  %21128 = bitcast i16* %21127 to <16 x i16>*
  %21129 = load <16 x i16>, <16 x i16>* %21128, align 2, !tbaa !396
  %21130 = getelementptr inbounds i16, i16* %21106, i64 3
  %21131 = bitcast i16* %21130 to <16 x i16>*
  %21132 = load <16 x i16>, <16 x i16>* %21131, align 2, !tbaa !396
  %21133 = getelementptr inbounds i16, i16* %21106, i64 19
  %21134 = bitcast i16* %21133 to <16 x i16>*
  %21135 = load <16 x i16>, <16 x i16>* %21134, align 2, !tbaa !396
  %21136 = add <16 x i16> %21114, %21109
  %21137 = add <16 x i16> %21136, %21120
  %21138 = add <16 x i16> %21137, %21126
  %21139 = add <16 x i16> %21138, %21132
  %21140 = add <16 x i16> %21117, %21112
  %21141 = add <16 x i16> %21140, %21123
  %21142 = add <16 x i16> %21141, %21129
  %21143 = add <16 x i16> %21142, %21135
  %21144 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21139, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21145 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21143, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21146 = shufflevector <16 x i16> %21144, <16 x i16> %21145, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21147 = lshr <32 x i16> %21146, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21148 = shufflevector <32 x i16> %21147, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21149 = sext i32 %blur_x.s0.x.v1.base.s1557 to i64
  %21150 = add nsw i64 %21149, %20974
  %21151 = getelementptr inbounds i16, i16* %blur_x879, i64 %21150
  %21152 = bitcast i16* %21151 to <16 x i16>*
  store <16 x i16> %21148, <16 x i16>* %21152, align 2, !tbaa !399
  %21153 = shufflevector <32 x i16> %21147, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21154 = getelementptr inbounds i16, i16* %21151, i64 16
  %21155 = bitcast i16* %21154 to <16 x i16>*
  store <16 x i16> %21153, <16 x i16>* %21155, align 2, !tbaa !399
  br label %"consume blur_x1559"

"consume blur_x1559":                             ; preds = %"for blur_y.s0.x.x.rebased1549", %"produce blur_x1556"
  %21156 = sext i32 %b522 to i64
  %21157 = add nsw i64 %20977, %21156
  %21158 = getelementptr inbounds i16, i16* %blur_x879, i64 %21157
  %21159 = bitcast i16* %21158 to <16 x i16>*
  %21160 = load <16 x i16>, <16 x i16>* %21159, align 2, !tbaa !399
  %21161 = getelementptr inbounds i16, i16* %21158, i64 16
  %21162 = bitcast i16* %21161 to <16 x i16>*
  %21163 = load <16 x i16>, <16 x i16>* %21162, align 2, !tbaa !399
  %21164 = add nsw i64 %20980, %21156
  %21165 = getelementptr inbounds i16, i16* %blur_x879, i64 %21164
  %21166 = bitcast i16* %21165 to <16 x i16>*
  %21167 = load <16 x i16>, <16 x i16>* %21166, align 2, !tbaa !399
  %21168 = getelementptr inbounds i16, i16* %21165, i64 16
  %21169 = bitcast i16* %21168 to <16 x i16>*
  %21170 = load <16 x i16>, <16 x i16>* %21169, align 2, !tbaa !399
  %21171 = add nsw i64 %20983, %21156
  %21172 = getelementptr inbounds i16, i16* %blur_x879, i64 %21171
  %21173 = bitcast i16* %21172 to <16 x i16>*
  %21174 = load <16 x i16>, <16 x i16>* %21173, align 2, !tbaa !399
  %21175 = getelementptr inbounds i16, i16* %21172, i64 16
  %21176 = bitcast i16* %21175 to <16 x i16>*
  %21177 = load <16 x i16>, <16 x i16>* %21176, align 2, !tbaa !399
  %21178 = add nsw i64 %20986, %21156
  %21179 = getelementptr inbounds i16, i16* %blur_x879, i64 %21178
  %21180 = bitcast i16* %21179 to <16 x i16>*
  %21181 = load <16 x i16>, <16 x i16>* %21180, align 2, !tbaa !399
  %21182 = getelementptr inbounds i16, i16* %21179, i64 16
  %21183 = bitcast i16* %21182 to <16 x i16>*
  %21184 = load <16 x i16>, <16 x i16>* %21183, align 2, !tbaa !399
  %21185 = add nsw i64 %20989, %21156
  %21186 = getelementptr inbounds i16, i16* %blur_x879, i64 %21185
  %21187 = bitcast i16* %21186 to <16 x i16>*
  %21188 = load <16 x i16>, <16 x i16>* %21187, align 2, !tbaa !399
  %21189 = getelementptr inbounds i16, i16* %21186, i64 16
  %21190 = bitcast i16* %21189 to <16 x i16>*
  %21191 = load <16 x i16>, <16 x i16>* %21190, align 2, !tbaa !399
  %21192 = add <16 x i16> %21167, %21160
  %21193 = add <16 x i16> %21192, %21174
  %21194 = add <16 x i16> %21193, %21181
  %21195 = add <16 x i16> %21194, %21188
  %21196 = add <16 x i16> %21170, %21163
  %21197 = add <16 x i16> %21196, %21177
  %21198 = add <16 x i16> %21197, %21184
  %21199 = add <16 x i16> %21198, %21191
  %21200 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21195, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21201 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21199, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21202 = shufflevector <16 x i16> %21200, <16 x i16> %21201, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21203 = lshr <32 x i16> %21202, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21204 = shufflevector <32 x i16> %21203, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21205 = add nsw i64 %20993, %21156
  %21206 = getelementptr inbounds i16, i16* %260, i64 %21205
  %21207 = bitcast i16* %21206 to <16 x i16>*
  store <16 x i16> %21204, <16 x i16>* %21207, align 2, !tbaa !401
  %21208 = shufflevector <32 x i16> %21203, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21209 = getelementptr inbounds i16, i16* %21206, i64 16
  %21210 = bitcast i16* %21209 to <16 x i16>*
  store <16 x i16> %21208, <16 x i16>* %21210, align 2, !tbaa !401
  %21211 = add nuw nsw i32 %blur_y.s0.x.x.rebased1551, 1
  %.not2579 = icmp eq i32 %21211, %t1683899
  br i1 %.not2579, label %"end for blur_y.s0.x.x.rebased1550", label %"for blur_y.s0.x.x.rebased1549"

after_bb1560:                                     ; preds = %"end for blur_y.s0.x.x.rebased1550", %"produce blur_x1563"
  br i1 %294, label %"for blur_y.s0.x.x.rebased1575.preheader", label %"end for blur_y.s0.x.x.rebased1576", !prof !386

"for blur_y.s0.x.x.rebased1575.preheader":        ; preds = %after_bb1560
  %21212 = sext i32 %t1688916 to i64
  %21213 = zext i32 %.pre-phi3496 to i64
  %21214 = mul nsw i64 %21213, %306
  %21215 = sub nsw i64 %21214, %290
  %21216 = zext i32 %.pre-phi3490 to i64
  %21217 = mul nsw i64 %21216, %306
  %21218 = sub nsw i64 %21217, %290
  %21219 = zext i32 %.pre-phi3502 to i64
  %21220 = mul nsw i64 %21219, %306
  %21221 = sub nsw i64 %21220, %290
  %21222 = zext i32 %.pre-phi3472 to i64
  %21223 = mul nsw i64 %21222, %306
  %21224 = sub nsw i64 %21223, %290
  %21225 = zext i32 %.pre-phi3468 to i64
  %21226 = mul nsw i64 %21225, %306
  %21227 = sub nsw i64 %21226, %290
  %21228 = sext i32 %a353 to i64
  %21229 = add nsw i64 %21228, 13
  %21230 = mul nsw i64 %21229, %307
  %21231 = add nsw i64 %21230, %310
  br label %"for blur_y.s0.x.x.rebased1575"

"produce blur_x1563":                             ; preds = %"end for blur_y.s0.x.x.rebased1550"
  %21232 = getelementptr inbounds i16, i16* %read_input822, i64 %335
  %21233 = getelementptr inbounds i16, i16* %21232, i64 -31
  %21234 = bitcast i16* %21233 to <16 x i16>*
  %21235 = load <16 x i16>, <16 x i16>* %21234, align 2, !tbaa !396
  %21236 = getelementptr inbounds i16, i16* %21232, i64 -15
  %21237 = bitcast i16* %21236 to <16 x i16>*
  %21238 = load <16 x i16>, <16 x i16>* %21237, align 2, !tbaa !396
  %21239 = getelementptr inbounds i16, i16* %21232, i64 -32
  %21240 = bitcast i16* %21239 to <16 x i16>*
  %21241 = load <16 x i16>, <16 x i16>* %21240, align 2, !tbaa !396
  %21242 = getelementptr inbounds i16, i16* %21232, i64 -16
  %21243 = bitcast i16* %21242 to <16 x i16>*
  %21244 = load <16 x i16>, <16 x i16>* %21243, align 2, !tbaa !396
  %21245 = getelementptr inbounds i16, i16* %21232, i64 -30
  %21246 = bitcast i16* %21245 to <16 x i16>*
  %21247 = load <16 x i16>, <16 x i16>* %21246, align 2, !tbaa !396
  %21248 = getelementptr inbounds i16, i16* %21232, i64 -14
  %21249 = bitcast i16* %21248 to <16 x i16>*
  %21250 = load <16 x i16>, <16 x i16>* %21249, align 2, !tbaa !396
  %21251 = getelementptr inbounds i16, i16* %21232, i64 -28
  %21252 = bitcast i16* %21251 to <16 x i16>*
  %21253 = load <16 x i16>, <16 x i16>* %21252, align 2, !tbaa !396
  %21254 = getelementptr inbounds i16, i16* %21232, i64 -12
  %21255 = bitcast i16* %21254 to <16 x i16>*
  %21256 = load <16 x i16>, <16 x i16>* %21255, align 2, !tbaa !396
  %21257 = getelementptr inbounds i16, i16* %21232, i64 -29
  %21258 = bitcast i16* %21257 to <16 x i16>*
  %21259 = load <16 x i16>, <16 x i16>* %21258, align 2, !tbaa !396
  %21260 = getelementptr inbounds i16, i16* %21232, i64 -13
  %21261 = bitcast i16* %21260 to <16 x i16>*
  %21262 = load <16 x i16>, <16 x i16>* %21261, align 2, !tbaa !396
  %21263 = add <16 x i16> %21241, %21235
  %21264 = add <16 x i16> %21263, %21247
  %21265 = add <16 x i16> %21264, %21253
  %21266 = add <16 x i16> %21265, %21259
  %21267 = add <16 x i16> %21244, %21238
  %21268 = add <16 x i16> %21267, %21250
  %21269 = add <16 x i16> %21268, %21256
  %21270 = add <16 x i16> %21269, %21262
  %21271 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21266, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21272 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21270, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21273 = shufflevector <16 x i16> %21271, <16 x i16> %21272, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21274 = lshr <32 x i16> %21273, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21275 = shufflevector <32 x i16> %21274, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21276 = zext i32 %.pre-phi3472 to i64
  %21277 = mul nsw i64 %291, %21276
  %21278 = add nsw i64 %293, %21277
  %21279 = getelementptr inbounds i16, i16* %blur_x879, i64 %21278
  %21280 = getelementptr inbounds i16, i16* %21279, i64 -32
  %21281 = bitcast i16* %21280 to <16 x i16>*
  store <16 x i16> %21275, <16 x i16>* %21281, align 2, !tbaa !399
  %21282 = shufflevector <32 x i16> %21274, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21283 = getelementptr inbounds i16, i16* %21279, i64 -16
  %21284 = bitcast i16* %21283 to <16 x i16>*
  store <16 x i16> %21282, <16 x i16>* %21284, align 2, !tbaa !399
  %21285 = zext i32 %.pre-phi3496 to i64
  %21286 = mul nsw i64 %21285, %306
  %21287 = add nsw i64 %21286, %288
  %21288 = getelementptr inbounds i16, i16* %blur_x879, i64 %21287
  %21289 = getelementptr inbounds i16, i16* %21288, i64 -32
  %21290 = bitcast i16* %21289 to <16 x i16>*
  %21291 = load <16 x i16>, <16 x i16>* %21290, align 2, !tbaa !399
  %21292 = getelementptr inbounds i16, i16* %21288, i64 -16
  %21293 = bitcast i16* %21292 to <16 x i16>*
  %21294 = load <16 x i16>, <16 x i16>* %21293, align 2, !tbaa !399
  %21295 = zext i32 %.pre-phi3490 to i64
  %21296 = mul nsw i64 %21295, %306
  %21297 = add nsw i64 %21296, %288
  %21298 = getelementptr inbounds i16, i16* %blur_x879, i64 %21297
  %21299 = getelementptr inbounds i16, i16* %21298, i64 -32
  %21300 = bitcast i16* %21299 to <16 x i16>*
  %21301 = load <16 x i16>, <16 x i16>* %21300, align 2, !tbaa !399
  %21302 = getelementptr inbounds i16, i16* %21298, i64 -16
  %21303 = bitcast i16* %21302 to <16 x i16>*
  %21304 = load <16 x i16>, <16 x i16>* %21303, align 2, !tbaa !399
  %21305 = zext i32 %.pre-phi3502 to i64
  %21306 = mul nsw i64 %21305, %306
  %21307 = add nsw i64 %21306, %288
  %21308 = getelementptr inbounds i16, i16* %blur_x879, i64 %21307
  %21309 = getelementptr inbounds i16, i16* %21308, i64 -32
  %21310 = bitcast i16* %21309 to <16 x i16>*
  %21311 = load <16 x i16>, <16 x i16>* %21310, align 2, !tbaa !399
  %21312 = getelementptr inbounds i16, i16* %21308, i64 -16
  %21313 = bitcast i16* %21312 to <16 x i16>*
  %21314 = load <16 x i16>, <16 x i16>* %21313, align 2, !tbaa !399
  %21315 = mul nsw i64 %21276, %306
  %21316 = add nsw i64 %21315, %288
  %21317 = getelementptr inbounds i16, i16* %blur_x879, i64 %21316
  %21318 = getelementptr inbounds i16, i16* %21317, i64 -32
  %21319 = bitcast i16* %21318 to <16 x i16>*
  %21320 = load <16 x i16>, <16 x i16>* %21319, align 2, !tbaa !399
  %21321 = getelementptr inbounds i16, i16* %21317, i64 -16
  %21322 = bitcast i16* %21321 to <16 x i16>*
  %21323 = load <16 x i16>, <16 x i16>* %21322, align 2, !tbaa !399
  %21324 = zext i32 %.pre-phi3468 to i64
  %21325 = mul nsw i64 %21324, %306
  %21326 = add nsw i64 %21325, %288
  %21327 = getelementptr inbounds i16, i16* %blur_x879, i64 %21326
  %21328 = getelementptr inbounds i16, i16* %21327, i64 -32
  %21329 = bitcast i16* %21328 to <16 x i16>*
  %21330 = load <16 x i16>, <16 x i16>* %21329, align 2, !tbaa !399
  %21331 = getelementptr inbounds i16, i16* %21327, i64 -16
  %21332 = bitcast i16* %21331 to <16 x i16>*
  %21333 = load <16 x i16>, <16 x i16>* %21332, align 2, !tbaa !399
  %21334 = add <16 x i16> %21301, %21291
  %21335 = add <16 x i16> %21334, %21311
  %21336 = add <16 x i16> %21335, %21320
  %21337 = add <16 x i16> %21336, %21330
  %21338 = add <16 x i16> %21304, %21294
  %21339 = add <16 x i16> %21338, %21314
  %21340 = add <16 x i16> %21339, %21323
  %21341 = add <16 x i16> %21340, %21333
  %21342 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21337, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21343 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21341, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21344 = shufflevector <16 x i16> %21342, <16 x i16> %21343, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21345 = lshr <32 x i16> %21344, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21346 = shufflevector <32 x i16> %21345, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21347 = sext i32 %a353 to i64
  %21348 = add nsw i64 %21347, 13
  %21349 = mul nsw i64 %21348, %307
  %21350 = add nsw i64 %309, %21349
  %21351 = getelementptr inbounds i16, i16* %260, i64 %21350
  %21352 = getelementptr inbounds i16, i16* %21351, i64 -32
  %21353 = bitcast i16* %21352 to <16 x i16>*
  store <16 x i16> %21346, <16 x i16>* %21353, align 2, !tbaa !401
  %21354 = shufflevector <32 x i16> %21345, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21355 = getelementptr inbounds i16, i16* %21351, i64 -16
  %21356 = bitcast i16* %21355 to <16 x i16>*
  store <16 x i16> %21354, <16 x i16>* %21356, align 2, !tbaa !401
  br label %after_bb1560

"for blur_y.s0.x.x.rebased1575":                  ; preds = %"for blur_y.s0.x.x.rebased1575.preheader", %"consume blur_x1584"
  %indvars.iv3314 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1575.preheader" ], [ %indvars.iv.next3315, %"consume blur_x1584" ]
  %21357 = add nsw i64 %indvars.iv3314, %295
  %21358 = icmp slt i64 %21357, 1
  %21359 = trunc i64 %21357 to i32
  %21360 = shl nsw i32 %21359, 5
  %21361 = icmp sgt i32 %198, %21360
  %21362 = or i1 %21358, %21361
  br i1 %21362, label %"produce blur_x1582", label %"for blur_y.s0.x.x.rebased1575.consume blur_x1584_crit_edge"

"for blur_y.s0.x.x.rebased1575.consume blur_x1584_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1575"
  %.pre3523 = shl nsw i64 %21357, 5
  br label %"consume blur_x1584"

"end for blur_y.s0.x.x.rebased1576":              ; preds = %"consume blur_x1584", %after_bb1560
  br i1 %296, label %"for blur_y.s0.x.x.rebased1592.preheader", label %"end for blur_y.s0.x.x.rebased1593", !prof !386

"for blur_y.s0.x.x.rebased1592.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1576"
  %21363 = sext i32 %t1688916 to i64
  %21364 = zext i32 %.pre-phi3496 to i64
  %21365 = mul nsw i64 %21364, %306
  %21366 = sub nsw i64 %21365, %290
  %21367 = zext i32 %.pre-phi3490 to i64
  %21368 = mul nsw i64 %21367, %306
  %21369 = sub nsw i64 %21368, %290
  %21370 = zext i32 %.pre-phi3502 to i64
  %21371 = mul nsw i64 %21370, %306
  %21372 = sub nsw i64 %21371, %290
  %21373 = zext i32 %.pre-phi3472 to i64
  %21374 = mul nsw i64 %21373, %306
  %21375 = sub nsw i64 %21374, %290
  %21376 = zext i32 %.pre-phi3468 to i64
  %21377 = mul nsw i64 %21376, %306
  %21378 = sub nsw i64 %21377, %290
  %21379 = sext i32 %a353 to i64
  %21380 = add nsw i64 %21379, 13
  %21381 = mul nsw i64 %21380, %307
  %21382 = add nsw i64 %21381, %310
  br label %"for blur_y.s0.x.x.rebased1592"

"produce blur_x1582":                             ; preds = %"for blur_y.s0.x.x.rebased1575"
  %t9201583 = add nsw i32 %21360, %t19131572
  %21383 = sext i32 %t9201583 to i64
  %21384 = getelementptr inbounds i16, i16* %read_input822, i64 %21383
  %21385 = getelementptr inbounds i16, i16* %21384, i64 1
  %21386 = bitcast i16* %21385 to <16 x i16>*
  %21387 = load <16 x i16>, <16 x i16>* %21386, align 2, !tbaa !396
  %21388 = getelementptr inbounds i16, i16* %21384, i64 17
  %21389 = bitcast i16* %21388 to <16 x i16>*
  %21390 = load <16 x i16>, <16 x i16>* %21389, align 2, !tbaa !396
  %21391 = bitcast i16* %21384 to <16 x i16>*
  %21392 = load <16 x i16>, <16 x i16>* %21391, align 2, !tbaa !396
  %21393 = getelementptr inbounds i16, i16* %21384, i64 16
  %21394 = bitcast i16* %21393 to <16 x i16>*
  %21395 = load <16 x i16>, <16 x i16>* %21394, align 2, !tbaa !396
  %21396 = getelementptr inbounds i16, i16* %21384, i64 2
  %21397 = bitcast i16* %21396 to <16 x i16>*
  %21398 = load <16 x i16>, <16 x i16>* %21397, align 2, !tbaa !396
  %21399 = getelementptr inbounds i16, i16* %21384, i64 18
  %21400 = bitcast i16* %21399 to <16 x i16>*
  %21401 = load <16 x i16>, <16 x i16>* %21400, align 2, !tbaa !396
  %21402 = getelementptr inbounds i16, i16* %21384, i64 4
  %21403 = bitcast i16* %21402 to <16 x i16>*
  %21404 = load <16 x i16>, <16 x i16>* %21403, align 2, !tbaa !396
  %21405 = getelementptr inbounds i16, i16* %21384, i64 20
  %21406 = bitcast i16* %21405 to <16 x i16>*
  %21407 = load <16 x i16>, <16 x i16>* %21406, align 2, !tbaa !396
  %21408 = getelementptr inbounds i16, i16* %21384, i64 3
  %21409 = bitcast i16* %21408 to <16 x i16>*
  %21410 = load <16 x i16>, <16 x i16>* %21409, align 2, !tbaa !396
  %21411 = getelementptr inbounds i16, i16* %21384, i64 19
  %21412 = bitcast i16* %21411 to <16 x i16>*
  %21413 = load <16 x i16>, <16 x i16>* %21412, align 2, !tbaa !396
  %21414 = add <16 x i16> %21392, %21387
  %21415 = add <16 x i16> %21414, %21398
  %21416 = add <16 x i16> %21415, %21404
  %21417 = add <16 x i16> %21416, %21410
  %21418 = add <16 x i16> %21395, %21390
  %21419 = add <16 x i16> %21418, %21401
  %21420 = add <16 x i16> %21419, %21407
  %21421 = add <16 x i16> %21420, %21413
  %21422 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21417, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21423 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21421, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21424 = shufflevector <16 x i16> %21422, <16 x i16> %21423, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21425 = lshr <32 x i16> %21424, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21426 = shufflevector <32 x i16> %21425, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21427 = shl nsw i64 %21357, 5
  %21428 = add nsw i64 %21427, %21212
  %21429 = getelementptr inbounds i16, i16* %blur_x879, i64 %21428
  %21430 = bitcast i16* %21429 to <16 x i16>*
  store <16 x i16> %21426, <16 x i16>* %21430, align 2, !tbaa !399
  %21431 = shufflevector <32 x i16> %21425, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21432 = getelementptr inbounds i16, i16* %21429, i64 16
  %21433 = bitcast i16* %21432 to <16 x i16>*
  store <16 x i16> %21431, <16 x i16>* %21433, align 2, !tbaa !399
  br label %"consume blur_x1584"

"consume blur_x1584":                             ; preds = %"for blur_y.s0.x.x.rebased1575.consume blur_x1584_crit_edge", %"produce blur_x1582"
  %.pre-phi3524 = phi i64 [ %.pre3523, %"for blur_y.s0.x.x.rebased1575.consume blur_x1584_crit_edge" ], [ %21427, %"produce blur_x1582" ]
  %21434 = add nsw i64 %21215, %.pre-phi3524
  %21435 = getelementptr inbounds i16, i16* %blur_x879, i64 %21434
  %21436 = bitcast i16* %21435 to <16 x i16>*
  %21437 = load <16 x i16>, <16 x i16>* %21436, align 2, !tbaa !399
  %21438 = getelementptr inbounds i16, i16* %21435, i64 16
  %21439 = bitcast i16* %21438 to <16 x i16>*
  %21440 = load <16 x i16>, <16 x i16>* %21439, align 2, !tbaa !399
  %21441 = add nsw i64 %21218, %.pre-phi3524
  %21442 = getelementptr inbounds i16, i16* %blur_x879, i64 %21441
  %21443 = bitcast i16* %21442 to <16 x i16>*
  %21444 = load <16 x i16>, <16 x i16>* %21443, align 2, !tbaa !399
  %21445 = getelementptr inbounds i16, i16* %21442, i64 16
  %21446 = bitcast i16* %21445 to <16 x i16>*
  %21447 = load <16 x i16>, <16 x i16>* %21446, align 2, !tbaa !399
  %21448 = add nsw i64 %21221, %.pre-phi3524
  %21449 = getelementptr inbounds i16, i16* %blur_x879, i64 %21448
  %21450 = bitcast i16* %21449 to <16 x i16>*
  %21451 = load <16 x i16>, <16 x i16>* %21450, align 2, !tbaa !399
  %21452 = getelementptr inbounds i16, i16* %21449, i64 16
  %21453 = bitcast i16* %21452 to <16 x i16>*
  %21454 = load <16 x i16>, <16 x i16>* %21453, align 2, !tbaa !399
  %21455 = add nsw i64 %21224, %.pre-phi3524
  %21456 = getelementptr inbounds i16, i16* %blur_x879, i64 %21455
  %21457 = bitcast i16* %21456 to <16 x i16>*
  %21458 = load <16 x i16>, <16 x i16>* %21457, align 2, !tbaa !399
  %21459 = getelementptr inbounds i16, i16* %21456, i64 16
  %21460 = bitcast i16* %21459 to <16 x i16>*
  %21461 = load <16 x i16>, <16 x i16>* %21460, align 2, !tbaa !399
  %21462 = add nsw i64 %21227, %.pre-phi3524
  %21463 = getelementptr inbounds i16, i16* %blur_x879, i64 %21462
  %21464 = bitcast i16* %21463 to <16 x i16>*
  %21465 = load <16 x i16>, <16 x i16>* %21464, align 2, !tbaa !399
  %21466 = getelementptr inbounds i16, i16* %21463, i64 16
  %21467 = bitcast i16* %21466 to <16 x i16>*
  %21468 = load <16 x i16>, <16 x i16>* %21467, align 2, !tbaa !399
  %21469 = add <16 x i16> %21444, %21437
  %21470 = add <16 x i16> %21469, %21451
  %21471 = add <16 x i16> %21470, %21458
  %21472 = add <16 x i16> %21471, %21465
  %21473 = add <16 x i16> %21447, %21440
  %21474 = add <16 x i16> %21473, %21454
  %21475 = add <16 x i16> %21474, %21461
  %21476 = add <16 x i16> %21475, %21468
  %21477 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21472, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21478 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21476, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21479 = shufflevector <16 x i16> %21477, <16 x i16> %21478, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21480 = lshr <32 x i16> %21479, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21481 = shufflevector <32 x i16> %21480, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21482 = add nsw i64 %21231, %.pre-phi3524
  %21483 = getelementptr inbounds i16, i16* %260, i64 %21482
  %21484 = bitcast i16* %21483 to <16 x i16>*
  store <16 x i16> %21481, <16 x i16>* %21484, align 2, !tbaa !401
  %21485 = shufflevector <32 x i16> %21480, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21486 = getelementptr inbounds i16, i16* %21483, i64 16
  %21487 = bitcast i16* %21486 to <16 x i16>*
  store <16 x i16> %21485, <16 x i16>* %21487, align 2, !tbaa !401
  %indvars.iv.next3315 = add nuw nsw i64 %indvars.iv3314, 1
  %.not2578 = icmp eq i64 %indvars.iv.next3315, %378
  br i1 %.not2578, label %"end for blur_y.s0.x.x.rebased1576", label %"for blur_y.s0.x.x.rebased1575"

"for blur_y.s0.x.x.rebased1592":                  ; preds = %"for blur_y.s0.x.x.rebased1592.preheader", %"consume blur_x1602"
  %blur_y.s0.x.x.rebased1594 = phi i32 [ %21600, %"consume blur_x1602" ], [ 0, %"for blur_y.s0.x.x.rebased1592.preheader" ]
  %21488 = add nsw i32 %blur_y.s0.x.x.rebased1594, %t1626814
  %a523 = shl nsw i32 %21488, 5
  %21489 = icmp sgt i32 %a341, %a523
  %b529 = select i1 %21489, i32 %a523, i32 %a341
  %21490 = icmp slt i32 %21488, 1
  %21491 = icmp sgt i32 %198, %a523
  %21492 = or i1 %21490, %21491
  br i1 %21492, label %"produce blur_x1599", label %"consume blur_x1602"

"end for blur_y.s0.x.x.rebased1593":              ; preds = %"consume blur_x1602", %"end for blur_y.s0.x.x.rebased1576"
  br i1 %228, label %"produce blur_x1606", label %after_bb1603

"produce blur_x1599":                             ; preds = %"for blur_y.s0.x.x.rebased1592"
  %21493 = icmp slt i32 %b529, %198
  %blur_x.s0.x.v1.base.s1600 = select i1 %21493, i32 %b529, i32 %198
  %t9251601 = add nsw i32 %blur_x.s0.x.v1.base.s1600, %t19131572
  %21494 = sext i32 %t9251601 to i64
  %21495 = getelementptr inbounds i16, i16* %read_input822, i64 %21494
  %21496 = getelementptr inbounds i16, i16* %21495, i64 1
  %21497 = bitcast i16* %21496 to <16 x i16>*
  %21498 = load <16 x i16>, <16 x i16>* %21497, align 2, !tbaa !396
  %21499 = getelementptr inbounds i16, i16* %21495, i64 17
  %21500 = bitcast i16* %21499 to <16 x i16>*
  %21501 = load <16 x i16>, <16 x i16>* %21500, align 2, !tbaa !396
  %21502 = bitcast i16* %21495 to <16 x i16>*
  %21503 = load <16 x i16>, <16 x i16>* %21502, align 2, !tbaa !396
  %21504 = getelementptr inbounds i16, i16* %21495, i64 16
  %21505 = bitcast i16* %21504 to <16 x i16>*
  %21506 = load <16 x i16>, <16 x i16>* %21505, align 2, !tbaa !396
  %21507 = getelementptr inbounds i16, i16* %21495, i64 2
  %21508 = bitcast i16* %21507 to <16 x i16>*
  %21509 = load <16 x i16>, <16 x i16>* %21508, align 2, !tbaa !396
  %21510 = getelementptr inbounds i16, i16* %21495, i64 18
  %21511 = bitcast i16* %21510 to <16 x i16>*
  %21512 = load <16 x i16>, <16 x i16>* %21511, align 2, !tbaa !396
  %21513 = getelementptr inbounds i16, i16* %21495, i64 4
  %21514 = bitcast i16* %21513 to <16 x i16>*
  %21515 = load <16 x i16>, <16 x i16>* %21514, align 2, !tbaa !396
  %21516 = getelementptr inbounds i16, i16* %21495, i64 20
  %21517 = bitcast i16* %21516 to <16 x i16>*
  %21518 = load <16 x i16>, <16 x i16>* %21517, align 2, !tbaa !396
  %21519 = getelementptr inbounds i16, i16* %21495, i64 3
  %21520 = bitcast i16* %21519 to <16 x i16>*
  %21521 = load <16 x i16>, <16 x i16>* %21520, align 2, !tbaa !396
  %21522 = getelementptr inbounds i16, i16* %21495, i64 19
  %21523 = bitcast i16* %21522 to <16 x i16>*
  %21524 = load <16 x i16>, <16 x i16>* %21523, align 2, !tbaa !396
  %21525 = add <16 x i16> %21503, %21498
  %21526 = add <16 x i16> %21525, %21509
  %21527 = add <16 x i16> %21526, %21515
  %21528 = add <16 x i16> %21527, %21521
  %21529 = add <16 x i16> %21506, %21501
  %21530 = add <16 x i16> %21529, %21512
  %21531 = add <16 x i16> %21530, %21518
  %21532 = add <16 x i16> %21531, %21524
  %21533 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21528, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21534 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21532, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21535 = shufflevector <16 x i16> %21533, <16 x i16> %21534, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21536 = lshr <32 x i16> %21535, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21537 = shufflevector <32 x i16> %21536, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21538 = sext i32 %blur_x.s0.x.v1.base.s1600 to i64
  %21539 = add nsw i64 %21538, %21363
  %21540 = getelementptr inbounds i16, i16* %blur_x879, i64 %21539
  %21541 = bitcast i16* %21540 to <16 x i16>*
  store <16 x i16> %21537, <16 x i16>* %21541, align 2, !tbaa !399
  %21542 = shufflevector <32 x i16> %21536, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21543 = getelementptr inbounds i16, i16* %21540, i64 16
  %21544 = bitcast i16* %21543 to <16 x i16>*
  store <16 x i16> %21542, <16 x i16>* %21544, align 2, !tbaa !399
  br label %"consume blur_x1602"

"consume blur_x1602":                             ; preds = %"for blur_y.s0.x.x.rebased1592", %"produce blur_x1599"
  %21545 = sext i32 %b529 to i64
  %21546 = add nsw i64 %21366, %21545
  %21547 = getelementptr inbounds i16, i16* %blur_x879, i64 %21546
  %21548 = bitcast i16* %21547 to <16 x i16>*
  %21549 = load <16 x i16>, <16 x i16>* %21548, align 2, !tbaa !399
  %21550 = getelementptr inbounds i16, i16* %21547, i64 16
  %21551 = bitcast i16* %21550 to <16 x i16>*
  %21552 = load <16 x i16>, <16 x i16>* %21551, align 2, !tbaa !399
  %21553 = add nsw i64 %21369, %21545
  %21554 = getelementptr inbounds i16, i16* %blur_x879, i64 %21553
  %21555 = bitcast i16* %21554 to <16 x i16>*
  %21556 = load <16 x i16>, <16 x i16>* %21555, align 2, !tbaa !399
  %21557 = getelementptr inbounds i16, i16* %21554, i64 16
  %21558 = bitcast i16* %21557 to <16 x i16>*
  %21559 = load <16 x i16>, <16 x i16>* %21558, align 2, !tbaa !399
  %21560 = add nsw i64 %21372, %21545
  %21561 = getelementptr inbounds i16, i16* %blur_x879, i64 %21560
  %21562 = bitcast i16* %21561 to <16 x i16>*
  %21563 = load <16 x i16>, <16 x i16>* %21562, align 2, !tbaa !399
  %21564 = getelementptr inbounds i16, i16* %21561, i64 16
  %21565 = bitcast i16* %21564 to <16 x i16>*
  %21566 = load <16 x i16>, <16 x i16>* %21565, align 2, !tbaa !399
  %21567 = add nsw i64 %21375, %21545
  %21568 = getelementptr inbounds i16, i16* %blur_x879, i64 %21567
  %21569 = bitcast i16* %21568 to <16 x i16>*
  %21570 = load <16 x i16>, <16 x i16>* %21569, align 2, !tbaa !399
  %21571 = getelementptr inbounds i16, i16* %21568, i64 16
  %21572 = bitcast i16* %21571 to <16 x i16>*
  %21573 = load <16 x i16>, <16 x i16>* %21572, align 2, !tbaa !399
  %21574 = add nsw i64 %21378, %21545
  %21575 = getelementptr inbounds i16, i16* %blur_x879, i64 %21574
  %21576 = bitcast i16* %21575 to <16 x i16>*
  %21577 = load <16 x i16>, <16 x i16>* %21576, align 2, !tbaa !399
  %21578 = getelementptr inbounds i16, i16* %21575, i64 16
  %21579 = bitcast i16* %21578 to <16 x i16>*
  %21580 = load <16 x i16>, <16 x i16>* %21579, align 2, !tbaa !399
  %21581 = add <16 x i16> %21556, %21549
  %21582 = add <16 x i16> %21581, %21563
  %21583 = add <16 x i16> %21582, %21570
  %21584 = add <16 x i16> %21583, %21577
  %21585 = add <16 x i16> %21559, %21552
  %21586 = add <16 x i16> %21585, %21566
  %21587 = add <16 x i16> %21586, %21573
  %21588 = add <16 x i16> %21587, %21580
  %21589 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21584, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21590 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21588, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21591 = shufflevector <16 x i16> %21589, <16 x i16> %21590, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21592 = lshr <32 x i16> %21591, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21593 = shufflevector <32 x i16> %21592, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21594 = add nsw i64 %21382, %21545
  %21595 = getelementptr inbounds i16, i16* %260, i64 %21594
  %21596 = bitcast i16* %21595 to <16 x i16>*
  store <16 x i16> %21593, <16 x i16>* %21596, align 2, !tbaa !401
  %21597 = shufflevector <32 x i16> %21592, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21598 = getelementptr inbounds i16, i16* %21595, i64 16
  %21599 = bitcast i16* %21598 to <16 x i16>*
  store <16 x i16> %21597, <16 x i16>* %21599, align 2, !tbaa !401
  %21600 = add nuw nsw i32 %blur_y.s0.x.x.rebased1594, 1
  %.not2577 = icmp eq i32 %21600, %t1683899
  br i1 %.not2577, label %"end for blur_y.s0.x.x.rebased1593", label %"for blur_y.s0.x.x.rebased1592"

after_bb1603:                                     ; preds = %"end for blur_y.s0.x.x.rebased1593", %"produce blur_x1606"
  br i1 %294, label %"for blur_y.s0.x.x.rebased1618.preheader", label %"end for blur_y.s0.x.x.rebased1619", !prof !386

"for blur_y.s0.x.x.rebased1618.preheader":        ; preds = %after_bb1603
  %21601 = sext i32 %t1694946 to i64
  %21602 = zext i32 %.pre-phi3502 to i64
  %21603 = mul nsw i64 %21602, %306
  %21604 = sub nsw i64 %21603, %290
  %21605 = zext i32 %.pre-phi3496 to i64
  %21606 = mul nsw i64 %21605, %306
  %21607 = sub nsw i64 %21606, %290
  %21608 = zext i32 %.pre-phi3468 to i64
  %21609 = mul nsw i64 %21608, %306
  %21610 = sub nsw i64 %21609, %290
  %21611 = zext i32 %.pre-phi3476 to i64
  %21612 = mul nsw i64 %21611, %306
  %21613 = sub nsw i64 %21612, %290
  %21614 = zext i32 %.pre-phi3472 to i64
  %21615 = mul nsw i64 %21614, %306
  %21616 = sub nsw i64 %21615, %290
  %21617 = sext i32 %a353 to i64
  %21618 = add nsw i64 %21617, 14
  %21619 = mul nsw i64 %21618, %307
  %21620 = add nsw i64 %21619, %310
  br label %"for blur_y.s0.x.x.rebased1618"

"produce blur_x1606":                             ; preds = %"end for blur_y.s0.x.x.rebased1593"
  %21621 = getelementptr inbounds i16, i16* %read_input822, i64 %337
  %21622 = getelementptr inbounds i16, i16* %21621, i64 -31
  %21623 = bitcast i16* %21622 to <16 x i16>*
  %21624 = load <16 x i16>, <16 x i16>* %21623, align 2, !tbaa !396
  %21625 = getelementptr inbounds i16, i16* %21621, i64 -15
  %21626 = bitcast i16* %21625 to <16 x i16>*
  %21627 = load <16 x i16>, <16 x i16>* %21626, align 2, !tbaa !396
  %21628 = getelementptr inbounds i16, i16* %21621, i64 -32
  %21629 = bitcast i16* %21628 to <16 x i16>*
  %21630 = load <16 x i16>, <16 x i16>* %21629, align 2, !tbaa !396
  %21631 = getelementptr inbounds i16, i16* %21621, i64 -16
  %21632 = bitcast i16* %21631 to <16 x i16>*
  %21633 = load <16 x i16>, <16 x i16>* %21632, align 2, !tbaa !396
  %21634 = getelementptr inbounds i16, i16* %21621, i64 -30
  %21635 = bitcast i16* %21634 to <16 x i16>*
  %21636 = load <16 x i16>, <16 x i16>* %21635, align 2, !tbaa !396
  %21637 = getelementptr inbounds i16, i16* %21621, i64 -14
  %21638 = bitcast i16* %21637 to <16 x i16>*
  %21639 = load <16 x i16>, <16 x i16>* %21638, align 2, !tbaa !396
  %21640 = getelementptr inbounds i16, i16* %21621, i64 -28
  %21641 = bitcast i16* %21640 to <16 x i16>*
  %21642 = load <16 x i16>, <16 x i16>* %21641, align 2, !tbaa !396
  %21643 = getelementptr inbounds i16, i16* %21621, i64 -12
  %21644 = bitcast i16* %21643 to <16 x i16>*
  %21645 = load <16 x i16>, <16 x i16>* %21644, align 2, !tbaa !396
  %21646 = getelementptr inbounds i16, i16* %21621, i64 -29
  %21647 = bitcast i16* %21646 to <16 x i16>*
  %21648 = load <16 x i16>, <16 x i16>* %21647, align 2, !tbaa !396
  %21649 = getelementptr inbounds i16, i16* %21621, i64 -13
  %21650 = bitcast i16* %21649 to <16 x i16>*
  %21651 = load <16 x i16>, <16 x i16>* %21650, align 2, !tbaa !396
  %21652 = add <16 x i16> %21630, %21624
  %21653 = add <16 x i16> %21652, %21636
  %21654 = add <16 x i16> %21653, %21642
  %21655 = add <16 x i16> %21654, %21648
  %21656 = add <16 x i16> %21633, %21627
  %21657 = add <16 x i16> %21656, %21639
  %21658 = add <16 x i16> %21657, %21645
  %21659 = add <16 x i16> %21658, %21651
  %21660 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21655, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21661 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21659, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21662 = shufflevector <16 x i16> %21660, <16 x i16> %21661, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21663 = lshr <32 x i16> %21662, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21664 = shufflevector <32 x i16> %21663, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21665 = zext i32 %.pre-phi3476 to i64
  %21666 = mul nsw i64 %291, %21665
  %21667 = add nsw i64 %293, %21666
  %21668 = getelementptr inbounds i16, i16* %blur_x879, i64 %21667
  %21669 = getelementptr inbounds i16, i16* %21668, i64 -32
  %21670 = bitcast i16* %21669 to <16 x i16>*
  store <16 x i16> %21664, <16 x i16>* %21670, align 2, !tbaa !399
  %21671 = shufflevector <32 x i16> %21663, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21672 = getelementptr inbounds i16, i16* %21668, i64 -16
  %21673 = bitcast i16* %21672 to <16 x i16>*
  store <16 x i16> %21671, <16 x i16>* %21673, align 2, !tbaa !399
  %21674 = zext i32 %.pre-phi3502 to i64
  %21675 = mul nsw i64 %21674, %306
  %21676 = add nsw i64 %21675, %288
  %21677 = getelementptr inbounds i16, i16* %blur_x879, i64 %21676
  %21678 = getelementptr inbounds i16, i16* %21677, i64 -32
  %21679 = bitcast i16* %21678 to <16 x i16>*
  %21680 = load <16 x i16>, <16 x i16>* %21679, align 2, !tbaa !399
  %21681 = getelementptr inbounds i16, i16* %21677, i64 -16
  %21682 = bitcast i16* %21681 to <16 x i16>*
  %21683 = load <16 x i16>, <16 x i16>* %21682, align 2, !tbaa !399
  %21684 = zext i32 %.pre-phi3496 to i64
  %21685 = mul nsw i64 %21684, %306
  %21686 = add nsw i64 %21685, %288
  %21687 = getelementptr inbounds i16, i16* %blur_x879, i64 %21686
  %21688 = getelementptr inbounds i16, i16* %21687, i64 -32
  %21689 = bitcast i16* %21688 to <16 x i16>*
  %21690 = load <16 x i16>, <16 x i16>* %21689, align 2, !tbaa !399
  %21691 = getelementptr inbounds i16, i16* %21687, i64 -16
  %21692 = bitcast i16* %21691 to <16 x i16>*
  %21693 = load <16 x i16>, <16 x i16>* %21692, align 2, !tbaa !399
  %21694 = zext i32 %.pre-phi3468 to i64
  %21695 = mul nsw i64 %21694, %306
  %21696 = add nsw i64 %21695, %288
  %21697 = getelementptr inbounds i16, i16* %blur_x879, i64 %21696
  %21698 = getelementptr inbounds i16, i16* %21697, i64 -32
  %21699 = bitcast i16* %21698 to <16 x i16>*
  %21700 = load <16 x i16>, <16 x i16>* %21699, align 2, !tbaa !399
  %21701 = getelementptr inbounds i16, i16* %21697, i64 -16
  %21702 = bitcast i16* %21701 to <16 x i16>*
  %21703 = load <16 x i16>, <16 x i16>* %21702, align 2, !tbaa !399
  %21704 = mul nsw i64 %21665, %306
  %21705 = add nsw i64 %21704, %288
  %21706 = getelementptr inbounds i16, i16* %blur_x879, i64 %21705
  %21707 = getelementptr inbounds i16, i16* %21706, i64 -32
  %21708 = bitcast i16* %21707 to <16 x i16>*
  %21709 = load <16 x i16>, <16 x i16>* %21708, align 2, !tbaa !399
  %21710 = getelementptr inbounds i16, i16* %21706, i64 -16
  %21711 = bitcast i16* %21710 to <16 x i16>*
  %21712 = load <16 x i16>, <16 x i16>* %21711, align 2, !tbaa !399
  %21713 = zext i32 %.pre-phi3472 to i64
  %21714 = mul nsw i64 %21713, %306
  %21715 = add nsw i64 %21714, %288
  %21716 = getelementptr inbounds i16, i16* %blur_x879, i64 %21715
  %21717 = getelementptr inbounds i16, i16* %21716, i64 -32
  %21718 = bitcast i16* %21717 to <16 x i16>*
  %21719 = load <16 x i16>, <16 x i16>* %21718, align 2, !tbaa !399
  %21720 = getelementptr inbounds i16, i16* %21716, i64 -16
  %21721 = bitcast i16* %21720 to <16 x i16>*
  %21722 = load <16 x i16>, <16 x i16>* %21721, align 2, !tbaa !399
  %21723 = add <16 x i16> %21690, %21680
  %21724 = add <16 x i16> %21723, %21700
  %21725 = add <16 x i16> %21724, %21709
  %21726 = add <16 x i16> %21725, %21719
  %21727 = add <16 x i16> %21693, %21683
  %21728 = add <16 x i16> %21727, %21703
  %21729 = add <16 x i16> %21728, %21712
  %21730 = add <16 x i16> %21729, %21722
  %21731 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21726, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21732 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21730, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21733 = shufflevector <16 x i16> %21731, <16 x i16> %21732, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21734 = lshr <32 x i16> %21733, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21735 = shufflevector <32 x i16> %21734, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21736 = sext i32 %a353 to i64
  %21737 = add nsw i64 %21736, 14
  %21738 = mul nsw i64 %21737, %307
  %21739 = add nsw i64 %309, %21738
  %21740 = getelementptr inbounds i16, i16* %260, i64 %21739
  %21741 = getelementptr inbounds i16, i16* %21740, i64 -32
  %21742 = bitcast i16* %21741 to <16 x i16>*
  store <16 x i16> %21735, <16 x i16>* %21742, align 2, !tbaa !401
  %21743 = shufflevector <32 x i16> %21734, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21744 = getelementptr inbounds i16, i16* %21740, i64 -16
  %21745 = bitcast i16* %21744 to <16 x i16>*
  store <16 x i16> %21743, <16 x i16>* %21745, align 2, !tbaa !401
  br label %after_bb1603

"for blur_y.s0.x.x.rebased1618":                  ; preds = %"for blur_y.s0.x.x.rebased1618.preheader", %"consume blur_x1627"
  %indvars.iv3317 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1618.preheader" ], [ %indvars.iv.next3318, %"consume blur_x1627" ]
  %21746 = add nsw i64 %indvars.iv3317, %295
  %21747 = icmp slt i64 %21746, 1
  %21748 = trunc i64 %21746 to i32
  %21749 = shl nsw i32 %21748, 5
  %21750 = icmp sgt i32 %198, %21749
  %21751 = or i1 %21747, %21750
  br i1 %21751, label %"produce blur_x1625", label %"for blur_y.s0.x.x.rebased1618.consume blur_x1627_crit_edge"

"for blur_y.s0.x.x.rebased1618.consume blur_x1627_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1618"
  %.pre3525 = shl nsw i64 %21746, 5
  br label %"consume blur_x1627"

"end for blur_y.s0.x.x.rebased1619":              ; preds = %"consume blur_x1627", %after_bb1603
  br i1 %296, label %"for blur_y.s0.x.x.rebased1635.preheader", label %"end for blur_y.s0.x.x.rebased1636", !prof !386

"for blur_y.s0.x.x.rebased1635.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1619"
  %21752 = sext i32 %t1694946 to i64
  %21753 = zext i32 %.pre-phi3502 to i64
  %21754 = mul nsw i64 %21753, %306
  %21755 = sub nsw i64 %21754, %290
  %21756 = zext i32 %.pre-phi3496 to i64
  %21757 = mul nsw i64 %21756, %306
  %21758 = sub nsw i64 %21757, %290
  %21759 = zext i32 %.pre-phi3468 to i64
  %21760 = mul nsw i64 %21759, %306
  %21761 = sub nsw i64 %21760, %290
  %21762 = zext i32 %.pre-phi3476 to i64
  %21763 = mul nsw i64 %21762, %306
  %21764 = sub nsw i64 %21763, %290
  %21765 = zext i32 %.pre-phi3472 to i64
  %21766 = mul nsw i64 %21765, %306
  %21767 = sub nsw i64 %21766, %290
  %21768 = sext i32 %a353 to i64
  %21769 = add nsw i64 %21768, 14
  %21770 = mul nsw i64 %21769, %307
  %21771 = add nsw i64 %21770, %310
  br label %"for blur_y.s0.x.x.rebased1635"

"produce blur_x1625":                             ; preds = %"for blur_y.s0.x.x.rebased1618"
  %t9361626 = add nsw i32 %21749, %t19291615
  %21772 = sext i32 %t9361626 to i64
  %21773 = getelementptr inbounds i16, i16* %read_input822, i64 %21772
  %21774 = getelementptr inbounds i16, i16* %21773, i64 1
  %21775 = bitcast i16* %21774 to <16 x i16>*
  %21776 = load <16 x i16>, <16 x i16>* %21775, align 2, !tbaa !396
  %21777 = getelementptr inbounds i16, i16* %21773, i64 17
  %21778 = bitcast i16* %21777 to <16 x i16>*
  %21779 = load <16 x i16>, <16 x i16>* %21778, align 2, !tbaa !396
  %21780 = bitcast i16* %21773 to <16 x i16>*
  %21781 = load <16 x i16>, <16 x i16>* %21780, align 2, !tbaa !396
  %21782 = getelementptr inbounds i16, i16* %21773, i64 16
  %21783 = bitcast i16* %21782 to <16 x i16>*
  %21784 = load <16 x i16>, <16 x i16>* %21783, align 2, !tbaa !396
  %21785 = getelementptr inbounds i16, i16* %21773, i64 2
  %21786 = bitcast i16* %21785 to <16 x i16>*
  %21787 = load <16 x i16>, <16 x i16>* %21786, align 2, !tbaa !396
  %21788 = getelementptr inbounds i16, i16* %21773, i64 18
  %21789 = bitcast i16* %21788 to <16 x i16>*
  %21790 = load <16 x i16>, <16 x i16>* %21789, align 2, !tbaa !396
  %21791 = getelementptr inbounds i16, i16* %21773, i64 4
  %21792 = bitcast i16* %21791 to <16 x i16>*
  %21793 = load <16 x i16>, <16 x i16>* %21792, align 2, !tbaa !396
  %21794 = getelementptr inbounds i16, i16* %21773, i64 20
  %21795 = bitcast i16* %21794 to <16 x i16>*
  %21796 = load <16 x i16>, <16 x i16>* %21795, align 2, !tbaa !396
  %21797 = getelementptr inbounds i16, i16* %21773, i64 3
  %21798 = bitcast i16* %21797 to <16 x i16>*
  %21799 = load <16 x i16>, <16 x i16>* %21798, align 2, !tbaa !396
  %21800 = getelementptr inbounds i16, i16* %21773, i64 19
  %21801 = bitcast i16* %21800 to <16 x i16>*
  %21802 = load <16 x i16>, <16 x i16>* %21801, align 2, !tbaa !396
  %21803 = add <16 x i16> %21781, %21776
  %21804 = add <16 x i16> %21803, %21787
  %21805 = add <16 x i16> %21804, %21793
  %21806 = add <16 x i16> %21805, %21799
  %21807 = add <16 x i16> %21784, %21779
  %21808 = add <16 x i16> %21807, %21790
  %21809 = add <16 x i16> %21808, %21796
  %21810 = add <16 x i16> %21809, %21802
  %21811 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21806, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21812 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21810, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21813 = shufflevector <16 x i16> %21811, <16 x i16> %21812, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21814 = lshr <32 x i16> %21813, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21815 = shufflevector <32 x i16> %21814, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21816 = shl nsw i64 %21746, 5
  %21817 = add nsw i64 %21816, %21601
  %21818 = getelementptr inbounds i16, i16* %blur_x879, i64 %21817
  %21819 = bitcast i16* %21818 to <16 x i16>*
  store <16 x i16> %21815, <16 x i16>* %21819, align 2, !tbaa !399
  %21820 = shufflevector <32 x i16> %21814, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21821 = getelementptr inbounds i16, i16* %21818, i64 16
  %21822 = bitcast i16* %21821 to <16 x i16>*
  store <16 x i16> %21820, <16 x i16>* %21822, align 2, !tbaa !399
  br label %"consume blur_x1627"

"consume blur_x1627":                             ; preds = %"for blur_y.s0.x.x.rebased1618.consume blur_x1627_crit_edge", %"produce blur_x1625"
  %.pre-phi3526 = phi i64 [ %.pre3525, %"for blur_y.s0.x.x.rebased1618.consume blur_x1627_crit_edge" ], [ %21816, %"produce blur_x1625" ]
  %21823 = add nsw i64 %21604, %.pre-phi3526
  %21824 = getelementptr inbounds i16, i16* %blur_x879, i64 %21823
  %21825 = bitcast i16* %21824 to <16 x i16>*
  %21826 = load <16 x i16>, <16 x i16>* %21825, align 2, !tbaa !399
  %21827 = getelementptr inbounds i16, i16* %21824, i64 16
  %21828 = bitcast i16* %21827 to <16 x i16>*
  %21829 = load <16 x i16>, <16 x i16>* %21828, align 2, !tbaa !399
  %21830 = add nsw i64 %21607, %.pre-phi3526
  %21831 = getelementptr inbounds i16, i16* %blur_x879, i64 %21830
  %21832 = bitcast i16* %21831 to <16 x i16>*
  %21833 = load <16 x i16>, <16 x i16>* %21832, align 2, !tbaa !399
  %21834 = getelementptr inbounds i16, i16* %21831, i64 16
  %21835 = bitcast i16* %21834 to <16 x i16>*
  %21836 = load <16 x i16>, <16 x i16>* %21835, align 2, !tbaa !399
  %21837 = add nsw i64 %21610, %.pre-phi3526
  %21838 = getelementptr inbounds i16, i16* %blur_x879, i64 %21837
  %21839 = bitcast i16* %21838 to <16 x i16>*
  %21840 = load <16 x i16>, <16 x i16>* %21839, align 2, !tbaa !399
  %21841 = getelementptr inbounds i16, i16* %21838, i64 16
  %21842 = bitcast i16* %21841 to <16 x i16>*
  %21843 = load <16 x i16>, <16 x i16>* %21842, align 2, !tbaa !399
  %21844 = add nsw i64 %21613, %.pre-phi3526
  %21845 = getelementptr inbounds i16, i16* %blur_x879, i64 %21844
  %21846 = bitcast i16* %21845 to <16 x i16>*
  %21847 = load <16 x i16>, <16 x i16>* %21846, align 2, !tbaa !399
  %21848 = getelementptr inbounds i16, i16* %21845, i64 16
  %21849 = bitcast i16* %21848 to <16 x i16>*
  %21850 = load <16 x i16>, <16 x i16>* %21849, align 2, !tbaa !399
  %21851 = add nsw i64 %21616, %.pre-phi3526
  %21852 = getelementptr inbounds i16, i16* %blur_x879, i64 %21851
  %21853 = bitcast i16* %21852 to <16 x i16>*
  %21854 = load <16 x i16>, <16 x i16>* %21853, align 2, !tbaa !399
  %21855 = getelementptr inbounds i16, i16* %21852, i64 16
  %21856 = bitcast i16* %21855 to <16 x i16>*
  %21857 = load <16 x i16>, <16 x i16>* %21856, align 2, !tbaa !399
  %21858 = add <16 x i16> %21833, %21826
  %21859 = add <16 x i16> %21858, %21840
  %21860 = add <16 x i16> %21859, %21847
  %21861 = add <16 x i16> %21860, %21854
  %21862 = add <16 x i16> %21836, %21829
  %21863 = add <16 x i16> %21862, %21843
  %21864 = add <16 x i16> %21863, %21850
  %21865 = add <16 x i16> %21864, %21857
  %21866 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21861, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21867 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21865, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21868 = shufflevector <16 x i16> %21866, <16 x i16> %21867, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21869 = lshr <32 x i16> %21868, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21870 = shufflevector <32 x i16> %21869, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21871 = add nsw i64 %21620, %.pre-phi3526
  %21872 = getelementptr inbounds i16, i16* %260, i64 %21871
  %21873 = bitcast i16* %21872 to <16 x i16>*
  store <16 x i16> %21870, <16 x i16>* %21873, align 2, !tbaa !401
  %21874 = shufflevector <32 x i16> %21869, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21875 = getelementptr inbounds i16, i16* %21872, i64 16
  %21876 = bitcast i16* %21875 to <16 x i16>*
  store <16 x i16> %21874, <16 x i16>* %21876, align 2, !tbaa !401
  %indvars.iv.next3318 = add nuw nsw i64 %indvars.iv3317, 1
  %.not2576 = icmp eq i64 %indvars.iv.next3318, %378
  br i1 %.not2576, label %"end for blur_y.s0.x.x.rebased1619", label %"for blur_y.s0.x.x.rebased1618"

"for blur_y.s0.x.x.rebased1635":                  ; preds = %"for blur_y.s0.x.x.rebased1635.preheader", %"consume blur_x1645"
  %blur_y.s0.x.x.rebased1637 = phi i32 [ %21989, %"consume blur_x1645" ], [ 0, %"for blur_y.s0.x.x.rebased1635.preheader" ]
  %21877 = add nsw i32 %blur_y.s0.x.x.rebased1637, %t1626814
  %a530 = shl nsw i32 %21877, 5
  %21878 = icmp sgt i32 %a341, %a530
  %b536 = select i1 %21878, i32 %a530, i32 %a341
  %21879 = icmp slt i32 %21877, 1
  %21880 = icmp sgt i32 %198, %a530
  %21881 = or i1 %21879, %21880
  br i1 %21881, label %"produce blur_x1642", label %"consume blur_x1645"

"end for blur_y.s0.x.x.rebased1636":              ; preds = %"consume blur_x1645", %"end for blur_y.s0.x.x.rebased1619"
  br i1 %228, label %"produce blur_x1649", label %after_bb1646

"produce blur_x1642":                             ; preds = %"for blur_y.s0.x.x.rebased1635"
  %21882 = icmp slt i32 %b536, %198
  %blur_x.s0.x.v1.base.s1643 = select i1 %21882, i32 %b536, i32 %198
  %t9411644 = add nsw i32 %blur_x.s0.x.v1.base.s1643, %t19291615
  %21883 = sext i32 %t9411644 to i64
  %21884 = getelementptr inbounds i16, i16* %read_input822, i64 %21883
  %21885 = getelementptr inbounds i16, i16* %21884, i64 1
  %21886 = bitcast i16* %21885 to <16 x i16>*
  %21887 = load <16 x i16>, <16 x i16>* %21886, align 2, !tbaa !396
  %21888 = getelementptr inbounds i16, i16* %21884, i64 17
  %21889 = bitcast i16* %21888 to <16 x i16>*
  %21890 = load <16 x i16>, <16 x i16>* %21889, align 2, !tbaa !396
  %21891 = bitcast i16* %21884 to <16 x i16>*
  %21892 = load <16 x i16>, <16 x i16>* %21891, align 2, !tbaa !396
  %21893 = getelementptr inbounds i16, i16* %21884, i64 16
  %21894 = bitcast i16* %21893 to <16 x i16>*
  %21895 = load <16 x i16>, <16 x i16>* %21894, align 2, !tbaa !396
  %21896 = getelementptr inbounds i16, i16* %21884, i64 2
  %21897 = bitcast i16* %21896 to <16 x i16>*
  %21898 = load <16 x i16>, <16 x i16>* %21897, align 2, !tbaa !396
  %21899 = getelementptr inbounds i16, i16* %21884, i64 18
  %21900 = bitcast i16* %21899 to <16 x i16>*
  %21901 = load <16 x i16>, <16 x i16>* %21900, align 2, !tbaa !396
  %21902 = getelementptr inbounds i16, i16* %21884, i64 4
  %21903 = bitcast i16* %21902 to <16 x i16>*
  %21904 = load <16 x i16>, <16 x i16>* %21903, align 2, !tbaa !396
  %21905 = getelementptr inbounds i16, i16* %21884, i64 20
  %21906 = bitcast i16* %21905 to <16 x i16>*
  %21907 = load <16 x i16>, <16 x i16>* %21906, align 2, !tbaa !396
  %21908 = getelementptr inbounds i16, i16* %21884, i64 3
  %21909 = bitcast i16* %21908 to <16 x i16>*
  %21910 = load <16 x i16>, <16 x i16>* %21909, align 2, !tbaa !396
  %21911 = getelementptr inbounds i16, i16* %21884, i64 19
  %21912 = bitcast i16* %21911 to <16 x i16>*
  %21913 = load <16 x i16>, <16 x i16>* %21912, align 2, !tbaa !396
  %21914 = add <16 x i16> %21892, %21887
  %21915 = add <16 x i16> %21914, %21898
  %21916 = add <16 x i16> %21915, %21904
  %21917 = add <16 x i16> %21916, %21910
  %21918 = add <16 x i16> %21895, %21890
  %21919 = add <16 x i16> %21918, %21901
  %21920 = add <16 x i16> %21919, %21907
  %21921 = add <16 x i16> %21920, %21913
  %21922 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21917, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21923 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21921, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21924 = shufflevector <16 x i16> %21922, <16 x i16> %21923, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21925 = lshr <32 x i16> %21924, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21926 = shufflevector <32 x i16> %21925, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21927 = sext i32 %blur_x.s0.x.v1.base.s1643 to i64
  %21928 = add nsw i64 %21927, %21752
  %21929 = getelementptr inbounds i16, i16* %blur_x879, i64 %21928
  %21930 = bitcast i16* %21929 to <16 x i16>*
  store <16 x i16> %21926, <16 x i16>* %21930, align 2, !tbaa !399
  %21931 = shufflevector <32 x i16> %21925, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21932 = getelementptr inbounds i16, i16* %21929, i64 16
  %21933 = bitcast i16* %21932 to <16 x i16>*
  store <16 x i16> %21931, <16 x i16>* %21933, align 2, !tbaa !399
  br label %"consume blur_x1645"

"consume blur_x1645":                             ; preds = %"for blur_y.s0.x.x.rebased1635", %"produce blur_x1642"
  %21934 = sext i32 %b536 to i64
  %21935 = add nsw i64 %21755, %21934
  %21936 = getelementptr inbounds i16, i16* %blur_x879, i64 %21935
  %21937 = bitcast i16* %21936 to <16 x i16>*
  %21938 = load <16 x i16>, <16 x i16>* %21937, align 2, !tbaa !399
  %21939 = getelementptr inbounds i16, i16* %21936, i64 16
  %21940 = bitcast i16* %21939 to <16 x i16>*
  %21941 = load <16 x i16>, <16 x i16>* %21940, align 2, !tbaa !399
  %21942 = add nsw i64 %21758, %21934
  %21943 = getelementptr inbounds i16, i16* %blur_x879, i64 %21942
  %21944 = bitcast i16* %21943 to <16 x i16>*
  %21945 = load <16 x i16>, <16 x i16>* %21944, align 2, !tbaa !399
  %21946 = getelementptr inbounds i16, i16* %21943, i64 16
  %21947 = bitcast i16* %21946 to <16 x i16>*
  %21948 = load <16 x i16>, <16 x i16>* %21947, align 2, !tbaa !399
  %21949 = add nsw i64 %21761, %21934
  %21950 = getelementptr inbounds i16, i16* %blur_x879, i64 %21949
  %21951 = bitcast i16* %21950 to <16 x i16>*
  %21952 = load <16 x i16>, <16 x i16>* %21951, align 2, !tbaa !399
  %21953 = getelementptr inbounds i16, i16* %21950, i64 16
  %21954 = bitcast i16* %21953 to <16 x i16>*
  %21955 = load <16 x i16>, <16 x i16>* %21954, align 2, !tbaa !399
  %21956 = add nsw i64 %21764, %21934
  %21957 = getelementptr inbounds i16, i16* %blur_x879, i64 %21956
  %21958 = bitcast i16* %21957 to <16 x i16>*
  %21959 = load <16 x i16>, <16 x i16>* %21958, align 2, !tbaa !399
  %21960 = getelementptr inbounds i16, i16* %21957, i64 16
  %21961 = bitcast i16* %21960 to <16 x i16>*
  %21962 = load <16 x i16>, <16 x i16>* %21961, align 2, !tbaa !399
  %21963 = add nsw i64 %21767, %21934
  %21964 = getelementptr inbounds i16, i16* %blur_x879, i64 %21963
  %21965 = bitcast i16* %21964 to <16 x i16>*
  %21966 = load <16 x i16>, <16 x i16>* %21965, align 2, !tbaa !399
  %21967 = getelementptr inbounds i16, i16* %21964, i64 16
  %21968 = bitcast i16* %21967 to <16 x i16>*
  %21969 = load <16 x i16>, <16 x i16>* %21968, align 2, !tbaa !399
  %21970 = add <16 x i16> %21945, %21938
  %21971 = add <16 x i16> %21970, %21952
  %21972 = add <16 x i16> %21971, %21959
  %21973 = add <16 x i16> %21972, %21966
  %21974 = add <16 x i16> %21948, %21941
  %21975 = add <16 x i16> %21974, %21955
  %21976 = add <16 x i16> %21975, %21962
  %21977 = add <16 x i16> %21976, %21969
  %21978 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21973, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21979 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %21977, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %21980 = shufflevector <16 x i16> %21978, <16 x i16> %21979, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21981 = lshr <32 x i16> %21980, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %21982 = shufflevector <32 x i16> %21981, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %21983 = add nsw i64 %21771, %21934
  %21984 = getelementptr inbounds i16, i16* %260, i64 %21983
  %21985 = bitcast i16* %21984 to <16 x i16>*
  store <16 x i16> %21982, <16 x i16>* %21985, align 2, !tbaa !401
  %21986 = shufflevector <32 x i16> %21981, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %21987 = getelementptr inbounds i16, i16* %21984, i64 16
  %21988 = bitcast i16* %21987 to <16 x i16>*
  store <16 x i16> %21986, <16 x i16>* %21988, align 2, !tbaa !401
  %21989 = add nuw nsw i32 %blur_y.s0.x.x.rebased1637, 1
  %.not2575 = icmp eq i32 %21989, %t1683899
  br i1 %.not2575, label %"end for blur_y.s0.x.x.rebased1636", label %"for blur_y.s0.x.x.rebased1635"

after_bb1646:                                     ; preds = %"end for blur_y.s0.x.x.rebased1636", %"produce blur_x1649"
  br i1 %294, label %"for blur_y.s0.x.x.rebased1661.preheader", label %"end for blur_y.s0.x.x.rebased1662", !prof !386

"for blur_y.s0.x.x.rebased1661.preheader":        ; preds = %after_bb1646
  %21990 = sext i32 %t1700976 to i64
  %21991 = zext i32 %.pre-phi3468 to i64
  %21992 = mul nsw i64 %21991, %306
  %21993 = sub nsw i64 %21992, %290
  %21994 = zext i32 %.pre-phi3502 to i64
  %21995 = mul nsw i64 %21994, %306
  %21996 = sub nsw i64 %21995, %290
  %21997 = zext i32 %.pre-phi3472 to i64
  %21998 = mul nsw i64 %21997, %306
  %21999 = sub nsw i64 %21998, %290
  %22000 = zext i32 %.pre-phi3480 to i64
  %22001 = mul nsw i64 %22000, %306
  %22002 = sub nsw i64 %22001, %290
  %22003 = zext i32 %.pre-phi3476 to i64
  %22004 = mul nsw i64 %22003, %306
  %22005 = sub nsw i64 %22004, %290
  %22006 = sext i32 %a353 to i64
  %22007 = add nsw i64 %22006, 15
  %22008 = mul nsw i64 %22007, %307
  %22009 = add nsw i64 %22008, %310
  br label %"for blur_y.s0.x.x.rebased1661"

"produce blur_x1649":                             ; preds = %"end for blur_y.s0.x.x.rebased1636"
  %22010 = getelementptr inbounds i16, i16* %read_input822, i64 %339
  %22011 = getelementptr inbounds i16, i16* %22010, i64 -31
  %22012 = bitcast i16* %22011 to <16 x i16>*
  %22013 = load <16 x i16>, <16 x i16>* %22012, align 2, !tbaa !396
  %22014 = getelementptr inbounds i16, i16* %22010, i64 -15
  %22015 = bitcast i16* %22014 to <16 x i16>*
  %22016 = load <16 x i16>, <16 x i16>* %22015, align 2, !tbaa !396
  %22017 = getelementptr inbounds i16, i16* %22010, i64 -32
  %22018 = bitcast i16* %22017 to <16 x i16>*
  %22019 = load <16 x i16>, <16 x i16>* %22018, align 2, !tbaa !396
  %22020 = getelementptr inbounds i16, i16* %22010, i64 -16
  %22021 = bitcast i16* %22020 to <16 x i16>*
  %22022 = load <16 x i16>, <16 x i16>* %22021, align 2, !tbaa !396
  %22023 = getelementptr inbounds i16, i16* %22010, i64 -30
  %22024 = bitcast i16* %22023 to <16 x i16>*
  %22025 = load <16 x i16>, <16 x i16>* %22024, align 2, !tbaa !396
  %22026 = getelementptr inbounds i16, i16* %22010, i64 -14
  %22027 = bitcast i16* %22026 to <16 x i16>*
  %22028 = load <16 x i16>, <16 x i16>* %22027, align 2, !tbaa !396
  %22029 = getelementptr inbounds i16, i16* %22010, i64 -28
  %22030 = bitcast i16* %22029 to <16 x i16>*
  %22031 = load <16 x i16>, <16 x i16>* %22030, align 2, !tbaa !396
  %22032 = getelementptr inbounds i16, i16* %22010, i64 -12
  %22033 = bitcast i16* %22032 to <16 x i16>*
  %22034 = load <16 x i16>, <16 x i16>* %22033, align 2, !tbaa !396
  %22035 = getelementptr inbounds i16, i16* %22010, i64 -29
  %22036 = bitcast i16* %22035 to <16 x i16>*
  %22037 = load <16 x i16>, <16 x i16>* %22036, align 2, !tbaa !396
  %22038 = getelementptr inbounds i16, i16* %22010, i64 -13
  %22039 = bitcast i16* %22038 to <16 x i16>*
  %22040 = load <16 x i16>, <16 x i16>* %22039, align 2, !tbaa !396
  %22041 = add <16 x i16> %22019, %22013
  %22042 = add <16 x i16> %22041, %22025
  %22043 = add <16 x i16> %22042, %22031
  %22044 = add <16 x i16> %22043, %22037
  %22045 = add <16 x i16> %22022, %22016
  %22046 = add <16 x i16> %22045, %22028
  %22047 = add <16 x i16> %22046, %22034
  %22048 = add <16 x i16> %22047, %22040
  %22049 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22044, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22050 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22048, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22051 = shufflevector <16 x i16> %22049, <16 x i16> %22050, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22052 = lshr <32 x i16> %22051, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22053 = shufflevector <32 x i16> %22052, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22054 = zext i32 %.pre-phi3480 to i64
  %22055 = mul nsw i64 %291, %22054
  %22056 = add nsw i64 %293, %22055
  %22057 = getelementptr inbounds i16, i16* %blur_x879, i64 %22056
  %22058 = getelementptr inbounds i16, i16* %22057, i64 -32
  %22059 = bitcast i16* %22058 to <16 x i16>*
  store <16 x i16> %22053, <16 x i16>* %22059, align 2, !tbaa !399
  %22060 = shufflevector <32 x i16> %22052, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22061 = getelementptr inbounds i16, i16* %22057, i64 -16
  %22062 = bitcast i16* %22061 to <16 x i16>*
  store <16 x i16> %22060, <16 x i16>* %22062, align 2, !tbaa !399
  %22063 = zext i32 %.pre-phi3468 to i64
  %22064 = mul nsw i64 %22063, %306
  %22065 = add nsw i64 %22064, %288
  %22066 = getelementptr inbounds i16, i16* %blur_x879, i64 %22065
  %22067 = getelementptr inbounds i16, i16* %22066, i64 -32
  %22068 = bitcast i16* %22067 to <16 x i16>*
  %22069 = load <16 x i16>, <16 x i16>* %22068, align 2, !tbaa !399
  %22070 = getelementptr inbounds i16, i16* %22066, i64 -16
  %22071 = bitcast i16* %22070 to <16 x i16>*
  %22072 = load <16 x i16>, <16 x i16>* %22071, align 2, !tbaa !399
  %22073 = zext i32 %.pre-phi3502 to i64
  %22074 = mul nsw i64 %22073, %306
  %22075 = add nsw i64 %22074, %288
  %22076 = getelementptr inbounds i16, i16* %blur_x879, i64 %22075
  %22077 = getelementptr inbounds i16, i16* %22076, i64 -32
  %22078 = bitcast i16* %22077 to <16 x i16>*
  %22079 = load <16 x i16>, <16 x i16>* %22078, align 2, !tbaa !399
  %22080 = getelementptr inbounds i16, i16* %22076, i64 -16
  %22081 = bitcast i16* %22080 to <16 x i16>*
  %22082 = load <16 x i16>, <16 x i16>* %22081, align 2, !tbaa !399
  %22083 = zext i32 %.pre-phi3472 to i64
  %22084 = mul nsw i64 %22083, %306
  %22085 = add nsw i64 %22084, %288
  %22086 = getelementptr inbounds i16, i16* %blur_x879, i64 %22085
  %22087 = getelementptr inbounds i16, i16* %22086, i64 -32
  %22088 = bitcast i16* %22087 to <16 x i16>*
  %22089 = load <16 x i16>, <16 x i16>* %22088, align 2, !tbaa !399
  %22090 = getelementptr inbounds i16, i16* %22086, i64 -16
  %22091 = bitcast i16* %22090 to <16 x i16>*
  %22092 = load <16 x i16>, <16 x i16>* %22091, align 2, !tbaa !399
  %22093 = mul nsw i64 %22054, %306
  %22094 = add nsw i64 %22093, %288
  %22095 = getelementptr inbounds i16, i16* %blur_x879, i64 %22094
  %22096 = getelementptr inbounds i16, i16* %22095, i64 -32
  %22097 = bitcast i16* %22096 to <16 x i16>*
  %22098 = load <16 x i16>, <16 x i16>* %22097, align 2, !tbaa !399
  %22099 = getelementptr inbounds i16, i16* %22095, i64 -16
  %22100 = bitcast i16* %22099 to <16 x i16>*
  %22101 = load <16 x i16>, <16 x i16>* %22100, align 2, !tbaa !399
  %22102 = zext i32 %.pre-phi3476 to i64
  %22103 = mul nsw i64 %22102, %306
  %22104 = add nsw i64 %22103, %288
  %22105 = getelementptr inbounds i16, i16* %blur_x879, i64 %22104
  %22106 = getelementptr inbounds i16, i16* %22105, i64 -32
  %22107 = bitcast i16* %22106 to <16 x i16>*
  %22108 = load <16 x i16>, <16 x i16>* %22107, align 2, !tbaa !399
  %22109 = getelementptr inbounds i16, i16* %22105, i64 -16
  %22110 = bitcast i16* %22109 to <16 x i16>*
  %22111 = load <16 x i16>, <16 x i16>* %22110, align 2, !tbaa !399
  %22112 = add <16 x i16> %22079, %22069
  %22113 = add <16 x i16> %22112, %22089
  %22114 = add <16 x i16> %22113, %22098
  %22115 = add <16 x i16> %22114, %22108
  %22116 = add <16 x i16> %22082, %22072
  %22117 = add <16 x i16> %22116, %22092
  %22118 = add <16 x i16> %22117, %22101
  %22119 = add <16 x i16> %22118, %22111
  %22120 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22115, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22121 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22119, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22122 = shufflevector <16 x i16> %22120, <16 x i16> %22121, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22123 = lshr <32 x i16> %22122, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22124 = shufflevector <32 x i16> %22123, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22125 = sext i32 %a353 to i64
  %22126 = add nsw i64 %22125, 15
  %22127 = mul nsw i64 %22126, %307
  %22128 = add nsw i64 %309, %22127
  %22129 = getelementptr inbounds i16, i16* %260, i64 %22128
  %22130 = getelementptr inbounds i16, i16* %22129, i64 -32
  %22131 = bitcast i16* %22130 to <16 x i16>*
  store <16 x i16> %22124, <16 x i16>* %22131, align 2, !tbaa !401
  %22132 = shufflevector <32 x i16> %22123, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22133 = getelementptr inbounds i16, i16* %22129, i64 -16
  %22134 = bitcast i16* %22133 to <16 x i16>*
  store <16 x i16> %22132, <16 x i16>* %22134, align 2, !tbaa !401
  br label %after_bb1646

"for blur_y.s0.x.x.rebased1661":                  ; preds = %"for blur_y.s0.x.x.rebased1661.preheader", %"consume blur_x1670"
  %indvars.iv3320 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1661.preheader" ], [ %indvars.iv.next3321, %"consume blur_x1670" ]
  %22135 = add nsw i64 %indvars.iv3320, %295
  %22136 = icmp slt i64 %22135, 1
  %22137 = trunc i64 %22135 to i32
  %22138 = shl nsw i32 %22137, 5
  %22139 = icmp sgt i32 %198, %22138
  %22140 = or i1 %22136, %22139
  br i1 %22140, label %"produce blur_x1668", label %"for blur_y.s0.x.x.rebased1661.consume blur_x1670_crit_edge"

"for blur_y.s0.x.x.rebased1661.consume blur_x1670_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1661"
  %.pre3527 = shl nsw i64 %22135, 5
  br label %"consume blur_x1670"

"end for blur_y.s0.x.x.rebased1662":              ; preds = %"consume blur_x1670", %after_bb1646
  br i1 %296, label %"for blur_y.s0.x.x.rebased1678.preheader", label %"end for blur_y.s0.x.x.rebased1679", !prof !386

"for blur_y.s0.x.x.rebased1678.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1662"
  %22141 = sext i32 %t1700976 to i64
  %22142 = zext i32 %.pre-phi3468 to i64
  %22143 = mul nsw i64 %22142, %306
  %22144 = sub nsw i64 %22143, %290
  %22145 = zext i32 %.pre-phi3502 to i64
  %22146 = mul nsw i64 %22145, %306
  %22147 = sub nsw i64 %22146, %290
  %22148 = zext i32 %.pre-phi3472 to i64
  %22149 = mul nsw i64 %22148, %306
  %22150 = sub nsw i64 %22149, %290
  %22151 = zext i32 %.pre-phi3480 to i64
  %22152 = mul nsw i64 %22151, %306
  %22153 = sub nsw i64 %22152, %290
  %22154 = zext i32 %.pre-phi3476 to i64
  %22155 = mul nsw i64 %22154, %306
  %22156 = sub nsw i64 %22155, %290
  %22157 = sext i32 %a353 to i64
  %22158 = add nsw i64 %22157, 15
  %22159 = mul nsw i64 %22158, %307
  %22160 = add nsw i64 %22159, %310
  br label %"for blur_y.s0.x.x.rebased1678"

"produce blur_x1668":                             ; preds = %"for blur_y.s0.x.x.rebased1661"
  %t9521669 = add nsw i32 %22138, %t19451658
  %22161 = sext i32 %t9521669 to i64
  %22162 = getelementptr inbounds i16, i16* %read_input822, i64 %22161
  %22163 = getelementptr inbounds i16, i16* %22162, i64 1
  %22164 = bitcast i16* %22163 to <16 x i16>*
  %22165 = load <16 x i16>, <16 x i16>* %22164, align 2, !tbaa !396
  %22166 = getelementptr inbounds i16, i16* %22162, i64 17
  %22167 = bitcast i16* %22166 to <16 x i16>*
  %22168 = load <16 x i16>, <16 x i16>* %22167, align 2, !tbaa !396
  %22169 = bitcast i16* %22162 to <16 x i16>*
  %22170 = load <16 x i16>, <16 x i16>* %22169, align 2, !tbaa !396
  %22171 = getelementptr inbounds i16, i16* %22162, i64 16
  %22172 = bitcast i16* %22171 to <16 x i16>*
  %22173 = load <16 x i16>, <16 x i16>* %22172, align 2, !tbaa !396
  %22174 = getelementptr inbounds i16, i16* %22162, i64 2
  %22175 = bitcast i16* %22174 to <16 x i16>*
  %22176 = load <16 x i16>, <16 x i16>* %22175, align 2, !tbaa !396
  %22177 = getelementptr inbounds i16, i16* %22162, i64 18
  %22178 = bitcast i16* %22177 to <16 x i16>*
  %22179 = load <16 x i16>, <16 x i16>* %22178, align 2, !tbaa !396
  %22180 = getelementptr inbounds i16, i16* %22162, i64 4
  %22181 = bitcast i16* %22180 to <16 x i16>*
  %22182 = load <16 x i16>, <16 x i16>* %22181, align 2, !tbaa !396
  %22183 = getelementptr inbounds i16, i16* %22162, i64 20
  %22184 = bitcast i16* %22183 to <16 x i16>*
  %22185 = load <16 x i16>, <16 x i16>* %22184, align 2, !tbaa !396
  %22186 = getelementptr inbounds i16, i16* %22162, i64 3
  %22187 = bitcast i16* %22186 to <16 x i16>*
  %22188 = load <16 x i16>, <16 x i16>* %22187, align 2, !tbaa !396
  %22189 = getelementptr inbounds i16, i16* %22162, i64 19
  %22190 = bitcast i16* %22189 to <16 x i16>*
  %22191 = load <16 x i16>, <16 x i16>* %22190, align 2, !tbaa !396
  %22192 = add <16 x i16> %22170, %22165
  %22193 = add <16 x i16> %22192, %22176
  %22194 = add <16 x i16> %22193, %22182
  %22195 = add <16 x i16> %22194, %22188
  %22196 = add <16 x i16> %22173, %22168
  %22197 = add <16 x i16> %22196, %22179
  %22198 = add <16 x i16> %22197, %22185
  %22199 = add <16 x i16> %22198, %22191
  %22200 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22195, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22201 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22199, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22202 = shufflevector <16 x i16> %22200, <16 x i16> %22201, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22203 = lshr <32 x i16> %22202, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22204 = shufflevector <32 x i16> %22203, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22205 = shl nsw i64 %22135, 5
  %22206 = add nsw i64 %22205, %21990
  %22207 = getelementptr inbounds i16, i16* %blur_x879, i64 %22206
  %22208 = bitcast i16* %22207 to <16 x i16>*
  store <16 x i16> %22204, <16 x i16>* %22208, align 2, !tbaa !399
  %22209 = shufflevector <32 x i16> %22203, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22210 = getelementptr inbounds i16, i16* %22207, i64 16
  %22211 = bitcast i16* %22210 to <16 x i16>*
  store <16 x i16> %22209, <16 x i16>* %22211, align 2, !tbaa !399
  br label %"consume blur_x1670"

"consume blur_x1670":                             ; preds = %"for blur_y.s0.x.x.rebased1661.consume blur_x1670_crit_edge", %"produce blur_x1668"
  %.pre-phi3528 = phi i64 [ %.pre3527, %"for blur_y.s0.x.x.rebased1661.consume blur_x1670_crit_edge" ], [ %22205, %"produce blur_x1668" ]
  %22212 = add nsw i64 %21993, %.pre-phi3528
  %22213 = getelementptr inbounds i16, i16* %blur_x879, i64 %22212
  %22214 = bitcast i16* %22213 to <16 x i16>*
  %22215 = load <16 x i16>, <16 x i16>* %22214, align 2, !tbaa !399
  %22216 = getelementptr inbounds i16, i16* %22213, i64 16
  %22217 = bitcast i16* %22216 to <16 x i16>*
  %22218 = load <16 x i16>, <16 x i16>* %22217, align 2, !tbaa !399
  %22219 = add nsw i64 %21996, %.pre-phi3528
  %22220 = getelementptr inbounds i16, i16* %blur_x879, i64 %22219
  %22221 = bitcast i16* %22220 to <16 x i16>*
  %22222 = load <16 x i16>, <16 x i16>* %22221, align 2, !tbaa !399
  %22223 = getelementptr inbounds i16, i16* %22220, i64 16
  %22224 = bitcast i16* %22223 to <16 x i16>*
  %22225 = load <16 x i16>, <16 x i16>* %22224, align 2, !tbaa !399
  %22226 = add nsw i64 %21999, %.pre-phi3528
  %22227 = getelementptr inbounds i16, i16* %blur_x879, i64 %22226
  %22228 = bitcast i16* %22227 to <16 x i16>*
  %22229 = load <16 x i16>, <16 x i16>* %22228, align 2, !tbaa !399
  %22230 = getelementptr inbounds i16, i16* %22227, i64 16
  %22231 = bitcast i16* %22230 to <16 x i16>*
  %22232 = load <16 x i16>, <16 x i16>* %22231, align 2, !tbaa !399
  %22233 = add nsw i64 %22002, %.pre-phi3528
  %22234 = getelementptr inbounds i16, i16* %blur_x879, i64 %22233
  %22235 = bitcast i16* %22234 to <16 x i16>*
  %22236 = load <16 x i16>, <16 x i16>* %22235, align 2, !tbaa !399
  %22237 = getelementptr inbounds i16, i16* %22234, i64 16
  %22238 = bitcast i16* %22237 to <16 x i16>*
  %22239 = load <16 x i16>, <16 x i16>* %22238, align 2, !tbaa !399
  %22240 = add nsw i64 %22005, %.pre-phi3528
  %22241 = getelementptr inbounds i16, i16* %blur_x879, i64 %22240
  %22242 = bitcast i16* %22241 to <16 x i16>*
  %22243 = load <16 x i16>, <16 x i16>* %22242, align 2, !tbaa !399
  %22244 = getelementptr inbounds i16, i16* %22241, i64 16
  %22245 = bitcast i16* %22244 to <16 x i16>*
  %22246 = load <16 x i16>, <16 x i16>* %22245, align 2, !tbaa !399
  %22247 = add <16 x i16> %22222, %22215
  %22248 = add <16 x i16> %22247, %22229
  %22249 = add <16 x i16> %22248, %22236
  %22250 = add <16 x i16> %22249, %22243
  %22251 = add <16 x i16> %22225, %22218
  %22252 = add <16 x i16> %22251, %22232
  %22253 = add <16 x i16> %22252, %22239
  %22254 = add <16 x i16> %22253, %22246
  %22255 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22250, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22256 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22254, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22257 = shufflevector <16 x i16> %22255, <16 x i16> %22256, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22258 = lshr <32 x i16> %22257, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22259 = shufflevector <32 x i16> %22258, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22260 = add nsw i64 %22009, %.pre-phi3528
  %22261 = getelementptr inbounds i16, i16* %260, i64 %22260
  %22262 = bitcast i16* %22261 to <16 x i16>*
  store <16 x i16> %22259, <16 x i16>* %22262, align 2, !tbaa !401
  %22263 = shufflevector <32 x i16> %22258, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22264 = getelementptr inbounds i16, i16* %22261, i64 16
  %22265 = bitcast i16* %22264 to <16 x i16>*
  store <16 x i16> %22263, <16 x i16>* %22265, align 2, !tbaa !401
  %indvars.iv.next3321 = add nuw nsw i64 %indvars.iv3320, 1
  %.not2574 = icmp eq i64 %indvars.iv.next3321, %378
  br i1 %.not2574, label %"end for blur_y.s0.x.x.rebased1662", label %"for blur_y.s0.x.x.rebased1661"

"for blur_y.s0.x.x.rebased1678":                  ; preds = %"for blur_y.s0.x.x.rebased1678.preheader", %"consume blur_x1688"
  %blur_y.s0.x.x.rebased1680 = phi i32 [ %22378, %"consume blur_x1688" ], [ 0, %"for blur_y.s0.x.x.rebased1678.preheader" ]
  %22266 = add nsw i32 %blur_y.s0.x.x.rebased1680, %t1626814
  %a537 = shl nsw i32 %22266, 5
  %22267 = icmp sgt i32 %a341, %a537
  %b543 = select i1 %22267, i32 %a537, i32 %a341
  %22268 = icmp slt i32 %22266, 1
  %22269 = icmp sgt i32 %198, %a537
  %22270 = or i1 %22268, %22269
  br i1 %22270, label %"produce blur_x1685", label %"consume blur_x1688"

"end for blur_y.s0.x.x.rebased1679":              ; preds = %"consume blur_x1688", %"end for blur_y.s0.x.x.rebased1662"
  br i1 %228, label %"produce blur_x1692", label %after_bb1689

"produce blur_x1685":                             ; preds = %"for blur_y.s0.x.x.rebased1678"
  %22271 = icmp slt i32 %b543, %198
  %blur_x.s0.x.v1.base.s1686 = select i1 %22271, i32 %b543, i32 %198
  %t9571687 = add nsw i32 %blur_x.s0.x.v1.base.s1686, %t19451658
  %22272 = sext i32 %t9571687 to i64
  %22273 = getelementptr inbounds i16, i16* %read_input822, i64 %22272
  %22274 = getelementptr inbounds i16, i16* %22273, i64 1
  %22275 = bitcast i16* %22274 to <16 x i16>*
  %22276 = load <16 x i16>, <16 x i16>* %22275, align 2, !tbaa !396
  %22277 = getelementptr inbounds i16, i16* %22273, i64 17
  %22278 = bitcast i16* %22277 to <16 x i16>*
  %22279 = load <16 x i16>, <16 x i16>* %22278, align 2, !tbaa !396
  %22280 = bitcast i16* %22273 to <16 x i16>*
  %22281 = load <16 x i16>, <16 x i16>* %22280, align 2, !tbaa !396
  %22282 = getelementptr inbounds i16, i16* %22273, i64 16
  %22283 = bitcast i16* %22282 to <16 x i16>*
  %22284 = load <16 x i16>, <16 x i16>* %22283, align 2, !tbaa !396
  %22285 = getelementptr inbounds i16, i16* %22273, i64 2
  %22286 = bitcast i16* %22285 to <16 x i16>*
  %22287 = load <16 x i16>, <16 x i16>* %22286, align 2, !tbaa !396
  %22288 = getelementptr inbounds i16, i16* %22273, i64 18
  %22289 = bitcast i16* %22288 to <16 x i16>*
  %22290 = load <16 x i16>, <16 x i16>* %22289, align 2, !tbaa !396
  %22291 = getelementptr inbounds i16, i16* %22273, i64 4
  %22292 = bitcast i16* %22291 to <16 x i16>*
  %22293 = load <16 x i16>, <16 x i16>* %22292, align 2, !tbaa !396
  %22294 = getelementptr inbounds i16, i16* %22273, i64 20
  %22295 = bitcast i16* %22294 to <16 x i16>*
  %22296 = load <16 x i16>, <16 x i16>* %22295, align 2, !tbaa !396
  %22297 = getelementptr inbounds i16, i16* %22273, i64 3
  %22298 = bitcast i16* %22297 to <16 x i16>*
  %22299 = load <16 x i16>, <16 x i16>* %22298, align 2, !tbaa !396
  %22300 = getelementptr inbounds i16, i16* %22273, i64 19
  %22301 = bitcast i16* %22300 to <16 x i16>*
  %22302 = load <16 x i16>, <16 x i16>* %22301, align 2, !tbaa !396
  %22303 = add <16 x i16> %22281, %22276
  %22304 = add <16 x i16> %22303, %22287
  %22305 = add <16 x i16> %22304, %22293
  %22306 = add <16 x i16> %22305, %22299
  %22307 = add <16 x i16> %22284, %22279
  %22308 = add <16 x i16> %22307, %22290
  %22309 = add <16 x i16> %22308, %22296
  %22310 = add <16 x i16> %22309, %22302
  %22311 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22306, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22312 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22310, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22313 = shufflevector <16 x i16> %22311, <16 x i16> %22312, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22314 = lshr <32 x i16> %22313, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22315 = shufflevector <32 x i16> %22314, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22316 = sext i32 %blur_x.s0.x.v1.base.s1686 to i64
  %22317 = add nsw i64 %22316, %22141
  %22318 = getelementptr inbounds i16, i16* %blur_x879, i64 %22317
  %22319 = bitcast i16* %22318 to <16 x i16>*
  store <16 x i16> %22315, <16 x i16>* %22319, align 2, !tbaa !399
  %22320 = shufflevector <32 x i16> %22314, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22321 = getelementptr inbounds i16, i16* %22318, i64 16
  %22322 = bitcast i16* %22321 to <16 x i16>*
  store <16 x i16> %22320, <16 x i16>* %22322, align 2, !tbaa !399
  br label %"consume blur_x1688"

"consume blur_x1688":                             ; preds = %"for blur_y.s0.x.x.rebased1678", %"produce blur_x1685"
  %22323 = sext i32 %b543 to i64
  %22324 = add nsw i64 %22144, %22323
  %22325 = getelementptr inbounds i16, i16* %blur_x879, i64 %22324
  %22326 = bitcast i16* %22325 to <16 x i16>*
  %22327 = load <16 x i16>, <16 x i16>* %22326, align 2, !tbaa !399
  %22328 = getelementptr inbounds i16, i16* %22325, i64 16
  %22329 = bitcast i16* %22328 to <16 x i16>*
  %22330 = load <16 x i16>, <16 x i16>* %22329, align 2, !tbaa !399
  %22331 = add nsw i64 %22147, %22323
  %22332 = getelementptr inbounds i16, i16* %blur_x879, i64 %22331
  %22333 = bitcast i16* %22332 to <16 x i16>*
  %22334 = load <16 x i16>, <16 x i16>* %22333, align 2, !tbaa !399
  %22335 = getelementptr inbounds i16, i16* %22332, i64 16
  %22336 = bitcast i16* %22335 to <16 x i16>*
  %22337 = load <16 x i16>, <16 x i16>* %22336, align 2, !tbaa !399
  %22338 = add nsw i64 %22150, %22323
  %22339 = getelementptr inbounds i16, i16* %blur_x879, i64 %22338
  %22340 = bitcast i16* %22339 to <16 x i16>*
  %22341 = load <16 x i16>, <16 x i16>* %22340, align 2, !tbaa !399
  %22342 = getelementptr inbounds i16, i16* %22339, i64 16
  %22343 = bitcast i16* %22342 to <16 x i16>*
  %22344 = load <16 x i16>, <16 x i16>* %22343, align 2, !tbaa !399
  %22345 = add nsw i64 %22153, %22323
  %22346 = getelementptr inbounds i16, i16* %blur_x879, i64 %22345
  %22347 = bitcast i16* %22346 to <16 x i16>*
  %22348 = load <16 x i16>, <16 x i16>* %22347, align 2, !tbaa !399
  %22349 = getelementptr inbounds i16, i16* %22346, i64 16
  %22350 = bitcast i16* %22349 to <16 x i16>*
  %22351 = load <16 x i16>, <16 x i16>* %22350, align 2, !tbaa !399
  %22352 = add nsw i64 %22156, %22323
  %22353 = getelementptr inbounds i16, i16* %blur_x879, i64 %22352
  %22354 = bitcast i16* %22353 to <16 x i16>*
  %22355 = load <16 x i16>, <16 x i16>* %22354, align 2, !tbaa !399
  %22356 = getelementptr inbounds i16, i16* %22353, i64 16
  %22357 = bitcast i16* %22356 to <16 x i16>*
  %22358 = load <16 x i16>, <16 x i16>* %22357, align 2, !tbaa !399
  %22359 = add <16 x i16> %22334, %22327
  %22360 = add <16 x i16> %22359, %22341
  %22361 = add <16 x i16> %22360, %22348
  %22362 = add <16 x i16> %22361, %22355
  %22363 = add <16 x i16> %22337, %22330
  %22364 = add <16 x i16> %22363, %22344
  %22365 = add <16 x i16> %22364, %22351
  %22366 = add <16 x i16> %22365, %22358
  %22367 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22362, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22368 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22366, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22369 = shufflevector <16 x i16> %22367, <16 x i16> %22368, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22370 = lshr <32 x i16> %22369, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22371 = shufflevector <32 x i16> %22370, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22372 = add nsw i64 %22160, %22323
  %22373 = getelementptr inbounds i16, i16* %260, i64 %22372
  %22374 = bitcast i16* %22373 to <16 x i16>*
  store <16 x i16> %22371, <16 x i16>* %22374, align 2, !tbaa !401
  %22375 = shufflevector <32 x i16> %22370, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22376 = getelementptr inbounds i16, i16* %22373, i64 16
  %22377 = bitcast i16* %22376 to <16 x i16>*
  store <16 x i16> %22375, <16 x i16>* %22377, align 2, !tbaa !401
  %22378 = add nuw nsw i32 %blur_y.s0.x.x.rebased1680, 1
  %.not2573 = icmp eq i32 %22378, %t1683899
  br i1 %.not2573, label %"end for blur_y.s0.x.x.rebased1679", label %"for blur_y.s0.x.x.rebased1678"

after_bb1689:                                     ; preds = %"end for blur_y.s0.x.x.rebased1679", %"produce blur_x1692"
  br i1 %294, label %"for blur_y.s0.x.x.rebased1704.preheader", label %"end for blur_y.s0.x.x.rebased1705", !prof !386

"for blur_y.s0.x.x.rebased1704.preheader":        ; preds = %after_bb1689
  %22379 = sext i32 %t17061012 to i64
  %22380 = zext i32 %.pre-phi3472 to i64
  %22381 = mul nsw i64 %22380, %306
  %22382 = sub nsw i64 %22381, %290
  %22383 = zext i32 %.pre-phi3468 to i64
  %22384 = mul nsw i64 %22383, %306
  %22385 = sub nsw i64 %22384, %290
  %22386 = zext i32 %.pre-phi3476 to i64
  %22387 = mul nsw i64 %22386, %306
  %22388 = sub nsw i64 %22387, %290
  %22389 = zext i32 %.pre-phi3484 to i64
  %22390 = mul nsw i64 %22389, %306
  %22391 = sub nsw i64 %22390, %290
  %22392 = zext i32 %.pre-phi3480 to i64
  %22393 = mul nsw i64 %22392, %306
  %22394 = sub nsw i64 %22393, %290
  %22395 = sext i32 %a353 to i64
  %22396 = add nsw i64 %22395, 16
  %22397 = mul nsw i64 %22396, %307
  %22398 = add nsw i64 %22397, %310
  br label %"for blur_y.s0.x.x.rebased1704"

"produce blur_x1692":                             ; preds = %"end for blur_y.s0.x.x.rebased1679"
  %22399 = getelementptr inbounds i16, i16* %read_input822, i64 %341
  %22400 = getelementptr inbounds i16, i16* %22399, i64 -31
  %22401 = bitcast i16* %22400 to <16 x i16>*
  %22402 = load <16 x i16>, <16 x i16>* %22401, align 2, !tbaa !396
  %22403 = getelementptr inbounds i16, i16* %22399, i64 -15
  %22404 = bitcast i16* %22403 to <16 x i16>*
  %22405 = load <16 x i16>, <16 x i16>* %22404, align 2, !tbaa !396
  %22406 = getelementptr inbounds i16, i16* %22399, i64 -32
  %22407 = bitcast i16* %22406 to <16 x i16>*
  %22408 = load <16 x i16>, <16 x i16>* %22407, align 2, !tbaa !396
  %22409 = getelementptr inbounds i16, i16* %22399, i64 -16
  %22410 = bitcast i16* %22409 to <16 x i16>*
  %22411 = load <16 x i16>, <16 x i16>* %22410, align 2, !tbaa !396
  %22412 = getelementptr inbounds i16, i16* %22399, i64 -30
  %22413 = bitcast i16* %22412 to <16 x i16>*
  %22414 = load <16 x i16>, <16 x i16>* %22413, align 2, !tbaa !396
  %22415 = getelementptr inbounds i16, i16* %22399, i64 -14
  %22416 = bitcast i16* %22415 to <16 x i16>*
  %22417 = load <16 x i16>, <16 x i16>* %22416, align 2, !tbaa !396
  %22418 = getelementptr inbounds i16, i16* %22399, i64 -28
  %22419 = bitcast i16* %22418 to <16 x i16>*
  %22420 = load <16 x i16>, <16 x i16>* %22419, align 2, !tbaa !396
  %22421 = getelementptr inbounds i16, i16* %22399, i64 -12
  %22422 = bitcast i16* %22421 to <16 x i16>*
  %22423 = load <16 x i16>, <16 x i16>* %22422, align 2, !tbaa !396
  %22424 = getelementptr inbounds i16, i16* %22399, i64 -29
  %22425 = bitcast i16* %22424 to <16 x i16>*
  %22426 = load <16 x i16>, <16 x i16>* %22425, align 2, !tbaa !396
  %22427 = getelementptr inbounds i16, i16* %22399, i64 -13
  %22428 = bitcast i16* %22427 to <16 x i16>*
  %22429 = load <16 x i16>, <16 x i16>* %22428, align 2, !tbaa !396
  %22430 = add <16 x i16> %22408, %22402
  %22431 = add <16 x i16> %22430, %22414
  %22432 = add <16 x i16> %22431, %22420
  %22433 = add <16 x i16> %22432, %22426
  %22434 = add <16 x i16> %22411, %22405
  %22435 = add <16 x i16> %22434, %22417
  %22436 = add <16 x i16> %22435, %22423
  %22437 = add <16 x i16> %22436, %22429
  %22438 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22433, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22439 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22437, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22440 = shufflevector <16 x i16> %22438, <16 x i16> %22439, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22441 = lshr <32 x i16> %22440, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22442 = shufflevector <32 x i16> %22441, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22443 = zext i32 %.pre-phi3484 to i64
  %22444 = mul nsw i64 %291, %22443
  %22445 = add nsw i64 %293, %22444
  %22446 = getelementptr inbounds i16, i16* %blur_x879, i64 %22445
  %22447 = getelementptr inbounds i16, i16* %22446, i64 -32
  %22448 = bitcast i16* %22447 to <16 x i16>*
  store <16 x i16> %22442, <16 x i16>* %22448, align 2, !tbaa !399
  %22449 = shufflevector <32 x i16> %22441, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22450 = getelementptr inbounds i16, i16* %22446, i64 -16
  %22451 = bitcast i16* %22450 to <16 x i16>*
  store <16 x i16> %22449, <16 x i16>* %22451, align 2, !tbaa !399
  %22452 = zext i32 %.pre-phi3472 to i64
  %22453 = mul nsw i64 %22452, %306
  %22454 = add nsw i64 %22453, %288
  %22455 = getelementptr inbounds i16, i16* %blur_x879, i64 %22454
  %22456 = getelementptr inbounds i16, i16* %22455, i64 -32
  %22457 = bitcast i16* %22456 to <16 x i16>*
  %22458 = load <16 x i16>, <16 x i16>* %22457, align 2, !tbaa !399
  %22459 = getelementptr inbounds i16, i16* %22455, i64 -16
  %22460 = bitcast i16* %22459 to <16 x i16>*
  %22461 = load <16 x i16>, <16 x i16>* %22460, align 2, !tbaa !399
  %22462 = zext i32 %.pre-phi3468 to i64
  %22463 = mul nsw i64 %22462, %306
  %22464 = add nsw i64 %22463, %288
  %22465 = getelementptr inbounds i16, i16* %blur_x879, i64 %22464
  %22466 = getelementptr inbounds i16, i16* %22465, i64 -32
  %22467 = bitcast i16* %22466 to <16 x i16>*
  %22468 = load <16 x i16>, <16 x i16>* %22467, align 2, !tbaa !399
  %22469 = getelementptr inbounds i16, i16* %22465, i64 -16
  %22470 = bitcast i16* %22469 to <16 x i16>*
  %22471 = load <16 x i16>, <16 x i16>* %22470, align 2, !tbaa !399
  %22472 = zext i32 %.pre-phi3476 to i64
  %22473 = mul nsw i64 %22472, %306
  %22474 = add nsw i64 %22473, %288
  %22475 = getelementptr inbounds i16, i16* %blur_x879, i64 %22474
  %22476 = getelementptr inbounds i16, i16* %22475, i64 -32
  %22477 = bitcast i16* %22476 to <16 x i16>*
  %22478 = load <16 x i16>, <16 x i16>* %22477, align 2, !tbaa !399
  %22479 = getelementptr inbounds i16, i16* %22475, i64 -16
  %22480 = bitcast i16* %22479 to <16 x i16>*
  %22481 = load <16 x i16>, <16 x i16>* %22480, align 2, !tbaa !399
  %22482 = mul nsw i64 %22443, %306
  %22483 = add nsw i64 %22482, %288
  %22484 = getelementptr inbounds i16, i16* %blur_x879, i64 %22483
  %22485 = getelementptr inbounds i16, i16* %22484, i64 -32
  %22486 = bitcast i16* %22485 to <16 x i16>*
  %22487 = load <16 x i16>, <16 x i16>* %22486, align 2, !tbaa !399
  %22488 = getelementptr inbounds i16, i16* %22484, i64 -16
  %22489 = bitcast i16* %22488 to <16 x i16>*
  %22490 = load <16 x i16>, <16 x i16>* %22489, align 2, !tbaa !399
  %22491 = zext i32 %.pre-phi3480 to i64
  %22492 = mul nsw i64 %22491, %306
  %22493 = add nsw i64 %22492, %288
  %22494 = getelementptr inbounds i16, i16* %blur_x879, i64 %22493
  %22495 = getelementptr inbounds i16, i16* %22494, i64 -32
  %22496 = bitcast i16* %22495 to <16 x i16>*
  %22497 = load <16 x i16>, <16 x i16>* %22496, align 2, !tbaa !399
  %22498 = getelementptr inbounds i16, i16* %22494, i64 -16
  %22499 = bitcast i16* %22498 to <16 x i16>*
  %22500 = load <16 x i16>, <16 x i16>* %22499, align 2, !tbaa !399
  %22501 = add <16 x i16> %22468, %22458
  %22502 = add <16 x i16> %22501, %22478
  %22503 = add <16 x i16> %22502, %22487
  %22504 = add <16 x i16> %22503, %22497
  %22505 = add <16 x i16> %22471, %22461
  %22506 = add <16 x i16> %22505, %22481
  %22507 = add <16 x i16> %22506, %22490
  %22508 = add <16 x i16> %22507, %22500
  %22509 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22504, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22510 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22508, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22511 = shufflevector <16 x i16> %22509, <16 x i16> %22510, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22512 = lshr <32 x i16> %22511, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22513 = shufflevector <32 x i16> %22512, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22514 = sext i32 %a353 to i64
  %22515 = add nsw i64 %22514, 16
  %22516 = mul nsw i64 %22515, %307
  %22517 = add nsw i64 %309, %22516
  %22518 = getelementptr inbounds i16, i16* %260, i64 %22517
  %22519 = getelementptr inbounds i16, i16* %22518, i64 -32
  %22520 = bitcast i16* %22519 to <16 x i16>*
  store <16 x i16> %22513, <16 x i16>* %22520, align 2, !tbaa !401
  %22521 = shufflevector <32 x i16> %22512, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22522 = getelementptr inbounds i16, i16* %22518, i64 -16
  %22523 = bitcast i16* %22522 to <16 x i16>*
  store <16 x i16> %22521, <16 x i16>* %22523, align 2, !tbaa !401
  br label %after_bb1689

"for blur_y.s0.x.x.rebased1704":                  ; preds = %"for blur_y.s0.x.x.rebased1704.preheader", %"consume blur_x1713"
  %indvars.iv3323 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1704.preheader" ], [ %indvars.iv.next3324, %"consume blur_x1713" ]
  %22524 = add nsw i64 %indvars.iv3323, %295
  %22525 = icmp slt i64 %22524, 1
  %22526 = trunc i64 %22524 to i32
  %22527 = shl nsw i32 %22526, 5
  %22528 = icmp sgt i32 %198, %22527
  %22529 = or i1 %22525, %22528
  br i1 %22529, label %"produce blur_x1711", label %"for blur_y.s0.x.x.rebased1704.consume blur_x1713_crit_edge"

"for blur_y.s0.x.x.rebased1704.consume blur_x1713_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1704"
  %.pre3529 = shl nsw i64 %22524, 5
  br label %"consume blur_x1713"

"end for blur_y.s0.x.x.rebased1705":              ; preds = %"consume blur_x1713", %after_bb1689
  br i1 %296, label %"for blur_y.s0.x.x.rebased1721.preheader", label %"end for blur_y.s0.x.x.rebased1722", !prof !386

"for blur_y.s0.x.x.rebased1721.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1705"
  %22530 = sext i32 %t17061012 to i64
  %22531 = zext i32 %.pre-phi3472 to i64
  %22532 = mul nsw i64 %22531, %306
  %22533 = sub nsw i64 %22532, %290
  %22534 = zext i32 %.pre-phi3468 to i64
  %22535 = mul nsw i64 %22534, %306
  %22536 = sub nsw i64 %22535, %290
  %22537 = zext i32 %.pre-phi3476 to i64
  %22538 = mul nsw i64 %22537, %306
  %22539 = sub nsw i64 %22538, %290
  %22540 = zext i32 %.pre-phi3484 to i64
  %22541 = mul nsw i64 %22540, %306
  %22542 = sub nsw i64 %22541, %290
  %22543 = zext i32 %.pre-phi3480 to i64
  %22544 = mul nsw i64 %22543, %306
  %22545 = sub nsw i64 %22544, %290
  %22546 = sext i32 %a353 to i64
  %22547 = add nsw i64 %22546, 16
  %22548 = mul nsw i64 %22547, %307
  %22549 = add nsw i64 %22548, %310
  br label %"for blur_y.s0.x.x.rebased1721"

"produce blur_x1711":                             ; preds = %"for blur_y.s0.x.x.rebased1704"
  %t9681712 = add nsw i32 %22527, %t19611701
  %22550 = sext i32 %t9681712 to i64
  %22551 = getelementptr inbounds i16, i16* %read_input822, i64 %22550
  %22552 = getelementptr inbounds i16, i16* %22551, i64 1
  %22553 = bitcast i16* %22552 to <16 x i16>*
  %22554 = load <16 x i16>, <16 x i16>* %22553, align 2, !tbaa !396
  %22555 = getelementptr inbounds i16, i16* %22551, i64 17
  %22556 = bitcast i16* %22555 to <16 x i16>*
  %22557 = load <16 x i16>, <16 x i16>* %22556, align 2, !tbaa !396
  %22558 = bitcast i16* %22551 to <16 x i16>*
  %22559 = load <16 x i16>, <16 x i16>* %22558, align 2, !tbaa !396
  %22560 = getelementptr inbounds i16, i16* %22551, i64 16
  %22561 = bitcast i16* %22560 to <16 x i16>*
  %22562 = load <16 x i16>, <16 x i16>* %22561, align 2, !tbaa !396
  %22563 = getelementptr inbounds i16, i16* %22551, i64 2
  %22564 = bitcast i16* %22563 to <16 x i16>*
  %22565 = load <16 x i16>, <16 x i16>* %22564, align 2, !tbaa !396
  %22566 = getelementptr inbounds i16, i16* %22551, i64 18
  %22567 = bitcast i16* %22566 to <16 x i16>*
  %22568 = load <16 x i16>, <16 x i16>* %22567, align 2, !tbaa !396
  %22569 = getelementptr inbounds i16, i16* %22551, i64 4
  %22570 = bitcast i16* %22569 to <16 x i16>*
  %22571 = load <16 x i16>, <16 x i16>* %22570, align 2, !tbaa !396
  %22572 = getelementptr inbounds i16, i16* %22551, i64 20
  %22573 = bitcast i16* %22572 to <16 x i16>*
  %22574 = load <16 x i16>, <16 x i16>* %22573, align 2, !tbaa !396
  %22575 = getelementptr inbounds i16, i16* %22551, i64 3
  %22576 = bitcast i16* %22575 to <16 x i16>*
  %22577 = load <16 x i16>, <16 x i16>* %22576, align 2, !tbaa !396
  %22578 = getelementptr inbounds i16, i16* %22551, i64 19
  %22579 = bitcast i16* %22578 to <16 x i16>*
  %22580 = load <16 x i16>, <16 x i16>* %22579, align 2, !tbaa !396
  %22581 = add <16 x i16> %22559, %22554
  %22582 = add <16 x i16> %22581, %22565
  %22583 = add <16 x i16> %22582, %22571
  %22584 = add <16 x i16> %22583, %22577
  %22585 = add <16 x i16> %22562, %22557
  %22586 = add <16 x i16> %22585, %22568
  %22587 = add <16 x i16> %22586, %22574
  %22588 = add <16 x i16> %22587, %22580
  %22589 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22584, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22590 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22588, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22591 = shufflevector <16 x i16> %22589, <16 x i16> %22590, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22592 = lshr <32 x i16> %22591, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22593 = shufflevector <32 x i16> %22592, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22594 = shl nsw i64 %22524, 5
  %22595 = add nsw i64 %22594, %22379
  %22596 = getelementptr inbounds i16, i16* %blur_x879, i64 %22595
  %22597 = bitcast i16* %22596 to <16 x i16>*
  store <16 x i16> %22593, <16 x i16>* %22597, align 2, !tbaa !399
  %22598 = shufflevector <32 x i16> %22592, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22599 = getelementptr inbounds i16, i16* %22596, i64 16
  %22600 = bitcast i16* %22599 to <16 x i16>*
  store <16 x i16> %22598, <16 x i16>* %22600, align 2, !tbaa !399
  br label %"consume blur_x1713"

"consume blur_x1713":                             ; preds = %"for blur_y.s0.x.x.rebased1704.consume blur_x1713_crit_edge", %"produce blur_x1711"
  %.pre-phi3530 = phi i64 [ %.pre3529, %"for blur_y.s0.x.x.rebased1704.consume blur_x1713_crit_edge" ], [ %22594, %"produce blur_x1711" ]
  %22601 = add nsw i64 %22382, %.pre-phi3530
  %22602 = getelementptr inbounds i16, i16* %blur_x879, i64 %22601
  %22603 = bitcast i16* %22602 to <16 x i16>*
  %22604 = load <16 x i16>, <16 x i16>* %22603, align 2, !tbaa !399
  %22605 = getelementptr inbounds i16, i16* %22602, i64 16
  %22606 = bitcast i16* %22605 to <16 x i16>*
  %22607 = load <16 x i16>, <16 x i16>* %22606, align 2, !tbaa !399
  %22608 = add nsw i64 %22385, %.pre-phi3530
  %22609 = getelementptr inbounds i16, i16* %blur_x879, i64 %22608
  %22610 = bitcast i16* %22609 to <16 x i16>*
  %22611 = load <16 x i16>, <16 x i16>* %22610, align 2, !tbaa !399
  %22612 = getelementptr inbounds i16, i16* %22609, i64 16
  %22613 = bitcast i16* %22612 to <16 x i16>*
  %22614 = load <16 x i16>, <16 x i16>* %22613, align 2, !tbaa !399
  %22615 = add nsw i64 %22388, %.pre-phi3530
  %22616 = getelementptr inbounds i16, i16* %blur_x879, i64 %22615
  %22617 = bitcast i16* %22616 to <16 x i16>*
  %22618 = load <16 x i16>, <16 x i16>* %22617, align 2, !tbaa !399
  %22619 = getelementptr inbounds i16, i16* %22616, i64 16
  %22620 = bitcast i16* %22619 to <16 x i16>*
  %22621 = load <16 x i16>, <16 x i16>* %22620, align 2, !tbaa !399
  %22622 = add nsw i64 %22391, %.pre-phi3530
  %22623 = getelementptr inbounds i16, i16* %blur_x879, i64 %22622
  %22624 = bitcast i16* %22623 to <16 x i16>*
  %22625 = load <16 x i16>, <16 x i16>* %22624, align 2, !tbaa !399
  %22626 = getelementptr inbounds i16, i16* %22623, i64 16
  %22627 = bitcast i16* %22626 to <16 x i16>*
  %22628 = load <16 x i16>, <16 x i16>* %22627, align 2, !tbaa !399
  %22629 = add nsw i64 %22394, %.pre-phi3530
  %22630 = getelementptr inbounds i16, i16* %blur_x879, i64 %22629
  %22631 = bitcast i16* %22630 to <16 x i16>*
  %22632 = load <16 x i16>, <16 x i16>* %22631, align 2, !tbaa !399
  %22633 = getelementptr inbounds i16, i16* %22630, i64 16
  %22634 = bitcast i16* %22633 to <16 x i16>*
  %22635 = load <16 x i16>, <16 x i16>* %22634, align 2, !tbaa !399
  %22636 = add <16 x i16> %22611, %22604
  %22637 = add <16 x i16> %22636, %22618
  %22638 = add <16 x i16> %22637, %22625
  %22639 = add <16 x i16> %22638, %22632
  %22640 = add <16 x i16> %22614, %22607
  %22641 = add <16 x i16> %22640, %22621
  %22642 = add <16 x i16> %22641, %22628
  %22643 = add <16 x i16> %22642, %22635
  %22644 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22639, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22645 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22643, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22646 = shufflevector <16 x i16> %22644, <16 x i16> %22645, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22647 = lshr <32 x i16> %22646, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22648 = shufflevector <32 x i16> %22647, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22649 = add nsw i64 %22398, %.pre-phi3530
  %22650 = getelementptr inbounds i16, i16* %260, i64 %22649
  %22651 = bitcast i16* %22650 to <16 x i16>*
  store <16 x i16> %22648, <16 x i16>* %22651, align 2, !tbaa !401
  %22652 = shufflevector <32 x i16> %22647, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22653 = getelementptr inbounds i16, i16* %22650, i64 16
  %22654 = bitcast i16* %22653 to <16 x i16>*
  store <16 x i16> %22652, <16 x i16>* %22654, align 2, !tbaa !401
  %indvars.iv.next3324 = add nuw nsw i64 %indvars.iv3323, 1
  %.not2572 = icmp eq i64 %indvars.iv.next3324, %378
  br i1 %.not2572, label %"end for blur_y.s0.x.x.rebased1705", label %"for blur_y.s0.x.x.rebased1704"

"for blur_y.s0.x.x.rebased1721":                  ; preds = %"for blur_y.s0.x.x.rebased1721.preheader", %"consume blur_x1731"
  %blur_y.s0.x.x.rebased1723 = phi i32 [ %22767, %"consume blur_x1731" ], [ 0, %"for blur_y.s0.x.x.rebased1721.preheader" ]
  %22655 = add nsw i32 %blur_y.s0.x.x.rebased1723, %t1626814
  %a544 = shl nsw i32 %22655, 5
  %22656 = icmp sgt i32 %a341, %a544
  %b550 = select i1 %22656, i32 %a544, i32 %a341
  %22657 = icmp slt i32 %22655, 1
  %22658 = icmp sgt i32 %198, %a544
  %22659 = or i1 %22657, %22658
  br i1 %22659, label %"produce blur_x1728", label %"consume blur_x1731"

"end for blur_y.s0.x.x.rebased1722":              ; preds = %"consume blur_x1731", %"end for blur_y.s0.x.x.rebased1705"
  br i1 %228, label %"produce blur_x1735", label %after_bb1732

"produce blur_x1728":                             ; preds = %"for blur_y.s0.x.x.rebased1721"
  %22660 = icmp slt i32 %b550, %198
  %blur_x.s0.x.v1.base.s1729 = select i1 %22660, i32 %b550, i32 %198
  %t9731730 = add nsw i32 %blur_x.s0.x.v1.base.s1729, %t19611701
  %22661 = sext i32 %t9731730 to i64
  %22662 = getelementptr inbounds i16, i16* %read_input822, i64 %22661
  %22663 = getelementptr inbounds i16, i16* %22662, i64 1
  %22664 = bitcast i16* %22663 to <16 x i16>*
  %22665 = load <16 x i16>, <16 x i16>* %22664, align 2, !tbaa !396
  %22666 = getelementptr inbounds i16, i16* %22662, i64 17
  %22667 = bitcast i16* %22666 to <16 x i16>*
  %22668 = load <16 x i16>, <16 x i16>* %22667, align 2, !tbaa !396
  %22669 = bitcast i16* %22662 to <16 x i16>*
  %22670 = load <16 x i16>, <16 x i16>* %22669, align 2, !tbaa !396
  %22671 = getelementptr inbounds i16, i16* %22662, i64 16
  %22672 = bitcast i16* %22671 to <16 x i16>*
  %22673 = load <16 x i16>, <16 x i16>* %22672, align 2, !tbaa !396
  %22674 = getelementptr inbounds i16, i16* %22662, i64 2
  %22675 = bitcast i16* %22674 to <16 x i16>*
  %22676 = load <16 x i16>, <16 x i16>* %22675, align 2, !tbaa !396
  %22677 = getelementptr inbounds i16, i16* %22662, i64 18
  %22678 = bitcast i16* %22677 to <16 x i16>*
  %22679 = load <16 x i16>, <16 x i16>* %22678, align 2, !tbaa !396
  %22680 = getelementptr inbounds i16, i16* %22662, i64 4
  %22681 = bitcast i16* %22680 to <16 x i16>*
  %22682 = load <16 x i16>, <16 x i16>* %22681, align 2, !tbaa !396
  %22683 = getelementptr inbounds i16, i16* %22662, i64 20
  %22684 = bitcast i16* %22683 to <16 x i16>*
  %22685 = load <16 x i16>, <16 x i16>* %22684, align 2, !tbaa !396
  %22686 = getelementptr inbounds i16, i16* %22662, i64 3
  %22687 = bitcast i16* %22686 to <16 x i16>*
  %22688 = load <16 x i16>, <16 x i16>* %22687, align 2, !tbaa !396
  %22689 = getelementptr inbounds i16, i16* %22662, i64 19
  %22690 = bitcast i16* %22689 to <16 x i16>*
  %22691 = load <16 x i16>, <16 x i16>* %22690, align 2, !tbaa !396
  %22692 = add <16 x i16> %22670, %22665
  %22693 = add <16 x i16> %22692, %22676
  %22694 = add <16 x i16> %22693, %22682
  %22695 = add <16 x i16> %22694, %22688
  %22696 = add <16 x i16> %22673, %22668
  %22697 = add <16 x i16> %22696, %22679
  %22698 = add <16 x i16> %22697, %22685
  %22699 = add <16 x i16> %22698, %22691
  %22700 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22695, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22701 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22699, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22702 = shufflevector <16 x i16> %22700, <16 x i16> %22701, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22703 = lshr <32 x i16> %22702, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22704 = shufflevector <32 x i16> %22703, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22705 = sext i32 %blur_x.s0.x.v1.base.s1729 to i64
  %22706 = add nsw i64 %22705, %22530
  %22707 = getelementptr inbounds i16, i16* %blur_x879, i64 %22706
  %22708 = bitcast i16* %22707 to <16 x i16>*
  store <16 x i16> %22704, <16 x i16>* %22708, align 2, !tbaa !399
  %22709 = shufflevector <32 x i16> %22703, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22710 = getelementptr inbounds i16, i16* %22707, i64 16
  %22711 = bitcast i16* %22710 to <16 x i16>*
  store <16 x i16> %22709, <16 x i16>* %22711, align 2, !tbaa !399
  br label %"consume blur_x1731"

"consume blur_x1731":                             ; preds = %"for blur_y.s0.x.x.rebased1721", %"produce blur_x1728"
  %22712 = sext i32 %b550 to i64
  %22713 = add nsw i64 %22533, %22712
  %22714 = getelementptr inbounds i16, i16* %blur_x879, i64 %22713
  %22715 = bitcast i16* %22714 to <16 x i16>*
  %22716 = load <16 x i16>, <16 x i16>* %22715, align 2, !tbaa !399
  %22717 = getelementptr inbounds i16, i16* %22714, i64 16
  %22718 = bitcast i16* %22717 to <16 x i16>*
  %22719 = load <16 x i16>, <16 x i16>* %22718, align 2, !tbaa !399
  %22720 = add nsw i64 %22536, %22712
  %22721 = getelementptr inbounds i16, i16* %blur_x879, i64 %22720
  %22722 = bitcast i16* %22721 to <16 x i16>*
  %22723 = load <16 x i16>, <16 x i16>* %22722, align 2, !tbaa !399
  %22724 = getelementptr inbounds i16, i16* %22721, i64 16
  %22725 = bitcast i16* %22724 to <16 x i16>*
  %22726 = load <16 x i16>, <16 x i16>* %22725, align 2, !tbaa !399
  %22727 = add nsw i64 %22539, %22712
  %22728 = getelementptr inbounds i16, i16* %blur_x879, i64 %22727
  %22729 = bitcast i16* %22728 to <16 x i16>*
  %22730 = load <16 x i16>, <16 x i16>* %22729, align 2, !tbaa !399
  %22731 = getelementptr inbounds i16, i16* %22728, i64 16
  %22732 = bitcast i16* %22731 to <16 x i16>*
  %22733 = load <16 x i16>, <16 x i16>* %22732, align 2, !tbaa !399
  %22734 = add nsw i64 %22542, %22712
  %22735 = getelementptr inbounds i16, i16* %blur_x879, i64 %22734
  %22736 = bitcast i16* %22735 to <16 x i16>*
  %22737 = load <16 x i16>, <16 x i16>* %22736, align 2, !tbaa !399
  %22738 = getelementptr inbounds i16, i16* %22735, i64 16
  %22739 = bitcast i16* %22738 to <16 x i16>*
  %22740 = load <16 x i16>, <16 x i16>* %22739, align 2, !tbaa !399
  %22741 = add nsw i64 %22545, %22712
  %22742 = getelementptr inbounds i16, i16* %blur_x879, i64 %22741
  %22743 = bitcast i16* %22742 to <16 x i16>*
  %22744 = load <16 x i16>, <16 x i16>* %22743, align 2, !tbaa !399
  %22745 = getelementptr inbounds i16, i16* %22742, i64 16
  %22746 = bitcast i16* %22745 to <16 x i16>*
  %22747 = load <16 x i16>, <16 x i16>* %22746, align 2, !tbaa !399
  %22748 = add <16 x i16> %22723, %22716
  %22749 = add <16 x i16> %22748, %22730
  %22750 = add <16 x i16> %22749, %22737
  %22751 = add <16 x i16> %22750, %22744
  %22752 = add <16 x i16> %22726, %22719
  %22753 = add <16 x i16> %22752, %22733
  %22754 = add <16 x i16> %22753, %22740
  %22755 = add <16 x i16> %22754, %22747
  %22756 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22751, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22757 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22755, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22758 = shufflevector <16 x i16> %22756, <16 x i16> %22757, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22759 = lshr <32 x i16> %22758, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22760 = shufflevector <32 x i16> %22759, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22761 = add nsw i64 %22549, %22712
  %22762 = getelementptr inbounds i16, i16* %260, i64 %22761
  %22763 = bitcast i16* %22762 to <16 x i16>*
  store <16 x i16> %22760, <16 x i16>* %22763, align 2, !tbaa !401
  %22764 = shufflevector <32 x i16> %22759, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22765 = getelementptr inbounds i16, i16* %22762, i64 16
  %22766 = bitcast i16* %22765 to <16 x i16>*
  store <16 x i16> %22764, <16 x i16>* %22766, align 2, !tbaa !401
  %22767 = add nuw nsw i32 %blur_y.s0.x.x.rebased1723, 1
  %.not2571 = icmp eq i32 %22767, %t1683899
  br i1 %.not2571, label %"end for blur_y.s0.x.x.rebased1722", label %"for blur_y.s0.x.x.rebased1721"

after_bb1732:                                     ; preds = %"end for blur_y.s0.x.x.rebased1722", %"produce blur_x1735"
  br i1 %294, label %"for blur_y.s0.x.x.rebased1747.preheader", label %"end for blur_y.s0.x.x.rebased1748", !prof !386

"for blur_y.s0.x.x.rebased1747.preheader":        ; preds = %after_bb1732
  %22768 = sext i32 %t17221055 to i64
  %22769 = zext i32 %.pre-phi3476 to i64
  %22770 = mul nsw i64 %22769, %306
  %22771 = sub nsw i64 %22770, %290
  %22772 = zext i32 %.pre-phi3472 to i64
  %22773 = mul nsw i64 %22772, %306
  %22774 = sub nsw i64 %22773, %290
  %22775 = zext i32 %.pre-phi3480 to i64
  %22776 = mul nsw i64 %22775, %306
  %22777 = sub nsw i64 %22776, %290
  %22778 = zext i32 %.pre-phi3490 to i64
  %22779 = mul nsw i64 %22778, %306
  %22780 = sub nsw i64 %22779, %290
  %22781 = zext i32 %.pre-phi3484 to i64
  %22782 = mul nsw i64 %22781, %306
  %22783 = sub nsw i64 %22782, %290
  %22784 = sext i32 %a353 to i64
  %22785 = add nsw i64 %22784, 17
  %22786 = mul nsw i64 %22785, %307
  %22787 = add nsw i64 %22786, %310
  br label %"for blur_y.s0.x.x.rebased1747"

"produce blur_x1735":                             ; preds = %"end for blur_y.s0.x.x.rebased1722"
  %22788 = getelementptr inbounds i16, i16* %read_input822, i64 %343
  %22789 = getelementptr inbounds i16, i16* %22788, i64 -31
  %22790 = bitcast i16* %22789 to <16 x i16>*
  %22791 = load <16 x i16>, <16 x i16>* %22790, align 2, !tbaa !396
  %22792 = getelementptr inbounds i16, i16* %22788, i64 -15
  %22793 = bitcast i16* %22792 to <16 x i16>*
  %22794 = load <16 x i16>, <16 x i16>* %22793, align 2, !tbaa !396
  %22795 = getelementptr inbounds i16, i16* %22788, i64 -32
  %22796 = bitcast i16* %22795 to <16 x i16>*
  %22797 = load <16 x i16>, <16 x i16>* %22796, align 2, !tbaa !396
  %22798 = getelementptr inbounds i16, i16* %22788, i64 -16
  %22799 = bitcast i16* %22798 to <16 x i16>*
  %22800 = load <16 x i16>, <16 x i16>* %22799, align 2, !tbaa !396
  %22801 = getelementptr inbounds i16, i16* %22788, i64 -30
  %22802 = bitcast i16* %22801 to <16 x i16>*
  %22803 = load <16 x i16>, <16 x i16>* %22802, align 2, !tbaa !396
  %22804 = getelementptr inbounds i16, i16* %22788, i64 -14
  %22805 = bitcast i16* %22804 to <16 x i16>*
  %22806 = load <16 x i16>, <16 x i16>* %22805, align 2, !tbaa !396
  %22807 = getelementptr inbounds i16, i16* %22788, i64 -28
  %22808 = bitcast i16* %22807 to <16 x i16>*
  %22809 = load <16 x i16>, <16 x i16>* %22808, align 2, !tbaa !396
  %22810 = getelementptr inbounds i16, i16* %22788, i64 -12
  %22811 = bitcast i16* %22810 to <16 x i16>*
  %22812 = load <16 x i16>, <16 x i16>* %22811, align 2, !tbaa !396
  %22813 = getelementptr inbounds i16, i16* %22788, i64 -29
  %22814 = bitcast i16* %22813 to <16 x i16>*
  %22815 = load <16 x i16>, <16 x i16>* %22814, align 2, !tbaa !396
  %22816 = getelementptr inbounds i16, i16* %22788, i64 -13
  %22817 = bitcast i16* %22816 to <16 x i16>*
  %22818 = load <16 x i16>, <16 x i16>* %22817, align 2, !tbaa !396
  %22819 = add <16 x i16> %22797, %22791
  %22820 = add <16 x i16> %22819, %22803
  %22821 = add <16 x i16> %22820, %22809
  %22822 = add <16 x i16> %22821, %22815
  %22823 = add <16 x i16> %22800, %22794
  %22824 = add <16 x i16> %22823, %22806
  %22825 = add <16 x i16> %22824, %22812
  %22826 = add <16 x i16> %22825, %22818
  %22827 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22822, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22828 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22826, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22829 = shufflevector <16 x i16> %22827, <16 x i16> %22828, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22830 = lshr <32 x i16> %22829, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22831 = shufflevector <32 x i16> %22830, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22832 = zext i32 %.pre-phi3490 to i64
  %22833 = mul nsw i64 %291, %22832
  %22834 = add nsw i64 %293, %22833
  %22835 = getelementptr inbounds i16, i16* %blur_x879, i64 %22834
  %22836 = getelementptr inbounds i16, i16* %22835, i64 -32
  %22837 = bitcast i16* %22836 to <16 x i16>*
  store <16 x i16> %22831, <16 x i16>* %22837, align 2, !tbaa !399
  %22838 = shufflevector <32 x i16> %22830, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22839 = getelementptr inbounds i16, i16* %22835, i64 -16
  %22840 = bitcast i16* %22839 to <16 x i16>*
  store <16 x i16> %22838, <16 x i16>* %22840, align 2, !tbaa !399
  %22841 = zext i32 %.pre-phi3476 to i64
  %22842 = mul nsw i64 %22841, %306
  %22843 = add nsw i64 %22842, %288
  %22844 = getelementptr inbounds i16, i16* %blur_x879, i64 %22843
  %22845 = getelementptr inbounds i16, i16* %22844, i64 -32
  %22846 = bitcast i16* %22845 to <16 x i16>*
  %22847 = load <16 x i16>, <16 x i16>* %22846, align 2, !tbaa !399
  %22848 = getelementptr inbounds i16, i16* %22844, i64 -16
  %22849 = bitcast i16* %22848 to <16 x i16>*
  %22850 = load <16 x i16>, <16 x i16>* %22849, align 2, !tbaa !399
  %22851 = zext i32 %.pre-phi3472 to i64
  %22852 = mul nsw i64 %22851, %306
  %22853 = add nsw i64 %22852, %288
  %22854 = getelementptr inbounds i16, i16* %blur_x879, i64 %22853
  %22855 = getelementptr inbounds i16, i16* %22854, i64 -32
  %22856 = bitcast i16* %22855 to <16 x i16>*
  %22857 = load <16 x i16>, <16 x i16>* %22856, align 2, !tbaa !399
  %22858 = getelementptr inbounds i16, i16* %22854, i64 -16
  %22859 = bitcast i16* %22858 to <16 x i16>*
  %22860 = load <16 x i16>, <16 x i16>* %22859, align 2, !tbaa !399
  %22861 = zext i32 %.pre-phi3480 to i64
  %22862 = mul nsw i64 %22861, %306
  %22863 = add nsw i64 %22862, %288
  %22864 = getelementptr inbounds i16, i16* %blur_x879, i64 %22863
  %22865 = getelementptr inbounds i16, i16* %22864, i64 -32
  %22866 = bitcast i16* %22865 to <16 x i16>*
  %22867 = load <16 x i16>, <16 x i16>* %22866, align 2, !tbaa !399
  %22868 = getelementptr inbounds i16, i16* %22864, i64 -16
  %22869 = bitcast i16* %22868 to <16 x i16>*
  %22870 = load <16 x i16>, <16 x i16>* %22869, align 2, !tbaa !399
  %22871 = mul nsw i64 %22832, %306
  %22872 = add nsw i64 %22871, %288
  %22873 = getelementptr inbounds i16, i16* %blur_x879, i64 %22872
  %22874 = getelementptr inbounds i16, i16* %22873, i64 -32
  %22875 = bitcast i16* %22874 to <16 x i16>*
  %22876 = load <16 x i16>, <16 x i16>* %22875, align 2, !tbaa !399
  %22877 = getelementptr inbounds i16, i16* %22873, i64 -16
  %22878 = bitcast i16* %22877 to <16 x i16>*
  %22879 = load <16 x i16>, <16 x i16>* %22878, align 2, !tbaa !399
  %22880 = zext i32 %.pre-phi3484 to i64
  %22881 = mul nsw i64 %22880, %306
  %22882 = add nsw i64 %22881, %288
  %22883 = getelementptr inbounds i16, i16* %blur_x879, i64 %22882
  %22884 = getelementptr inbounds i16, i16* %22883, i64 -32
  %22885 = bitcast i16* %22884 to <16 x i16>*
  %22886 = load <16 x i16>, <16 x i16>* %22885, align 2, !tbaa !399
  %22887 = getelementptr inbounds i16, i16* %22883, i64 -16
  %22888 = bitcast i16* %22887 to <16 x i16>*
  %22889 = load <16 x i16>, <16 x i16>* %22888, align 2, !tbaa !399
  %22890 = add <16 x i16> %22857, %22847
  %22891 = add <16 x i16> %22890, %22867
  %22892 = add <16 x i16> %22891, %22876
  %22893 = add <16 x i16> %22892, %22886
  %22894 = add <16 x i16> %22860, %22850
  %22895 = add <16 x i16> %22894, %22870
  %22896 = add <16 x i16> %22895, %22879
  %22897 = add <16 x i16> %22896, %22889
  %22898 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22893, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22899 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22897, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22900 = shufflevector <16 x i16> %22898, <16 x i16> %22899, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22901 = lshr <32 x i16> %22900, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22902 = shufflevector <32 x i16> %22901, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22903 = sext i32 %a353 to i64
  %22904 = add nsw i64 %22903, 17
  %22905 = mul nsw i64 %22904, %307
  %22906 = add nsw i64 %309, %22905
  %22907 = getelementptr inbounds i16, i16* %260, i64 %22906
  %22908 = getelementptr inbounds i16, i16* %22907, i64 -32
  %22909 = bitcast i16* %22908 to <16 x i16>*
  store <16 x i16> %22902, <16 x i16>* %22909, align 2, !tbaa !401
  %22910 = shufflevector <32 x i16> %22901, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22911 = getelementptr inbounds i16, i16* %22907, i64 -16
  %22912 = bitcast i16* %22911 to <16 x i16>*
  store <16 x i16> %22910, <16 x i16>* %22912, align 2, !tbaa !401
  br label %after_bb1732

"for blur_y.s0.x.x.rebased1747":                  ; preds = %"for blur_y.s0.x.x.rebased1747.preheader", %"consume blur_x1756"
  %indvars.iv3326 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1747.preheader" ], [ %indvars.iv.next3327, %"consume blur_x1756" ]
  %22913 = add nsw i64 %indvars.iv3326, %295
  %22914 = icmp slt i64 %22913, 1
  %22915 = trunc i64 %22913 to i32
  %22916 = shl nsw i32 %22915, 5
  %22917 = icmp sgt i32 %198, %22916
  %22918 = or i1 %22914, %22917
  br i1 %22918, label %"produce blur_x1754", label %"for blur_y.s0.x.x.rebased1747.consume blur_x1756_crit_edge"

"for blur_y.s0.x.x.rebased1747.consume blur_x1756_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1747"
  %.pre3531 = shl nsw i64 %22913, 5
  br label %"consume blur_x1756"

"end for blur_y.s0.x.x.rebased1748":              ; preds = %"consume blur_x1756", %after_bb1732
  br i1 %296, label %"for blur_y.s0.x.x.rebased1764.preheader", label %"end for blur_y.s0.x.x.rebased1765", !prof !386

"for blur_y.s0.x.x.rebased1764.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1748"
  %22919 = sext i32 %t17221055 to i64
  %22920 = zext i32 %.pre-phi3476 to i64
  %22921 = mul nsw i64 %22920, %306
  %22922 = sub nsw i64 %22921, %290
  %22923 = zext i32 %.pre-phi3472 to i64
  %22924 = mul nsw i64 %22923, %306
  %22925 = sub nsw i64 %22924, %290
  %22926 = zext i32 %.pre-phi3480 to i64
  %22927 = mul nsw i64 %22926, %306
  %22928 = sub nsw i64 %22927, %290
  %22929 = zext i32 %.pre-phi3490 to i64
  %22930 = mul nsw i64 %22929, %306
  %22931 = sub nsw i64 %22930, %290
  %22932 = zext i32 %.pre-phi3484 to i64
  %22933 = mul nsw i64 %22932, %306
  %22934 = sub nsw i64 %22933, %290
  %22935 = sext i32 %a353 to i64
  %22936 = add nsw i64 %22935, 17
  %22937 = mul nsw i64 %22936, %307
  %22938 = add nsw i64 %22937, %310
  br label %"for blur_y.s0.x.x.rebased1764"

"produce blur_x1754":                             ; preds = %"for blur_y.s0.x.x.rebased1747"
  %t9841755 = add nsw i32 %22916, %t19771744
  %22939 = sext i32 %t9841755 to i64
  %22940 = getelementptr inbounds i16, i16* %read_input822, i64 %22939
  %22941 = getelementptr inbounds i16, i16* %22940, i64 1
  %22942 = bitcast i16* %22941 to <16 x i16>*
  %22943 = load <16 x i16>, <16 x i16>* %22942, align 2, !tbaa !396
  %22944 = getelementptr inbounds i16, i16* %22940, i64 17
  %22945 = bitcast i16* %22944 to <16 x i16>*
  %22946 = load <16 x i16>, <16 x i16>* %22945, align 2, !tbaa !396
  %22947 = bitcast i16* %22940 to <16 x i16>*
  %22948 = load <16 x i16>, <16 x i16>* %22947, align 2, !tbaa !396
  %22949 = getelementptr inbounds i16, i16* %22940, i64 16
  %22950 = bitcast i16* %22949 to <16 x i16>*
  %22951 = load <16 x i16>, <16 x i16>* %22950, align 2, !tbaa !396
  %22952 = getelementptr inbounds i16, i16* %22940, i64 2
  %22953 = bitcast i16* %22952 to <16 x i16>*
  %22954 = load <16 x i16>, <16 x i16>* %22953, align 2, !tbaa !396
  %22955 = getelementptr inbounds i16, i16* %22940, i64 18
  %22956 = bitcast i16* %22955 to <16 x i16>*
  %22957 = load <16 x i16>, <16 x i16>* %22956, align 2, !tbaa !396
  %22958 = getelementptr inbounds i16, i16* %22940, i64 4
  %22959 = bitcast i16* %22958 to <16 x i16>*
  %22960 = load <16 x i16>, <16 x i16>* %22959, align 2, !tbaa !396
  %22961 = getelementptr inbounds i16, i16* %22940, i64 20
  %22962 = bitcast i16* %22961 to <16 x i16>*
  %22963 = load <16 x i16>, <16 x i16>* %22962, align 2, !tbaa !396
  %22964 = getelementptr inbounds i16, i16* %22940, i64 3
  %22965 = bitcast i16* %22964 to <16 x i16>*
  %22966 = load <16 x i16>, <16 x i16>* %22965, align 2, !tbaa !396
  %22967 = getelementptr inbounds i16, i16* %22940, i64 19
  %22968 = bitcast i16* %22967 to <16 x i16>*
  %22969 = load <16 x i16>, <16 x i16>* %22968, align 2, !tbaa !396
  %22970 = add <16 x i16> %22948, %22943
  %22971 = add <16 x i16> %22970, %22954
  %22972 = add <16 x i16> %22971, %22960
  %22973 = add <16 x i16> %22972, %22966
  %22974 = add <16 x i16> %22951, %22946
  %22975 = add <16 x i16> %22974, %22957
  %22976 = add <16 x i16> %22975, %22963
  %22977 = add <16 x i16> %22976, %22969
  %22978 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22973, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22979 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %22977, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %22980 = shufflevector <16 x i16> %22978, <16 x i16> %22979, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22981 = lshr <32 x i16> %22980, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %22982 = shufflevector <32 x i16> %22981, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %22983 = shl nsw i64 %22913, 5
  %22984 = add nsw i64 %22983, %22768
  %22985 = getelementptr inbounds i16, i16* %blur_x879, i64 %22984
  %22986 = bitcast i16* %22985 to <16 x i16>*
  store <16 x i16> %22982, <16 x i16>* %22986, align 2, !tbaa !399
  %22987 = shufflevector <32 x i16> %22981, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %22988 = getelementptr inbounds i16, i16* %22985, i64 16
  %22989 = bitcast i16* %22988 to <16 x i16>*
  store <16 x i16> %22987, <16 x i16>* %22989, align 2, !tbaa !399
  br label %"consume blur_x1756"

"consume blur_x1756":                             ; preds = %"for blur_y.s0.x.x.rebased1747.consume blur_x1756_crit_edge", %"produce blur_x1754"
  %.pre-phi3532 = phi i64 [ %.pre3531, %"for blur_y.s0.x.x.rebased1747.consume blur_x1756_crit_edge" ], [ %22983, %"produce blur_x1754" ]
  %22990 = add nsw i64 %22771, %.pre-phi3532
  %22991 = getelementptr inbounds i16, i16* %blur_x879, i64 %22990
  %22992 = bitcast i16* %22991 to <16 x i16>*
  %22993 = load <16 x i16>, <16 x i16>* %22992, align 2, !tbaa !399
  %22994 = getelementptr inbounds i16, i16* %22991, i64 16
  %22995 = bitcast i16* %22994 to <16 x i16>*
  %22996 = load <16 x i16>, <16 x i16>* %22995, align 2, !tbaa !399
  %22997 = add nsw i64 %22774, %.pre-phi3532
  %22998 = getelementptr inbounds i16, i16* %blur_x879, i64 %22997
  %22999 = bitcast i16* %22998 to <16 x i16>*
  %23000 = load <16 x i16>, <16 x i16>* %22999, align 2, !tbaa !399
  %23001 = getelementptr inbounds i16, i16* %22998, i64 16
  %23002 = bitcast i16* %23001 to <16 x i16>*
  %23003 = load <16 x i16>, <16 x i16>* %23002, align 2, !tbaa !399
  %23004 = add nsw i64 %22777, %.pre-phi3532
  %23005 = getelementptr inbounds i16, i16* %blur_x879, i64 %23004
  %23006 = bitcast i16* %23005 to <16 x i16>*
  %23007 = load <16 x i16>, <16 x i16>* %23006, align 2, !tbaa !399
  %23008 = getelementptr inbounds i16, i16* %23005, i64 16
  %23009 = bitcast i16* %23008 to <16 x i16>*
  %23010 = load <16 x i16>, <16 x i16>* %23009, align 2, !tbaa !399
  %23011 = add nsw i64 %22780, %.pre-phi3532
  %23012 = getelementptr inbounds i16, i16* %blur_x879, i64 %23011
  %23013 = bitcast i16* %23012 to <16 x i16>*
  %23014 = load <16 x i16>, <16 x i16>* %23013, align 2, !tbaa !399
  %23015 = getelementptr inbounds i16, i16* %23012, i64 16
  %23016 = bitcast i16* %23015 to <16 x i16>*
  %23017 = load <16 x i16>, <16 x i16>* %23016, align 2, !tbaa !399
  %23018 = add nsw i64 %22783, %.pre-phi3532
  %23019 = getelementptr inbounds i16, i16* %blur_x879, i64 %23018
  %23020 = bitcast i16* %23019 to <16 x i16>*
  %23021 = load <16 x i16>, <16 x i16>* %23020, align 2, !tbaa !399
  %23022 = getelementptr inbounds i16, i16* %23019, i64 16
  %23023 = bitcast i16* %23022 to <16 x i16>*
  %23024 = load <16 x i16>, <16 x i16>* %23023, align 2, !tbaa !399
  %23025 = add <16 x i16> %23000, %22993
  %23026 = add <16 x i16> %23025, %23007
  %23027 = add <16 x i16> %23026, %23014
  %23028 = add <16 x i16> %23027, %23021
  %23029 = add <16 x i16> %23003, %22996
  %23030 = add <16 x i16> %23029, %23010
  %23031 = add <16 x i16> %23030, %23017
  %23032 = add <16 x i16> %23031, %23024
  %23033 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23028, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23034 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23032, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23035 = shufflevector <16 x i16> %23033, <16 x i16> %23034, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23036 = lshr <32 x i16> %23035, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23037 = shufflevector <32 x i16> %23036, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23038 = add nsw i64 %22787, %.pre-phi3532
  %23039 = getelementptr inbounds i16, i16* %260, i64 %23038
  %23040 = bitcast i16* %23039 to <16 x i16>*
  store <16 x i16> %23037, <16 x i16>* %23040, align 2, !tbaa !401
  %23041 = shufflevector <32 x i16> %23036, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23042 = getelementptr inbounds i16, i16* %23039, i64 16
  %23043 = bitcast i16* %23042 to <16 x i16>*
  store <16 x i16> %23041, <16 x i16>* %23043, align 2, !tbaa !401
  %indvars.iv.next3327 = add nuw nsw i64 %indvars.iv3326, 1
  %.not2570 = icmp eq i64 %indvars.iv.next3327, %378
  br i1 %.not2570, label %"end for blur_y.s0.x.x.rebased1748", label %"for blur_y.s0.x.x.rebased1747"

"for blur_y.s0.x.x.rebased1764":                  ; preds = %"for blur_y.s0.x.x.rebased1764.preheader", %"consume blur_x1774"
  %blur_y.s0.x.x.rebased1766 = phi i32 [ %23156, %"consume blur_x1774" ], [ 0, %"for blur_y.s0.x.x.rebased1764.preheader" ]
  %23044 = add nsw i32 %blur_y.s0.x.x.rebased1766, %t1626814
  %a551 = shl nsw i32 %23044, 5
  %23045 = icmp sgt i32 %a341, %a551
  %b557 = select i1 %23045, i32 %a551, i32 %a341
  %23046 = icmp slt i32 %23044, 1
  %23047 = icmp sgt i32 %198, %a551
  %23048 = or i1 %23046, %23047
  br i1 %23048, label %"produce blur_x1771", label %"consume blur_x1774"

"end for blur_y.s0.x.x.rebased1765":              ; preds = %"consume blur_x1774", %"end for blur_y.s0.x.x.rebased1748"
  br i1 %228, label %"produce blur_x1778", label %after_bb1775

"produce blur_x1771":                             ; preds = %"for blur_y.s0.x.x.rebased1764"
  %23049 = icmp slt i32 %b557, %198
  %blur_x.s0.x.v1.base.s1772 = select i1 %23049, i32 %b557, i32 %198
  %t9891773 = add nsw i32 %blur_x.s0.x.v1.base.s1772, %t19771744
  %23050 = sext i32 %t9891773 to i64
  %23051 = getelementptr inbounds i16, i16* %read_input822, i64 %23050
  %23052 = getelementptr inbounds i16, i16* %23051, i64 1
  %23053 = bitcast i16* %23052 to <16 x i16>*
  %23054 = load <16 x i16>, <16 x i16>* %23053, align 2, !tbaa !396
  %23055 = getelementptr inbounds i16, i16* %23051, i64 17
  %23056 = bitcast i16* %23055 to <16 x i16>*
  %23057 = load <16 x i16>, <16 x i16>* %23056, align 2, !tbaa !396
  %23058 = bitcast i16* %23051 to <16 x i16>*
  %23059 = load <16 x i16>, <16 x i16>* %23058, align 2, !tbaa !396
  %23060 = getelementptr inbounds i16, i16* %23051, i64 16
  %23061 = bitcast i16* %23060 to <16 x i16>*
  %23062 = load <16 x i16>, <16 x i16>* %23061, align 2, !tbaa !396
  %23063 = getelementptr inbounds i16, i16* %23051, i64 2
  %23064 = bitcast i16* %23063 to <16 x i16>*
  %23065 = load <16 x i16>, <16 x i16>* %23064, align 2, !tbaa !396
  %23066 = getelementptr inbounds i16, i16* %23051, i64 18
  %23067 = bitcast i16* %23066 to <16 x i16>*
  %23068 = load <16 x i16>, <16 x i16>* %23067, align 2, !tbaa !396
  %23069 = getelementptr inbounds i16, i16* %23051, i64 4
  %23070 = bitcast i16* %23069 to <16 x i16>*
  %23071 = load <16 x i16>, <16 x i16>* %23070, align 2, !tbaa !396
  %23072 = getelementptr inbounds i16, i16* %23051, i64 20
  %23073 = bitcast i16* %23072 to <16 x i16>*
  %23074 = load <16 x i16>, <16 x i16>* %23073, align 2, !tbaa !396
  %23075 = getelementptr inbounds i16, i16* %23051, i64 3
  %23076 = bitcast i16* %23075 to <16 x i16>*
  %23077 = load <16 x i16>, <16 x i16>* %23076, align 2, !tbaa !396
  %23078 = getelementptr inbounds i16, i16* %23051, i64 19
  %23079 = bitcast i16* %23078 to <16 x i16>*
  %23080 = load <16 x i16>, <16 x i16>* %23079, align 2, !tbaa !396
  %23081 = add <16 x i16> %23059, %23054
  %23082 = add <16 x i16> %23081, %23065
  %23083 = add <16 x i16> %23082, %23071
  %23084 = add <16 x i16> %23083, %23077
  %23085 = add <16 x i16> %23062, %23057
  %23086 = add <16 x i16> %23085, %23068
  %23087 = add <16 x i16> %23086, %23074
  %23088 = add <16 x i16> %23087, %23080
  %23089 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23084, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23090 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23088, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23091 = shufflevector <16 x i16> %23089, <16 x i16> %23090, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23092 = lshr <32 x i16> %23091, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23093 = shufflevector <32 x i16> %23092, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23094 = sext i32 %blur_x.s0.x.v1.base.s1772 to i64
  %23095 = add nsw i64 %23094, %22919
  %23096 = getelementptr inbounds i16, i16* %blur_x879, i64 %23095
  %23097 = bitcast i16* %23096 to <16 x i16>*
  store <16 x i16> %23093, <16 x i16>* %23097, align 2, !tbaa !399
  %23098 = shufflevector <32 x i16> %23092, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23099 = getelementptr inbounds i16, i16* %23096, i64 16
  %23100 = bitcast i16* %23099 to <16 x i16>*
  store <16 x i16> %23098, <16 x i16>* %23100, align 2, !tbaa !399
  br label %"consume blur_x1774"

"consume blur_x1774":                             ; preds = %"for blur_y.s0.x.x.rebased1764", %"produce blur_x1771"
  %23101 = sext i32 %b557 to i64
  %23102 = add nsw i64 %22922, %23101
  %23103 = getelementptr inbounds i16, i16* %blur_x879, i64 %23102
  %23104 = bitcast i16* %23103 to <16 x i16>*
  %23105 = load <16 x i16>, <16 x i16>* %23104, align 2, !tbaa !399
  %23106 = getelementptr inbounds i16, i16* %23103, i64 16
  %23107 = bitcast i16* %23106 to <16 x i16>*
  %23108 = load <16 x i16>, <16 x i16>* %23107, align 2, !tbaa !399
  %23109 = add nsw i64 %22925, %23101
  %23110 = getelementptr inbounds i16, i16* %blur_x879, i64 %23109
  %23111 = bitcast i16* %23110 to <16 x i16>*
  %23112 = load <16 x i16>, <16 x i16>* %23111, align 2, !tbaa !399
  %23113 = getelementptr inbounds i16, i16* %23110, i64 16
  %23114 = bitcast i16* %23113 to <16 x i16>*
  %23115 = load <16 x i16>, <16 x i16>* %23114, align 2, !tbaa !399
  %23116 = add nsw i64 %22928, %23101
  %23117 = getelementptr inbounds i16, i16* %blur_x879, i64 %23116
  %23118 = bitcast i16* %23117 to <16 x i16>*
  %23119 = load <16 x i16>, <16 x i16>* %23118, align 2, !tbaa !399
  %23120 = getelementptr inbounds i16, i16* %23117, i64 16
  %23121 = bitcast i16* %23120 to <16 x i16>*
  %23122 = load <16 x i16>, <16 x i16>* %23121, align 2, !tbaa !399
  %23123 = add nsw i64 %22931, %23101
  %23124 = getelementptr inbounds i16, i16* %blur_x879, i64 %23123
  %23125 = bitcast i16* %23124 to <16 x i16>*
  %23126 = load <16 x i16>, <16 x i16>* %23125, align 2, !tbaa !399
  %23127 = getelementptr inbounds i16, i16* %23124, i64 16
  %23128 = bitcast i16* %23127 to <16 x i16>*
  %23129 = load <16 x i16>, <16 x i16>* %23128, align 2, !tbaa !399
  %23130 = add nsw i64 %22934, %23101
  %23131 = getelementptr inbounds i16, i16* %blur_x879, i64 %23130
  %23132 = bitcast i16* %23131 to <16 x i16>*
  %23133 = load <16 x i16>, <16 x i16>* %23132, align 2, !tbaa !399
  %23134 = getelementptr inbounds i16, i16* %23131, i64 16
  %23135 = bitcast i16* %23134 to <16 x i16>*
  %23136 = load <16 x i16>, <16 x i16>* %23135, align 2, !tbaa !399
  %23137 = add <16 x i16> %23112, %23105
  %23138 = add <16 x i16> %23137, %23119
  %23139 = add <16 x i16> %23138, %23126
  %23140 = add <16 x i16> %23139, %23133
  %23141 = add <16 x i16> %23115, %23108
  %23142 = add <16 x i16> %23141, %23122
  %23143 = add <16 x i16> %23142, %23129
  %23144 = add <16 x i16> %23143, %23136
  %23145 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23140, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23146 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23144, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23147 = shufflevector <16 x i16> %23145, <16 x i16> %23146, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23148 = lshr <32 x i16> %23147, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23149 = shufflevector <32 x i16> %23148, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23150 = add nsw i64 %22938, %23101
  %23151 = getelementptr inbounds i16, i16* %260, i64 %23150
  %23152 = bitcast i16* %23151 to <16 x i16>*
  store <16 x i16> %23149, <16 x i16>* %23152, align 2, !tbaa !401
  %23153 = shufflevector <32 x i16> %23148, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23154 = getelementptr inbounds i16, i16* %23151, i64 16
  %23155 = bitcast i16* %23154 to <16 x i16>*
  store <16 x i16> %23153, <16 x i16>* %23155, align 2, !tbaa !401
  %23156 = add nuw nsw i32 %blur_y.s0.x.x.rebased1766, 1
  %.not2569 = icmp eq i32 %23156, %t1683899
  br i1 %.not2569, label %"end for blur_y.s0.x.x.rebased1765", label %"for blur_y.s0.x.x.rebased1764"

after_bb1775:                                     ; preds = %"end for blur_y.s0.x.x.rebased1765", %"produce blur_x1778"
  br i1 %294, label %"for blur_y.s0.x.x.rebased1790.preheader", label %"end for blur_y.s0.x.x.rebased1791", !prof !386

"for blur_y.s0.x.x.rebased1790.preheader":        ; preds = %after_bb1775
  %23157 = sext i32 %t17381098 to i64
  %23158 = zext i32 %.pre-phi3480 to i64
  %23159 = mul nsw i64 %23158, %306
  %23160 = sub nsw i64 %23159, %290
  %23161 = zext i32 %.pre-phi3476 to i64
  %23162 = mul nsw i64 %23161, %306
  %23163 = sub nsw i64 %23162, %290
  %23164 = zext i32 %.pre-phi3484 to i64
  %23165 = mul nsw i64 %23164, %306
  %23166 = sub nsw i64 %23165, %290
  %23167 = zext i32 %.pre-phi3496 to i64
  %23168 = mul nsw i64 %23167, %306
  %23169 = sub nsw i64 %23168, %290
  %23170 = zext i32 %.pre-phi3490 to i64
  %23171 = mul nsw i64 %23170, %306
  %23172 = sub nsw i64 %23171, %290
  %23173 = sext i32 %a353 to i64
  %23174 = add nsw i64 %23173, 18
  %23175 = mul nsw i64 %23174, %307
  %23176 = add nsw i64 %23175, %310
  br label %"for blur_y.s0.x.x.rebased1790"

"produce blur_x1778":                             ; preds = %"end for blur_y.s0.x.x.rebased1765"
  %23177 = getelementptr inbounds i16, i16* %read_input822, i64 %345
  %23178 = getelementptr inbounds i16, i16* %23177, i64 -31
  %23179 = bitcast i16* %23178 to <16 x i16>*
  %23180 = load <16 x i16>, <16 x i16>* %23179, align 2, !tbaa !396
  %23181 = getelementptr inbounds i16, i16* %23177, i64 -15
  %23182 = bitcast i16* %23181 to <16 x i16>*
  %23183 = load <16 x i16>, <16 x i16>* %23182, align 2, !tbaa !396
  %23184 = getelementptr inbounds i16, i16* %23177, i64 -32
  %23185 = bitcast i16* %23184 to <16 x i16>*
  %23186 = load <16 x i16>, <16 x i16>* %23185, align 2, !tbaa !396
  %23187 = getelementptr inbounds i16, i16* %23177, i64 -16
  %23188 = bitcast i16* %23187 to <16 x i16>*
  %23189 = load <16 x i16>, <16 x i16>* %23188, align 2, !tbaa !396
  %23190 = getelementptr inbounds i16, i16* %23177, i64 -30
  %23191 = bitcast i16* %23190 to <16 x i16>*
  %23192 = load <16 x i16>, <16 x i16>* %23191, align 2, !tbaa !396
  %23193 = getelementptr inbounds i16, i16* %23177, i64 -14
  %23194 = bitcast i16* %23193 to <16 x i16>*
  %23195 = load <16 x i16>, <16 x i16>* %23194, align 2, !tbaa !396
  %23196 = getelementptr inbounds i16, i16* %23177, i64 -28
  %23197 = bitcast i16* %23196 to <16 x i16>*
  %23198 = load <16 x i16>, <16 x i16>* %23197, align 2, !tbaa !396
  %23199 = getelementptr inbounds i16, i16* %23177, i64 -12
  %23200 = bitcast i16* %23199 to <16 x i16>*
  %23201 = load <16 x i16>, <16 x i16>* %23200, align 2, !tbaa !396
  %23202 = getelementptr inbounds i16, i16* %23177, i64 -29
  %23203 = bitcast i16* %23202 to <16 x i16>*
  %23204 = load <16 x i16>, <16 x i16>* %23203, align 2, !tbaa !396
  %23205 = getelementptr inbounds i16, i16* %23177, i64 -13
  %23206 = bitcast i16* %23205 to <16 x i16>*
  %23207 = load <16 x i16>, <16 x i16>* %23206, align 2, !tbaa !396
  %23208 = add <16 x i16> %23186, %23180
  %23209 = add <16 x i16> %23208, %23192
  %23210 = add <16 x i16> %23209, %23198
  %23211 = add <16 x i16> %23210, %23204
  %23212 = add <16 x i16> %23189, %23183
  %23213 = add <16 x i16> %23212, %23195
  %23214 = add <16 x i16> %23213, %23201
  %23215 = add <16 x i16> %23214, %23207
  %23216 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23211, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23217 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23215, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23218 = shufflevector <16 x i16> %23216, <16 x i16> %23217, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23219 = lshr <32 x i16> %23218, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23220 = shufflevector <32 x i16> %23219, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23221 = zext i32 %.pre-phi3496 to i64
  %23222 = mul nsw i64 %291, %23221
  %23223 = add nsw i64 %293, %23222
  %23224 = getelementptr inbounds i16, i16* %blur_x879, i64 %23223
  %23225 = getelementptr inbounds i16, i16* %23224, i64 -32
  %23226 = bitcast i16* %23225 to <16 x i16>*
  store <16 x i16> %23220, <16 x i16>* %23226, align 2, !tbaa !399
  %23227 = shufflevector <32 x i16> %23219, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23228 = getelementptr inbounds i16, i16* %23224, i64 -16
  %23229 = bitcast i16* %23228 to <16 x i16>*
  store <16 x i16> %23227, <16 x i16>* %23229, align 2, !tbaa !399
  %23230 = zext i32 %.pre-phi3480 to i64
  %23231 = mul nsw i64 %23230, %306
  %23232 = add nsw i64 %23231, %288
  %23233 = getelementptr inbounds i16, i16* %blur_x879, i64 %23232
  %23234 = getelementptr inbounds i16, i16* %23233, i64 -32
  %23235 = bitcast i16* %23234 to <16 x i16>*
  %23236 = load <16 x i16>, <16 x i16>* %23235, align 2, !tbaa !399
  %23237 = getelementptr inbounds i16, i16* %23233, i64 -16
  %23238 = bitcast i16* %23237 to <16 x i16>*
  %23239 = load <16 x i16>, <16 x i16>* %23238, align 2, !tbaa !399
  %23240 = zext i32 %.pre-phi3476 to i64
  %23241 = mul nsw i64 %23240, %306
  %23242 = add nsw i64 %23241, %288
  %23243 = getelementptr inbounds i16, i16* %blur_x879, i64 %23242
  %23244 = getelementptr inbounds i16, i16* %23243, i64 -32
  %23245 = bitcast i16* %23244 to <16 x i16>*
  %23246 = load <16 x i16>, <16 x i16>* %23245, align 2, !tbaa !399
  %23247 = getelementptr inbounds i16, i16* %23243, i64 -16
  %23248 = bitcast i16* %23247 to <16 x i16>*
  %23249 = load <16 x i16>, <16 x i16>* %23248, align 2, !tbaa !399
  %23250 = zext i32 %.pre-phi3484 to i64
  %23251 = mul nsw i64 %23250, %306
  %23252 = add nsw i64 %23251, %288
  %23253 = getelementptr inbounds i16, i16* %blur_x879, i64 %23252
  %23254 = getelementptr inbounds i16, i16* %23253, i64 -32
  %23255 = bitcast i16* %23254 to <16 x i16>*
  %23256 = load <16 x i16>, <16 x i16>* %23255, align 2, !tbaa !399
  %23257 = getelementptr inbounds i16, i16* %23253, i64 -16
  %23258 = bitcast i16* %23257 to <16 x i16>*
  %23259 = load <16 x i16>, <16 x i16>* %23258, align 2, !tbaa !399
  %23260 = mul nsw i64 %23221, %306
  %23261 = add nsw i64 %23260, %288
  %23262 = getelementptr inbounds i16, i16* %blur_x879, i64 %23261
  %23263 = getelementptr inbounds i16, i16* %23262, i64 -32
  %23264 = bitcast i16* %23263 to <16 x i16>*
  %23265 = load <16 x i16>, <16 x i16>* %23264, align 2, !tbaa !399
  %23266 = getelementptr inbounds i16, i16* %23262, i64 -16
  %23267 = bitcast i16* %23266 to <16 x i16>*
  %23268 = load <16 x i16>, <16 x i16>* %23267, align 2, !tbaa !399
  %23269 = zext i32 %.pre-phi3490 to i64
  %23270 = mul nsw i64 %23269, %306
  %23271 = add nsw i64 %23270, %288
  %23272 = getelementptr inbounds i16, i16* %blur_x879, i64 %23271
  %23273 = getelementptr inbounds i16, i16* %23272, i64 -32
  %23274 = bitcast i16* %23273 to <16 x i16>*
  %23275 = load <16 x i16>, <16 x i16>* %23274, align 2, !tbaa !399
  %23276 = getelementptr inbounds i16, i16* %23272, i64 -16
  %23277 = bitcast i16* %23276 to <16 x i16>*
  %23278 = load <16 x i16>, <16 x i16>* %23277, align 2, !tbaa !399
  %23279 = add <16 x i16> %23246, %23236
  %23280 = add <16 x i16> %23279, %23256
  %23281 = add <16 x i16> %23280, %23265
  %23282 = add <16 x i16> %23281, %23275
  %23283 = add <16 x i16> %23249, %23239
  %23284 = add <16 x i16> %23283, %23259
  %23285 = add <16 x i16> %23284, %23268
  %23286 = add <16 x i16> %23285, %23278
  %23287 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23282, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23288 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23286, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23289 = shufflevector <16 x i16> %23287, <16 x i16> %23288, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23290 = lshr <32 x i16> %23289, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23291 = shufflevector <32 x i16> %23290, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23292 = sext i32 %a353 to i64
  %23293 = add nsw i64 %23292, 18
  %23294 = mul nsw i64 %23293, %307
  %23295 = add nsw i64 %309, %23294
  %23296 = getelementptr inbounds i16, i16* %260, i64 %23295
  %23297 = getelementptr inbounds i16, i16* %23296, i64 -32
  %23298 = bitcast i16* %23297 to <16 x i16>*
  store <16 x i16> %23291, <16 x i16>* %23298, align 2, !tbaa !401
  %23299 = shufflevector <32 x i16> %23290, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23300 = getelementptr inbounds i16, i16* %23296, i64 -16
  %23301 = bitcast i16* %23300 to <16 x i16>*
  store <16 x i16> %23299, <16 x i16>* %23301, align 2, !tbaa !401
  br label %after_bb1775

"for blur_y.s0.x.x.rebased1790":                  ; preds = %"for blur_y.s0.x.x.rebased1790.preheader", %"consume blur_x1799"
  %indvars.iv3329 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1790.preheader" ], [ %indvars.iv.next3330, %"consume blur_x1799" ]
  %23302 = add nsw i64 %indvars.iv3329, %295
  %23303 = icmp slt i64 %23302, 1
  %23304 = trunc i64 %23302 to i32
  %23305 = shl nsw i32 %23304, 5
  %23306 = icmp sgt i32 %198, %23305
  %23307 = or i1 %23303, %23306
  br i1 %23307, label %"produce blur_x1797", label %"for blur_y.s0.x.x.rebased1790.consume blur_x1799_crit_edge"

"for blur_y.s0.x.x.rebased1790.consume blur_x1799_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1790"
  %.pre3533 = shl nsw i64 %23302, 5
  br label %"consume blur_x1799"

"end for blur_y.s0.x.x.rebased1791":              ; preds = %"consume blur_x1799", %after_bb1775
  br i1 %296, label %"for blur_y.s0.x.x.rebased1807.preheader", label %"end for blur_y.s0.x.x.rebased1808", !prof !386

"for blur_y.s0.x.x.rebased1807.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1791"
  %23308 = sext i32 %t17381098 to i64
  %23309 = zext i32 %.pre-phi3480 to i64
  %23310 = mul nsw i64 %23309, %306
  %23311 = sub nsw i64 %23310, %290
  %23312 = zext i32 %.pre-phi3476 to i64
  %23313 = mul nsw i64 %23312, %306
  %23314 = sub nsw i64 %23313, %290
  %23315 = zext i32 %.pre-phi3484 to i64
  %23316 = mul nsw i64 %23315, %306
  %23317 = sub nsw i64 %23316, %290
  %23318 = zext i32 %.pre-phi3496 to i64
  %23319 = mul nsw i64 %23318, %306
  %23320 = sub nsw i64 %23319, %290
  %23321 = zext i32 %.pre-phi3490 to i64
  %23322 = mul nsw i64 %23321, %306
  %23323 = sub nsw i64 %23322, %290
  %23324 = sext i32 %a353 to i64
  %23325 = add nsw i64 %23324, 18
  %23326 = mul nsw i64 %23325, %307
  %23327 = add nsw i64 %23326, %310
  br label %"for blur_y.s0.x.x.rebased1807"

"produce blur_x1797":                             ; preds = %"for blur_y.s0.x.x.rebased1790"
  %t10001798 = add nsw i32 %23305, %t19931787
  %23328 = sext i32 %t10001798 to i64
  %23329 = getelementptr inbounds i16, i16* %read_input822, i64 %23328
  %23330 = getelementptr inbounds i16, i16* %23329, i64 1
  %23331 = bitcast i16* %23330 to <16 x i16>*
  %23332 = load <16 x i16>, <16 x i16>* %23331, align 2, !tbaa !396
  %23333 = getelementptr inbounds i16, i16* %23329, i64 17
  %23334 = bitcast i16* %23333 to <16 x i16>*
  %23335 = load <16 x i16>, <16 x i16>* %23334, align 2, !tbaa !396
  %23336 = bitcast i16* %23329 to <16 x i16>*
  %23337 = load <16 x i16>, <16 x i16>* %23336, align 2, !tbaa !396
  %23338 = getelementptr inbounds i16, i16* %23329, i64 16
  %23339 = bitcast i16* %23338 to <16 x i16>*
  %23340 = load <16 x i16>, <16 x i16>* %23339, align 2, !tbaa !396
  %23341 = getelementptr inbounds i16, i16* %23329, i64 2
  %23342 = bitcast i16* %23341 to <16 x i16>*
  %23343 = load <16 x i16>, <16 x i16>* %23342, align 2, !tbaa !396
  %23344 = getelementptr inbounds i16, i16* %23329, i64 18
  %23345 = bitcast i16* %23344 to <16 x i16>*
  %23346 = load <16 x i16>, <16 x i16>* %23345, align 2, !tbaa !396
  %23347 = getelementptr inbounds i16, i16* %23329, i64 4
  %23348 = bitcast i16* %23347 to <16 x i16>*
  %23349 = load <16 x i16>, <16 x i16>* %23348, align 2, !tbaa !396
  %23350 = getelementptr inbounds i16, i16* %23329, i64 20
  %23351 = bitcast i16* %23350 to <16 x i16>*
  %23352 = load <16 x i16>, <16 x i16>* %23351, align 2, !tbaa !396
  %23353 = getelementptr inbounds i16, i16* %23329, i64 3
  %23354 = bitcast i16* %23353 to <16 x i16>*
  %23355 = load <16 x i16>, <16 x i16>* %23354, align 2, !tbaa !396
  %23356 = getelementptr inbounds i16, i16* %23329, i64 19
  %23357 = bitcast i16* %23356 to <16 x i16>*
  %23358 = load <16 x i16>, <16 x i16>* %23357, align 2, !tbaa !396
  %23359 = add <16 x i16> %23337, %23332
  %23360 = add <16 x i16> %23359, %23343
  %23361 = add <16 x i16> %23360, %23349
  %23362 = add <16 x i16> %23361, %23355
  %23363 = add <16 x i16> %23340, %23335
  %23364 = add <16 x i16> %23363, %23346
  %23365 = add <16 x i16> %23364, %23352
  %23366 = add <16 x i16> %23365, %23358
  %23367 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23362, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23368 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23366, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23369 = shufflevector <16 x i16> %23367, <16 x i16> %23368, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23370 = lshr <32 x i16> %23369, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23371 = shufflevector <32 x i16> %23370, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23372 = shl nsw i64 %23302, 5
  %23373 = add nsw i64 %23372, %23157
  %23374 = getelementptr inbounds i16, i16* %blur_x879, i64 %23373
  %23375 = bitcast i16* %23374 to <16 x i16>*
  store <16 x i16> %23371, <16 x i16>* %23375, align 2, !tbaa !399
  %23376 = shufflevector <32 x i16> %23370, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23377 = getelementptr inbounds i16, i16* %23374, i64 16
  %23378 = bitcast i16* %23377 to <16 x i16>*
  store <16 x i16> %23376, <16 x i16>* %23378, align 2, !tbaa !399
  br label %"consume blur_x1799"

"consume blur_x1799":                             ; preds = %"for blur_y.s0.x.x.rebased1790.consume blur_x1799_crit_edge", %"produce blur_x1797"
  %.pre-phi3534 = phi i64 [ %.pre3533, %"for blur_y.s0.x.x.rebased1790.consume blur_x1799_crit_edge" ], [ %23372, %"produce blur_x1797" ]
  %23379 = add nsw i64 %23160, %.pre-phi3534
  %23380 = getelementptr inbounds i16, i16* %blur_x879, i64 %23379
  %23381 = bitcast i16* %23380 to <16 x i16>*
  %23382 = load <16 x i16>, <16 x i16>* %23381, align 2, !tbaa !399
  %23383 = getelementptr inbounds i16, i16* %23380, i64 16
  %23384 = bitcast i16* %23383 to <16 x i16>*
  %23385 = load <16 x i16>, <16 x i16>* %23384, align 2, !tbaa !399
  %23386 = add nsw i64 %23163, %.pre-phi3534
  %23387 = getelementptr inbounds i16, i16* %blur_x879, i64 %23386
  %23388 = bitcast i16* %23387 to <16 x i16>*
  %23389 = load <16 x i16>, <16 x i16>* %23388, align 2, !tbaa !399
  %23390 = getelementptr inbounds i16, i16* %23387, i64 16
  %23391 = bitcast i16* %23390 to <16 x i16>*
  %23392 = load <16 x i16>, <16 x i16>* %23391, align 2, !tbaa !399
  %23393 = add nsw i64 %23166, %.pre-phi3534
  %23394 = getelementptr inbounds i16, i16* %blur_x879, i64 %23393
  %23395 = bitcast i16* %23394 to <16 x i16>*
  %23396 = load <16 x i16>, <16 x i16>* %23395, align 2, !tbaa !399
  %23397 = getelementptr inbounds i16, i16* %23394, i64 16
  %23398 = bitcast i16* %23397 to <16 x i16>*
  %23399 = load <16 x i16>, <16 x i16>* %23398, align 2, !tbaa !399
  %23400 = add nsw i64 %23169, %.pre-phi3534
  %23401 = getelementptr inbounds i16, i16* %blur_x879, i64 %23400
  %23402 = bitcast i16* %23401 to <16 x i16>*
  %23403 = load <16 x i16>, <16 x i16>* %23402, align 2, !tbaa !399
  %23404 = getelementptr inbounds i16, i16* %23401, i64 16
  %23405 = bitcast i16* %23404 to <16 x i16>*
  %23406 = load <16 x i16>, <16 x i16>* %23405, align 2, !tbaa !399
  %23407 = add nsw i64 %23172, %.pre-phi3534
  %23408 = getelementptr inbounds i16, i16* %blur_x879, i64 %23407
  %23409 = bitcast i16* %23408 to <16 x i16>*
  %23410 = load <16 x i16>, <16 x i16>* %23409, align 2, !tbaa !399
  %23411 = getelementptr inbounds i16, i16* %23408, i64 16
  %23412 = bitcast i16* %23411 to <16 x i16>*
  %23413 = load <16 x i16>, <16 x i16>* %23412, align 2, !tbaa !399
  %23414 = add <16 x i16> %23389, %23382
  %23415 = add <16 x i16> %23414, %23396
  %23416 = add <16 x i16> %23415, %23403
  %23417 = add <16 x i16> %23416, %23410
  %23418 = add <16 x i16> %23392, %23385
  %23419 = add <16 x i16> %23418, %23399
  %23420 = add <16 x i16> %23419, %23406
  %23421 = add <16 x i16> %23420, %23413
  %23422 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23417, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23423 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23421, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23424 = shufflevector <16 x i16> %23422, <16 x i16> %23423, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23425 = lshr <32 x i16> %23424, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23426 = shufflevector <32 x i16> %23425, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23427 = add nsw i64 %23176, %.pre-phi3534
  %23428 = getelementptr inbounds i16, i16* %260, i64 %23427
  %23429 = bitcast i16* %23428 to <16 x i16>*
  store <16 x i16> %23426, <16 x i16>* %23429, align 2, !tbaa !401
  %23430 = shufflevector <32 x i16> %23425, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23431 = getelementptr inbounds i16, i16* %23428, i64 16
  %23432 = bitcast i16* %23431 to <16 x i16>*
  store <16 x i16> %23430, <16 x i16>* %23432, align 2, !tbaa !401
  %indvars.iv.next3330 = add nuw nsw i64 %indvars.iv3329, 1
  %.not2568 = icmp eq i64 %indvars.iv.next3330, %378
  br i1 %.not2568, label %"end for blur_y.s0.x.x.rebased1791", label %"for blur_y.s0.x.x.rebased1790"

"for blur_y.s0.x.x.rebased1807":                  ; preds = %"for blur_y.s0.x.x.rebased1807.preheader", %"consume blur_x1817"
  %blur_y.s0.x.x.rebased1809 = phi i32 [ %23545, %"consume blur_x1817" ], [ 0, %"for blur_y.s0.x.x.rebased1807.preheader" ]
  %23433 = add nsw i32 %blur_y.s0.x.x.rebased1809, %t1626814
  %a558 = shl nsw i32 %23433, 5
  %23434 = icmp sgt i32 %a341, %a558
  %b564 = select i1 %23434, i32 %a558, i32 %a341
  %23435 = icmp slt i32 %23433, 1
  %23436 = icmp sgt i32 %198, %a558
  %23437 = or i1 %23435, %23436
  br i1 %23437, label %"produce blur_x1814", label %"consume blur_x1817"

"end for blur_y.s0.x.x.rebased1808":              ; preds = %"consume blur_x1817", %"end for blur_y.s0.x.x.rebased1791"
  br i1 %228, label %"produce blur_x1821", label %after_bb1818

"produce blur_x1814":                             ; preds = %"for blur_y.s0.x.x.rebased1807"
  %23438 = icmp slt i32 %b564, %198
  %blur_x.s0.x.v1.base.s1815 = select i1 %23438, i32 %b564, i32 %198
  %t10051816 = add nsw i32 %blur_x.s0.x.v1.base.s1815, %t19931787
  %23439 = sext i32 %t10051816 to i64
  %23440 = getelementptr inbounds i16, i16* %read_input822, i64 %23439
  %23441 = getelementptr inbounds i16, i16* %23440, i64 1
  %23442 = bitcast i16* %23441 to <16 x i16>*
  %23443 = load <16 x i16>, <16 x i16>* %23442, align 2, !tbaa !396
  %23444 = getelementptr inbounds i16, i16* %23440, i64 17
  %23445 = bitcast i16* %23444 to <16 x i16>*
  %23446 = load <16 x i16>, <16 x i16>* %23445, align 2, !tbaa !396
  %23447 = bitcast i16* %23440 to <16 x i16>*
  %23448 = load <16 x i16>, <16 x i16>* %23447, align 2, !tbaa !396
  %23449 = getelementptr inbounds i16, i16* %23440, i64 16
  %23450 = bitcast i16* %23449 to <16 x i16>*
  %23451 = load <16 x i16>, <16 x i16>* %23450, align 2, !tbaa !396
  %23452 = getelementptr inbounds i16, i16* %23440, i64 2
  %23453 = bitcast i16* %23452 to <16 x i16>*
  %23454 = load <16 x i16>, <16 x i16>* %23453, align 2, !tbaa !396
  %23455 = getelementptr inbounds i16, i16* %23440, i64 18
  %23456 = bitcast i16* %23455 to <16 x i16>*
  %23457 = load <16 x i16>, <16 x i16>* %23456, align 2, !tbaa !396
  %23458 = getelementptr inbounds i16, i16* %23440, i64 4
  %23459 = bitcast i16* %23458 to <16 x i16>*
  %23460 = load <16 x i16>, <16 x i16>* %23459, align 2, !tbaa !396
  %23461 = getelementptr inbounds i16, i16* %23440, i64 20
  %23462 = bitcast i16* %23461 to <16 x i16>*
  %23463 = load <16 x i16>, <16 x i16>* %23462, align 2, !tbaa !396
  %23464 = getelementptr inbounds i16, i16* %23440, i64 3
  %23465 = bitcast i16* %23464 to <16 x i16>*
  %23466 = load <16 x i16>, <16 x i16>* %23465, align 2, !tbaa !396
  %23467 = getelementptr inbounds i16, i16* %23440, i64 19
  %23468 = bitcast i16* %23467 to <16 x i16>*
  %23469 = load <16 x i16>, <16 x i16>* %23468, align 2, !tbaa !396
  %23470 = add <16 x i16> %23448, %23443
  %23471 = add <16 x i16> %23470, %23454
  %23472 = add <16 x i16> %23471, %23460
  %23473 = add <16 x i16> %23472, %23466
  %23474 = add <16 x i16> %23451, %23446
  %23475 = add <16 x i16> %23474, %23457
  %23476 = add <16 x i16> %23475, %23463
  %23477 = add <16 x i16> %23476, %23469
  %23478 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23473, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23479 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23477, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23480 = shufflevector <16 x i16> %23478, <16 x i16> %23479, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23481 = lshr <32 x i16> %23480, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23482 = shufflevector <32 x i16> %23481, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23483 = sext i32 %blur_x.s0.x.v1.base.s1815 to i64
  %23484 = add nsw i64 %23483, %23308
  %23485 = getelementptr inbounds i16, i16* %blur_x879, i64 %23484
  %23486 = bitcast i16* %23485 to <16 x i16>*
  store <16 x i16> %23482, <16 x i16>* %23486, align 2, !tbaa !399
  %23487 = shufflevector <32 x i16> %23481, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23488 = getelementptr inbounds i16, i16* %23485, i64 16
  %23489 = bitcast i16* %23488 to <16 x i16>*
  store <16 x i16> %23487, <16 x i16>* %23489, align 2, !tbaa !399
  br label %"consume blur_x1817"

"consume blur_x1817":                             ; preds = %"for blur_y.s0.x.x.rebased1807", %"produce blur_x1814"
  %23490 = sext i32 %b564 to i64
  %23491 = add nsw i64 %23311, %23490
  %23492 = getelementptr inbounds i16, i16* %blur_x879, i64 %23491
  %23493 = bitcast i16* %23492 to <16 x i16>*
  %23494 = load <16 x i16>, <16 x i16>* %23493, align 2, !tbaa !399
  %23495 = getelementptr inbounds i16, i16* %23492, i64 16
  %23496 = bitcast i16* %23495 to <16 x i16>*
  %23497 = load <16 x i16>, <16 x i16>* %23496, align 2, !tbaa !399
  %23498 = add nsw i64 %23314, %23490
  %23499 = getelementptr inbounds i16, i16* %blur_x879, i64 %23498
  %23500 = bitcast i16* %23499 to <16 x i16>*
  %23501 = load <16 x i16>, <16 x i16>* %23500, align 2, !tbaa !399
  %23502 = getelementptr inbounds i16, i16* %23499, i64 16
  %23503 = bitcast i16* %23502 to <16 x i16>*
  %23504 = load <16 x i16>, <16 x i16>* %23503, align 2, !tbaa !399
  %23505 = add nsw i64 %23317, %23490
  %23506 = getelementptr inbounds i16, i16* %blur_x879, i64 %23505
  %23507 = bitcast i16* %23506 to <16 x i16>*
  %23508 = load <16 x i16>, <16 x i16>* %23507, align 2, !tbaa !399
  %23509 = getelementptr inbounds i16, i16* %23506, i64 16
  %23510 = bitcast i16* %23509 to <16 x i16>*
  %23511 = load <16 x i16>, <16 x i16>* %23510, align 2, !tbaa !399
  %23512 = add nsw i64 %23320, %23490
  %23513 = getelementptr inbounds i16, i16* %blur_x879, i64 %23512
  %23514 = bitcast i16* %23513 to <16 x i16>*
  %23515 = load <16 x i16>, <16 x i16>* %23514, align 2, !tbaa !399
  %23516 = getelementptr inbounds i16, i16* %23513, i64 16
  %23517 = bitcast i16* %23516 to <16 x i16>*
  %23518 = load <16 x i16>, <16 x i16>* %23517, align 2, !tbaa !399
  %23519 = add nsw i64 %23323, %23490
  %23520 = getelementptr inbounds i16, i16* %blur_x879, i64 %23519
  %23521 = bitcast i16* %23520 to <16 x i16>*
  %23522 = load <16 x i16>, <16 x i16>* %23521, align 2, !tbaa !399
  %23523 = getelementptr inbounds i16, i16* %23520, i64 16
  %23524 = bitcast i16* %23523 to <16 x i16>*
  %23525 = load <16 x i16>, <16 x i16>* %23524, align 2, !tbaa !399
  %23526 = add <16 x i16> %23501, %23494
  %23527 = add <16 x i16> %23526, %23508
  %23528 = add <16 x i16> %23527, %23515
  %23529 = add <16 x i16> %23528, %23522
  %23530 = add <16 x i16> %23504, %23497
  %23531 = add <16 x i16> %23530, %23511
  %23532 = add <16 x i16> %23531, %23518
  %23533 = add <16 x i16> %23532, %23525
  %23534 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23529, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23535 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23533, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23536 = shufflevector <16 x i16> %23534, <16 x i16> %23535, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23537 = lshr <32 x i16> %23536, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23538 = shufflevector <32 x i16> %23537, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23539 = add nsw i64 %23327, %23490
  %23540 = getelementptr inbounds i16, i16* %260, i64 %23539
  %23541 = bitcast i16* %23540 to <16 x i16>*
  store <16 x i16> %23538, <16 x i16>* %23541, align 2, !tbaa !401
  %23542 = shufflevector <32 x i16> %23537, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23543 = getelementptr inbounds i16, i16* %23540, i64 16
  %23544 = bitcast i16* %23543 to <16 x i16>*
  store <16 x i16> %23542, <16 x i16>* %23544, align 2, !tbaa !401
  %23545 = add nuw nsw i32 %blur_y.s0.x.x.rebased1809, 1
  %.not2567 = icmp eq i32 %23545, %t1683899
  br i1 %.not2567, label %"end for blur_y.s0.x.x.rebased1808", label %"for blur_y.s0.x.x.rebased1807"

after_bb1818:                                     ; preds = %"end for blur_y.s0.x.x.rebased1808", %"produce blur_x1821"
  br i1 %294, label %"for blur_y.s0.x.x.rebased1833.preheader", label %"end for blur_y.s0.x.x.rebased1834", !prof !386

"for blur_y.s0.x.x.rebased1833.preheader":        ; preds = %after_bb1818
  %23546 = sext i32 %t17541141 to i64
  %23547 = zext i32 %.pre-phi3484 to i64
  %23548 = mul nsw i64 %23547, %306
  %23549 = sub nsw i64 %23548, %290
  %23550 = zext i32 %.pre-phi3480 to i64
  %23551 = mul nsw i64 %23550, %306
  %23552 = sub nsw i64 %23551, %290
  %23553 = zext i32 %.pre-phi3490 to i64
  %23554 = mul nsw i64 %23553, %306
  %23555 = sub nsw i64 %23554, %290
  %23556 = zext i32 %.pre-phi3502 to i64
  %23557 = mul nsw i64 %23556, %306
  %23558 = sub nsw i64 %23557, %290
  %23559 = zext i32 %.pre-phi3496 to i64
  %23560 = mul nsw i64 %23559, %306
  %23561 = sub nsw i64 %23560, %290
  %23562 = sext i32 %a353 to i64
  %23563 = add nsw i64 %23562, 19
  %23564 = mul nsw i64 %23563, %307
  %23565 = add nsw i64 %23564, %310
  br label %"for blur_y.s0.x.x.rebased1833"

"produce blur_x1821":                             ; preds = %"end for blur_y.s0.x.x.rebased1808"
  %23566 = getelementptr inbounds i16, i16* %read_input822, i64 %347
  %23567 = getelementptr inbounds i16, i16* %23566, i64 -31
  %23568 = bitcast i16* %23567 to <16 x i16>*
  %23569 = load <16 x i16>, <16 x i16>* %23568, align 2, !tbaa !396
  %23570 = getelementptr inbounds i16, i16* %23566, i64 -15
  %23571 = bitcast i16* %23570 to <16 x i16>*
  %23572 = load <16 x i16>, <16 x i16>* %23571, align 2, !tbaa !396
  %23573 = getelementptr inbounds i16, i16* %23566, i64 -32
  %23574 = bitcast i16* %23573 to <16 x i16>*
  %23575 = load <16 x i16>, <16 x i16>* %23574, align 2, !tbaa !396
  %23576 = getelementptr inbounds i16, i16* %23566, i64 -16
  %23577 = bitcast i16* %23576 to <16 x i16>*
  %23578 = load <16 x i16>, <16 x i16>* %23577, align 2, !tbaa !396
  %23579 = getelementptr inbounds i16, i16* %23566, i64 -30
  %23580 = bitcast i16* %23579 to <16 x i16>*
  %23581 = load <16 x i16>, <16 x i16>* %23580, align 2, !tbaa !396
  %23582 = getelementptr inbounds i16, i16* %23566, i64 -14
  %23583 = bitcast i16* %23582 to <16 x i16>*
  %23584 = load <16 x i16>, <16 x i16>* %23583, align 2, !tbaa !396
  %23585 = getelementptr inbounds i16, i16* %23566, i64 -28
  %23586 = bitcast i16* %23585 to <16 x i16>*
  %23587 = load <16 x i16>, <16 x i16>* %23586, align 2, !tbaa !396
  %23588 = getelementptr inbounds i16, i16* %23566, i64 -12
  %23589 = bitcast i16* %23588 to <16 x i16>*
  %23590 = load <16 x i16>, <16 x i16>* %23589, align 2, !tbaa !396
  %23591 = getelementptr inbounds i16, i16* %23566, i64 -29
  %23592 = bitcast i16* %23591 to <16 x i16>*
  %23593 = load <16 x i16>, <16 x i16>* %23592, align 2, !tbaa !396
  %23594 = getelementptr inbounds i16, i16* %23566, i64 -13
  %23595 = bitcast i16* %23594 to <16 x i16>*
  %23596 = load <16 x i16>, <16 x i16>* %23595, align 2, !tbaa !396
  %23597 = add <16 x i16> %23575, %23569
  %23598 = add <16 x i16> %23597, %23581
  %23599 = add <16 x i16> %23598, %23587
  %23600 = add <16 x i16> %23599, %23593
  %23601 = add <16 x i16> %23578, %23572
  %23602 = add <16 x i16> %23601, %23584
  %23603 = add <16 x i16> %23602, %23590
  %23604 = add <16 x i16> %23603, %23596
  %23605 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23600, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23606 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23604, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23607 = shufflevector <16 x i16> %23605, <16 x i16> %23606, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23608 = lshr <32 x i16> %23607, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23609 = shufflevector <32 x i16> %23608, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23610 = zext i32 %.pre-phi3502 to i64
  %23611 = mul nsw i64 %291, %23610
  %23612 = add nsw i64 %293, %23611
  %23613 = getelementptr inbounds i16, i16* %blur_x879, i64 %23612
  %23614 = getelementptr inbounds i16, i16* %23613, i64 -32
  %23615 = bitcast i16* %23614 to <16 x i16>*
  store <16 x i16> %23609, <16 x i16>* %23615, align 2, !tbaa !399
  %23616 = shufflevector <32 x i16> %23608, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23617 = getelementptr inbounds i16, i16* %23613, i64 -16
  %23618 = bitcast i16* %23617 to <16 x i16>*
  store <16 x i16> %23616, <16 x i16>* %23618, align 2, !tbaa !399
  %23619 = zext i32 %.pre-phi3484 to i64
  %23620 = mul nsw i64 %23619, %306
  %23621 = add nsw i64 %23620, %288
  %23622 = getelementptr inbounds i16, i16* %blur_x879, i64 %23621
  %23623 = getelementptr inbounds i16, i16* %23622, i64 -32
  %23624 = bitcast i16* %23623 to <16 x i16>*
  %23625 = load <16 x i16>, <16 x i16>* %23624, align 2, !tbaa !399
  %23626 = getelementptr inbounds i16, i16* %23622, i64 -16
  %23627 = bitcast i16* %23626 to <16 x i16>*
  %23628 = load <16 x i16>, <16 x i16>* %23627, align 2, !tbaa !399
  %23629 = zext i32 %.pre-phi3480 to i64
  %23630 = mul nsw i64 %23629, %306
  %23631 = add nsw i64 %23630, %288
  %23632 = getelementptr inbounds i16, i16* %blur_x879, i64 %23631
  %23633 = getelementptr inbounds i16, i16* %23632, i64 -32
  %23634 = bitcast i16* %23633 to <16 x i16>*
  %23635 = load <16 x i16>, <16 x i16>* %23634, align 2, !tbaa !399
  %23636 = getelementptr inbounds i16, i16* %23632, i64 -16
  %23637 = bitcast i16* %23636 to <16 x i16>*
  %23638 = load <16 x i16>, <16 x i16>* %23637, align 2, !tbaa !399
  %23639 = zext i32 %.pre-phi3490 to i64
  %23640 = mul nsw i64 %23639, %306
  %23641 = add nsw i64 %23640, %288
  %23642 = getelementptr inbounds i16, i16* %blur_x879, i64 %23641
  %23643 = getelementptr inbounds i16, i16* %23642, i64 -32
  %23644 = bitcast i16* %23643 to <16 x i16>*
  %23645 = load <16 x i16>, <16 x i16>* %23644, align 2, !tbaa !399
  %23646 = getelementptr inbounds i16, i16* %23642, i64 -16
  %23647 = bitcast i16* %23646 to <16 x i16>*
  %23648 = load <16 x i16>, <16 x i16>* %23647, align 2, !tbaa !399
  %23649 = mul nsw i64 %23610, %306
  %23650 = add nsw i64 %23649, %288
  %23651 = getelementptr inbounds i16, i16* %blur_x879, i64 %23650
  %23652 = getelementptr inbounds i16, i16* %23651, i64 -32
  %23653 = bitcast i16* %23652 to <16 x i16>*
  %23654 = load <16 x i16>, <16 x i16>* %23653, align 2, !tbaa !399
  %23655 = getelementptr inbounds i16, i16* %23651, i64 -16
  %23656 = bitcast i16* %23655 to <16 x i16>*
  %23657 = load <16 x i16>, <16 x i16>* %23656, align 2, !tbaa !399
  %23658 = zext i32 %.pre-phi3496 to i64
  %23659 = mul nsw i64 %23658, %306
  %23660 = add nsw i64 %23659, %288
  %23661 = getelementptr inbounds i16, i16* %blur_x879, i64 %23660
  %23662 = getelementptr inbounds i16, i16* %23661, i64 -32
  %23663 = bitcast i16* %23662 to <16 x i16>*
  %23664 = load <16 x i16>, <16 x i16>* %23663, align 2, !tbaa !399
  %23665 = getelementptr inbounds i16, i16* %23661, i64 -16
  %23666 = bitcast i16* %23665 to <16 x i16>*
  %23667 = load <16 x i16>, <16 x i16>* %23666, align 2, !tbaa !399
  %23668 = add <16 x i16> %23635, %23625
  %23669 = add <16 x i16> %23668, %23645
  %23670 = add <16 x i16> %23669, %23654
  %23671 = add <16 x i16> %23670, %23664
  %23672 = add <16 x i16> %23638, %23628
  %23673 = add <16 x i16> %23672, %23648
  %23674 = add <16 x i16> %23673, %23657
  %23675 = add <16 x i16> %23674, %23667
  %23676 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23671, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23677 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23675, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23678 = shufflevector <16 x i16> %23676, <16 x i16> %23677, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23679 = lshr <32 x i16> %23678, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23680 = shufflevector <32 x i16> %23679, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23681 = sext i32 %a353 to i64
  %23682 = add nsw i64 %23681, 19
  %23683 = mul nsw i64 %23682, %307
  %23684 = add nsw i64 %309, %23683
  %23685 = getelementptr inbounds i16, i16* %260, i64 %23684
  %23686 = getelementptr inbounds i16, i16* %23685, i64 -32
  %23687 = bitcast i16* %23686 to <16 x i16>*
  store <16 x i16> %23680, <16 x i16>* %23687, align 2, !tbaa !401
  %23688 = shufflevector <32 x i16> %23679, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23689 = getelementptr inbounds i16, i16* %23685, i64 -16
  %23690 = bitcast i16* %23689 to <16 x i16>*
  store <16 x i16> %23688, <16 x i16>* %23690, align 2, !tbaa !401
  br label %after_bb1818

"for blur_y.s0.x.x.rebased1833":                  ; preds = %"for blur_y.s0.x.x.rebased1833.preheader", %"consume blur_x1842"
  %indvars.iv3332 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1833.preheader" ], [ %indvars.iv.next3333, %"consume blur_x1842" ]
  %23691 = add nsw i64 %indvars.iv3332, %295
  %23692 = icmp slt i64 %23691, 1
  %23693 = trunc i64 %23691 to i32
  %23694 = shl nsw i32 %23693, 5
  %23695 = icmp sgt i32 %198, %23694
  %23696 = or i1 %23692, %23695
  br i1 %23696, label %"produce blur_x1840", label %"for blur_y.s0.x.x.rebased1833.consume blur_x1842_crit_edge"

"for blur_y.s0.x.x.rebased1833.consume blur_x1842_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1833"
  %.pre3535 = shl nsw i64 %23691, 5
  br label %"consume blur_x1842"

"end for blur_y.s0.x.x.rebased1834":              ; preds = %"consume blur_x1842", %after_bb1818
  br i1 %296, label %"for blur_y.s0.x.x.rebased1850.preheader", label %"end for blur_y.s0.x.x.rebased1851", !prof !386

"for blur_y.s0.x.x.rebased1850.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1834"
  %23697 = sext i32 %t17541141 to i64
  %23698 = zext i32 %.pre-phi3484 to i64
  %23699 = mul nsw i64 %23698, %306
  %23700 = sub nsw i64 %23699, %290
  %23701 = zext i32 %.pre-phi3480 to i64
  %23702 = mul nsw i64 %23701, %306
  %23703 = sub nsw i64 %23702, %290
  %23704 = zext i32 %.pre-phi3490 to i64
  %23705 = mul nsw i64 %23704, %306
  %23706 = sub nsw i64 %23705, %290
  %23707 = zext i32 %.pre-phi3502 to i64
  %23708 = mul nsw i64 %23707, %306
  %23709 = sub nsw i64 %23708, %290
  %23710 = zext i32 %.pre-phi3496 to i64
  %23711 = mul nsw i64 %23710, %306
  %23712 = sub nsw i64 %23711, %290
  %23713 = sext i32 %a353 to i64
  %23714 = add nsw i64 %23713, 19
  %23715 = mul nsw i64 %23714, %307
  %23716 = add nsw i64 %23715, %310
  br label %"for blur_y.s0.x.x.rebased1850"

"produce blur_x1840":                             ; preds = %"for blur_y.s0.x.x.rebased1833"
  %t10161841 = add nsw i32 %23694, %t20091830
  %23717 = sext i32 %t10161841 to i64
  %23718 = getelementptr inbounds i16, i16* %read_input822, i64 %23717
  %23719 = getelementptr inbounds i16, i16* %23718, i64 1
  %23720 = bitcast i16* %23719 to <16 x i16>*
  %23721 = load <16 x i16>, <16 x i16>* %23720, align 2, !tbaa !396
  %23722 = getelementptr inbounds i16, i16* %23718, i64 17
  %23723 = bitcast i16* %23722 to <16 x i16>*
  %23724 = load <16 x i16>, <16 x i16>* %23723, align 2, !tbaa !396
  %23725 = bitcast i16* %23718 to <16 x i16>*
  %23726 = load <16 x i16>, <16 x i16>* %23725, align 2, !tbaa !396
  %23727 = getelementptr inbounds i16, i16* %23718, i64 16
  %23728 = bitcast i16* %23727 to <16 x i16>*
  %23729 = load <16 x i16>, <16 x i16>* %23728, align 2, !tbaa !396
  %23730 = getelementptr inbounds i16, i16* %23718, i64 2
  %23731 = bitcast i16* %23730 to <16 x i16>*
  %23732 = load <16 x i16>, <16 x i16>* %23731, align 2, !tbaa !396
  %23733 = getelementptr inbounds i16, i16* %23718, i64 18
  %23734 = bitcast i16* %23733 to <16 x i16>*
  %23735 = load <16 x i16>, <16 x i16>* %23734, align 2, !tbaa !396
  %23736 = getelementptr inbounds i16, i16* %23718, i64 4
  %23737 = bitcast i16* %23736 to <16 x i16>*
  %23738 = load <16 x i16>, <16 x i16>* %23737, align 2, !tbaa !396
  %23739 = getelementptr inbounds i16, i16* %23718, i64 20
  %23740 = bitcast i16* %23739 to <16 x i16>*
  %23741 = load <16 x i16>, <16 x i16>* %23740, align 2, !tbaa !396
  %23742 = getelementptr inbounds i16, i16* %23718, i64 3
  %23743 = bitcast i16* %23742 to <16 x i16>*
  %23744 = load <16 x i16>, <16 x i16>* %23743, align 2, !tbaa !396
  %23745 = getelementptr inbounds i16, i16* %23718, i64 19
  %23746 = bitcast i16* %23745 to <16 x i16>*
  %23747 = load <16 x i16>, <16 x i16>* %23746, align 2, !tbaa !396
  %23748 = add <16 x i16> %23726, %23721
  %23749 = add <16 x i16> %23748, %23732
  %23750 = add <16 x i16> %23749, %23738
  %23751 = add <16 x i16> %23750, %23744
  %23752 = add <16 x i16> %23729, %23724
  %23753 = add <16 x i16> %23752, %23735
  %23754 = add <16 x i16> %23753, %23741
  %23755 = add <16 x i16> %23754, %23747
  %23756 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23751, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23757 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23755, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23758 = shufflevector <16 x i16> %23756, <16 x i16> %23757, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23759 = lshr <32 x i16> %23758, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23760 = shufflevector <32 x i16> %23759, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23761 = shl nsw i64 %23691, 5
  %23762 = add nsw i64 %23761, %23546
  %23763 = getelementptr inbounds i16, i16* %blur_x879, i64 %23762
  %23764 = bitcast i16* %23763 to <16 x i16>*
  store <16 x i16> %23760, <16 x i16>* %23764, align 2, !tbaa !399
  %23765 = shufflevector <32 x i16> %23759, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23766 = getelementptr inbounds i16, i16* %23763, i64 16
  %23767 = bitcast i16* %23766 to <16 x i16>*
  store <16 x i16> %23765, <16 x i16>* %23767, align 2, !tbaa !399
  br label %"consume blur_x1842"

"consume blur_x1842":                             ; preds = %"for blur_y.s0.x.x.rebased1833.consume blur_x1842_crit_edge", %"produce blur_x1840"
  %.pre-phi3536 = phi i64 [ %.pre3535, %"for blur_y.s0.x.x.rebased1833.consume blur_x1842_crit_edge" ], [ %23761, %"produce blur_x1840" ]
  %23768 = add nsw i64 %23549, %.pre-phi3536
  %23769 = getelementptr inbounds i16, i16* %blur_x879, i64 %23768
  %23770 = bitcast i16* %23769 to <16 x i16>*
  %23771 = load <16 x i16>, <16 x i16>* %23770, align 2, !tbaa !399
  %23772 = getelementptr inbounds i16, i16* %23769, i64 16
  %23773 = bitcast i16* %23772 to <16 x i16>*
  %23774 = load <16 x i16>, <16 x i16>* %23773, align 2, !tbaa !399
  %23775 = add nsw i64 %23552, %.pre-phi3536
  %23776 = getelementptr inbounds i16, i16* %blur_x879, i64 %23775
  %23777 = bitcast i16* %23776 to <16 x i16>*
  %23778 = load <16 x i16>, <16 x i16>* %23777, align 2, !tbaa !399
  %23779 = getelementptr inbounds i16, i16* %23776, i64 16
  %23780 = bitcast i16* %23779 to <16 x i16>*
  %23781 = load <16 x i16>, <16 x i16>* %23780, align 2, !tbaa !399
  %23782 = add nsw i64 %23555, %.pre-phi3536
  %23783 = getelementptr inbounds i16, i16* %blur_x879, i64 %23782
  %23784 = bitcast i16* %23783 to <16 x i16>*
  %23785 = load <16 x i16>, <16 x i16>* %23784, align 2, !tbaa !399
  %23786 = getelementptr inbounds i16, i16* %23783, i64 16
  %23787 = bitcast i16* %23786 to <16 x i16>*
  %23788 = load <16 x i16>, <16 x i16>* %23787, align 2, !tbaa !399
  %23789 = add nsw i64 %23558, %.pre-phi3536
  %23790 = getelementptr inbounds i16, i16* %blur_x879, i64 %23789
  %23791 = bitcast i16* %23790 to <16 x i16>*
  %23792 = load <16 x i16>, <16 x i16>* %23791, align 2, !tbaa !399
  %23793 = getelementptr inbounds i16, i16* %23790, i64 16
  %23794 = bitcast i16* %23793 to <16 x i16>*
  %23795 = load <16 x i16>, <16 x i16>* %23794, align 2, !tbaa !399
  %23796 = add nsw i64 %23561, %.pre-phi3536
  %23797 = getelementptr inbounds i16, i16* %blur_x879, i64 %23796
  %23798 = bitcast i16* %23797 to <16 x i16>*
  %23799 = load <16 x i16>, <16 x i16>* %23798, align 2, !tbaa !399
  %23800 = getelementptr inbounds i16, i16* %23797, i64 16
  %23801 = bitcast i16* %23800 to <16 x i16>*
  %23802 = load <16 x i16>, <16 x i16>* %23801, align 2, !tbaa !399
  %23803 = add <16 x i16> %23778, %23771
  %23804 = add <16 x i16> %23803, %23785
  %23805 = add <16 x i16> %23804, %23792
  %23806 = add <16 x i16> %23805, %23799
  %23807 = add <16 x i16> %23781, %23774
  %23808 = add <16 x i16> %23807, %23788
  %23809 = add <16 x i16> %23808, %23795
  %23810 = add <16 x i16> %23809, %23802
  %23811 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23806, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23812 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23810, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23813 = shufflevector <16 x i16> %23811, <16 x i16> %23812, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23814 = lshr <32 x i16> %23813, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23815 = shufflevector <32 x i16> %23814, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23816 = add nsw i64 %23565, %.pre-phi3536
  %23817 = getelementptr inbounds i16, i16* %260, i64 %23816
  %23818 = bitcast i16* %23817 to <16 x i16>*
  store <16 x i16> %23815, <16 x i16>* %23818, align 2, !tbaa !401
  %23819 = shufflevector <32 x i16> %23814, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23820 = getelementptr inbounds i16, i16* %23817, i64 16
  %23821 = bitcast i16* %23820 to <16 x i16>*
  store <16 x i16> %23819, <16 x i16>* %23821, align 2, !tbaa !401
  %indvars.iv.next3333 = add nuw nsw i64 %indvars.iv3332, 1
  %.not2566 = icmp eq i64 %indvars.iv.next3333, %378
  br i1 %.not2566, label %"end for blur_y.s0.x.x.rebased1834", label %"for blur_y.s0.x.x.rebased1833"

"for blur_y.s0.x.x.rebased1850":                  ; preds = %"for blur_y.s0.x.x.rebased1850.preheader", %"consume blur_x1860"
  %blur_y.s0.x.x.rebased1852 = phi i32 [ %23934, %"consume blur_x1860" ], [ 0, %"for blur_y.s0.x.x.rebased1850.preheader" ]
  %23822 = add nsw i32 %blur_y.s0.x.x.rebased1852, %t1626814
  %a565 = shl nsw i32 %23822, 5
  %23823 = icmp sgt i32 %a341, %a565
  %b571 = select i1 %23823, i32 %a565, i32 %a341
  %23824 = icmp slt i32 %23822, 1
  %23825 = icmp sgt i32 %198, %a565
  %23826 = or i1 %23824, %23825
  br i1 %23826, label %"produce blur_x1857", label %"consume blur_x1860"

"end for blur_y.s0.x.x.rebased1851":              ; preds = %"consume blur_x1860", %"end for blur_y.s0.x.x.rebased1834"
  br i1 %228, label %"produce blur_x1864", label %after_bb1861

"produce blur_x1857":                             ; preds = %"for blur_y.s0.x.x.rebased1850"
  %23827 = icmp slt i32 %b571, %198
  %blur_x.s0.x.v1.base.s1858 = select i1 %23827, i32 %b571, i32 %198
  %t10211859 = add nsw i32 %blur_x.s0.x.v1.base.s1858, %t20091830
  %23828 = sext i32 %t10211859 to i64
  %23829 = getelementptr inbounds i16, i16* %read_input822, i64 %23828
  %23830 = getelementptr inbounds i16, i16* %23829, i64 1
  %23831 = bitcast i16* %23830 to <16 x i16>*
  %23832 = load <16 x i16>, <16 x i16>* %23831, align 2, !tbaa !396
  %23833 = getelementptr inbounds i16, i16* %23829, i64 17
  %23834 = bitcast i16* %23833 to <16 x i16>*
  %23835 = load <16 x i16>, <16 x i16>* %23834, align 2, !tbaa !396
  %23836 = bitcast i16* %23829 to <16 x i16>*
  %23837 = load <16 x i16>, <16 x i16>* %23836, align 2, !tbaa !396
  %23838 = getelementptr inbounds i16, i16* %23829, i64 16
  %23839 = bitcast i16* %23838 to <16 x i16>*
  %23840 = load <16 x i16>, <16 x i16>* %23839, align 2, !tbaa !396
  %23841 = getelementptr inbounds i16, i16* %23829, i64 2
  %23842 = bitcast i16* %23841 to <16 x i16>*
  %23843 = load <16 x i16>, <16 x i16>* %23842, align 2, !tbaa !396
  %23844 = getelementptr inbounds i16, i16* %23829, i64 18
  %23845 = bitcast i16* %23844 to <16 x i16>*
  %23846 = load <16 x i16>, <16 x i16>* %23845, align 2, !tbaa !396
  %23847 = getelementptr inbounds i16, i16* %23829, i64 4
  %23848 = bitcast i16* %23847 to <16 x i16>*
  %23849 = load <16 x i16>, <16 x i16>* %23848, align 2, !tbaa !396
  %23850 = getelementptr inbounds i16, i16* %23829, i64 20
  %23851 = bitcast i16* %23850 to <16 x i16>*
  %23852 = load <16 x i16>, <16 x i16>* %23851, align 2, !tbaa !396
  %23853 = getelementptr inbounds i16, i16* %23829, i64 3
  %23854 = bitcast i16* %23853 to <16 x i16>*
  %23855 = load <16 x i16>, <16 x i16>* %23854, align 2, !tbaa !396
  %23856 = getelementptr inbounds i16, i16* %23829, i64 19
  %23857 = bitcast i16* %23856 to <16 x i16>*
  %23858 = load <16 x i16>, <16 x i16>* %23857, align 2, !tbaa !396
  %23859 = add <16 x i16> %23837, %23832
  %23860 = add <16 x i16> %23859, %23843
  %23861 = add <16 x i16> %23860, %23849
  %23862 = add <16 x i16> %23861, %23855
  %23863 = add <16 x i16> %23840, %23835
  %23864 = add <16 x i16> %23863, %23846
  %23865 = add <16 x i16> %23864, %23852
  %23866 = add <16 x i16> %23865, %23858
  %23867 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23862, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23868 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23866, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23869 = shufflevector <16 x i16> %23867, <16 x i16> %23868, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23870 = lshr <32 x i16> %23869, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23871 = shufflevector <32 x i16> %23870, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23872 = sext i32 %blur_x.s0.x.v1.base.s1858 to i64
  %23873 = add nsw i64 %23872, %23697
  %23874 = getelementptr inbounds i16, i16* %blur_x879, i64 %23873
  %23875 = bitcast i16* %23874 to <16 x i16>*
  store <16 x i16> %23871, <16 x i16>* %23875, align 2, !tbaa !399
  %23876 = shufflevector <32 x i16> %23870, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23877 = getelementptr inbounds i16, i16* %23874, i64 16
  %23878 = bitcast i16* %23877 to <16 x i16>*
  store <16 x i16> %23876, <16 x i16>* %23878, align 2, !tbaa !399
  br label %"consume blur_x1860"

"consume blur_x1860":                             ; preds = %"for blur_y.s0.x.x.rebased1850", %"produce blur_x1857"
  %23879 = sext i32 %b571 to i64
  %23880 = add nsw i64 %23700, %23879
  %23881 = getelementptr inbounds i16, i16* %blur_x879, i64 %23880
  %23882 = bitcast i16* %23881 to <16 x i16>*
  %23883 = load <16 x i16>, <16 x i16>* %23882, align 2, !tbaa !399
  %23884 = getelementptr inbounds i16, i16* %23881, i64 16
  %23885 = bitcast i16* %23884 to <16 x i16>*
  %23886 = load <16 x i16>, <16 x i16>* %23885, align 2, !tbaa !399
  %23887 = add nsw i64 %23703, %23879
  %23888 = getelementptr inbounds i16, i16* %blur_x879, i64 %23887
  %23889 = bitcast i16* %23888 to <16 x i16>*
  %23890 = load <16 x i16>, <16 x i16>* %23889, align 2, !tbaa !399
  %23891 = getelementptr inbounds i16, i16* %23888, i64 16
  %23892 = bitcast i16* %23891 to <16 x i16>*
  %23893 = load <16 x i16>, <16 x i16>* %23892, align 2, !tbaa !399
  %23894 = add nsw i64 %23706, %23879
  %23895 = getelementptr inbounds i16, i16* %blur_x879, i64 %23894
  %23896 = bitcast i16* %23895 to <16 x i16>*
  %23897 = load <16 x i16>, <16 x i16>* %23896, align 2, !tbaa !399
  %23898 = getelementptr inbounds i16, i16* %23895, i64 16
  %23899 = bitcast i16* %23898 to <16 x i16>*
  %23900 = load <16 x i16>, <16 x i16>* %23899, align 2, !tbaa !399
  %23901 = add nsw i64 %23709, %23879
  %23902 = getelementptr inbounds i16, i16* %blur_x879, i64 %23901
  %23903 = bitcast i16* %23902 to <16 x i16>*
  %23904 = load <16 x i16>, <16 x i16>* %23903, align 2, !tbaa !399
  %23905 = getelementptr inbounds i16, i16* %23902, i64 16
  %23906 = bitcast i16* %23905 to <16 x i16>*
  %23907 = load <16 x i16>, <16 x i16>* %23906, align 2, !tbaa !399
  %23908 = add nsw i64 %23712, %23879
  %23909 = getelementptr inbounds i16, i16* %blur_x879, i64 %23908
  %23910 = bitcast i16* %23909 to <16 x i16>*
  %23911 = load <16 x i16>, <16 x i16>* %23910, align 2, !tbaa !399
  %23912 = getelementptr inbounds i16, i16* %23909, i64 16
  %23913 = bitcast i16* %23912 to <16 x i16>*
  %23914 = load <16 x i16>, <16 x i16>* %23913, align 2, !tbaa !399
  %23915 = add <16 x i16> %23890, %23883
  %23916 = add <16 x i16> %23915, %23897
  %23917 = add <16 x i16> %23916, %23904
  %23918 = add <16 x i16> %23917, %23911
  %23919 = add <16 x i16> %23893, %23886
  %23920 = add <16 x i16> %23919, %23900
  %23921 = add <16 x i16> %23920, %23907
  %23922 = add <16 x i16> %23921, %23914
  %23923 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23918, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23924 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23922, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23925 = shufflevector <16 x i16> %23923, <16 x i16> %23924, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23926 = lshr <32 x i16> %23925, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23927 = shufflevector <32 x i16> %23926, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23928 = add nsw i64 %23716, %23879
  %23929 = getelementptr inbounds i16, i16* %260, i64 %23928
  %23930 = bitcast i16* %23929 to <16 x i16>*
  store <16 x i16> %23927, <16 x i16>* %23930, align 2, !tbaa !401
  %23931 = shufflevector <32 x i16> %23926, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23932 = getelementptr inbounds i16, i16* %23929, i64 16
  %23933 = bitcast i16* %23932 to <16 x i16>*
  store <16 x i16> %23931, <16 x i16>* %23933, align 2, !tbaa !401
  %23934 = add nuw nsw i32 %blur_y.s0.x.x.rebased1852, 1
  %.not2565 = icmp eq i32 %23934, %t1683899
  br i1 %.not2565, label %"end for blur_y.s0.x.x.rebased1851", label %"for blur_y.s0.x.x.rebased1850"

after_bb1861:                                     ; preds = %"end for blur_y.s0.x.x.rebased1851", %"produce blur_x1864"
  br i1 %294, label %"for blur_y.s0.x.x.rebased1876.preheader", label %"end for blur_y.s0.x.x.rebased1877", !prof !386

"for blur_y.s0.x.x.rebased1876.preheader":        ; preds = %after_bb1861
  %23935 = sext i32 %t1682886 to i64
  %23936 = zext i32 %.pre-phi3490 to i64
  %23937 = mul nsw i64 %23936, %306
  %23938 = sub nsw i64 %23937, %290
  %23939 = zext i32 %.pre-phi3484 to i64
  %23940 = mul nsw i64 %23939, %306
  %23941 = sub nsw i64 %23940, %290
  %23942 = zext i32 %.pre-phi3496 to i64
  %23943 = mul nsw i64 %23942, %306
  %23944 = sub nsw i64 %23943, %290
  %23945 = zext i32 %.pre-phi3468 to i64
  %23946 = mul nsw i64 %23945, %306
  %23947 = sub nsw i64 %23946, %290
  %23948 = zext i32 %.pre-phi3502 to i64
  %23949 = mul nsw i64 %23948, %306
  %23950 = sub nsw i64 %23949, %290
  %23951 = sext i32 %a353 to i64
  %23952 = add nsw i64 %23951, 20
  %23953 = mul nsw i64 %23952, %307
  %23954 = add nsw i64 %23953, %310
  br label %"for blur_y.s0.x.x.rebased1876"

"produce blur_x1864":                             ; preds = %"end for blur_y.s0.x.x.rebased1851"
  %23955 = getelementptr inbounds i16, i16* %read_input822, i64 %349
  %23956 = getelementptr inbounds i16, i16* %23955, i64 -31
  %23957 = bitcast i16* %23956 to <16 x i16>*
  %23958 = load <16 x i16>, <16 x i16>* %23957, align 2, !tbaa !396
  %23959 = getelementptr inbounds i16, i16* %23955, i64 -15
  %23960 = bitcast i16* %23959 to <16 x i16>*
  %23961 = load <16 x i16>, <16 x i16>* %23960, align 2, !tbaa !396
  %23962 = getelementptr inbounds i16, i16* %23955, i64 -32
  %23963 = bitcast i16* %23962 to <16 x i16>*
  %23964 = load <16 x i16>, <16 x i16>* %23963, align 2, !tbaa !396
  %23965 = getelementptr inbounds i16, i16* %23955, i64 -16
  %23966 = bitcast i16* %23965 to <16 x i16>*
  %23967 = load <16 x i16>, <16 x i16>* %23966, align 2, !tbaa !396
  %23968 = getelementptr inbounds i16, i16* %23955, i64 -30
  %23969 = bitcast i16* %23968 to <16 x i16>*
  %23970 = load <16 x i16>, <16 x i16>* %23969, align 2, !tbaa !396
  %23971 = getelementptr inbounds i16, i16* %23955, i64 -14
  %23972 = bitcast i16* %23971 to <16 x i16>*
  %23973 = load <16 x i16>, <16 x i16>* %23972, align 2, !tbaa !396
  %23974 = getelementptr inbounds i16, i16* %23955, i64 -28
  %23975 = bitcast i16* %23974 to <16 x i16>*
  %23976 = load <16 x i16>, <16 x i16>* %23975, align 2, !tbaa !396
  %23977 = getelementptr inbounds i16, i16* %23955, i64 -12
  %23978 = bitcast i16* %23977 to <16 x i16>*
  %23979 = load <16 x i16>, <16 x i16>* %23978, align 2, !tbaa !396
  %23980 = getelementptr inbounds i16, i16* %23955, i64 -29
  %23981 = bitcast i16* %23980 to <16 x i16>*
  %23982 = load <16 x i16>, <16 x i16>* %23981, align 2, !tbaa !396
  %23983 = getelementptr inbounds i16, i16* %23955, i64 -13
  %23984 = bitcast i16* %23983 to <16 x i16>*
  %23985 = load <16 x i16>, <16 x i16>* %23984, align 2, !tbaa !396
  %23986 = add <16 x i16> %23964, %23958
  %23987 = add <16 x i16> %23986, %23970
  %23988 = add <16 x i16> %23987, %23976
  %23989 = add <16 x i16> %23988, %23982
  %23990 = add <16 x i16> %23967, %23961
  %23991 = add <16 x i16> %23990, %23973
  %23992 = add <16 x i16> %23991, %23979
  %23993 = add <16 x i16> %23992, %23985
  %23994 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23989, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23995 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %23993, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %23996 = shufflevector <16 x i16> %23994, <16 x i16> %23995, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %23997 = lshr <32 x i16> %23996, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %23998 = shufflevector <32 x i16> %23997, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %23999 = zext i32 %.pre-phi3468 to i64
  %24000 = mul nsw i64 %291, %23999
  %24001 = add nsw i64 %293, %24000
  %24002 = getelementptr inbounds i16, i16* %blur_x879, i64 %24001
  %24003 = getelementptr inbounds i16, i16* %24002, i64 -32
  %24004 = bitcast i16* %24003 to <16 x i16>*
  store <16 x i16> %23998, <16 x i16>* %24004, align 2, !tbaa !399
  %24005 = shufflevector <32 x i16> %23997, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24006 = getelementptr inbounds i16, i16* %24002, i64 -16
  %24007 = bitcast i16* %24006 to <16 x i16>*
  store <16 x i16> %24005, <16 x i16>* %24007, align 2, !tbaa !399
  %24008 = zext i32 %.pre-phi3490 to i64
  %24009 = mul nsw i64 %24008, %306
  %24010 = add nsw i64 %24009, %288
  %24011 = getelementptr inbounds i16, i16* %blur_x879, i64 %24010
  %24012 = getelementptr inbounds i16, i16* %24011, i64 -32
  %24013 = bitcast i16* %24012 to <16 x i16>*
  %24014 = load <16 x i16>, <16 x i16>* %24013, align 2, !tbaa !399
  %24015 = getelementptr inbounds i16, i16* %24011, i64 -16
  %24016 = bitcast i16* %24015 to <16 x i16>*
  %24017 = load <16 x i16>, <16 x i16>* %24016, align 2, !tbaa !399
  %24018 = zext i32 %.pre-phi3484 to i64
  %24019 = mul nsw i64 %24018, %306
  %24020 = add nsw i64 %24019, %288
  %24021 = getelementptr inbounds i16, i16* %blur_x879, i64 %24020
  %24022 = getelementptr inbounds i16, i16* %24021, i64 -32
  %24023 = bitcast i16* %24022 to <16 x i16>*
  %24024 = load <16 x i16>, <16 x i16>* %24023, align 2, !tbaa !399
  %24025 = getelementptr inbounds i16, i16* %24021, i64 -16
  %24026 = bitcast i16* %24025 to <16 x i16>*
  %24027 = load <16 x i16>, <16 x i16>* %24026, align 2, !tbaa !399
  %24028 = zext i32 %.pre-phi3496 to i64
  %24029 = mul nsw i64 %24028, %306
  %24030 = add nsw i64 %24029, %288
  %24031 = getelementptr inbounds i16, i16* %blur_x879, i64 %24030
  %24032 = getelementptr inbounds i16, i16* %24031, i64 -32
  %24033 = bitcast i16* %24032 to <16 x i16>*
  %24034 = load <16 x i16>, <16 x i16>* %24033, align 2, !tbaa !399
  %24035 = getelementptr inbounds i16, i16* %24031, i64 -16
  %24036 = bitcast i16* %24035 to <16 x i16>*
  %24037 = load <16 x i16>, <16 x i16>* %24036, align 2, !tbaa !399
  %24038 = mul nsw i64 %23999, %306
  %24039 = add nsw i64 %24038, %288
  %24040 = getelementptr inbounds i16, i16* %blur_x879, i64 %24039
  %24041 = getelementptr inbounds i16, i16* %24040, i64 -32
  %24042 = bitcast i16* %24041 to <16 x i16>*
  %24043 = load <16 x i16>, <16 x i16>* %24042, align 2, !tbaa !399
  %24044 = getelementptr inbounds i16, i16* %24040, i64 -16
  %24045 = bitcast i16* %24044 to <16 x i16>*
  %24046 = load <16 x i16>, <16 x i16>* %24045, align 2, !tbaa !399
  %24047 = zext i32 %.pre-phi3502 to i64
  %24048 = mul nsw i64 %24047, %306
  %24049 = add nsw i64 %24048, %288
  %24050 = getelementptr inbounds i16, i16* %blur_x879, i64 %24049
  %24051 = getelementptr inbounds i16, i16* %24050, i64 -32
  %24052 = bitcast i16* %24051 to <16 x i16>*
  %24053 = load <16 x i16>, <16 x i16>* %24052, align 2, !tbaa !399
  %24054 = getelementptr inbounds i16, i16* %24050, i64 -16
  %24055 = bitcast i16* %24054 to <16 x i16>*
  %24056 = load <16 x i16>, <16 x i16>* %24055, align 2, !tbaa !399
  %24057 = add <16 x i16> %24024, %24014
  %24058 = add <16 x i16> %24057, %24034
  %24059 = add <16 x i16> %24058, %24043
  %24060 = add <16 x i16> %24059, %24053
  %24061 = add <16 x i16> %24027, %24017
  %24062 = add <16 x i16> %24061, %24037
  %24063 = add <16 x i16> %24062, %24046
  %24064 = add <16 x i16> %24063, %24056
  %24065 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24060, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24066 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24064, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24067 = shufflevector <16 x i16> %24065, <16 x i16> %24066, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24068 = lshr <32 x i16> %24067, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24069 = shufflevector <32 x i16> %24068, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24070 = sext i32 %a353 to i64
  %24071 = add nsw i64 %24070, 20
  %24072 = mul nsw i64 %24071, %307
  %24073 = add nsw i64 %309, %24072
  %24074 = getelementptr inbounds i16, i16* %260, i64 %24073
  %24075 = getelementptr inbounds i16, i16* %24074, i64 -32
  %24076 = bitcast i16* %24075 to <16 x i16>*
  store <16 x i16> %24069, <16 x i16>* %24076, align 2, !tbaa !401
  %24077 = shufflevector <32 x i16> %24068, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24078 = getelementptr inbounds i16, i16* %24074, i64 -16
  %24079 = bitcast i16* %24078 to <16 x i16>*
  store <16 x i16> %24077, <16 x i16>* %24079, align 2, !tbaa !401
  br label %after_bb1861

"for blur_y.s0.x.x.rebased1876":                  ; preds = %"for blur_y.s0.x.x.rebased1876.preheader", %"consume blur_x1885"
  %indvars.iv3335 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1876.preheader" ], [ %indvars.iv.next3336, %"consume blur_x1885" ]
  %24080 = add nsw i64 %indvars.iv3335, %295
  %24081 = icmp slt i64 %24080, 1
  %24082 = trunc i64 %24080 to i32
  %24083 = shl nsw i32 %24082, 5
  %24084 = icmp sgt i32 %198, %24083
  %24085 = or i1 %24081, %24084
  br i1 %24085, label %"produce blur_x1883", label %"for blur_y.s0.x.x.rebased1876.consume blur_x1885_crit_edge"

"for blur_y.s0.x.x.rebased1876.consume blur_x1885_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1876"
  %.pre3537 = shl nsw i64 %24080, 5
  br label %"consume blur_x1885"

"end for blur_y.s0.x.x.rebased1877":              ; preds = %"consume blur_x1885", %after_bb1861
  br i1 %296, label %"for blur_y.s0.x.x.rebased1893.preheader", label %"end for blur_y.s0.x.x.rebased1894", !prof !386

"for blur_y.s0.x.x.rebased1893.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1877"
  %24086 = sext i32 %t1682886 to i64
  %24087 = zext i32 %.pre-phi3490 to i64
  %24088 = mul nsw i64 %24087, %306
  %24089 = sub nsw i64 %24088, %290
  %24090 = zext i32 %.pre-phi3484 to i64
  %24091 = mul nsw i64 %24090, %306
  %24092 = sub nsw i64 %24091, %290
  %24093 = zext i32 %.pre-phi3496 to i64
  %24094 = mul nsw i64 %24093, %306
  %24095 = sub nsw i64 %24094, %290
  %24096 = zext i32 %.pre-phi3468 to i64
  %24097 = mul nsw i64 %24096, %306
  %24098 = sub nsw i64 %24097, %290
  %24099 = zext i32 %.pre-phi3502 to i64
  %24100 = mul nsw i64 %24099, %306
  %24101 = sub nsw i64 %24100, %290
  %24102 = sext i32 %a353 to i64
  %24103 = add nsw i64 %24102, 20
  %24104 = mul nsw i64 %24103, %307
  %24105 = add nsw i64 %24104, %310
  br label %"for blur_y.s0.x.x.rebased1893"

"produce blur_x1883":                             ; preds = %"for blur_y.s0.x.x.rebased1876"
  %t10321884 = add nsw i32 %24083, %t20251873
  %24106 = sext i32 %t10321884 to i64
  %24107 = getelementptr inbounds i16, i16* %read_input822, i64 %24106
  %24108 = getelementptr inbounds i16, i16* %24107, i64 1
  %24109 = bitcast i16* %24108 to <16 x i16>*
  %24110 = load <16 x i16>, <16 x i16>* %24109, align 2, !tbaa !396
  %24111 = getelementptr inbounds i16, i16* %24107, i64 17
  %24112 = bitcast i16* %24111 to <16 x i16>*
  %24113 = load <16 x i16>, <16 x i16>* %24112, align 2, !tbaa !396
  %24114 = bitcast i16* %24107 to <16 x i16>*
  %24115 = load <16 x i16>, <16 x i16>* %24114, align 2, !tbaa !396
  %24116 = getelementptr inbounds i16, i16* %24107, i64 16
  %24117 = bitcast i16* %24116 to <16 x i16>*
  %24118 = load <16 x i16>, <16 x i16>* %24117, align 2, !tbaa !396
  %24119 = getelementptr inbounds i16, i16* %24107, i64 2
  %24120 = bitcast i16* %24119 to <16 x i16>*
  %24121 = load <16 x i16>, <16 x i16>* %24120, align 2, !tbaa !396
  %24122 = getelementptr inbounds i16, i16* %24107, i64 18
  %24123 = bitcast i16* %24122 to <16 x i16>*
  %24124 = load <16 x i16>, <16 x i16>* %24123, align 2, !tbaa !396
  %24125 = getelementptr inbounds i16, i16* %24107, i64 4
  %24126 = bitcast i16* %24125 to <16 x i16>*
  %24127 = load <16 x i16>, <16 x i16>* %24126, align 2, !tbaa !396
  %24128 = getelementptr inbounds i16, i16* %24107, i64 20
  %24129 = bitcast i16* %24128 to <16 x i16>*
  %24130 = load <16 x i16>, <16 x i16>* %24129, align 2, !tbaa !396
  %24131 = getelementptr inbounds i16, i16* %24107, i64 3
  %24132 = bitcast i16* %24131 to <16 x i16>*
  %24133 = load <16 x i16>, <16 x i16>* %24132, align 2, !tbaa !396
  %24134 = getelementptr inbounds i16, i16* %24107, i64 19
  %24135 = bitcast i16* %24134 to <16 x i16>*
  %24136 = load <16 x i16>, <16 x i16>* %24135, align 2, !tbaa !396
  %24137 = add <16 x i16> %24115, %24110
  %24138 = add <16 x i16> %24137, %24121
  %24139 = add <16 x i16> %24138, %24127
  %24140 = add <16 x i16> %24139, %24133
  %24141 = add <16 x i16> %24118, %24113
  %24142 = add <16 x i16> %24141, %24124
  %24143 = add <16 x i16> %24142, %24130
  %24144 = add <16 x i16> %24143, %24136
  %24145 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24140, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24146 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24144, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24147 = shufflevector <16 x i16> %24145, <16 x i16> %24146, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24148 = lshr <32 x i16> %24147, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24149 = shufflevector <32 x i16> %24148, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24150 = shl nsw i64 %24080, 5
  %24151 = add nsw i64 %24150, %23935
  %24152 = getelementptr inbounds i16, i16* %blur_x879, i64 %24151
  %24153 = bitcast i16* %24152 to <16 x i16>*
  store <16 x i16> %24149, <16 x i16>* %24153, align 2, !tbaa !399
  %24154 = shufflevector <32 x i16> %24148, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24155 = getelementptr inbounds i16, i16* %24152, i64 16
  %24156 = bitcast i16* %24155 to <16 x i16>*
  store <16 x i16> %24154, <16 x i16>* %24156, align 2, !tbaa !399
  br label %"consume blur_x1885"

"consume blur_x1885":                             ; preds = %"for blur_y.s0.x.x.rebased1876.consume blur_x1885_crit_edge", %"produce blur_x1883"
  %.pre-phi3538 = phi i64 [ %.pre3537, %"for blur_y.s0.x.x.rebased1876.consume blur_x1885_crit_edge" ], [ %24150, %"produce blur_x1883" ]
  %24157 = add nsw i64 %23938, %.pre-phi3538
  %24158 = getelementptr inbounds i16, i16* %blur_x879, i64 %24157
  %24159 = bitcast i16* %24158 to <16 x i16>*
  %24160 = load <16 x i16>, <16 x i16>* %24159, align 2, !tbaa !399
  %24161 = getelementptr inbounds i16, i16* %24158, i64 16
  %24162 = bitcast i16* %24161 to <16 x i16>*
  %24163 = load <16 x i16>, <16 x i16>* %24162, align 2, !tbaa !399
  %24164 = add nsw i64 %23941, %.pre-phi3538
  %24165 = getelementptr inbounds i16, i16* %blur_x879, i64 %24164
  %24166 = bitcast i16* %24165 to <16 x i16>*
  %24167 = load <16 x i16>, <16 x i16>* %24166, align 2, !tbaa !399
  %24168 = getelementptr inbounds i16, i16* %24165, i64 16
  %24169 = bitcast i16* %24168 to <16 x i16>*
  %24170 = load <16 x i16>, <16 x i16>* %24169, align 2, !tbaa !399
  %24171 = add nsw i64 %23944, %.pre-phi3538
  %24172 = getelementptr inbounds i16, i16* %blur_x879, i64 %24171
  %24173 = bitcast i16* %24172 to <16 x i16>*
  %24174 = load <16 x i16>, <16 x i16>* %24173, align 2, !tbaa !399
  %24175 = getelementptr inbounds i16, i16* %24172, i64 16
  %24176 = bitcast i16* %24175 to <16 x i16>*
  %24177 = load <16 x i16>, <16 x i16>* %24176, align 2, !tbaa !399
  %24178 = add nsw i64 %23947, %.pre-phi3538
  %24179 = getelementptr inbounds i16, i16* %blur_x879, i64 %24178
  %24180 = bitcast i16* %24179 to <16 x i16>*
  %24181 = load <16 x i16>, <16 x i16>* %24180, align 2, !tbaa !399
  %24182 = getelementptr inbounds i16, i16* %24179, i64 16
  %24183 = bitcast i16* %24182 to <16 x i16>*
  %24184 = load <16 x i16>, <16 x i16>* %24183, align 2, !tbaa !399
  %24185 = add nsw i64 %23950, %.pre-phi3538
  %24186 = getelementptr inbounds i16, i16* %blur_x879, i64 %24185
  %24187 = bitcast i16* %24186 to <16 x i16>*
  %24188 = load <16 x i16>, <16 x i16>* %24187, align 2, !tbaa !399
  %24189 = getelementptr inbounds i16, i16* %24186, i64 16
  %24190 = bitcast i16* %24189 to <16 x i16>*
  %24191 = load <16 x i16>, <16 x i16>* %24190, align 2, !tbaa !399
  %24192 = add <16 x i16> %24167, %24160
  %24193 = add <16 x i16> %24192, %24174
  %24194 = add <16 x i16> %24193, %24181
  %24195 = add <16 x i16> %24194, %24188
  %24196 = add <16 x i16> %24170, %24163
  %24197 = add <16 x i16> %24196, %24177
  %24198 = add <16 x i16> %24197, %24184
  %24199 = add <16 x i16> %24198, %24191
  %24200 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24195, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24201 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24199, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24202 = shufflevector <16 x i16> %24200, <16 x i16> %24201, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24203 = lshr <32 x i16> %24202, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24204 = shufflevector <32 x i16> %24203, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24205 = add nsw i64 %23954, %.pre-phi3538
  %24206 = getelementptr inbounds i16, i16* %260, i64 %24205
  %24207 = bitcast i16* %24206 to <16 x i16>*
  store <16 x i16> %24204, <16 x i16>* %24207, align 2, !tbaa !401
  %24208 = shufflevector <32 x i16> %24203, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24209 = getelementptr inbounds i16, i16* %24206, i64 16
  %24210 = bitcast i16* %24209 to <16 x i16>*
  store <16 x i16> %24208, <16 x i16>* %24210, align 2, !tbaa !401
  %indvars.iv.next3336 = add nuw nsw i64 %indvars.iv3335, 1
  %.not2564 = icmp eq i64 %indvars.iv.next3336, %378
  br i1 %.not2564, label %"end for blur_y.s0.x.x.rebased1877", label %"for blur_y.s0.x.x.rebased1876"

"for blur_y.s0.x.x.rebased1893":                  ; preds = %"for blur_y.s0.x.x.rebased1893.preheader", %"consume blur_x1903"
  %blur_y.s0.x.x.rebased1895 = phi i32 [ %24323, %"consume blur_x1903" ], [ 0, %"for blur_y.s0.x.x.rebased1893.preheader" ]
  %24211 = add nsw i32 %blur_y.s0.x.x.rebased1895, %t1626814
  %a572 = shl nsw i32 %24211, 5
  %24212 = icmp sgt i32 %a341, %a572
  %b578 = select i1 %24212, i32 %a572, i32 %a341
  %24213 = icmp slt i32 %24211, 1
  %24214 = icmp sgt i32 %198, %a572
  %24215 = or i1 %24213, %24214
  br i1 %24215, label %"produce blur_x1900", label %"consume blur_x1903"

"end for blur_y.s0.x.x.rebased1894":              ; preds = %"consume blur_x1903", %"end for blur_y.s0.x.x.rebased1877"
  br i1 %228, label %"produce blur_x1907", label %after_bb1904

"produce blur_x1900":                             ; preds = %"for blur_y.s0.x.x.rebased1893"
  %24216 = icmp slt i32 %b578, %198
  %blur_x.s0.x.v1.base.s1901 = select i1 %24216, i32 %b578, i32 %198
  %t10371902 = add nsw i32 %blur_x.s0.x.v1.base.s1901, %t20251873
  %24217 = sext i32 %t10371902 to i64
  %24218 = getelementptr inbounds i16, i16* %read_input822, i64 %24217
  %24219 = getelementptr inbounds i16, i16* %24218, i64 1
  %24220 = bitcast i16* %24219 to <16 x i16>*
  %24221 = load <16 x i16>, <16 x i16>* %24220, align 2, !tbaa !396
  %24222 = getelementptr inbounds i16, i16* %24218, i64 17
  %24223 = bitcast i16* %24222 to <16 x i16>*
  %24224 = load <16 x i16>, <16 x i16>* %24223, align 2, !tbaa !396
  %24225 = bitcast i16* %24218 to <16 x i16>*
  %24226 = load <16 x i16>, <16 x i16>* %24225, align 2, !tbaa !396
  %24227 = getelementptr inbounds i16, i16* %24218, i64 16
  %24228 = bitcast i16* %24227 to <16 x i16>*
  %24229 = load <16 x i16>, <16 x i16>* %24228, align 2, !tbaa !396
  %24230 = getelementptr inbounds i16, i16* %24218, i64 2
  %24231 = bitcast i16* %24230 to <16 x i16>*
  %24232 = load <16 x i16>, <16 x i16>* %24231, align 2, !tbaa !396
  %24233 = getelementptr inbounds i16, i16* %24218, i64 18
  %24234 = bitcast i16* %24233 to <16 x i16>*
  %24235 = load <16 x i16>, <16 x i16>* %24234, align 2, !tbaa !396
  %24236 = getelementptr inbounds i16, i16* %24218, i64 4
  %24237 = bitcast i16* %24236 to <16 x i16>*
  %24238 = load <16 x i16>, <16 x i16>* %24237, align 2, !tbaa !396
  %24239 = getelementptr inbounds i16, i16* %24218, i64 20
  %24240 = bitcast i16* %24239 to <16 x i16>*
  %24241 = load <16 x i16>, <16 x i16>* %24240, align 2, !tbaa !396
  %24242 = getelementptr inbounds i16, i16* %24218, i64 3
  %24243 = bitcast i16* %24242 to <16 x i16>*
  %24244 = load <16 x i16>, <16 x i16>* %24243, align 2, !tbaa !396
  %24245 = getelementptr inbounds i16, i16* %24218, i64 19
  %24246 = bitcast i16* %24245 to <16 x i16>*
  %24247 = load <16 x i16>, <16 x i16>* %24246, align 2, !tbaa !396
  %24248 = add <16 x i16> %24226, %24221
  %24249 = add <16 x i16> %24248, %24232
  %24250 = add <16 x i16> %24249, %24238
  %24251 = add <16 x i16> %24250, %24244
  %24252 = add <16 x i16> %24229, %24224
  %24253 = add <16 x i16> %24252, %24235
  %24254 = add <16 x i16> %24253, %24241
  %24255 = add <16 x i16> %24254, %24247
  %24256 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24251, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24257 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24255, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24258 = shufflevector <16 x i16> %24256, <16 x i16> %24257, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24259 = lshr <32 x i16> %24258, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24260 = shufflevector <32 x i16> %24259, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24261 = sext i32 %blur_x.s0.x.v1.base.s1901 to i64
  %24262 = add nsw i64 %24261, %24086
  %24263 = getelementptr inbounds i16, i16* %blur_x879, i64 %24262
  %24264 = bitcast i16* %24263 to <16 x i16>*
  store <16 x i16> %24260, <16 x i16>* %24264, align 2, !tbaa !399
  %24265 = shufflevector <32 x i16> %24259, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24266 = getelementptr inbounds i16, i16* %24263, i64 16
  %24267 = bitcast i16* %24266 to <16 x i16>*
  store <16 x i16> %24265, <16 x i16>* %24267, align 2, !tbaa !399
  br label %"consume blur_x1903"

"consume blur_x1903":                             ; preds = %"for blur_y.s0.x.x.rebased1893", %"produce blur_x1900"
  %24268 = sext i32 %b578 to i64
  %24269 = add nsw i64 %24089, %24268
  %24270 = getelementptr inbounds i16, i16* %blur_x879, i64 %24269
  %24271 = bitcast i16* %24270 to <16 x i16>*
  %24272 = load <16 x i16>, <16 x i16>* %24271, align 2, !tbaa !399
  %24273 = getelementptr inbounds i16, i16* %24270, i64 16
  %24274 = bitcast i16* %24273 to <16 x i16>*
  %24275 = load <16 x i16>, <16 x i16>* %24274, align 2, !tbaa !399
  %24276 = add nsw i64 %24092, %24268
  %24277 = getelementptr inbounds i16, i16* %blur_x879, i64 %24276
  %24278 = bitcast i16* %24277 to <16 x i16>*
  %24279 = load <16 x i16>, <16 x i16>* %24278, align 2, !tbaa !399
  %24280 = getelementptr inbounds i16, i16* %24277, i64 16
  %24281 = bitcast i16* %24280 to <16 x i16>*
  %24282 = load <16 x i16>, <16 x i16>* %24281, align 2, !tbaa !399
  %24283 = add nsw i64 %24095, %24268
  %24284 = getelementptr inbounds i16, i16* %blur_x879, i64 %24283
  %24285 = bitcast i16* %24284 to <16 x i16>*
  %24286 = load <16 x i16>, <16 x i16>* %24285, align 2, !tbaa !399
  %24287 = getelementptr inbounds i16, i16* %24284, i64 16
  %24288 = bitcast i16* %24287 to <16 x i16>*
  %24289 = load <16 x i16>, <16 x i16>* %24288, align 2, !tbaa !399
  %24290 = add nsw i64 %24098, %24268
  %24291 = getelementptr inbounds i16, i16* %blur_x879, i64 %24290
  %24292 = bitcast i16* %24291 to <16 x i16>*
  %24293 = load <16 x i16>, <16 x i16>* %24292, align 2, !tbaa !399
  %24294 = getelementptr inbounds i16, i16* %24291, i64 16
  %24295 = bitcast i16* %24294 to <16 x i16>*
  %24296 = load <16 x i16>, <16 x i16>* %24295, align 2, !tbaa !399
  %24297 = add nsw i64 %24101, %24268
  %24298 = getelementptr inbounds i16, i16* %blur_x879, i64 %24297
  %24299 = bitcast i16* %24298 to <16 x i16>*
  %24300 = load <16 x i16>, <16 x i16>* %24299, align 2, !tbaa !399
  %24301 = getelementptr inbounds i16, i16* %24298, i64 16
  %24302 = bitcast i16* %24301 to <16 x i16>*
  %24303 = load <16 x i16>, <16 x i16>* %24302, align 2, !tbaa !399
  %24304 = add <16 x i16> %24279, %24272
  %24305 = add <16 x i16> %24304, %24286
  %24306 = add <16 x i16> %24305, %24293
  %24307 = add <16 x i16> %24306, %24300
  %24308 = add <16 x i16> %24282, %24275
  %24309 = add <16 x i16> %24308, %24289
  %24310 = add <16 x i16> %24309, %24296
  %24311 = add <16 x i16> %24310, %24303
  %24312 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24307, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24313 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24311, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24314 = shufflevector <16 x i16> %24312, <16 x i16> %24313, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24315 = lshr <32 x i16> %24314, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24316 = shufflevector <32 x i16> %24315, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24317 = add nsw i64 %24105, %24268
  %24318 = getelementptr inbounds i16, i16* %260, i64 %24317
  %24319 = bitcast i16* %24318 to <16 x i16>*
  store <16 x i16> %24316, <16 x i16>* %24319, align 2, !tbaa !401
  %24320 = shufflevector <32 x i16> %24315, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24321 = getelementptr inbounds i16, i16* %24318, i64 16
  %24322 = bitcast i16* %24321 to <16 x i16>*
  store <16 x i16> %24320, <16 x i16>* %24322, align 2, !tbaa !401
  %24323 = add nuw nsw i32 %blur_y.s0.x.x.rebased1895, 1
  %.not2563 = icmp eq i32 %24323, %t1683899
  br i1 %.not2563, label %"end for blur_y.s0.x.x.rebased1894", label %"for blur_y.s0.x.x.rebased1893"

after_bb1904:                                     ; preds = %"end for blur_y.s0.x.x.rebased1894", %"produce blur_x1907"
  br i1 %294, label %"for blur_y.s0.x.x.rebased1919.preheader", label %"end for blur_y.s0.x.x.rebased1920", !prof !386

"for blur_y.s0.x.x.rebased1919.preheader":        ; preds = %after_bb1904
  %24324 = sext i32 %t1688916 to i64
  %24325 = zext i32 %.pre-phi3496 to i64
  %24326 = mul nsw i64 %24325, %306
  %24327 = sub nsw i64 %24326, %290
  %24328 = zext i32 %.pre-phi3490 to i64
  %24329 = mul nsw i64 %24328, %306
  %24330 = sub nsw i64 %24329, %290
  %24331 = zext i32 %.pre-phi3502 to i64
  %24332 = mul nsw i64 %24331, %306
  %24333 = sub nsw i64 %24332, %290
  %24334 = zext i32 %.pre-phi3472 to i64
  %24335 = mul nsw i64 %24334, %306
  %24336 = sub nsw i64 %24335, %290
  %24337 = zext i32 %.pre-phi3468 to i64
  %24338 = mul nsw i64 %24337, %306
  %24339 = sub nsw i64 %24338, %290
  %24340 = sext i32 %a353 to i64
  %24341 = add nsw i64 %24340, 21
  %24342 = mul nsw i64 %24341, %307
  %24343 = add nsw i64 %24342, %310
  br label %"for blur_y.s0.x.x.rebased1919"

"produce blur_x1907":                             ; preds = %"end for blur_y.s0.x.x.rebased1894"
  %24344 = getelementptr inbounds i16, i16* %read_input822, i64 %351
  %24345 = getelementptr inbounds i16, i16* %24344, i64 -31
  %24346 = bitcast i16* %24345 to <16 x i16>*
  %24347 = load <16 x i16>, <16 x i16>* %24346, align 2, !tbaa !396
  %24348 = getelementptr inbounds i16, i16* %24344, i64 -15
  %24349 = bitcast i16* %24348 to <16 x i16>*
  %24350 = load <16 x i16>, <16 x i16>* %24349, align 2, !tbaa !396
  %24351 = getelementptr inbounds i16, i16* %24344, i64 -32
  %24352 = bitcast i16* %24351 to <16 x i16>*
  %24353 = load <16 x i16>, <16 x i16>* %24352, align 2, !tbaa !396
  %24354 = getelementptr inbounds i16, i16* %24344, i64 -16
  %24355 = bitcast i16* %24354 to <16 x i16>*
  %24356 = load <16 x i16>, <16 x i16>* %24355, align 2, !tbaa !396
  %24357 = getelementptr inbounds i16, i16* %24344, i64 -30
  %24358 = bitcast i16* %24357 to <16 x i16>*
  %24359 = load <16 x i16>, <16 x i16>* %24358, align 2, !tbaa !396
  %24360 = getelementptr inbounds i16, i16* %24344, i64 -14
  %24361 = bitcast i16* %24360 to <16 x i16>*
  %24362 = load <16 x i16>, <16 x i16>* %24361, align 2, !tbaa !396
  %24363 = getelementptr inbounds i16, i16* %24344, i64 -28
  %24364 = bitcast i16* %24363 to <16 x i16>*
  %24365 = load <16 x i16>, <16 x i16>* %24364, align 2, !tbaa !396
  %24366 = getelementptr inbounds i16, i16* %24344, i64 -12
  %24367 = bitcast i16* %24366 to <16 x i16>*
  %24368 = load <16 x i16>, <16 x i16>* %24367, align 2, !tbaa !396
  %24369 = getelementptr inbounds i16, i16* %24344, i64 -29
  %24370 = bitcast i16* %24369 to <16 x i16>*
  %24371 = load <16 x i16>, <16 x i16>* %24370, align 2, !tbaa !396
  %24372 = getelementptr inbounds i16, i16* %24344, i64 -13
  %24373 = bitcast i16* %24372 to <16 x i16>*
  %24374 = load <16 x i16>, <16 x i16>* %24373, align 2, !tbaa !396
  %24375 = add <16 x i16> %24353, %24347
  %24376 = add <16 x i16> %24375, %24359
  %24377 = add <16 x i16> %24376, %24365
  %24378 = add <16 x i16> %24377, %24371
  %24379 = add <16 x i16> %24356, %24350
  %24380 = add <16 x i16> %24379, %24362
  %24381 = add <16 x i16> %24380, %24368
  %24382 = add <16 x i16> %24381, %24374
  %24383 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24378, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24384 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24382, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24385 = shufflevector <16 x i16> %24383, <16 x i16> %24384, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24386 = lshr <32 x i16> %24385, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24387 = shufflevector <32 x i16> %24386, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24388 = zext i32 %.pre-phi3472 to i64
  %24389 = mul nsw i64 %291, %24388
  %24390 = add nsw i64 %293, %24389
  %24391 = getelementptr inbounds i16, i16* %blur_x879, i64 %24390
  %24392 = getelementptr inbounds i16, i16* %24391, i64 -32
  %24393 = bitcast i16* %24392 to <16 x i16>*
  store <16 x i16> %24387, <16 x i16>* %24393, align 2, !tbaa !399
  %24394 = shufflevector <32 x i16> %24386, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24395 = getelementptr inbounds i16, i16* %24391, i64 -16
  %24396 = bitcast i16* %24395 to <16 x i16>*
  store <16 x i16> %24394, <16 x i16>* %24396, align 2, !tbaa !399
  %24397 = zext i32 %.pre-phi3496 to i64
  %24398 = mul nsw i64 %24397, %306
  %24399 = add nsw i64 %24398, %288
  %24400 = getelementptr inbounds i16, i16* %blur_x879, i64 %24399
  %24401 = getelementptr inbounds i16, i16* %24400, i64 -32
  %24402 = bitcast i16* %24401 to <16 x i16>*
  %24403 = load <16 x i16>, <16 x i16>* %24402, align 2, !tbaa !399
  %24404 = getelementptr inbounds i16, i16* %24400, i64 -16
  %24405 = bitcast i16* %24404 to <16 x i16>*
  %24406 = load <16 x i16>, <16 x i16>* %24405, align 2, !tbaa !399
  %24407 = zext i32 %.pre-phi3490 to i64
  %24408 = mul nsw i64 %24407, %306
  %24409 = add nsw i64 %24408, %288
  %24410 = getelementptr inbounds i16, i16* %blur_x879, i64 %24409
  %24411 = getelementptr inbounds i16, i16* %24410, i64 -32
  %24412 = bitcast i16* %24411 to <16 x i16>*
  %24413 = load <16 x i16>, <16 x i16>* %24412, align 2, !tbaa !399
  %24414 = getelementptr inbounds i16, i16* %24410, i64 -16
  %24415 = bitcast i16* %24414 to <16 x i16>*
  %24416 = load <16 x i16>, <16 x i16>* %24415, align 2, !tbaa !399
  %24417 = zext i32 %.pre-phi3502 to i64
  %24418 = mul nsw i64 %24417, %306
  %24419 = add nsw i64 %24418, %288
  %24420 = getelementptr inbounds i16, i16* %blur_x879, i64 %24419
  %24421 = getelementptr inbounds i16, i16* %24420, i64 -32
  %24422 = bitcast i16* %24421 to <16 x i16>*
  %24423 = load <16 x i16>, <16 x i16>* %24422, align 2, !tbaa !399
  %24424 = getelementptr inbounds i16, i16* %24420, i64 -16
  %24425 = bitcast i16* %24424 to <16 x i16>*
  %24426 = load <16 x i16>, <16 x i16>* %24425, align 2, !tbaa !399
  %24427 = mul nsw i64 %24388, %306
  %24428 = add nsw i64 %24427, %288
  %24429 = getelementptr inbounds i16, i16* %blur_x879, i64 %24428
  %24430 = getelementptr inbounds i16, i16* %24429, i64 -32
  %24431 = bitcast i16* %24430 to <16 x i16>*
  %24432 = load <16 x i16>, <16 x i16>* %24431, align 2, !tbaa !399
  %24433 = getelementptr inbounds i16, i16* %24429, i64 -16
  %24434 = bitcast i16* %24433 to <16 x i16>*
  %24435 = load <16 x i16>, <16 x i16>* %24434, align 2, !tbaa !399
  %24436 = zext i32 %.pre-phi3468 to i64
  %24437 = mul nsw i64 %24436, %306
  %24438 = add nsw i64 %24437, %288
  %24439 = getelementptr inbounds i16, i16* %blur_x879, i64 %24438
  %24440 = getelementptr inbounds i16, i16* %24439, i64 -32
  %24441 = bitcast i16* %24440 to <16 x i16>*
  %24442 = load <16 x i16>, <16 x i16>* %24441, align 2, !tbaa !399
  %24443 = getelementptr inbounds i16, i16* %24439, i64 -16
  %24444 = bitcast i16* %24443 to <16 x i16>*
  %24445 = load <16 x i16>, <16 x i16>* %24444, align 2, !tbaa !399
  %24446 = add <16 x i16> %24413, %24403
  %24447 = add <16 x i16> %24446, %24423
  %24448 = add <16 x i16> %24447, %24432
  %24449 = add <16 x i16> %24448, %24442
  %24450 = add <16 x i16> %24416, %24406
  %24451 = add <16 x i16> %24450, %24426
  %24452 = add <16 x i16> %24451, %24435
  %24453 = add <16 x i16> %24452, %24445
  %24454 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24449, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24455 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24453, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24456 = shufflevector <16 x i16> %24454, <16 x i16> %24455, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24457 = lshr <32 x i16> %24456, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24458 = shufflevector <32 x i16> %24457, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24459 = sext i32 %a353 to i64
  %24460 = add nsw i64 %24459, 21
  %24461 = mul nsw i64 %24460, %307
  %24462 = add nsw i64 %309, %24461
  %24463 = getelementptr inbounds i16, i16* %260, i64 %24462
  %24464 = getelementptr inbounds i16, i16* %24463, i64 -32
  %24465 = bitcast i16* %24464 to <16 x i16>*
  store <16 x i16> %24458, <16 x i16>* %24465, align 2, !tbaa !401
  %24466 = shufflevector <32 x i16> %24457, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24467 = getelementptr inbounds i16, i16* %24463, i64 -16
  %24468 = bitcast i16* %24467 to <16 x i16>*
  store <16 x i16> %24466, <16 x i16>* %24468, align 2, !tbaa !401
  br label %after_bb1904

"for blur_y.s0.x.x.rebased1919":                  ; preds = %"for blur_y.s0.x.x.rebased1919.preheader", %"consume blur_x1928"
  %indvars.iv3338 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1919.preheader" ], [ %indvars.iv.next3339, %"consume blur_x1928" ]
  %24469 = add nsw i64 %indvars.iv3338, %295
  %24470 = icmp slt i64 %24469, 1
  %24471 = trunc i64 %24469 to i32
  %24472 = shl nsw i32 %24471, 5
  %24473 = icmp sgt i32 %198, %24472
  %24474 = or i1 %24470, %24473
  br i1 %24474, label %"produce blur_x1926", label %"for blur_y.s0.x.x.rebased1919.consume blur_x1928_crit_edge"

"for blur_y.s0.x.x.rebased1919.consume blur_x1928_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1919"
  %.pre3539 = shl nsw i64 %24469, 5
  br label %"consume blur_x1928"

"end for blur_y.s0.x.x.rebased1920":              ; preds = %"consume blur_x1928", %after_bb1904
  br i1 %296, label %"for blur_y.s0.x.x.rebased1936.preheader", label %"end for blur_y.s0.x.x.rebased1937", !prof !386

"for blur_y.s0.x.x.rebased1936.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1920"
  %24475 = sext i32 %t1688916 to i64
  %24476 = zext i32 %.pre-phi3496 to i64
  %24477 = mul nsw i64 %24476, %306
  %24478 = sub nsw i64 %24477, %290
  %24479 = zext i32 %.pre-phi3490 to i64
  %24480 = mul nsw i64 %24479, %306
  %24481 = sub nsw i64 %24480, %290
  %24482 = zext i32 %.pre-phi3502 to i64
  %24483 = mul nsw i64 %24482, %306
  %24484 = sub nsw i64 %24483, %290
  %24485 = zext i32 %.pre-phi3472 to i64
  %24486 = mul nsw i64 %24485, %306
  %24487 = sub nsw i64 %24486, %290
  %24488 = zext i32 %.pre-phi3468 to i64
  %24489 = mul nsw i64 %24488, %306
  %24490 = sub nsw i64 %24489, %290
  %24491 = sext i32 %a353 to i64
  %24492 = add nsw i64 %24491, 21
  %24493 = mul nsw i64 %24492, %307
  %24494 = add nsw i64 %24493, %310
  br label %"for blur_y.s0.x.x.rebased1936"

"produce blur_x1926":                             ; preds = %"for blur_y.s0.x.x.rebased1919"
  %t10481927 = add nsw i32 %24472, %t20411916
  %24495 = sext i32 %t10481927 to i64
  %24496 = getelementptr inbounds i16, i16* %read_input822, i64 %24495
  %24497 = getelementptr inbounds i16, i16* %24496, i64 1
  %24498 = bitcast i16* %24497 to <16 x i16>*
  %24499 = load <16 x i16>, <16 x i16>* %24498, align 2, !tbaa !396
  %24500 = getelementptr inbounds i16, i16* %24496, i64 17
  %24501 = bitcast i16* %24500 to <16 x i16>*
  %24502 = load <16 x i16>, <16 x i16>* %24501, align 2, !tbaa !396
  %24503 = bitcast i16* %24496 to <16 x i16>*
  %24504 = load <16 x i16>, <16 x i16>* %24503, align 2, !tbaa !396
  %24505 = getelementptr inbounds i16, i16* %24496, i64 16
  %24506 = bitcast i16* %24505 to <16 x i16>*
  %24507 = load <16 x i16>, <16 x i16>* %24506, align 2, !tbaa !396
  %24508 = getelementptr inbounds i16, i16* %24496, i64 2
  %24509 = bitcast i16* %24508 to <16 x i16>*
  %24510 = load <16 x i16>, <16 x i16>* %24509, align 2, !tbaa !396
  %24511 = getelementptr inbounds i16, i16* %24496, i64 18
  %24512 = bitcast i16* %24511 to <16 x i16>*
  %24513 = load <16 x i16>, <16 x i16>* %24512, align 2, !tbaa !396
  %24514 = getelementptr inbounds i16, i16* %24496, i64 4
  %24515 = bitcast i16* %24514 to <16 x i16>*
  %24516 = load <16 x i16>, <16 x i16>* %24515, align 2, !tbaa !396
  %24517 = getelementptr inbounds i16, i16* %24496, i64 20
  %24518 = bitcast i16* %24517 to <16 x i16>*
  %24519 = load <16 x i16>, <16 x i16>* %24518, align 2, !tbaa !396
  %24520 = getelementptr inbounds i16, i16* %24496, i64 3
  %24521 = bitcast i16* %24520 to <16 x i16>*
  %24522 = load <16 x i16>, <16 x i16>* %24521, align 2, !tbaa !396
  %24523 = getelementptr inbounds i16, i16* %24496, i64 19
  %24524 = bitcast i16* %24523 to <16 x i16>*
  %24525 = load <16 x i16>, <16 x i16>* %24524, align 2, !tbaa !396
  %24526 = add <16 x i16> %24504, %24499
  %24527 = add <16 x i16> %24526, %24510
  %24528 = add <16 x i16> %24527, %24516
  %24529 = add <16 x i16> %24528, %24522
  %24530 = add <16 x i16> %24507, %24502
  %24531 = add <16 x i16> %24530, %24513
  %24532 = add <16 x i16> %24531, %24519
  %24533 = add <16 x i16> %24532, %24525
  %24534 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24529, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24535 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24533, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24536 = shufflevector <16 x i16> %24534, <16 x i16> %24535, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24537 = lshr <32 x i16> %24536, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24538 = shufflevector <32 x i16> %24537, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24539 = shl nsw i64 %24469, 5
  %24540 = add nsw i64 %24539, %24324
  %24541 = getelementptr inbounds i16, i16* %blur_x879, i64 %24540
  %24542 = bitcast i16* %24541 to <16 x i16>*
  store <16 x i16> %24538, <16 x i16>* %24542, align 2, !tbaa !399
  %24543 = shufflevector <32 x i16> %24537, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24544 = getelementptr inbounds i16, i16* %24541, i64 16
  %24545 = bitcast i16* %24544 to <16 x i16>*
  store <16 x i16> %24543, <16 x i16>* %24545, align 2, !tbaa !399
  br label %"consume blur_x1928"

"consume blur_x1928":                             ; preds = %"for blur_y.s0.x.x.rebased1919.consume blur_x1928_crit_edge", %"produce blur_x1926"
  %.pre-phi3540 = phi i64 [ %.pre3539, %"for blur_y.s0.x.x.rebased1919.consume blur_x1928_crit_edge" ], [ %24539, %"produce blur_x1926" ]
  %24546 = add nsw i64 %24327, %.pre-phi3540
  %24547 = getelementptr inbounds i16, i16* %blur_x879, i64 %24546
  %24548 = bitcast i16* %24547 to <16 x i16>*
  %24549 = load <16 x i16>, <16 x i16>* %24548, align 2, !tbaa !399
  %24550 = getelementptr inbounds i16, i16* %24547, i64 16
  %24551 = bitcast i16* %24550 to <16 x i16>*
  %24552 = load <16 x i16>, <16 x i16>* %24551, align 2, !tbaa !399
  %24553 = add nsw i64 %24330, %.pre-phi3540
  %24554 = getelementptr inbounds i16, i16* %blur_x879, i64 %24553
  %24555 = bitcast i16* %24554 to <16 x i16>*
  %24556 = load <16 x i16>, <16 x i16>* %24555, align 2, !tbaa !399
  %24557 = getelementptr inbounds i16, i16* %24554, i64 16
  %24558 = bitcast i16* %24557 to <16 x i16>*
  %24559 = load <16 x i16>, <16 x i16>* %24558, align 2, !tbaa !399
  %24560 = add nsw i64 %24333, %.pre-phi3540
  %24561 = getelementptr inbounds i16, i16* %blur_x879, i64 %24560
  %24562 = bitcast i16* %24561 to <16 x i16>*
  %24563 = load <16 x i16>, <16 x i16>* %24562, align 2, !tbaa !399
  %24564 = getelementptr inbounds i16, i16* %24561, i64 16
  %24565 = bitcast i16* %24564 to <16 x i16>*
  %24566 = load <16 x i16>, <16 x i16>* %24565, align 2, !tbaa !399
  %24567 = add nsw i64 %24336, %.pre-phi3540
  %24568 = getelementptr inbounds i16, i16* %blur_x879, i64 %24567
  %24569 = bitcast i16* %24568 to <16 x i16>*
  %24570 = load <16 x i16>, <16 x i16>* %24569, align 2, !tbaa !399
  %24571 = getelementptr inbounds i16, i16* %24568, i64 16
  %24572 = bitcast i16* %24571 to <16 x i16>*
  %24573 = load <16 x i16>, <16 x i16>* %24572, align 2, !tbaa !399
  %24574 = add nsw i64 %24339, %.pre-phi3540
  %24575 = getelementptr inbounds i16, i16* %blur_x879, i64 %24574
  %24576 = bitcast i16* %24575 to <16 x i16>*
  %24577 = load <16 x i16>, <16 x i16>* %24576, align 2, !tbaa !399
  %24578 = getelementptr inbounds i16, i16* %24575, i64 16
  %24579 = bitcast i16* %24578 to <16 x i16>*
  %24580 = load <16 x i16>, <16 x i16>* %24579, align 2, !tbaa !399
  %24581 = add <16 x i16> %24556, %24549
  %24582 = add <16 x i16> %24581, %24563
  %24583 = add <16 x i16> %24582, %24570
  %24584 = add <16 x i16> %24583, %24577
  %24585 = add <16 x i16> %24559, %24552
  %24586 = add <16 x i16> %24585, %24566
  %24587 = add <16 x i16> %24586, %24573
  %24588 = add <16 x i16> %24587, %24580
  %24589 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24584, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24590 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24588, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24591 = shufflevector <16 x i16> %24589, <16 x i16> %24590, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24592 = lshr <32 x i16> %24591, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24593 = shufflevector <32 x i16> %24592, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24594 = add nsw i64 %24343, %.pre-phi3540
  %24595 = getelementptr inbounds i16, i16* %260, i64 %24594
  %24596 = bitcast i16* %24595 to <16 x i16>*
  store <16 x i16> %24593, <16 x i16>* %24596, align 2, !tbaa !401
  %24597 = shufflevector <32 x i16> %24592, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24598 = getelementptr inbounds i16, i16* %24595, i64 16
  %24599 = bitcast i16* %24598 to <16 x i16>*
  store <16 x i16> %24597, <16 x i16>* %24599, align 2, !tbaa !401
  %indvars.iv.next3339 = add nuw nsw i64 %indvars.iv3338, 1
  %.not2562 = icmp eq i64 %indvars.iv.next3339, %378
  br i1 %.not2562, label %"end for blur_y.s0.x.x.rebased1920", label %"for blur_y.s0.x.x.rebased1919"

"for blur_y.s0.x.x.rebased1936":                  ; preds = %"for blur_y.s0.x.x.rebased1936.preheader", %"consume blur_x1946"
  %blur_y.s0.x.x.rebased1938 = phi i32 [ %24712, %"consume blur_x1946" ], [ 0, %"for blur_y.s0.x.x.rebased1936.preheader" ]
  %24600 = add nsw i32 %blur_y.s0.x.x.rebased1938, %t1626814
  %a579 = shl nsw i32 %24600, 5
  %24601 = icmp sgt i32 %a341, %a579
  %b585 = select i1 %24601, i32 %a579, i32 %a341
  %24602 = icmp slt i32 %24600, 1
  %24603 = icmp sgt i32 %198, %a579
  %24604 = or i1 %24602, %24603
  br i1 %24604, label %"produce blur_x1943", label %"consume blur_x1946"

"end for blur_y.s0.x.x.rebased1937":              ; preds = %"consume blur_x1946", %"end for blur_y.s0.x.x.rebased1920"
  br i1 %228, label %"produce blur_x1950", label %after_bb1947

"produce blur_x1943":                             ; preds = %"for blur_y.s0.x.x.rebased1936"
  %24605 = icmp slt i32 %b585, %198
  %blur_x.s0.x.v1.base.s1944 = select i1 %24605, i32 %b585, i32 %198
  %t10531945 = add nsw i32 %blur_x.s0.x.v1.base.s1944, %t20411916
  %24606 = sext i32 %t10531945 to i64
  %24607 = getelementptr inbounds i16, i16* %read_input822, i64 %24606
  %24608 = getelementptr inbounds i16, i16* %24607, i64 1
  %24609 = bitcast i16* %24608 to <16 x i16>*
  %24610 = load <16 x i16>, <16 x i16>* %24609, align 2, !tbaa !396
  %24611 = getelementptr inbounds i16, i16* %24607, i64 17
  %24612 = bitcast i16* %24611 to <16 x i16>*
  %24613 = load <16 x i16>, <16 x i16>* %24612, align 2, !tbaa !396
  %24614 = bitcast i16* %24607 to <16 x i16>*
  %24615 = load <16 x i16>, <16 x i16>* %24614, align 2, !tbaa !396
  %24616 = getelementptr inbounds i16, i16* %24607, i64 16
  %24617 = bitcast i16* %24616 to <16 x i16>*
  %24618 = load <16 x i16>, <16 x i16>* %24617, align 2, !tbaa !396
  %24619 = getelementptr inbounds i16, i16* %24607, i64 2
  %24620 = bitcast i16* %24619 to <16 x i16>*
  %24621 = load <16 x i16>, <16 x i16>* %24620, align 2, !tbaa !396
  %24622 = getelementptr inbounds i16, i16* %24607, i64 18
  %24623 = bitcast i16* %24622 to <16 x i16>*
  %24624 = load <16 x i16>, <16 x i16>* %24623, align 2, !tbaa !396
  %24625 = getelementptr inbounds i16, i16* %24607, i64 4
  %24626 = bitcast i16* %24625 to <16 x i16>*
  %24627 = load <16 x i16>, <16 x i16>* %24626, align 2, !tbaa !396
  %24628 = getelementptr inbounds i16, i16* %24607, i64 20
  %24629 = bitcast i16* %24628 to <16 x i16>*
  %24630 = load <16 x i16>, <16 x i16>* %24629, align 2, !tbaa !396
  %24631 = getelementptr inbounds i16, i16* %24607, i64 3
  %24632 = bitcast i16* %24631 to <16 x i16>*
  %24633 = load <16 x i16>, <16 x i16>* %24632, align 2, !tbaa !396
  %24634 = getelementptr inbounds i16, i16* %24607, i64 19
  %24635 = bitcast i16* %24634 to <16 x i16>*
  %24636 = load <16 x i16>, <16 x i16>* %24635, align 2, !tbaa !396
  %24637 = add <16 x i16> %24615, %24610
  %24638 = add <16 x i16> %24637, %24621
  %24639 = add <16 x i16> %24638, %24627
  %24640 = add <16 x i16> %24639, %24633
  %24641 = add <16 x i16> %24618, %24613
  %24642 = add <16 x i16> %24641, %24624
  %24643 = add <16 x i16> %24642, %24630
  %24644 = add <16 x i16> %24643, %24636
  %24645 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24640, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24646 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24644, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24647 = shufflevector <16 x i16> %24645, <16 x i16> %24646, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24648 = lshr <32 x i16> %24647, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24649 = shufflevector <32 x i16> %24648, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24650 = sext i32 %blur_x.s0.x.v1.base.s1944 to i64
  %24651 = add nsw i64 %24650, %24475
  %24652 = getelementptr inbounds i16, i16* %blur_x879, i64 %24651
  %24653 = bitcast i16* %24652 to <16 x i16>*
  store <16 x i16> %24649, <16 x i16>* %24653, align 2, !tbaa !399
  %24654 = shufflevector <32 x i16> %24648, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24655 = getelementptr inbounds i16, i16* %24652, i64 16
  %24656 = bitcast i16* %24655 to <16 x i16>*
  store <16 x i16> %24654, <16 x i16>* %24656, align 2, !tbaa !399
  br label %"consume blur_x1946"

"consume blur_x1946":                             ; preds = %"for blur_y.s0.x.x.rebased1936", %"produce blur_x1943"
  %24657 = sext i32 %b585 to i64
  %24658 = add nsw i64 %24478, %24657
  %24659 = getelementptr inbounds i16, i16* %blur_x879, i64 %24658
  %24660 = bitcast i16* %24659 to <16 x i16>*
  %24661 = load <16 x i16>, <16 x i16>* %24660, align 2, !tbaa !399
  %24662 = getelementptr inbounds i16, i16* %24659, i64 16
  %24663 = bitcast i16* %24662 to <16 x i16>*
  %24664 = load <16 x i16>, <16 x i16>* %24663, align 2, !tbaa !399
  %24665 = add nsw i64 %24481, %24657
  %24666 = getelementptr inbounds i16, i16* %blur_x879, i64 %24665
  %24667 = bitcast i16* %24666 to <16 x i16>*
  %24668 = load <16 x i16>, <16 x i16>* %24667, align 2, !tbaa !399
  %24669 = getelementptr inbounds i16, i16* %24666, i64 16
  %24670 = bitcast i16* %24669 to <16 x i16>*
  %24671 = load <16 x i16>, <16 x i16>* %24670, align 2, !tbaa !399
  %24672 = add nsw i64 %24484, %24657
  %24673 = getelementptr inbounds i16, i16* %blur_x879, i64 %24672
  %24674 = bitcast i16* %24673 to <16 x i16>*
  %24675 = load <16 x i16>, <16 x i16>* %24674, align 2, !tbaa !399
  %24676 = getelementptr inbounds i16, i16* %24673, i64 16
  %24677 = bitcast i16* %24676 to <16 x i16>*
  %24678 = load <16 x i16>, <16 x i16>* %24677, align 2, !tbaa !399
  %24679 = add nsw i64 %24487, %24657
  %24680 = getelementptr inbounds i16, i16* %blur_x879, i64 %24679
  %24681 = bitcast i16* %24680 to <16 x i16>*
  %24682 = load <16 x i16>, <16 x i16>* %24681, align 2, !tbaa !399
  %24683 = getelementptr inbounds i16, i16* %24680, i64 16
  %24684 = bitcast i16* %24683 to <16 x i16>*
  %24685 = load <16 x i16>, <16 x i16>* %24684, align 2, !tbaa !399
  %24686 = add nsw i64 %24490, %24657
  %24687 = getelementptr inbounds i16, i16* %blur_x879, i64 %24686
  %24688 = bitcast i16* %24687 to <16 x i16>*
  %24689 = load <16 x i16>, <16 x i16>* %24688, align 2, !tbaa !399
  %24690 = getelementptr inbounds i16, i16* %24687, i64 16
  %24691 = bitcast i16* %24690 to <16 x i16>*
  %24692 = load <16 x i16>, <16 x i16>* %24691, align 2, !tbaa !399
  %24693 = add <16 x i16> %24668, %24661
  %24694 = add <16 x i16> %24693, %24675
  %24695 = add <16 x i16> %24694, %24682
  %24696 = add <16 x i16> %24695, %24689
  %24697 = add <16 x i16> %24671, %24664
  %24698 = add <16 x i16> %24697, %24678
  %24699 = add <16 x i16> %24698, %24685
  %24700 = add <16 x i16> %24699, %24692
  %24701 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24696, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24702 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24700, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24703 = shufflevector <16 x i16> %24701, <16 x i16> %24702, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24704 = lshr <32 x i16> %24703, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24705 = shufflevector <32 x i16> %24704, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24706 = add nsw i64 %24494, %24657
  %24707 = getelementptr inbounds i16, i16* %260, i64 %24706
  %24708 = bitcast i16* %24707 to <16 x i16>*
  store <16 x i16> %24705, <16 x i16>* %24708, align 2, !tbaa !401
  %24709 = shufflevector <32 x i16> %24704, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24710 = getelementptr inbounds i16, i16* %24707, i64 16
  %24711 = bitcast i16* %24710 to <16 x i16>*
  store <16 x i16> %24709, <16 x i16>* %24711, align 2, !tbaa !401
  %24712 = add nuw nsw i32 %blur_y.s0.x.x.rebased1938, 1
  %.not2561 = icmp eq i32 %24712, %t1683899
  br i1 %.not2561, label %"end for blur_y.s0.x.x.rebased1937", label %"for blur_y.s0.x.x.rebased1936"

after_bb1947:                                     ; preds = %"end for blur_y.s0.x.x.rebased1937", %"produce blur_x1950"
  br i1 %294, label %"for blur_y.s0.x.x.rebased1962.preheader", label %"end for blur_y.s0.x.x.rebased1963", !prof !386

"for blur_y.s0.x.x.rebased1962.preheader":        ; preds = %after_bb1947
  %24713 = sext i32 %t1694946 to i64
  %24714 = zext i32 %.pre-phi3502 to i64
  %24715 = mul nsw i64 %24714, %306
  %24716 = sub nsw i64 %24715, %290
  %24717 = zext i32 %.pre-phi3496 to i64
  %24718 = mul nsw i64 %24717, %306
  %24719 = sub nsw i64 %24718, %290
  %24720 = zext i32 %.pre-phi3468 to i64
  %24721 = mul nsw i64 %24720, %306
  %24722 = sub nsw i64 %24721, %290
  %24723 = zext i32 %.pre-phi3476 to i64
  %24724 = mul nsw i64 %24723, %306
  %24725 = sub nsw i64 %24724, %290
  %24726 = zext i32 %.pre-phi3472 to i64
  %24727 = mul nsw i64 %24726, %306
  %24728 = sub nsw i64 %24727, %290
  %24729 = sext i32 %a353 to i64
  %24730 = add nsw i64 %24729, 22
  %24731 = mul nsw i64 %24730, %307
  %24732 = add nsw i64 %24731, %310
  br label %"for blur_y.s0.x.x.rebased1962"

"produce blur_x1950":                             ; preds = %"end for blur_y.s0.x.x.rebased1937"
  %24733 = getelementptr inbounds i16, i16* %read_input822, i64 %353
  %24734 = getelementptr inbounds i16, i16* %24733, i64 -31
  %24735 = bitcast i16* %24734 to <16 x i16>*
  %24736 = load <16 x i16>, <16 x i16>* %24735, align 2, !tbaa !396
  %24737 = getelementptr inbounds i16, i16* %24733, i64 -15
  %24738 = bitcast i16* %24737 to <16 x i16>*
  %24739 = load <16 x i16>, <16 x i16>* %24738, align 2, !tbaa !396
  %24740 = getelementptr inbounds i16, i16* %24733, i64 -32
  %24741 = bitcast i16* %24740 to <16 x i16>*
  %24742 = load <16 x i16>, <16 x i16>* %24741, align 2, !tbaa !396
  %24743 = getelementptr inbounds i16, i16* %24733, i64 -16
  %24744 = bitcast i16* %24743 to <16 x i16>*
  %24745 = load <16 x i16>, <16 x i16>* %24744, align 2, !tbaa !396
  %24746 = getelementptr inbounds i16, i16* %24733, i64 -30
  %24747 = bitcast i16* %24746 to <16 x i16>*
  %24748 = load <16 x i16>, <16 x i16>* %24747, align 2, !tbaa !396
  %24749 = getelementptr inbounds i16, i16* %24733, i64 -14
  %24750 = bitcast i16* %24749 to <16 x i16>*
  %24751 = load <16 x i16>, <16 x i16>* %24750, align 2, !tbaa !396
  %24752 = getelementptr inbounds i16, i16* %24733, i64 -28
  %24753 = bitcast i16* %24752 to <16 x i16>*
  %24754 = load <16 x i16>, <16 x i16>* %24753, align 2, !tbaa !396
  %24755 = getelementptr inbounds i16, i16* %24733, i64 -12
  %24756 = bitcast i16* %24755 to <16 x i16>*
  %24757 = load <16 x i16>, <16 x i16>* %24756, align 2, !tbaa !396
  %24758 = getelementptr inbounds i16, i16* %24733, i64 -29
  %24759 = bitcast i16* %24758 to <16 x i16>*
  %24760 = load <16 x i16>, <16 x i16>* %24759, align 2, !tbaa !396
  %24761 = getelementptr inbounds i16, i16* %24733, i64 -13
  %24762 = bitcast i16* %24761 to <16 x i16>*
  %24763 = load <16 x i16>, <16 x i16>* %24762, align 2, !tbaa !396
  %24764 = add <16 x i16> %24742, %24736
  %24765 = add <16 x i16> %24764, %24748
  %24766 = add <16 x i16> %24765, %24754
  %24767 = add <16 x i16> %24766, %24760
  %24768 = add <16 x i16> %24745, %24739
  %24769 = add <16 x i16> %24768, %24751
  %24770 = add <16 x i16> %24769, %24757
  %24771 = add <16 x i16> %24770, %24763
  %24772 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24767, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24773 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24771, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24774 = shufflevector <16 x i16> %24772, <16 x i16> %24773, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24775 = lshr <32 x i16> %24774, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24776 = shufflevector <32 x i16> %24775, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24777 = zext i32 %.pre-phi3476 to i64
  %24778 = mul nsw i64 %291, %24777
  %24779 = add nsw i64 %293, %24778
  %24780 = getelementptr inbounds i16, i16* %blur_x879, i64 %24779
  %24781 = getelementptr inbounds i16, i16* %24780, i64 -32
  %24782 = bitcast i16* %24781 to <16 x i16>*
  store <16 x i16> %24776, <16 x i16>* %24782, align 2, !tbaa !399
  %24783 = shufflevector <32 x i16> %24775, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24784 = getelementptr inbounds i16, i16* %24780, i64 -16
  %24785 = bitcast i16* %24784 to <16 x i16>*
  store <16 x i16> %24783, <16 x i16>* %24785, align 2, !tbaa !399
  %24786 = zext i32 %.pre-phi3502 to i64
  %24787 = mul nsw i64 %24786, %306
  %24788 = add nsw i64 %24787, %288
  %24789 = getelementptr inbounds i16, i16* %blur_x879, i64 %24788
  %24790 = getelementptr inbounds i16, i16* %24789, i64 -32
  %24791 = bitcast i16* %24790 to <16 x i16>*
  %24792 = load <16 x i16>, <16 x i16>* %24791, align 2, !tbaa !399
  %24793 = getelementptr inbounds i16, i16* %24789, i64 -16
  %24794 = bitcast i16* %24793 to <16 x i16>*
  %24795 = load <16 x i16>, <16 x i16>* %24794, align 2, !tbaa !399
  %24796 = zext i32 %.pre-phi3496 to i64
  %24797 = mul nsw i64 %24796, %306
  %24798 = add nsw i64 %24797, %288
  %24799 = getelementptr inbounds i16, i16* %blur_x879, i64 %24798
  %24800 = getelementptr inbounds i16, i16* %24799, i64 -32
  %24801 = bitcast i16* %24800 to <16 x i16>*
  %24802 = load <16 x i16>, <16 x i16>* %24801, align 2, !tbaa !399
  %24803 = getelementptr inbounds i16, i16* %24799, i64 -16
  %24804 = bitcast i16* %24803 to <16 x i16>*
  %24805 = load <16 x i16>, <16 x i16>* %24804, align 2, !tbaa !399
  %24806 = zext i32 %.pre-phi3468 to i64
  %24807 = mul nsw i64 %24806, %306
  %24808 = add nsw i64 %24807, %288
  %24809 = getelementptr inbounds i16, i16* %blur_x879, i64 %24808
  %24810 = getelementptr inbounds i16, i16* %24809, i64 -32
  %24811 = bitcast i16* %24810 to <16 x i16>*
  %24812 = load <16 x i16>, <16 x i16>* %24811, align 2, !tbaa !399
  %24813 = getelementptr inbounds i16, i16* %24809, i64 -16
  %24814 = bitcast i16* %24813 to <16 x i16>*
  %24815 = load <16 x i16>, <16 x i16>* %24814, align 2, !tbaa !399
  %24816 = mul nsw i64 %24777, %306
  %24817 = add nsw i64 %24816, %288
  %24818 = getelementptr inbounds i16, i16* %blur_x879, i64 %24817
  %24819 = getelementptr inbounds i16, i16* %24818, i64 -32
  %24820 = bitcast i16* %24819 to <16 x i16>*
  %24821 = load <16 x i16>, <16 x i16>* %24820, align 2, !tbaa !399
  %24822 = getelementptr inbounds i16, i16* %24818, i64 -16
  %24823 = bitcast i16* %24822 to <16 x i16>*
  %24824 = load <16 x i16>, <16 x i16>* %24823, align 2, !tbaa !399
  %24825 = zext i32 %.pre-phi3472 to i64
  %24826 = mul nsw i64 %24825, %306
  %24827 = add nsw i64 %24826, %288
  %24828 = getelementptr inbounds i16, i16* %blur_x879, i64 %24827
  %24829 = getelementptr inbounds i16, i16* %24828, i64 -32
  %24830 = bitcast i16* %24829 to <16 x i16>*
  %24831 = load <16 x i16>, <16 x i16>* %24830, align 2, !tbaa !399
  %24832 = getelementptr inbounds i16, i16* %24828, i64 -16
  %24833 = bitcast i16* %24832 to <16 x i16>*
  %24834 = load <16 x i16>, <16 x i16>* %24833, align 2, !tbaa !399
  %24835 = add <16 x i16> %24802, %24792
  %24836 = add <16 x i16> %24835, %24812
  %24837 = add <16 x i16> %24836, %24821
  %24838 = add <16 x i16> %24837, %24831
  %24839 = add <16 x i16> %24805, %24795
  %24840 = add <16 x i16> %24839, %24815
  %24841 = add <16 x i16> %24840, %24824
  %24842 = add <16 x i16> %24841, %24834
  %24843 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24838, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24844 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24842, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24845 = shufflevector <16 x i16> %24843, <16 x i16> %24844, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24846 = lshr <32 x i16> %24845, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24847 = shufflevector <32 x i16> %24846, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24848 = sext i32 %a353 to i64
  %24849 = add nsw i64 %24848, 22
  %24850 = mul nsw i64 %24849, %307
  %24851 = add nsw i64 %309, %24850
  %24852 = getelementptr inbounds i16, i16* %260, i64 %24851
  %24853 = getelementptr inbounds i16, i16* %24852, i64 -32
  %24854 = bitcast i16* %24853 to <16 x i16>*
  store <16 x i16> %24847, <16 x i16>* %24854, align 2, !tbaa !401
  %24855 = shufflevector <32 x i16> %24846, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24856 = getelementptr inbounds i16, i16* %24852, i64 -16
  %24857 = bitcast i16* %24856 to <16 x i16>*
  store <16 x i16> %24855, <16 x i16>* %24857, align 2, !tbaa !401
  br label %after_bb1947

"for blur_y.s0.x.x.rebased1962":                  ; preds = %"for blur_y.s0.x.x.rebased1962.preheader", %"consume blur_x1971"
  %indvars.iv3341 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1962.preheader" ], [ %indvars.iv.next3342, %"consume blur_x1971" ]
  %24858 = add nsw i64 %indvars.iv3341, %295
  %24859 = icmp slt i64 %24858, 1
  %24860 = trunc i64 %24858 to i32
  %24861 = shl nsw i32 %24860, 5
  %24862 = icmp sgt i32 %198, %24861
  %24863 = or i1 %24859, %24862
  br i1 %24863, label %"produce blur_x1969", label %"for blur_y.s0.x.x.rebased1962.consume blur_x1971_crit_edge"

"for blur_y.s0.x.x.rebased1962.consume blur_x1971_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1962"
  %.pre3541 = shl nsw i64 %24858, 5
  br label %"consume blur_x1971"

"end for blur_y.s0.x.x.rebased1963":              ; preds = %"consume blur_x1971", %after_bb1947
  br i1 %296, label %"for blur_y.s0.x.x.rebased1979.preheader", label %"end for blur_y.s0.x.x.rebased1980", !prof !386

"for blur_y.s0.x.x.rebased1979.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1963"
  %24864 = sext i32 %t1694946 to i64
  %24865 = zext i32 %.pre-phi3502 to i64
  %24866 = mul nsw i64 %24865, %306
  %24867 = sub nsw i64 %24866, %290
  %24868 = zext i32 %.pre-phi3496 to i64
  %24869 = mul nsw i64 %24868, %306
  %24870 = sub nsw i64 %24869, %290
  %24871 = zext i32 %.pre-phi3468 to i64
  %24872 = mul nsw i64 %24871, %306
  %24873 = sub nsw i64 %24872, %290
  %24874 = zext i32 %.pre-phi3476 to i64
  %24875 = mul nsw i64 %24874, %306
  %24876 = sub nsw i64 %24875, %290
  %24877 = zext i32 %.pre-phi3472 to i64
  %24878 = mul nsw i64 %24877, %306
  %24879 = sub nsw i64 %24878, %290
  %24880 = sext i32 %a353 to i64
  %24881 = add nsw i64 %24880, 22
  %24882 = mul nsw i64 %24881, %307
  %24883 = add nsw i64 %24882, %310
  br label %"for blur_y.s0.x.x.rebased1979"

"produce blur_x1969":                             ; preds = %"for blur_y.s0.x.x.rebased1962"
  %t10641970 = add nsw i32 %24861, %t20571959
  %24884 = sext i32 %t10641970 to i64
  %24885 = getelementptr inbounds i16, i16* %read_input822, i64 %24884
  %24886 = getelementptr inbounds i16, i16* %24885, i64 1
  %24887 = bitcast i16* %24886 to <16 x i16>*
  %24888 = load <16 x i16>, <16 x i16>* %24887, align 2, !tbaa !396
  %24889 = getelementptr inbounds i16, i16* %24885, i64 17
  %24890 = bitcast i16* %24889 to <16 x i16>*
  %24891 = load <16 x i16>, <16 x i16>* %24890, align 2, !tbaa !396
  %24892 = bitcast i16* %24885 to <16 x i16>*
  %24893 = load <16 x i16>, <16 x i16>* %24892, align 2, !tbaa !396
  %24894 = getelementptr inbounds i16, i16* %24885, i64 16
  %24895 = bitcast i16* %24894 to <16 x i16>*
  %24896 = load <16 x i16>, <16 x i16>* %24895, align 2, !tbaa !396
  %24897 = getelementptr inbounds i16, i16* %24885, i64 2
  %24898 = bitcast i16* %24897 to <16 x i16>*
  %24899 = load <16 x i16>, <16 x i16>* %24898, align 2, !tbaa !396
  %24900 = getelementptr inbounds i16, i16* %24885, i64 18
  %24901 = bitcast i16* %24900 to <16 x i16>*
  %24902 = load <16 x i16>, <16 x i16>* %24901, align 2, !tbaa !396
  %24903 = getelementptr inbounds i16, i16* %24885, i64 4
  %24904 = bitcast i16* %24903 to <16 x i16>*
  %24905 = load <16 x i16>, <16 x i16>* %24904, align 2, !tbaa !396
  %24906 = getelementptr inbounds i16, i16* %24885, i64 20
  %24907 = bitcast i16* %24906 to <16 x i16>*
  %24908 = load <16 x i16>, <16 x i16>* %24907, align 2, !tbaa !396
  %24909 = getelementptr inbounds i16, i16* %24885, i64 3
  %24910 = bitcast i16* %24909 to <16 x i16>*
  %24911 = load <16 x i16>, <16 x i16>* %24910, align 2, !tbaa !396
  %24912 = getelementptr inbounds i16, i16* %24885, i64 19
  %24913 = bitcast i16* %24912 to <16 x i16>*
  %24914 = load <16 x i16>, <16 x i16>* %24913, align 2, !tbaa !396
  %24915 = add <16 x i16> %24893, %24888
  %24916 = add <16 x i16> %24915, %24899
  %24917 = add <16 x i16> %24916, %24905
  %24918 = add <16 x i16> %24917, %24911
  %24919 = add <16 x i16> %24896, %24891
  %24920 = add <16 x i16> %24919, %24902
  %24921 = add <16 x i16> %24920, %24908
  %24922 = add <16 x i16> %24921, %24914
  %24923 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24918, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24924 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24922, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24925 = shufflevector <16 x i16> %24923, <16 x i16> %24924, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24926 = lshr <32 x i16> %24925, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24927 = shufflevector <32 x i16> %24926, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24928 = shl nsw i64 %24858, 5
  %24929 = add nsw i64 %24928, %24713
  %24930 = getelementptr inbounds i16, i16* %blur_x879, i64 %24929
  %24931 = bitcast i16* %24930 to <16 x i16>*
  store <16 x i16> %24927, <16 x i16>* %24931, align 2, !tbaa !399
  %24932 = shufflevector <32 x i16> %24926, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24933 = getelementptr inbounds i16, i16* %24930, i64 16
  %24934 = bitcast i16* %24933 to <16 x i16>*
  store <16 x i16> %24932, <16 x i16>* %24934, align 2, !tbaa !399
  br label %"consume blur_x1971"

"consume blur_x1971":                             ; preds = %"for blur_y.s0.x.x.rebased1962.consume blur_x1971_crit_edge", %"produce blur_x1969"
  %.pre-phi3542 = phi i64 [ %.pre3541, %"for blur_y.s0.x.x.rebased1962.consume blur_x1971_crit_edge" ], [ %24928, %"produce blur_x1969" ]
  %24935 = add nsw i64 %24716, %.pre-phi3542
  %24936 = getelementptr inbounds i16, i16* %blur_x879, i64 %24935
  %24937 = bitcast i16* %24936 to <16 x i16>*
  %24938 = load <16 x i16>, <16 x i16>* %24937, align 2, !tbaa !399
  %24939 = getelementptr inbounds i16, i16* %24936, i64 16
  %24940 = bitcast i16* %24939 to <16 x i16>*
  %24941 = load <16 x i16>, <16 x i16>* %24940, align 2, !tbaa !399
  %24942 = add nsw i64 %24719, %.pre-phi3542
  %24943 = getelementptr inbounds i16, i16* %blur_x879, i64 %24942
  %24944 = bitcast i16* %24943 to <16 x i16>*
  %24945 = load <16 x i16>, <16 x i16>* %24944, align 2, !tbaa !399
  %24946 = getelementptr inbounds i16, i16* %24943, i64 16
  %24947 = bitcast i16* %24946 to <16 x i16>*
  %24948 = load <16 x i16>, <16 x i16>* %24947, align 2, !tbaa !399
  %24949 = add nsw i64 %24722, %.pre-phi3542
  %24950 = getelementptr inbounds i16, i16* %blur_x879, i64 %24949
  %24951 = bitcast i16* %24950 to <16 x i16>*
  %24952 = load <16 x i16>, <16 x i16>* %24951, align 2, !tbaa !399
  %24953 = getelementptr inbounds i16, i16* %24950, i64 16
  %24954 = bitcast i16* %24953 to <16 x i16>*
  %24955 = load <16 x i16>, <16 x i16>* %24954, align 2, !tbaa !399
  %24956 = add nsw i64 %24725, %.pre-phi3542
  %24957 = getelementptr inbounds i16, i16* %blur_x879, i64 %24956
  %24958 = bitcast i16* %24957 to <16 x i16>*
  %24959 = load <16 x i16>, <16 x i16>* %24958, align 2, !tbaa !399
  %24960 = getelementptr inbounds i16, i16* %24957, i64 16
  %24961 = bitcast i16* %24960 to <16 x i16>*
  %24962 = load <16 x i16>, <16 x i16>* %24961, align 2, !tbaa !399
  %24963 = add nsw i64 %24728, %.pre-phi3542
  %24964 = getelementptr inbounds i16, i16* %blur_x879, i64 %24963
  %24965 = bitcast i16* %24964 to <16 x i16>*
  %24966 = load <16 x i16>, <16 x i16>* %24965, align 2, !tbaa !399
  %24967 = getelementptr inbounds i16, i16* %24964, i64 16
  %24968 = bitcast i16* %24967 to <16 x i16>*
  %24969 = load <16 x i16>, <16 x i16>* %24968, align 2, !tbaa !399
  %24970 = add <16 x i16> %24945, %24938
  %24971 = add <16 x i16> %24970, %24952
  %24972 = add <16 x i16> %24971, %24959
  %24973 = add <16 x i16> %24972, %24966
  %24974 = add <16 x i16> %24948, %24941
  %24975 = add <16 x i16> %24974, %24955
  %24976 = add <16 x i16> %24975, %24962
  %24977 = add <16 x i16> %24976, %24969
  %24978 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24973, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24979 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %24977, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %24980 = shufflevector <16 x i16> %24978, <16 x i16> %24979, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24981 = lshr <32 x i16> %24980, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %24982 = shufflevector <32 x i16> %24981, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %24983 = add nsw i64 %24732, %.pre-phi3542
  %24984 = getelementptr inbounds i16, i16* %260, i64 %24983
  %24985 = bitcast i16* %24984 to <16 x i16>*
  store <16 x i16> %24982, <16 x i16>* %24985, align 2, !tbaa !401
  %24986 = shufflevector <32 x i16> %24981, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %24987 = getelementptr inbounds i16, i16* %24984, i64 16
  %24988 = bitcast i16* %24987 to <16 x i16>*
  store <16 x i16> %24986, <16 x i16>* %24988, align 2, !tbaa !401
  %indvars.iv.next3342 = add nuw nsw i64 %indvars.iv3341, 1
  %.not2560 = icmp eq i64 %indvars.iv.next3342, %378
  br i1 %.not2560, label %"end for blur_y.s0.x.x.rebased1963", label %"for blur_y.s0.x.x.rebased1962"

"for blur_y.s0.x.x.rebased1979":                  ; preds = %"for blur_y.s0.x.x.rebased1979.preheader", %"consume blur_x1989"
  %blur_y.s0.x.x.rebased1981 = phi i32 [ %25101, %"consume blur_x1989" ], [ 0, %"for blur_y.s0.x.x.rebased1979.preheader" ]
  %24989 = add nsw i32 %blur_y.s0.x.x.rebased1981, %t1626814
  %a586 = shl nsw i32 %24989, 5
  %24990 = icmp sgt i32 %a341, %a586
  %b592 = select i1 %24990, i32 %a586, i32 %a341
  %24991 = icmp slt i32 %24989, 1
  %24992 = icmp sgt i32 %198, %a586
  %24993 = or i1 %24991, %24992
  br i1 %24993, label %"produce blur_x1986", label %"consume blur_x1989"

"end for blur_y.s0.x.x.rebased1980":              ; preds = %"consume blur_x1989", %"end for blur_y.s0.x.x.rebased1963"
  br i1 %228, label %"produce blur_x1993", label %after_bb1990

"produce blur_x1986":                             ; preds = %"for blur_y.s0.x.x.rebased1979"
  %24994 = icmp slt i32 %b592, %198
  %blur_x.s0.x.v1.base.s1987 = select i1 %24994, i32 %b592, i32 %198
  %t10691988 = add nsw i32 %blur_x.s0.x.v1.base.s1987, %t20571959
  %24995 = sext i32 %t10691988 to i64
  %24996 = getelementptr inbounds i16, i16* %read_input822, i64 %24995
  %24997 = getelementptr inbounds i16, i16* %24996, i64 1
  %24998 = bitcast i16* %24997 to <16 x i16>*
  %24999 = load <16 x i16>, <16 x i16>* %24998, align 2, !tbaa !396
  %25000 = getelementptr inbounds i16, i16* %24996, i64 17
  %25001 = bitcast i16* %25000 to <16 x i16>*
  %25002 = load <16 x i16>, <16 x i16>* %25001, align 2, !tbaa !396
  %25003 = bitcast i16* %24996 to <16 x i16>*
  %25004 = load <16 x i16>, <16 x i16>* %25003, align 2, !tbaa !396
  %25005 = getelementptr inbounds i16, i16* %24996, i64 16
  %25006 = bitcast i16* %25005 to <16 x i16>*
  %25007 = load <16 x i16>, <16 x i16>* %25006, align 2, !tbaa !396
  %25008 = getelementptr inbounds i16, i16* %24996, i64 2
  %25009 = bitcast i16* %25008 to <16 x i16>*
  %25010 = load <16 x i16>, <16 x i16>* %25009, align 2, !tbaa !396
  %25011 = getelementptr inbounds i16, i16* %24996, i64 18
  %25012 = bitcast i16* %25011 to <16 x i16>*
  %25013 = load <16 x i16>, <16 x i16>* %25012, align 2, !tbaa !396
  %25014 = getelementptr inbounds i16, i16* %24996, i64 4
  %25015 = bitcast i16* %25014 to <16 x i16>*
  %25016 = load <16 x i16>, <16 x i16>* %25015, align 2, !tbaa !396
  %25017 = getelementptr inbounds i16, i16* %24996, i64 20
  %25018 = bitcast i16* %25017 to <16 x i16>*
  %25019 = load <16 x i16>, <16 x i16>* %25018, align 2, !tbaa !396
  %25020 = getelementptr inbounds i16, i16* %24996, i64 3
  %25021 = bitcast i16* %25020 to <16 x i16>*
  %25022 = load <16 x i16>, <16 x i16>* %25021, align 2, !tbaa !396
  %25023 = getelementptr inbounds i16, i16* %24996, i64 19
  %25024 = bitcast i16* %25023 to <16 x i16>*
  %25025 = load <16 x i16>, <16 x i16>* %25024, align 2, !tbaa !396
  %25026 = add <16 x i16> %25004, %24999
  %25027 = add <16 x i16> %25026, %25010
  %25028 = add <16 x i16> %25027, %25016
  %25029 = add <16 x i16> %25028, %25022
  %25030 = add <16 x i16> %25007, %25002
  %25031 = add <16 x i16> %25030, %25013
  %25032 = add <16 x i16> %25031, %25019
  %25033 = add <16 x i16> %25032, %25025
  %25034 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25029, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25035 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25033, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25036 = shufflevector <16 x i16> %25034, <16 x i16> %25035, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25037 = lshr <32 x i16> %25036, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25038 = shufflevector <32 x i16> %25037, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25039 = sext i32 %blur_x.s0.x.v1.base.s1987 to i64
  %25040 = add nsw i64 %25039, %24864
  %25041 = getelementptr inbounds i16, i16* %blur_x879, i64 %25040
  %25042 = bitcast i16* %25041 to <16 x i16>*
  store <16 x i16> %25038, <16 x i16>* %25042, align 2, !tbaa !399
  %25043 = shufflevector <32 x i16> %25037, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25044 = getelementptr inbounds i16, i16* %25041, i64 16
  %25045 = bitcast i16* %25044 to <16 x i16>*
  store <16 x i16> %25043, <16 x i16>* %25045, align 2, !tbaa !399
  br label %"consume blur_x1989"

"consume blur_x1989":                             ; preds = %"for blur_y.s0.x.x.rebased1979", %"produce blur_x1986"
  %25046 = sext i32 %b592 to i64
  %25047 = add nsw i64 %24867, %25046
  %25048 = getelementptr inbounds i16, i16* %blur_x879, i64 %25047
  %25049 = bitcast i16* %25048 to <16 x i16>*
  %25050 = load <16 x i16>, <16 x i16>* %25049, align 2, !tbaa !399
  %25051 = getelementptr inbounds i16, i16* %25048, i64 16
  %25052 = bitcast i16* %25051 to <16 x i16>*
  %25053 = load <16 x i16>, <16 x i16>* %25052, align 2, !tbaa !399
  %25054 = add nsw i64 %24870, %25046
  %25055 = getelementptr inbounds i16, i16* %blur_x879, i64 %25054
  %25056 = bitcast i16* %25055 to <16 x i16>*
  %25057 = load <16 x i16>, <16 x i16>* %25056, align 2, !tbaa !399
  %25058 = getelementptr inbounds i16, i16* %25055, i64 16
  %25059 = bitcast i16* %25058 to <16 x i16>*
  %25060 = load <16 x i16>, <16 x i16>* %25059, align 2, !tbaa !399
  %25061 = add nsw i64 %24873, %25046
  %25062 = getelementptr inbounds i16, i16* %blur_x879, i64 %25061
  %25063 = bitcast i16* %25062 to <16 x i16>*
  %25064 = load <16 x i16>, <16 x i16>* %25063, align 2, !tbaa !399
  %25065 = getelementptr inbounds i16, i16* %25062, i64 16
  %25066 = bitcast i16* %25065 to <16 x i16>*
  %25067 = load <16 x i16>, <16 x i16>* %25066, align 2, !tbaa !399
  %25068 = add nsw i64 %24876, %25046
  %25069 = getelementptr inbounds i16, i16* %blur_x879, i64 %25068
  %25070 = bitcast i16* %25069 to <16 x i16>*
  %25071 = load <16 x i16>, <16 x i16>* %25070, align 2, !tbaa !399
  %25072 = getelementptr inbounds i16, i16* %25069, i64 16
  %25073 = bitcast i16* %25072 to <16 x i16>*
  %25074 = load <16 x i16>, <16 x i16>* %25073, align 2, !tbaa !399
  %25075 = add nsw i64 %24879, %25046
  %25076 = getelementptr inbounds i16, i16* %blur_x879, i64 %25075
  %25077 = bitcast i16* %25076 to <16 x i16>*
  %25078 = load <16 x i16>, <16 x i16>* %25077, align 2, !tbaa !399
  %25079 = getelementptr inbounds i16, i16* %25076, i64 16
  %25080 = bitcast i16* %25079 to <16 x i16>*
  %25081 = load <16 x i16>, <16 x i16>* %25080, align 2, !tbaa !399
  %25082 = add <16 x i16> %25057, %25050
  %25083 = add <16 x i16> %25082, %25064
  %25084 = add <16 x i16> %25083, %25071
  %25085 = add <16 x i16> %25084, %25078
  %25086 = add <16 x i16> %25060, %25053
  %25087 = add <16 x i16> %25086, %25067
  %25088 = add <16 x i16> %25087, %25074
  %25089 = add <16 x i16> %25088, %25081
  %25090 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25085, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25091 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25089, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25092 = shufflevector <16 x i16> %25090, <16 x i16> %25091, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25093 = lshr <32 x i16> %25092, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25094 = shufflevector <32 x i16> %25093, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25095 = add nsw i64 %24883, %25046
  %25096 = getelementptr inbounds i16, i16* %260, i64 %25095
  %25097 = bitcast i16* %25096 to <16 x i16>*
  store <16 x i16> %25094, <16 x i16>* %25097, align 2, !tbaa !401
  %25098 = shufflevector <32 x i16> %25093, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25099 = getelementptr inbounds i16, i16* %25096, i64 16
  %25100 = bitcast i16* %25099 to <16 x i16>*
  store <16 x i16> %25098, <16 x i16>* %25100, align 2, !tbaa !401
  %25101 = add nuw nsw i32 %blur_y.s0.x.x.rebased1981, 1
  %.not2559 = icmp eq i32 %25101, %t1683899
  br i1 %.not2559, label %"end for blur_y.s0.x.x.rebased1980", label %"for blur_y.s0.x.x.rebased1979"

after_bb1990:                                     ; preds = %"end for blur_y.s0.x.x.rebased1980", %"produce blur_x1993"
  br i1 %294, label %"for blur_y.s0.x.x.rebased2005.preheader", label %"end for blur_y.s0.x.x.rebased2006", !prof !386

"for blur_y.s0.x.x.rebased2005.preheader":        ; preds = %after_bb1990
  %25102 = sext i32 %t1700976 to i64
  %25103 = zext i32 %.pre-phi3468 to i64
  %25104 = mul nsw i64 %25103, %306
  %25105 = sub nsw i64 %25104, %290
  %25106 = zext i32 %.pre-phi3502 to i64
  %25107 = mul nsw i64 %25106, %306
  %25108 = sub nsw i64 %25107, %290
  %25109 = zext i32 %.pre-phi3472 to i64
  %25110 = mul nsw i64 %25109, %306
  %25111 = sub nsw i64 %25110, %290
  %25112 = zext i32 %.pre-phi3480 to i64
  %25113 = mul nsw i64 %25112, %306
  %25114 = sub nsw i64 %25113, %290
  %25115 = zext i32 %.pre-phi3476 to i64
  %25116 = mul nsw i64 %25115, %306
  %25117 = sub nsw i64 %25116, %290
  %25118 = sext i32 %a353 to i64
  %25119 = add nsw i64 %25118, 23
  %25120 = mul nsw i64 %25119, %307
  %25121 = add nsw i64 %25120, %310
  br label %"for blur_y.s0.x.x.rebased2005"

"produce blur_x1993":                             ; preds = %"end for blur_y.s0.x.x.rebased1980"
  %25122 = getelementptr inbounds i16, i16* %read_input822, i64 %355
  %25123 = getelementptr inbounds i16, i16* %25122, i64 -31
  %25124 = bitcast i16* %25123 to <16 x i16>*
  %25125 = load <16 x i16>, <16 x i16>* %25124, align 2, !tbaa !396
  %25126 = getelementptr inbounds i16, i16* %25122, i64 -15
  %25127 = bitcast i16* %25126 to <16 x i16>*
  %25128 = load <16 x i16>, <16 x i16>* %25127, align 2, !tbaa !396
  %25129 = getelementptr inbounds i16, i16* %25122, i64 -32
  %25130 = bitcast i16* %25129 to <16 x i16>*
  %25131 = load <16 x i16>, <16 x i16>* %25130, align 2, !tbaa !396
  %25132 = getelementptr inbounds i16, i16* %25122, i64 -16
  %25133 = bitcast i16* %25132 to <16 x i16>*
  %25134 = load <16 x i16>, <16 x i16>* %25133, align 2, !tbaa !396
  %25135 = getelementptr inbounds i16, i16* %25122, i64 -30
  %25136 = bitcast i16* %25135 to <16 x i16>*
  %25137 = load <16 x i16>, <16 x i16>* %25136, align 2, !tbaa !396
  %25138 = getelementptr inbounds i16, i16* %25122, i64 -14
  %25139 = bitcast i16* %25138 to <16 x i16>*
  %25140 = load <16 x i16>, <16 x i16>* %25139, align 2, !tbaa !396
  %25141 = getelementptr inbounds i16, i16* %25122, i64 -28
  %25142 = bitcast i16* %25141 to <16 x i16>*
  %25143 = load <16 x i16>, <16 x i16>* %25142, align 2, !tbaa !396
  %25144 = getelementptr inbounds i16, i16* %25122, i64 -12
  %25145 = bitcast i16* %25144 to <16 x i16>*
  %25146 = load <16 x i16>, <16 x i16>* %25145, align 2, !tbaa !396
  %25147 = getelementptr inbounds i16, i16* %25122, i64 -29
  %25148 = bitcast i16* %25147 to <16 x i16>*
  %25149 = load <16 x i16>, <16 x i16>* %25148, align 2, !tbaa !396
  %25150 = getelementptr inbounds i16, i16* %25122, i64 -13
  %25151 = bitcast i16* %25150 to <16 x i16>*
  %25152 = load <16 x i16>, <16 x i16>* %25151, align 2, !tbaa !396
  %25153 = add <16 x i16> %25131, %25125
  %25154 = add <16 x i16> %25153, %25137
  %25155 = add <16 x i16> %25154, %25143
  %25156 = add <16 x i16> %25155, %25149
  %25157 = add <16 x i16> %25134, %25128
  %25158 = add <16 x i16> %25157, %25140
  %25159 = add <16 x i16> %25158, %25146
  %25160 = add <16 x i16> %25159, %25152
  %25161 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25156, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25162 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25160, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25163 = shufflevector <16 x i16> %25161, <16 x i16> %25162, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25164 = lshr <32 x i16> %25163, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25165 = shufflevector <32 x i16> %25164, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25166 = zext i32 %.pre-phi3480 to i64
  %25167 = mul nsw i64 %291, %25166
  %25168 = add nsw i64 %293, %25167
  %25169 = getelementptr inbounds i16, i16* %blur_x879, i64 %25168
  %25170 = getelementptr inbounds i16, i16* %25169, i64 -32
  %25171 = bitcast i16* %25170 to <16 x i16>*
  store <16 x i16> %25165, <16 x i16>* %25171, align 2, !tbaa !399
  %25172 = shufflevector <32 x i16> %25164, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25173 = getelementptr inbounds i16, i16* %25169, i64 -16
  %25174 = bitcast i16* %25173 to <16 x i16>*
  store <16 x i16> %25172, <16 x i16>* %25174, align 2, !tbaa !399
  %25175 = zext i32 %.pre-phi3468 to i64
  %25176 = mul nsw i64 %25175, %306
  %25177 = add nsw i64 %25176, %288
  %25178 = getelementptr inbounds i16, i16* %blur_x879, i64 %25177
  %25179 = getelementptr inbounds i16, i16* %25178, i64 -32
  %25180 = bitcast i16* %25179 to <16 x i16>*
  %25181 = load <16 x i16>, <16 x i16>* %25180, align 2, !tbaa !399
  %25182 = getelementptr inbounds i16, i16* %25178, i64 -16
  %25183 = bitcast i16* %25182 to <16 x i16>*
  %25184 = load <16 x i16>, <16 x i16>* %25183, align 2, !tbaa !399
  %25185 = zext i32 %.pre-phi3502 to i64
  %25186 = mul nsw i64 %25185, %306
  %25187 = add nsw i64 %25186, %288
  %25188 = getelementptr inbounds i16, i16* %blur_x879, i64 %25187
  %25189 = getelementptr inbounds i16, i16* %25188, i64 -32
  %25190 = bitcast i16* %25189 to <16 x i16>*
  %25191 = load <16 x i16>, <16 x i16>* %25190, align 2, !tbaa !399
  %25192 = getelementptr inbounds i16, i16* %25188, i64 -16
  %25193 = bitcast i16* %25192 to <16 x i16>*
  %25194 = load <16 x i16>, <16 x i16>* %25193, align 2, !tbaa !399
  %25195 = zext i32 %.pre-phi3472 to i64
  %25196 = mul nsw i64 %25195, %306
  %25197 = add nsw i64 %25196, %288
  %25198 = getelementptr inbounds i16, i16* %blur_x879, i64 %25197
  %25199 = getelementptr inbounds i16, i16* %25198, i64 -32
  %25200 = bitcast i16* %25199 to <16 x i16>*
  %25201 = load <16 x i16>, <16 x i16>* %25200, align 2, !tbaa !399
  %25202 = getelementptr inbounds i16, i16* %25198, i64 -16
  %25203 = bitcast i16* %25202 to <16 x i16>*
  %25204 = load <16 x i16>, <16 x i16>* %25203, align 2, !tbaa !399
  %25205 = mul nsw i64 %25166, %306
  %25206 = add nsw i64 %25205, %288
  %25207 = getelementptr inbounds i16, i16* %blur_x879, i64 %25206
  %25208 = getelementptr inbounds i16, i16* %25207, i64 -32
  %25209 = bitcast i16* %25208 to <16 x i16>*
  %25210 = load <16 x i16>, <16 x i16>* %25209, align 2, !tbaa !399
  %25211 = getelementptr inbounds i16, i16* %25207, i64 -16
  %25212 = bitcast i16* %25211 to <16 x i16>*
  %25213 = load <16 x i16>, <16 x i16>* %25212, align 2, !tbaa !399
  %25214 = zext i32 %.pre-phi3476 to i64
  %25215 = mul nsw i64 %25214, %306
  %25216 = add nsw i64 %25215, %288
  %25217 = getelementptr inbounds i16, i16* %blur_x879, i64 %25216
  %25218 = getelementptr inbounds i16, i16* %25217, i64 -32
  %25219 = bitcast i16* %25218 to <16 x i16>*
  %25220 = load <16 x i16>, <16 x i16>* %25219, align 2, !tbaa !399
  %25221 = getelementptr inbounds i16, i16* %25217, i64 -16
  %25222 = bitcast i16* %25221 to <16 x i16>*
  %25223 = load <16 x i16>, <16 x i16>* %25222, align 2, !tbaa !399
  %25224 = add <16 x i16> %25191, %25181
  %25225 = add <16 x i16> %25224, %25201
  %25226 = add <16 x i16> %25225, %25210
  %25227 = add <16 x i16> %25226, %25220
  %25228 = add <16 x i16> %25194, %25184
  %25229 = add <16 x i16> %25228, %25204
  %25230 = add <16 x i16> %25229, %25213
  %25231 = add <16 x i16> %25230, %25223
  %25232 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25227, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25233 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25231, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25234 = shufflevector <16 x i16> %25232, <16 x i16> %25233, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25235 = lshr <32 x i16> %25234, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25236 = shufflevector <32 x i16> %25235, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25237 = sext i32 %a353 to i64
  %25238 = add nsw i64 %25237, 23
  %25239 = mul nsw i64 %25238, %307
  %25240 = add nsw i64 %309, %25239
  %25241 = getelementptr inbounds i16, i16* %260, i64 %25240
  %25242 = getelementptr inbounds i16, i16* %25241, i64 -32
  %25243 = bitcast i16* %25242 to <16 x i16>*
  store <16 x i16> %25236, <16 x i16>* %25243, align 2, !tbaa !401
  %25244 = shufflevector <32 x i16> %25235, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25245 = getelementptr inbounds i16, i16* %25241, i64 -16
  %25246 = bitcast i16* %25245 to <16 x i16>*
  store <16 x i16> %25244, <16 x i16>* %25246, align 2, !tbaa !401
  br label %after_bb1990

"for blur_y.s0.x.x.rebased2005":                  ; preds = %"for blur_y.s0.x.x.rebased2005.preheader", %"consume blur_x2014"
  %indvars.iv3344 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2005.preheader" ], [ %indvars.iv.next3345, %"consume blur_x2014" ]
  %25247 = add nsw i64 %indvars.iv3344, %295
  %25248 = icmp slt i64 %25247, 1
  %25249 = trunc i64 %25247 to i32
  %25250 = shl nsw i32 %25249, 5
  %25251 = icmp sgt i32 %198, %25250
  %25252 = or i1 %25248, %25251
  br i1 %25252, label %"produce blur_x2012", label %"for blur_y.s0.x.x.rebased2005.consume blur_x2014_crit_edge"

"for blur_y.s0.x.x.rebased2005.consume blur_x2014_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2005"
  %.pre3543 = shl nsw i64 %25247, 5
  br label %"consume blur_x2014"

"end for blur_y.s0.x.x.rebased2006":              ; preds = %"consume blur_x2014", %after_bb1990
  br i1 %296, label %"for blur_y.s0.x.x.rebased2022.preheader", label %"end for blur_y.s0.x.x.rebased2023", !prof !386

"for blur_y.s0.x.x.rebased2022.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2006"
  %25253 = sext i32 %t1700976 to i64
  %25254 = zext i32 %.pre-phi3468 to i64
  %25255 = mul nsw i64 %25254, %306
  %25256 = sub nsw i64 %25255, %290
  %25257 = zext i32 %.pre-phi3502 to i64
  %25258 = mul nsw i64 %25257, %306
  %25259 = sub nsw i64 %25258, %290
  %25260 = zext i32 %.pre-phi3472 to i64
  %25261 = mul nsw i64 %25260, %306
  %25262 = sub nsw i64 %25261, %290
  %25263 = zext i32 %.pre-phi3480 to i64
  %25264 = mul nsw i64 %25263, %306
  %25265 = sub nsw i64 %25264, %290
  %25266 = zext i32 %.pre-phi3476 to i64
  %25267 = mul nsw i64 %25266, %306
  %25268 = sub nsw i64 %25267, %290
  %25269 = sext i32 %a353 to i64
  %25270 = add nsw i64 %25269, 23
  %25271 = mul nsw i64 %25270, %307
  %25272 = add nsw i64 %25271, %310
  br label %"for blur_y.s0.x.x.rebased2022"

"produce blur_x2012":                             ; preds = %"for blur_y.s0.x.x.rebased2005"
  %t10802013 = add nsw i32 %25250, %t20732002
  %25273 = sext i32 %t10802013 to i64
  %25274 = getelementptr inbounds i16, i16* %read_input822, i64 %25273
  %25275 = getelementptr inbounds i16, i16* %25274, i64 1
  %25276 = bitcast i16* %25275 to <16 x i16>*
  %25277 = load <16 x i16>, <16 x i16>* %25276, align 2, !tbaa !396
  %25278 = getelementptr inbounds i16, i16* %25274, i64 17
  %25279 = bitcast i16* %25278 to <16 x i16>*
  %25280 = load <16 x i16>, <16 x i16>* %25279, align 2, !tbaa !396
  %25281 = bitcast i16* %25274 to <16 x i16>*
  %25282 = load <16 x i16>, <16 x i16>* %25281, align 2, !tbaa !396
  %25283 = getelementptr inbounds i16, i16* %25274, i64 16
  %25284 = bitcast i16* %25283 to <16 x i16>*
  %25285 = load <16 x i16>, <16 x i16>* %25284, align 2, !tbaa !396
  %25286 = getelementptr inbounds i16, i16* %25274, i64 2
  %25287 = bitcast i16* %25286 to <16 x i16>*
  %25288 = load <16 x i16>, <16 x i16>* %25287, align 2, !tbaa !396
  %25289 = getelementptr inbounds i16, i16* %25274, i64 18
  %25290 = bitcast i16* %25289 to <16 x i16>*
  %25291 = load <16 x i16>, <16 x i16>* %25290, align 2, !tbaa !396
  %25292 = getelementptr inbounds i16, i16* %25274, i64 4
  %25293 = bitcast i16* %25292 to <16 x i16>*
  %25294 = load <16 x i16>, <16 x i16>* %25293, align 2, !tbaa !396
  %25295 = getelementptr inbounds i16, i16* %25274, i64 20
  %25296 = bitcast i16* %25295 to <16 x i16>*
  %25297 = load <16 x i16>, <16 x i16>* %25296, align 2, !tbaa !396
  %25298 = getelementptr inbounds i16, i16* %25274, i64 3
  %25299 = bitcast i16* %25298 to <16 x i16>*
  %25300 = load <16 x i16>, <16 x i16>* %25299, align 2, !tbaa !396
  %25301 = getelementptr inbounds i16, i16* %25274, i64 19
  %25302 = bitcast i16* %25301 to <16 x i16>*
  %25303 = load <16 x i16>, <16 x i16>* %25302, align 2, !tbaa !396
  %25304 = add <16 x i16> %25282, %25277
  %25305 = add <16 x i16> %25304, %25288
  %25306 = add <16 x i16> %25305, %25294
  %25307 = add <16 x i16> %25306, %25300
  %25308 = add <16 x i16> %25285, %25280
  %25309 = add <16 x i16> %25308, %25291
  %25310 = add <16 x i16> %25309, %25297
  %25311 = add <16 x i16> %25310, %25303
  %25312 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25307, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25313 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25311, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25314 = shufflevector <16 x i16> %25312, <16 x i16> %25313, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25315 = lshr <32 x i16> %25314, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25316 = shufflevector <32 x i16> %25315, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25317 = shl nsw i64 %25247, 5
  %25318 = add nsw i64 %25317, %25102
  %25319 = getelementptr inbounds i16, i16* %blur_x879, i64 %25318
  %25320 = bitcast i16* %25319 to <16 x i16>*
  store <16 x i16> %25316, <16 x i16>* %25320, align 2, !tbaa !399
  %25321 = shufflevector <32 x i16> %25315, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25322 = getelementptr inbounds i16, i16* %25319, i64 16
  %25323 = bitcast i16* %25322 to <16 x i16>*
  store <16 x i16> %25321, <16 x i16>* %25323, align 2, !tbaa !399
  br label %"consume blur_x2014"

"consume blur_x2014":                             ; preds = %"for blur_y.s0.x.x.rebased2005.consume blur_x2014_crit_edge", %"produce blur_x2012"
  %.pre-phi3544 = phi i64 [ %.pre3543, %"for blur_y.s0.x.x.rebased2005.consume blur_x2014_crit_edge" ], [ %25317, %"produce blur_x2012" ]
  %25324 = add nsw i64 %25105, %.pre-phi3544
  %25325 = getelementptr inbounds i16, i16* %blur_x879, i64 %25324
  %25326 = bitcast i16* %25325 to <16 x i16>*
  %25327 = load <16 x i16>, <16 x i16>* %25326, align 2, !tbaa !399
  %25328 = getelementptr inbounds i16, i16* %25325, i64 16
  %25329 = bitcast i16* %25328 to <16 x i16>*
  %25330 = load <16 x i16>, <16 x i16>* %25329, align 2, !tbaa !399
  %25331 = add nsw i64 %25108, %.pre-phi3544
  %25332 = getelementptr inbounds i16, i16* %blur_x879, i64 %25331
  %25333 = bitcast i16* %25332 to <16 x i16>*
  %25334 = load <16 x i16>, <16 x i16>* %25333, align 2, !tbaa !399
  %25335 = getelementptr inbounds i16, i16* %25332, i64 16
  %25336 = bitcast i16* %25335 to <16 x i16>*
  %25337 = load <16 x i16>, <16 x i16>* %25336, align 2, !tbaa !399
  %25338 = add nsw i64 %25111, %.pre-phi3544
  %25339 = getelementptr inbounds i16, i16* %blur_x879, i64 %25338
  %25340 = bitcast i16* %25339 to <16 x i16>*
  %25341 = load <16 x i16>, <16 x i16>* %25340, align 2, !tbaa !399
  %25342 = getelementptr inbounds i16, i16* %25339, i64 16
  %25343 = bitcast i16* %25342 to <16 x i16>*
  %25344 = load <16 x i16>, <16 x i16>* %25343, align 2, !tbaa !399
  %25345 = add nsw i64 %25114, %.pre-phi3544
  %25346 = getelementptr inbounds i16, i16* %blur_x879, i64 %25345
  %25347 = bitcast i16* %25346 to <16 x i16>*
  %25348 = load <16 x i16>, <16 x i16>* %25347, align 2, !tbaa !399
  %25349 = getelementptr inbounds i16, i16* %25346, i64 16
  %25350 = bitcast i16* %25349 to <16 x i16>*
  %25351 = load <16 x i16>, <16 x i16>* %25350, align 2, !tbaa !399
  %25352 = add nsw i64 %25117, %.pre-phi3544
  %25353 = getelementptr inbounds i16, i16* %blur_x879, i64 %25352
  %25354 = bitcast i16* %25353 to <16 x i16>*
  %25355 = load <16 x i16>, <16 x i16>* %25354, align 2, !tbaa !399
  %25356 = getelementptr inbounds i16, i16* %25353, i64 16
  %25357 = bitcast i16* %25356 to <16 x i16>*
  %25358 = load <16 x i16>, <16 x i16>* %25357, align 2, !tbaa !399
  %25359 = add <16 x i16> %25334, %25327
  %25360 = add <16 x i16> %25359, %25341
  %25361 = add <16 x i16> %25360, %25348
  %25362 = add <16 x i16> %25361, %25355
  %25363 = add <16 x i16> %25337, %25330
  %25364 = add <16 x i16> %25363, %25344
  %25365 = add <16 x i16> %25364, %25351
  %25366 = add <16 x i16> %25365, %25358
  %25367 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25362, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25368 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25366, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25369 = shufflevector <16 x i16> %25367, <16 x i16> %25368, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25370 = lshr <32 x i16> %25369, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25371 = shufflevector <32 x i16> %25370, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25372 = add nsw i64 %25121, %.pre-phi3544
  %25373 = getelementptr inbounds i16, i16* %260, i64 %25372
  %25374 = bitcast i16* %25373 to <16 x i16>*
  store <16 x i16> %25371, <16 x i16>* %25374, align 2, !tbaa !401
  %25375 = shufflevector <32 x i16> %25370, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25376 = getelementptr inbounds i16, i16* %25373, i64 16
  %25377 = bitcast i16* %25376 to <16 x i16>*
  store <16 x i16> %25375, <16 x i16>* %25377, align 2, !tbaa !401
  %indvars.iv.next3345 = add nuw nsw i64 %indvars.iv3344, 1
  %.not2558 = icmp eq i64 %indvars.iv.next3345, %378
  br i1 %.not2558, label %"end for blur_y.s0.x.x.rebased2006", label %"for blur_y.s0.x.x.rebased2005"

"for blur_y.s0.x.x.rebased2022":                  ; preds = %"for blur_y.s0.x.x.rebased2022.preheader", %"consume blur_x2032"
  %blur_y.s0.x.x.rebased2024 = phi i32 [ %25490, %"consume blur_x2032" ], [ 0, %"for blur_y.s0.x.x.rebased2022.preheader" ]
  %25378 = add nsw i32 %blur_y.s0.x.x.rebased2024, %t1626814
  %a593 = shl nsw i32 %25378, 5
  %25379 = icmp sgt i32 %a341, %a593
  %b599 = select i1 %25379, i32 %a593, i32 %a341
  %25380 = icmp slt i32 %25378, 1
  %25381 = icmp sgt i32 %198, %a593
  %25382 = or i1 %25380, %25381
  br i1 %25382, label %"produce blur_x2029", label %"consume blur_x2032"

"end for blur_y.s0.x.x.rebased2023":              ; preds = %"consume blur_x2032", %"end for blur_y.s0.x.x.rebased2006"
  br i1 %228, label %"produce blur_x2036", label %after_bb2033

"produce blur_x2029":                             ; preds = %"for blur_y.s0.x.x.rebased2022"
  %25383 = icmp slt i32 %b599, %198
  %blur_x.s0.x.v1.base.s2030 = select i1 %25383, i32 %b599, i32 %198
  %t10852031 = add nsw i32 %blur_x.s0.x.v1.base.s2030, %t20732002
  %25384 = sext i32 %t10852031 to i64
  %25385 = getelementptr inbounds i16, i16* %read_input822, i64 %25384
  %25386 = getelementptr inbounds i16, i16* %25385, i64 1
  %25387 = bitcast i16* %25386 to <16 x i16>*
  %25388 = load <16 x i16>, <16 x i16>* %25387, align 2, !tbaa !396
  %25389 = getelementptr inbounds i16, i16* %25385, i64 17
  %25390 = bitcast i16* %25389 to <16 x i16>*
  %25391 = load <16 x i16>, <16 x i16>* %25390, align 2, !tbaa !396
  %25392 = bitcast i16* %25385 to <16 x i16>*
  %25393 = load <16 x i16>, <16 x i16>* %25392, align 2, !tbaa !396
  %25394 = getelementptr inbounds i16, i16* %25385, i64 16
  %25395 = bitcast i16* %25394 to <16 x i16>*
  %25396 = load <16 x i16>, <16 x i16>* %25395, align 2, !tbaa !396
  %25397 = getelementptr inbounds i16, i16* %25385, i64 2
  %25398 = bitcast i16* %25397 to <16 x i16>*
  %25399 = load <16 x i16>, <16 x i16>* %25398, align 2, !tbaa !396
  %25400 = getelementptr inbounds i16, i16* %25385, i64 18
  %25401 = bitcast i16* %25400 to <16 x i16>*
  %25402 = load <16 x i16>, <16 x i16>* %25401, align 2, !tbaa !396
  %25403 = getelementptr inbounds i16, i16* %25385, i64 4
  %25404 = bitcast i16* %25403 to <16 x i16>*
  %25405 = load <16 x i16>, <16 x i16>* %25404, align 2, !tbaa !396
  %25406 = getelementptr inbounds i16, i16* %25385, i64 20
  %25407 = bitcast i16* %25406 to <16 x i16>*
  %25408 = load <16 x i16>, <16 x i16>* %25407, align 2, !tbaa !396
  %25409 = getelementptr inbounds i16, i16* %25385, i64 3
  %25410 = bitcast i16* %25409 to <16 x i16>*
  %25411 = load <16 x i16>, <16 x i16>* %25410, align 2, !tbaa !396
  %25412 = getelementptr inbounds i16, i16* %25385, i64 19
  %25413 = bitcast i16* %25412 to <16 x i16>*
  %25414 = load <16 x i16>, <16 x i16>* %25413, align 2, !tbaa !396
  %25415 = add <16 x i16> %25393, %25388
  %25416 = add <16 x i16> %25415, %25399
  %25417 = add <16 x i16> %25416, %25405
  %25418 = add <16 x i16> %25417, %25411
  %25419 = add <16 x i16> %25396, %25391
  %25420 = add <16 x i16> %25419, %25402
  %25421 = add <16 x i16> %25420, %25408
  %25422 = add <16 x i16> %25421, %25414
  %25423 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25418, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25424 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25422, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25425 = shufflevector <16 x i16> %25423, <16 x i16> %25424, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25426 = lshr <32 x i16> %25425, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25427 = shufflevector <32 x i16> %25426, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25428 = sext i32 %blur_x.s0.x.v1.base.s2030 to i64
  %25429 = add nsw i64 %25428, %25253
  %25430 = getelementptr inbounds i16, i16* %blur_x879, i64 %25429
  %25431 = bitcast i16* %25430 to <16 x i16>*
  store <16 x i16> %25427, <16 x i16>* %25431, align 2, !tbaa !399
  %25432 = shufflevector <32 x i16> %25426, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25433 = getelementptr inbounds i16, i16* %25430, i64 16
  %25434 = bitcast i16* %25433 to <16 x i16>*
  store <16 x i16> %25432, <16 x i16>* %25434, align 2, !tbaa !399
  br label %"consume blur_x2032"

"consume blur_x2032":                             ; preds = %"for blur_y.s0.x.x.rebased2022", %"produce blur_x2029"
  %25435 = sext i32 %b599 to i64
  %25436 = add nsw i64 %25256, %25435
  %25437 = getelementptr inbounds i16, i16* %blur_x879, i64 %25436
  %25438 = bitcast i16* %25437 to <16 x i16>*
  %25439 = load <16 x i16>, <16 x i16>* %25438, align 2, !tbaa !399
  %25440 = getelementptr inbounds i16, i16* %25437, i64 16
  %25441 = bitcast i16* %25440 to <16 x i16>*
  %25442 = load <16 x i16>, <16 x i16>* %25441, align 2, !tbaa !399
  %25443 = add nsw i64 %25259, %25435
  %25444 = getelementptr inbounds i16, i16* %blur_x879, i64 %25443
  %25445 = bitcast i16* %25444 to <16 x i16>*
  %25446 = load <16 x i16>, <16 x i16>* %25445, align 2, !tbaa !399
  %25447 = getelementptr inbounds i16, i16* %25444, i64 16
  %25448 = bitcast i16* %25447 to <16 x i16>*
  %25449 = load <16 x i16>, <16 x i16>* %25448, align 2, !tbaa !399
  %25450 = add nsw i64 %25262, %25435
  %25451 = getelementptr inbounds i16, i16* %blur_x879, i64 %25450
  %25452 = bitcast i16* %25451 to <16 x i16>*
  %25453 = load <16 x i16>, <16 x i16>* %25452, align 2, !tbaa !399
  %25454 = getelementptr inbounds i16, i16* %25451, i64 16
  %25455 = bitcast i16* %25454 to <16 x i16>*
  %25456 = load <16 x i16>, <16 x i16>* %25455, align 2, !tbaa !399
  %25457 = add nsw i64 %25265, %25435
  %25458 = getelementptr inbounds i16, i16* %blur_x879, i64 %25457
  %25459 = bitcast i16* %25458 to <16 x i16>*
  %25460 = load <16 x i16>, <16 x i16>* %25459, align 2, !tbaa !399
  %25461 = getelementptr inbounds i16, i16* %25458, i64 16
  %25462 = bitcast i16* %25461 to <16 x i16>*
  %25463 = load <16 x i16>, <16 x i16>* %25462, align 2, !tbaa !399
  %25464 = add nsw i64 %25268, %25435
  %25465 = getelementptr inbounds i16, i16* %blur_x879, i64 %25464
  %25466 = bitcast i16* %25465 to <16 x i16>*
  %25467 = load <16 x i16>, <16 x i16>* %25466, align 2, !tbaa !399
  %25468 = getelementptr inbounds i16, i16* %25465, i64 16
  %25469 = bitcast i16* %25468 to <16 x i16>*
  %25470 = load <16 x i16>, <16 x i16>* %25469, align 2, !tbaa !399
  %25471 = add <16 x i16> %25446, %25439
  %25472 = add <16 x i16> %25471, %25453
  %25473 = add <16 x i16> %25472, %25460
  %25474 = add <16 x i16> %25473, %25467
  %25475 = add <16 x i16> %25449, %25442
  %25476 = add <16 x i16> %25475, %25456
  %25477 = add <16 x i16> %25476, %25463
  %25478 = add <16 x i16> %25477, %25470
  %25479 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25474, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25480 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25478, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25481 = shufflevector <16 x i16> %25479, <16 x i16> %25480, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25482 = lshr <32 x i16> %25481, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25483 = shufflevector <32 x i16> %25482, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25484 = add nsw i64 %25272, %25435
  %25485 = getelementptr inbounds i16, i16* %260, i64 %25484
  %25486 = bitcast i16* %25485 to <16 x i16>*
  store <16 x i16> %25483, <16 x i16>* %25486, align 2, !tbaa !401
  %25487 = shufflevector <32 x i16> %25482, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25488 = getelementptr inbounds i16, i16* %25485, i64 16
  %25489 = bitcast i16* %25488 to <16 x i16>*
  store <16 x i16> %25487, <16 x i16>* %25489, align 2, !tbaa !401
  %25490 = add nuw nsw i32 %blur_y.s0.x.x.rebased2024, 1
  %.not2557 = icmp eq i32 %25490, %t1683899
  br i1 %.not2557, label %"end for blur_y.s0.x.x.rebased2023", label %"for blur_y.s0.x.x.rebased2022"

after_bb2033:                                     ; preds = %"end for blur_y.s0.x.x.rebased2023", %"produce blur_x2036"
  br i1 %294, label %"for blur_y.s0.x.x.rebased2048.preheader", label %"end for blur_y.s0.x.x.rebased2049", !prof !386

"for blur_y.s0.x.x.rebased2048.preheader":        ; preds = %after_bb2033
  %25491 = sext i32 %t17061012 to i64
  %25492 = zext i32 %.pre-phi3472 to i64
  %25493 = mul nsw i64 %25492, %306
  %25494 = sub nsw i64 %25493, %290
  %25495 = zext i32 %.pre-phi3468 to i64
  %25496 = mul nsw i64 %25495, %306
  %25497 = sub nsw i64 %25496, %290
  %25498 = zext i32 %.pre-phi3476 to i64
  %25499 = mul nsw i64 %25498, %306
  %25500 = sub nsw i64 %25499, %290
  %25501 = zext i32 %.pre-phi3484 to i64
  %25502 = mul nsw i64 %25501, %306
  %25503 = sub nsw i64 %25502, %290
  %25504 = zext i32 %.pre-phi3480 to i64
  %25505 = mul nsw i64 %25504, %306
  %25506 = sub nsw i64 %25505, %290
  %25507 = sext i32 %a353 to i64
  %25508 = add nsw i64 %25507, 24
  %25509 = mul nsw i64 %25508, %307
  %25510 = add nsw i64 %25509, %310
  br label %"for blur_y.s0.x.x.rebased2048"

"produce blur_x2036":                             ; preds = %"end for blur_y.s0.x.x.rebased2023"
  %25511 = getelementptr inbounds i16, i16* %read_input822, i64 %357
  %25512 = getelementptr inbounds i16, i16* %25511, i64 -31
  %25513 = bitcast i16* %25512 to <16 x i16>*
  %25514 = load <16 x i16>, <16 x i16>* %25513, align 2, !tbaa !396
  %25515 = getelementptr inbounds i16, i16* %25511, i64 -15
  %25516 = bitcast i16* %25515 to <16 x i16>*
  %25517 = load <16 x i16>, <16 x i16>* %25516, align 2, !tbaa !396
  %25518 = getelementptr inbounds i16, i16* %25511, i64 -32
  %25519 = bitcast i16* %25518 to <16 x i16>*
  %25520 = load <16 x i16>, <16 x i16>* %25519, align 2, !tbaa !396
  %25521 = getelementptr inbounds i16, i16* %25511, i64 -16
  %25522 = bitcast i16* %25521 to <16 x i16>*
  %25523 = load <16 x i16>, <16 x i16>* %25522, align 2, !tbaa !396
  %25524 = getelementptr inbounds i16, i16* %25511, i64 -30
  %25525 = bitcast i16* %25524 to <16 x i16>*
  %25526 = load <16 x i16>, <16 x i16>* %25525, align 2, !tbaa !396
  %25527 = getelementptr inbounds i16, i16* %25511, i64 -14
  %25528 = bitcast i16* %25527 to <16 x i16>*
  %25529 = load <16 x i16>, <16 x i16>* %25528, align 2, !tbaa !396
  %25530 = getelementptr inbounds i16, i16* %25511, i64 -28
  %25531 = bitcast i16* %25530 to <16 x i16>*
  %25532 = load <16 x i16>, <16 x i16>* %25531, align 2, !tbaa !396
  %25533 = getelementptr inbounds i16, i16* %25511, i64 -12
  %25534 = bitcast i16* %25533 to <16 x i16>*
  %25535 = load <16 x i16>, <16 x i16>* %25534, align 2, !tbaa !396
  %25536 = getelementptr inbounds i16, i16* %25511, i64 -29
  %25537 = bitcast i16* %25536 to <16 x i16>*
  %25538 = load <16 x i16>, <16 x i16>* %25537, align 2, !tbaa !396
  %25539 = getelementptr inbounds i16, i16* %25511, i64 -13
  %25540 = bitcast i16* %25539 to <16 x i16>*
  %25541 = load <16 x i16>, <16 x i16>* %25540, align 2, !tbaa !396
  %25542 = add <16 x i16> %25520, %25514
  %25543 = add <16 x i16> %25542, %25526
  %25544 = add <16 x i16> %25543, %25532
  %25545 = add <16 x i16> %25544, %25538
  %25546 = add <16 x i16> %25523, %25517
  %25547 = add <16 x i16> %25546, %25529
  %25548 = add <16 x i16> %25547, %25535
  %25549 = add <16 x i16> %25548, %25541
  %25550 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25545, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25551 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25549, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25552 = shufflevector <16 x i16> %25550, <16 x i16> %25551, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25553 = lshr <32 x i16> %25552, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25554 = shufflevector <32 x i16> %25553, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25555 = zext i32 %.pre-phi3484 to i64
  %25556 = mul nsw i64 %291, %25555
  %25557 = add nsw i64 %293, %25556
  %25558 = getelementptr inbounds i16, i16* %blur_x879, i64 %25557
  %25559 = getelementptr inbounds i16, i16* %25558, i64 -32
  %25560 = bitcast i16* %25559 to <16 x i16>*
  store <16 x i16> %25554, <16 x i16>* %25560, align 2, !tbaa !399
  %25561 = shufflevector <32 x i16> %25553, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25562 = getelementptr inbounds i16, i16* %25558, i64 -16
  %25563 = bitcast i16* %25562 to <16 x i16>*
  store <16 x i16> %25561, <16 x i16>* %25563, align 2, !tbaa !399
  %25564 = zext i32 %.pre-phi3472 to i64
  %25565 = mul nsw i64 %25564, %306
  %25566 = add nsw i64 %25565, %288
  %25567 = getelementptr inbounds i16, i16* %blur_x879, i64 %25566
  %25568 = getelementptr inbounds i16, i16* %25567, i64 -32
  %25569 = bitcast i16* %25568 to <16 x i16>*
  %25570 = load <16 x i16>, <16 x i16>* %25569, align 2, !tbaa !399
  %25571 = getelementptr inbounds i16, i16* %25567, i64 -16
  %25572 = bitcast i16* %25571 to <16 x i16>*
  %25573 = load <16 x i16>, <16 x i16>* %25572, align 2, !tbaa !399
  %25574 = zext i32 %.pre-phi3468 to i64
  %25575 = mul nsw i64 %25574, %306
  %25576 = add nsw i64 %25575, %288
  %25577 = getelementptr inbounds i16, i16* %blur_x879, i64 %25576
  %25578 = getelementptr inbounds i16, i16* %25577, i64 -32
  %25579 = bitcast i16* %25578 to <16 x i16>*
  %25580 = load <16 x i16>, <16 x i16>* %25579, align 2, !tbaa !399
  %25581 = getelementptr inbounds i16, i16* %25577, i64 -16
  %25582 = bitcast i16* %25581 to <16 x i16>*
  %25583 = load <16 x i16>, <16 x i16>* %25582, align 2, !tbaa !399
  %25584 = zext i32 %.pre-phi3476 to i64
  %25585 = mul nsw i64 %25584, %306
  %25586 = add nsw i64 %25585, %288
  %25587 = getelementptr inbounds i16, i16* %blur_x879, i64 %25586
  %25588 = getelementptr inbounds i16, i16* %25587, i64 -32
  %25589 = bitcast i16* %25588 to <16 x i16>*
  %25590 = load <16 x i16>, <16 x i16>* %25589, align 2, !tbaa !399
  %25591 = getelementptr inbounds i16, i16* %25587, i64 -16
  %25592 = bitcast i16* %25591 to <16 x i16>*
  %25593 = load <16 x i16>, <16 x i16>* %25592, align 2, !tbaa !399
  %25594 = mul nsw i64 %25555, %306
  %25595 = add nsw i64 %25594, %288
  %25596 = getelementptr inbounds i16, i16* %blur_x879, i64 %25595
  %25597 = getelementptr inbounds i16, i16* %25596, i64 -32
  %25598 = bitcast i16* %25597 to <16 x i16>*
  %25599 = load <16 x i16>, <16 x i16>* %25598, align 2, !tbaa !399
  %25600 = getelementptr inbounds i16, i16* %25596, i64 -16
  %25601 = bitcast i16* %25600 to <16 x i16>*
  %25602 = load <16 x i16>, <16 x i16>* %25601, align 2, !tbaa !399
  %25603 = zext i32 %.pre-phi3480 to i64
  %25604 = mul nsw i64 %25603, %306
  %25605 = add nsw i64 %25604, %288
  %25606 = getelementptr inbounds i16, i16* %blur_x879, i64 %25605
  %25607 = getelementptr inbounds i16, i16* %25606, i64 -32
  %25608 = bitcast i16* %25607 to <16 x i16>*
  %25609 = load <16 x i16>, <16 x i16>* %25608, align 2, !tbaa !399
  %25610 = getelementptr inbounds i16, i16* %25606, i64 -16
  %25611 = bitcast i16* %25610 to <16 x i16>*
  %25612 = load <16 x i16>, <16 x i16>* %25611, align 2, !tbaa !399
  %25613 = add <16 x i16> %25580, %25570
  %25614 = add <16 x i16> %25613, %25590
  %25615 = add <16 x i16> %25614, %25599
  %25616 = add <16 x i16> %25615, %25609
  %25617 = add <16 x i16> %25583, %25573
  %25618 = add <16 x i16> %25617, %25593
  %25619 = add <16 x i16> %25618, %25602
  %25620 = add <16 x i16> %25619, %25612
  %25621 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25616, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25622 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25620, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25623 = shufflevector <16 x i16> %25621, <16 x i16> %25622, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25624 = lshr <32 x i16> %25623, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25625 = shufflevector <32 x i16> %25624, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25626 = sext i32 %a353 to i64
  %25627 = add nsw i64 %25626, 24
  %25628 = mul nsw i64 %25627, %307
  %25629 = add nsw i64 %309, %25628
  %25630 = getelementptr inbounds i16, i16* %260, i64 %25629
  %25631 = getelementptr inbounds i16, i16* %25630, i64 -32
  %25632 = bitcast i16* %25631 to <16 x i16>*
  store <16 x i16> %25625, <16 x i16>* %25632, align 2, !tbaa !401
  %25633 = shufflevector <32 x i16> %25624, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25634 = getelementptr inbounds i16, i16* %25630, i64 -16
  %25635 = bitcast i16* %25634 to <16 x i16>*
  store <16 x i16> %25633, <16 x i16>* %25635, align 2, !tbaa !401
  br label %after_bb2033

"for blur_y.s0.x.x.rebased2048":                  ; preds = %"for blur_y.s0.x.x.rebased2048.preheader", %"consume blur_x2057"
  %indvars.iv3347 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2048.preheader" ], [ %indvars.iv.next3348, %"consume blur_x2057" ]
  %25636 = add nsw i64 %indvars.iv3347, %295
  %25637 = icmp slt i64 %25636, 1
  %25638 = trunc i64 %25636 to i32
  %25639 = shl nsw i32 %25638, 5
  %25640 = icmp sgt i32 %198, %25639
  %25641 = or i1 %25637, %25640
  br i1 %25641, label %"produce blur_x2055", label %"for blur_y.s0.x.x.rebased2048.consume blur_x2057_crit_edge"

"for blur_y.s0.x.x.rebased2048.consume blur_x2057_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2048"
  %.pre3545 = shl nsw i64 %25636, 5
  br label %"consume blur_x2057"

"end for blur_y.s0.x.x.rebased2049":              ; preds = %"consume blur_x2057", %after_bb2033
  br i1 %296, label %"for blur_y.s0.x.x.rebased2065.preheader", label %"end for blur_y.s0.x.x.rebased2066", !prof !386

"for blur_y.s0.x.x.rebased2065.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2049"
  %25642 = sext i32 %t17061012 to i64
  %25643 = zext i32 %.pre-phi3472 to i64
  %25644 = mul nsw i64 %25643, %306
  %25645 = sub nsw i64 %25644, %290
  %25646 = zext i32 %.pre-phi3468 to i64
  %25647 = mul nsw i64 %25646, %306
  %25648 = sub nsw i64 %25647, %290
  %25649 = zext i32 %.pre-phi3476 to i64
  %25650 = mul nsw i64 %25649, %306
  %25651 = sub nsw i64 %25650, %290
  %25652 = zext i32 %.pre-phi3484 to i64
  %25653 = mul nsw i64 %25652, %306
  %25654 = sub nsw i64 %25653, %290
  %25655 = zext i32 %.pre-phi3480 to i64
  %25656 = mul nsw i64 %25655, %306
  %25657 = sub nsw i64 %25656, %290
  %25658 = sext i32 %a353 to i64
  %25659 = add nsw i64 %25658, 24
  %25660 = mul nsw i64 %25659, %307
  %25661 = add nsw i64 %25660, %310
  br label %"for blur_y.s0.x.x.rebased2065"

"produce blur_x2055":                             ; preds = %"for blur_y.s0.x.x.rebased2048"
  %t10962056 = add nsw i32 %25639, %t20892045
  %25662 = sext i32 %t10962056 to i64
  %25663 = getelementptr inbounds i16, i16* %read_input822, i64 %25662
  %25664 = getelementptr inbounds i16, i16* %25663, i64 1
  %25665 = bitcast i16* %25664 to <16 x i16>*
  %25666 = load <16 x i16>, <16 x i16>* %25665, align 2, !tbaa !396
  %25667 = getelementptr inbounds i16, i16* %25663, i64 17
  %25668 = bitcast i16* %25667 to <16 x i16>*
  %25669 = load <16 x i16>, <16 x i16>* %25668, align 2, !tbaa !396
  %25670 = bitcast i16* %25663 to <16 x i16>*
  %25671 = load <16 x i16>, <16 x i16>* %25670, align 2, !tbaa !396
  %25672 = getelementptr inbounds i16, i16* %25663, i64 16
  %25673 = bitcast i16* %25672 to <16 x i16>*
  %25674 = load <16 x i16>, <16 x i16>* %25673, align 2, !tbaa !396
  %25675 = getelementptr inbounds i16, i16* %25663, i64 2
  %25676 = bitcast i16* %25675 to <16 x i16>*
  %25677 = load <16 x i16>, <16 x i16>* %25676, align 2, !tbaa !396
  %25678 = getelementptr inbounds i16, i16* %25663, i64 18
  %25679 = bitcast i16* %25678 to <16 x i16>*
  %25680 = load <16 x i16>, <16 x i16>* %25679, align 2, !tbaa !396
  %25681 = getelementptr inbounds i16, i16* %25663, i64 4
  %25682 = bitcast i16* %25681 to <16 x i16>*
  %25683 = load <16 x i16>, <16 x i16>* %25682, align 2, !tbaa !396
  %25684 = getelementptr inbounds i16, i16* %25663, i64 20
  %25685 = bitcast i16* %25684 to <16 x i16>*
  %25686 = load <16 x i16>, <16 x i16>* %25685, align 2, !tbaa !396
  %25687 = getelementptr inbounds i16, i16* %25663, i64 3
  %25688 = bitcast i16* %25687 to <16 x i16>*
  %25689 = load <16 x i16>, <16 x i16>* %25688, align 2, !tbaa !396
  %25690 = getelementptr inbounds i16, i16* %25663, i64 19
  %25691 = bitcast i16* %25690 to <16 x i16>*
  %25692 = load <16 x i16>, <16 x i16>* %25691, align 2, !tbaa !396
  %25693 = add <16 x i16> %25671, %25666
  %25694 = add <16 x i16> %25693, %25677
  %25695 = add <16 x i16> %25694, %25683
  %25696 = add <16 x i16> %25695, %25689
  %25697 = add <16 x i16> %25674, %25669
  %25698 = add <16 x i16> %25697, %25680
  %25699 = add <16 x i16> %25698, %25686
  %25700 = add <16 x i16> %25699, %25692
  %25701 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25696, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25702 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25700, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25703 = shufflevector <16 x i16> %25701, <16 x i16> %25702, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25704 = lshr <32 x i16> %25703, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25705 = shufflevector <32 x i16> %25704, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25706 = shl nsw i64 %25636, 5
  %25707 = add nsw i64 %25706, %25491
  %25708 = getelementptr inbounds i16, i16* %blur_x879, i64 %25707
  %25709 = bitcast i16* %25708 to <16 x i16>*
  store <16 x i16> %25705, <16 x i16>* %25709, align 2, !tbaa !399
  %25710 = shufflevector <32 x i16> %25704, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25711 = getelementptr inbounds i16, i16* %25708, i64 16
  %25712 = bitcast i16* %25711 to <16 x i16>*
  store <16 x i16> %25710, <16 x i16>* %25712, align 2, !tbaa !399
  br label %"consume blur_x2057"

"consume blur_x2057":                             ; preds = %"for blur_y.s0.x.x.rebased2048.consume blur_x2057_crit_edge", %"produce blur_x2055"
  %.pre-phi3546 = phi i64 [ %.pre3545, %"for blur_y.s0.x.x.rebased2048.consume blur_x2057_crit_edge" ], [ %25706, %"produce blur_x2055" ]
  %25713 = add nsw i64 %25494, %.pre-phi3546
  %25714 = getelementptr inbounds i16, i16* %blur_x879, i64 %25713
  %25715 = bitcast i16* %25714 to <16 x i16>*
  %25716 = load <16 x i16>, <16 x i16>* %25715, align 2, !tbaa !399
  %25717 = getelementptr inbounds i16, i16* %25714, i64 16
  %25718 = bitcast i16* %25717 to <16 x i16>*
  %25719 = load <16 x i16>, <16 x i16>* %25718, align 2, !tbaa !399
  %25720 = add nsw i64 %25497, %.pre-phi3546
  %25721 = getelementptr inbounds i16, i16* %blur_x879, i64 %25720
  %25722 = bitcast i16* %25721 to <16 x i16>*
  %25723 = load <16 x i16>, <16 x i16>* %25722, align 2, !tbaa !399
  %25724 = getelementptr inbounds i16, i16* %25721, i64 16
  %25725 = bitcast i16* %25724 to <16 x i16>*
  %25726 = load <16 x i16>, <16 x i16>* %25725, align 2, !tbaa !399
  %25727 = add nsw i64 %25500, %.pre-phi3546
  %25728 = getelementptr inbounds i16, i16* %blur_x879, i64 %25727
  %25729 = bitcast i16* %25728 to <16 x i16>*
  %25730 = load <16 x i16>, <16 x i16>* %25729, align 2, !tbaa !399
  %25731 = getelementptr inbounds i16, i16* %25728, i64 16
  %25732 = bitcast i16* %25731 to <16 x i16>*
  %25733 = load <16 x i16>, <16 x i16>* %25732, align 2, !tbaa !399
  %25734 = add nsw i64 %25503, %.pre-phi3546
  %25735 = getelementptr inbounds i16, i16* %blur_x879, i64 %25734
  %25736 = bitcast i16* %25735 to <16 x i16>*
  %25737 = load <16 x i16>, <16 x i16>* %25736, align 2, !tbaa !399
  %25738 = getelementptr inbounds i16, i16* %25735, i64 16
  %25739 = bitcast i16* %25738 to <16 x i16>*
  %25740 = load <16 x i16>, <16 x i16>* %25739, align 2, !tbaa !399
  %25741 = add nsw i64 %25506, %.pre-phi3546
  %25742 = getelementptr inbounds i16, i16* %blur_x879, i64 %25741
  %25743 = bitcast i16* %25742 to <16 x i16>*
  %25744 = load <16 x i16>, <16 x i16>* %25743, align 2, !tbaa !399
  %25745 = getelementptr inbounds i16, i16* %25742, i64 16
  %25746 = bitcast i16* %25745 to <16 x i16>*
  %25747 = load <16 x i16>, <16 x i16>* %25746, align 2, !tbaa !399
  %25748 = add <16 x i16> %25723, %25716
  %25749 = add <16 x i16> %25748, %25730
  %25750 = add <16 x i16> %25749, %25737
  %25751 = add <16 x i16> %25750, %25744
  %25752 = add <16 x i16> %25726, %25719
  %25753 = add <16 x i16> %25752, %25733
  %25754 = add <16 x i16> %25753, %25740
  %25755 = add <16 x i16> %25754, %25747
  %25756 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25751, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25757 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25755, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25758 = shufflevector <16 x i16> %25756, <16 x i16> %25757, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25759 = lshr <32 x i16> %25758, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25760 = shufflevector <32 x i16> %25759, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25761 = add nsw i64 %25510, %.pre-phi3546
  %25762 = getelementptr inbounds i16, i16* %260, i64 %25761
  %25763 = bitcast i16* %25762 to <16 x i16>*
  store <16 x i16> %25760, <16 x i16>* %25763, align 2, !tbaa !401
  %25764 = shufflevector <32 x i16> %25759, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25765 = getelementptr inbounds i16, i16* %25762, i64 16
  %25766 = bitcast i16* %25765 to <16 x i16>*
  store <16 x i16> %25764, <16 x i16>* %25766, align 2, !tbaa !401
  %indvars.iv.next3348 = add nuw nsw i64 %indvars.iv3347, 1
  %.not2556 = icmp eq i64 %indvars.iv.next3348, %378
  br i1 %.not2556, label %"end for blur_y.s0.x.x.rebased2049", label %"for blur_y.s0.x.x.rebased2048"

"for blur_y.s0.x.x.rebased2065":                  ; preds = %"for blur_y.s0.x.x.rebased2065.preheader", %"consume blur_x2075"
  %blur_y.s0.x.x.rebased2067 = phi i32 [ %25879, %"consume blur_x2075" ], [ 0, %"for blur_y.s0.x.x.rebased2065.preheader" ]
  %25767 = add nsw i32 %blur_y.s0.x.x.rebased2067, %t1626814
  %a600 = shl nsw i32 %25767, 5
  %25768 = icmp sgt i32 %a341, %a600
  %b606 = select i1 %25768, i32 %a600, i32 %a341
  %25769 = icmp slt i32 %25767, 1
  %25770 = icmp sgt i32 %198, %a600
  %25771 = or i1 %25769, %25770
  br i1 %25771, label %"produce blur_x2072", label %"consume blur_x2075"

"end for blur_y.s0.x.x.rebased2066":              ; preds = %"consume blur_x2075", %"end for blur_y.s0.x.x.rebased2049"
  br i1 %228, label %"produce blur_x2079", label %after_bb2076

"produce blur_x2072":                             ; preds = %"for blur_y.s0.x.x.rebased2065"
  %25772 = icmp slt i32 %b606, %198
  %blur_x.s0.x.v1.base.s2073 = select i1 %25772, i32 %b606, i32 %198
  %t11012074 = add nsw i32 %blur_x.s0.x.v1.base.s2073, %t20892045
  %25773 = sext i32 %t11012074 to i64
  %25774 = getelementptr inbounds i16, i16* %read_input822, i64 %25773
  %25775 = getelementptr inbounds i16, i16* %25774, i64 1
  %25776 = bitcast i16* %25775 to <16 x i16>*
  %25777 = load <16 x i16>, <16 x i16>* %25776, align 2, !tbaa !396
  %25778 = getelementptr inbounds i16, i16* %25774, i64 17
  %25779 = bitcast i16* %25778 to <16 x i16>*
  %25780 = load <16 x i16>, <16 x i16>* %25779, align 2, !tbaa !396
  %25781 = bitcast i16* %25774 to <16 x i16>*
  %25782 = load <16 x i16>, <16 x i16>* %25781, align 2, !tbaa !396
  %25783 = getelementptr inbounds i16, i16* %25774, i64 16
  %25784 = bitcast i16* %25783 to <16 x i16>*
  %25785 = load <16 x i16>, <16 x i16>* %25784, align 2, !tbaa !396
  %25786 = getelementptr inbounds i16, i16* %25774, i64 2
  %25787 = bitcast i16* %25786 to <16 x i16>*
  %25788 = load <16 x i16>, <16 x i16>* %25787, align 2, !tbaa !396
  %25789 = getelementptr inbounds i16, i16* %25774, i64 18
  %25790 = bitcast i16* %25789 to <16 x i16>*
  %25791 = load <16 x i16>, <16 x i16>* %25790, align 2, !tbaa !396
  %25792 = getelementptr inbounds i16, i16* %25774, i64 4
  %25793 = bitcast i16* %25792 to <16 x i16>*
  %25794 = load <16 x i16>, <16 x i16>* %25793, align 2, !tbaa !396
  %25795 = getelementptr inbounds i16, i16* %25774, i64 20
  %25796 = bitcast i16* %25795 to <16 x i16>*
  %25797 = load <16 x i16>, <16 x i16>* %25796, align 2, !tbaa !396
  %25798 = getelementptr inbounds i16, i16* %25774, i64 3
  %25799 = bitcast i16* %25798 to <16 x i16>*
  %25800 = load <16 x i16>, <16 x i16>* %25799, align 2, !tbaa !396
  %25801 = getelementptr inbounds i16, i16* %25774, i64 19
  %25802 = bitcast i16* %25801 to <16 x i16>*
  %25803 = load <16 x i16>, <16 x i16>* %25802, align 2, !tbaa !396
  %25804 = add <16 x i16> %25782, %25777
  %25805 = add <16 x i16> %25804, %25788
  %25806 = add <16 x i16> %25805, %25794
  %25807 = add <16 x i16> %25806, %25800
  %25808 = add <16 x i16> %25785, %25780
  %25809 = add <16 x i16> %25808, %25791
  %25810 = add <16 x i16> %25809, %25797
  %25811 = add <16 x i16> %25810, %25803
  %25812 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25807, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25813 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25811, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25814 = shufflevector <16 x i16> %25812, <16 x i16> %25813, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25815 = lshr <32 x i16> %25814, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25816 = shufflevector <32 x i16> %25815, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25817 = sext i32 %blur_x.s0.x.v1.base.s2073 to i64
  %25818 = add nsw i64 %25817, %25642
  %25819 = getelementptr inbounds i16, i16* %blur_x879, i64 %25818
  %25820 = bitcast i16* %25819 to <16 x i16>*
  store <16 x i16> %25816, <16 x i16>* %25820, align 2, !tbaa !399
  %25821 = shufflevector <32 x i16> %25815, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25822 = getelementptr inbounds i16, i16* %25819, i64 16
  %25823 = bitcast i16* %25822 to <16 x i16>*
  store <16 x i16> %25821, <16 x i16>* %25823, align 2, !tbaa !399
  br label %"consume blur_x2075"

"consume blur_x2075":                             ; preds = %"for blur_y.s0.x.x.rebased2065", %"produce blur_x2072"
  %25824 = sext i32 %b606 to i64
  %25825 = add nsw i64 %25645, %25824
  %25826 = getelementptr inbounds i16, i16* %blur_x879, i64 %25825
  %25827 = bitcast i16* %25826 to <16 x i16>*
  %25828 = load <16 x i16>, <16 x i16>* %25827, align 2, !tbaa !399
  %25829 = getelementptr inbounds i16, i16* %25826, i64 16
  %25830 = bitcast i16* %25829 to <16 x i16>*
  %25831 = load <16 x i16>, <16 x i16>* %25830, align 2, !tbaa !399
  %25832 = add nsw i64 %25648, %25824
  %25833 = getelementptr inbounds i16, i16* %blur_x879, i64 %25832
  %25834 = bitcast i16* %25833 to <16 x i16>*
  %25835 = load <16 x i16>, <16 x i16>* %25834, align 2, !tbaa !399
  %25836 = getelementptr inbounds i16, i16* %25833, i64 16
  %25837 = bitcast i16* %25836 to <16 x i16>*
  %25838 = load <16 x i16>, <16 x i16>* %25837, align 2, !tbaa !399
  %25839 = add nsw i64 %25651, %25824
  %25840 = getelementptr inbounds i16, i16* %blur_x879, i64 %25839
  %25841 = bitcast i16* %25840 to <16 x i16>*
  %25842 = load <16 x i16>, <16 x i16>* %25841, align 2, !tbaa !399
  %25843 = getelementptr inbounds i16, i16* %25840, i64 16
  %25844 = bitcast i16* %25843 to <16 x i16>*
  %25845 = load <16 x i16>, <16 x i16>* %25844, align 2, !tbaa !399
  %25846 = add nsw i64 %25654, %25824
  %25847 = getelementptr inbounds i16, i16* %blur_x879, i64 %25846
  %25848 = bitcast i16* %25847 to <16 x i16>*
  %25849 = load <16 x i16>, <16 x i16>* %25848, align 2, !tbaa !399
  %25850 = getelementptr inbounds i16, i16* %25847, i64 16
  %25851 = bitcast i16* %25850 to <16 x i16>*
  %25852 = load <16 x i16>, <16 x i16>* %25851, align 2, !tbaa !399
  %25853 = add nsw i64 %25657, %25824
  %25854 = getelementptr inbounds i16, i16* %blur_x879, i64 %25853
  %25855 = bitcast i16* %25854 to <16 x i16>*
  %25856 = load <16 x i16>, <16 x i16>* %25855, align 2, !tbaa !399
  %25857 = getelementptr inbounds i16, i16* %25854, i64 16
  %25858 = bitcast i16* %25857 to <16 x i16>*
  %25859 = load <16 x i16>, <16 x i16>* %25858, align 2, !tbaa !399
  %25860 = add <16 x i16> %25835, %25828
  %25861 = add <16 x i16> %25860, %25842
  %25862 = add <16 x i16> %25861, %25849
  %25863 = add <16 x i16> %25862, %25856
  %25864 = add <16 x i16> %25838, %25831
  %25865 = add <16 x i16> %25864, %25845
  %25866 = add <16 x i16> %25865, %25852
  %25867 = add <16 x i16> %25866, %25859
  %25868 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25863, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25869 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25867, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25870 = shufflevector <16 x i16> %25868, <16 x i16> %25869, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25871 = lshr <32 x i16> %25870, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25872 = shufflevector <32 x i16> %25871, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25873 = add nsw i64 %25661, %25824
  %25874 = getelementptr inbounds i16, i16* %260, i64 %25873
  %25875 = bitcast i16* %25874 to <16 x i16>*
  store <16 x i16> %25872, <16 x i16>* %25875, align 2, !tbaa !401
  %25876 = shufflevector <32 x i16> %25871, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25877 = getelementptr inbounds i16, i16* %25874, i64 16
  %25878 = bitcast i16* %25877 to <16 x i16>*
  store <16 x i16> %25876, <16 x i16>* %25878, align 2, !tbaa !401
  %25879 = add nuw nsw i32 %blur_y.s0.x.x.rebased2067, 1
  %.not2555 = icmp eq i32 %25879, %t1683899
  br i1 %.not2555, label %"end for blur_y.s0.x.x.rebased2066", label %"for blur_y.s0.x.x.rebased2065"

after_bb2076:                                     ; preds = %"end for blur_y.s0.x.x.rebased2066", %"produce blur_x2079"
  br i1 %294, label %"for blur_y.s0.x.x.rebased2091.preheader", label %"end for blur_y.s0.x.x.rebased2092", !prof !386

"for blur_y.s0.x.x.rebased2091.preheader":        ; preds = %after_bb2076
  %25880 = sext i32 %t17221055 to i64
  %25881 = zext i32 %.pre-phi3476 to i64
  %25882 = mul nsw i64 %25881, %306
  %25883 = sub nsw i64 %25882, %290
  %25884 = zext i32 %.pre-phi3472 to i64
  %25885 = mul nsw i64 %25884, %306
  %25886 = sub nsw i64 %25885, %290
  %25887 = zext i32 %.pre-phi3480 to i64
  %25888 = mul nsw i64 %25887, %306
  %25889 = sub nsw i64 %25888, %290
  %25890 = zext i32 %.pre-phi3490 to i64
  %25891 = mul nsw i64 %25890, %306
  %25892 = sub nsw i64 %25891, %290
  %25893 = zext i32 %.pre-phi3484 to i64
  %25894 = mul nsw i64 %25893, %306
  %25895 = sub nsw i64 %25894, %290
  %25896 = sext i32 %a353 to i64
  %25897 = add nsw i64 %25896, 25
  %25898 = mul nsw i64 %25897, %307
  %25899 = add nsw i64 %25898, %310
  br label %"for blur_y.s0.x.x.rebased2091"

"produce blur_x2079":                             ; preds = %"end for blur_y.s0.x.x.rebased2066"
  %25900 = getelementptr inbounds i16, i16* %read_input822, i64 %359
  %25901 = getelementptr inbounds i16, i16* %25900, i64 -31
  %25902 = bitcast i16* %25901 to <16 x i16>*
  %25903 = load <16 x i16>, <16 x i16>* %25902, align 2, !tbaa !396
  %25904 = getelementptr inbounds i16, i16* %25900, i64 -15
  %25905 = bitcast i16* %25904 to <16 x i16>*
  %25906 = load <16 x i16>, <16 x i16>* %25905, align 2, !tbaa !396
  %25907 = getelementptr inbounds i16, i16* %25900, i64 -32
  %25908 = bitcast i16* %25907 to <16 x i16>*
  %25909 = load <16 x i16>, <16 x i16>* %25908, align 2, !tbaa !396
  %25910 = getelementptr inbounds i16, i16* %25900, i64 -16
  %25911 = bitcast i16* %25910 to <16 x i16>*
  %25912 = load <16 x i16>, <16 x i16>* %25911, align 2, !tbaa !396
  %25913 = getelementptr inbounds i16, i16* %25900, i64 -30
  %25914 = bitcast i16* %25913 to <16 x i16>*
  %25915 = load <16 x i16>, <16 x i16>* %25914, align 2, !tbaa !396
  %25916 = getelementptr inbounds i16, i16* %25900, i64 -14
  %25917 = bitcast i16* %25916 to <16 x i16>*
  %25918 = load <16 x i16>, <16 x i16>* %25917, align 2, !tbaa !396
  %25919 = getelementptr inbounds i16, i16* %25900, i64 -28
  %25920 = bitcast i16* %25919 to <16 x i16>*
  %25921 = load <16 x i16>, <16 x i16>* %25920, align 2, !tbaa !396
  %25922 = getelementptr inbounds i16, i16* %25900, i64 -12
  %25923 = bitcast i16* %25922 to <16 x i16>*
  %25924 = load <16 x i16>, <16 x i16>* %25923, align 2, !tbaa !396
  %25925 = getelementptr inbounds i16, i16* %25900, i64 -29
  %25926 = bitcast i16* %25925 to <16 x i16>*
  %25927 = load <16 x i16>, <16 x i16>* %25926, align 2, !tbaa !396
  %25928 = getelementptr inbounds i16, i16* %25900, i64 -13
  %25929 = bitcast i16* %25928 to <16 x i16>*
  %25930 = load <16 x i16>, <16 x i16>* %25929, align 2, !tbaa !396
  %25931 = add <16 x i16> %25909, %25903
  %25932 = add <16 x i16> %25931, %25915
  %25933 = add <16 x i16> %25932, %25921
  %25934 = add <16 x i16> %25933, %25927
  %25935 = add <16 x i16> %25912, %25906
  %25936 = add <16 x i16> %25935, %25918
  %25937 = add <16 x i16> %25936, %25924
  %25938 = add <16 x i16> %25937, %25930
  %25939 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25934, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25940 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %25938, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %25941 = shufflevector <16 x i16> %25939, <16 x i16> %25940, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25942 = lshr <32 x i16> %25941, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %25943 = shufflevector <32 x i16> %25942, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %25944 = zext i32 %.pre-phi3490 to i64
  %25945 = mul nsw i64 %291, %25944
  %25946 = add nsw i64 %293, %25945
  %25947 = getelementptr inbounds i16, i16* %blur_x879, i64 %25946
  %25948 = getelementptr inbounds i16, i16* %25947, i64 -32
  %25949 = bitcast i16* %25948 to <16 x i16>*
  store <16 x i16> %25943, <16 x i16>* %25949, align 2, !tbaa !399
  %25950 = shufflevector <32 x i16> %25942, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %25951 = getelementptr inbounds i16, i16* %25947, i64 -16
  %25952 = bitcast i16* %25951 to <16 x i16>*
  store <16 x i16> %25950, <16 x i16>* %25952, align 2, !tbaa !399
  %25953 = zext i32 %.pre-phi3476 to i64
  %25954 = mul nsw i64 %25953, %306
  %25955 = add nsw i64 %25954, %288
  %25956 = getelementptr inbounds i16, i16* %blur_x879, i64 %25955
  %25957 = getelementptr inbounds i16, i16* %25956, i64 -32
  %25958 = bitcast i16* %25957 to <16 x i16>*
  %25959 = load <16 x i16>, <16 x i16>* %25958, align 2, !tbaa !399
  %25960 = getelementptr inbounds i16, i16* %25956, i64 -16
  %25961 = bitcast i16* %25960 to <16 x i16>*
  %25962 = load <16 x i16>, <16 x i16>* %25961, align 2, !tbaa !399
  %25963 = zext i32 %.pre-phi3472 to i64
  %25964 = mul nsw i64 %25963, %306
  %25965 = add nsw i64 %25964, %288
  %25966 = getelementptr inbounds i16, i16* %blur_x879, i64 %25965
  %25967 = getelementptr inbounds i16, i16* %25966, i64 -32
  %25968 = bitcast i16* %25967 to <16 x i16>*
  %25969 = load <16 x i16>, <16 x i16>* %25968, align 2, !tbaa !399
  %25970 = getelementptr inbounds i16, i16* %25966, i64 -16
  %25971 = bitcast i16* %25970 to <16 x i16>*
  %25972 = load <16 x i16>, <16 x i16>* %25971, align 2, !tbaa !399
  %25973 = zext i32 %.pre-phi3480 to i64
  %25974 = mul nsw i64 %25973, %306
  %25975 = add nsw i64 %25974, %288
  %25976 = getelementptr inbounds i16, i16* %blur_x879, i64 %25975
  %25977 = getelementptr inbounds i16, i16* %25976, i64 -32
  %25978 = bitcast i16* %25977 to <16 x i16>*
  %25979 = load <16 x i16>, <16 x i16>* %25978, align 2, !tbaa !399
  %25980 = getelementptr inbounds i16, i16* %25976, i64 -16
  %25981 = bitcast i16* %25980 to <16 x i16>*
  %25982 = load <16 x i16>, <16 x i16>* %25981, align 2, !tbaa !399
  %25983 = mul nsw i64 %25944, %306
  %25984 = add nsw i64 %25983, %288
  %25985 = getelementptr inbounds i16, i16* %blur_x879, i64 %25984
  %25986 = getelementptr inbounds i16, i16* %25985, i64 -32
  %25987 = bitcast i16* %25986 to <16 x i16>*
  %25988 = load <16 x i16>, <16 x i16>* %25987, align 2, !tbaa !399
  %25989 = getelementptr inbounds i16, i16* %25985, i64 -16
  %25990 = bitcast i16* %25989 to <16 x i16>*
  %25991 = load <16 x i16>, <16 x i16>* %25990, align 2, !tbaa !399
  %25992 = zext i32 %.pre-phi3484 to i64
  %25993 = mul nsw i64 %25992, %306
  %25994 = add nsw i64 %25993, %288
  %25995 = getelementptr inbounds i16, i16* %blur_x879, i64 %25994
  %25996 = getelementptr inbounds i16, i16* %25995, i64 -32
  %25997 = bitcast i16* %25996 to <16 x i16>*
  %25998 = load <16 x i16>, <16 x i16>* %25997, align 2, !tbaa !399
  %25999 = getelementptr inbounds i16, i16* %25995, i64 -16
  %26000 = bitcast i16* %25999 to <16 x i16>*
  %26001 = load <16 x i16>, <16 x i16>* %26000, align 2, !tbaa !399
  %26002 = add <16 x i16> %25969, %25959
  %26003 = add <16 x i16> %26002, %25979
  %26004 = add <16 x i16> %26003, %25988
  %26005 = add <16 x i16> %26004, %25998
  %26006 = add <16 x i16> %25972, %25962
  %26007 = add <16 x i16> %26006, %25982
  %26008 = add <16 x i16> %26007, %25991
  %26009 = add <16 x i16> %26008, %26001
  %26010 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26005, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26011 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26009, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26012 = shufflevector <16 x i16> %26010, <16 x i16> %26011, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26013 = lshr <32 x i16> %26012, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26014 = shufflevector <32 x i16> %26013, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26015 = sext i32 %a353 to i64
  %26016 = add nsw i64 %26015, 25
  %26017 = mul nsw i64 %26016, %307
  %26018 = add nsw i64 %309, %26017
  %26019 = getelementptr inbounds i16, i16* %260, i64 %26018
  %26020 = getelementptr inbounds i16, i16* %26019, i64 -32
  %26021 = bitcast i16* %26020 to <16 x i16>*
  store <16 x i16> %26014, <16 x i16>* %26021, align 2, !tbaa !401
  %26022 = shufflevector <32 x i16> %26013, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26023 = getelementptr inbounds i16, i16* %26019, i64 -16
  %26024 = bitcast i16* %26023 to <16 x i16>*
  store <16 x i16> %26022, <16 x i16>* %26024, align 2, !tbaa !401
  br label %after_bb2076

"for blur_y.s0.x.x.rebased2091":                  ; preds = %"for blur_y.s0.x.x.rebased2091.preheader", %"consume blur_x2100"
  %indvars.iv3350 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2091.preheader" ], [ %indvars.iv.next3351, %"consume blur_x2100" ]
  %26025 = add nsw i64 %indvars.iv3350, %295
  %26026 = icmp slt i64 %26025, 1
  %26027 = trunc i64 %26025 to i32
  %26028 = shl nsw i32 %26027, 5
  %26029 = icmp sgt i32 %198, %26028
  %26030 = or i1 %26026, %26029
  br i1 %26030, label %"produce blur_x2098", label %"for blur_y.s0.x.x.rebased2091.consume blur_x2100_crit_edge"

"for blur_y.s0.x.x.rebased2091.consume blur_x2100_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2091"
  %.pre3547 = shl nsw i64 %26025, 5
  br label %"consume blur_x2100"

"end for blur_y.s0.x.x.rebased2092":              ; preds = %"consume blur_x2100", %after_bb2076
  br i1 %296, label %"for blur_y.s0.x.x.rebased2108.preheader", label %"end for blur_y.s0.x.x.rebased2109", !prof !386

"for blur_y.s0.x.x.rebased2108.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2092"
  %26031 = sext i32 %t17221055 to i64
  %26032 = zext i32 %.pre-phi3476 to i64
  %26033 = mul nsw i64 %26032, %306
  %26034 = sub nsw i64 %26033, %290
  %26035 = zext i32 %.pre-phi3472 to i64
  %26036 = mul nsw i64 %26035, %306
  %26037 = sub nsw i64 %26036, %290
  %26038 = zext i32 %.pre-phi3480 to i64
  %26039 = mul nsw i64 %26038, %306
  %26040 = sub nsw i64 %26039, %290
  %26041 = zext i32 %.pre-phi3490 to i64
  %26042 = mul nsw i64 %26041, %306
  %26043 = sub nsw i64 %26042, %290
  %26044 = zext i32 %.pre-phi3484 to i64
  %26045 = mul nsw i64 %26044, %306
  %26046 = sub nsw i64 %26045, %290
  %26047 = sext i32 %a353 to i64
  %26048 = add nsw i64 %26047, 25
  %26049 = mul nsw i64 %26048, %307
  %26050 = add nsw i64 %26049, %310
  br label %"for blur_y.s0.x.x.rebased2108"

"produce blur_x2098":                             ; preds = %"for blur_y.s0.x.x.rebased2091"
  %t11122099 = add nsw i32 %26028, %t21052088
  %26051 = sext i32 %t11122099 to i64
  %26052 = getelementptr inbounds i16, i16* %read_input822, i64 %26051
  %26053 = getelementptr inbounds i16, i16* %26052, i64 1
  %26054 = bitcast i16* %26053 to <16 x i16>*
  %26055 = load <16 x i16>, <16 x i16>* %26054, align 2, !tbaa !396
  %26056 = getelementptr inbounds i16, i16* %26052, i64 17
  %26057 = bitcast i16* %26056 to <16 x i16>*
  %26058 = load <16 x i16>, <16 x i16>* %26057, align 2, !tbaa !396
  %26059 = bitcast i16* %26052 to <16 x i16>*
  %26060 = load <16 x i16>, <16 x i16>* %26059, align 2, !tbaa !396
  %26061 = getelementptr inbounds i16, i16* %26052, i64 16
  %26062 = bitcast i16* %26061 to <16 x i16>*
  %26063 = load <16 x i16>, <16 x i16>* %26062, align 2, !tbaa !396
  %26064 = getelementptr inbounds i16, i16* %26052, i64 2
  %26065 = bitcast i16* %26064 to <16 x i16>*
  %26066 = load <16 x i16>, <16 x i16>* %26065, align 2, !tbaa !396
  %26067 = getelementptr inbounds i16, i16* %26052, i64 18
  %26068 = bitcast i16* %26067 to <16 x i16>*
  %26069 = load <16 x i16>, <16 x i16>* %26068, align 2, !tbaa !396
  %26070 = getelementptr inbounds i16, i16* %26052, i64 4
  %26071 = bitcast i16* %26070 to <16 x i16>*
  %26072 = load <16 x i16>, <16 x i16>* %26071, align 2, !tbaa !396
  %26073 = getelementptr inbounds i16, i16* %26052, i64 20
  %26074 = bitcast i16* %26073 to <16 x i16>*
  %26075 = load <16 x i16>, <16 x i16>* %26074, align 2, !tbaa !396
  %26076 = getelementptr inbounds i16, i16* %26052, i64 3
  %26077 = bitcast i16* %26076 to <16 x i16>*
  %26078 = load <16 x i16>, <16 x i16>* %26077, align 2, !tbaa !396
  %26079 = getelementptr inbounds i16, i16* %26052, i64 19
  %26080 = bitcast i16* %26079 to <16 x i16>*
  %26081 = load <16 x i16>, <16 x i16>* %26080, align 2, !tbaa !396
  %26082 = add <16 x i16> %26060, %26055
  %26083 = add <16 x i16> %26082, %26066
  %26084 = add <16 x i16> %26083, %26072
  %26085 = add <16 x i16> %26084, %26078
  %26086 = add <16 x i16> %26063, %26058
  %26087 = add <16 x i16> %26086, %26069
  %26088 = add <16 x i16> %26087, %26075
  %26089 = add <16 x i16> %26088, %26081
  %26090 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26085, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26091 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26089, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26092 = shufflevector <16 x i16> %26090, <16 x i16> %26091, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26093 = lshr <32 x i16> %26092, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26094 = shufflevector <32 x i16> %26093, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26095 = shl nsw i64 %26025, 5
  %26096 = add nsw i64 %26095, %25880
  %26097 = getelementptr inbounds i16, i16* %blur_x879, i64 %26096
  %26098 = bitcast i16* %26097 to <16 x i16>*
  store <16 x i16> %26094, <16 x i16>* %26098, align 2, !tbaa !399
  %26099 = shufflevector <32 x i16> %26093, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26100 = getelementptr inbounds i16, i16* %26097, i64 16
  %26101 = bitcast i16* %26100 to <16 x i16>*
  store <16 x i16> %26099, <16 x i16>* %26101, align 2, !tbaa !399
  br label %"consume blur_x2100"

"consume blur_x2100":                             ; preds = %"for blur_y.s0.x.x.rebased2091.consume blur_x2100_crit_edge", %"produce blur_x2098"
  %.pre-phi3548 = phi i64 [ %.pre3547, %"for blur_y.s0.x.x.rebased2091.consume blur_x2100_crit_edge" ], [ %26095, %"produce blur_x2098" ]
  %26102 = add nsw i64 %25883, %.pre-phi3548
  %26103 = getelementptr inbounds i16, i16* %blur_x879, i64 %26102
  %26104 = bitcast i16* %26103 to <16 x i16>*
  %26105 = load <16 x i16>, <16 x i16>* %26104, align 2, !tbaa !399
  %26106 = getelementptr inbounds i16, i16* %26103, i64 16
  %26107 = bitcast i16* %26106 to <16 x i16>*
  %26108 = load <16 x i16>, <16 x i16>* %26107, align 2, !tbaa !399
  %26109 = add nsw i64 %25886, %.pre-phi3548
  %26110 = getelementptr inbounds i16, i16* %blur_x879, i64 %26109
  %26111 = bitcast i16* %26110 to <16 x i16>*
  %26112 = load <16 x i16>, <16 x i16>* %26111, align 2, !tbaa !399
  %26113 = getelementptr inbounds i16, i16* %26110, i64 16
  %26114 = bitcast i16* %26113 to <16 x i16>*
  %26115 = load <16 x i16>, <16 x i16>* %26114, align 2, !tbaa !399
  %26116 = add nsw i64 %25889, %.pre-phi3548
  %26117 = getelementptr inbounds i16, i16* %blur_x879, i64 %26116
  %26118 = bitcast i16* %26117 to <16 x i16>*
  %26119 = load <16 x i16>, <16 x i16>* %26118, align 2, !tbaa !399
  %26120 = getelementptr inbounds i16, i16* %26117, i64 16
  %26121 = bitcast i16* %26120 to <16 x i16>*
  %26122 = load <16 x i16>, <16 x i16>* %26121, align 2, !tbaa !399
  %26123 = add nsw i64 %25892, %.pre-phi3548
  %26124 = getelementptr inbounds i16, i16* %blur_x879, i64 %26123
  %26125 = bitcast i16* %26124 to <16 x i16>*
  %26126 = load <16 x i16>, <16 x i16>* %26125, align 2, !tbaa !399
  %26127 = getelementptr inbounds i16, i16* %26124, i64 16
  %26128 = bitcast i16* %26127 to <16 x i16>*
  %26129 = load <16 x i16>, <16 x i16>* %26128, align 2, !tbaa !399
  %26130 = add nsw i64 %25895, %.pre-phi3548
  %26131 = getelementptr inbounds i16, i16* %blur_x879, i64 %26130
  %26132 = bitcast i16* %26131 to <16 x i16>*
  %26133 = load <16 x i16>, <16 x i16>* %26132, align 2, !tbaa !399
  %26134 = getelementptr inbounds i16, i16* %26131, i64 16
  %26135 = bitcast i16* %26134 to <16 x i16>*
  %26136 = load <16 x i16>, <16 x i16>* %26135, align 2, !tbaa !399
  %26137 = add <16 x i16> %26112, %26105
  %26138 = add <16 x i16> %26137, %26119
  %26139 = add <16 x i16> %26138, %26126
  %26140 = add <16 x i16> %26139, %26133
  %26141 = add <16 x i16> %26115, %26108
  %26142 = add <16 x i16> %26141, %26122
  %26143 = add <16 x i16> %26142, %26129
  %26144 = add <16 x i16> %26143, %26136
  %26145 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26140, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26146 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26144, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26147 = shufflevector <16 x i16> %26145, <16 x i16> %26146, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26148 = lshr <32 x i16> %26147, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26149 = shufflevector <32 x i16> %26148, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26150 = add nsw i64 %25899, %.pre-phi3548
  %26151 = getelementptr inbounds i16, i16* %260, i64 %26150
  %26152 = bitcast i16* %26151 to <16 x i16>*
  store <16 x i16> %26149, <16 x i16>* %26152, align 2, !tbaa !401
  %26153 = shufflevector <32 x i16> %26148, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26154 = getelementptr inbounds i16, i16* %26151, i64 16
  %26155 = bitcast i16* %26154 to <16 x i16>*
  store <16 x i16> %26153, <16 x i16>* %26155, align 2, !tbaa !401
  %indvars.iv.next3351 = add nuw nsw i64 %indvars.iv3350, 1
  %.not2554 = icmp eq i64 %indvars.iv.next3351, %378
  br i1 %.not2554, label %"end for blur_y.s0.x.x.rebased2092", label %"for blur_y.s0.x.x.rebased2091"

"for blur_y.s0.x.x.rebased2108":                  ; preds = %"for blur_y.s0.x.x.rebased2108.preheader", %"consume blur_x2118"
  %blur_y.s0.x.x.rebased2110 = phi i32 [ %26268, %"consume blur_x2118" ], [ 0, %"for blur_y.s0.x.x.rebased2108.preheader" ]
  %26156 = add nsw i32 %blur_y.s0.x.x.rebased2110, %t1626814
  %a607 = shl nsw i32 %26156, 5
  %26157 = icmp sgt i32 %a341, %a607
  %b613 = select i1 %26157, i32 %a607, i32 %a341
  %26158 = icmp slt i32 %26156, 1
  %26159 = icmp sgt i32 %198, %a607
  %26160 = or i1 %26158, %26159
  br i1 %26160, label %"produce blur_x2115", label %"consume blur_x2118"

"end for blur_y.s0.x.x.rebased2109":              ; preds = %"consume blur_x2118", %"end for blur_y.s0.x.x.rebased2092"
  br i1 %228, label %"produce blur_x2122", label %after_bb2119

"produce blur_x2115":                             ; preds = %"for blur_y.s0.x.x.rebased2108"
  %26161 = icmp slt i32 %b613, %198
  %blur_x.s0.x.v1.base.s2116 = select i1 %26161, i32 %b613, i32 %198
  %t11172117 = add nsw i32 %blur_x.s0.x.v1.base.s2116, %t21052088
  %26162 = sext i32 %t11172117 to i64
  %26163 = getelementptr inbounds i16, i16* %read_input822, i64 %26162
  %26164 = getelementptr inbounds i16, i16* %26163, i64 1
  %26165 = bitcast i16* %26164 to <16 x i16>*
  %26166 = load <16 x i16>, <16 x i16>* %26165, align 2, !tbaa !396
  %26167 = getelementptr inbounds i16, i16* %26163, i64 17
  %26168 = bitcast i16* %26167 to <16 x i16>*
  %26169 = load <16 x i16>, <16 x i16>* %26168, align 2, !tbaa !396
  %26170 = bitcast i16* %26163 to <16 x i16>*
  %26171 = load <16 x i16>, <16 x i16>* %26170, align 2, !tbaa !396
  %26172 = getelementptr inbounds i16, i16* %26163, i64 16
  %26173 = bitcast i16* %26172 to <16 x i16>*
  %26174 = load <16 x i16>, <16 x i16>* %26173, align 2, !tbaa !396
  %26175 = getelementptr inbounds i16, i16* %26163, i64 2
  %26176 = bitcast i16* %26175 to <16 x i16>*
  %26177 = load <16 x i16>, <16 x i16>* %26176, align 2, !tbaa !396
  %26178 = getelementptr inbounds i16, i16* %26163, i64 18
  %26179 = bitcast i16* %26178 to <16 x i16>*
  %26180 = load <16 x i16>, <16 x i16>* %26179, align 2, !tbaa !396
  %26181 = getelementptr inbounds i16, i16* %26163, i64 4
  %26182 = bitcast i16* %26181 to <16 x i16>*
  %26183 = load <16 x i16>, <16 x i16>* %26182, align 2, !tbaa !396
  %26184 = getelementptr inbounds i16, i16* %26163, i64 20
  %26185 = bitcast i16* %26184 to <16 x i16>*
  %26186 = load <16 x i16>, <16 x i16>* %26185, align 2, !tbaa !396
  %26187 = getelementptr inbounds i16, i16* %26163, i64 3
  %26188 = bitcast i16* %26187 to <16 x i16>*
  %26189 = load <16 x i16>, <16 x i16>* %26188, align 2, !tbaa !396
  %26190 = getelementptr inbounds i16, i16* %26163, i64 19
  %26191 = bitcast i16* %26190 to <16 x i16>*
  %26192 = load <16 x i16>, <16 x i16>* %26191, align 2, !tbaa !396
  %26193 = add <16 x i16> %26171, %26166
  %26194 = add <16 x i16> %26193, %26177
  %26195 = add <16 x i16> %26194, %26183
  %26196 = add <16 x i16> %26195, %26189
  %26197 = add <16 x i16> %26174, %26169
  %26198 = add <16 x i16> %26197, %26180
  %26199 = add <16 x i16> %26198, %26186
  %26200 = add <16 x i16> %26199, %26192
  %26201 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26196, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26202 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26200, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26203 = shufflevector <16 x i16> %26201, <16 x i16> %26202, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26204 = lshr <32 x i16> %26203, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26205 = shufflevector <32 x i16> %26204, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26206 = sext i32 %blur_x.s0.x.v1.base.s2116 to i64
  %26207 = add nsw i64 %26206, %26031
  %26208 = getelementptr inbounds i16, i16* %blur_x879, i64 %26207
  %26209 = bitcast i16* %26208 to <16 x i16>*
  store <16 x i16> %26205, <16 x i16>* %26209, align 2, !tbaa !399
  %26210 = shufflevector <32 x i16> %26204, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26211 = getelementptr inbounds i16, i16* %26208, i64 16
  %26212 = bitcast i16* %26211 to <16 x i16>*
  store <16 x i16> %26210, <16 x i16>* %26212, align 2, !tbaa !399
  br label %"consume blur_x2118"

"consume blur_x2118":                             ; preds = %"for blur_y.s0.x.x.rebased2108", %"produce blur_x2115"
  %26213 = sext i32 %b613 to i64
  %26214 = add nsw i64 %26034, %26213
  %26215 = getelementptr inbounds i16, i16* %blur_x879, i64 %26214
  %26216 = bitcast i16* %26215 to <16 x i16>*
  %26217 = load <16 x i16>, <16 x i16>* %26216, align 2, !tbaa !399
  %26218 = getelementptr inbounds i16, i16* %26215, i64 16
  %26219 = bitcast i16* %26218 to <16 x i16>*
  %26220 = load <16 x i16>, <16 x i16>* %26219, align 2, !tbaa !399
  %26221 = add nsw i64 %26037, %26213
  %26222 = getelementptr inbounds i16, i16* %blur_x879, i64 %26221
  %26223 = bitcast i16* %26222 to <16 x i16>*
  %26224 = load <16 x i16>, <16 x i16>* %26223, align 2, !tbaa !399
  %26225 = getelementptr inbounds i16, i16* %26222, i64 16
  %26226 = bitcast i16* %26225 to <16 x i16>*
  %26227 = load <16 x i16>, <16 x i16>* %26226, align 2, !tbaa !399
  %26228 = add nsw i64 %26040, %26213
  %26229 = getelementptr inbounds i16, i16* %blur_x879, i64 %26228
  %26230 = bitcast i16* %26229 to <16 x i16>*
  %26231 = load <16 x i16>, <16 x i16>* %26230, align 2, !tbaa !399
  %26232 = getelementptr inbounds i16, i16* %26229, i64 16
  %26233 = bitcast i16* %26232 to <16 x i16>*
  %26234 = load <16 x i16>, <16 x i16>* %26233, align 2, !tbaa !399
  %26235 = add nsw i64 %26043, %26213
  %26236 = getelementptr inbounds i16, i16* %blur_x879, i64 %26235
  %26237 = bitcast i16* %26236 to <16 x i16>*
  %26238 = load <16 x i16>, <16 x i16>* %26237, align 2, !tbaa !399
  %26239 = getelementptr inbounds i16, i16* %26236, i64 16
  %26240 = bitcast i16* %26239 to <16 x i16>*
  %26241 = load <16 x i16>, <16 x i16>* %26240, align 2, !tbaa !399
  %26242 = add nsw i64 %26046, %26213
  %26243 = getelementptr inbounds i16, i16* %blur_x879, i64 %26242
  %26244 = bitcast i16* %26243 to <16 x i16>*
  %26245 = load <16 x i16>, <16 x i16>* %26244, align 2, !tbaa !399
  %26246 = getelementptr inbounds i16, i16* %26243, i64 16
  %26247 = bitcast i16* %26246 to <16 x i16>*
  %26248 = load <16 x i16>, <16 x i16>* %26247, align 2, !tbaa !399
  %26249 = add <16 x i16> %26224, %26217
  %26250 = add <16 x i16> %26249, %26231
  %26251 = add <16 x i16> %26250, %26238
  %26252 = add <16 x i16> %26251, %26245
  %26253 = add <16 x i16> %26227, %26220
  %26254 = add <16 x i16> %26253, %26234
  %26255 = add <16 x i16> %26254, %26241
  %26256 = add <16 x i16> %26255, %26248
  %26257 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26252, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26258 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26256, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26259 = shufflevector <16 x i16> %26257, <16 x i16> %26258, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26260 = lshr <32 x i16> %26259, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26261 = shufflevector <32 x i16> %26260, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26262 = add nsw i64 %26050, %26213
  %26263 = getelementptr inbounds i16, i16* %260, i64 %26262
  %26264 = bitcast i16* %26263 to <16 x i16>*
  store <16 x i16> %26261, <16 x i16>* %26264, align 2, !tbaa !401
  %26265 = shufflevector <32 x i16> %26260, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26266 = getelementptr inbounds i16, i16* %26263, i64 16
  %26267 = bitcast i16* %26266 to <16 x i16>*
  store <16 x i16> %26265, <16 x i16>* %26267, align 2, !tbaa !401
  %26268 = add nuw nsw i32 %blur_y.s0.x.x.rebased2110, 1
  %.not2553 = icmp eq i32 %26268, %t1683899
  br i1 %.not2553, label %"end for blur_y.s0.x.x.rebased2109", label %"for blur_y.s0.x.x.rebased2108"

after_bb2119:                                     ; preds = %"end for blur_y.s0.x.x.rebased2109", %"produce blur_x2122"
  br i1 %294, label %"for blur_y.s0.x.x.rebased2134.preheader", label %"end for blur_y.s0.x.x.rebased2135", !prof !386

"for blur_y.s0.x.x.rebased2134.preheader":        ; preds = %after_bb2119
  %26269 = sext i32 %t17381098 to i64
  %26270 = zext i32 %.pre-phi3480 to i64
  %26271 = mul nsw i64 %26270, %306
  %26272 = sub nsw i64 %26271, %290
  %26273 = zext i32 %.pre-phi3476 to i64
  %26274 = mul nsw i64 %26273, %306
  %26275 = sub nsw i64 %26274, %290
  %26276 = zext i32 %.pre-phi3484 to i64
  %26277 = mul nsw i64 %26276, %306
  %26278 = sub nsw i64 %26277, %290
  %26279 = zext i32 %.pre-phi3496 to i64
  %26280 = mul nsw i64 %26279, %306
  %26281 = sub nsw i64 %26280, %290
  %26282 = zext i32 %.pre-phi3490 to i64
  %26283 = mul nsw i64 %26282, %306
  %26284 = sub nsw i64 %26283, %290
  %26285 = sext i32 %a353 to i64
  %26286 = add nsw i64 %26285, 26
  %26287 = mul nsw i64 %26286, %307
  %26288 = add nsw i64 %26287, %310
  br label %"for blur_y.s0.x.x.rebased2134"

"produce blur_x2122":                             ; preds = %"end for blur_y.s0.x.x.rebased2109"
  %26289 = getelementptr inbounds i16, i16* %read_input822, i64 %361
  %26290 = getelementptr inbounds i16, i16* %26289, i64 -31
  %26291 = bitcast i16* %26290 to <16 x i16>*
  %26292 = load <16 x i16>, <16 x i16>* %26291, align 2, !tbaa !396
  %26293 = getelementptr inbounds i16, i16* %26289, i64 -15
  %26294 = bitcast i16* %26293 to <16 x i16>*
  %26295 = load <16 x i16>, <16 x i16>* %26294, align 2, !tbaa !396
  %26296 = getelementptr inbounds i16, i16* %26289, i64 -32
  %26297 = bitcast i16* %26296 to <16 x i16>*
  %26298 = load <16 x i16>, <16 x i16>* %26297, align 2, !tbaa !396
  %26299 = getelementptr inbounds i16, i16* %26289, i64 -16
  %26300 = bitcast i16* %26299 to <16 x i16>*
  %26301 = load <16 x i16>, <16 x i16>* %26300, align 2, !tbaa !396
  %26302 = getelementptr inbounds i16, i16* %26289, i64 -30
  %26303 = bitcast i16* %26302 to <16 x i16>*
  %26304 = load <16 x i16>, <16 x i16>* %26303, align 2, !tbaa !396
  %26305 = getelementptr inbounds i16, i16* %26289, i64 -14
  %26306 = bitcast i16* %26305 to <16 x i16>*
  %26307 = load <16 x i16>, <16 x i16>* %26306, align 2, !tbaa !396
  %26308 = getelementptr inbounds i16, i16* %26289, i64 -28
  %26309 = bitcast i16* %26308 to <16 x i16>*
  %26310 = load <16 x i16>, <16 x i16>* %26309, align 2, !tbaa !396
  %26311 = getelementptr inbounds i16, i16* %26289, i64 -12
  %26312 = bitcast i16* %26311 to <16 x i16>*
  %26313 = load <16 x i16>, <16 x i16>* %26312, align 2, !tbaa !396
  %26314 = getelementptr inbounds i16, i16* %26289, i64 -29
  %26315 = bitcast i16* %26314 to <16 x i16>*
  %26316 = load <16 x i16>, <16 x i16>* %26315, align 2, !tbaa !396
  %26317 = getelementptr inbounds i16, i16* %26289, i64 -13
  %26318 = bitcast i16* %26317 to <16 x i16>*
  %26319 = load <16 x i16>, <16 x i16>* %26318, align 2, !tbaa !396
  %26320 = add <16 x i16> %26298, %26292
  %26321 = add <16 x i16> %26320, %26304
  %26322 = add <16 x i16> %26321, %26310
  %26323 = add <16 x i16> %26322, %26316
  %26324 = add <16 x i16> %26301, %26295
  %26325 = add <16 x i16> %26324, %26307
  %26326 = add <16 x i16> %26325, %26313
  %26327 = add <16 x i16> %26326, %26319
  %26328 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26323, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26329 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26327, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26330 = shufflevector <16 x i16> %26328, <16 x i16> %26329, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26331 = lshr <32 x i16> %26330, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26332 = shufflevector <32 x i16> %26331, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26333 = zext i32 %.pre-phi3496 to i64
  %26334 = mul nsw i64 %291, %26333
  %26335 = add nsw i64 %293, %26334
  %26336 = getelementptr inbounds i16, i16* %blur_x879, i64 %26335
  %26337 = getelementptr inbounds i16, i16* %26336, i64 -32
  %26338 = bitcast i16* %26337 to <16 x i16>*
  store <16 x i16> %26332, <16 x i16>* %26338, align 2, !tbaa !399
  %26339 = shufflevector <32 x i16> %26331, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26340 = getelementptr inbounds i16, i16* %26336, i64 -16
  %26341 = bitcast i16* %26340 to <16 x i16>*
  store <16 x i16> %26339, <16 x i16>* %26341, align 2, !tbaa !399
  %26342 = zext i32 %.pre-phi3480 to i64
  %26343 = mul nsw i64 %26342, %306
  %26344 = add nsw i64 %26343, %288
  %26345 = getelementptr inbounds i16, i16* %blur_x879, i64 %26344
  %26346 = getelementptr inbounds i16, i16* %26345, i64 -32
  %26347 = bitcast i16* %26346 to <16 x i16>*
  %26348 = load <16 x i16>, <16 x i16>* %26347, align 2, !tbaa !399
  %26349 = getelementptr inbounds i16, i16* %26345, i64 -16
  %26350 = bitcast i16* %26349 to <16 x i16>*
  %26351 = load <16 x i16>, <16 x i16>* %26350, align 2, !tbaa !399
  %26352 = zext i32 %.pre-phi3476 to i64
  %26353 = mul nsw i64 %26352, %306
  %26354 = add nsw i64 %26353, %288
  %26355 = getelementptr inbounds i16, i16* %blur_x879, i64 %26354
  %26356 = getelementptr inbounds i16, i16* %26355, i64 -32
  %26357 = bitcast i16* %26356 to <16 x i16>*
  %26358 = load <16 x i16>, <16 x i16>* %26357, align 2, !tbaa !399
  %26359 = getelementptr inbounds i16, i16* %26355, i64 -16
  %26360 = bitcast i16* %26359 to <16 x i16>*
  %26361 = load <16 x i16>, <16 x i16>* %26360, align 2, !tbaa !399
  %26362 = zext i32 %.pre-phi3484 to i64
  %26363 = mul nsw i64 %26362, %306
  %26364 = add nsw i64 %26363, %288
  %26365 = getelementptr inbounds i16, i16* %blur_x879, i64 %26364
  %26366 = getelementptr inbounds i16, i16* %26365, i64 -32
  %26367 = bitcast i16* %26366 to <16 x i16>*
  %26368 = load <16 x i16>, <16 x i16>* %26367, align 2, !tbaa !399
  %26369 = getelementptr inbounds i16, i16* %26365, i64 -16
  %26370 = bitcast i16* %26369 to <16 x i16>*
  %26371 = load <16 x i16>, <16 x i16>* %26370, align 2, !tbaa !399
  %26372 = mul nsw i64 %26333, %306
  %26373 = add nsw i64 %26372, %288
  %26374 = getelementptr inbounds i16, i16* %blur_x879, i64 %26373
  %26375 = getelementptr inbounds i16, i16* %26374, i64 -32
  %26376 = bitcast i16* %26375 to <16 x i16>*
  %26377 = load <16 x i16>, <16 x i16>* %26376, align 2, !tbaa !399
  %26378 = getelementptr inbounds i16, i16* %26374, i64 -16
  %26379 = bitcast i16* %26378 to <16 x i16>*
  %26380 = load <16 x i16>, <16 x i16>* %26379, align 2, !tbaa !399
  %26381 = zext i32 %.pre-phi3490 to i64
  %26382 = mul nsw i64 %26381, %306
  %26383 = add nsw i64 %26382, %288
  %26384 = getelementptr inbounds i16, i16* %blur_x879, i64 %26383
  %26385 = getelementptr inbounds i16, i16* %26384, i64 -32
  %26386 = bitcast i16* %26385 to <16 x i16>*
  %26387 = load <16 x i16>, <16 x i16>* %26386, align 2, !tbaa !399
  %26388 = getelementptr inbounds i16, i16* %26384, i64 -16
  %26389 = bitcast i16* %26388 to <16 x i16>*
  %26390 = load <16 x i16>, <16 x i16>* %26389, align 2, !tbaa !399
  %26391 = add <16 x i16> %26358, %26348
  %26392 = add <16 x i16> %26391, %26368
  %26393 = add <16 x i16> %26392, %26377
  %26394 = add <16 x i16> %26393, %26387
  %26395 = add <16 x i16> %26361, %26351
  %26396 = add <16 x i16> %26395, %26371
  %26397 = add <16 x i16> %26396, %26380
  %26398 = add <16 x i16> %26397, %26390
  %26399 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26394, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26400 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26398, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26401 = shufflevector <16 x i16> %26399, <16 x i16> %26400, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26402 = lshr <32 x i16> %26401, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26403 = shufflevector <32 x i16> %26402, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26404 = sext i32 %a353 to i64
  %26405 = add nsw i64 %26404, 26
  %26406 = mul nsw i64 %26405, %307
  %26407 = add nsw i64 %309, %26406
  %26408 = getelementptr inbounds i16, i16* %260, i64 %26407
  %26409 = getelementptr inbounds i16, i16* %26408, i64 -32
  %26410 = bitcast i16* %26409 to <16 x i16>*
  store <16 x i16> %26403, <16 x i16>* %26410, align 2, !tbaa !401
  %26411 = shufflevector <32 x i16> %26402, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26412 = getelementptr inbounds i16, i16* %26408, i64 -16
  %26413 = bitcast i16* %26412 to <16 x i16>*
  store <16 x i16> %26411, <16 x i16>* %26413, align 2, !tbaa !401
  br label %after_bb2119

"for blur_y.s0.x.x.rebased2134":                  ; preds = %"for blur_y.s0.x.x.rebased2134.preheader", %"consume blur_x2143"
  %indvars.iv3353 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2134.preheader" ], [ %indvars.iv.next3354, %"consume blur_x2143" ]
  %26414 = add nsw i64 %indvars.iv3353, %295
  %26415 = icmp slt i64 %26414, 1
  %26416 = trunc i64 %26414 to i32
  %26417 = shl nsw i32 %26416, 5
  %26418 = icmp sgt i32 %198, %26417
  %26419 = or i1 %26415, %26418
  br i1 %26419, label %"produce blur_x2141", label %"for blur_y.s0.x.x.rebased2134.consume blur_x2143_crit_edge"

"for blur_y.s0.x.x.rebased2134.consume blur_x2143_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2134"
  %.pre3549 = shl nsw i64 %26414, 5
  br label %"consume blur_x2143"

"end for blur_y.s0.x.x.rebased2135":              ; preds = %"consume blur_x2143", %after_bb2119
  br i1 %296, label %"for blur_y.s0.x.x.rebased2151.preheader", label %"end for blur_y.s0.x.x.rebased2152", !prof !386

"for blur_y.s0.x.x.rebased2151.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2135"
  %26420 = sext i32 %t17381098 to i64
  %26421 = zext i32 %.pre-phi3480 to i64
  %26422 = mul nsw i64 %26421, %306
  %26423 = sub nsw i64 %26422, %290
  %26424 = zext i32 %.pre-phi3476 to i64
  %26425 = mul nsw i64 %26424, %306
  %26426 = sub nsw i64 %26425, %290
  %26427 = zext i32 %.pre-phi3484 to i64
  %26428 = mul nsw i64 %26427, %306
  %26429 = sub nsw i64 %26428, %290
  %26430 = zext i32 %.pre-phi3496 to i64
  %26431 = mul nsw i64 %26430, %306
  %26432 = sub nsw i64 %26431, %290
  %26433 = zext i32 %.pre-phi3490 to i64
  %26434 = mul nsw i64 %26433, %306
  %26435 = sub nsw i64 %26434, %290
  %26436 = sext i32 %a353 to i64
  %26437 = add nsw i64 %26436, 26
  %26438 = mul nsw i64 %26437, %307
  %26439 = add nsw i64 %26438, %310
  br label %"for blur_y.s0.x.x.rebased2151"

"produce blur_x2141":                             ; preds = %"for blur_y.s0.x.x.rebased2134"
  %t11282142 = add nsw i32 %26417, %t21212131
  %26440 = sext i32 %t11282142 to i64
  %26441 = getelementptr inbounds i16, i16* %read_input822, i64 %26440
  %26442 = getelementptr inbounds i16, i16* %26441, i64 1
  %26443 = bitcast i16* %26442 to <16 x i16>*
  %26444 = load <16 x i16>, <16 x i16>* %26443, align 2, !tbaa !396
  %26445 = getelementptr inbounds i16, i16* %26441, i64 17
  %26446 = bitcast i16* %26445 to <16 x i16>*
  %26447 = load <16 x i16>, <16 x i16>* %26446, align 2, !tbaa !396
  %26448 = bitcast i16* %26441 to <16 x i16>*
  %26449 = load <16 x i16>, <16 x i16>* %26448, align 2, !tbaa !396
  %26450 = getelementptr inbounds i16, i16* %26441, i64 16
  %26451 = bitcast i16* %26450 to <16 x i16>*
  %26452 = load <16 x i16>, <16 x i16>* %26451, align 2, !tbaa !396
  %26453 = getelementptr inbounds i16, i16* %26441, i64 2
  %26454 = bitcast i16* %26453 to <16 x i16>*
  %26455 = load <16 x i16>, <16 x i16>* %26454, align 2, !tbaa !396
  %26456 = getelementptr inbounds i16, i16* %26441, i64 18
  %26457 = bitcast i16* %26456 to <16 x i16>*
  %26458 = load <16 x i16>, <16 x i16>* %26457, align 2, !tbaa !396
  %26459 = getelementptr inbounds i16, i16* %26441, i64 4
  %26460 = bitcast i16* %26459 to <16 x i16>*
  %26461 = load <16 x i16>, <16 x i16>* %26460, align 2, !tbaa !396
  %26462 = getelementptr inbounds i16, i16* %26441, i64 20
  %26463 = bitcast i16* %26462 to <16 x i16>*
  %26464 = load <16 x i16>, <16 x i16>* %26463, align 2, !tbaa !396
  %26465 = getelementptr inbounds i16, i16* %26441, i64 3
  %26466 = bitcast i16* %26465 to <16 x i16>*
  %26467 = load <16 x i16>, <16 x i16>* %26466, align 2, !tbaa !396
  %26468 = getelementptr inbounds i16, i16* %26441, i64 19
  %26469 = bitcast i16* %26468 to <16 x i16>*
  %26470 = load <16 x i16>, <16 x i16>* %26469, align 2, !tbaa !396
  %26471 = add <16 x i16> %26449, %26444
  %26472 = add <16 x i16> %26471, %26455
  %26473 = add <16 x i16> %26472, %26461
  %26474 = add <16 x i16> %26473, %26467
  %26475 = add <16 x i16> %26452, %26447
  %26476 = add <16 x i16> %26475, %26458
  %26477 = add <16 x i16> %26476, %26464
  %26478 = add <16 x i16> %26477, %26470
  %26479 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26474, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26480 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26478, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26481 = shufflevector <16 x i16> %26479, <16 x i16> %26480, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26482 = lshr <32 x i16> %26481, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26483 = shufflevector <32 x i16> %26482, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26484 = shl nsw i64 %26414, 5
  %26485 = add nsw i64 %26484, %26269
  %26486 = getelementptr inbounds i16, i16* %blur_x879, i64 %26485
  %26487 = bitcast i16* %26486 to <16 x i16>*
  store <16 x i16> %26483, <16 x i16>* %26487, align 2, !tbaa !399
  %26488 = shufflevector <32 x i16> %26482, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26489 = getelementptr inbounds i16, i16* %26486, i64 16
  %26490 = bitcast i16* %26489 to <16 x i16>*
  store <16 x i16> %26488, <16 x i16>* %26490, align 2, !tbaa !399
  br label %"consume blur_x2143"

"consume blur_x2143":                             ; preds = %"for blur_y.s0.x.x.rebased2134.consume blur_x2143_crit_edge", %"produce blur_x2141"
  %.pre-phi3550 = phi i64 [ %.pre3549, %"for blur_y.s0.x.x.rebased2134.consume blur_x2143_crit_edge" ], [ %26484, %"produce blur_x2141" ]
  %26491 = add nsw i64 %26272, %.pre-phi3550
  %26492 = getelementptr inbounds i16, i16* %blur_x879, i64 %26491
  %26493 = bitcast i16* %26492 to <16 x i16>*
  %26494 = load <16 x i16>, <16 x i16>* %26493, align 2, !tbaa !399
  %26495 = getelementptr inbounds i16, i16* %26492, i64 16
  %26496 = bitcast i16* %26495 to <16 x i16>*
  %26497 = load <16 x i16>, <16 x i16>* %26496, align 2, !tbaa !399
  %26498 = add nsw i64 %26275, %.pre-phi3550
  %26499 = getelementptr inbounds i16, i16* %blur_x879, i64 %26498
  %26500 = bitcast i16* %26499 to <16 x i16>*
  %26501 = load <16 x i16>, <16 x i16>* %26500, align 2, !tbaa !399
  %26502 = getelementptr inbounds i16, i16* %26499, i64 16
  %26503 = bitcast i16* %26502 to <16 x i16>*
  %26504 = load <16 x i16>, <16 x i16>* %26503, align 2, !tbaa !399
  %26505 = add nsw i64 %26278, %.pre-phi3550
  %26506 = getelementptr inbounds i16, i16* %blur_x879, i64 %26505
  %26507 = bitcast i16* %26506 to <16 x i16>*
  %26508 = load <16 x i16>, <16 x i16>* %26507, align 2, !tbaa !399
  %26509 = getelementptr inbounds i16, i16* %26506, i64 16
  %26510 = bitcast i16* %26509 to <16 x i16>*
  %26511 = load <16 x i16>, <16 x i16>* %26510, align 2, !tbaa !399
  %26512 = add nsw i64 %26281, %.pre-phi3550
  %26513 = getelementptr inbounds i16, i16* %blur_x879, i64 %26512
  %26514 = bitcast i16* %26513 to <16 x i16>*
  %26515 = load <16 x i16>, <16 x i16>* %26514, align 2, !tbaa !399
  %26516 = getelementptr inbounds i16, i16* %26513, i64 16
  %26517 = bitcast i16* %26516 to <16 x i16>*
  %26518 = load <16 x i16>, <16 x i16>* %26517, align 2, !tbaa !399
  %26519 = add nsw i64 %26284, %.pre-phi3550
  %26520 = getelementptr inbounds i16, i16* %blur_x879, i64 %26519
  %26521 = bitcast i16* %26520 to <16 x i16>*
  %26522 = load <16 x i16>, <16 x i16>* %26521, align 2, !tbaa !399
  %26523 = getelementptr inbounds i16, i16* %26520, i64 16
  %26524 = bitcast i16* %26523 to <16 x i16>*
  %26525 = load <16 x i16>, <16 x i16>* %26524, align 2, !tbaa !399
  %26526 = add <16 x i16> %26501, %26494
  %26527 = add <16 x i16> %26526, %26508
  %26528 = add <16 x i16> %26527, %26515
  %26529 = add <16 x i16> %26528, %26522
  %26530 = add <16 x i16> %26504, %26497
  %26531 = add <16 x i16> %26530, %26511
  %26532 = add <16 x i16> %26531, %26518
  %26533 = add <16 x i16> %26532, %26525
  %26534 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26529, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26535 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26533, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26536 = shufflevector <16 x i16> %26534, <16 x i16> %26535, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26537 = lshr <32 x i16> %26536, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26538 = shufflevector <32 x i16> %26537, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26539 = add nsw i64 %26288, %.pre-phi3550
  %26540 = getelementptr inbounds i16, i16* %260, i64 %26539
  %26541 = bitcast i16* %26540 to <16 x i16>*
  store <16 x i16> %26538, <16 x i16>* %26541, align 2, !tbaa !401
  %26542 = shufflevector <32 x i16> %26537, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26543 = getelementptr inbounds i16, i16* %26540, i64 16
  %26544 = bitcast i16* %26543 to <16 x i16>*
  store <16 x i16> %26542, <16 x i16>* %26544, align 2, !tbaa !401
  %indvars.iv.next3354 = add nuw nsw i64 %indvars.iv3353, 1
  %.not2552 = icmp eq i64 %indvars.iv.next3354, %378
  br i1 %.not2552, label %"end for blur_y.s0.x.x.rebased2135", label %"for blur_y.s0.x.x.rebased2134"

"for blur_y.s0.x.x.rebased2151":                  ; preds = %"for blur_y.s0.x.x.rebased2151.preheader", %"consume blur_x2161"
  %blur_y.s0.x.x.rebased2153 = phi i32 [ %26657, %"consume blur_x2161" ], [ 0, %"for blur_y.s0.x.x.rebased2151.preheader" ]
  %26545 = add nsw i32 %blur_y.s0.x.x.rebased2153, %t1626814
  %a614 = shl nsw i32 %26545, 5
  %26546 = icmp sgt i32 %a341, %a614
  %b620 = select i1 %26546, i32 %a614, i32 %a341
  %26547 = icmp slt i32 %26545, 1
  %26548 = icmp sgt i32 %198, %a614
  %26549 = or i1 %26547, %26548
  br i1 %26549, label %"produce blur_x2158", label %"consume blur_x2161"

"end for blur_y.s0.x.x.rebased2152":              ; preds = %"consume blur_x2161", %"end for blur_y.s0.x.x.rebased2135"
  br i1 %228, label %"produce blur_x2165", label %after_bb2162

"produce blur_x2158":                             ; preds = %"for blur_y.s0.x.x.rebased2151"
  %26550 = icmp slt i32 %b620, %198
  %blur_x.s0.x.v1.base.s2159 = select i1 %26550, i32 %b620, i32 %198
  %t11332160 = add nsw i32 %blur_x.s0.x.v1.base.s2159, %t21212131
  %26551 = sext i32 %t11332160 to i64
  %26552 = getelementptr inbounds i16, i16* %read_input822, i64 %26551
  %26553 = getelementptr inbounds i16, i16* %26552, i64 1
  %26554 = bitcast i16* %26553 to <16 x i16>*
  %26555 = load <16 x i16>, <16 x i16>* %26554, align 2, !tbaa !396
  %26556 = getelementptr inbounds i16, i16* %26552, i64 17
  %26557 = bitcast i16* %26556 to <16 x i16>*
  %26558 = load <16 x i16>, <16 x i16>* %26557, align 2, !tbaa !396
  %26559 = bitcast i16* %26552 to <16 x i16>*
  %26560 = load <16 x i16>, <16 x i16>* %26559, align 2, !tbaa !396
  %26561 = getelementptr inbounds i16, i16* %26552, i64 16
  %26562 = bitcast i16* %26561 to <16 x i16>*
  %26563 = load <16 x i16>, <16 x i16>* %26562, align 2, !tbaa !396
  %26564 = getelementptr inbounds i16, i16* %26552, i64 2
  %26565 = bitcast i16* %26564 to <16 x i16>*
  %26566 = load <16 x i16>, <16 x i16>* %26565, align 2, !tbaa !396
  %26567 = getelementptr inbounds i16, i16* %26552, i64 18
  %26568 = bitcast i16* %26567 to <16 x i16>*
  %26569 = load <16 x i16>, <16 x i16>* %26568, align 2, !tbaa !396
  %26570 = getelementptr inbounds i16, i16* %26552, i64 4
  %26571 = bitcast i16* %26570 to <16 x i16>*
  %26572 = load <16 x i16>, <16 x i16>* %26571, align 2, !tbaa !396
  %26573 = getelementptr inbounds i16, i16* %26552, i64 20
  %26574 = bitcast i16* %26573 to <16 x i16>*
  %26575 = load <16 x i16>, <16 x i16>* %26574, align 2, !tbaa !396
  %26576 = getelementptr inbounds i16, i16* %26552, i64 3
  %26577 = bitcast i16* %26576 to <16 x i16>*
  %26578 = load <16 x i16>, <16 x i16>* %26577, align 2, !tbaa !396
  %26579 = getelementptr inbounds i16, i16* %26552, i64 19
  %26580 = bitcast i16* %26579 to <16 x i16>*
  %26581 = load <16 x i16>, <16 x i16>* %26580, align 2, !tbaa !396
  %26582 = add <16 x i16> %26560, %26555
  %26583 = add <16 x i16> %26582, %26566
  %26584 = add <16 x i16> %26583, %26572
  %26585 = add <16 x i16> %26584, %26578
  %26586 = add <16 x i16> %26563, %26558
  %26587 = add <16 x i16> %26586, %26569
  %26588 = add <16 x i16> %26587, %26575
  %26589 = add <16 x i16> %26588, %26581
  %26590 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26585, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26591 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26589, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26592 = shufflevector <16 x i16> %26590, <16 x i16> %26591, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26593 = lshr <32 x i16> %26592, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26594 = shufflevector <32 x i16> %26593, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26595 = sext i32 %blur_x.s0.x.v1.base.s2159 to i64
  %26596 = add nsw i64 %26595, %26420
  %26597 = getelementptr inbounds i16, i16* %blur_x879, i64 %26596
  %26598 = bitcast i16* %26597 to <16 x i16>*
  store <16 x i16> %26594, <16 x i16>* %26598, align 2, !tbaa !399
  %26599 = shufflevector <32 x i16> %26593, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26600 = getelementptr inbounds i16, i16* %26597, i64 16
  %26601 = bitcast i16* %26600 to <16 x i16>*
  store <16 x i16> %26599, <16 x i16>* %26601, align 2, !tbaa !399
  br label %"consume blur_x2161"

"consume blur_x2161":                             ; preds = %"for blur_y.s0.x.x.rebased2151", %"produce blur_x2158"
  %26602 = sext i32 %b620 to i64
  %26603 = add nsw i64 %26423, %26602
  %26604 = getelementptr inbounds i16, i16* %blur_x879, i64 %26603
  %26605 = bitcast i16* %26604 to <16 x i16>*
  %26606 = load <16 x i16>, <16 x i16>* %26605, align 2, !tbaa !399
  %26607 = getelementptr inbounds i16, i16* %26604, i64 16
  %26608 = bitcast i16* %26607 to <16 x i16>*
  %26609 = load <16 x i16>, <16 x i16>* %26608, align 2, !tbaa !399
  %26610 = add nsw i64 %26426, %26602
  %26611 = getelementptr inbounds i16, i16* %blur_x879, i64 %26610
  %26612 = bitcast i16* %26611 to <16 x i16>*
  %26613 = load <16 x i16>, <16 x i16>* %26612, align 2, !tbaa !399
  %26614 = getelementptr inbounds i16, i16* %26611, i64 16
  %26615 = bitcast i16* %26614 to <16 x i16>*
  %26616 = load <16 x i16>, <16 x i16>* %26615, align 2, !tbaa !399
  %26617 = add nsw i64 %26429, %26602
  %26618 = getelementptr inbounds i16, i16* %blur_x879, i64 %26617
  %26619 = bitcast i16* %26618 to <16 x i16>*
  %26620 = load <16 x i16>, <16 x i16>* %26619, align 2, !tbaa !399
  %26621 = getelementptr inbounds i16, i16* %26618, i64 16
  %26622 = bitcast i16* %26621 to <16 x i16>*
  %26623 = load <16 x i16>, <16 x i16>* %26622, align 2, !tbaa !399
  %26624 = add nsw i64 %26432, %26602
  %26625 = getelementptr inbounds i16, i16* %blur_x879, i64 %26624
  %26626 = bitcast i16* %26625 to <16 x i16>*
  %26627 = load <16 x i16>, <16 x i16>* %26626, align 2, !tbaa !399
  %26628 = getelementptr inbounds i16, i16* %26625, i64 16
  %26629 = bitcast i16* %26628 to <16 x i16>*
  %26630 = load <16 x i16>, <16 x i16>* %26629, align 2, !tbaa !399
  %26631 = add nsw i64 %26435, %26602
  %26632 = getelementptr inbounds i16, i16* %blur_x879, i64 %26631
  %26633 = bitcast i16* %26632 to <16 x i16>*
  %26634 = load <16 x i16>, <16 x i16>* %26633, align 2, !tbaa !399
  %26635 = getelementptr inbounds i16, i16* %26632, i64 16
  %26636 = bitcast i16* %26635 to <16 x i16>*
  %26637 = load <16 x i16>, <16 x i16>* %26636, align 2, !tbaa !399
  %26638 = add <16 x i16> %26613, %26606
  %26639 = add <16 x i16> %26638, %26620
  %26640 = add <16 x i16> %26639, %26627
  %26641 = add <16 x i16> %26640, %26634
  %26642 = add <16 x i16> %26616, %26609
  %26643 = add <16 x i16> %26642, %26623
  %26644 = add <16 x i16> %26643, %26630
  %26645 = add <16 x i16> %26644, %26637
  %26646 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26641, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26647 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26645, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26648 = shufflevector <16 x i16> %26646, <16 x i16> %26647, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26649 = lshr <32 x i16> %26648, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26650 = shufflevector <32 x i16> %26649, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26651 = add nsw i64 %26439, %26602
  %26652 = getelementptr inbounds i16, i16* %260, i64 %26651
  %26653 = bitcast i16* %26652 to <16 x i16>*
  store <16 x i16> %26650, <16 x i16>* %26653, align 2, !tbaa !401
  %26654 = shufflevector <32 x i16> %26649, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26655 = getelementptr inbounds i16, i16* %26652, i64 16
  %26656 = bitcast i16* %26655 to <16 x i16>*
  store <16 x i16> %26654, <16 x i16>* %26656, align 2, !tbaa !401
  %26657 = add nuw nsw i32 %blur_y.s0.x.x.rebased2153, 1
  %.not2551 = icmp eq i32 %26657, %t1683899
  br i1 %.not2551, label %"end for blur_y.s0.x.x.rebased2152", label %"for blur_y.s0.x.x.rebased2151"

after_bb2162:                                     ; preds = %"end for blur_y.s0.x.x.rebased2152", %"produce blur_x2165"
  br i1 %294, label %"for blur_y.s0.x.x.rebased2177.preheader", label %"end for blur_y.s0.x.x.rebased2178", !prof !386

"for blur_y.s0.x.x.rebased2177.preheader":        ; preds = %after_bb2162
  %26658 = sext i32 %t17541141 to i64
  %26659 = zext i32 %.pre-phi3484 to i64
  %26660 = mul nsw i64 %26659, %306
  %26661 = sub nsw i64 %26660, %290
  %26662 = zext i32 %.pre-phi3480 to i64
  %26663 = mul nsw i64 %26662, %306
  %26664 = sub nsw i64 %26663, %290
  %26665 = zext i32 %.pre-phi3490 to i64
  %26666 = mul nsw i64 %26665, %306
  %26667 = sub nsw i64 %26666, %290
  %26668 = zext i32 %.pre-phi3502 to i64
  %26669 = mul nsw i64 %26668, %306
  %26670 = sub nsw i64 %26669, %290
  %26671 = zext i32 %.pre-phi3496 to i64
  %26672 = mul nsw i64 %26671, %306
  %26673 = sub nsw i64 %26672, %290
  %26674 = sext i32 %a353 to i64
  %26675 = add nsw i64 %26674, 27
  %26676 = mul nsw i64 %26675, %307
  %26677 = add nsw i64 %26676, %310
  br label %"for blur_y.s0.x.x.rebased2177"

"produce blur_x2165":                             ; preds = %"end for blur_y.s0.x.x.rebased2152"
  %26678 = getelementptr inbounds i16, i16* %read_input822, i64 %363
  %26679 = getelementptr inbounds i16, i16* %26678, i64 -31
  %26680 = bitcast i16* %26679 to <16 x i16>*
  %26681 = load <16 x i16>, <16 x i16>* %26680, align 2, !tbaa !396
  %26682 = getelementptr inbounds i16, i16* %26678, i64 -15
  %26683 = bitcast i16* %26682 to <16 x i16>*
  %26684 = load <16 x i16>, <16 x i16>* %26683, align 2, !tbaa !396
  %26685 = getelementptr inbounds i16, i16* %26678, i64 -32
  %26686 = bitcast i16* %26685 to <16 x i16>*
  %26687 = load <16 x i16>, <16 x i16>* %26686, align 2, !tbaa !396
  %26688 = getelementptr inbounds i16, i16* %26678, i64 -16
  %26689 = bitcast i16* %26688 to <16 x i16>*
  %26690 = load <16 x i16>, <16 x i16>* %26689, align 2, !tbaa !396
  %26691 = getelementptr inbounds i16, i16* %26678, i64 -30
  %26692 = bitcast i16* %26691 to <16 x i16>*
  %26693 = load <16 x i16>, <16 x i16>* %26692, align 2, !tbaa !396
  %26694 = getelementptr inbounds i16, i16* %26678, i64 -14
  %26695 = bitcast i16* %26694 to <16 x i16>*
  %26696 = load <16 x i16>, <16 x i16>* %26695, align 2, !tbaa !396
  %26697 = getelementptr inbounds i16, i16* %26678, i64 -28
  %26698 = bitcast i16* %26697 to <16 x i16>*
  %26699 = load <16 x i16>, <16 x i16>* %26698, align 2, !tbaa !396
  %26700 = getelementptr inbounds i16, i16* %26678, i64 -12
  %26701 = bitcast i16* %26700 to <16 x i16>*
  %26702 = load <16 x i16>, <16 x i16>* %26701, align 2, !tbaa !396
  %26703 = getelementptr inbounds i16, i16* %26678, i64 -29
  %26704 = bitcast i16* %26703 to <16 x i16>*
  %26705 = load <16 x i16>, <16 x i16>* %26704, align 2, !tbaa !396
  %26706 = getelementptr inbounds i16, i16* %26678, i64 -13
  %26707 = bitcast i16* %26706 to <16 x i16>*
  %26708 = load <16 x i16>, <16 x i16>* %26707, align 2, !tbaa !396
  %26709 = add <16 x i16> %26687, %26681
  %26710 = add <16 x i16> %26709, %26693
  %26711 = add <16 x i16> %26710, %26699
  %26712 = add <16 x i16> %26711, %26705
  %26713 = add <16 x i16> %26690, %26684
  %26714 = add <16 x i16> %26713, %26696
  %26715 = add <16 x i16> %26714, %26702
  %26716 = add <16 x i16> %26715, %26708
  %26717 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26712, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26718 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26716, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26719 = shufflevector <16 x i16> %26717, <16 x i16> %26718, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26720 = lshr <32 x i16> %26719, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26721 = shufflevector <32 x i16> %26720, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26722 = zext i32 %.pre-phi3502 to i64
  %26723 = mul nsw i64 %291, %26722
  %26724 = add nsw i64 %293, %26723
  %26725 = getelementptr inbounds i16, i16* %blur_x879, i64 %26724
  %26726 = getelementptr inbounds i16, i16* %26725, i64 -32
  %26727 = bitcast i16* %26726 to <16 x i16>*
  store <16 x i16> %26721, <16 x i16>* %26727, align 2, !tbaa !399
  %26728 = shufflevector <32 x i16> %26720, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26729 = getelementptr inbounds i16, i16* %26725, i64 -16
  %26730 = bitcast i16* %26729 to <16 x i16>*
  store <16 x i16> %26728, <16 x i16>* %26730, align 2, !tbaa !399
  %26731 = zext i32 %.pre-phi3484 to i64
  %26732 = mul nsw i64 %26731, %306
  %26733 = add nsw i64 %26732, %288
  %26734 = getelementptr inbounds i16, i16* %blur_x879, i64 %26733
  %26735 = getelementptr inbounds i16, i16* %26734, i64 -32
  %26736 = bitcast i16* %26735 to <16 x i16>*
  %26737 = load <16 x i16>, <16 x i16>* %26736, align 2, !tbaa !399
  %26738 = getelementptr inbounds i16, i16* %26734, i64 -16
  %26739 = bitcast i16* %26738 to <16 x i16>*
  %26740 = load <16 x i16>, <16 x i16>* %26739, align 2, !tbaa !399
  %26741 = zext i32 %.pre-phi3480 to i64
  %26742 = mul nsw i64 %26741, %306
  %26743 = add nsw i64 %26742, %288
  %26744 = getelementptr inbounds i16, i16* %blur_x879, i64 %26743
  %26745 = getelementptr inbounds i16, i16* %26744, i64 -32
  %26746 = bitcast i16* %26745 to <16 x i16>*
  %26747 = load <16 x i16>, <16 x i16>* %26746, align 2, !tbaa !399
  %26748 = getelementptr inbounds i16, i16* %26744, i64 -16
  %26749 = bitcast i16* %26748 to <16 x i16>*
  %26750 = load <16 x i16>, <16 x i16>* %26749, align 2, !tbaa !399
  %26751 = zext i32 %.pre-phi3490 to i64
  %26752 = mul nsw i64 %26751, %306
  %26753 = add nsw i64 %26752, %288
  %26754 = getelementptr inbounds i16, i16* %blur_x879, i64 %26753
  %26755 = getelementptr inbounds i16, i16* %26754, i64 -32
  %26756 = bitcast i16* %26755 to <16 x i16>*
  %26757 = load <16 x i16>, <16 x i16>* %26756, align 2, !tbaa !399
  %26758 = getelementptr inbounds i16, i16* %26754, i64 -16
  %26759 = bitcast i16* %26758 to <16 x i16>*
  %26760 = load <16 x i16>, <16 x i16>* %26759, align 2, !tbaa !399
  %26761 = mul nsw i64 %26722, %306
  %26762 = add nsw i64 %26761, %288
  %26763 = getelementptr inbounds i16, i16* %blur_x879, i64 %26762
  %26764 = getelementptr inbounds i16, i16* %26763, i64 -32
  %26765 = bitcast i16* %26764 to <16 x i16>*
  %26766 = load <16 x i16>, <16 x i16>* %26765, align 2, !tbaa !399
  %26767 = getelementptr inbounds i16, i16* %26763, i64 -16
  %26768 = bitcast i16* %26767 to <16 x i16>*
  %26769 = load <16 x i16>, <16 x i16>* %26768, align 2, !tbaa !399
  %26770 = zext i32 %.pre-phi3496 to i64
  %26771 = mul nsw i64 %26770, %306
  %26772 = add nsw i64 %26771, %288
  %26773 = getelementptr inbounds i16, i16* %blur_x879, i64 %26772
  %26774 = getelementptr inbounds i16, i16* %26773, i64 -32
  %26775 = bitcast i16* %26774 to <16 x i16>*
  %26776 = load <16 x i16>, <16 x i16>* %26775, align 2, !tbaa !399
  %26777 = getelementptr inbounds i16, i16* %26773, i64 -16
  %26778 = bitcast i16* %26777 to <16 x i16>*
  %26779 = load <16 x i16>, <16 x i16>* %26778, align 2, !tbaa !399
  %26780 = add <16 x i16> %26747, %26737
  %26781 = add <16 x i16> %26780, %26757
  %26782 = add <16 x i16> %26781, %26766
  %26783 = add <16 x i16> %26782, %26776
  %26784 = add <16 x i16> %26750, %26740
  %26785 = add <16 x i16> %26784, %26760
  %26786 = add <16 x i16> %26785, %26769
  %26787 = add <16 x i16> %26786, %26779
  %26788 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26783, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26789 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26787, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26790 = shufflevector <16 x i16> %26788, <16 x i16> %26789, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26791 = lshr <32 x i16> %26790, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26792 = shufflevector <32 x i16> %26791, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26793 = sext i32 %a353 to i64
  %26794 = add nsw i64 %26793, 27
  %26795 = mul nsw i64 %26794, %307
  %26796 = add nsw i64 %309, %26795
  %26797 = getelementptr inbounds i16, i16* %260, i64 %26796
  %26798 = getelementptr inbounds i16, i16* %26797, i64 -32
  %26799 = bitcast i16* %26798 to <16 x i16>*
  store <16 x i16> %26792, <16 x i16>* %26799, align 2, !tbaa !401
  %26800 = shufflevector <32 x i16> %26791, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26801 = getelementptr inbounds i16, i16* %26797, i64 -16
  %26802 = bitcast i16* %26801 to <16 x i16>*
  store <16 x i16> %26800, <16 x i16>* %26802, align 2, !tbaa !401
  br label %after_bb2162

"for blur_y.s0.x.x.rebased2177":                  ; preds = %"for blur_y.s0.x.x.rebased2177.preheader", %"consume blur_x2186"
  %indvars.iv3356 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2177.preheader" ], [ %indvars.iv.next3357, %"consume blur_x2186" ]
  %26803 = add nsw i64 %indvars.iv3356, %295
  %26804 = icmp slt i64 %26803, 1
  %26805 = trunc i64 %26803 to i32
  %26806 = shl nsw i32 %26805, 5
  %26807 = icmp sgt i32 %198, %26806
  %26808 = or i1 %26804, %26807
  br i1 %26808, label %"produce blur_x2184", label %"for blur_y.s0.x.x.rebased2177.consume blur_x2186_crit_edge"

"for blur_y.s0.x.x.rebased2177.consume blur_x2186_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2177"
  %.pre3551 = shl nsw i64 %26803, 5
  br label %"consume blur_x2186"

"end for blur_y.s0.x.x.rebased2178":              ; preds = %"consume blur_x2186", %after_bb2162
  br i1 %296, label %"for blur_y.s0.x.x.rebased2194.preheader", label %"end for blur_y.s0.x.x.rebased2195", !prof !386

"for blur_y.s0.x.x.rebased2194.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2178"
  %26809 = sext i32 %t17541141 to i64
  %26810 = zext i32 %.pre-phi3484 to i64
  %26811 = mul nsw i64 %26810, %306
  %26812 = sub nsw i64 %26811, %290
  %26813 = zext i32 %.pre-phi3480 to i64
  %26814 = mul nsw i64 %26813, %306
  %26815 = sub nsw i64 %26814, %290
  %26816 = zext i32 %.pre-phi3490 to i64
  %26817 = mul nsw i64 %26816, %306
  %26818 = sub nsw i64 %26817, %290
  %26819 = zext i32 %.pre-phi3502 to i64
  %26820 = mul nsw i64 %26819, %306
  %26821 = sub nsw i64 %26820, %290
  %26822 = zext i32 %.pre-phi3496 to i64
  %26823 = mul nsw i64 %26822, %306
  %26824 = sub nsw i64 %26823, %290
  %26825 = sext i32 %a353 to i64
  %26826 = add nsw i64 %26825, 27
  %26827 = mul nsw i64 %26826, %307
  %26828 = add nsw i64 %26827, %310
  br label %"for blur_y.s0.x.x.rebased2194"

"produce blur_x2184":                             ; preds = %"for blur_y.s0.x.x.rebased2177"
  %t11442185 = add nsw i32 %26806, %t21372174
  %26829 = sext i32 %t11442185 to i64
  %26830 = getelementptr inbounds i16, i16* %read_input822, i64 %26829
  %26831 = getelementptr inbounds i16, i16* %26830, i64 1
  %26832 = bitcast i16* %26831 to <16 x i16>*
  %26833 = load <16 x i16>, <16 x i16>* %26832, align 2, !tbaa !396
  %26834 = getelementptr inbounds i16, i16* %26830, i64 17
  %26835 = bitcast i16* %26834 to <16 x i16>*
  %26836 = load <16 x i16>, <16 x i16>* %26835, align 2, !tbaa !396
  %26837 = bitcast i16* %26830 to <16 x i16>*
  %26838 = load <16 x i16>, <16 x i16>* %26837, align 2, !tbaa !396
  %26839 = getelementptr inbounds i16, i16* %26830, i64 16
  %26840 = bitcast i16* %26839 to <16 x i16>*
  %26841 = load <16 x i16>, <16 x i16>* %26840, align 2, !tbaa !396
  %26842 = getelementptr inbounds i16, i16* %26830, i64 2
  %26843 = bitcast i16* %26842 to <16 x i16>*
  %26844 = load <16 x i16>, <16 x i16>* %26843, align 2, !tbaa !396
  %26845 = getelementptr inbounds i16, i16* %26830, i64 18
  %26846 = bitcast i16* %26845 to <16 x i16>*
  %26847 = load <16 x i16>, <16 x i16>* %26846, align 2, !tbaa !396
  %26848 = getelementptr inbounds i16, i16* %26830, i64 4
  %26849 = bitcast i16* %26848 to <16 x i16>*
  %26850 = load <16 x i16>, <16 x i16>* %26849, align 2, !tbaa !396
  %26851 = getelementptr inbounds i16, i16* %26830, i64 20
  %26852 = bitcast i16* %26851 to <16 x i16>*
  %26853 = load <16 x i16>, <16 x i16>* %26852, align 2, !tbaa !396
  %26854 = getelementptr inbounds i16, i16* %26830, i64 3
  %26855 = bitcast i16* %26854 to <16 x i16>*
  %26856 = load <16 x i16>, <16 x i16>* %26855, align 2, !tbaa !396
  %26857 = getelementptr inbounds i16, i16* %26830, i64 19
  %26858 = bitcast i16* %26857 to <16 x i16>*
  %26859 = load <16 x i16>, <16 x i16>* %26858, align 2, !tbaa !396
  %26860 = add <16 x i16> %26838, %26833
  %26861 = add <16 x i16> %26860, %26844
  %26862 = add <16 x i16> %26861, %26850
  %26863 = add <16 x i16> %26862, %26856
  %26864 = add <16 x i16> %26841, %26836
  %26865 = add <16 x i16> %26864, %26847
  %26866 = add <16 x i16> %26865, %26853
  %26867 = add <16 x i16> %26866, %26859
  %26868 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26863, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26869 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26867, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26870 = shufflevector <16 x i16> %26868, <16 x i16> %26869, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26871 = lshr <32 x i16> %26870, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26872 = shufflevector <32 x i16> %26871, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26873 = shl nsw i64 %26803, 5
  %26874 = add nsw i64 %26873, %26658
  %26875 = getelementptr inbounds i16, i16* %blur_x879, i64 %26874
  %26876 = bitcast i16* %26875 to <16 x i16>*
  store <16 x i16> %26872, <16 x i16>* %26876, align 2, !tbaa !399
  %26877 = shufflevector <32 x i16> %26871, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26878 = getelementptr inbounds i16, i16* %26875, i64 16
  %26879 = bitcast i16* %26878 to <16 x i16>*
  store <16 x i16> %26877, <16 x i16>* %26879, align 2, !tbaa !399
  br label %"consume blur_x2186"

"consume blur_x2186":                             ; preds = %"for blur_y.s0.x.x.rebased2177.consume blur_x2186_crit_edge", %"produce blur_x2184"
  %.pre-phi3552 = phi i64 [ %.pre3551, %"for blur_y.s0.x.x.rebased2177.consume blur_x2186_crit_edge" ], [ %26873, %"produce blur_x2184" ]
  %26880 = add nsw i64 %26661, %.pre-phi3552
  %26881 = getelementptr inbounds i16, i16* %blur_x879, i64 %26880
  %26882 = bitcast i16* %26881 to <16 x i16>*
  %26883 = load <16 x i16>, <16 x i16>* %26882, align 2, !tbaa !399
  %26884 = getelementptr inbounds i16, i16* %26881, i64 16
  %26885 = bitcast i16* %26884 to <16 x i16>*
  %26886 = load <16 x i16>, <16 x i16>* %26885, align 2, !tbaa !399
  %26887 = add nsw i64 %26664, %.pre-phi3552
  %26888 = getelementptr inbounds i16, i16* %blur_x879, i64 %26887
  %26889 = bitcast i16* %26888 to <16 x i16>*
  %26890 = load <16 x i16>, <16 x i16>* %26889, align 2, !tbaa !399
  %26891 = getelementptr inbounds i16, i16* %26888, i64 16
  %26892 = bitcast i16* %26891 to <16 x i16>*
  %26893 = load <16 x i16>, <16 x i16>* %26892, align 2, !tbaa !399
  %26894 = add nsw i64 %26667, %.pre-phi3552
  %26895 = getelementptr inbounds i16, i16* %blur_x879, i64 %26894
  %26896 = bitcast i16* %26895 to <16 x i16>*
  %26897 = load <16 x i16>, <16 x i16>* %26896, align 2, !tbaa !399
  %26898 = getelementptr inbounds i16, i16* %26895, i64 16
  %26899 = bitcast i16* %26898 to <16 x i16>*
  %26900 = load <16 x i16>, <16 x i16>* %26899, align 2, !tbaa !399
  %26901 = add nsw i64 %26670, %.pre-phi3552
  %26902 = getelementptr inbounds i16, i16* %blur_x879, i64 %26901
  %26903 = bitcast i16* %26902 to <16 x i16>*
  %26904 = load <16 x i16>, <16 x i16>* %26903, align 2, !tbaa !399
  %26905 = getelementptr inbounds i16, i16* %26902, i64 16
  %26906 = bitcast i16* %26905 to <16 x i16>*
  %26907 = load <16 x i16>, <16 x i16>* %26906, align 2, !tbaa !399
  %26908 = add nsw i64 %26673, %.pre-phi3552
  %26909 = getelementptr inbounds i16, i16* %blur_x879, i64 %26908
  %26910 = bitcast i16* %26909 to <16 x i16>*
  %26911 = load <16 x i16>, <16 x i16>* %26910, align 2, !tbaa !399
  %26912 = getelementptr inbounds i16, i16* %26909, i64 16
  %26913 = bitcast i16* %26912 to <16 x i16>*
  %26914 = load <16 x i16>, <16 x i16>* %26913, align 2, !tbaa !399
  %26915 = add <16 x i16> %26890, %26883
  %26916 = add <16 x i16> %26915, %26897
  %26917 = add <16 x i16> %26916, %26904
  %26918 = add <16 x i16> %26917, %26911
  %26919 = add <16 x i16> %26893, %26886
  %26920 = add <16 x i16> %26919, %26900
  %26921 = add <16 x i16> %26920, %26907
  %26922 = add <16 x i16> %26921, %26914
  %26923 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26918, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26924 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26922, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26925 = shufflevector <16 x i16> %26923, <16 x i16> %26924, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26926 = lshr <32 x i16> %26925, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26927 = shufflevector <32 x i16> %26926, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26928 = add nsw i64 %26677, %.pre-phi3552
  %26929 = getelementptr inbounds i16, i16* %260, i64 %26928
  %26930 = bitcast i16* %26929 to <16 x i16>*
  store <16 x i16> %26927, <16 x i16>* %26930, align 2, !tbaa !401
  %26931 = shufflevector <32 x i16> %26926, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26932 = getelementptr inbounds i16, i16* %26929, i64 16
  %26933 = bitcast i16* %26932 to <16 x i16>*
  store <16 x i16> %26931, <16 x i16>* %26933, align 2, !tbaa !401
  %indvars.iv.next3357 = add nuw nsw i64 %indvars.iv3356, 1
  %.not2550 = icmp eq i64 %indvars.iv.next3357, %378
  br i1 %.not2550, label %"end for blur_y.s0.x.x.rebased2178", label %"for blur_y.s0.x.x.rebased2177"

"for blur_y.s0.x.x.rebased2194":                  ; preds = %"for blur_y.s0.x.x.rebased2194.preheader", %"consume blur_x2204"
  %blur_y.s0.x.x.rebased2196 = phi i32 [ %27046, %"consume blur_x2204" ], [ 0, %"for blur_y.s0.x.x.rebased2194.preheader" ]
  %26934 = add nsw i32 %blur_y.s0.x.x.rebased2196, %t1626814
  %a621 = shl nsw i32 %26934, 5
  %26935 = icmp sgt i32 %a341, %a621
  %b627 = select i1 %26935, i32 %a621, i32 %a341
  %26936 = icmp slt i32 %26934, 1
  %26937 = icmp sgt i32 %198, %a621
  %26938 = or i1 %26936, %26937
  br i1 %26938, label %"produce blur_x2201", label %"consume blur_x2204"

"end for blur_y.s0.x.x.rebased2195":              ; preds = %"consume blur_x2204", %"end for blur_y.s0.x.x.rebased2178"
  br i1 %228, label %"produce blur_x2208", label %after_bb2205

"produce blur_x2201":                             ; preds = %"for blur_y.s0.x.x.rebased2194"
  %26939 = icmp slt i32 %b627, %198
  %blur_x.s0.x.v1.base.s2202 = select i1 %26939, i32 %b627, i32 %198
  %t11492203 = add nsw i32 %blur_x.s0.x.v1.base.s2202, %t21372174
  %26940 = sext i32 %t11492203 to i64
  %26941 = getelementptr inbounds i16, i16* %read_input822, i64 %26940
  %26942 = getelementptr inbounds i16, i16* %26941, i64 1
  %26943 = bitcast i16* %26942 to <16 x i16>*
  %26944 = load <16 x i16>, <16 x i16>* %26943, align 2, !tbaa !396
  %26945 = getelementptr inbounds i16, i16* %26941, i64 17
  %26946 = bitcast i16* %26945 to <16 x i16>*
  %26947 = load <16 x i16>, <16 x i16>* %26946, align 2, !tbaa !396
  %26948 = bitcast i16* %26941 to <16 x i16>*
  %26949 = load <16 x i16>, <16 x i16>* %26948, align 2, !tbaa !396
  %26950 = getelementptr inbounds i16, i16* %26941, i64 16
  %26951 = bitcast i16* %26950 to <16 x i16>*
  %26952 = load <16 x i16>, <16 x i16>* %26951, align 2, !tbaa !396
  %26953 = getelementptr inbounds i16, i16* %26941, i64 2
  %26954 = bitcast i16* %26953 to <16 x i16>*
  %26955 = load <16 x i16>, <16 x i16>* %26954, align 2, !tbaa !396
  %26956 = getelementptr inbounds i16, i16* %26941, i64 18
  %26957 = bitcast i16* %26956 to <16 x i16>*
  %26958 = load <16 x i16>, <16 x i16>* %26957, align 2, !tbaa !396
  %26959 = getelementptr inbounds i16, i16* %26941, i64 4
  %26960 = bitcast i16* %26959 to <16 x i16>*
  %26961 = load <16 x i16>, <16 x i16>* %26960, align 2, !tbaa !396
  %26962 = getelementptr inbounds i16, i16* %26941, i64 20
  %26963 = bitcast i16* %26962 to <16 x i16>*
  %26964 = load <16 x i16>, <16 x i16>* %26963, align 2, !tbaa !396
  %26965 = getelementptr inbounds i16, i16* %26941, i64 3
  %26966 = bitcast i16* %26965 to <16 x i16>*
  %26967 = load <16 x i16>, <16 x i16>* %26966, align 2, !tbaa !396
  %26968 = getelementptr inbounds i16, i16* %26941, i64 19
  %26969 = bitcast i16* %26968 to <16 x i16>*
  %26970 = load <16 x i16>, <16 x i16>* %26969, align 2, !tbaa !396
  %26971 = add <16 x i16> %26949, %26944
  %26972 = add <16 x i16> %26971, %26955
  %26973 = add <16 x i16> %26972, %26961
  %26974 = add <16 x i16> %26973, %26967
  %26975 = add <16 x i16> %26952, %26947
  %26976 = add <16 x i16> %26975, %26958
  %26977 = add <16 x i16> %26976, %26964
  %26978 = add <16 x i16> %26977, %26970
  %26979 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26974, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26980 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %26978, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %26981 = shufflevector <16 x i16> %26979, <16 x i16> %26980, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26982 = lshr <32 x i16> %26981, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %26983 = shufflevector <32 x i16> %26982, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %26984 = sext i32 %blur_x.s0.x.v1.base.s2202 to i64
  %26985 = add nsw i64 %26984, %26809
  %26986 = getelementptr inbounds i16, i16* %blur_x879, i64 %26985
  %26987 = bitcast i16* %26986 to <16 x i16>*
  store <16 x i16> %26983, <16 x i16>* %26987, align 2, !tbaa !399
  %26988 = shufflevector <32 x i16> %26982, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %26989 = getelementptr inbounds i16, i16* %26986, i64 16
  %26990 = bitcast i16* %26989 to <16 x i16>*
  store <16 x i16> %26988, <16 x i16>* %26990, align 2, !tbaa !399
  br label %"consume blur_x2204"

"consume blur_x2204":                             ; preds = %"for blur_y.s0.x.x.rebased2194", %"produce blur_x2201"
  %26991 = sext i32 %b627 to i64
  %26992 = add nsw i64 %26812, %26991
  %26993 = getelementptr inbounds i16, i16* %blur_x879, i64 %26992
  %26994 = bitcast i16* %26993 to <16 x i16>*
  %26995 = load <16 x i16>, <16 x i16>* %26994, align 2, !tbaa !399
  %26996 = getelementptr inbounds i16, i16* %26993, i64 16
  %26997 = bitcast i16* %26996 to <16 x i16>*
  %26998 = load <16 x i16>, <16 x i16>* %26997, align 2, !tbaa !399
  %26999 = add nsw i64 %26815, %26991
  %27000 = getelementptr inbounds i16, i16* %blur_x879, i64 %26999
  %27001 = bitcast i16* %27000 to <16 x i16>*
  %27002 = load <16 x i16>, <16 x i16>* %27001, align 2, !tbaa !399
  %27003 = getelementptr inbounds i16, i16* %27000, i64 16
  %27004 = bitcast i16* %27003 to <16 x i16>*
  %27005 = load <16 x i16>, <16 x i16>* %27004, align 2, !tbaa !399
  %27006 = add nsw i64 %26818, %26991
  %27007 = getelementptr inbounds i16, i16* %blur_x879, i64 %27006
  %27008 = bitcast i16* %27007 to <16 x i16>*
  %27009 = load <16 x i16>, <16 x i16>* %27008, align 2, !tbaa !399
  %27010 = getelementptr inbounds i16, i16* %27007, i64 16
  %27011 = bitcast i16* %27010 to <16 x i16>*
  %27012 = load <16 x i16>, <16 x i16>* %27011, align 2, !tbaa !399
  %27013 = add nsw i64 %26821, %26991
  %27014 = getelementptr inbounds i16, i16* %blur_x879, i64 %27013
  %27015 = bitcast i16* %27014 to <16 x i16>*
  %27016 = load <16 x i16>, <16 x i16>* %27015, align 2, !tbaa !399
  %27017 = getelementptr inbounds i16, i16* %27014, i64 16
  %27018 = bitcast i16* %27017 to <16 x i16>*
  %27019 = load <16 x i16>, <16 x i16>* %27018, align 2, !tbaa !399
  %27020 = add nsw i64 %26824, %26991
  %27021 = getelementptr inbounds i16, i16* %blur_x879, i64 %27020
  %27022 = bitcast i16* %27021 to <16 x i16>*
  %27023 = load <16 x i16>, <16 x i16>* %27022, align 2, !tbaa !399
  %27024 = getelementptr inbounds i16, i16* %27021, i64 16
  %27025 = bitcast i16* %27024 to <16 x i16>*
  %27026 = load <16 x i16>, <16 x i16>* %27025, align 2, !tbaa !399
  %27027 = add <16 x i16> %27002, %26995
  %27028 = add <16 x i16> %27027, %27009
  %27029 = add <16 x i16> %27028, %27016
  %27030 = add <16 x i16> %27029, %27023
  %27031 = add <16 x i16> %27005, %26998
  %27032 = add <16 x i16> %27031, %27012
  %27033 = add <16 x i16> %27032, %27019
  %27034 = add <16 x i16> %27033, %27026
  %27035 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27030, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27036 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27034, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27037 = shufflevector <16 x i16> %27035, <16 x i16> %27036, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27038 = lshr <32 x i16> %27037, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27039 = shufflevector <32 x i16> %27038, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27040 = add nsw i64 %26828, %26991
  %27041 = getelementptr inbounds i16, i16* %260, i64 %27040
  %27042 = bitcast i16* %27041 to <16 x i16>*
  store <16 x i16> %27039, <16 x i16>* %27042, align 2, !tbaa !401
  %27043 = shufflevector <32 x i16> %27038, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27044 = getelementptr inbounds i16, i16* %27041, i64 16
  %27045 = bitcast i16* %27044 to <16 x i16>*
  store <16 x i16> %27043, <16 x i16>* %27045, align 2, !tbaa !401
  %27046 = add nuw nsw i32 %blur_y.s0.x.x.rebased2196, 1
  %.not2549 = icmp eq i32 %27046, %t1683899
  br i1 %.not2549, label %"end for blur_y.s0.x.x.rebased2195", label %"for blur_y.s0.x.x.rebased2194"

after_bb2205:                                     ; preds = %"end for blur_y.s0.x.x.rebased2195", %"produce blur_x2208"
  br i1 %294, label %"for blur_y.s0.x.x.rebased2220.preheader", label %"end for blur_y.s0.x.x.rebased2221", !prof !386

"for blur_y.s0.x.x.rebased2220.preheader":        ; preds = %after_bb2205
  %27047 = sext i32 %t1682886 to i64
  %27048 = zext i32 %.pre-phi3490 to i64
  %27049 = mul nsw i64 %27048, %306
  %27050 = sub nsw i64 %27049, %290
  %27051 = zext i32 %.pre-phi3484 to i64
  %27052 = mul nsw i64 %27051, %306
  %27053 = sub nsw i64 %27052, %290
  %27054 = zext i32 %.pre-phi3496 to i64
  %27055 = mul nsw i64 %27054, %306
  %27056 = sub nsw i64 %27055, %290
  %27057 = zext i32 %.pre-phi3468 to i64
  %27058 = mul nsw i64 %27057, %306
  %27059 = sub nsw i64 %27058, %290
  %27060 = zext i32 %.pre-phi3502 to i64
  %27061 = mul nsw i64 %27060, %306
  %27062 = sub nsw i64 %27061, %290
  %27063 = sext i32 %a353 to i64
  %27064 = add nsw i64 %27063, 28
  %27065 = mul nsw i64 %27064, %307
  %27066 = add nsw i64 %27065, %310
  br label %"for blur_y.s0.x.x.rebased2220"

"produce blur_x2208":                             ; preds = %"end for blur_y.s0.x.x.rebased2195"
  %27067 = getelementptr inbounds i16, i16* %read_input822, i64 %365
  %27068 = getelementptr inbounds i16, i16* %27067, i64 -31
  %27069 = bitcast i16* %27068 to <16 x i16>*
  %27070 = load <16 x i16>, <16 x i16>* %27069, align 2, !tbaa !396
  %27071 = getelementptr inbounds i16, i16* %27067, i64 -15
  %27072 = bitcast i16* %27071 to <16 x i16>*
  %27073 = load <16 x i16>, <16 x i16>* %27072, align 2, !tbaa !396
  %27074 = getelementptr inbounds i16, i16* %27067, i64 -32
  %27075 = bitcast i16* %27074 to <16 x i16>*
  %27076 = load <16 x i16>, <16 x i16>* %27075, align 2, !tbaa !396
  %27077 = getelementptr inbounds i16, i16* %27067, i64 -16
  %27078 = bitcast i16* %27077 to <16 x i16>*
  %27079 = load <16 x i16>, <16 x i16>* %27078, align 2, !tbaa !396
  %27080 = getelementptr inbounds i16, i16* %27067, i64 -30
  %27081 = bitcast i16* %27080 to <16 x i16>*
  %27082 = load <16 x i16>, <16 x i16>* %27081, align 2, !tbaa !396
  %27083 = getelementptr inbounds i16, i16* %27067, i64 -14
  %27084 = bitcast i16* %27083 to <16 x i16>*
  %27085 = load <16 x i16>, <16 x i16>* %27084, align 2, !tbaa !396
  %27086 = getelementptr inbounds i16, i16* %27067, i64 -28
  %27087 = bitcast i16* %27086 to <16 x i16>*
  %27088 = load <16 x i16>, <16 x i16>* %27087, align 2, !tbaa !396
  %27089 = getelementptr inbounds i16, i16* %27067, i64 -12
  %27090 = bitcast i16* %27089 to <16 x i16>*
  %27091 = load <16 x i16>, <16 x i16>* %27090, align 2, !tbaa !396
  %27092 = getelementptr inbounds i16, i16* %27067, i64 -29
  %27093 = bitcast i16* %27092 to <16 x i16>*
  %27094 = load <16 x i16>, <16 x i16>* %27093, align 2, !tbaa !396
  %27095 = getelementptr inbounds i16, i16* %27067, i64 -13
  %27096 = bitcast i16* %27095 to <16 x i16>*
  %27097 = load <16 x i16>, <16 x i16>* %27096, align 2, !tbaa !396
  %27098 = add <16 x i16> %27076, %27070
  %27099 = add <16 x i16> %27098, %27082
  %27100 = add <16 x i16> %27099, %27088
  %27101 = add <16 x i16> %27100, %27094
  %27102 = add <16 x i16> %27079, %27073
  %27103 = add <16 x i16> %27102, %27085
  %27104 = add <16 x i16> %27103, %27091
  %27105 = add <16 x i16> %27104, %27097
  %27106 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27101, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27107 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27105, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27108 = shufflevector <16 x i16> %27106, <16 x i16> %27107, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27109 = lshr <32 x i16> %27108, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27110 = shufflevector <32 x i16> %27109, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27111 = zext i32 %.pre-phi3468 to i64
  %27112 = mul nsw i64 %291, %27111
  %27113 = add nsw i64 %293, %27112
  %27114 = getelementptr inbounds i16, i16* %blur_x879, i64 %27113
  %27115 = getelementptr inbounds i16, i16* %27114, i64 -32
  %27116 = bitcast i16* %27115 to <16 x i16>*
  store <16 x i16> %27110, <16 x i16>* %27116, align 2, !tbaa !399
  %27117 = shufflevector <32 x i16> %27109, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27118 = getelementptr inbounds i16, i16* %27114, i64 -16
  %27119 = bitcast i16* %27118 to <16 x i16>*
  store <16 x i16> %27117, <16 x i16>* %27119, align 2, !tbaa !399
  %27120 = zext i32 %.pre-phi3490 to i64
  %27121 = mul nsw i64 %27120, %306
  %27122 = add nsw i64 %27121, %288
  %27123 = getelementptr inbounds i16, i16* %blur_x879, i64 %27122
  %27124 = getelementptr inbounds i16, i16* %27123, i64 -32
  %27125 = bitcast i16* %27124 to <16 x i16>*
  %27126 = load <16 x i16>, <16 x i16>* %27125, align 2, !tbaa !399
  %27127 = getelementptr inbounds i16, i16* %27123, i64 -16
  %27128 = bitcast i16* %27127 to <16 x i16>*
  %27129 = load <16 x i16>, <16 x i16>* %27128, align 2, !tbaa !399
  %27130 = zext i32 %.pre-phi3484 to i64
  %27131 = mul nsw i64 %27130, %306
  %27132 = add nsw i64 %27131, %288
  %27133 = getelementptr inbounds i16, i16* %blur_x879, i64 %27132
  %27134 = getelementptr inbounds i16, i16* %27133, i64 -32
  %27135 = bitcast i16* %27134 to <16 x i16>*
  %27136 = load <16 x i16>, <16 x i16>* %27135, align 2, !tbaa !399
  %27137 = getelementptr inbounds i16, i16* %27133, i64 -16
  %27138 = bitcast i16* %27137 to <16 x i16>*
  %27139 = load <16 x i16>, <16 x i16>* %27138, align 2, !tbaa !399
  %27140 = zext i32 %.pre-phi3496 to i64
  %27141 = mul nsw i64 %27140, %306
  %27142 = add nsw i64 %27141, %288
  %27143 = getelementptr inbounds i16, i16* %blur_x879, i64 %27142
  %27144 = getelementptr inbounds i16, i16* %27143, i64 -32
  %27145 = bitcast i16* %27144 to <16 x i16>*
  %27146 = load <16 x i16>, <16 x i16>* %27145, align 2, !tbaa !399
  %27147 = getelementptr inbounds i16, i16* %27143, i64 -16
  %27148 = bitcast i16* %27147 to <16 x i16>*
  %27149 = load <16 x i16>, <16 x i16>* %27148, align 2, !tbaa !399
  %27150 = mul nsw i64 %27111, %306
  %27151 = add nsw i64 %27150, %288
  %27152 = getelementptr inbounds i16, i16* %blur_x879, i64 %27151
  %27153 = getelementptr inbounds i16, i16* %27152, i64 -32
  %27154 = bitcast i16* %27153 to <16 x i16>*
  %27155 = load <16 x i16>, <16 x i16>* %27154, align 2, !tbaa !399
  %27156 = getelementptr inbounds i16, i16* %27152, i64 -16
  %27157 = bitcast i16* %27156 to <16 x i16>*
  %27158 = load <16 x i16>, <16 x i16>* %27157, align 2, !tbaa !399
  %27159 = zext i32 %.pre-phi3502 to i64
  %27160 = mul nsw i64 %27159, %306
  %27161 = add nsw i64 %27160, %288
  %27162 = getelementptr inbounds i16, i16* %blur_x879, i64 %27161
  %27163 = getelementptr inbounds i16, i16* %27162, i64 -32
  %27164 = bitcast i16* %27163 to <16 x i16>*
  %27165 = load <16 x i16>, <16 x i16>* %27164, align 2, !tbaa !399
  %27166 = getelementptr inbounds i16, i16* %27162, i64 -16
  %27167 = bitcast i16* %27166 to <16 x i16>*
  %27168 = load <16 x i16>, <16 x i16>* %27167, align 2, !tbaa !399
  %27169 = add <16 x i16> %27136, %27126
  %27170 = add <16 x i16> %27169, %27146
  %27171 = add <16 x i16> %27170, %27155
  %27172 = add <16 x i16> %27171, %27165
  %27173 = add <16 x i16> %27139, %27129
  %27174 = add <16 x i16> %27173, %27149
  %27175 = add <16 x i16> %27174, %27158
  %27176 = add <16 x i16> %27175, %27168
  %27177 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27172, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27178 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27176, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27179 = shufflevector <16 x i16> %27177, <16 x i16> %27178, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27180 = lshr <32 x i16> %27179, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27181 = shufflevector <32 x i16> %27180, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27182 = sext i32 %a353 to i64
  %27183 = add nsw i64 %27182, 28
  %27184 = mul nsw i64 %27183, %307
  %27185 = add nsw i64 %309, %27184
  %27186 = getelementptr inbounds i16, i16* %260, i64 %27185
  %27187 = getelementptr inbounds i16, i16* %27186, i64 -32
  %27188 = bitcast i16* %27187 to <16 x i16>*
  store <16 x i16> %27181, <16 x i16>* %27188, align 2, !tbaa !401
  %27189 = shufflevector <32 x i16> %27180, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27190 = getelementptr inbounds i16, i16* %27186, i64 -16
  %27191 = bitcast i16* %27190 to <16 x i16>*
  store <16 x i16> %27189, <16 x i16>* %27191, align 2, !tbaa !401
  br label %after_bb2205

"for blur_y.s0.x.x.rebased2220":                  ; preds = %"for blur_y.s0.x.x.rebased2220.preheader", %"consume blur_x2229"
  %indvars.iv3359 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2220.preheader" ], [ %indvars.iv.next3360, %"consume blur_x2229" ]
  %27192 = add nsw i64 %indvars.iv3359, %295
  %27193 = icmp slt i64 %27192, 1
  %27194 = trunc i64 %27192 to i32
  %27195 = shl nsw i32 %27194, 5
  %27196 = icmp sgt i32 %198, %27195
  %27197 = or i1 %27193, %27196
  br i1 %27197, label %"produce blur_x2227", label %"for blur_y.s0.x.x.rebased2220.consume blur_x2229_crit_edge"

"for blur_y.s0.x.x.rebased2220.consume blur_x2229_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2220"
  %.pre3553 = shl nsw i64 %27192, 5
  br label %"consume blur_x2229"

"end for blur_y.s0.x.x.rebased2221":              ; preds = %"consume blur_x2229", %after_bb2205
  br i1 %296, label %"for blur_y.s0.x.x.rebased2237.preheader", label %"end for blur_y.s0.x.x.rebased2238", !prof !386

"for blur_y.s0.x.x.rebased2237.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2221"
  %27198 = sext i32 %t1682886 to i64
  %27199 = zext i32 %.pre-phi3490 to i64
  %27200 = mul nsw i64 %27199, %306
  %27201 = sub nsw i64 %27200, %290
  %27202 = zext i32 %.pre-phi3484 to i64
  %27203 = mul nsw i64 %27202, %306
  %27204 = sub nsw i64 %27203, %290
  %27205 = zext i32 %.pre-phi3496 to i64
  %27206 = mul nsw i64 %27205, %306
  %27207 = sub nsw i64 %27206, %290
  %27208 = zext i32 %.pre-phi3468 to i64
  %27209 = mul nsw i64 %27208, %306
  %27210 = sub nsw i64 %27209, %290
  %27211 = zext i32 %.pre-phi3502 to i64
  %27212 = mul nsw i64 %27211, %306
  %27213 = sub nsw i64 %27212, %290
  %27214 = sext i32 %a353 to i64
  %27215 = add nsw i64 %27214, 28
  %27216 = mul nsw i64 %27215, %307
  %27217 = add nsw i64 %27216, %310
  br label %"for blur_y.s0.x.x.rebased2237"

"produce blur_x2227":                             ; preds = %"for blur_y.s0.x.x.rebased2220"
  %t11602228 = add nsw i32 %27195, %t21532217
  %27218 = sext i32 %t11602228 to i64
  %27219 = getelementptr inbounds i16, i16* %read_input822, i64 %27218
  %27220 = getelementptr inbounds i16, i16* %27219, i64 1
  %27221 = bitcast i16* %27220 to <16 x i16>*
  %27222 = load <16 x i16>, <16 x i16>* %27221, align 2, !tbaa !396
  %27223 = getelementptr inbounds i16, i16* %27219, i64 17
  %27224 = bitcast i16* %27223 to <16 x i16>*
  %27225 = load <16 x i16>, <16 x i16>* %27224, align 2, !tbaa !396
  %27226 = bitcast i16* %27219 to <16 x i16>*
  %27227 = load <16 x i16>, <16 x i16>* %27226, align 2, !tbaa !396
  %27228 = getelementptr inbounds i16, i16* %27219, i64 16
  %27229 = bitcast i16* %27228 to <16 x i16>*
  %27230 = load <16 x i16>, <16 x i16>* %27229, align 2, !tbaa !396
  %27231 = getelementptr inbounds i16, i16* %27219, i64 2
  %27232 = bitcast i16* %27231 to <16 x i16>*
  %27233 = load <16 x i16>, <16 x i16>* %27232, align 2, !tbaa !396
  %27234 = getelementptr inbounds i16, i16* %27219, i64 18
  %27235 = bitcast i16* %27234 to <16 x i16>*
  %27236 = load <16 x i16>, <16 x i16>* %27235, align 2, !tbaa !396
  %27237 = getelementptr inbounds i16, i16* %27219, i64 4
  %27238 = bitcast i16* %27237 to <16 x i16>*
  %27239 = load <16 x i16>, <16 x i16>* %27238, align 2, !tbaa !396
  %27240 = getelementptr inbounds i16, i16* %27219, i64 20
  %27241 = bitcast i16* %27240 to <16 x i16>*
  %27242 = load <16 x i16>, <16 x i16>* %27241, align 2, !tbaa !396
  %27243 = getelementptr inbounds i16, i16* %27219, i64 3
  %27244 = bitcast i16* %27243 to <16 x i16>*
  %27245 = load <16 x i16>, <16 x i16>* %27244, align 2, !tbaa !396
  %27246 = getelementptr inbounds i16, i16* %27219, i64 19
  %27247 = bitcast i16* %27246 to <16 x i16>*
  %27248 = load <16 x i16>, <16 x i16>* %27247, align 2, !tbaa !396
  %27249 = add <16 x i16> %27227, %27222
  %27250 = add <16 x i16> %27249, %27233
  %27251 = add <16 x i16> %27250, %27239
  %27252 = add <16 x i16> %27251, %27245
  %27253 = add <16 x i16> %27230, %27225
  %27254 = add <16 x i16> %27253, %27236
  %27255 = add <16 x i16> %27254, %27242
  %27256 = add <16 x i16> %27255, %27248
  %27257 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27252, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27258 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27256, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27259 = shufflevector <16 x i16> %27257, <16 x i16> %27258, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27260 = lshr <32 x i16> %27259, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27261 = shufflevector <32 x i16> %27260, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27262 = shl nsw i64 %27192, 5
  %27263 = add nsw i64 %27262, %27047
  %27264 = getelementptr inbounds i16, i16* %blur_x879, i64 %27263
  %27265 = bitcast i16* %27264 to <16 x i16>*
  store <16 x i16> %27261, <16 x i16>* %27265, align 2, !tbaa !399
  %27266 = shufflevector <32 x i16> %27260, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27267 = getelementptr inbounds i16, i16* %27264, i64 16
  %27268 = bitcast i16* %27267 to <16 x i16>*
  store <16 x i16> %27266, <16 x i16>* %27268, align 2, !tbaa !399
  br label %"consume blur_x2229"

"consume blur_x2229":                             ; preds = %"for blur_y.s0.x.x.rebased2220.consume blur_x2229_crit_edge", %"produce blur_x2227"
  %.pre-phi3554 = phi i64 [ %.pre3553, %"for blur_y.s0.x.x.rebased2220.consume blur_x2229_crit_edge" ], [ %27262, %"produce blur_x2227" ]
  %27269 = add nsw i64 %27050, %.pre-phi3554
  %27270 = getelementptr inbounds i16, i16* %blur_x879, i64 %27269
  %27271 = bitcast i16* %27270 to <16 x i16>*
  %27272 = load <16 x i16>, <16 x i16>* %27271, align 2, !tbaa !399
  %27273 = getelementptr inbounds i16, i16* %27270, i64 16
  %27274 = bitcast i16* %27273 to <16 x i16>*
  %27275 = load <16 x i16>, <16 x i16>* %27274, align 2, !tbaa !399
  %27276 = add nsw i64 %27053, %.pre-phi3554
  %27277 = getelementptr inbounds i16, i16* %blur_x879, i64 %27276
  %27278 = bitcast i16* %27277 to <16 x i16>*
  %27279 = load <16 x i16>, <16 x i16>* %27278, align 2, !tbaa !399
  %27280 = getelementptr inbounds i16, i16* %27277, i64 16
  %27281 = bitcast i16* %27280 to <16 x i16>*
  %27282 = load <16 x i16>, <16 x i16>* %27281, align 2, !tbaa !399
  %27283 = add nsw i64 %27056, %.pre-phi3554
  %27284 = getelementptr inbounds i16, i16* %blur_x879, i64 %27283
  %27285 = bitcast i16* %27284 to <16 x i16>*
  %27286 = load <16 x i16>, <16 x i16>* %27285, align 2, !tbaa !399
  %27287 = getelementptr inbounds i16, i16* %27284, i64 16
  %27288 = bitcast i16* %27287 to <16 x i16>*
  %27289 = load <16 x i16>, <16 x i16>* %27288, align 2, !tbaa !399
  %27290 = add nsw i64 %27059, %.pre-phi3554
  %27291 = getelementptr inbounds i16, i16* %blur_x879, i64 %27290
  %27292 = bitcast i16* %27291 to <16 x i16>*
  %27293 = load <16 x i16>, <16 x i16>* %27292, align 2, !tbaa !399
  %27294 = getelementptr inbounds i16, i16* %27291, i64 16
  %27295 = bitcast i16* %27294 to <16 x i16>*
  %27296 = load <16 x i16>, <16 x i16>* %27295, align 2, !tbaa !399
  %27297 = add nsw i64 %27062, %.pre-phi3554
  %27298 = getelementptr inbounds i16, i16* %blur_x879, i64 %27297
  %27299 = bitcast i16* %27298 to <16 x i16>*
  %27300 = load <16 x i16>, <16 x i16>* %27299, align 2, !tbaa !399
  %27301 = getelementptr inbounds i16, i16* %27298, i64 16
  %27302 = bitcast i16* %27301 to <16 x i16>*
  %27303 = load <16 x i16>, <16 x i16>* %27302, align 2, !tbaa !399
  %27304 = add <16 x i16> %27279, %27272
  %27305 = add <16 x i16> %27304, %27286
  %27306 = add <16 x i16> %27305, %27293
  %27307 = add <16 x i16> %27306, %27300
  %27308 = add <16 x i16> %27282, %27275
  %27309 = add <16 x i16> %27308, %27289
  %27310 = add <16 x i16> %27309, %27296
  %27311 = add <16 x i16> %27310, %27303
  %27312 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27307, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27313 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27311, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27314 = shufflevector <16 x i16> %27312, <16 x i16> %27313, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27315 = lshr <32 x i16> %27314, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27316 = shufflevector <32 x i16> %27315, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27317 = add nsw i64 %27066, %.pre-phi3554
  %27318 = getelementptr inbounds i16, i16* %260, i64 %27317
  %27319 = bitcast i16* %27318 to <16 x i16>*
  store <16 x i16> %27316, <16 x i16>* %27319, align 2, !tbaa !401
  %27320 = shufflevector <32 x i16> %27315, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27321 = getelementptr inbounds i16, i16* %27318, i64 16
  %27322 = bitcast i16* %27321 to <16 x i16>*
  store <16 x i16> %27320, <16 x i16>* %27322, align 2, !tbaa !401
  %indvars.iv.next3360 = add nuw nsw i64 %indvars.iv3359, 1
  %.not2548 = icmp eq i64 %indvars.iv.next3360, %378
  br i1 %.not2548, label %"end for blur_y.s0.x.x.rebased2221", label %"for blur_y.s0.x.x.rebased2220"

"for blur_y.s0.x.x.rebased2237":                  ; preds = %"for blur_y.s0.x.x.rebased2237.preheader", %"consume blur_x2247"
  %blur_y.s0.x.x.rebased2239 = phi i32 [ %27435, %"consume blur_x2247" ], [ 0, %"for blur_y.s0.x.x.rebased2237.preheader" ]
  %27323 = add nsw i32 %blur_y.s0.x.x.rebased2239, %t1626814
  %a628 = shl nsw i32 %27323, 5
  %27324 = icmp sgt i32 %a341, %a628
  %b634 = select i1 %27324, i32 %a628, i32 %a341
  %27325 = icmp slt i32 %27323, 1
  %27326 = icmp sgt i32 %198, %a628
  %27327 = or i1 %27325, %27326
  br i1 %27327, label %"produce blur_x2244", label %"consume blur_x2247"

"end for blur_y.s0.x.x.rebased2238":              ; preds = %"consume blur_x2247", %"end for blur_y.s0.x.x.rebased2221"
  br i1 %228, label %"produce blur_x2251", label %after_bb2248

"produce blur_x2244":                             ; preds = %"for blur_y.s0.x.x.rebased2237"
  %27328 = icmp slt i32 %b634, %198
  %blur_x.s0.x.v1.base.s2245 = select i1 %27328, i32 %b634, i32 %198
  %t11652246 = add nsw i32 %blur_x.s0.x.v1.base.s2245, %t21532217
  %27329 = sext i32 %t11652246 to i64
  %27330 = getelementptr inbounds i16, i16* %read_input822, i64 %27329
  %27331 = getelementptr inbounds i16, i16* %27330, i64 1
  %27332 = bitcast i16* %27331 to <16 x i16>*
  %27333 = load <16 x i16>, <16 x i16>* %27332, align 2, !tbaa !396
  %27334 = getelementptr inbounds i16, i16* %27330, i64 17
  %27335 = bitcast i16* %27334 to <16 x i16>*
  %27336 = load <16 x i16>, <16 x i16>* %27335, align 2, !tbaa !396
  %27337 = bitcast i16* %27330 to <16 x i16>*
  %27338 = load <16 x i16>, <16 x i16>* %27337, align 2, !tbaa !396
  %27339 = getelementptr inbounds i16, i16* %27330, i64 16
  %27340 = bitcast i16* %27339 to <16 x i16>*
  %27341 = load <16 x i16>, <16 x i16>* %27340, align 2, !tbaa !396
  %27342 = getelementptr inbounds i16, i16* %27330, i64 2
  %27343 = bitcast i16* %27342 to <16 x i16>*
  %27344 = load <16 x i16>, <16 x i16>* %27343, align 2, !tbaa !396
  %27345 = getelementptr inbounds i16, i16* %27330, i64 18
  %27346 = bitcast i16* %27345 to <16 x i16>*
  %27347 = load <16 x i16>, <16 x i16>* %27346, align 2, !tbaa !396
  %27348 = getelementptr inbounds i16, i16* %27330, i64 4
  %27349 = bitcast i16* %27348 to <16 x i16>*
  %27350 = load <16 x i16>, <16 x i16>* %27349, align 2, !tbaa !396
  %27351 = getelementptr inbounds i16, i16* %27330, i64 20
  %27352 = bitcast i16* %27351 to <16 x i16>*
  %27353 = load <16 x i16>, <16 x i16>* %27352, align 2, !tbaa !396
  %27354 = getelementptr inbounds i16, i16* %27330, i64 3
  %27355 = bitcast i16* %27354 to <16 x i16>*
  %27356 = load <16 x i16>, <16 x i16>* %27355, align 2, !tbaa !396
  %27357 = getelementptr inbounds i16, i16* %27330, i64 19
  %27358 = bitcast i16* %27357 to <16 x i16>*
  %27359 = load <16 x i16>, <16 x i16>* %27358, align 2, !tbaa !396
  %27360 = add <16 x i16> %27338, %27333
  %27361 = add <16 x i16> %27360, %27344
  %27362 = add <16 x i16> %27361, %27350
  %27363 = add <16 x i16> %27362, %27356
  %27364 = add <16 x i16> %27341, %27336
  %27365 = add <16 x i16> %27364, %27347
  %27366 = add <16 x i16> %27365, %27353
  %27367 = add <16 x i16> %27366, %27359
  %27368 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27363, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27369 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27367, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27370 = shufflevector <16 x i16> %27368, <16 x i16> %27369, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27371 = lshr <32 x i16> %27370, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27372 = shufflevector <32 x i16> %27371, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27373 = sext i32 %blur_x.s0.x.v1.base.s2245 to i64
  %27374 = add nsw i64 %27373, %27198
  %27375 = getelementptr inbounds i16, i16* %blur_x879, i64 %27374
  %27376 = bitcast i16* %27375 to <16 x i16>*
  store <16 x i16> %27372, <16 x i16>* %27376, align 2, !tbaa !399
  %27377 = shufflevector <32 x i16> %27371, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27378 = getelementptr inbounds i16, i16* %27375, i64 16
  %27379 = bitcast i16* %27378 to <16 x i16>*
  store <16 x i16> %27377, <16 x i16>* %27379, align 2, !tbaa !399
  br label %"consume blur_x2247"

"consume blur_x2247":                             ; preds = %"for blur_y.s0.x.x.rebased2237", %"produce blur_x2244"
  %27380 = sext i32 %b634 to i64
  %27381 = add nsw i64 %27201, %27380
  %27382 = getelementptr inbounds i16, i16* %blur_x879, i64 %27381
  %27383 = bitcast i16* %27382 to <16 x i16>*
  %27384 = load <16 x i16>, <16 x i16>* %27383, align 2, !tbaa !399
  %27385 = getelementptr inbounds i16, i16* %27382, i64 16
  %27386 = bitcast i16* %27385 to <16 x i16>*
  %27387 = load <16 x i16>, <16 x i16>* %27386, align 2, !tbaa !399
  %27388 = add nsw i64 %27204, %27380
  %27389 = getelementptr inbounds i16, i16* %blur_x879, i64 %27388
  %27390 = bitcast i16* %27389 to <16 x i16>*
  %27391 = load <16 x i16>, <16 x i16>* %27390, align 2, !tbaa !399
  %27392 = getelementptr inbounds i16, i16* %27389, i64 16
  %27393 = bitcast i16* %27392 to <16 x i16>*
  %27394 = load <16 x i16>, <16 x i16>* %27393, align 2, !tbaa !399
  %27395 = add nsw i64 %27207, %27380
  %27396 = getelementptr inbounds i16, i16* %blur_x879, i64 %27395
  %27397 = bitcast i16* %27396 to <16 x i16>*
  %27398 = load <16 x i16>, <16 x i16>* %27397, align 2, !tbaa !399
  %27399 = getelementptr inbounds i16, i16* %27396, i64 16
  %27400 = bitcast i16* %27399 to <16 x i16>*
  %27401 = load <16 x i16>, <16 x i16>* %27400, align 2, !tbaa !399
  %27402 = add nsw i64 %27210, %27380
  %27403 = getelementptr inbounds i16, i16* %blur_x879, i64 %27402
  %27404 = bitcast i16* %27403 to <16 x i16>*
  %27405 = load <16 x i16>, <16 x i16>* %27404, align 2, !tbaa !399
  %27406 = getelementptr inbounds i16, i16* %27403, i64 16
  %27407 = bitcast i16* %27406 to <16 x i16>*
  %27408 = load <16 x i16>, <16 x i16>* %27407, align 2, !tbaa !399
  %27409 = add nsw i64 %27213, %27380
  %27410 = getelementptr inbounds i16, i16* %blur_x879, i64 %27409
  %27411 = bitcast i16* %27410 to <16 x i16>*
  %27412 = load <16 x i16>, <16 x i16>* %27411, align 2, !tbaa !399
  %27413 = getelementptr inbounds i16, i16* %27410, i64 16
  %27414 = bitcast i16* %27413 to <16 x i16>*
  %27415 = load <16 x i16>, <16 x i16>* %27414, align 2, !tbaa !399
  %27416 = add <16 x i16> %27391, %27384
  %27417 = add <16 x i16> %27416, %27398
  %27418 = add <16 x i16> %27417, %27405
  %27419 = add <16 x i16> %27418, %27412
  %27420 = add <16 x i16> %27394, %27387
  %27421 = add <16 x i16> %27420, %27401
  %27422 = add <16 x i16> %27421, %27408
  %27423 = add <16 x i16> %27422, %27415
  %27424 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27419, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27425 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27423, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27426 = shufflevector <16 x i16> %27424, <16 x i16> %27425, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27427 = lshr <32 x i16> %27426, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27428 = shufflevector <32 x i16> %27427, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27429 = add nsw i64 %27217, %27380
  %27430 = getelementptr inbounds i16, i16* %260, i64 %27429
  %27431 = bitcast i16* %27430 to <16 x i16>*
  store <16 x i16> %27428, <16 x i16>* %27431, align 2, !tbaa !401
  %27432 = shufflevector <32 x i16> %27427, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27433 = getelementptr inbounds i16, i16* %27430, i64 16
  %27434 = bitcast i16* %27433 to <16 x i16>*
  store <16 x i16> %27432, <16 x i16>* %27434, align 2, !tbaa !401
  %27435 = add nuw nsw i32 %blur_y.s0.x.x.rebased2239, 1
  %.not2547 = icmp eq i32 %27435, %t1683899
  br i1 %.not2547, label %"end for blur_y.s0.x.x.rebased2238", label %"for blur_y.s0.x.x.rebased2237"

after_bb2248:                                     ; preds = %"end for blur_y.s0.x.x.rebased2238", %"produce blur_x2251"
  br i1 %294, label %"for blur_y.s0.x.x.rebased2263.preheader", label %"end for blur_y.s0.x.x.rebased2264", !prof !386

"for blur_y.s0.x.x.rebased2263.preheader":        ; preds = %after_bb2248
  %27436 = sext i32 %t1688916 to i64
  %27437 = zext i32 %.pre-phi3496 to i64
  %27438 = mul nsw i64 %27437, %306
  %27439 = sub nsw i64 %27438, %290
  %27440 = zext i32 %.pre-phi3490 to i64
  %27441 = mul nsw i64 %27440, %306
  %27442 = sub nsw i64 %27441, %290
  %27443 = zext i32 %.pre-phi3502 to i64
  %27444 = mul nsw i64 %27443, %306
  %27445 = sub nsw i64 %27444, %290
  %27446 = zext i32 %.pre-phi3472 to i64
  %27447 = mul nsw i64 %27446, %306
  %27448 = sub nsw i64 %27447, %290
  %27449 = zext i32 %.pre-phi3468 to i64
  %27450 = mul nsw i64 %27449, %306
  %27451 = sub nsw i64 %27450, %290
  %27452 = sext i32 %a353 to i64
  %27453 = add nsw i64 %27452, 29
  %27454 = mul nsw i64 %27453, %307
  %27455 = add nsw i64 %27454, %310
  br label %"for blur_y.s0.x.x.rebased2263"

"produce blur_x2251":                             ; preds = %"end for blur_y.s0.x.x.rebased2238"
  %27456 = getelementptr inbounds i16, i16* %read_input822, i64 %367
  %27457 = getelementptr inbounds i16, i16* %27456, i64 -31
  %27458 = bitcast i16* %27457 to <16 x i16>*
  %27459 = load <16 x i16>, <16 x i16>* %27458, align 2, !tbaa !396
  %27460 = getelementptr inbounds i16, i16* %27456, i64 -15
  %27461 = bitcast i16* %27460 to <16 x i16>*
  %27462 = load <16 x i16>, <16 x i16>* %27461, align 2, !tbaa !396
  %27463 = getelementptr inbounds i16, i16* %27456, i64 -32
  %27464 = bitcast i16* %27463 to <16 x i16>*
  %27465 = load <16 x i16>, <16 x i16>* %27464, align 2, !tbaa !396
  %27466 = getelementptr inbounds i16, i16* %27456, i64 -16
  %27467 = bitcast i16* %27466 to <16 x i16>*
  %27468 = load <16 x i16>, <16 x i16>* %27467, align 2, !tbaa !396
  %27469 = getelementptr inbounds i16, i16* %27456, i64 -30
  %27470 = bitcast i16* %27469 to <16 x i16>*
  %27471 = load <16 x i16>, <16 x i16>* %27470, align 2, !tbaa !396
  %27472 = getelementptr inbounds i16, i16* %27456, i64 -14
  %27473 = bitcast i16* %27472 to <16 x i16>*
  %27474 = load <16 x i16>, <16 x i16>* %27473, align 2, !tbaa !396
  %27475 = getelementptr inbounds i16, i16* %27456, i64 -28
  %27476 = bitcast i16* %27475 to <16 x i16>*
  %27477 = load <16 x i16>, <16 x i16>* %27476, align 2, !tbaa !396
  %27478 = getelementptr inbounds i16, i16* %27456, i64 -12
  %27479 = bitcast i16* %27478 to <16 x i16>*
  %27480 = load <16 x i16>, <16 x i16>* %27479, align 2, !tbaa !396
  %27481 = getelementptr inbounds i16, i16* %27456, i64 -29
  %27482 = bitcast i16* %27481 to <16 x i16>*
  %27483 = load <16 x i16>, <16 x i16>* %27482, align 2, !tbaa !396
  %27484 = getelementptr inbounds i16, i16* %27456, i64 -13
  %27485 = bitcast i16* %27484 to <16 x i16>*
  %27486 = load <16 x i16>, <16 x i16>* %27485, align 2, !tbaa !396
  %27487 = add <16 x i16> %27465, %27459
  %27488 = add <16 x i16> %27487, %27471
  %27489 = add <16 x i16> %27488, %27477
  %27490 = add <16 x i16> %27489, %27483
  %27491 = add <16 x i16> %27468, %27462
  %27492 = add <16 x i16> %27491, %27474
  %27493 = add <16 x i16> %27492, %27480
  %27494 = add <16 x i16> %27493, %27486
  %27495 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27490, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27496 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27494, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27497 = shufflevector <16 x i16> %27495, <16 x i16> %27496, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27498 = lshr <32 x i16> %27497, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27499 = shufflevector <32 x i16> %27498, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27500 = zext i32 %.pre-phi3472 to i64
  %27501 = mul nsw i64 %291, %27500
  %27502 = add nsw i64 %293, %27501
  %27503 = getelementptr inbounds i16, i16* %blur_x879, i64 %27502
  %27504 = getelementptr inbounds i16, i16* %27503, i64 -32
  %27505 = bitcast i16* %27504 to <16 x i16>*
  store <16 x i16> %27499, <16 x i16>* %27505, align 2, !tbaa !399
  %27506 = shufflevector <32 x i16> %27498, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27507 = getelementptr inbounds i16, i16* %27503, i64 -16
  %27508 = bitcast i16* %27507 to <16 x i16>*
  store <16 x i16> %27506, <16 x i16>* %27508, align 2, !tbaa !399
  %27509 = zext i32 %.pre-phi3496 to i64
  %27510 = mul nsw i64 %27509, %306
  %27511 = add nsw i64 %27510, %288
  %27512 = getelementptr inbounds i16, i16* %blur_x879, i64 %27511
  %27513 = getelementptr inbounds i16, i16* %27512, i64 -32
  %27514 = bitcast i16* %27513 to <16 x i16>*
  %27515 = load <16 x i16>, <16 x i16>* %27514, align 2, !tbaa !399
  %27516 = getelementptr inbounds i16, i16* %27512, i64 -16
  %27517 = bitcast i16* %27516 to <16 x i16>*
  %27518 = load <16 x i16>, <16 x i16>* %27517, align 2, !tbaa !399
  %27519 = zext i32 %.pre-phi3490 to i64
  %27520 = mul nsw i64 %27519, %306
  %27521 = add nsw i64 %27520, %288
  %27522 = getelementptr inbounds i16, i16* %blur_x879, i64 %27521
  %27523 = getelementptr inbounds i16, i16* %27522, i64 -32
  %27524 = bitcast i16* %27523 to <16 x i16>*
  %27525 = load <16 x i16>, <16 x i16>* %27524, align 2, !tbaa !399
  %27526 = getelementptr inbounds i16, i16* %27522, i64 -16
  %27527 = bitcast i16* %27526 to <16 x i16>*
  %27528 = load <16 x i16>, <16 x i16>* %27527, align 2, !tbaa !399
  %27529 = zext i32 %.pre-phi3502 to i64
  %27530 = mul nsw i64 %27529, %306
  %27531 = add nsw i64 %27530, %288
  %27532 = getelementptr inbounds i16, i16* %blur_x879, i64 %27531
  %27533 = getelementptr inbounds i16, i16* %27532, i64 -32
  %27534 = bitcast i16* %27533 to <16 x i16>*
  %27535 = load <16 x i16>, <16 x i16>* %27534, align 2, !tbaa !399
  %27536 = getelementptr inbounds i16, i16* %27532, i64 -16
  %27537 = bitcast i16* %27536 to <16 x i16>*
  %27538 = load <16 x i16>, <16 x i16>* %27537, align 2, !tbaa !399
  %27539 = mul nsw i64 %27500, %306
  %27540 = add nsw i64 %27539, %288
  %27541 = getelementptr inbounds i16, i16* %blur_x879, i64 %27540
  %27542 = getelementptr inbounds i16, i16* %27541, i64 -32
  %27543 = bitcast i16* %27542 to <16 x i16>*
  %27544 = load <16 x i16>, <16 x i16>* %27543, align 2, !tbaa !399
  %27545 = getelementptr inbounds i16, i16* %27541, i64 -16
  %27546 = bitcast i16* %27545 to <16 x i16>*
  %27547 = load <16 x i16>, <16 x i16>* %27546, align 2, !tbaa !399
  %27548 = zext i32 %.pre-phi3468 to i64
  %27549 = mul nsw i64 %27548, %306
  %27550 = add nsw i64 %27549, %288
  %27551 = getelementptr inbounds i16, i16* %blur_x879, i64 %27550
  %27552 = getelementptr inbounds i16, i16* %27551, i64 -32
  %27553 = bitcast i16* %27552 to <16 x i16>*
  %27554 = load <16 x i16>, <16 x i16>* %27553, align 2, !tbaa !399
  %27555 = getelementptr inbounds i16, i16* %27551, i64 -16
  %27556 = bitcast i16* %27555 to <16 x i16>*
  %27557 = load <16 x i16>, <16 x i16>* %27556, align 2, !tbaa !399
  %27558 = add <16 x i16> %27525, %27515
  %27559 = add <16 x i16> %27558, %27535
  %27560 = add <16 x i16> %27559, %27544
  %27561 = add <16 x i16> %27560, %27554
  %27562 = add <16 x i16> %27528, %27518
  %27563 = add <16 x i16> %27562, %27538
  %27564 = add <16 x i16> %27563, %27547
  %27565 = add <16 x i16> %27564, %27557
  %27566 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27561, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27567 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27565, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27568 = shufflevector <16 x i16> %27566, <16 x i16> %27567, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27569 = lshr <32 x i16> %27568, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27570 = shufflevector <32 x i16> %27569, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27571 = sext i32 %a353 to i64
  %27572 = add nsw i64 %27571, 29
  %27573 = mul nsw i64 %27572, %307
  %27574 = add nsw i64 %309, %27573
  %27575 = getelementptr inbounds i16, i16* %260, i64 %27574
  %27576 = getelementptr inbounds i16, i16* %27575, i64 -32
  %27577 = bitcast i16* %27576 to <16 x i16>*
  store <16 x i16> %27570, <16 x i16>* %27577, align 2, !tbaa !401
  %27578 = shufflevector <32 x i16> %27569, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27579 = getelementptr inbounds i16, i16* %27575, i64 -16
  %27580 = bitcast i16* %27579 to <16 x i16>*
  store <16 x i16> %27578, <16 x i16>* %27580, align 2, !tbaa !401
  br label %after_bb2248

"for blur_y.s0.x.x.rebased2263":                  ; preds = %"for blur_y.s0.x.x.rebased2263.preheader", %"consume blur_x2272"
  %indvars.iv3362 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2263.preheader" ], [ %indvars.iv.next3363, %"consume blur_x2272" ]
  %27581 = add nsw i64 %indvars.iv3362, %295
  %27582 = icmp slt i64 %27581, 1
  %27583 = trunc i64 %27581 to i32
  %27584 = shl nsw i32 %27583, 5
  %27585 = icmp sgt i32 %198, %27584
  %27586 = or i1 %27582, %27585
  br i1 %27586, label %"produce blur_x2270", label %"for blur_y.s0.x.x.rebased2263.consume blur_x2272_crit_edge"

"for blur_y.s0.x.x.rebased2263.consume blur_x2272_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2263"
  %.pre3555 = shl nsw i64 %27581, 5
  br label %"consume blur_x2272"

"end for blur_y.s0.x.x.rebased2264":              ; preds = %"consume blur_x2272", %after_bb2248
  br i1 %296, label %"for blur_y.s0.x.x.rebased2280.preheader", label %"end for blur_y.s0.x.x.rebased2281", !prof !386

"for blur_y.s0.x.x.rebased2280.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2264"
  %27587 = sext i32 %t1688916 to i64
  %27588 = zext i32 %.pre-phi3496 to i64
  %27589 = mul nsw i64 %27588, %306
  %27590 = sub nsw i64 %27589, %290
  %27591 = zext i32 %.pre-phi3490 to i64
  %27592 = mul nsw i64 %27591, %306
  %27593 = sub nsw i64 %27592, %290
  %27594 = zext i32 %.pre-phi3502 to i64
  %27595 = mul nsw i64 %27594, %306
  %27596 = sub nsw i64 %27595, %290
  %27597 = zext i32 %.pre-phi3472 to i64
  %27598 = mul nsw i64 %27597, %306
  %27599 = sub nsw i64 %27598, %290
  %27600 = zext i32 %.pre-phi3468 to i64
  %27601 = mul nsw i64 %27600, %306
  %27602 = sub nsw i64 %27601, %290
  %27603 = sext i32 %a353 to i64
  %27604 = add nsw i64 %27603, 29
  %27605 = mul nsw i64 %27604, %307
  %27606 = add nsw i64 %27605, %310
  br label %"for blur_y.s0.x.x.rebased2280"

"produce blur_x2270":                             ; preds = %"for blur_y.s0.x.x.rebased2263"
  %t11762271 = add nsw i32 %27584, %t21692260
  %27607 = sext i32 %t11762271 to i64
  %27608 = getelementptr inbounds i16, i16* %read_input822, i64 %27607
  %27609 = getelementptr inbounds i16, i16* %27608, i64 1
  %27610 = bitcast i16* %27609 to <16 x i16>*
  %27611 = load <16 x i16>, <16 x i16>* %27610, align 2, !tbaa !396
  %27612 = getelementptr inbounds i16, i16* %27608, i64 17
  %27613 = bitcast i16* %27612 to <16 x i16>*
  %27614 = load <16 x i16>, <16 x i16>* %27613, align 2, !tbaa !396
  %27615 = bitcast i16* %27608 to <16 x i16>*
  %27616 = load <16 x i16>, <16 x i16>* %27615, align 2, !tbaa !396
  %27617 = getelementptr inbounds i16, i16* %27608, i64 16
  %27618 = bitcast i16* %27617 to <16 x i16>*
  %27619 = load <16 x i16>, <16 x i16>* %27618, align 2, !tbaa !396
  %27620 = getelementptr inbounds i16, i16* %27608, i64 2
  %27621 = bitcast i16* %27620 to <16 x i16>*
  %27622 = load <16 x i16>, <16 x i16>* %27621, align 2, !tbaa !396
  %27623 = getelementptr inbounds i16, i16* %27608, i64 18
  %27624 = bitcast i16* %27623 to <16 x i16>*
  %27625 = load <16 x i16>, <16 x i16>* %27624, align 2, !tbaa !396
  %27626 = getelementptr inbounds i16, i16* %27608, i64 4
  %27627 = bitcast i16* %27626 to <16 x i16>*
  %27628 = load <16 x i16>, <16 x i16>* %27627, align 2, !tbaa !396
  %27629 = getelementptr inbounds i16, i16* %27608, i64 20
  %27630 = bitcast i16* %27629 to <16 x i16>*
  %27631 = load <16 x i16>, <16 x i16>* %27630, align 2, !tbaa !396
  %27632 = getelementptr inbounds i16, i16* %27608, i64 3
  %27633 = bitcast i16* %27632 to <16 x i16>*
  %27634 = load <16 x i16>, <16 x i16>* %27633, align 2, !tbaa !396
  %27635 = getelementptr inbounds i16, i16* %27608, i64 19
  %27636 = bitcast i16* %27635 to <16 x i16>*
  %27637 = load <16 x i16>, <16 x i16>* %27636, align 2, !tbaa !396
  %27638 = add <16 x i16> %27616, %27611
  %27639 = add <16 x i16> %27638, %27622
  %27640 = add <16 x i16> %27639, %27628
  %27641 = add <16 x i16> %27640, %27634
  %27642 = add <16 x i16> %27619, %27614
  %27643 = add <16 x i16> %27642, %27625
  %27644 = add <16 x i16> %27643, %27631
  %27645 = add <16 x i16> %27644, %27637
  %27646 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27641, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27647 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27645, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27648 = shufflevector <16 x i16> %27646, <16 x i16> %27647, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27649 = lshr <32 x i16> %27648, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27650 = shufflevector <32 x i16> %27649, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27651 = shl nsw i64 %27581, 5
  %27652 = add nsw i64 %27651, %27436
  %27653 = getelementptr inbounds i16, i16* %blur_x879, i64 %27652
  %27654 = bitcast i16* %27653 to <16 x i16>*
  store <16 x i16> %27650, <16 x i16>* %27654, align 2, !tbaa !399
  %27655 = shufflevector <32 x i16> %27649, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27656 = getelementptr inbounds i16, i16* %27653, i64 16
  %27657 = bitcast i16* %27656 to <16 x i16>*
  store <16 x i16> %27655, <16 x i16>* %27657, align 2, !tbaa !399
  br label %"consume blur_x2272"

"consume blur_x2272":                             ; preds = %"for blur_y.s0.x.x.rebased2263.consume blur_x2272_crit_edge", %"produce blur_x2270"
  %.pre-phi3556 = phi i64 [ %.pre3555, %"for blur_y.s0.x.x.rebased2263.consume blur_x2272_crit_edge" ], [ %27651, %"produce blur_x2270" ]
  %27658 = add nsw i64 %27439, %.pre-phi3556
  %27659 = getelementptr inbounds i16, i16* %blur_x879, i64 %27658
  %27660 = bitcast i16* %27659 to <16 x i16>*
  %27661 = load <16 x i16>, <16 x i16>* %27660, align 2, !tbaa !399
  %27662 = getelementptr inbounds i16, i16* %27659, i64 16
  %27663 = bitcast i16* %27662 to <16 x i16>*
  %27664 = load <16 x i16>, <16 x i16>* %27663, align 2, !tbaa !399
  %27665 = add nsw i64 %27442, %.pre-phi3556
  %27666 = getelementptr inbounds i16, i16* %blur_x879, i64 %27665
  %27667 = bitcast i16* %27666 to <16 x i16>*
  %27668 = load <16 x i16>, <16 x i16>* %27667, align 2, !tbaa !399
  %27669 = getelementptr inbounds i16, i16* %27666, i64 16
  %27670 = bitcast i16* %27669 to <16 x i16>*
  %27671 = load <16 x i16>, <16 x i16>* %27670, align 2, !tbaa !399
  %27672 = add nsw i64 %27445, %.pre-phi3556
  %27673 = getelementptr inbounds i16, i16* %blur_x879, i64 %27672
  %27674 = bitcast i16* %27673 to <16 x i16>*
  %27675 = load <16 x i16>, <16 x i16>* %27674, align 2, !tbaa !399
  %27676 = getelementptr inbounds i16, i16* %27673, i64 16
  %27677 = bitcast i16* %27676 to <16 x i16>*
  %27678 = load <16 x i16>, <16 x i16>* %27677, align 2, !tbaa !399
  %27679 = add nsw i64 %27448, %.pre-phi3556
  %27680 = getelementptr inbounds i16, i16* %blur_x879, i64 %27679
  %27681 = bitcast i16* %27680 to <16 x i16>*
  %27682 = load <16 x i16>, <16 x i16>* %27681, align 2, !tbaa !399
  %27683 = getelementptr inbounds i16, i16* %27680, i64 16
  %27684 = bitcast i16* %27683 to <16 x i16>*
  %27685 = load <16 x i16>, <16 x i16>* %27684, align 2, !tbaa !399
  %27686 = add nsw i64 %27451, %.pre-phi3556
  %27687 = getelementptr inbounds i16, i16* %blur_x879, i64 %27686
  %27688 = bitcast i16* %27687 to <16 x i16>*
  %27689 = load <16 x i16>, <16 x i16>* %27688, align 2, !tbaa !399
  %27690 = getelementptr inbounds i16, i16* %27687, i64 16
  %27691 = bitcast i16* %27690 to <16 x i16>*
  %27692 = load <16 x i16>, <16 x i16>* %27691, align 2, !tbaa !399
  %27693 = add <16 x i16> %27668, %27661
  %27694 = add <16 x i16> %27693, %27675
  %27695 = add <16 x i16> %27694, %27682
  %27696 = add <16 x i16> %27695, %27689
  %27697 = add <16 x i16> %27671, %27664
  %27698 = add <16 x i16> %27697, %27678
  %27699 = add <16 x i16> %27698, %27685
  %27700 = add <16 x i16> %27699, %27692
  %27701 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27696, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27702 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27700, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27703 = shufflevector <16 x i16> %27701, <16 x i16> %27702, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27704 = lshr <32 x i16> %27703, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27705 = shufflevector <32 x i16> %27704, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27706 = add nsw i64 %27455, %.pre-phi3556
  %27707 = getelementptr inbounds i16, i16* %260, i64 %27706
  %27708 = bitcast i16* %27707 to <16 x i16>*
  store <16 x i16> %27705, <16 x i16>* %27708, align 2, !tbaa !401
  %27709 = shufflevector <32 x i16> %27704, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27710 = getelementptr inbounds i16, i16* %27707, i64 16
  %27711 = bitcast i16* %27710 to <16 x i16>*
  store <16 x i16> %27709, <16 x i16>* %27711, align 2, !tbaa !401
  %indvars.iv.next3363 = add nuw nsw i64 %indvars.iv3362, 1
  %.not2546 = icmp eq i64 %indvars.iv.next3363, %378
  br i1 %.not2546, label %"end for blur_y.s0.x.x.rebased2264", label %"for blur_y.s0.x.x.rebased2263"

"for blur_y.s0.x.x.rebased2280":                  ; preds = %"for blur_y.s0.x.x.rebased2280.preheader", %"consume blur_x2290"
  %blur_y.s0.x.x.rebased2282 = phi i32 [ %27824, %"consume blur_x2290" ], [ 0, %"for blur_y.s0.x.x.rebased2280.preheader" ]
  %27712 = add nsw i32 %blur_y.s0.x.x.rebased2282, %t1626814
  %a635 = shl nsw i32 %27712, 5
  %27713 = icmp sgt i32 %a341, %a635
  %b641 = select i1 %27713, i32 %a635, i32 %a341
  %27714 = icmp slt i32 %27712, 1
  %27715 = icmp sgt i32 %198, %a635
  %27716 = or i1 %27714, %27715
  br i1 %27716, label %"produce blur_x2287", label %"consume blur_x2290"

"end for blur_y.s0.x.x.rebased2281":              ; preds = %"consume blur_x2290", %"end for blur_y.s0.x.x.rebased2264"
  br i1 %228, label %"produce blur_x2294", label %after_bb2291

"produce blur_x2287":                             ; preds = %"for blur_y.s0.x.x.rebased2280"
  %27717 = icmp slt i32 %b641, %198
  %blur_x.s0.x.v1.base.s2288 = select i1 %27717, i32 %b641, i32 %198
  %t11812289 = add nsw i32 %blur_x.s0.x.v1.base.s2288, %t21692260
  %27718 = sext i32 %t11812289 to i64
  %27719 = getelementptr inbounds i16, i16* %read_input822, i64 %27718
  %27720 = getelementptr inbounds i16, i16* %27719, i64 1
  %27721 = bitcast i16* %27720 to <16 x i16>*
  %27722 = load <16 x i16>, <16 x i16>* %27721, align 2, !tbaa !396
  %27723 = getelementptr inbounds i16, i16* %27719, i64 17
  %27724 = bitcast i16* %27723 to <16 x i16>*
  %27725 = load <16 x i16>, <16 x i16>* %27724, align 2, !tbaa !396
  %27726 = bitcast i16* %27719 to <16 x i16>*
  %27727 = load <16 x i16>, <16 x i16>* %27726, align 2, !tbaa !396
  %27728 = getelementptr inbounds i16, i16* %27719, i64 16
  %27729 = bitcast i16* %27728 to <16 x i16>*
  %27730 = load <16 x i16>, <16 x i16>* %27729, align 2, !tbaa !396
  %27731 = getelementptr inbounds i16, i16* %27719, i64 2
  %27732 = bitcast i16* %27731 to <16 x i16>*
  %27733 = load <16 x i16>, <16 x i16>* %27732, align 2, !tbaa !396
  %27734 = getelementptr inbounds i16, i16* %27719, i64 18
  %27735 = bitcast i16* %27734 to <16 x i16>*
  %27736 = load <16 x i16>, <16 x i16>* %27735, align 2, !tbaa !396
  %27737 = getelementptr inbounds i16, i16* %27719, i64 4
  %27738 = bitcast i16* %27737 to <16 x i16>*
  %27739 = load <16 x i16>, <16 x i16>* %27738, align 2, !tbaa !396
  %27740 = getelementptr inbounds i16, i16* %27719, i64 20
  %27741 = bitcast i16* %27740 to <16 x i16>*
  %27742 = load <16 x i16>, <16 x i16>* %27741, align 2, !tbaa !396
  %27743 = getelementptr inbounds i16, i16* %27719, i64 3
  %27744 = bitcast i16* %27743 to <16 x i16>*
  %27745 = load <16 x i16>, <16 x i16>* %27744, align 2, !tbaa !396
  %27746 = getelementptr inbounds i16, i16* %27719, i64 19
  %27747 = bitcast i16* %27746 to <16 x i16>*
  %27748 = load <16 x i16>, <16 x i16>* %27747, align 2, !tbaa !396
  %27749 = add <16 x i16> %27727, %27722
  %27750 = add <16 x i16> %27749, %27733
  %27751 = add <16 x i16> %27750, %27739
  %27752 = add <16 x i16> %27751, %27745
  %27753 = add <16 x i16> %27730, %27725
  %27754 = add <16 x i16> %27753, %27736
  %27755 = add <16 x i16> %27754, %27742
  %27756 = add <16 x i16> %27755, %27748
  %27757 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27752, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27758 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27756, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27759 = shufflevector <16 x i16> %27757, <16 x i16> %27758, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27760 = lshr <32 x i16> %27759, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27761 = shufflevector <32 x i16> %27760, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27762 = sext i32 %blur_x.s0.x.v1.base.s2288 to i64
  %27763 = add nsw i64 %27762, %27587
  %27764 = getelementptr inbounds i16, i16* %blur_x879, i64 %27763
  %27765 = bitcast i16* %27764 to <16 x i16>*
  store <16 x i16> %27761, <16 x i16>* %27765, align 2, !tbaa !399
  %27766 = shufflevector <32 x i16> %27760, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27767 = getelementptr inbounds i16, i16* %27764, i64 16
  %27768 = bitcast i16* %27767 to <16 x i16>*
  store <16 x i16> %27766, <16 x i16>* %27768, align 2, !tbaa !399
  br label %"consume blur_x2290"

"consume blur_x2290":                             ; preds = %"for blur_y.s0.x.x.rebased2280", %"produce blur_x2287"
  %27769 = sext i32 %b641 to i64
  %27770 = add nsw i64 %27590, %27769
  %27771 = getelementptr inbounds i16, i16* %blur_x879, i64 %27770
  %27772 = bitcast i16* %27771 to <16 x i16>*
  %27773 = load <16 x i16>, <16 x i16>* %27772, align 2, !tbaa !399
  %27774 = getelementptr inbounds i16, i16* %27771, i64 16
  %27775 = bitcast i16* %27774 to <16 x i16>*
  %27776 = load <16 x i16>, <16 x i16>* %27775, align 2, !tbaa !399
  %27777 = add nsw i64 %27593, %27769
  %27778 = getelementptr inbounds i16, i16* %blur_x879, i64 %27777
  %27779 = bitcast i16* %27778 to <16 x i16>*
  %27780 = load <16 x i16>, <16 x i16>* %27779, align 2, !tbaa !399
  %27781 = getelementptr inbounds i16, i16* %27778, i64 16
  %27782 = bitcast i16* %27781 to <16 x i16>*
  %27783 = load <16 x i16>, <16 x i16>* %27782, align 2, !tbaa !399
  %27784 = add nsw i64 %27596, %27769
  %27785 = getelementptr inbounds i16, i16* %blur_x879, i64 %27784
  %27786 = bitcast i16* %27785 to <16 x i16>*
  %27787 = load <16 x i16>, <16 x i16>* %27786, align 2, !tbaa !399
  %27788 = getelementptr inbounds i16, i16* %27785, i64 16
  %27789 = bitcast i16* %27788 to <16 x i16>*
  %27790 = load <16 x i16>, <16 x i16>* %27789, align 2, !tbaa !399
  %27791 = add nsw i64 %27599, %27769
  %27792 = getelementptr inbounds i16, i16* %blur_x879, i64 %27791
  %27793 = bitcast i16* %27792 to <16 x i16>*
  %27794 = load <16 x i16>, <16 x i16>* %27793, align 2, !tbaa !399
  %27795 = getelementptr inbounds i16, i16* %27792, i64 16
  %27796 = bitcast i16* %27795 to <16 x i16>*
  %27797 = load <16 x i16>, <16 x i16>* %27796, align 2, !tbaa !399
  %27798 = add nsw i64 %27602, %27769
  %27799 = getelementptr inbounds i16, i16* %blur_x879, i64 %27798
  %27800 = bitcast i16* %27799 to <16 x i16>*
  %27801 = load <16 x i16>, <16 x i16>* %27800, align 2, !tbaa !399
  %27802 = getelementptr inbounds i16, i16* %27799, i64 16
  %27803 = bitcast i16* %27802 to <16 x i16>*
  %27804 = load <16 x i16>, <16 x i16>* %27803, align 2, !tbaa !399
  %27805 = add <16 x i16> %27780, %27773
  %27806 = add <16 x i16> %27805, %27787
  %27807 = add <16 x i16> %27806, %27794
  %27808 = add <16 x i16> %27807, %27801
  %27809 = add <16 x i16> %27783, %27776
  %27810 = add <16 x i16> %27809, %27790
  %27811 = add <16 x i16> %27810, %27797
  %27812 = add <16 x i16> %27811, %27804
  %27813 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27808, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27814 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27812, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27815 = shufflevector <16 x i16> %27813, <16 x i16> %27814, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27816 = lshr <32 x i16> %27815, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27817 = shufflevector <32 x i16> %27816, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27818 = add nsw i64 %27606, %27769
  %27819 = getelementptr inbounds i16, i16* %260, i64 %27818
  %27820 = bitcast i16* %27819 to <16 x i16>*
  store <16 x i16> %27817, <16 x i16>* %27820, align 2, !tbaa !401
  %27821 = shufflevector <32 x i16> %27816, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27822 = getelementptr inbounds i16, i16* %27819, i64 16
  %27823 = bitcast i16* %27822 to <16 x i16>*
  store <16 x i16> %27821, <16 x i16>* %27823, align 2, !tbaa !401
  %27824 = add nuw nsw i32 %blur_y.s0.x.x.rebased2282, 1
  %.not2545 = icmp eq i32 %27824, %t1683899
  br i1 %.not2545, label %"end for blur_y.s0.x.x.rebased2281", label %"for blur_y.s0.x.x.rebased2280"

after_bb2291:                                     ; preds = %"end for blur_y.s0.x.x.rebased2281", %"produce blur_x2294"
  br i1 %294, label %"for blur_y.s0.x.x.rebased2306.preheader", label %"end for blur_y.s0.x.x.rebased2307", !prof !386

"for blur_y.s0.x.x.rebased2306.preheader":        ; preds = %after_bb2291
  %27825 = sext i32 %t1694946 to i64
  %27826 = zext i32 %.pre-phi3502 to i64
  %27827 = mul nsw i64 %27826, %306
  %27828 = sub nsw i64 %27827, %290
  %27829 = zext i32 %.pre-phi3496 to i64
  %27830 = mul nsw i64 %27829, %306
  %27831 = sub nsw i64 %27830, %290
  %27832 = zext i32 %.pre-phi3468 to i64
  %27833 = mul nsw i64 %27832, %306
  %27834 = sub nsw i64 %27833, %290
  %27835 = zext i32 %.pre-phi3476 to i64
  %27836 = mul nsw i64 %27835, %306
  %27837 = sub nsw i64 %27836, %290
  %27838 = zext i32 %.pre-phi3472 to i64
  %27839 = mul nsw i64 %27838, %306
  %27840 = sub nsw i64 %27839, %290
  %27841 = sext i32 %a353 to i64
  %27842 = add nsw i64 %27841, 30
  %27843 = mul nsw i64 %27842, %307
  %27844 = add nsw i64 %27843, %310
  br label %"for blur_y.s0.x.x.rebased2306"

"produce blur_x2294":                             ; preds = %"end for blur_y.s0.x.x.rebased2281"
  %27845 = getelementptr inbounds i16, i16* %read_input822, i64 %369
  %27846 = getelementptr inbounds i16, i16* %27845, i64 -31
  %27847 = bitcast i16* %27846 to <16 x i16>*
  %27848 = load <16 x i16>, <16 x i16>* %27847, align 2, !tbaa !396
  %27849 = getelementptr inbounds i16, i16* %27845, i64 -15
  %27850 = bitcast i16* %27849 to <16 x i16>*
  %27851 = load <16 x i16>, <16 x i16>* %27850, align 2, !tbaa !396
  %27852 = getelementptr inbounds i16, i16* %27845, i64 -32
  %27853 = bitcast i16* %27852 to <16 x i16>*
  %27854 = load <16 x i16>, <16 x i16>* %27853, align 2, !tbaa !396
  %27855 = getelementptr inbounds i16, i16* %27845, i64 -16
  %27856 = bitcast i16* %27855 to <16 x i16>*
  %27857 = load <16 x i16>, <16 x i16>* %27856, align 2, !tbaa !396
  %27858 = getelementptr inbounds i16, i16* %27845, i64 -30
  %27859 = bitcast i16* %27858 to <16 x i16>*
  %27860 = load <16 x i16>, <16 x i16>* %27859, align 2, !tbaa !396
  %27861 = getelementptr inbounds i16, i16* %27845, i64 -14
  %27862 = bitcast i16* %27861 to <16 x i16>*
  %27863 = load <16 x i16>, <16 x i16>* %27862, align 2, !tbaa !396
  %27864 = getelementptr inbounds i16, i16* %27845, i64 -28
  %27865 = bitcast i16* %27864 to <16 x i16>*
  %27866 = load <16 x i16>, <16 x i16>* %27865, align 2, !tbaa !396
  %27867 = getelementptr inbounds i16, i16* %27845, i64 -12
  %27868 = bitcast i16* %27867 to <16 x i16>*
  %27869 = load <16 x i16>, <16 x i16>* %27868, align 2, !tbaa !396
  %27870 = getelementptr inbounds i16, i16* %27845, i64 -29
  %27871 = bitcast i16* %27870 to <16 x i16>*
  %27872 = load <16 x i16>, <16 x i16>* %27871, align 2, !tbaa !396
  %27873 = getelementptr inbounds i16, i16* %27845, i64 -13
  %27874 = bitcast i16* %27873 to <16 x i16>*
  %27875 = load <16 x i16>, <16 x i16>* %27874, align 2, !tbaa !396
  %27876 = add <16 x i16> %27854, %27848
  %27877 = add <16 x i16> %27876, %27860
  %27878 = add <16 x i16> %27877, %27866
  %27879 = add <16 x i16> %27878, %27872
  %27880 = add <16 x i16> %27857, %27851
  %27881 = add <16 x i16> %27880, %27863
  %27882 = add <16 x i16> %27881, %27869
  %27883 = add <16 x i16> %27882, %27875
  %27884 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27879, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27885 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27883, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27886 = shufflevector <16 x i16> %27884, <16 x i16> %27885, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27887 = lshr <32 x i16> %27886, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27888 = shufflevector <32 x i16> %27887, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27889 = zext i32 %.pre-phi3476 to i64
  %27890 = mul nsw i64 %291, %27889
  %27891 = add nsw i64 %293, %27890
  %27892 = getelementptr inbounds i16, i16* %blur_x879, i64 %27891
  %27893 = getelementptr inbounds i16, i16* %27892, i64 -32
  %27894 = bitcast i16* %27893 to <16 x i16>*
  store <16 x i16> %27888, <16 x i16>* %27894, align 2, !tbaa !399
  %27895 = shufflevector <32 x i16> %27887, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27896 = getelementptr inbounds i16, i16* %27892, i64 -16
  %27897 = bitcast i16* %27896 to <16 x i16>*
  store <16 x i16> %27895, <16 x i16>* %27897, align 2, !tbaa !399
  %27898 = zext i32 %.pre-phi3502 to i64
  %27899 = mul nsw i64 %27898, %306
  %27900 = add nsw i64 %27899, %288
  %27901 = getelementptr inbounds i16, i16* %blur_x879, i64 %27900
  %27902 = getelementptr inbounds i16, i16* %27901, i64 -32
  %27903 = bitcast i16* %27902 to <16 x i16>*
  %27904 = load <16 x i16>, <16 x i16>* %27903, align 2, !tbaa !399
  %27905 = getelementptr inbounds i16, i16* %27901, i64 -16
  %27906 = bitcast i16* %27905 to <16 x i16>*
  %27907 = load <16 x i16>, <16 x i16>* %27906, align 2, !tbaa !399
  %27908 = zext i32 %.pre-phi3496 to i64
  %27909 = mul nsw i64 %27908, %306
  %27910 = add nsw i64 %27909, %288
  %27911 = getelementptr inbounds i16, i16* %blur_x879, i64 %27910
  %27912 = getelementptr inbounds i16, i16* %27911, i64 -32
  %27913 = bitcast i16* %27912 to <16 x i16>*
  %27914 = load <16 x i16>, <16 x i16>* %27913, align 2, !tbaa !399
  %27915 = getelementptr inbounds i16, i16* %27911, i64 -16
  %27916 = bitcast i16* %27915 to <16 x i16>*
  %27917 = load <16 x i16>, <16 x i16>* %27916, align 2, !tbaa !399
  %27918 = zext i32 %.pre-phi3468 to i64
  %27919 = mul nsw i64 %27918, %306
  %27920 = add nsw i64 %27919, %288
  %27921 = getelementptr inbounds i16, i16* %blur_x879, i64 %27920
  %27922 = getelementptr inbounds i16, i16* %27921, i64 -32
  %27923 = bitcast i16* %27922 to <16 x i16>*
  %27924 = load <16 x i16>, <16 x i16>* %27923, align 2, !tbaa !399
  %27925 = getelementptr inbounds i16, i16* %27921, i64 -16
  %27926 = bitcast i16* %27925 to <16 x i16>*
  %27927 = load <16 x i16>, <16 x i16>* %27926, align 2, !tbaa !399
  %27928 = mul nsw i64 %27889, %306
  %27929 = add nsw i64 %27928, %288
  %27930 = getelementptr inbounds i16, i16* %blur_x879, i64 %27929
  %27931 = getelementptr inbounds i16, i16* %27930, i64 -32
  %27932 = bitcast i16* %27931 to <16 x i16>*
  %27933 = load <16 x i16>, <16 x i16>* %27932, align 2, !tbaa !399
  %27934 = getelementptr inbounds i16, i16* %27930, i64 -16
  %27935 = bitcast i16* %27934 to <16 x i16>*
  %27936 = load <16 x i16>, <16 x i16>* %27935, align 2, !tbaa !399
  %27937 = zext i32 %.pre-phi3472 to i64
  %27938 = mul nsw i64 %27937, %306
  %27939 = add nsw i64 %27938, %288
  %27940 = getelementptr inbounds i16, i16* %blur_x879, i64 %27939
  %27941 = getelementptr inbounds i16, i16* %27940, i64 -32
  %27942 = bitcast i16* %27941 to <16 x i16>*
  %27943 = load <16 x i16>, <16 x i16>* %27942, align 2, !tbaa !399
  %27944 = getelementptr inbounds i16, i16* %27940, i64 -16
  %27945 = bitcast i16* %27944 to <16 x i16>*
  %27946 = load <16 x i16>, <16 x i16>* %27945, align 2, !tbaa !399
  %27947 = add <16 x i16> %27914, %27904
  %27948 = add <16 x i16> %27947, %27924
  %27949 = add <16 x i16> %27948, %27933
  %27950 = add <16 x i16> %27949, %27943
  %27951 = add <16 x i16> %27917, %27907
  %27952 = add <16 x i16> %27951, %27927
  %27953 = add <16 x i16> %27952, %27936
  %27954 = add <16 x i16> %27953, %27946
  %27955 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27950, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27956 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %27954, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %27957 = shufflevector <16 x i16> %27955, <16 x i16> %27956, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27958 = lshr <32 x i16> %27957, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %27959 = shufflevector <32 x i16> %27958, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %27960 = sext i32 %a353 to i64
  %27961 = add nsw i64 %27960, 30
  %27962 = mul nsw i64 %27961, %307
  %27963 = add nsw i64 %309, %27962
  %27964 = getelementptr inbounds i16, i16* %260, i64 %27963
  %27965 = getelementptr inbounds i16, i16* %27964, i64 -32
  %27966 = bitcast i16* %27965 to <16 x i16>*
  store <16 x i16> %27959, <16 x i16>* %27966, align 2, !tbaa !401
  %27967 = shufflevector <32 x i16> %27958, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %27968 = getelementptr inbounds i16, i16* %27964, i64 -16
  %27969 = bitcast i16* %27968 to <16 x i16>*
  store <16 x i16> %27967, <16 x i16>* %27969, align 2, !tbaa !401
  br label %after_bb2291

"for blur_y.s0.x.x.rebased2306":                  ; preds = %"for blur_y.s0.x.x.rebased2306.preheader", %"consume blur_x2315"
  %indvars.iv3365 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2306.preheader" ], [ %indvars.iv.next3366, %"consume blur_x2315" ]
  %27970 = add nsw i64 %indvars.iv3365, %295
  %27971 = icmp slt i64 %27970, 1
  %27972 = trunc i64 %27970 to i32
  %27973 = shl nsw i32 %27972, 5
  %27974 = icmp sgt i32 %198, %27973
  %27975 = or i1 %27971, %27974
  br i1 %27975, label %"produce blur_x2313", label %"for blur_y.s0.x.x.rebased2306.consume blur_x2315_crit_edge"

"for blur_y.s0.x.x.rebased2306.consume blur_x2315_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2306"
  %.pre3557 = shl nsw i64 %27970, 5
  br label %"consume blur_x2315"

"end for blur_y.s0.x.x.rebased2307":              ; preds = %"consume blur_x2315", %after_bb2291
  br i1 %296, label %"for blur_y.s0.x.x.rebased2323.preheader", label %"end for blur_y.s0.x.x.rebased2324", !prof !386

"for blur_y.s0.x.x.rebased2323.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2307"
  %27976 = sext i32 %t1694946 to i64
  %27977 = zext i32 %.pre-phi3502 to i64
  %27978 = mul nsw i64 %27977, %306
  %27979 = sub nsw i64 %27978, %290
  %27980 = zext i32 %.pre-phi3496 to i64
  %27981 = mul nsw i64 %27980, %306
  %27982 = sub nsw i64 %27981, %290
  %27983 = zext i32 %.pre-phi3468 to i64
  %27984 = mul nsw i64 %27983, %306
  %27985 = sub nsw i64 %27984, %290
  %27986 = zext i32 %.pre-phi3476 to i64
  %27987 = mul nsw i64 %27986, %306
  %27988 = sub nsw i64 %27987, %290
  %27989 = zext i32 %.pre-phi3472 to i64
  %27990 = mul nsw i64 %27989, %306
  %27991 = sub nsw i64 %27990, %290
  %27992 = sext i32 %a353 to i64
  %27993 = add nsw i64 %27992, 30
  %27994 = mul nsw i64 %27993, %307
  %27995 = add nsw i64 %27994, %310
  br label %"for blur_y.s0.x.x.rebased2323"

"produce blur_x2313":                             ; preds = %"for blur_y.s0.x.x.rebased2306"
  %t11922314 = add nsw i32 %27973, %t21852303
  %27996 = sext i32 %t11922314 to i64
  %27997 = getelementptr inbounds i16, i16* %read_input822, i64 %27996
  %27998 = getelementptr inbounds i16, i16* %27997, i64 1
  %27999 = bitcast i16* %27998 to <16 x i16>*
  %28000 = load <16 x i16>, <16 x i16>* %27999, align 2, !tbaa !396
  %28001 = getelementptr inbounds i16, i16* %27997, i64 17
  %28002 = bitcast i16* %28001 to <16 x i16>*
  %28003 = load <16 x i16>, <16 x i16>* %28002, align 2, !tbaa !396
  %28004 = bitcast i16* %27997 to <16 x i16>*
  %28005 = load <16 x i16>, <16 x i16>* %28004, align 2, !tbaa !396
  %28006 = getelementptr inbounds i16, i16* %27997, i64 16
  %28007 = bitcast i16* %28006 to <16 x i16>*
  %28008 = load <16 x i16>, <16 x i16>* %28007, align 2, !tbaa !396
  %28009 = getelementptr inbounds i16, i16* %27997, i64 2
  %28010 = bitcast i16* %28009 to <16 x i16>*
  %28011 = load <16 x i16>, <16 x i16>* %28010, align 2, !tbaa !396
  %28012 = getelementptr inbounds i16, i16* %27997, i64 18
  %28013 = bitcast i16* %28012 to <16 x i16>*
  %28014 = load <16 x i16>, <16 x i16>* %28013, align 2, !tbaa !396
  %28015 = getelementptr inbounds i16, i16* %27997, i64 4
  %28016 = bitcast i16* %28015 to <16 x i16>*
  %28017 = load <16 x i16>, <16 x i16>* %28016, align 2, !tbaa !396
  %28018 = getelementptr inbounds i16, i16* %27997, i64 20
  %28019 = bitcast i16* %28018 to <16 x i16>*
  %28020 = load <16 x i16>, <16 x i16>* %28019, align 2, !tbaa !396
  %28021 = getelementptr inbounds i16, i16* %27997, i64 3
  %28022 = bitcast i16* %28021 to <16 x i16>*
  %28023 = load <16 x i16>, <16 x i16>* %28022, align 2, !tbaa !396
  %28024 = getelementptr inbounds i16, i16* %27997, i64 19
  %28025 = bitcast i16* %28024 to <16 x i16>*
  %28026 = load <16 x i16>, <16 x i16>* %28025, align 2, !tbaa !396
  %28027 = add <16 x i16> %28005, %28000
  %28028 = add <16 x i16> %28027, %28011
  %28029 = add <16 x i16> %28028, %28017
  %28030 = add <16 x i16> %28029, %28023
  %28031 = add <16 x i16> %28008, %28003
  %28032 = add <16 x i16> %28031, %28014
  %28033 = add <16 x i16> %28032, %28020
  %28034 = add <16 x i16> %28033, %28026
  %28035 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28030, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %28036 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28034, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %28037 = shufflevector <16 x i16> %28035, <16 x i16> %28036, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28038 = lshr <32 x i16> %28037, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28039 = shufflevector <32 x i16> %28038, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28040 = shl nsw i64 %27970, 5
  %28041 = add nsw i64 %28040, %27825
  %28042 = getelementptr inbounds i16, i16* %blur_x879, i64 %28041
  %28043 = bitcast i16* %28042 to <16 x i16>*
  store <16 x i16> %28039, <16 x i16>* %28043, align 2, !tbaa !399
  %28044 = shufflevector <32 x i16> %28038, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28045 = getelementptr inbounds i16, i16* %28042, i64 16
  %28046 = bitcast i16* %28045 to <16 x i16>*
  store <16 x i16> %28044, <16 x i16>* %28046, align 2, !tbaa !399
  br label %"consume blur_x2315"

"consume blur_x2315":                             ; preds = %"for blur_y.s0.x.x.rebased2306.consume blur_x2315_crit_edge", %"produce blur_x2313"
  %.pre-phi3558 = phi i64 [ %.pre3557, %"for blur_y.s0.x.x.rebased2306.consume blur_x2315_crit_edge" ], [ %28040, %"produce blur_x2313" ]
  %28047 = add nsw i64 %27828, %.pre-phi3558
  %28048 = getelementptr inbounds i16, i16* %blur_x879, i64 %28047
  %28049 = bitcast i16* %28048 to <16 x i16>*
  %28050 = load <16 x i16>, <16 x i16>* %28049, align 2, !tbaa !399
  %28051 = getelementptr inbounds i16, i16* %28048, i64 16
  %28052 = bitcast i16* %28051 to <16 x i16>*
  %28053 = load <16 x i16>, <16 x i16>* %28052, align 2, !tbaa !399
  %28054 = add nsw i64 %27831, %.pre-phi3558
  %28055 = getelementptr inbounds i16, i16* %blur_x879, i64 %28054
  %28056 = bitcast i16* %28055 to <16 x i16>*
  %28057 = load <16 x i16>, <16 x i16>* %28056, align 2, !tbaa !399
  %28058 = getelementptr inbounds i16, i16* %28055, i64 16
  %28059 = bitcast i16* %28058 to <16 x i16>*
  %28060 = load <16 x i16>, <16 x i16>* %28059, align 2, !tbaa !399
  %28061 = add nsw i64 %27834, %.pre-phi3558
  %28062 = getelementptr inbounds i16, i16* %blur_x879, i64 %28061
  %28063 = bitcast i16* %28062 to <16 x i16>*
  %28064 = load <16 x i16>, <16 x i16>* %28063, align 2, !tbaa !399
  %28065 = getelementptr inbounds i16, i16* %28062, i64 16
  %28066 = bitcast i16* %28065 to <16 x i16>*
  %28067 = load <16 x i16>, <16 x i16>* %28066, align 2, !tbaa !399
  %28068 = add nsw i64 %27837, %.pre-phi3558
  %28069 = getelementptr inbounds i16, i16* %blur_x879, i64 %28068
  %28070 = bitcast i16* %28069 to <16 x i16>*
  %28071 = load <16 x i16>, <16 x i16>* %28070, align 2, !tbaa !399
  %28072 = getelementptr inbounds i16, i16* %28069, i64 16
  %28073 = bitcast i16* %28072 to <16 x i16>*
  %28074 = load <16 x i16>, <16 x i16>* %28073, align 2, !tbaa !399
  %28075 = add nsw i64 %27840, %.pre-phi3558
  %28076 = getelementptr inbounds i16, i16* %blur_x879, i64 %28075
  %28077 = bitcast i16* %28076 to <16 x i16>*
  %28078 = load <16 x i16>, <16 x i16>* %28077, align 2, !tbaa !399
  %28079 = getelementptr inbounds i16, i16* %28076, i64 16
  %28080 = bitcast i16* %28079 to <16 x i16>*
  %28081 = load <16 x i16>, <16 x i16>* %28080, align 2, !tbaa !399
  %28082 = add <16 x i16> %28057, %28050
  %28083 = add <16 x i16> %28082, %28064
  %28084 = add <16 x i16> %28083, %28071
  %28085 = add <16 x i16> %28084, %28078
  %28086 = add <16 x i16> %28060, %28053
  %28087 = add <16 x i16> %28086, %28067
  %28088 = add <16 x i16> %28087, %28074
  %28089 = add <16 x i16> %28088, %28081
  %28090 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28085, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %28091 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28089, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %28092 = shufflevector <16 x i16> %28090, <16 x i16> %28091, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28093 = lshr <32 x i16> %28092, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28094 = shufflevector <32 x i16> %28093, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28095 = add nsw i64 %27844, %.pre-phi3558
  %28096 = getelementptr inbounds i16, i16* %260, i64 %28095
  %28097 = bitcast i16* %28096 to <16 x i16>*
  store <16 x i16> %28094, <16 x i16>* %28097, align 2, !tbaa !401
  %28098 = shufflevector <32 x i16> %28093, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28099 = getelementptr inbounds i16, i16* %28096, i64 16
  %28100 = bitcast i16* %28099 to <16 x i16>*
  store <16 x i16> %28098, <16 x i16>* %28100, align 2, !tbaa !401
  %indvars.iv.next3366 = add nuw nsw i64 %indvars.iv3365, 1
  %.not2544 = icmp eq i64 %indvars.iv.next3366, %378
  br i1 %.not2544, label %"end for blur_y.s0.x.x.rebased2307", label %"for blur_y.s0.x.x.rebased2306"

"for blur_y.s0.x.x.rebased2323":                  ; preds = %"for blur_y.s0.x.x.rebased2323.preheader", %"consume blur_x2333"
  %blur_y.s0.x.x.rebased2325 = phi i32 [ %28213, %"consume blur_x2333" ], [ 0, %"for blur_y.s0.x.x.rebased2323.preheader" ]
  %28101 = add nsw i32 %blur_y.s0.x.x.rebased2325, %t1626814
  %a642 = shl nsw i32 %28101, 5
  %28102 = icmp sgt i32 %a341, %a642
  %b648 = select i1 %28102, i32 %a642, i32 %a341
  %28103 = icmp slt i32 %28101, 1
  %28104 = icmp sgt i32 %198, %a642
  %28105 = or i1 %28103, %28104
  br i1 %28105, label %"produce blur_x2330", label %"consume blur_x2333"

"end for blur_y.s0.x.x.rebased2324":              ; preds = %"consume blur_x2333", %"end for blur_y.s0.x.x.rebased2307"
  br i1 %228, label %"produce blur_x2337", label %after_bb2334

"produce blur_x2330":                             ; preds = %"for blur_y.s0.x.x.rebased2323"
  %28106 = icmp slt i32 %b648, %198
  %blur_x.s0.x.v1.base.s2331 = select i1 %28106, i32 %b648, i32 %198
  %t11972332 = add nsw i32 %blur_x.s0.x.v1.base.s2331, %t21852303
  %28107 = sext i32 %t11972332 to i64
  %28108 = getelementptr inbounds i16, i16* %read_input822, i64 %28107
  %28109 = getelementptr inbounds i16, i16* %28108, i64 1
  %28110 = bitcast i16* %28109 to <16 x i16>*
  %28111 = load <16 x i16>, <16 x i16>* %28110, align 2, !tbaa !396
  %28112 = getelementptr inbounds i16, i16* %28108, i64 17
  %28113 = bitcast i16* %28112 to <16 x i16>*
  %28114 = load <16 x i16>, <16 x i16>* %28113, align 2, !tbaa !396
  %28115 = bitcast i16* %28108 to <16 x i16>*
  %28116 = load <16 x i16>, <16 x i16>* %28115, align 2, !tbaa !396
  %28117 = getelementptr inbounds i16, i16* %28108, i64 16
  %28118 = bitcast i16* %28117 to <16 x i16>*
  %28119 = load <16 x i16>, <16 x i16>* %28118, align 2, !tbaa !396
  %28120 = getelementptr inbounds i16, i16* %28108, i64 2
  %28121 = bitcast i16* %28120 to <16 x i16>*
  %28122 = load <16 x i16>, <16 x i16>* %28121, align 2, !tbaa !396
  %28123 = getelementptr inbounds i16, i16* %28108, i64 18
  %28124 = bitcast i16* %28123 to <16 x i16>*
  %28125 = load <16 x i16>, <16 x i16>* %28124, align 2, !tbaa !396
  %28126 = getelementptr inbounds i16, i16* %28108, i64 4
  %28127 = bitcast i16* %28126 to <16 x i16>*
  %28128 = load <16 x i16>, <16 x i16>* %28127, align 2, !tbaa !396
  %28129 = getelementptr inbounds i16, i16* %28108, i64 20
  %28130 = bitcast i16* %28129 to <16 x i16>*
  %28131 = load <16 x i16>, <16 x i16>* %28130, align 2, !tbaa !396
  %28132 = getelementptr inbounds i16, i16* %28108, i64 3
  %28133 = bitcast i16* %28132 to <16 x i16>*
  %28134 = load <16 x i16>, <16 x i16>* %28133, align 2, !tbaa !396
  %28135 = getelementptr inbounds i16, i16* %28108, i64 19
  %28136 = bitcast i16* %28135 to <16 x i16>*
  %28137 = load <16 x i16>, <16 x i16>* %28136, align 2, !tbaa !396
  %28138 = add <16 x i16> %28116, %28111
  %28139 = add <16 x i16> %28138, %28122
  %28140 = add <16 x i16> %28139, %28128
  %28141 = add <16 x i16> %28140, %28134
  %28142 = add <16 x i16> %28119, %28114
  %28143 = add <16 x i16> %28142, %28125
  %28144 = add <16 x i16> %28143, %28131
  %28145 = add <16 x i16> %28144, %28137
  %28146 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28141, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %28147 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28145, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %28148 = shufflevector <16 x i16> %28146, <16 x i16> %28147, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28149 = lshr <32 x i16> %28148, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28150 = shufflevector <32 x i16> %28149, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28151 = sext i32 %blur_x.s0.x.v1.base.s2331 to i64
  %28152 = add nsw i64 %28151, %27976
  %28153 = getelementptr inbounds i16, i16* %blur_x879, i64 %28152
  %28154 = bitcast i16* %28153 to <16 x i16>*
  store <16 x i16> %28150, <16 x i16>* %28154, align 2, !tbaa !399
  %28155 = shufflevector <32 x i16> %28149, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28156 = getelementptr inbounds i16, i16* %28153, i64 16
  %28157 = bitcast i16* %28156 to <16 x i16>*
  store <16 x i16> %28155, <16 x i16>* %28157, align 2, !tbaa !399
  br label %"consume blur_x2333"

"consume blur_x2333":                             ; preds = %"for blur_y.s0.x.x.rebased2323", %"produce blur_x2330"
  %28158 = sext i32 %b648 to i64
  %28159 = add nsw i64 %27979, %28158
  %28160 = getelementptr inbounds i16, i16* %blur_x879, i64 %28159
  %28161 = bitcast i16* %28160 to <16 x i16>*
  %28162 = load <16 x i16>, <16 x i16>* %28161, align 2, !tbaa !399
  %28163 = getelementptr inbounds i16, i16* %28160, i64 16
  %28164 = bitcast i16* %28163 to <16 x i16>*
  %28165 = load <16 x i16>, <16 x i16>* %28164, align 2, !tbaa !399
  %28166 = add nsw i64 %27982, %28158
  %28167 = getelementptr inbounds i16, i16* %blur_x879, i64 %28166
  %28168 = bitcast i16* %28167 to <16 x i16>*
  %28169 = load <16 x i16>, <16 x i16>* %28168, align 2, !tbaa !399
  %28170 = getelementptr inbounds i16, i16* %28167, i64 16
  %28171 = bitcast i16* %28170 to <16 x i16>*
  %28172 = load <16 x i16>, <16 x i16>* %28171, align 2, !tbaa !399
  %28173 = add nsw i64 %27985, %28158
  %28174 = getelementptr inbounds i16, i16* %blur_x879, i64 %28173
  %28175 = bitcast i16* %28174 to <16 x i16>*
  %28176 = load <16 x i16>, <16 x i16>* %28175, align 2, !tbaa !399
  %28177 = getelementptr inbounds i16, i16* %28174, i64 16
  %28178 = bitcast i16* %28177 to <16 x i16>*
  %28179 = load <16 x i16>, <16 x i16>* %28178, align 2, !tbaa !399
  %28180 = add nsw i64 %27988, %28158
  %28181 = getelementptr inbounds i16, i16* %blur_x879, i64 %28180
  %28182 = bitcast i16* %28181 to <16 x i16>*
  %28183 = load <16 x i16>, <16 x i16>* %28182, align 2, !tbaa !399
  %28184 = getelementptr inbounds i16, i16* %28181, i64 16
  %28185 = bitcast i16* %28184 to <16 x i16>*
  %28186 = load <16 x i16>, <16 x i16>* %28185, align 2, !tbaa !399
  %28187 = add nsw i64 %27991, %28158
  %28188 = getelementptr inbounds i16, i16* %blur_x879, i64 %28187
  %28189 = bitcast i16* %28188 to <16 x i16>*
  %28190 = load <16 x i16>, <16 x i16>* %28189, align 2, !tbaa !399
  %28191 = getelementptr inbounds i16, i16* %28188, i64 16
  %28192 = bitcast i16* %28191 to <16 x i16>*
  %28193 = load <16 x i16>, <16 x i16>* %28192, align 2, !tbaa !399
  %28194 = add <16 x i16> %28169, %28162
  %28195 = add <16 x i16> %28194, %28176
  %28196 = add <16 x i16> %28195, %28183
  %28197 = add <16 x i16> %28196, %28190
  %28198 = add <16 x i16> %28172, %28165
  %28199 = add <16 x i16> %28198, %28179
  %28200 = add <16 x i16> %28199, %28186
  %28201 = add <16 x i16> %28200, %28193
  %28202 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28197, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %28203 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28201, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %28204 = shufflevector <16 x i16> %28202, <16 x i16> %28203, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28205 = lshr <32 x i16> %28204, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28206 = shufflevector <32 x i16> %28205, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28207 = add nsw i64 %27995, %28158
  %28208 = getelementptr inbounds i16, i16* %260, i64 %28207
  %28209 = bitcast i16* %28208 to <16 x i16>*
  store <16 x i16> %28206, <16 x i16>* %28209, align 2, !tbaa !401
  %28210 = shufflevector <32 x i16> %28205, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28211 = getelementptr inbounds i16, i16* %28208, i64 16
  %28212 = bitcast i16* %28211 to <16 x i16>*
  store <16 x i16> %28210, <16 x i16>* %28212, align 2, !tbaa !401
  %28213 = add nuw nsw i32 %blur_y.s0.x.x.rebased2325, 1
  %.not2543 = icmp eq i32 %28213, %t1683899
  br i1 %.not2543, label %"end for blur_y.s0.x.x.rebased2324", label %"for blur_y.s0.x.x.rebased2323"

after_bb2334:                                     ; preds = %"end for blur_y.s0.x.x.rebased2324", %"produce blur_x2337"
  br i1 %294, label %"for blur_y.s0.x.x.rebased2349.preheader", label %"end for blur_y.s0.x.x.rebased2350", !prof !386

"for blur_y.s0.x.x.rebased2349.preheader":        ; preds = %after_bb2334
  %28214 = sext i32 %t1700976 to i64
  %28215 = zext i32 %.pre-phi3468 to i64
  %28216 = mul nsw i64 %28215, %306
  %28217 = sub nsw i64 %28216, %290
  %28218 = zext i32 %.pre-phi3502 to i64
  %28219 = mul nsw i64 %28218, %306
  %28220 = sub nsw i64 %28219, %290
  %28221 = zext i32 %.pre-phi3472 to i64
  %28222 = mul nsw i64 %28221, %306
  %28223 = sub nsw i64 %28222, %290
  %28224 = zext i32 %.pre-phi3480 to i64
  %28225 = mul nsw i64 %28224, %306
  %28226 = sub nsw i64 %28225, %290
  %28227 = zext i32 %.pre-phi3476 to i64
  %28228 = mul nsw i64 %28227, %306
  %28229 = sub nsw i64 %28228, %290
  %28230 = sext i32 %a353 to i64
  %28231 = add nsw i64 %28230, 31
  %28232 = mul nsw i64 %28231, %307
  %28233 = add nsw i64 %28232, %310
  br label %"for blur_y.s0.x.x.rebased2349"

"produce blur_x2337":                             ; preds = %"end for blur_y.s0.x.x.rebased2324"
  %28234 = getelementptr inbounds i16, i16* %read_input822, i64 %371
  %28235 = getelementptr inbounds i16, i16* %28234, i64 -31
  %28236 = bitcast i16* %28235 to <16 x i16>*
  %28237 = load <16 x i16>, <16 x i16>* %28236, align 2, !tbaa !396
  %28238 = getelementptr inbounds i16, i16* %28234, i64 -15
  %28239 = bitcast i16* %28238 to <16 x i16>*
  %28240 = load <16 x i16>, <16 x i16>* %28239, align 2, !tbaa !396
  %28241 = getelementptr inbounds i16, i16* %28234, i64 -32
  %28242 = bitcast i16* %28241 to <16 x i16>*
  %28243 = load <16 x i16>, <16 x i16>* %28242, align 2, !tbaa !396
  %28244 = getelementptr inbounds i16, i16* %28234, i64 -16
  %28245 = bitcast i16* %28244 to <16 x i16>*
  %28246 = load <16 x i16>, <16 x i16>* %28245, align 2, !tbaa !396
  %28247 = getelementptr inbounds i16, i16* %28234, i64 -30
  %28248 = bitcast i16* %28247 to <16 x i16>*
  %28249 = load <16 x i16>, <16 x i16>* %28248, align 2, !tbaa !396
  %28250 = getelementptr inbounds i16, i16* %28234, i64 -14
  %28251 = bitcast i16* %28250 to <16 x i16>*
  %28252 = load <16 x i16>, <16 x i16>* %28251, align 2, !tbaa !396
  %28253 = getelementptr inbounds i16, i16* %28234, i64 -28
  %28254 = bitcast i16* %28253 to <16 x i16>*
  %28255 = load <16 x i16>, <16 x i16>* %28254, align 2, !tbaa !396
  %28256 = getelementptr inbounds i16, i16* %28234, i64 -12
  %28257 = bitcast i16* %28256 to <16 x i16>*
  %28258 = load <16 x i16>, <16 x i16>* %28257, align 2, !tbaa !396
  %28259 = getelementptr inbounds i16, i16* %28234, i64 -29
  %28260 = bitcast i16* %28259 to <16 x i16>*
  %28261 = load <16 x i16>, <16 x i16>* %28260, align 2, !tbaa !396
  %28262 = getelementptr inbounds i16, i16* %28234, i64 -13
  %28263 = bitcast i16* %28262 to <16 x i16>*
  %28264 = load <16 x i16>, <16 x i16>* %28263, align 2, !tbaa !396
  %28265 = add <16 x i16> %28243, %28237
  %28266 = add <16 x i16> %28265, %28249
  %28267 = add <16 x i16> %28266, %28255
  %28268 = add <16 x i16> %28267, %28261
  %28269 = add <16 x i16> %28246, %28240
  %28270 = add <16 x i16> %28269, %28252
  %28271 = add <16 x i16> %28270, %28258
  %28272 = add <16 x i16> %28271, %28264
  %28273 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28268, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %28274 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28272, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %28275 = shufflevector <16 x i16> %28273, <16 x i16> %28274, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28276 = lshr <32 x i16> %28275, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28277 = shufflevector <32 x i16> %28276, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28278 = zext i32 %.pre-phi3480 to i64
  %28279 = mul nsw i64 %291, %28278
  %28280 = add nsw i64 %293, %28279
  %28281 = getelementptr inbounds i16, i16* %blur_x879, i64 %28280
  %28282 = getelementptr inbounds i16, i16* %28281, i64 -32
  %28283 = bitcast i16* %28282 to <16 x i16>*
  store <16 x i16> %28277, <16 x i16>* %28283, align 2, !tbaa !399
  %28284 = shufflevector <32 x i16> %28276, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28285 = getelementptr inbounds i16, i16* %28281, i64 -16
  %28286 = bitcast i16* %28285 to <16 x i16>*
  store <16 x i16> %28284, <16 x i16>* %28286, align 2, !tbaa !399
  %28287 = zext i32 %.pre-phi3468 to i64
  %28288 = mul nsw i64 %28287, %306
  %28289 = add nsw i64 %28288, %288
  %28290 = getelementptr inbounds i16, i16* %blur_x879, i64 %28289
  %28291 = getelementptr inbounds i16, i16* %28290, i64 -32
  %28292 = bitcast i16* %28291 to <16 x i16>*
  %28293 = load <16 x i16>, <16 x i16>* %28292, align 2, !tbaa !399
  %28294 = getelementptr inbounds i16, i16* %28290, i64 -16
  %28295 = bitcast i16* %28294 to <16 x i16>*
  %28296 = load <16 x i16>, <16 x i16>* %28295, align 2, !tbaa !399
  %28297 = zext i32 %.pre-phi3502 to i64
  %28298 = mul nsw i64 %28297, %306
  %28299 = add nsw i64 %28298, %288
  %28300 = getelementptr inbounds i16, i16* %blur_x879, i64 %28299
  %28301 = getelementptr inbounds i16, i16* %28300, i64 -32
  %28302 = bitcast i16* %28301 to <16 x i16>*
  %28303 = load <16 x i16>, <16 x i16>* %28302, align 2, !tbaa !399
  %28304 = getelementptr inbounds i16, i16* %28300, i64 -16
  %28305 = bitcast i16* %28304 to <16 x i16>*
  %28306 = load <16 x i16>, <16 x i16>* %28305, align 2, !tbaa !399
  %28307 = zext i32 %.pre-phi3472 to i64
  %28308 = mul nsw i64 %28307, %306
  %28309 = add nsw i64 %28308, %288
  %28310 = getelementptr inbounds i16, i16* %blur_x879, i64 %28309
  %28311 = getelementptr inbounds i16, i16* %28310, i64 -32
  %28312 = bitcast i16* %28311 to <16 x i16>*
  %28313 = load <16 x i16>, <16 x i16>* %28312, align 2, !tbaa !399
  %28314 = getelementptr inbounds i16, i16* %28310, i64 -16
  %28315 = bitcast i16* %28314 to <16 x i16>*
  %28316 = load <16 x i16>, <16 x i16>* %28315, align 2, !tbaa !399
  %28317 = mul nsw i64 %28278, %306
  %28318 = add nsw i64 %28317, %288
  %28319 = getelementptr inbounds i16, i16* %blur_x879, i64 %28318
  %28320 = getelementptr inbounds i16, i16* %28319, i64 -32
  %28321 = bitcast i16* %28320 to <16 x i16>*
  %28322 = load <16 x i16>, <16 x i16>* %28321, align 2, !tbaa !399
  %28323 = getelementptr inbounds i16, i16* %28319, i64 -16
  %28324 = bitcast i16* %28323 to <16 x i16>*
  %28325 = load <16 x i16>, <16 x i16>* %28324, align 2, !tbaa !399
  %28326 = zext i32 %.pre-phi3476 to i64
  %28327 = mul nsw i64 %28326, %306
  %28328 = add nsw i64 %28327, %288
  %28329 = getelementptr inbounds i16, i16* %blur_x879, i64 %28328
  %28330 = getelementptr inbounds i16, i16* %28329, i64 -32
  %28331 = bitcast i16* %28330 to <16 x i16>*
  %28332 = load <16 x i16>, <16 x i16>* %28331, align 2, !tbaa !399
  %28333 = getelementptr inbounds i16, i16* %28329, i64 -16
  %28334 = bitcast i16* %28333 to <16 x i16>*
  %28335 = load <16 x i16>, <16 x i16>* %28334, align 2, !tbaa !399
  %28336 = add <16 x i16> %28303, %28293
  %28337 = add <16 x i16> %28336, %28313
  %28338 = add <16 x i16> %28337, %28322
  %28339 = add <16 x i16> %28338, %28332
  %28340 = add <16 x i16> %28306, %28296
  %28341 = add <16 x i16> %28340, %28316
  %28342 = add <16 x i16> %28341, %28325
  %28343 = add <16 x i16> %28342, %28335
  %28344 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28339, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %28345 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28343, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %28346 = shufflevector <16 x i16> %28344, <16 x i16> %28345, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28347 = lshr <32 x i16> %28346, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28348 = shufflevector <32 x i16> %28347, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28349 = sext i32 %a353 to i64
  %28350 = add nsw i64 %28349, 31
  %28351 = mul nsw i64 %28350, %307
  %28352 = add nsw i64 %309, %28351
  %28353 = getelementptr inbounds i16, i16* %260, i64 %28352
  %28354 = getelementptr inbounds i16, i16* %28353, i64 -32
  %28355 = bitcast i16* %28354 to <16 x i16>*
  store <16 x i16> %28348, <16 x i16>* %28355, align 2, !tbaa !401
  %28356 = shufflevector <32 x i16> %28347, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28357 = getelementptr inbounds i16, i16* %28353, i64 -16
  %28358 = bitcast i16* %28357 to <16 x i16>*
  store <16 x i16> %28356, <16 x i16>* %28358, align 2, !tbaa !401
  br label %after_bb2334

"for blur_y.s0.x.x.rebased2349":                  ; preds = %"for blur_y.s0.x.x.rebased2349.preheader", %"consume blur_x2358"
  %indvars.iv3368 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2349.preheader" ], [ %indvars.iv.next3369, %"consume blur_x2358" ]
  %28359 = add nsw i64 %indvars.iv3368, %295
  %28360 = icmp slt i64 %28359, 1
  %28361 = trunc i64 %28359 to i32
  %28362 = shl nsw i32 %28361, 5
  %28363 = icmp sgt i32 %198, %28362
  %28364 = or i1 %28360, %28363
  br i1 %28364, label %"produce blur_x2356", label %"for blur_y.s0.x.x.rebased2349.consume blur_x2358_crit_edge"

"for blur_y.s0.x.x.rebased2349.consume blur_x2358_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2349"
  %.pre3559 = shl nsw i64 %28359, 5
  br label %"consume blur_x2358"

"end for blur_y.s0.x.x.rebased2350":              ; preds = %"consume blur_x2358", %after_bb2334
  br i1 %296, label %"for blur_y.s0.x.x.rebased2366.preheader", label %"end for blur_y.s0.x.x.rebased2367", !prof !386

"for blur_y.s0.x.x.rebased2366.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2350"
  %28365 = sext i32 %t1700976 to i64
  %28366 = zext i32 %.pre-phi3468 to i64
  %28367 = mul nsw i64 %28366, %306
  %28368 = sub nsw i64 %28367, %290
  %28369 = zext i32 %.pre-phi3502 to i64
  %28370 = mul nsw i64 %28369, %306
  %28371 = sub nsw i64 %28370, %290
  %28372 = zext i32 %.pre-phi3472 to i64
  %28373 = mul nsw i64 %28372, %306
  %28374 = sub nsw i64 %28373, %290
  %28375 = zext i32 %.pre-phi3480 to i64
  %28376 = mul nsw i64 %28375, %306
  %28377 = sub nsw i64 %28376, %290
  %28378 = zext i32 %.pre-phi3476 to i64
  %28379 = mul nsw i64 %28378, %306
  %28380 = sub nsw i64 %28379, %290
  %28381 = sext i32 %a353 to i64
  %28382 = add nsw i64 %28381, 31
  %28383 = mul nsw i64 %28382, %307
  %28384 = add nsw i64 %28383, %310
  br label %"for blur_y.s0.x.x.rebased2366"

"produce blur_x2356":                             ; preds = %"for blur_y.s0.x.x.rebased2349"
  %t12082357 = add nsw i32 %28362, %t22012346
  %28385 = sext i32 %t12082357 to i64
  %28386 = getelementptr inbounds i16, i16* %read_input822, i64 %28385
  %28387 = getelementptr inbounds i16, i16* %28386, i64 1
  %28388 = bitcast i16* %28387 to <16 x i16>*
  %28389 = load <16 x i16>, <16 x i16>* %28388, align 2, !tbaa !396
  %28390 = getelementptr inbounds i16, i16* %28386, i64 17
  %28391 = bitcast i16* %28390 to <16 x i16>*
  %28392 = load <16 x i16>, <16 x i16>* %28391, align 2, !tbaa !396
  %28393 = bitcast i16* %28386 to <16 x i16>*
  %28394 = load <16 x i16>, <16 x i16>* %28393, align 2, !tbaa !396
  %28395 = getelementptr inbounds i16, i16* %28386, i64 16
  %28396 = bitcast i16* %28395 to <16 x i16>*
  %28397 = load <16 x i16>, <16 x i16>* %28396, align 2, !tbaa !396
  %28398 = getelementptr inbounds i16, i16* %28386, i64 2
  %28399 = bitcast i16* %28398 to <16 x i16>*
  %28400 = load <16 x i16>, <16 x i16>* %28399, align 2, !tbaa !396
  %28401 = getelementptr inbounds i16, i16* %28386, i64 18
  %28402 = bitcast i16* %28401 to <16 x i16>*
  %28403 = load <16 x i16>, <16 x i16>* %28402, align 2, !tbaa !396
  %28404 = getelementptr inbounds i16, i16* %28386, i64 4
  %28405 = bitcast i16* %28404 to <16 x i16>*
  %28406 = load <16 x i16>, <16 x i16>* %28405, align 2, !tbaa !396
  %28407 = getelementptr inbounds i16, i16* %28386, i64 20
  %28408 = bitcast i16* %28407 to <16 x i16>*
  %28409 = load <16 x i16>, <16 x i16>* %28408, align 2, !tbaa !396
  %28410 = getelementptr inbounds i16, i16* %28386, i64 3
  %28411 = bitcast i16* %28410 to <16 x i16>*
  %28412 = load <16 x i16>, <16 x i16>* %28411, align 2, !tbaa !396
  %28413 = getelementptr inbounds i16, i16* %28386, i64 19
  %28414 = bitcast i16* %28413 to <16 x i16>*
  %28415 = load <16 x i16>, <16 x i16>* %28414, align 2, !tbaa !396
  %28416 = add <16 x i16> %28394, %28389
  %28417 = add <16 x i16> %28416, %28400
  %28418 = add <16 x i16> %28417, %28406
  %28419 = add <16 x i16> %28418, %28412
  %28420 = add <16 x i16> %28397, %28392
  %28421 = add <16 x i16> %28420, %28403
  %28422 = add <16 x i16> %28421, %28409
  %28423 = add <16 x i16> %28422, %28415
  %28424 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28419, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %28425 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28423, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %28426 = shufflevector <16 x i16> %28424, <16 x i16> %28425, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28427 = lshr <32 x i16> %28426, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28428 = shufflevector <32 x i16> %28427, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28429 = shl nsw i64 %28359, 5
  %28430 = add nsw i64 %28429, %28214
  %28431 = getelementptr inbounds i16, i16* %blur_x879, i64 %28430
  %28432 = bitcast i16* %28431 to <16 x i16>*
  store <16 x i16> %28428, <16 x i16>* %28432, align 2, !tbaa !399
  %28433 = shufflevector <32 x i16> %28427, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28434 = getelementptr inbounds i16, i16* %28431, i64 16
  %28435 = bitcast i16* %28434 to <16 x i16>*
  store <16 x i16> %28433, <16 x i16>* %28435, align 2, !tbaa !399
  br label %"consume blur_x2358"

"consume blur_x2358":                             ; preds = %"for blur_y.s0.x.x.rebased2349.consume blur_x2358_crit_edge", %"produce blur_x2356"
  %.pre-phi3560 = phi i64 [ %.pre3559, %"for blur_y.s0.x.x.rebased2349.consume blur_x2358_crit_edge" ], [ %28429, %"produce blur_x2356" ]
  %28436 = add nsw i64 %28217, %.pre-phi3560
  %28437 = getelementptr inbounds i16, i16* %blur_x879, i64 %28436
  %28438 = bitcast i16* %28437 to <16 x i16>*
  %28439 = load <16 x i16>, <16 x i16>* %28438, align 2, !tbaa !399
  %28440 = getelementptr inbounds i16, i16* %28437, i64 16
  %28441 = bitcast i16* %28440 to <16 x i16>*
  %28442 = load <16 x i16>, <16 x i16>* %28441, align 2, !tbaa !399
  %28443 = add nsw i64 %28220, %.pre-phi3560
  %28444 = getelementptr inbounds i16, i16* %blur_x879, i64 %28443
  %28445 = bitcast i16* %28444 to <16 x i16>*
  %28446 = load <16 x i16>, <16 x i16>* %28445, align 2, !tbaa !399
  %28447 = getelementptr inbounds i16, i16* %28444, i64 16
  %28448 = bitcast i16* %28447 to <16 x i16>*
  %28449 = load <16 x i16>, <16 x i16>* %28448, align 2, !tbaa !399
  %28450 = add nsw i64 %28223, %.pre-phi3560
  %28451 = getelementptr inbounds i16, i16* %blur_x879, i64 %28450
  %28452 = bitcast i16* %28451 to <16 x i16>*
  %28453 = load <16 x i16>, <16 x i16>* %28452, align 2, !tbaa !399
  %28454 = getelementptr inbounds i16, i16* %28451, i64 16
  %28455 = bitcast i16* %28454 to <16 x i16>*
  %28456 = load <16 x i16>, <16 x i16>* %28455, align 2, !tbaa !399
  %28457 = add nsw i64 %28226, %.pre-phi3560
  %28458 = getelementptr inbounds i16, i16* %blur_x879, i64 %28457
  %28459 = bitcast i16* %28458 to <16 x i16>*
  %28460 = load <16 x i16>, <16 x i16>* %28459, align 2, !tbaa !399
  %28461 = getelementptr inbounds i16, i16* %28458, i64 16
  %28462 = bitcast i16* %28461 to <16 x i16>*
  %28463 = load <16 x i16>, <16 x i16>* %28462, align 2, !tbaa !399
  %28464 = add nsw i64 %28229, %.pre-phi3560
  %28465 = getelementptr inbounds i16, i16* %blur_x879, i64 %28464
  %28466 = bitcast i16* %28465 to <16 x i16>*
  %28467 = load <16 x i16>, <16 x i16>* %28466, align 2, !tbaa !399
  %28468 = getelementptr inbounds i16, i16* %28465, i64 16
  %28469 = bitcast i16* %28468 to <16 x i16>*
  %28470 = load <16 x i16>, <16 x i16>* %28469, align 2, !tbaa !399
  %28471 = add <16 x i16> %28446, %28439
  %28472 = add <16 x i16> %28471, %28453
  %28473 = add <16 x i16> %28472, %28460
  %28474 = add <16 x i16> %28473, %28467
  %28475 = add <16 x i16> %28449, %28442
  %28476 = add <16 x i16> %28475, %28456
  %28477 = add <16 x i16> %28476, %28463
  %28478 = add <16 x i16> %28477, %28470
  %28479 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28474, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %28480 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28478, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %28481 = shufflevector <16 x i16> %28479, <16 x i16> %28480, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28482 = lshr <32 x i16> %28481, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28483 = shufflevector <32 x i16> %28482, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28484 = add nsw i64 %28233, %.pre-phi3560
  %28485 = getelementptr inbounds i16, i16* %260, i64 %28484
  %28486 = bitcast i16* %28485 to <16 x i16>*
  store <16 x i16> %28483, <16 x i16>* %28486, align 2, !tbaa !401
  %28487 = shufflevector <32 x i16> %28482, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28488 = getelementptr inbounds i16, i16* %28485, i64 16
  %28489 = bitcast i16* %28488 to <16 x i16>*
  store <16 x i16> %28487, <16 x i16>* %28489, align 2, !tbaa !401
  %indvars.iv.next3369 = add nuw nsw i64 %indvars.iv3368, 1
  %.not2542 = icmp eq i64 %indvars.iv.next3369, %378
  br i1 %.not2542, label %"end for blur_y.s0.x.x.rebased2350", label %"for blur_y.s0.x.x.rebased2349"

"for blur_y.s0.x.x.rebased2366":                  ; preds = %"for blur_y.s0.x.x.rebased2366.preheader", %"consume blur_x2376"
  %blur_y.s0.x.x.rebased2368 = phi i32 [ %28603, %"consume blur_x2376" ], [ 0, %"for blur_y.s0.x.x.rebased2366.preheader" ]
  %28490 = add nsw i32 %blur_y.s0.x.x.rebased2368, %t1626814
  %a649 = shl nsw i32 %28490, 5
  %28491 = icmp sgt i32 %a341, %a649
  %b655 = select i1 %28491, i32 %a649, i32 %a341
  %28492 = icmp slt i32 %28490, 1
  %28493 = icmp sgt i32 %198, %a649
  %28494 = or i1 %28492, %28493
  br i1 %28494, label %"produce blur_x2373", label %"consume blur_x2376"

"end for blur_y.s0.x.x.rebased2367":              ; preds = %"consume blur_x2376", %"end for blur_y.s0.x.x.rebased2350"
  %28495 = add nuw nsw i32 %blur_y.s0.y.y818, 1
  %.not2540 = icmp eq i32 %28495, %t1612815
  br i1 %.not2540, label %if.then.i2792.loopexit, label %"for blur_y.s0.y.y816"

"produce blur_x2373":                             ; preds = %"for blur_y.s0.x.x.rebased2366"
  %28496 = icmp slt i32 %b655, %198
  %blur_x.s0.x.v1.base.s2374 = select i1 %28496, i32 %b655, i32 %198
  %t12132375 = add nsw i32 %blur_x.s0.x.v1.base.s2374, %t22012346
  %28497 = sext i32 %t12132375 to i64
  %28498 = getelementptr inbounds i16, i16* %read_input822, i64 %28497
  %28499 = getelementptr inbounds i16, i16* %28498, i64 1
  %28500 = bitcast i16* %28499 to <16 x i16>*
  %28501 = load <16 x i16>, <16 x i16>* %28500, align 2, !tbaa !396
  %28502 = getelementptr inbounds i16, i16* %28498, i64 17
  %28503 = bitcast i16* %28502 to <16 x i16>*
  %28504 = load <16 x i16>, <16 x i16>* %28503, align 2, !tbaa !396
  %28505 = bitcast i16* %28498 to <16 x i16>*
  %28506 = load <16 x i16>, <16 x i16>* %28505, align 2, !tbaa !396
  %28507 = getelementptr inbounds i16, i16* %28498, i64 16
  %28508 = bitcast i16* %28507 to <16 x i16>*
  %28509 = load <16 x i16>, <16 x i16>* %28508, align 2, !tbaa !396
  %28510 = getelementptr inbounds i16, i16* %28498, i64 2
  %28511 = bitcast i16* %28510 to <16 x i16>*
  %28512 = load <16 x i16>, <16 x i16>* %28511, align 2, !tbaa !396
  %28513 = getelementptr inbounds i16, i16* %28498, i64 18
  %28514 = bitcast i16* %28513 to <16 x i16>*
  %28515 = load <16 x i16>, <16 x i16>* %28514, align 2, !tbaa !396
  %28516 = getelementptr inbounds i16, i16* %28498, i64 4
  %28517 = bitcast i16* %28516 to <16 x i16>*
  %28518 = load <16 x i16>, <16 x i16>* %28517, align 2, !tbaa !396
  %28519 = getelementptr inbounds i16, i16* %28498, i64 20
  %28520 = bitcast i16* %28519 to <16 x i16>*
  %28521 = load <16 x i16>, <16 x i16>* %28520, align 2, !tbaa !396
  %28522 = getelementptr inbounds i16, i16* %28498, i64 3
  %28523 = bitcast i16* %28522 to <16 x i16>*
  %28524 = load <16 x i16>, <16 x i16>* %28523, align 2, !tbaa !396
  %28525 = getelementptr inbounds i16, i16* %28498, i64 19
  %28526 = bitcast i16* %28525 to <16 x i16>*
  %28527 = load <16 x i16>, <16 x i16>* %28526, align 2, !tbaa !396
  %28528 = add <16 x i16> %28506, %28501
  %28529 = add <16 x i16> %28528, %28512
  %28530 = add <16 x i16> %28529, %28518
  %28531 = add <16 x i16> %28530, %28524
  %28532 = add <16 x i16> %28509, %28504
  %28533 = add <16 x i16> %28532, %28515
  %28534 = add <16 x i16> %28533, %28521
  %28535 = add <16 x i16> %28534, %28527
  %28536 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28531, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %28537 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28535, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %28538 = shufflevector <16 x i16> %28536, <16 x i16> %28537, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28539 = lshr <32 x i16> %28538, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28540 = shufflevector <32 x i16> %28539, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28541 = sext i32 %blur_x.s0.x.v1.base.s2374 to i64
  %28542 = add nsw i64 %28541, %28365
  %28543 = getelementptr inbounds i16, i16* %blur_x879, i64 %28542
  %28544 = bitcast i16* %28543 to <16 x i16>*
  store <16 x i16> %28540, <16 x i16>* %28544, align 2, !tbaa !399
  %28545 = shufflevector <32 x i16> %28539, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28546 = getelementptr inbounds i16, i16* %28543, i64 16
  %28547 = bitcast i16* %28546 to <16 x i16>*
  store <16 x i16> %28545, <16 x i16>* %28547, align 2, !tbaa !399
  br label %"consume blur_x2376"

"consume blur_x2376":                             ; preds = %"for blur_y.s0.x.x.rebased2366", %"produce blur_x2373"
  %28548 = sext i32 %b655 to i64
  %28549 = add nsw i64 %28368, %28548
  %28550 = getelementptr inbounds i16, i16* %blur_x879, i64 %28549
  %28551 = bitcast i16* %28550 to <16 x i16>*
  %28552 = load <16 x i16>, <16 x i16>* %28551, align 2, !tbaa !399
  %28553 = getelementptr inbounds i16, i16* %28550, i64 16
  %28554 = bitcast i16* %28553 to <16 x i16>*
  %28555 = load <16 x i16>, <16 x i16>* %28554, align 2, !tbaa !399
  %28556 = add nsw i64 %28371, %28548
  %28557 = getelementptr inbounds i16, i16* %blur_x879, i64 %28556
  %28558 = bitcast i16* %28557 to <16 x i16>*
  %28559 = load <16 x i16>, <16 x i16>* %28558, align 2, !tbaa !399
  %28560 = getelementptr inbounds i16, i16* %28557, i64 16
  %28561 = bitcast i16* %28560 to <16 x i16>*
  %28562 = load <16 x i16>, <16 x i16>* %28561, align 2, !tbaa !399
  %28563 = add nsw i64 %28374, %28548
  %28564 = getelementptr inbounds i16, i16* %blur_x879, i64 %28563
  %28565 = bitcast i16* %28564 to <16 x i16>*
  %28566 = load <16 x i16>, <16 x i16>* %28565, align 2, !tbaa !399
  %28567 = getelementptr inbounds i16, i16* %28564, i64 16
  %28568 = bitcast i16* %28567 to <16 x i16>*
  %28569 = load <16 x i16>, <16 x i16>* %28568, align 2, !tbaa !399
  %28570 = add nsw i64 %28377, %28548
  %28571 = getelementptr inbounds i16, i16* %blur_x879, i64 %28570
  %28572 = bitcast i16* %28571 to <16 x i16>*
  %28573 = load <16 x i16>, <16 x i16>* %28572, align 2, !tbaa !399
  %28574 = getelementptr inbounds i16, i16* %28571, i64 16
  %28575 = bitcast i16* %28574 to <16 x i16>*
  %28576 = load <16 x i16>, <16 x i16>* %28575, align 2, !tbaa !399
  %28577 = add nsw i64 %28380, %28548
  %28578 = getelementptr inbounds i16, i16* %blur_x879, i64 %28577
  %28579 = bitcast i16* %28578 to <16 x i16>*
  %28580 = load <16 x i16>, <16 x i16>* %28579, align 2, !tbaa !399
  %28581 = getelementptr inbounds i16, i16* %28578, i64 16
  %28582 = bitcast i16* %28581 to <16 x i16>*
  %28583 = load <16 x i16>, <16 x i16>* %28582, align 2, !tbaa !399
  %28584 = add <16 x i16> %28559, %28552
  %28585 = add <16 x i16> %28584, %28566
  %28586 = add <16 x i16> %28585, %28573
  %28587 = add <16 x i16> %28586, %28580
  %28588 = add <16 x i16> %28562, %28555
  %28589 = add <16 x i16> %28588, %28569
  %28590 = add <16 x i16> %28589, %28576
  %28591 = add <16 x i16> %28590, %28583
  %28592 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28587, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %28593 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %28591, <16 x i16> <i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107, i16 -13107>)
  %28594 = shufflevector <16 x i16> %28592, <16 x i16> %28593, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28595 = lshr <32 x i16> %28594, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %28596 = shufflevector <32 x i16> %28595, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %28597 = add nsw i64 %28384, %28548
  %28598 = getelementptr inbounds i16, i16* %260, i64 %28597
  %28599 = bitcast i16* %28598 to <16 x i16>*
  store <16 x i16> %28596, <16 x i16>* %28599, align 2, !tbaa !401
  %28600 = shufflevector <32 x i16> %28595, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %28601 = getelementptr inbounds i16, i16* %28598, i64 16
  %28602 = bitcast i16* %28601 to <16 x i16>*
  store <16 x i16> %28600, <16 x i16>* %28602, align 2, !tbaa !401
  %28603 = add nuw nsw i32 %blur_y.s0.x.x.rebased2368, 1
  %.not2541 = icmp eq i32 %28603, %t1683899
  br i1 %.not2541, label %"end for blur_y.s0.x.x.rebased2367", label %"for blur_y.s0.x.x.rebased2366"
}

; Function Attrs: nounwind
define i32 @blur5x5_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 8
  %3 = getelementptr i8*, i8** %0, i64 1
  %4 = bitcast i8** %3 to %struct.halide_buffer_t**
  %5 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %4, align 8
  %6 = tail call i32 @blur5x5(%struct.halide_buffer_t* %2, %struct.halide_buffer_t* %5) #18
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @blur5x5_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @blur5x5_metadata_storage
}

; Function Attrs: nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32>, <8 x i32*>, i32 immarg, <8 x i1>) #13

; Function Attrs: nofree nosync nounwind readonly willreturn
declare <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*>, i32 immarg, <4 x i1>, <4 x i32>) #14

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i64 @llvm.vector.reduce.add.v4i64(<4 x i64>) #15

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nofree nosync nounwind willreturn writeonly }
attributes #14 = { nofree nosync nounwind readonly willreturn }
attributes #15 = { nofree nosync nounwind readnone willreturn }
attributes #16 = { nobuiltin nounwind "no-builtins" }
attributes #17 = { nobuiltin "no-builtins" }
attributes #18 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"cascadelake"}
!4 = !{i32 2, !"halide_mattrs", !"+fma,+f16c"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!12, !12, i64 0}
!15 = !{!16, !16, i64 0}
!16 = !{!"bool", !12, i64 0}
!17 = !{i8 0, i8 2}
!18 = !{!19, !19, i64 0}
!19 = !{!"long", !12, i64 0}
!20 = !{!21, !11, i64 0}
!21 = !{!"_ZTSN6Halide7Runtime8Internal4workE", !22, i64 0, !11, i64 56, !11, i64 64, !11, i64 72, !23, i64 80, !11, i64 88, !23, i64 96, !11, i64 104, !23, i64 112, !23, i64 116, !23, i64 120, !16, i64 124}
!22 = !{!"_ZTS22halide_parallel_task_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !23, i64 32, !23, i64 36, !23, i64 40, !23, i64 44, !16, i64 48}
!23 = !{!"int", !12, i64 0}
!24 = !{!21, !23, i64 36}
!25 = !{!21, !23, i64 40}
!26 = !{!21, !16, i64 48}
!27 = !{!21, !11, i64 24}
!28 = !{!21, !23, i64 32}
!29 = !{!21, !11, i64 8}
!30 = !{!21, !23, i64 44}
!31 = !{!21, !11, i64 16}
!32 = !{!21, !11, i64 56}
!33 = !{!21, !11, i64 104}
!34 = !{!21, !23, i64 116}
!35 = !{!21, !23, i64 112}
!36 = !{!21, !23, i64 120}
!37 = !{!21, !16, i64 124}
!38 = !{!21, !11, i64 72}
!39 = !{!21, !23, i64 80}
!40 = !{!21, !11, i64 88}
!41 = !{!42, !42, i64 0}
!42 = !{!"vtable pointer", !13, i64 0}
!43 = !{!44, !11, i64 8}
!44 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE", !11, i64 8}
!45 = !{!46, !16, i64 2121}
!46 = !{!"_ZTSN6Halide7Runtime8Internal12work_queue_tE", !47, i64 0, !23, i64 8, !23, i64 12, !11, i64 16, !23, i64 24, !23, i64 28, !23, i64 32, !48, i64 40, !48, i64 48, !48, i64 56, !23, i64 64, !23, i64 68, !12, i64 72, !16, i64 2120, !16, i64 2121, !23, i64 2124}
!47 = !{!"_ZTS12halide_mutex", !12, i64 0}
!48 = !{!"_ZTS11halide_cond", !12, i64 0}
!49 = distinct !{!49, !50}
!50 = !{!"llvm.loop.mustprogress"}
!51 = !{!46, !23, i64 8}
!52 = !{!46, !23, i64 24}
!53 = !{!46, !23, i64 2124}
!54 = !{!46, !23, i64 28}
!55 = distinct !{!55, !50}
!56 = !{!21, !23, i64 96}
!57 = !{!46, !11, i64 16}
!58 = !{!21, !11, i64 64}
!59 = !{!46, !23, i64 68}
!60 = !{!46, !23, i64 32}
!61 = distinct !{!61, !50}
!62 = distinct !{!62, !50}
!63 = !{!46, !16, i64 2120}
!64 = distinct !{!64, !50}
!65 = !{!66, !11, i64 0}
!66 = !{!"_ZTS26halide_semaphore_acquire_t", !11, i64 0, !23, i64 8}
!67 = !{!66, !23, i64 8}
!68 = distinct !{!68, !50}
!69 = !{!46, !23, i64 64}
!70 = distinct !{!70, !50}
!71 = distinct !{!71, !50}
!72 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 8, !10, i64 80, i64 4, !73, i64 88, i64 8, !10, i64 96, i64 4, !73, i64 104, i64 8, !10, i64 112, i64 4, !73, i64 116, i64 4, !73, i64 120, i64 4, !73, i64 124, i64 1, !15}
!73 = !{!23, !23, i64 0}
!74 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 28, i64 4, !73, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 1, !15, i64 48, i64 8, !10, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 4, !73, i64 80, i64 8, !10, i64 88, i64 4, !73, i64 96, i64 8, !10, i64 104, i64 4, !73, i64 108, i64 4, !73, i64 112, i64 4, !73, i64 116, i64 1, !15}
!75 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 32, i64 8, !10, i64 40, i64 4, !73, i64 48, i64 8, !10, i64 56, i64 4, !73, i64 60, i64 4, !73, i64 64, i64 4, !73, i64 68, i64 1, !15}
!76 = !{i64 0, i64 8, !10, i64 8, i64 4, !73, i64 12, i64 4, !73, i64 16, i64 4, !73, i64 20, i64 1, !15}
!77 = distinct !{!77, !50}
!78 = distinct !{!78, !50}
!79 = !{!80, !11, i64 144}
!80 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization10queue_dataE", !81, i64 0, !84, i64 136, !11, i64 144, !84, i64 152}
!81 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization13thread_parkerE", !82, i64 0, !83, i64 64, !16, i64 128}
!82 = !{!"_ZTS15pthread_mutex_t", !12, i64 0}
!83 = !{!"_ZTS14pthread_cond_t", !12, i64 0}
!84 = !{!"long long", !12, i64 0}
!85 = !{!86, !11, i64 16}
!86 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11hash_bucketE", !87, i64 0, !11, i64 8, !11, i64 16}
!87 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization9word_lockE", !84, i64 0}
!88 = distinct !{!88, !50}
!89 = !{!80, !84, i64 152}
!90 = !{!81, !16, i64 128}
!91 = distinct !{!91, !50}
!92 = !{!93, !11, i64 152}
!93 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20word_lock_queue_dataE", !81, i64 0, !11, i64 136, !11, i64 144, !11, i64 152}
!94 = !{!93, !11, i64 136}
!95 = !{!93, !11, i64 144}
!96 = distinct !{!96, !50}
!97 = distinct !{!97, !50}
!98 = distinct !{!98, !50}
!99 = !{!100, !11, i64 8}
!100 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE", !11, i64 8, !11, i64 16}
!101 = !{!100, !11, i64 16}
!102 = !{!103, !11, i64 8}
!103 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE", !11, i64 8, !11, i64 16}
!104 = !{!103, !11, i64 16}
!105 = !{!80, !84, i64 136}
!106 = !{!107, !16, i64 0}
!107 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization15validate_actionE", !16, i64 0, !84, i64 8}
!108 = !{!107, !84, i64 8}
!109 = !{!86, !11, i64 8}
!110 = !{!84, !84, i64 0}
!111 = !{!112, !11, i64 0}
!112 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11bucket_pairE", !11, i64 0, !11, i64 8}
!113 = distinct !{!113, !50}
!114 = !{!112, !11, i64 8}
!115 = !{!116, !11, i64 0}
!116 = !{!"_ZTSN6Halide7Runtime8Internal14spawned_threadE", !11, i64 0, !11, i64 8, !19, i64 16}
!117 = !{!116, !11, i64 8}
!118 = !{!116, !19, i64 16}
!119 = !{!22, !23, i64 40}
!120 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15}
!121 = distinct !{!121, !50}
!122 = distinct !{!122, !50}
!123 = distinct !{!123, !50}
!124 = !{!125, !11, i64 8}
!125 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE", !11, i64 8, !11, i64 16}
!126 = !{!125, !11, i64 16}
!127 = !{!128, !11, i64 0}
!128 = !{!"_ZTS18halide_mutex_array", !11, i64 0}
!129 = distinct !{!129, !50}
!130 = !{!131, !134, i64 34}
!131 = !{!"_ZTS20halide_trace_event_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !132, i64 32, !135, i64 36, !23, i64 40, !23, i64 44, !23, i64 48}
!132 = !{!"_ZTS13halide_type_t", !133, i64 0, !12, i64 1, !134, i64 2}
!133 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!134 = !{!"short", !12, i64 0}
!135 = !{!"_ZTS25halide_trace_event_code_t", !12, i64 0}
!136 = !{!132, !12, i64 1}
!137 = !{!131, !23, i64 48}
!138 = !{!131, !11, i64 0}
!139 = !{!131, !11, i64 24}
!140 = !{!141, !23, i64 0}
!141 = !{!"_ZTSN6Halide7Runtime8Internal23SharedExclusiveSpinLockE", !23, i64 0}
!142 = !{!143, !23, i64 4}
!143 = !{!"_ZTSN6Halide7Runtime8Internal11TraceBufferE", !141, i64 0, !23, i64 4, !23, i64 8, !12, i64 12}
!144 = !{!143, !23, i64 8}
!145 = distinct !{!145, !50}
!146 = !{!147, !23, i64 0}
!147 = !{!"_ZTS21halide_trace_packet_t", !23, i64 0, !23, i64 4, !132, i64 8, !135, i64 12, !23, i64 16, !23, i64 20, !23, i64 24}
!148 = !{!147, !23, i64 4}
!149 = !{!131, !11, i64 16}
!150 = !{!131, !11, i64 8}
!151 = !{!147, !23, i64 24}
!152 = !{!147, !134, i64 10}
!153 = distinct !{!153, !50}
!154 = !{!131, !135, i64 36}
!155 = !{!131, !12, i64 33}
!156 = distinct !{!156, !50}
!157 = !{!131, !23, i64 44}
!158 = distinct !{!158, !50, !159}
!159 = !{!"llvm.loop.peeled.count", i32 1}
!160 = !{!131, !133, i64 32}
!161 = !{!134, !134, i64 0}
!162 = !{!163, !163, i64 0}
!163 = !{!"float", !12, i64 0}
!164 = !{!165, !165, i64 0}
!165 = !{!"double", !12, i64 0}
!166 = distinct !{!166, !50, !159}
!167 = distinct !{!167, !50}
!168 = !{!131, !23, i64 40}
!169 = distinct !{!169, !50}
!170 = distinct !{!170, !50}
!171 = distinct !{!171, !50}
!172 = !{!173, !11, i64 16}
!173 = !{!"_ZTS15halide_buffer_t", !84, i64 0, !11, i64 8, !11, i64 16, !84, i64 24, !132, i64 32, !23, i64 36, !11, i64 40, !11, i64 48}
!174 = !{!173, !84, i64 0}
!175 = !{!173, !23, i64 36}
!176 = !{!173, !11, i64 40}
!177 = !{i64 0, i64 4, !73, i64 4, i64 4, !73, i64 8, i64 4, !73, i64 12, i64 4, !73}
!178 = !{!179, !23, i64 4}
!179 = !{!"_ZTS18halide_dimension_t", !23, i64 0, !23, i64 4, !23, i64 8, !23, i64 12}
!180 = distinct !{!180, !50}
!181 = !{!179, !23, i64 0}
!182 = !{!179, !23, i64 8}
!183 = distinct !{!183, !50, !184}
!184 = !{!"llvm.loop.isvectorized", i32 1}
!185 = distinct !{!185, !186}
!186 = !{!"llvm.loop.unroll.disable"}
!187 = distinct !{!187, !50, !188, !184}
!188 = !{!"llvm.loop.unroll.runtime.disable"}
!189 = !{!190, !134, i64 0}
!190 = !{!"_ZTSN6Halide7Runtime8Internal18halide_tiff_headerE", !134, i64 0, !134, i64 2, !23, i64 4, !134, i64 8, !12, i64 10, !23, i64 190, !12, i64 194, !12, i64 202}
!191 = !{!190, !134, i64 2}
!192 = !{!190, !23, i64 4}
!193 = !{!190, !134, i64 8}
!194 = !{!195, !134, i64 0}
!195 = !{!"_ZTSN6Halide7Runtime8Internal8tiff_tagE", !134, i64 0, !134, i64 2, !23, i64 4, !12, i64 8}
!196 = !{!195, !134, i64 2}
!197 = !{!195, !23, i64 4}
!198 = distinct !{!198, !50}
!199 = distinct !{!199, !50}
!200 = distinct !{!200, !50}
!201 = distinct !{!201, !50}
!202 = distinct !{!202, !50}
!203 = !{!204}
!204 = distinct !{!204, !205}
!205 = distinct !{!205, !"LVerDomain"}
!206 = !{!207}
!207 = distinct !{!207, !205}
!208 = distinct !{!208, !50, !184}
!209 = distinct !{!209, !186}
!210 = distinct !{!210, !186}
!211 = distinct !{!211, !50, !184}
!212 = distinct !{!212, !186}
!213 = distinct !{!213, !50, !184}
!214 = distinct !{!214, !50, !184}
!215 = distinct !{!215, !50, !188, !184}
!216 = distinct !{!216, !50, !184}
!217 = distinct !{!217, !50, !188, !184}
!218 = distinct !{!218, !50, !184}
!219 = distinct !{!219, !50, !188, !184}
!220 = distinct !{!220, !50}
!221 = distinct !{!221, !50, !184}
!222 = distinct !{!222, !50, !188, !184}
!223 = distinct !{!223, !50}
!224 = distinct !{!224, !50}
!225 = distinct !{!225, !50}
!226 = distinct !{!226, !50}
!227 = !{!228, !11, i64 0}
!228 = !{!"_ZTSN6Halide7Runtime8Internal10CacheEntryE", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !19, i64 32, !11, i64 40, !23, i64 48, !23, i64 52, !23, i64 56, !23, i64 60, !11, i64 64, !11, i64 72, !84, i64 80, !16, i64 88}
!229 = distinct !{!229, !50}
!230 = !{!228, !23, i64 56}
!231 = !{!228, !11, i64 24}
!232 = !{!228, !11, i64 72}
!233 = distinct !{!233, !50}
!234 = distinct !{!234, !50}
!235 = !{!236, !84, i64 0}
!236 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !84, i64 0, !84, i64 8, !84, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !84, i64 408}
!237 = !{!236, !84, i64 8}
!238 = !{!236, !84, i64 408}
!239 = distinct !{!239, !50}
!240 = !{!236, !84, i64 16}
!241 = distinct !{!241, !50, !184}
!242 = distinct !{!242, !50, !188, !184}
!243 = distinct !{!243, !50}
!244 = distinct !{!244, !186}
!245 = distinct !{!245, !50}
!246 = distinct !{!246, !50}
!247 = distinct !{!247, !50}
!248 = !{i64 0, i64 8, !110, i64 8, i64 8, !110, i64 16, i64 8, !110, i64 24, i64 128, !14, i64 152, i64 128, !14, i64 280, i64 128, !14, i64 408, i64 8, !110}
!249 = distinct !{!249, !50}
!250 = !{!179, !23, i64 12}
!251 = !{!228, !11, i64 16}
!252 = !{!228, !19, i64 32}
!253 = !{!228, !23, i64 48}
!254 = !{!228, !23, i64 52}
!255 = !{!228, !23, i64 60}
!256 = !{!228, !11, i64 64}
!257 = !{!228, !11, i64 40}
!258 = distinct !{!258, !50}
!259 = distinct !{!259, !50}
!260 = distinct !{!260, !50}
!261 = !{!228, !16, i64 88}
!262 = !{!228, !84, i64 80}
!263 = !{i64 0, i64 8, !110, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !110, i64 32, i64 1, !264, i64 33, i64 1, !14, i64 34, i64 2, !161, i64 36, i64 4, !73, i64 40, i64 8, !10, i64 48, i64 8, !10}
!264 = !{!133, !133, i64 0}
!265 = distinct !{!265, !50}
!266 = distinct !{!266, !186}
!267 = distinct !{!267, !50}
!268 = !{!228, !11, i64 8}
!269 = distinct !{!269, !50}
!270 = distinct !{!270, !50, !184}
!271 = distinct !{!271, !50, !188, !184}
!272 = distinct !{!272, !50, !184}
!273 = distinct !{!273, !50, !188, !184}
!274 = distinct !{!274, !50}
!275 = distinct !{!275, !50}
!276 = distinct !{!276, !50}
!277 = distinct !{!277, !50}
!278 = distinct !{!278, !50}
!279 = distinct !{!279, !50, !184}
!280 = distinct !{!280, !50, !188, !184}
!281 = distinct !{!281, !50, !184}
!282 = distinct !{!282, !50, !188, !184}
!283 = distinct !{!283, !50}
!284 = !{!285, !23, i64 8}
!285 = !{!"_ZTSN6Halide7Runtime8Internal16CacheBlockHeaderE", !11, i64 0, !23, i64 8}
!286 = !{!285, !11, i64 0}
!287 = distinct !{!287, !50}
!288 = distinct !{!288, !186}
!289 = distinct !{!289, !50}
!290 = distinct !{!290, !50}
!291 = distinct !{!291, !50}
!292 = distinct !{!292, !50, !184}
!293 = distinct !{!293, !50, !188, !184}
!294 = distinct !{!294, !50, !184}
!295 = distinct !{!295, !50, !188, !184}
!296 = distinct !{!296, !50}
!297 = distinct !{!297, !50}
!298 = distinct !{!298, !50}
!299 = distinct !{!299, !50}
!300 = distinct !{!300, !50}
!301 = distinct !{!301, !50}
!302 = distinct !{!302, !50}
!303 = distinct !{!303, !50}
!304 = distinct !{!304, !50}
!305 = !{!132, !133, i64 0}
!306 = !{!132, !134, i64 2}
!307 = !{!173, !11, i64 8}
!308 = !{!173, !84, i64 24}
!309 = distinct !{!309, !50}
!310 = !{!311, !11, i64 0}
!311 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 8}
!312 = distinct !{!312, !50}
!313 = !{!311, !11, i64 8}
!314 = !{!315, !11, i64 120}
!315 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!316 = !{!317, !11, i64 48}
!317 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!318 = !{!317, !11, i64 40}
!319 = !{!317, !11, i64 56}
!320 = !{!317, !11, i64 0}
!321 = !{!317, !11, i64 16}
!322 = !{!317, !11, i64 8}
!323 = !{!317, !11, i64 32}
!324 = !{!317, !11, i64 24}
!325 = !{!317, !11, i64 64}
!326 = !{!317, !11, i64 72}
!327 = distinct !{!327, !50, !184}
!328 = distinct !{!328, !50, !188, !184}
!329 = distinct !{!329, !50, !184}
!330 = distinct !{!330, !50, !188, !184}
!331 = !{!317, !11, i64 112}
!332 = !{!317, !11, i64 120}
!333 = !{!317, !11, i64 80}
!334 = !{!317, !11, i64 88}
!335 = !{!317, !11, i64 96}
!336 = !{!317, !11, i64 104}
!337 = !{i32 22, i32 33}
!338 = !{!339, !11, i64 40}
!339 = !{!"_ZTS21halide_profiler_state", !47, i64 0, !23, i64 8, !23, i64 12, !23, i64 16, !23, i64 20, !11, i64 24, !11, i64 32, !11, i64 40}
!340 = !{!339, !23, i64 16}
!341 = !{!342, !84, i64 0}
!342 = !{!"_ZTS30halide_profiler_pipeline_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !23, i64 72, !23, i64 76, !23, i64 80, !23, i64 84, !23, i64 88}
!343 = !{!342, !23, i64 80}
!344 = !{!342, !84, i64 32}
!345 = !{!342, !84, i64 40}
!346 = !{!342, !11, i64 48}
!347 = !{!342, !23, i64 84}
!348 = !{!342, !23, i64 88}
!349 = !{!342, !84, i64 16}
!350 = !{!342, !84, i64 24}
!351 = !{!342, !23, i64 72}
!352 = !{!342, !11, i64 56}
!353 = distinct !{!353, !50}
!354 = !{!355, !84, i64 32}
!355 = !{!"_ZTS26halide_profiler_func_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !84, i64 48, !11, i64 56, !23, i64 64}
!356 = !{!355, !84, i64 0}
!357 = !{!355, !11, i64 56}
!358 = distinct !{!358, !50}
!359 = distinct !{!359, !50}
!360 = distinct !{!360, !50}
!361 = !{!355, !84, i64 40}
!362 = !{!355, !84, i64 48}
!363 = distinct !{!363, !50}
!364 = !{!355, !84, i64 16}
!365 = distinct !{!365, !50}
!366 = !{!355, !23, i64 64}
!367 = distinct !{!367, !50}
!368 = !{!355, !84, i64 24}
!369 = distinct !{!369, !50}
!370 = distinct !{!370, !50}
!371 = !{!339, !11, i64 24}
!372 = !{!342, !11, i64 64}
!373 = distinct !{!373, !50}
!374 = !{!339, !23, i64 12}
!375 = distinct !{!375, !50}
!376 = !{!342, !23, i64 76}
!377 = distinct !{!377, !50}
!378 = distinct !{!378, !50}
!379 = !{!339, !11, i64 32}
!380 = !{!339, !23, i64 20}
!381 = !{!339, !23, i64 8}
!382 = distinct !{!382, !50}
!383 = distinct !{!383, !50}
!384 = distinct !{!384, !50}
!385 = distinct !{!385, !50}
!386 = !{!"branch_weights", i32 1073741824, i32 0}
!387 = !{!388, !19, i64 8}
!388 = !{!"_ZTS25halide_pseudostack_slot_t", !11, i64 0, !19, i64 8, !19, i64 16}
!389 = !{!388, !11, i64 0}
!390 = !{!"branch_weights", i32 1, i32 2000}
!391 = !{!388, !19, i64 16}
!392 = !{!"branch_weights", i32 0, i32 1073741824}
!393 = !{!394, !394, i64 0}
!394 = !{!"input", !395, i64 0}
!395 = !{!"Halide buffer"}
!396 = !{!397, !397, i64 0}
!397 = !{!"read_input", !395, i64 0}
!398 = distinct !{!398, !186}
!399 = !{!400, !400, i64 0}
!400 = !{!"blur_x", !395, i64 0}
!401 = !{!402, !402, i64 0}
!402 = !{!"blur_y", !395, i64 0}
!403 = distinct !{!403, !186}
