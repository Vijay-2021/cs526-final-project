module name=idct8_batch_0023_sample_0009, target=x86-64-linux-avx-avx2-avx512-avx512_sapphirerapids-avx512_skylake-disable_llvm_loop_opt-f16c-fma-sse41
external_plus_metadata func idct8_batch_0023_sample_0009 (input, output) {
assert((uint64)reinterpret((halide_buffer_t *)output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("output"))
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let output = (void *)_halide_buffer_get_host((halide_buffer_t *)output.buffer)
let output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)output.buffer)
let output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)output.buffer)
let output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)output.buffer)
let output.min.0 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 0)
let output.min.1 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 1)
let input.extent.0.required = min(min(output.extent.0, 32) + (((output.extent.0 + -1)/32)*32), output.extent.0)
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 16, 2, (halide_dimension_t *)make_struct(output.min.0, input.extent.0.required, 1, 0, 0, 8, input.extent.0.required, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 16, 2, (halide_dimension_t *)make_struct(output.min.0, input.extent.0.required, 1, 0, output.min.1, output.extent.1, input.extent.0.required, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer))) {
 assert(input.type == (uint32)69632, halide_error_bad_type("Input buffer input", input.type, (uint32)69632))
 assert(input.dimensions == 2, halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
 assert(output.type == (uint32)69632, halide_error_bad_type("Output buffer output", output.type, (uint32)69632))
 assert(output.dimensions == 2, halide_error_bad_dimensions("Output buffer output", output.dimensions, 2))
 assert((input.min.0 <= output.min.0) && ((input.extent.0.required + output.min.0) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, output.min.0, (input.extent.0.required + output.min.0) + -1, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert((input.min.1 <= 0) && (8 <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, 0, 7, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert(input.extent.0.required <= output.extent.0, halide_error_access_out_of_bounds("Output buffer output", 0, output.min.0, (input.extent.0.required + output.min.0) + -1, output.min.0, (output.extent.0 + output.min.0) + -1))
 assert(0 <= output.extent.0, halide_error_buffer_extents_negative("Output buffer output", 0, output.extent.0))
 assert(0 <= output.extent.1, halide_error_buffer_extents_negative("Output buffer output", 1, output.extent.1))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 assert(output.stride.0 == 1, halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
 let input.total_extent.1 = int64(input.extent.1)*int64(input.extent.0)
 let output.total_extent.1 = int64(output.extent.1)*int64(output.extent.0)
 assert(uint64(input.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", uint64(input.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(input.extent.1)*int64(input.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", (uint64)abs(int64(input.extent.1)*int64(input.stride.1)), (uint64)2147483647))
 assert(input.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
 assert(uint64(output.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", uint64(output.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(output.extent.1)*int64(output.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", (uint64)abs(int64(output.extent.1)*int64(output.stride.1)), (uint64)2147483647))
 assert(output.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert(!output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer output"))
 assert(input != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer input"))
 assert(output != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer output"))
 allocate src[int32 * input.extent.0.required * 8]
 produce src {
  let t242 = input.min.1*input.stride.1
  let t243 = output.extent.0/32
  let t244 = t243*32
  let t245 = output.extent.0 % 32
  let t238 = t245 != 0
  let t240 = ((output.min.0 + t244) - t242) - input.min.0
  let t237 = (output.min.0 - t242) - input.min.0
  parallel (src.s0.y, 0, 8) {
   let t247 = input.extent.0.required*src.s0.y
   let t246 = (input.stride.1*src.s0.y) + t237
   for (src.s0.x.x, 0, t243) {
    src[ramp((src.s0.x.x*32) + t247, 1, 32)] = int32x32(input[ramp((src.s0.x.x*32) + t246, 1, 32)])
   }
   if (t238) {
    let t248 = (input.stride.1*src.s0.y) + t240
    let t249 = (input.extent.0.required*src.s0.y) + t244
    for (src.s0.x.xi, 0, t245) {
     src[src.s0.x.xi + t249] = int32(input[src.s0.x.xi + t248])
    }
   }
  }
 }
 produce output {
  consume src {
   let t267 = input.extent.0.required*3
   let t268 = output.extent.0/32
   let t269 = t268*32
   let t270 = input.extent.0.required*5
   let t271 = input.extent.0.required*6
   let t272 = input.extent.0.required*7
   let t273 = output.min.1*output.stride.1
   let t274 = output.extent.0 % 32
   let t256 = t274 != 0
   let t260 = ((t268*16) + input.extent.0.required)*2
   let t259 = ((t268*8) + input.extent.0.required)*4
   let t266 = t269 - t273
   let t255 = 0 - t273
   parallel (output.s0.y.rebased, 0, output.extent.1) {
    let t275 = output.min.1 + output.s0.y.rebased
    for (output.s0.x.x, 0, t268) {
     let t181 = src[ramp(output.s0.x.x*32, 1, 32) aligned(32, 0)]
     let t182 = src[ramp(((output.s0.x.x*8) + input.extent.0.required)*4, 1, 32) aligned(4, 0)]
     let t184 = src[ramp(((output.s0.x.x*16) + input.extent.0.required)*2, 1, 32) aligned(2, 0)]
     let t185 = src[ramp((output.s0.x.x*32) + t271, 1, 32) aligned(2, 0)]
     let t186 = (t184*x32(83)) + (t185*x32(36))
     let t188 = src[ramp((output.s0.x.x*32) + t272, 1, 32)]
     let t189 = src[ramp((output.s0.x.x*32) + t270, 1, 32)]
     let t190 = src[ramp((output.s0.x.x*32) + input.extent.0.required, 1, 32)]
     let t191 = src[ramp((output.s0.x.x*32) + t267, 1, 32)]
     let t192 = (t191*x32(75)) + ((t190*x32(89)) + ((t188*x32(18)) + (t189*x32(50))))
     let t194 = (t184*x32(36)) + (t185*x32(-83))
     let t196 = (t191*x32(-18)) + ((t190*x32(75)) + ((t188*x32(-50)) + (t189*x32(-89))))
     let t198 = (t191*x32(-89)) + ((t190*x32(50)) + ((t188*x32(75)) + (t189*x32(18))))
     let t200 = (t191*x32(-50)) + ((t190*x32(18)) + ((t188*x32(-89)) + (t189*x32(75))))
     let t223 = t181 + t182
     let t224 = ((t223*x32(65)) + t186) + x32(64)
     let t225 = t181 - t182
     let t226 = ((t225*x32(65)) + t194) + x32(64)
     let t227 = ((t225*x32(65)) - t194) + x32(64)
     let t228 = ((t223*x32(65)) - t186) + x32(64)
     output[ramp((output.s0.x.x*32) + ((output.stride.1*t275) + t255), 1, 32)] = select(t275 == 0, int16x32(max(min((int32x32)shift_right(t192 + t224, x32((uint32)7)), x32(32767)), x32(-32768))), select(t275 == 1, int16x32(max(min((int32x32)shift_right(t196 + t226, x32((uint32)7)), x32(32767)), x32(-32768))), select(t275 == 2, int16x32(max(min((int32x32)shift_right(t198 + t227, x32((uint32)7)), x32(32767)), x32(-32768))), select(t275 == 3, int16x32(max(min((int32x32)shift_right(t200 + t228, x32((uint32)7)), x32(32767)), x32(-32768))), select(t275 == 4, int16x32(max(min((int32x32)shift_right(t228 - t200, x32((uint32)7)), x32(32767)), x32(-32768))), select(t275 == 5, int16x32(max(min((int32x32)shift_right(t227 - t198, x32((uint32)7)), x32(32767)), x32(-32768))), select(t275 == 6, int16x32(max(min((int32x32)shift_right(t226 - t196, x32((uint32)7)), x32(32767)), x32(-32768))), int16x32(max(min((int32x32)shift_right(t224 - t192, x32((uint32)7)), x32(32767)), x32(-32768))))))))))
    }
    if (t256) {
     let t277 = t269 + t272
     let t276 = t269 + t271
     let t278 = t269 + t270
     let t280 = t267 + t269
     let t281 = output.min.1 + output.s0.y.rebased
     let t279 = input.extent.0.required + t269
     for (output.s0.x.xi, 0, t274) {
      let t202 = src[output.s0.x.xi + t269]
      let t203 = src[output.s0.x.xi + t259]
      let t205 = src[output.s0.x.xi + t260]
      let t206 = src[output.s0.x.xi + t276]
      let t207 = (t205*83) + (t206*36)
      let t209 = src[output.s0.x.xi + t277]
      let t210 = src[output.s0.x.xi + t278]
      let t211 = src[output.s0.x.xi + t279]
      let t212 = src[output.s0.x.xi + t280]
      let t213 = (t212*75) + ((t211*89) + ((t209*18) + (t210*50)))
      let t215 = (t205*36) + (t206*-83)
      let t217 = (t212*-18) + ((t211*75) + ((t209*-50) + (t210*-89)))
      let t219 = (t212*-89) + ((t211*50) + ((t209*75) + (t210*18)))
      let t221 = (t212*-50) + ((t211*18) + ((t209*-89) + (t210*75)))
      let t230 = t202 + t203
      let t231 = (t230*65) + t207
      let t232 = t202 - t203
      let t233 = (t232*65) + t215
      let t234 = (t232*65) - t215
      let t235 = (t230*65) - t207
      output[((output.stride.1*t281) + t266) + output.s0.x.xi] = select(t281 == 0, int16(max(min(((t213 + t231) + 64)/128, 32767), -32768)), select(t281 == 1, int16(max(min(((t217 + t233) + 64)/128, 32767), -32768)), select(t281 == 2, int16(max(min(((t219 + t234) + 64)/128, 32767), -32768)), select(t281 == 3, int16(max(min(((t221 + t235) + 64)/128, 32767), -32768)), select(t281 == 4, int16(max(min(((t235 - t221) + 64)/128, 32767), -32768)), select(t281 == 5, int16(max(min(((t234 - t219) + 64)/128, 32767), -32768)), select(t281 == 6, int16(max(min(((t233 - t217) + 64)/128, 32767), -32768)), int16(max(min(((t231 - t213) + 64)/128, 32767), -32768)))))))))
     }
    }
   }
  }
 }
 free src
}
}


