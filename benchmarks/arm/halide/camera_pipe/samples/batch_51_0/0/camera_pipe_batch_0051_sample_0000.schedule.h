#ifndef camera_pipe_batch_0051_sample_0000_SCHEDULE_H
#define camera_pipe_batch_0051_sample_0000_SCHEDULE_H

// MACHINE GENERATED -- DO NOT EDIT
// This schedule was automatically generated by Adams2019
// for target=x86-64-linux-avx-avx2-avx512-avx512_sapphirerapids-avx512_skylake-disable_llvm_loop_opt-f16c-fma-sse41  // NOLINT
// with machine_params=10,16777216,40

#include "Halide.h"


inline void apply_schedule_camera_pipe_batch_0051_sample_0000(
    ::Halide::Pipeline pipeline,
    ::Halide::Target target
) {
    using ::Halide::Func;
    using ::Halide::MemoryType;
    using ::Halide::RVar;
    using ::Halide::TailStrategy;
    using ::Halide::Var;
    Func processed = pipeline.get_func(37);
    Func sharpened = pipeline.get_func(36);
    Func sharpen_strength_x32 = pipeline.get_func(35);
    Func mask = pipeline.get_func(34);
    Func unsharp = pipeline.get_func(33);
    Func unsharp_y = pipeline.get_func(32);
    Func f28 = pipeline.get_func(31);
    Func f27 = pipeline.get_func(30);
    Func output = pipeline.get_func(29);
    Func f25 = pipeline.get_func(28);
    Func f24 = pipeline.get_func(27);
    Func f8 = pipeline.get_func(26);
    Func f6 = pipeline.get_func(25);
    Func f23 = pipeline.get_func(24);
    Func f10 = pipeline.get_func(23);
    Func f5 = pipeline.get_func(22);
    Func f22 = pipeline.get_func(21);
    Func f21 = pipeline.get_func(20);
    Func f20 = pipeline.get_func(19);
    Func f19 = pipeline.get_func(18);
    Func f18 = pipeline.get_func(17);
    Func f9 = pipeline.get_func(16);
    Func f17 = pipeline.get_func(15);
    Func f12 = pipeline.get_func(14);
    Func f13 = pipeline.get_func(13);
    Func f11 = pipeline.get_func(12);
    Func f7 = pipeline.get_func(11);
    Func f3 = pipeline.get_func(10);
    Func f4 = pipeline.get_func(9);
    Func f2 = pipeline.get_func(8);
    Func deinterleaved = pipeline.get_func(7);
    Func f1 = pipeline.get_func(6);
    Func f0 = pipeline.get_func(5);
    Func f26 = pipeline.get_func(3);
    Func curve = pipeline.get_func(0);
    Var v0(processed.get_schedule().dims()[0].var);
    Var v0i("v0i");
    Var v0ii("v0ii");
    Var v1(processed.get_schedule().dims()[1].var);
    Var v1i("v1i");
    Var v1ii("v1ii");
    Var v2(processed.get_schedule().dims()[2].var);
    processed
        .split(v0, v0, v0i, 704, TailStrategy::ShiftInwards)
        .split(v1, v1, v1i, 62, TailStrategy::ShiftInwards)
        .split(v1i, v1i, v1ii, 2, TailStrategy::ShiftInwards)
        .split(v0i, v0i, v0ii, 64, TailStrategy::ShiftInwards)
        .unroll(v0i)
        .vectorize(v0ii)
        .compute_root()
        .reorder({v0ii, v0i, v1ii, v2, v1i, v0, v1})
        .fuse(v0, v1, v0)
        .parallel(v0);
    sharpened
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 64, TailStrategy::RoundUp)
        .unroll(v0)
        .vectorize(v0i)
        .compute_at(processed, v1ii)
        .reorder({v0i, v0, v1, v2});
    sharpen_strength_x32
        .compute_root();
    mask
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 64, TailStrategy::RoundUp)
        .vectorize(v0i)
        .compute_at(sharpened, v0)
        .reorder({v0i, v0, v1, v2});
    unsharp
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 64, TailStrategy::RoundUp)
        .unroll(v0)
        .vectorize(v0i)
        .compute_at(processed, v1ii)
        .store_at(processed, v1i)
        .reorder({v0i, v0, v1, v2});
    unsharp_y
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 64, TailStrategy::RoundUp)
        .unroll(v0)
        .vectorize(v0i)
        .compute_at(processed, v1ii)
        .reorder({v0i, v0, v1, v2});
    f28
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 64, TailStrategy::RoundUp)
        .vectorize(v0i)
        .compute_at(processed, v1i)
        .store_at(processed, v0)
        .reorder({v0i, v0, v1, v2});
    output
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
        .unroll(v0)
        .unroll(v2)
        .vectorize(v0i)
        .compute_at(f28, v0)
        .reorder({v0i, v0, v1, v2});
    f25
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
        .vectorize(v0i)
        .compute_at(processed, v1i)
        .store_at(processed, v0)
        .reorder({v0i, v0, v1});
    f8
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
        .vectorize(v0i)
        .compute_at(processed, v1i)
        .store_at(processed, v0)
        .reorder({v0i, v0, v1});
    f6
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
        .vectorize(v0i)
        .compute_at(processed, v1i)
        .store_at(processed, v0)
        .reorder({v0i, v0, v1});
    f10
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
        .vectorize(v0i)
        .compute_at(processed, v1i)
        .store_at(processed, v0)
        .reorder({v0i, v0, v1});
    f5
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
        .vectorize(v0i)
        .compute_at(processed, v1i)
        .store_at(processed, v0)
        .reorder({v0i, v0, v1});
    f22
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
        .vectorize(v0i)
        .compute_at(processed, v1i)
        .store_at(processed, v0)
        .reorder({v0i, v0, v1});
    f21
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
        .vectorize(v0i)
        .compute_at(processed, v1i)
        .store_at(processed, v0)
        .reorder({v0i, v0, v1});
    f20
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
        .vectorize(v0i)
        .compute_at(processed, v1i)
        .store_at(processed, v0)
        .reorder({v0i, v0, v1});
    f19
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
        .vectorize(v0i)
        .compute_at(processed, v1i)
        .store_at(processed, v0)
        .reorder({v0i, v0, v1});
    f9
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
        .vectorize(v0i)
        .compute_at(processed, v1i)
        .store_at(processed, v0)
        .reorder({v0i, v0, v1});
    f12
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
        .vectorize(v0i)
        .compute_at(processed, v1i)
        .store_at(processed, v0)
        .reorder({v0i, v0, v1});
    f13
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
        .vectorize(v0i)
        .compute_at(processed, v1i)
        .store_at(processed, v0)
        .reorder({v0i, v0, v1});
    f11
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
        .vectorize(v0i)
        .compute_at(processed, v1i)
        .store_at(processed, v0)
        .reorder({v0i, v0, v1});
    f7
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
        .vectorize(v0i)
        .compute_at(processed, v1i)
        .store_at(processed, v0)
        .reorder({v0i, v0, v1});
    f3
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
        .vectorize(v0i)
        .compute_at(processed, v1i)
        .store_at(processed, v0)
        .reorder({v0i, v0, v1});
    f4
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
        .vectorize(v0i)
        .compute_at(processed, v1i)
        .store_at(processed, v0)
        .reorder({v0i, v0, v1});
    f2
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
        .vectorize(v0i)
        .compute_at(processed, v1i)
        .store_at(processed, v0)
        .reorder({v0i, v0, v1});
    f1
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 64, TailStrategy::ShiftInwards)
        .split(v0i, v0i, v0ii, 32, TailStrategy::ShiftInwards)
        .unroll(v0i)
        .vectorize(v0ii)
        .compute_at(processed, v1i)
        .store_at(processed, v0)
        .reorder({v0ii, v0i, v1, v0});
    f0
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 32, TailStrategy::ShiftInwards)
        .unroll(v0)
        .unroll(v1)
        .vectorize(v0i)
        .compute_at(f1, v1)
        .store_at(f1, v0)
        .reorder({v0i, v0, v1});
    f26
        .split(v0, v0, v0i, 32, TailStrategy::GuardWithIf)
        .vectorize(v0i)
        .compute_root()
        .reorder({v0i, v0, v1})
        .parallel(v1);
    curve
        .split(v0, v0, v0i, 64, TailStrategy::RoundUp)
        .vectorize(v0i)
        .compute_root()
        .reorder({v0i, v0})
        .parallel(v0);

}

#endif  // camera_pipe_batch_0051_sample_0000_SCHEDULE_H
