module name=camera_pipe_batch_0051_sample_0000, target=x86-64-linux-avx-avx2-avx512-avx512_sapphirerapids-avx512_skylake-disable_llvm_loop_opt-f16c-fma-sse41
external_plus_metadata func camera_pipe_batch_0051_sample_0000 (input, matrix_3200, matrix_7000, color_temp, gamma, contrast, sharpen_strength, blackLevel, whiteLevel, processed) {
assert((uint64)reinterpret((halide_buffer_t *)processed.buffer) != (uint64)0, halide_error_buffer_argument_is_null("processed"))
assert((uint64)reinterpret((halide_buffer_t *)matrix_7000.buffer) != (uint64)0, halide_error_buffer_argument_is_null("matrix_7000"))
assert((uint64)reinterpret((halide_buffer_t *)matrix_3200.buffer) != (uint64)0, halide_error_buffer_argument_is_null("matrix_3200"))
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let matrix_3200 = (void *)_halide_buffer_get_host((halide_buffer_t *)matrix_3200.buffer)
let matrix_3200.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)matrix_3200.buffer)
let matrix_3200.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)matrix_3200.buffer)
let matrix_3200.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)matrix_3200.buffer)
let matrix_3200.min.0 = _halide_buffer_get_min((halide_buffer_t *)matrix_3200.buffer, 0)
let matrix_3200.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)matrix_3200.buffer, 0)
let matrix_3200.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)matrix_3200.buffer, 0)
let matrix_3200.min.1 = _halide_buffer_get_min((halide_buffer_t *)matrix_3200.buffer, 1)
let matrix_3200.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)matrix_3200.buffer, 1)
let matrix_3200.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)matrix_3200.buffer, 1)
let matrix_7000 = (void *)_halide_buffer_get_host((halide_buffer_t *)matrix_7000.buffer)
let matrix_7000.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)matrix_7000.buffer)
let matrix_7000.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)matrix_7000.buffer)
let matrix_7000.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)matrix_7000.buffer)
let matrix_7000.min.0 = _halide_buffer_get_min((halide_buffer_t *)matrix_7000.buffer, 0)
let matrix_7000.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)matrix_7000.buffer, 0)
let matrix_7000.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)matrix_7000.buffer, 0)
let matrix_7000.min.1 = _halide_buffer_get_min((halide_buffer_t *)matrix_7000.buffer, 1)
let matrix_7000.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)matrix_7000.buffer, 1)
let matrix_7000.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)matrix_7000.buffer, 1)
let processed = (void *)_halide_buffer_get_host((halide_buffer_t *)processed.buffer)
let processed.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)processed.buffer)
let processed.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)processed.buffer)
let processed.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)processed.buffer)
let processed.min.0 = _halide_buffer_get_min((halide_buffer_t *)processed.buffer, 0)
let processed.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)processed.buffer, 0)
let processed.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)processed.buffer, 0)
let processed.min.1 = _halide_buffer_get_min((halide_buffer_t *)processed.buffer, 1)
let processed.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)processed.buffer, 1)
let processed.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)processed.buffer, 1)
let processed.min.2 = _halide_buffer_get_min((halide_buffer_t *)processed.buffer, 2)
let processed.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)processed.buffer, 2)
let processed.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)processed.buffer, 2)
let input.extent.0.required.s = ((min(max(max(-704 - processed.extent.0, processed.extent.0 + -1)/704, 0)*704, processed.extent.0 + -704) + processed.min.0)/2) - (((min(processed.extent.0, 704) + processed.min.0) + -707)/2)
let input.extent.1.required.s = let t19605 = (0 < processed.extent.0) in (let t19606 = (((((processed.extent.0 + 703)/704)*((processed.extent.1 + 61)/62)) + -1)/((processed.extent.0 + 703)/704)) in (((min(select(t19605, t19606, 0)*62, processed.extent.1 + -62) + processed.min.1)/2) - (((min(select(t19605, 0, t19606)*62, processed.extent.1 + -62) + processed.min.1) + -3)/2)))
let input.min.1.required.s = min(select(0 < processed.extent.0, 0, ((((processed.extent.0 + 703)/704)*((processed.extent.1 + 61)/62)) + -1)/((processed.extent.0 + 703)/704))*62, processed.extent.1 + -62)
let processed.extent.0.required.s = min(max(max(-704 - processed.extent.0, processed.extent.0 + -1)/704, 0)*704, processed.extent.0 + -704)
let processed.extent.1.required.s.s = min(select(0 < processed.extent.0, ((((processed.extent.0 + 703)/704)*((processed.extent.1 + 61)/62)) + -1)/((processed.extent.0 + 703)/704), 0)*62, processed.extent.1 + -62)
let processed.stride.2.required = (max(processed.extent.0.required.s, 0) + 704)*((processed.extent.1.required.s.s - input.min.1.required.s) + 62)
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 16, 2, (halide_dimension_t *)make_struct(((((min(processed.extent.0, 704) + processed.min.0) + -707)/2)*2) + 14, (input.extent.0.required.s*2) + 712, 1, 0, ((((input.min.1.required.s + processed.min.1) + -3)/2)*2) + 10, (input.extent.1.required.s*2) + 70, (input.extent.0.required.s*2) + 712, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)matrix_3200.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)matrix_3200.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)matrix_3200.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 2, (halide_dimension_t *)make_struct(0, 4, 1, 0, 0, 3, 4, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)matrix_7000.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)matrix_7000.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)matrix_7000.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 2, (halide_dimension_t *)make_struct(0, 4, 1, 0, 0, 3, 4, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)processed.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)processed.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)processed.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 3, (halide_dimension_t *)make_struct((min(processed.extent.0, 704) + processed.min.0) + -704, max(processed.extent.0.required.s, 0) + 704, 1, 0, input.min.1.required.s + processed.min.1, (processed.extent.1.required.s.s - input.min.1.required.s) + 62, max(processed.extent.0.required.s, 0) + 704, 0, processed.min.2, processed.extent.2, processed.stride.2.required, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)processed.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)matrix_7000.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)matrix_3200.buffer))))) {
 assert(input.type == (uint32)69633, halide_error_bad_type("Input buffer input", input.type, (uint32)69633))
 assert(input.dimensions == 2, halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
 assert(matrix_3200.type == (uint32)73730, halide_error_bad_type("Input buffer matrix_3200", matrix_3200.type, (uint32)73730))
 assert(matrix_3200.dimensions == 2, halide_error_bad_dimensions("Input buffer matrix_3200", matrix_3200.dimensions, 2))
 assert(matrix_7000.type == (uint32)73730, halide_error_bad_type("Input buffer matrix_7000", matrix_7000.type, (uint32)73730))
 assert(matrix_7000.dimensions == 2, halide_error_bad_dimensions("Input buffer matrix_7000", matrix_7000.dimensions, 2))
 assert(processed.type == (uint32)67585, halide_error_bad_type("Output buffer processed", processed.type, (uint32)67585))
 assert(processed.dimensions == 3, halide_error_bad_dimensions("Output buffer processed", processed.dimensions, 3))
 assert(((input.min.0 + -14) <= ((((min(processed.extent.0, 704) + processed.min.0) + -707)/2)*2)) && (((((((min(processed.extent.0, 704) + processed.min.0) + -707)/2) + input.extent.0.required.s)*2) + 726) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, ((((min(processed.extent.0, 704) + processed.min.0) + -707)/2)*2) + 14, (((((min(processed.extent.0, 704) + processed.min.0) + -707)/2) + input.extent.0.required.s)*2) + 725, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert(((input.min.1 + -10) <= ((((input.min.1.required.s + processed.min.1) + -3)/2)*2)) && (((((((input.min.1.required.s + processed.min.1) + -3)/2) + input.extent.1.required.s)*2) + 80) <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, ((((input.min.1.required.s + processed.min.1) + -3)/2)*2) + 10, (((((input.min.1.required.s + processed.min.1) + -3)/2) + input.extent.1.required.s)*2) + 79, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert((matrix_3200.min.0 <= 0) && (4 <= (matrix_3200.extent.0 + matrix_3200.min.0)), halide_error_access_out_of_bounds("Input buffer matrix_3200", 0, 0, 3, matrix_3200.min.0, (matrix_3200.extent.0 + matrix_3200.min.0) + -1))
 assert(0 <= matrix_3200.extent.0, halide_error_buffer_extents_negative("Input buffer matrix_3200", 0, matrix_3200.extent.0))
 assert((matrix_3200.min.1 <= 0) && (3 <= (matrix_3200.extent.1 + matrix_3200.min.1)), halide_error_access_out_of_bounds("Input buffer matrix_3200", 1, 0, 2, matrix_3200.min.1, (matrix_3200.extent.1 + matrix_3200.min.1) + -1))
 assert(0 <= matrix_3200.extent.1, halide_error_buffer_extents_negative("Input buffer matrix_3200", 1, matrix_3200.extent.1))
 assert((matrix_7000.min.0 <= 0) && (4 <= (matrix_7000.extent.0 + matrix_7000.min.0)), halide_error_access_out_of_bounds("Input buffer matrix_7000", 0, 0, 3, matrix_7000.min.0, (matrix_7000.extent.0 + matrix_7000.min.0) + -1))
 assert(0 <= matrix_7000.extent.0, halide_error_buffer_extents_negative("Input buffer matrix_7000", 0, matrix_7000.extent.0))
 assert((matrix_7000.min.1 <= 0) && (3 <= (matrix_7000.extent.1 + matrix_7000.min.1)), halide_error_access_out_of_bounds("Input buffer matrix_7000", 1, 0, 2, matrix_7000.min.1, (matrix_7000.extent.1 + matrix_7000.min.1) + -1))
 assert(0 <= matrix_7000.extent.1, halide_error_buffer_extents_negative("Input buffer matrix_7000", 1, matrix_7000.extent.1))
 assert(max(max(processed.extent.0.required.s, 0) + min(processed.extent.0, 704), 704) <= processed.extent.0, halide_error_access_out_of_bounds("Output buffer processed", 0, (min(processed.extent.0, 704) + processed.min.0) + -704, ((max(processed.extent.0.required.s, 0) + min(processed.extent.0, 704)) + processed.min.0) + -1, processed.min.0, (processed.extent.0 + processed.min.0) + -1))
 assert((0 <= input.min.1.required.s) && ((processed.extent.1.required.s.s + 62) <= processed.extent.1), halide_error_access_out_of_bounds("Output buffer processed", 1, input.min.1.required.s + processed.min.1, (processed.extent.1.required.s.s + processed.min.1) + 61, processed.min.1, (processed.extent.1 + processed.min.1) + -1))
 assert(0 <= processed.extent.1, halide_error_buffer_extents_negative("Output buffer processed", 1, processed.extent.1))
 assert(0 <= processed.extent.2, halide_error_buffer_extents_negative("Output buffer processed", 2, processed.extent.2))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 assert(matrix_3200.stride.0 == 1, halide_error_constraint_violated("matrix_3200.stride.0", matrix_3200.stride.0, "1", 1))
 assert(matrix_7000.stride.0 == 1, halide_error_constraint_violated("matrix_7000.stride.0", matrix_7000.stride.0, "1", 1))
 assert(processed.stride.0 == 1, halide_error_constraint_violated("processed.stride.0", processed.stride.0, "1", 1))
 let input.total_extent.1 = int64(input.extent.1)*int64(input.extent.0)
 let matrix_3200.total_extent.1 = int64(matrix_3200.extent.1)*int64(matrix_3200.extent.0)
 let matrix_7000.total_extent.1 = int64(matrix_7000.extent.1)*int64(matrix_7000.extent.0)
 let processed.total_extent.1 = int64(processed.extent.1)*int64(processed.extent.0)
 let processed.total_extent.2 = processed.total_extent.1*int64(processed.extent.2)
 assert(uint64(input.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", uint64(input.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(input.extent.1)*int64(input.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", (uint64)abs(int64(input.extent.1)*int64(input.stride.1)), (uint64)2147483647))
 assert(input.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
 assert(uint64(matrix_3200.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("matrix_3200", uint64(matrix_3200.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(matrix_3200.extent.1)*int64(matrix_3200.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("matrix_3200", (uint64)abs(int64(matrix_3200.extent.1)*int64(matrix_3200.stride.1)), (uint64)2147483647))
 assert(matrix_3200.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("matrix_3200", matrix_3200.total_extent.1, (int64)2147483647))
 assert(uint64(matrix_7000.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("matrix_7000", uint64(matrix_7000.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(matrix_7000.extent.1)*int64(matrix_7000.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("matrix_7000", (uint64)abs(int64(matrix_7000.extent.1)*int64(matrix_7000.stride.1)), (uint64)2147483647))
 assert(matrix_7000.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("matrix_7000", matrix_7000.total_extent.1, (int64)2147483647))
 assert(uint64(processed.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("processed", uint64(processed.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(processed.extent.1)*int64(processed.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("processed", (uint64)abs(int64(processed.extent.1)*int64(processed.stride.1)), (uint64)2147483647))
 assert(processed.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("processed", processed.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(processed.extent.2)*int64(processed.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("processed", (uint64)abs(int64(processed.extent.2)*int64(processed.stride.2)), (uint64)2147483647))
 assert(processed.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("processed", processed.total_extent.2, (int64)2147483647))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert(!matrix_3200.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer matrix_3200"))
 assert(!matrix_7000.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer matrix_7000"))
 assert(!processed.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer processed"))
 assert(input != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer input"))
 assert(matrix_3200 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer matrix_3200"))
 assert(matrix_7000 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer matrix_7000"))
 assert(processed != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer processed"))
 allocate curve[uint8 * 1024]
 produce curve {
  let t19701 = (float32)pow_f32(2.000000f, (float32)contrast*0.010000f)
  let t19700 = 1.000000f/(float32)gamma
  let t19699 = 1.000000f/float32((whiteLevel - blackLevel))
  parallel (curve.s0.v0.v0, 0, 16) {
   let t19259 = (float32x64)pow_f32(max(min(float32x64(ramp((curve.s0.v0.v0*64) - blackLevel, 1, 64))*x64(t19699), x64(1.000000f)), x64(0.000000f)), x64(t19700))
   curve[ramp(curve.s0.v0.v0*64, 1, 64) aligned(64, 0)] = select(x64(blackLevel) < ramp(curve.s0.v0.v0*64, 1, 64), select(x64(whiteLevel) < ramp(curve.s0.v0.v0*64, 1, 64), x64((uint8)255), uint8x64((max(min(select(x64(0.500000f) < t19259, x64(1.000000f) - ((x64(1.000000f) - t19259)*(((x64(1.000000f) - t19259)*x64((t19701*2.000000f) + -2.000000f)) + x64(2.000000f - t19701))), ((t19259*x64((t19701*2.000000f) + -2.000000f)) + x64(2.000000f - t19701))*t19259)*x64(255.000000f), x64(254.500000f)), x64(-0.500000f)) + x64(0.500000f)))), x64((uint8)0))
  }
 }
 allocate f26[int16 * 12]
 produce f26 {
  let t19706 = 1.000000f/(float32)color_temp
  let t19705 = (t19706*5894.736816f) + -0.842105f
  let t19703 = (t19706*-5894.736816f) + 1.842105f
  let t19704 = (matrix_7000.min.1*matrix_7000.stride.1) + matrix_7000.min.0
  let t19702 = (matrix_3200.min.1*matrix_3200.stride.1) + matrix_3200.min.0
  parallel (f26.s0.v1, 0, 3) {
   let t19709 = f26.s0.v1*4
   let t19708 = (f26.s0.v1*matrix_7000.stride.1) - t19704
   let t19707 = (f26.s0.v1*matrix_3200.stride.1) - t19702
   for (f26.s0.v0.v0i, 0, 4) {
    f26[f26.s0.v0.v0i + t19709] = int16((((matrix_3200[f26.s0.v0.v0i + t19707]*t19703) + (matrix_7000[f26.s0.v0.v0i + t19708]*t19705))*256.000000f))
   }
  }
 }
 allocate sharpen_strength_x32[uint8 * 1]
 produce sharpen_strength_x32 {
  sharpen_strength_x32[0] = uint8(max(min((float32)sharpen_strength*32.000000f, 255.000000f), 0.000000f))
 }
 let processed.s0.v0.v0.v0.loop_extent = ((processed.extent.0 + 703)/704)*((processed.extent.1 + 61)/62)
 produce processed {
  consume sharpen_strength_x32 {
   consume f26 {
    consume curve {
     let t19710 = (processed.extent.0 + 703)/704
     let t19711 = ((12 - input.min.1)*input.stride.1) - input.min.0
     let t19712 = 0 - ((processed.min.2*processed.stride.2) + (processed.min.1*processed.stride.1))
     parallel (processed.s0.v0.v0.v0, 0, processed.s0.v0.v0.v0.loop_extent) {
      let processed.s0.v0.v0i.base.s = min((processed.s0.v0.v0.v0 % t19710)*704, processed.extent.0 + -704)
      let processed.s0.v1.v1i.base.s = min((processed.s0.v0.v0.v0/t19710)*62, processed.extent.1 + -62)
      let f1.v1.min_realized = min(min((((processed.min.1 + processed.s0.v1.v1i.base.s) + -1)/2)*2, ((((processed.min.1 + processed.s0.v1.v1i.base.s) + -3)/2)*2) + 1), (((processed.min.1 + processed.s0.v1.v1i.base.s) + -3)/2)*2)
      let f1.v0.extent_realized.s = max(max((((processed.min.0 + processed.s0.v0.v0i.base.s) + 765)/2)*2, ((((processed.min.0 + processed.s0.v0.v0i.base.s) + 763)/2)*2) + 1), (((processed.min.0 + processed.s0.v0.v0i.base.s)/2)*2) + 707) - ((((processed.min.0 + processed.s0.v0.v0i.base.s) + -3)/2)*2)
      allocate f1[int16 * (f1.v0.extent_realized.s + 1) * (((((processed.min.1 + processed.s0.v1.v1i.base.s)/2)*2) - f1.v1.min_realized) + 66)] in Stack
      allocate f2[int16 * 13090] in Stack
      allocate f4[int16 * 13475] in Stack
      allocate f3[int16 * 13475] in Stack
      allocate f7[int16 * 770] in Stack
      allocate f11[int16 * 12672] in Stack
      allocate f13[int16 * 13090] in Stack
      allocate f12[int16 * 12672] in Stack
      allocate f9[int16 * 12672] in Stack
      allocate f19[int16 * 1536] in Stack
      allocate f20[int16 * 736 * (((0 - ((processed.min.1 + processed.s0.v1.v1i.base.s) % 2))/2) + 33)] in Stack
      allocate f21[int16 * 736 * (((0 - ((processed.min.1 + processed.s0.v1.v1i.base.s) % 2))/2) + 33)] in Stack
      allocate f22[int16 * 1536] in Stack
      allocate f5[int16 * 13090] in Stack
      allocate f10[int16 * 12672] in Stack
      allocate f6[int16 * 12672] in Stack
      allocate f8[int16 * 12672] in Stack
      allocate f25[int16 * 1536] in Stack
      allocate f28[uint8 * 768 * 4 * processed.extent.2] in Stack
      let t19724 = processed.min.0 + processed.s0.v0.v0i.base.s
      let t19725 = processed.min.1 + processed.s0.v1.v1i.base.s
      let t19726 = t19725 % 2
      let t19721 = (t19724 % 2) == 0
      let t19717 = (t19725 + -1)/2
      let t19718 = (t19725 + -3)/2
      let t19719 = (t19724 + -1)/2
      let t19716 = (t19724 + -3)/2
      let t19722 = t19724/2
      let t19723 = processed.s0.v0.v0i.base.s + t19712
      for (processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased, 0, 35 - t19726) {
       let f8.s0.v1.min_2 = max((t19725 + -1)/2, ((t19725 + -5)/2) + processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased)
       let f5.s0.v1.min_2 = max((t19725 + -3)/2, ((t19725 + -5)/2) + processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased)
       let f7.s0.v1.min_2 = max((t19725 + -1)/2, ((t19725 + -3)/2) + processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased)
       let f3.s0.v1.min_2 = max(processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased, 0) + ((t19725 + -3)/2)
       produce f1 {
        let t19727 = (t19724 + -3)/2
        let t19728 = t19724/2
        let t19731 = min(processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased, 0) + 2
        let t19729 = processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased + 2
        for (f1.s0.v0.v0, 0, 12) {
         let f1.s0.v0.v0i.base.s = min((f1.s0.v0.v0*32) + t19727, t19728 + 322)
         allocate f0[int16 * 544] in Stack
         let t19732 = min(t19729, 1)*2
         let t19733 = f3.s0.v1.min_2*2
         let t19734 = (f1.s0.v0.v0i.base.s*2) + t19711
         for (f1.s0.v1.$n.rebased, 0, t19732 + 2) {
          produce f0 {
           let t19621 = f1.s0.v1.$n.rebased + t19733
           f0[ramp(((t19621 + 6) % 8)*68, 1, 32) aligned(68, 0)] = int16x32(input[ramp((((t19621 + -2)*input.stride.1) + t19734) + 14, 1, 32)])
           let t19622 = f1.s0.v1.$n.rebased + t19733
           f0[ramp((((t19622 + 6) % 8)*68) + 32, 1, 32) aligned(68, 32)] = int16x32(input[ramp((((t19622 + -2)*input.stride.1) + t19734) + 46, 1, 32)])
           let t19623 = f1.s0.v1.$n.rebased + t19733
           f0[ramp((((t19623 + 6) % 8)*68) + 36, 1, 32) aligned(68, 36)] = int16x32(input[ramp((((t19623 + -2)*input.stride.1) + t19734) + 50, 1, 32)])
          }
         }
         let t19740 = min(t19729, 1)
         let t19741 = f3.s0.v1.min_2 + t19740
         let t19735 = (t19731 - t19740)*2
         let t19739 = (f1.s0.v0.v0i.base.s - t19716)*2
         let t19737 = (f1.s0.v0.v0i.base.s*2) + t19711
         for (f1.s0.v1.$n.rebased, 0, t19735) {
          produce f0 {
           let t19625 = (t19741*2) + f1.s0.v1.$n.rebased
           f0[ramp((t19625 % 8)*68, 1, 32) aligned(68, 0)] = int16x32(input[ramp(((input.stride.1*t19625) + t19737) + 14, 1, 32)])
           let t19626 = (t19741*2) + f1.s0.v1.$n.rebased
           f0[ramp(((t19626 % 8)*68) + 32, 1, 32) aligned(68, 32)] = int16x32(input[ramp(((input.stride.1*t19626) + t19737) + 46, 1, 32)])
           let t19627 = (t19741*2) + f1.s0.v1.$n.rebased
           f0[ramp(((t19627 % 8)*68) + 36, 1, 32) aligned(68, 36)] = int16x32(input[ramp(((input.stride.1*t19627) + t19737) + 50, 1, 32)])
          }
          consume f0 {
           let t19629 = (t19741*2) + f1.s0.v1.$n.rebased
           let t19630 = (t19629 + 6) % 8
           f1[ramp((((((t19741*2) - f1.v1.min_realized) + f1.s0.v1.$n.rebased) + -2)*(f1.v0.extent_realized.s + 1)) + t19739, 1, 32)] = max(min(f0[ramp((t19630*68) + 2, 1, 32) aligned(68, 2)], max(f0[ramp(t19630*68, 1, 32) aligned(68, 0)], max(f0[ramp((t19630*68) + 4, 1, 32) aligned(68, 4)], max(f0[ramp((((t19629 + 4) % 8)*68) + 2, 1, 32) aligned(68, 2)], f0[ramp(((t19629 % 8)*68) + 2, 1, 32) aligned(68, 2)])))), x32((int16)0))
           let t19632 = (t19741*2) + f1.s0.v1.$n.rebased
           let t19633 = (t19632 + 6) % 8
           f1[ramp(((((((t19741*2) - f1.v1.min_realized) + f1.s0.v1.$n.rebased) + -2)*(f1.v0.extent_realized.s + 1)) + t19739) + 32, 1, 32)] = max(min(f0[ramp((t19633*68) + 34, 1, 32) aligned(68, 34)], max(f0[ramp((t19633*68) + 32, 1, 32) aligned(68, 32)], max(f0[ramp((t19633*68) + 36, 1, 32) aligned(68, 36)], max(f0[ramp((((t19632 + 4) % 8)*68) + 34, 1, 32) aligned(68, 34)], f0[ramp(((t19632 % 8)*68) + 34, 1, 32) aligned(68, 34)])))), x32((int16)0))
          }
         }
         free f0
        }
       }
       consume f1 {
        if (0 < processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased) {
         produce f2 {
          let t19742 = ((f7.s0.v1.min_2*2) - f1.v1.min_realized)*(f1.v0.extent_realized.s + 1)
          let t19743 = (f7.s0.v1.min_2 - t19717)*385
          for (f2.s0.v0.v0, 0, 12) {
           let f2.s0.v0.v0i.base = (f2.s0.v0.v0*32) + t19716
           let t19273 = f2.s0.v0.v0i.base - t19716
           f2[ramp(t19273 + t19743, 1, 32)] = f1[ramp(((t19273*2) + t19742) + 1, 2, 32)]
          }
         }
        }
        if (((t19725 + -9)/2) < (((t19725 + -7)/2) + processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased)) {
         produce f4 {
          let t19745 = (f3.s0.v1.min_2 - t19718)*385
          let t19744 = (((f3.s0.v1.min_2*2) - f1.v1.min_realized)*(f1.v0.extent_realized.s + 1)) + f1.v0.extent_realized.s
          for (f4.s0.v0.v0, 0, 12) {
           let f4.s0.v0.v0i.base = (f4.s0.v0.v0*32) + t19716
           let t19275 = f4.s0.v0.v0i.base - t19716
           f4[ramp(t19275 + t19745, 1, 32)] = f1[ramp(((t19275*2) + t19744) + 2, 2, 32)]
          }
         }
         produce f3 {
          let t19746 = ((f3.s0.v1.min_2*2) - f1.v1.min_realized)*(f1.v0.extent_realized.s + 1)
          let t19747 = (f3.s0.v1.min_2 - t19718)*385
          for (f3.s0.v0.v0, 0, 12) {
           let f3.s0.v0.v0i.base = (f3.s0.v0.v0*32) + t19716
           let t19276 = f3.s0.v0.v0i.base - t19716
           f3[ramp(t19276 + t19747, 1, 32)] = f1[ramp((t19276*2) + t19746, 2, 32)]
          }
         }
        }
        if (1 <= processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased) {
         consume f3 {
          consume f4 {
           consume f2 {
            if (0 < processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased) {
             produce f7 {
              let t19749 = (f7.s0.v1.min_2 % 2)*385
              let t19748 = f7.s0.v1.min_2 - t19718
              for (f7.s0.v0.v0, 0, 12) {
               let f7.s0.v0.v0i.base = (f7.s0.v0.v0*32) + t19716
               let t19278 = f7.s0.v0.v0i.base - t19716
               let t19280 = f3[ramp(((t19748*385) + t19278) + 1, 1, 32)]
               let t19281 = f3[ramp((t19748*385) + t19278, 1, 32)]
               let t19282 = f4[ramp(((t19748*385) + t19278) + -385, 1, 32)]
               let t19283 = f4[ramp((t19748*385) + t19278, 1, 32)]
               f7[ramp(t19278 + t19749, 1, 32)] = select((uint16x32)absd(t19280, t19281) < (uint16x32)absd(t19282, t19283), (int16x32)rounding_halving_add(t19280, t19281), (int16x32)rounding_halving_add(t19282, t19283))
              }
             }
            }
            if (((t19725 + -5)/2) < (((t19725 + -7)/2) + processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased)) {
             produce f11 {
              consume f7 {
               let t19753 = ((f8.s0.v1.min_2 + 1) % 2)*385
               let t19752 = (f8.s0.v1.min_2 % 2)*385
               let t19751 = (f8.s0.v1.min_2 - t19718)*385
               let t19750 = f8.s0.v1.min_2 - t19717
               for (f11.s0.v0.v0, 0, 12) {
                let f11.s0.v0.v0i.base = (f11.s0.v0.v0*32) + t19719
                let t19287 = f11.s0.v0.v0i.base - t19716
                let t19638 = (t19750*385) + t19287
                f11[ramp(((t19750*384) - t19719) + f11.s0.v0.v0i.base, 1, 32)] = (f4[ramp(t19287 + t19751, 1, 32)] - (int16x32)rounding_halving_add(f7[ramp(t19287 + t19752, 1, 32)], f7[ramp(t19287 + t19753, 1, 32)])) + (int16x32)rounding_halving_add(f2[ramp(t19638, 1, 32)], f2[ramp(t19638 + 385, 1, 32)])
               }
              }
             }
            }
            if (0 < processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased) {
             produce f13 {
              let t19754 = f5.s0.v1.min_2 - t19718
              for (f13.s0.v0.v0, 0, 12) {
               let f13.s0.v0.v0i.base = (f13.s0.v0.v0*32) + t19719
               let t19293 = ((t19754*385) - t19716) + f13.s0.v0.v0i.base
               let t19294 = f4[ramp(t19293 + -1, 1, 32)]
               let t19295 = f4[ramp(t19293, 1, 32)]
               let t19296 = f3[ramp(t19293 + 385, 1, 32)]
               let t19297 = f3[ramp(t19293, 1, 32)]
               f13[ramp(((t19754*385) - t19719) + f13.s0.v0.v0i.base, 1, 32)] = select((uint16x32)absd(t19294, t19295) < (uint16x32)absd(t19296, t19297), (int16x32)rounding_halving_add(t19294, t19295), (int16x32)rounding_halving_add(t19296, t19297))
              }
             }
            }
            if (((t19725 + -5)/2) < (((t19725 + -7)/2) + processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased)) {
             produce f12 {
              consume f13 {
               consume f7 {
                let t19758 = ((f8.s0.v1.min_2 + 1) % 2)*385
                let t19757 = (f8.s0.v1.min_2 % 2)*385
                let t19756 = (f8.s0.v1.min_2 - t19718)*385
                let t19755 = f8.s0.v1.min_2 - t19717
                for (f12.s0.v0.v0, 0, 12) {
                 let f12.s0.v0.v0i.base = (f12.s0.v0.v0*32) + t19719
                 let t19302 = f12.s0.v0.v0i.base - t19716
                 let t19304 = f2[ramp((t19755*385) + t19302, 1, 32)]
                 let t19305 = f2[ramp(((t19755*385) + t19302) + 384, 1, 32)]
                 let t19306 = f2[ramp(((t19755*385) + t19302) + -1, 1, 32)]
                 let t19307 = f2[ramp(((t19755*385) + t19302) + 385, 1, 32)]
                 let t19308 = f12.s0.v0.v0i.base - t19719
                 let t19309 = f13[ramp(t19308 + t19756, 1, 32)]
                 let t19641 = t19302 + t19757
                 let t19642 = t19302 + t19758
                 f12[ramp((t19755*384) + t19308, 1, 32)] = select((uint16x32)absd(t19304, t19305) < (uint16x32)absd(t19306, t19307), (t19309 - (int16x32)rounding_halving_add(f7[ramp(t19641, 1, 32)], f7[ramp(t19642 + -1, 1, 32)])) + (int16x32)rounding_halving_add(t19304, t19305), (t19309 - (int16x32)rounding_halving_add(f7[ramp(t19641 + -1, 1, 32)], f7[ramp(t19642, 1, 32)])) + (int16x32)rounding_halving_add(t19306, t19307))
                }
               }
              }
             }
             produce f9 {
              consume f7 {
               let t19760 = (f8.s0.v1.min_2 % 2)*385
               let t19761 = (f8.s0.v1.min_2 - t19718)*385
               let t19759 = f8.s0.v1.min_2 - t19717
               for (f9.s0.v0.v0, 0, 12) {
                let f9.s0.v0.v0i.base = (f9.s0.v0.v0*32) + t19719
                let t19314 = f9.s0.v0.v0i.base - t19716
                let t19643 = t19314 + t19760
                let t19644 = (t19759*385) + t19314
                f9[ramp(((t19759*384) - t19719) + f9.s0.v0.v0i.base, 1, 32)] = (f3[ramp(t19314 + t19761, 1, 32)] - (int16x32)rounding_halving_add(f7[ramp(t19643, 1, 32)], f7[ramp(t19643 + -1, 1, 32)])) + (int16x32)rounding_halving_add(f2[ramp(t19644 + -1, 1, 32)], f2[ramp(t19644, 1, 32)])
               }
              }
             }
            }
            produce f19 {
             consume f9 {
              consume f12 {
               consume f11 {
                let t19765 = (t19724 + -1)/2
                let t19766 = t19724/2
                let t19762 = min(processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased + t19726, 3)*2
                let t19764 = ((0 - (t19724 % 2))/2) + 1
                let t19763 = (max((t19725 % 2) + processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased, 3)*2) + t19725
                for (f19.s0.v1.rebased, 0, t19762 + -4) {
                 let t19770 = f19.s0.v1.rebased + t19763
                 let t19771 = (t19770 + 1) % 2
                 let t19767 = t19771 == 0
                 let t19769 = t19771*24
                 let t19768 = ((t19770 + -7)/2) - t19717
                 for (f19.s0.v0.v0, 0, 23) {
                  let t19321 = ((((f19.s0.v0.v0*32) + t19724) + 1) % 2) == 0
                  let t19324 = (f19.s0.v0.v0*16) + ((t19768*385) - t19716)
                  let t19326 = (f19.s0.v0.v0*16) + ((t19768*384) + t19764)
                  let t19647 = (t19768*24) + f19.s0.v0.v0
                  f19[ramp((f19.s0.v0.v0 + t19769)*32, 1, 32) aligned(32, 0)] = interleave_vectors(select(t19767, select(t19321, f9[ramp(t19647*16, 1, 16) aligned(16, 0)], f2[ramp(t19324 + t19765, 1, 16)]), select(t19321, f12[ramp(t19647*16, 1, 16) aligned(16, 0)], f11[ramp(t19647*16, 1, 16) aligned(16, 0)])), select(t19767, select(t19721, f9[ramp(t19326, 1, 16)], f2[ramp(t19324 + t19766, 1, 16)]), select(t19721, f12[ramp(t19326, 1, 16)], f11[ramp(t19326, 1, 16)])))
                 }
                }
               }
              }
             }
            }
            if (((t19725 + -5)/2) < (((t19725 + -7)/2) + processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased)) {
             produce f20 {
              consume f13 {
               let t19778 = t19724 % 2
               let t19774 = t19778 == 0
               let t19773 = (t19724 + -1)/2
               let t19776 = t19724/2
               let t19777 = (f8.s0.v1.min_2 - t19717)*23
               let t19772 = f8.s0.v1.min_2 - t19718
               let t19775 = ((0 - t19778)/2) + 1
               for (f20.s0.v0.v0, 0, 23) {
                let t19331 = (f20.s0.v0.v0*16) + ((t19772*385) - t19716)
                f20[ramp((f20.s0.v0.v0 + t19777)*32, 1, 32) aligned(32, 0)] = interleave_vectors(select(((((f20.s0.v0.v0*32) + t19724) + 1) % 2) == 0, f13[ramp((t19772*385) + (f20.s0.v0.v0*16), 1, 16)], f4[ramp(t19331 + t19773, 1, 16)]), select(t19774, f13[ramp((f20.s0.v0.v0*16) + ((t19772*385) + t19775), 1, 16)], f4[ramp(t19331 + t19776, 1, 16)]))
               }
              }
             }
             produce f21 {
              consume f7 {
               let t19782 = (t19724 % 2) == 0
               let t19781 = (t19724 + -1)/2
               let t19783 = t19724/2
               let t19784 = (f8.s0.v1.min_2 - t19717)*23
               let t19780 = f8.s0.v1.min_2 % 2
               let t19779 = f8.s0.v1.min_2 - t19718
               for (f21.s0.v0.v0, 0, 23) {
                let t19334 = (f21.s0.v0.v0*16) - t19716
                f21[ramp((f21.s0.v0.v0 + t19784)*32, 1, 32) aligned(32, 0)] = interleave_vectors(select(((((f21.s0.v0.v0*32) + t19724) + 1) % 2) == 0, f3[ramp(((t19779*385) + t19781) + t19334, 1, 16)], f7[ramp(((t19780*385) + t19781) + t19334, 1, 16)]), select(t19782, f3[ramp(((t19779*385) + t19783) + t19334, 1, 16)], f7[ramp(((t19780*385) + t19783) + t19334, 1, 16)]))
               }
              }
             }
            }
            produce f22 {
             consume f21 {
              consume f20 {
               let t19785 = min(processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased + t19726, 3)*2
               let t19786 = (max((t19725 % 2) + processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased, 3)*2) + t19725
               for (f22.s0.v1.rebased, 0, t19785 + -4) {
                let t19789 = f22.s0.v1.rebased + t19786
                let t19788 = (t19789 + 1) % 2
                let t19787 = ((t19789 + -7)/2) - t19717
                for (f22.s0.v0.v0, 0, 23) {
                 let t19655 = (t19787*23) + f22.s0.v0.v0
                 f22[ramp(((t19788*24) + f22.s0.v0.v0)*32, 1, 32) aligned(32, 0)] = select(t19788 == 0, f21[ramp(t19655*32, 1, 32) aligned(32, 0)], f20[ramp(t19655*32, 1, 32) aligned(32, 0)])
                }
               }
              }
             }
            }
            if (0 < processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased) {
             produce f5 {
              let t19791 = (t19724 + -3)/2
              let t19792 = ((f5.s0.v1.min_2 - t19718)*385) - ((t19724 + -1)/2)
              let t19790 = (((f5.s0.v1.min_2*2) - f1.v1.min_realized)*(f1.v0.extent_realized.s + 1)) + f1.v0.extent_realized.s
              for (f5.s0.v0.v0, 0, 12) {
               let f5.s0.v0.v0i.base = (f5.s0.v0.v0*32) + t19719
               f5[ramp(f5.s0.v0.v0i.base + t19792, 1, 32)] = f1[ramp((((f5.s0.v0.v0i.base - t19791)*2) + t19790) + 1, 2, 32)]
              }
             }
            }
            if (2 <= processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased) {
             consume f5 {
              consume f22 {
               consume f19 {
                consume f13 {
                 consume f7 {
                  if (((t19725 + -5)/2) < (((t19725 + -7)/2) + processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased)) {
                   produce f10 {
                    let t19794 = (f8.s0.v1.min_2 - t19717)*384
                    let t19793 = f8.s0.v1.min_2 - t19718
                    for (f10.s0.v0.v0, 0, 12) {
                     let f10.s0.v0.v0i.base = (f10.s0.v0.v0*32) + t19719
                     let t19345 = f10.s0.v0.v0i.base - t19719
                     let t19659 = (t19793*385) + t19345
                     f10[ramp(t19345 + t19794, 1, 32)] = (f4[ramp(((t19793*385) - t19716) + f10.s0.v0.v0i.base, 1, 32)] - (int16x32)rounding_halving_add(f13[ramp(t19659, 1, 32)], f13[ramp(t19659 + 1, 1, 32)])) + (int16x32)rounding_halving_add(f5[ramp(t19659, 1, 32)], f5[ramp(t19659 + 1, 1, 32)])
                    }
                   }
                   produce f6 {
                    let t19797 = (f8.s0.v1.min_2 - t19717)*384
                    let t19796 = ((f8.s0.v1.min_2 % 2)*385) - t19716
                    let t19795 = f8.s0.v1.min_2 - t19718
                    for (f6.s0.v0.v0, 0, 12) {
                     let f6.s0.v0.v0i.base = (f6.s0.v0.v0*32) + t19719
                     let t19349 = f6.s0.v0.v0i.base - t19719
                     let t19351 = f5[ramp((t19795*385) + t19349, 1, 32)]
                     let t19352 = f5[ramp(((t19795*385) + t19349) + -384, 1, 32)]
                     let t19353 = f5[ramp(((t19795*385) + t19349) + 1, 1, 32)]
                     let t19354 = f5[ramp(((t19795*385) + t19349) + -385, 1, 32)]
                     let t19355 = f7[ramp(f6.s0.v0.v0i.base + t19796, 1, 32)]
                     let t19660 = (t19795*385) + t19349
                     f6[ramp(t19349 + t19797, 1, 32)] = select((uint16x32)absd(t19351, t19352) < (uint16x32)absd(t19353, t19354), (t19355 - (int16x32)rounding_halving_add(f13[ramp(t19660, 1, 32)], f13[ramp(t19660 + -384, 1, 32)])) + (int16x32)rounding_halving_add(t19351, t19352), (t19355 - (int16x32)rounding_halving_add(f13[ramp(t19660 + 1, 1, 32)], f13[ramp(t19660 + -385, 1, 32)])) + (int16x32)rounding_halving_add(t19353, t19354))
                    }
                   }
                   produce f8 {
                    let t19799 = (f8.s0.v1.min_2 - t19717)*384
                    let t19798 = f8.s0.v1.min_2 - t19718
                    for (f8.s0.v0.v0, 0, 12) {
                     let f8.s0.v0.v0i.base = (f8.s0.v0.v0*32) + t19719
                     let t19359 = f8.s0.v0.v0i.base - t19719
                     let t19661 = (t19798*385) + t19359
                     f8[ramp(t19359 + t19799, 1, 32)] = (f3[ramp(((t19798*385) - t19716) + f8.s0.v0.v0i.base, 1, 32)] - (int16x32)rounding_halving_add(f13[ramp(t19661, 1, 32)], f13[ramp(t19661 + -385, 1, 32)])) + (int16x32)rounding_halving_add(f5[ramp(t19661, 1, 32)], f5[ramp(t19661 + -385, 1, 32)])
                    }
                   }
                  }
                  if (3 <= (processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased + t19726)) {
                   consume f8 {
                    consume f6 {
                     consume f10 {
                      produce f25 {
                       let t19800 = (((t19725 % 2) + processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased)*2) + t19725
                       for (f25.s0.v1.rebased, 0, 2) {
                        let t19805 = f25.s0.v1.rebased + t19800
                        let t19806 = (t19805 + -7)/2
                        let t19807 = (t19805 + 1) % 2
                        let t19801 = t19807 == 0
                        let t19804 = t19807*24
                        let t19803 = t19806 - t19718
                        let t19802 = t19806 - t19717
                        for (f25.s0.v0.v0, 0, 23) {
                         let t19364 = ((((f25.s0.v0.v0*32) + t19724) + 1) % 2) == 0
                         let t19370 = (f25.s0.v0.v0*16) - t19719
                         let t19371 = ((t19802*384) + t19722) + t19370
                         let t19663 = (t19802*24) + f25.s0.v0.v0
                         f25[ramp((f25.s0.v0.v0 + t19804)*32, 1, 32) aligned(32, 0)] = interleave_vectors(select(t19801, select(t19364, f8[ramp(t19663*16, 1, 16) aligned(16, 0)], f6[ramp(t19663*16, 1, 16) aligned(16, 0)]), select(t19364, f5[ramp((t19803*385) + (f25.s0.v0.v0*16), 1, 16)], f10[ramp(t19663*16, 1, 16) aligned(16, 0)])), select(t19801, select(t19721, f8[ramp(t19371, 1, 16)], f6[ramp(t19371, 1, 16)]), select(t19721, f5[ramp(((t19803*385) + t19722) + t19370, 1, 16)], f10[ramp(t19371, 1, 16)])))
                        }
                       }
                      }
                      produce f28 {
                       consume f25 {
                        let t19808 = (((t19725 % 2) + processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased)*2) + t19725
                        for (f28.s0.v2.rebased, 0, processed.extent.2) {
                         let t19810 = f28.s0.v2.rebased*48
                         let t19809 = f28.s0.v2.rebased + processed.min.2
                         for (f28.s0.v1.rebased, 0, 2) {
                          let t19813 = (f28.s0.v1.rebased + t19808) + 1
                          let t19811 = (t19813 % 2)*12
                          let t19812 = ((t19813 % 4)*12) + t19810
                          for (f28.s0.v0.v0, 0, 12) {
                           allocate output[int16 * 192] in Stack
                           produce output {
                            output[ramp(0, 1, 32)] = f19[ramp((f28.s0.v0.v0 + t19811)*64, 1, 32) aligned(64, 0)]
                            output[ramp(32, 1, 32)] = f19[ramp(((f28.s0.v0.v0 + t19811)*64) + 32, 1, 32) aligned(64, 32)]
                            output[ramp(64, 1, 32)] = f22[ramp((f28.s0.v0.v0 + t19811)*64, 1, 32) aligned(64, 0)]
                            output[ramp(96, 1, 32)] = f22[ramp(((f28.s0.v0.v0 + t19811)*64) + 32, 1, 32) aligned(64, 32)]
                            output[ramp(128, 1, 32)] = f25[ramp((f28.s0.v0.v0 + t19811)*64, 1, 32) aligned(64, 0)]
                            output[ramp(160, 1, 32)] = f25[ramp(((f28.s0.v0.v0 + t19811)*64) + 32, 1, 32) aligned(64, 32)]
                           }
                           consume output {
                            let t19372.s = output[ramp(128, 1, 64)]
                            let t19373.s = output[ramp(64, 1, 64)]
                            let t19374.s = output[ramp(0, 1, 64)]
                            f28[ramp((f28.s0.v0.v0 + t19812)*64, 1, 64) aligned(64, 0)] = curve[int32x64(max(min((int16x64)mux(x64(t19809), int16x64((int32x64)shift_right(((int32x64)widening_mul(t19374.s, x64(f26[0])) + ((int32x64)widening_mul(t19372.s, x64(f26[2])) + (int32x64)widening_mul(t19373.s, x64(f26[1])))) + x64(int32(f26[3])), x64((uint32)8))), int16x64((int32x64)shift_right(((int32x64)widening_mul(t19374.s, x64(f26[4])) + ((int32x64)widening_mul(t19372.s, x64(f26[6])) + (int32x64)widening_mul(t19373.s, x64(f26[5])))) + x64(int32(f26[7])), x64((uint32)8))), int16x64((int32x64)shift_right(((int32x64)widening_mul(t19374.s, x64(f26[8])) + ((int32x64)widening_mul(t19372.s, x64(f26[10])) + (int32x64)widening_mul(t19373.s, x64(f26[9])))) + x64(int32(f26[11])), x64((uint32)8)))), x64((int16)1023)), x64((int16)0)))]
                           }
                           free output
                          }
                         }
                        }
                       }
                      }
                      if (4 <= (processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased + t19726)) {
                       consume f28 {
                        allocate unsharp[uint8 * 704] in Stack
                        let t19814 = (((t19725 % 2) + processed.s0.v1.v1i.v1i.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.$n.rebased)*2) + t19725
                        for (processed.s0.v2.rebased, 0, processed.extent.2) {
                         let t19815 = processed.s0.v2.rebased*4
                         let t19816 = ((processed.min.2 + processed.s0.v2.rebased)*processed.stride.2) + t19723
                         for (processed.s0.v1.v1i.v1ii, 0, 2) {
                          allocate unsharp_y[uint8 * 768] in Stack
                          produce unsharp_y {
                           let t19604 = processed.s0.v1.v1i.v1ii + t19814
                           unsharp_y[ramp(0, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(f28[ramp((((t19604 + 3) % 4) + t19815)*768, 1, 64) aligned(768, 0)], f28[ramp((((t19604 + 1) % 4) + t19815)*768, 1, 64) aligned(768, 0)]), f28[ramp(((t19604 % 4) + t19815)*768, 1, 64) aligned(768, 0)])
                           unsharp_y[ramp(64, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(f28[ramp(((((t19604 + 3) % 4) + t19815)*768) + 64, 1, 64) aligned(768, 64)], f28[ramp(((((t19604 + 1) % 4) + t19815)*768) + 64, 1, 64) aligned(768, 64)]), f28[ramp((((t19604 % 4) + t19815)*768) + 64, 1, 64) aligned(768, 64)])
                           unsharp_y[ramp(128, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(f28[ramp(((((t19604 + 3) % 4) + t19815)*768) + 128, 1, 64) aligned(768, 128)], f28[ramp(((((t19604 + 1) % 4) + t19815)*768) + 128, 1, 64) aligned(768, 128)]), f28[ramp((((t19604 % 4) + t19815)*768) + 128, 1, 64) aligned(768, 128)])
                           unsharp_y[ramp(192, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(f28[ramp(((((t19604 + 3) % 4) + t19815)*768) + 192, 1, 64) aligned(768, 192)], f28[ramp(((((t19604 + 1) % 4) + t19815)*768) + 192, 1, 64) aligned(768, 192)]), f28[ramp((((t19604 % 4) + t19815)*768) + 192, 1, 64) aligned(768, 192)])
                           unsharp_y[ramp(256, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(f28[ramp(((((t19604 + 3) % 4) + t19815)*768) + 256, 1, 64) aligned(768, 256)], f28[ramp(((((t19604 + 1) % 4) + t19815)*768) + 256, 1, 64) aligned(768, 256)]), f28[ramp((((t19604 % 4) + t19815)*768) + 256, 1, 64) aligned(768, 256)])
                           unsharp_y[ramp(320, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(f28[ramp(((((t19604 + 3) % 4) + t19815)*768) + 320, 1, 64) aligned(768, 320)], f28[ramp(((((t19604 + 1) % 4) + t19815)*768) + 320, 1, 64) aligned(768, 320)]), f28[ramp((((t19604 % 4) + t19815)*768) + 320, 1, 64) aligned(768, 320)])
                           unsharp_y[ramp(384, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(f28[ramp(((((t19604 + 3) % 4) + t19815)*768) + 384, 1, 64) aligned(768, 384)], f28[ramp(((((t19604 + 1) % 4) + t19815)*768) + 384, 1, 64) aligned(768, 384)]), f28[ramp((((t19604 % 4) + t19815)*768) + 384, 1, 64) aligned(768, 384)])
                           unsharp_y[ramp(448, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(f28[ramp(((((t19604 + 3) % 4) + t19815)*768) + 448, 1, 64) aligned(768, 448)], f28[ramp(((((t19604 + 1) % 4) + t19815)*768) + 448, 1, 64) aligned(768, 448)]), f28[ramp((((t19604 % 4) + t19815)*768) + 448, 1, 64) aligned(768, 448)])
                           unsharp_y[ramp(512, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(f28[ramp(((((t19604 + 3) % 4) + t19815)*768) + 512, 1, 64) aligned(768, 512)], f28[ramp(((((t19604 + 1) % 4) + t19815)*768) + 512, 1, 64) aligned(768, 512)]), f28[ramp((((t19604 % 4) + t19815)*768) + 512, 1, 64) aligned(768, 512)])
                           unsharp_y[ramp(576, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(f28[ramp(((((t19604 + 3) % 4) + t19815)*768) + 576, 1, 64) aligned(768, 576)], f28[ramp(((((t19604 + 1) % 4) + t19815)*768) + 576, 1, 64) aligned(768, 576)]), f28[ramp((((t19604 % 4) + t19815)*768) + 576, 1, 64) aligned(768, 576)])
                           unsharp_y[ramp(640, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(f28[ramp(((((t19604 + 3) % 4) + t19815)*768) + 640, 1, 64) aligned(768, 640)], f28[ramp(((((t19604 + 1) % 4) + t19815)*768) + 640, 1, 64) aligned(768, 640)]), f28[ramp((((t19604 % 4) + t19815)*768) + 640, 1, 64) aligned(768, 640)])
                           unsharp_y[ramp(704, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(f28[ramp(((((t19604 + 3) % 4) + t19815)*768) + 704, 1, 64) aligned(768, 704)], f28[ramp(((((t19604 + 1) % 4) + t19815)*768) + 704, 1, 64) aligned(768, 704)]), f28[ramp((((t19604 % 4) + t19815)*768) + 704, 1, 64) aligned(768, 704)])
                          }
                          produce unsharp {
                           consume unsharp_y {
                            unsharp[ramp(0, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(unsharp_y[ramp(0, 1, 64)], unsharp_y[ramp(2, 1, 64)]), unsharp_y[ramp(1, 1, 64)])
                            unsharp[ramp(64, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(unsharp_y[ramp(64, 1, 64)], unsharp_y[ramp(66, 1, 64)]), unsharp_y[ramp(65, 1, 64)])
                            unsharp[ramp(128, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(unsharp_y[ramp(128, 1, 64)], unsharp_y[ramp(130, 1, 64)]), unsharp_y[ramp(129, 1, 64)])
                            unsharp[ramp(192, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(unsharp_y[ramp(192, 1, 64)], unsharp_y[ramp(194, 1, 64)]), unsharp_y[ramp(193, 1, 64)])
                            unsharp[ramp(256, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(unsharp_y[ramp(256, 1, 64)], unsharp_y[ramp(258, 1, 64)]), unsharp_y[ramp(257, 1, 64)])
                            unsharp[ramp(320, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(unsharp_y[ramp(320, 1, 64)], unsharp_y[ramp(322, 1, 64)]), unsharp_y[ramp(321, 1, 64)])
                            unsharp[ramp(384, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(unsharp_y[ramp(384, 1, 64)], unsharp_y[ramp(386, 1, 64)]), unsharp_y[ramp(385, 1, 64)])
                            unsharp[ramp(448, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(unsharp_y[ramp(448, 1, 64)], unsharp_y[ramp(450, 1, 64)]), unsharp_y[ramp(449, 1, 64)])
                            unsharp[ramp(512, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(unsharp_y[ramp(512, 1, 64)], unsharp_y[ramp(514, 1, 64)]), unsharp_y[ramp(513, 1, 64)])
                            unsharp[ramp(576, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(unsharp_y[ramp(576, 1, 64)], unsharp_y[ramp(578, 1, 64)]), unsharp_y[ramp(577, 1, 64)])
                            unsharp[ramp(640, 1, 64)] = (uint8x64)rounding_halving_add((uint8x64)rounding_halving_add(unsharp_y[ramp(640, 1, 64)], unsharp_y[ramp(642, 1, 64)]), unsharp_y[ramp(641, 1, 64)])
                            free unsharp_y
                           }
                          }
                          allocate sharpened[uint8 * 704] in Stack
                          produce sharpened {
                           consume unsharp {
                            allocate mask[int16 * 64] in Stack
                            produce mask {
                             mask[ramp(0, 1, 64)] = (int16x64)widening_sub(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 1, 1, 64) aligned(768, 1)], unsharp[ramp(0, 1, 64)])
                            }
                            consume mask {
                             sharpened[ramp(0, 1, 64)] = uint8x64(max(min((int16x64)shift_right(mask[ramp(0, 1, 64)]*x64(int16(sharpen_strength_x32[0])), x64((uint16)5)) + int16x64(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 1, 1, 64) aligned(768, 1)]), x64((int16)255)), x64((int16)0)))
                            }
                            free mask
                            allocate mask[int16 * 64] in Stack
                            produce mask {
                             mask[ramp(0, 1, 64)] = (int16x64)widening_sub(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 65, 1, 64) aligned(768, 65)], unsharp[ramp(64, 1, 64)])
                            }
                            consume mask {
                             sharpened[ramp(64, 1, 64)] = uint8x64(max(min((int16x64)shift_right(mask[ramp(0, 1, 64)]*x64(int16(sharpen_strength_x32[0])), x64((uint16)5)) + int16x64(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 65, 1, 64) aligned(768, 65)]), x64((int16)255)), x64((int16)0)))
                            }
                            free mask
                            allocate mask[int16 * 64] in Stack
                            produce mask {
                             mask[ramp(0, 1, 64)] = (int16x64)widening_sub(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 129, 1, 64) aligned(768, 129)], unsharp[ramp(128, 1, 64)])
                            }
                            consume mask {
                             sharpened[ramp(128, 1, 64)] = uint8x64(max(min((int16x64)shift_right(mask[ramp(0, 1, 64)]*x64(int16(sharpen_strength_x32[0])), x64((uint16)5)) + int16x64(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 129, 1, 64) aligned(768, 129)]), x64((int16)255)), x64((int16)0)))
                            }
                            free mask
                            allocate mask[int16 * 64] in Stack
                            produce mask {
                             mask[ramp(0, 1, 64)] = (int16x64)widening_sub(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 193, 1, 64) aligned(768, 193)], unsharp[ramp(192, 1, 64)])
                            }
                            consume mask {
                             sharpened[ramp(192, 1, 64)] = uint8x64(max(min((int16x64)shift_right(mask[ramp(0, 1, 64)]*x64(int16(sharpen_strength_x32[0])), x64((uint16)5)) + int16x64(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 193, 1, 64) aligned(768, 193)]), x64((int16)255)), x64((int16)0)))
                            }
                            free mask
                            allocate mask[int16 * 64] in Stack
                            produce mask {
                             mask[ramp(0, 1, 64)] = (int16x64)widening_sub(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 257, 1, 64) aligned(768, 257)], unsharp[ramp(256, 1, 64)])
                            }
                            consume mask {
                             sharpened[ramp(256, 1, 64)] = uint8x64(max(min((int16x64)shift_right(mask[ramp(0, 1, 64)]*x64(int16(sharpen_strength_x32[0])), x64((uint16)5)) + int16x64(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 257, 1, 64) aligned(768, 257)]), x64((int16)255)), x64((int16)0)))
                            }
                            free mask
                            allocate mask[int16 * 64] in Stack
                            produce mask {
                             mask[ramp(0, 1, 64)] = (int16x64)widening_sub(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 321, 1, 64) aligned(768, 321)], unsharp[ramp(320, 1, 64)])
                            }
                            consume mask {
                             sharpened[ramp(320, 1, 64)] = uint8x64(max(min((int16x64)shift_right(mask[ramp(0, 1, 64)]*x64(int16(sharpen_strength_x32[0])), x64((uint16)5)) + int16x64(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 321, 1, 64) aligned(768, 321)]), x64((int16)255)), x64((int16)0)))
                            }
                            free mask
                            allocate mask[int16 * 64] in Stack
                            produce mask {
                             mask[ramp(0, 1, 64)] = (int16x64)widening_sub(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 385, 1, 64) aligned(768, 385)], unsharp[ramp(384, 1, 64)])
                            }
                            consume mask {
                             sharpened[ramp(384, 1, 64)] = uint8x64(max(min((int16x64)shift_right(mask[ramp(0, 1, 64)]*x64(int16(sharpen_strength_x32[0])), x64((uint16)5)) + int16x64(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 385, 1, 64) aligned(768, 385)]), x64((int16)255)), x64((int16)0)))
                            }
                            free mask
                            allocate mask[int16 * 64] in Stack
                            produce mask {
                             mask[ramp(0, 1, 64)] = (int16x64)widening_sub(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 449, 1, 64) aligned(768, 449)], unsharp[ramp(448, 1, 64)])
                            }
                            consume mask {
                             sharpened[ramp(448, 1, 64)] = uint8x64(max(min((int16x64)shift_right(mask[ramp(0, 1, 64)]*x64(int16(sharpen_strength_x32[0])), x64((uint16)5)) + int16x64(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 449, 1, 64) aligned(768, 449)]), x64((int16)255)), x64((int16)0)))
                            }
                            free mask
                            allocate mask[int16 * 64] in Stack
                            produce mask {
                             mask[ramp(0, 1, 64)] = (int16x64)widening_sub(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 513, 1, 64) aligned(768, 513)], unsharp[ramp(512, 1, 64)])
                            }
                            consume mask {
                             sharpened[ramp(512, 1, 64)] = uint8x64(max(min((int16x64)shift_right(mask[ramp(0, 1, 64)]*x64(int16(sharpen_strength_x32[0])), x64((uint16)5)) + int16x64(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 513, 1, 64) aligned(768, 513)]), x64((int16)255)), x64((int16)0)))
                            }
                            free mask
                            allocate mask[int16 * 64] in Stack
                            produce mask {
                             mask[ramp(0, 1, 64)] = (int16x64)widening_sub(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 577, 1, 64) aligned(768, 577)], unsharp[ramp(576, 1, 64)])
                            }
                            consume mask {
                             sharpened[ramp(576, 1, 64)] = uint8x64(max(min((int16x64)shift_right(mask[ramp(0, 1, 64)]*x64(int16(sharpen_strength_x32[0])), x64((uint16)5)) + int16x64(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 577, 1, 64) aligned(768, 577)]), x64((int16)255)), x64((int16)0)))
                            }
                            free mask
                            allocate mask[int16 * 64] in Stack
                            produce mask {
                             mask[ramp(0, 1, 64)] = (int16x64)widening_sub(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 641, 1, 64) aligned(768, 641)], unsharp[ramp(640, 1, 64)])
                            }
                            consume mask {
                             sharpened[ramp(640, 1, 64)] = uint8x64(max(min((int16x64)shift_right(mask[ramp(0, 1, 64)]*x64(int16(sharpen_strength_x32[0])), x64((uint16)5)) + int16x64(f28[ramp(((((processed.s0.v1.v1i.v1ii + t19814) % 4) + t19815)*768) + 641, 1, 64) aligned(768, 641)]), x64((int16)255)), x64((int16)0)))
                            }
                            free mask
                           }
                          }
                          consume sharpened {
                           processed[ramp((((processed.s0.v1.v1i.v1ii + t19814) + -8)*processed.stride.1) + t19816, 1, 64)] = sharpened[ramp(0, 1, 64)]
                           processed[ramp(((((processed.s0.v1.v1i.v1ii + t19814) + -8)*processed.stride.1) + t19816) + 64, 1, 64)] = sharpened[ramp(64, 1, 64)]
                           processed[ramp(((((processed.s0.v1.v1i.v1ii + t19814) + -8)*processed.stride.1) + t19816) + 128, 1, 64)] = sharpened[ramp(128, 1, 64)]
                           processed[ramp(((((processed.s0.v1.v1i.v1ii + t19814) + -8)*processed.stride.1) + t19816) + 192, 1, 64)] = sharpened[ramp(192, 1, 64)]
                           processed[ramp(((((processed.s0.v1.v1i.v1ii + t19814) + -8)*processed.stride.1) + t19816) + 256, 1, 64)] = sharpened[ramp(256, 1, 64)]
                           processed[ramp(((((processed.s0.v1.v1i.v1ii + t19814) + -8)*processed.stride.1) + t19816) + 320, 1, 64)] = sharpened[ramp(320, 1, 64)]
                           processed[ramp(((((processed.s0.v1.v1i.v1ii + t19814) + -8)*processed.stride.1) + t19816) + 384, 1, 64)] = sharpened[ramp(384, 1, 64)]
                           processed[ramp(((((processed.s0.v1.v1i.v1ii + t19814) + -8)*processed.stride.1) + t19816) + 448, 1, 64)] = sharpened[ramp(448, 1, 64)]
                           processed[ramp(((((processed.s0.v1.v1i.v1ii + t19814) + -8)*processed.stride.1) + t19816) + 512, 1, 64)] = sharpened[ramp(512, 1, 64)]
                           processed[ramp(((((processed.s0.v1.v1i.v1ii + t19814) + -8)*processed.stride.1) + t19816) + 576, 1, 64)] = sharpened[ramp(576, 1, 64)]
                           processed[ramp(((((processed.s0.v1.v1i.v1ii + t19814) + -8)*processed.stride.1) + t19816) + 640, 1, 64)] = sharpened[ramp(640, 1, 64)]
                           free sharpened
                          }
                         }
                        }
                        free unsharp
                       }
                      }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
      free f1
      free f2
      free f4
      free f3
      free f7
      free f11
      free f13
      free f12
      free f9
      free f19
      free f20
      free f21
      free f22
      free f5
      free f10
      free f6
      free f8
      free f25
      free f28
     }
    }
   }
  }
 }
 free curve
 free f26
 free sharpen_strength_x32
}
}


