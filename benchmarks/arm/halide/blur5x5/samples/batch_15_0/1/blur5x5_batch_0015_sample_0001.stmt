module name=blur5x5_batch_0015_sample_0001, target=x86-64-linux-avx-avx2-avx512-avx512_sapphirerapids-avx512_skylake-disable_llvm_loop_opt-f16c-fma-sse41
external_plus_metadata func blur5x5_batch_0015_sample_0001 (input, blur_y) {
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
assert((uint64)reinterpret((halide_buffer_t *)blur_y.buffer) != (uint64)0, halide_error_buffer_argument_is_null("blur_y"))
let blur_y = (void *)_halide_buffer_get_host((halide_buffer_t *)blur_y.buffer)
let blur_y.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)blur_y.buffer)
let blur_y.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)blur_y.buffer)
let blur_y.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)blur_y.buffer)
let blur_y.min.0 = _halide_buffer_get_min((halide_buffer_t *)blur_y.buffer, 0)
let blur_y.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)blur_y.buffer, 0)
let blur_y.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)blur_y.buffer, 0)
let blur_y.min.1 = _halide_buffer_get_min((halide_buffer_t *)blur_y.buffer, 1)
let blur_y.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)blur_y.buffer, 1)
let blur_y.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)blur_y.buffer, 1)
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let input.extent.0.required.s = max(min(min(blur_y.extent.0 + 36, min(blur_y.extent.0, 64) + (((max(blur_y.extent.0, 64) + 3)/32)*32)) + blur_y.min.0, (input.extent.0 + input.min.0) + 32) + -33, input.min.0) - max(min(min(blur_y.extent.0, 64) + blur_y.min.0, (input.extent.0 + input.min.0) + 63) + -64, input.min.0)
let input.min.0.required = max(min(min(blur_y.extent.0, 64) + blur_y.min.0, (input.extent.0 + input.min.0) + 63) + -64, input.min.0)
let input.extent.1.required = max(min((blur_y.extent.1 + blur_y.min.1) + 4, input.extent.1 + input.min.1), input.min.1 + 1) - max(min(min(blur_y.extent.1, 36) + blur_y.min.1, (input.extent.1 + input.min.1) + 35) + -36, input.min.1)
let input.min.1.required = max(min(min(blur_y.extent.1, 36) + blur_y.min.1, (input.extent.1 + input.min.1) + 35) + -36, input.min.1)
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)blur_y.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)blur_y.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)blur_y.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 16, 2, (halide_dimension_t *)make_struct((min(blur_y.extent.0, 64) + blur_y.min.0) + -64, max(blur_y.extent.0, 64), 1, 0, (min(blur_y.extent.1, 36) + blur_y.min.1) + -36, max(blur_y.extent.1, 36), max(blur_y.extent.0, 64), 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 16, 2, (halide_dimension_t *)make_struct(input.min.0.required, input.extent.0.required.s + 1, 1, 0, input.min.1.required, input.extent.1.required, input.extent.0.required.s + 1, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)blur_y.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer))) {
 assert(blur_y.type == (uint32)69633, halide_error_bad_type("Output buffer blur_y", blur_y.type, (uint32)69633))
 assert(blur_y.dimensions == 2, halide_error_bad_dimensions("Output buffer blur_y", blur_y.dimensions, 2))
 assert(input.type == (uint32)69633, halide_error_bad_type("Input buffer input", input.type, (uint32)69633))
 assert(input.dimensions == 2, halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
 assert(64 <= blur_y.extent.0, halide_error_access_out_of_bounds("Output buffer blur_y", 0, (min(blur_y.extent.0, 64) + blur_y.min.0) + -64, (blur_y.extent.0 + blur_y.min.0) + -1, blur_y.min.0, (blur_y.extent.0 + blur_y.min.0) + -1))
 assert(36 <= blur_y.extent.1, halide_error_access_out_of_bounds("Output buffer blur_y", 1, (min(blur_y.extent.1, 36) + blur_y.min.1) + -36, (blur_y.extent.1 + blur_y.min.1) + -1, blur_y.min.1, (blur_y.extent.1 + blur_y.min.1) + -1))
 assert((input.min.0 <= input.min.0.required) && (((input.extent.0.required.s + input.min.0.required) + 1) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, input.extent.0.required.s + input.min.0.required, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert((input.min.1 <= input.min.1.required) && ((input.extent.1.required + input.min.1.required) <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, (input.extent.1.required + input.min.1.required) + -1, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert(blur_y.stride.0 == 1, halide_error_constraint_violated("blur_y.stride.0", blur_y.stride.0, "1", 1))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 let blur_y.total_extent.1 = int64(blur_y.extent.1)*int64(blur_y.extent.0)
 let input.total_extent.1 = int64(input.extent.1)*int64(input.extent.0)
 assert(uint64(blur_y.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("blur_y", uint64(blur_y.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(blur_y.extent.1)*int64(blur_y.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("blur_y", (uint64)abs(int64(blur_y.extent.1)*int64(blur_y.stride.1)), (uint64)2147483647))
 assert(blur_y.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("blur_y", blur_y.total_extent.1, (int64)2147483647))
 assert(uint64(input.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", uint64(input.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(input.extent.1)*int64(input.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", (uint64)abs(int64(input.extent.1)*int64(input.stride.1)), (uint64)2147483647))
 assert(input.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
 assert(!blur_y.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer blur_y"))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert(blur_y != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer blur_y"))
 assert(input != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer input"))
 produce blur_y {
  let t269 = input.extent.0 + input.min.0
  let t270 = blur_y.extent.0 + 35
  let t271 = t270/32
  let t272 = min(max(((input.min.0 - blur_y.min.0) + 31)/32, 0), t271)
  let t273 = t269 - blur_y.min.0
  let t265 = max(min(min(min(t273 + 27, blur_y.extent.0) + 4, t273), t270)/32, t272)
  let t259 = (blur_y.extent.1 + 35)/36
  let t267 = (blur_y.extent.0 + 63)/64
  let t268 = 0 - (blur_y.min.1*blur_y.stride.1)
  parallel (blur_y.s0.y.y, 0, t259) {
   let blur_y.s0.y.yi.base.s = min(blur_y.s0.y.y*36, blur_y.extent.1 + -36)
   allocate repeat_edge[uint16 * (blur_y.extent.0 + 4) * 16] in Stack
   let t282 = input.extent.1 + input.min.1
   let t283 = min(blur_y.s0.y.y*36, blur_y.extent.1 + -36)
   let t276 = (input.min.1 - blur_y.min.1) - t283
   let t281 = t282 - t283
   let t277 = blur_y.min.1 + t283
   let t274 = blur_y.min.1 + blur_y.s0.y.yi.base.s
   for (blur_y.s0.y.yi.yi.$n.rebased, 0, 5) {
    produce repeat_edge {
     let repeat_edge.s0._1.prologue = min(max((max(blur_y.s0.y.yi.yi.$n.rebased*9, 5) + t274) + -5, input.min.1), (min(blur_y.s0.y.yi.yi.$n.rebased*9, 5) + (max(blur_y.s0.y.yi.yi.$n.rebased*9, 5) + t274)) + -1)
     let repeat_edge.s0._1.epilogue = min(max(max((max(blur_y.s0.y.yi.yi.$n.rebased*9, 5) + t274) + -5, input.min.1), t282), (min(blur_y.s0.y.yi.yi.$n.rebased*9, 5) + (max(blur_y.s0.y.yi.yi.$n.rebased*9, 5) + t274)) + -1)
     let t286 = blur_y.s0.y.yi.yi.$n.rebased*9
     let t287 = max(t286, 5)
     let t284 = min(min(max(t276 - t287, -5) + 1, t286), 5)
     let t285 = t274 + t287
     for (repeat_edge.s0._1.rebased, 0, t284 + 4) {
      let t289 = (((repeat_edge.s0._1.rebased + t285) + 11) % 16)*(blur_y.extent.0 + 4)
      let t288 = ((max(min((t285 - input.min.1) + repeat_edge.s0._1.rebased, input.extent.1 + 4), 5) + -5)*input.stride.1) - input.min.0
      for (repeat_edge.s0._0._0, 0, t271) {
       let repeat_edge.s0._0._0i.base.s = min(repeat_edge.s0._0._0*32, blur_y.extent.0 + -28)
       repeat_edge[ramp(repeat_edge.s0._0._0i.base.s + t289, 1, 32)] = input[max(min(ramp(blur_y.min.0 + repeat_edge.s0._0._0i.base.s, 1, 32), x32(t269 + -1)), x32(input.min.0)) + x32(t288)]
      }
     }
     let t295 = blur_y.s0.y.yi.yi.$n.rebased*9
     let t296 = (max(t295, 5) + t277) + -5
     let t297 = (t277 + t295) + 4
     let t290 = min(max(t282, t296), t297) - min(max(input.min.1, t296), t297)
     let t294 = t271 - t265
     let t291 = repeat_edge.s0._1.prologue - input.min.1
     for (repeat_edge.s0._1.rebased, 0, t290) {
      let t299 = ((repeat_edge.s0._1.prologue + repeat_edge.s0._1.rebased) % 16)*(blur_y.extent.0 + 4)
      let t298 = ((repeat_edge.s0._1.rebased + t291)*input.stride.1) - input.min.0
      for (repeat_edge.s0._0._0, 0, t272) {
       let repeat_edge.s0._0._0i.base.s = min(repeat_edge.s0._0._0*32, blur_y.extent.0 + -28)
       repeat_edge[ramp(repeat_edge.s0._0._0i.base.s + t299, 1, 32)] = input[max(min(ramp(blur_y.min.0 + repeat_edge.s0._0._0i.base.s, 1, 32), x32(t269 + -1)), x32(input.min.0)) + x32(t298)]
      }
      let t302 = ((repeat_edge.s0._1.prologue + repeat_edge.s0._1.rebased) % 16)*(blur_y.extent.0 + 4)
      let t300 = t265 - t272
      let t301 = ((repeat_edge.s0._1.rebased + t291)*input.stride.1) + (blur_y.min.0 - input.min.0)
      for (repeat_edge.s0._0._0.rebased, 0, t300) {
       let t254 = repeat_edge.s0._0._0.rebased + t272
       repeat_edge[ramp((t254*32) + t302, 1, 32)] = input[ramp((t254*32) + t301, 1, 32)]
      }
      let t304 = ((repeat_edge.s0._1.prologue + repeat_edge.s0._1.rebased) % 16)*(blur_y.extent.0 + 4)
      let t303 = ((repeat_edge.s0._1.rebased + t291)*input.stride.1) - input.min.0
      for (repeat_edge.s0._0._0.rebased, 0, t294) {
       let repeat_edge.s0._0._0i.base.s = min((repeat_edge.s0._0._0.rebased + t265)*32, blur_y.extent.0 + -28)
       repeat_edge[ramp(repeat_edge.s0._0._0i.base.s + t304, 1, 32)] = input[max(min(ramp(blur_y.min.0 + repeat_edge.s0._0._0i.base.s, 1, 32), x32(t269 + -1)), x32(input.min.0)) + x32(t303)]
      }
     }
     let t307 = blur_y.s0.y.yi.yi.$n.rebased*9
     let t305 = max((blur_y.min.1 + t307) - max((max(t307, 5) + blur_y.min.1) + -5, t281), -4)
     let t306 = repeat_edge.s0._1.epilogue - input.min.1
     for (repeat_edge.s0._1.rebased, 0, t305 + 4) {
      let t309 = ((repeat_edge.s0._1.epilogue + repeat_edge.s0._1.rebased) % 16)*(blur_y.extent.0 + 4)
      let t308 = (max(min(repeat_edge.s0._1.rebased + t306, input.extent.1 + -1), 0)*input.stride.1) - input.min.0
      for (repeat_edge.s0._0._0, 0, t271) {
       let repeat_edge.s0._0._0i.base.s = min(repeat_edge.s0._0._0*32, blur_y.extent.0 + -28)
       repeat_edge[ramp(repeat_edge.s0._0._0i.base.s + t309, 1, 32)] = input[max(min(ramp(blur_y.min.0 + repeat_edge.s0._0._0i.base.s, 1, 32), x32(t269 + -1)), x32(input.min.0)) + x32(t308)]
      }
     }
    }
    if (1 <= blur_y.s0.y.yi.yi.$n.rebased) {
     consume repeat_edge {
      let t310 = (blur_y.s0.y.yi.yi.$n.rebased*9) + t274
      for (blur_y.s0.x.x, 0, t267) {
       let blur_y.s0.x.xi.base.s = min(blur_y.s0.x.x*64, blur_y.extent.0 + -64)
       allocate blur_x[uint16 * 512] in Stack
       for (blur_y.s0.y.yi.yii.$n.rebased, 0, 4) {
        produce blur_x {
         let t237 = blur_y.s0.y.yi.yii.$n.rebased + t310
         let t240 = ((t237 + 7) % 16)*(blur_y.extent.0 + 4)
         let t255 = blur_y.s0.x.xi.base.s + t240
         blur_x[ramp(((t237 + 7) % 8)*64, 1, 32) aligned(64, 0)] = (repeat_edge[ramp(t255 + 1, 1, 32)] + (repeat_edge[ramp(t255, 1, 32)] + (repeat_edge[ramp(t255 + 2, 1, 32)] + (repeat_edge[ramp(t255 + 4, 1, 32)] + repeat_edge[ramp(t255 + 3, 1, 32)]))))/x32((uint16)5)
         let t256 = blur_y.s0.x.xi.base.s + t240
         blur_x[ramp((((t237 + 7) % 8)*64) + 32, 1, 32) aligned(64, 32)] = (repeat_edge[ramp(t256 + 33, 1, 32)] + (repeat_edge[ramp(t256 + 32, 1, 32)] + (repeat_edge[ramp(t256 + 34, 1, 32)] + (repeat_edge[ramp(t256 + 36, 1, 32)] + repeat_edge[ramp(t256 + 35, 1, 32)]))))/x32((uint16)5)
        }
       }
       let t311 = blur_y.s0.x.xi.base.s + t268
       for (blur_y.s0.y.yi.yii.$n, 0, 9) {
        produce blur_x {
         let t238 = blur_y.s0.y.yi.yii.$n + t310
         let t241 = ((t238 + 11) % 16)*(blur_y.extent.0 + 4)
         let t257 = blur_y.s0.x.xi.base.s + t241
         blur_x[ramp(((t238 + 3) % 8)*64, 1, 32) aligned(64, 0)] = (repeat_edge[ramp(t257 + 1, 1, 32)] + (repeat_edge[ramp(t257, 1, 32)] + (repeat_edge[ramp(t257 + 2, 1, 32)] + (repeat_edge[ramp(t257 + 4, 1, 32)] + repeat_edge[ramp(t257 + 3, 1, 32)]))))/x32((uint16)5)
         let t258 = blur_y.s0.x.xi.base.s + t241
         blur_x[ramp((((t238 + 3) % 8)*64) + 32, 1, 32) aligned(64, 32)] = (repeat_edge[ramp(t258 + 33, 1, 32)] + (repeat_edge[ramp(t258 + 32, 1, 32)] + (repeat_edge[ramp(t258 + 34, 1, 32)] + (repeat_edge[ramp(t258 + 36, 1, 32)] + repeat_edge[ramp(t258 + 35, 1, 32)]))))/x32((uint16)5)
        }
        consume blur_x {
         let t239 = blur_y.s0.y.yi.yii.$n + t310
         blur_y[ramp(((t239 + -9)*blur_y.stride.1) + t311, 1, 32)] = (blur_x[ramp((t239 % 8)*64, 1, 32) aligned(64, 0)] + (blur_x[ramp(((t239 + 7) % 8)*64, 1, 32) aligned(64, 0)] + (blur_x[ramp(((t239 + 1) % 8)*64, 1, 32) aligned(64, 0)] + (blur_x[ramp(((t239 + 3) % 8)*64, 1, 32) aligned(64, 0)] + blur_x[ramp(((t239 + 2) % 8)*64, 1, 32) aligned(64, 0)]))))/x32((uint16)5)
         blur_y[ramp((((t239 + -9)*blur_y.stride.1) + t311) + 32, 1, 32)] = (blur_x[ramp(((t239 % 8)*64) + 32, 1, 32) aligned(64, 32)] + (blur_x[ramp((((t239 + 7) % 8)*64) + 32, 1, 32) aligned(64, 32)] + (blur_x[ramp((((t239 + 1) % 8)*64) + 32, 1, 32) aligned(64, 32)] + (blur_x[ramp((((t239 + 3) % 8)*64) + 32, 1, 32) aligned(64, 32)] + blur_x[ramp((((t239 + 2) % 8)*64) + 32, 1, 32) aligned(64, 32)]))))/x32((uint16)5)
        }
       }
       free blur_x
      }
     }
    }
   }
   free repeat_edge
  }
 }
}
}


