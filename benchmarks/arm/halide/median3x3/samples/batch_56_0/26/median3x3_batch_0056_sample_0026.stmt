module name=median3x3_batch_0056_sample_0026, target=x86-64-linux-avx-avx2-disable_llvm_loop_opt-f16c-fma-sse41
external_plus_metadata func median3x3_batch_0056_sample_0026 (input, output) {
assert((uint64)reinterpret((halide_buffer_t *)output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("output"))
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let output = (void *)_halide_buffer_get_host((halide_buffer_t *)output.buffer)
let output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)output.buffer)
let output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)output.buffer)
let output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)output.buffer)
let output.min.0 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 0)
let output.min.1 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 1)
let input.extent.0.required.s = max(min(min((min(output.extent.0, 32) + (((max(output.extent.0, 32) + 1)/32)*32)) + -2, output.extent.0) + output.min.0, (input.extent.0 + input.min.0) + -1), input.min.0) - max(min(min(output.extent.0, 32) + output.min.0, (input.extent.0 + input.min.0) + 32) + -33, input.min.0)
let input.min.0.required = max(min(min(output.extent.0, 32) + output.min.0, (input.extent.0 + input.min.0) + 32) + -33, input.min.0)
let input.extent.1.required = max(min((output.extent.1 + output.min.1) + 1, input.extent.1), 1) - min(max(min((min(output.extent.1, 34) + output.min.1) + -33, input.extent.1), 1), min(max(min(input.extent.1 + 33, min(output.extent.1, 34) + output.min.1), 34), max(min((min(output.extent.1, 34) + output.min.1) + -34, input.extent.1), 1) + 33) + -34)
let input.min.1.required = min(max(min((min(output.extent.1, 34) + output.min.1) + -33, input.extent.1), 1), min(max(min(input.extent.1 + 33, min(output.extent.1, 34) + output.min.1), 34), max(min((min(output.extent.1, 34) + output.min.1) + -34, input.extent.1), 1) + 33) + -34)
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct(input.min.0.required, input.extent.0.required.s + 1, 1, 0, input.min.1.required, input.extent.1.required, input.extent.0.required.s + 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct((min(output.extent.0, 32) + output.min.0) + -32, max(output.extent.0, 32), 1, 0, (min(output.extent.1, 34) + output.min.1) + -34, max(output.extent.1, 34), max(output.extent.0, 32), 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer))) {
 assert(input.type == (uint32)67585, halide_error_bad_type("Input buffer input", input.type, (uint32)67585))
 assert(input.dimensions == 2, halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
 assert(output.type == (uint32)67585, halide_error_bad_type("Output buffer output", output.type, (uint32)67585))
 assert(output.dimensions == 2, halide_error_bad_dimensions("Output buffer output", output.dimensions, 2))
 assert((input.min.0 <= input.min.0.required) && (((input.extent.0.required.s + input.min.0.required) + 1) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, input.extent.0.required.s + input.min.0.required, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert((input.min.1 <= input.min.1.required) && ((input.extent.1.required + input.min.1.required) <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, (input.extent.1.required + input.min.1.required) + -1, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert(32 <= output.extent.0, halide_error_access_out_of_bounds("Output buffer output", 0, (min(output.extent.0, 32) + output.min.0) + -32, (output.extent.0 + output.min.0) + -1, output.min.0, (output.extent.0 + output.min.0) + -1))
 assert(34 <= output.extent.1, halide_error_access_out_of_bounds("Output buffer output", 1, (min(output.extent.1, 34) + output.min.1) + -34, (output.extent.1 + output.min.1) + -1, output.min.1, (output.extent.1 + output.min.1) + -1))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 assert(output.stride.0 == 1, halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
 let input.total_extent.1 = int64(input.extent.1)*int64(input.extent.0)
 let output.total_extent.1 = int64(output.extent.1)*int64(output.extent.0)
 assert(uint64(input.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", uint64(input.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(input.extent.1)*int64(input.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", (uint64)abs(int64(input.extent.1)*int64(input.stride.1)), (uint64)2147483647))
 assert(input.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
 assert(uint64(output.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", uint64(output.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(output.extent.1)*int64(output.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", (uint64)abs(int64(output.extent.1)*int64(output.stride.1)), (uint64)2147483647))
 assert(output.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert(!output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer output"))
 assert(input != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer input"))
 assert(output != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer output"))
 produce output {
  let t696 = input.extent.0 + input.min.0
  let t697 = output.extent.0 + 1
  let t698 = t697/32
  let t699 = t698*-32
  let t700 = output.min.1*output.stride.1
  let t701 = (output.extent.0 + 33)/32
  let t702 = min(max((input.min.0 - output.min.0)/32, -1) + 1, t701)
  let t703 = t696 - output.min.0
  let t693 = (output.extent.0 % 32) != 0
  let t686 = max((min(min(min(output.extent.0 + -30, t703), min(t697, t703) + -31), t697)/32) + 1, t702)
  let t682 = (output.extent.1 + 33)/34
  let t691 = output.extent.0/32
  let t684 = t698*32
  let t695 = output.extent.0 - t700
  let t692 = 0 - t700
  parallel (output.s0.y.y, 0, t682) {
   let output.s0.y.yi.base.s = min(output.s0.y.y*34, output.extent.1 + -34)
   let bounded_input.y.min_realized = min(max(min((output.min.1 + output.s0.y.yi.base.s) + 1, input.extent.1), 1), min(max(min(input.extent.1 + -1, output.min.1 + output.s0.y.yi.base.s), 0), max(min(output.min.1 + output.s0.y.yi.base.s, input.extent.1), 1) + -1))
   let bounded_input.y.extent_realized = let t659.s = min(output.s0.y.y*34, output.extent.1 + -34) in (max(min((output.min.1 + t659.s) + 35, input.extent.1), 1) - min(min(max(min((output.min.1 + t659.s) + 1, input.extent.1), 1), max(min((output.s0.y.y*34) + output.min.1, min(output.extent.1 + output.min.1, input.extent.1 + 33) + -34), 0)), max(min(min((output.extent.1 + output.min.1) + -34, input.extent.1), (output.s0.y.y*34) + output.min.1), 1) + -1))
   allocate bounded_input[uint8 * (t684 + 32) * bounded_input.y.extent_realized] in Stack
   let t714 = output.s0.y.y*34
   let t715 = min(output.extent.1 + -34, t714)
   let t716 = output.extent.1 + output.min.1
   let t712 = min(t716 + -34, input.extent.1)
   let t711 = min(input.extent.1 + 33, t716)
   let t710 = output.min.1 + t714
   let t704 = output.min.1 + output.s0.y.yi.base.s
   for (output.s0.y.yi.yi, 0, 2) {
    let bounded_input.s0.y.min_2 = select(0 < output.s0.y.yi.yi, max(min(((output.s0.y.yi.yi*17) + t704) + 1, input.extent.1), 1), min(max(min(input.extent.1 + -1, (output.s0.y.yi.yi*17) + t704), 0), max(min((output.s0.y.yi.yi*17) + t704, input.extent.1), 1) + -1))
    produce bounded_input {
     let t725 = output.min.1 + t715
     let t726 = output.s0.y.yi.yi*17
     let t727 = 0 < output.s0.y.yi.yi
     let t728 = t725 + t726
     let t717 = max(min(t728 + 18, input.extent.1), 1) - select(t727, max(min(t728 + 1, input.extent.1), 1), min(max(min(input.extent.1 + -1, t728), 0), max(min(input.extent.1, t728), 1) + -1))
     let t724 = t701 - t686
     let t720 = bounded_input.s0.y.min_2 - input.min.1
     for (bounded_input.s0.y.rebased, 0, t717) {
      let t731 = min(min(max(min(t725 + 1, input.extent.1), 1), max(min(input.extent.1 + -1, t725), 0)), max(min(input.extent.1, t725), 1) + -1)
      let t730 = ((bounded_input.s0.y.rebased + t720)*input.stride.1) - input.min.0
      let t729 = t725 + t726
      for (bounded_input.s0.x.x, 0, t702) {
       let bounded_input.s0.x.xi.base.s = min((bounded_input.s0.x.x*32) + 30, output.extent.0)
       bounded_input[ramp(((((select(t727, max(min(t729 + 1, input.extent.1), 1), min(max(min(input.extent.1 + -1, t729), 0), max(min(input.extent.1, t729), 1) + -1)) - t731) + bounded_input.s0.y.rebased)*(t684 + 32)) + bounded_input.s0.x.xi.base.s) + -30, 1, 32)] = input[max(min(ramp((bounded_input.s0.x.xi.base.s + output.min.0) + -31, 1, 32), x32(t696 + -1)), x32(input.min.0)) + x32(t730)]
      }
      let t735 = min(min(max(min(t725 + 1, input.extent.1), 1), max(min(input.extent.1 + -1, t725), 0)), max(min(input.extent.1, t725), 1) + -1)
      let t732 = t686 - t702
      let t734 = ((bounded_input.s0.y.rebased + t720)*input.stride.1) + (output.min.0 - input.min.0)
      let t733 = t725 + t726
      for (bounded_input.s0.x.x.rebased, 0, t732) {
       let t667 = bounded_input.s0.x.x.rebased + t702
       bounded_input[ramp((((select(t727, max(min(t733 + 1, input.extent.1), 1), min(max(min(input.extent.1 + -1, t733), 0), max(min(input.extent.1, t733), 1) + -1)) - t735) + bounded_input.s0.y.rebased)*(t684 + 32)) + (t667*32), 1, 32) aligned(32, 0)] = input[ramp(((t667*32) + t734) + -1, 1, 32)]
      }
      let t738 = min(min(max(min(t725 + 1, input.extent.1), 1), max(min(input.extent.1 + -1, t725), 0)), max(min(input.extent.1, t725), 1) + -1)
      let t737 = ((bounded_input.s0.y.rebased + t720)*input.stride.1) - input.min.0
      let t736 = t725 + t726
      for (bounded_input.s0.x.x.rebased, 0, t724) {
       let bounded_input.s0.x.xi.base.s = min(((bounded_input.s0.x.x.rebased + t686)*32) + 30, output.extent.0)
       bounded_input[ramp(((((select(t727, max(min(t736 + 1, input.extent.1), 1), min(max(min(input.extent.1 + -1, t736), 0), max(min(input.extent.1, t736), 1) + -1)) - t738) + bounded_input.s0.y.rebased)*(t684 + 32)) + bounded_input.s0.x.xi.base.s) + -30, 1, 32)] = input[max(min(ramp((bounded_input.s0.x.xi.base.s + output.min.0) + -31, 1, 32), x32(t696 + -1)), x32(input.min.0)) + x32(t737)]
      }
     }
    }
    allocate max_y[uint8 * (t684 + 32) * 17] in Stack
    produce max_y {
     consume bounded_input {
      let t741 = output.min.1 + t715
      let t739 = min(min(max(min(t741 + 1, input.extent.1), 1), max(min(input.extent.1 + -1, t741), 0)), max(min(input.extent.1, t741), 1) + -1)
      let t740 = (output.s0.y.yi.yi*17) + t741
      for (max_y.s0.y.rebased, 0, 17) {
       let t743 = (t684 + 32)*max_y.s0.y.rebased
       let t742 = max_y.s0.y.rebased + t740
       for (max_y.s0.x.x, 0, t701) {
        max_y[ramp((max_y.s0.x.x*32) + t743, 1, 32) aligned(32, 0)] = max(bounded_input[ramp(((max_y.s0.x.x*32) + (((max(min(input.extent.1, t742), 1) - t739)*(t684 + 32)) + t699)) + -32, 1, 32)], max(bounded_input[ramp(((max(min(input.extent.1 + -1, t742), 0) - t739)*(t684 + 32)) + (max_y.s0.x.x*32), 1, 32) aligned(32, 0)], bounded_input[ramp(((max_y.s0.x.x*32) + (((max(min(t742 + 2, input.extent.1), 1) - t739)*(t684 + 32)) + t699)) + -32, 1, 32)]))
       }
      }
     }
    }
    consume max_y {
     consume bounded_input {
      let t749 = output.min.1 + t715
      let t750 = max(min(t749 + 1, input.extent.1), 1)
      let t747 = min(min(max(min(t711 + -34, t710), 0), t750), max(min(t710, t712), 1) + -1)
      let t745 = min(min(max(min(input.extent.1 + -1, t749), 0), t750), max(min(input.extent.1, t749), 1) + -1)
      let t744 = output.s0.y.yi.yi*17
      for (output.s0.y.yi.yii.yii, 0, 9) {
       let output.s0.y.min_3.s = min(output.s0.y.yi.yii.yii*2, 15) + t744
       allocate min_y[uint8 * (t684 + 32) * 2] in Stack
       produce min_y {
        let t751 = output.s0.y.min_3.s + t749
        for (min_y.s0.y.rebased, 0, 2) {
         let t753 = (t684 + 32)*min_y.s0.y.rebased
         let t752 = min_y.s0.y.rebased + t751
         for (min_y.s0.x.x, 0, t701) {
          min_y[ramp((min_y.s0.x.x*32) + t753, 1, 32) aligned(32, 0)] = min(bounded_input[ramp(((min_y.s0.x.x*32) + (((max(min(input.extent.1, t752), 1) - t745)*(t684 + 32)) + t699)) + -32, 1, 32)], min(bounded_input[ramp(((max(min(input.extent.1 + -1, t752), 0) - t745)*(t684 + 32)) + (min_y.s0.x.x*32), 1, 32) aligned(32, 0)], bounded_input[ramp(((min_y.s0.x.x*32) + (((max(min(t752 + 2, input.extent.1), 1) - t745)*(t684 + 32)) + t699)) + -32, 1, 32)]))
         }
        }
       }
       consume min_y {
        let t757 = min(output.s0.y.yi.yii.yii*2, 15)
        let t754 = t744 + t757
        for (output.s0.y.yi.yii.yiii, 0, 2) {
         let output.s0.y.yi = output.s0.y.yi.yii.yiii + t754
         let t767 = output.s0.y.yi + t704
         let t768 = t684 + 32
         let t769 = output.s0.y.yi + t749
         let t770 = input.extent.1 + -1
         let t761 = (max(min(t769, t770), 0) - t747)*t768
         let t765 = (max(min(t767, t770), 0) - bounded_input.y.min_realized)*t768
         let t759 = output.s0.y.yi.yii.yiii*t768
         let t758 = (output.s0.y.yi.yii.yiii + t757)*t768
         let t762 = ((max(min(t769 + 2, input.extent.1), 1) - t747)*t768) + t699
         let t763 = ((max(min(t767 + 2, input.extent.1), 1) - bounded_input.y.min_realized)*t768) + t699
         let t760 = ((max(min(input.extent.1, t769), 1) - t747)*t768) + t699
         let t764 = ((max(min(input.extent.1, t767), 1) - bounded_input.y.min_realized)*t768) + t699
         let t766 = (output.stride.1*t767) + t692
         for (output.s0.x.x, 0, t691) {
          allocate minmax_x[uint8 * 32] in Stack
          produce minmax_x {
           let t595 = (output.s0.x.x*32) + t758
           minmax_x[ramp(0, 1, 32)] = min(max_y[ramp(t595, 1, 32) aligned(32, 0)], min(max_y[ramp(t595 + 1, 1, 32) aligned(32, 1)], max_y[ramp(t595 + 2, 1, 32) aligned(32, 2)]))
          }
          consume minmax_x {
           let t596 = minmax_x[ramp(0, 1, 32)]
           let t597 = (output.s0.x.x*32) + t759
           let t598 = max(min_y[ramp(t597, 1, 32) aligned(32, 0)], max(min_y[ramp(t597 + 1, 1, 32) aligned(32, 1)], min_y[ramp(t597 + 2, 1, 32) aligned(32, 2)]))
           let t604 = bounded_input[ramp(((output.s0.x.x*32) + t760) + -32, 1, 32)]
           let t605 = bounded_input[ramp((output.s0.x.x*32) + t761, 1, 32) aligned(32, 0)]
           let t606 = max(min(bounded_input[ramp(((output.s0.x.x*32) + t762) + -32, 1, 32)], max(t604, t605)), min(t604, t605))
           let t608 = (output.s0.x.x*32) + t763
           let t609 = (output.s0.x.x*32) + t764
           let t610 = bounded_input[ramp(t609 + -31, 1, 32)]
           let t611 = (output.s0.x.x*32) + t765
           let t612 = bounded_input[ramp(t611 + 1, 1, 32) aligned(32, 1)]
           let t613 = max(min(bounded_input[ramp(t608 + -31, 1, 32)], max(t610, t612)), min(t610, t612))
           let t614 = bounded_input[ramp(t609 + -30, 1, 32)]
           let t615 = bounded_input[ramp(t611 + 2, 1, 32) aligned(32, 2)]
           output[ramp((output.s0.x.x*32) + t766, 1, 32)] = max(min(max(t596, t598), max(min(max(t606, t613), max(min(bounded_input[ramp(t608 + -30, 1, 32)], max(t614, t615)), min(t614, t615))), min(t606, t613))), min(t596, t598))
          }
          free minmax_x
         }
         if (t693) {
          allocate minmax_x[uint8 * 32] in Stack
          produce minmax_x {
           let t616.s = (output.s0.y.yi.yii.yiii + t757)*(t684 + 32)
           let t678 = output.extent.0 + t616.s
           minmax_x[ramp(0, 1, 32)] = min(max_y[ramp(t678 + -32, 1, 32)], min(max_y[ramp(t678 + -31, 1, 32)], max_y[ramp(t678 + -30, 1, 32)]))
          }
          consume minmax_x {
           let t617 = minmax_x[ramp(0, 1, 32)]
           let t619 = max(min_y[ramp((((t684 + 32)*output.s0.y.yi.yii.yiii) + output.extent.0) + -32, 1, 32)], max(min_y[ramp((((t684 + 32)*output.s0.y.yi.yii.yiii) + output.extent.0) + -31, 1, 32)], min_y[ramp((((t684 + 32)*output.s0.y.yi.yii.yiii) + output.extent.0) + -30, 1, 32)]))
           let t625 = bounded_input[ramp((((max(min(output.s0.y.yi + t749, input.extent.1), 1) - t747)*(t684 + 32)) + (output.extent.0 + t699)) + -64, 1, 32)]
           let t626 = bounded_input[ramp((((max(min(output.s0.y.yi + t749, input.extent.1 + -1), 0) - t747)*(t684 + 32)) + output.extent.0) + -32, 1, 32)]
           let t627 = max(min(bounded_input[ramp((((max(min((output.s0.y.yi + t749) + 2, input.extent.1), 1) - t747)*(t684 + 32)) + (output.extent.0 + t699)) + -64, 1, 32)], max(t625, t626)), min(t625, t626))
           let t629 = ((max(min((output.s0.y.yi + t704) + 2, input.extent.1), 1) - bounded_input.y.min_realized)*(t684 + 32)) + (output.extent.0 + t699)
           let t630 = ((max(min(output.s0.y.yi + t704, input.extent.1), 1) - bounded_input.y.min_realized)*(t684 + 32)) + (output.extent.0 + t699)
           let t631 = bounded_input[ramp(t630 + -63, 1, 32)]
           let t632.s = (max(min(output.s0.y.yi + t704, input.extent.1 + -1), 0) - bounded_input.y.min_realized)*(t684 + 32)
           let t633 = bounded_input[ramp((output.extent.0 + t632.s) + -31, 1, 32)]
           let t634 = max(min(bounded_input[ramp(t629 + -63, 1, 32)], max(t631, t633)), min(t631, t633))
           let t635 = bounded_input[ramp(t630 + -62, 1, 32)]
           let t636 = bounded_input[ramp((output.extent.0 + t632.s) + -30, 1, 32)]
           output[ramp((((output.s0.y.yi + t704)*output.stride.1) + t695) + -32, 1, 32)] = max(min(max(t617, t619), max(min(max(t627, t634), max(min(bounded_input[ramp(t629 + -62, 1, 32)], max(t635, t636)), min(t635, t636))), min(t627, t634))), min(t617, t619))
          }
          free minmax_x
         }
        }
       }
       free min_y
      }
     }
    }
    free max_y
   }
   free bounded_input
  }
 }
}
}


