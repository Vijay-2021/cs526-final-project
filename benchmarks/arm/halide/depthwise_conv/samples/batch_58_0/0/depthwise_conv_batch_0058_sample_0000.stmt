module name=depthwise_conv_batch_0058_sample_0000, target=x86-64-linux-avx-avx2-avx512-avx512_sapphirerapids-avx512_skylake-disable_llvm_loop_opt-f16c-fma-sse41
external_plus_metadata func depthwise_conv_batch_0058_sample_0000 (input, input_zero, filter, filter_zero, bias, depth_multiplier, stride_x, stride_y, dilation_x, dilation_y, output_multiplier, output_shift, output_zero, output_min, output_max, output) {
assert((uint64)reinterpret((halide_buffer_t *)output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("output"))
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
assert((uint64)reinterpret((halide_buffer_t *)filter.buffer) != (uint64)0, halide_error_buffer_argument_is_null("filter"))
assert((uint64)reinterpret((halide_buffer_t *)bias.buffer) != (uint64)0, halide_error_buffer_argument_is_null("bias"))
let bias = (void *)_halide_buffer_get_host((halide_buffer_t *)bias.buffer)
let bias.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)bias.buffer)
let bias.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)bias.buffer)
let bias.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)bias.buffer)
let bias.min.0 = _halide_buffer_get_min((halide_buffer_t *)bias.buffer, 0)
let bias.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)bias.buffer, 0)
let bias.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)bias.buffer, 0)
let filter = (void *)_halide_buffer_get_host((halide_buffer_t *)filter.buffer)
let filter.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)filter.buffer)
let filter.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)filter.buffer)
let filter.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)filter.buffer)
let filter.min.0 = _halide_buffer_get_min((halide_buffer_t *)filter.buffer, 0)
let filter.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)filter.buffer, 0)
let filter.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)filter.buffer, 0)
let filter.min.1 = _halide_buffer_get_min((halide_buffer_t *)filter.buffer, 1)
let filter.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)filter.buffer, 1)
let filter.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)filter.buffer, 1)
let filter.min.2 = _halide_buffer_get_min((halide_buffer_t *)filter.buffer, 2)
let filter.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)filter.buffer, 2)
let filter.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)filter.buffer, 2)
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let input.min.2 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 2)
let input.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 2)
let input.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 2)
let input.min.3 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 3)
let input.extent.3 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 3)
let input.stride.3 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 3)
let output = (void *)_halide_buffer_get_host((halide_buffer_t *)output.buffer)
let output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)output.buffer)
let output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)output.buffer)
let output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)output.buffer)
let output.min.0 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 0)
let output.min.1 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 1)
let output.min.2 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 2)
let output.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 2)
let output.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 2)
let output.min.3 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 3)
let output.extent.3 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 3)
let output.stride.3 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 3)
let bias.extent.0.required.s = min(max(max(-128 - output.extent.0, output.extent.0 + -1)/128, 0)*128, output.extent.0 + -128)
let input.extent.0.required.s = let t446 = (0 < depth_multiplier) in ((select(t446, (bias.extent.0.required.s + output.min.0) + 127, (min(output.extent.0, 128) + output.min.0) + -128)/depth_multiplier) - (select(t446, (min(output.extent.0, 128) + output.min.0) + -128, (bias.extent.0.required.s + output.min.0) + 127)/depth_multiplier))
let input.min.0.required = select(0 < depth_multiplier, (min(output.extent.0, 128) + output.min.0) + -128, (bias.extent.0.required.s + output.min.0) + 127)/depth_multiplier
let input.extent.1.required.s = let t449 = (dilation_x < 0) in (let t451 = (stride_x < 0) in (let t453 = min(max(max(-2 - output.extent.1, output.extent.1 + -1)/2, 0)*2, output.extent.1 + -2) in ((select(t449, 0 - dilation_x, dilation_x)*(filter.extent.1 + -1)) + (select(t451, (min(output.extent.1, 2) - t453) + -3, (t453 - min(output.extent.1, 2)) + 3)*stride_x))))
let input.min.1.required = select(dilation_x < 0, (filter.extent.1 + -1)*dilation_x, 0) + ((select(stride_x < 0, min(max(max(-2 - output.extent.1, output.extent.1 + -1)/2, 0)*2, output.extent.1 + -2) + 1, min(output.extent.1, 2) + -2) + output.min.1)*stride_x)
let input.extent.2.required.s = let t454 = (dilation_y < 0) in (let t456 = (stride_y < 0) in (let t457 = (0 < output.extent.1) in (let t458 = (0 < output.extent.0) in (let t459 = (((((output.extent.0 + 127)/128)*(((output.extent.1 + 1)/2)*output.extent.2)) + -1)/((output.extent.0 + 127)/128)) in (let t460 = select(t458, 0, t459) in (let t461 = select(t458, t459, 0) in (let t462 = (select(t457, t460, t461)/((output.extent.1 + 1)/2)) in (let t463 = (select(t457, t461, t460)/((output.extent.1 + 1)/2)) in ((select(t454, 0 - dilation_y, dilation_y)*(filter.extent.2 + -1)) + (select(t456, t462 - t463, t463 - t462)*stride_y))))))))))
let input.min.2.required = let t464 = (0 < output.extent.1) in (let t465 = (0 < output.extent.0) in (let t466 = (((((output.extent.0 + 127)/128)*(((output.extent.1 + 1)/2)*output.extent.2)) + -1)/((output.extent.0 + 127)/128)) in (let t467 = select(t465, t466, 0) in (let t468 = select(t465, 0, t466) in (select(dilation_y < 0, (filter.extent.2 + -1)*dilation_y, 0) + (((select(stride_y < 0, select(t464, t467, t468), select(t464, t468, t467))/((output.extent.1 + 1)/2)) + output.min.2)*stride_y))))))
let input.stride.2.required = (input.extent.0.required.s + 1)*(input.extent.1.required.s + 1)
let output.extent.1.required.s = min(max(max(-2 - output.extent.1, output.extent.1 + -1)/2, 0)*2, output.extent.1 + -2)
let output.extent.2.required.s = let t469 = (0 < output.extent.1) in (let t470 = (0 < output.extent.0) in (let t471 = (((((output.extent.0 + 127)/128)*(((output.extent.1 + 1)/2)*output.extent.2)) + -1)/((output.extent.0 + 127)/128)) in (let t472 = select(t470, t471, 0) in (let t473 = select(t470, 0, t471) in ((select(t469, t472, t473)/((output.extent.1 + 1)/2)) - (select(t469, t473, t472)/((output.extent.1 + 1)/2)))))))
let output.min.2.required.s = let t474 = (0 < output.extent.0) in (let t475 = (((((output.extent.0 + 127)/128)*(((output.extent.1 + 1)/2)*output.extent.2)) + -1)/((output.extent.0 + 127)/128)) in (select(0 < output.extent.1, select(t474, 0, t475), select(t474, t475, 0))/((output.extent.1 + 1)/2)))
let output.stride.2.required = (max(bias.extent.0.required.s, 0) + 128)*(max(output.extent.1.required.s, 0) + 2)
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)bias.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)bias.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)bias.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct((min(output.extent.0, 128) + output.min.0) + -128, max(bias.extent.0.required.s, 0) + 128, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)filter.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)filter.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)filter.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 3, (halide_dimension_t *)make_struct((min(output.extent.0, 128) + output.min.0) + -128, max(bias.extent.0.required.s, 0) + 128, 1, 0, 0, filter.extent.1, max(bias.extent.0.required.s, 0) + 128, 0, 0, filter.extent.2, (max(bias.extent.0.required.s, 0) + 128)*filter.extent.1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 4, (halide_dimension_t *)make_struct(input.min.0.required, input.extent.0.required.s + 1, 1, 0, input.min.1.required, input.extent.1.required.s + 1, input.extent.0.required.s + 1, 0, input.min.2.required, input.extent.2.required.s + 1, input.stride.2.required, 0, output.min.3, output.extent.3, (input.extent.2.required.s + 1)*input.stride.2.required, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 4, (halide_dimension_t *)make_struct((min(output.extent.0, 128) + output.min.0) + -128, max(bias.extent.0.required.s, 0) + 128, 1, 0, (min(output.extent.1, 2) + output.min.1) + -2, max(output.extent.1.required.s, 0) + 2, max(bias.extent.0.required.s, 0) + 128, 0, output.min.2 + output.min.2.required.s, output.extent.2.required.s + 1, output.stride.2.required, 0, output.min.3, output.extent.3, (output.extent.2.required.s + 1)*output.stride.2.required, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)bias.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)filter.buffer))))) {
 assert(bias.type == (uint32)73728, halide_error_bad_type("Input buffer bias", bias.type, (uint32)73728))
 assert(bias.dimensions == 1, halide_error_bad_dimensions("Input buffer bias", bias.dimensions, 1))
 assert(filter.type == (uint32)67585, halide_error_bad_type("Input buffer filter", filter.type, (uint32)67585))
 assert(filter.dimensions == 3, halide_error_bad_dimensions("Input buffer filter", filter.dimensions, 3))
 assert(input.type == (uint32)67585, halide_error_bad_type("Input buffer input", input.type, (uint32)67585))
 assert(input.dimensions == 4, halide_error_bad_dimensions("Input buffer input", input.dimensions, 4))
 assert(output.type == (uint32)67585, halide_error_bad_type("Output buffer output", output.type, (uint32)67585))
 assert(output.dimensions == 4, halide_error_bad_dimensions("Output buffer output", output.dimensions, 4))
 assert(((bias.min.0 + 128) <= (min(output.extent.0, 128) + output.min.0)) && (((max(bias.extent.0.required.s, 0) + min(output.extent.0, 128)) + output.min.0) <= (bias.extent.0 + bias.min.0)), halide_error_access_out_of_bounds("Input buffer bias", 0, (min(output.extent.0, 128) + output.min.0) + -128, ((max(bias.extent.0.required.s, 0) + min(output.extent.0, 128)) + output.min.0) + -1, bias.min.0, (bias.extent.0 + bias.min.0) + -1))
 assert(0 <= bias.extent.0, halide_error_buffer_extents_negative("Input buffer bias", 0, bias.extent.0))
 assert(((filter.min.0 + 128) <= (min(output.extent.0, 128) + output.min.0)) && (((max(bias.extent.0.required.s, 0) + min(output.extent.0, 128)) + output.min.0) <= (filter.extent.0 + filter.min.0)), halide_error_access_out_of_bounds("Input buffer filter", 0, (min(output.extent.0, 128) + output.min.0) + -128, ((max(bias.extent.0.required.s, 0) + min(output.extent.0, 128)) + output.min.0) + -1, filter.min.0, (filter.extent.0 + filter.min.0) + -1))
 assert(0 <= filter.extent.0, halide_error_buffer_extents_negative("Input buffer filter", 0, filter.extent.0))
 assert((filter.min.1 <= 0) && (0 <= filter.min.1), halide_error_access_out_of_bounds("Input buffer filter", 1, 0, filter.extent.1 + -1, filter.min.1, (filter.extent.1 + filter.min.1) + -1))
 assert(0 <= filter.extent.1, halide_error_buffer_extents_negative("Input buffer filter", 1, filter.extent.1))
 assert((filter.min.2 <= 0) && (0 <= filter.min.2), halide_error_access_out_of_bounds("Input buffer filter", 2, 0, filter.extent.2 + -1, filter.min.2, (filter.extent.2 + filter.min.2) + -1))
 assert(0 <= filter.extent.2, halide_error_buffer_extents_negative("Input buffer filter", 2, filter.extent.2))
 assert((input.min.0 <= input.min.0.required) && (((input.extent.0.required.s + input.min.0.required) + 1) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, input.extent.0.required.s + input.min.0.required, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert((input.min.1 <= input.min.1.required) && (((input.extent.1.required.s + input.min.1.required) + 1) <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, input.extent.1.required.s + input.min.1.required, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert((input.min.2 <= input.min.2.required) && (((input.extent.2.required.s + input.min.2.required) + 1) <= (input.extent.2 + input.min.2)), halide_error_access_out_of_bounds("Input buffer input", 2, input.min.2.required, input.extent.2.required.s + input.min.2.required, input.min.2, (input.extent.2 + input.min.2) + -1))
 assert(0 <= input.extent.2, halide_error_buffer_extents_negative("Input buffer input", 2, input.extent.2))
 assert((input.min.3 <= output.min.3) && ((output.extent.3 + output.min.3) <= (input.extent.3 + input.min.3)), halide_error_access_out_of_bounds("Input buffer input", 3, output.min.3, (output.extent.3 + output.min.3) + -1, input.min.3, (input.extent.3 + input.min.3) + -1))
 assert(0 <= input.extent.3, halide_error_buffer_extents_negative("Input buffer input", 3, input.extent.3))
 assert(max(max(bias.extent.0.required.s, 0) + min(output.extent.0, 128), 128) <= output.extent.0, halide_error_access_out_of_bounds("Output buffer output", 0, (min(output.extent.0, 128) + output.min.0) + -128, ((max(bias.extent.0.required.s, 0) + min(output.extent.0, 128)) + output.min.0) + -1, output.min.0, (output.extent.0 + output.min.0) + -1))
 assert(max(max(output.extent.1.required.s, 0) + min(output.extent.1, 2), 2) <= output.extent.1, halide_error_access_out_of_bounds("Output buffer output", 1, (min(output.extent.1, 2) + output.min.1) + -2, ((max(output.extent.1.required.s, 0) + min(output.extent.1, 2)) + output.min.1) + -1, output.min.1, (output.extent.1 + output.min.1) + -1))
 assert((0 <= output.min.2.required.s) && ((((output.min.2 + output.min.2.required.s) + output.extent.2.required.s) + 1) <= (output.extent.2 + output.min.2)), halide_error_access_out_of_bounds("Output buffer output", 2, output.min.2 + output.min.2.required.s, (output.min.2 + output.min.2.required.s) + output.extent.2.required.s, output.min.2, (output.extent.2 + output.min.2) + -1))
 assert(0 <= output.extent.2, halide_error_buffer_extents_negative("Output buffer output", 2, output.extent.2))
 assert(0 <= output.extent.3, halide_error_buffer_extents_negative("Output buffer output", 3, output.extent.3))
 assert(bias.stride.0 == 1, halide_error_constraint_violated("bias.stride.0", bias.stride.0, "1", 1))
 assert(filter.stride.0 == 1, halide_error_constraint_violated("filter.stride.0", filter.stride.0, "1", 1))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 assert(output.stride.0 == 1, halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
 let filter.total_extent.1 = int64(filter.extent.1)*int64(filter.extent.0)
 let filter.total_extent.2 = filter.total_extent.1*int64(filter.extent.2)
 let input.total_extent.1 = int64(input.extent.1)*int64(input.extent.0)
 let input.total_extent.2 = input.total_extent.1*int64(input.extent.2)
 let input.total_extent.3 = input.total_extent.2*int64(input.extent.3)
 let output.total_extent.1 = int64(output.extent.1)*int64(output.extent.0)
 let output.total_extent.2 = output.total_extent.1*int64(output.extent.2)
 let output.total_extent.3 = output.total_extent.2*int64(output.extent.3)
 assert(uint64(bias.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("bias", uint64(bias.extent.0), (uint64)2147483647))
 assert(uint64(filter.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("filter", uint64(filter.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(filter.extent.1)*int64(filter.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("filter", (uint64)abs(int64(filter.extent.1)*int64(filter.stride.1)), (uint64)2147483647))
 assert(filter.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("filter", filter.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(filter.extent.2)*int64(filter.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("filter", (uint64)abs(int64(filter.extent.2)*int64(filter.stride.2)), (uint64)2147483647))
 assert(filter.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("filter", filter.total_extent.2, (int64)2147483647))
 assert(uint64(input.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", uint64(input.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(input.extent.1)*int64(input.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", (uint64)abs(int64(input.extent.1)*int64(input.stride.1)), (uint64)2147483647))
 assert(input.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(input.extent.2)*int64(input.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", (uint64)abs(int64(input.extent.2)*int64(input.stride.2)), (uint64)2147483647))
 assert(input.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("input", input.total_extent.2, (int64)2147483647))
 assert((uint64)abs(int64(input.extent.3)*int64(input.stride.3)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", (uint64)abs(int64(input.extent.3)*int64(input.stride.3)), (uint64)2147483647))
 assert(input.total_extent.3 <= (int64)2147483647, halide_error_buffer_extents_too_large("input", input.total_extent.3, (int64)2147483647))
 assert(uint64(output.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", uint64(output.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(output.extent.1)*int64(output.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", (uint64)abs(int64(output.extent.1)*int64(output.stride.1)), (uint64)2147483647))
 assert(output.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(output.extent.2)*int64(output.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", (uint64)abs(int64(output.extent.2)*int64(output.stride.2)), (uint64)2147483647))
 assert(output.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("output", output.total_extent.2, (int64)2147483647))
 assert((uint64)abs(int64(output.extent.3)*int64(output.stride.3)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", (uint64)abs(int64(output.extent.3)*int64(output.stride.3)), (uint64)2147483647))
 assert(output.total_extent.3 <= (int64)2147483647, halide_error_buffer_extents_too_large("output", output.total_extent.3, (int64)2147483647))
 assert(!bias.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer bias"))
 assert(!filter.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer filter"))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert(!output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer output"))
 assert(bias != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer bias"))
 assert(filter != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer filter"))
 assert(input != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer input"))
 assert(output != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer output"))
 let output.s0.c.c.c.loop_extent = ((output.extent.0 + 127)/128)*(((output.extent.1 + 1)/2)*output.extent.2)
 produce output {
  let t495 = stride_x < 0
  let t496 = dilation_x < 0
  let t497 = (filter.extent.1 + -1)*dilation_x
  let t491 = select(t496, t497, 0)
  let t489 = select(t496, 0, t497)
  let t487 = (output.extent.1 + 1)/2
  let t486 = (output.extent.0 + 127)/128
  let t494 = (((output.min.0 - (output.min.3*output.stride.3)) - (output.min.2*output.stride.2)) - (output.min.1*output.stride.1)) - output.min.0
  let t488 = output.min.0 - bias.min.0
  let t492 = select(t495, 1, 0) + output.min.1
  let t490 = select(t495, 0, 1) + output.min.1
  let t493 = ((input.min.1*input.stride.1) + ((input.min.3*input.stride.3) + (input.min.2*input.stride.2))) + input.min.0
  for (output.s0.b.rebased, 0, output.extent.3) {
   let t500 = output.min.3 + output.s0.b.rebased
   let t498 = (input.stride.3*t500) - t493
   let t499 = (output.stride.3*t500) + t494
   parallel (output.s0.c.c.c, 0, output.s0.c.c.c.loop_extent) {
    let output.s0.c.ci.base.s = min((output.s0.c.c.c % t486)*128, output.extent.0 + -128)
    let output.s0.x.xi.base.s = min(((output.s0.c.c.c/t486) % t487)*2, output.extent.1 + -2)
    let output.s0.y.min_1.s = (output.s0.c.c.c/t486)/t487
    allocate filter_zeroed[int16 * 128 * filter.extent.1 * filter.extent.2]
    produce filter_zeroed {
     let t501 = output.min.0 + output.s0.c.ci.base.s
     for (filter_zeroed.s0.y, 0, filter.extent.2) {
      let t503 = ((filter.extent.1*filter_zeroed.s0.y)*128) - t501
      let t502 = (filter.stride.2*filter_zeroed.s0.y) - filter.min.0
      for (filter_zeroed.s0.x, 0, filter.extent.1) {
       let t505 = (filter_zeroed.s0.x*128) + t503
       let t504 = (filter.stride.1*filter_zeroed.s0.x) + t502
       for (filter_zeroed.s0.c.c, 0, 2) {
        let filter_zeroed.s0.c.ci.base = (filter_zeroed.s0.c.c*64) + t501
        filter_zeroed[ramp(filter_zeroed.s0.c.ci.base + t505, 1, 64)] = (int16x64)widening_sub(filter[ramp(filter_zeroed.s0.c.ci.base + t504, 1, 64)], x64((uint8)filter_zero))
       }
      }
     }
    }
    allocate offset_c[int32 * 128]
    produce offset_c {
     consume filter_zeroed {
      allocate sum_filter[int32 * 64] in Stack
      produce sum_filter {
       sum_filter[ramp(0, 1, 16)] = x16(0)
       sum_filter[ramp(16, 1, 16)] = x16(0)
       sum_filter[ramp(32, 1, 16)] = x16(0)
       sum_filter[ramp(48, 1, 16)] = x16(0)
       for (sum_filter.s1.r19$y, 0, filter.extent.2) {
        let t506 = filter.extent.1*sum_filter.s1.r19$y
        for (sum_filter.s1.r19$x, 0, filter.extent.1) {
         sum_filter[ramp(0, 1, 32)] = sum_filter[ramp(0, 1, 32)] + int32x32(filter_zeroed[ramp((sum_filter.s1.r19$x + t506)*128, 1, 32) aligned(128, 0)])
         sum_filter[ramp(32, 1, 32)] = sum_filter[ramp(32, 1, 32)] + int32x32(filter_zeroed[ramp(((sum_filter.s1.r19$x + t506)*128) + 32, 1, 32) aligned(128, 32)])
        }
       }
      }
      consume sum_filter {
       offset_c[ramp(0, 1, 64)] = bias[ramp(output.s0.c.ci.base.s + t488, 1, 64)] - (sum_filter[ramp(0, 1, 64)]*x64(int32((uint8)input_zero)))
      }
      free sum_filter
      allocate sum_filter[int32 * 64] in Stack
      produce sum_filter {
       sum_filter[ramp(0, 1, 16)] = x16(0)
       sum_filter[ramp(16, 1, 16)] = x16(0)
       sum_filter[ramp(32, 1, 16)] = x16(0)
       sum_filter[ramp(48, 1, 16)] = x16(0)
       for (sum_filter.s1.r19$y, 0, filter.extent.2) {
        let t507 = filter.extent.1*sum_filter.s1.r19$y
        for (sum_filter.s1.r19$x, 0, filter.extent.1) {
         sum_filter[ramp(0, 1, 32)] = sum_filter[ramp(0, 1, 32)] + int32x32(filter_zeroed[ramp(((sum_filter.s1.r19$x + t507)*128) + 64, 1, 32) aligned(128, 64)])
         sum_filter[ramp(32, 1, 32)] = sum_filter[ramp(32, 1, 32)] + int32x32(filter_zeroed[ramp(((sum_filter.s1.r19$x + t507)*128) + 96, 1, 32) aligned(128, 96)])
        }
       }
      }
      consume sum_filter {
       offset_c[ramp(64, 1, 64)] = bias[ramp((output.s0.c.ci.base.s + t488) + 64, 1, 64)] - (sum_filter[ramp(0, 1, 64)]*x64(int32((uint8)input_zero)))
      }
      free sum_filter
     }
    }
    allocate convolved[int32 * 128 * 2 * 1 * 1]
    produce convolved {
     consume offset_c {
      for (convolved.s0.x.rebased, 0, 2) {
       let t508 = convolved.s0.x.rebased*8
       for (convolved.s0.c.c, 0, 8) {
        convolved[ramp((convolved.s0.c.c + t508)*16, 1, 16) aligned(16, 0)] = offset_c[ramp(convolved.s0.c.c*16, 1, 16) aligned(16, 0)]
       }
      }
     }
     free offset_c
     consume filter_zeroed {
      let t509 = (output.min.2 + output.s0.y.min_1.s)*stride_y
      let t511 = ((output.s0.x.xi.base.s + t492)*stride_x) + t491
      let t510 = ((output.s0.x.xi.base.s + t490)*stride_x) + t489
      let t513 = output.min.1 + output.s0.x.xi.base.s
      let t512 = output.min.0 + output.s0.c.ci.base.s
      for (convolved.s1.c.c, 0, 2) {
       let t514 = t510 - t511
       let t515 = (convolved.s1.c.c*64) + t512
       for (convolved.s1.r19$y, 0, filter.extent.2) {
        let resampled_input.s0.y.max_2 = (convolved.s1.r19$y*dilation_y) + t509
        allocate resampled_input[uint8 * 64 * (t514 + 1) * 1 * 1] in Stack
        produce resampled_input {
         let t516 = (input.stride.2*resampled_input.s0.y.max_2) + t498
         for (resampled_input.s0.x.rebased, 0, t514 + 1) {
          resampled_input[ramp(resampled_input.s0.x.rebased*64, 1, 64) aligned(64, 0)] = input[(ramp(t515, 1, 64)/x64(depth_multiplier)) + x64(((resampled_input.s0.x.rebased + t511)*input.stride.1) + t516)]
         }
        }
        consume resampled_input {
         let t517 = ((convolved.s1.r19$y*filter.extent.1)*2) + convolved.s1.c.c
         for (convolved.s1.x.rebased, 0, 2) {
          let t519 = ((convolved.s1.x.rebased + t513)*stride_x) - t511
          let t518 = (convolved.s1.x.rebased*2) + convolved.s1.c.c
          for (convolved.s1.r19$x, 0, filter.extent.1) {
           convolved[ramp(t518*64, 1, 64) aligned(64, 0)] = convolved[ramp(t518*64, 1, 64) aligned(64, 0)] + (int32x64)widening_mul(filter_zeroed[ramp(((convolved.s1.r19$x*2) + t517)*64, 1, 64) aligned(64, 0)], int16x64(resampled_input[ramp(((convolved.s1.r19$x*dilation_x) + t519)*64, 1, 64) aligned(64, 0)]))
          }
         }
        }
        free resampled_input
       }
      }
     }
     free filter_zeroed
    }
    consume convolved {
     output[ramp((((output.min.1 + output.s0.x.xi.base.s)*output.stride.1) + (((output.min.2 + output.s0.y.min_1.s)*output.stride.2) + t499)) + output.s0.c.ci.base.s, 1, 64)] = max(min(uint8x64(max(min((int16x64)saturating_add(int16x64(max(min((int32x64)rounding_shift_right((int32x64)rounding_mul_shift_right(convolved[ramp(0, 1, 64)], x64(output_multiplier), x64((uint32)31)), x64((uint32)output_shift)), x64(32767)), x64(-32768))), x64(int16((uint8)output_zero))), x64((int16)255)), x64((int16)0))), x64((uint8)output_max)), x64((uint8)output_min))
     output[ramp(((((output.min.1 + output.s0.x.xi.base.s)*output.stride.1) + (((output.min.2 + output.s0.y.min_1.s)*output.stride.2) + t499)) + output.s0.c.ci.base.s) + 64, 1, 64)] = max(min(uint8x64(max(min((int16x64)saturating_add(int16x64(max(min((int32x64)rounding_shift_right((int32x64)rounding_mul_shift_right(convolved[ramp(64, 1, 64)], x64(output_multiplier), x64((uint32)31)), x64((uint32)output_shift)), x64(32767)), x64(-32768))), x64(int16((uint8)output_zero))), x64((int16)255)), x64((int16)0))), x64((uint8)output_max)), x64((uint8)output_min))
     output[ramp(((((output.min.1 + output.s0.x.xi.base.s) + 1)*output.stride.1) + (((output.min.2 + output.s0.y.min_1.s)*output.stride.2) + t499)) + output.s0.c.ci.base.s, 1, 64)] = max(min(uint8x64(max(min((int16x64)saturating_add(int16x64(max(min((int32x64)rounding_shift_right((int32x64)rounding_mul_shift_right(convolved[ramp(128, 1, 64)], x64(output_multiplier), x64((uint32)31)), x64((uint32)output_shift)), x64(32767)), x64(-32768))), x64(int16((uint8)output_zero))), x64((int16)255)), x64((int16)0))), x64((uint8)output_max)), x64((uint8)output_min))
     output[ramp((((((output.min.1 + output.s0.x.xi.base.s) + 1)*output.stride.1) + (((output.min.2 + output.s0.y.min_1.s)*output.stride.2) + t499)) + output.s0.c.ci.base.s) + 64, 1, 64)] = max(min(uint8x64(max(min((int16x64)saturating_add(int16x64(max(min((int32x64)rounding_shift_right((int32x64)rounding_mul_shift_right(convolved[ramp(192, 1, 64)], x64(output_multiplier), x64((uint32)31)), x64((uint32)output_shift)), x64(32767)), x64(-32768))), x64(int16((uint8)output_zero))), x64((int16)255)), x64((int16)0))), x64((uint8)output_max)), x64((uint8)output_min))
     free convolved
    }
   }
  }
 }
}
}


