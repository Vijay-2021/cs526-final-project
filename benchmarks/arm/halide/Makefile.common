SHELL = zsh
HALIDE_DISTRIB = $(HYDRIDE_ROOT)/frontends/halide/distrib
LLVM_ROOT ?= $(LLVM_DIS_ROOT)
LLVM_SYMBOLIZER_PATH ?= $(LLVM_ROOT)/bin

benchmarks = gaussian3x3 \
			 gaussian5x5 \
			 gaussian7x7 \
			 dilate3x3 \
			 dilate5x5 \
			 dilate7x7 \
			 median3x3 \
			 sobel3x3 \
			 sobel5x5 \
			 blur3x3 \
			 blur5x5 \
			 blur7x7 \
			 matmul \
			 matmul_simple \
			 add \
			 mul \
			 l2norm \
			 max_pool \
			 max_pool_add \
			 average_pool \
			 average_pool_add \
			 matmul_1024_32bit\
			 conv_nn \
			 simple \
			 conv3x3a16 \
			 matmul_256_32bit \
			 softmax\
			 depthwise_conv\
			 batched_matmul_256_32bit\
			 matmul_256_32bit_bias_add\
			 matmul_256_32bit_bias_add_add\
			 matmul_256_32bit_bias_add_relu\
			 matmul_256_32bit_bias_add_gelu\
			 matmul_bias_gelu_matmul\
			 matmul_bias_relu_matmul

bin_dirs = $(addsuffix /bin,$(benchmarks))
bin_ref_dirs = $(addsuffix /bin_ref,$(benchmarks))

hannk = hannk/common_halide.cpp

ENABLE_HYDRIDE ?= 1
ifeq ($(ENABLE_HYDRIDE), 1)
	BIN=bin
else
	BIN=bin_ref
endif
EXPR_DEPTH ?=2
SYNTH_BITWIDTH ?= 16 
INT_BW ?= 16

BENCHMARK ?=1

CC=/usr/bin/clang
TARGET=arm-64-osx-no_bounds_query-no_asserts
STARTING_HASH_FLAG=#HYDRIDE_INITIAL_HASH=starting_hash


.PHONY: clean all $(benchmarks)

all: $(benchmarks)

$(benchmarks): %: %/$(BIN)
# 	Compile the generator
	g++ --std=c++17 -fno-rtti -O3 -DLOG2VLEN=7    \
		-I $(HALIDE_DISTRIB)/include -I $(HALIDE_DISTRIB)/tools \
		-g $@/src/$@_generator.cpp $(HALIDE_DISTRIB)/tools/GenGen.cpp \
		$(hannk) \
		-o $@/$(BIN)/$@_generator \
		-L $(HALIDE_DISTRIB)/lib -lHalide $(shell $(LLVM_CONFIG) --system-libs --link-static) $(ADDITIONAL)

# 	Use the generator (to get a manual schedule which is the default)
#
	export HYDRIDE_BENCHMARK=$@_arm_depth$(EXPR_DEPTH); time HYDRIDE_DISTRIBUTE_LOOK_AHEAD=1 HL_EXPR_DEPTH=$(EXPR_DEPTH) $(STARTING_HASH_FLAG) HL_ENABLE_HYDRIDE=$(ENABLE_HYDRIDE) HL_SYNTH_BW=$(SYNTH_BITWIDTH) HYDRIDE_TARGET=arm ./$@/$(BIN)/$@_generator \
		-t 0 \
		-o $@/$(BIN) \
		-g $@ \
		-e static_library,stmt,h,llvm_assembly,assembly \
		-f $@ target=$(TARGET)
	HL_EXPR_DEPTH=$(EXPR_DEPTH) HL_ENABLE_HYDRIDE=0 HL_DEBUG_CODEGEN=1  HL_SYNTH_BW=$(SYNTH_BITWIDTH) ./$@/$(BIN)/$@_generator \
		-r halide_runtime_x86 \
		-o $@/$(BIN) \
		-e object,c_header \
		target=$(TARGET)
	
	$(CC) -Dbenchmark_$@ --std=c++17 \
		-O0\
		-I $(HALIDE_DISTRIB)/include -I ./$@/$(BIN) \
		-lstdc++ -ldl -pthread \
		test/run.cpp \
		test/stubs.cpp \
		$@/$(BIN)/$@.a \
		$@/$(BIN)/halide_runtime_x86.o \
		-o $@/$(BIN)/$@_run.out

	
ifeq ($(BENCHMARK),1) 

# Benchmark the generated $(BIN)ary
	$@/$(BIN)/$@_run.out 3840 2160 ../test_vectors/football3840x2160.bin $@/out/out.bin

endif

fully_connected: 
	g++ --std=c++17 -fno-rtti -O3 -DLOG2VLEN=7 \
		-I $(HALIDE_DISTRIB)/include -I $(HALIDE_DISTRIB)/tools \
		-g $@/src/$@_generator.cpp $(HALIDE_DISTRIB)/tools/GenGen.cpp \
		$(hannk) \
		-o $@/$(BIN)/$@_generator \
		-L $(HALIDE_DISTRIB)/lib -lHalide $(shell $(LLVM_CONFIG) --system-libs --link-static) $(ADDITIONAL)

	export LD_LIBRARY_PATH=$(HALIDE_DISTRIB)/lib; time export HYDRIDE_BENCHMARK=$@_arm_depth$(EXPR_DEPTH); HL_ENABLE_HYDRIDE=$(ENABLE_HYDRIDE) HL_EXPR_DEPTH=$(EXPR_DEPTH) HYDRIDE_TARGET=arm HYDRIDE_DISTRIBUTE_LOOK_AHEAD=1   HL_SYNTH_BW=$(INT_BW) $(STARTING_HASH) ./$@/$(BIN)/$@_generator \
	    -t 0 \
		-o $@/$(BIN) \
		-g $@ output.type=uint8 \
		-e static_library,stmt,h,llvm_assembly,assembly \
		-f $@ target=$(TARGET)
	
	HL_EXPR_DEPTH=$(EXPR_DEPTH) HL_ENABLE_HYDRIDE=0 HL_DEBUG_CODEGEN=1  HL_SYNTH_BW=$(SYNTH_BITWIDTH) ./$@/$(BIN)/$@_generator \
		-r halide_runtime_x86 \
		-o $@/$(BIN) \
		-e object,c_header \
		target=$(TARGET)
	
	$(CC) -Dbenchmark_$@ --std=c++17 \
		-O0\
		-I $(HALIDE_DISTRIB)/include -I ./$@/$(BIN) \
		-lstdc++ -ldl -pthread \
		test/run.cpp \
		test/stubs.cpp \
		$@/$(BIN)/$@.a \
		$@/$(BIN)/halide_runtime_x86.o \
		-o $@/$(BIN)/$@_run.out

	
ifeq ($(BENCHMARK),1) 

# Benchmark the generated $(BIN)ary
	$@/$(BIN)/$@_run.out 3840 2160 ../test_vectors/football3840x2160.bin $@/out/out.bin

endif

#-lpng -lpthread -ldl -ljpeg 
	
fully_connected/bin_ref fully_connected/bin: %:
	mkdir $@

# Make the bin dirs if needed
$(bin_dirs): %:
	mkdir $@

$(bin_ref_dirs): %:
	mkdir $@

clean:
	rm -rf $(bin_dirs)
	rm -rf halide_expr_*
	rm -rf /tmp/hydride_exprs.rkt
	rm -rf /tmp/base_*
	rm -rf /tmp/hydride_hash*
	rm -rf /tmp/hydride.node*