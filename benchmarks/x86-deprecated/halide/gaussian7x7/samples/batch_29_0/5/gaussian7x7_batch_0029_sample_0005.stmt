module name=gaussian7x7_batch_0029_sample_0005, target=x86-64-linux-avx-avx2-avx512-avx512_sapphirerapids-avx512_skylake-disable_llvm_loop_opt-f16c-fma-sse41
external_plus_metadata func gaussian7x7_batch_0029_sample_0005 (input, output) {
assert((uint64)reinterpret((halide_buffer_t *)output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("output"))
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let output = (void *)_halide_buffer_get_host((halide_buffer_t *)output.buffer)
let output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)output.buffer)
let output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)output.buffer)
let output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)output.buffer)
let output.min.0 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 0)
let output.min.1 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 1)
let input.extent.0.required.s = min(max(max(-960 - output.extent.0, output.extent.0 + -1)/960, 0)*960, output.extent.0 + -960)
let input.extent.1.required.s = let t18 = (0 < output.extent.0) in (let t19 = (((((output.extent.0 + 959)/960)*((output.extent.1 + 33)/34)) + -1)/((output.extent.0 + 959)/960)) in (min(select(t18, t19, 0)*34, output.extent.1 + -34) - min(select(t18, 0, t19)*34, output.extent.1 + -34)))
let input.min.1.required.s = min(select(0 < output.extent.0, 0, ((((output.extent.0 + 959)/960)*((output.extent.1 + 33)/34)) + -1)/((output.extent.0 + 959)/960))*34, output.extent.1 + -34)
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct((min(output.extent.0, 960) + output.min.0) + -963, max(input.extent.0.required.s, 0) + 966, 1, 0, (input.min.1.required.s + output.min.1) + -3, input.extent.1.required.s + 40, max(input.extent.0.required.s, 0) + 966, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct((min(output.extent.0, 960) + output.min.0) + -960, max(input.extent.0.required.s, 0) + 960, 1, 0, input.min.1.required.s + output.min.1, input.extent.1.required.s + 34, max(input.extent.0.required.s, 0) + 960, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer))) {
 assert(input.type == (uint32)67585, halide_error_bad_type("Input buffer input", input.type, (uint32)67585))
 assert(input.dimensions == 2, halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
 assert(output.type == (uint32)67585, halide_error_bad_type("Output buffer output", output.type, (uint32)67585))
 assert(output.dimensions == 2, halide_error_bad_dimensions("Output buffer output", output.dimensions, 2))
 assert(((input.min.0 + 963) <= (min(output.extent.0, 960) + output.min.0)) && ((((max(input.extent.0.required.s, 0) + min(output.extent.0, 960)) + output.min.0) + 3) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, (min(output.extent.0, 960) + output.min.0) + -963, ((max(input.extent.0.required.s, 0) + min(output.extent.0, 960)) + output.min.0) + 2, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert(((input.min.1 + 3) <= (input.min.1.required.s + output.min.1)) && ((((input.min.1.required.s + output.min.1) + input.extent.1.required.s) + 37) <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, (input.min.1.required.s + output.min.1) + -3, ((input.min.1.required.s + output.min.1) + input.extent.1.required.s) + 36, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert(max(max(input.extent.0.required.s, 0) + min(output.extent.0, 960), 960) <= output.extent.0, halide_error_access_out_of_bounds("Output buffer output", 0, (min(output.extent.0, 960) + output.min.0) + -960, ((max(input.extent.0.required.s, 0) + min(output.extent.0, 960)) + output.min.0) + -1, output.min.0, (output.extent.0 + output.min.0) + -1))
 assert((0 <= input.min.1.required.s) && ((((input.min.1.required.s + output.min.1) + input.extent.1.required.s) + 34) <= (output.extent.1 + output.min.1)), halide_error_access_out_of_bounds("Output buffer output", 1, input.min.1.required.s + output.min.1, ((input.min.1.required.s + output.min.1) + input.extent.1.required.s) + 33, output.min.1, (output.extent.1 + output.min.1) + -1))
 assert(0 <= output.extent.1, halide_error_buffer_extents_negative("Output buffer output", 1, output.extent.1))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 assert(output.stride.0 == 1, halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
 let input.total_extent.1 = int64(input.extent.1)*int64(input.extent.0)
 let output.total_extent.1 = int64(output.extent.1)*int64(output.extent.0)
 assert(uint64(input.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", uint64(input.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(input.extent.1)*int64(input.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", (uint64)abs(int64(input.extent.1)*int64(input.stride.1)), (uint64)2147483647))
 assert(input.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
 assert(uint64(output.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", uint64(output.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(output.extent.1)*int64(output.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", (uint64)abs(int64(output.extent.1)*int64(output.stride.1)), (uint64)2147483647))
 assert(output.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert(!output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer output"))
 assert(input != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer input"))
 assert(output != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer output"))
 let output.s0.x.x.x.loop_extent = ((output.extent.0 + 959)/960)*((output.extent.1 + 33)/34)
 produce output {
  let t36 = input.min.1*input.stride.1
  let t28 = (output.extent.0 + 959)/960
  let t34 = (output.min.0 - t36) - input.min.0
  let t35 = 0 - (output.min.1*output.stride.1)
  let t29 = input.min.0 + t36
  parallel (output.s0.x.x.x, 0, output.s0.x.x.x.loop_extent) {
   let output.s0.x.xi.base.s = min((output.s0.x.x.x % t28)*960, output.extent.0 + -960)
   let output.s0.y.yi.base.s = min((output.s0.x.x.x/t28)*34, output.extent.1 + -34)
   let t44 = output.s0.x.xi.base.s + t35
   let t43 = output.s0.x.xi.base.s + t34
   let t38 = output.min.1 + output.s0.y.yi.base.s
   let t37 = output.min.0 + output.s0.x.xi.base.s
   for (output.s0.y.yi.yi, 0, 2) {
    allocate rows[int32 * 966] in Stack
    let t45 = (output.s0.y.yi.yi*17) + t38
    for (output.s0.y.yi.yii, 0, 17) {
     produce rows {
      let t50 = ((output.s0.y.yi.yii + t45)*input.stride.1) - t29
      for (rows.s0.x.x, 0, 60) {
       let rows.s0.x.xi.base.s = (rows.s0.x.x*16) + t37
       let t16 = rows.s0.x.xi.base.s + t50
       rows[ramp(rows.s0.x.xi.base.s - t37, 1, 16)] = ((int32x16((int16x16)widening_mul(input[ramp(((input.stride.1*-2) + t16) + -3, 1, 16)], x16((int8)6))) + (int32x16((int16x16)widening_mul(input[ramp((t16 - input.stride.1) + -3, 1, 16)], x16((int8)15))) + (int32x16((int16x16)widening_mul(input[ramp(t16 + -3, 1, 16)], x16((int8)20))) + (int32x16)widening_add((int16x16)widening_mul(input[ramp(((input.stride.1*2) + t16) + -3, 1, 16)], x16((int8)6)), (int16x16)widening_mul(input[ramp((input.stride.1 + t16) + -3, 1, 16)], x16((int8)15)))))) + int32x16(input[ramp(((input.stride.1*-3) + t16) + -3, 1, 16)])) + int32x16(input[ramp(((input.stride.1*3) + t16) + -3, 1, 16)])
      }
      let t17 = ((output.s0.y.yi.yii + t45)*input.stride.1) + t43
      rows[ramp(950, 1, 16)] = ((int32x16((int16x16)widening_mul(input[ramp(((input.stride.1*-2) + t17) + 947, 1, 16)], x16((int8)6))) + (int32x16((int16x16)widening_mul(input[ramp((t17 - input.stride.1) + 947, 1, 16)], x16((int8)15))) + (int32x16((int16x16)widening_mul(input[ramp(t17 + 947, 1, 16)], x16((int8)20))) + (int32x16)widening_add((int16x16)widening_mul(input[ramp(((input.stride.1*2) + t17) + 947, 1, 16)], x16((int8)6)), (int16x16)widening_mul(input[ramp((input.stride.1 + t17) + 947, 1, 16)], x16((int8)15)))))) + int32x16(input[ramp(((input.stride.1*-3) + t17) + 947, 1, 16)])) + int32x16(input[ramp(((input.stride.1*3) + t17) + 947, 1, 16)])
     }
     consume rows {
      let t55 = ((output.s0.y.yi.yii + t45)*output.stride.1) + t44
      for (output.s0.x.xi.xi, 0, 5) {
       allocate cols[int32 * 192] in Stack
       produce cols {
        cols[ramp(0, 1, 16)] = (rows[ramp((output.s0.x.xi.xi*192) + 1, 1, 16) aligned(192, 1)]*x16(6)) + (rows[ramp(output.s0.x.xi.xi*192, 1, 16) aligned(192, 0)] + ((rows[ramp((output.s0.x.xi.xi*192) + 2, 1, 16) aligned(192, 2)]*x16(15)) + ((rows[ramp((output.s0.x.xi.xi*192) + 3, 1, 16) aligned(192, 3)]*x16(20)) + ((rows[ramp((output.s0.x.xi.xi*192) + 4, 1, 16) aligned(192, 4)]*x16(15)) + (rows[ramp((output.s0.x.xi.xi*192) + 6, 1, 16) aligned(192, 6)] + (rows[ramp((output.s0.x.xi.xi*192) + 5, 1, 16) aligned(192, 5)]*x16(6)))))))
        cols[ramp(16, 1, 16)] = (rows[ramp((output.s0.x.xi.xi*192) + 17, 1, 16) aligned(192, 17)]*x16(6)) + (rows[ramp((output.s0.x.xi.xi*192) + 16, 1, 16) aligned(192, 16)] + ((rows[ramp((output.s0.x.xi.xi*192) + 18, 1, 16) aligned(192, 18)]*x16(15)) + ((rows[ramp((output.s0.x.xi.xi*192) + 19, 1, 16) aligned(192, 19)]*x16(20)) + ((rows[ramp((output.s0.x.xi.xi*192) + 20, 1, 16) aligned(192, 20)]*x16(15)) + (rows[ramp((output.s0.x.xi.xi*192) + 22, 1, 16) aligned(192, 22)] + (rows[ramp((output.s0.x.xi.xi*192) + 21, 1, 16) aligned(192, 21)]*x16(6)))))))
        cols[ramp(32, 1, 16)] = (rows[ramp((output.s0.x.xi.xi*192) + 33, 1, 16) aligned(192, 33)]*x16(6)) + (rows[ramp((output.s0.x.xi.xi*192) + 32, 1, 16) aligned(192, 32)] + ((rows[ramp((output.s0.x.xi.xi*192) + 34, 1, 16) aligned(192, 34)]*x16(15)) + ((rows[ramp((output.s0.x.xi.xi*192) + 35, 1, 16) aligned(192, 35)]*x16(20)) + ((rows[ramp((output.s0.x.xi.xi*192) + 36, 1, 16) aligned(192, 36)]*x16(15)) + (rows[ramp((output.s0.x.xi.xi*192) + 38, 1, 16) aligned(192, 38)] + (rows[ramp((output.s0.x.xi.xi*192) + 37, 1, 16) aligned(192, 37)]*x16(6)))))))
        cols[ramp(48, 1, 16)] = (rows[ramp((output.s0.x.xi.xi*192) + 49, 1, 16) aligned(192, 49)]*x16(6)) + (rows[ramp((output.s0.x.xi.xi*192) + 48, 1, 16) aligned(192, 48)] + ((rows[ramp((output.s0.x.xi.xi*192) + 50, 1, 16) aligned(192, 50)]*x16(15)) + ((rows[ramp((output.s0.x.xi.xi*192) + 51, 1, 16) aligned(192, 51)]*x16(20)) + ((rows[ramp((output.s0.x.xi.xi*192) + 52, 1, 16) aligned(192, 52)]*x16(15)) + (rows[ramp((output.s0.x.xi.xi*192) + 54, 1, 16) aligned(192, 54)] + (rows[ramp((output.s0.x.xi.xi*192) + 53, 1, 16) aligned(192, 53)]*x16(6)))))))
        cols[ramp(64, 1, 16)] = (rows[ramp((output.s0.x.xi.xi*192) + 65, 1, 16) aligned(192, 65)]*x16(6)) + (rows[ramp((output.s0.x.xi.xi*192) + 64, 1, 16) aligned(192, 64)] + ((rows[ramp((output.s0.x.xi.xi*192) + 66, 1, 16) aligned(192, 66)]*x16(15)) + ((rows[ramp((output.s0.x.xi.xi*192) + 67, 1, 16) aligned(192, 67)]*x16(20)) + ((rows[ramp((output.s0.x.xi.xi*192) + 68, 1, 16) aligned(192, 68)]*x16(15)) + (rows[ramp((output.s0.x.xi.xi*192) + 70, 1, 16) aligned(192, 70)] + (rows[ramp((output.s0.x.xi.xi*192) + 69, 1, 16) aligned(192, 69)]*x16(6)))))))
        cols[ramp(80, 1, 16)] = (rows[ramp((output.s0.x.xi.xi*192) + 81, 1, 16) aligned(192, 81)]*x16(6)) + (rows[ramp((output.s0.x.xi.xi*192) + 80, 1, 16) aligned(192, 80)] + ((rows[ramp((output.s0.x.xi.xi*192) + 82, 1, 16) aligned(192, 82)]*x16(15)) + ((rows[ramp((output.s0.x.xi.xi*192) + 83, 1, 16) aligned(192, 83)]*x16(20)) + ((rows[ramp((output.s0.x.xi.xi*192) + 84, 1, 16) aligned(192, 84)]*x16(15)) + (rows[ramp((output.s0.x.xi.xi*192) + 86, 1, 16) aligned(192, 86)] + (rows[ramp((output.s0.x.xi.xi*192) + 85, 1, 16) aligned(192, 85)]*x16(6)))))))
        cols[ramp(96, 1, 16)] = (rows[ramp((output.s0.x.xi.xi*192) + 97, 1, 16) aligned(192, 97)]*x16(6)) + (rows[ramp((output.s0.x.xi.xi*192) + 96, 1, 16) aligned(192, 96)] + ((rows[ramp((output.s0.x.xi.xi*192) + 98, 1, 16) aligned(192, 98)]*x16(15)) + ((rows[ramp((output.s0.x.xi.xi*192) + 99, 1, 16) aligned(192, 99)]*x16(20)) + ((rows[ramp((output.s0.x.xi.xi*192) + 100, 1, 16) aligned(192, 100)]*x16(15)) + (rows[ramp((output.s0.x.xi.xi*192) + 102, 1, 16) aligned(192, 102)] + (rows[ramp((output.s0.x.xi.xi*192) + 101, 1, 16) aligned(192, 101)]*x16(6)))))))
        cols[ramp(112, 1, 16)] = (rows[ramp((output.s0.x.xi.xi*192) + 113, 1, 16) aligned(192, 113)]*x16(6)) + (rows[ramp((output.s0.x.xi.xi*192) + 112, 1, 16) aligned(192, 112)] + ((rows[ramp((output.s0.x.xi.xi*192) + 114, 1, 16) aligned(192, 114)]*x16(15)) + ((rows[ramp((output.s0.x.xi.xi*192) + 115, 1, 16) aligned(192, 115)]*x16(20)) + ((rows[ramp((output.s0.x.xi.xi*192) + 116, 1, 16) aligned(192, 116)]*x16(15)) + (rows[ramp((output.s0.x.xi.xi*192) + 118, 1, 16) aligned(192, 118)] + (rows[ramp((output.s0.x.xi.xi*192) + 117, 1, 16) aligned(192, 117)]*x16(6)))))))
        cols[ramp(128, 1, 16)] = (rows[ramp((output.s0.x.xi.xi*192) + 129, 1, 16) aligned(192, 129)]*x16(6)) + (rows[ramp((output.s0.x.xi.xi*192) + 128, 1, 16) aligned(192, 128)] + ((rows[ramp((output.s0.x.xi.xi*192) + 130, 1, 16) aligned(192, 130)]*x16(15)) + ((rows[ramp((output.s0.x.xi.xi*192) + 131, 1, 16) aligned(192, 131)]*x16(20)) + ((rows[ramp((output.s0.x.xi.xi*192) + 132, 1, 16) aligned(192, 132)]*x16(15)) + (rows[ramp((output.s0.x.xi.xi*192) + 134, 1, 16) aligned(192, 134)] + (rows[ramp((output.s0.x.xi.xi*192) + 133, 1, 16) aligned(192, 133)]*x16(6)))))))
        cols[ramp(144, 1, 16)] = (rows[ramp((output.s0.x.xi.xi*192) + 145, 1, 16) aligned(192, 145)]*x16(6)) + (rows[ramp((output.s0.x.xi.xi*192) + 144, 1, 16) aligned(192, 144)] + ((rows[ramp((output.s0.x.xi.xi*192) + 146, 1, 16) aligned(192, 146)]*x16(15)) + ((rows[ramp((output.s0.x.xi.xi*192) + 147, 1, 16) aligned(192, 147)]*x16(20)) + ((rows[ramp((output.s0.x.xi.xi*192) + 148, 1, 16) aligned(192, 148)]*x16(15)) + (rows[ramp((output.s0.x.xi.xi*192) + 150, 1, 16) aligned(192, 150)] + (rows[ramp((output.s0.x.xi.xi*192) + 149, 1, 16) aligned(192, 149)]*x16(6)))))))
        cols[ramp(160, 1, 16)] = (rows[ramp((output.s0.x.xi.xi*192) + 161, 1, 16) aligned(192, 161)]*x16(6)) + (rows[ramp((output.s0.x.xi.xi*192) + 160, 1, 16) aligned(192, 160)] + ((rows[ramp((output.s0.x.xi.xi*192) + 162, 1, 16) aligned(192, 162)]*x16(15)) + ((rows[ramp((output.s0.x.xi.xi*192) + 163, 1, 16) aligned(192, 163)]*x16(20)) + ((rows[ramp((output.s0.x.xi.xi*192) + 164, 1, 16) aligned(192, 164)]*x16(15)) + (rows[ramp((output.s0.x.xi.xi*192) + 166, 1, 16) aligned(192, 166)] + (rows[ramp((output.s0.x.xi.xi*192) + 165, 1, 16) aligned(192, 165)]*x16(6)))))))
        cols[ramp(176, 1, 16)] = (rows[ramp((output.s0.x.xi.xi*192) + 177, 1, 16) aligned(192, 177)]*x16(6)) + (rows[ramp((output.s0.x.xi.xi*192) + 176, 1, 16) aligned(192, 176)] + ((rows[ramp((output.s0.x.xi.xi*192) + 178, 1, 16) aligned(192, 178)]*x16(15)) + ((rows[ramp((output.s0.x.xi.xi*192) + 179, 1, 16) aligned(192, 179)]*x16(20)) + ((rows[ramp((output.s0.x.xi.xi*192) + 180, 1, 16) aligned(192, 180)]*x16(15)) + (rows[ramp((output.s0.x.xi.xi*192) + 182, 1, 16) aligned(192, 182)] + (rows[ramp((output.s0.x.xi.xi*192) + 181, 1, 16) aligned(192, 181)]*x16(6)))))))
       }
       consume cols {
        output[ramp((output.s0.x.xi.xi*192) + t55, 1, 64)] = uint8x64(max(min((int32x64)shift_right(cols[ramp(0, 1, 64)], x64((uint32)12)), x64(255)), x64(0)))
        output[ramp(((output.s0.x.xi.xi*192) + t55) + 64, 1, 64)] = uint8x64(max(min((int32x64)shift_right(cols[ramp(64, 1, 64)], x64((uint32)12)), x64(255)), x64(0)))
        output[ramp(((output.s0.x.xi.xi*192) + t55) + 128, 1, 64)] = uint8x64(max(min((int32x64)shift_right(cols[ramp(128, 1, 64)], x64((uint32)12)), x64(255)), x64(0)))
        free cols
       }
      }
     }
    }
    free rows
   }
  }
 }
}
}


