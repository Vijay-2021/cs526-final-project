module name=idct4_batch_0009_sample_0004, target=x86-64-linux-avx-avx2-avx512-avx512_sapphirerapids-avx512_skylake-disable_llvm_loop_opt-f16c-fma-sse41
external_plus_metadata func idct4_batch_0009_sample_0004 (input, output) {
assert((uint64)reinterpret((halide_buffer_t *)output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("output"))
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let output = (void *)_halide_buffer_get_host((halide_buffer_t *)output.buffer)
let output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)output.buffer)
let output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)output.buffer)
let output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)output.buffer)
let output.min.0 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 0)
let output.min.1 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 1)
let input.extent.0.required = min(min(output.extent.0, 32) + (((output.extent.0 + -1)/32)*32), output.extent.0)
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 16, 2, (halide_dimension_t *)make_struct(output.min.0, input.extent.0.required, 1, 0, 0, 4, input.extent.0.required, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 16, 2, (halide_dimension_t *)make_struct(output.min.0, input.extent.0.required, 1, 0, output.min.1, output.extent.1, input.extent.0.required, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer))) {
 assert(input.type == (uint32)69632, halide_error_bad_type("Input buffer input", input.type, (uint32)69632))
 assert(input.dimensions == 2, halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
 assert(output.type == (uint32)69632, halide_error_bad_type("Output buffer output", output.type, (uint32)69632))
 assert(output.dimensions == 2, halide_error_bad_dimensions("Output buffer output", output.dimensions, 2))
 assert((input.min.0 <= output.min.0) && ((input.extent.0.required + output.min.0) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, output.min.0, (input.extent.0.required + output.min.0) + -1, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert((input.min.1 <= 0) && (4 <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, 0, 3, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert(input.extent.0.required <= output.extent.0, halide_error_access_out_of_bounds("Output buffer output", 0, output.min.0, (input.extent.0.required + output.min.0) + -1, output.min.0, (output.extent.0 + output.min.0) + -1))
 assert(0 <= output.extent.0, halide_error_buffer_extents_negative("Output buffer output", 0, output.extent.0))
 assert(0 <= output.extent.1, halide_error_buffer_extents_negative("Output buffer output", 1, output.extent.1))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 assert(output.stride.0 == 1, halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
 let input.total_extent.1 = int64(input.extent.1)*int64(input.extent.0)
 let output.total_extent.1 = int64(output.extent.1)*int64(output.extent.0)
 assert(uint64(input.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", uint64(input.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(input.extent.1)*int64(input.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", (uint64)abs(int64(input.extent.1)*int64(input.stride.1)), (uint64)2147483647))
 assert(input.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
 assert(uint64(output.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", uint64(output.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(output.extent.1)*int64(output.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", (uint64)abs(int64(output.extent.1)*int64(output.stride.1)), (uint64)2147483647))
 assert(output.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert(!output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer output"))
 assert(input != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer input"))
 assert(output != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer output"))
 allocate src[int32 * input.extent.0.required * 4]
 produce src {
  let t126 = input.min.1*input.stride.1
  let t127 = output.extent.0/32
  let t128 = t127*32
  let t129 = output.extent.0 % 32
  let t122 = t129 != 0
  let t124 = ((output.min.0 + t128) - t126) - input.min.0
  let t121 = (output.min.0 - t126) - input.min.0
  parallel (src.s0.y, 0, 4) {
   let t131 = input.extent.0.required*src.s0.y
   let t130 = (input.stride.1*src.s0.y) + t121
   for (src.s0.x.x, 0, t127) {
    src[ramp((src.s0.x.x*32) + t131, 1, 32)] = int32x32(input[ramp((src.s0.x.x*32) + t130, 1, 32)])
   }
   if (t122) {
    let t132 = (input.stride.1*src.s0.y) + t124
    let t133 = (input.extent.0.required*src.s0.y) + t128
    for (src.s0.x.xi, 0, t129) {
     src[src.s0.x.xi + t133] = int32(input[src.s0.x.xi + t132])
    }
   }
  }
 }
 produce output {
  consume src {
   let t144 = input.extent.0.required*3
   let t145 = output.extent.0/32
   let t146 = t145*32
   let t147 = output.min.1*output.stride.1
   let t148 = output.extent.0 % 32
   let t137 = t148 != 0
   let t140 = ((t145*16) + input.extent.0.required)*2
   let t143 = t146 - t147
   let t136 = 0 - t147
   parallel (output.s0.y.rebased, 0, output.extent.1) {
    let t149 = output.min.1 + output.s0.y.rebased
    for (output.s0.x.x, 0, t145) {
     let t97 = src[ramp(output.s0.x.x*32, 1, 32) aligned(32, 0)]
     let t98 = src[ramp(((output.s0.x.x*16) + input.extent.0.required)*2, 1, 32) aligned(2, 0)]
     let t100 = src[ramp((output.s0.x.x*32) + input.extent.0.required, 1, 32)]
     let t101 = src[ramp((output.s0.x.x*32) + t144, 1, 32)]
     let t102 = (t100*x32(83)) + (t101*x32(36))
     let t104 = (t100*x32(36)) + (t101*x32(-83))
     let t115 = t97 + t98
     let t116 = t97 - t98
     output[ramp((output.s0.x.x*32) + ((output.stride.1*t149) + t136), 1, 32)] = select(t149 == 0, int16x32(max(min((int32x32)rounding_shift_right((t115*x32(65)) + t102, x32((uint32)7)), x32(32767)), x32(-32768))), select(t149 == 1, int16x32(max(min((int32x32)rounding_shift_right((t116*x32(65)) + t104, x32((uint32)7)), x32(32767)), x32(-32768))), select(t149 == 2, int16x32(max(min((int32x32)rounding_shift_right((t116*x32(65)) - t104, x32((uint32)7)), x32(32767)), x32(-32768))), int16x32(max(min((int32x32)rounding_shift_right((t115*x32(65)) - t102, x32((uint32)7)), x32(32767)), x32(-32768))))))
    }
    if (t137) {
     let t151 = t144 + t146
     let t152 = output.min.1 + output.s0.y.rebased
     let t150 = input.extent.0.required + t146
     for (output.s0.x.xi, 0, t148) {
      let t106 = src[output.s0.x.xi + t146]
      let t107 = src[output.s0.x.xi + t140]
      let t109 = src[output.s0.x.xi + t150]
      let t110 = src[output.s0.x.xi + t151]
      let t111 = (t109*83) + (t110*36)
      let t113 = (t109*36) + (t110*-83)
      let t118 = t106 + t107
      let t119 = t106 - t107
      output[((output.stride.1*t152) + t143) + output.s0.x.xi] = select(t152 == 0, int16(max(min((((t118*65) + t111) + 64)/128, 32767), -32768)), select(t152 == 1, int16(max(min((((t119*65) + t113) + 64)/128, 32767), -32768)), select(t152 == 2, int16(max(min((((t119*65) - t113) + 64)/128, 32767), -32768)), int16(max(min((((t118*65) - t111) + 64)/128, 32767), -32768)))))
     }
    }
   }
  }
 }
 free src
}
}


