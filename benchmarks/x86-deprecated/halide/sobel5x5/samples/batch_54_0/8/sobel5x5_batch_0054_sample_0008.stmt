module name=sobel5x5_batch_0054_sample_0008, target=x86-64-linux-avx-avx2-avx512-avx512_sapphirerapids-avx512_skylake-disable_llvm_loop_opt-f16c-fma-sse41
external_plus_metadata func sobel5x5_batch_0054_sample_0008 (input, output) {
assert((uint64)reinterpret((halide_buffer_t *)output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("output"))
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let output = (void *)_halide_buffer_get_host((halide_buffer_t *)output.buffer)
let output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)output.buffer)
let output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)output.buffer)
let output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)output.buffer)
let output.min.0 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 0)
let output.min.1 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 1)
let input.extent.0.required.s = max(min(min(output.extent.0 + 902, min(output.extent.0, 960) + (((max(output.extent.0, 960) + 5)/64)*64)) + output.min.0, (input.extent.0 + input.min.0) + 899) + -900, input.min.0) - max(min(min(output.extent.0, 960) + output.min.0, (input.extent.0 + input.min.0) + 962) + -963, input.min.0)
let input.min.0.required = max(min(min(output.extent.0, 960) + output.min.0, (input.extent.0 + input.min.0) + 962) + -963, input.min.0)
let input.extent.1.required = max(min((output.extent.1 + output.min.1) + 2, input.extent.1 + input.min.1), input.min.1 + 1) - max(min(min(output.extent.1, 27) + output.min.1, (input.extent.1 + input.min.1) + 28) + -29, input.min.1)
let input.min.1.required = max(min(min(output.extent.1, 27) + output.min.1, (input.extent.1 + input.min.1) + 28) + -29, input.min.1)
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct(input.min.0.required, input.extent.0.required.s + 1, 1, 0, input.min.1.required, input.extent.1.required, input.extent.0.required.s + 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct((min(output.extent.0, 960) + output.min.0) + -960, max(output.extent.0, 960), 1, 0, (min(output.extent.1, 27) + output.min.1) + -27, max(output.extent.1, 27), max(output.extent.0, 960), 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer))) {
 assert(input.type == (uint32)67585, halide_error_bad_type("Input buffer input", input.type, (uint32)67585))
 assert(input.dimensions == 2, halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
 assert(output.type == (uint32)67585, halide_error_bad_type("Output buffer output", output.type, (uint32)67585))
 assert(output.dimensions == 2, halide_error_bad_dimensions("Output buffer output", output.dimensions, 2))
 assert((input.min.0 <= input.min.0.required) && (((input.extent.0.required.s + input.min.0.required) + 1) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, input.extent.0.required.s + input.min.0.required, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert((input.min.1 <= input.min.1.required) && ((input.extent.1.required + input.min.1.required) <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, (input.extent.1.required + input.min.1.required) + -1, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert(960 <= output.extent.0, halide_error_access_out_of_bounds("Output buffer output", 0, (min(output.extent.0, 960) + output.min.0) + -960, (output.extent.0 + output.min.0) + -1, output.min.0, (output.extent.0 + output.min.0) + -1))
 assert(27 <= output.extent.1, halide_error_access_out_of_bounds("Output buffer output", 1, (min(output.extent.1, 27) + output.min.1) + -27, (output.extent.1 + output.min.1) + -1, output.min.1, (output.extent.1 + output.min.1) + -1))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 assert(output.stride.0 == 1, halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
 let input.total_extent.1 = int64(input.extent.1)*int64(input.extent.0)
 let output.total_extent.1 = int64(output.extent.1)*int64(output.extent.0)
 assert(uint64(input.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", uint64(input.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(input.extent.1)*int64(input.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", (uint64)abs(int64(input.extent.1)*int64(input.stride.1)), (uint64)2147483647))
 assert(input.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
 assert(uint64(output.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", uint64(output.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(output.extent.1)*int64(output.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", (uint64)abs(int64(output.extent.1)*int64(output.stride.1)), (uint64)2147483647))
 assert(output.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert(!output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer output"))
 assert(input != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer input"))
 assert(output != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer output"))
 produce output {
  let t1787 = input.extent.0 + input.min.0
  let t1788 = (output.extent.0 + 69)/64
  let t1789 = min(max(((input.min.0 - output.min.0) + 66)/64, 0), t1788)
  let t1790 = t1787 - output.min.0
  let t1783 = max((min(min(min(t1790 + 60, output.extent.0) + 3, t1790), output.extent.0 + 66) + 3)/64, t1789)
  let t1777 = (output.extent.1 + 26)/27
  let t1785 = (output.extent.0 + 959)/960
  let t1786 = 0 - (output.min.1*output.stride.1)
  parallel (output.s0.y.y, 0, t1777) {
   let output.s0.y.yi.base.s = min(output.s0.y.y*27, output.extent.1 + -27)
   allocate repeat_edge[uint8 * (output.extent.0 + 64) * 16] in Stack
   let t1799 = input.extent.1 + input.min.1
   let t1800 = min(output.s0.y.y*27, output.extent.1 + -27)
   let t1793 = (input.min.1 - output.min.1) - t1800
   let t1798 = t1799 - t1800
   let t1794 = output.min.1 + t1800
   let t1791 = output.min.1 + output.s0.y.yi.base.s
   for (output.s0.y.yi.yi.$n.rebased, 0, 4) {
    produce repeat_edge {
     let repeat_edge.s0._1.prologue = min(max((max(output.s0.y.yi.yi.$n.rebased*9, 5) + t1791) + -7, input.min.1), (min(output.s0.y.yi.yi.$n.rebased*9, 5) + (max(output.s0.y.yi.yi.$n.rebased*9, 5) + t1791)) + -3)
     let repeat_edge.s0._1.epilogue = min(max(max((max(output.s0.y.yi.yi.$n.rebased*9, 5) + t1791) + -7, input.min.1), t1799), (min(output.s0.y.yi.yi.$n.rebased*9, 5) + (max(output.s0.y.yi.yi.$n.rebased*9, 5) + t1791)) + -3)
     let t1803 = output.s0.y.yi.yi.$n.rebased*9
     let t1804 = max(t1803, 5)
     let t1801 = min(min(max(t1793 - t1804, -7) + 3, t1803), 5)
     let t1802 = t1791 + t1804
     for (repeat_edge.s0._1.rebased, 0, t1801 + 4) {
      let t1806 = (((repeat_edge.s0._1.rebased + t1802) + 9) % 16)*(output.extent.0 + 64)
      let t1805 = ((max(min((t1802 - input.min.1) + repeat_edge.s0._1.rebased, input.extent.1 + 6), 7) + -7)*input.stride.1) - input.min.0
      for (repeat_edge.s0._0._0, 0, t1788) {
       let repeat_edge.s0._0._0i.base.s = min((repeat_edge.s0._0._0*64) + 58, output.extent.0)
       repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t1806) + -58, 1, 64)] = input[max(min(ramp((output.min.0 + repeat_edge.s0._0._0i.base.s) + -61, 1, 64), x64(t1787 + -1)), x64(input.min.0)) + x64(t1805)]
      }
     }
     let t1812 = output.s0.y.yi.yi.$n.rebased*9
     let t1813 = (max(t1812, 5) + t1794) + -7
     let t1814 = (t1794 + t1812) + 2
     let t1807 = min(max(t1799, t1813), t1814) - min(max(input.min.1, t1813), t1814)
     let t1811 = t1788 - t1783
     let t1808 = repeat_edge.s0._1.prologue - input.min.1
     for (repeat_edge.s0._1.rebased, 0, t1807) {
      let t1816 = ((repeat_edge.s0._1.prologue + repeat_edge.s0._1.rebased) % 16)*(output.extent.0 + 64)
      let t1815 = ((repeat_edge.s0._1.rebased + t1808)*input.stride.1) - input.min.0
      for (repeat_edge.s0._0._0, 0, t1789) {
       let repeat_edge.s0._0._0i.base.s = min((repeat_edge.s0._0._0*64) + 58, output.extent.0)
       repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t1816) + -58, 1, 64)] = input[max(min(ramp((output.min.0 + repeat_edge.s0._0._0i.base.s) + -61, 1, 64), x64(t1787 + -1)), x64(input.min.0)) + x64(t1815)]
      }
      let t1819 = ((repeat_edge.s0._1.prologue + repeat_edge.s0._1.rebased) % 16)*(output.extent.0 + 64)
      let t1817 = t1783 - t1789
      let t1818 = ((repeat_edge.s0._1.rebased + t1808)*input.stride.1) + (output.min.0 - input.min.0)
      for (repeat_edge.s0._0._0.rebased, 0, t1817) {
       let t1738 = repeat_edge.s0._0._0.rebased + t1789
       repeat_edge[ramp((t1738*64) + t1819, 1, 64)] = input[ramp(((t1738*64) + t1818) + -3, 1, 64)]
      }
      let t1821 = ((repeat_edge.s0._1.prologue + repeat_edge.s0._1.rebased) % 16)*(output.extent.0 + 64)
      let t1820 = ((repeat_edge.s0._1.rebased + t1808)*input.stride.1) - input.min.0
      for (repeat_edge.s0._0._0.rebased, 0, t1811) {
       let repeat_edge.s0._0._0i.base.s = min(((repeat_edge.s0._0._0.rebased + t1783)*64) + 58, output.extent.0)
       repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t1821) + -58, 1, 64)] = input[max(min(ramp((output.min.0 + repeat_edge.s0._0._0i.base.s) + -61, 1, 64), x64(t1787 + -1)), x64(input.min.0)) + x64(t1820)]
      }
     }
     let t1824 = output.s0.y.yi.yi.$n.rebased*9
     let t1822 = max((output.min.1 + t1824) - max((max(t1824, 5) + output.min.1) + -7, t1798), -2)
     let t1823 = repeat_edge.s0._1.epilogue - input.min.1
     for (repeat_edge.s0._1.rebased, 0, t1822 + 2) {
      let t1826 = ((repeat_edge.s0._1.epilogue + repeat_edge.s0._1.rebased) % 16)*(output.extent.0 + 64)
      let t1825 = (max(min(repeat_edge.s0._1.rebased + t1823, input.extent.1 + -1), 0)*input.stride.1) - input.min.0
      for (repeat_edge.s0._0._0, 0, t1788) {
       let repeat_edge.s0._0._0i.base.s = min((repeat_edge.s0._0._0*64) + 58, output.extent.0)
       repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t1826) + -58, 1, 64)] = input[max(min(ramp((output.min.0 + repeat_edge.s0._0._0i.base.s) + -61, 1, 64), x64(t1787 + -1)), x64(input.min.0)) + x64(t1825)]
      }
     }
    }
    if (1 <= output.s0.y.yi.yi.$n.rebased) {
     consume repeat_edge {
      let t1829 = output.s0.y.yi.yi.$n.rebased*9
      for (output.s0.x.x, 0, t1785) {
       let output.s0.x.xi.base.s = min(output.s0.x.x*960, output.extent.0 + -960)
       allocate sobel_x[uint8 * 9600] in Stack
       let t1831 = output.s0.x.xi.base.s + t1786
       for (output.s0.x.xi.xi.$n, 0, 5) {
        allocate input_16[uint16 * 3584] in Stack
        produce input_16 {
         let t1833 = (output.s0.x.xi.xi.$n*192) + output.s0.x.xi.base.s
         let t1832 = t1791 + t1829
         for (input_16.s0.y.y, 0, 7) {
          let input_16.s0.y.yi.base.s.s = (input_16.s0.y.y*2) + t1832
          allocate bounded_input[uint8 * 512] in Stack
          produce bounded_input {
           bounded_input[ramp(0, 1, 64)] = repeat_edge[ramp((((input_16.s0.y.yi.base.s.s + 5) % 16)*(output.extent.0 + 64)) + t1833, 1, 64)]
           bounded_input[ramp(64, 1, 64)] = repeat_edge[ramp(((((input_16.s0.y.yi.base.s.s + 5) % 16)*(output.extent.0 + 64)) + t1833) + 64, 1, 64)]
           bounded_input[ramp(128, 1, 64)] = repeat_edge[ramp(((((input_16.s0.y.yi.base.s.s + 5) % 16)*(output.extent.0 + 64)) + t1833) + 128, 1, 64)]
           bounded_input[ramp(192, 1, 64)] = repeat_edge[ramp(((((input_16.s0.y.yi.base.s.s + 5) % 16)*(output.extent.0 + 64)) + t1833) + 192, 1, 64)]
           bounded_input[ramp(256, 1, 64)] = repeat_edge[ramp((((input_16.s0.y.yi.base.s.s + 6) % 16)*(output.extent.0 + 64)) + t1833, 1, 64)]
           bounded_input[ramp(320, 1, 64)] = repeat_edge[ramp(((((input_16.s0.y.yi.base.s.s + 6) % 16)*(output.extent.0 + 64)) + t1833) + 64, 1, 64)]
           bounded_input[ramp(384, 1, 64)] = repeat_edge[ramp(((((input_16.s0.y.yi.base.s.s + 6) % 16)*(output.extent.0 + 64)) + t1833) + 128, 1, 64)]
           bounded_input[ramp(448, 1, 64)] = repeat_edge[ramp(((((input_16.s0.y.yi.base.s.s + 6) % 16)*(output.extent.0 + 64)) + t1833) + 192, 1, 64)]
          }
          consume bounded_input {
           input_16[ramp(input_16.s0.y.y*512, 1, 64) aligned(512, 0)] = uint16x64(bounded_input[ramp(0, 1, 64)])
           input_16[ramp((input_16.s0.y.y*512) + 64, 1, 64) aligned(512, 64)] = uint16x64(bounded_input[ramp(64, 1, 64)])
           input_16[ramp((input_16.s0.y.y*512) + 128, 1, 64) aligned(512, 128)] = uint16x64(bounded_input[ramp(128, 1, 64)])
           input_16[ramp((input_16.s0.y.y*512) + 192, 1, 64) aligned(512, 192)] = uint16x64(bounded_input[ramp(192, 1, 64)])
           input_16[ramp((input_16.s0.y.y*512) + 256, 1, 64) aligned(512, 256)] = uint16x64(bounded_input[ramp(256, 1, 64)])
           input_16[ramp((input_16.s0.y.y*512) + 320, 1, 64) aligned(512, 320)] = uint16x64(bounded_input[ramp(320, 1, 64)])
           input_16[ramp((input_16.s0.y.y*512) + 384, 1, 64) aligned(512, 384)] = uint16x64(bounded_input[ramp(384, 1, 64)])
           input_16[ramp((input_16.s0.y.y*512) + 448, 1, 64) aligned(512, 448)] = uint16x64(bounded_input[ramp(448, 1, 64)])
           free bounded_input
          }
         }
        }
        allocate sobel_x_low_avg[uint16 * 2688] in Stack
        produce sobel_x_low_avg {
         consume input_16 {
          for (sobel_x_low_avg.s0.y.rebased, 0, 11) {
           let t1834 = sobel_x_low_avg.s0.y.rebased*8
           let t1835 = sobel_x_low_avg.s0.y.rebased*7
           for (sobel_x_low_avg.s0.x.x, 0, 7) {
            let t1739 = sobel_x_low_avg.s0.x.x + t1834
            sobel_x_low_avg[ramp((sobel_x_low_avg.s0.x.x + t1835)*32, 1, 32) aligned(32, 0)] = input_16[ramp((t1739*32) + 257, 1, 32) aligned(32, 1)] + (input_16[ramp((t1739*32) + 256, 1, 32) aligned(32, 0)] + ((uint16x32)shift_left(input_16[ramp((t1739*32) + 258, 1, 32) aligned(32, 2)], x32((uint16)1)) + (input_16[ramp((t1739*32) + 260, 1, 32) aligned(32, 4)] + input_16[ramp((t1739*32) + 259, 1, 32) aligned(32, 3)])))
           }
          }
         }
        }
        produce sobel_x {
         consume sobel_x_low_avg {
          consume input_16 {
           for (sobel_x.s0.y.y, 0, 5) {
            allocate sobel_x_high[uint16 * 384] in Stack
            produce sobel_x_high {
             let t1836 = sobel_x.s0.y.y*8
             for (sobel_x_high.s0.x.x, 0, 3) {
              allocate sobel_x_high_avg[uint16 * 384] in Stack
              produce sobel_x_high_avg {
               let t1740 = sobel_x_high.s0.x.x + t1836
               sobel_x_high_avg[ramp(0, 1, 32)] = (uint16x32)shift_left(input_16[ramp((t1740*64) + 2, 1, 32) aligned(64, 2)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1740*64) + 1, 1, 32) aligned(64, 1)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1740*64) + 3, 1, 32) aligned(64, 3)], x32((uint16)2)) + ((uint16x32)shift_left(input_16[ramp((t1740*64) + 5, 1, 32) aligned(64, 5)], x32((uint16)1)) + (uint16x32)shift_left(input_16[ramp((t1740*64) + 4, 1, 32) aligned(64, 4)], x32((uint16)1)))))
               let t1741 = sobel_x_high.s0.x.x + t1836
               sobel_x_high_avg[ramp(32, 1, 32)] = (uint16x32)shift_left(input_16[ramp((t1741*64) + 34, 1, 32) aligned(64, 34)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1741*64) + 33, 1, 32) aligned(64, 33)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1741*64) + 35, 1, 32) aligned(64, 35)], x32((uint16)2)) + ((uint16x32)shift_left(input_16[ramp((t1741*64) + 37, 1, 32) aligned(64, 37)], x32((uint16)1)) + (uint16x32)shift_left(input_16[ramp((t1741*64) + 36, 1, 32) aligned(64, 36)], x32((uint16)1)))))
               let t1742 = sobel_x_high.s0.x.x + t1836
               sobel_x_high_avg[ramp(64, 1, 32)] = (uint16x32)shift_left(input_16[ramp((t1742*64) + 258, 1, 32) aligned(64, 2)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1742*64) + 257, 1, 32) aligned(64, 1)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1742*64) + 259, 1, 32) aligned(64, 3)], x32((uint16)2)) + ((uint16x32)shift_left(input_16[ramp((t1742*64) + 261, 1, 32) aligned(64, 5)], x32((uint16)1)) + (uint16x32)shift_left(input_16[ramp((t1742*64) + 260, 1, 32) aligned(64, 4)], x32((uint16)1)))))
               let t1743 = sobel_x_high.s0.x.x + t1836
               sobel_x_high_avg[ramp(96, 1, 32)] = (uint16x32)shift_left(input_16[ramp((t1743*64) + 290, 1, 32) aligned(64, 34)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1743*64) + 289, 1, 32) aligned(64, 33)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1743*64) + 291, 1, 32) aligned(64, 35)], x32((uint16)2)) + ((uint16x32)shift_left(input_16[ramp((t1743*64) + 293, 1, 32) aligned(64, 37)], x32((uint16)1)) + (uint16x32)shift_left(input_16[ramp((t1743*64) + 292, 1, 32) aligned(64, 36)], x32((uint16)1)))))
               let t1744 = sobel_x_high.s0.x.x + t1836
               sobel_x_high_avg[ramp(128, 1, 32)] = (uint16x32)shift_left(input_16[ramp((t1744*64) + 514, 1, 32) aligned(64, 2)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1744*64) + 513, 1, 32) aligned(64, 1)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1744*64) + 515, 1, 32) aligned(64, 3)], x32((uint16)2)) + ((uint16x32)shift_left(input_16[ramp((t1744*64) + 517, 1, 32) aligned(64, 5)], x32((uint16)1)) + (uint16x32)shift_left(input_16[ramp((t1744*64) + 516, 1, 32) aligned(64, 4)], x32((uint16)1)))))
               let t1745 = sobel_x_high.s0.x.x + t1836
               sobel_x_high_avg[ramp(160, 1, 32)] = (uint16x32)shift_left(input_16[ramp((t1745*64) + 546, 1, 32) aligned(64, 34)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1745*64) + 545, 1, 32) aligned(64, 33)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1745*64) + 547, 1, 32) aligned(64, 35)], x32((uint16)2)) + ((uint16x32)shift_left(input_16[ramp((t1745*64) + 549, 1, 32) aligned(64, 37)], x32((uint16)1)) + (uint16x32)shift_left(input_16[ramp((t1745*64) + 548, 1, 32) aligned(64, 36)], x32((uint16)1)))))
               let t1746 = sobel_x_high.s0.x.x + t1836
               sobel_x_high_avg[ramp(192, 1, 32)] = (uint16x32)shift_left(input_16[ramp((t1746*64) + 770, 1, 32) aligned(64, 2)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1746*64) + 769, 1, 32) aligned(64, 1)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1746*64) + 771, 1, 32) aligned(64, 3)], x32((uint16)2)) + ((uint16x32)shift_left(input_16[ramp((t1746*64) + 773, 1, 32) aligned(64, 5)], x32((uint16)1)) + (uint16x32)shift_left(input_16[ramp((t1746*64) + 772, 1, 32) aligned(64, 4)], x32((uint16)1)))))
               let t1747 = sobel_x_high.s0.x.x + t1836
               sobel_x_high_avg[ramp(224, 1, 32)] = (uint16x32)shift_left(input_16[ramp((t1747*64) + 802, 1, 32) aligned(64, 34)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1747*64) + 801, 1, 32) aligned(64, 33)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1747*64) + 803, 1, 32) aligned(64, 35)], x32((uint16)2)) + ((uint16x32)shift_left(input_16[ramp((t1747*64) + 805, 1, 32) aligned(64, 37)], x32((uint16)1)) + (uint16x32)shift_left(input_16[ramp((t1747*64) + 804, 1, 32) aligned(64, 36)], x32((uint16)1)))))
               let t1748 = sobel_x_high.s0.x.x + t1836
               sobel_x_high_avg[ramp(256, 1, 32)] = (uint16x32)shift_left(input_16[ramp((t1748*64) + 1026, 1, 32) aligned(64, 2)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1748*64) + 1025, 1, 32) aligned(64, 1)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1748*64) + 1027, 1, 32) aligned(64, 3)], x32((uint16)2)) + ((uint16x32)shift_left(input_16[ramp((t1748*64) + 1029, 1, 32) aligned(64, 5)], x32((uint16)1)) + (uint16x32)shift_left(input_16[ramp((t1748*64) + 1028, 1, 32) aligned(64, 4)], x32((uint16)1)))))
               let t1749 = sobel_x_high.s0.x.x + t1836
               sobel_x_high_avg[ramp(288, 1, 32)] = (uint16x32)shift_left(input_16[ramp((t1749*64) + 1058, 1, 32) aligned(64, 34)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1749*64) + 1057, 1, 32) aligned(64, 33)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1749*64) + 1059, 1, 32) aligned(64, 35)], x32((uint16)2)) + ((uint16x32)shift_left(input_16[ramp((t1749*64) + 1061, 1, 32) aligned(64, 37)], x32((uint16)1)) + (uint16x32)shift_left(input_16[ramp((t1749*64) + 1060, 1, 32) aligned(64, 36)], x32((uint16)1)))))
               let t1750 = sobel_x_high.s0.x.x + t1836
               sobel_x_high_avg[ramp(320, 1, 32)] = (uint16x32)shift_left(input_16[ramp((t1750*64) + 1282, 1, 32) aligned(64, 2)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1750*64) + 1281, 1, 32) aligned(64, 1)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1750*64) + 1283, 1, 32) aligned(64, 3)], x32((uint16)2)) + ((uint16x32)shift_left(input_16[ramp((t1750*64) + 1285, 1, 32) aligned(64, 5)], x32((uint16)1)) + (uint16x32)shift_left(input_16[ramp((t1750*64) + 1284, 1, 32) aligned(64, 4)], x32((uint16)1)))))
               let t1751 = sobel_x_high.s0.x.x + t1836
               sobel_x_high_avg[ramp(352, 1, 32)] = (uint16x32)shift_left(input_16[ramp((t1751*64) + 1314, 1, 32) aligned(64, 34)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1751*64) + 1313, 1, 32) aligned(64, 33)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1751*64) + 1315, 1, 32) aligned(64, 35)], x32((uint16)2)) + ((uint16x32)shift_left(input_16[ramp((t1751*64) + 1317, 1, 32) aligned(64, 37)], x32((uint16)1)) + (uint16x32)shift_left(input_16[ramp((t1751*64) + 1316, 1, 32) aligned(64, 36)], x32((uint16)1)))))
              }
              consume sobel_x_high_avg {
               sobel_x_high[ramp(sobel_x_high.s0.x.x*64, 1, 32) aligned(64, 0)] = (uint16x32)absd(sobel_x_high_avg[ramp(0, 1, 32)], sobel_x_high_avg[ramp(256, 1, 32)])
               sobel_x_high[ramp((sobel_x_high.s0.x.x*64) + 32, 1, 32) aligned(64, 32)] = (uint16x32)absd(sobel_x_high_avg[ramp(32, 1, 32)], sobel_x_high_avg[ramp(288, 1, 32)])
               sobel_x_high[ramp((sobel_x_high.s0.x.x*64) + 192, 1, 32) aligned(64, 0)] = (uint16x32)absd(sobel_x_high_avg[ramp(64, 1, 32)], sobel_x_high_avg[ramp(320, 1, 32)])
               sobel_x_high[ramp((sobel_x_high.s0.x.x*64) + 224, 1, 32) aligned(64, 32)] = (uint16x32)absd(sobel_x_high_avg[ramp(96, 1, 32)], sobel_x_high_avg[ramp(352, 1, 32)])
               free sobel_x_high_avg
              }
             }
            }
            allocate sobel_x_low[uint16 * 384] in Stack
            produce sobel_x_low {
             sobel_x_low[ramp(0, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 1, 1, 32) aligned(448, 1)], sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 449, 1, 32) aligned(448, 1)])
             sobel_x_low[ramp(32, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 33, 1, 32) aligned(448, 33)], sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 481, 1, 32) aligned(448, 33)])
             sobel_x_low[ramp(64, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 65, 1, 32) aligned(448, 65)], sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 513, 1, 32) aligned(448, 65)])
             sobel_x_low[ramp(96, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 97, 1, 32) aligned(448, 97)], sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 545, 1, 32) aligned(448, 97)])
             sobel_x_low[ramp(128, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 129, 1, 32) aligned(448, 129)], sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 577, 1, 32) aligned(448, 129)])
             sobel_x_low[ramp(160, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 161, 1, 32) aligned(448, 161)], sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 609, 1, 32) aligned(448, 161)])
             sobel_x_low[ramp(192, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 225, 1, 32) aligned(448, 225)], sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 673, 1, 32) aligned(448, 225)])
             sobel_x_low[ramp(224, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 257, 1, 32) aligned(448, 257)], sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 705, 1, 32) aligned(448, 257)])
             sobel_x_low[ramp(256, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 289, 1, 32) aligned(448, 289)], sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 737, 1, 32) aligned(448, 289)])
             sobel_x_low[ramp(288, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 321, 1, 32) aligned(448, 321)], sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 769, 1, 32) aligned(448, 321)])
             sobel_x_low[ramp(320, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 353, 1, 32) aligned(448, 353)], sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 801, 1, 32) aligned(448, 353)])
             sobel_x_low[ramp(352, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 385, 1, 32) aligned(448, 385)], sobel_x_low_avg[ramp((sobel_x.s0.y.y*448) + 833, 1, 32) aligned(448, 385)])
            }
            consume sobel_x_low {
             consume sobel_x_high {
              sobel_x[ramp(((sobel_x.s0.y.y*10) + output.s0.x.xi.xi.$n)*192, 1, 64) aligned(192, 0)] = uint8x64(min(sobel_x_high[ramp(0, 1, 64)] + sobel_x_low[ramp(0, 1, 64)], x64((uint16)255)))
              sobel_x[ramp((((sobel_x.s0.y.y*10) + output.s0.x.xi.xi.$n)*192) + 64, 1, 64) aligned(192, 64)] = uint8x64(min(sobel_x_high[ramp(64, 1, 64)] + sobel_x_low[ramp(64, 1, 64)], x64((uint16)255)))
              sobel_x[ramp((((sobel_x.s0.y.y*10) + output.s0.x.xi.xi.$n)*192) + 128, 1, 64) aligned(192, 128)] = uint8x64(min(sobel_x_high[ramp(128, 1, 64)] + sobel_x_low[ramp(128, 1, 64)], x64((uint16)255)))
              sobel_x[ramp((((sobel_x.s0.y.y*10) + output.s0.x.xi.xi.$n)*192) + 960, 1, 64) aligned(192, 0)] = uint8x64(min(sobel_x_high[ramp(192, 1, 64)] + sobel_x_low[ramp(192, 1, 64)], x64((uint16)255)))
              sobel_x[ramp((((sobel_x.s0.y.y*10) + output.s0.x.xi.xi.$n)*192) + 1024, 1, 64) aligned(192, 64)] = uint8x64(min(sobel_x_high[ramp(256, 1, 64)] + sobel_x_low[ramp(256, 1, 64)], x64((uint16)255)))
              sobel_x[ramp((((sobel_x.s0.y.y*10) + output.s0.x.xi.xi.$n)*192) + 1088, 1, 64) aligned(192, 128)] = uint8x64(min(sobel_x_high[ramp(320, 1, 64)] + sobel_x_low[ramp(320, 1, 64)], x64((uint16)255)))
              free sobel_x_high
              free sobel_x_low
             }
            }
           }
          }
         }
        }
        allocate sobel_y_high_avg[uint16 * 448] in Stack
        allocate sobel_y_high[uint16 * 384] in Stack
        consume sobel_x {
         consume sobel_x_low_avg {
          consume input_16 {
           let t1837 = (output.s0.x.xi.xi.$n*192) + t1831
           for (output.s0.y.yi.yii.yii, 0, 5) {
            let output.s0.y.min_5.s.s = min(output.s0.y.yi.yii.yii*2, 7) + t1829
            let sobel_y_high.s0.y.min_5.s = select(0 < output.s0.y.yi.yii.yii, (output.s0.y.yi.yii.yii*2) + t1829, output.s0.y.min_5.s.s) + t1791
            produce sobel_y_high_avg {
             let t1840 = 0 < output.s0.y.yi.yii.yii
             let t1841 = output.s0.y.yi.yii.yii*2
             let t1839 = select(t1840, t1841, min(t1841, 7))
             let t1838 = select(t1840, 7 - max(t1841, 7), 0)
             for (sobel_y_high_avg.s0.y.rebased, 0, t1838 + 2) {
              let t1843 = (((sobel_y_high.s0.y.min_5.s + sobel_y_high_avg.s0.y.rebased) + 1) % 2)*7
              let t1842 = (sobel_y_high_avg.s0.y.rebased + t1839)*8
              for (sobel_y_high_avg.s0.x.x, 0, 7) {
               let t1752 = sobel_y_high_avg.s0.x.x + t1842
               sobel_y_high_avg[ramp((sobel_y_high_avg.s0.x.x + t1843)*32, 1, 32) aligned(32, 0)] = (uint16x32)shift_left(input_16[ramp((t1752*32) + 257, 1, 32) aligned(32, 1)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1752*32) + 1, 1, 32) aligned(32, 1)], x32((uint16)1)) + ((uint16x32)shift_left(input_16[ramp((t1752*32) + 513, 1, 32) aligned(32, 1)], x32((uint16)2)) + ((uint16x32)shift_left(input_16[ramp((t1752*32) + 1025, 1, 32) aligned(32, 1)], x32((uint16)1)) + (uint16x32)shift_left(input_16[ramp((t1752*32) + 769, 1, 32) aligned(32, 1)], x32((uint16)1)))))
              }
             }
            }
            produce sobel_y_high {
             consume sobel_y_high_avg {
              let t1753 = (sobel_y_high.s0.y.min_5.s + 1) % 2
              sobel_y_high[ramp(t1753*192, 1, 32) aligned(192, 0)] = (uint16x32)absd(sobel_y_high_avg[ramp(t1753*224, 1, 32) aligned(224, 0)], sobel_y_high_avg[ramp((t1753*224) + 4, 1, 32) aligned(224, 4)])
              let t1754 = (sobel_y_high.s0.y.min_5.s + 1) % 2
              sobel_y_high[ramp((t1754*192) + 32, 1, 32) aligned(192, 32)] = (uint16x32)absd(sobel_y_high_avg[ramp((t1754*224) + 32, 1, 32) aligned(224, 32)], sobel_y_high_avg[ramp((t1754*224) + 36, 1, 32) aligned(224, 36)])
              let t1755 = (sobel_y_high.s0.y.min_5.s + 1) % 2
              sobel_y_high[ramp((t1755*192) + 64, 1, 32) aligned(192, 64)] = (uint16x32)absd(sobel_y_high_avg[ramp((t1755*224) + 64, 1, 32) aligned(224, 64)], sobel_y_high_avg[ramp((t1755*224) + 68, 1, 32) aligned(224, 68)])
              let t1756 = (sobel_y_high.s0.y.min_5.s + 1) % 2
              sobel_y_high[ramp((t1756*192) + 96, 1, 32) aligned(192, 96)] = (uint16x32)absd(sobel_y_high_avg[ramp((t1756*224) + 96, 1, 32) aligned(224, 96)], sobel_y_high_avg[ramp((t1756*224) + 100, 1, 32) aligned(224, 100)])
              let t1757 = (sobel_y_high.s0.y.min_5.s + 1) % 2
              sobel_y_high[ramp((t1757*192) + 128, 1, 32) aligned(192, 128)] = (uint16x32)absd(sobel_y_high_avg[ramp((t1757*224) + 128, 1, 32) aligned(224, 128)], sobel_y_high_avg[ramp((t1757*224) + 132, 1, 32) aligned(224, 132)])
              let t1758 = (sobel_y_high.s0.y.min_5.s + 1) % 2
              sobel_y_high[ramp((t1758*192) + 160, 1, 32) aligned(192, 160)] = (uint16x32)absd(sobel_y_high_avg[ramp((t1758*224) + 160, 1, 32) aligned(224, 160)], sobel_y_high_avg[ramp((t1758*224) + 164, 1, 32) aligned(224, 164)])
              if (-1 < select(0 < output.s0.y.yi.yii.yii, 7 - max(output.s0.y.yi.yii.yii*2, 7), 0)) {
               let t1759 = sobel_y_high.s0.y.min_5.s % 2
               sobel_y_high[ramp(t1759*192, 1, 32) aligned(192, 0)] = (uint16x32)absd(sobel_y_high_avg[ramp(t1759*224, 1, 32) aligned(224, 0)], sobel_y_high_avg[ramp((t1759*224) + 4, 1, 32) aligned(224, 4)])
               let t1760 = sobel_y_high.s0.y.min_5.s % 2
               sobel_y_high[ramp((t1760*192) + 32, 1, 32) aligned(192, 32)] = (uint16x32)absd(sobel_y_high_avg[ramp((t1760*224) + 32, 1, 32) aligned(224, 32)], sobel_y_high_avg[ramp((t1760*224) + 36, 1, 32) aligned(224, 36)])
               let t1761 = sobel_y_high.s0.y.min_5.s % 2
               sobel_y_high[ramp((t1761*192) + 64, 1, 32) aligned(192, 64)] = (uint16x32)absd(sobel_y_high_avg[ramp((t1761*224) + 64, 1, 32) aligned(224, 64)], sobel_y_high_avg[ramp((t1761*224) + 68, 1, 32) aligned(224, 68)])
               let t1762 = sobel_y_high.s0.y.min_5.s % 2
               sobel_y_high[ramp((t1762*192) + 96, 1, 32) aligned(192, 96)] = (uint16x32)absd(sobel_y_high_avg[ramp((t1762*224) + 96, 1, 32) aligned(224, 96)], sobel_y_high_avg[ramp((t1762*224) + 100, 1, 32) aligned(224, 100)])
               let t1763 = sobel_y_high.s0.y.min_5.s % 2
               sobel_y_high[ramp((t1763*192) + 128, 1, 32) aligned(192, 128)] = (uint16x32)absd(sobel_y_high_avg[ramp((t1763*224) + 128, 1, 32) aligned(224, 128)], sobel_y_high_avg[ramp((t1763*224) + 132, 1, 32) aligned(224, 132)])
               let t1764 = sobel_y_high.s0.y.min_5.s % 2
               sobel_y_high[ramp((t1764*192) + 160, 1, 32) aligned(192, 160)] = (uint16x32)absd(sobel_y_high_avg[ramp((t1764*224) + 160, 1, 32) aligned(224, 160)], sobel_y_high_avg[ramp((t1764*224) + 164, 1, 32) aligned(224, 164)])
              }
             }
            }
            allocate sobel_y_low[uint16 * 384] in Stack
            produce sobel_y_low {
             let t1765 = min(output.s0.y.yi.yii.yii*2, 7)
             sobel_y_low[ramp(0, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((t1765*224) + 224, 1, 32) aligned(224, 0)], sobel_x_low_avg[ramp((t1765*224) + 226, 1, 32) aligned(224, 2)])
             let t1766 = min(output.s0.y.yi.yii.yii*2, 7)
             sobel_y_low[ramp(32, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((t1766*224) + 256, 1, 32) aligned(224, 32)], sobel_x_low_avg[ramp((t1766*224) + 258, 1, 32) aligned(224, 34)])
             let t1767 = min(output.s0.y.yi.yii.yii*2, 7)
             sobel_y_low[ramp(64, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((t1767*224) + 288, 1, 32) aligned(224, 64)], sobel_x_low_avg[ramp((t1767*224) + 290, 1, 32) aligned(224, 66)])
             let t1768 = min(output.s0.y.yi.yii.yii*2, 7)
             sobel_y_low[ramp(96, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((t1768*224) + 320, 1, 32) aligned(224, 96)], sobel_x_low_avg[ramp((t1768*224) + 322, 1, 32) aligned(224, 98)])
             let t1769 = min(output.s0.y.yi.yii.yii*2, 7)
             sobel_y_low[ramp(128, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((t1769*224) + 352, 1, 32) aligned(224, 128)], sobel_x_low_avg[ramp((t1769*224) + 354, 1, 32) aligned(224, 130)])
             let t1770 = min(output.s0.y.yi.yii.yii*2, 7)
             sobel_y_low[ramp(160, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((t1770*224) + 384, 1, 32) aligned(224, 160)], sobel_x_low_avg[ramp((t1770*224) + 386, 1, 32) aligned(224, 162)])
             let t1771 = min(output.s0.y.yi.yii.yii*2, 7)
             sobel_y_low[ramp(192, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((t1771*224) + 448, 1, 32) aligned(224, 0)], sobel_x_low_avg[ramp((t1771*224) + 450, 1, 32) aligned(224, 2)])
             let t1772 = min(output.s0.y.yi.yii.yii*2, 7)
             sobel_y_low[ramp(224, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((t1772*224) + 480, 1, 32) aligned(224, 32)], sobel_x_low_avg[ramp((t1772*224) + 482, 1, 32) aligned(224, 34)])
             let t1773 = min(output.s0.y.yi.yii.yii*2, 7)
             sobel_y_low[ramp(256, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((t1773*224) + 512, 1, 32) aligned(224, 64)], sobel_x_low_avg[ramp((t1773*224) + 514, 1, 32) aligned(224, 66)])
             let t1774 = min(output.s0.y.yi.yii.yii*2, 7)
             sobel_y_low[ramp(288, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((t1774*224) + 544, 1, 32) aligned(224, 96)], sobel_x_low_avg[ramp((t1774*224) + 546, 1, 32) aligned(224, 98)])
             let t1775 = min(output.s0.y.yi.yii.yii*2, 7)
             sobel_y_low[ramp(320, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((t1775*224) + 576, 1, 32) aligned(224, 128)], sobel_x_low_avg[ramp((t1775*224) + 578, 1, 32) aligned(224, 130)])
             let t1776 = min(output.s0.y.yi.yii.yii*2, 7)
             sobel_y_low[ramp(352, 1, 32)] = (uint16x32)absd(sobel_x_low_avg[ramp((t1776*224) + 608, 1, 32) aligned(224, 160)], sobel_x_low_avg[ramp((t1776*224) + 610, 1, 32) aligned(224, 162)])
            }
            consume sobel_y_low {
             consume sobel_y_high {
              let t1260.s = min(output.s0.y.yi.yii.yii*2, 7) + t1829
              allocate sobel_y[uint8 * 64] in Stack
              produce sobel_y {
               sobel_y[ramp(0, 1, 64)] = uint8x64(min(sobel_y_low[ramp(0, 1, 64)] + sobel_y_high[ramp((((t1260.s + t1791) + 1) % 2)*192, 1, 64) aligned(192, 0)], x64((uint16)255)))
              }
              consume sobel_y {
               output[ramp((((t1260.s + t1791) + -9)*output.stride.1) + t1837, 1, 64)] = sobel_y[ramp(0, 1, 64)] + sobel_x[ramp(((min(output.s0.y.yi.yii.yii*2, 7)*5) + output.s0.x.xi.xi.$n)*192, 1, 64) aligned(192, 0)]
              }
              free sobel_y
              allocate sobel_y[uint8 * 64] in Stack
              produce sobel_y {
               sobel_y[ramp(0, 1, 64)] = uint8x64(min(sobel_y_low[ramp(64, 1, 64)] + sobel_y_high[ramp(((((t1260.s + t1791) + 1) % 2)*192) + 64, 1, 64) aligned(192, 64)], x64((uint16)255)))
              }
              consume sobel_y {
               output[ramp(((((t1260.s + t1791) + -9)*output.stride.1) + t1837) + 64, 1, 64)] = sobel_y[ramp(0, 1, 64)] + sobel_x[ramp((((min(output.s0.y.yi.yii.yii*2, 7)*5) + output.s0.x.xi.xi.$n)*192) + 64, 1, 64) aligned(192, 64)]
              }
              free sobel_y
              allocate sobel_y[uint8 * 64] in Stack
              produce sobel_y {
               sobel_y[ramp(0, 1, 64)] = uint8x64(min(sobel_y_low[ramp(128, 1, 64)] + sobel_y_high[ramp(((((t1260.s + t1791) + 1) % 2)*192) + 128, 1, 64) aligned(192, 128)], x64((uint16)255)))
              }
              consume sobel_y {
               output[ramp(((((t1260.s + t1791) + -9)*output.stride.1) + t1837) + 128, 1, 64)] = sobel_y[ramp(0, 1, 64)] + sobel_x[ramp((((min(output.s0.y.yi.yii.yii*2, 7)*5) + output.s0.x.xi.xi.$n)*192) + 128, 1, 64) aligned(192, 128)]
              }
              free sobel_y
              allocate sobel_y[uint8 * 64] in Stack
              produce sobel_y {
               sobel_y[ramp(0, 1, 64)] = uint8x64(min(sobel_y_low[ramp(192, 1, 64)] + sobel_y_high[ramp(((t1260.s + t1791) % 2)*192, 1, 64) aligned(192, 0)], x64((uint16)255)))
              }
              consume sobel_y {
               output[ramp((((t1260.s + t1791) + -8)*output.stride.1) + t1837, 1, 64)] = sobel_y[ramp(0, 1, 64)] + sobel_x[ramp((((min(output.s0.y.yi.yii.yii*2, 7)*5) + output.s0.x.xi.xi.$n)*192) + 960, 1, 64) aligned(192, 0)]
              }
              free sobel_y
              allocate sobel_y[uint8 * 64] in Stack
              produce sobel_y {
               sobel_y[ramp(0, 1, 64)] = uint8x64(min(sobel_y_low[ramp(256, 1, 64)] + sobel_y_high[ramp((((t1260.s + t1791) % 2)*192) + 64, 1, 64) aligned(192, 64)], x64((uint16)255)))
              }
              consume sobel_y {
               output[ramp(((((t1260.s + t1791) + -8)*output.stride.1) + t1837) + 64, 1, 64)] = sobel_y[ramp(0, 1, 64)] + sobel_x[ramp((((min(output.s0.y.yi.yii.yii*2, 7)*5) + output.s0.x.xi.xi.$n)*192) + 1024, 1, 64) aligned(192, 64)]
              }
              free sobel_y
              allocate sobel_y[uint8 * 64] in Stack
              produce sobel_y {
               sobel_y[ramp(0, 1, 64)] = uint8x64(min(sobel_y_low[ramp(320, 1, 64)] + sobel_y_high[ramp((((t1260.s + t1791) % 2)*192) + 128, 1, 64) aligned(192, 128)], x64((uint16)255)))
              }
              free sobel_y_low
              consume sobel_y {
               output[ramp(((((t1260.s + t1791) + -8)*output.stride.1) + t1837) + 128, 1, 64)] = sobel_y[ramp(0, 1, 64)] + sobel_x[ramp((((min(output.s0.y.yi.yii.yii*2, 7)*5) + output.s0.x.xi.xi.$n)*192) + 1088, 1, 64) aligned(192, 128)]
              }
              free sobel_y
             }
            }
           }
          }
         }
        }
        free input_16
        free sobel_x_low_avg
        free sobel_y_high_avg
        free sobel_y_high
       }
       free sobel_x
      }
     }
    }
   }
   free repeat_edge
  }
 }
}
}


