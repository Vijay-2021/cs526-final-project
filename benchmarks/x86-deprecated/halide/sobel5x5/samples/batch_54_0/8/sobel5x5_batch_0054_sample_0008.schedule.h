#ifndef sobel5x5_batch_0054_sample_0008_SCHEDULE_H
#define sobel5x5_batch_0054_sample_0008_SCHEDULE_H

// MACHINE GENERATED -- DO NOT EDIT
// This schedule was automatically generated by Adams2019
// for target=x86-64-linux-avx-avx2-avx512-avx512_sapphirerapids-avx512_skylake-disable_llvm_loop_opt-f16c-fma-sse41  // NOLINT
// with machine_params=10,16777216,40

#include "Halide.h"


inline void apply_schedule_sobel5x5_batch_0054_sample_0008(
    ::Halide::Pipeline pipeline,
    ::Halide::Target target
) {
    using ::Halide::Func;
    using ::Halide::MemoryType;
    using ::Halide::RVar;
    using ::Halide::TailStrategy;
    using ::Halide::Var;
    Func output = pipeline.get_func(14);
    Func sobel_y = pipeline.get_func(13);
    Func sobel_y_low = pipeline.get_func(12);
    Func sobel_y_high = pipeline.get_func(11);
    Func sobel_y_high_avg = pipeline.get_func(10);
    Func sobel_x = pipeline.get_func(9);
    Func sobel_x_low = pipeline.get_func(8);
    Func sobel_x_low_avg = pipeline.get_func(7);
    Func sobel_x_high = pipeline.get_func(6);
    Func sobel_x_high_avg = pipeline.get_func(5);
    Func input_16 = pipeline.get_func(4);
    Func bounded_input = pipeline.get_func(3);
    Func repeat_edge = pipeline.get_func(2);
    Func lambda_0 = pipeline.get_func(1);
    Var _0(repeat_edge.get_schedule().dims()[0].var);
    Var _0i("_0i");
    Var _1(repeat_edge.get_schedule().dims()[1].var);
    Var x(output.get_schedule().dims()[0].var);
    Var xi("xi");
    Var xii("xii");
    Var xiii("xiii");
    Var y(output.get_schedule().dims()[1].var);
    Var yi("yi");
    Var yii("yii");
    Var yiii("yiii");
    output
        .split(y, y, yi, 27, TailStrategy::ShiftInwards)
        .split(yi, yi, yii, 9, TailStrategy::ShiftInwards)
        .split(x, x, xi, 960, TailStrategy::ShiftInwards)
        .split(xi, xi, xii, 192, TailStrategy::ShiftInwards)
        .split(yii, yii, yiii, 2, TailStrategy::ShiftInwards)
        .split(xii, xii, xiii, 64, TailStrategy::ShiftInwards)
        .unroll(xii)
        .unroll(yiii)
        .vectorize(xiii)
        .compute_root()
        .reorder({xiii, xii, yiii, yii, xi, x, yi, y})
        .parallel(y);
    sobel_y
        .store_in(MemoryType::Stack)
        .split(x, x, xi, 64, TailStrategy::RoundUp)
        .vectorize(xi)
        .compute_at(output, xii)
        .reorder({xi, x, y});
    sobel_y_low
        .store_in(MemoryType::Stack)
        .split(x, x, xi, 32, TailStrategy::RoundUp)
        .unroll(x)
        .unroll(y)
        .vectorize(xi)
        .compute_at(output, yii)
        .reorder({xi, x, y});
    sobel_y_high
        .store_in(MemoryType::Stack)
        .split(x, x, xi, 32, TailStrategy::RoundUp)
        .unroll(x)
        .unroll(y)
        .vectorize(xi)
        .compute_at(output, yii)
        .store_at(output, xi)
        .reorder({xi, x, y});
    sobel_y_high_avg
        .store_in(MemoryType::Stack)
        .split(x, x, xi, 32, TailStrategy::RoundUp)
        .vectorize(xi)
        .compute_at(output, yii)
        .store_at(output, xi)
        .reorder({xi, x, y});
    sobel_x
        .store_in(MemoryType::Stack)
        .split(y, y, yi, 2, TailStrategy::RoundUp)
        .split(x, x, xi, 64, TailStrategy::RoundUp)
        .unroll(x)
        .unroll(yi)
        .vectorize(xi)
        .compute_at(output, xi)
        .store_at(output, x)
        .reorder({xi, x, yi, y});
    sobel_x_low
        .store_in(MemoryType::Stack)
        .split(x, x, xi, 32, TailStrategy::RoundUp)
        .unroll(x)
        .unroll(y)
        .vectorize(xi)
        .compute_at(sobel_x, y)
        .reorder({xi, x, y});
    sobel_x_low_avg
        .store_in(MemoryType::Stack)
        .split(x, x, xi, 32, TailStrategy::RoundUp)
        .vectorize(xi)
        .compute_at(output, xi)
        .reorder({xi, x, y});
    sobel_x_high
        .store_in(MemoryType::Stack)
        .split(x, x, xi, 64, TailStrategy::RoundUp)
        .split(xi, xi, xii, 32, TailStrategy::RoundUp)
        .unroll(xi)
        .unroll(y)
        .vectorize(xii)
        .compute_at(sobel_x, y)
        .reorder({xii, xi, y, x});
    sobel_x_high_avg
        .store_in(MemoryType::Stack)
        .split(x, x, xi, 32, TailStrategy::RoundUp)
        .unroll(x)
        .unroll(y)
        .vectorize(xi)
        .compute_at(sobel_x_high, x)
        .reorder({xi, x, y});
    input_16
        .store_in(MemoryType::Stack)
        .split(y, y, yi, 2, TailStrategy::RoundUp)
        .split(x, x, xi, 64, TailStrategy::RoundUp)
        .unroll(x)
        .unroll(yi)
        .vectorize(xi)
        .compute_at(output, xi)
        .reorder({xi, x, yi, y});
    bounded_input
        .store_in(MemoryType::Stack)
        .split(x, x, xi, 64, TailStrategy::RoundUp)
        .unroll(x)
        .unroll(y)
        .vectorize(xi)
        .compute_at(input_16, y)
        .reorder({xi, x, y});
    repeat_edge
        .store_in(MemoryType::Stack)
        .split(_0, _0, _0i, 64, TailStrategy::ShiftInwards)
        .vectorize(_0i)
        .compute_at(output, yi)
        .store_at(output, y)
        .reorder({_0i, _0, _1});

}

#endif  // sobel5x5_batch_0054_sample_0008_SCHEDULE_H
