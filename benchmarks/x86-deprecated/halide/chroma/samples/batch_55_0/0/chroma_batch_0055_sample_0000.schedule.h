#ifndef chroma_batch_0055_sample_0000_SCHEDULE_H
#define chroma_batch_0055_sample_0000_SCHEDULE_H

// MACHINE GENERATED -- DO NOT EDIT
// This schedule was automatically generated by Adams2019
// for target=x86-64-linux-avx-avx2-avx512-avx512_sapphirerapids-avx512_skylake-disable_llvm_loop_opt-f16c-fma-sse41  // NOLINT
// with machine_params=10,16777216,40

#include "Halide.h"


inline void apply_schedule_chroma_batch_0055_sample_0000(
    ::Halide::Pipeline pipeline,
    ::Halide::Target target
) {
    using ::Halide::Func;
    using ::Halide::MemoryType;
    using ::Halide::RVar;
    using ::Halide::TailStrategy;
    using ::Halide::Var;
    Func output = pipeline.get_func(4);
    Func f2 = pipeline.get_func(3);
    Func f1 = pipeline.get_func(2);
    Func f0 = pipeline.get_func(1);
    Var v0(output.get_schedule().dims()[0].var);
    Var v0i("v0i");
    Var v1(output.get_schedule().dims()[1].var);
    Var v1i("v1i");
    Var v2(output.get_schedule().dims()[2].var);
    output
        .split(v1, v1, v1i, 4, TailStrategy::ShiftInwards)
        .split(v0, v0, v0i, 32, TailStrategy::ShiftInwards)
        .vectorize(v0i)
        .compute_root()
        .reorder({v0i, v0, v2, v1i, v1})
        .parallel(v1);
    f2
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 32, TailStrategy::ShiftInwards)
        .vectorize(v0i)
        .compute_at(output, v1i)
        .reorder({v0i, v0, v1});
    f1
        .store_in(MemoryType::Stack)
        .split(v0, v0, v0i, 32, TailStrategy::ShiftInwards)
        .vectorize(v0i)
        .compute_at(f2, v0)
        .reorder({v0i, v0, v1});

}

#endif  // chroma_batch_0055_sample_0000_SCHEDULE_H
