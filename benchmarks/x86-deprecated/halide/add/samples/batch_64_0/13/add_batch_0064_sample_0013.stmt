module name=add_batch_0064_sample_0013, target=x86-64-linux-avx-avx2-disable_llvm_loop_opt-f16c-fma-sse41
external_plus_metadata func add_batch_0064_sample_0013 (input1, input1_zero, input1_multiplier, input2, input2_zero, input2_multiplier, output_zero, output_min, output_max, output) {
assert((uint64)reinterpret((halide_buffer_t *)output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("output"))
assert((uint64)reinterpret((halide_buffer_t *)input2.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input2"))
assert((uint64)reinterpret((halide_buffer_t *)input1.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input1"))
let input1 = (void *)_halide_buffer_get_host((halide_buffer_t *)input1.buffer)
let input1.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input1.buffer)
let input1.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input1.buffer)
let input1.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input1.buffer)
let input1.min.0 = _halide_buffer_get_min((halide_buffer_t *)input1.buffer, 0)
let input1.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input1.buffer, 0)
let input1.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input1.buffer, 0)
let input1.min.1 = _halide_buffer_get_min((halide_buffer_t *)input1.buffer, 1)
let input1.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input1.buffer, 1)
let input1.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input1.buffer, 1)
let input2 = (void *)_halide_buffer_get_host((halide_buffer_t *)input2.buffer)
let input2.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input2.buffer)
let input2.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input2.buffer)
let input2.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input2.buffer)
let input2.min.0 = _halide_buffer_get_min((halide_buffer_t *)input2.buffer, 0)
let input2.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input2.buffer, 0)
let input2.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input2.buffer, 0)
let input2.min.1 = _halide_buffer_get_min((halide_buffer_t *)input2.buffer, 1)
let input2.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input2.buffer, 1)
let input2.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input2.buffer, 1)
let output = (void *)_halide_buffer_get_host((halide_buffer_t *)output.buffer)
let output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)output.buffer)
let output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)output.buffer)
let output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)output.buffer)
let output.min.0 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 0)
let output.min.1 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 1)
let input1.extent.0.required.s = min(max(max(-960 - output.extent.0, output.extent.0 + -1)/960, 0)*960, output.extent.0 + -960)
let input1.extent.1.required.s = let t20 = (0 < output.extent.0) in (let t21 = (((((output.extent.0 + 959)/960)*((output.extent.1 + 33)/34)) + -1)/((output.extent.0 + 959)/960)) in (min(select(t20, t21, 0)*34, output.extent.1 + -34) - min(select(t20, 0, t21)*34, output.extent.1 + -34)))
let input1.min.1.required.s = min(select(0 < output.extent.0, 0, ((((output.extent.0 + 959)/960)*((output.extent.1 + 33)/34)) + -1)/((output.extent.0 + 959)/960))*34, output.extent.1 + -34)
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input1.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input1.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input1.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct((min(output.extent.0, 960) + output.min.0) + -960, max(input1.extent.0.required.s, 0) + 960, 1, 0, input1.min.1.required.s + output.min.1, input1.extent.1.required.s + 34, max(input1.extent.0.required.s, 0) + 960, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input2.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input2.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input2.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct((min(output.extent.0, 960) + output.min.0) + -960, max(input1.extent.0.required.s, 0) + 960, 1, 0, input1.min.1.required.s + output.min.1, input1.extent.1.required.s + 34, max(input1.extent.0.required.s, 0) + 960, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct((min(output.extent.0, 960) + output.min.0) + -960, max(input1.extent.0.required.s, 0) + 960, 1, 0, input1.min.1.required.s + output.min.1, input1.extent.1.required.s + 34, max(input1.extent.0.required.s, 0) + 960, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input1.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input2.buffer)))) {
 assert(input1.type == (uint32)67585, halide_error_bad_type("Input buffer input1", input1.type, (uint32)67585))
 assert(input1.dimensions == 2, halide_error_bad_dimensions("Input buffer input1", input1.dimensions, 2))
 assert(input2.type == (uint32)67585, halide_error_bad_type("Input buffer input2", input2.type, (uint32)67585))
 assert(input2.dimensions == 2, halide_error_bad_dimensions("Input buffer input2", input2.dimensions, 2))
 assert(output.type == (uint32)67585, halide_error_bad_type("Output buffer output", output.type, (uint32)67585))
 assert(output.dimensions == 2, halide_error_bad_dimensions("Output buffer output", output.dimensions, 2))
 assert(((input1.min.0 + 960) <= (min(output.extent.0, 960) + output.min.0)) && (((max(input1.extent.0.required.s, 0) + min(output.extent.0, 960)) + output.min.0) <= (input1.extent.0 + input1.min.0)), halide_error_access_out_of_bounds("Input buffer input1", 0, (min(output.extent.0, 960) + output.min.0) + -960, ((max(input1.extent.0.required.s, 0) + min(output.extent.0, 960)) + output.min.0) + -1, input1.min.0, (input1.extent.0 + input1.min.0) + -1))
 assert(0 <= input1.extent.0, halide_error_buffer_extents_negative("Input buffer input1", 0, input1.extent.0))
 assert((input1.min.1 <= (input1.min.1.required.s + output.min.1)) && ((((input1.min.1.required.s + output.min.1) + input1.extent.1.required.s) + 34) <= (input1.extent.1 + input1.min.1)), halide_error_access_out_of_bounds("Input buffer input1", 1, input1.min.1.required.s + output.min.1, ((input1.min.1.required.s + output.min.1) + input1.extent.1.required.s) + 33, input1.min.1, (input1.extent.1 + input1.min.1) + -1))
 assert(0 <= input1.extent.1, halide_error_buffer_extents_negative("Input buffer input1", 1, input1.extent.1))
 assert(((input2.min.0 + 960) <= (min(output.extent.0, 960) + output.min.0)) && (((max(input1.extent.0.required.s, 0) + min(output.extent.0, 960)) + output.min.0) <= (input2.extent.0 + input2.min.0)), halide_error_access_out_of_bounds("Input buffer input2", 0, (min(output.extent.0, 960) + output.min.0) + -960, ((max(input1.extent.0.required.s, 0) + min(output.extent.0, 960)) + output.min.0) + -1, input2.min.0, (input2.extent.0 + input2.min.0) + -1))
 assert(0 <= input2.extent.0, halide_error_buffer_extents_negative("Input buffer input2", 0, input2.extent.0))
 assert((input2.min.1 <= (input1.min.1.required.s + output.min.1)) && ((((input1.min.1.required.s + output.min.1) + input1.extent.1.required.s) + 34) <= (input2.extent.1 + input2.min.1)), halide_error_access_out_of_bounds("Input buffer input2", 1, input1.min.1.required.s + output.min.1, ((input1.min.1.required.s + output.min.1) + input1.extent.1.required.s) + 33, input2.min.1, (input2.extent.1 + input2.min.1) + -1))
 assert(0 <= input2.extent.1, halide_error_buffer_extents_negative("Input buffer input2", 1, input2.extent.1))
 assert(max(max(input1.extent.0.required.s, 0) + min(output.extent.0, 960), 960) <= output.extent.0, halide_error_access_out_of_bounds("Output buffer output", 0, (min(output.extent.0, 960) + output.min.0) + -960, ((max(input1.extent.0.required.s, 0) + min(output.extent.0, 960)) + output.min.0) + -1, output.min.0, (output.extent.0 + output.min.0) + -1))
 assert((0 <= input1.min.1.required.s) && ((((input1.min.1.required.s + output.min.1) + input1.extent.1.required.s) + 34) <= (output.extent.1 + output.min.1)), halide_error_access_out_of_bounds("Output buffer output", 1, input1.min.1.required.s + output.min.1, ((input1.min.1.required.s + output.min.1) + input1.extent.1.required.s) + 33, output.min.1, (output.extent.1 + output.min.1) + -1))
 assert(0 <= output.extent.1, halide_error_buffer_extents_negative("Output buffer output", 1, output.extent.1))
 assert(input1.stride.0 == 1, halide_error_constraint_violated("input1.stride.0", input1.stride.0, "1", 1))
 assert(input2.stride.0 == 1, halide_error_constraint_violated("input2.stride.0", input2.stride.0, "1", 1))
 assert(output.stride.0 == 1, halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
 let input1.total_extent.1 = int64(input1.extent.1)*int64(input1.extent.0)
 let input2.total_extent.1 = int64(input2.extent.1)*int64(input2.extent.0)
 let output.total_extent.1 = int64(output.extent.1)*int64(output.extent.0)
 assert(uint64(input1.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input1", uint64(input1.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(input1.extent.1)*int64(input1.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input1", (uint64)abs(int64(input1.extent.1)*int64(input1.stride.1)), (uint64)2147483647))
 assert(input1.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("input1", input1.total_extent.1, (int64)2147483647))
 assert(uint64(input2.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input2", uint64(input2.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(input2.extent.1)*int64(input2.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input2", (uint64)abs(int64(input2.extent.1)*int64(input2.stride.1)), (uint64)2147483647))
 assert(input2.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("input2", input2.total_extent.1, (int64)2147483647))
 assert(uint64(output.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", uint64(output.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(output.extent.1)*int64(output.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", (uint64)abs(int64(output.extent.1)*int64(output.stride.1)), (uint64)2147483647))
 assert(output.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
 assert(!input1.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input1"))
 assert(!input2.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input2"))
 assert(!output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer output"))
 assert(input1 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer input1"))
 assert(input2 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer input2"))
 assert(output != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer output"))
 let output.s0.x.x.x.loop_extent = ((output.extent.0 + 959)/960)*((output.extent.1 + 33)/34)
 produce output {
  let t36 = (output.extent.0 + 959)/960
  let t39 = (output.min.1*output.stride.1) + output.min.0
  let t38 = (input2.min.1*input2.stride.1) + input2.min.0
  let t37 = (input1.min.1*input1.stride.1) + input1.min.0
  parallel (output.s0.x.x.x, 0, output.s0.x.x.x.loop_extent) {
   let output.s0.x.xi.base.s = min((output.s0.x.x.x % t36)*960, output.extent.0 + -960)
   let output.s0.y.yi.base.s = min((output.s0.x.x.x/t36)*34, output.extent.1 + -34)
   let t41 = output.min.1 + output.s0.y.yi.base.s
   let t40 = output.min.0 + output.s0.x.xi.base.s
   for (output.s0.y.yi, 0, 34) {
    let t42 = output.s0.y.yi + t41
    for (output.s0.x.xi.xi, 0, 30) {
     let t19 = (output.s0.x.xi.xi*32) + t40
     output[ramp(((output.stride.1*t42) - t39) + t19, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)widening_mul((int16x32)shift_left(int16x32(input1[ramp(((input1.stride.1*t42) - t37) + t19, 1, 32)]), x32((uint16)6)) + x32(int16((uint8)input1_zero)*(int16)-64), x32((int16)input1_multiplier)) + (int32x32)widening_mul((int16x32)shift_left(int16x32(input2[ramp(((input2.stride.1*t42) - t38) + t19, 1, 32)]), x32((uint16)6)) + x32(int16((uint8)input2_zero)*(int16)-64), x32((int16)input2_multiplier)), x32((uint32)16)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
    }
   }
  }
 }
}
}


