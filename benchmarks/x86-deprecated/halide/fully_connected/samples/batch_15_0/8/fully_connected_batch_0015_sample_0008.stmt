module name=fully_connected_batch_0015_sample_0008, target=x86-64-linux-avx-avx2-disable_llvm_loop_opt-f16c-fma-sse41
external_plus_metadata func fully_connected_batch_0015_sample_0008 (input, input_zero, filter, filter_zero, bias, output_zero, output_multiplier, output_shift, output_min, output_max, output) {
assert((uint64)reinterpret((halide_buffer_t *)output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("output"))
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
assert((uint64)reinterpret((halide_buffer_t *)filter.buffer) != (uint64)0, halide_error_buffer_argument_is_null("filter"))
assert((uint64)reinterpret((halide_buffer_t *)bias.buffer) != (uint64)0, halide_error_buffer_argument_is_null("bias"))
let bias = (void *)_halide_buffer_get_host((halide_buffer_t *)bias.buffer)
let bias.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)bias.buffer)
let bias.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)bias.buffer)
let bias.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)bias.buffer)
let bias.min.0 = _halide_buffer_get_min((halide_buffer_t *)bias.buffer, 0)
let bias.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)bias.buffer, 0)
let bias.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)bias.buffer, 0)
let filter = (void *)_halide_buffer_get_host((halide_buffer_t *)filter.buffer)
let filter.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)filter.buffer)
let filter.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)filter.buffer)
let filter.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)filter.buffer)
let filter.min.0 = _halide_buffer_get_min((halide_buffer_t *)filter.buffer, 0)
let filter.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)filter.buffer, 0)
let filter.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)filter.buffer, 0)
let filter.min.1 = _halide_buffer_get_min((halide_buffer_t *)filter.buffer, 1)
let filter.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)filter.buffer, 1)
let filter.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)filter.buffer, 1)
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let output = (void *)_halide_buffer_get_host((halide_buffer_t *)output.buffer)
let output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)output.buffer)
let output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)output.buffer)
let output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)output.buffer)
let output.min.0 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 0)
let output.min.1 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 1)
let filter.extent.0.required = max(min((filter.extent.0/32)*32, filter.extent.0 + filter.min.0), filter.min.0 + 1) - max(min(min(filter.extent.0/32, 1)*32, (filter.extent.0 + filter.min.0) + 31) + -32, filter.min.0)
let filter.min.0.required = max(min(min(filter.extent.0/32, 1)*32, (filter.extent.0 + filter.min.0) + 31) + -32, filter.min.0)
let filter.extent.1.required = max(min(output.extent.1 + output.min.1, filter.extent.1 + filter.min.1), filter.min.1 + 1) - max(min(min(output.extent.1, 4) + output.min.1, (filter.extent.1 + filter.min.1) + 3) + -4, filter.min.1)
let filter.min.1.required = max(min(min(output.extent.1, 4) + output.min.1, (filter.extent.1 + filter.min.1) + 3) + -4, filter.min.1)
let input.extent.0.required = max(min((filter.extent.0/32)*32, input.extent.0 + input.min.0), input.min.0 + 1) - max(min(min((filter.extent.0/32)*32, (input.extent.0 + input.min.0) + 59), 60) + -60, input.min.0)
let input.min.0.required = max(min(min((filter.extent.0/32)*32, (input.extent.0 + input.min.0) + 59), 60) + -60, input.min.0)
let input.extent.1.required = max(min(output.extent.0 + output.min.0, input.extent.1 + input.min.1), input.min.1 + 1) - max(min(min(output.extent.0, 32) + output.min.0, (input.extent.1 + input.min.1) + 31) + -32, input.min.1)
let input.min.1.required = max(min(min(output.extent.0, 32) + output.min.0, (input.extent.1 + input.min.1) + 31) + -32, input.min.1)
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)filter.buffer) || ((0 <= filter.min.0.required) && (filter.min.0.required <= 0)), halide_error_constraints_make_required_region_smaller("Input buffer filter", 0, 0, filter.extent.0.required + -1, filter.min.0.required, (filter.extent.0.required + filter.min.0.required) + -1))
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)bias.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)bias.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)bias.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct((min(output.extent.0, 96) + output.min.0) + -96, max(output.extent.0, 96), 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)filter.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)filter.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)filter.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct(0, filter.extent.0.required, 1, 0, filter.min.1.required, filter.extent.1.required, filter.extent.0.required, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct(input.min.0.required, input.extent.0.required, 1, 0, input.min.1.required, input.extent.1.required, input.extent.0.required, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct((min(output.extent.0, 96) + output.min.0) + -96, max(output.extent.0, 96), 1, 0, (min(output.extent.1, 4) + output.min.1) + -4, max(output.extent.1, 4), max(output.extent.0, 96), 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)bias.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)filter.buffer))))) {
 assert(bias.type == (uint32)73728, halide_error_bad_type("Input buffer bias", bias.type, (uint32)73728))
 assert(bias.dimensions == 1, halide_error_bad_dimensions("Input buffer bias", bias.dimensions, 1))
 assert(filter.type == (uint32)67585, halide_error_bad_type("Input buffer filter", filter.type, (uint32)67585))
 assert(filter.dimensions == 2, halide_error_bad_dimensions("Input buffer filter", filter.dimensions, 2))
 assert(input.type == (uint32)67585, halide_error_bad_type("Input buffer input", input.type, (uint32)67585))
 assert(input.dimensions == 2, halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
 assert(output.type == (uint32)67585, halide_error_bad_type("Output buffer output", output.type, (uint32)67585))
 assert(output.dimensions == 2, halide_error_bad_dimensions("Output buffer output", output.dimensions, 2))
 assert(((bias.min.0 + 96) <= (min(output.extent.0, 96) + output.min.0)) && ((output.extent.0 + output.min.0) <= (bias.extent.0 + bias.min.0)), halide_error_access_out_of_bounds("Input buffer bias", 0, (min(output.extent.0, 96) + output.min.0) + -96, (output.extent.0 + output.min.0) + -1, bias.min.0, (bias.extent.0 + bias.min.0) + -1))
 assert(0 <= bias.extent.0, halide_error_buffer_extents_negative("Input buffer bias", 0, bias.extent.0))
 assert((filter.min.0 <= filter.min.0.required) && ((filter.extent.0.required + filter.min.0.required) <= (filter.extent.0 + filter.min.0)), halide_error_access_out_of_bounds("Input buffer filter", 0, filter.min.0.required, (filter.extent.0.required + filter.min.0.required) + -1, filter.min.0, (filter.extent.0 + filter.min.0) + -1))
 assert(0 <= filter.extent.0, halide_error_buffer_extents_negative("Input buffer filter", 0, filter.extent.0))
 assert((filter.min.1 <= filter.min.1.required) && ((filter.extent.1.required + filter.min.1.required) <= (filter.extent.1 + filter.min.1)), halide_error_access_out_of_bounds("Input buffer filter", 1, filter.min.1.required, (filter.extent.1.required + filter.min.1.required) + -1, filter.min.1, (filter.extent.1 + filter.min.1) + -1))
 assert(0 <= filter.extent.1, halide_error_buffer_extents_negative("Input buffer filter", 1, filter.extent.1))
 assert((input.min.0 <= input.min.0.required) && ((input.extent.0.required + input.min.0.required) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, (input.extent.0.required + input.min.0.required) + -1, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert((input.min.1 <= input.min.1.required) && ((input.extent.1.required + input.min.1.required) <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, (input.extent.1.required + input.min.1.required) + -1, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert(96 <= output.extent.0, halide_error_access_out_of_bounds("Output buffer output", 0, (min(output.extent.0, 96) + output.min.0) + -96, (output.extent.0 + output.min.0) + -1, output.min.0, (output.extent.0 + output.min.0) + -1))
 assert(4 <= output.extent.1, halide_error_access_out_of_bounds("Output buffer output", 1, (min(output.extent.1, 4) + output.min.1) + -4, (output.extent.1 + output.min.1) + -1, output.min.1, (output.extent.1 + output.min.1) + -1))
 assert(bias.stride.0 == 1, halide_error_constraint_violated("bias.stride.0", bias.stride.0, "1", 1))
 assert(filter.stride.0 == 1, halide_error_constraint_violated("filter.stride.0", filter.stride.0, "1", 1))
 assert(filter.min.0 == 0, halide_error_constraint_violated("filter.min.0", filter.min.0, "0", 0))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 assert(output.stride.0 == 1, halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
 let filter.total_extent.1 = int64(filter.extent.1)*int64(filter.extent.0)
 let input.total_extent.1 = int64(input.extent.1)*int64(input.extent.0)
 let output.total_extent.1 = int64(output.extent.1)*int64(output.extent.0)
 assert(uint64(bias.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("bias", uint64(bias.extent.0), (uint64)2147483647))
 assert(uint64(filter.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("filter", uint64(filter.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(filter.extent.1)*int64(filter.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("filter", (uint64)abs(int64(filter.extent.1)*int64(filter.stride.1)), (uint64)2147483647))
 assert(filter.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("filter", filter.total_extent.1, (int64)2147483647))
 assert(uint64(input.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", uint64(input.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(input.extent.1)*int64(input.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", (uint64)abs(int64(input.extent.1)*int64(input.stride.1)), (uint64)2147483647))
 assert(input.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
 assert(uint64(output.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", uint64(output.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(output.extent.1)*int64(output.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", (uint64)abs(int64(output.extent.1)*int64(output.stride.1)), (uint64)2147483647))
 assert(output.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
 assert(!bias.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer bias"))
 assert(!filter.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer filter"))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert(!output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer output"))
 assert(bias != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer bias"))
 assert(filter != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer filter"))
 assert(input != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer input"))
 assert(output != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer output"))
 allocate repeat_edge$1[uint8 * max((filter.extent.0/32)*32, 60) * output.extent.0]
 produce repeat_edge$1 {
  let repeat_edge$1.s0._0._0.prologue = min(max((input.min.0 + 59)/60, 0), (((filter.extent.0/32)*32) + 59)/60)
  let repeat_edge$1.s0._0._0.epilogue = max(min(max((input.min.0 + 59)/60, 0), (((filter.extent.0/32)*32) + 59)/60), min(min(min((filter.extent.0/32)*32, (input.extent.0 + input.min.0) + 59), input.extent.0 + input.min.0), ((filter.extent.0/32)*32) + 59)/60)
  let t133 = input.extent.1 + input.min.1
  let t134 = (filter.extent.0/32)*32
  let t135 = (output.extent.0 + 31)/32
  let t136 = min(max(((input.min.1 - output.min.0) + 31)/32, 0), t135)
  let t127 = max(min(t133 - output.min.0, output.extent.0)/32, t136)
  let t130 = min(t134, 60)
  let t124 = (t134 + 59)/60
  let t128 = (input.min.1*input.stride.1) + input.min.0
  let t132 = input.extent.0 + input.min.0
  parallel (repeat_edge$1.s0._0._0, 0, t124) {
   if ((repeat_edge$1.s0._0._0.prologue <= repeat_edge$1.s0._0._0) && (repeat_edge$1.s0._0._0 < repeat_edge$1.s0._0._0.epilogue)) {
    let repeat_edge$1.s0._0._0i.base = min(repeat_edge$1.s0._0._0*60, t134 + -60)
    let t140 = t135 - t127
    let t138 = repeat_edge$1.s0._0._0i.base - t130
    let t137 = repeat_edge$1.s0._0._0i.base - t128
    for (repeat_edge$1.s0._0._0i, 0, 60) {
     let t142 = ((repeat_edge$1.s0._0._0i + t138) + 60)*output.extent.0
     let t141 = repeat_edge$1.s0._0._0i + t137
     for (repeat_edge$1.s0._1._1, 0, t136) {
      let repeat_edge$1.s0._1._1i.base.s = min(repeat_edge$1.s0._1._1*32, output.extent.0 + -32)
      repeat_edge$1[ramp(repeat_edge$1.s0._1._1i.base.s + t142, 1, 32)] = input[(max(min(ramp(output.min.0 + repeat_edge$1.s0._1._1i.base.s, 1, 32), x32(t133 + -1)), x32(input.min.1))*x32(input.stride.1)) + x32(t141)]
     }
     let t145 = ((repeat_edge$1.s0._0._0i + t138) + 60)*output.extent.0
     let t143 = t127 - t136
     let t144 = repeat_edge$1.s0._0._0i + t137
     for (repeat_edge$1.s0._1._1.rebased, 0, t143) {
      let t117 = repeat_edge$1.s0._1._1.rebased + t136
      repeat_edge$1[ramp((t117*32) + t145, 1, 32)] = input[ramp((((t117*32) + output.min.0)*input.stride.1) + t144, input.stride.1, 32)]
     }
     let t147 = ((repeat_edge$1.s0._0._0i + t138) + 60)*output.extent.0
     let t146 = repeat_edge$1.s0._0._0i + t137
     for (repeat_edge$1.s0._1._1.rebased, 0, t140) {
      let repeat_edge$1.s0._1._1i.base.s = min((repeat_edge$1.s0._1._1.rebased + t127)*32, output.extent.0 + -32)
      repeat_edge$1[ramp(repeat_edge$1.s0._1._1i.base.s + t147, 1, 32)] = input[(max(min(ramp(output.min.0 + repeat_edge$1.s0._1._1i.base.s, 1, 32), x32(t133 + -1)), x32(input.min.1))*x32(input.stride.1)) + x32(t146)]
     }
    }
   } else {
    let repeat_edge$1.s0._0._0i.base = min(repeat_edge$1.s0._0._0*60, t134 + -60)
    let t148 = repeat_edge$1.s0._0._0i.base - t130
    for (repeat_edge$1.s0._0._0i, 0, 60) {
     let t150 = ((repeat_edge$1.s0._0._0i + t148) + 60)*output.extent.0
     let t149 = max(min(repeat_edge$1.s0._0._0i + repeat_edge$1.s0._0._0i.base, t132 + -1), input.min.0) - t128
     for (repeat_edge$1.s0._1._1, 0, t135) {
      let repeat_edge$1.s0._1._1i.base.s = min(repeat_edge$1.s0._1._1*32, output.extent.0 + -32)
      repeat_edge$1[ramp(repeat_edge$1.s0._1._1i.base.s + t150, 1, 32)] = input[(max(min(ramp(output.min.0 + repeat_edge$1.s0._1._1i.base.s, 1, 32), x32(t133 + -1)), x32(input.min.1))*x32(input.stride.1)) + x32(t149)]
     }
    }
   }
  }
 }
 produce output {
  consume repeat_edge$1 {
   let t169 = filter.extent.1 + filter.min.1
   let t170 = filter.extent.0/32
   let t171 = max(t170, 1)
   let t172 = min(t170, 1)
   let t173 = t170*32
   let t159 = min(min(filter.extent.0 + 31, t173), filter.extent.0)
   let t163 = min(t173, 60)
   let t151 = (output.extent.1 + 3)/4
   let t161 = (output.extent.0 + 95)/96
   let t165 = (t171 - t172)*32
   let t167 = ((t171*3) - t172)*32
   let t166 = ((t171*2) - t172)*32
   let t168 = 0 - (output.min.1*output.stride.1)
   parallel (output.s0.b.b, 0, t151) {
    let output.s0.b.bi.base.s = min(output.s0.b.b*4, output.extent.1 + -4)
    allocate repeat_edge[uint8 * (t171*32) * 4]
    produce repeat_edge {
     let repeat_edge.s0._1.prologue = min(max(output.min.1 + output.s0.b.bi.base.s, filter.min.1), (output.min.1 + output.s0.b.bi.base.s) + 4)
     let repeat_edge.s0._1.epilogue = min(max(max(output.min.1 + output.s0.b.bi.base.s, filter.min.1), t169), (output.min.1 + output.s0.b.bi.base.s) + 4)
     let t174 = max(min((filter.min.1 - output.min.1) - min(output.s0.b.b*4, output.extent.1 + -4), 4), 0)
     let t175 = (output.min.1 - filter.min.1) + output.s0.b.bi.base.s
     for (repeat_edge.s0._1.rebased, 0, t174) {
      let t176 = max(min(repeat_edge.s0._1.rebased + t175, filter.extent.1 + -1), 0)*filter.stride.1
      let t177 = (repeat_edge.s0._1.rebased*t171) - t172
      for (repeat_edge.s0._0._0, 0, t170) {
       let repeat_edge.s0._0._0i.base.s = min(t170 + -1, repeat_edge.s0._0._0)
       repeat_edge[ramp(((repeat_edge.s0._0._0i.base.s + t177)*32) + 32, 1, 32) aligned(32, 0)] = filter[max(min(ramp(repeat_edge.s0._0._0i.base.s*32, 1, 32), x32(filter.extent.0 + -1)), x32(0)) + x32(t176)]
      }
     }
     let t183 = t159/32
     let t184 = min(output.s0.b.b*4, output.extent.1 + -4)
     let t185 = output.min.1 + t184
     let t186 = t185 + 4
     let t178 = min(max(t169, t185), t186) - min(max(filter.min.1, t185), t186)
     let t181 = repeat_edge.s0._1.prologue - filter.min.1
     for (repeat_edge.s0._1.rebased, 0, t178) {
      let t188 = (repeat_edge.s0._1.rebased + t181)*filter.stride.1
      for (repeat_edge.s0._0._0, 0, t183) {
       repeat_edge[ramp((((((max(min((filter.min.1 - output.min.1) - t184, 4), 0) + repeat_edge.s0._1.rebased)*t171) - t172) + repeat_edge.s0._0._0)*32) + 32, 1, 32) aligned(32, 0)] = filter[ramp((repeat_edge.s0._0._0*32) + t188, 1, 32)]
      }
      let t191 = (repeat_edge.s0._1.rebased + t181)*filter.stride.1
      for (repeat_edge.s0._0._0.rebased, 0, t170 - t183) {
       let repeat_edge.s0._0._0i.base.s = min(t170 + -1, repeat_edge.s0._0._0.rebased + t183)
       repeat_edge[ramp((((((max(min((filter.min.1 - output.min.1) - t184, 4), 0) + repeat_edge.s0._1.rebased)*t171) - t172) + repeat_edge.s0._0._0i.base.s)*32) + 32, 1, 32) aligned(32, 0)] = filter[max(min(ramp(repeat_edge.s0._0._0i.base.s*32, 1, 32), x32(filter.extent.0 + -1)), x32(0)) + x32(t191)]
      }
     }
     let t195 = min(output.s0.b.b*4, output.extent.1 + -4)
     let t192 = max(min((output.min.1 - t169) + t195, 0), -4)
     let t194 = repeat_edge.s0._1.epilogue - filter.min.1
     for (repeat_edge.s0._1.rebased, 0, t192 + 4) {
      let t197 = max(min(repeat_edge.s0._1.rebased + t194, filter.extent.1 + -1), 0)*filter.stride.1
      for (repeat_edge.s0._0._0, 0, t170) {
       let repeat_edge.s0._0._0i.base.s = min(t170 + -1, repeat_edge.s0._0._0)
       repeat_edge[ramp((((((max(min((t169 - output.min.1) - t195, 4), 0) + repeat_edge.s0._1.rebased)*t171) - t172) + repeat_edge.s0._0._0i.base.s)*32) + 32, 1, 32) aligned(32, 0)] = filter[max(min(ramp(repeat_edge.s0._0._0i.base.s*32, 1, 32), x32(filter.extent.0 + -1)), x32(0)) + x32(t197)]
      }
     }
    }
    consume repeat_edge {
     let t203 = output.min.1 + output.s0.b.bi.base.s
     let t198 = t172*32
     let t202 = ((t203 + 3)*output.stride.1) + t168
     let t201 = ((t203 + 2)*output.stride.1) + t168
     let t200 = ((t203 + 1)*output.stride.1) + t168
     let t199 = (output.stride.1*t203) + t168
     for (output.s0.c.c, 0, t161) {
      let output.s0.c.ci.base.s = min(output.s0.c.c*96, output.extent.0 + -96)
      allocate multiplied[int32 * 384] in Stack
      produce multiplied {
       let t204 = output.min.0 + output.s0.c.ci.base.s
       for (multiplied.s0.b.rebased, 0, 4) {
        let t205 = multiplied.s0.b.rebased*12
        for (multiplied.s0.c.c, 0, 12) {
         let multiplied.s0.c.ci.base = (multiplied.s0.c.c*8) + t204
         multiplied[ramp((multiplied.s0.c.c + t205)*8, 1, 8) aligned(8, 0)] = bias[ramp(multiplied.s0.c.ci.base - bias.min.0, 1, 8)]
        }
       }
       for (multiplied.s1.r9$x, 0, t173) {
        multiplied[ramp(0, 1, 32)] = multiplied[ramp(0, 1, 32)] + (int32x32)widening_mul((int16x32)widening_sub(repeat_edge$1[ramp((((multiplied.s1.r9$x - t163) + 60)*output.extent.0) + output.s0.c.ci.base.s, 1, 32)], x32((uint8)filter_zero)), x32(int16(repeat_edge[(multiplied.s1.r9$x - t198) + 32]) - int16((uint8)input_zero)))
        multiplied[ramp(32, 1, 32)] = multiplied[ramp(32, 1, 32)] + (int32x32)widening_mul((int16x32)widening_sub(repeat_edge$1[ramp(((((multiplied.s1.r9$x - t163) + 60)*output.extent.0) + output.s0.c.ci.base.s) + 32, 1, 32)], x32((uint8)filter_zero)), x32(int16(repeat_edge[(multiplied.s1.r9$x - t198) + 32]) - int16((uint8)input_zero)))
        multiplied[ramp(64, 1, 32)] = multiplied[ramp(64, 1, 32)] + (int32x32)widening_mul((int16x32)widening_sub(repeat_edge$1[ramp(((((multiplied.s1.r9$x - t163) + 60)*output.extent.0) + output.s0.c.ci.base.s) + 64, 1, 32)], x32((uint8)filter_zero)), x32(int16(repeat_edge[(multiplied.s1.r9$x - t198) + 32]) - int16((uint8)input_zero)))
        multiplied[ramp(96, 1, 32)] = multiplied[ramp(96, 1, 32)] + (int32x32)widening_mul((int16x32)widening_sub(repeat_edge$1[ramp((((multiplied.s1.r9$x - t163) + 60)*output.extent.0) + output.s0.c.ci.base.s, 1, 32)], x32((uint8)filter_zero)), x32(int16(repeat_edge[(multiplied.s1.r9$x + t165) + 32]) - int16((uint8)input_zero)))
        multiplied[ramp(128, 1, 32)] = multiplied[ramp(128, 1, 32)] + (int32x32)widening_mul((int16x32)widening_sub(repeat_edge$1[ramp(((((multiplied.s1.r9$x - t163) + 60)*output.extent.0) + output.s0.c.ci.base.s) + 32, 1, 32)], x32((uint8)filter_zero)), x32(int16(repeat_edge[(multiplied.s1.r9$x + t165) + 32]) - int16((uint8)input_zero)))
        multiplied[ramp(160, 1, 32)] = multiplied[ramp(160, 1, 32)] + (int32x32)widening_mul((int16x32)widening_sub(repeat_edge$1[ramp(((((multiplied.s1.r9$x - t163) + 60)*output.extent.0) + output.s0.c.ci.base.s) + 64, 1, 32)], x32((uint8)filter_zero)), x32(int16(repeat_edge[(multiplied.s1.r9$x + t165) + 32]) - int16((uint8)input_zero)))
        multiplied[ramp(192, 1, 32)] = multiplied[ramp(192, 1, 32)] + (int32x32)widening_mul((int16x32)widening_sub(repeat_edge$1[ramp((((multiplied.s1.r9$x - t163) + 60)*output.extent.0) + output.s0.c.ci.base.s, 1, 32)], x32((uint8)filter_zero)), x32(int16(repeat_edge[(multiplied.s1.r9$x + t166) + 32]) - int16((uint8)input_zero)))
        multiplied[ramp(224, 1, 32)] = multiplied[ramp(224, 1, 32)] + (int32x32)widening_mul((int16x32)widening_sub(repeat_edge$1[ramp(((((multiplied.s1.r9$x - t163) + 60)*output.extent.0) + output.s0.c.ci.base.s) + 32, 1, 32)], x32((uint8)filter_zero)), x32(int16(repeat_edge[(multiplied.s1.r9$x + t166) + 32]) - int16((uint8)input_zero)))
        multiplied[ramp(256, 1, 32)] = multiplied[ramp(256, 1, 32)] + (int32x32)widening_mul((int16x32)widening_sub(repeat_edge$1[ramp(((((multiplied.s1.r9$x - t163) + 60)*output.extent.0) + output.s0.c.ci.base.s) + 64, 1, 32)], x32((uint8)filter_zero)), x32(int16(repeat_edge[(multiplied.s1.r9$x + t166) + 32]) - int16((uint8)input_zero)))
        multiplied[ramp(288, 1, 32)] = multiplied[ramp(288, 1, 32)] + (int32x32)widening_mul((int16x32)widening_sub(repeat_edge$1[ramp((((multiplied.s1.r9$x - t163) + 60)*output.extent.0) + output.s0.c.ci.base.s, 1, 32)], x32((uint8)filter_zero)), x32(int16(repeat_edge[(multiplied.s1.r9$x + t167) + 32]) - int16((uint8)input_zero)))
        multiplied[ramp(320, 1, 32)] = multiplied[ramp(320, 1, 32)] + (int32x32)widening_mul((int16x32)widening_sub(repeat_edge$1[ramp(((((multiplied.s1.r9$x - t163) + 60)*output.extent.0) + output.s0.c.ci.base.s) + 32, 1, 32)], x32((uint8)filter_zero)), x32(int16(repeat_edge[(multiplied.s1.r9$x + t167) + 32]) - int16((uint8)input_zero)))
        multiplied[ramp(352, 1, 32)] = multiplied[ramp(352, 1, 32)] + (int32x32)widening_mul((int16x32)widening_sub(repeat_edge$1[ramp(((((multiplied.s1.r9$x - t163) + 60)*output.extent.0) + output.s0.c.ci.base.s) + 64, 1, 32)], x32((uint8)filter_zero)), x32(int16(repeat_edge[(multiplied.s1.r9$x + t167) + 32]) - int16((uint8)input_zero)))
       }
      }
      consume multiplied {
       output[ramp(output.s0.c.ci.base.s + t199, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)rounding_mul_shift_right(multiplied[ramp(0, 1, 32)], x32(output_multiplier), x32((uint32)31)), x32(output_shift)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
       output[ramp((output.s0.c.ci.base.s + t199) + 32, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)rounding_mul_shift_right(multiplied[ramp(32, 1, 32)], x32(output_multiplier), x32((uint32)31)), x32(output_shift)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
       output[ramp((output.s0.c.ci.base.s + t199) + 64, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)rounding_mul_shift_right(multiplied[ramp(64, 1, 32)], x32(output_multiplier), x32((uint32)31)), x32(output_shift)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
       output[ramp(output.s0.c.ci.base.s + t200, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)rounding_mul_shift_right(multiplied[ramp(96, 1, 32)], x32(output_multiplier), x32((uint32)31)), x32(output_shift)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
       output[ramp((output.s0.c.ci.base.s + t200) + 32, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)rounding_mul_shift_right(multiplied[ramp(128, 1, 32)], x32(output_multiplier), x32((uint32)31)), x32(output_shift)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
       output[ramp((output.s0.c.ci.base.s + t200) + 64, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)rounding_mul_shift_right(multiplied[ramp(160, 1, 32)], x32(output_multiplier), x32((uint32)31)), x32(output_shift)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
       output[ramp(output.s0.c.ci.base.s + t201, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)rounding_mul_shift_right(multiplied[ramp(192, 1, 32)], x32(output_multiplier), x32((uint32)31)), x32(output_shift)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
       output[ramp((output.s0.c.ci.base.s + t201) + 32, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)rounding_mul_shift_right(multiplied[ramp(224, 1, 32)], x32(output_multiplier), x32((uint32)31)), x32(output_shift)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
       output[ramp((output.s0.c.ci.base.s + t201) + 64, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)rounding_mul_shift_right(multiplied[ramp(256, 1, 32)], x32(output_multiplier), x32((uint32)31)), x32(output_shift)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
       output[ramp(output.s0.c.ci.base.s + t202, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)rounding_mul_shift_right(multiplied[ramp(288, 1, 32)], x32(output_multiplier), x32((uint32)31)), x32(output_shift)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
       output[ramp((output.s0.c.ci.base.s + t202) + 32, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)rounding_mul_shift_right(multiplied[ramp(320, 1, 32)], x32(output_multiplier), x32((uint32)31)), x32(output_shift)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
       output[ramp((output.s0.c.ci.base.s + t202) + 64, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)rounding_mul_shift_right(multiplied[ramp(352, 1, 32)], x32(output_multiplier), x32((uint32)31)), x32(output_shift)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
       free multiplied
      }
     }
    }
    free repeat_edge
   }
  }
 }
 free repeat_edge$1
}
}


