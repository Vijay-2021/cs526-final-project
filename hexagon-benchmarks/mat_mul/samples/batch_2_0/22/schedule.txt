// --- BEGIN machine-generated schedule
Func output = get_pipeline().get_func(3);
Func matrix_mul = get_pipeline().get_func(2);
Var x(output.get_schedule().dims()[0].var), xi("xi"), xii("xii"), y(output.get_schedule().dims()[1].var), yi("yi");
RVar r4_x(matrix_mul.update(0).get_schedule().dims()[0].var);
output
    .split(y, y, yi, 3, TailStrategy::ShiftInwards)
    .split(x, x, xi, 64, TailStrategy::ShiftInwards)
    .split(xi, xi, xii, 16, TailStrategy::ShiftInwards)
    .unroll(xi)
    .unroll(yi)
    .vectorize(xii)
    .compute_root()
    .reorder(xii, xi, yi, x, y)
    .parallel(y);
matrix_mul.update(0)
    .split(x, x, xi, 16, TailStrategy::GuardWithIf)
    .unroll(x)
    .unroll(y)
    .vectorize(xi)
    .reorder(xi, x, y, r4_x);
matrix_mul
    .store_in(MemoryType::Stack)
    .split(x, x, xi, 16, TailStrategy::RoundUp)
    .unroll(x)
    .unroll(y)
    .vectorize(xi)
    .compute_at(output, x)
    .reorder(xi, x, y);
// --- END machine-generated schedule
