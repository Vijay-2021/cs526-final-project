module name=mat_mul_batch_02_sample_22, target=x86-64-linux-avx-avx2-avx512-avx512_skylake-disable_llvm_loop_unroll-disable_llvm_loop_vectorize-f16c-fma-sse41
external_plus_metadata func mat_mul_batch_02_sample_22 (input_a, input_b, output) {
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input_b.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input_b"))
assert((reinterpret(uint64, input_a.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input_a"))
let input_a = _halide_buffer_get_host(input_a.buffer)
let input_a.type = _halide_buffer_get_type(input_a.buffer)
let input_a.dimensions = _halide_buffer_get_dimensions(input_a.buffer)
let input_a.min.0 = _halide_buffer_get_min(input_a.buffer, 0)
let input_a.extent.0 = _halide_buffer_get_extent(input_a.buffer, 0)
let input_a.stride.0 = _halide_buffer_get_stride(input_a.buffer, 0)
let input_a.min.1 = _halide_buffer_get_min(input_a.buffer, 1)
let input_a.extent.1 = _halide_buffer_get_extent(input_a.buffer, 1)
let input_a.stride.1 = _halide_buffer_get_stride(input_a.buffer, 1)
let input_b = _halide_buffer_get_host(input_b.buffer)
let input_b.type = _halide_buffer_get_type(input_b.buffer)
let input_b.dimensions = _halide_buffer_get_dimensions(input_b.buffer)
let input_b.min.0 = _halide_buffer_get_min(input_b.buffer, 0)
let input_b.extent.0 = _halide_buffer_get_extent(input_b.buffer, 0)
let input_b.stride.0 = _halide_buffer_get_stride(input_b.buffer, 0)
let input_b.min.1 = _halide_buffer_get_min(input_b.buffer, 1)
let input_b.extent.1 = _halide_buffer_get_extent(input_b.buffer, 1)
let input_b.stride.1 = _halide_buffer_get_stride(input_b.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.type = _halide_buffer_get_type(output.buffer)
let output.dimensions = _halide_buffer_get_dimensions(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
if (_halide_buffer_is_bounds_query(input_a.buffer)) {
  _halide_buffer_init(input_a.buffer, _halide_buffer_get_shape(input_a.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, make_struct((halide_dimension_t *), 0, 1536, 1, 0, 0, 1536, 1536, 0), (uint64)0)
}
if (_halide_buffer_is_bounds_query(input_b.buffer)) {
  _halide_buffer_init(input_b.buffer, _halide_buffer_get_shape(input_b.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, make_struct((halide_dimension_t *), 0, 1536, 1, 0, 0, 1536, 1536, 0), (uint64)0)
}
if (_halide_buffer_is_bounds_query(output.buffer)) {
  _halide_buffer_init(output.buffer, _halide_buffer_get_shape(output.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 2, make_struct((halide_dimension_t *), 0, 1536, 1, 0, 0, 1536, 1536, 0), (uint64)0)
}
if (!(_halide_buffer_is_bounds_query(output.buffer) || (_halide_buffer_is_bounds_query(input_a.buffer) || _halide_buffer_is_bounds_query(input_b.buffer)))) {
  assert((input_a.type == (uint32)73730), halide_error_bad_type("Input buffer input_a", input_a.type, (uint32)73730))
  assert((input_a.dimensions == 2), halide_error_bad_dimensions("Input buffer input_a", input_a.dimensions, 2))
  assert((input_b.type == (uint32)73730), halide_error_bad_type("Input buffer input_b", input_b.type, (uint32)73730))
  assert((input_b.dimensions == 2), halide_error_bad_dimensions("Input buffer input_b", input_b.dimensions, 2))
  assert((output.type == (uint32)73730), halide_error_bad_type("Output buffer output", output.type, (uint32)73730))
  assert((output.dimensions == 2), halide_error_bad_dimensions("Output buffer output", output.dimensions, 2))
  assert(((input_a.min.0 <= 0) && (1536 <= (input_a.extent.0 + input_a.min.0))), halide_error_access_out_of_bounds("Input buffer input_a", 0, 0, 1535, input_a.min.0, ((input_a.extent.0 + input_a.min.0) + -1)))
  assert((0 <= input_a.extent.0), halide_error_buffer_extents_negative("Input buffer input_a", 0, input_a.extent.0))
  assert(((input_a.min.1 <= 0) && (1536 <= (input_a.extent.1 + input_a.min.1))), halide_error_access_out_of_bounds("Input buffer input_a", 1, 0, 1535, input_a.min.1, ((input_a.extent.1 + input_a.min.1) + -1)))
  assert((0 <= input_a.extent.1), halide_error_buffer_extents_negative("Input buffer input_a", 1, input_a.extent.1))
  assert(((input_b.min.0 <= 0) && (1536 <= (input_b.extent.0 + input_b.min.0))), halide_error_access_out_of_bounds("Input buffer input_b", 0, 0, 1535, input_b.min.0, ((input_b.extent.0 + input_b.min.0) + -1)))
  assert((0 <= input_b.extent.0), halide_error_buffer_extents_negative("Input buffer input_b", 0, input_b.extent.0))
  assert(((input_b.min.1 <= 0) && (1536 <= (input_b.extent.1 + input_b.min.1))), halide_error_access_out_of_bounds("Input buffer input_b", 1, 0, 1535, input_b.min.1, ((input_b.extent.1 + input_b.min.1) + -1)))
  assert((0 <= input_b.extent.1), halide_error_buffer_extents_negative("Input buffer input_b", 1, input_b.extent.1))
  assert(((output.min.0 <= 0) && (1536 <= (output.extent.0 + output.min.0))), halide_error_access_out_of_bounds("Output buffer output", 0, 0, 1535, output.min.0, ((output.extent.0 + output.min.0) + -1)))
  assert((0 <= output.extent.0), halide_error_buffer_extents_negative("Output buffer output", 0, output.extent.0))
  assert(((output.min.1 <= 0) && (1536 <= (output.extent.1 + output.min.1))), halide_error_access_out_of_bounds("Output buffer output", 1, 0, 1535, output.min.1, ((output.extent.1 + output.min.1) + -1)))
  assert((0 <= output.extent.1), halide_error_buffer_extents_negative("Output buffer output", 1, output.extent.1))
  assert((input_a.stride.0 == 1), halide_error_constraint_violated("input_a.stride.0", input_a.stride.0, "1", 1))
  assert((input_b.stride.0 == 1), halide_error_constraint_violated("input_b.stride.0", input_b.stride.0, "1", 1))
  assert((output.stride.0 == 1), halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
  let input_a.total_extent.1 = (int64(input_a.extent.1)*int64(input_a.extent.0))
  let input_b.total_extent.1 = (int64(input_b.extent.1)*int64(input_b.extent.0))
  let output.total_extent.1 = (int64(output.extent.1)*int64(output.extent.0))
  assert((abs(int64(input_a.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input_a", abs(int64(input_a.extent.0)), (uint64)2147483647))
  assert((abs((int64(input_a.extent.1)*int64(input_a.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input_a", abs((int64(input_a.extent.1)*int64(input_a.stride.1))), (uint64)2147483647))
  assert((input_a.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("input_a", input_a.total_extent.1, (int64)2147483647))
  assert((abs(int64(input_b.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input_b", abs(int64(input_b.extent.0)), (uint64)2147483647))
  assert((abs((int64(input_b.extent.1)*int64(input_b.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input_b", abs((int64(input_b.extent.1)*int64(input_b.stride.1))), (uint64)2147483647))
  assert((input_b.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("input_b", input_b.total_extent.1, (int64)2147483647))
  assert((abs(int64(output.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs(int64(output.extent.0)), (uint64)2147483647))
  assert((abs((int64(output.extent.1)*int64(output.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs((int64(output.extent.1)*int64(output.stride.1))), (uint64)2147483647))
  assert((output.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
  assert((input_a != reinterpret((void *), (uint64)0)), halide_error_host_is_null("Input buffer input_a"))
  assert((input_b != reinterpret((void *), (uint64)0)), halide_error_host_is_null("Input buffer input_b"))
  assert((output != reinterpret((void *), (uint64)0)), halide_error_host_is_null("Output buffer output"))
  assert(((0 <= output.min.1) && ((output.extent.1 + output.min.1) <= 1536)), halide_error_explicit_bounds_too_small("y", "output", 0, 1535, output.min.1, ((output.extent.1 + output.min.1) + -1)))
  assert(((0 <= output.min.0) && ((output.extent.0 + output.min.0) <= 1536)), halide_error_explicit_bounds_too_small("x", "output", 0, 1535, output.min.0, ((output.extent.0 + output.min.0) + -1)))
  produce output {
    let t22 = ((input_b.min.1*input_b.stride.1) + input_b.min.0)
    let t18 = ((input_a.min.1*input_a.stride.1) + input_a.min.0)
    parallel (output.s0.y.y, 0, 512) {
      let t41 = (output.s0.y.y*3)
      let t42 = (t41 + 1)
      let t43 = (output.stride.1*t42)
      let t44 = (t41 + 2)
      let t45 = (output.stride.1*t44)
      let t46 = ((output.s0.y.y*output.stride.1)*3)
      let t23 = (((input_a.stride.1*output.s0.y.y)*3) - t18)
      let t28 = ((input_a.stride.1*t44) - t18)
      let t27 = ((input_a.stride.1*t42) - t18)
      for (output.s0.x.x, 0, 24) {
        allocate matrix_mul[float32 * 192] in Stack
        produce matrix_mul {
          matrix_mul[ramp(0, 1, 16)] = x16(0.000000f)
          matrix_mul[ramp(16, 1, 16)] = x16(0.000000f)
          matrix_mul[ramp(32, 1, 16)] = x16(0.000000f)
          matrix_mul[ramp(48, 1, 16)] = x16(0.000000f)
          matrix_mul[ramp(64, 1, 16)] = x16(0.000000f)
          matrix_mul[ramp(80, 1, 16)] = x16(0.000000f)
          matrix_mul[ramp(96, 1, 16)] = x16(0.000000f)
          matrix_mul[ramp(112, 1, 16)] = x16(0.000000f)
          matrix_mul[ramp(128, 1, 16)] = x16(0.000000f)
          matrix_mul[ramp(144, 1, 16)] = x16(0.000000f)
          matrix_mul[ramp(160, 1, 16)] = x16(0.000000f)
          matrix_mul[ramp(176, 1, 16)] = x16(0.000000f)
          let t51 = ((output.s0.x.x*64) - t22)
          for (matrix_mul.s1.r4$x, 0, 1536) {
            matrix_mul[ramp(0, 1, 16)] = (matrix_mul[ramp(0, 1, 16)] + (input_b[ramp(((input_b.stride.1*matrix_mul.s1.r4$x) + t51), 1, 16)]*x16(input_a[(matrix_mul.s1.r4$x + t23)])))
            matrix_mul[ramp(16, 1, 16)] = (matrix_mul[ramp(16, 1, 16)] + (input_b[ramp((((input_b.stride.1*matrix_mul.s1.r4$x) + t51) + 16), 1, 16)]*x16(input_a[(matrix_mul.s1.r4$x + t23)])))
            matrix_mul[ramp(32, 1, 16)] = (matrix_mul[ramp(32, 1, 16)] + (input_b[ramp((((input_b.stride.1*matrix_mul.s1.r4$x) + t51) + 32), 1, 16)]*x16(input_a[(matrix_mul.s1.r4$x + t23)])))
            matrix_mul[ramp(48, 1, 16)] = (matrix_mul[ramp(48, 1, 16)] + (input_b[ramp((((input_b.stride.1*matrix_mul.s1.r4$x) + t51) + 48), 1, 16)]*x16(input_a[(matrix_mul.s1.r4$x + t23)])))
            matrix_mul[ramp(64, 1, 16)] = (matrix_mul[ramp(64, 1, 16)] + (input_b[ramp(((input_b.stride.1*matrix_mul.s1.r4$x) + t51), 1, 16)]*x16(input_a[(matrix_mul.s1.r4$x + t27)])))
            matrix_mul[ramp(80, 1, 16)] = (matrix_mul[ramp(80, 1, 16)] + (input_b[ramp((((input_b.stride.1*matrix_mul.s1.r4$x) + t51) + 16), 1, 16)]*x16(input_a[(matrix_mul.s1.r4$x + t27)])))
            matrix_mul[ramp(96, 1, 16)] = (matrix_mul[ramp(96, 1, 16)] + (input_b[ramp((((input_b.stride.1*matrix_mul.s1.r4$x) + t51) + 32), 1, 16)]*x16(input_a[(matrix_mul.s1.r4$x + t27)])))
            matrix_mul[ramp(112, 1, 16)] = (matrix_mul[ramp(112, 1, 16)] + (input_b[ramp((((input_b.stride.1*matrix_mul.s1.r4$x) + t51) + 48), 1, 16)]*x16(input_a[(matrix_mul.s1.r4$x + t27)])))
            matrix_mul[ramp(128, 1, 16)] = (matrix_mul[ramp(128, 1, 16)] + (input_b[ramp(((input_b.stride.1*matrix_mul.s1.r4$x) + t51), 1, 16)]*x16(input_a[(matrix_mul.s1.r4$x + t28)])))
            matrix_mul[ramp(144, 1, 16)] = (matrix_mul[ramp(144, 1, 16)] + (input_b[ramp((((input_b.stride.1*matrix_mul.s1.r4$x) + t51) + 16), 1, 16)]*x16(input_a[(matrix_mul.s1.r4$x + t28)])))
            matrix_mul[ramp(160, 1, 16)] = (matrix_mul[ramp(160, 1, 16)] + (input_b[ramp((((input_b.stride.1*matrix_mul.s1.r4$x) + t51) + 32), 1, 16)]*x16(input_a[(matrix_mul.s1.r4$x + t28)])))
            matrix_mul[ramp(176, 1, 16)] = (matrix_mul[ramp(176, 1, 16)] + (input_b[ramp((((input_b.stride.1*matrix_mul.s1.r4$x) + t51) + 48), 1, 16)]*x16(input_a[(matrix_mul.s1.r4$x + t28)])))
          }
        }
        consume matrix_mul {
          output[ramp(((output.s0.x.x*64) + t46), 1, 16)] = matrix_mul[ramp(0, 1, 16)]
          output[ramp((((output.s0.x.x*64) + t46) + 16), 1, 16)] = matrix_mul[ramp(16, 1, 16)]
          output[ramp((((output.s0.x.x*64) + t46) + 32), 1, 16)] = matrix_mul[ramp(32, 1, 16)]
          output[ramp((((output.s0.x.x*64) + t46) + 48), 1, 16)] = matrix_mul[ramp(48, 1, 16)]
          output[ramp(((output.s0.x.x*64) + t43), 1, 16)] = matrix_mul[ramp(64, 1, 16)]
          output[ramp((((output.s0.x.x*64) + t43) + 16), 1, 16)] = matrix_mul[ramp(80, 1, 16)]
          output[ramp((((output.s0.x.x*64) + t43) + 32), 1, 16)] = matrix_mul[ramp(96, 1, 16)]
          output[ramp((((output.s0.x.x*64) + t43) + 48), 1, 16)] = matrix_mul[ramp(112, 1, 16)]
          output[ramp(((output.s0.x.x*64) + t45), 1, 16)] = matrix_mul[ramp(128, 1, 16)]
          output[ramp((((output.s0.x.x*64) + t45) + 16), 1, 16)] = matrix_mul[ramp(144, 1, 16)]
          output[ramp((((output.s0.x.x*64) + t45) + 32), 1, 16)] = matrix_mul[ramp(160, 1, 16)]
          output[ramp((((output.s0.x.x*64) + t45) + 48), 1, 16)] = matrix_mul[ramp(176, 1, 16)]
          free matrix_mul
        }
      }
    }
  }
}
}


