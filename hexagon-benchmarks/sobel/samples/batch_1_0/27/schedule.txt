// --- BEGIN machine-generated schedule
Func output = get_pipeline().get_func(9);
Func sobel_y = get_pipeline().get_func(8);
Func sobel_y_avg = get_pipeline().get_func(7);
Func sobel_x = get_pipeline().get_func(6);
Func sobel_x_avg = get_pipeline().get_func(5);
Func input_16 = get_pipeline().get_func(4);
Func bounded_input = get_pipeline().get_func(3);
Func repeat_edge = get_pipeline().get_func(2);
Func lambda_0 = get_pipeline().get_func(1);
Var x(output.get_schedule().dims()[0].var), xi("xi"), xii("xii"), y(output.get_schedule().dims()[1].var), yi("yi"), yii("yii");
output
    .split(y, y, yi, 16, TailStrategy::ShiftInwards)
    .split(yi, yi, yii, 4, TailStrategy::ShiftInwards)
    .split(x, x, xi, 256, TailStrategy::ShiftInwards)
    .split(xi, xi, xii, 64, TailStrategy::ShiftInwards)
    .unroll(xi)
    .vectorize(xii)
    .compute_root()
    .reorder(xii, xi, yii, x, yi, y)
    .parallel(y);
sobel_y
    .store_in(MemoryType::Stack)
    .split(x, x, xi, 32, TailStrategy::RoundUp)
    .unroll(x)
    .vectorize(xi)
    .compute_at(output, xi)
    .reorder(xi, x, y);
sobel_y_avg
    .store_in(MemoryType::Stack)
    .split(x, x, xi, 32, TailStrategy::RoundUp)
    .vectorize(xi)
    .compute_at(output, yi)
    .reorder(xi, x, y);
sobel_x
    .store_in(MemoryType::Stack)
    .split(x, x, xi, 32, TailStrategy::RoundUp)
    .unroll(x)
    .vectorize(xi)
    .compute_at(output, yii)
    .reorder(xi, x, y);
sobel_x_avg
    .store_in(MemoryType::Stack)
    .split(x, x, xi, 32, TailStrategy::RoundUp)
    .vectorize(xi)
    .compute_at(output, yii)
    .store_at(output, x)
    .reorder(xi, x, y);
input_16
    .store_in(MemoryType::Stack)
    .split(x, x, xi, 64, TailStrategy::ShiftInwards)
    .vectorize(xi)
    .compute_at(output, yi)
    .store_at(output, y)
    .reorder(xi, x, y);
// --- END machine-generated schedule
