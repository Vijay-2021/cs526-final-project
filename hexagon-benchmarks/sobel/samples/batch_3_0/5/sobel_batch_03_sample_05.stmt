module name=sobel_batch_03_sample_05, target=x86-64-linux-avx-avx2-avx512-avx512_skylake-disable_llvm_loop_unroll-disable_llvm_loop_vectorize-f16c-fma-sse41
external_plus_metadata func sobel_batch_03_sample_05 (input, output) {
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
let input = _halide_buffer_get_host(input.buffer)
let input.type = _halide_buffer_get_type(input.buffer)
let input.dimensions = _halide_buffer_get_dimensions(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let output = _halide_buffer_get_host(output.buffer)
let output.type = _halide_buffer_get_type(output.buffer)
let output.dimensions = _halide_buffer_get_dimensions(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
let input.extent.0.required.s = (max(min((output.extent.0 + output.min.0), ((input.extent.0 + input.min.0) + -1)), input.min.0) - max((min((min(output.extent.0, 62) + output.min.0), ((input.extent.0 + input.min.0) + 62)) + -63), input.min.0))
let input.min.0.required = max((min((min(output.extent.0, 62) + output.min.0), ((input.extent.0 + input.min.0) + 62)) + -63), input.min.0)
let input.extent.1.required.s = (max(min((output.extent.1 + output.min.1), ((input.extent.1 + input.min.1) + -1)), input.min.1) - max((min((input.extent.1 + input.min.1), output.min.1) + -1), input.min.1))
let input.min.1.required = max((min((input.extent.1 + input.min.1), output.min.1) + -1), input.min.1)
let output.extent.0.required.s = (min((((output.extent.0 + -1)/256)*256), (output.extent.0 + -256)) - min(output.extent.0, 256))
let output.extent.1.required.s = (min((((output.extent.1 + -1)/16)*16), (output.extent.1 + -16)) - min(output.extent.1, 16))
assert((!_halide_buffer_is_bounds_query(input.buffer) || ((0 <= input.min.0.required) && (input.min.0.required <= 0))), halide_error_constraints_make_required_region_smaller("Input buffer input", 0, 0, input.extent.0.required.s, input.min.0.required, (input.extent.0.required.s + input.min.0.required)))
assert((!_halide_buffer_is_bounds_query(input.buffer) || ((0 <= input.min.1.required) && (input.min.1.required <= 0))), halide_error_constraints_make_required_region_smaller("Input buffer input", 1, 0, input.extent.1.required.s, input.min.1.required, (input.extent.1.required.s + input.min.1.required)))
if (_halide_buffer_is_bounds_query(input.buffer)) {
  _halide_buffer_init(input.buffer, _halide_buffer_get_shape(input.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 8, 2, make_struct((halide_dimension_t *), 0, (input.extent.0.required.s + 1), 1, 0, 0, (input.extent.1.required.s + 1), (input.extent.0.required.s + 1), 0), (uint64)0)
}
if (_halide_buffer_is_bounds_query(output.buffer)) {
  _halide_buffer_init(output.buffer, _halide_buffer_get_shape(output.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 8, 2, make_struct((halide_dimension_t *), ((min(output.extent.0, 256) + output.min.0) + -256), (output.extent.0.required.s + 512), 1, 0, ((min(output.extent.1, 16) + output.min.1) + -16), (output.extent.1.required.s + 32), (output.extent.0.required.s + 512), 0), (uint64)0)
}
if (!(_halide_buffer_is_bounds_query(input.buffer) || _halide_buffer_is_bounds_query(output.buffer))) {
  assert((input.type == (uint32)67585), halide_error_bad_type("Input buffer input", input.type, (uint32)67585))
  assert((input.dimensions == 2), halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
  assert((output.type == (uint32)67585), halide_error_bad_type("Output buffer output", output.type, (uint32)67585))
  assert((output.dimensions == 2), halide_error_bad_dimensions("Output buffer output", output.dimensions, 2))
  assert(((input.min.0 <= input.min.0.required) && (((input.extent.0.required.s + input.min.0.required) + 1) <= (input.extent.0 + input.min.0))), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, (input.extent.0.required.s + input.min.0.required), input.min.0, ((input.extent.0 + input.min.0) + -1)))
  assert((0 <= input.extent.0), halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
  assert(((input.min.1 <= input.min.1.required) && (((input.extent.1.required.s + input.min.1.required) + 1) <= (input.extent.1 + input.min.1))), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, (input.extent.1.required.s + input.min.1.required), input.min.1, ((input.extent.1 + input.min.1) + -1)))
  assert((0 <= input.extent.1), halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
  assert(((256 <= output.extent.0) && ((((min(output.extent.0, 256) + output.min.0) + output.extent.0.required.s) + 256) <= (output.extent.0 + output.min.0))), halide_error_access_out_of_bounds("Output buffer output", 0, ((min(output.extent.0, 256) + output.min.0) + -256), (((min(output.extent.0, 256) + output.min.0) + output.extent.0.required.s) + 255), output.min.0, ((output.extent.0 + output.min.0) + -1)))
  assert(((16 <= output.extent.1) && ((((min(output.extent.1, 16) + output.min.1) + output.extent.1.required.s) + 16) <= (output.extent.1 + output.min.1))), halide_error_access_out_of_bounds("Output buffer output", 1, ((min(output.extent.1, 16) + output.min.1) + -16), (((min(output.extent.1, 16) + output.min.1) + output.extent.1.required.s) + 15), output.min.1, ((output.extent.1 + output.min.1) + -1)))
  assert((input.stride.0 == 1), halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
  assert((input.min.0 == 0), halide_error_constraint_violated("input.min.0", input.min.0, "0", 0))
  assert((input.min.1 == 0), halide_error_constraint_violated("input.min.1", input.min.1, "0", 0))
  assert((output.stride.0 == 1), halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
  let input.total_extent.1 = (int64(input.extent.1)*int64(input.extent.0))
  let output.total_extent.1 = (int64(output.extent.1)*int64(output.extent.0))
  assert((abs(int64(input.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs(int64(input.extent.0)), (uint64)2147483647))
  assert((abs((int64(input.extent.1)*int64(input.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs((int64(input.extent.1)*int64(input.stride.1))), (uint64)2147483647))
  assert((input.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
  assert((abs(int64(output.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs(int64(output.extent.0)), (uint64)2147483647))
  assert((abs((int64(output.extent.1)*int64(output.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs((int64(output.extent.1)*int64(output.stride.1))), (uint64)2147483647))
  assert((output.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
  assert((input != reinterpret((void *), (uint64)0)), halide_error_host_is_null("Input buffer input"))
  assert((output != reinterpret((void *), (uint64)0)), halide_error_host_is_null("Output buffer output"))
  produce output {
    let t888 = (output.min.1*output.stride.1)
    let t889 = ((output.extent.0 + 255)/256)
    let t890 = min((max(((0 - output.min.0)/256), -1) + 1), t889)
    let t876 = max(((min(min((min(((output.extent.0 + output.min.0) + -256), input.extent.0) - output.min.0), ((input.extent.0 - output.min.0) + -257)), (output.extent.0 + -1))/256) + 1), t890)
    let t873 = ((output.extent.1 + 15)/16)
    let t884 = (192 - t888)
    let t883 = (128 - t888)
    let t882 = (64 - t888)
    let t881 = (0 - t888)
    let t874 = (output.extent.1 + -16)
    let t877 = (output.extent.0 + -256)
    let t880 = (input.extent.0 + -1)
    parallel (output.s0.y.y, 0, t873) {
      let output.s0.y.yi.base.s = min((output.s0.y.y*16), t874)
      let t891 = (output.min.1 + output.s0.y.yi.base.s)
      let t892 = (input.extent.1 + -1)
      for (output.s0.x.x, 0, t890) {
        let output.s0.x.xi.base.s = min((output.s0.x.x*256), t877)
        allocate repeat_edge[uint8 * 5120] in Stack
        let t897 = (output.s0.x.xi.base.s + t884)
        let t896 = (output.s0.x.xi.base.s + t883)
        let t895 = (output.s0.x.xi.base.s + t882)
        let t894 = (output.s0.x.xi.base.s + t881)
        let t893 = (output.min.0 + output.s0.x.xi.base.s)
        for (output.s0.y.yi.yi, 0, 2) {
          let repeat_edge.s0._1.min_2 = ((output.s0.y.yi.yi*8) + (select((0 < output.s0.y.yi.yi), 1, -1) + t891))
          let repeat_edge.s0._1.loop_extent.s = (select((0 < output.s0.y.yi.yi), -1, 1) - (output.s0.y.yi.yi*8))
          produce repeat_edge {
            let t898 = (repeat_edge.s0._1.loop_extent.s + 17)
            for (repeat_edge.s0._1, repeat_edge.s0._1.min_2, t898) {
              let t899 = (max(min(repeat_edge.s0._1, t892), 0)*input.stride.1)
              let t900 = (((repeat_edge.s0._1 % 16)*320) - t893)
              for (repeat_edge.s0._0._0, 0, 5) {
                let repeat_edge.s0._0._0i.base.s = (min((repeat_edge.s0._0._0*64), 194) + t893)
                repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t900), 1, 64)] = input[(max(min(ramp((repeat_edge.s0._0._0i.base.s + -1), 1, 64), x64(t880)), x64(0)) + x64(t899))]
              }
            }
          }
          allocate input_16[uint16 * 1920] in Stack
          allocate sobel_x_avg[uint16 * 1024] in Stack
          consume repeat_edge {
            let t903 = (output.s0.y.yi.yi*8)
            let t901 = (t891 + t903)
            for (output.s0.y.yi.yii, 0, 8) {
              let sobel_x_avg.s0.y.min_3 = ((select((0 < output.s0.y.yi.yii), 1, -1) + t901) + output.s0.y.yi.yii)
              let input_16.s0.y.loop_extent.s = ((select((0 < output.s0.y.yi.yii), 1, -1) + t903) + output.s0.y.yi.yii)
              produce input_16 {
                let t904 = ((input_16.s0.y.loop_extent.s*-1) + 17)
                for (input_16.s0.y, sobel_x_avg.s0.y.min_3, t904) {
                  allocate bounded_input[uint8 * 320] in Stack
                  produce bounded_input {
                    bounded_input[ramp(0, 1, 64)] = repeat_edge[ramp(((input_16.s0.y % 16)*320), 1, 64) aligned(320, 0)]
                    bounded_input[ramp(64, 1, 64)] = repeat_edge[ramp((((input_16.s0.y % 16)*320) + 64), 1, 64) aligned(320, 64)]
                    bounded_input[ramp(128, 1, 64)] = repeat_edge[ramp((((input_16.s0.y % 16)*320) + 128), 1, 64) aligned(320, 128)]
                    bounded_input[ramp(192, 1, 64)] = repeat_edge[ramp((((input_16.s0.y % 16)*320) + 192), 1, 64) aligned(320, 192)]
                    bounded_input[ramp(256, 1, 64)] = repeat_edge[ramp((((input_16.s0.y % 16)*320) + 256), 1, 64) aligned(320, 256)]
                  }
                  consume bounded_input {
                    input_16[ramp(((input_16.s0.y % 4)*480), 1, 64) aligned(480, 0)] = uint16x64(bounded_input[ramp(0, 1, 64)])
                    input_16[ramp((((input_16.s0.y % 4)*480) + 64), 1, 64) aligned(480, 64)] = uint16x64(bounded_input[ramp(64, 1, 64)])
                    input_16[ramp((((input_16.s0.y % 4)*480) + 128), 1, 64) aligned(480, 128)] = uint16x64(bounded_input[ramp(128, 1, 64)])
                    input_16[ramp((((input_16.s0.y % 4)*480) + 192), 1, 64) aligned(480, 192)] = uint16x64(bounded_input[ramp(192, 1, 64)])
                    input_16[ramp((((input_16.s0.y % 4)*480) + 256), 1, 64) aligned(480, 256)] = uint16x64(bounded_input[ramp(256, 1, 64)])
                    free bounded_input
                  }
                }
              }
              let sobel_x_avg.s0.y.loop_extent = select((0 < output.s0.y.yi.yii), 1, 3)
              produce sobel_x_avg {
                consume input_16 {
                  for (sobel_x_avg.s0.y, sobel_x_avg.s0.y.min_3, sobel_x_avg.s0.y.loop_extent) {
                    let t907 = (sobel_x_avg.s0.y % 4)
                    let t905 = (t907*15)
                    let t906 = (t907*8)
                    for (sobel_x_avg.s0.x.x, 0, 8) {
                      sobel_x_avg[ramp(((sobel_x_avg.s0.x.x + t906)*32), 1, 32) aligned(32, 0)] = ((input_16[ramp((((sobel_x_avg.s0.x.x + t905)*32) + 1), 1, 32) aligned(32, 1)]*x32((uint16)2)) + (input_16[ramp((((sobel_x_avg.s0.x.x + t905)*32) + 2), 1, 32) aligned(32, 2)] + input_16[ramp(((sobel_x_avg.s0.x.x + t905)*32), 1, 32) aligned(32, 0)]))
                    }
                  }
                }
              }
              allocate sobel_x[uint16 * 256] in Stack
              produce sobel_x {
                consume sobel_x_avg {
                  sobel_x[ramp(0, 1, 32)] = absd(sobel_x_avg[ramp(((((output.s0.y.yi.yii + t901) + 3) % 4)*256), 1, 32) aligned(256, 0)], sobel_x_avg[ramp(((((output.s0.y.yi.yii + t901) + 1) % 4)*256), 1, 32) aligned(256, 0)])
                  sobel_x[ramp(32, 1, 32)] = absd(sobel_x_avg[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*256) + 32), 1, 32) aligned(256, 32)], sobel_x_avg[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*256) + 32), 1, 32) aligned(256, 32)])
                  sobel_x[ramp(64, 1, 32)] = absd(sobel_x_avg[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*256) + 64), 1, 32) aligned(256, 64)], sobel_x_avg[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*256) + 64), 1, 32) aligned(256, 64)])
                  sobel_x[ramp(96, 1, 32)] = absd(sobel_x_avg[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*256) + 96), 1, 32) aligned(256, 96)], sobel_x_avg[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*256) + 96), 1, 32) aligned(256, 96)])
                  sobel_x[ramp(128, 1, 32)] = absd(sobel_x_avg[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*256) + 128), 1, 32) aligned(256, 128)], sobel_x_avg[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*256) + 128), 1, 32) aligned(256, 128)])
                  sobel_x[ramp(160, 1, 32)] = absd(sobel_x_avg[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*256) + 160), 1, 32) aligned(256, 160)], sobel_x_avg[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*256) + 160), 1, 32) aligned(256, 160)])
                  sobel_x[ramp(192, 1, 32)] = absd(sobel_x_avg[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*256) + 192), 1, 32) aligned(256, 192)], sobel_x_avg[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*256) + 192), 1, 32) aligned(256, 192)])
                  sobel_x[ramp(224, 1, 32)] = absd(sobel_x_avg[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*256) + 224), 1, 32) aligned(256, 224)], sobel_x_avg[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*256) + 224), 1, 32) aligned(256, 224)])
                }
              }
              consume sobel_x {
                consume input_16 {
                  allocate sobel_y_avg[uint16 * 288] in Stack
                  produce sobel_y_avg {
                    sobel_y_avg[ramp(0, 1, 32)] = ((input_16[ramp((((output.s0.y.yi.yii + t901) % 4)*480), 1, 32) aligned(480, 0)]*x32((uint16)2)) + (input_16[ramp(((((output.s0.y.yi.yii + t901) + 1) % 4)*480), 1, 32) aligned(480, 0)] + input_16[ramp(((((output.s0.y.yi.yii + t901) + 3) % 4)*480), 1, 32) aligned(480, 0)]))
                    sobel_y_avg[ramp(32, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 32), 1, 32) aligned(480, 32)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 32), 1, 32) aligned(480, 32)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 32), 1, 32) aligned(480, 32)]))
                    sobel_y_avg[ramp(64, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 64), 1, 32) aligned(480, 64)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 64), 1, 32) aligned(480, 64)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 64), 1, 32) aligned(480, 64)]))
                    sobel_y_avg[ramp(96, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 96), 1, 32) aligned(480, 96)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 96), 1, 32) aligned(480, 96)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 96), 1, 32) aligned(480, 96)]))
                    sobel_y_avg[ramp(128, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 128), 1, 32) aligned(480, 128)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 128), 1, 32) aligned(480, 128)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 128), 1, 32) aligned(480, 128)]))
                    sobel_y_avg[ramp(160, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 160), 1, 32) aligned(480, 160)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 160), 1, 32) aligned(480, 160)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 160), 1, 32) aligned(480, 160)]))
                    sobel_y_avg[ramp(192, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 192), 1, 32) aligned(480, 192)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 192), 1, 32) aligned(480, 192)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 192), 1, 32) aligned(480, 192)]))
                    sobel_y_avg[ramp(224, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 224), 1, 32) aligned(480, 224)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 224), 1, 32) aligned(480, 224)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 224), 1, 32) aligned(480, 224)]))
                    sobel_y_avg[ramp(256, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 256), 1, 32) aligned(480, 256)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 256), 1, 32) aligned(480, 256)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 256), 1, 32) aligned(480, 256)]))
                  }
                  allocate sobel_y[uint16 * 64] in Stack
                  produce sobel_y {
                    consume sobel_y_avg {
                      sobel_y[ramp(0, 1, 32)] = absd(sobel_y_avg[ramp(0, 1, 32)], sobel_y_avg[ramp(2, 1, 32)])
                      sobel_y[ramp(32, 1, 32)] = absd(sobel_y_avg[ramp(32, 1, 32)], sobel_y_avg[ramp(34, 1, 32)])
                      free sobel_y_avg
                    }
                  }
                  consume sobel_y {
                    output[ramp((((output.s0.y.yi.yii + t901)*output.stride.1) + t894), 1, 64)] = uint8x64(min((sobel_x[ramp(0, 1, 64)] + sobel_y[ramp(0, 1, 64)]), x64((uint16)255)))
                  }
                  free sobel_y
                  allocate sobel_y_avg[uint16 * 288] in Stack
                  produce sobel_y_avg {
                    sobel_y_avg[ramp(0, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 64), 1, 32) aligned(480, 64)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 64), 1, 32) aligned(480, 64)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 64), 1, 32) aligned(480, 64)]))
                    sobel_y_avg[ramp(32, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 96), 1, 32) aligned(480, 96)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 96), 1, 32) aligned(480, 96)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 96), 1, 32) aligned(480, 96)]))
                    sobel_y_avg[ramp(64, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 128), 1, 32) aligned(480, 128)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 128), 1, 32) aligned(480, 128)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 128), 1, 32) aligned(480, 128)]))
                    sobel_y_avg[ramp(96, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 160), 1, 32) aligned(480, 160)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 160), 1, 32) aligned(480, 160)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 160), 1, 32) aligned(480, 160)]))
                    sobel_y_avg[ramp(128, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 192), 1, 32) aligned(480, 192)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 192), 1, 32) aligned(480, 192)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 192), 1, 32) aligned(480, 192)]))
                    sobel_y_avg[ramp(160, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 224), 1, 32) aligned(480, 224)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 224), 1, 32) aligned(480, 224)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 224), 1, 32) aligned(480, 224)]))
                    sobel_y_avg[ramp(192, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 256), 1, 32) aligned(480, 256)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 256), 1, 32) aligned(480, 256)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 256), 1, 32) aligned(480, 256)]))
                    sobel_y_avg[ramp(224, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 288), 1, 32) aligned(480, 288)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 288), 1, 32) aligned(480, 288)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 288), 1, 32) aligned(480, 288)]))
                    sobel_y_avg[ramp(256, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 320), 1, 32) aligned(480, 320)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 320), 1, 32) aligned(480, 320)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 320), 1, 32) aligned(480, 320)]))
                  }
                  allocate sobel_y[uint16 * 64] in Stack
                  produce sobel_y {
                    consume sobel_y_avg {
                      sobel_y[ramp(0, 1, 32)] = absd(sobel_y_avg[ramp(0, 1, 32)], sobel_y_avg[ramp(2, 1, 32)])
                      sobel_y[ramp(32, 1, 32)] = absd(sobel_y_avg[ramp(32, 1, 32)], sobel_y_avg[ramp(34, 1, 32)])
                      free sobel_y_avg
                    }
                  }
                  consume sobel_y {
                    output[ramp((((output.s0.y.yi.yii + t901)*output.stride.1) + t895), 1, 64)] = uint8x64(min((sobel_x[ramp(64, 1, 64)] + sobel_y[ramp(0, 1, 64)]), x64((uint16)255)))
                  }
                  free sobel_y
                  allocate sobel_y_avg[uint16 * 288] in Stack
                  produce sobel_y_avg {
                    sobel_y_avg[ramp(0, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 128), 1, 32) aligned(480, 128)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 128), 1, 32) aligned(480, 128)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 128), 1, 32) aligned(480, 128)]))
                    sobel_y_avg[ramp(32, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 160), 1, 32) aligned(480, 160)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 160), 1, 32) aligned(480, 160)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 160), 1, 32) aligned(480, 160)]))
                    sobel_y_avg[ramp(64, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 192), 1, 32) aligned(480, 192)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 192), 1, 32) aligned(480, 192)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 192), 1, 32) aligned(480, 192)]))
                    sobel_y_avg[ramp(96, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 224), 1, 32) aligned(480, 224)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 224), 1, 32) aligned(480, 224)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 224), 1, 32) aligned(480, 224)]))
                    sobel_y_avg[ramp(128, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 256), 1, 32) aligned(480, 256)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 256), 1, 32) aligned(480, 256)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 256), 1, 32) aligned(480, 256)]))
                    sobel_y_avg[ramp(160, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 288), 1, 32) aligned(480, 288)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 288), 1, 32) aligned(480, 288)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 288), 1, 32) aligned(480, 288)]))
                    sobel_y_avg[ramp(192, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 320), 1, 32) aligned(480, 320)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 320), 1, 32) aligned(480, 320)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 320), 1, 32) aligned(480, 320)]))
                    sobel_y_avg[ramp(224, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 352), 1, 32) aligned(480, 352)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 352), 1, 32) aligned(480, 352)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 352), 1, 32) aligned(480, 352)]))
                    sobel_y_avg[ramp(256, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 384), 1, 32) aligned(480, 384)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 384), 1, 32) aligned(480, 384)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 384), 1, 32) aligned(480, 384)]))
                  }
                  allocate sobel_y[uint16 * 64] in Stack
                  produce sobel_y {
                    consume sobel_y_avg {
                      sobel_y[ramp(0, 1, 32)] = absd(sobel_y_avg[ramp(0, 1, 32)], sobel_y_avg[ramp(2, 1, 32)])
                      sobel_y[ramp(32, 1, 32)] = absd(sobel_y_avg[ramp(32, 1, 32)], sobel_y_avg[ramp(34, 1, 32)])
                      free sobel_y_avg
                    }
                  }
                  consume sobel_y {
                    output[ramp((((output.s0.y.yi.yii + t901)*output.stride.1) + t896), 1, 64)] = uint8x64(min((sobel_x[ramp(128, 1, 64)] + sobel_y[ramp(0, 1, 64)]), x64((uint16)255)))
                  }
                  free sobel_y
                  allocate sobel_y_avg[uint16 * 288] in Stack
                  produce sobel_y_avg {
                    sobel_y_avg[ramp(0, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 192), 1, 32) aligned(480, 192)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 192), 1, 32) aligned(480, 192)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 192), 1, 32) aligned(480, 192)]))
                    sobel_y_avg[ramp(32, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 224), 1, 32) aligned(480, 224)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 224), 1, 32) aligned(480, 224)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 224), 1, 32) aligned(480, 224)]))
                    sobel_y_avg[ramp(64, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 256), 1, 32) aligned(480, 256)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 256), 1, 32) aligned(480, 256)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 256), 1, 32) aligned(480, 256)]))
                    sobel_y_avg[ramp(96, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 288), 1, 32) aligned(480, 288)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 288), 1, 32) aligned(480, 288)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 288), 1, 32) aligned(480, 288)]))
                    sobel_y_avg[ramp(128, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 320), 1, 32) aligned(480, 320)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 320), 1, 32) aligned(480, 320)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 320), 1, 32) aligned(480, 320)]))
                    sobel_y_avg[ramp(160, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 352), 1, 32) aligned(480, 352)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 352), 1, 32) aligned(480, 352)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 352), 1, 32) aligned(480, 352)]))
                    sobel_y_avg[ramp(192, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 384), 1, 32) aligned(480, 384)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 384), 1, 32) aligned(480, 384)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 384), 1, 32) aligned(480, 384)]))
                    sobel_y_avg[ramp(224, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 416), 1, 32) aligned(480, 416)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 416), 1, 32) aligned(480, 416)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 416), 1, 32) aligned(480, 416)]))
                    sobel_y_avg[ramp(256, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t901) % 4)*480) + 448), 1, 32) aligned(480, 448)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t901) + 1) % 4)*480) + 448), 1, 32) aligned(480, 448)] + input_16[ramp((((((output.s0.y.yi.yii + t901) + 3) % 4)*480) + 448), 1, 32) aligned(480, 448)]))
                  }
                  allocate sobel_y[uint16 * 64] in Stack
                  produce sobel_y {
                    consume sobel_y_avg {
                      sobel_y[ramp(0, 1, 32)] = absd(sobel_y_avg[ramp(0, 1, 32)], sobel_y_avg[ramp(2, 1, 32)])
                      sobel_y[ramp(32, 1, 32)] = absd(sobel_y_avg[ramp(32, 1, 32)], sobel_y_avg[ramp(34, 1, 32)])
                      free sobel_y_avg
                    }
                  }
                  consume sobel_y {
                    output[ramp((((output.s0.y.yi.yii + t901)*output.stride.1) + t897), 1, 64)] = uint8x64(min((sobel_x[ramp(192, 1, 64)] + sobel_y[ramp(0, 1, 64)]), x64((uint16)255)))
                  }
                  free sobel_x
                  free sobel_y
                }
              }
            }
          }
          free input_16
          free sobel_x_avg
        }
        free repeat_edge
      }
      let t915 = (output.min.1 + output.s0.y.yi.base.s)
      let t911 = min((output.s0.y.y*16), t874)
      let t908 = (t876 - t890)
      for (output.s0.x.x, t890, t908) {
        let output.s0.x.xi.base.s = min((output.s0.x.x*256), t877)
        allocate repeat_edge[uint8 * 5120] in Stack
        let t926 = (output.min.0 + output.s0.x.xi.base.s)
        let t927 = (output.min.1 + t911)
        let t925 = (output.s0.x.xi.base.s + t884)
        let t924 = (output.s0.x.xi.base.s + t883)
        let t923 = (output.s0.x.xi.base.s + t882)
        let t922 = (output.s0.x.xi.base.s + t881)
        for (output.s0.y.yi.yi, 0, 2) {
          let repeat_edge.s0._1.min_2 = ((output.s0.y.yi.yi*8) + (select((0 < output.s0.y.yi.yi), 1, -1) + t915))
          produce repeat_edge {
            let repeat_edge.s0._1.prologue = min(max(repeat_edge.s0._1.min_2, 0), (t915 + 17))
            let repeat_edge.s0._1.epilogue = min(max(input.extent.1, repeat_edge.s0._1.min_2), (t915 + 17))
            let t930 = select((0 < output.s0.y.yi.yi), 1, -1)
            let t931 = (output.s0.y.yi.yi*8)
            let t928 = ((min((max(((t927 + t931) + t930), 0) - t927), 17) - t931) - t930)
            let t929 = (input.extent.1 + -1)
            for (repeat_edge.s0._1, repeat_edge.s0._1.min_2, t928) {
              let t933 = (((repeat_edge.s0._1 % 16)*320) - t926)
              let t932 = ((max(min(repeat_edge.s0._1, t929), 0)*input.stride.1) + -1)
              for (repeat_edge.s0._0._0, 0, 5) {
                let repeat_edge.s0._0._0i.base.s = (min((repeat_edge.s0._0._0*64), 194) + t926)
                repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t933), 1, 64)] = input[ramp((repeat_edge.s0._0._0i.base.s + t932), 1, 64)]
              }
            }
            let t936 = ((select((0 < output.s0.y.yi.yi), 1, -1) + (output.s0.y.yi.yi*8)) + t927)
            let t937 = (t927 + 17)
            let t934 = (min(max(input.extent.1, t936), t937) - min(max(t936, 0), t937))
            for (repeat_edge.s0._1, repeat_edge.s0._1.prologue, t934) {
              let t939 = (((repeat_edge.s0._1 % 16)*320) - t926)
              let t938 = ((input.stride.1*repeat_edge.s0._1) + -1)
              for (repeat_edge.s0._0._0, 0, 4) {
                let repeat_edge.s0._0._0i.base.s = ((repeat_edge.s0._0._0*64) + t926)
                repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t939), 1, 64)] = input[ramp((repeat_edge.s0._0._0i.base.s + t938), 1, 64)]
              }
              repeat_edge[ramp((((repeat_edge.s0._1 % 16)*320) + 194), 1, 64) aligned(320, 194)] = input[ramp((((input.stride.1*repeat_edge.s0._1) + t926) + 193), 1, 64)]
            }
            let t940 = (max((t927 - max(((output.s0.y.yi.yi*8) + (select((0 < output.s0.y.yi.yi), 1, -1) + t927)), input.extent.1)), -17) + 17)
            let t941 = (input.extent.1 + -1)
            for (repeat_edge.s0._1, repeat_edge.s0._1.epilogue, t940) {
              let t943 = (((repeat_edge.s0._1 % 16)*320) - t926)
              let t942 = ((max(min(repeat_edge.s0._1, t941), 0)*input.stride.1) + -1)
              for (repeat_edge.s0._0._0, 0, 5) {
                let repeat_edge.s0._0._0i.base.s = (min((repeat_edge.s0._0._0*64), 194) + t926)
                repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t943), 1, 64)] = input[ramp((repeat_edge.s0._0._0i.base.s + t942), 1, 64)]
              }
            }
          }
          allocate input_16[uint16 * 1920] in Stack
          allocate sobel_x_avg[uint16 * 1024] in Stack
          consume repeat_edge {
            let t946 = (output.s0.y.yi.yi*8)
            let t944 = (t915 + t946)
            for (output.s0.y.yi.yii, 0, 8) {
              let sobel_x_avg.s0.y.min_3 = ((select((0 < output.s0.y.yi.yii), 1, -1) + t944) + output.s0.y.yi.yii)
              let input_16.s0.y.loop_extent.s = ((select((0 < output.s0.y.yi.yii), 1, -1) + t946) + output.s0.y.yi.yii)
              produce input_16 {
                let t947 = ((input_16.s0.y.loop_extent.s*-1) + 17)
                for (input_16.s0.y, sobel_x_avg.s0.y.min_3, t947) {
                  allocate bounded_input[uint8 * 320] in Stack
                  produce bounded_input {
                    bounded_input[ramp(0, 1, 64)] = repeat_edge[ramp(((input_16.s0.y % 16)*320), 1, 64) aligned(320, 0)]
                    bounded_input[ramp(64, 1, 64)] = repeat_edge[ramp((((input_16.s0.y % 16)*320) + 64), 1, 64) aligned(320, 64)]
                    bounded_input[ramp(128, 1, 64)] = repeat_edge[ramp((((input_16.s0.y % 16)*320) + 128), 1, 64) aligned(320, 128)]
                    bounded_input[ramp(192, 1, 64)] = repeat_edge[ramp((((input_16.s0.y % 16)*320) + 192), 1, 64) aligned(320, 192)]
                    bounded_input[ramp(256, 1, 64)] = repeat_edge[ramp((((input_16.s0.y % 16)*320) + 256), 1, 64) aligned(320, 256)]
                  }
                  consume bounded_input {
                    input_16[ramp(((input_16.s0.y % 4)*480), 1, 64) aligned(480, 0)] = uint16x64(bounded_input[ramp(0, 1, 64)])
                    input_16[ramp((((input_16.s0.y % 4)*480) + 64), 1, 64) aligned(480, 64)] = uint16x64(bounded_input[ramp(64, 1, 64)])
                    input_16[ramp((((input_16.s0.y % 4)*480) + 128), 1, 64) aligned(480, 128)] = uint16x64(bounded_input[ramp(128, 1, 64)])
                    input_16[ramp((((input_16.s0.y % 4)*480) + 192), 1, 64) aligned(480, 192)] = uint16x64(bounded_input[ramp(192, 1, 64)])
                    input_16[ramp((((input_16.s0.y % 4)*480) + 256), 1, 64) aligned(480, 256)] = uint16x64(bounded_input[ramp(256, 1, 64)])
                    free bounded_input
                  }
                }
              }
              let sobel_x_avg.s0.y.loop_extent = select((0 < output.s0.y.yi.yii), 1, 3)
              produce sobel_x_avg {
                consume input_16 {
                  for (sobel_x_avg.s0.y, sobel_x_avg.s0.y.min_3, sobel_x_avg.s0.y.loop_extent) {
                    let t950 = (sobel_x_avg.s0.y % 4)
                    let t948 = (t950*15)
                    let t949 = (t950*8)
                    for (sobel_x_avg.s0.x.x, 0, 8) {
                      sobel_x_avg[ramp(((sobel_x_avg.s0.x.x + t949)*32), 1, 32) aligned(32, 0)] = ((input_16[ramp((((sobel_x_avg.s0.x.x + t948)*32) + 1), 1, 32) aligned(32, 1)]*x32((uint16)2)) + (input_16[ramp((((sobel_x_avg.s0.x.x + t948)*32) + 2), 1, 32) aligned(32, 2)] + input_16[ramp(((sobel_x_avg.s0.x.x + t948)*32), 1, 32) aligned(32, 0)]))
                    }
                  }
                }
              }
              allocate sobel_x[uint16 * 256] in Stack
              produce sobel_x {
                consume sobel_x_avg {
                  sobel_x[ramp(0, 1, 32)] = absd(sobel_x_avg[ramp(((((output.s0.y.yi.yii + t944) + 3) % 4)*256), 1, 32) aligned(256, 0)], sobel_x_avg[ramp(((((output.s0.y.yi.yii + t944) + 1) % 4)*256), 1, 32) aligned(256, 0)])
                  sobel_x[ramp(32, 1, 32)] = absd(sobel_x_avg[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*256) + 32), 1, 32) aligned(256, 32)], sobel_x_avg[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*256) + 32), 1, 32) aligned(256, 32)])
                  sobel_x[ramp(64, 1, 32)] = absd(sobel_x_avg[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*256) + 64), 1, 32) aligned(256, 64)], sobel_x_avg[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*256) + 64), 1, 32) aligned(256, 64)])
                  sobel_x[ramp(96, 1, 32)] = absd(sobel_x_avg[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*256) + 96), 1, 32) aligned(256, 96)], sobel_x_avg[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*256) + 96), 1, 32) aligned(256, 96)])
                  sobel_x[ramp(128, 1, 32)] = absd(sobel_x_avg[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*256) + 128), 1, 32) aligned(256, 128)], sobel_x_avg[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*256) + 128), 1, 32) aligned(256, 128)])
                  sobel_x[ramp(160, 1, 32)] = absd(sobel_x_avg[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*256) + 160), 1, 32) aligned(256, 160)], sobel_x_avg[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*256) + 160), 1, 32) aligned(256, 160)])
                  sobel_x[ramp(192, 1, 32)] = absd(sobel_x_avg[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*256) + 192), 1, 32) aligned(256, 192)], sobel_x_avg[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*256) + 192), 1, 32) aligned(256, 192)])
                  sobel_x[ramp(224, 1, 32)] = absd(sobel_x_avg[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*256) + 224), 1, 32) aligned(256, 224)], sobel_x_avg[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*256) + 224), 1, 32) aligned(256, 224)])
                }
              }
              consume sobel_x {
                consume input_16 {
                  allocate sobel_y_avg[uint16 * 288] in Stack
                  produce sobel_y_avg {
                    sobel_y_avg[ramp(0, 1, 32)] = ((input_16[ramp((((output.s0.y.yi.yii + t944) % 4)*480), 1, 32) aligned(480, 0)]*x32((uint16)2)) + (input_16[ramp(((((output.s0.y.yi.yii + t944) + 1) % 4)*480), 1, 32) aligned(480, 0)] + input_16[ramp(((((output.s0.y.yi.yii + t944) + 3) % 4)*480), 1, 32) aligned(480, 0)]))
                    sobel_y_avg[ramp(32, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 32), 1, 32) aligned(480, 32)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 32), 1, 32) aligned(480, 32)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 32), 1, 32) aligned(480, 32)]))
                    sobel_y_avg[ramp(64, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 64), 1, 32) aligned(480, 64)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 64), 1, 32) aligned(480, 64)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 64), 1, 32) aligned(480, 64)]))
                    sobel_y_avg[ramp(96, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 96), 1, 32) aligned(480, 96)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 96), 1, 32) aligned(480, 96)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 96), 1, 32) aligned(480, 96)]))
                    sobel_y_avg[ramp(128, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 128), 1, 32) aligned(480, 128)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 128), 1, 32) aligned(480, 128)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 128), 1, 32) aligned(480, 128)]))
                    sobel_y_avg[ramp(160, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 160), 1, 32) aligned(480, 160)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 160), 1, 32) aligned(480, 160)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 160), 1, 32) aligned(480, 160)]))
                    sobel_y_avg[ramp(192, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 192), 1, 32) aligned(480, 192)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 192), 1, 32) aligned(480, 192)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 192), 1, 32) aligned(480, 192)]))
                    sobel_y_avg[ramp(224, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 224), 1, 32) aligned(480, 224)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 224), 1, 32) aligned(480, 224)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 224), 1, 32) aligned(480, 224)]))
                    sobel_y_avg[ramp(256, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 256), 1, 32) aligned(480, 256)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 256), 1, 32) aligned(480, 256)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 256), 1, 32) aligned(480, 256)]))
                  }
                  allocate sobel_y[uint16 * 64] in Stack
                  produce sobel_y {
                    consume sobel_y_avg {
                      sobel_y[ramp(0, 1, 32)] = absd(sobel_y_avg[ramp(0, 1, 32)], sobel_y_avg[ramp(2, 1, 32)])
                      sobel_y[ramp(32, 1, 32)] = absd(sobel_y_avg[ramp(32, 1, 32)], sobel_y_avg[ramp(34, 1, 32)])
                      free sobel_y_avg
                    }
                  }
                  consume sobel_y {
                    output[ramp((((output.s0.y.yi.yii + t944)*output.stride.1) + t922), 1, 64)] = uint8x64(min((sobel_x[ramp(0, 1, 64)] + sobel_y[ramp(0, 1, 64)]), x64((uint16)255)))
                  }
                  free sobel_y
                  allocate sobel_y_avg[uint16 * 288] in Stack
                  produce sobel_y_avg {
                    sobel_y_avg[ramp(0, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 64), 1, 32) aligned(480, 64)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 64), 1, 32) aligned(480, 64)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 64), 1, 32) aligned(480, 64)]))
                    sobel_y_avg[ramp(32, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 96), 1, 32) aligned(480, 96)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 96), 1, 32) aligned(480, 96)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 96), 1, 32) aligned(480, 96)]))
                    sobel_y_avg[ramp(64, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 128), 1, 32) aligned(480, 128)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 128), 1, 32) aligned(480, 128)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 128), 1, 32) aligned(480, 128)]))
                    sobel_y_avg[ramp(96, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 160), 1, 32) aligned(480, 160)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 160), 1, 32) aligned(480, 160)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 160), 1, 32) aligned(480, 160)]))
                    sobel_y_avg[ramp(128, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 192), 1, 32) aligned(480, 192)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 192), 1, 32) aligned(480, 192)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 192), 1, 32) aligned(480, 192)]))
                    sobel_y_avg[ramp(160, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 224), 1, 32) aligned(480, 224)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 224), 1, 32) aligned(480, 224)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 224), 1, 32) aligned(480, 224)]))
                    sobel_y_avg[ramp(192, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 256), 1, 32) aligned(480, 256)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 256), 1, 32) aligned(480, 256)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 256), 1, 32) aligned(480, 256)]))
                    sobel_y_avg[ramp(224, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 288), 1, 32) aligned(480, 288)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 288), 1, 32) aligned(480, 288)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 288), 1, 32) aligned(480, 288)]))
                    sobel_y_avg[ramp(256, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 320), 1, 32) aligned(480, 320)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 320), 1, 32) aligned(480, 320)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 320), 1, 32) aligned(480, 320)]))
                  }
                  allocate sobel_y[uint16 * 64] in Stack
                  produce sobel_y {
                    consume sobel_y_avg {
                      sobel_y[ramp(0, 1, 32)] = absd(sobel_y_avg[ramp(0, 1, 32)], sobel_y_avg[ramp(2, 1, 32)])
                      sobel_y[ramp(32, 1, 32)] = absd(sobel_y_avg[ramp(32, 1, 32)], sobel_y_avg[ramp(34, 1, 32)])
                      free sobel_y_avg
                    }
                  }
                  consume sobel_y {
                    output[ramp((((output.s0.y.yi.yii + t944)*output.stride.1) + t923), 1, 64)] = uint8x64(min((sobel_x[ramp(64, 1, 64)] + sobel_y[ramp(0, 1, 64)]), x64((uint16)255)))
                  }
                  free sobel_y
                  allocate sobel_y_avg[uint16 * 288] in Stack
                  produce sobel_y_avg {
                    sobel_y_avg[ramp(0, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 128), 1, 32) aligned(480, 128)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 128), 1, 32) aligned(480, 128)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 128), 1, 32) aligned(480, 128)]))
                    sobel_y_avg[ramp(32, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 160), 1, 32) aligned(480, 160)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 160), 1, 32) aligned(480, 160)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 160), 1, 32) aligned(480, 160)]))
                    sobel_y_avg[ramp(64, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 192), 1, 32) aligned(480, 192)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 192), 1, 32) aligned(480, 192)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 192), 1, 32) aligned(480, 192)]))
                    sobel_y_avg[ramp(96, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 224), 1, 32) aligned(480, 224)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 224), 1, 32) aligned(480, 224)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 224), 1, 32) aligned(480, 224)]))
                    sobel_y_avg[ramp(128, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 256), 1, 32) aligned(480, 256)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 256), 1, 32) aligned(480, 256)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 256), 1, 32) aligned(480, 256)]))
                    sobel_y_avg[ramp(160, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 288), 1, 32) aligned(480, 288)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 288), 1, 32) aligned(480, 288)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 288), 1, 32) aligned(480, 288)]))
                    sobel_y_avg[ramp(192, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 320), 1, 32) aligned(480, 320)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 320), 1, 32) aligned(480, 320)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 320), 1, 32) aligned(480, 320)]))
                    sobel_y_avg[ramp(224, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 352), 1, 32) aligned(480, 352)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 352), 1, 32) aligned(480, 352)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 352), 1, 32) aligned(480, 352)]))
                    sobel_y_avg[ramp(256, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 384), 1, 32) aligned(480, 384)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 384), 1, 32) aligned(480, 384)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 384), 1, 32) aligned(480, 384)]))
                  }
                  allocate sobel_y[uint16 * 64] in Stack
                  produce sobel_y {
                    consume sobel_y_avg {
                      sobel_y[ramp(0, 1, 32)] = absd(sobel_y_avg[ramp(0, 1, 32)], sobel_y_avg[ramp(2, 1, 32)])
                      sobel_y[ramp(32, 1, 32)] = absd(sobel_y_avg[ramp(32, 1, 32)], sobel_y_avg[ramp(34, 1, 32)])
                      free sobel_y_avg
                    }
                  }
                  consume sobel_y {
                    output[ramp((((output.s0.y.yi.yii + t944)*output.stride.1) + t924), 1, 64)] = uint8x64(min((sobel_x[ramp(128, 1, 64)] + sobel_y[ramp(0, 1, 64)]), x64((uint16)255)))
                  }
                  free sobel_y
                  allocate sobel_y_avg[uint16 * 288] in Stack
                  produce sobel_y_avg {
                    sobel_y_avg[ramp(0, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 192), 1, 32) aligned(480, 192)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 192), 1, 32) aligned(480, 192)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 192), 1, 32) aligned(480, 192)]))
                    sobel_y_avg[ramp(32, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 224), 1, 32) aligned(480, 224)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 224), 1, 32) aligned(480, 224)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 224), 1, 32) aligned(480, 224)]))
                    sobel_y_avg[ramp(64, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 256), 1, 32) aligned(480, 256)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 256), 1, 32) aligned(480, 256)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 256), 1, 32) aligned(480, 256)]))
                    sobel_y_avg[ramp(96, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 288), 1, 32) aligned(480, 288)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 288), 1, 32) aligned(480, 288)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 288), 1, 32) aligned(480, 288)]))
                    sobel_y_avg[ramp(128, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 320), 1, 32) aligned(480, 320)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 320), 1, 32) aligned(480, 320)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 320), 1, 32) aligned(480, 320)]))
                    sobel_y_avg[ramp(160, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 352), 1, 32) aligned(480, 352)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 352), 1, 32) aligned(480, 352)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 352), 1, 32) aligned(480, 352)]))
                    sobel_y_avg[ramp(192, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 384), 1, 32) aligned(480, 384)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 384), 1, 32) aligned(480, 384)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 384), 1, 32) aligned(480, 384)]))
                    sobel_y_avg[ramp(224, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 416), 1, 32) aligned(480, 416)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 416), 1, 32) aligned(480, 416)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 416), 1, 32) aligned(480, 416)]))
                    sobel_y_avg[ramp(256, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t944) % 4)*480) + 448), 1, 32) aligned(480, 448)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t944) + 1) % 4)*480) + 448), 1, 32) aligned(480, 448)] + input_16[ramp((((((output.s0.y.yi.yii + t944) + 3) % 4)*480) + 448), 1, 32) aligned(480, 448)]))
                  }
                  allocate sobel_y[uint16 * 64] in Stack
                  produce sobel_y {
                    consume sobel_y_avg {
                      sobel_y[ramp(0, 1, 32)] = absd(sobel_y_avg[ramp(0, 1, 32)], sobel_y_avg[ramp(2, 1, 32)])
                      sobel_y[ramp(32, 1, 32)] = absd(sobel_y_avg[ramp(32, 1, 32)], sobel_y_avg[ramp(34, 1, 32)])
                      free sobel_y_avg
                    }
                  }
                  consume sobel_y {
                    output[ramp((((output.s0.y.yi.yii + t944)*output.stride.1) + t925), 1, 64)] = uint8x64(min((sobel_x[ramp(192, 1, 64)] + sobel_y[ramp(0, 1, 64)]), x64((uint16)255)))
                  }
                  free sobel_x
                  free sobel_y
                }
              }
            }
          }
          free input_16
          free sobel_x_avg
        }
        free repeat_edge
      }
      let t951 = (t889 - t876)
      let t952 = (output.min.1 + output.s0.y.yi.base.s)
      let t953 = (input.extent.1 + -1)
      for (output.s0.x.x, t876, t951) {
        let output.s0.x.xi.base.s = min((output.s0.x.x*256), t877)
        allocate repeat_edge[uint8 * 5120] in Stack
        let t958 = (output.s0.x.xi.base.s + t884)
        let t957 = (output.s0.x.xi.base.s + t883)
        let t956 = (output.s0.x.xi.base.s + t882)
        let t955 = (output.s0.x.xi.base.s + t881)
        let t954 = (output.min.0 + output.s0.x.xi.base.s)
        for (output.s0.y.yi.yi, 0, 2) {
          let repeat_edge.s0._1.min_2 = ((output.s0.y.yi.yi*8) + (select((0 < output.s0.y.yi.yi), 1, -1) + t952))
          let repeat_edge.s0._1.loop_extent.s = (select((0 < output.s0.y.yi.yi), -1, 1) - (output.s0.y.yi.yi*8))
          produce repeat_edge {
            let t959 = (repeat_edge.s0._1.loop_extent.s + 17)
            for (repeat_edge.s0._1, repeat_edge.s0._1.min_2, t959) {
              let t960 = (max(min(repeat_edge.s0._1, t953), 0)*input.stride.1)
              let t961 = (((repeat_edge.s0._1 % 16)*320) - t954)
              for (repeat_edge.s0._0._0, 0, 5) {
                let repeat_edge.s0._0._0i.base.s = (min((repeat_edge.s0._0._0*64), 194) + t954)
                repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t961), 1, 64)] = input[(max(min(ramp((repeat_edge.s0._0._0i.base.s + -1), 1, 64), x64(t880)), x64(0)) + x64(t960))]
              }
            }
          }
          allocate input_16[uint16 * 1920] in Stack
          allocate sobel_x_avg[uint16 * 1024] in Stack
          consume repeat_edge {
            let t964 = (output.s0.y.yi.yi*8)
            let t962 = (t952 + t964)
            for (output.s0.y.yi.yii, 0, 8) {
              let sobel_x_avg.s0.y.min_3 = ((select((0 < output.s0.y.yi.yii), 1, -1) + t962) + output.s0.y.yi.yii)
              let input_16.s0.y.loop_extent.s = ((select((0 < output.s0.y.yi.yii), 1, -1) + t964) + output.s0.y.yi.yii)
              produce input_16 {
                let t965 = ((input_16.s0.y.loop_extent.s*-1) + 17)
                for (input_16.s0.y, sobel_x_avg.s0.y.min_3, t965) {
                  allocate bounded_input[uint8 * 320] in Stack
                  produce bounded_input {
                    bounded_input[ramp(0, 1, 64)] = repeat_edge[ramp(((input_16.s0.y % 16)*320), 1, 64) aligned(320, 0)]
                    bounded_input[ramp(64, 1, 64)] = repeat_edge[ramp((((input_16.s0.y % 16)*320) + 64), 1, 64) aligned(320, 64)]
                    bounded_input[ramp(128, 1, 64)] = repeat_edge[ramp((((input_16.s0.y % 16)*320) + 128), 1, 64) aligned(320, 128)]
                    bounded_input[ramp(192, 1, 64)] = repeat_edge[ramp((((input_16.s0.y % 16)*320) + 192), 1, 64) aligned(320, 192)]
                    bounded_input[ramp(256, 1, 64)] = repeat_edge[ramp((((input_16.s0.y % 16)*320) + 256), 1, 64) aligned(320, 256)]
                  }
                  consume bounded_input {
                    input_16[ramp(((input_16.s0.y % 4)*480), 1, 64) aligned(480, 0)] = uint16x64(bounded_input[ramp(0, 1, 64)])
                    input_16[ramp((((input_16.s0.y % 4)*480) + 64), 1, 64) aligned(480, 64)] = uint16x64(bounded_input[ramp(64, 1, 64)])
                    input_16[ramp((((input_16.s0.y % 4)*480) + 128), 1, 64) aligned(480, 128)] = uint16x64(bounded_input[ramp(128, 1, 64)])
                    input_16[ramp((((input_16.s0.y % 4)*480) + 192), 1, 64) aligned(480, 192)] = uint16x64(bounded_input[ramp(192, 1, 64)])
                    input_16[ramp((((input_16.s0.y % 4)*480) + 256), 1, 64) aligned(480, 256)] = uint16x64(bounded_input[ramp(256, 1, 64)])
                    free bounded_input
                  }
                }
              }
              let sobel_x_avg.s0.y.loop_extent = select((0 < output.s0.y.yi.yii), 1, 3)
              produce sobel_x_avg {
                consume input_16 {
                  for (sobel_x_avg.s0.y, sobel_x_avg.s0.y.min_3, sobel_x_avg.s0.y.loop_extent) {
                    let t968 = (sobel_x_avg.s0.y % 4)
                    let t966 = (t968*15)
                    let t967 = (t968*8)
                    for (sobel_x_avg.s0.x.x, 0, 8) {
                      sobel_x_avg[ramp(((sobel_x_avg.s0.x.x + t967)*32), 1, 32) aligned(32, 0)] = ((input_16[ramp((((sobel_x_avg.s0.x.x + t966)*32) + 1), 1, 32) aligned(32, 1)]*x32((uint16)2)) + (input_16[ramp((((sobel_x_avg.s0.x.x + t966)*32) + 2), 1, 32) aligned(32, 2)] + input_16[ramp(((sobel_x_avg.s0.x.x + t966)*32), 1, 32) aligned(32, 0)]))
                    }
                  }
                }
              }
              allocate sobel_x[uint16 * 256] in Stack
              produce sobel_x {
                consume sobel_x_avg {
                  sobel_x[ramp(0, 1, 32)] = absd(sobel_x_avg[ramp(((((output.s0.y.yi.yii + t962) + 3) % 4)*256), 1, 32) aligned(256, 0)], sobel_x_avg[ramp(((((output.s0.y.yi.yii + t962) + 1) % 4)*256), 1, 32) aligned(256, 0)])
                  sobel_x[ramp(32, 1, 32)] = absd(sobel_x_avg[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*256) + 32), 1, 32) aligned(256, 32)], sobel_x_avg[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*256) + 32), 1, 32) aligned(256, 32)])
                  sobel_x[ramp(64, 1, 32)] = absd(sobel_x_avg[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*256) + 64), 1, 32) aligned(256, 64)], sobel_x_avg[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*256) + 64), 1, 32) aligned(256, 64)])
                  sobel_x[ramp(96, 1, 32)] = absd(sobel_x_avg[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*256) + 96), 1, 32) aligned(256, 96)], sobel_x_avg[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*256) + 96), 1, 32) aligned(256, 96)])
                  sobel_x[ramp(128, 1, 32)] = absd(sobel_x_avg[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*256) + 128), 1, 32) aligned(256, 128)], sobel_x_avg[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*256) + 128), 1, 32) aligned(256, 128)])
                  sobel_x[ramp(160, 1, 32)] = absd(sobel_x_avg[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*256) + 160), 1, 32) aligned(256, 160)], sobel_x_avg[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*256) + 160), 1, 32) aligned(256, 160)])
                  sobel_x[ramp(192, 1, 32)] = absd(sobel_x_avg[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*256) + 192), 1, 32) aligned(256, 192)], sobel_x_avg[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*256) + 192), 1, 32) aligned(256, 192)])
                  sobel_x[ramp(224, 1, 32)] = absd(sobel_x_avg[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*256) + 224), 1, 32) aligned(256, 224)], sobel_x_avg[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*256) + 224), 1, 32) aligned(256, 224)])
                }
              }
              consume sobel_x {
                consume input_16 {
                  allocate sobel_y_avg[uint16 * 288] in Stack
                  produce sobel_y_avg {
                    sobel_y_avg[ramp(0, 1, 32)] = ((input_16[ramp((((output.s0.y.yi.yii + t962) % 4)*480), 1, 32) aligned(480, 0)]*x32((uint16)2)) + (input_16[ramp(((((output.s0.y.yi.yii + t962) + 1) % 4)*480), 1, 32) aligned(480, 0)] + input_16[ramp(((((output.s0.y.yi.yii + t962) + 3) % 4)*480), 1, 32) aligned(480, 0)]))
                    sobel_y_avg[ramp(32, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 32), 1, 32) aligned(480, 32)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 32), 1, 32) aligned(480, 32)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 32), 1, 32) aligned(480, 32)]))
                    sobel_y_avg[ramp(64, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 64), 1, 32) aligned(480, 64)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 64), 1, 32) aligned(480, 64)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 64), 1, 32) aligned(480, 64)]))
                    sobel_y_avg[ramp(96, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 96), 1, 32) aligned(480, 96)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 96), 1, 32) aligned(480, 96)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 96), 1, 32) aligned(480, 96)]))
                    sobel_y_avg[ramp(128, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 128), 1, 32) aligned(480, 128)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 128), 1, 32) aligned(480, 128)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 128), 1, 32) aligned(480, 128)]))
                    sobel_y_avg[ramp(160, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 160), 1, 32) aligned(480, 160)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 160), 1, 32) aligned(480, 160)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 160), 1, 32) aligned(480, 160)]))
                    sobel_y_avg[ramp(192, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 192), 1, 32) aligned(480, 192)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 192), 1, 32) aligned(480, 192)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 192), 1, 32) aligned(480, 192)]))
                    sobel_y_avg[ramp(224, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 224), 1, 32) aligned(480, 224)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 224), 1, 32) aligned(480, 224)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 224), 1, 32) aligned(480, 224)]))
                    sobel_y_avg[ramp(256, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 256), 1, 32) aligned(480, 256)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 256), 1, 32) aligned(480, 256)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 256), 1, 32) aligned(480, 256)]))
                  }
                  allocate sobel_y[uint16 * 64] in Stack
                  produce sobel_y {
                    consume sobel_y_avg {
                      sobel_y[ramp(0, 1, 32)] = absd(sobel_y_avg[ramp(0, 1, 32)], sobel_y_avg[ramp(2, 1, 32)])
                      sobel_y[ramp(32, 1, 32)] = absd(sobel_y_avg[ramp(32, 1, 32)], sobel_y_avg[ramp(34, 1, 32)])
                      free sobel_y_avg
                    }
                  }
                  consume sobel_y {
                    output[ramp((((output.s0.y.yi.yii + t962)*output.stride.1) + t955), 1, 64)] = uint8x64(min((sobel_x[ramp(0, 1, 64)] + sobel_y[ramp(0, 1, 64)]), x64((uint16)255)))
                  }
                  free sobel_y
                  allocate sobel_y_avg[uint16 * 288] in Stack
                  produce sobel_y_avg {
                    sobel_y_avg[ramp(0, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 64), 1, 32) aligned(480, 64)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 64), 1, 32) aligned(480, 64)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 64), 1, 32) aligned(480, 64)]))
                    sobel_y_avg[ramp(32, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 96), 1, 32) aligned(480, 96)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 96), 1, 32) aligned(480, 96)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 96), 1, 32) aligned(480, 96)]))
                    sobel_y_avg[ramp(64, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 128), 1, 32) aligned(480, 128)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 128), 1, 32) aligned(480, 128)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 128), 1, 32) aligned(480, 128)]))
                    sobel_y_avg[ramp(96, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 160), 1, 32) aligned(480, 160)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 160), 1, 32) aligned(480, 160)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 160), 1, 32) aligned(480, 160)]))
                    sobel_y_avg[ramp(128, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 192), 1, 32) aligned(480, 192)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 192), 1, 32) aligned(480, 192)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 192), 1, 32) aligned(480, 192)]))
                    sobel_y_avg[ramp(160, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 224), 1, 32) aligned(480, 224)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 224), 1, 32) aligned(480, 224)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 224), 1, 32) aligned(480, 224)]))
                    sobel_y_avg[ramp(192, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 256), 1, 32) aligned(480, 256)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 256), 1, 32) aligned(480, 256)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 256), 1, 32) aligned(480, 256)]))
                    sobel_y_avg[ramp(224, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 288), 1, 32) aligned(480, 288)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 288), 1, 32) aligned(480, 288)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 288), 1, 32) aligned(480, 288)]))
                    sobel_y_avg[ramp(256, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 320), 1, 32) aligned(480, 320)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 320), 1, 32) aligned(480, 320)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 320), 1, 32) aligned(480, 320)]))
                  }
                  allocate sobel_y[uint16 * 64] in Stack
                  produce sobel_y {
                    consume sobel_y_avg {
                      sobel_y[ramp(0, 1, 32)] = absd(sobel_y_avg[ramp(0, 1, 32)], sobel_y_avg[ramp(2, 1, 32)])
                      sobel_y[ramp(32, 1, 32)] = absd(sobel_y_avg[ramp(32, 1, 32)], sobel_y_avg[ramp(34, 1, 32)])
                      free sobel_y_avg
                    }
                  }
                  consume sobel_y {
                    output[ramp((((output.s0.y.yi.yii + t962)*output.stride.1) + t956), 1, 64)] = uint8x64(min((sobel_x[ramp(64, 1, 64)] + sobel_y[ramp(0, 1, 64)]), x64((uint16)255)))
                  }
                  free sobel_y
                  allocate sobel_y_avg[uint16 * 288] in Stack
                  produce sobel_y_avg {
                    sobel_y_avg[ramp(0, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 128), 1, 32) aligned(480, 128)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 128), 1, 32) aligned(480, 128)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 128), 1, 32) aligned(480, 128)]))
                    sobel_y_avg[ramp(32, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 160), 1, 32) aligned(480, 160)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 160), 1, 32) aligned(480, 160)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 160), 1, 32) aligned(480, 160)]))
                    sobel_y_avg[ramp(64, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 192), 1, 32) aligned(480, 192)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 192), 1, 32) aligned(480, 192)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 192), 1, 32) aligned(480, 192)]))
                    sobel_y_avg[ramp(96, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 224), 1, 32) aligned(480, 224)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 224), 1, 32) aligned(480, 224)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 224), 1, 32) aligned(480, 224)]))
                    sobel_y_avg[ramp(128, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 256), 1, 32) aligned(480, 256)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 256), 1, 32) aligned(480, 256)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 256), 1, 32) aligned(480, 256)]))
                    sobel_y_avg[ramp(160, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 288), 1, 32) aligned(480, 288)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 288), 1, 32) aligned(480, 288)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 288), 1, 32) aligned(480, 288)]))
                    sobel_y_avg[ramp(192, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 320), 1, 32) aligned(480, 320)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 320), 1, 32) aligned(480, 320)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 320), 1, 32) aligned(480, 320)]))
                    sobel_y_avg[ramp(224, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 352), 1, 32) aligned(480, 352)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 352), 1, 32) aligned(480, 352)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 352), 1, 32) aligned(480, 352)]))
                    sobel_y_avg[ramp(256, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 384), 1, 32) aligned(480, 384)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 384), 1, 32) aligned(480, 384)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 384), 1, 32) aligned(480, 384)]))
                  }
                  allocate sobel_y[uint16 * 64] in Stack
                  produce sobel_y {
                    consume sobel_y_avg {
                      sobel_y[ramp(0, 1, 32)] = absd(sobel_y_avg[ramp(0, 1, 32)], sobel_y_avg[ramp(2, 1, 32)])
                      sobel_y[ramp(32, 1, 32)] = absd(sobel_y_avg[ramp(32, 1, 32)], sobel_y_avg[ramp(34, 1, 32)])
                      free sobel_y_avg
                    }
                  }
                  consume sobel_y {
                    output[ramp((((output.s0.y.yi.yii + t962)*output.stride.1) + t957), 1, 64)] = uint8x64(min((sobel_x[ramp(128, 1, 64)] + sobel_y[ramp(0, 1, 64)]), x64((uint16)255)))
                  }
                  free sobel_y
                  allocate sobel_y_avg[uint16 * 288] in Stack
                  produce sobel_y_avg {
                    sobel_y_avg[ramp(0, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 192), 1, 32) aligned(480, 192)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 192), 1, 32) aligned(480, 192)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 192), 1, 32) aligned(480, 192)]))
                    sobel_y_avg[ramp(32, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 224), 1, 32) aligned(480, 224)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 224), 1, 32) aligned(480, 224)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 224), 1, 32) aligned(480, 224)]))
                    sobel_y_avg[ramp(64, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 256), 1, 32) aligned(480, 256)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 256), 1, 32) aligned(480, 256)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 256), 1, 32) aligned(480, 256)]))
                    sobel_y_avg[ramp(96, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 288), 1, 32) aligned(480, 288)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 288), 1, 32) aligned(480, 288)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 288), 1, 32) aligned(480, 288)]))
                    sobel_y_avg[ramp(128, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 320), 1, 32) aligned(480, 320)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 320), 1, 32) aligned(480, 320)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 320), 1, 32) aligned(480, 320)]))
                    sobel_y_avg[ramp(160, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 352), 1, 32) aligned(480, 352)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 352), 1, 32) aligned(480, 352)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 352), 1, 32) aligned(480, 352)]))
                    sobel_y_avg[ramp(192, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 384), 1, 32) aligned(480, 384)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 384), 1, 32) aligned(480, 384)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 384), 1, 32) aligned(480, 384)]))
                    sobel_y_avg[ramp(224, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 416), 1, 32) aligned(480, 416)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 416), 1, 32) aligned(480, 416)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 416), 1, 32) aligned(480, 416)]))
                    sobel_y_avg[ramp(256, 1, 32)] = ((input_16[ramp(((((output.s0.y.yi.yii + t962) % 4)*480) + 448), 1, 32) aligned(480, 448)]*x32((uint16)2)) + (input_16[ramp((((((output.s0.y.yi.yii + t962) + 1) % 4)*480) + 448), 1, 32) aligned(480, 448)] + input_16[ramp((((((output.s0.y.yi.yii + t962) + 3) % 4)*480) + 448), 1, 32) aligned(480, 448)]))
                  }
                  allocate sobel_y[uint16 * 64] in Stack
                  produce sobel_y {
                    consume sobel_y_avg {
                      sobel_y[ramp(0, 1, 32)] = absd(sobel_y_avg[ramp(0, 1, 32)], sobel_y_avg[ramp(2, 1, 32)])
                      sobel_y[ramp(32, 1, 32)] = absd(sobel_y_avg[ramp(32, 1, 32)], sobel_y_avg[ramp(34, 1, 32)])
                      free sobel_y_avg
                    }
                  }
                  consume sobel_y {
                    output[ramp((((output.s0.y.yi.yii + t962)*output.stride.1) + t958), 1, 64)] = uint8x64(min((sobel_x[ramp(192, 1, 64)] + sobel_y[ramp(0, 1, 64)]), x64((uint16)255)))
                  }
                  free sobel_x
                  free sobel_y
                }
              }
            }
          }
          free input_16
          free sobel_x_avg
        }
        free repeat_edge
      }
    }
  }
}
}


