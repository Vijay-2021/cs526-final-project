// --- BEGIN machine-generated schedule
Func processed = get_pipeline().get_func(37);
Func sharpened = get_pipeline().get_func(36);
Func sharpen_strength_x32 = get_pipeline().get_func(35);
Func mask = get_pipeline().get_func(34);
Func unsharp = get_pipeline().get_func(33);
Func unsharp_y = get_pipeline().get_func(32);
Func f28 = get_pipeline().get_func(31);
Func f27 = get_pipeline().get_func(30);
Func output = get_pipeline().get_func(29);
Func f25 = get_pipeline().get_func(28);
Func f24 = get_pipeline().get_func(27);
Func f8 = get_pipeline().get_func(26);
Func f6 = get_pipeline().get_func(25);
Func f23 = get_pipeline().get_func(24);
Func f10 = get_pipeline().get_func(23);
Func f5 = get_pipeline().get_func(22);
Func f22 = get_pipeline().get_func(21);
Func f21 = get_pipeline().get_func(20);
Func f20 = get_pipeline().get_func(19);
Func f19 = get_pipeline().get_func(18);
Func f18 = get_pipeline().get_func(17);
Func f9 = get_pipeline().get_func(16);
Func f17 = get_pipeline().get_func(15);
Func f12 = get_pipeline().get_func(14);
Func f13 = get_pipeline().get_func(13);
Func f11 = get_pipeline().get_func(12);
Func f7 = get_pipeline().get_func(11);
Func f3 = get_pipeline().get_func(10);
Func f4 = get_pipeline().get_func(9);
Func f2 = get_pipeline().get_func(8);
Func deinterleaved = get_pipeline().get_func(7);
Func f1 = get_pipeline().get_func(6);
Func f0 = get_pipeline().get_func(5);
Func f26 = get_pipeline().get_func(3);
Func curve = get_pipeline().get_func(0);
Var v0(processed.get_schedule().dims()[0].var), v0i("v0i"), v0ii("v0ii"), v0iii("v0iii"), v1(processed.get_schedule().dims()[1].var), v1i("v1i"), v1ii("v1ii"), v1iii("v1iii"), v2(processed.get_schedule().dims()[2].var);
processed
    .split(v0, v0, v0i, 640, TailStrategy::ShiftInwards)
    .split(v1, v1, v1i, 30, TailStrategy::ShiftInwards)
    .split(v1i, v1i, v1ii, 15, TailStrategy::ShiftInwards)
    .split(v0i, v0i, v0ii, 320, TailStrategy::ShiftInwards)
    .split(v1ii, v1ii, v1iii, 2, TailStrategy::ShiftInwards)
    .split(v0ii, v0ii, v0iii, 64, TailStrategy::ShiftInwards)
    .unroll(v0ii)
    .unroll(v1iii)
    .vectorize(v0iii)
    .compute_root()
    .reorder(v0iii, v0ii, v1iii, v1ii, v0i, v2, v1i, v0, v1)
    .fuse(v0, v1, v0)
    .parallel(v0);
sharpened
    .store_in(MemoryType::Stack)
    .split(v0, v0, v0i, 64, TailStrategy::RoundUp)
    .unroll(v0)
    .unroll(v1)
    .vectorize(v0i)
    .compute_at(processed, v1ii)
    .reorder(v0i, v0, v1, v2);
sharpen_strength_x32
    .compute_root();
unsharp_y
    .store_in(MemoryType::Stack)
    .split(v0, v0, v0i, 64, TailStrategy::RoundUp)
    .unroll(v0)
    .unroll(v1)
    .vectorize(v0i)
    .compute_at(processed, v1ii)
    .store_at(processed, v0i)
    .reorder(v0i, v0, v1, v2);
f28
    .store_in(MemoryType::Stack)
    .split(v1, v1, v1i, 6, TailStrategy::RoundUp)
    .split(v1i, v1i, v1ii, 2, TailStrategy::RoundUp)
    .split(v0, v0, v0i, 64, TailStrategy::RoundUp)
    .unroll(v1ii)
    .unroll(v2)
    .vectorize(v0i)
    .compute_at(processed, v1i)
    .reorder(v0i, v1ii, v2, v0, v1i, v1);
output
    .store_in(MemoryType::Stack)
    .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
    .unroll(v0)
    .unroll(v1)
    .unroll(v2)
    .vectorize(v0i)
    .compute_at(f28, v0)
    .store_at(f28, v1i)
    .reorder(v0i, v0, v1, v2);
f8
    .store_in(MemoryType::Stack)
    .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
    .vectorize(v0i)
    .compute_at(f28, v1i)
    .store_at(f28, v1)
    .reorder(v0i, v0, v1);
f6
    .store_in(MemoryType::Stack)
    .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
    .vectorize(v0i)
    .compute_at(f28, v1i)
    .store_at(f28, v1)
    .reorder(v0i, v0, v1);
f23
    .store_in(MemoryType::Stack)
    .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
    .vectorize(v0i)
    .compute_at(f28, v1)
    .store_at(processed, v1i)
    .reorder(v0i, v0, v1);
f10
    .store_in(MemoryType::Stack)
    .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
    .vectorize(v0i)
    .compute_at(f28, v1)
    .store_at(processed, v1i)
    .reorder(v0i, v0, v1);
f5
    .store_in(MemoryType::Stack)
    .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
    .vectorize(v0i)
    .compute_at(f28, v1)
    .store_at(processed, v1i)
    .reorder(v0i, v0, v1);
f20
    .store_in(MemoryType::Stack)
    .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
    .vectorize(v0i)
    .compute_at(f28, v1)
    .store_at(processed, v1i)
    .reorder(v0i, v0, v1);
f9
    .store_in(MemoryType::Stack)
    .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
    .vectorize(v0i)
    .compute_at(f28, v1)
    .store_at(processed, v1i)
    .reorder(v0i, v0, v1);
f12
    .store_in(MemoryType::Stack)
    .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
    .vectorize(v0i)
    .compute_at(f28, v1)
    .store_at(processed, v1i)
    .reorder(v0i, v0, v1);
f13
    .store_in(MemoryType::Stack)
    .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
    .vectorize(v0i)
    .compute_at(f28, v1)
    .store_at(processed, v1i)
    .reorder(v0i, v0, v1);
f11
    .store_in(MemoryType::Stack)
    .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
    .vectorize(v0i)
    .compute_at(processed, v1i)
    .store_at(processed, v0)
    .reorder(v0i, v0, v1);
f7
    .store_in(MemoryType::Stack)
    .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
    .vectorize(v0i)
    .compute_at(processed, v1i)
    .store_at(processed, v0)
    .reorder(v0i, v0, v1);
f3
    .store_in(MemoryType::Stack)
    .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
    .vectorize(v0i)
    .compute_at(processed, v1i)
    .reorder(v0i, v0, v1);
f4
    .store_in(MemoryType::Stack)
    .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
    .vectorize(v0i)
    .compute_at(processed, v1i)
    .reorder(v0i, v0, v1);
f2
    .store_in(MemoryType::Stack)
    .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
    .vectorize(v0i)
    .compute_at(processed, v1i)
    .store_at(processed, v0)
    .reorder(v0i, v0, v1);
deinterleaved
    .store_in(MemoryType::Stack)
    .split(v0, v0, v0i, 96, TailStrategy::ShiftInwards)
    .split(v0i, v0i, v0ii, 32, TailStrategy::ShiftInwards)
    .unroll(v0i)
    .unroll(v2)
    .vectorize(v0ii)
    .compute_at(processed, v1i)
    .store_at(processed, v0)
    .reorder(v0ii, v0i, v2, v1, v0);
f1
    .store_in(MemoryType::Stack)
    .split(v0, v0, v0i, 32, TailStrategy::RoundUp)
    .unroll(v0)
    .unroll(v1)
    .vectorize(v0i)
    .compute_at(deinterleaved, v1)
    .reorder(v0i, v0, v1);
f0
    .store_in(MemoryType::Stack)
    .split(v0, v0, v0i, 32, TailStrategy::ShiftInwards)
    .vectorize(v0i)
    .compute_at(deinterleaved, v1)
    .store_at(deinterleaved, v0)
    .reorder(v0i, v0, v1);
f26
    .split(v0, v0, v0i, 32, TailStrategy::GuardWithIf)
    .vectorize(v0i)
    .compute_root()
    .reorder(v0i, v0, v1)
    .parallel(v1);
curve
    .split(v0, v0, v0i, 64, TailStrategy::RoundUp)
    .vectorize(v0i)
    .compute_root()
    .reorder(v0i, v0)
    .parallel(v0);
// --- END machine-generated schedule
