module name=box_blur_batch_01_sample_07, target=x86-64-linux-avx-avx2-avx512-avx512_skylake-disable_llvm_loop_unroll-disable_llvm_loop_vectorize-f16c-fma-sse41
external_plus_metadata func box_blur_batch_01_sample_07 (input, blur_y) {
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
assert((reinterpret(uint64, blur_y.buffer) != (uint64)0), halide_error_buffer_argument_is_null("blur_y"))
let blur_y = _halide_buffer_get_host(blur_y.buffer)
let blur_y.type = _halide_buffer_get_type(blur_y.buffer)
let blur_y.dimensions = _halide_buffer_get_dimensions(blur_y.buffer)
let blur_y.min.0 = _halide_buffer_get_min(blur_y.buffer, 0)
let blur_y.extent.0 = _halide_buffer_get_extent(blur_y.buffer, 0)
let blur_y.stride.0 = _halide_buffer_get_stride(blur_y.buffer, 0)
let blur_y.min.1 = _halide_buffer_get_min(blur_y.buffer, 1)
let blur_y.extent.1 = _halide_buffer_get_extent(blur_y.buffer, 1)
let blur_y.stride.1 = _halide_buffer_get_stride(blur_y.buffer, 1)
let input = _halide_buffer_get_host(input.buffer)
let input.type = _halide_buffer_get_type(input.buffer)
let input.dimensions = _halide_buffer_get_dimensions(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let blur_y.extent.0.required.s = (min((((blur_y.extent.0 + -1)/64)*64), (blur_y.extent.0 + -64)) - min(blur_y.extent.0, 64))
let blur_y.extent.1.required.s = (min((((blur_y.extent.1 + -1)/76)*76), (blur_y.extent.1 + -76)) - min(blur_y.extent.1, 76))
let input.extent.0.required = (max(min(((min((((blur_y.extent.0 + 1)/32)*32), (blur_y.extent.0 + -30)) + blur_y.min.0) + 32), (input.extent.0 + input.min.0)), (input.min.0 + 1)) - max((min((min(blur_y.extent.0, 30) + blur_y.min.0), ((input.extent.0 + input.min.0) + 29)) + -30), input.min.0))
let input.min.0.required = max((min((min(blur_y.extent.0, 30) + blur_y.min.0), ((input.extent.0 + input.min.0) + 29)) + -30), input.min.0)
let input.extent.1.required = (max(min(((blur_y.extent.1 + blur_y.min.1) + 2), (input.extent.1 + input.min.1)), (input.min.1 + 1)) - max(min(((input.extent.1 + input.min.1) + -1), blur_y.min.1), input.min.1))
let input.min.1.required = max(min(((input.extent.1 + input.min.1) + -1), blur_y.min.1), input.min.1)
if (_halide_buffer_is_bounds_query(blur_y.buffer)) {
  _halide_buffer_init(blur_y.buffer, _halide_buffer_get_shape(blur_y.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 16, 2, make_struct((halide_dimension_t *), ((min(blur_y.extent.0, 64) + blur_y.min.0) + -64), (blur_y.extent.0.required.s + 128), 1, 0, ((min(blur_y.extent.1, 76) + blur_y.min.1) + -76), (blur_y.extent.1.required.s + 152), (blur_y.extent.0.required.s + 128), 0), (uint64)0)
}
if (_halide_buffer_is_bounds_query(input.buffer)) {
  _halide_buffer_init(input.buffer, _halide_buffer_get_shape(input.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 1, 16, 2, make_struct((halide_dimension_t *), input.min.0.required, input.extent.0.required, 1, 0, input.min.1.required, input.extent.1.required, input.extent.0.required, 0), (uint64)0)
}
if (!(_halide_buffer_is_bounds_query(blur_y.buffer) || _halide_buffer_is_bounds_query(input.buffer))) {
  assert((blur_y.type == (uint32)69633), halide_error_bad_type("Output buffer blur_y", blur_y.type, (uint32)69633))
  assert((blur_y.dimensions == 2), halide_error_bad_dimensions("Output buffer blur_y", blur_y.dimensions, 2))
  assert((input.type == (uint32)69633), halide_error_bad_type("Input buffer input", input.type, (uint32)69633))
  assert((input.dimensions == 2), halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
  assert(((64 <= blur_y.extent.0) && ((((min(blur_y.extent.0, 64) + blur_y.min.0) + blur_y.extent.0.required.s) + 64) <= (blur_y.extent.0 + blur_y.min.0))), halide_error_access_out_of_bounds("Output buffer blur_y", 0, ((min(blur_y.extent.0, 64) + blur_y.min.0) + -64), (((min(blur_y.extent.0, 64) + blur_y.min.0) + blur_y.extent.0.required.s) + 63), blur_y.min.0, ((blur_y.extent.0 + blur_y.min.0) + -1)))
  assert(((76 <= blur_y.extent.1) && ((((min(blur_y.extent.1, 76) + blur_y.min.1) + blur_y.extent.1.required.s) + 76) <= (blur_y.extent.1 + blur_y.min.1))), halide_error_access_out_of_bounds("Output buffer blur_y", 1, ((min(blur_y.extent.1, 76) + blur_y.min.1) + -76), (((min(blur_y.extent.1, 76) + blur_y.min.1) + blur_y.extent.1.required.s) + 75), blur_y.min.1, ((blur_y.extent.1 + blur_y.min.1) + -1)))
  assert(((input.min.0 <= input.min.0.required) && ((input.extent.0.required + input.min.0.required) <= (input.extent.0 + input.min.0))), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, ((input.extent.0.required + input.min.0.required) + -1), input.min.0, ((input.extent.0 + input.min.0) + -1)))
  assert((0 <= input.extent.0), halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
  assert(((input.min.1 <= input.min.1.required) && ((input.extent.1.required + input.min.1.required) <= (input.extent.1 + input.min.1))), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, ((input.extent.1.required + input.min.1.required) + -1), input.min.1, ((input.extent.1 + input.min.1) + -1)))
  assert((0 <= input.extent.1), halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
  assert((blur_y.stride.0 == 1), halide_error_constraint_violated("blur_y.stride.0", blur_y.stride.0, "1", 1))
  assert((input.stride.0 == 1), halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
  let blur_y.total_extent.1 = (int64(blur_y.extent.1)*int64(blur_y.extent.0))
  let input.total_extent.1 = (int64(input.extent.1)*int64(input.extent.0))
  assert((abs(int64(blur_y.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("blur_y", abs(int64(blur_y.extent.0)), (uint64)2147483647))
  assert((abs((int64(blur_y.extent.1)*int64(blur_y.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("blur_y", abs((int64(blur_y.extent.1)*int64(blur_y.stride.1))), (uint64)2147483647))
  assert((blur_y.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("blur_y", blur_y.total_extent.1, (int64)2147483647))
  assert((abs(int64(input.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs(int64(input.extent.0)), (uint64)2147483647))
  assert((abs((int64(input.extent.1)*int64(input.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs((int64(input.extent.1)*int64(input.stride.1))), (uint64)2147483647))
  assert((input.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
  assert((blur_y != reinterpret((void *), (uint64)0)), halide_error_host_is_null("Output buffer blur_y"))
  assert((input != reinterpret((void *), (uint64)0)), halide_error_host_is_null("Input buffer input"))
  produce blur_y {
    let t420 = (input.extent.1 + input.min.1)
    let t421 = (input.extent.0 + input.min.0)
    let t422 = (blur_y.min.1*blur_y.stride.1)
    let t423 = (((blur_y.extent.0 + blur_y.min.0) - t422) - blur_y.min.0)
    let t424 = (input.min.1*input.stride.1)
    let t425 = (blur_y.extent.0 + 33)
    let t426 = (t425/32)
    let t427 = min(max((((input.min.0 - blur_y.min.0) + 31)/32), 0), t426)
    let t428 = (t421 - blur_y.min.0)
    let t405 = (0 < (blur_y.extent.0 % 64))
    let t396 = max((min(min((min((t428 + 29), blur_y.extent.0) + 2), t428), t425)/32), t427)
    let t385 = ((blur_y.extent.1 + 75)/76)
    let t413 = ((blur_y.extent.0 + 63)/64)
    let t398 = (blur_y.extent.0/64)
    let t397 = ((blur_y.min.0 - t424) - input.min.0)
    let t404 = (32 - t422)
    let t403 = (0 - t422)
    let t393 = (input.min.0 + t424)
    let t412 = (t423 + -32)
    let t411 = (t423 + -64)
    let t394 = (t421 + -1)
    let t386 = (blur_y.extent.1 + -76)
    let t387 = (blur_y.extent.0 + 2)
    let t391 = (blur_y.extent.0 + -30)
    let t410 = (blur_y.extent.0 + -31)
    let t409 = (blur_y.extent.0 + -32)
    let t406 = (blur_y.extent.0 + -62)
    let t408 = (blur_y.extent.0 + -63)
    let t407 = (blur_y.extent.0 + -64)
    parallel (blur_y.s0.y.y, 0, t385) {
      let blur_y.s0.y.yi.base.s = min((blur_y.s0.y.y*76), t386)
      let t445 = (blur_y.min.1 + blur_y.s0.y.yi.base.s)
      let t431 = (min((blur_y.s0.y.y*76), t386) + blur_y.min.1)
      for (blur_y.s0.y.yi.yi, 0, 2) {
        allocate repeat_edge[uint16 * t387 * 8]
        let t460 = (blur_y.s0.y.yi.yi*38)
        let t461 = (t445 + t460)
        let t448 = (t431 + t460)
        for (blur_y.s0.y.yi.yii.yii, 0, 9) {
          let repeat_edge.s0._1.min_2 = select((0 < blur_y.s0.y.yi.yii.yii), (((blur_y.s0.y.yi.yii.yii*4) + t461) + 2), ((blur_y.s0.y.yi.yii.yii*4) + t461))
          let repeat_edge.s0._1.loop_extent.s.s = select((0 < blur_y.s0.y.yi.yii.yii), -2, 0)
          produce repeat_edge {
            let repeat_edge.s0._1.prologue = min(max(input.min.1, repeat_edge.s0._1.min_2), ((repeat_edge.s0._1.loop_extent.s.s + repeat_edge.s0._1.min_2) + 6))
            let repeat_edge.s0._1.epilogue = min(max(max(input.min.1, repeat_edge.s0._1.min_2), t420), ((repeat_edge.s0._1.loop_extent.s.s + repeat_edge.s0._1.min_2) + 6))
            let t462 = (repeat_edge.s0._1.prologue - repeat_edge.s0._1.min_2)
            let t463 = (t420 + -1)
            for (repeat_edge.s0._1, repeat_edge.s0._1.min_2, t462) {
              let t464 = (max(min(repeat_edge.s0._1, t463), input.min.1)*input.stride.1)
              let t465 = ((repeat_edge.s0._1 % 8)*t387)
              for (repeat_edge.s0._0._0, 0, t426) {
                let repeat_edge.s0._0._0i.base.s = min((repeat_edge.s0._0._0*32), t391)
                repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t465), 1, 32)] = input[(max(min(ramp((blur_y.min.0 + repeat_edge.s0._0._0i.base.s), 1, 32), x32(t394)), x32(input.min.0)) + x32((t464 - t393)))]
              }
            }
            let t468 = (t426 - t396)
            let t466 = (repeat_edge.s0._1.epilogue - repeat_edge.s0._1.prologue)
            for (repeat_edge.s0._1, repeat_edge.s0._1.prologue, t466) {
              let t470 = ((repeat_edge.s0._1 % 8)*t387)
              let t469 = (input.stride.1*repeat_edge.s0._1)
              for (repeat_edge.s0._0._0, 0, t427) {
                let repeat_edge.s0._0._0i.base.s = min((repeat_edge.s0._0._0*32), t391)
                repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t470), 1, 32)] = input[(max(min(ramp((blur_y.min.0 + repeat_edge.s0._0._0i.base.s), 1, 32), x32(t394)), x32(input.min.0)) + x32((t469 - t393)))]
              }
              let t473 = ((repeat_edge.s0._1 % 8)*t387)
              let t471 = (t396 - t427)
              let t472 = ((input.stride.1*repeat_edge.s0._1) + t397)
              for (repeat_edge.s0._0._0, t427, t471) {
                repeat_edge[ramp(((repeat_edge.s0._0._0*32) + t473), 1, 32)] = input[ramp(((repeat_edge.s0._0._0*32) + t472), 1, 32)]
              }
              let t475 = ((repeat_edge.s0._1 % 8)*t387)
              let t474 = (input.stride.1*repeat_edge.s0._1)
              for (repeat_edge.s0._0._0, t396, t468) {
                let repeat_edge.s0._0._0i.base.s = min((repeat_edge.s0._0._0*32), t391)
                repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t475), 1, 32)] = input[(max(min(ramp((blur_y.min.0 + repeat_edge.s0._0._0i.base.s), 1, 32), x32(t394)), x32(input.min.0)) + x32((t474 - t393)))]
              }
            }
            let t476 = (((repeat_edge.s0._1.loop_extent.s.s + repeat_edge.s0._1.min_2) - repeat_edge.s0._1.epilogue) + 6)
            let t477 = (t420 + -1)
            for (repeat_edge.s0._1, repeat_edge.s0._1.epilogue, t476) {
              let t478 = (max(min(repeat_edge.s0._1, t477), input.min.1)*input.stride.1)
              let t479 = ((repeat_edge.s0._1 % 8)*t387)
              for (repeat_edge.s0._0._0, 0, t426) {
                let repeat_edge.s0._0._0i.base.s = min((repeat_edge.s0._0._0*32), t391)
                repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t479), 1, 32)] = input[(max(min(ramp((blur_y.min.0 + repeat_edge.s0._0._0i.base.s), 1, 32), x32(t394)), x32(input.min.0)) + x32((t478 - t393)))]
              }
            }
          }
          consume repeat_edge {
            let t494 = (blur_y.s0.y.yi.yii.yii*4)
            let t495 = (t461 + t494)
            let t496 = ((t495 + 1)*blur_y.stride.1)
            let t497 = ((t495 + 2)*blur_y.stride.1)
            let t498 = ((t495 + 3)*blur_y.stride.1)
            let t499 = (blur_y.stride.1*t495)
            let t487 = (t404 + t499)
            let t486 = (t403 + t499)
            let t493 = (t404 + t498)
            let t492 = (t403 + t498)
            let t491 = (t404 + t497)
            let t490 = (t403 + t497)
            let t489 = (t404 + t496)
            let t488 = (t403 + t496)
            let t480 = (t460 + t494)
            for (blur_y.s0.x.x, 0, t398) {
              allocate blur_x[uint16 * 384] in Stack
              produce blur_x {
                blur_x[ramp(0, 1, 32)] = (let t333 = ((((t445 + t480) % 8)*t387) + (blur_y.s0.x.x*64)) in ((repeat_edge[ramp((t333 + 1), 1, 32)] + (repeat_edge[ramp((t333 + 2), 1, 32)] + repeat_edge[ramp(t333, 1, 32)]))/x32((uint16)3)))
                blur_x[ramp(32, 1, 32)] = (let t334 = ((((t445 + t480) % 8)*t387) + (blur_y.s0.x.x*64)) in ((repeat_edge[ramp((t334 + 33), 1, 32)] + (repeat_edge[ramp((t334 + 34), 1, 32)] + repeat_edge[ramp((t334 + 32), 1, 32)]))/x32((uint16)3)))
                blur_x[ramp(64, 1, 32)] = (let t335 = (((((t445 + t480) + 1) % 8)*t387) + (blur_y.s0.x.x*64)) in ((repeat_edge[ramp((t335 + 1), 1, 32)] + (repeat_edge[ramp((t335 + 2), 1, 32)] + repeat_edge[ramp(t335, 1, 32)]))/x32((uint16)3)))
                blur_x[ramp(96, 1, 32)] = (let t336 = (((((t445 + t480) + 1) % 8)*t387) + (blur_y.s0.x.x*64)) in ((repeat_edge[ramp((t336 + 33), 1, 32)] + (repeat_edge[ramp((t336 + 34), 1, 32)] + repeat_edge[ramp((t336 + 32), 1, 32)]))/x32((uint16)3)))
                blur_x[ramp(128, 1, 32)] = (let t337 = (((((t445 + t480) + 2) % 8)*t387) + (blur_y.s0.x.x*64)) in ((repeat_edge[ramp((t337 + 1), 1, 32)] + (repeat_edge[ramp((t337 + 2), 1, 32)] + repeat_edge[ramp(t337, 1, 32)]))/x32((uint16)3)))
                blur_x[ramp(160, 1, 32)] = (let t338 = (((((t445 + t480) + 2) % 8)*t387) + (blur_y.s0.x.x*64)) in ((repeat_edge[ramp((t338 + 33), 1, 32)] + (repeat_edge[ramp((t338 + 34), 1, 32)] + repeat_edge[ramp((t338 + 32), 1, 32)]))/x32((uint16)3)))
                blur_x[ramp(192, 1, 32)] = (let t339 = (((((t445 + t480) + 3) % 8)*t387) + (blur_y.s0.x.x*64)) in ((repeat_edge[ramp((t339 + 1), 1, 32)] + (repeat_edge[ramp((t339 + 2), 1, 32)] + repeat_edge[ramp(t339, 1, 32)]))/x32((uint16)3)))
                blur_x[ramp(224, 1, 32)] = (let t340 = (((((t445 + t480) + 3) % 8)*t387) + (blur_y.s0.x.x*64)) in ((repeat_edge[ramp((t340 + 33), 1, 32)] + (repeat_edge[ramp((t340 + 34), 1, 32)] + repeat_edge[ramp((t340 + 32), 1, 32)]))/x32((uint16)3)))
                blur_x[ramp(256, 1, 32)] = (let t341 = (((((t445 + t480) + 4) % 8)*t387) + (blur_y.s0.x.x*64)) in ((repeat_edge[ramp((t341 + 1), 1, 32)] + (repeat_edge[ramp((t341 + 2), 1, 32)] + repeat_edge[ramp(t341, 1, 32)]))/x32((uint16)3)))
                blur_x[ramp(288, 1, 32)] = (let t342 = (((((t445 + t480) + 4) % 8)*t387) + (blur_y.s0.x.x*64)) in ((repeat_edge[ramp((t342 + 33), 1, 32)] + (repeat_edge[ramp((t342 + 34), 1, 32)] + repeat_edge[ramp((t342 + 32), 1, 32)]))/x32((uint16)3)))
                blur_x[ramp(320, 1, 32)] = (let t343 = (((((t445 + t480) + 5) % 8)*t387) + (blur_y.s0.x.x*64)) in ((repeat_edge[ramp((t343 + 1), 1, 32)] + (repeat_edge[ramp((t343 + 2), 1, 32)] + repeat_edge[ramp(t343, 1, 32)]))/x32((uint16)3)))
                blur_x[ramp(352, 1, 32)] = (let t344 = (((((t445 + t480) + 5) % 8)*t387) + (blur_y.s0.x.x*64)) in ((repeat_edge[ramp((t344 + 33), 1, 32)] + (repeat_edge[ramp((t344 + 34), 1, 32)] + repeat_edge[ramp((t344 + 32), 1, 32)]))/x32((uint16)3)))
              }
              consume blur_x {
                blur_y[ramp(((blur_y.s0.x.x*64) + t486), 1, 32)] = ((blur_x[ramp(64, 1, 32)] + (blur_x[ramp(128, 1, 32)] + blur_x[ramp(0, 1, 32)]))/x32((uint16)3))
                blur_y[ramp(((blur_y.s0.x.x*64) + t487), 1, 32)] = ((blur_x[ramp(96, 1, 32)] + (blur_x[ramp(160, 1, 32)] + blur_x[ramp(32, 1, 32)]))/x32((uint16)3))
                blur_y[ramp(((blur_y.s0.x.x*64) + t488), 1, 32)] = ((blur_x[ramp(128, 1, 32)] + (blur_x[ramp(192, 1, 32)] + blur_x[ramp(64, 1, 32)]))/x32((uint16)3))
                blur_y[ramp(((blur_y.s0.x.x*64) + t489), 1, 32)] = ((blur_x[ramp(160, 1, 32)] + (blur_x[ramp(224, 1, 32)] + blur_x[ramp(96, 1, 32)]))/x32((uint16)3))
                blur_y[ramp(((blur_y.s0.x.x*64) + t490), 1, 32)] = ((blur_x[ramp(192, 1, 32)] + (blur_x[ramp(256, 1, 32)] + blur_x[ramp(128, 1, 32)]))/x32((uint16)3))
                blur_y[ramp(((blur_y.s0.x.x*64) + t491), 1, 32)] = ((blur_x[ramp(224, 1, 32)] + (blur_x[ramp(288, 1, 32)] + blur_x[ramp(160, 1, 32)]))/x32((uint16)3))
                blur_y[ramp(((blur_y.s0.x.x*64) + t492), 1, 32)] = ((blur_x[ramp(256, 1, 32)] + (blur_x[ramp(320, 1, 32)] + blur_x[ramp(192, 1, 32)]))/x32((uint16)3))
                blur_y[ramp(((blur_y.s0.x.x*64) + t493), 1, 32)] = ((blur_x[ramp(288, 1, 32)] + (blur_x[ramp(352, 1, 32)] + blur_x[ramp(224, 1, 32)]))/x32((uint16)3))
                free blur_x
              }
            }
            if (t405) {
              let blur_y.s0.y.min_3.s = ((blur_y.s0.y.yi.yii.yii*4) + t460)
              allocate blur_x[uint16 * 384] in Stack
              produce blur_x {
                blur_x[ramp(0, 1, 32)] = ((repeat_edge[ramp(((((blur_y.s0.y.min_3.s + t445) % 8)*t387) + t408), 1, 32)] + (repeat_edge[ramp(((((blur_y.s0.y.min_3.s + t445) % 8)*t387) + t406), 1, 32)] + repeat_edge[ramp(((((blur_y.s0.y.min_3.s + t445) % 8)*t387) + t407), 1, 32)]))/x32((uint16)3))
                blur_x[ramp(32, 1, 32)] = ((repeat_edge[ramp(((((blur_y.s0.y.min_3.s + t445) % 8)*t387) + t410), 1, 32)] + (repeat_edge[ramp(((((blur_y.s0.y.min_3.s + t445) % 8)*t387) + t391), 1, 32)] + repeat_edge[ramp(((((blur_y.s0.y.min_3.s + t445) % 8)*t387) + t409), 1, 32)]))/x32((uint16)3))
                blur_x[ramp(64, 1, 32)] = ((repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 1) % 8)*t387) + t408), 1, 32)] + (repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 1) % 8)*t387) + t406), 1, 32)] + repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 1) % 8)*t387) + t407), 1, 32)]))/x32((uint16)3))
                blur_x[ramp(96, 1, 32)] = ((repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 1) % 8)*t387) + t410), 1, 32)] + (repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 1) % 8)*t387) + t391), 1, 32)] + repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 1) % 8)*t387) + t409), 1, 32)]))/x32((uint16)3))
                blur_x[ramp(128, 1, 32)] = ((repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 2) % 8)*t387) + t408), 1, 32)] + (repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 2) % 8)*t387) + t406), 1, 32)] + repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 2) % 8)*t387) + t407), 1, 32)]))/x32((uint16)3))
                blur_x[ramp(160, 1, 32)] = ((repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 2) % 8)*t387) + t410), 1, 32)] + (repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 2) % 8)*t387) + t391), 1, 32)] + repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 2) % 8)*t387) + t409), 1, 32)]))/x32((uint16)3))
                blur_x[ramp(192, 1, 32)] = ((repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 3) % 8)*t387) + t408), 1, 32)] + (repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 3) % 8)*t387) + t406), 1, 32)] + repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 3) % 8)*t387) + t407), 1, 32)]))/x32((uint16)3))
                blur_x[ramp(224, 1, 32)] = ((repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 3) % 8)*t387) + t410), 1, 32)] + (repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 3) % 8)*t387) + t391), 1, 32)] + repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 3) % 8)*t387) + t409), 1, 32)]))/x32((uint16)3))
                blur_x[ramp(256, 1, 32)] = ((repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 4) % 8)*t387) + t408), 1, 32)] + (repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 4) % 8)*t387) + t406), 1, 32)] + repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 4) % 8)*t387) + t407), 1, 32)]))/x32((uint16)3))
                blur_x[ramp(288, 1, 32)] = ((repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 4) % 8)*t387) + t410), 1, 32)] + (repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 4) % 8)*t387) + t391), 1, 32)] + repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 4) % 8)*t387) + t409), 1, 32)]))/x32((uint16)3))
                blur_x[ramp(320, 1, 32)] = ((repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 5) % 8)*t387) + t408), 1, 32)] + (repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 5) % 8)*t387) + t406), 1, 32)] + repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 5) % 8)*t387) + t407), 1, 32)]))/x32((uint16)3))
                blur_x[ramp(352, 1, 32)] = ((repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 5) % 8)*t387) + t410), 1, 32)] + (repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 5) % 8)*t387) + t391), 1, 32)] + repeat_edge[ramp((((((blur_y.s0.y.min_3.s + t445) + 5) % 8)*t387) + t409), 1, 32)]))/x32((uint16)3))
              }
              consume blur_x {
                blur_y[ramp(((((blur_y.s0.y.yi.yii.yii*4) + t461)*blur_y.stride.1) + t411), 1, 32)] = ((blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 64), 1, 32) aligned(128, 64)] + (blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 128), 1, 32) aligned(128, 0)] + blur_x[ramp(((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64), 1, 32) aligned(128, 0)]))/x32((uint16)3))
                blur_y[ramp(((((blur_y.s0.y.yi.yii.yii*4) + t461)*blur_y.stride.1) + t412), 1, 32)] = ((blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 96), 1, 32) aligned(128, 96)] + (blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 160), 1, 32) aligned(128, 32)] + blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 32), 1, 32) aligned(128, 32)]))/x32((uint16)3))
                blur_y[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t461) + 1)*blur_y.stride.1) + t411), 1, 32)] = ((blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 128), 1, 32) aligned(128, 0)] + (blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 192), 1, 32) aligned(128, 64)] + blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 64), 1, 32) aligned(128, 64)]))/x32((uint16)3))
                blur_y[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t461) + 1)*blur_y.stride.1) + t412), 1, 32)] = ((blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 160), 1, 32) aligned(128, 32)] + (blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 224), 1, 32) aligned(128, 96)] + blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 96), 1, 32) aligned(128, 96)]))/x32((uint16)3))
                blur_y[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t461) + 2)*blur_y.stride.1) + t411), 1, 32)] = ((blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 192), 1, 32) aligned(128, 64)] + (blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 256), 1, 32) aligned(128, 0)] + blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 128), 1, 32) aligned(128, 0)]))/x32((uint16)3))
                blur_y[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t461) + 2)*blur_y.stride.1) + t412), 1, 32)] = ((blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 224), 1, 32) aligned(128, 96)] + (blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 288), 1, 32) aligned(128, 32)] + blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 160), 1, 32) aligned(128, 32)]))/x32((uint16)3))
                blur_y[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t461) + 3)*blur_y.stride.1) + t411), 1, 32)] = ((blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 256), 1, 32) aligned(128, 0)] + (blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 320), 1, 32) aligned(128, 64)] + blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 192), 1, 32) aligned(128, 64)]))/x32((uint16)3))
                blur_y[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t461) + 3)*blur_y.stride.1) + t412), 1, 32)] = ((blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 288), 1, 32) aligned(128, 32)] + (blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 352), 1, 32) aligned(128, 96)] + blur_x[ramp((((((blur_y.s0.y.yi.yii.yii*4) + t460) - blur_y.s0.y.min_3.s)*64) + 224), 1, 32) aligned(128, 96)]))/x32((uint16)3))
                free blur_x
              }
            }
          }
        }
        let repeat_edge.s0._1.min_2.s = ((blur_y.s0.y.yi.yi*38) + t445)
        produce repeat_edge {
          let t501 = (t420 + -1)
          let t500 = (repeat_edge.s0._1.min_2.s + 38)
          for (repeat_edge.s0._1, t500, 2) {
            let t502 = (max(min(repeat_edge.s0._1, t501), input.min.1)*input.stride.1)
            let t503 = ((repeat_edge.s0._1 % 8)*t387)
            for (repeat_edge.s0._0._0, 0, t426) {
              let repeat_edge.s0._0._0i.base.s = min((repeat_edge.s0._0._0*32), t391)
              repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t503), 1, 32)] = input[(max(min(ramp((blur_y.min.0 + repeat_edge.s0._0._0i.base.s), 1, 32), x32(t394)), x32(input.min.0)) + x32((t502 - t393)))]
            }
          }
        }
        consume repeat_edge {
          let t518 = ((blur_y.s0.y.yi.yi*38) + t445)
          let t519 = ((t518 + 34)*blur_y.stride.1)
          let t520 = ((t518 + 35)*blur_y.stride.1)
          let t521 = ((t518 + 36)*blur_y.stride.1)
          let t522 = ((t518 + 37)*blur_y.stride.1)
          let t509 = (((t518 + 7) % 8)*t387)
          let t508 = (((t518 + 6) % 8)*t387)
          let t507 = (((t518 + 5) % 8)*t387)
          let t506 = (((t518 + 4) % 8)*t387)
          let t505 = (((t518 + 3) % 8)*t387)
          let t504 = (((t518 + 2) % 8)*t387)
          let t517 = (t404 + t522)
          let t516 = (t403 + t522)
          let t515 = (t404 + t521)
          let t514 = (t403 + t521)
          let t513 = (t404 + t520)
          let t512 = (t403 + t520)
          let t511 = (t404 + t519)
          let t510 = (t403 + t519)
          for (blur_y.s0.x.x, 0, t413) {
            let blur_y.s0.x.xi.base.s = min((blur_y.s0.x.x*64), t407)
            allocate blur_x[uint16 * 384] in Stack
            produce blur_x {
              blur_x[ramp(0, 1, 32)] = ((repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t504) + 1), 1, 32)] + (repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t504) + 2), 1, 32)] + repeat_edge[ramp((blur_y.s0.x.xi.base.s + t504), 1, 32)]))/x32((uint16)3))
              blur_x[ramp(32, 1, 32)] = ((repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t504) + 33), 1, 32)] + (repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t504) + 34), 1, 32)] + repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t504) + 32), 1, 32)]))/x32((uint16)3))
              blur_x[ramp(64, 1, 32)] = ((repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t505) + 1), 1, 32)] + (repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t505) + 2), 1, 32)] + repeat_edge[ramp((blur_y.s0.x.xi.base.s + t505), 1, 32)]))/x32((uint16)3))
              blur_x[ramp(96, 1, 32)] = ((repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t505) + 33), 1, 32)] + (repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t505) + 34), 1, 32)] + repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t505) + 32), 1, 32)]))/x32((uint16)3))
              blur_x[ramp(128, 1, 32)] = ((repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t506) + 1), 1, 32)] + (repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t506) + 2), 1, 32)] + repeat_edge[ramp((blur_y.s0.x.xi.base.s + t506), 1, 32)]))/x32((uint16)3))
              blur_x[ramp(160, 1, 32)] = ((repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t506) + 33), 1, 32)] + (repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t506) + 34), 1, 32)] + repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t506) + 32), 1, 32)]))/x32((uint16)3))
              blur_x[ramp(192, 1, 32)] = ((repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t507) + 1), 1, 32)] + (repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t507) + 2), 1, 32)] + repeat_edge[ramp((blur_y.s0.x.xi.base.s + t507), 1, 32)]))/x32((uint16)3))
              blur_x[ramp(224, 1, 32)] = ((repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t507) + 33), 1, 32)] + (repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t507) + 34), 1, 32)] + repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t507) + 32), 1, 32)]))/x32((uint16)3))
              blur_x[ramp(256, 1, 32)] = ((repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t508) + 1), 1, 32)] + (repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t508) + 2), 1, 32)] + repeat_edge[ramp((blur_y.s0.x.xi.base.s + t508), 1, 32)]))/x32((uint16)3))
              blur_x[ramp(288, 1, 32)] = ((repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t508) + 33), 1, 32)] + (repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t508) + 34), 1, 32)] + repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t508) + 32), 1, 32)]))/x32((uint16)3))
              blur_x[ramp(320, 1, 32)] = ((repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t509) + 1), 1, 32)] + (repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t509) + 2), 1, 32)] + repeat_edge[ramp((blur_y.s0.x.xi.base.s + t509), 1, 32)]))/x32((uint16)3))
              blur_x[ramp(352, 1, 32)] = ((repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t509) + 33), 1, 32)] + (repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t509) + 34), 1, 32)] + repeat_edge[ramp(((blur_y.s0.x.xi.base.s + t509) + 32), 1, 32)]))/x32((uint16)3))
            }
            consume blur_x {
              blur_y[ramp((blur_y.s0.x.xi.base.s + t510), 1, 32)] = ((blur_x[ramp(64, 1, 32)] + (blur_x[ramp(128, 1, 32)] + blur_x[ramp(0, 1, 32)]))/x32((uint16)3))
              blur_y[ramp((blur_y.s0.x.xi.base.s + t511), 1, 32)] = ((blur_x[ramp(96, 1, 32)] + (blur_x[ramp(160, 1, 32)] + blur_x[ramp(32, 1, 32)]))/x32((uint16)3))
              blur_y[ramp((blur_y.s0.x.xi.base.s + t512), 1, 32)] = ((blur_x[ramp(128, 1, 32)] + (blur_x[ramp(192, 1, 32)] + blur_x[ramp(64, 1, 32)]))/x32((uint16)3))
              blur_y[ramp((blur_y.s0.x.xi.base.s + t513), 1, 32)] = ((blur_x[ramp(160, 1, 32)] + (blur_x[ramp(224, 1, 32)] + blur_x[ramp(96, 1, 32)]))/x32((uint16)3))
              blur_y[ramp((blur_y.s0.x.xi.base.s + t514), 1, 32)] = ((blur_x[ramp(192, 1, 32)] + (blur_x[ramp(256, 1, 32)] + blur_x[ramp(128, 1, 32)]))/x32((uint16)3))
              blur_y[ramp((blur_y.s0.x.xi.base.s + t515), 1, 32)] = ((blur_x[ramp(224, 1, 32)] + (blur_x[ramp(288, 1, 32)] + blur_x[ramp(160, 1, 32)]))/x32((uint16)3))
              blur_y[ramp((blur_y.s0.x.xi.base.s + t516), 1, 32)] = ((blur_x[ramp(256, 1, 32)] + (blur_x[ramp(320, 1, 32)] + blur_x[ramp(192, 1, 32)]))/x32((uint16)3))
              blur_y[ramp((blur_y.s0.x.xi.base.s + t517), 1, 32)] = ((blur_x[ramp(288, 1, 32)] + (blur_x[ramp(352, 1, 32)] + blur_x[ramp(224, 1, 32)]))/x32((uint16)3))
              free blur_x
            }
          }
        }
        free repeat_edge
      }
    }
  }
}
}


