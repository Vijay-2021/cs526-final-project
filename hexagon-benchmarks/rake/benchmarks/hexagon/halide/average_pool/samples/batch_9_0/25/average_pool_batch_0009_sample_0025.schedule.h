#ifndef average_pool_batch_0009_sample_0025_SCHEDULE_H
#define average_pool_batch_0009_sample_0025_SCHEDULE_H

// MACHINE GENERATED -- DO NOT EDIT
// This schedule was automatically generated by Adams2019
// for target=x86-64-linux-avx-avx2-disable_llvm_loop_opt-f16c-fma-sse41  // NOLINT
// with machine_params=32,24000000,40

#include "Halide.h"


inline void apply_schedule_average_pool_batch_0009_sample_0025(
    ::Halide::Pipeline pipeline,
    ::Halide::Target target
) {
    using ::Halide::Func;
    using ::Halide::MemoryType;
    using ::Halide::RVar;
    using ::Halide::TailStrategy;
    using ::Halide::Var;
    Func output = pipeline.get_func(3);
    Func sum = pipeline.get_func(2);
    Func input_bounded = pipeline.get_func(1);
    Var b(output.get_schedule().dims()[3].var);
    Var c(output.get_schedule().dims()[0].var);
    Var ci("ci");
    Var cii("cii");
    Var x(output.get_schedule().dims()[1].var);
    Var xi("xi");
    Var y(output.get_schedule().dims()[2].var);
    Var yi("yi");
    RVar r12_x(sum.update(0).get_schedule().dims()[0].var);
    RVar r12_y(sum.update(0).get_schedule().dims()[1].var);
    output
        .split(c, c, ci, 512, TailStrategy::ShiftInwards)
        .split(x, x, xi, 4, TailStrategy::ShiftInwards)
        .split(y, y, yi, 9, TailStrategy::ShiftInwards)
        .split(ci, ci, cii, 32, TailStrategy::ShiftInwards)
        .vectorize(cii)
        .compute_root()
        .reorder({cii, ci, yi, xi, y, c, x, b})
        .fuse(c, x, c)
        .parallel(c);
    sum.update(0)
        .split(c, c, ci, 32, TailStrategy::RoundUp)
        .vectorize(ci)
        .reorder({ci, c, x, y, b, r12_x, r12_y});
    sum
        .store_in(MemoryType::Stack)
        .split(c, c, ci, 16, TailStrategy::RoundUp)
        .unroll(c)
        .vectorize(ci)
        .compute_at(output, ci)
        .reorder({ci, c, x, y, b});
    input_bounded
        .split(c, c, ci, 32, TailStrategy::ShiftInwards)
        .vectorize(ci)
        .compute_at(output, xi)
        .store_at(output, c)
        .reorder({ci, c, x, y, b});

}

#endif  // average_pool_batch_0009_sample_0025_SCHEDULE_H
