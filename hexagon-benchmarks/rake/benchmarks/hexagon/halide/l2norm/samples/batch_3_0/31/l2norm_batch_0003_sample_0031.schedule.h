#ifndef l2norm_batch_0003_sample_0031_SCHEDULE_H
#define l2norm_batch_0003_sample_0031_SCHEDULE_H

// MACHINE GENERATED -- DO NOT EDIT
// This schedule was automatically generated by Adams2019
// for target=x86-64-linux-avx-avx2-disable_llvm_loop_opt-f16c-fma-sse41  // NOLINT
// with machine_params=32,24000000,40

#include "Halide.h"


inline void apply_schedule_l2norm_batch_0003_sample_0031(
    ::Halide::Pipeline pipeline,
    ::Halide::Target target
) {
    using ::Halide::Func;
    using ::Halide::MemoryType;
    using ::Halide::RVar;
    using ::Halide::TailStrategy;
    using ::Halide::Var;
    Func output = pipeline.get_func(4);
    Func inv_sqrt = pipeline.get_func(3);
    Func sum_input_sq = pipeline.get_func(2);
    Func input_zeroed = pipeline.get_func(1);
    Var x(output.get_schedule().dims()[0].var);
    Var xi("xi");
    Var y(output.get_schedule().dims()[1].var);
    Var yi("yi");
    RVar r8_x(sum_input_sq.update(0).get_schedule().dims()[0].var);
    output
        .split(y, y, yi, 34, TailStrategy::ShiftInwards)
        .split(x, x, xi, 32, TailStrategy::ShiftInwards)
        .vectorize(xi)
        .compute_root()
        .reorder({xi, x, yi, y})
        .parallel(y);
    inv_sqrt
        .split(y, y, yi, 16, TailStrategy::RoundUp)
        .unroll(y)
        .vectorize(yi)
        .compute_at(output, y)
        .reorder({yi, y});
    sum_input_sq.update(0)
        .split(y, y, yi, 16, TailStrategy::GuardWithIf)
        .unroll(y)
        .vectorize(yi)
        .reorder({yi, y, r8_x});
    sum_input_sq
        .split(y, y, yi, 8, TailStrategy::RoundUp)
        .unroll(y)
        .vectorize(yi)
        .compute_at(output, y)
        .reorder({yi, y});

}

#endif  // l2norm_batch_0003_sample_0031_SCHEDULE_H
