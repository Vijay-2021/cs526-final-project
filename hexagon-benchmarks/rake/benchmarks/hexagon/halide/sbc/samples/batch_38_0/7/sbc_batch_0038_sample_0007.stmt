module name=sbc_batch_0038_sample_0007, target=x86-64-linux-avx-avx2-avx512-avx512_sapphirerapids-avx512_skylake-disable_llvm_loop_opt-f16c-fma-sse41
external_plus_metadata func sbc_batch_0038_sample_0007 (input_i16, consts_i16, output) {
assert((uint64)reinterpret((halide_buffer_t *)output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("output"))
assert((uint64)reinterpret((halide_buffer_t *)input_i16.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input_i16"))
assert((uint64)reinterpret((halide_buffer_t *)consts_i16.buffer) != (uint64)0, halide_error_buffer_argument_is_null("consts_i16"))
let consts_i16 = (void *)_halide_buffer_get_host((halide_buffer_t *)consts_i16.buffer)
let consts_i16.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)consts_i16.buffer)
let consts_i16.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)consts_i16.buffer)
let consts_i16.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)consts_i16.buffer)
let consts_i16.min.0 = _halide_buffer_get_min((halide_buffer_t *)consts_i16.buffer, 0)
let consts_i16.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)consts_i16.buffer, 0)
let consts_i16.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)consts_i16.buffer, 0)
let input_i16 = (void *)_halide_buffer_get_host((halide_buffer_t *)input_i16.buffer)
let input_i16.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input_i16.buffer)
let input_i16.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input_i16.buffer)
let input_i16.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input_i16.buffer)
let input_i16.min.0 = _halide_buffer_get_min((halide_buffer_t *)input_i16.buffer, 0)
let input_i16.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input_i16.buffer, 0)
let input_i16.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input_i16.buffer, 0)
let output = (void *)_halide_buffer_get_host((halide_buffer_t *)output.buffer)
let output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)output.buffer)
let output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)output.buffer)
let output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)output.buffer)
let output.min.0 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 0)
let output.extent.0.required = max(min(min(output.extent.0, 16) + (((output.extent.0 + -1)/16)*16), output.extent.0) + output.min.0, 4) - min(output.min.0, 0)
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)consts_i16.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)consts_i16.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)consts_i16.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 16, 1, (halide_dimension_t *)make_struct(0, 56, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input_i16.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input_i16.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input_i16.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 16, 1, (halide_dimension_t *)make_struct(0, 40, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct(min(output.min.0, 0), output.extent.0.required, 1, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)consts_i16.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input_i16.buffer)))) {
 assert(consts_i16.type == (uint32)69632, halide_error_bad_type("Input buffer consts_i16", consts_i16.type, (uint32)69632))
 assert(consts_i16.dimensions == 1, halide_error_bad_dimensions("Input buffer consts_i16", consts_i16.dimensions, 1))
 assert(input_i16.type == (uint32)69632, halide_error_bad_type("Input buffer input_i16", input_i16.type, (uint32)69632))
 assert(input_i16.dimensions == 1, halide_error_bad_dimensions("Input buffer input_i16", input_i16.dimensions, 1))
 assert(output.type == (uint32)73728, halide_error_bad_type("Output buffer output", output.type, (uint32)73728))
 assert(output.dimensions == 1, halide_error_bad_dimensions("Output buffer output", output.dimensions, 1))
 assert((consts_i16.min.0 <= 0) && (56 <= (consts_i16.extent.0 + consts_i16.min.0)), halide_error_access_out_of_bounds("Input buffer consts_i16", 0, 0, 55, consts_i16.min.0, (consts_i16.extent.0 + consts_i16.min.0) + -1))
 assert(0 <= consts_i16.extent.0, halide_error_buffer_extents_negative("Input buffer consts_i16", 0, consts_i16.extent.0))
 assert((input_i16.min.0 <= 0) && (40 <= (input_i16.extent.0 + input_i16.min.0)), halide_error_access_out_of_bounds("Input buffer input_i16", 0, 0, 39, input_i16.min.0, (input_i16.extent.0 + input_i16.min.0) + -1))
 assert(0 <= input_i16.extent.0, halide_error_buffer_extents_negative("Input buffer input_i16", 0, input_i16.extent.0))
 assert((output.min.0 <= 0) && ((min(output.min.0, 0) + output.extent.0.required) <= (output.extent.0 + output.min.0)), halide_error_access_out_of_bounds("Output buffer output", 0, min(output.min.0, 0), (min(output.min.0, 0) + output.extent.0.required) + -1, output.min.0, (output.extent.0 + output.min.0) + -1))
 assert(0 <= output.extent.0, halide_error_buffer_extents_negative("Output buffer output", 0, output.extent.0))
 assert(consts_i16.stride.0 == 1, halide_error_constraint_violated("consts_i16.stride.0", consts_i16.stride.0, "1", 1))
 assert(input_i16.stride.0 == 1, halide_error_constraint_violated("input_i16.stride.0", input_i16.stride.0, "1", 1))
 assert(output.stride.0 == 1, halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
 assert(uint64(consts_i16.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("consts_i16", uint64(consts_i16.extent.0), (uint64)2147483647))
 assert(uint64(input_i16.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input_i16", uint64(input_i16.extent.0), (uint64)2147483647))
 assert(uint64(output.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", uint64(output.extent.0), (uint64)2147483647))
 assert(!consts_i16.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer consts_i16"))
 assert(!input_i16.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input_i16"))
 assert(!output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer output"))
 assert(consts_i16 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer consts_i16"))
 assert(input_i16 != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer input_i16"))
 assert(output != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer output"))
 allocate t1$0[int32 * 16]
 produce t1$0 {
  t1$0[ramp(0, 1, 16)] = x16(32768)
  for (t1$0.s1.r8$y, 0, 5) {
   let t74 = t1$0.s1.r8$y*4
   for (t1$0.s1.r8$x, 0, 4) {
    let t72 = t1$0.s1.r8$x + t74
    t1$0[t1$0.s1.r8$x] = t1$0[t1$0.s1.r8$x] + (int32(input_i16[(t72*2) - input_i16.min.0])*int32(consts_i16[(t72*2) - consts_i16.min.0]))
   }
  }
  for (t1$0.s2.r8$y, 0, 5) {
   let t75 = t1$0.s2.r8$y*4
   for (t1$0.s2.r8$x, 0, 4) {
    let t73 = t1$0.s2.r8$x + t75
    t1$0[t1$0.s2.r8$x] = t1$0[t1$0.s2.r8$x] + (int32(input_i16[((t73*2) - input_i16.min.0) + 1])*int32(consts_i16[((t73*2) - consts_i16.min.0) + 1]))
   }
  }
 }
 allocate t2$0[int16 * 32]
 produce t2$0 {
  t2$0[ramp(0, 1, 32)] = x32((int16)0)
  consume t1$0 {
   for (t2$0.s1.r14$x, 0, 4) {
    t2$0[t2$0.s1.r14$x] = int16((t1$0[t2$0.s1.r14$x]/65536))
   }
  }
  free t1$0
 }
 allocate t3$0[int32 * 16]
 produce t3$0 {
  t3$0[ramp(0, 1, 16)] = x16(0)
  consume t2$0 {
   for (t3$0.s1.r20$y, 0, 2) {
    let t77 = t3$0.s1.r20$y*4
    let t76 = t3$0.s1.r20$y*2
    for (t3$0.s1.r20$x, 0, 4) {
     t3$0[t3$0.s1.r20$x] = t3$0[t3$0.s1.r20$x] + (int32(t2$0[t76])*int32(consts_i16[(((t3$0.s1.r20$x + t77)*2) - consts_i16.min.0) + 40]))
    }
   }
  }
  consume t2$0 {
   for (t3$0.s2.r20$y, 0, 2) {
    let t79 = t3$0.s2.r20$y*4
    let t78 = t3$0.s2.r20$y*2
    for (t3$0.s2.r20$x, 0, 4) {
     t3$0[t3$0.s2.r20$x] = t3$0[t3$0.s2.r20$x] + (int32(t2$0[t78 + 1])*int32(consts_i16[(((t3$0.s2.r20$x + t79)*2) - consts_i16.min.0) + 41]))
    }
   }
  }
  free t2$0
 }
 produce output {
  let t80 = output.extent.0/16
  for (output.s0.x.x, 0, t80) {
   output[ramp(output.s0.x.x*16, 1, 16) aligned(16, 0)] = x16(0)
  }
  if ((output.extent.0 % 16) != 0) {
   let t82 = (output.extent.0/16)*16
   let t81 = output.extent.0 % 16
   for (output.s0.x.xi, 0, t81) {
    output[output.s0.x.xi + t82] = 0
   }
  }
  consume t3$0 {
   for (output.s1.r14$x, 0, 4) {
    output[output.s1.r14$x - output.min.0] = t3$0[output.s1.r14$x]
   }
  }
  free t3$0
 }
}
}


