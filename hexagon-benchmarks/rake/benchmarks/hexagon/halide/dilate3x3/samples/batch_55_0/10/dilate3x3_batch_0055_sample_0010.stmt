module name=dilate3x3_batch_0055_sample_0010, target=x86-64-linux-avx-avx2-disable_llvm_loop_opt-f16c-fma-sse41
external_plus_metadata func dilate3x3_batch_0055_sample_0010 (input, output) {
assert((uint64)reinterpret((halide_buffer_t *)output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("output"))
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let output = (void *)_halide_buffer_get_host((halide_buffer_t *)output.buffer)
let output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)output.buffer)
let output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)output.buffer)
let output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)output.buffer)
let output.min.0 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 0)
let output.min.1 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 1)
let input.extent.0.required.s = max(min(min((min(output.extent.0, 32) + (((max(output.extent.0, 32) + 1)/32)*32)) + -2, output.extent.0) + output.min.0, (input.extent.0 + input.min.0) + -1), input.min.0) - max(min(min(output.extent.0, 32) + output.min.0, (input.extent.0 + input.min.0) + 32) + -33, input.min.0)
let input.min.0.required = max(min(min(output.extent.0, 32) + output.min.0, (input.extent.0 + input.min.0) + 32) + -33, input.min.0)
let input.extent.1.required.s = max(min(output.extent.1 + output.min.1, (input.extent.1 + input.min.1) + -1), input.min.1) - max(min(min(output.extent.1, 34) + output.min.1, (input.extent.1 + input.min.1) + 34) + -35, input.min.1)
let input.min.1.required = max(min(min(output.extent.1, 34) + output.min.1, (input.extent.1 + input.min.1) + 34) + -35, input.min.1)
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct(input.min.0.required, input.extent.0.required.s + 1, 1, 0, input.min.1.required, input.extent.1.required.s + 1, input.extent.0.required.s + 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct((min(output.extent.0, 32) + output.min.0) + -32, max(output.extent.0, 32), 1, 0, (min(output.extent.1, 34) + output.min.1) + -34, max(output.extent.1, 34), max(output.extent.0, 32), 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer))) {
 assert(input.type == (uint32)67585, halide_error_bad_type("Input buffer input", input.type, (uint32)67585))
 assert(input.dimensions == 2, halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
 assert(output.type == (uint32)67585, halide_error_bad_type("Output buffer output", output.type, (uint32)67585))
 assert(output.dimensions == 2, halide_error_bad_dimensions("Output buffer output", output.dimensions, 2))
 assert((input.min.0 <= input.min.0.required) && (((input.extent.0.required.s + input.min.0.required) + 1) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, input.extent.0.required.s + input.min.0.required, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert((input.min.1 <= input.min.1.required) && (((input.extent.1.required.s + input.min.1.required) + 1) <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, input.extent.1.required.s + input.min.1.required, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert(32 <= output.extent.0, halide_error_access_out_of_bounds("Output buffer output", 0, (min(output.extent.0, 32) + output.min.0) + -32, (output.extent.0 + output.min.0) + -1, output.min.0, (output.extent.0 + output.min.0) + -1))
 assert(34 <= output.extent.1, halide_error_access_out_of_bounds("Output buffer output", 1, (min(output.extent.1, 34) + output.min.1) + -34, (output.extent.1 + output.min.1) + -1, output.min.1, (output.extent.1 + output.min.1) + -1))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 assert(output.stride.0 == 1, halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
 let input.total_extent.1 = int64(input.extent.1)*int64(input.extent.0)
 let output.total_extent.1 = int64(output.extent.1)*int64(output.extent.0)
 assert(uint64(input.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", uint64(input.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(input.extent.1)*int64(input.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", (uint64)abs(int64(input.extent.1)*int64(input.stride.1)), (uint64)2147483647))
 assert(input.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
 assert(uint64(output.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", uint64(output.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(output.extent.1)*int64(output.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", (uint64)abs(int64(output.extent.1)*int64(output.stride.1)), (uint64)2147483647))
 assert(output.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert(!output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer output"))
 assert(input != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer input"))
 assert(output != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer output"))
 produce output {
  let output.s0.y.y.prologue = min((output.extent.1 + 33)/34, max((input.min.1 - output.min.1)/34, -1) + 1)
  let output.s0.y.y.epilogue = max(min((output.extent.1 + 33)/34, max((input.min.1 - output.min.1)/34, -1) + 1), min(((input.extent.1 + input.min.1) - output.min.1) + -1, output.extent.1)/34)
  let t139 = input.extent.0 + input.min.0
  let t140 = output.min.1*output.stride.1
  let t141 = output.extent.0 + 1
  let t142 = (output.extent.0 + 33)/32
  let t143 = min(max((input.min.0 - output.min.0)/32, -1) + 1, t142)
  let t144 = t139 - output.min.0
  let t136 = (output.extent.0 % 32) != 0
  let t129 = max((min(min(min(output.extent.0 + -30, t144), min(t141, t144) + -31), t141)/32) + 1, t143)
  let t126 = (output.extent.1 + 33)/34
  let t138 = (output.extent.0 + 31)/32
  let t134 = output.extent.0/32
  let t127 = (t141/32)*32
  let t130 = output.min.1 - input.min.1
  let t137 = output.extent.0 - t140
  let t135 = 0 - t140
  parallel (output.s0.y.y, 0, t126) {
   if ((output.s0.y.y.prologue <= output.s0.y.y) && (output.s0.y.y < output.s0.y.y.epilogue)) {
    let output.s0.y.yi.base.s = min(output.s0.y.y*34, output.extent.1 + -34)
    allocate repeat_edge[uint8 * (t127 + 32) * 4] in Stack
    let t145 = output.s0.y.yi.base.s + t130
    let t146 = output.min.1 + output.s0.y.yi.base.s
    for (output.s0.y.yi.$n.rebased, 0, 36) {
     produce repeat_edge {
      let t151 = (((output.s0.y.yi.$n.rebased + t146) + 3) % 4)*(t127 + 32)
      let t150 = (((output.s0.y.yi.$n.rebased + t145) + -1)*input.stride.1) - input.min.0
      for (repeat_edge.s0._0._0, 0, t143) {
       let repeat_edge.s0._0._0i.base.s = min((repeat_edge.s0._0._0*32) + 30, output.extent.0)
       repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t151) + -30, 1, 32)] = input[max(min(ramp((output.min.0 + repeat_edge.s0._0._0i.base.s) + -31, 1, 32), x32(t139 + -1)), x32(input.min.0)) + x32(t150)]
      }
      let t154 = (((output.s0.y.yi.$n.rebased + t146) + 3) % 4)*(t127 + 32)
      let t152 = t129 - t143
      let t153 = (((output.s0.y.yi.$n.rebased + t145) + -1)*input.stride.1) + (output.min.0 - input.min.0)
      for (repeat_edge.s0._0._0.rebased, 0, t152) {
       let t123 = repeat_edge.s0._0._0.rebased + t143
       repeat_edge[ramp((t123*32) + t154, 1, 32) aligned(32, 0)] = input[ramp(((t123*32) + t153) + -1, 1, 32)]
      }
      let t157 = (((output.s0.y.yi.$n.rebased + t146) + 3) % 4)*(t127 + 32)
      let t156 = (((output.s0.y.yi.$n.rebased + t145) + -1)*input.stride.1) - input.min.0
      let t155 = t142 - t129
      for (repeat_edge.s0._0._0.rebased, 0, t155) {
       let repeat_edge.s0._0._0i.base.s = min(((repeat_edge.s0._0._0.rebased + t129)*32) + 30, output.extent.0)
       repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t157) + -30, 1, 32)] = input[max(min(ramp((output.min.0 + repeat_edge.s0._0._0i.base.s) + -31, 1, 32), x32(t139 + -1)), x32(input.min.0)) + x32(t156)]
      }
     }
     if (2 <= output.s0.y.yi.$n.rebased) {
      consume repeat_edge {
       allocate max_y[uint8 * (t127 + 32) * 1] in Stack
       produce max_y {
        let t158 = output.s0.y.yi.$n.rebased + t146
        for (max_y.s0.x.x, 0, t142) {
         max_y[ramp(max_y.s0.x.x*32, 1, 32) aligned(32, 0)] = max(repeat_edge[ramp((((t158 + 1) % 4)*(t127 + 32)) + (max_y.s0.x.x*32), 1, 32) aligned(32, 0)], max(repeat_edge[ramp((((t158 + 2) % 4)*(t127 + 32)) + (max_y.s0.x.x*32), 1, 32) aligned(32, 0)], repeat_edge[ramp((((t158 + 3) % 4)*(t127 + 32)) + (max_y.s0.x.x*32), 1, 32) aligned(32, 0)]))
        }
       }
       consume max_y {
        let t159 = (((output.s0.y.yi.$n.rebased + t146) + -2)*output.stride.1) + t135
        for (output.s0.x.x, 0, t134) {
         output[ramp((output.s0.x.x*32) + t159, 1, 32)] = max(max_y[ramp(output.s0.x.x*32, 1, 32) aligned(32, 0)], max(max_y[ramp((output.s0.x.x*32) + 1, 1, 32) aligned(32, 1)], max_y[ramp((output.s0.x.x*32) + 2, 1, 32) aligned(32, 2)]))
        }
        if (t136) {
         output[ramp(((((output.s0.y.yi.$n.rebased + t146) + -2)*output.stride.1) + t137) + -32, 1, 32)] = max(max_y[ramp(output.extent.0 + -32, 1, 32)], max(max_y[ramp(output.extent.0 + -31, 1, 32)], max_y[ramp(output.extent.0 + -30, 1, 32)]))
        }
        free max_y
       }
      }
     }
    }
    free repeat_edge
   } else {
    let output.s0.y.yi.base.s = min(output.s0.y.y*34, output.extent.1 + -34)
    allocate repeat_edge[uint8 * (t127 + 32) * 4] in Stack
    let t160 = output.s0.y.yi.base.s + t130
    let t161 = output.min.1 + output.s0.y.yi.base.s
    for (output.s0.y.yi.$n.rebased, 0, 36) {
     produce repeat_edge {
      let t163 = (((output.s0.y.yi.$n.rebased + t161) + 3) % 4)*(t127 + 32)
      let t162 = ((max(min(output.s0.y.yi.$n.rebased + t160, input.extent.1), 1) + -1)*input.stride.1) - input.min.0
      for (repeat_edge.s0._0._0, 0, t142) {
       let repeat_edge.s0._0._0i.base.s = min((repeat_edge.s0._0._0*32) + 30, output.extent.0)
       repeat_edge[ramp((repeat_edge.s0._0._0i.base.s + t163) + -30, 1, 32)] = input[max(min(ramp((output.min.0 + repeat_edge.s0._0._0i.base.s) + -31, 1, 32), x32(t139 + -1)), x32(input.min.0)) + x32(t162)]
      }
     }
     if (2 <= output.s0.y.yi.$n.rebased) {
      consume repeat_edge {
       allocate max_y[uint8 * (t127 + 32) * 1] in Stack
       produce max_y {
        let t164 = output.s0.y.yi.$n.rebased + t161
        for (max_y.s0.x.x, 0, t142) {
         max_y[ramp(max_y.s0.x.x*32, 1, 32) aligned(32, 0)] = max(repeat_edge[ramp((((t164 + 1) % 4)*(t127 + 32)) + (max_y.s0.x.x*32), 1, 32) aligned(32, 0)], max(repeat_edge[ramp((((t164 + 2) % 4)*(t127 + 32)) + (max_y.s0.x.x*32), 1, 32) aligned(32, 0)], repeat_edge[ramp((((t164 + 3) % 4)*(t127 + 32)) + (max_y.s0.x.x*32), 1, 32) aligned(32, 0)]))
        }
       }
       consume max_y {
        let t165 = (((output.s0.y.yi.$n.rebased + t161) + -2)*output.stride.1) + t135
        for (output.s0.x.x, 0, t138) {
         let output.s0.x.xi.base.s = min(output.s0.x.x*32, output.extent.0 + -32)
         output[ramp(output.s0.x.xi.base.s + t165, 1, 32)] = max(max_y[ramp(output.s0.x.xi.base.s, 1, 32)], max(max_y[ramp(output.s0.x.xi.base.s + 1, 1, 32)], max_y[ramp(output.s0.x.xi.base.s + 2, 1, 32)]))
        }
       }
       free max_y
      }
     }
    }
    free repeat_edge
   }
  }
 }
}
}


