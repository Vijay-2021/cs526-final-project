module name=fully_connected_batch_0029_sample_0031, target=x86-64-linux-avx-avx2-disable_llvm_loop_opt-f16c-fma-sse41
external_plus_metadata func fully_connected_batch_0029_sample_0031 (input, input_zero, filter, filter_zero, bias, output_zero, output_multiplier, output_shift, output_min, output_max, output) {
assert((uint64)reinterpret((halide_buffer_t *)output.buffer) != (uint64)0, halide_error_buffer_argument_is_null("output"))
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
assert((uint64)reinterpret((halide_buffer_t *)filter.buffer) != (uint64)0, halide_error_buffer_argument_is_null("filter"))
assert((uint64)reinterpret((halide_buffer_t *)bias.buffer) != (uint64)0, halide_error_buffer_argument_is_null("bias"))
let bias = (void *)_halide_buffer_get_host((halide_buffer_t *)bias.buffer)
let bias.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)bias.buffer)
let bias.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)bias.buffer)
let bias.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)bias.buffer)
let bias.min.0 = _halide_buffer_get_min((halide_buffer_t *)bias.buffer, 0)
let bias.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)bias.buffer, 0)
let bias.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)bias.buffer, 0)
let filter = (void *)_halide_buffer_get_host((halide_buffer_t *)filter.buffer)
let filter.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)filter.buffer)
let filter.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)filter.buffer)
let filter.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)filter.buffer)
let filter.min.0 = _halide_buffer_get_min((halide_buffer_t *)filter.buffer, 0)
let filter.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)filter.buffer, 0)
let filter.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)filter.buffer, 0)
let filter.min.1 = _halide_buffer_get_min((halide_buffer_t *)filter.buffer, 1)
let filter.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)filter.buffer, 1)
let filter.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)filter.buffer, 1)
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let output = (void *)_halide_buffer_get_host((halide_buffer_t *)output.buffer)
let output.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)output.buffer)
let output.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)output.buffer)
let output.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)output.buffer)
let output.min.0 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 0)
let output.min.1 = _halide_buffer_get_min((halide_buffer_t *)output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)output.buffer, 1)
let bias.extent.0.required.s = min(max(max(-480 - output.extent.0, output.extent.0 + -1)/480, 0)*480, output.extent.0 + -480)
let input.extent.1.required.s = let t21 = (0 < output.extent.0) in (let t22 = (((((output.extent.0 + 479)/480)*((output.extent.1 + 8)/9)) + -1)/((output.extent.0 + 479)/480)) in (min(select(t21, t22, 0)*9, output.extent.1 + -9) - min(select(t21, 0, t22)*9, output.extent.1 + -9)))
let input.min.1.required.s = min(select(0 < output.extent.0, 0, ((((output.extent.0 + 479)/480)*((output.extent.1 + 8)/9)) + -1)/((output.extent.0 + 479)/480))*9, output.extent.1 + -9)
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)bias.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)bias.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)bias.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 0, 32, 1, (halide_dimension_t *)make_struct((min(output.extent.0, 480) + output.min.0) + -480, max(bias.extent.0.required.s, 0) + 480, 1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)filter.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)filter.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)filter.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct(0, (filter.extent.0/32)*32, 1, 0, (min(output.extent.0, 480) + output.min.0) + -480, max(bias.extent.0.required.s, 0) + 480, (filter.extent.0/32)*32, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct(0, (filter.extent.0/32)*32, 1, 0, input.min.1.required.s + output.min.1, input.extent.1.required.s + 9, (filter.extent.0/32)*32, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)output.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)output.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 1, 8, 2, (halide_dimension_t *)make_struct((min(output.extent.0, 480) + output.min.0) + -480, max(bias.extent.0.required.s, 0) + 480, 1, 0, input.min.1.required.s + output.min.1, input.extent.1.required.s + 9, max(bias.extent.0.required.s, 0) + 480, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)output.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)bias.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)filter.buffer))))) {
 assert(bias.type == (uint32)73728, halide_error_bad_type("Input buffer bias", bias.type, (uint32)73728))
 assert(bias.dimensions == 1, halide_error_bad_dimensions("Input buffer bias", bias.dimensions, 1))
 assert(filter.type == (uint32)67585, halide_error_bad_type("Input buffer filter", filter.type, (uint32)67585))
 assert(filter.dimensions == 2, halide_error_bad_dimensions("Input buffer filter", filter.dimensions, 2))
 assert(input.type == (uint32)67585, halide_error_bad_type("Input buffer input", input.type, (uint32)67585))
 assert(input.dimensions == 2, halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
 assert(output.type == (uint32)67585, halide_error_bad_type("Output buffer output", output.type, (uint32)67585))
 assert(output.dimensions == 2, halide_error_bad_dimensions("Output buffer output", output.dimensions, 2))
 assert(((bias.min.0 + 480) <= (min(output.extent.0, 480) + output.min.0)) && (((max(bias.extent.0.required.s, 0) + min(output.extent.0, 480)) + output.min.0) <= (bias.extent.0 + bias.min.0)), halide_error_access_out_of_bounds("Input buffer bias", 0, (min(output.extent.0, 480) + output.min.0) + -480, ((max(bias.extent.0.required.s, 0) + min(output.extent.0, 480)) + output.min.0) + -1, bias.min.0, (bias.extent.0 + bias.min.0) + -1))
 assert(0 <= bias.extent.0, halide_error_buffer_extents_negative("Input buffer bias", 0, bias.extent.0))
 assert((filter.min.0 <= 0) && (0 <= ((filter.extent.0 % 32) + filter.min.0)), halide_error_access_out_of_bounds("Input buffer filter", 0, 0, ((filter.extent.0/32)*32) + -1, filter.min.0, (filter.extent.0 + filter.min.0) + -1))
 assert(0 <= filter.extent.0, halide_error_buffer_extents_negative("Input buffer filter", 0, filter.extent.0))
 assert(((filter.min.1 + 480) <= (min(output.extent.0, 480) + output.min.0)) && (((max(bias.extent.0.required.s, 0) + min(output.extent.0, 480)) + output.min.0) <= (filter.extent.1 + filter.min.1)), halide_error_access_out_of_bounds("Input buffer filter", 1, (min(output.extent.0, 480) + output.min.0) + -480, ((max(bias.extent.0.required.s, 0) + min(output.extent.0, 480)) + output.min.0) + -1, filter.min.1, (filter.extent.1 + filter.min.1) + -1))
 assert(0 <= filter.extent.1, halide_error_buffer_extents_negative("Input buffer filter", 1, filter.extent.1))
 assert((input.min.0 <= 0) && (((filter.extent.0/32)*32) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, 0, ((filter.extent.0/32)*32) + -1, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert((input.min.1 <= (input.min.1.required.s + output.min.1)) && ((((input.min.1.required.s + output.min.1) + input.extent.1.required.s) + 9) <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required.s + output.min.1, ((input.min.1.required.s + output.min.1) + input.extent.1.required.s) + 8, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert(max(max(bias.extent.0.required.s, 0) + min(output.extent.0, 480), 480) <= output.extent.0, halide_error_access_out_of_bounds("Output buffer output", 0, (min(output.extent.0, 480) + output.min.0) + -480, ((max(bias.extent.0.required.s, 0) + min(output.extent.0, 480)) + output.min.0) + -1, output.min.0, (output.extent.0 + output.min.0) + -1))
 assert((0 <= input.min.1.required.s) && ((((input.min.1.required.s + output.min.1) + input.extent.1.required.s) + 9) <= (output.extent.1 + output.min.1)), halide_error_access_out_of_bounds("Output buffer output", 1, input.min.1.required.s + output.min.1, ((input.min.1.required.s + output.min.1) + input.extent.1.required.s) + 8, output.min.1, (output.extent.1 + output.min.1) + -1))
 assert(0 <= output.extent.1, halide_error_buffer_extents_negative("Output buffer output", 1, output.extent.1))
 assert(bias.stride.0 == 1, halide_error_constraint_violated("bias.stride.0", bias.stride.0, "1", 1))
 assert(filter.stride.0 == 1, halide_error_constraint_violated("filter.stride.0", filter.stride.0, "1", 1))
 assert(filter.min.0 == 0, halide_error_constraint_violated("filter.min.0", filter.min.0, "0", 0))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 assert(output.stride.0 == 1, halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
 let filter.total_extent.1 = int64(filter.extent.1)*int64(filter.extent.0)
 let input.total_extent.1 = int64(input.extent.1)*int64(input.extent.0)
 let output.total_extent.1 = int64(output.extent.1)*int64(output.extent.0)
 assert(uint64(bias.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("bias", uint64(bias.extent.0), (uint64)2147483647))
 assert(uint64(filter.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("filter", uint64(filter.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(filter.extent.1)*int64(filter.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("filter", (uint64)abs(int64(filter.extent.1)*int64(filter.stride.1)), (uint64)2147483647))
 assert(filter.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("filter", filter.total_extent.1, (int64)2147483647))
 assert(uint64(input.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", uint64(input.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(input.extent.1)*int64(input.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", (uint64)abs(int64(input.extent.1)*int64(input.stride.1)), (uint64)2147483647))
 assert(input.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
 assert(uint64(output.extent.0) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", uint64(output.extent.0), (uint64)2147483647))
 assert((uint64)abs(int64(output.extent.1)*int64(output.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("output", (uint64)abs(int64(output.extent.1)*int64(output.stride.1)), (uint64)2147483647))
 assert(output.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
 assert(!bias.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer bias"))
 assert(!filter.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer filter"))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert(!output.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer output"))
 assert(bias != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer bias"))
 assert(filter != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer filter"))
 assert(input != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer input"))
 assert(output != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer output"))
 let output.s0.c.c.c.loop_extent = ((output.extent.0 + 479)/480)*((output.extent.1 + 8)/9)
 produce output {
  let t32 = (output.extent.0 + 479)/480
  let t33 = (filter.extent.0/32)*32
  let t34 = output.min.0 - filter.min.1
  let t36 = 0 - (output.min.1*output.stride.1)
  let t35 = (input.min.1*input.stride.1) + input.min.0
  parallel (output.s0.c.c.c, 0, output.s0.c.c.c.loop_extent) {
   let output.s0.c.ci.base.s = min((output.s0.c.c.c % t32)*480, output.extent.0 + -480)
   let output.s0.b.bi.base.s = min((output.s0.c.c.c/t32)*9, output.extent.1 + -9)
   let t57 = output.min.1 + output.s0.b.bi.base.s
   let t58 = t57 + 1
   let t59 = t57 + 2
   let t60 = t57 + 3
   let t61 = t57 + 4
   let t62 = t57 + 5
   let t63 = t57 + 6
   let t64 = t57 + 7
   let t65 = t57 + 8
   let t47 = (input.stride.1*t65) - t35
   let t46 = (input.stride.1*t64) - t35
   let t45 = (input.stride.1*t63) - t35
   let t44 = (input.stride.1*t62) - t35
   let t43 = (input.stride.1*t61) - t35
   let t42 = (input.stride.1*t60) - t35
   let t41 = (input.stride.1*t59) - t35
   let t40 = (input.stride.1*t58) - t35
   let t39 = (input.stride.1*t57) - t35
   let t56 = ((output.stride.1*t65) + t36) + output.s0.c.ci.base.s
   let t55 = ((output.stride.1*t64) + t36) + output.s0.c.ci.base.s
   let t54 = ((output.stride.1*t63) + t36) + output.s0.c.ci.base.s
   let t53 = ((output.stride.1*t62) + t36) + output.s0.c.ci.base.s
   let t52 = ((output.stride.1*t61) + t36) + output.s0.c.ci.base.s
   let t51 = ((output.stride.1*t60) + t36) + output.s0.c.ci.base.s
   let t50 = ((output.stride.1*t59) + t36) + output.s0.c.ci.base.s
   let t49 = ((output.stride.1*t58) + t36) + output.s0.c.ci.base.s
   let t48 = ((output.stride.1*t57) + t36) + output.s0.c.ci.base.s
   let t38 = output.s0.c.ci.base.s + t34
   let t37 = output.min.0 + output.s0.c.ci.base.s
   for (output.s0.c.ci.ci, 0, 15) {
    allocate multiplied[int32 * 288] in Stack
    produce multiplied {
     let t66 = (output.s0.c.ci.ci*32) + t37
     for (multiplied.s0.b.rebased, 0, 9) {
      let t67 = multiplied.s0.b.rebased*4
      for (multiplied.s0.c.c, 0, 4) {
       let multiplied.s0.c.ci.base = (multiplied.s0.c.c*8) + t66
       multiplied[ramp((multiplied.s0.c.c + t67)*8, 1, 8) aligned(8, 0)] = bias[ramp(multiplied.s0.c.ci.base - bias.min.0, 1, 8)]
      }
     }
     let t68 = ((output.s0.c.ci.ci*32) + t38)*filter.stride.1
     for (multiplied.s1.r9$x, 0, t33) {
      multiplied[ramp(0, 1, 32)] = multiplied[ramp(0, 1, 32)] + (int32x32)widening_mul((int16x32)widening_sub(filter[ramp(multiplied.s1.r9$x + t68, filter.stride.1, 32)], x32((uint8)filter_zero)), x32(int16(input[multiplied.s1.r9$x + t39]) - int16((uint8)input_zero)))
      multiplied[ramp(32, 1, 32)] = multiplied[ramp(32, 1, 32)] + (int32x32)widening_mul((int16x32)widening_sub(filter[ramp(multiplied.s1.r9$x + t68, filter.stride.1, 32)], x32((uint8)filter_zero)), x32(int16(input[multiplied.s1.r9$x + t40]) - int16((uint8)input_zero)))
      multiplied[ramp(64, 1, 32)] = multiplied[ramp(64, 1, 32)] + (int32x32)widening_mul((int16x32)widening_sub(filter[ramp(multiplied.s1.r9$x + t68, filter.stride.1, 32)], x32((uint8)filter_zero)), x32(int16(input[multiplied.s1.r9$x + t41]) - int16((uint8)input_zero)))
      multiplied[ramp(96, 1, 32)] = multiplied[ramp(96, 1, 32)] + (int32x32)widening_mul((int16x32)widening_sub(filter[ramp(multiplied.s1.r9$x + t68, filter.stride.1, 32)], x32((uint8)filter_zero)), x32(int16(input[multiplied.s1.r9$x + t42]) - int16((uint8)input_zero)))
      multiplied[ramp(128, 1, 32)] = multiplied[ramp(128, 1, 32)] + (int32x32)widening_mul((int16x32)widening_sub(filter[ramp(multiplied.s1.r9$x + t68, filter.stride.1, 32)], x32((uint8)filter_zero)), x32(int16(input[multiplied.s1.r9$x + t43]) - int16((uint8)input_zero)))
      multiplied[ramp(160, 1, 32)] = multiplied[ramp(160, 1, 32)] + (int32x32)widening_mul((int16x32)widening_sub(filter[ramp(multiplied.s1.r9$x + t68, filter.stride.1, 32)], x32((uint8)filter_zero)), x32(int16(input[multiplied.s1.r9$x + t44]) - int16((uint8)input_zero)))
      multiplied[ramp(192, 1, 32)] = multiplied[ramp(192, 1, 32)] + (int32x32)widening_mul((int16x32)widening_sub(filter[ramp(multiplied.s1.r9$x + t68, filter.stride.1, 32)], x32((uint8)filter_zero)), x32(int16(input[multiplied.s1.r9$x + t45]) - int16((uint8)input_zero)))
      multiplied[ramp(224, 1, 32)] = multiplied[ramp(224, 1, 32)] + (int32x32)widening_mul((int16x32)widening_sub(filter[ramp(multiplied.s1.r9$x + t68, filter.stride.1, 32)], x32((uint8)filter_zero)), x32(int16(input[multiplied.s1.r9$x + t46]) - int16((uint8)input_zero)))
      multiplied[ramp(256, 1, 32)] = multiplied[ramp(256, 1, 32)] + (int32x32)widening_mul((int16x32)widening_sub(filter[ramp(multiplied.s1.r9$x + t68, filter.stride.1, 32)], x32((uint8)filter_zero)), x32(int16(input[multiplied.s1.r9$x + t47]) - int16((uint8)input_zero)))
     }
    }
    consume multiplied {
     output[ramp((output.s0.c.ci.ci*32) + t48, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)rounding_mul_shift_right(multiplied[ramp(0, 1, 32)], x32(output_multiplier), x32((uint32)31)), x32(output_shift)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
     output[ramp((output.s0.c.ci.ci*32) + t49, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)rounding_mul_shift_right(multiplied[ramp(32, 1, 32)], x32(output_multiplier), x32((uint32)31)), x32(output_shift)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
     output[ramp((output.s0.c.ci.ci*32) + t50, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)rounding_mul_shift_right(multiplied[ramp(64, 1, 32)], x32(output_multiplier), x32((uint32)31)), x32(output_shift)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
     output[ramp((output.s0.c.ci.ci*32) + t51, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)rounding_mul_shift_right(multiplied[ramp(96, 1, 32)], x32(output_multiplier), x32((uint32)31)), x32(output_shift)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
     output[ramp((output.s0.c.ci.ci*32) + t52, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)rounding_mul_shift_right(multiplied[ramp(128, 1, 32)], x32(output_multiplier), x32((uint32)31)), x32(output_shift)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
     output[ramp((output.s0.c.ci.ci*32) + t53, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)rounding_mul_shift_right(multiplied[ramp(160, 1, 32)], x32(output_multiplier), x32((uint32)31)), x32(output_shift)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
     output[ramp((output.s0.c.ci.ci*32) + t54, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)rounding_mul_shift_right(multiplied[ramp(192, 1, 32)], x32(output_multiplier), x32((uint32)31)), x32(output_shift)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
     output[ramp((output.s0.c.ci.ci*32) + t55, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)rounding_mul_shift_right(multiplied[ramp(224, 1, 32)], x32(output_multiplier), x32((uint32)31)), x32(output_shift)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
     output[ramp((output.s0.c.ci.ci*32) + t56, 1, 32)] = max(min(uint8x32(max(min((int16x32)saturating_add(int16x32(max(min((int32x32)rounding_shift_right((int32x32)rounding_mul_shift_right(multiplied[ramp(256, 1, 32)], x32(output_multiplier), x32((uint32)31)), x32(output_shift)), x32(32767)), x32(-32768))), x32(int16((uint8)output_zero))), x32((int16)255)), x32((int16)0))), x32((uint8)output_max)), x32((uint8)output_min))
     free multiplied
    }
   }
  }
 }
}
}


