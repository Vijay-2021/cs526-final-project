#ifndef gaussian3x3_batch_0064_sample_0013_SCHEDULE_H
#define gaussian3x3_batch_0064_sample_0013_SCHEDULE_H

// MACHINE GENERATED -- DO NOT EDIT
// This schedule was automatically generated by Adams2019
// for target=x86-64-linux-avx-avx2-disable_llvm_loop_opt-f16c-fma-sse41  // NOLINT
// with machine_params=32,24000000,40

#include "Halide.h"


inline void apply_schedule_gaussian3x3_batch_0064_sample_0013(
    ::Halide::Pipeline pipeline,
    ::Halide::Target target
) {
    using ::Halide::Func;
    using ::Halide::MemoryType;
    using ::Halide::RVar;
    using ::Halide::TailStrategy;
    using ::Halide::Var;
    Func output = pipeline.get_func(4);
    Func cols = pipeline.get_func(3);
    Func rows = pipeline.get_func(2);
    Func input_16 = pipeline.get_func(1);
    Var x(output.get_schedule().dims()[0].var);
    Var xi("xi");
    Var xii("xii");
    Var y(output.get_schedule().dims()[1].var);
    Var yi("yi");
    Var yii("yii");
    Var yiii("yiii");
    output
        .split(y, y, yi, 36, TailStrategy::ShiftInwards)
        .split(yi, yi, yii, 9, TailStrategy::ShiftInwards)
        .split(yii, yii, yiii, 3, TailStrategy::ShiftInwards)
        .split(x, x, xi, 128, TailStrategy::ShiftInwards)
        .split(xi, xi, xii, 32, TailStrategy::ShiftInwards)
        .unroll(xi)
        .vectorize(xii)
        .compute_root()
        .reorder({xii, xi, x, yiii, yii, yi, y})
        .parallel(y);
    cols
        .store_in(MemoryType::Stack)
        .split(x, x, xi, 16, TailStrategy::RoundUp)
        .unroll(x)
        .vectorize(xi)
        .compute_at(output, x)
        .reorder({xi, x, y});
    rows
        .store_in(MemoryType::Stack)
        .split(x, x, xi, 16, TailStrategy::RoundUp)
        .vectorize(xi)
        .compute_at(output, yiii)
        .store_at(output, yii)
        .reorder({xi, x, y});
    input_16
        .store_in(MemoryType::Stack)
        .split(x, x, xi, 32, TailStrategy::ShiftInwards)
        .vectorize(xi)
        .compute_at(output, yi)
        .store_at(output, y)
        .reorder({xi, x, y});

}

#endif  // gaussian3x3_batch_0064_sample_0013_SCHEDULE_H
