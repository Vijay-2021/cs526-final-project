#lang rosette
(require rosette/lib/synthax)
(require rosette/lib/angelic)
(require rosette/lib/destruct)
(require rosette/solver/smt/boolector)
(require hydride)



(provide (all-defined-out))
  
(define starting_hash (hash 
(vec-min '(buf uint8 256) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_m_pminub_dsl (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x2 4)) 256 8) (reg (bv #x1 4)) 256 8) 5)
(vec-max '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x0 4)) 256 8) (reg (bv #x1 4)) 256 8) 4)
(x8 (int-imm (bv #x00007fff 32) #t)) (vector #t (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 0)
(x8 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) 0)
(x16 (int-imm (bv #xffff8000 32) #t)) (vector #t (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 512)) 0)
(int32x8 (int16x8 '(buf int32 256))) (vector #t (_mm256_cvtepi8_epi32_dsl (_mm_cvtepi64_epi32_dsl (reg (bv #x00 8)) 128 16 32 0) 128 16 32) 0)
(int64x8 (vec-shl '(buf int32 256) '(buf uint32 256))) (vector #t (_mm256_cvtepi8_epi32_dsl (_mm512_sllv_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 32 32) 256 32 64) 6)
(vec-min (vec-add '(buf int64 512) '(buf int64 512)) (x8 (int-imm (bv #x000000007fffffff 64) #t))) (vector #t (_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 512 64) 5)
(x8 (int-imm (bv #x1cc3 16) #t)) (vector #t (lit (bv #x1cc31cc31cc31cc31cc31cc31cc31cc3 128)) 0)
(vec-mul (int32x8 '(buf int16 128)) (int32x8 '(buf int16 128))) (vector #t (_mm_madd_pi16_dsl (_mm256_cvtepu16_epi32_dsl (reg (bv #x1 4)) 128 16 32) (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 128) 21)
(vec-max (vec-min '(buf int64 512) '(buf int64 512)) (x8 (int-imm (bv #xffffffff80000000 64) #t))) (vector #t (_mm512_max_epi16_dsl (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 512 64) 3)
(vec-add (vec-add '(buf int32 512) '(buf int32 512)) (x16 (int-imm (bv #x00000001 32) #t))) (vector #t (_mm256_add_epi8_dsl (_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 32) (reg (bv #x1 4)) 512 32) 2)
(vec-bwand (vec-add '(buf int32 512) '(buf int32 512)) (x16 (int-imm (bv #x00000001 32) #t))) (vector #t (_mm256_and_si256_dsl (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32) (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 512 512) 16)
(x8 (int-imm (bv #x00008000 32) #t)) (vector #t (lit (bv #x0000800000008000000080000000800000008000000080000000800000008000 256)) 0)
(x16 (int-imm (bv #x0000000f 32) #f)) (vector #t (lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 512)) 0)
(vec-add (vec-add '(buf int64 512) '(buf int64 512)) (vec-shr '(buf int64 512) '(buf uint64 512))) (vector #t (_mm256_add_epi8_dsl (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x3 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x2 4)) (lit (bv #x0000000000000000 64)) 512 64 64) (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 512 64) 15)
(vec-add (vec-shr '(buf int64 512) '(buf uint64 512)) (vec-shr '(buf int64 512) '(buf uint64 512))) (vector #t (_mm256_add_epi8_dsl (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64) (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x3 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x2 4)) (lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 18)
(x8 (int-imm (bv #x0040 16) #t)) (vector #t (lit (bv #x00400040004000400040004000400040 128)) 0)
(x8 (int-imm (bv #x0000000000000001 64) #f)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(vec-max (vec-min '(buf uint8 256) '(buf uint8 256)) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 8) (_m_pminub_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 8) 256 8) 5)
(int64x8 (x8 '(buf int32 32))) (vector #t (_mm256_cvtepi8_epi32_dsl (_mm_set1_pi8_dsl (reg (bv #x00 8)) 256 32) 256 32 64) 0)
(vec-add (int16x8 '(buf int32 256)) (vec-add '(buf int16 128) '(buf int16 128))) (vector #t (_mm256_add_epi8_dsl (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x2 4)) 128 16) 128 16) 9)
(int32x8 (x8 (int-imm (bv #x5ad1 16) #t))) (vector #t (_mm256_cvtepi8_epi32_dsl (lit (bv #x5ad15ad15ad15ad15ad15ad15ad15ad1 128)) 128 16 32) 0)
(vec-add (vec-bwand '(buf int32 256) '(buf int32 256)) (vec-bwand '(buf int32 256) '(buf int32 256))) (vector #t (_mm256_add_epi8_dsl (_mm256_and_si256_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 256) (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 256) 256 32) 4)
(vec-add (vec-shr '(buf int32 256) '(buf int32 256)) (vec-bwand '(buf int32 256) '(buf int32 256))) (vector #t (_mm256_add_epi8_dsl (_mm256_and_si256_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 256) (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) 256 32) 20)
(x8 (int-imm (bv #x00000001 32) #t)) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(vec-add '(buf int16 128) (x8 (int-imm (bv #xfff0 16) #t))) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #xfff0fff0fff0fff0fff0fff0fff0fff0 128)) 128 16) 0)
(int32x8 (x8 (int-imm (bv #x0a20 16) #t))) (vector #t (_mm256_cvtepi8_epi32_dsl (lit (bv #x0a200a200a200a200a200a200a200a20 128)) 128 16 32) 0)
(x8 (int-imm (bv #xffffffff80000000 64) #t)) (vector #t (lit (bv #xffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000ffffffff80000000 512)) 0)
(x8 (int-imm (bv #x5ad1 16) #t)) (vector #t (lit (bv #x5ad15ad15ad15ad15ad15ad15ad15ad1 128)) 0)
(vec-max (vec-min '(buf uint8 256) (vec-max '(buf uint8 256) '(buf uint8 256))) (vec-min '(buf uint8 256) '(buf uint8 256))) (vector #t (_mm512_max_epu64_dsl (_m_pminub_dsl (_mm512_max_epu64_dsl (reg (bv #x2 4)) (reg (bv #x1 4)) 256 8) (reg (bv #x0 4)) 256 8) (_m_pminub_dsl (reg (bv #x4 4)) (reg (bv #x3 4)) 256 8) 256 8) 941)
(int16x8 '(buf uint8 64)) (vector #t (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 0)
(vec-mul (int16x8 '(buf uint8 64)) (x8 (int-imm (bv #x0040 16) #t))) (vector #t (_mm_mulhi_pi16_dsl (lit (bv #x00400040004000400040004000400040 128)) (interleave-vectors_dsl (lit (bv #x0000000000000000 64)) (reg (bv #x0 4)) 64 8) 128 16 0 32) 19)
(x8 (int-imm (bv #x00ff 16) #t)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff 128)) 0)
(vec-add '(buf uint16 512) '(buf uint16 512)) (vector #t (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 0)
(vec-shl '(buf int32 256) (int32x8 '(buf int16 128))) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x00000020 32)) (_mm256_cvtepi8_epi32_dsl (reg (bv #x1 4)) 128 16 32) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 32 32) 11)
(x8 (int-imm (bv #x0000000e 32) #f)) (vector #t (lit (bv #x0000000e0000000e0000000e0000000e0000000e0000000e0000000e0000000e 256)) 0)
(x8 (int-imm (bv #x0005 16) #t)) (vector #t (lit (bv #x00050005000500050005000500050005 128)) 1)
(uint8x16 (vec-max '(buf int16 256) '(buf int16 256))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) 128 8 16 0) 1)
(vec-shl (int16x16 '(buf uint8 128)) (x16 (int-imm (bv #x0002 16) #f))) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 256 16 16) 2)
(vec-add '(buf int16 512) (x32 (int-imm (bv #x0008 16) #t))) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 512 16) 0)
(x8 '(buf int32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 0)
(x8 (int-imm (bv #x000000000000001e 64) #f)) (vector #t (lit (bv #x000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e000000000000001e 512)) 0)
(int32x8 (vec-add '(buf int16 128) '(buf int16 128))) (vector #t (_mm256_cvtepi8_epi32_dsl (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 128 16 32) 2)
(int32x8 (vec-sub '(buf int16 128) '(buf int16 128))) (vector #t (_mm256_cvtepi8_epi32_dsl (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 128 16 32) 4)
(vec-min (vec-shr '(buf int32 512) '(buf uint32 512)) (x16 (int-imm (bv #x00007fff 32) #t))) (vector #t (_mm256_min_epi16_dsl (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 512 32 32) 512 32) 30)
(x8 (int-imm (bv #xdb33 16) #t)) (vector #t (lit (bv #xdb33db33db33db33db33db33db33db33 128)) 0)
(x8 (int-imm (bv #x00003fff 32) #t)) (vector #t (lit (bv #x00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff 256)) 1)
(vec-mul (int64x8 '(buf int32 256)) (int64x8 '(buf int32 256))) (vector #t (_mm_mulhi_epu16_dsl (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) (_mm256_cvtepi8_epi32_dsl (reg (bv #x1 4)) 256 32 64) 512 64 0 128) 19)
(vec-add (int64x8 '(buf int32 256)) (int64x8 '(buf int32 256))) (vector #t (_mm256_add_epi8_dsl (_mm256_cvtepi8_epi32_dsl (reg (bv #x1 4)) 256 32 64) (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) 512 64) 1)
(vec-add (int16x8 '(buf int32 256)) (int16x8 '(buf int32 256))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 128 16 32 0) 1)
(x16 (int-imm (bv #x0006 16) #t)) (vector #t (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 0)
(vec-add (vec-add '(buf int16 128) '(buf int16 128)) (x8 (int-imm (bv #x0005 16) #t))) (vector #t (_mm256_add_epi8_dsl (lit (bv #x00050005000500050005000500050005 128)) (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) 128 16) 6)
(vec-shr (vec-sub '(buf int32 256) '(buf int32 256)) (x8 (int-imm (bv #x0000000f 32) #f))) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 256)) (lit (bv #xffffffff 32)) (_mm_sub_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) (lit (bv #x00000000 32)) 256 32 32) 8)
(vec-bwand (vec-mul '(buf uint32 512) '(buf uint32 512)) (x16 (int-imm (bv #x00000001 32) #f))) (vector #t (_mm256_and_si256_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32) 512 32) 32)
(vec-add (vec-add '(buf uint32 512) '(buf uint32 512)) (x16 (int-imm (bv #x00000001 32) #f))) (vector #t (_mm256_add_epi8_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 32) 512 32) 3)
(vec-shr (vec-mul '(buf uint32 512) '(buf uint32 512)) (x16 (int-imm (bv #x00000001 32) #f))) (vector #t (_mm_srlv_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) (lit (bv #x00000020 32)) (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) (_mm_mulhi_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32 0 64) 512 32 32) 11)
(x32 (int-imm (bv #x0008 16) #f)) (vector #t (lit (bv #x00080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008000800080008 512)) 0)
(x16 (int-imm (bv #x0006 16) #f)) (vector #t (lit (bv #x0006000600060006000600060006000600060006000600060006000600060006 256)) 0)
(int64x8 (int32x8 '(buf int16 128))) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 64) 0)
(int32x8 '(buf int16 128)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 0)
(vec-max (vec-min '(buf int16 128) '(buf int16 128)) (x8 (int-imm (bv #x0000 16) #t))) (vector #t (_mm512_max_epi16_dsl (_mm256_min_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 128 16) (lit (bv #x00000000000000000000000000000000 128)) 128 16) 5)
(vec-shr (x8 (int-imm (bv #x00003fff 32) #t)) (x8 (int-imm (bv #x00000001 32) #f))) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) (lit (bv #xffffffff 32)) (lit (bv #x00003fff00003fff00003fff00003fff00003fff00003fff00003fff00003fff 256)) (lit (bv #x00000000 32)) 256 32 32) 0)
(uint8x32 (vec-min '(buf uint16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 16) 256 8 16 0) 1)
(vec-bwand '(buf int16 128) '(buf int16 128)) (vector #t (_mm256_and_si256_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 128) 1)
(vec-mul (int32x16 '(buf int16 256)) (int32x16 '(buf int16 256))) (vector #t (_mm_madd_pi16_dsl (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 16 32) (_mm256_cvtepu16_epi32_dsl (reg (bv #x1 4)) 256 16 32) 256) 78)
(vec-bwand (x16 (int-imm (bv #x00007fff 32) #t)) (x16 (int-imm (bv #x00000001 32) #t))) (vector #t (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 0)
(vec-shr (x16 (int-imm (bv #x00007fff 32) #t)) (x16 (int-imm (bv #x00000001 32) #f))) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) (lit (bv #xffffffff 32)) (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) (lit (bv #x00000000 32)) 512 32 32) 1)
(vec-shr (int32x8 '(buf int64 512)) (x8 '(buf uint32 32))) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (_mm_set1_pi8_dsl (reg (bv #x1 4)) 256 32) (lit (bv #xffffffff 32)) (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) (lit (bv #x00000000 32)) 256 32 32) 2)
(vec-add (vec-add '(buf int64 512) '(buf int64 512)) (x8 (int-imm (bv #x0000000000000001 64) #t))) (vector #t (_mm256_add_epi8_dsl (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 512 64) 2)
(vec-bwand (vec-mul '(buf int64 512) '(buf int64 512)) (x8 (int-imm (bv #x0000000000000001 64) #t))) (vector #t (_mm256_and_si256_dsl (_mm256_and_si256_dsl (reg (bv #x1 4)) (lit (bv #x00000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001 512)) 512 32) (reg (bv #x0 4)) 512 512) 50)
(x16 (int-imm (bv #x06 8) #t)) (vector #t (lit (bv #x06060606060606060606060606060606 128)) 0)
(x8 (int-imm (bv #x0000007f 32) #t)) (vector #t (lit (bv #x0000007f0000007f0000007f0000007f0000007f0000007f0000007f0000007f 256)) 1)
(int16x8 '(buf int32 256)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) 1)
(int64x8 '(buf int32 256)) (vector #t (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 256 32 64) 0)
(vec-add (vec-bwand '(buf int64 512) '(buf int64 512)) (vec-bwand '(buf int64 512) '(buf int64 512))) (vector #t (_mm256_add_epi8_dsl (_mm256_and_si256_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 512 32) (_mm256_and_si256_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 512) 512 64) 8)
(uint32x16 '(buf uint16 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 16 32) 0)
(x16 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 8) 1)
(x8 '(buf uint8 8)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 64 8) 0)
(int32x8 (x8 (int-imm (bv #x591c 16) #t))) (vector #t (_mm256_cvtepi8_epi32_dsl (lit (bv #x591c591c591c591c591c591c591c591c 128)) 128 16 32) 0)
(vec-min (vec-shr '(buf int32 256) '(buf uint32 256)) (x8 (int-imm (bv #x00007fff 32) #t))) (vector #t (_mm256_min_epi16_dsl (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 256)) 256 32) 13)
(vec-min '(buf uint8 256) (x32 '(buf uint8 8))) (vector #t (_m_pminub_dsl (reg (bv #x0 4)) (_mm_set1_pi8_dsl (reg (bv #x1 4)) 256 8) 256 8) 3)
(uint16x32 '(buf uint8 256)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 256 8 16) 0)
(vec-sub (int16x8 '(buf uint8 64)) (int16x8 '(buf uint8 64))) (vector #t (_mm_sub_pi16_dsl (interleave-vectors_dsl (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) 64 8) (interleave-vectors_dsl (lit (bv #xffffffffffffffff 64)) (reg (bv #x1 4)) 64 8) 128 16) 2)
(x32 (int-imm (bv #x0004 16) #f)) (vector #t (lit (bv #x00040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004000400040004 512)) 1)
(x8 (int-imm (bv #x000000007fffffff 64) #t)) (vector #t (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) 0)
(int32x8 (x8 (int-imm (bv #xdb33 16) #t))) (vector #t (_mm256_cvtepi8_epi32_dsl (lit (bv #xdb33db33db33db33db33db33db33db33 128)) 128 16 32) 0)
(vec-sat-add (int16x8 '(buf int32 256)) (x8 (int-imm (bv #x0080 16) #t))) (vector #t (_m_paddsb_dsl (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) (lit (bv #x00800080008000800080008000800080 128)) 128 16) 4)
(x8 '(buf uint32 32)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 32) 0)
(vec-add (vec-shr '(buf int32 256) '(buf uint32 256)) (vec-shr '(buf int32 256) '(buf uint32 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x3 4)) (lit (bv #xffffffff 32)) (reg (bv #x2 4)) (lit (bv #x00000000 32)) 256 32 32) (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) 256 32) 21)
(vec-mul (int16x16 '(buf uint16 256)) (int16x16 '(buf int8 128))) (vector #t (_mm_mulhi_pi16_dsl (_mm256_cvtepi8_epi32_dsl (reg (bv #x1 4)) 128 8 16) (reg (bv #x0 4)) 256 16 0 32) 137)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (x16 '(buf int16 16))) (vector #t (_mm256_add_epi8_dsl (_mm_set1_pi8_dsl (reg (bv #x2 4)) 256 16) (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 256 16) 9)
(vec-shr (vec-add '(buf int32 256) '(buf int32 256)) (x8 (int-imm (bv #x00000007 32) #f))) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (lit (bv #x0000000700000007000000070000000700000007000000070000000700000007 256)) (lit (bv #xffffffff 32)) (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) (lit (bv #x00000000 32)) 256 32 32) 12)
(vec-max (vec-min '(buf uint8 128) '(buf uint8 128)) (x16 '(buf uint8 8))) (vector #t (_mm512_max_epu64_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 8) (_mm_set1_pi8_dsl (reg (bv #x2 4)) 128 8) 128 8) 10)
(vec-add (vec-add '(buf int32 512) '(buf int32 512)) (vec-shr '(buf int32 512) '(buf uint32 512))) (vector #t (_mm256_add_epi8_dsl (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32) (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x3 4)) (lit (bv #xffffffff 32)) (reg (bv #x2 4)) (lit (bv #x00000000 32)) 512 32 32) 512 32) 9)
(vec-sub (vec-max '(buf uint16 256) '(buf uint16 256)) (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_sub_pi16_dsl (_mm512_max_epu64_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16) (_m_pminub_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 16) 256 16) 7)
(vec-add (vec-shl '(buf uint16 256) '(buf uint16 256)) (vec-add '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) (_mm256_add_epi8_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 16) 256 16) 11)
(vec-shl '(buf int16 256) (x16 (int-imm (bv #x0002 16) #f))) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 0)
(uint32x16 (x16 '(buf uint16 16))) (vector #t (_mm256_broadcastmw_epi32_dsl (reg (bv #x0 4)) 256 16 32) 0)
(vec-bwand (x16 (int-imm (bv #x00007fff 32) #f)) (x16 (int-imm (bv #x00000001 32) #f))) (vector #t (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 0)
(vec-shr (x16 (int-imm (bv #x00007fff 32) #f)) (x16 (int-imm (bv #x00000001 32) #f))) (vector #t (_mm_srlv_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) (lit (bv #x00000020 32)) (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) (lit (bv #x00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff00007fff 512)) 512 32 32) 0)
(vec-max (vec-min '(buf int32 256) '(buf int32 256)) (x8 (int-imm (bv #xffff8000 32) #t))) (vector #t (_mm512_max_epi16_dsl (lit (bv #xffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000ffff8000 256)) (_mm256_min_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 256 32) 5)
(vec-shl (int32x8 '(buf int16 128)) (x8 (int-imm (bv #x0000000e 32) #f))) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x00000020 32)) (lit (bv #x0000000e0000000e0000000e0000000e0000000e0000000e0000000e0000000e 256)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 256 32 32) 2)
(interleave-vectors_dsl 'arg0 'arg1 128 16) (vector #t (_mm256_unpackhi_epi8_dsl (_mm512_packus_epi16_dsl (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) (_mm256_cvtepu16_epi32_dsl (reg (bv #x1 4)) 128 16 32) 256 16 16 32 32) (_mm256_packs_epi32_dsl (lit (bv #x0001000100010001000100010001000100010001000100010001000100010001 256)) (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 256 16 16 32 32) 256 16 16) 39)
(vec-bwand (x8 (int-imm (bv #x000000003fffffff 64) #t)) (x8 (int-imm (bv #x0000000000000001 64) #t))) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(vec-max '(buf uint8 256) '(buf uint8 256)) (vector #t (_mm512_max_epu64_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 8) 0)
(x8 (int-imm (bv #x000000003fffffff 64) #t)) (vector #t (lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) 0)
(vec-shr (x8 (int-imm (bv #x000000003fffffff 64) #t)) (x8 (int-imm (bv #x0000000000000001 64) #f))) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) (lit (bv #xffffffffffffffff 64)) (lit (bv #x000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff000000003fffffff 512)) (lit (bv #x0000000000000000 64)) 512 64 64) 2)
(vec-bwand (x8 (int-imm (bv #x00003fff 32) #t)) (x8 (int-imm (bv #x00000001 32) #t))) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(vec-add (vec-add '(buf int32 256) '(buf int32 256)) (x8 (int-imm (bv #x00000001 32) #t))) (vector #t (_mm256_add_epi8_dsl (reg (bv #x0 4)) (_mm256_add_epi8_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) (reg (bv #x1 4)) 256 32) 256 32) 4)
(vec-bwand (vec-mul '(buf int32 256) '(buf int32 256)) (x8 (int-imm (bv #x00000001 32) #t))) (vector #t (_mm256_and_si256_dsl (reg (bv #x0 4)) (_mm256_and_si256_dsl (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) (reg (bv #x1 4)) 256 256) 256 256) 68)
(x16 (int-imm (bv #x0001 16) #f)) (vector #t (_mm_cvtepi64_epi32_dsl (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 256 16 32 0) 0)
(x8 (int-imm (bv #x001f 16) #t)) (vector #t (lit (bv #x001f001f001f001f001f001f001f001f 128)) 0)
(vec-sat-add (int16x8 '(buf int32 256)) (x8 '(buf int16 16))) (vector #t (_m_paddsb_dsl (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 128 16 32 0) (_mm_set1_pi8_dsl (reg (bv #x1 4)) 128 16) 128 16) 3)
(interleave-vectors_dsl 'arg0 'arg1 64 8) (vector #t (_mm_unpackhi_epi8_dsl (_mm_set1_pi8_dsl (reg (bv #x1 4)) 128 64) (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 64) 64 8 8 64) 2)
(vec-shr (vec-add '(buf int32 512) '(buf int32 512)) (x16 (int-imm (bv #x00000001 32) #f))) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) (lit (bv #xffffffff 32)) (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32) (lit (bv #x00000000 32)) 512 32 32) 12)
(uint8x16 (vec-min '(buf uint16 256) '(buf uint16 256))) (vector #t (_mm_cvtepi64_epi32_dsl (_m_pminub_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 128 8 16 0) 1)
(vec-add (vec-shl '(buf int16 256) '(buf uint16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm256_add_epi8_dsl (reg (bv #x3 4)) (reg (bv #x2 4)) 256 16) (_mm512_sllv_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (reg (bv #x0 4)) 256 16 16) 256 16) 9)
(vec-shr (vec-add '(buf int64 512) '(buf int64 512)) (x8 (int-imm (bv #x000000000000001e 64) #f))) (vector #t (_mm_sra_epi64_dsl (lit (bv #x000000000000001e000000000000001e 128)) (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 512) 12)
(x32 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 512)) 0)
(x16 (int-imm (bv #x00ff 16) #f)) (vector #t (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)) 0)
(x8 (int-imm (bv #x00000000 32) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(uint16x16 (vec-shr '(buf uint32 512) '(buf uint32 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm_srlv_epi32_dsl (reg (bv #x1 4)) (lit (bv #x00000020 32)) (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) (reg (bv #x0 4)) 512 32 32) 256 16 32 0) 1)
(vec-shr (vec-add '(buf int32 256) '(buf int32 256)) (x8 (int-imm (bv #x00000001 32) #f))) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) (lit (bv #xffffffff 32)) (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) (lit (bv #x00000000 32)) 256 32 32) 10)
(vec-shr (vec-mul '(buf int32 256) '(buf int32 256)) (x8 (int-imm (bv #x00000001 32) #f))) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) (lit (bv #xffffffff 32)) (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) (lit (bv #x00000000 32)) 256 32 32) 1036)
(uint8x32 (vec-shr '(buf int16 512) '(buf uint16 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_srav_epi64_dsl (lit (bv #x0010 16)) (reg (bv #x1 4)) (lit (bv #xffff 16)) (reg (bv #x0 4)) (lit (bv #x0000 16)) 512 16 16) 256 8 16 0) 1)
(x16 (int-imm (bv #x0000 16) #t)) (vector #t (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) 0)
(vec-add (vec-shr '(buf int32 256) '(buf uint32 256)) (vec-bwand '(buf int32 256) '(buf int32 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x1 4)) (lit (bv #xffffffff 32)) (reg (bv #x0 4)) (lit (bv #x00000000 32)) 256 32 32) (_mm256_and_si256_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 256) 256 32) 23)
(x8 (int-imm (bv #x09fb 16) #t)) (vector #t (lit (bv #x09fb09fb09fb09fb09fb09fb09fb09fb 128)) 0)
(vec-shr (vec-add '(buf int32 256) '(buf int32 256)) (x8 (int-imm (bv #x0000000e 32) #f))) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (lit (bv #x0000000e0000000e0000000e0000000e0000000e0000000e0000000e0000000e 256)) (lit (bv #xffffffff 32)) (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) (lit (bv #x00000000 32)) 256 32 32) 9)
(int32x8 '(buf int64 512)) (vector #t (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) 0)
(x8 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 128 16) 1)
(x16 '(buf int16 16)) (vector #t (_mm_set1_pi8_dsl (reg (bv #x0 4)) 256 16) 0)
(vec-shl (int32x8 '(buf int16 128)) (x8 (int-imm (bv #x00000010 32) #f))) (vector #t (interleave-vectors_dsl (reg (bv #x0 4)) (lit (bv #x00000000000000000000000000000000 128)) 128 16) 0)
(int16x16 (vec-max '(buf int32 512) '(buf int32 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32) 256 16 32 0) 0)
(vec-add (vec-mul '(buf int16 128) '(buf int16 128)) (x8 '(buf int16 16))) (vector #t (_mm256_add_epi8_dsl (_mm_set1_pi8_dsl (reg (bv #x2 4)) 128 16) (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 128 16 0 32) 128 16) 581)
(vec-min (vec-shr '(buf int64 512) '(buf uint64 512)) (x8 (int-imm (bv #x000000007fffffff 64) #t))) (vector #t (_mm256_min_epi16_dsl (lit (bv #x000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff000000007fffffff 512)) (_mm512_srav_epi64_dsl (lit (bv #x0000000000000040 64)) (reg (bv #x1 4)) (lit (bv #xffffffffffffffff 64)) (reg (bv #x0 4)) (lit (bv #x0000000000000000 64)) 512 64 64) 512 64) 23)
(x16 (int-imm (bv #x0002 16) #f)) (vector #t (lit (bv #x0002000200020002000200020002000200020002000200020002000200020002 256)) 0)
(int32x8 (x8 (int-imm (bv #x09fb 16) #t))) (vector #t (_mm256_cvtepi8_epi32_dsl (lit (bv #x09fb09fb09fb09fb09fb09fb09fb09fb 128)) 128 16 32) 0)
(vec-add (vec-add '(buf int32 256) '(buf int32 256)) (vec-shr '(buf int32 256) '(buf uint32 256))) (vector #t (_mm256_add_epi8_dsl (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (reg (bv #x3 4)) (lit (bv #xffffffff 32)) (reg (bv #x2 4)) (lit (bv #x00000000 32)) 256 32 32) (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 32) 256 32) 15)
(x8 (int-imm (bv #x0000000000000001 64) #t)) (vector #t (_mm_set1_pi8_dsl (lit (bv #x0000000000000001 64)) 512 64) 0)
(x8 (int-imm (bv #x0000000f 32) #t)) (vector #t (lit (bv #x0000000f0000000f0000000f0000000f0000000f0000000f0000000f0000000f 256)) 0)
(vec-if '(buf uint1 8) (x8 (int-imm (bv #x00000001 32) #t)) (x8 (int-imm (bv #x00000000 32) #t))) (vector #t (_mm256_movm_epi64_dsl (reg (bv #x0 4)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (_mm256_sign_epi8_dsl (lit (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 256)) (lit (bv #x00000000 32)) (lit (bv #x00000000 32)) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (lit (bv #xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 256)) 256 32 32 32) 256 32) 4)
(int64x8 (vec-mul '(buf int32 256) '(buf int32 256))) (vector #t (_mm256_cvtepi8_epi32_dsl (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32 0 64) 256 32 64) 12)
(int16x8 (vec-max '(buf int32 256) '(buf int32 256))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_max_epi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 128 16 32 0) 1)
(int16x8 (vec-mod '(buf int32 256) '(buf int32 256))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_rem_epu16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) 128 16 32 0) 19)
(vec-bwand (int16x8 '(buf int32 256)) (x8 (int-imm (bv #x7fff 16) #t))) (vector #t (_mm256_and_si256_dsl (lit (bv #x7fff7fff7fff7fff7fff7fff7fff7fff 128)) (_mm_cvtepi64_epi32_dsl (reg (bv #x00 8)) 128 16 32 0) 128 128) 0)
(vec-add (vec-add '(buf int16 256) '(buf int16 256)) (int16x16 '(buf uint8 128))) (vector #t (_mm256_add_epi8_dsl (_mm256_cvtepu16_epi32_dsl (reg (bv #x2 4)) 128 8 16) (_mm256_add_epi8_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) 256 16) 11)
(vec-shr (vec-mul '(buf int64 512) '(buf int64 512)) (x8 (int-imm (bv #x0000000000000001 64) #f))) (vector #t (_mm_sra_epi64_dsl (lit (bv #x00000000000000000000000000000001 128)) (_mm_mulhi_epu16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64 0 128) 512) 137)
(vec-shr (vec-add '(buf int64 512) '(buf int64 512)) (x8 (int-imm (bv #x0000000000000001 64) #f))) (vector #t (_mm_sra_epi64_dsl (lit (bv #x00000000000000000000000000000001 128)) (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 64) 512) 12)
(int32x8 (vec-max '(buf int64 512) '(buf int64 512))) (vector #t (_mm_cvtepi64_epi32_dsl (_mm512_max_epi16_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 512 64) 256 32 64 0) 1)
(int32x8 (x8 '(buf int16 16))) (vector #t (_mm256_cvtepi8_epi32_dsl (_mm_set1_pi8_dsl (reg (bv #x00 8)) 128 16) 128 16 32) 0)
(x16 (int-imm (bv #x00000001 32) #f)) (vector #t (lit (bv #x00000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001000000010000000100000001 512)) 0)
(x8 (int-imm (bv #x00000001 32) #f)) (vector #t (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 0)
(vec-add (vec-add '(buf uint32 512) '(buf uint32 512)) (vec-shr '(buf uint32 512) '(buf uint32 512))) (vector #t (_mm256_add_epi8_dsl (_mm_srlv_epi32_dsl (reg (bv #x3 4)) (lit (bv #x00000020 32)) (lit (bv #x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 512)) (reg (bv #x2 4)) 512 32 32) (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 512 32) 512 32) 5)
(vec-min (vec-sat-add '(buf int16 256) '(buf int16 256)) (x16 (int-imm (bv #x00ff 16) #t))) (vector #t (_mm256_min_epi16_dsl (_m_paddsb_dsl (reg (bv #x1 4)) (reg (bv #x0 4)) 256 16) (lit (bv #x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff 256)) 256 16) 15)
(vec-mul (int32x8 '(buf int16 128)) (x8 '(buf int32 32))) (vector #t (_mm_mulhi_pi16_dsl (_mm_set1_pi8_dsl (reg (bv #x1 4)) 256 32) (_mm256_cvtepi8_epi32_dsl (reg (bv #x0 4)) 128 16 32) 256 32 0 64) 20)
(vec-add '(buf uint16 256) (uint16x16 '(buf uint8 128))) (vector #t (_mm256_add_epi8_dsl (_mm256_cvtepu16_epi32_dsl (reg (bv #x1 4)) 128 8 16) (reg (bv #x0 4)) 256 16) 17)
(x8 (int-imm (bv #x7fff 16) #t)) (vector #t (lit (bv #x7fff7fff7fff7fff7fff7fff7fff7fff 128)) 0)
(vec-sub (x8 (int-imm (bv #x001f 16) #t)) '(buf int16 128)) (vector #t (_mm_sub_pi16_dsl (lit (bv #x001f001f001f001f001f001f001f001f 128)) (reg (bv #x0 4)) 128 16) 1)
(int16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 1)
(uint16x16 '(buf uint8 128)) (vector #t (_mm256_cvtepu16_epi32_dsl (reg (bv #x0 4)) 128 8 16) 0)
(vec-add (vec-mul '(buf int16 256) '(buf int16 256)) (vec-add '(buf int16 256) '(buf int16 256))) (vector #t (_mm256_add_epi8_dsl (_mm_mulhi_pi16_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 16 0 32) (_mm256_add_epi8_dsl (reg (bv #x2 4)) (reg (bv #x3 4)) 256 16) 256 16) 378)
(vec-shr (int32x8 '(buf int64 512)) (x8 '(buf int32 32))) (vector #t (_mm512_srav_epi64_dsl (lit (bv #x00000020 32)) (_mm_set1_pi8_dsl (reg (bv #x1 4)) 256 32) (lit (bv #xffffffff 32)) (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) (lit (bv #x00000000 32)) 256 32 32) 2)
(vec-sub (x8 (int-imm (bv #x00000000 32) #t)) (int32x8 '(buf int64 512))) (vector #t (_mm_sub_pi16_dsl (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (_mm_cvtepi64_epi32_dsl (reg (bv #x0 4)) 256 32 64 0) 256 32) 2)
(vec-add '(buf int32 256) (vec-mul '(buf int32 256) '(buf int32 256))) (vector #t (_mm256_add_epi8_dsl (_mm_mulhi_pi16_dsl (reg (bv #x1 4)) (reg (bv #x2 4)) 256 32 0 64) (reg (bv #x0 4)) 256 32) 876)
(vec-shl (x8 (int-imm (bv #x00000001 32) #t)) (vec-add '(buf int32 256) '(buf int32 256))) (vector #t (_mm512_sllv_epi64_dsl (lit (bv #x00000020 32)) (_mm256_add_epi8_dsl (reg (bv #x0 4)) (reg (bv #x1 4)) 256 32) (lit (bv #x0000000000000000000000000000000000000000000000000000000000000000 256)) (lit (bv #x0000000100000001000000010000000100000001000000010000000100000001 256)) 256 32 32) 9)
(int64x8 (int32x8 '(buf int64 512))) (vector #t (_mm256_cvtepi8_epi32_dsl (_mm_cvtepi64_epi32_dsl (reg (bv #x00 8)) 256 32 64 0) 256 32 64) 0)))
