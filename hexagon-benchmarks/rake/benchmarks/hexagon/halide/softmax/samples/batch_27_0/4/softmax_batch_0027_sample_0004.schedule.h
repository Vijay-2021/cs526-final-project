#ifndef softmax_batch_0027_sample_0004_SCHEDULE_H
#define softmax_batch_0027_sample_0004_SCHEDULE_H

// MACHINE GENERATED -- DO NOT EDIT
// This schedule was automatically generated by Adams2019
// for target=x86-64-linux-avx-avx2-avx512-avx512_sapphirerapids-avx512_skylake-disable_llvm_loop_opt-f16c-fma-sse41  // NOLINT
// with machine_params=10,16777216,40

#include "Halide.h"


inline void apply_schedule_softmax_batch_0027_sample_0004(
    ::Halide::Pipeline pipeline,
    ::Halide::Target target
) {
    using ::Halide::Func;
    using ::Halide::MemoryType;
    using ::Halide::RVar;
    using ::Halide::TailStrategy;
    using ::Halide::Var;
    Func output = pipeline.get_func(5);
    Func inv_sum_exp_row = pipeline.get_func(4);
    Func sum_exp_row = pipeline.get_func(3);
    Func exp2_diff = pipeline.get_func(2);
    Func max_x = pipeline.get_func(1);
    Var x(output.get_schedule().dims()[0].var);
    Var xi("xi");
    Var y(output.get_schedule().dims()[1].var);
    Var yi("yi");
    Var yii("yii");
    RVar r6_x(sum_exp_row.update(0).get_schedule().dims()[0].var);
    output
        .split(y, y, yi, 17, TailStrategy::ShiftInwards)
        .split(x, x, xi, 64, TailStrategy::ShiftInwards)
        .vectorize(xi)
        .compute_root()
        .reorder({xi, x, yi, y})
        .parallel(y);
    inv_sum_exp_row
        .split(y, y, yi, 64, TailStrategy::ShiftInwards)
        .split(yi, yi, yii, 32, TailStrategy::ShiftInwards)
        .unroll(yi)
        .vectorize(yii)
        .compute_root()
        .reorder({yii, yi, y})
        .parallel(y);
    sum_exp_row
        .split(y, y, yi, 16, TailStrategy::RoundUp)
        .unroll(y)
        .vectorize(yi)
        .compute_at(inv_sum_exp_row, y)
        .reorder({yi, y});
    sum_exp_row.update(0)
        .split(y, y, yi, 32, TailStrategy::GuardWithIf)
        .unroll(y)
        .vectorize(yi)
        .reorder({yi, y, r6_x});
    max_x
        .split(y, y, yi, 64, TailStrategy::RoundUp)
        .vectorize(yi)
        .compute_root()
        .reorder({yi, y})
        .parallel(y);
    max_x.update(0)
        .split(y, y, yi, 64, TailStrategy::GuardWithIf)
        .vectorize(yi)
        .reorder({yi, r6_x, y})
        .parallel(y);

}

#endif  // softmax_batch_0027_sample_0004_SCHEDULE_H
