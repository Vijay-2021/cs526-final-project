#ifndef blur3x3_batch_0064_sample_0024_SCHEDULE_H
#define blur3x3_batch_0064_sample_0024_SCHEDULE_H

// MACHINE GENERATED -- DO NOT EDIT
// This schedule was automatically generated by Adams2019
// for target=x86-64-linux-avx-avx2-disable_llvm_loop_opt-f16c-fma-sse41  // NOLINT
// with machine_params=32,24000000,40

#include "Halide.h"


inline void apply_schedule_blur3x3_batch_0064_sample_0024(
    ::Halide::Pipeline pipeline,
    ::Halide::Target target
) {
    using ::Halide::Func;
    using ::Halide::MemoryType;
    using ::Halide::RVar;
    using ::Halide::TailStrategy;
    using ::Halide::Var;
    Func blur_y = pipeline.get_func(2);
    Func blur_x = pipeline.get_func(1);
    Var x(blur_y.get_schedule().dims()[0].var);
    Var xi("xi");
    Var xii("xii");
    Var y(blur_y.get_schedule().dims()[1].var);
    Var yi("yi");
    Var yii("yii");
    blur_y
        .split(y, y, yi, 34, TailStrategy::ShiftInwards)
        .split(x, x, xi, 480, TailStrategy::ShiftInwards)
        .split(yi, yi, yii, 17, TailStrategy::ShiftInwards)
        .split(xi, xi, xii, 16, TailStrategy::ShiftInwards)
        .vectorize(xii)
        .compute_root()
        .reorder({xii, xi, yii, x, yi, y})
        .parallel(y);
    blur_x
        .store_in(MemoryType::Stack)
        .split(x, x, xi, 16, TailStrategy::ShiftInwards)
        .vectorize(xi)
        .compute_at(blur_y, x)
        .reorder({xi, x, y});

}

#endif  // blur3x3_batch_0064_sample_0024_SCHEDULE_H
