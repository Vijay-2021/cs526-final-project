{"Vd.h=vdmpy(Vu.ub,Rt.b)": "for (i = 0; i < VELEM(16); i++) {\nVd.h[i] = (Vu.uh[i].ub[0] * Rt.b[(2*i) % 4]);\nVd.h[i] += (Vu.uh[i].ub[1] * Rt.b[(2*i+1)%4]);\n}", "Vd.w=vdmpy(Vu.h,Rt.b)": "for (i = 0; i < VELEM(32); i++) {\nVd.w[i] = (Vu.w[i].h[0] * Rt.b[(2*i+0)%4]);\nVd.w[i] += (Vu.w[i].h[1] * Rt.b[(2*i+1)%4]);\n}", "Vx.h+=vdmpy(Vu.ub,Rt.b)": "for (i = 0; i < VELEM(16); i++) {\nVx.h[i] += (Vu.uh[i].ub[0] * Rt.b[(2*i) % 4]);\nVx.h[i] += (Vu.uh[i].ub[1] * Rt.b[(2*i+1)%4]);\n}", "Vx.w+=vdmpy(Vu.h,Rt.b)": "for (i = 0; i < VELEM(32); i++) {\nVx.w[i] += (Vu.w[i].h[0] * Rt.b[(2*i+0)%4]);\nVx.w[i] += (Vu.w[i].h[1] * Rt.b[(2*i+1)%4]);\n}", "Vd.w=vmpyieo(Vu.h,Vv.h)": "for (i = 0; i < VELEM(32); i++) {\nVd.w[i] = (Vu.w[i].h[0]*Vv.w[i].h[1]) << 16;\n}", "Vd.h=vmpyi(Vu.h,Rt.b)": "for (i = 0; i < VELEM(16); i++) {\nVd.h[i] = (Vu.h[i] * Rt.b[i % 4]);\n}", "Vd.w=vmpyi(Vu.w,Rt.b)": "for (i = 0; i < VELEM(32); i++) {\nVd.w[i] = (Vu.w[i] * Rt.b[i % 4]);\n}", "Vd.w=vmpyi(Vu.w,Rt.ub)": "for (i = 0; i < VELEM(32); i++) {\nVd.w[i] = (Vu.w[i] * Rt.ub[i % 4]);\n}", "Vx.h+=vmpyi(Vu.h,Rt.b)": "for (i = 0; i < VELEM(16); i++) {\nVx.h[i] += (Vu.h[i] * Rt.b[i % 4]);\n}", "Vx.w+=vmpyi(Vu.w,Rt.b)": "for (i = 0; i < VELEM(32); i++) {\nVx.w[i] += (Vu.w[i] * Rt.b[i % 4]);\n}", "Vx.w+=vmpyi(Vu.w,Rt.ub)": "for (i = 0; i < VELEM(32); i++) {\nVx.w[i] += (Vu.w[i] * Rt.ub[i % 4]);\n}", "Vd.uw=vmpye(Vu.uh,Rt.uh)": "for (i = 0; i < VELEM(32); i++) {\nVd.uw[i] = (Vu.uw[i].uh[0] * Rt.uh[0]);\n}", "Vx.uw+=vmpye(Vu.uh,Rt.uh)": "for (i = 0; i < VELEM(32); i++) {\nVx.uw[i] += (Vu.uw[i].uh[0] * Rt.uh[0]);\n}", "Vd.uw=vrmpy(Vu.ub,Rt.ub)": "for (i = 0; i < VELEM(32); i++) {\nVd.uw[i] = (Vu.uw[i].ub[0] * Rt.ub[0]);\nVd.uw[i] += (Vu.uw[i].ub[1] * Rt.ub[1]);\nVd.uw[i] += (Vu.uw[i].ub[2] * Rt.ub[2]);\nVd.uw[i] += (Vu.uw[i].ub[3] * Rt.ub[3]);\n}", "Vd.w=vrmpy(Vu.ub,Rt.b)": "for (i = 0; i < VELEM(32); i++) {\nVd.w[i] = (Vu.uw[i].ub[0] * Rt.b[0]);\nVd.w[i] += (Vu.uw[i].ub[1] * Rt.b[1]);\nVd.w[i] += (Vu.uw[i].ub[2] * Rt.b[2]);\nVd.w[i] += (Vu.uw[i].ub[3] * Rt.b[3]);\n}", "Vx.uw+=vrmpy(Vu.ub,Rt.ub)": "for (i = 0; i < VELEM(32); i++) {\nVx.uw[i] += (Vu.uw[i].ub[0] * Rt.ub[0]);\nVx.uw[i] += (Vu.uw[i].ub[1] * Rt.ub[1]);\nVx.uw[i] += (Vu.uw[i].ub[2] * Rt.ub[2]);\nVx.uw[i] += (Vu.uw[i].ub[3] * Rt.ub[3]);\n}", "Vx.w+=vrmpy(Vu.ub,Rt.b)": "for (i = 0; i < VELEM(32); i++) {\nVx.w[i] += (Vu.uw[i].ub[0] * Rt.b[0]);\nVx.w[i] += (Vu.uw[i].ub[1] * Rt.b[1]);\nVx.w[i] += (Vu.uw[i].ub[2] * Rt.b[2]);\nVx.w[i] += (Vu.uw[i].ub[3] * Rt.b[3]);\n}", "Vd.uw=vrmpy(Vu.ub,Vv.ub)": "for (i = 0; i < VELEM(32); i++) {\nVd.uw[i] = (Vu.uw[i].ub[0] * Vv.uw[i].ub[0]);\nVd.uw[i] += (Vu.uw[i].ub[1] * Vv.uw[i].ub[1]);\nVd.uw[i] += (Vu.uw[i].ub[2] * Vv.uw[i].ub[2]);\nVd.uw[i] += (Vu.uw[i].ub[3] * Vv.uw[i].ub[3]);\n}", "Vd.w=vrmpy(Vu.b,Vv.b)": "for (i = 0; i < VELEM(32); i++) {\nVd.w[i] = (Vu.w[i].b[0] * Vv.w[i].b[0]);\nVd.w[i] += (Vu.w[i].b[1] * Vv.w[i].b[1]);\nVd.w[i] += (Vu.w[i].b[2] * Vv.w[i].b[2]);\nVd.w[i] += (Vu.w[i].b[3] * Vv.w[i].b[3]);\n}", "Vd.w=vrmpy(Vu.ub,Vv.b)": "for (i = 0; i < VELEM(32); i++) {\nVd.w[i] = (Vu.uw[i].ub[0] * Vv.w[i].b[0]);\nVd.w[i] += (Vu.uw[i].ub[1] * Vv.w[i].b[1]);\nVd.w[i] += (Vu.uw[i].ub[2] * Vv.w[i].b[2]);\nVd.w[i] += (Vu.uw[i].ub[3] * Vv.w[i].b[3]);\n}", "Vd.b=vsplat(Rt)": "for (i = 0; i < VELEM(8); i++) {\nVd.ub[i] = Rt;\n}", "Vd.h=vsplat(Rt)": "for (i = 0; i < VELEM(16); i++) {\nVd.uh[i] = Rt;\n}", "Vd=vsplat(Rt)": "for (i = 0; i < VELEM(32); i++) {\nVd.uw[i] = Rt;\n}", "Qd4=vand(Vu,Rt)": "for (i = 0; i < VELEM(8); i++) {\nQdV[i]=((Vu.ub[i] & Rt.ub[i % 4]) != 0) ? 1 : 0;\n}", "Qx4|=vand(Vu,Rt)": "for (i = 0; i < VELEM(8); i++) {\nQxV[i]=QxV[i]|(((Vu.ub[i] & Rt.ub[i % 4]) != 0) ? 1 : 0);\n}", "Vd=vand([!]Qu4,Rt)": "for (i = 0; i < VELEM(8); i++) {\nVd.ub[i] = [!]QuV[i] ? Rt.ub[i % 4] : 0;\n}", "Vx|=vand([!]Qu4,Rt)": "for (i = 0; i < VELEM(8); i++) {\nVx.ub[i] |= [!](QuV[i]) ? Rt.ub[i % 4] : 0;\n}", "Vd.ub=vabsdiff(Vu.ub,Vv.ub)": "for (i = 0; i < VELEM(8); i++) {\nVd.ub[i] = (Vu.ub[i] > Vv.ub[i]) ? (Vu.ub[i]\n- Vv.ub[i]) : (Vv.ub[i] - Vu.ub[i]);\n}", "Vd.uh=vabsdiff(Vu.h,Vv.h)": "for (i = 0; i < VELEM(16); i++) {\nVd.uh[i] = (Vu.h[i] > Vv.h[i]) ? (Vu.h[i] -\nVv.h[i]) : (Vv.h[i] - Vu.h[i]);\n}", "Vd.uh=vabsdiff(Vu.uh,Vv.uh)": "for (i = 0; i < VELEM(16); i++) {\nVd.uh[i] = (Vu.uh[i] > Vv.uh[i]) ? (Vu.uh[i]\n- Vv.uh[i]) : (Vv.uh[i] - Vu.uh[i]);\n}", "Vd.uw=vabsdiff(Vu.w,Vv.w)": "for (i = 0; i < VELEM(32); i++) {\nVd.uw[i] = (Vu.w[i] > Vv.w[i]) ? (Vu.w[i] -\nVv.w[i]) : (Vv.w[i] - Vu.w[i]);\n}", "Vx.w=vinsert(Rt)": "Vx.uw[0] = Rt;", "Vd=valign(Vu,Vv,#u3)": "for(i = 0; i < VWIDTH; i++) {\nVd.ub[i] = (i+#u>=VWIDTH) ? Vu.ub[i+#u-\nVWIDTH] : Vv.ub[i+#u];\n}", "Vd=valign(Vu,Vv,Rt)": "unsigned shift = Rt & (VWIDTH-1);\nfor(i = 0; i < VWIDTH; i++) {\nVd.ub[i] = (i+shift>=VWIDTH) ?\nVu.ub[i+shift-VWIDTH] : Vv.ub[i+shift];\n}", "Vd=vlalign(Vu,Vv,#u3)": "unsigned shift = VWIDTH - #u;\nfor(i = 0; i < VWIDTH; i++) {\nVd.ub[i] = (i+shift>=VWIDTH) ?\nVu.ub[i+shift-VWIDTH] : Vv.ub[i+shift];\n}", "Vd=vlalign(Vu,Vv,Rt)": "unsigned shift = VWIDTH - (Rt & (VWIDTH-1));\nfor(i = 0; i < VWIDTH; i++) {\nVd.ub[i] = (i+shift>=VWIDTH) ?\nVu.ub[i+shift-VWIDTH] : Vv.ub[i+shift];\n}", "Vd=vror(Vu,Rt)": "for (k=0;k<VWIDTH;k++) {\nVd.ub[k] = Vu.ub[(k+Rt)&(VWIDTH-1)];\n}", "Vd=vdelta(Vu,Vv)": "for (offset=VWIDTH; (offset>>=1)>0; ) {\nfor (k = 0; k<VWIDTH; k++) {\nVd.ub[k] = (Vv.ub[k]&offset) ?\nVu.ub[k^offset] : Vu.ub[k];\n}\nfor (k = 0; k<VWIDTH; k++) {\nVu.ub[k] = Vd.ub[k];\n}\n}", "Vd=vrdelta(Vu,Vv)": "for (offset=1; offset<VWIDTH; offset<<=1){\nfor (k = 0; k<VWIDTH; k++) {\nVd.ub[k] = (Vv.ub[k]&offset) ?\nVu.ub[k^offset] : Vu.ub[k];\n}\nfor (k = 0; k<VWIDTH; k++) {\nVu.ub[k] = Vd.ub[k];\n}\n}", "Vd.b=vdeal(Vu.b)": "for (i = 0; i < VELEM(16); i++) {\nVd.ub[i ] = Vu.uh[i].ub[0];\nVd.ub[i+VBITS/16] = Vu.uh[i].ub[1];\n}", "Vd.b=vdeale(Vu.b,Vv.b)": "for (i = 0; i < VELEM(32); i++) {\nVd.ub[0+i ] = Vv.uw[i].ub[0];\nVd.ub[VBITS/32+i ] = Vv.uw[i].ub[2];\nVd.ub[2*VBITS/32+i] = Vu.uw[i].ub[0];\nVd.ub[3*VBITS/32+i] = Vu.uw[i].ub[2];\n}", "Vd.b=vshuff(Vu.b)": "for (i = 0; i < VELEM(16); i++) {\nVd.uh[i].b[0]=Vu.ub[i];\nVd.uh[i].b[1]=Vu.ub[i+VBITS/16];\n}", "Vd.h=vdeal(Vu.h)": "for (i = 0; i < VELEM(32); i++) {\nVd.uh[i ] = Vu.uw[i].uh[0];\nVd.uh[i+VBITS/32] = Vu.uw[i].uh[1];\n}", "Vd.h=vshuff(Vu.h)": "for (i = 0; i < VELEM(32); i++) {\nVd.uw[i].h[0]=Vu.uh[i];\nVd.uw[i].h[1]=Vu.uh[i+VBITS/32];\n}", "Vd.b=vpack(Vu.h,Vv.h):sat": "for (i = 0; i < VELEM(16); i++) {\nVd.b[i] = sat8(Vv.h[i]);\nVd.b[i+VBITS/16] = sat8(Vu.h[i]);\n}", "Vd.b=vpacke(Vu.h,Vv.h)": "for (i = 0; i < VELEM(16); i++) {\nVd.ub[i] = Vv.uh[i].ub[0];\nVd.ub[i+VBITS/16] = Vu.uh[i].ub[0];\n}", "Vd.b=vpacko(Vu.h,Vv.h)": "for (i = 0; i < VELEM(16); i++) {\nVd.ub[i] = Vv.uh[i].ub[1];\nVd.ub[i+VBITS/16] = Vu.uh[i].ub[1];\n}", "Vd.h=vpack(Vu.w,Vv.w):sat": "for (i = 0; i < VELEM(32); i++) {\nVd.h[i] = sat16(Vv.w[i]);\nVd.h[i+VBITS/32] = sat16(Vu.w[i]);\n}", "Vd.h=vpacke(Vu.w,Vv.w)": "for (i = 0; i < VELEM(32); i++) {\nVd.uh[i] = Vv.uw[i].uh[0];\nVd.uh[i+VBITS/32] = Vu.uw[i].uh[0];\n}", "Vd.h=vpacko(Vu.w,Vv.w)": "for (i = 0; i < VELEM(32); i++) {\nVd.uh[i] = Vv.uw[i].uh[1];\nVd.uh[i+VBITS/32] = Vu.uw[i].uh[1];\n}", "Vd.ub=vpack(Vu.h,Vv.h):sat": "for (i = 0; i < VELEM(16); i++) {\nVd.ub[i] = usat8(Vv.h[i]);\nVd.ub[i+VBITS/16] = usat8(Vu.h[i]);\n}", "Vd.uh=vpack(Vu.w,Vv.w):sat": "for (i = 0; i < VELEM(32); i++) {\nVd.uh[i] = usat16(Vv.w[i]);\nVd.uh[i+VBITS/32] = usat16(Vu.w[i]);\n}", "Qd4=vsetq(Rt)": "for(i = 0; i < VWIDTH; i++) QdV[i]=(i < (Rt & (VWIDTH-1))) ? 1 : 0;", "Qd4=vsetq2(Rt)": "for(i = 0; i < VWIDTH; i++) QdV[i]=(i <= ((Rt-1) & (VWIDTH-1))) ? 1\n: 0;", "Vd.b=vlut32(Vu.b,Vv.b,#u3)": "for (i = 0; i < VELEM(8); i++) {\nmatchval = #u & 0x7;\noddhalf = (#u >> (log2(VECTOR_SIZE)-6)) & 0x1;\nidx = Vu.ub[i];\nVd.b[i] = ((idx & 0xE0) == (matchval << 5)) ?\nVv.h[idx % VBITS/16].b[oddhalf] : 0;\n}", "Vd.b=vlut32(Vu.b,Vv.b,Rt)": "for (i = 0; i < VELEM(8); i++) {\nmatchval = Rt & 0x7;\noddhalf = (Rt >> (log2(VECTOR_SIZE)-6)) & 0x1;\nidx = Vu.ub[i];\nVd.b[i] = ((idx & 0xE0) == (matchval << 5)) ?\nVv.h[idx % VBITS/16].b[oddhalf] : 0;\n}", "Vd.b=vlut32(Vu.b,Vv.b,Rt):nomatch": "for (i = 0; i < VELEM(8); i++) {\nmatchval = Rt & 0x7;\noddhalf = (Rt >> (log2(VECTOR_SIZE)-6)) & 0x1;\nidx = Vu.ub[i];\nidx = (idx&0x1F) | (matchval<<5);\nVd.b[i] = Vv.h[idx % VBITS/16].b[oddhalf];\n}", "Vdd=vdeal(Vu,Vv,Rt)": "Vdd.v[0] = Vv;\nVdd.v[1] = Vu;\nfor (offset=VWIDTH>>1; offset>0; offset>>=1) {\nif ( Rt & offset) {\nfor (k = 0; k < VELEM(8); k++) {\nif (!( k & offset)) {\nSWAP(Vdd.v[1].ub[k],Vdd.v[0].ub[k+offset]);\n}\n}\n}\n}", "Vdd=vshuff(Vu,Vv,Rt)": "Vdd.v[0] = Vv;\nVdd.v[1] = Vu;\nfor (offset=1; offset<VWIDTH; offset<<=1) {\nif ( Rt & offset) {\nfor (k = 0; k < VELEM(8); k++) {\nif (!( k & offset)) {\nSWAP(Vdd.v[1].ub[k],Vdd.v[0].ub[k+offset]);\n}\n}\n}\n}", "vdeal(Vy,Vx,Rt)": "for (offset=VWIDTH>>1; offset>0; offset>>=1) {\nif ( Rt & offset) {\nfor (k = 0; k < VELEM(8); k++) {\nif (!( k & offset)) {\nSWAP(Vy.ub[k],Vx.ub[k+offset]);\n}\n}\n}\n}", "vshuff(Vy,Vx,Rt)": "for (offset=1; offset<VWIDTH; offset<<=1) {\nif ( Rt & offset) {\nfor (k = 0; k < VELEM(8); k++) {\nif (!( k & offset)) {\nSWAP(Vy.ub[k],Vx.ub[k+offset]);\n}\n}\n}\n}", "vtrans2x2(Vy,Vx,Rt)": "Assembler mapped to: \"vshuff(Vy,Vx,Rt)\"", "Vdd.h=vlut16(Vu.b,Vv.h,#u3)": "for (i = 0; i < VELEM(16); i++) {\nmatchval = #u & 0xF;\noddhalf = (#u >> (log2(VECTOR_SIZE)-6)) & 0x1;\nidx = Vu.uh[i].ub[0];\nVdd.v[0].h[i] = ((idx & 0xF0) == (matchval <<\n4)) ? Vv.w[idx % VBITS/32].h[oddhalf] : 0;\nidx = Vu.uh[i].ub[1];\nVdd.v[1].h[i] = ((idx & 0xF0) == (matchval <<\n4)) ? Vv.w[idx % VBITS/32].h[oddhalf] : 0;\n}", "Vdd.h=vlut16(Vu.b,Vv.h,Rt)": "for (i = 0; i < VELEM(16); i++) {\nmatchval = Rt & 0xF;\noddhalf = (Rt >> (log2(VECTOR_SIZE)-6)) & 0x1;\nidx = Vu.uh[i].ub[0];\nVdd.v[0].h[i] = ((idx & 0xF0) == (matchval <<\n4)) ? Vv.w[idx % VBITS/32].h[oddhalf] : 0;\nidx = Vu.uh[i].ub[1];\nVdd.v[1].h[i] = ((idx & 0xF0) == (matchval <<\n4)) ? Vv.w[idx % VBITS/32].h[oddhalf] : 0;\n}", "Vdd.h=vlut16(Vu.b,Vv.h,Rt):nomatch": "for (i = 0; i < VELEM(16); i++) {\nmatchval = Rt & 0xF;\noddhalf = (Rt >> (log2(VECTOR_SIZE)-6)) & 0x1;\nidx = Vu.uh[i].ub[0];\nidx = (idx&0x0F) | (matchval<<4);\nVdd.v[0].h[i] = Vv.w[idx %\nVBITS/32].h[oddhalf];\nidx = Vu.uh[i].ub[1];\nidx = (idx&0x0F) | (matchval<<4);\nVdd.v[1].h[i] = Vv.w[idx %\nVBITS/32].h[oddhalf];\n}", "Vx.b|=vlut32(Vu.b,Vv.b,#u3)": "for (i = 0; i < VELEM(8); i++) {\nmatchval = #u & 0x7;\noddhalf = (#u >> (log2(VECTOR_SIZE)-6)) & 0x1;\nidx = Vu.ub[i];\nVx.b[i] |= ((idx & 0xE0) == (matchval << 5)) ?\nVv.h[idx % VBITS/16].b[oddhalf] : 0;\n}", "Vx.b|=vlut32(Vu.b,Vv.b,Rt)": "for (i = 0; i < VELEM(8); i++) {\nmatchval = Rt & 0x7;\noddhalf = (Rt >> (log2(VECTOR_SIZE)-6)) & 0x1;\nidx = Vu.ub[i];\nVx.b[i] |= ((idx & 0xE0) == (matchval << 5)) ?\nVv.h[idx % VBITS/16].b[oddhalf] : 0;\n}", "Vxx.h|=vlut16(Vu.b,Vv.h,#u3)": "for (i = 0; i < VELEM(16); i++) {\nmatchval = #u & 0xF;\noddhalf = (#u >> (log2(VECTOR_SIZE)-6)) & 0x1;\nidx = Vu.uh[i].ub[0];\nVxx.v[0].h[i] |= ((idx & 0xF0) == (matchval <<\n4)) ? Vv.w[idx % VBITS/32].h[oddhalf] : 0;\nidx = Vu.uh[i].ub[1];\nVxx.v[1].h[i] |= ((idx & 0xF0) == (matchval <<\n4)) ? Vv.w[idx % VBITS/32].h[oddhalf] : 0;\n}", "Vxx.h|=vlut16(Vu.b,Vv.h,Rt)": "for (i = 0; i < VELEM(16); i++) {\nmatchval = Rt.ub[0] & 0xF;\noddhalf = (Rt >> (log2(VECTOR_SIZE)-6)) & 0x1;\nidx = Vu.uh[i].ub[0];\nVxx.v[0].h[i] |= ((idx & 0xF0) == (matchval <<\n4)) ? Vv.w[idx % VBITS/32].h[oddhalf] : 0;\nidx = Vu.uh[i].ub[1];\nVxx.v[1].h[i] |= ((idx & 0xF0) == (matchval <<\n4)) ? Vv.w[idx % VBITS/32].h[oddhalf] : 0;\n}", "Vdd.h=vunpack(Vu.b)": "for (i = 0; i < VELEM(8); i++) {\nVdd.h[i] = Vu.b[i];\n}", "Vdd.uh=vunpack(Vu.ub)": "for (i = 0; i < VELEM(8); i++) {\nVdd.uh[i] = Vu.ub[i];\n}", "Vdd.uw=vunpack(Vu.uh)": "for (i = 0; i < VELEM(16); i++) {\nVdd.uw[i] = Vu.uh[i];\n}", "Vdd.w=vunpack(Vu.h)": "for (i = 0; i < VELEM(16); i++) {\nVdd.w[i] = Vu.h[i];\n}", "Vxx.h|=vunpacko(Vu.b)": "for (i = 0; i < VELEM(8); i++) {\nVxx.uh[i] |= Vu.ub[i]<<8;\n}", "Vxx.w|=vunpacko(Vu.h)": "for (i = 0; i < VELEM(16); i++) {\nVxx.uw[i] |= Vu.uh[i]<<16;\n}"}