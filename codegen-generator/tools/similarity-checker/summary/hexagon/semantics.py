#============================== Hydride File =================================
#
# Part of the Hydride Compiler Infrastructure. 
# <Placeholder for license information> 
#
#=============================================================================
#
# Do NOT modify this file. It is automatically generated. 
#
#=============================================================================




semantcs = {

          "hexagon_V6_vabsdiffub_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vabsdiffub_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vabsdiffuh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vabsdiffub_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %6 (bvugt  %2  %5))"', '"  (define %9 (extract  %1 i.new Vu))"', '"  (define %12 (extract  %1 i.new Vv))"', '"  (define %13 (bvsub  %9  %12))"', '"  (define %16 (extract  %1 i.new Vv))"', '"  (define %19 (extract  %1 i.new Vu))"', '"  (define %20 (bvsub  %16  %19))"', '"  (define %21 (if (equal? %6 #t) %13 %20))"', '"  %21"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyubv_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyubv_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","16","16","8","0","16","64"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 16,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyubv_acc_128B  Vxx Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %1.new0 (*  iterator.0.new  %arg1))"', '"  (define %2 (+  i.new  %1.new0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vxx))"', '"  (define %7 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %8 (+  %7  %lastidx1))"', '"  (define %9 (extract  %8 %7 Vu))"', '"  (define %14 (extract  %8 %7 Vv))"', '"  (define %15 (zero-extend  %9 (bitvector %arg0)))"', '"  (define %16 (zero-extend  %14 (bitvector %arg0)))"', '"  (define %17 (bvmul  %15  %16))"', '"  (define %18 (bvadd  %4  %17))"', '"  %18"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vabsh_sat_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vabsh_sat_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","1024","1024","1024","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 1,
                  "out_vectsize_index" : 1,
                  "lanesize_index" : 2,
                  "in_precision_index" : 4,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vabsw_sat_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","1024","1024","1024","32","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 1,
                  "out_vectsize_index" : 1,
                  "lanesize_index" : 2,
                  "in_precision_index" : 4,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vabsw_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","1024","1024","1024","32","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 1,
                  "out_vectsize_index" : 1,
                  "lanesize_index" : 2,
                  "in_precision_index" : 4,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vabsb_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","1024","1024","1024","8","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 1,
                  "out_vectsize_index" : 1,
                  "lanesize_index" : 2,
                  "in_precision_index" : 4,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vabsh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","1024","1024","1024","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 1,
                  "out_vectsize_index" : 1,
                  "lanesize_index" : 2,
                  "in_precision_index" : 4,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vabsb_sat_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","1024","1024","1024","8","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 1,
                  "out_vectsize_index" : 1,
                  "lanesize_index" : 2,
                  "in_precision_index" : 4,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vabsh_sat_128B  Vu %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %3 (integer->bitvector (abs (bitvector->integer %2)) (bitvector %elemsize)))"', '"  (define %4 (bvssat %3 %elemsize %elemsize ))"', '"  %4"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vavghrnd_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vavghrnd_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0","(bv #x0000000000000002 16)","(bv #x0000000000000001 16)"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vavgwrnd_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","32","0","(bv #x00000000000000000000000000000002 32)","(bv #x00000000000000000000000000000001 32)"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vavgbrnd_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0","(bv #x00000002 8)","(bv #x00000001 8)"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vavghrnd_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %6 (bvadd  %2  %5))"', '"  (define %7 (bvadd  %6  %arg1))"', '"  (define %8 (bvsdiv  %7  %arg0))"', '"  %8"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vavgw_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vavgw_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","32","0","(bv #x00000000000000000000000000000002 32)"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vavgb_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0","(bv #x00000002 8)"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vavgh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0","(bv #x0000000000000002 16)"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vavgw_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %6 (bvadd  %2  %5))"', '"  (define %7 (bvsdiv  %6  %arg0))"', '"  %7"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vaddubsat_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vaddubsat_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vaddubsat_128B  %arg0 Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (define %offset0 (+  %arg1  %elemsize))"', '" (define %lastidx0 (-  %offset0  1))"', '" (define %0 (extract  %lastidx0 %arg1 %arg0))"', '" (define Vd %0)"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx1))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %2.ext0 (extract  %1 i.new Vd))"', '"  (define %2.acc0 (bvaddnuw  %2.ext0  %2 %elemsize))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %5.ext0 (extract  %1 i.new Vd))"', '"  (define %5.acc0 (bvaddnuw  %5.ext0  %5 %elemsize))"', '"(concat %2.acc0 %5.acc0)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vdmpyhsuisat_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vdmpyhsuisat_128B" : {
                  "args" : ["(bv #x
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 4,
                  "out_vectsize_index" : None,
                  "lanesize_index" : 5,
                  "in_precision_index" : 7,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "False",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vdmpyhsuisat_128B  %arg0 Vuu Rt #V %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 %arg2 %arg3 %arg4 )"', '"(define %offset0 (+  %arg1  %lanesize1))"', '"(define %lastidx0 (-  %offset0  1))"', '"(define %2 (extract  %lastidx0 %arg1 %arg0))"', '"(define Vd %2)"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (define %12.red"', '"(apply"', '" bvadd"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define iterator.0.new.div (/  iterator.0.new  %elemsize))"', '"  (define %1.new0 (-  %arg4  iterator.0.new.div))"', '"  (define %0 (*  %arg3  %1.new0))"', '"  (define %2.new0 (*  iterator.0.new  %arg2))"', '"  (define %3 (+  %0  i.new))"', '"  (define %4 (+  %3  %2.new0))"', '"  (define %lastidx3 (-  %elemsize  1))"', '"  (define %5 (+  %4  %lastidx3))"', '"  (define %6 (extract  %5 %4 Vuu))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %8 (+  iterator.0.new  %lastidx2))"', '"  (define %9 (extract  %8 iterator.0.new Rt))"', '"  (define %10 (sign-extend  %6 (bitvector %lanesize1)))"', '"  (define %11 (zero-extend  %9 (bitvector %lanesize1)))"', '"  (define %12 (bvmul  %10  %11))"', '"  %12"', '" )"', '"))"', '" (define %lastidx1 (-  %lanesize1  1))"', '" (define %29.clone.0 (+  i.new  %lastidx1))"', '" (define %12.ext0 (extract  %29.clone.0 i.new Vd))"', '" (define %12.acc0 (bvaddnsw %12.red %12.ext0 %lanesize1))"', '" %12.acc0"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyiwub_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyiwub_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","1024","256","8","0","32","32","64","4"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 7,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyiwub_128B  Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 %arg3 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define i.new.div (/  i.new  %elemsize))"', '"  (define %factor0 (/  %arg0  %elemsize))"', '"  (define %0.new0 (*  i.new  %factor0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %1 (+  %0.new0  %lastidx0))"', '"  (define %2 (extract  %1 %0.new0 Vu))"', '"  (define %3 (modulo  i.new.div  %arg3))"', '"  (define %4 (*  %elemsize  %3))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %5 (+  %4  %lastidx2))"', '"  (define %6 (extract  %5 %4 Rt))"', '"  (define %8 (sign-extend  %2 (bitvector %arg2)))"', '"  (define %9 (zero-extend  %6 (bitvector %arg2)))"', '"  (define %10 (bvmul  %8  %9))"', '"  (define %lastidx1 (-  %arg0  1))"', '"  (define %highidx0 (+  %lastidx1  %arg1))"', '"  (define new.%13 (extract  (- (- %arg2 1) %arg1) (- (- %arg2 1) %highidx0) %10))"', '"  new.%13"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyuhv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyuhv_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","32","16","0","32","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vmpyubv_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","16","16","8","0","16","64"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 16,
                  "in_precision" : 8,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyuhv_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx1))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %9 (extract  %3 %2 Vv))"', '"  (define %10 (zero-extend  %4 (bitvector %arg0)))"', '"  (define %11 (zero-extend  %9 (bitvector %arg0)))"', '"  (define %12 (bvmul  %10  %11))"', '"  %12"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgth_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgth_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","2","0","(bv #b03 2)","(bv #b00 2)","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 2,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 9,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgth_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %3.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %4 (+  %3.new0  %lastidx1))"', '"  (define %5 (extract  %4 %3.new0 Vu))"', '"  (define %9 (extract  %4 %3.new0 Vv))"', '"  (define %10 (bvsgt  %5  %9))"', '"  (define %11 (if (equal? %10 #t) %arg0 %arg1))"', '"  %11"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyub_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyub_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","16","16","8","0","16","64","4"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 16,
                  "in_precision" : 8,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyub_128B  Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define iterator.0.new.div (/  iterator.0.new  %elemsize))"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx2))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %5.new0 (/  i.new  %elemsize))"', '"  (define %6 (+  %5.new0  iterator.0.new.div))"', '"  (define %7 (modulo  %6  %arg2))"', '"  (define %8 (*  %elemsize  %7))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %9 (+  %8  %lastidx1))"', '"  (define %10 (extract  %9 %8 Rt))"', '"  (define %11 (zero-extend  %4 (bitvector %arg0)))"', '"  (define %12 (zero-extend  %10 (bitvector %arg0)))"', '"  (define %13 (bvmul  %11  %12))"', '"  %13"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyuhv_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyuhv_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","32","16","0","32","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyuhv_acc_128B  Vxx Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %1.new0 (*  iterator.0.new  %arg1))"', '"  (define %2 (+  i.new  %1.new0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vxx))"', '"  (define %7 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %8 (+  %7  %lastidx1))"', '"  (define %9 (extract  %8 %7 Vu))"', '"  (define %14 (extract  %8 %7 Vv))"', '"  (define %15 (zero-extend  %9 (bitvector %arg0)))"', '"  (define %16 (zero-extend  %14 (bitvector %arg0)))"', '"  (define %17 (bvmul  %15  %16))"', '"  (define %18 (bvadd  %4  %17))"', '"  %18"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgtub_and_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgtub_and_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","1","0","(bv #b1 1)","(bv #b0 1)","8"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 1,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 10,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgtub_and_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %highidx1 (+  i  %lastidx2))"', '"  (define %6 (extract  %highidx1 i QxV))"', '"  (define %8 (*  %arg2  i))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8  %lastidx1))"', '"  (define %10 (extract  %9 %8 Vu))"', '"  (define %14 (extract  %9 %8 Vv))"', '"  (define %15 (bvugt  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvand  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vadduhw_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vadduhw_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","32","16","0","32","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vadduhw_acc_128B  Vxx Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %1.new0 (*  iterator.0.new  %arg1))"', '"  (define %2 (+  i.new  %1.new0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vxx))"', '"  (define %7 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %8 (+  %7  %lastidx1))"', '"  (define %9 (extract  %8 %7 Vu))"', '"  (define %14 (extract  %8 %7 Vv))"', '"  (define %15 (bvadd  %9  %14))"', '"  (define %16 (sign-extend  %15 (bitvector %arg0)))"', '"  (define %17 (bvadd  %4  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpybv_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpybv_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","16","16","8","0","16","64"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 16,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpybv_acc_128B  Vxx Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %1.new0 (*  iterator.0.new  %arg1))"', '"  (define %2 (+  i.new  %1.new0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vxx))"', '"  (define %7 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %8 (+  %7  %lastidx1))"', '"  (define %9 (extract  %8 %7 Vu))"', '"  (define %14 (extract  %8 %7 Vv))"', '"  (define %15 (sign-extend  %9 (bitvector %arg0)))"', '"  (define %16 (sign-extend  %14 (bitvector %arg0)))"', '"  (define %17 (bvmul  %15  %16))"', '"  (define %18 (bvadd  %4  %17))"', '"  %18"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vaddubh_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vaddubh_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","16","16","8","0","16","64"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 16,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vaddubh_acc_128B  Vxx Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %1.new0 (*  iterator.0.new  %arg1))"', '"  (define %2 (+  i.new  %1.new0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vxx))"', '"  (define %7 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %8 (+  %7  %lastidx1))"', '"  (define %9 (extract  %8 %7 Vu))"', '"  (define %14 (extract  %8 %7 Vv))"', '"  (define %15 (bvadd  %9  %14))"', '"  (define %16 (sign-extend  %15 (bitvector %arg0)))"', '"  (define %17 (bvadd  %4  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpybus_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpybus_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","16","16","8","0","16","4","64"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 16,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpybus_acc_128B  Vxx Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define iterator.0.new.div (/  iterator.0.new  %elemsize))"', '"  (define %1.new0 (*  iterator.0.new  %arg2))"', '"  (define %2 (+  i.new  %1.new0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vxx))"', '"  (define %7 (+  iterator.0.new  i.new))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %8 (+  %7  %lastidx2))"', '"  (define %9 (extract  %8 %7 Vu))"', '"  (define %10.new0 (/  i.new  %elemsize))"', '"  (define %11 (+  %10.new0  iterator.0.new.div))"', '"  (define %12 (modulo  %11  %arg1))"', '"  (define %13 (*  %elemsize  %12))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %14 (+  %13  %lastidx1))"', '"  (define %15 (extract  %14 %13 Rt))"', '"  (define %16 (zero-extend  %9 (bitvector %arg0)))"', '"  (define %17 (sign-extend  %15 (bitvector %arg0)))"', '"  (define %18 (bvmul  %16  %17))"', '"  (define %19 (bvadd  %4  %18))"', '"  %19"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vaddbsat_dv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vaddbsat_dv_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0","0","512"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vaddbsat_dv_128B  %arg0 Vuu Vvv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (define %offset0 (+  %arg1  %elemsize))"', '" (define %lastidx0 (-  %offset0  1))"', '" (define %0 (extract  %lastidx0 %arg1 %arg0))"', '" (define Vdd %0)"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %3 (+  i.new  %lastidx2))"', '"  (define %4 (extract  %3 i.new Vuu))"', '"  (define %9 (extract  %3 i.new Vvv))"', '"  (define %10 (bvaddnsw  %4  %9 %elemsize))"', '"  (define %18 (+  i.new  %arg2))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %19 (+  %18  %lastidx1))"', '"  (define %20 (extract  %19 %18 Vuu))"', '"  (define %20.ext0 (extract  %19 %18 Vdd))"', '"  (define %20.acc0 (bvaddnsw  %20.ext0  %20 %elemsize))"', '"  (define %25 (extract  %19 %18 Vvv))"', '"  (define %25.ext0 (extract  %19 %18 Vdd))"', '"  (define %25.acc0 (bvaddnsw  %25.ext0  %25 %elemsize))"', '"(concat %10 %20.acc0 %25.acc0)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmux_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmux_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmux_128B  QtV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define i.new.div (/  i.new  %elemsize))"', '"  (define %0 (extract  i.new.div i.new.div QtV))"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %2 (+  i.new  %lastidx0))"', '"  (define %3 (extract  %2 i.new Vu))"', '"  (define %6 (extract  %2 i.new Vv))"', '"  (define %7 (if (equal? %0 (bv #b1 1))"', '" %3 %6))"', '"  %7"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vadduhsat_dv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vadduhsat_dv_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0","0","512"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vadduhsat_dv_128B  %arg0 Vuu Vvv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (define %offset0 (+  %arg1  %elemsize))"', '" (define %lastidx0 (-  %offset0  1))"', '" (define %0 (extract  %lastidx0 %arg1 %arg0))"', '" (define Vdd %0)"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %3 (+  i.new  %lastidx2))"', '"  (define %4 (extract  %3 i.new Vuu))"', '"  (define %9 (extract  %3 i.new Vvv))"', '"  (define %10 (bvaddnuw  %4  %9 %elemsize))"', '"  (define %18 (+  i.new  %arg2))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %19 (+  %18  %lastidx1))"', '"  (define %20 (extract  %19 %18 Vuu))"', '"  (define %20.ext0 (extract  %19 %18 Vdd))"', '"  (define %20.acc0 (bvaddnuw  %20.ext0  %20 %elemsize))"', '"  (define %25 (extract  %19 %18 Vvv))"', '"  (define %25.ext0 (extract  %19 %18 Vdd))"', '"  (define %25.acc0 (bvaddnuw  %25.ext0  %25 %elemsize))"', '"(concat %10 %20.acc0 %25.acc0)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vdmpyhsuisat_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vdmpyhsuisat_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","SYMBOLIC_BV_1024","1024","1024","512","16","0","32","16","512","0","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 4,
                  "out_vectsize_index" : 4,
                  "lanesize_index" : 5,
                  "in_precision_index" : 9,
                  "out_precision_index" : 9,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vdmpyhsuisat_acc_128B  Vx Vuu Rt #V %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 %arg3 %arg4 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %arg0  %elemsize))"', '"  (define %0.new0 (*  i.new  %factor0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %1 (+  %0.new0  %lastidx0))"', '"  (define %2 (extract  %1 %0.new0 Vx))"', '"  (define %6 (+  %arg4  %0.new0))"', '"  (define %lastidx4 (-  %elemsize  1))"', '"  (define %8 (+  %6  %lastidx4))"', '"  (define %9 (extract  %8 %6 Vuu))"', '"  (define %lastidx3 (-  %elemsize  1))"', '"  (define %highidx1 (+  %lastidx3  %arg3))"', '"  (define %12 (extract  %highidx1 %arg3 Rt))"', '"  (define %13 (sign-extend  %9 (bitvector %arg0)))"', '"  (define %14 (zero-extend  %12 (bitvector %arg0)))"', '"  (define %15 (bvmul  %13  %14))"', '"  (define %16 (bvadd  %2  %15))"', '"  (define %21 (+  %0.new0  %arg2))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %22 (+  %21  %lastidx2))"', '"  (define %23 (extract  %22 %21 Vuu))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %highidx0 (+  %lastidx1  %arg1))"', '"  (define %26 (extract  %highidx0 %arg1 Rt))"', '"  (define %27 (sign-extend  %23 (bitvector %arg0)))"', '"  (define %28 (zero-extend  %26 (bitvector %arg0)))"', '"  (define %29 (bvmul  %27  %28))"', '"  (define %30 (bvaddnsw  %16  %29 %arg0))"', '"  %30"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vdmpyhisat_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vdmpyhisat_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","32","32","16","0","0","32","16","1"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : None,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "False",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vdmpyhisat_128B  %arg0 Vuu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 %arg2 %arg3 %arg4 )"', '"(define %offset0 (+  %arg1  %lanesize1))"', '"(define %lastidx0 (-  %offset0  1))"', '"(define %2 (extract  %lastidx0 %arg1 %arg0))"', '"(define Vd %2)"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (define %12.red"', '"(apply"', '" bvadd"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define iterator.0.new.div (/  iterator.0.new  %elemsize))"', '"  (define %1.new0 (-  %arg4  iterator.0.new.div))"', '"  (define %0 (*  %arg3  %1.new0))"', '"  (define %2.new0 (*  iterator.0.new  %arg2))"', '"  (define %3 (+  %0  i.new))"', '"  (define %4 (+  %3  %2.new0))"', '"  (define %lastidx3 (-  %elemsize  1))"', '"  (define %5 (+  %4  %lastidx3))"', '"  (define %6 (extract  %5 %4 Vuu))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %8 (+  iterator.0.new  %lastidx2))"', '"  (define %9 (extract  %8 iterator.0.new Rt))"', '"  (define %10 (sign-extend  %6 (bitvector %lanesize1)))"', '"  (define %11 (sign-extend  %9 (bitvector %lanesize1)))"', '"  (define %12 (bvmul  %10  %11))"', '"  %12"', '" )"', '"))"', '" (define %lastidx1 (-  %lanesize1  1))"', '" (define %29.clone.0 (+  i.new  %lastidx1))"', '" (define %12.ext0 (extract  %29.clone.0 i.new Vd))"', '" (define %12.acc0 (bvaddnsw %12.red %12.ext0 %lanesize1))"', '" %12.acc0"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_veqb_xor_128B" : {
            "x86_instructions" : {
              "hexagon_V6_veqb_xor_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","1","0","(bv #b1 1)","(bv #b0 1)","8"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 1,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 10,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_veqb_xor_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %highidx1 (+  i  %lastidx2))"', '"  (define %6 (extract  %highidx1 i QxV))"', '"  (define %8 (*  %arg2  i))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8  %lastidx1))"', '"  (define %10 (extract  %9 %8 Vu))"', '"  (define %14 (extract  %9 %8 Vv))"', '"  (define %15 (bveq  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvxor  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vzb_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vzb_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","1024","16","16","8","0","16","64"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 16,
                  "in_precision" : 8,
                  "out_precision" : 16,
                  "in_vectsize_index" : 1,
                  "out_vectsize_index" : 1,
                  "lanesize_index" : 2,
                  "in_precision_index" : 4,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vzh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","1024","32","32","16","0","32","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 1,
                  "out_vectsize_index" : 1,
                  "lanesize_index" : 2,
                  "in_precision_index" : 4,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vzb_128B  Vu %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx1))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %9 (zero-extend  %4 (bitvector %arg0)))"', '"  %9"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vadduwsat_dv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vadduwsat_dv_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","32","0","0","512"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vadduwsat_dv_128B  %arg0 Vuu Vvv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (define %offset0 (+  %arg1  %elemsize))"', '" (define %lastidx0 (-  %offset0  1))"', '" (define %0 (extract  %lastidx0 %arg1 %arg0))"', '" (define Vdd %0)"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %3 (+  i.new  %lastidx2))"', '"  (define %4 (extract  %3 i.new Vuu))"', '"  (define %9 (extract  %3 i.new Vvv))"', '"  (define %10 (bvaddnuw  %4  %9 %elemsize))"', '"  (define %18 (+  i.new  %arg2))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %19 (+  %18  %lastidx1))"', '"  (define %20 (extract  %19 %18 Vuu))"', '"  (define %20.ext0 (extract  %19 %18 Vdd))"', '"  (define %20.acc0 (bvaddnuw  %20.ext0  %20 %elemsize))"', '"  (define %25 (extract  %19 %18 Vvv))"', '"  (define %25.ext0 (extract  %19 %18 Vdd))"', '"  (define %25.acc0 (bvaddnuw  %25.ext0  %25 %elemsize))"', '"(concat %10 %20.acc0 %25.acc0)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpybv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpybv_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","16","16","8","0","16","64"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 16,
                  "in_precision" : 8,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vmpyhv_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","32","16","0","32","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpybv_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx1))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %9 (extract  %3 %2 Vv))"', '"  (define %10 (sign-extend  %4 (bitvector %arg0)))"', '"  (define %11 (sign-extend  %9 (bitvector %arg0)))"', '"  (define %12 (bvmul  %10  %11))"', '"  %12"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vsubbsat_dv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vsubbsat_dv_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","8","16","8","0","64"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 8,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vsubbsat_dv_128B  Vuu Vvv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %1.new0 (*  iterator.0.new  %arg0))"', '"  (define %2 (+  i.new  %1.new0))"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vuu))"', '"  (define %9 (extract  %3 %2 Vvv))"', '"  (define %10 (bvsubnsw  %4  %9 %elemsize))"', '"  %10"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vaddwsat_dv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vaddwsat_dv_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","32","0","0","512"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vaddwsat_dv_128B  %arg0 Vuu Vvv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (define %offset0 (+  %arg1  %elemsize))"', '" (define %lastidx0 (-  %offset0  1))"', '" (define %0 (extract  %lastidx0 %arg1 %arg0))"', '" (define Vdd %0)"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %3 (+  i.new  %lastidx2))"', '"  (define %4 (extract  %3 i.new Vuu))"', '"  (define %9 (extract  %3 i.new Vvv))"', '"  (define %10 (bvaddnsw  %4  %9 %elemsize))"', '"  (define %18 (+  i.new  %arg2))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %19 (+  %18  %lastidx1))"', '"  (define %20 (extract  %19 %18 Vuu))"', '"  (define %20.ext0 (extract  %19 %18 Vdd))"', '"  (define %20.acc0 (bvaddnsw  %20.ext0  %20 %elemsize))"', '"  (define %25 (extract  %19 %18 Vvv))"', '"  (define %25.ext0 (extract  %19 %18 Vdd))"', '"  (define %25.acc0 (bvaddnsw  %25.ext0  %25 %elemsize))"', '"(concat %10 %20.acc0 %25.acc0)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgtub_xor_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgtub_xor_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","1","0","(bv #b1 1)","(bv #b0 1)","8"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 1,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 10,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgtub_xor_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %highidx1 (+  i  %lastidx2))"', '"  (define %6 (extract  %highidx1 i QxV))"', '"  (define %8 (*  %arg2  i))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8  %lastidx1))"', '"  (define %10 (extract  %9 %8 Vu))"', '"  (define %14 (extract  %9 %8 Vv))"', '"  (define %15 (bvugt  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvxor  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vsubb_dv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vsubb_dv_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","8","16","8","0","64"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 8,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vsubb_dv_128B  Vuu Vvv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %1.new0 (*  iterator.0.new  %arg0))"', '"  (define %2 (+  i.new  %1.new0))"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vuu))"', '"  (define %9 (extract  %3 %2 Vvv))"', '"  (define %10 (bvsub  %4  %9))"', '"  %10"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgtuh_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgtuh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","2","0","(bv #b03 2)","(bv #b00 2)","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 2,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 9,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgtuh_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %3.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %4 (+  %3.new0  %lastidx1))"', '"  (define %5 (extract  %4 %3.new0 Vu))"', '"  (define %9 (extract  %4 %3.new0 Vv))"', '"  (define %10 (bvugt  %5  %9))"', '"  (define %11 (if (equal? %10 #t) %arg0 %arg1))"', '"  %11"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgtub_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgtub_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","1","0","(bv #b1 1)","(bv #b0 1)","8"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 1,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 9,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgtub_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %3 (*  %arg2  i))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %4 (+  %3  %lastidx1))"', '"  (define %5 (extract  %4 %3 Vu))"', '"  (define %9 (extract  %4 %3 Vv))"', '"  (define %10 (bvugt  %5  %9))"', '"  (define %11 (if (equal? %10 #t) %arg0 %arg1))"', '"  %11"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgtuh_or_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgtuh_or_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","2","0","(bv #b03 2)","(bv #b00 2)","16"],
                  "in_vectsize" : 128,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 2,
                  "out_precision" : 2,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgtuh_or_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %5.new0 (+  i  %lastidx0))"', '"  (define %6 (extract  %5.new0 i QxV))"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %8.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8.new0  %lastidx1))"', '"  (define %10 (extract  %9 %8.new0 Vu))"', '"  (define %14 (extract  %9 %8.new0 Vv))"', '"  (define %15 (bvugt  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvor  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vsubbsat_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vsubbsat_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vsubwsat_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","32","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vsubhsat_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vsubbsat_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %6 (bvsubnsw  %2  %5 %elemsize))"', '"  %6"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vsubuhw_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vsubuhw_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","32","16","0","32","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vsububh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","16","16","8","0","16","64"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 16,
                  "in_precision" : 8,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vsubuhw_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx1))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %9 (extract  %3 %2 Vv))"', '"  (define %10 (bvsub  %4  %9))"', '"  (define %15 (zero-extend  %10 (bitvector %arg0)))"', '"  %15"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vandnqrt_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vandnqrt_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_128","SYMBOLIC_BV_32","1024","1024","128","1","0","8","(bv #x00000000 8)","4"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vandnqrt_acc_128B  Vx QuV Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %0 (*  %arg0  i))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %1 (+  %0  %lastidx0))"', '"  (define %2 (extract  %1 %0 Vx))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %highidx0 (+  i  %lastidx2))"', '"  (define %3 (extract  %highidx0 i QuV))"', '"  (define %4 (bvnot  %3))"', '"  (define %5 (modulo  i  %arg2))"', '"  (define %6 (*  %arg0  %5))"', '"  (define %lastidx1 (-  %arg0  1))"', '"  (define %7 (+  %6  %lastidx1))"', '"  (define %8 (extract  %7 %6 Rt))"', '"  (define %9 (if (equal? %4 (bv #b1 1))"', '" %8 %arg1))"', '"  (define %10 (bvor  %2  %9))"', '"  %10"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vxor_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vxor_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vxor_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %6 (bvxor  %2  %5))"', '"  %6"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyuh_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyuh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","32","32","16","0","32","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyuh_128B  Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx2))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %6 (+  iterator.0.new  %lastidx1))"', '"  (define %7 (extract  %6 iterator.0.new Rt))"', '"  (define %8 (zero-extend  %4 (bitvector %arg0)))"', '"  (define %9 (zero-extend  %7 (bitvector %arg0)))"', '"  (define %10 (bvmul  %8  %9))"', '"  %10"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vor_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vor_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vor_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %6 (bvor  %2  %5))"', '"  %6"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vsububsat_dv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vsububsat_dv_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","8","16","8","0","64"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 8,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vsububsat_dv_128B  Vuu Vvv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %1.new0 (*  iterator.0.new  %arg0))"', '"  (define %2 (+  i.new  %1.new0))"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vuu))"', '"  (define %9 (extract  %3 %2 Vvv))"', '"  (define %10 (bvsubnuw  %4  %9 %elemsize))"', '"  %10"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vandnqrt_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vandnqrt_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_32","1024","1024","128","1","0","8","(bv #x00000000 8)","4"],
                  "in_vectsize" : 32,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 7,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vandnqrt_128B  QuV Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %highidx0 (+  i  %lastidx2))"', '"  (define %0 (extract  %highidx0 i QuV))"', '"  (define %1 (bvnot  %0))"', '"  (define %2 (modulo  i  %arg2))"', '"  (define %3 (*  %arg0  %2))"', '"  (define %lastidx1 (-  %arg0  1))"', '"  (define %4 (+  %3  %lastidx1))"', '"  (define %5 (extract  %4 %3 Rt))"', '"  (define %6 (if (equal? %1 (bv #b1 1))"', '" %5 %arg1))"', '"  %6"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_veqb_128B" : {
            "x86_instructions" : {
              "hexagon_V6_veqb_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","1","0","(bv #b1 1)","(bv #b0 1)","8"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 1,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 9,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_veqb_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %3 (*  %arg2  i))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %4 (+  %3  %lastidx1))"', '"  (define %5 (extract  %4 %3 Vu))"', '"  (define %9 (extract  %4 %3 Vv))"', '"  (define %10 (bveq  %5  %9))"', '"  (define %11 (if (equal? %10 #t) %arg0 %arg1))"', '"  %11"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vsubbq_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vsubbq_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_128","1024","1024","1024","8","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vsubbnq_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_128","1024","1024","1024","8","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vsubhq_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_128","1024","1024","1024","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vsubwq_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_128","1024","1024","1024","32","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vsubwnq_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_128","1024","1024","1024","32","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vsubhnq_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_128","1024","1024","1024","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vsubbq_128B  Vx Vu QvV %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define i.new.div (/  i.new  %elemsize))"', '"  (define %0 (extract  i.new.div i.new.div QvV))"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %2 (+  i.new  %lastidx0))"', '"  (define %3 (extract  %2 i.new Vx))"', '"  (define %6 (extract  %2 i.new Vx))"', '"  (define %9 (extract  %2 i.new Vu))"', '"  (define %10 (bvsub  %6  %9))"', '"  (define %11 (if (equal? %0 (bv #b1 1))"', '" %3 %10))"', '"  %11"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vrmpyub_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vrmpyub_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","32","32","8","0","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 4,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vrmpyub_acc_128B  Vx Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %lanesize1  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vx))"', '"  (define %5 (+  iterator.0.new  i.new))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %6 (+  %5  %lastidx2))"', '"  (define %7 (extract  %6 %5 Vu))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %9 (+  iterator.0.new  %lastidx1))"', '"  (define %10 (extract  %9 iterator.0.new Rt))"', '"  (define %11 (zero-extend  %7 (bitvector %arg0)))"', '"  (define %12 (zero-extend  %10 (bitvector %arg0)))"', '"  (define %13 (bvmul  %11  %12))"', '"  (define %14 (zero-extend  %13 (bitvector %lanesize1)))"', '"  (define %15 (bvadd  %2  %14))"', '"  %15"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vandvqv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vandvqv_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","1024","1024","1024","8","0","(bv #x00000000 8)"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vandvqv_128B  QvV Vu %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define i.new.div (/  i.new  %elemsize))"', '"  (define %0 (extract  i.new.div i.new.div QvV))"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %2 (+  i.new  %lastidx0))"', '"  (define %3 (extract  %2 i.new Vu))"', '"  (define %4 (if (equal? %0 (bv #b1 1))"', '" %3 %arg0))"', '"  %4"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vaddw_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vaddw_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","32","0","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vaddw_128B  %arg0 Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (define %offset0 (+  %arg1  %elemsize))"', '" (define %lastidx0 (-  %offset0  1))"', '" (define %0 (extract  %lastidx0 %arg1 %arg0))"', '" (define Vd %0)"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx1))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %2.ext0 (extract  %1 i.new Vd))"', '"  (define %2.acc0 (bvadd  %2.ext0  %2))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %5.ext0 (extract  %1 i.new Vd))"', '"  (define %5.acc0 (bvadd  %5.ext0  %5))"', '"(concat %2.acc0 %5.acc0)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyuh_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyuh_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","32","32","16","0","32","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyuh_acc_128B  Vxx Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %1.new0 (*  iterator.0.new  %arg1))"', '"  (define %2 (+  i.new  %1.new0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vxx))"', '"  (define %7 (+  iterator.0.new  i.new))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %8 (+  %7  %lastidx2))"', '"  (define %9 (extract  %8 %7 Vu))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %11 (+  iterator.0.new  %lastidx1))"', '"  (define %12 (extract  %11 iterator.0.new Rt))"', '"  (define %13 (zero-extend  %9 (bitvector %arg0)))"', '"  (define %14 (zero-extend  %12 (bitvector %arg0)))"', '"  (define %15 (bvmul  %13  %14))"', '"  (define %16 (bvadd  %4  %15))"', '"  %16"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vandqrt_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vandqrt_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_32","1024","1024","1024","8","0","(bv #x00000000 8)","4"],
                  "in_vectsize" : 32,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vandqrt_128B  QuV Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define i.new.div (/  i.new  %elemsize))"', '"  (define %0 (extract  i.new.div i.new.div QuV))"', '"  (define %1 (modulo  i.new.div  %arg1))"', '"  (define %2 (*  %elemsize  %1))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx1))"', '"  (define %4 (extract  %3 %2 Rt))"', '"  (define %5 (if (equal? %0 (bv #b1 1))"', '" %4 %arg0))"', '"  %5"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyih_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyih_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0","16","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyih_acc_128B  Vx Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vx))"', '"  (define %5 (extract  %1 i.new Vu))"', '"  (define %8 (extract  %1 i.new Vv))"', '"  (define %9 (sign-extend  %5 (bitvector %arg1)))"', '"  (define %10 (sign-extend  %8 (bitvector %arg1)))"', '"  (define %11 (bvmul  %9  %10))"', '"  (define %12 (sign-extend  %2 (bitvector %arg1)))"', '"  (define %13 (bvadd  %12  %11))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %highidx0 (+  %lastidx1  %arg0))"', '"  (define new.%16 (extract  (- (- %arg1 1) %arg0) (- (- %arg1 1) %highidx0) %13))"', '"  new.%16"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_veqh_128B" : {
            "x86_instructions" : {
              "hexagon_V6_veqh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","2","0","(bv #b03 2)","(bv #b00 2)","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 2,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 9,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_veqh_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %3.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %4 (+  %3.new0  %lastidx1))"', '"  (define %5 (extract  %4 %3.new0 Vu))"', '"  (define %9 (extract  %4 %3.new0 Vv))"', '"  (define %10 (bveq  %5  %9))"', '"  (define %11 (if (equal? %10 #t) %arg0 %arg1))"', '"  %11"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vsubh_dv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vsubh_dv_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","16","32","16","0","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 16,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vsubh_dv_128B  Vuu Vvv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %1.new0 (*  iterator.0.new  %arg0))"', '"  (define %2 (+  i.new  %1.new0))"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vuu))"', '"  (define %9 (extract  %3 %2 Vvv))"', '"  (define %10 (bvsub  %4  %9))"', '"  %10"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyiowh_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyiowh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","512","16","0","32","32","64","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 7,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyiowh_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 %arg3 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %arg0  %elemsize))"', '"  (define %0.new0 (*  i.new  %factor0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %1 (+  %0.new0  %lastidx0))"', '"  (define %2 (extract  %1 %0.new0 Vu))"', '"  (define %5 (+  %arg3  %0.new0))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %6 (+  %5  %lastidx2))"', '"  (define %7 (extract  %6 %5 Vv))"', '"  (define %9 (sign-extend  %2 (bitvector %arg2)))"', '"  (define %10 (sign-extend  %7 (bitvector %arg2)))"', '"  (define %11 (bvmul  %9  %10))"', '"  (define %lastidx1 (-  %arg0  1))"', '"  (define %highidx0 (+  %lastidx1  %arg1))"', '"  (define new.%14 (extract  (- (- %arg2 1) %arg1) (- (- %arg2 1) %highidx0) %11))"', '"  new.%14"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vunpackuh_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vunpackuh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","1024","1024","1024","16","0","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 1,
                  "out_vectsize_index" : 1,
                  "lanesize_index" : 2,
                  "in_precision_index" : 4,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vunpackub_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","1024","1024","1024","8","0","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 16,
                  "in_vectsize_index" : 1,
                  "out_vectsize_index" : 1,
                  "lanesize_index" : 2,
                  "in_precision_index" : 4,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vunpackuh_128B  Vu %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx1))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %5 (zero-extend  %2 (bitvector %arg0)))"', '"  %5"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyewuh_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyewuh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","512","16","0","32","32","(bv #x0000000000000000000000000000000000000000000000000000000000000010 64)","64"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 7,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyewuh_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 %arg3 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %arg0  %elemsize))"', '"  (define %0.new0 (*  i.new  %factor0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %1 (+  %0.new0  %lastidx0))"', '"  (define %2 (extract  %1 %0.new0 Vu))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %6 (+  %0.new0  %lastidx2))"', '"  (define %7 (extract  %6 %0.new0 Vv))"', '"  (define %9 (sign-extend  %2 (bitvector %arg3)))"', '"  (define %10 (sign-extend  %7 (bitvector %arg3)))"', '"  (define %11 (bvmul  %9  %10))"', '"  (define %12 (bvashr  %11  %arg2))"', '"  (define %lastidx1 (-  %arg0  1))"', '"  (define %highidx0 (+  %lastidx1  %arg1))"', '"  (define new.%15 (extract  (- (- %arg3 1) %arg1) (- (- %arg3 1) %highidx0) %12))"', '"  new.%15"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vdmpyhb_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vdmpyhb_128B" : {
                  "args" : ["(bv #x
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : None,
                  "lanesize_index" : 4,
                  "in_precision_index" : 11,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "False",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vdmpyhb_128B  %arg0 Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 %arg2 %arg3 %arg4 %arg5 )"', '"(define %offset0 (+  %arg1  %lanesize1))"', '"(define %lastidx0 (-  %offset0  1))"', '"(define %0 (extract  %lastidx0 %arg1 %arg0))"', '"(define Vd %0)"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (define %14.red"', '"(apply"', '" bvadd"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define iterator.0.new.div (/  iterator.0.new  %elemsize))"', '"  (define %0.new0 (*  iterator.0.new  %arg5))"', '"  (define %2 (+  %0.new0  i.new))"', '"  (define %lastidx3 (-  %arg4  1))"', '"  (define %3 (+  %2  %lastidx3))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %5.new0 (/  i.new  %arg3))"', '"  (define %6 (+  %5.new0  iterator.0.new.div))"', '"  (define %7 (modulo  %6  %arg2))"', '"  (define %8 (*  %elemsize  %7))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %9 (+  %8  %lastidx2))"', '"  (define %10 (extract  %9 %8 Rt))"', '"  (define %12 (sign-extend  %4 (bitvector %lanesize1)))"', '"  (define %13 (sign-extend  %10 (bitvector %lanesize1)))"', '"  (define %14 (bvmul  %12  %13))"', '"  %14"', '" )"', '"))"', '" (define %lastidx1 (-  %lanesize1  1))"', '" (define %18.clone.0 (+  i.new  %lastidx1))"', '" (define %19.ext0 (extract  %18.clone.0 i.new Vd))"', '" (define %19.acc0 (bvadd %14.red %19.ext0))"', '" %19.acc0"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgtw_or_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgtw_or_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","4","0","(bv #x000f 4)","(bv #x0000 4)","32"],
                  "in_vectsize" : 128,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 4,
                  "out_precision" : 4,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgtw_or_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %5.new0 (+  i  %lastidx0))"', '"  (define %6 (extract  %5.new0 i QxV))"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %8.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8.new0  %lastidx1))"', '"  (define %10 (extract  %9 %8.new0 Vu))"', '"  (define %14 (extract  %9 %8.new0 Vv))"', '"  (define %15 (bvsgt  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvor  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vshufoeh_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vshufoeh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","32","16","0","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vshufoeb_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","16","16","8","0","64"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 16,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vshufoeh_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx1))"', '"  (define %4 (extract  %3 %2 Vv))"', '"  (define %7.new0 (*  iterator.0.new  %arg0))"', '"  (define %15 (extract  %3 %2 Vu))"', '"(concat %4 %15)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vadduhw_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vadduhw_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","32","16","0","32","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vaddubh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","16","16","8","0","16","64"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 16,
                  "in_precision" : 8,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vadduhw_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx1))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %9 (extract  %3 %2 Vv))"', '"  (define %10 (bvadd  %4  %9))"', '"  (define %15 (zero-extend  %10 (bitvector %arg0)))"', '"  %15"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vsubb_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vsubb_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vsubw_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","32","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vsubh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vsubb_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %6 (bvsub  %2  %5))"', '"  %6"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpybusv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpybusv_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","16","16","8","0","16","64"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 16,
                  "in_precision" : 8,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpybusv_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx1))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %9 (extract  %3 %2 Vv))"', '"  (define %10 (zero-extend  %4 (bitvector %arg0)))"', '"  (define %11 (sign-extend  %9 (bitvector %arg0)))"', '"  (define %12 (bvmul  %10  %11))"', '"  %12"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vdmpyhsat_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vdmpyhsat_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","1024","512","16","0","32","16","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vdmpyhsat_acc_128B  Vx Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 %arg3 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %arg0  %elemsize))"', '"  (define %0.new0 (*  i.new  %factor0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %1 (+  %0.new0  %lastidx0))"', '"  (define %2 (extract  %1 %0.new0 Vx))"', '"  (define %lastidx4 (-  %elemsize  1))"', '"  (define %6 (+  %0.new0  %lastidx4))"', '"  (define %7 (extract  %6 %0.new0 Vu))"', '"  (define %lastidx3 (-  %elemsize  1))"', '"  (define %highidx1 (+  %lastidx3  %arg3))"', '"  (define %10 (extract  %highidx1 %arg3 Rt))"', '"  (define %11 (sign-extend  %7 (bitvector %arg0)))"', '"  (define %12 (sign-extend  %10 (bitvector %arg0)))"', '"  (define %13 (bvmul  %11  %12))"', '"  (define %14 (bvadd  %2  %13))"', '"  (define %17 (+  %arg2  %0.new0))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %18 (+  %17  %lastidx2))"', '"  (define %19 (extract  %18 %17 Vu))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %highidx0 (+  %lastidx1  %arg1))"', '"  (define %22 (extract  %highidx0 %arg1 Rt))"', '"  (define %23 (sign-extend  %19 (bitvector %arg0)))"', '"  (define %24 (sign-extend  %22 (bitvector %arg0)))"', '"  (define %25 (bvmul  %23  %24))"', '"  (define %26 (bvaddnsw  %14  %25 %arg0))"', '"  %26"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vrmpybus_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vrmpybus_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","32","32","8","0","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 4,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vrmpybus_acc_128B  Vx Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %lanesize1  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vx))"', '"  (define %5 (+  iterator.0.new  i.new))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %6 (+  %5  %lastidx2))"', '"  (define %7 (extract  %6 %5 Vu))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %9 (+  iterator.0.new  %lastidx1))"', '"  (define %10 (extract  %9 iterator.0.new Rt))"', '"  (define %11 (zero-extend  %7 (bitvector %arg0)))"', '"  (define %12 (sign-extend  %10 (bitvector %arg0)))"', '"  (define %13 (bvmul  %11  %12))"', '"  (define %14 (sign-extend  %13 (bitvector %lanesize1)))"', '"  (define %15 (bvadd  %2  %14))"', '"  %15"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vaddhsat_dv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vaddhsat_dv_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0","0","512"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vaddhsat_dv_128B  %arg0 Vuu Vvv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (define %offset0 (+  %arg1  %elemsize))"', '" (define %lastidx0 (-  %offset0  1))"', '" (define %0 (extract  %lastidx0 %arg1 %arg0))"', '" (define Vdd %0)"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %3 (+  i.new  %lastidx2))"', '"  (define %4 (extract  %3 i.new Vuu))"', '"  (define %9 (extract  %3 i.new Vvv))"', '"  (define %10 (bvaddnsw  %4  %9 %elemsize))"', '"  (define %18 (+  i.new  %arg2))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %19 (+  %18  %lastidx1))"', '"  (define %20 (extract  %19 %18 Vuu))"', '"  (define %20.ext0 (extract  %19 %18 Vdd))"', '"  (define %20.acc0 (bvaddnsw  %20.ext0  %20 %elemsize))"', '"  (define %25 (extract  %19 %18 Vvv))"', '"  (define %25.ext0 (extract  %19 %18 Vdd))"', '"  (define %25.acc0 (bvaddnsw  %25.ext0  %25 %elemsize))"', '"(concat %10 %20.acc0 %25.acc0)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vaddhsat_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vaddhsat_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vaddhsat_128B  %arg0 Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (define %offset0 (+  %arg1  %elemsize))"', '" (define %lastidx0 (-  %offset0  1))"', '" (define %0 (extract  %lastidx0 %arg1 %arg0))"', '" (define Vd %0)"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx1))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %2.ext0 (extract  %1 i.new Vd))"', '"  (define %2.acc0 (bvaddnsw  %2.ext0  %2 %elemsize))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %5.ext0 (extract  %1 i.new Vd))"', '"  (define %5.acc0 (bvaddnsw  %5.ext0  %5 %elemsize))"', '"(concat %2.acc0 %5.acc0)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyih_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyih_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0","16","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyih_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %6 (sign-extend  %2 (bitvector %arg1)))"', '"  (define %7 (sign-extend  %5 (bitvector %arg1)))"', '"  (define %8 (bvmul  %6  %7))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %highidx0 (+  %lastidx1  %arg0))"', '"  (define new.%11 (extract  (- (- %arg1 1) %arg0) (- (- %arg1 1) %highidx0) %8))"', '"  new.%11"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyhus_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyhus_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","32","16","0","32","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyhus_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx1))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %9 (extract  %3 %2 Vv))"', '"  (define %10 (sign-extend  %4 (bitvector %arg0)))"', '"  (define %11 (zero-extend  %9 (bitvector %arg0)))"', '"  (define %12 (bvmul  %10  %11))"', '"  %12"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vnavgub_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vnavgub_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0","(bv #x00000002 8)"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vnavgub_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %6 (bvsub  %2  %5))"', '"  (define %7 (bvudiv  %6  %arg0))"', '"  %7"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgtuw_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgtuw_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","4","0","(bv #x000f 4)","(bv #x0000 4)","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 4,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 9,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgtuw_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %3.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %4 (+  %3.new0  %lastidx1))"', '"  (define %5 (extract  %4 %3.new0 Vu))"', '"  (define %9 (extract  %4 %3.new0 Vv))"', '"  (define %10 (bvugt  %5  %9))"', '"  (define %11 (if (equal? %10 #t) %arg0 %arg1))"', '"  %11"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgtb_or_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgtb_or_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","1","0","(bv #b1 1)","(bv #b0 1)","8"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 1,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 10,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgtb_or_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %highidx1 (+  i  %lastidx2))"', '"  (define %6 (extract  %highidx1 i QxV))"', '"  (define %8 (*  %arg2  i))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8  %lastidx1))"', '"  (define %10 (extract  %9 %8 Vu))"', '"  (define %14 (extract  %9 %8 Vv))"', '"  (define %15 (bvsgt  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvor  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vrmpyubv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vrmpyubv_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","32","8","0","0","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 8,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : None,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "False",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vrmpyubv_128B  %arg0 Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 %arg2 )"', '"(define %offset0 (+  %arg1  %lanesize1))"', '"(define %lastidx0 (-  %offset0  1))"', '"(define %0 (extract  %lastidx0 %arg1 %arg0))"', '"(define Vd %0)"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (define %15.red"', '"(apply"', '" bvadd"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx2))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %9 (extract  %3 %2 Vv))"', '"  (define %10 (zero-extend  %4 (bitvector %arg2)))"', '"  (define %11 (zero-extend  %9 (bitvector %arg2)))"', '"  (define %12 (bvmul  %10  %11))"', '"  (define %15 (zero-extend  %12 (bitvector %lanesize1)))"', '"  %15"', '" )"', '"))"', '" (define %lastidx1 (-  %lanesize1  1))"', '" (define %17.clone.0 (+  i.new  %lastidx1))"', '" (define %18.ext0 (extract  %17.clone.0 i.new Vd))"', '" (define %18.acc0 (bvadd %15.red %18.ext0))"', '" %18.acc0"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vdmpyhsusat_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vdmpyhsusat_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","32","32","16","0","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : None,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "False",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vdmpyhsusat_128B  %arg0 Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 )"', '"(define %offset0 (+  %arg1  %lanesize1))"', '"(define %lastidx0 (-  %offset0  1))"', '"(define %0 (extract  %lastidx0 %arg1 %arg0))"', '"(define Vd %0)"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (define %10.red"', '"(apply"', '" bvadd"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx3 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx3))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %6 (+  iterator.0.new  %lastidx2))"', '"  (define %7 (extract  %6 iterator.0.new Rt))"', '"  (define %8 (sign-extend  %4 (bitvector %lanesize1)))"', '"  (define %9 (zero-extend  %7 (bitvector %lanesize1)))"', '"  (define %10 (bvmul  %8  %9))"', '"  %10"', '" )"', '"))"', '" (define %lastidx1 (-  %lanesize1  1))"', '" (define %25.clone.0 (+  i.new  %lastidx1))"', '" (define %10.ext0 (extract  %25.clone.0 i.new Vd))"', '" (define %10.acc0 (bvaddnsw %10.red %10.ext0 %lanesize1))"', '" %10.acc0"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vdmpyhsusat_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vdmpyhsusat_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","1024","512","16","0","32","16","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vdmpyhsusat_acc_128B  Vx Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 %arg3 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %arg0  %elemsize))"', '"  (define %0.new0 (*  i.new  %factor0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %1 (+  %0.new0  %lastidx0))"', '"  (define %2 (extract  %1 %0.new0 Vx))"', '"  (define %lastidx4 (-  %elemsize  1))"', '"  (define %6 (+  %0.new0  %lastidx4))"', '"  (define %7 (extract  %6 %0.new0 Vu))"', '"  (define %lastidx3 (-  %elemsize  1))"', '"  (define %highidx1 (+  %lastidx3  %arg3))"', '"  (define %10 (extract  %highidx1 %arg3 Rt))"', '"  (define %11 (sign-extend  %7 (bitvector %arg0)))"', '"  (define %12 (zero-extend  %10 (bitvector %arg0)))"', '"  (define %13 (bvmul  %11  %12))"', '"  (define %14 (bvadd  %2  %13))"', '"  (define %17 (+  %arg2  %0.new0))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %18 (+  %17  %lastidx2))"', '"  (define %19 (extract  %18 %17 Vu))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %highidx0 (+  %lastidx1  %arg1))"', '"  (define %22 (extract  %highidx0 %arg1 Rt))"', '"  (define %23 (sign-extend  %19 (bitvector %arg0)))"', '"  (define %24 (zero-extend  %22 (bitvector %arg0)))"', '"  (define %25 (bvmul  %23  %24))"', '"  (define %26 (bvaddnsw  %14  %25 %arg0))"', '"  %26"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyowh_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyowh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","512","16","0","32","(bv #x0000000000000000000000000000000000000000000000000000000000000001 64)","(bv #x0000000000000000000000000000000000000000000000000000000000000001 64)","(bv #x000000000000000000000000000000000000000000000000000000000000000e 64)","64","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 7,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vmpyowh_rnd_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","512","16","0","32","(bv #x0000000000000000000000000000000000000000000000000000000000000001 64)","(bv #x0000000000000000000000000000000000000000000000000000000000000001 64)","(bv #x000000000000000000000000000000000000000000000000000000000000000e 64)","64","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 7,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyowh_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 %arg3 %arg4 %arg5 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %arg0  %elemsize))"', '"  (define %0.new0 (*  i.new  %factor0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %1 (+  %0.new0  %lastidx0))"', '"  (define %2 (extract  %1 %0.new0 Vu))"', '"  (define %5 (+  %arg5  %0.new0))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %6 (+  %5  %lastidx1))"', '"  (define %7 (extract  %6 %5 Vv))"', '"  (define %9 (sign-extend  %2 (bitvector %arg4)))"', '"  (define %10 (sign-extend  %7 (bitvector %arg4)))"', '"  (define %11 (bvmul  %9  %10))"', '"  (define %12 (bvashr  %11  %arg3))"', '"  (define %13 (bvadd  %12  %arg2))"', '"  (define %14 (bvashr  %13  %arg1))"', '"  (define %15 (bvssat %14 %arg4 %arg0 ))"', '"  %15"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpybusv_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpybusv_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","16","16","8","0","16","64"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 16,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpybusv_acc_128B  Vxx Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %1.new0 (*  iterator.0.new  %arg1))"', '"  (define %2 (+  i.new  %1.new0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vxx))"', '"  (define %7 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %8 (+  %7  %lastidx1))"', '"  (define %9 (extract  %8 %7 Vu))"', '"  (define %14 (extract  %8 %7 Vv))"', '"  (define %15 (zero-extend  %9 (bitvector %arg0)))"', '"  (define %16 (sign-extend  %14 (bitvector %arg0)))"', '"  (define %17 (bvmul  %15  %16))"', '"  (define %18 (bvadd  %4  %17))"', '"  %18"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vdmpyhvsat_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vdmpyhvsat_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","32","16","0","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : None,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "False",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vdmpyhvsat_128B  %arg0 Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 )"', '"(define %offset0 (+  %arg1  %lanesize1))"', '"(define %lastidx0 (-  %offset0  1))"', '"(define %0 (extract  %lastidx0 %arg1 %arg0))"', '"(define Vd %0)"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (define %12.red"', '"(apply"', '" bvadd"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx2))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %9 (extract  %3 %2 Vv))"', '"  (define %10 (sign-extend  %4 (bitvector %lanesize1)))"', '"  (define %11 (sign-extend  %9 (bitvector %lanesize1)))"', '"  (define %12 (bvmul  %10  %11))"', '"  %12"', '" )"', '"))"', '" (define %lastidx1 (-  %lanesize1  1))"', '" (define %29.clone.0 (+  i.new  %lastidx1))"', '" (define %12.ext0 (extract  %29.clone.0 i.new Vd))"', '" (define %12.acc0 (bvaddnsw %12.red %12.ext0 %lanesize1))"', '" %12.acc0"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vandvrt_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vandvrt_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","1024","128","1","0","(bv #b1 1)","(bv #b0 1)","(bv #x00000000 8)","8","4"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 1,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 10,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vandvrt_128B  Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 %arg3 %arg4 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %0 (*  %arg3  i))"', '"  (define %lastidx2 (-  %arg3  1))"', '"  (define %1 (+  %0  %lastidx2))"', '"  (define %2 (extract  %1 %0 Vu))"', '"  (define %3 (modulo  i  %arg4))"', '"  (define %4 (*  %arg3  %3))"', '"  (define %lastidx1 (-  %arg3  1))"', '"  (define %5 (+  %4  %lastidx1))"', '"  (define %6 (extract  %5 %4 Rt))"', '"  (define %7 (bvand  %2  %6))"', '"  (define %8 (not (bveq  %7  %arg2 )))"', '"  (define %9 (if (equal? %8 #t) %arg0 %arg1))"', '"  %9"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyowh_sacc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyowh_sacc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","512","16","0","32","(bv #x0000000000000000000000000000000000000000000000000000000000000001 64)","(bv #x0000000000000000000000000000000000000000000000000000000000000001 64)","(bv #x000000000000000000000000000000000000000000000000000000000000000e 64)","64","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vmpyowh_rnd_sacc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","512","16","0","32","(bv #x0000000000000000000000000000000000000000000000000000000000000001 64)","(bv #x0000000000000000000000000000000000000000000000000000000000000001 64)","(bv #x000000000000000000000000000000000000000000000000000000000000000e 64)","64","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyowh_sacc_128B  Vx Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 %arg3 %arg4 %arg5 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %arg0  %elemsize))"', '"  (define %0.new0 (*  i.new  %factor0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %1 (+  %0.new0  %lastidx0))"', '"  (define %2 (extract  %1 %0.new0 Vx))"', '"  (define %5 (extract  %1 %0.new0 Vu))"', '"  (define %8 (+  %arg5  %0.new0))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %9 (+  %8  %lastidx1))"', '"  (define %10 (extract  %9 %8 Vv))"', '"  (define %12 (sign-extend  %5 (bitvector %arg4)))"', '"  (define %13 (sign-extend  %10 (bitvector %arg4)))"', '"  (define %14 (bvmul  %12  %13))"', '"  (define %15 (sign-extend  %2 (bitvector %arg4)))"', '"  (define %16 (bvadd  %15  %14))"', '"  (define %17 (bvashr  %16  %arg3))"', '"  (define %18 (bvadd  %17  %arg2))"', '"  (define %19 (bvashr  %18  %arg1))"', '"  (define %20 (bvssat %19 %arg4 %arg0 ))"', '"  %20"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_veqw_xor_128B" : {
            "x86_instructions" : {
              "hexagon_V6_veqw_xor_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","4","0","(bv #x000f 4)","(bv #x0000 4)","32"],
                  "in_vectsize" : 128,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 4,
                  "out_precision" : 4,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_veqw_xor_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %5.new0 (+  i  %lastidx0))"', '"  (define %6 (extract  %5.new0 i QxV))"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %8.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8.new0  %lastidx1))"', '"  (define %10 (extract  %9 %8.new0 Vu))"', '"  (define %14 (extract  %9 %8.new0 Vv))"', '"  (define %15 (bveq  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvxor  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vrmpybusv_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vrmpybusv_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","32","8","0","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 4,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vrmpybusv_acc_128B  Vx Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %lanesize1  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vx))"', '"  (define %5 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %6 (+  %5  %lastidx1))"', '"  (define %7 (extract  %6 %5 Vu))"', '"  (define %12 (extract  %6 %5 Vv))"', '"  (define %13 (zero-extend  %7 (bitvector %arg0)))"', '"  (define %14 (sign-extend  %12 (bitvector %arg0)))"', '"  (define %15 (bvmul  %13  %14))"', '"  (define %16 (sign-extend  %15 (bitvector %lanesize1)))"', '"  (define %17 (bvadd  %2  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vaddh_dv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vaddh_dv_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0","0","512"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vaddh_dv_128B  %arg0 Vuu Vvv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (define %offset0 (+  %arg1  %elemsize))"', '" (define %lastidx0 (-  %offset0  1))"', '" (define %0 (extract  %lastidx0 %arg1 %arg0))"', '" (define Vdd %0)"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %3 (+  i.new  %lastidx2))"', '"  (define %4 (extract  %3 i.new Vuu))"', '"  (define %9 (extract  %3 i.new Vvv))"', '"  (define %10 (bvadd  %4  %9))"', '"  (define %17 (+  i.new  %arg2))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %18 (+  %17  %lastidx1))"', '"  (define %19 (extract  %18 %17 Vuu))"', '"  (define %19.ext0 (extract  %18 %17 Vdd))"', '"  (define %19.acc0 (bvadd  %19.ext0  %19))"', '"  (define %24 (extract  %18 %17 Vvv))"', '"  (define %24.ext0 (extract  %18 %17 Vdd))"', '"  (define %24.acc0 (bvadd  %24.ext0  %24))"', '"(concat %10 %19.acc0 %24.acc0)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmaxub_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmaxub_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vmaxuh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmaxub_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %6 (bvugt  %2  %5))"', '"  (define %9 (extract  %1 i.new Vu))"', '"  (define %12 (extract  %1 i.new Vv))"', '"  (define %13 (if (equal? %6 #t) %9 %12))"', '"  %13"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vunpackoh_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vunpackoh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0","32","(bv #x0000000000000010 16)"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 7,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vunpackoh_128B  Vxx Vu %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %arg0  %elemsize))"', '"  (define %0.new0 (*  i.new  %factor0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %1 (+  %0.new0  %lastidx0))"', '"  (define %2 (extract  %1 %0.new0 Vxx))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %4 (+  i.new  %lastidx1))"', '"  (define %5 (extract  %4 i.new Vu))"', '"  (define %6 (bvlshr  %5  %arg1))"', '"  (define %7 (zero-extend  %6 (bitvector %arg0)))"', '"  (define %8 (bvor  %2  %7))"', '"  %8"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmaxw_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmaxw_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","32","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vmaxb_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vmaxh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmaxw_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %6 (bvsgt  %2  %5))"', '"  (define %9 (extract  %1 i.new Vu))"', '"  (define %12 (extract  %1 i.new Vv))"', '"  (define %13 (if (equal? %6 #t) %9 %12))"', '"  %13"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vabsdiffh_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vabsdiffh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vabsdiffw_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","32","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vabsdiffh_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %6 (bvsgt  %2  %5))"', '"  (define %9 (extract  %1 i.new Vu))"', '"  (define %12 (extract  %1 i.new Vv))"', '"  (define %13 (bvsub  %9  %12))"', '"  (define %16 (extract  %1 i.new Vv))"', '"  (define %19 (extract  %1 i.new Vu))"', '"  (define %20 (bvsub  %16  %19))"', '"  (define %21 (if (equal? %6 #t) %13 %20))"', '"  %21"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vdmpyhsat_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vdmpyhsat_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","32","32","16","0","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : None,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "False",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vdmpyhsat_128B  %arg0 Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 )"', '"(define %offset0 (+  %arg1  %lanesize1))"', '"(define %lastidx0 (-  %offset0  1))"', '"(define %0 (extract  %lastidx0 %arg1 %arg0))"', '"(define Vd %0)"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (define %10.red"', '"(apply"', '" bvadd"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx3 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx3))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %6 (+  iterator.0.new  %lastidx2))"', '"  (define %7 (extract  %6 iterator.0.new Rt))"', '"  (define %8 (sign-extend  %4 (bitvector %lanesize1)))"', '"  (define %9 (sign-extend  %7 (bitvector %lanesize1)))"', '"  (define %10 (bvmul  %8  %9))"', '"  %10"', '" )"', '"))"', '" (define %lastidx1 (-  %lanesize1  1))"', '" (define %25.clone.0 (+  i.new  %lastidx1))"', '" (define %10.ext0 (extract  %25.clone.0 i.new Vd))"', '" (define %10.acc0 (bvaddnsw %10.red %10.ext0 %lanesize1))"', '" %10.acc0"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgth_and_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgth_and_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","2","0","(bv #b03 2)","(bv #b00 2)","16"],
                  "in_vectsize" : 128,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 2,
                  "out_precision" : 2,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgth_and_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %5.new0 (+  i  %lastidx0))"', '"  (define %6 (extract  %5.new0 i QxV))"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %8.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8.new0  %lastidx1))"', '"  (define %10 (extract  %9 %8.new0 Vu))"', '"  (define %14 (extract  %9 %8.new0 Vv))"', '"  (define %15 (bvsgt  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvand  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgtub_or_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgtub_or_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","1","0","(bv #b1 1)","(bv #b0 1)","8"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 1,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 10,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgtub_or_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %highidx1 (+  i  %lastidx2))"', '"  (define %6 (extract  %highidx1 i QxV))"', '"  (define %8 (*  %arg2  i))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8  %lastidx1))"', '"  (define %10 (extract  %9 %8 Vu))"', '"  (define %14 (extract  %9 %8 Vv))"', '"  (define %15 (bvugt  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvor  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgtw_xor_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgtw_xor_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","4","0","(bv #x000f 4)","(bv #x0000 4)","32"],
                  "in_vectsize" : 128,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 4,
                  "out_precision" : 4,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgtw_xor_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %5.new0 (+  i  %lastidx0))"', '"  (define %6 (extract  %5.new0 i QxV))"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %8.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8.new0  %lastidx1))"', '"  (define %10 (extract  %9 %8.new0 Vu))"', '"  (define %14 (extract  %9 %8.new0 Vv))"', '"  (define %15 (bvsgt  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvxor  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgtw_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgtw_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","4","0","(bv #x000f 4)","(bv #x0000 4)","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 4,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 9,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgtw_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %3.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %4 (+  %3.new0  %lastidx1))"', '"  (define %5 (extract  %4 %3.new0 Vu))"', '"  (define %9 (extract  %4 %3.new0 Vv))"', '"  (define %10 (bvsgt  %5  %9))"', '"  (define %11 (if (equal? %10 #t) %arg0 %arg1))"', '"  %11"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vaddw_dv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vaddw_dv_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","32","0","0","512"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vaddw_dv_128B  %arg0 Vuu Vvv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (define %offset0 (+  %arg1  %elemsize))"', '" (define %lastidx0 (-  %offset0  1))"', '" (define %0 (extract  %lastidx0 %arg1 %arg0))"', '" (define Vdd %0)"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %3 (+  i.new  %lastidx2))"', '"  (define %4 (extract  %3 i.new Vuu))"', '"  (define %9 (extract  %3 i.new Vvv))"', '"  (define %10 (bvadd  %4  %9))"', '"  (define %17 (+  i.new  %arg2))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %18 (+  %17  %lastidx1))"', '"  (define %19 (extract  %18 %17 Vuu))"', '"  (define %19.ext0 (extract  %18 %17 Vdd))"', '"  (define %19.acc0 (bvadd  %19.ext0  %19))"', '"  (define %24 (extract  %18 %17 Vvv))"', '"  (define %24.ext0 (extract  %18 %17 Vdd))"', '"  (define %24.acc0 (bvadd  %24.ext0  %24))"', '"(concat %10 %19.acc0 %24.acc0)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vavgubrnd_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vavgubrnd_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0","(bv #x00000002 8)","(bv #x00000001 8)"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vavguhrnd_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0","(bv #x0000000000000002 16)","(bv #x0000000000000001 16)"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vavguwrnd_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","32","0","(bv #x00000000000000000000000000000002 32)","(bv #x00000000000000000000000000000001 32)"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vavgubrnd_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %6 (bvadd  %2  %5))"', '"  (define %7 (bvadd  %6  %arg1))"', '"  (define %8 (bvudiv  %7  %arg0))"', '"  %8"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vaddcarrysat_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vaddcarrysat_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_128","1024","1024","32","1","0","32","4"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vaddcarrysat_128B  Vu Vv QsV %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %0 (*  %arg0  i))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %1 (+  %0  %lastidx0))"', '"  (define %2 (extract  %1 %0 Vu))"', '"  (define %5 (extract  %1 %0 Vv))"', '"  (define %6 (bvadd  %2  %5))"', '"  (define %7 (*  i  %arg1))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %highidx0 (+  %7  %lastidx1))"', '"  (define %8 (extract  %highidx0 %7 QsV))"', '"  (define %9 (sign-extend  %8 (bitvector %arg0)))"', '"  (define %10 (bvaddnsw  %6  %9 %arg0))"', '"  %10"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vaddubsat_dv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vaddubsat_dv_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0","0","512"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vaddubsat_dv_128B  %arg0 Vuu Vvv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (define %offset0 (+  %arg1  %elemsize))"', '" (define %lastidx0 (-  %offset0  1))"', '" (define %0 (extract  %lastidx0 %arg1 %arg0))"', '" (define Vdd %0)"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %3 (+  i.new  %lastidx2))"', '"  (define %4 (extract  %3 i.new Vuu))"', '"  (define %9 (extract  %3 i.new Vvv))"', '"  (define %10 (bvaddnuw  %4  %9 %elemsize))"', '"  (define %18 (+  i.new  %arg2))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %19 (+  %18  %lastidx1))"', '"  (define %20 (extract  %19 %18 Vuu))"', '"  (define %20.ext0 (extract  %19 %18 Vdd))"', '"  (define %20.acc0 (bvaddnuw  %20.ext0  %20 %elemsize))"', '"  (define %25 (extract  %19 %18 Vvv))"', '"  (define %25.ext0 (extract  %19 %18 Vdd))"', '"  (define %25.acc0 (bvaddnuw  %25.ext0  %25 %elemsize))"', '"(concat %10 %20.acc0 %25.acc0)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyh_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","32","32","16","0","32","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyh_128B  Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx2))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %6 (+  iterator.0.new  %lastidx1))"', '"  (define %7 (extract  %6 iterator.0.new Rt))"', '"  (define %8 (sign-extend  %4 (bitvector %arg0)))"', '"  (define %9 (sign-extend  %7 (bitvector %arg0)))"', '"  (define %10 (bvmul  %8  %9))"', '"  %10"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyieoh_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyieoh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","512","16","0","32","(bv #x00000000000000000000000000000010 32)","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyieoh_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %arg0  %elemsize))"', '"  (define %1.new0 (*  i.new  %factor0))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %3 (+  %1.new0  %lastidx2))"', '"  (define %4 (extract  %3 %1.new0 Vu))"', '"  (define %7 (+  %arg2  %1.new0))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %8 (+  %7  %lastidx1))"', '"  (define %9 (extract  %8 %7 Vv))"', '"  (define %10 (sign-extend  %4 (bitvector %arg0)))"', '"  (define %11 (sign-extend  %9 (bitvector %arg0)))"', '"  (define %12 (bvmul  %10  %11))"', '"  (define %13 (bvlshr  %12  %arg1))"', '"  %13"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgtuw_xor_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgtuw_xor_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","4","0","(bv #x000f 4)","(bv #x0000 4)","32"],
                  "in_vectsize" : 128,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 4,
                  "out_precision" : 4,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgtuw_xor_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %5.new0 (+  i  %lastidx0))"', '"  (define %6 (extract  %5.new0 i QxV))"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %8.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8.new0  %lastidx1))"', '"  (define %10 (extract  %9 %8.new0 Vu))"', '"  (define %14 (extract  %9 %8.new0 Vv))"', '"  (define %15 (bvugt  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvxor  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vsb_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vsb_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","1024","16","16","8","0","16","64"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 16,
                  "in_precision" : 8,
                  "out_precision" : 16,
                  "in_vectsize_index" : 1,
                  "out_vectsize_index" : 1,
                  "lanesize_index" : 2,
                  "in_precision_index" : 4,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vsh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","1024","32","32","16","0","32","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 1,
                  "out_vectsize_index" : 1,
                  "lanesize_index" : 2,
                  "in_precision_index" : 4,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vsb_128B  Vu %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx1))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %9 (sign-extend  %4 (bitvector %arg0)))"', '"  %9"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgtuh_xor_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgtuh_xor_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","2","0","(bv #b03 2)","(bv #b00 2)","16"],
                  "in_vectsize" : 128,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 2,
                  "out_precision" : 2,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgtuh_xor_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %5.new0 (+  i  %lastidx0))"', '"  (define %6 (extract  %5.new0 i QxV))"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %8.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8.new0  %lastidx1))"', '"  (define %10 (extract  %9 %8.new0 Vu))"', '"  (define %14 (extract  %9 %8.new0 Vv))"', '"  (define %15 (bvugt  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvxor  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vdmpybus_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vdmpybus_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","16","16","8","0","0","4"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 16,
                  "in_precision" : 8,
                  "out_precision" : 16,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : None,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "False",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vdmpybus_128B  %arg0 Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 %arg2 )"', '"(define %offset0 (+  %arg1  %lanesize1))"', '"(define %lastidx0 (-  %offset0  1))"', '"(define %0 (extract  %lastidx0 %arg1 %arg0))"', '"(define Vd %0)"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (define %12.red"', '"(apply"', '" bvadd"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define iterator.0.new.div (/  iterator.0.new  %elemsize))"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx3 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx3))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %5.new0 (/  i.new  %elemsize))"', '"  (define %5.new (+  %5.new0  iterator.0.new.div))"', '"  (define %6 (modulo  %5.new  %arg2))"', '"  (define %7 (*  %elemsize  %6))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %8 (+  %7  %lastidx2))"', '"  (define %9 (extract  %8 %7 Rt))"', '"  (define %10 (zero-extend  %4 (bitvector %lanesize1)))"', '"  (define %11 (sign-extend  %9 (bitvector %lanesize1)))"', '"  (define %12 (bvmul  %10  %11))"', '"  %12"', '" )"', '"))"', '" (define %lastidx1 (-  %lanesize1  1))"', '" (define %16.clone.0 (+  i.new  %lastidx1))"', '" (define %17.ext0 (extract  %16.clone.0 i.new Vd))"', '" (define %17.acc0 (bvadd %12.red %17.ext0))"', '" %17.acc0"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vdmpyhb_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vdmpyhb_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","32","16","8","0","4","16","16","2"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 4,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vdmpyhb_acc_128B  Vx Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 %arg3 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define iterator.0.new.div (/  iterator.0.new  %elemsize))"', '"  (define %lastidx0 (-  %lanesize1  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vx))"', '"  (define %3.new0 (*  iterator.0.new  %arg3))"', '"  (define %5 (+  %3.new0  i.new))"', '"  (define %lastidx2 (-  %arg2  1))"', '"  (define %6 (+  %5  %lastidx2))"', '"  (define %7 (extract  %6 %5 Vu))"', '"  (define %8.new0 (/  i.new  %arg1))"', '"  (define %9 (+  %8.new0  iterator.0.new.div))"', '"  (define %10 (modulo  %9  %arg0))"', '"  (define %11 (*  %elemsize  %10))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %12 (+  %11  %lastidx1))"', '"  (define %13 (extract  %12 %11 Rt))"', '"  (define %15 (sign-extend  %7 (bitvector %lanesize1)))"', '"  (define %16 (sign-extend  %13 (bitvector %lanesize1)))"', '"  (define %17 (bvmul  %15  %16))"', '"  (define %18 (bvadd  %2  %17))"', '"  %18"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyhus_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyhus_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","32","16","0","32","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyhus_acc_128B  Vxx Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %1.new0 (*  iterator.0.new  %arg1))"', '"  (define %2 (+  i.new  %1.new0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vxx))"', '"  (define %7 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %8 (+  %7  %lastidx1))"', '"  (define %9 (extract  %8 %7 Vu))"', '"  (define %14 (extract  %8 %7 Vv))"', '"  (define %15 (sign-extend  %9 (bitvector %arg0)))"', '"  (define %16 (zero-extend  %14 (bitvector %arg0)))"', '"  (define %17 (bvmul  %15  %16))"', '"  (define %18 (bvadd  %4  %17))"', '"  %18"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vavguw_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vavguw_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","32","0","(bv #x00000000000000000000000000000002 32)"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vavgub_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0","(bv #x00000002 8)"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vavguh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0","(bv #x0000000000000002 16)"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vavguw_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %6 (bvadd  %2  %5))"', '"  (define %7 (bvudiv  %6  %arg0))"', '"  %7"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vand_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vand_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vand_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %6 (bvand  %2  %5))"', '"  %6"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vsubw_dv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vsubw_dv_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","64","32","0","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vsubw_dv_128B  Vuu Vvv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %1.new0 (*  iterator.0.new  %arg0))"', '"  (define %2 (+  i.new  %1.new0))"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vuu))"', '"  (define %9 (extract  %3 %2 Vvv))"', '"  (define %10 (bvsub  %4  %9))"', '"  %10"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyiwb_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyiwb_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","1024","256","8","0","32","32","64","4"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 7,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vmpyihb_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","1024","512","8","0","16","16","32","4"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 7,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vmpyiwh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","1024","512","16","0","32","32","64","2"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 7,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyiwb_128B  Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 %arg3 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define i.new.div (/  i.new  %elemsize))"', '"  (define %factor0 (/  %arg0  %elemsize))"', '"  (define %0.new0 (*  i.new  %factor0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %1 (+  %0.new0  %lastidx0))"', '"  (define %2 (extract  %1 %0.new0 Vu))"', '"  (define %3 (modulo  i.new.div  %arg3))"', '"  (define %4 (*  %elemsize  %3))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %5 (+  %4  %lastidx2))"', '"  (define %6 (extract  %5 %4 Rt))"', '"  (define %8 (sign-extend  %2 (bitvector %arg2)))"', '"  (define %9 (sign-extend  %6 (bitvector %arg2)))"', '"  (define %10 (bvmul  %8  %9))"', '"  (define %lastidx1 (-  %arg0  1))"', '"  (define %highidx0 (+  %lastidx1  %arg1))"', '"  (define new.%13 (extract  (- (- %arg2 1) %arg1) (- (- %arg2 1) %highidx0) %10))"', '"  new.%13"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vshuffeb_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vshuffeb_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","512","8","0","8"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vcombine_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0","512"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vshufeh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","512","16","0","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vshuffeb_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %elemsize  %elemsize))"', '"  (define %1.new0 (*  i.new  %factor0))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %3 (+  %1.new0  %lastidx1))"', '"  (define %4 (extract  %3 %1.new0 Vv))"', '"  (define %13 (extract  %3 %1.new0 Vu))"', '"(concat %4 %13)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgtuw_and_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgtuw_and_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","4","0","(bv #x000f 4)","(bv #x0000 4)","32"],
                  "in_vectsize" : 128,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 4,
                  "out_precision" : 4,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgtuw_and_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %5.new0 (+  i  %lastidx0))"', '"  (define %6 (extract  %5.new0 i QxV))"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %8.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8.new0  %lastidx1))"', '"  (define %10 (extract  %9 %8.new0 Vu))"', '"  (define %14 (extract  %9 %8.new0 Vv))"', '"  (define %15 (bvugt  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvand  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgth_xor_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgth_xor_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","2","0","(bv #b03 2)","(bv #b00 2)","16"],
                  "in_vectsize" : 128,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 2,
                  "out_precision" : 2,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgth_xor_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %5.new0 (+  i  %lastidx0))"', '"  (define %6 (extract  %5.new0 i QxV))"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %8.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8.new0  %lastidx1))"', '"  (define %10 (extract  %9 %8.new0 Vu))"', '"  (define %14 (extract  %9 %8.new0 Vv))"', '"  (define %15 (bvsgt  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvxor  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vadduhsat_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vadduhsat_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vadduhsat_128B  %arg0 Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (define %offset0 (+  %arg1  %elemsize))"', '" (define %lastidx0 (-  %offset0  1))"', '" (define %0 (extract  %lastidx0 %arg1 %arg0))"', '" (define Vd %0)"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx1))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %2.ext0 (extract  %1 i.new Vd))"', '"  (define %2.acc0 (bvaddnuw  %2.ext0  %2 %elemsize))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %5.ext0 (extract  %1 i.new Vd))"', '"  (define %5.acc0 (bvaddnuw  %5.ext0  %5 %elemsize))"', '"(concat %2.acc0 %5.acc0)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vrmpybv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vrmpybv_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","32","8","0","0","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 8,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : None,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "False",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vrmpybv_128B  %arg0 Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 %arg2 )"', '"(define %offset0 (+  %arg1  %lanesize1))"', '"(define %lastidx0 (-  %offset0  1))"', '"(define %0 (extract  %lastidx0 %arg1 %arg0))"', '"(define Vd %0)"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (define %15.red"', '"(apply"', '" bvadd"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx2))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %9 (extract  %3 %2 Vv))"', '"  (define %10 (sign-extend  %4 (bitvector %arg2)))"', '"  (define %11 (sign-extend  %9 (bitvector %arg2)))"', '"  (define %12 (bvmul  %10  %11))"', '"  (define %15 (sign-extend  %12 (bitvector %lanesize1)))"', '"  %15"', '" )"', '"))"', '" (define %lastidx1 (-  %lanesize1  1))"', '" (define %17.clone.0 (+  i.new  %lastidx1))"', '" (define %18.ext0 (extract  %17.clone.0 i.new Vd))"', '" (define %18.acc0 (bvadd %15.red %18.ext0))"', '" %18.acc0"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vassign_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vassign_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","1024","1024","1024","32","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 1,
                  "out_vectsize_index" : 1,
                  "lanesize_index" : 2,
                  "in_precision_index" : 4,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vassign_128B  Vu %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  %2"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vrmpyubv_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vrmpyubv_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","32","8","0","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 4,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vrmpyubv_acc_128B  Vx Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %lanesize1  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vx))"', '"  (define %5 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %6 (+  %5  %lastidx1))"', '"  (define %7 (extract  %6 %5 Vu))"', '"  (define %12 (extract  %6 %5 Vv))"', '"  (define %13 (zero-extend  %7 (bitvector %arg0)))"', '"  (define %14 (zero-extend  %12 (bitvector %arg0)))"', '"  (define %15 (bvmul  %13  %14))"', '"  (define %16 (zero-extend  %15 (bitvector %lanesize1)))"', '"  (define %17 (bvadd  %2  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyiwb_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyiwb_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","1024","256","8","0","32","32","64","4"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vmpyiwh_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","1024","512","16","0","32","32","64","2"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vmpyihb_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","1024","512","8","0","16","16","32","4"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyiwb_acc_128B  Vx Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 %arg3 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define i.new.div (/  i.new  %elemsize))"', '"  (define %factor0 (/  %arg0  %elemsize))"', '"  (define %0.new0 (*  i.new  %factor0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %1 (+  %0.new0  %lastidx0))"', '"  (define %2 (extract  %1 %0.new0 Vx))"', '"  (define %5 (extract  %1 %0.new0 Vu))"', '"  (define %6 (modulo  i.new.div  %arg3))"', '"  (define %7 (*  %elemsize  %6))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %8 (+  %7  %lastidx2))"', '"  (define %9 (extract  %8 %7 Rt))"', '"  (define %11 (sign-extend  %5 (bitvector %arg2)))"', '"  (define %12 (sign-extend  %9 (bitvector %arg2)))"', '"  (define %13 (bvmul  %11  %12))"', '"  (define %14 (sign-extend  %2 (bitvector %arg2)))"', '"  (define %15 (bvadd  %14  %13))"', '"  (define %lastidx1 (-  %arg0  1))"', '"  (define %highidx0 (+  %lastidx1  %arg1))"', '"  (define new.%18 (extract  (- (- %arg2 1) %arg1) (- (- %arg2 1) %highidx0) %15))"', '"  new.%18"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vaddhw_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vaddhw_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","32","16","0","32","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vaddhw_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx1))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %9 (extract  %3 %2 Vv))"', '"  (define %10 (bvadd  %4  %9))"', '"  (define %15 (sign-extend  %10 (bitvector %arg0)))"', '"  %15"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vsubhw_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vsubhw_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","32","16","0","32","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vsubhw_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx1))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %9 (extract  %3 %2 Vv))"', '"  (define %10 (bvsub  %4  %9))"', '"  (define %15 (sign-extend  %10 (bitvector %arg0)))"', '"  %15"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgtb_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgtb_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","1","0","(bv #b1 1)","(bv #b0 1)","8"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 1,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 9,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgtb_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %3 (*  %arg2  i))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %4 (+  %3  %lastidx1))"', '"  (define %5 (extract  %4 %3 Vu))"', '"  (define %9 (extract  %4 %3 Vv))"', '"  (define %10 (bvsgt  %5  %9))"', '"  (define %11 (if (equal? %10 #t) %arg0 %arg1))"', '"  %11"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vminb_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vminb_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vminw_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","32","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vminh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vminb_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %6 (bvslt  %2  %5))"', '"  (define %9 (extract  %1 i.new Vu))"', '"  (define %12 (extract  %1 i.new Vv))"', '"  (define %13 (if (equal? %6 #t) %9 %12))"', '"  %13"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vandvnqv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vandvnqv_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","1024","1024","128","1","0","8","(bv #x00000000 8)"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 7,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vandvnqv_128B  QvV Vu %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %highidx0 (+  i  %lastidx1))"', '"  (define %0 (extract  %highidx0 i QvV))"', '"  (define %1 (bvnot  %0))"', '"  (define %2 (*  %arg0  i))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %5 (if (equal? %1 (bv #b1 1))"', '" %4 %arg1))"', '"  %5"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vaddb_dv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vaddb_dv_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0","0","512"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vaddb_dv_128B  %arg0 Vuu Vvv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (define %offset0 (+  %arg1  %elemsize))"', '" (define %lastidx0 (-  %offset0  1))"', '" (define %0 (extract  %lastidx0 %arg1 %arg0))"', '" (define Vdd %0)"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %3 (+  i.new  %lastidx2))"', '"  (define %4 (extract  %3 i.new Vuu))"', '"  (define %9 (extract  %3 i.new Vvv))"', '"  (define %10 (bvadd  %4  %9))"', '"  (define %17 (+  i.new  %arg2))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %18 (+  %17  %lastidx1))"', '"  (define %19 (extract  %18 %17 Vuu))"', '"  (define %19.ext0 (extract  %18 %17 Vdd))"', '"  (define %19.acc0 (bvadd  %19.ext0  %19))"', '"  (define %24 (extract  %18 %17 Vvv))"', '"  (define %24.ext0 (extract  %18 %17 Vdd))"', '"  (define %24.acc0 (bvadd  %24.ext0  %24))"', '"(concat %10 %19.acc0 %24.acc0)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyuhe_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyuhe_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","1024","512","16","0","32","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyuhe_128B  Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %arg0  %elemsize))"', '"  (define %1.new0 (*  i.new  %factor0))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %3 (+  %1.new0  %lastidx2))"', '"  (define %4 (extract  %3 %1.new0 Vu))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %highidx0 (+  %lastidx1  %arg1))"', '"  (define %7 (extract  %highidx0 %arg1 Rt))"', '"  (define %8 (zero-extend  %4 (bitvector %arg0)))"', '"  (define %9 (zero-extend  %7 (bitvector %arg0)))"', '"  (define %10 (bvmul  %8  %9))"', '"  %10"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vdmpyhisat_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vdmpyhisat_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","1024","512","16","0","32","16","512","0","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vdmpyhisat_acc_128B  Vx Vuu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 %arg3 %arg4 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %arg0  %elemsize))"', '"  (define %0.new0 (*  i.new  %factor0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %1 (+  %0.new0  %lastidx0))"', '"  (define %2 (extract  %1 %0.new0 Vx))"', '"  (define %6 (+  %arg4  %0.new0))"', '"  (define %lastidx4 (-  %elemsize  1))"', '"  (define %8 (+  %6  %lastidx4))"', '"  (define %9 (extract  %8 %6 Vuu))"', '"  (define %lastidx3 (-  %elemsize  1))"', '"  (define %highidx1 (+  %lastidx3  %arg3))"', '"  (define %12 (extract  %highidx1 %arg3 Rt))"', '"  (define %13 (sign-extend  %9 (bitvector %arg0)))"', '"  (define %14 (sign-extend  %12 (bitvector %arg0)))"', '"  (define %15 (bvmul  %13  %14))"', '"  (define %16 (bvadd  %2  %15))"', '"  (define %21 (+  %0.new0  %arg2))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %22 (+  %21  %lastidx2))"', '"  (define %23 (extract  %22 %21 Vuu))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %highidx0 (+  %lastidx1  %arg1))"', '"  (define %26 (extract  %highidx0 %arg1 Rt))"', '"  (define %27 (sign-extend  %23 (bitvector %arg0)))"', '"  (define %28 (sign-extend  %26 (bitvector %arg0)))"', '"  (define %29 (bvmul  %27  %28))"', '"  (define %30 (bvaddnsw  %16  %29 %arg0))"', '"  %30"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vandvrt_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vandvrt_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","1024","128","1","0","(bv #b1 1)","(bv #b0 1)","(bv #x00000000 8)","8","4"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 1,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 11,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vandvrt_acc_128B  QxV Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 %arg3 %arg4 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx3 (-  %elemsize  1))"', '"  (define %highidx1 (+  i  %lastidx3))"', '"  (define %0 (extract  %highidx1 i QxV))"', '"  (define %1 (*  %arg3  i))"', '"  (define %lastidx2 (-  %arg3  1))"', '"  (define %2 (+  %1  %lastidx2))"', '"  (define %3 (extract  %2 %1 Vu))"', '"  (define %4 (modulo  i  %arg4))"', '"  (define %5 (*  %arg3  %4))"', '"  (define %lastidx1 (-  %arg3  1))"', '"  (define %6 (+  %5  %lastidx1))"', '"  (define %7 (extract  %6 %5 Rt))"', '"  (define %8 (bvand  %3  %7))"', '"  (define %9 (not (bveq  %8  %arg2 )))"', '"  (define %10 (if (equal? %9 #t) %arg0 %arg1))"', '"  (define %11 (bvor  %0  %10))"', '"  %11"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_veqw_and_128B" : {
            "x86_instructions" : {
              "hexagon_V6_veqw_and_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","4","0","(bv #x000f 4)","(bv #x0000 4)","32"],
                  "in_vectsize" : 128,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 4,
                  "out_precision" : 4,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_veqw_and_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %5.new0 (+  i  %lastidx0))"', '"  (define %6 (extract  %5.new0 i QxV))"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %8.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8.new0  %lastidx1))"', '"  (define %10 (extract  %9 %8.new0 Vu))"', '"  (define %14 (extract  %9 %8.new0 Vv))"', '"  (define %15 (bveq  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvand  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpybus_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpybus_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","16","16","8","0","16","64","4"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 16,
                  "in_precision" : 8,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpybus_128B  Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define iterator.0.new.div (/  iterator.0.new  %elemsize))"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx2))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %5.new0 (/  i.new  %elemsize))"', '"  (define %6 (+  %5.new0  iterator.0.new.div))"', '"  (define %7 (modulo  %6  %arg2))"', '"  (define %8 (*  %elemsize  %7))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %9 (+  %8  %lastidx1))"', '"  (define %10 (extract  %9 %8 Rt))"', '"  (define %11 (zero-extend  %4 (bitvector %arg0)))"', '"  (define %12 (sign-extend  %10 (bitvector %arg0)))"', '"  (define %13 (bvmul  %11  %12))"', '"  %13"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vminuh_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vminuh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vminub_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vminuh_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %6 (bvult  %2  %5))"', '"  (define %9 (extract  %1 i.new Vu))"', '"  (define %12 (extract  %1 i.new Vv))"', '"  (define %13 (if (equal? %6 #t) %9 %12))"', '"  %13"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vaddwsat_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vaddwsat_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","32","0","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vaddwsat_128B  %arg0 Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (define %offset0 (+  %arg1  %elemsize))"', '" (define %lastidx0 (-  %offset0  1))"', '" (define %0 (extract  %lastidx0 %arg1 %arg0))"', '" (define Vd %0)"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx1))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %2.ext0 (extract  %1 i.new Vd))"', '"  (define %2.acc0 (bvaddnsw  %2.ext0  %2 %elemsize))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %5.ext0 (extract  %1 i.new Vd))"', '"  (define %5.acc0 (bvaddnsw  %5.ext0  %5 %elemsize))"', '"(concat %2.acc0 %5.acc0)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vdmpybus_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vdmpybus_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","16","16","8","0","4"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 16,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 4,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vdmpybus_acc_128B  Vx Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define iterator.0.new.div (/  iterator.0.new  %elemsize))"', '"  (define %lastidx0 (-  %lanesize1  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vx))"', '"  (define %5 (+  iterator.0.new  i.new))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %6 (+  %5  %lastidx2))"', '"  (define %7 (extract  %6 %5 Vu))"', '"  (define %8.new0 (/  i.new  %elemsize))"', '"  (define %8.new (+  %8.new0  iterator.0.new.div))"', '"  (define %9 (modulo  %8.new  %arg0))"', '"  (define %10 (*  %elemsize  %9))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %11 (+  %10  %lastidx1))"', '"  (define %12 (extract  %11 %10 Rt))"', '"  (define %13 (zero-extend  %7 (bitvector %lanesize1)))"', '"  (define %14 (sign-extend  %12 (bitvector %lanesize1)))"', '"  (define %15 (bvmul  %13  %14))"', '"  (define %16 (bvadd  %2  %15))"', '"  %16"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_veqb_or_128B" : {
            "x86_instructions" : {
              "hexagon_V6_veqb_or_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","1","0","(bv #b1 1)","(bv #b0 1)","8"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 1,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 10,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_veqb_or_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %highidx1 (+  i  %lastidx2))"', '"  (define %6 (extract  %highidx1 i QxV))"', '"  (define %8 (*  %arg2  i))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8  %lastidx1))"', '"  (define %10 (extract  %9 %8 Vu))"', '"  (define %14 (extract  %9 %8 Vv))"', '"  (define %15 (bveq  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvor  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vunpackh_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vunpackh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","1024","1024","1024","16","0","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 1,
                  "out_vectsize_index" : 1,
                  "lanesize_index" : 2,
                  "in_precision_index" : 4,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vunpackb_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","1024","1024","1024","8","0","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 16,
                  "in_vectsize_index" : 1,
                  "out_vectsize_index" : 1,
                  "lanesize_index" : 2,
                  "in_precision_index" : 4,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vunpackh_128B  Vu %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx1))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %5 (sign-extend  %2 (bitvector %arg0)))"', '"  %5"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vsubwsat_dv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vsubwsat_dv_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","64","32","0","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vsubwsat_dv_128B  Vuu Vvv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %1.new0 (*  iterator.0.new  %arg0))"', '"  (define %2 (+  i.new  %1.new0))"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vuu))"', '"  (define %9 (extract  %3 %2 Vvv))"', '"  (define %10 (bvsubnsw  %4  %9 %elemsize))"', '"  %10"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_veqh_and_128B" : {
            "x86_instructions" : {
              "hexagon_V6_veqh_and_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","2","0","(bv #b03 2)","(bv #b00 2)","16"],
                  "in_vectsize" : 128,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 2,
                  "out_precision" : 2,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_veqh_and_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %5.new0 (+  i  %lastidx0))"', '"  (define %6 (extract  %5.new0 i QxV))"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %8.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8.new0  %lastidx1))"', '"  (define %10 (extract  %9 %8.new0 Vu))"', '"  (define %14 (extract  %9 %8.new0 Vv))"', '"  (define %15 (bveq  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvand  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vrmpybus_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vrmpybus_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","32","32","8","0","0","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 8,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : None,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "False",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vrmpybus_128B  %arg0 Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 %arg2 )"', '"(define %offset0 (+  %arg1  %lanesize1))"', '"(define %lastidx0 (-  %offset0  1))"', '"(define %0 (extract  %lastidx0 %arg1 %arg0))"', '"(define Vd %0)"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (define %13.red"', '"(apply"', '" bvadd"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx3 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx3))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %6 (+  iterator.0.new  %lastidx2))"', '"  (define %7 (extract  %6 iterator.0.new Rt))"', '"  (define %8 (zero-extend  %4 (bitvector %arg2)))"', '"  (define %9 (sign-extend  %7 (bitvector %arg2)))"', '"  (define %10 (bvmul  %8  %9))"', '"  (define %13 (sign-extend  %10 (bitvector %lanesize1)))"', '"  %13"', '" )"', '"))"', '" (define %lastidx1 (-  %lanesize1  1))"', '" (define %15.clone.0 (+  i.new  %lastidx1))"', '" (define %16.ext0 (extract  %15.clone.0 i.new Vd))"', '" (define %16.acc0 (bvadd %13.red %16.ext0))"', '" %16.acc0"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgth_or_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgth_or_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","2","0","(bv #b03 2)","(bv #b00 2)","16"],
                  "in_vectsize" : 128,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 2,
                  "out_precision" : 2,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgth_or_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %5.new0 (+  i  %lastidx0))"', '"  (define %6 (extract  %5.new0 i QxV))"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %8.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8.new0  %lastidx1))"', '"  (define %10 (extract  %9 %8.new0 Vu))"', '"  (define %14 (extract  %9 %8.new0 Vv))"', '"  (define %15 (bvsgt  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvor  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vadduwsat_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vadduwsat_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","32","0","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vadduwsat_128B  %arg0 Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (define %offset0 (+  %arg1  %elemsize))"', '" (define %lastidx0 (-  %offset0  1))"', '" (define %0 (extract  %lastidx0 %arg1 %arg0))"', '" (define Vd %0)"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx1))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %2.ext0 (extract  %1 i.new Vd))"', '"  (define %2.acc0 (bvaddnuw  %2.ext0  %2 %elemsize))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %5.ext0 (extract  %1 i.new Vd))"', '"  (define %5.acc0 (bvaddnuw  %5.ext0  %5 %elemsize))"', '"(concat %2.acc0 %5.acc0)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vrmpybv_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vrmpybv_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","32","8","0","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 4,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vrmpybv_acc_128B  Vx Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %lanesize1  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vx))"', '"  (define %5 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %6 (+  %5  %lastidx1))"', '"  (define %7 (extract  %6 %5 Vu))"', '"  (define %12 (extract  %6 %5 Vv))"', '"  (define %13 (sign-extend  %7 (bitvector %arg0)))"', '"  (define %14 (sign-extend  %12 (bitvector %arg0)))"', '"  (define %15 (bvmul  %13  %14))"', '"  (define %16 (sign-extend  %15 (bitvector %lanesize1)))"', '"  (define %17 (bvadd  %2  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vaddbsat_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vaddbsat_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vaddbsat_128B  %arg0 Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (define %offset0 (+  %arg1  %elemsize))"', '" (define %lastidx0 (-  %offset0  1))"', '" (define %0 (extract  %lastidx0 %arg1 %arg0))"', '" (define Vd %0)"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx1))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %2.ext0 (extract  %1 i.new Vd))"', '"  (define %2.acc0 (bvaddnsw  %2.ext0  %2 %elemsize))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %5.ext0 (extract  %1 i.new Vd))"', '"  (define %5.acc0 (bvaddnsw  %5.ext0  %5 %elemsize))"', '"(concat %2.acc0 %5.acc0)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_veqh_xor_128B" : {
            "x86_instructions" : {
              "hexagon_V6_veqh_xor_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","2","0","(bv #b03 2)","(bv #b00 2)","16"],
                  "in_vectsize" : 128,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 2,
                  "out_precision" : 2,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_veqh_xor_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %5.new0 (+  i  %lastidx0))"', '"  (define %6 (extract  %5.new0 i QxV))"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %8.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8.new0  %lastidx1))"', '"  (define %10 (extract  %9 %8.new0 Vu))"', '"  (define %14 (extract  %9 %8.new0 Vv))"', '"  (define %15 (bveq  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvxor  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_veqw_or_128B" : {
            "x86_instructions" : {
              "hexagon_V6_veqw_or_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","4","0","(bv #x000f 4)","(bv #x0000 4)","32"],
                  "in_vectsize" : 128,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 4,
                  "out_precision" : 4,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_veqw_or_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %5.new0 (+  i  %lastidx0))"', '"  (define %6 (extract  %5.new0 i QxV))"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %8.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8.new0  %lastidx1))"', '"  (define %10 (extract  %9 %8.new0 Vu))"', '"  (define %14 (extract  %9 %8.new0 Vv))"', '"  (define %15 (bveq  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvor  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vinsertwr_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vinsertwr_128B" : {
                  "args" : ["SYMBOLIC_BV_%elemsize","1024","1024","1024","1024","0","0"],
                  "in_vectsize" : None,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : None,
                  "out_precision" : 32,
                  "in_vectsize_index" : None,
                  "out_vectsize_index" : 1,
                  "lanesize_index" : 2,
                  "in_precision_index" : None,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vinsertwr_128B  Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([%inner.it (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  Rt"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vaddh_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vaddh_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vaddh_128B  %arg0 Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (define %offset0 (+  %arg1  %elemsize))"', '" (define %lastidx0 (-  %offset0  1))"', '" (define %0 (extract  %lastidx0 %arg1 %arg0))"', '" (define Vd %0)"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx1))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %2.ext0 (extract  %1 i.new Vd))"', '"  (define %2.acc0 (bvadd  %2.ext0  %2))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %5.ext0 (extract  %1 i.new Vd))"', '"  (define %5.acc0 (bvadd  %5.ext0  %5))"', '"(concat %2.acc0 %5.acc0)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vrmpyub_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vrmpyub_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","32","32","8","0","0","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 8,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : None,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "False",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vrmpyub_128B  %arg0 Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 %arg2 )"', '"(define %offset0 (+  %arg1  %lanesize1))"', '"(define %lastidx0 (-  %offset0  1))"', '"(define %0 (extract  %lastidx0 %arg1 %arg0))"', '"(define Vd %0)"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (define %13.red"', '"(apply"', '" bvadd"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx3 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx3))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %6 (+  iterator.0.new  %lastidx2))"', '"  (define %7 (extract  %6 iterator.0.new Rt))"', '"  (define %8 (zero-extend  %4 (bitvector %arg2)))"', '"  (define %9 (zero-extend  %7 (bitvector %arg2)))"', '"  (define %10 (bvmul  %8  %9))"', '"  (define %13 (zero-extend  %10 (bitvector %lanesize1)))"', '"  %13"', '" )"', '"))"', '" (define %lastidx1 (-  %lanesize1  1))"', '" (define %15.clone.0 (+  i.new  %lastidx1))"', '" (define %16.ext0 (extract  %15.clone.0 i.new Vd))"', '" (define %16.acc0 (bvadd %13.red %16.ext0))"', '" %16.acc0"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpabuu_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpabuu_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","512","8","32","8","16","512","2","16","512","8","64","2","8","8","8","512","8","0","8","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 8,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 4,
                  "out_precision_index" : 10,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpabuu_acc_128B  Vxx Vuu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 %arg3 %arg4 %arg5 %arg6 %arg7 %arg8 %arg9 %arg10 %arg11 %arg12 %arg13 %arg14 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (define %37.clone.0.new0 (*  i.new  %arg1))"', '" (define %39.clone.0 (+  %37.clone.0.new0  %arg0))"', '" (define %lastidx0 (-  %lanesize1  1))"', '" (define %40.clone.0 (+  %39.clone.0  %lastidx0))"', '" (define %41.clone.0 (extract  %40.clone.0 %39.clone.0 Vxx))"', '" (define %dst0 %41.clone.0)"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %43.new0 (*  i.new  %arg6))"', '"  (define %44.new0 (*  iterator.0.new  %arg5))"', '"  (define %45 (+  %arg4  %43.new0))"', '"  (define %46 (+  %45  %44.new0))"', '"  (define %lastidx3 (-  %elemsize  1))"', '"  (define %47 (+  %46  %lastidx3))"', '"  (define %48 (extract  %47 %46 Vuu))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %50 (+  iterator.0.new  %lastidx2))"', '"  (define %51 (extract  %50 iterator.0.new Rt))"', '"  (define %52 (zero-extend  %48 (bitvector %arg2)))"', '"  (define %53 (zero-extend  %51 (bitvector %arg2)))"', '"  (define %54 (bvmul  %52  %53))"', '"  (define %72.clone.1 (+  %37.clone.0.new0  %arg3))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %73.clone.1 (+  %72.clone.1  %lastidx1))"', '"  (define %54.ext0 (extract  %73.clone.1 %72.clone.1 %dst0))"', '"  (define %54.acc0 (bvadd  %54.ext0  %54))"', '"  %54.acc0"', '" )"', '" )"', '" (define %factor0 (/  %lanesize1  %lanesize1))"', '" (define %0.new0 (*  i.new  %factor0))"', '" (define %lastidx4 (-  %lanesize1  1))"', '" (define %3 (+  %0.new0  %lastidx4))"', '" (define %4 (extract  %3 %0.new0 Vxx))"', '" (define %8 (+  %arg14  %0.new0))"', '" (define %lastidx8 (-  %arg13  1))"', '" (define %10 (+  %8  %lastidx8))"', '" (define %11 (extract  %10 %8 Vuu))"', '" (define %lastidx7 (-  %arg11  1))"', '" (define %highidx1 (+  %lastidx7  %arg12))"', '" (define %14 (extract  %highidx1 %arg12 Rt))"', '" (define %15 (zero-extend  %11 (bitvector %lanesize1)))"', '" (define %16 (zero-extend  %14 (bitvector %lanesize1)))"', '" (define %17 (bvmul  %15  %16))"', '" (define %22 (+  %0.new0  %arg10))"', '" (define %lastidx6 (-  %arg9  1))"', '" (define %23 (+  %22  %lastidx6))"', '" (define %24 (extract  %23 %22 Vuu))"', '" (define %lastidx5 (-  %arg7  1))"', '" (define %highidx0 (+  %lastidx5  %arg8))"', '" (define %27 (extract  %highidx0 %arg8 Rt))"', '" (define %28 (zero-extend  %24 (bitvector %lanesize1)))"', '" (define %29 (zero-extend  %27 (bitvector %lanesize1)))"', '" (define %30 (bvmul  %28  %29))"', '" (define %31 (bvadd  %17  %30))"', '" (define %32 (bvadd  %4  %31))"', '" %32"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vunpackob_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vunpackob_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0","16","(bv #x00000008 8)"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 7,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vunpackob_128B  Vxx Vu %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %arg0  %elemsize))"', '"  (define %0.new0 (*  i.new  %factor0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %1 (+  %0.new0  %lastidx0))"', '"  (define %2 (extract  %1 %0.new0 Vxx))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %4 (+  i.new  %lastidx1))"', '"  (define %5 (extract  %4 i.new Vu))"', '"  (define %6 (bvlshr  %5  %arg1))"', '"  (define %7 (zero-extend  %6 (bitvector %arg0)))"', '"  (define %8 (bvor  %2  %7))"', '"  %8"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgtb_xor_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgtb_xor_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","1","0","(bv #b1 1)","(bv #b0 1)","8"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 1,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 10,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgtb_xor_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %highidx1 (+  i  %lastidx2))"', '"  (define %6 (extract  %highidx1 i QxV))"', '"  (define %8 (*  %arg2  i))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8  %lastidx1))"', '"  (define %10 (extract  %9 %8 Vu))"', '"  (define %14 (extract  %9 %8 Vv))"', '"  (define %15 (bvsgt  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvxor  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyhv_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyhv_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","32","16","0","32","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyhv_acc_128B  Vxx Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %1.new0 (*  iterator.0.new  %arg1))"', '"  (define %2 (+  i.new  %1.new0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vxx))"', '"  (define %7 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %8 (+  %7  %lastidx1))"', '"  (define %9 (extract  %8 %7 Vu))"', '"  (define %14 (extract  %8 %7 Vv))"', '"  (define %15 (sign-extend  %9 (bitvector %arg0)))"', '"  (define %16 (sign-extend  %14 (bitvector %arg0)))"', '"  (define %17 (bvmul  %15  %16))"', '"  (define %18 (bvadd  %4  %17))"', '"  %18"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgtuw_or_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgtuw_or_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","4","0","(bv #x000f 4)","(bv #x0000 4)","32"],
                  "in_vectsize" : 128,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 4,
                  "out_precision" : 4,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgtuw_or_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %5.new0 (+  i  %lastidx0))"', '"  (define %6 (extract  %5.new0 i QxV))"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %8.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8.new0  %lastidx1))"', '"  (define %10 (extract  %9 %8.new0 Vu))"', '"  (define %14 (extract  %9 %8.new0 Vv))"', '"  (define %15 (bvugt  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvor  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vsubuhsat_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vsubuhsat_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vsubuwsat_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","32","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vsububsat_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vsubububb_sat_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vsubuhsat_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %6 (bvsubnuw  %2  %5 %elemsize))"', '"  %6"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgtb_and_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgtb_and_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","1","0","(bv #b1 1)","(bv #b0 1)","8"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 1,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 10,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgtb_and_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %highidx1 (+  i  %lastidx2))"', '"  (define %6 (extract  %highidx1 i QxV))"', '"  (define %8 (*  %arg2  i))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8  %lastidx1))"', '"  (define %10 (extract  %9 %8 Vu))"', '"  (define %14 (extract  %9 %8 Vv))"', '"  (define %15 (bvsgt  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvand  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vnavgw_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vnavgw_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","32","0","(bv #x00000000000000000000000000000002 32)"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vnavgb_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0","(bv #x00000002 8)"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vnavgh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","16","0","(bv #x0000000000000002 16)"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vnavgw_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %6 (bvsub  %2  %5))"', '"  (define %7 (bvsdiv  %6  %arg0))"', '"  %7"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgtuh_and_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgtuh_and_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","2","0","(bv #b03 2)","(bv #b00 2)","16"],
                  "in_vectsize" : 128,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 2,
                  "out_precision" : 2,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgtuh_and_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %5.new0 (+  i  %lastidx0))"', '"  (define %6 (extract  %5.new0 i QxV))"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %8.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8.new0  %lastidx1))"', '"  (define %10 (extract  %9 %8.new0 Vu))"', '"  (define %14 (extract  %9 %8.new0 Vv))"', '"  (define %15 (bvugt  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvand  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vaddhw_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vaddhw_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","32","16","0","32","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vaddhw_acc_128B  Vxx Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %1.new0 (*  iterator.0.new  %arg1))"', '"  (define %2 (+  i.new  %1.new0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vxx))"', '"  (define %7 (+  iterator.0.new  i.new))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %8 (+  %7  %lastidx1))"', '"  (define %9 (extract  %8 %7 Vu))"', '"  (define %14 (extract  %8 %7 Vv))"', '"  (define %15 (bvadd  %9  %14))"', '"  (define %16 (sign-extend  %15 (bitvector %arg0)))"', '"  (define %17 (bvadd  %4  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vsubhsat_dv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vsubhsat_dv_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","16","32","16","0","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 16,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vsubhsat_dv_128B  Vuu Vvv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %1.new0 (*  iterator.0.new  %arg0))"', '"  (define %2 (+  i.new  %1.new0))"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vuu))"', '"  (define %9 (extract  %3 %2 Vvv))"', '"  (define %10 (bvsubnsw  %4  %9 %elemsize))"', '"  %10"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_veqw_128B" : {
            "x86_instructions" : {
              "hexagon_V6_veqw_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","4","0","(bv #x000f 4)","(bv #x0000 4)","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 4,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 9,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_veqw_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %3.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %4 (+  %3.new0  %lastidx1))"', '"  (define %5 (extract  %4 %3.new0 Vu))"', '"  (define %9 (extract  %4 %3.new0 Vv))"', '"  (define %10 (bveq  %5  %9))"', '"  (define %11 (if (equal? %10 #t) %arg0 %arg1))"', '"  %11"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vgtw_and_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vgtw_and_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","4","0","(bv #x000f 4)","(bv #x0000 4)","32"],
                  "in_vectsize" : 128,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 4,
                  "out_precision" : 4,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vgtw_and_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %5.new0 (+  i  %lastidx0))"', '"  (define %6 (extract  %5.new0 i QxV))"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %8.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8.new0  %lastidx1))"', '"  (define %10 (extract  %9 %8.new0 Vu))"', '"  (define %14 (extract  %9 %8.new0 Vv))"', '"  (define %15 (bvsgt  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvand  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vaddububb_sat_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vaddububb_sat_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vaddububb_sat_128B  %arg0 Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (define %offset0 (+  %arg1  %elemsize))"', '" (define %lastidx0 (-  %offset0  1))"', '" (define %0 (extract  %lastidx0 %arg1 %arg0))"', '" (define Vd %0)"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx1))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %2.ext0 (extract  %1 i.new Vd))"', '"  (define %2.acc0 (bvaddnuw  %2.ext0  %2 %elemsize))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %5.ext0 (extract  %1 i.new Vd))"', '"  (define %5.acc0 (bvaddnuw  %5.ext0  %5 %elemsize))"', '"(concat %2.acc0 %5.acc0)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vsubuwsat_dv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vsubuwsat_dv_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","64","32","0","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vsubuwsat_dv_128B  Vuu Vvv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %1.new0 (*  iterator.0.new  %arg0))"', '"  (define %2 (+  i.new  %1.new0))"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vuu))"', '"  (define %9 (extract  %3 %2 Vvv))"', '"  (define %10 (bvsubnuw  %4  %9 %elemsize))"', '"  %10"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vsubuhsat_dv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vsubuhsat_dv_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","16","32","16","0","32"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 16,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vsubuhsat_dv_128B  Vuu Vvv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %1.new0 (*  iterator.0.new  %arg0))"', '"  (define %2 (+  i.new  %1.new0))"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vuu))"', '"  (define %9 (extract  %3 %2 Vvv))"', '"  (define %10 (bvsubnuw  %4  %9 %elemsize))"', '"  %10"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyub_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyub_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","16","16","8","0","16","4","64"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 16,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyub_acc_128B  Vxx Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define iterator.0.new.div (/  iterator.0.new  %elemsize))"', '"  (define %1.new0 (*  iterator.0.new  %arg2))"', '"  (define %2 (+  i.new  %1.new0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vxx))"', '"  (define %7 (+  iterator.0.new  i.new))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %8 (+  %7  %lastidx2))"', '"  (define %9 (extract  %8 %7 Vu))"', '"  (define %10.new0 (/  i.new  %elemsize))"', '"  (define %11 (+  %10.new0  iterator.0.new.div))"', '"  (define %12 (modulo  %11  %arg1))"', '"  (define %13 (*  %elemsize  %12))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %14 (+  %13  %lastidx1))"', '"  (define %15 (extract  %14 %13 Rt))"', '"  (define %16 (zero-extend  %9 (bitvector %arg0)))"', '"  (define %17 (zero-extend  %15 (bitvector %arg0)))"', '"  (define %18 (bvmul  %16  %17))"', '"  (define %19 (bvadd  %4  %18))"', '"  %19"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_veqh_or_128B" : {
            "x86_instructions" : {
              "hexagon_V6_veqh_or_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","2","0","(bv #b03 2)","(bv #b00 2)","16"],
                  "in_vectsize" : 128,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 2,
                  "out_precision" : 2,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_veqh_or_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %5.new0 (+  i  %lastidx0))"', '"  (define %6 (extract  %5.new0 i QxV))"', '"  (define %factor0 (/  %arg2  %elemsize))"', '"  (define %8.new0 (*  i  %factor0))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8.new0  %lastidx1))"', '"  (define %10 (extract  %9 %8.new0 Vu))"', '"  (define %14 (extract  %9 %8.new0 Vv))"', '"  (define %15 (bveq  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvor  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vandqrt_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vandqrt_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_128","SYMBOLIC_BV_32","1024","1024","1024","8","0","(bv #x00000000 8)","4"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vandqrt_acc_128B  Vx QuV Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define i.new.div (/  i.new  %elemsize))"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vx))"', '"  (define %3 (extract  i.new.div i.new.div QuV))"', '"  (define %4 (modulo  i.new.div  %arg1))"', '"  (define %5 (*  %elemsize  %4))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %6 (+  %5  %lastidx1))"', '"  (define %7 (extract  %6 %5 Rt))"', '"  (define %8 (if (equal? %3 (bv #b1 1))"', '" %7 %arg0))"', '"  (define %9 (bvor  %2  %8))"', '"  %9"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vnot_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vnot_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","1024","1024","1024","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 1,
                  "out_vectsize_index" : 1,
                  "lanesize_index" : 2,
                  "in_precision_index" : 4,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_pred_not_128B" : {
                  "args" : ["SYMBOLIC_BV_128","128","128","128","1","0"],
                  "in_vectsize" : None,
                  "out_vectsize" : 128,
                  "lanesize" : 128,
                  "in_precision" : None,
                  "out_precision" : 1,
                  "in_vectsize_index" : None,
                  "out_vectsize_index" : 1,
                  "lanesize_index" : 2,
                  "in_precision_index" : None,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vnot_128B  Vu %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx0))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %3 (bvnot  %2))"', '"  %3"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vshufoh_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vshufoh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","512","16","0","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vshuffob_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","512","8","0","8"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 5,
                  "out_precision_index" : 5,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vshufoh_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %elemsize  %elemsize))"', '"  (define %1.new0 (*  i.new  %factor0))"', '"  (define %2 (+  %arg0  %1.new0))"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx0))"', '"  (define %4 (extract  %3 %2 Vv))"', '"  (define %13 (extract  %3 %2 Vu))"', '"(concat %4 %13)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vrmpybusv_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vrmpybusv_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","32","8","0","0","16"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 8,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : None,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "False",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vrmpybusv_128B  %arg0 Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 %arg2 )"', '"(define %offset0 (+  %arg1  %lanesize1))"', '"(define %lastidx0 (-  %offset0  1))"', '"(define %0 (extract  %lastidx0 %arg1 %arg0))"', '"(define Vd %0)"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (define %15.red"', '"(apply"', '" bvadd"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx2))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %9 (extract  %3 %2 Vv))"', '"  (define %10 (zero-extend  %4 (bitvector %arg2)))"', '"  (define %11 (sign-extend  %9 (bitvector %arg2)))"', '"  (define %12 (bvmul  %10  %11))"', '"  (define %15 (sign-extend  %12 (bitvector %lanesize1)))"', '"  %15"', '" )"', '"))"', '" (define %lastidx1 (-  %lanesize1  1))"', '" (define %17.clone.0 (+  i.new  %lastidx1))"', '" (define %18.ext0 (extract  %17.clone.0 i.new Vd))"', '" (define %18.acc0 (bvadd %15.red %18.ext0))"', '" %18.acc0"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_veqb_and_128B" : {
            "x86_instructions" : {
              "hexagon_V6_veqb_and_128B" : {
                  "args" : ["SYMBOLIC_BV_128","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","128","1","0","(bv #b1 1)","(bv #b0 1)","8"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 128,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 1,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 10,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_veqb_and_128B  QxV Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %highidx1 (+  i  %lastidx2))"', '"  (define %6 (extract  %highidx1 i QxV))"', '"  (define %8 (*  %arg2  i))"', '"  (define %lastidx1 (-  %arg2  1))"', '"  (define %9 (+  %8  %lastidx1))"', '"  (define %10 (extract  %9 %8 Vu))"', '"  (define %14 (extract  %9 %8 Vv))"', '"  (define %15 (bveq  %10  %14))"', '"  (define %16 (if (equal? %15 #t) %arg0 %arg1))"', '"  (define %17 (bvand  %6  %16))"', '"  %17"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vdmpyhvsat_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vdmpyhvsat_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","32","32","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 32,
                  "in_precision" : 16,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : None,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 4,
                  "Cost" : "None",
                  "SIMD" : "False",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vdmpyhvsat_acc_128B  Vx Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset )"', '"(define %dst0 Vx)"', '"(apply"', '"concat"', '"(for/list ([i.new (reverse (range 0 %vectsize %lanesize1))])"', '" (define %12.red"', '"(apply"', '" bvadd"', '" (for/list ([iterator.0.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %2 (+  iterator.0.new  i.new))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %3 (+  %2  %lastidx2))"', '"  (define %4 (extract  %3 %2 Vu))"', '"  (define %9 (extract  %3 %2 Vv))"', '"  (define %10 (sign-extend  %4 (bitvector %lanesize1)))"', '"  (define %11 (sign-extend  %9 (bitvector %lanesize1)))"', '"  (define %12 (bvmul  %10  %11))"', '"  %12"', '" )"', '"))"', '" (define %lastidx1 (-  %lanesize1  1))"', '" (define %33.clone.1 (+  i.new  %lastidx1))"', '" (define %12.ext0 (extract  %33.clone.1 i.new %dst0))"', '" (define %12.acc0 (bvaddnsw %12.red %12.ext0 %lanesize1))"', '" %12.acc0"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vaddbq_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vaddbq_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_128","1024","1024","1024","8","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vaddhq_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_128","1024","1024","1024","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vaddbnq_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_128","1024","1024","1024","8","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vaddwnq_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_128","1024","1024","1024","32","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vaddwq_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_128","1024","1024","1024","32","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vaddhnq" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_128","1024","1024","1024","16","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 16,
                  "out_precision" : 16,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vaddbq_128B  Vx Vu QvV %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define i.new.div (/  i.new  %elemsize))"', '"  (define %0 (extract  i.new.div i.new.div QvV))"', '"  (define %lastidx0 (-  %elemsize  1))"', '"  (define %2 (+  i.new  %lastidx0))"', '"  (define %3 (extract  %2 i.new Vx))"', '"  (define %6 (extract  %2 i.new Vx))"', '"  (define %9 (extract  %2 i.new Vu))"', '"  (define %10 (bvadd  %6  %9))"', '"  (define %11 (if (equal? %0 (bv #b1 1))"', '" %3 %10))"', '"  %11"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyuhe_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyuhe_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","1024","512","16","0","32","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyuhe_acc_128B  Vx Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %arg0  %elemsize))"', '"  (define %0.new0 (*  i.new  %factor0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %1 (+  %0.new0  %lastidx0))"', '"  (define %2 (extract  %1 %0.new0 Vx))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %6 (+  %0.new0  %lastidx2))"', '"  (define %7 (extract  %6 %0.new0 Vu))"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %highidx0 (+  %lastidx1  %arg1))"', '"  (define %10 (extract  %highidx0 %arg1 Rt))"', '"  (define %11 (zero-extend  %7 (bitvector %arg0)))"', '"  (define %12 (zero-extend  %10 (bitvector %arg0)))"', '"  (define %13 (bvmul  %11  %12))"', '"  (define %14 (bvadd  %2  %13))"', '"  %14"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vaddb_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vaddb_128B" : {
                  "args" : ["(bv #x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 1024)","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","1024","8","0","0"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 8,
                  "out_precision" : 8,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 6,
                  "out_precision_index" : 6,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vaddb_128B  %arg0 Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg1 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (define %offset0 (+  %arg1  %elemsize))"', '" (define %lastidx0 (-  %offset0  1))"', '" (define %0 (extract  %lastidx0 %arg1 %arg0))"', '" (define Vd %0)"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %lastidx1 (-  %elemsize  1))"', '"  (define %1 (+  i.new  %lastidx1))"', '"  (define %2 (extract  %1 i.new Vu))"', '"  (define %2.ext0 (extract  %1 i.new Vd))"', '"  (define %2.acc0 (bvadd  %2.ext0  %2))"', '"  (define %5 (extract  %1 i.new Vv))"', '"  (define %5.ext0 (extract  %1 i.new Vd))"', '"  (define %5.acc0 (bvadd  %5.ext0  %5))"', '"(concat %2.acc0 %5.acc0)"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyiewuh_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyiewuh_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","512","16","0","32","32","64"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 2,
                  "out_vectsize_index" : 2,
                  "lanesize_index" : 3,
                  "in_precision_index" : 7,
                  "out_precision_index" : 7,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyiewuh_128B  Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %arg0  %elemsize))"', '"  (define %0.new0 (*  i.new  %factor0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %1 (+  %0.new0  %lastidx0))"', '"  (define %2 (extract  %1 %0.new0 Vu))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %6 (+  %0.new0  %lastidx2))"', '"  (define %7 (extract  %6 %0.new0 Vv))"', '"  (define %9 (sign-extend  %2 (bitvector %arg2)))"', '"  (define %10 (sign-extend  %7 (bitvector %arg2)))"', '"  (define %11 (bvmul  %9  %10))"', '"  (define %lastidx1 (-  %arg0  1))"', '"  (define %highidx0 (+  %lastidx1  %arg1))"', '"  (define new.%14 (extract  (- (- %arg2 1) %arg1) (- (- %arg2 1) %highidx0) %11))"', '"  new.%14"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyiwub_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyiwub_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_32","1024","1024","256","8","0","32","32","64","4"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyiwub_acc_128B  Vx Vu Rt %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 %arg3 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define i.new.div (/  i.new  %elemsize))"', '"  (define %factor0 (/  %arg0  %elemsize))"', '"  (define %0.new0 (*  i.new  %factor0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %1 (+  %0.new0  %lastidx0))"', '"  (define %2 (extract  %1 %0.new0 Vx))"', '"  (define %5 (extract  %1 %0.new0 Vu))"', '"  (define %6 (modulo  i.new.div  %arg3))"', '"  (define %7 (*  %elemsize  %6))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %8 (+  %7  %lastidx2))"', '"  (define %9 (extract  %8 %7 Rt))"', '"  (define %11 (sign-extend  %5 (bitvector %arg2)))"', '"  (define %12 (zero-extend  %9 (bitvector %arg2)))"', '"  (define %13 (bvmul  %11  %12))"', '"  (define %14 (sign-extend  %2 (bitvector %arg2)))"', '"  (define %15 (bvadd  %14  %13))"', '"  (define %lastidx1 (-  %arg0  1))"', '"  (define %highidx0 (+  %lastidx1  %arg1))"', '"  (define new.%18 (extract  (- (- %arg2 1) %arg1) (- (- %arg2 1) %highidx0) %15))"', '"  new.%18"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        
          "hexagon_V6_vmpyiewh_acc_128B" : {
            "x86_instructions" : {
              "hexagon_V6_vmpyiewh_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","512","16","0","32","32","64"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        
              "hexagon_V6_vmpyiewuh_acc_128B" : {
                  "args" : ["SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","SYMBOLIC_BV_1024","1024","1024","512","16","0","32","32","64"],
                  "in_vectsize" : 1024,
                  "out_vectsize" : 1024,
                  "lanesize" : 1024,
                  "in_precision" : 32,
                  "out_precision" : 32,
                  "in_vectsize_index" : 3,
                  "out_vectsize_index" : 3,
                  "lanesize_index" : 4,
                  "in_precision_index" : 8,
                  "out_precision_index" : 8,
                  "Cost" : "None",
                  "SIMD" : "True",
      },
        },
            "semantics" : ['"(define (hexagon_V6_vmpyiewh_acc_128B  Vx Vu Vv %vectsize %lanesize1 %lanesize2 %elemsize %laneoffset %arg0 %arg1 %arg2 )"', '"(apply"', '"concat"', '"(for/list ([%outer.it (reverse (range 0 %vectsize %lanesize1))])"', '" (apply"', '" concat"', '" (for/list ([i.new (reverse (range %laneoffset %lanesize2 %elemsize))])"', '"  (define %factor0 (/  %arg0  %elemsize))"', '"  (define %0.new0 (*  i.new  %factor0))"', '"  (define %lastidx0 (-  %arg0  1))"', '"  (define %1 (+  %0.new0  %lastidx0))"', '"  (define %2 (extract  %1 %0.new0 Vx))"', '"  (define %5 (extract  %1 %0.new0 Vu))"', '"  (define %lastidx2 (-  %elemsize  1))"', '"  (define %9 (+  %0.new0  %lastidx2))"', '"  (define %10 (extract  %9 %0.new0 Vv))"', '"  (define %12 (sign-extend  %5 (bitvector %arg2)))"', '"  (define %13 (sign-extend  %10 (bitvector %arg2)))"', '"  (define %14 (bvmul  %12  %13))"', '"  (define %15 (sign-extend  %2 (bitvector %arg2)))"', '"  (define %16 (bvadd  %15  %14))"', '"  (define %lastidx1 (-  %arg0  1))"', '"  (define %highidx0 (+  %lastidx1  %arg1))"', '"  (define new.%19 (extract  (- (- %arg2 1) %arg1) (- (- %arg2 1) %highidx0) %16))"', '"  new.%19"', '" )"', '" )"', '")"', '")"', '")"', '""'], 
      },
        }

