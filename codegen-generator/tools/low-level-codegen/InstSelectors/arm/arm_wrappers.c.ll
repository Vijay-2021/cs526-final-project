; ModuleID = 'arm_wrappers.c.bc'
source_filename = "arm_wrappers.c"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "arm64-apple-macosx13.0.0"

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vadd_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = add <8 x i8> %10, %11
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vaddq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = add <16 x i8> %10, %11
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vadd_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = add <4 x i16> %10, %11
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vaddq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = add <8 x i16> %10, %11
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vadd_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = add <2 x i32> %10, %11
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vaddq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = add <4 x i32> %10, %11
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vaddq_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = add <2 x i64> %10, %11
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vadd_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = add <8 x i8> %10, %11
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vaddq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = add <16 x i8> %10, %11
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vadd_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = add <4 x i16> %10, %11
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vaddq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = add <8 x i16> %10, %11
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vadd_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = add <2 x i32> %10, %11
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vaddq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = add <4 x i32> %10, %11
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vaddq_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = add <2 x i64> %10, %11
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vadd_s64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = add <1 x i64> %10, %11
  store <1 x i64> %12, <1 x i64>* %5, align 8
  %13 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vadd_u64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = add <1 x i64> %10, %11
  store <1 x i64> %12, <1 x i64>* %5, align 8
  %13 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vaddd_s64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = add i64 %10, %11
  store i64 %12, i64* %5, align 8
  %13 = load i64, i64* %5, align 8
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vaddd_u64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = add i64 %10, %11
  store i64 %12, i64* %5, align 8
  %13 = load i64, i64* %5, align 8
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vaddl_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #1 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i8>, align 8
  %11 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %10, align 8
  store <8 x i8> %1, <8 x i8>* %11, align 8
  %12 = load <8 x i8>, <8 x i8>* %10, align 8
  %13 = load <8 x i8>, <8 x i8>* %11, align 8
  store <8 x i8> %12, <8 x i8>* %7, align 8
  store <8 x i8> %13, <8 x i8>* %8, align 8
  %14 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %14, <8 x i8>* %5, align 8
  %15 = load <8 x i8>, <8 x i8>* %5, align 8
  %16 = sext <8 x i8> %15 to <8 x i16>
  store <8 x i16> %16, <8 x i16>* %6, align 16
  %17 = load <8 x i16>, <8 x i16>* %6, align 16
  %18 = load <8 x i8>, <8 x i8>* %8, align 8
  store <8 x i8> %18, <8 x i8>* %3, align 8
  %19 = load <8 x i8>, <8 x i8>* %3, align 8
  %20 = sext <8 x i8> %19 to <8 x i16>
  store <8 x i16> %20, <8 x i16>* %4, align 16
  %21 = load <8 x i16>, <8 x i16>* %4, align 16
  %22 = add <8 x i16> %17, %21
  store <8 x i16> %22, <8 x i16>* %9, align 16
  %23 = load <8 x i16>, <8 x i16>* %9, align 16
  ret <8 x i16> %23
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vaddl_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i16>, align 8
  %11 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %10, align 8
  store <4 x i16> %1, <4 x i16>* %11, align 8
  %12 = load <4 x i16>, <4 x i16>* %10, align 8
  %13 = load <4 x i16>, <4 x i16>* %11, align 8
  store <4 x i16> %12, <4 x i16>* %7, align 8
  store <4 x i16> %13, <4 x i16>* %8, align 8
  %14 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %15 = load <4 x i16>, <4 x i16>* %5, align 8
  %16 = bitcast <4 x i16> %15 to <8 x i8>
  %17 = sext <4 x i16> %15 to <4 x i32>
  store <4 x i32> %17, <4 x i32>* %6, align 16
  %18 = load <4 x i32>, <4 x i32>* %6, align 16
  %19 = load <4 x i16>, <4 x i16>* %8, align 8
  store <4 x i16> %19, <4 x i16>* %3, align 8
  %20 = load <4 x i16>, <4 x i16>* %3, align 8
  %21 = bitcast <4 x i16> %20 to <8 x i8>
  %22 = sext <4 x i16> %20 to <4 x i32>
  store <4 x i32> %22, <4 x i32>* %4, align 16
  %23 = load <4 x i32>, <4 x i32>* %4, align 16
  %24 = add <4 x i32> %18, %23
  store <4 x i32> %24, <4 x i32>* %9, align 16
  %25 = load <4 x i32>, <4 x i32>* %9, align 16
  ret <4 x i32> %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vaddl_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i32>, align 8
  %11 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %10, align 8
  store <2 x i32> %1, <2 x i32>* %11, align 8
  %12 = load <2 x i32>, <2 x i32>* %10, align 8
  %13 = load <2 x i32>, <2 x i32>* %11, align 8
  store <2 x i32> %12, <2 x i32>* %7, align 8
  store <2 x i32> %13, <2 x i32>* %8, align 8
  %14 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %15 = load <2 x i32>, <2 x i32>* %5, align 8
  %16 = bitcast <2 x i32> %15 to <8 x i8>
  %17 = sext <2 x i32> %15 to <2 x i64>
  store <2 x i64> %17, <2 x i64>* %6, align 16
  %18 = load <2 x i64>, <2 x i64>* %6, align 16
  %19 = load <2 x i32>, <2 x i32>* %8, align 8
  store <2 x i32> %19, <2 x i32>* %3, align 8
  %20 = load <2 x i32>, <2 x i32>* %3, align 8
  %21 = bitcast <2 x i32> %20 to <8 x i8>
  %22 = sext <2 x i32> %20 to <2 x i64>
  store <2 x i64> %22, <2 x i64>* %4, align 16
  %23 = load <2 x i64>, <2 x i64>* %4, align 16
  %24 = add <2 x i64> %18, %23
  store <2 x i64> %24, <2 x i64>* %9, align 16
  %25 = load <2 x i64>, <2 x i64>* %9, align 16
  ret <2 x i64> %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vaddl_high_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <16 x i8>, align 16
  %12 = alloca <8 x i8>, align 8
  %13 = alloca <16 x i8>, align 16
  %14 = alloca <8 x i16>, align 16
  %15 = alloca <8 x i8>, align 8
  %16 = alloca <8 x i8>, align 8
  %17 = alloca <8 x i16>, align 16
  %18 = alloca <8 x i16>, align 16
  %19 = alloca <16 x i8>, align 16
  %20 = alloca <16 x i8>, align 16
  %21 = alloca <8 x i16>, align 16
  %22 = alloca <16 x i8>, align 16
  %23 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %22, align 16
  store <16 x i8> %1, <16 x i8>* %23, align 16
  %24 = load <16 x i8>, <16 x i8>* %22, align 16
  %25 = load <16 x i8>, <16 x i8>* %23, align 16
  store <16 x i8> %24, <16 x i8>* %19, align 16
  store <16 x i8> %25, <16 x i8>* %20, align 16
  %26 = load <16 x i8>, <16 x i8>* %19, align 16
  store <16 x i8> %26, <16 x i8>* %13, align 16
  %27 = load <16 x i8>, <16 x i8>* %13, align 16
  store <16 x i8> %27, <16 x i8>* %11, align 16
  %28 = load <16 x i8>, <16 x i8>* %11, align 16
  %29 = load <16 x i8>, <16 x i8>* %11, align 16
  %30 = shufflevector <16 x i8> %28, <16 x i8> %29, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %30, <8 x i8>* %12, align 8
  %31 = load <8 x i8>, <8 x i8>* %12, align 8
  store <8 x i8> %31, <8 x i8>* %15, align 8
  %32 = load <8 x i8>, <8 x i8>* %15, align 8
  store <8 x i8> %32, <8 x i8>* %16, align 8
  %33 = load <8 x i8>, <8 x i8>* %16, align 8
  %34 = sext <8 x i8> %33 to <8 x i16>
  store <8 x i16> %34, <8 x i16>* %17, align 16
  %35 = load <8 x i16>, <8 x i16>* %17, align 16
  store <8 x i16> %35, <8 x i16>* %18, align 16
  %36 = load <8 x i16>, <8 x i16>* %18, align 16
  store <8 x i16> %36, <8 x i16>* %14, align 16
  %37 = load <8 x i16>, <8 x i16>* %14, align 16
  %38 = load <16 x i8>, <16 x i8>* %20, align 16
  store <16 x i8> %38, <16 x i8>* %5, align 16
  %39 = load <16 x i8>, <16 x i8>* %5, align 16
  store <16 x i8> %39, <16 x i8>* %3, align 16
  %40 = load <16 x i8>, <16 x i8>* %3, align 16
  %41 = load <16 x i8>, <16 x i8>* %3, align 16
  %42 = shufflevector <16 x i8> %40, <16 x i8> %41, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %42, <8 x i8>* %4, align 8
  %43 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %43, <8 x i8>* %7, align 8
  %44 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %44, <8 x i8>* %8, align 8
  %45 = load <8 x i8>, <8 x i8>* %8, align 8
  %46 = sext <8 x i8> %45 to <8 x i16>
  store <8 x i16> %46, <8 x i16>* %9, align 16
  %47 = load <8 x i16>, <8 x i16>* %9, align 16
  store <8 x i16> %47, <8 x i16>* %10, align 16
  %48 = load <8 x i16>, <8 x i16>* %10, align 16
  store <8 x i16> %48, <8 x i16>* %6, align 16
  %49 = load <8 x i16>, <8 x i16>* %6, align 16
  %50 = add <8 x i16> %37, %49
  store <8 x i16> %50, <8 x i16>* %21, align 16
  %51 = load <8 x i16>, <8 x i16>* %21, align 16
  ret <8 x i16> %51
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vaddl_high_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <4 x i16>, align 8
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <4 x i32>, align 16
  %15 = alloca <4 x i16>, align 8
  %16 = alloca <4 x i16>, align 8
  %17 = alloca <4 x i32>, align 16
  %18 = alloca <4 x i32>, align 16
  %19 = alloca <8 x i16>, align 16
  %20 = alloca <8 x i16>, align 16
  %21 = alloca <4 x i32>, align 16
  %22 = alloca <8 x i16>, align 16
  %23 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %22, align 16
  store <8 x i16> %1, <8 x i16>* %23, align 16
  %24 = load <8 x i16>, <8 x i16>* %22, align 16
  %25 = load <8 x i16>, <8 x i16>* %23, align 16
  store <8 x i16> %24, <8 x i16>* %19, align 16
  store <8 x i16> %25, <8 x i16>* %20, align 16
  %26 = load <8 x i16>, <8 x i16>* %19, align 16
  store <8 x i16> %26, <8 x i16>* %13, align 16
  %27 = load <8 x i16>, <8 x i16>* %13, align 16
  store <8 x i16> %27, <8 x i16>* %11, align 16
  %28 = load <8 x i16>, <8 x i16>* %11, align 16
  %29 = load <8 x i16>, <8 x i16>* %11, align 16
  %30 = shufflevector <8 x i16> %28, <8 x i16> %29, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %30, <4 x i16>* %12, align 8
  %31 = load <4 x i16>, <4 x i16>* %12, align 8
  store <4 x i16> %31, <4 x i16>* %15, align 8
  %32 = load <4 x i16>, <4 x i16>* %15, align 8
  store <4 x i16> %32, <4 x i16>* %16, align 8
  %33 = load <4 x i16>, <4 x i16>* %16, align 8
  %34 = bitcast <4 x i16> %33 to <8 x i8>
  %35 = sext <4 x i16> %33 to <4 x i32>
  store <4 x i32> %35, <4 x i32>* %17, align 16
  %36 = load <4 x i32>, <4 x i32>* %17, align 16
  store <4 x i32> %36, <4 x i32>* %18, align 16
  %37 = load <4 x i32>, <4 x i32>* %18, align 16
  store <4 x i32> %37, <4 x i32>* %14, align 16
  %38 = load <4 x i32>, <4 x i32>* %14, align 16
  %39 = load <8 x i16>, <8 x i16>* %20, align 16
  store <8 x i16> %39, <8 x i16>* %5, align 16
  %40 = load <8 x i16>, <8 x i16>* %5, align 16
  store <8 x i16> %40, <8 x i16>* %3, align 16
  %41 = load <8 x i16>, <8 x i16>* %3, align 16
  %42 = load <8 x i16>, <8 x i16>* %3, align 16
  %43 = shufflevector <8 x i16> %41, <8 x i16> %42, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %43, <4 x i16>* %4, align 8
  %44 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %44, <4 x i16>* %7, align 8
  %45 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %45, <4 x i16>* %8, align 8
  %46 = load <4 x i16>, <4 x i16>* %8, align 8
  %47 = bitcast <4 x i16> %46 to <8 x i8>
  %48 = sext <4 x i16> %46 to <4 x i32>
  store <4 x i32> %48, <4 x i32>* %9, align 16
  %49 = load <4 x i32>, <4 x i32>* %9, align 16
  store <4 x i32> %49, <4 x i32>* %10, align 16
  %50 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %50, <4 x i32>* %6, align 16
  %51 = load <4 x i32>, <4 x i32>* %6, align 16
  %52 = add <4 x i32> %38, %51
  store <4 x i32> %52, <4 x i32>* %21, align 16
  %53 = load <4 x i32>, <4 x i32>* %21, align 16
  ret <4 x i32> %53
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vaddl_high_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <2 x i32>, align 8
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <2 x i64>, align 16
  %15 = alloca <2 x i32>, align 8
  %16 = alloca <2 x i32>, align 8
  %17 = alloca <2 x i64>, align 16
  %18 = alloca <2 x i64>, align 16
  %19 = alloca <4 x i32>, align 16
  %20 = alloca <4 x i32>, align 16
  %21 = alloca <2 x i64>, align 16
  %22 = alloca <4 x i32>, align 16
  %23 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %22, align 16
  store <4 x i32> %1, <4 x i32>* %23, align 16
  %24 = load <4 x i32>, <4 x i32>* %22, align 16
  %25 = load <4 x i32>, <4 x i32>* %23, align 16
  store <4 x i32> %24, <4 x i32>* %19, align 16
  store <4 x i32> %25, <4 x i32>* %20, align 16
  %26 = load <4 x i32>, <4 x i32>* %19, align 16
  store <4 x i32> %26, <4 x i32>* %13, align 16
  %27 = load <4 x i32>, <4 x i32>* %13, align 16
  store <4 x i32> %27, <4 x i32>* %11, align 16
  %28 = load <4 x i32>, <4 x i32>* %11, align 16
  %29 = load <4 x i32>, <4 x i32>* %11, align 16
  %30 = shufflevector <4 x i32> %28, <4 x i32> %29, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %30, <2 x i32>* %12, align 8
  %31 = load <2 x i32>, <2 x i32>* %12, align 8
  store <2 x i32> %31, <2 x i32>* %15, align 8
  %32 = load <2 x i32>, <2 x i32>* %15, align 8
  store <2 x i32> %32, <2 x i32>* %16, align 8
  %33 = load <2 x i32>, <2 x i32>* %16, align 8
  %34 = bitcast <2 x i32> %33 to <8 x i8>
  %35 = sext <2 x i32> %33 to <2 x i64>
  store <2 x i64> %35, <2 x i64>* %17, align 16
  %36 = load <2 x i64>, <2 x i64>* %17, align 16
  store <2 x i64> %36, <2 x i64>* %18, align 16
  %37 = load <2 x i64>, <2 x i64>* %18, align 16
  store <2 x i64> %37, <2 x i64>* %14, align 16
  %38 = load <2 x i64>, <2 x i64>* %14, align 16
  %39 = load <4 x i32>, <4 x i32>* %20, align 16
  store <4 x i32> %39, <4 x i32>* %5, align 16
  %40 = load <4 x i32>, <4 x i32>* %5, align 16
  store <4 x i32> %40, <4 x i32>* %3, align 16
  %41 = load <4 x i32>, <4 x i32>* %3, align 16
  %42 = load <4 x i32>, <4 x i32>* %3, align 16
  %43 = shufflevector <4 x i32> %41, <4 x i32> %42, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %43, <2 x i32>* %4, align 8
  %44 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %44, <2 x i32>* %7, align 8
  %45 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %45, <2 x i32>* %8, align 8
  %46 = load <2 x i32>, <2 x i32>* %8, align 8
  %47 = bitcast <2 x i32> %46 to <8 x i8>
  %48 = sext <2 x i32> %46 to <2 x i64>
  store <2 x i64> %48, <2 x i64>* %9, align 16
  %49 = load <2 x i64>, <2 x i64>* %9, align 16
  store <2 x i64> %49, <2 x i64>* %10, align 16
  %50 = load <2 x i64>, <2 x i64>* %10, align 16
  store <2 x i64> %50, <2 x i64>* %6, align 16
  %51 = load <2 x i64>, <2 x i64>* %6, align 16
  %52 = add <2 x i64> %38, %51
  store <2 x i64> %52, <2 x i64>* %21, align 16
  %53 = load <2 x i64>, <2 x i64>* %21, align 16
  ret <2 x i64> %53
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vaddl_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #1 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i8>, align 8
  %11 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %10, align 8
  store <8 x i8> %1, <8 x i8>* %11, align 8
  %12 = load <8 x i8>, <8 x i8>* %10, align 8
  %13 = load <8 x i8>, <8 x i8>* %11, align 8
  store <8 x i8> %12, <8 x i8>* %7, align 8
  store <8 x i8> %13, <8 x i8>* %8, align 8
  %14 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %14, <8 x i8>* %5, align 8
  %15 = load <8 x i8>, <8 x i8>* %5, align 8
  %16 = zext <8 x i8> %15 to <8 x i16>
  store <8 x i16> %16, <8 x i16>* %6, align 16
  %17 = load <8 x i16>, <8 x i16>* %6, align 16
  %18 = load <8 x i8>, <8 x i8>* %8, align 8
  store <8 x i8> %18, <8 x i8>* %3, align 8
  %19 = load <8 x i8>, <8 x i8>* %3, align 8
  %20 = zext <8 x i8> %19 to <8 x i16>
  store <8 x i16> %20, <8 x i16>* %4, align 16
  %21 = load <8 x i16>, <8 x i16>* %4, align 16
  %22 = add <8 x i16> %17, %21
  store <8 x i16> %22, <8 x i16>* %9, align 16
  %23 = load <8 x i16>, <8 x i16>* %9, align 16
  ret <8 x i16> %23
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vaddl_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i16>, align 8
  %11 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %10, align 8
  store <4 x i16> %1, <4 x i16>* %11, align 8
  %12 = load <4 x i16>, <4 x i16>* %10, align 8
  %13 = load <4 x i16>, <4 x i16>* %11, align 8
  store <4 x i16> %12, <4 x i16>* %7, align 8
  store <4 x i16> %13, <4 x i16>* %8, align 8
  %14 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %15 = load <4 x i16>, <4 x i16>* %5, align 8
  %16 = bitcast <4 x i16> %15 to <8 x i8>
  %17 = zext <4 x i16> %15 to <4 x i32>
  store <4 x i32> %17, <4 x i32>* %6, align 16
  %18 = load <4 x i32>, <4 x i32>* %6, align 16
  %19 = load <4 x i16>, <4 x i16>* %8, align 8
  store <4 x i16> %19, <4 x i16>* %3, align 8
  %20 = load <4 x i16>, <4 x i16>* %3, align 8
  %21 = bitcast <4 x i16> %20 to <8 x i8>
  %22 = zext <4 x i16> %20 to <4 x i32>
  store <4 x i32> %22, <4 x i32>* %4, align 16
  %23 = load <4 x i32>, <4 x i32>* %4, align 16
  %24 = add <4 x i32> %18, %23
  store <4 x i32> %24, <4 x i32>* %9, align 16
  %25 = load <4 x i32>, <4 x i32>* %9, align 16
  ret <4 x i32> %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vaddl_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i32>, align 8
  %11 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %10, align 8
  store <2 x i32> %1, <2 x i32>* %11, align 8
  %12 = load <2 x i32>, <2 x i32>* %10, align 8
  %13 = load <2 x i32>, <2 x i32>* %11, align 8
  store <2 x i32> %12, <2 x i32>* %7, align 8
  store <2 x i32> %13, <2 x i32>* %8, align 8
  %14 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %15 = load <2 x i32>, <2 x i32>* %5, align 8
  %16 = bitcast <2 x i32> %15 to <8 x i8>
  %17 = zext <2 x i32> %15 to <2 x i64>
  store <2 x i64> %17, <2 x i64>* %6, align 16
  %18 = load <2 x i64>, <2 x i64>* %6, align 16
  %19 = load <2 x i32>, <2 x i32>* %8, align 8
  store <2 x i32> %19, <2 x i32>* %3, align 8
  %20 = load <2 x i32>, <2 x i32>* %3, align 8
  %21 = bitcast <2 x i32> %20 to <8 x i8>
  %22 = zext <2 x i32> %20 to <2 x i64>
  store <2 x i64> %22, <2 x i64>* %4, align 16
  %23 = load <2 x i64>, <2 x i64>* %4, align 16
  %24 = add <2 x i64> %18, %23
  store <2 x i64> %24, <2 x i64>* %9, align 16
  %25 = load <2 x i64>, <2 x i64>* %9, align 16
  ret <2 x i64> %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vaddl_high_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <16 x i8>, align 16
  %12 = alloca <8 x i8>, align 8
  %13 = alloca <16 x i8>, align 16
  %14 = alloca <8 x i16>, align 16
  %15 = alloca <8 x i8>, align 8
  %16 = alloca <8 x i8>, align 8
  %17 = alloca <8 x i16>, align 16
  %18 = alloca <8 x i16>, align 16
  %19 = alloca <16 x i8>, align 16
  %20 = alloca <16 x i8>, align 16
  %21 = alloca <8 x i16>, align 16
  %22 = alloca <16 x i8>, align 16
  %23 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %22, align 16
  store <16 x i8> %1, <16 x i8>* %23, align 16
  %24 = load <16 x i8>, <16 x i8>* %22, align 16
  %25 = load <16 x i8>, <16 x i8>* %23, align 16
  store <16 x i8> %24, <16 x i8>* %19, align 16
  store <16 x i8> %25, <16 x i8>* %20, align 16
  %26 = load <16 x i8>, <16 x i8>* %19, align 16
  store <16 x i8> %26, <16 x i8>* %13, align 16
  %27 = load <16 x i8>, <16 x i8>* %13, align 16
  store <16 x i8> %27, <16 x i8>* %11, align 16
  %28 = load <16 x i8>, <16 x i8>* %11, align 16
  %29 = load <16 x i8>, <16 x i8>* %11, align 16
  %30 = shufflevector <16 x i8> %28, <16 x i8> %29, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %30, <8 x i8>* %12, align 8
  %31 = load <8 x i8>, <8 x i8>* %12, align 8
  store <8 x i8> %31, <8 x i8>* %15, align 8
  %32 = load <8 x i8>, <8 x i8>* %15, align 8
  store <8 x i8> %32, <8 x i8>* %16, align 8
  %33 = load <8 x i8>, <8 x i8>* %16, align 8
  %34 = zext <8 x i8> %33 to <8 x i16>
  store <8 x i16> %34, <8 x i16>* %17, align 16
  %35 = load <8 x i16>, <8 x i16>* %17, align 16
  store <8 x i16> %35, <8 x i16>* %18, align 16
  %36 = load <8 x i16>, <8 x i16>* %18, align 16
  store <8 x i16> %36, <8 x i16>* %14, align 16
  %37 = load <8 x i16>, <8 x i16>* %14, align 16
  %38 = load <16 x i8>, <16 x i8>* %20, align 16
  store <16 x i8> %38, <16 x i8>* %5, align 16
  %39 = load <16 x i8>, <16 x i8>* %5, align 16
  store <16 x i8> %39, <16 x i8>* %3, align 16
  %40 = load <16 x i8>, <16 x i8>* %3, align 16
  %41 = load <16 x i8>, <16 x i8>* %3, align 16
  %42 = shufflevector <16 x i8> %40, <16 x i8> %41, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %42, <8 x i8>* %4, align 8
  %43 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %43, <8 x i8>* %7, align 8
  %44 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %44, <8 x i8>* %8, align 8
  %45 = load <8 x i8>, <8 x i8>* %8, align 8
  %46 = zext <8 x i8> %45 to <8 x i16>
  store <8 x i16> %46, <8 x i16>* %9, align 16
  %47 = load <8 x i16>, <8 x i16>* %9, align 16
  store <8 x i16> %47, <8 x i16>* %10, align 16
  %48 = load <8 x i16>, <8 x i16>* %10, align 16
  store <8 x i16> %48, <8 x i16>* %6, align 16
  %49 = load <8 x i16>, <8 x i16>* %6, align 16
  %50 = add <8 x i16> %37, %49
  store <8 x i16> %50, <8 x i16>* %21, align 16
  %51 = load <8 x i16>, <8 x i16>* %21, align 16
  ret <8 x i16> %51
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vaddl_high_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <4 x i16>, align 8
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <4 x i32>, align 16
  %15 = alloca <4 x i16>, align 8
  %16 = alloca <4 x i16>, align 8
  %17 = alloca <4 x i32>, align 16
  %18 = alloca <4 x i32>, align 16
  %19 = alloca <8 x i16>, align 16
  %20 = alloca <8 x i16>, align 16
  %21 = alloca <4 x i32>, align 16
  %22 = alloca <8 x i16>, align 16
  %23 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %22, align 16
  store <8 x i16> %1, <8 x i16>* %23, align 16
  %24 = load <8 x i16>, <8 x i16>* %22, align 16
  %25 = load <8 x i16>, <8 x i16>* %23, align 16
  store <8 x i16> %24, <8 x i16>* %19, align 16
  store <8 x i16> %25, <8 x i16>* %20, align 16
  %26 = load <8 x i16>, <8 x i16>* %19, align 16
  store <8 x i16> %26, <8 x i16>* %13, align 16
  %27 = load <8 x i16>, <8 x i16>* %13, align 16
  store <8 x i16> %27, <8 x i16>* %11, align 16
  %28 = load <8 x i16>, <8 x i16>* %11, align 16
  %29 = load <8 x i16>, <8 x i16>* %11, align 16
  %30 = shufflevector <8 x i16> %28, <8 x i16> %29, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %30, <4 x i16>* %12, align 8
  %31 = load <4 x i16>, <4 x i16>* %12, align 8
  store <4 x i16> %31, <4 x i16>* %15, align 8
  %32 = load <4 x i16>, <4 x i16>* %15, align 8
  store <4 x i16> %32, <4 x i16>* %16, align 8
  %33 = load <4 x i16>, <4 x i16>* %16, align 8
  %34 = bitcast <4 x i16> %33 to <8 x i8>
  %35 = zext <4 x i16> %33 to <4 x i32>
  store <4 x i32> %35, <4 x i32>* %17, align 16
  %36 = load <4 x i32>, <4 x i32>* %17, align 16
  store <4 x i32> %36, <4 x i32>* %18, align 16
  %37 = load <4 x i32>, <4 x i32>* %18, align 16
  store <4 x i32> %37, <4 x i32>* %14, align 16
  %38 = load <4 x i32>, <4 x i32>* %14, align 16
  %39 = load <8 x i16>, <8 x i16>* %20, align 16
  store <8 x i16> %39, <8 x i16>* %5, align 16
  %40 = load <8 x i16>, <8 x i16>* %5, align 16
  store <8 x i16> %40, <8 x i16>* %3, align 16
  %41 = load <8 x i16>, <8 x i16>* %3, align 16
  %42 = load <8 x i16>, <8 x i16>* %3, align 16
  %43 = shufflevector <8 x i16> %41, <8 x i16> %42, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %43, <4 x i16>* %4, align 8
  %44 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %44, <4 x i16>* %7, align 8
  %45 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %45, <4 x i16>* %8, align 8
  %46 = load <4 x i16>, <4 x i16>* %8, align 8
  %47 = bitcast <4 x i16> %46 to <8 x i8>
  %48 = zext <4 x i16> %46 to <4 x i32>
  store <4 x i32> %48, <4 x i32>* %9, align 16
  %49 = load <4 x i32>, <4 x i32>* %9, align 16
  store <4 x i32> %49, <4 x i32>* %10, align 16
  %50 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %50, <4 x i32>* %6, align 16
  %51 = load <4 x i32>, <4 x i32>* %6, align 16
  %52 = add <4 x i32> %38, %51
  store <4 x i32> %52, <4 x i32>* %21, align 16
  %53 = load <4 x i32>, <4 x i32>* %21, align 16
  ret <4 x i32> %53
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vaddl_high_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <2 x i32>, align 8
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <2 x i64>, align 16
  %15 = alloca <2 x i32>, align 8
  %16 = alloca <2 x i32>, align 8
  %17 = alloca <2 x i64>, align 16
  %18 = alloca <2 x i64>, align 16
  %19 = alloca <4 x i32>, align 16
  %20 = alloca <4 x i32>, align 16
  %21 = alloca <2 x i64>, align 16
  %22 = alloca <4 x i32>, align 16
  %23 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %22, align 16
  store <4 x i32> %1, <4 x i32>* %23, align 16
  %24 = load <4 x i32>, <4 x i32>* %22, align 16
  %25 = load <4 x i32>, <4 x i32>* %23, align 16
  store <4 x i32> %24, <4 x i32>* %19, align 16
  store <4 x i32> %25, <4 x i32>* %20, align 16
  %26 = load <4 x i32>, <4 x i32>* %19, align 16
  store <4 x i32> %26, <4 x i32>* %13, align 16
  %27 = load <4 x i32>, <4 x i32>* %13, align 16
  store <4 x i32> %27, <4 x i32>* %11, align 16
  %28 = load <4 x i32>, <4 x i32>* %11, align 16
  %29 = load <4 x i32>, <4 x i32>* %11, align 16
  %30 = shufflevector <4 x i32> %28, <4 x i32> %29, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %30, <2 x i32>* %12, align 8
  %31 = load <2 x i32>, <2 x i32>* %12, align 8
  store <2 x i32> %31, <2 x i32>* %15, align 8
  %32 = load <2 x i32>, <2 x i32>* %15, align 8
  store <2 x i32> %32, <2 x i32>* %16, align 8
  %33 = load <2 x i32>, <2 x i32>* %16, align 8
  %34 = bitcast <2 x i32> %33 to <8 x i8>
  %35 = zext <2 x i32> %33 to <2 x i64>
  store <2 x i64> %35, <2 x i64>* %17, align 16
  %36 = load <2 x i64>, <2 x i64>* %17, align 16
  store <2 x i64> %36, <2 x i64>* %18, align 16
  %37 = load <2 x i64>, <2 x i64>* %18, align 16
  store <2 x i64> %37, <2 x i64>* %14, align 16
  %38 = load <2 x i64>, <2 x i64>* %14, align 16
  %39 = load <4 x i32>, <4 x i32>* %20, align 16
  store <4 x i32> %39, <4 x i32>* %5, align 16
  %40 = load <4 x i32>, <4 x i32>* %5, align 16
  store <4 x i32> %40, <4 x i32>* %3, align 16
  %41 = load <4 x i32>, <4 x i32>* %3, align 16
  %42 = load <4 x i32>, <4 x i32>* %3, align 16
  %43 = shufflevector <4 x i32> %41, <4 x i32> %42, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %43, <2 x i32>* %4, align 8
  %44 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %44, <2 x i32>* %7, align 8
  %45 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %45, <2 x i32>* %8, align 8
  %46 = load <2 x i32>, <2 x i32>* %8, align 8
  %47 = bitcast <2 x i32> %46 to <8 x i8>
  %48 = zext <2 x i32> %46 to <2 x i64>
  store <2 x i64> %48, <2 x i64>* %9, align 16
  %49 = load <2 x i64>, <2 x i64>* %9, align 16
  store <2 x i64> %49, <2 x i64>* %10, align 16
  %50 = load <2 x i64>, <2 x i64>* %10, align 16
  store <2 x i64> %50, <2 x i64>* %6, align 16
  %51 = load <2 x i64>, <2 x i64>* %6, align 16
  %52 = add <2 x i64> %38, %51
  store <2 x i64> %52, <2 x i64>* %21, align 16
  %53 = load <2 x i64>, <2 x i64>* %21, align 16
  ret <2 x i64> %53
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vaddw_s8_wrapper(<8 x i16> %0, <8 x i8> %1) #1 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i8>, align 8
  store <8 x i16> %0, <8 x i16>* %8, align 16
  store <8 x i8> %1, <8 x i8>* %9, align 8
  %10 = load <8 x i16>, <8 x i16>* %8, align 16
  %11 = load <8 x i8>, <8 x i8>* %9, align 8
  store <8 x i16> %10, <8 x i16>* %5, align 16
  store <8 x i8> %11, <8 x i8>* %6, align 8
  %12 = load <8 x i16>, <8 x i16>* %5, align 16
  %13 = load <8 x i8>, <8 x i8>* %6, align 8
  store <8 x i8> %13, <8 x i8>* %3, align 8
  %14 = load <8 x i8>, <8 x i8>* %3, align 8
  %15 = sext <8 x i8> %14 to <8 x i16>
  store <8 x i16> %15, <8 x i16>* %4, align 16
  %16 = load <8 x i16>, <8 x i16>* %4, align 16
  %17 = add <8 x i16> %12, %16
  store <8 x i16> %17, <8 x i16>* %7, align 16
  %18 = load <8 x i16>, <8 x i16>* %7, align 16
  ret <8 x i16> %18
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vaddw_s16_wrapper(<4 x i32> %0, <4 x i16> %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  store <4 x i32> %0, <4 x i32>* %8, align 16
  store <4 x i16> %1, <4 x i16>* %9, align 8
  %10 = load <4 x i32>, <4 x i32>* %8, align 16
  %11 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i32> %10, <4 x i32>* %5, align 16
  store <4 x i16> %11, <4 x i16>* %6, align 8
  %12 = load <4 x i32>, <4 x i32>* %5, align 16
  %13 = load <4 x i16>, <4 x i16>* %6, align 8
  store <4 x i16> %13, <4 x i16>* %3, align 8
  %14 = load <4 x i16>, <4 x i16>* %3, align 8
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  %16 = sext <4 x i16> %14 to <4 x i32>
  store <4 x i32> %16, <4 x i32>* %4, align 16
  %17 = load <4 x i32>, <4 x i32>* %4, align 16
  %18 = add <4 x i32> %12, %17
  store <4 x i32> %18, <4 x i32>* %7, align 16
  %19 = load <4 x i32>, <4 x i32>* %7, align 16
  ret <4 x i32> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vaddw_s32_wrapper(<2 x i64> %0, <2 x i32> %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  store <2 x i64> %0, <2 x i64>* %8, align 16
  store <2 x i32> %1, <2 x i32>* %9, align 8
  %10 = load <2 x i64>, <2 x i64>* %8, align 16
  %11 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i64> %10, <2 x i64>* %5, align 16
  store <2 x i32> %11, <2 x i32>* %6, align 8
  %12 = load <2 x i64>, <2 x i64>* %5, align 16
  %13 = load <2 x i32>, <2 x i32>* %6, align 8
  store <2 x i32> %13, <2 x i32>* %3, align 8
  %14 = load <2 x i32>, <2 x i32>* %3, align 8
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  %16 = sext <2 x i32> %14 to <2 x i64>
  store <2 x i64> %16, <2 x i64>* %4, align 16
  %17 = load <2 x i64>, <2 x i64>* %4, align 16
  %18 = add <2 x i64> %12, %17
  store <2 x i64> %18, <2 x i64>* %7, align 16
  %19 = load <2 x i64>, <2 x i64>* %7, align 16
  ret <2 x i64> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vaddw_high_s8_wrapper(<8 x i16> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <16 x i8>, align 16
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <8 x i16>, align 16
  %15 = alloca <16 x i8>, align 16
  store <8 x i16> %0, <8 x i16>* %14, align 16
  store <16 x i8> %1, <16 x i8>* %15, align 16
  %16 = load <8 x i16>, <8 x i16>* %14, align 16
  %17 = load <16 x i8>, <16 x i8>* %15, align 16
  store <8 x i16> %16, <8 x i16>* %11, align 16
  store <16 x i8> %17, <16 x i8>* %12, align 16
  %18 = load <8 x i16>, <8 x i16>* %11, align 16
  %19 = load <16 x i8>, <16 x i8>* %12, align 16
  store <16 x i8> %19, <16 x i8>* %5, align 16
  %20 = load <16 x i8>, <16 x i8>* %5, align 16
  store <16 x i8> %20, <16 x i8>* %3, align 16
  %21 = load <16 x i8>, <16 x i8>* %3, align 16
  %22 = load <16 x i8>, <16 x i8>* %3, align 16
  %23 = shufflevector <16 x i8> %21, <16 x i8> %22, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %23, <8 x i8>* %4, align 8
  %24 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %24, <8 x i8>* %7, align 8
  %25 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %25, <8 x i8>* %8, align 8
  %26 = load <8 x i8>, <8 x i8>* %8, align 8
  %27 = sext <8 x i8> %26 to <8 x i16>
  store <8 x i16> %27, <8 x i16>* %9, align 16
  %28 = load <8 x i16>, <8 x i16>* %9, align 16
  store <8 x i16> %28, <8 x i16>* %10, align 16
  %29 = load <8 x i16>, <8 x i16>* %10, align 16
  store <8 x i16> %29, <8 x i16>* %6, align 16
  %30 = load <8 x i16>, <8 x i16>* %6, align 16
  %31 = add <8 x i16> %18, %30
  store <8 x i16> %31, <8 x i16>* %13, align 16
  %32 = load <8 x i16>, <8 x i16>* %13, align 16
  ret <8 x i16> %32
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vaddw_high_s16_wrapper(<4 x i32> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <4 x i32>, align 16
  %15 = alloca <8 x i16>, align 16
  store <4 x i32> %0, <4 x i32>* %14, align 16
  store <8 x i16> %1, <8 x i16>* %15, align 16
  %16 = load <4 x i32>, <4 x i32>* %14, align 16
  %17 = load <8 x i16>, <8 x i16>* %15, align 16
  store <4 x i32> %16, <4 x i32>* %11, align 16
  store <8 x i16> %17, <8 x i16>* %12, align 16
  %18 = load <4 x i32>, <4 x i32>* %11, align 16
  %19 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i16> %19, <8 x i16>* %5, align 16
  %20 = load <8 x i16>, <8 x i16>* %5, align 16
  store <8 x i16> %20, <8 x i16>* %3, align 16
  %21 = load <8 x i16>, <8 x i16>* %3, align 16
  %22 = load <8 x i16>, <8 x i16>* %3, align 16
  %23 = shufflevector <8 x i16> %21, <8 x i16> %22, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %23, <4 x i16>* %4, align 8
  %24 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %24, <4 x i16>* %7, align 8
  %25 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %25, <4 x i16>* %8, align 8
  %26 = load <4 x i16>, <4 x i16>* %8, align 8
  %27 = bitcast <4 x i16> %26 to <8 x i8>
  %28 = sext <4 x i16> %26 to <4 x i32>
  store <4 x i32> %28, <4 x i32>* %9, align 16
  %29 = load <4 x i32>, <4 x i32>* %9, align 16
  store <4 x i32> %29, <4 x i32>* %10, align 16
  %30 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %30, <4 x i32>* %6, align 16
  %31 = load <4 x i32>, <4 x i32>* %6, align 16
  %32 = add <4 x i32> %18, %31
  store <4 x i32> %32, <4 x i32>* %13, align 16
  %33 = load <4 x i32>, <4 x i32>* %13, align 16
  ret <4 x i32> %33
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vaddw_high_s32_wrapper(<2 x i64> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <2 x i64>, align 16
  %14 = alloca <2 x i64>, align 16
  %15 = alloca <4 x i32>, align 16
  store <2 x i64> %0, <2 x i64>* %14, align 16
  store <4 x i32> %1, <4 x i32>* %15, align 16
  %16 = load <2 x i64>, <2 x i64>* %14, align 16
  %17 = load <4 x i32>, <4 x i32>* %15, align 16
  store <2 x i64> %16, <2 x i64>* %11, align 16
  store <4 x i32> %17, <4 x i32>* %12, align 16
  %18 = load <2 x i64>, <2 x i64>* %11, align 16
  %19 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i32> %19, <4 x i32>* %5, align 16
  %20 = load <4 x i32>, <4 x i32>* %5, align 16
  store <4 x i32> %20, <4 x i32>* %3, align 16
  %21 = load <4 x i32>, <4 x i32>* %3, align 16
  %22 = load <4 x i32>, <4 x i32>* %3, align 16
  %23 = shufflevector <4 x i32> %21, <4 x i32> %22, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %23, <2 x i32>* %4, align 8
  %24 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %24, <2 x i32>* %7, align 8
  %25 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %25, <2 x i32>* %8, align 8
  %26 = load <2 x i32>, <2 x i32>* %8, align 8
  %27 = bitcast <2 x i32> %26 to <8 x i8>
  %28 = sext <2 x i32> %26 to <2 x i64>
  store <2 x i64> %28, <2 x i64>* %9, align 16
  %29 = load <2 x i64>, <2 x i64>* %9, align 16
  store <2 x i64> %29, <2 x i64>* %10, align 16
  %30 = load <2 x i64>, <2 x i64>* %10, align 16
  store <2 x i64> %30, <2 x i64>* %6, align 16
  %31 = load <2 x i64>, <2 x i64>* %6, align 16
  %32 = add <2 x i64> %18, %31
  store <2 x i64> %32, <2 x i64>* %13, align 16
  %33 = load <2 x i64>, <2 x i64>* %13, align 16
  ret <2 x i64> %33
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vaddw_u8_wrapper(<8 x i16> %0, <8 x i8> %1) #1 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i8>, align 8
  store <8 x i16> %0, <8 x i16>* %8, align 16
  store <8 x i8> %1, <8 x i8>* %9, align 8
  %10 = load <8 x i16>, <8 x i16>* %8, align 16
  %11 = load <8 x i8>, <8 x i8>* %9, align 8
  store <8 x i16> %10, <8 x i16>* %5, align 16
  store <8 x i8> %11, <8 x i8>* %6, align 8
  %12 = load <8 x i16>, <8 x i16>* %5, align 16
  %13 = load <8 x i8>, <8 x i8>* %6, align 8
  store <8 x i8> %13, <8 x i8>* %3, align 8
  %14 = load <8 x i8>, <8 x i8>* %3, align 8
  %15 = zext <8 x i8> %14 to <8 x i16>
  store <8 x i16> %15, <8 x i16>* %4, align 16
  %16 = load <8 x i16>, <8 x i16>* %4, align 16
  %17 = add <8 x i16> %12, %16
  store <8 x i16> %17, <8 x i16>* %7, align 16
  %18 = load <8 x i16>, <8 x i16>* %7, align 16
  ret <8 x i16> %18
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vaddw_u16_wrapper(<4 x i32> %0, <4 x i16> %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  store <4 x i32> %0, <4 x i32>* %8, align 16
  store <4 x i16> %1, <4 x i16>* %9, align 8
  %10 = load <4 x i32>, <4 x i32>* %8, align 16
  %11 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i32> %10, <4 x i32>* %5, align 16
  store <4 x i16> %11, <4 x i16>* %6, align 8
  %12 = load <4 x i32>, <4 x i32>* %5, align 16
  %13 = load <4 x i16>, <4 x i16>* %6, align 8
  store <4 x i16> %13, <4 x i16>* %3, align 8
  %14 = load <4 x i16>, <4 x i16>* %3, align 8
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  %16 = zext <4 x i16> %14 to <4 x i32>
  store <4 x i32> %16, <4 x i32>* %4, align 16
  %17 = load <4 x i32>, <4 x i32>* %4, align 16
  %18 = add <4 x i32> %12, %17
  store <4 x i32> %18, <4 x i32>* %7, align 16
  %19 = load <4 x i32>, <4 x i32>* %7, align 16
  ret <4 x i32> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vaddw_u32_wrapper(<2 x i64> %0, <2 x i32> %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  store <2 x i64> %0, <2 x i64>* %8, align 16
  store <2 x i32> %1, <2 x i32>* %9, align 8
  %10 = load <2 x i64>, <2 x i64>* %8, align 16
  %11 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i64> %10, <2 x i64>* %5, align 16
  store <2 x i32> %11, <2 x i32>* %6, align 8
  %12 = load <2 x i64>, <2 x i64>* %5, align 16
  %13 = load <2 x i32>, <2 x i32>* %6, align 8
  store <2 x i32> %13, <2 x i32>* %3, align 8
  %14 = load <2 x i32>, <2 x i32>* %3, align 8
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  %16 = zext <2 x i32> %14 to <2 x i64>
  store <2 x i64> %16, <2 x i64>* %4, align 16
  %17 = load <2 x i64>, <2 x i64>* %4, align 16
  %18 = add <2 x i64> %12, %17
  store <2 x i64> %18, <2 x i64>* %7, align 16
  %19 = load <2 x i64>, <2 x i64>* %7, align 16
  ret <2 x i64> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vaddw_high_u8_wrapper(<8 x i16> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <16 x i8>, align 16
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <8 x i16>, align 16
  %15 = alloca <16 x i8>, align 16
  store <8 x i16> %0, <8 x i16>* %14, align 16
  store <16 x i8> %1, <16 x i8>* %15, align 16
  %16 = load <8 x i16>, <8 x i16>* %14, align 16
  %17 = load <16 x i8>, <16 x i8>* %15, align 16
  store <8 x i16> %16, <8 x i16>* %11, align 16
  store <16 x i8> %17, <16 x i8>* %12, align 16
  %18 = load <8 x i16>, <8 x i16>* %11, align 16
  %19 = load <16 x i8>, <16 x i8>* %12, align 16
  store <16 x i8> %19, <16 x i8>* %5, align 16
  %20 = load <16 x i8>, <16 x i8>* %5, align 16
  store <16 x i8> %20, <16 x i8>* %3, align 16
  %21 = load <16 x i8>, <16 x i8>* %3, align 16
  %22 = load <16 x i8>, <16 x i8>* %3, align 16
  %23 = shufflevector <16 x i8> %21, <16 x i8> %22, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %23, <8 x i8>* %4, align 8
  %24 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %24, <8 x i8>* %7, align 8
  %25 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %25, <8 x i8>* %8, align 8
  %26 = load <8 x i8>, <8 x i8>* %8, align 8
  %27 = zext <8 x i8> %26 to <8 x i16>
  store <8 x i16> %27, <8 x i16>* %9, align 16
  %28 = load <8 x i16>, <8 x i16>* %9, align 16
  store <8 x i16> %28, <8 x i16>* %10, align 16
  %29 = load <8 x i16>, <8 x i16>* %10, align 16
  store <8 x i16> %29, <8 x i16>* %6, align 16
  %30 = load <8 x i16>, <8 x i16>* %6, align 16
  %31 = add <8 x i16> %18, %30
  store <8 x i16> %31, <8 x i16>* %13, align 16
  %32 = load <8 x i16>, <8 x i16>* %13, align 16
  ret <8 x i16> %32
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vaddw_high_u16_wrapper(<4 x i32> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <4 x i32>, align 16
  %15 = alloca <8 x i16>, align 16
  store <4 x i32> %0, <4 x i32>* %14, align 16
  store <8 x i16> %1, <8 x i16>* %15, align 16
  %16 = load <4 x i32>, <4 x i32>* %14, align 16
  %17 = load <8 x i16>, <8 x i16>* %15, align 16
  store <4 x i32> %16, <4 x i32>* %11, align 16
  store <8 x i16> %17, <8 x i16>* %12, align 16
  %18 = load <4 x i32>, <4 x i32>* %11, align 16
  %19 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i16> %19, <8 x i16>* %5, align 16
  %20 = load <8 x i16>, <8 x i16>* %5, align 16
  store <8 x i16> %20, <8 x i16>* %3, align 16
  %21 = load <8 x i16>, <8 x i16>* %3, align 16
  %22 = load <8 x i16>, <8 x i16>* %3, align 16
  %23 = shufflevector <8 x i16> %21, <8 x i16> %22, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %23, <4 x i16>* %4, align 8
  %24 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %24, <4 x i16>* %7, align 8
  %25 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %25, <4 x i16>* %8, align 8
  %26 = load <4 x i16>, <4 x i16>* %8, align 8
  %27 = bitcast <4 x i16> %26 to <8 x i8>
  %28 = zext <4 x i16> %26 to <4 x i32>
  store <4 x i32> %28, <4 x i32>* %9, align 16
  %29 = load <4 x i32>, <4 x i32>* %9, align 16
  store <4 x i32> %29, <4 x i32>* %10, align 16
  %30 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %30, <4 x i32>* %6, align 16
  %31 = load <4 x i32>, <4 x i32>* %6, align 16
  %32 = add <4 x i32> %18, %31
  store <4 x i32> %32, <4 x i32>* %13, align 16
  %33 = load <4 x i32>, <4 x i32>* %13, align 16
  ret <4 x i32> %33
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vaddw_high_u32_wrapper(<2 x i64> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <2 x i64>, align 16
  %14 = alloca <2 x i64>, align 16
  %15 = alloca <4 x i32>, align 16
  store <2 x i64> %0, <2 x i64>* %14, align 16
  store <4 x i32> %1, <4 x i32>* %15, align 16
  %16 = load <2 x i64>, <2 x i64>* %14, align 16
  %17 = load <4 x i32>, <4 x i32>* %15, align 16
  store <2 x i64> %16, <2 x i64>* %11, align 16
  store <4 x i32> %17, <4 x i32>* %12, align 16
  %18 = load <2 x i64>, <2 x i64>* %11, align 16
  %19 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i32> %19, <4 x i32>* %5, align 16
  %20 = load <4 x i32>, <4 x i32>* %5, align 16
  store <4 x i32> %20, <4 x i32>* %3, align 16
  %21 = load <4 x i32>, <4 x i32>* %3, align 16
  %22 = load <4 x i32>, <4 x i32>* %3, align 16
  %23 = shufflevector <4 x i32> %21, <4 x i32> %22, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %23, <2 x i32>* %4, align 8
  %24 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %24, <2 x i32>* %7, align 8
  %25 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %25, <2 x i32>* %8, align 8
  %26 = load <2 x i32>, <2 x i32>* %8, align 8
  %27 = bitcast <2 x i32> %26 to <8 x i8>
  %28 = zext <2 x i32> %26 to <2 x i64>
  store <2 x i64> %28, <2 x i64>* %9, align 16
  %29 = load <2 x i64>, <2 x i64>* %9, align 16
  store <2 x i64> %29, <2 x i64>* %10, align 16
  %30 = load <2 x i64>, <2 x i64>* %10, align 16
  store <2 x i64> %30, <2 x i64>* %6, align 16
  %31 = load <2 x i64>, <2 x i64>* %6, align 16
  %32 = add <2 x i64> %18, %31
  store <2 x i64> %32, <2 x i64>* %13, align 16
  %33 = load <2 x i64>, <2 x i64>* %13, align 16
  ret <2 x i64> %33
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vhadd_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.shadd.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vhaddq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.shadd.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vhadd_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.shadd.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vhaddq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.shadd.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vhadd_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.shadd.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vhaddq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.shadd.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vhadd_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.uhadd.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vhaddq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.uhadd.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vhadd_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.uhadd.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vhaddq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.uhadd.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vhadd_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.uhadd.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vhaddq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.uhadd.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vrhadd_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.srhadd.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vrhaddq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.srhadd.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vrhadd_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.srhadd.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vrhaddq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.srhadd.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vrhadd_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.srhadd.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vrhaddq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.srhadd.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vrhadd_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.urhadd.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vrhaddq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.urhadd.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vrhadd_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.urhadd.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vrhaddq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vrhadd_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.urhadd.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vrhaddq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.urhadd.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vqadd_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.sqadd.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vqaddq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.sqadd.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vqadd_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.sqadd.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vqaddq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vqadd_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.sqadd.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqaddq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.sqadd.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqaddq_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = call <2 x i64> @llvm.aarch64.neon.sqadd.v2i64(<2 x i64> %10, <2 x i64> %12) #4
  %15 = bitcast <2 x i64> %14 to <16 x i8>
  store <2 x i64> %14, <2 x i64>* %5, align 16
  %16 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vqadd_s64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = bitcast <1 x i64> %10 to <8 x i8>
  %12 = load <1 x i64>, <1 x i64>* %4, align 8
  %13 = bitcast <1 x i64> %12 to <8 x i8>
  %14 = call <1 x i64> @llvm.aarch64.neon.sqadd.v1i64(<1 x i64> %10, <1 x i64> %12) #4
  %15 = bitcast <1 x i64> %14 to <8 x i8>
  store <1 x i64> %14, <1 x i64>* %5, align 8
  %16 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define signext i8 @vqaddb_s8_wrapper(i8 signext %0, i8 signext %1) #2 {
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8 %0, i8* %6, align 1
  store i8 %1, i8* %7, align 1
  %8 = load i8, i8* %6, align 1
  %9 = load i8, i8* %7, align 1
  store i8 %8, i8* %3, align 1
  store i8 %9, i8* %4, align 1
  %10 = load i8, i8* %3, align 1
  %11 = load i8, i8* %4, align 1
  %12 = insertelement <8 x i8> undef, i8 %10, i64 0
  %13 = insertelement <8 x i8> undef, i8 %11, i64 0
  %14 = call <8 x i8> @llvm.aarch64.neon.sqadd.v8i8(<8 x i8> %12, <8 x i8> %13) #4
  %15 = extractelement <8 x i8> %14, i64 0
  store i8 %15, i8* %5, align 1
  %16 = load i8, i8* %5, align 1
  ret i8 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define signext i16 @vqaddh_s16_wrapper(i16 signext %0, i16 signext %1) #2 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  store i16 %0, i16* %6, align 2
  store i16 %1, i16* %7, align 2
  %8 = load i16, i16* %6, align 2
  %9 = load i16, i16* %7, align 2
  store i16 %8, i16* %3, align 2
  store i16 %9, i16* %4, align 2
  %10 = load i16, i16* %3, align 2
  %11 = load i16, i16* %4, align 2
  %12 = insertelement <4 x i16> undef, i16 %10, i64 0
  %13 = insertelement <4 x i16> undef, i16 %11, i64 0
  %14 = call <4 x i16> @llvm.aarch64.neon.sqadd.v4i16(<4 x i16> %12, <4 x i16> %13) #4
  %15 = extractelement <4 x i16> %14, i64 0
  store i16 %15, i16* %5, align 2
  %16 = load i16, i16* %5, align 2
  ret i16 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @vqadds_s32_wrapper(i32 %0, i32 %1) #2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  %8 = load i32, i32* %6, align 4
  %9 = load i32, i32* %7, align 4
  store i32 %8, i32* %3, align 4
  store i32 %9, i32* %4, align 4
  %10 = load i32, i32* %3, align 4
  %11 = load i32, i32* %4, align 4
  %12 = call i32 @llvm.aarch64.neon.sqadd.i32(i32 %10, i32 %11) #4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %5, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vqaddd_s64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = call i64 @llvm.aarch64.neon.sqadd.i64(i64 %10, i64 %11) #4
  store i64 %12, i64* %5, align 8
  %13 = load i64, i64* %5, align 8
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vqadd_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.uqadd.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vqaddq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.uqadd.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vqadd_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.uqadd.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vqaddq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.uqadd.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vqadd_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.uqadd.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqaddq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.uqadd.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqaddq_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = call <2 x i64> @llvm.aarch64.neon.uqadd.v2i64(<2 x i64> %10, <2 x i64> %12) #4
  %15 = bitcast <2 x i64> %14 to <16 x i8>
  store <2 x i64> %14, <2 x i64>* %5, align 16
  %16 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vqadd_u64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = bitcast <1 x i64> %10 to <8 x i8>
  %12 = load <1 x i64>, <1 x i64>* %4, align 8
  %13 = bitcast <1 x i64> %12 to <8 x i8>
  %14 = call <1 x i64> @llvm.aarch64.neon.uqadd.v1i64(<1 x i64> %10, <1 x i64> %12) #4
  %15 = bitcast <1 x i64> %14 to <8 x i8>
  store <1 x i64> %14, <1 x i64>* %5, align 8
  %16 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define zeroext i8 @vqaddb_u8_wrapper(i8 zeroext %0, i8 zeroext %1) #2 {
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8 %0, i8* %6, align 1
  store i8 %1, i8* %7, align 1
  %8 = load i8, i8* %6, align 1
  %9 = load i8, i8* %7, align 1
  store i8 %8, i8* %3, align 1
  store i8 %9, i8* %4, align 1
  %10 = load i8, i8* %3, align 1
  %11 = load i8, i8* %4, align 1
  %12 = insertelement <8 x i8> undef, i8 %10, i64 0
  %13 = insertelement <8 x i8> undef, i8 %11, i64 0
  %14 = call <8 x i8> @llvm.aarch64.neon.uqadd.v8i8(<8 x i8> %12, <8 x i8> %13) #4
  %15 = extractelement <8 x i8> %14, i64 0
  store i8 %15, i8* %5, align 1
  %16 = load i8, i8* %5, align 1
  ret i8 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define zeroext i16 @vqaddh_u16_wrapper(i16 zeroext %0, i16 zeroext %1) #2 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  store i16 %0, i16* %6, align 2
  store i16 %1, i16* %7, align 2
  %8 = load i16, i16* %6, align 2
  %9 = load i16, i16* %7, align 2
  store i16 %8, i16* %3, align 2
  store i16 %9, i16* %4, align 2
  %10 = load i16, i16* %3, align 2
  %11 = load i16, i16* %4, align 2
  %12 = insertelement <4 x i16> undef, i16 %10, i64 0
  %13 = insertelement <4 x i16> undef, i16 %11, i64 0
  %14 = call <4 x i16> @llvm.aarch64.neon.uqadd.v4i16(<4 x i16> %12, <4 x i16> %13) #4
  %15 = extractelement <4 x i16> %14, i64 0
  store i16 %15, i16* %5, align 2
  %16 = load i16, i16* %5, align 2
  ret i16 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @vqadds_u32_wrapper(i32 %0, i32 %1) #2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  %8 = load i32, i32* %6, align 4
  %9 = load i32, i32* %7, align 4
  store i32 %8, i32* %3, align 4
  store i32 %9, i32* %4, align 4
  %10 = load i32, i32* %3, align 4
  %11 = load i32, i32* %4, align 4
  %12 = call i32 @llvm.aarch64.neon.uqadd.i32(i32 %10, i32 %11) #4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %5, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vqaddd_u64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = call i64 @llvm.aarch64.neon.uqadd.i64(i64 %10, i64 %11) #4
  store i64 %12, i64* %5, align 8
  %13 = load i64, i64* %5, align 8
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vuqadd_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.suqadd.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vuqaddq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.suqadd.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vuqadd_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.suqadd.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %15 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vuqaddq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.suqadd.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %15 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vuqadd_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.suqadd.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %15 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vuqaddq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.suqadd.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %15 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vuqaddq_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = call <2 x i64> @llvm.aarch64.neon.suqadd.v2i64(<2 x i64> %10, <2 x i64> %12) #4
  store <2 x i64> %14, <2 x i64>* %5, align 16
  %15 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vuqadd_s64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = bitcast <1 x i64> %10 to <8 x i8>
  %12 = load <1 x i64>, <1 x i64>* %4, align 8
  %13 = bitcast <1 x i64> %12 to <8 x i8>
  %14 = call <1 x i64> @llvm.aarch64.neon.suqadd.v1i64(<1 x i64> %10, <1 x i64> %12) #4
  store <1 x i64> %14, <1 x i64>* %5, align 8
  %15 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define signext i8 @vuqaddb_s8_wrapper(i8 signext %0, i8 zeroext %1) #2 {
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8 %0, i8* %6, align 1
  store i8 %1, i8* %7, align 1
  %8 = load i8, i8* %6, align 1
  %9 = load i8, i8* %7, align 1
  store i8 %8, i8* %3, align 1
  store i8 %9, i8* %4, align 1
  %10 = load i8, i8* %3, align 1
  %11 = load i8, i8* %4, align 1
  %12 = insertelement <8 x i8> undef, i8 %10, i64 0
  %13 = insertelement <8 x i8> undef, i8 %11, i64 0
  %14 = call <8 x i8> @llvm.aarch64.neon.suqadd.v8i8(<8 x i8> %12, <8 x i8> %13) #4
  %15 = extractelement <8 x i8> %14, i64 0
  store i8 %15, i8* %5, align 1
  %16 = load i8, i8* %5, align 1
  ret i8 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define signext i16 @vuqaddh_s16_wrapper(i16 signext %0, i16 zeroext %1) #2 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  store i16 %0, i16* %6, align 2
  store i16 %1, i16* %7, align 2
  %8 = load i16, i16* %6, align 2
  %9 = load i16, i16* %7, align 2
  store i16 %8, i16* %3, align 2
  store i16 %9, i16* %4, align 2
  %10 = load i16, i16* %3, align 2
  %11 = load i16, i16* %4, align 2
  %12 = insertelement <4 x i16> undef, i16 %10, i64 0
  %13 = insertelement <4 x i16> undef, i16 %11, i64 0
  %14 = call <4 x i16> @llvm.aarch64.neon.suqadd.v4i16(<4 x i16> %12, <4 x i16> %13) #4
  %15 = extractelement <4 x i16> %14, i64 0
  store i16 %15, i16* %5, align 2
  %16 = load i16, i16* %5, align 2
  ret i16 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @vuqadds_s32_wrapper(i32 %0, i32 %1) #2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  %8 = load i32, i32* %6, align 4
  %9 = load i32, i32* %7, align 4
  store i32 %8, i32* %3, align 4
  store i32 %9, i32* %4, align 4
  %10 = load i32, i32* %3, align 4
  %11 = load i32, i32* %4, align 4
  %12 = call i32 @llvm.aarch64.neon.suqadd.i32(i32 %10, i32 %11) #4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %5, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vuqaddd_s64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = call i64 @llvm.aarch64.neon.suqadd.i64(i64 %10, i64 %11) #4
  store i64 %12, i64* %5, align 8
  %13 = load i64, i64* %5, align 8
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vsqadd_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.usqadd.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vsqaddq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.usqadd.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vsqadd_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.usqadd.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %15 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vsqaddq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.usqadd.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %15 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vsqadd_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.usqadd.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %15 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vsqaddq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.usqadd.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %15 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vsqaddq_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = call <2 x i64> @llvm.aarch64.neon.usqadd.v2i64(<2 x i64> %10, <2 x i64> %12) #4
  store <2 x i64> %14, <2 x i64>* %5, align 16
  %15 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vsqadd_u64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = bitcast <1 x i64> %10 to <8 x i8>
  %12 = load <1 x i64>, <1 x i64>* %4, align 8
  %13 = bitcast <1 x i64> %12 to <8 x i8>
  %14 = call <1 x i64> @llvm.aarch64.neon.usqadd.v1i64(<1 x i64> %10, <1 x i64> %12) #4
  store <1 x i64> %14, <1 x i64>* %5, align 8
  %15 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define zeroext i8 @vsqaddb_u8_wrapper(i8 zeroext %0, i8 signext %1) #2 {
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8 %0, i8* %6, align 1
  store i8 %1, i8* %7, align 1
  %8 = load i8, i8* %6, align 1
  %9 = load i8, i8* %7, align 1
  store i8 %8, i8* %3, align 1
  store i8 %9, i8* %4, align 1
  %10 = load i8, i8* %3, align 1
  %11 = load i8, i8* %4, align 1
  %12 = insertelement <8 x i8> undef, i8 %10, i64 0
  %13 = insertelement <8 x i8> undef, i8 %11, i64 0
  %14 = call <8 x i8> @llvm.aarch64.neon.usqadd.v8i8(<8 x i8> %12, <8 x i8> %13) #4
  %15 = extractelement <8 x i8> %14, i64 0
  store i8 %15, i8* %5, align 1
  %16 = load i8, i8* %5, align 1
  ret i8 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define zeroext i16 @vsqaddh_u16_wrapper(i16 zeroext %0, i16 signext %1) #2 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  store i16 %0, i16* %6, align 2
  store i16 %1, i16* %7, align 2
  %8 = load i16, i16* %6, align 2
  %9 = load i16, i16* %7, align 2
  store i16 %8, i16* %3, align 2
  store i16 %9, i16* %4, align 2
  %10 = load i16, i16* %3, align 2
  %11 = load i16, i16* %4, align 2
  %12 = insertelement <4 x i16> undef, i16 %10, i64 0
  %13 = insertelement <4 x i16> undef, i16 %11, i64 0
  %14 = call <4 x i16> @llvm.aarch64.neon.usqadd.v4i16(<4 x i16> %12, <4 x i16> %13) #4
  %15 = extractelement <4 x i16> %14, i64 0
  store i16 %15, i16* %5, align 2
  %16 = load i16, i16* %5, align 2
  ret i16 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @vsqadds_u32_wrapper(i32 %0, i32 %1) #2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  %8 = load i32, i32* %6, align 4
  %9 = load i32, i32* %7, align 4
  store i32 %8, i32* %3, align 4
  store i32 %9, i32* %4, align 4
  %10 = load i32, i32* %3, align 4
  %11 = load i32, i32* %4, align 4
  %12 = call i32 @llvm.aarch64.neon.usqadd.i32(i32 %10, i32 %11) #4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %5, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vsqaddd_u64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = call i64 @llvm.aarch64.neon.usqadd.i64(i64 %10, i64 %11) #4
  store i64 %12, i64* %5, align 8
  %13 = load i64, i64* %5, align 8
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vaddhn_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = add <8 x i16> %10, %12
  %15 = lshr <8 x i16> %14, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %16 = trunc <8 x i16> %15 to <8 x i8>
  store <8 x i8> %16, <8 x i8>* %5, align 8
  %17 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vaddhn_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = add <4 x i32> %10, %12
  %15 = lshr <4 x i32> %14, <i32 16, i32 16, i32 16, i32 16>
  %16 = trunc <4 x i32> %15 to <4 x i16>
  store <4 x i16> %16, <4 x i16>* %5, align 8
  %17 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vaddhn_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = add <2 x i64> %10, %12
  %15 = lshr <2 x i64> %14, <i64 32, i64 32>
  %16 = trunc <2 x i64> %15 to <2 x i32>
  store <2 x i32> %16, <2 x i32>* %5, align 8
  %17 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vaddhn_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = add <8 x i16> %10, %12
  %15 = lshr <8 x i16> %14, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %16 = trunc <8 x i16> %15 to <8 x i8>
  store <8 x i8> %16, <8 x i8>* %5, align 8
  %17 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vaddhn_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = add <4 x i32> %10, %12
  %15 = lshr <4 x i32> %14, <i32 16, i32 16, i32 16, i32 16>
  %16 = trunc <4 x i32> %15 to <4 x i16>
  store <4 x i16> %16, <4 x i16>* %5, align 8
  %17 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vaddhn_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = add <2 x i64> %10, %12
  %15 = lshr <2 x i64> %14, <i64 32, i64 32>
  %16 = trunc <2 x i64> %15 to <2 x i32>
  store <2 x i32> %16, <2 x i32>* %5, align 8
  %17 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vaddhn_high_s16_wrapper(<8 x i8> %0, <8 x i16> %1, <8 x i16> %2) #1 {
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i8>, align 8
  %10 = alloca <8 x i8>, align 8
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <16 x i8>, align 16
  %14 = alloca <8 x i8>, align 8
  %15 = alloca <8 x i16>, align 16
  %16 = alloca <8 x i16>, align 16
  store <8 x i8> %0, <8 x i8>* %14, align 8
  store <8 x i16> %1, <8 x i16>* %15, align 16
  store <8 x i16> %2, <8 x i16>* %16, align 16
  %17 = load <8 x i8>, <8 x i8>* %14, align 8
  %18 = load <8 x i16>, <8 x i16>* %15, align 16
  %19 = load <8 x i16>, <8 x i16>* %16, align 16
  store <8 x i8> %17, <8 x i8>* %10, align 8
  store <8 x i16> %18, <8 x i16>* %11, align 16
  store <8 x i16> %19, <8 x i16>* %12, align 16
  %20 = load <8 x i8>, <8 x i8>* %10, align 8
  %21 = load <8 x i16>, <8 x i16>* %11, align 16
  %22 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i16> %21, <8 x i16>* %7, align 16
  store <8 x i16> %22, <8 x i16>* %8, align 16
  %23 = load <8 x i16>, <8 x i16>* %7, align 16
  %24 = bitcast <8 x i16> %23 to <16 x i8>
  %25 = load <8 x i16>, <8 x i16>* %8, align 16
  %26 = bitcast <8 x i16> %25 to <16 x i8>
  %27 = add <8 x i16> %23, %25
  %28 = lshr <8 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = trunc <8 x i16> %28 to <8 x i8>
  store <8 x i8> %29, <8 x i8>* %9, align 8
  %30 = load <8 x i8>, <8 x i8>* %9, align 8
  store <8 x i8> %20, <8 x i8>* %4, align 8
  store <8 x i8> %30, <8 x i8>* %5, align 8
  %31 = load <8 x i8>, <8 x i8>* %4, align 8
  %32 = load <8 x i8>, <8 x i8>* %5, align 8
  %33 = shufflevector <8 x i8> %31, <8 x i8> %32, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <16 x i8> %33, <16 x i8>* %6, align 16
  %34 = load <16 x i8>, <16 x i8>* %6, align 16
  store <16 x i8> %34, <16 x i8>* %13, align 16
  %35 = load <16 x i8>, <16 x i8>* %13, align 16
  ret <16 x i8> %35
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vaddhn_high_s32_wrapper(<4 x i16> %0, <4 x i32> %1, <4 x i32> %2) #1 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <4 x i16>, align 8
  %15 = alloca <4 x i32>, align 16
  %16 = alloca <4 x i32>, align 16
  store <4 x i16> %0, <4 x i16>* %14, align 8
  store <4 x i32> %1, <4 x i32>* %15, align 16
  store <4 x i32> %2, <4 x i32>* %16, align 16
  %17 = load <4 x i16>, <4 x i16>* %14, align 8
  %18 = load <4 x i32>, <4 x i32>* %15, align 16
  %19 = load <4 x i32>, <4 x i32>* %16, align 16
  store <4 x i16> %17, <4 x i16>* %10, align 8
  store <4 x i32> %18, <4 x i32>* %11, align 16
  store <4 x i32> %19, <4 x i32>* %12, align 16
  %20 = load <4 x i16>, <4 x i16>* %10, align 8
  %21 = load <4 x i32>, <4 x i32>* %11, align 16
  %22 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i32> %21, <4 x i32>* %7, align 16
  store <4 x i32> %22, <4 x i32>* %8, align 16
  %23 = load <4 x i32>, <4 x i32>* %7, align 16
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = load <4 x i32>, <4 x i32>* %8, align 16
  %26 = bitcast <4 x i32> %25 to <16 x i8>
  %27 = add <4 x i32> %23, %25
  %28 = lshr <4 x i32> %27, <i32 16, i32 16, i32 16, i32 16>
  %29 = trunc <4 x i32> %28 to <4 x i16>
  store <4 x i16> %29, <4 x i16>* %9, align 8
  %30 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i16> %20, <4 x i16>* %4, align 8
  store <4 x i16> %30, <4 x i16>* %5, align 8
  %31 = load <4 x i16>, <4 x i16>* %4, align 8
  %32 = load <4 x i16>, <4 x i16>* %5, align 8
  %33 = shufflevector <4 x i16> %31, <4 x i16> %32, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %33, <8 x i16>* %6, align 16
  %34 = load <8 x i16>, <8 x i16>* %6, align 16
  store <8 x i16> %34, <8 x i16>* %13, align 16
  %35 = load <8 x i16>, <8 x i16>* %13, align 16
  ret <8 x i16> %35
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vaddhn_high_s64_wrapper(<2 x i32> %0, <2 x i64> %1, <2 x i64> %2) #1 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <2 x i32>, align 8
  %15 = alloca <2 x i64>, align 16
  %16 = alloca <2 x i64>, align 16
  store <2 x i32> %0, <2 x i32>* %14, align 8
  store <2 x i64> %1, <2 x i64>* %15, align 16
  store <2 x i64> %2, <2 x i64>* %16, align 16
  %17 = load <2 x i32>, <2 x i32>* %14, align 8
  %18 = load <2 x i64>, <2 x i64>* %15, align 16
  %19 = load <2 x i64>, <2 x i64>* %16, align 16
  store <2 x i32> %17, <2 x i32>* %10, align 8
  store <2 x i64> %18, <2 x i64>* %11, align 16
  store <2 x i64> %19, <2 x i64>* %12, align 16
  %20 = load <2 x i32>, <2 x i32>* %10, align 8
  %21 = load <2 x i64>, <2 x i64>* %11, align 16
  %22 = load <2 x i64>, <2 x i64>* %12, align 16
  store <2 x i64> %21, <2 x i64>* %7, align 16
  store <2 x i64> %22, <2 x i64>* %8, align 16
  %23 = load <2 x i64>, <2 x i64>* %7, align 16
  %24 = bitcast <2 x i64> %23 to <16 x i8>
  %25 = load <2 x i64>, <2 x i64>* %8, align 16
  %26 = bitcast <2 x i64> %25 to <16 x i8>
  %27 = add <2 x i64> %23, %25
  %28 = lshr <2 x i64> %27, <i64 32, i64 32>
  %29 = trunc <2 x i64> %28 to <2 x i32>
  store <2 x i32> %29, <2 x i32>* %9, align 8
  %30 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i32> %20, <2 x i32>* %4, align 8
  store <2 x i32> %30, <2 x i32>* %5, align 8
  %31 = load <2 x i32>, <2 x i32>* %4, align 8
  %32 = load <2 x i32>, <2 x i32>* %5, align 8
  %33 = shufflevector <2 x i32> %31, <2 x i32> %32, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %33, <4 x i32>* %6, align 16
  %34 = load <4 x i32>, <4 x i32>* %6, align 16
  store <4 x i32> %34, <4 x i32>* %13, align 16
  %35 = load <4 x i32>, <4 x i32>* %13, align 16
  ret <4 x i32> %35
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vaddhn_high_u16_wrapper(<8 x i8> %0, <8 x i16> %1, <8 x i16> %2) #1 {
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i8>, align 8
  %10 = alloca <8 x i8>, align 8
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <16 x i8>, align 16
  %14 = alloca <8 x i8>, align 8
  %15 = alloca <8 x i16>, align 16
  %16 = alloca <8 x i16>, align 16
  store <8 x i8> %0, <8 x i8>* %14, align 8
  store <8 x i16> %1, <8 x i16>* %15, align 16
  store <8 x i16> %2, <8 x i16>* %16, align 16
  %17 = load <8 x i8>, <8 x i8>* %14, align 8
  %18 = load <8 x i16>, <8 x i16>* %15, align 16
  %19 = load <8 x i16>, <8 x i16>* %16, align 16
  store <8 x i8> %17, <8 x i8>* %10, align 8
  store <8 x i16> %18, <8 x i16>* %11, align 16
  store <8 x i16> %19, <8 x i16>* %12, align 16
  %20 = load <8 x i8>, <8 x i8>* %10, align 8
  %21 = load <8 x i16>, <8 x i16>* %11, align 16
  %22 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i16> %21, <8 x i16>* %7, align 16
  store <8 x i16> %22, <8 x i16>* %8, align 16
  %23 = load <8 x i16>, <8 x i16>* %7, align 16
  %24 = bitcast <8 x i16> %23 to <16 x i8>
  %25 = load <8 x i16>, <8 x i16>* %8, align 16
  %26 = bitcast <8 x i16> %25 to <16 x i8>
  %27 = add <8 x i16> %23, %25
  %28 = lshr <8 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = trunc <8 x i16> %28 to <8 x i8>
  store <8 x i8> %29, <8 x i8>* %9, align 8
  %30 = load <8 x i8>, <8 x i8>* %9, align 8
  store <8 x i8> %20, <8 x i8>* %4, align 8
  store <8 x i8> %30, <8 x i8>* %5, align 8
  %31 = load <8 x i8>, <8 x i8>* %4, align 8
  %32 = load <8 x i8>, <8 x i8>* %5, align 8
  %33 = shufflevector <8 x i8> %31, <8 x i8> %32, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <16 x i8> %33, <16 x i8>* %6, align 16
  %34 = load <16 x i8>, <16 x i8>* %6, align 16
  store <16 x i8> %34, <16 x i8>* %13, align 16
  %35 = load <16 x i8>, <16 x i8>* %13, align 16
  ret <16 x i8> %35
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vaddhn_high_u32_wrapper(<4 x i16> %0, <4 x i32> %1, <4 x i32> %2) #1 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <4 x i16>, align 8
  %15 = alloca <4 x i32>, align 16
  %16 = alloca <4 x i32>, align 16
  store <4 x i16> %0, <4 x i16>* %14, align 8
  store <4 x i32> %1, <4 x i32>* %15, align 16
  store <4 x i32> %2, <4 x i32>* %16, align 16
  %17 = load <4 x i16>, <4 x i16>* %14, align 8
  %18 = load <4 x i32>, <4 x i32>* %15, align 16
  %19 = load <4 x i32>, <4 x i32>* %16, align 16
  store <4 x i16> %17, <4 x i16>* %10, align 8
  store <4 x i32> %18, <4 x i32>* %11, align 16
  store <4 x i32> %19, <4 x i32>* %12, align 16
  %20 = load <4 x i16>, <4 x i16>* %10, align 8
  %21 = load <4 x i32>, <4 x i32>* %11, align 16
  %22 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i32> %21, <4 x i32>* %7, align 16
  store <4 x i32> %22, <4 x i32>* %8, align 16
  %23 = load <4 x i32>, <4 x i32>* %7, align 16
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = load <4 x i32>, <4 x i32>* %8, align 16
  %26 = bitcast <4 x i32> %25 to <16 x i8>
  %27 = add <4 x i32> %23, %25
  %28 = lshr <4 x i32> %27, <i32 16, i32 16, i32 16, i32 16>
  %29 = trunc <4 x i32> %28 to <4 x i16>
  store <4 x i16> %29, <4 x i16>* %9, align 8
  %30 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i16> %20, <4 x i16>* %4, align 8
  store <4 x i16> %30, <4 x i16>* %5, align 8
  %31 = load <4 x i16>, <4 x i16>* %4, align 8
  %32 = load <4 x i16>, <4 x i16>* %5, align 8
  %33 = shufflevector <4 x i16> %31, <4 x i16> %32, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %33, <8 x i16>* %6, align 16
  %34 = load <8 x i16>, <8 x i16>* %6, align 16
  store <8 x i16> %34, <8 x i16>* %13, align 16
  %35 = load <8 x i16>, <8 x i16>* %13, align 16
  ret <8 x i16> %35
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vaddhn_high_u64_wrapper(<2 x i32> %0, <2 x i64> %1, <2 x i64> %2) #1 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <2 x i32>, align 8
  %15 = alloca <2 x i64>, align 16
  %16 = alloca <2 x i64>, align 16
  store <2 x i32> %0, <2 x i32>* %14, align 8
  store <2 x i64> %1, <2 x i64>* %15, align 16
  store <2 x i64> %2, <2 x i64>* %16, align 16
  %17 = load <2 x i32>, <2 x i32>* %14, align 8
  %18 = load <2 x i64>, <2 x i64>* %15, align 16
  %19 = load <2 x i64>, <2 x i64>* %16, align 16
  store <2 x i32> %17, <2 x i32>* %10, align 8
  store <2 x i64> %18, <2 x i64>* %11, align 16
  store <2 x i64> %19, <2 x i64>* %12, align 16
  %20 = load <2 x i32>, <2 x i32>* %10, align 8
  %21 = load <2 x i64>, <2 x i64>* %11, align 16
  %22 = load <2 x i64>, <2 x i64>* %12, align 16
  store <2 x i64> %21, <2 x i64>* %7, align 16
  store <2 x i64> %22, <2 x i64>* %8, align 16
  %23 = load <2 x i64>, <2 x i64>* %7, align 16
  %24 = bitcast <2 x i64> %23 to <16 x i8>
  %25 = load <2 x i64>, <2 x i64>* %8, align 16
  %26 = bitcast <2 x i64> %25 to <16 x i8>
  %27 = add <2 x i64> %23, %25
  %28 = lshr <2 x i64> %27, <i64 32, i64 32>
  %29 = trunc <2 x i64> %28 to <2 x i32>
  store <2 x i32> %29, <2 x i32>* %9, align 8
  %30 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i32> %20, <2 x i32>* %4, align 8
  store <2 x i32> %30, <2 x i32>* %5, align 8
  %31 = load <2 x i32>, <2 x i32>* %4, align 8
  %32 = load <2 x i32>, <2 x i32>* %5, align 8
  %33 = shufflevector <2 x i32> %31, <2 x i32> %32, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %33, <4 x i32>* %6, align 16
  %34 = load <4 x i32>, <4 x i32>* %6, align 16
  store <4 x i32> %34, <4 x i32>* %13, align 16
  %35 = load <4 x i32>, <4 x i32>* %13, align 16
  ret <4 x i32> %35
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vraddhn_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i8> @llvm.aarch64.neon.raddhn.v8i8(<8 x i16> %10, <8 x i16> %12) #4
  store <8 x i8> %14, <8 x i8>* %5, align 8
  %15 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vraddhn_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.raddhn.v4i16(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vraddhn_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.raddhn.v2i32(<2 x i64> %10, <2 x i64> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vraddhn_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i8> @llvm.aarch64.neon.raddhn.v8i8(<8 x i16> %10, <8 x i16> %12) #4
  store <8 x i8> %14, <8 x i8>* %5, align 8
  %15 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vraddhn_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.raddhn.v4i16(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vraddhn_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.raddhn.v2i32(<2 x i64> %10, <2 x i64> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vraddhn_high_s16_wrapper(<8 x i8> %0, <8 x i16> %1, <8 x i16> %2) #1 {
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i8>, align 8
  %10 = alloca <8 x i8>, align 8
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <16 x i8>, align 16
  %14 = alloca <8 x i8>, align 8
  %15 = alloca <8 x i16>, align 16
  %16 = alloca <8 x i16>, align 16
  store <8 x i8> %0, <8 x i8>* %14, align 8
  store <8 x i16> %1, <8 x i16>* %15, align 16
  store <8 x i16> %2, <8 x i16>* %16, align 16
  %17 = load <8 x i8>, <8 x i8>* %14, align 8
  %18 = load <8 x i16>, <8 x i16>* %15, align 16
  %19 = load <8 x i16>, <8 x i16>* %16, align 16
  store <8 x i8> %17, <8 x i8>* %10, align 8
  store <8 x i16> %18, <8 x i16>* %11, align 16
  store <8 x i16> %19, <8 x i16>* %12, align 16
  %20 = load <8 x i8>, <8 x i8>* %10, align 8
  %21 = load <8 x i16>, <8 x i16>* %11, align 16
  %22 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i16> %21, <8 x i16>* %7, align 16
  store <8 x i16> %22, <8 x i16>* %8, align 16
  %23 = load <8 x i16>, <8 x i16>* %7, align 16
  %24 = bitcast <8 x i16> %23 to <16 x i8>
  %25 = load <8 x i16>, <8 x i16>* %8, align 16
  %26 = bitcast <8 x i16> %25 to <16 x i8>
  %27 = call <8 x i8> @llvm.aarch64.neon.raddhn.v8i8(<8 x i16> %23, <8 x i16> %25) #4
  store <8 x i8> %27, <8 x i8>* %9, align 8
  %28 = load <8 x i8>, <8 x i8>* %9, align 8
  store <8 x i8> %20, <8 x i8>* %4, align 8
  store <8 x i8> %28, <8 x i8>* %5, align 8
  %29 = load <8 x i8>, <8 x i8>* %4, align 8
  %30 = load <8 x i8>, <8 x i8>* %5, align 8
  %31 = shufflevector <8 x i8> %29, <8 x i8> %30, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <16 x i8> %31, <16 x i8>* %6, align 16
  %32 = load <16 x i8>, <16 x i8>* %6, align 16
  store <16 x i8> %32, <16 x i8>* %13, align 16
  %33 = load <16 x i8>, <16 x i8>* %13, align 16
  ret <16 x i8> %33
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vraddhn_high_s32_wrapper(<4 x i16> %0, <4 x i32> %1, <4 x i32> %2) #1 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <4 x i16>, align 8
  %15 = alloca <4 x i32>, align 16
  %16 = alloca <4 x i32>, align 16
  store <4 x i16> %0, <4 x i16>* %14, align 8
  store <4 x i32> %1, <4 x i32>* %15, align 16
  store <4 x i32> %2, <4 x i32>* %16, align 16
  %17 = load <4 x i16>, <4 x i16>* %14, align 8
  %18 = load <4 x i32>, <4 x i32>* %15, align 16
  %19 = load <4 x i32>, <4 x i32>* %16, align 16
  store <4 x i16> %17, <4 x i16>* %10, align 8
  store <4 x i32> %18, <4 x i32>* %11, align 16
  store <4 x i32> %19, <4 x i32>* %12, align 16
  %20 = load <4 x i16>, <4 x i16>* %10, align 8
  %21 = load <4 x i32>, <4 x i32>* %11, align 16
  %22 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i32> %21, <4 x i32>* %7, align 16
  store <4 x i32> %22, <4 x i32>* %8, align 16
  %23 = load <4 x i32>, <4 x i32>* %7, align 16
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = load <4 x i32>, <4 x i32>* %8, align 16
  %26 = bitcast <4 x i32> %25 to <16 x i8>
  %27 = call <4 x i16> @llvm.aarch64.neon.raddhn.v4i16(<4 x i32> %23, <4 x i32> %25) #4
  %28 = bitcast <4 x i16> %27 to <8 x i8>
  store <4 x i16> %27, <4 x i16>* %9, align 8
  %29 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i16> %20, <4 x i16>* %4, align 8
  store <4 x i16> %29, <4 x i16>* %5, align 8
  %30 = load <4 x i16>, <4 x i16>* %4, align 8
  %31 = load <4 x i16>, <4 x i16>* %5, align 8
  %32 = shufflevector <4 x i16> %30, <4 x i16> %31, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %32, <8 x i16>* %6, align 16
  %33 = load <8 x i16>, <8 x i16>* %6, align 16
  store <8 x i16> %33, <8 x i16>* %13, align 16
  %34 = load <8 x i16>, <8 x i16>* %13, align 16
  ret <8 x i16> %34
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vraddhn_high_s64_wrapper(<2 x i32> %0, <2 x i64> %1, <2 x i64> %2) #1 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <2 x i32>, align 8
  %15 = alloca <2 x i64>, align 16
  %16 = alloca <2 x i64>, align 16
  store <2 x i32> %0, <2 x i32>* %14, align 8
  store <2 x i64> %1, <2 x i64>* %15, align 16
  store <2 x i64> %2, <2 x i64>* %16, align 16
  %17 = load <2 x i32>, <2 x i32>* %14, align 8
  %18 = load <2 x i64>, <2 x i64>* %15, align 16
  %19 = load <2 x i64>, <2 x i64>* %16, align 16
  store <2 x i32> %17, <2 x i32>* %10, align 8
  store <2 x i64> %18, <2 x i64>* %11, align 16
  store <2 x i64> %19, <2 x i64>* %12, align 16
  %20 = load <2 x i32>, <2 x i32>* %10, align 8
  %21 = load <2 x i64>, <2 x i64>* %11, align 16
  %22 = load <2 x i64>, <2 x i64>* %12, align 16
  store <2 x i64> %21, <2 x i64>* %7, align 16
  store <2 x i64> %22, <2 x i64>* %8, align 16
  %23 = load <2 x i64>, <2 x i64>* %7, align 16
  %24 = bitcast <2 x i64> %23 to <16 x i8>
  %25 = load <2 x i64>, <2 x i64>* %8, align 16
  %26 = bitcast <2 x i64> %25 to <16 x i8>
  %27 = call <2 x i32> @llvm.aarch64.neon.raddhn.v2i32(<2 x i64> %23, <2 x i64> %25) #4
  %28 = bitcast <2 x i32> %27 to <8 x i8>
  store <2 x i32> %27, <2 x i32>* %9, align 8
  %29 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i32> %20, <2 x i32>* %4, align 8
  store <2 x i32> %29, <2 x i32>* %5, align 8
  %30 = load <2 x i32>, <2 x i32>* %4, align 8
  %31 = load <2 x i32>, <2 x i32>* %5, align 8
  %32 = shufflevector <2 x i32> %30, <2 x i32> %31, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %32, <4 x i32>* %6, align 16
  %33 = load <4 x i32>, <4 x i32>* %6, align 16
  store <4 x i32> %33, <4 x i32>* %13, align 16
  %34 = load <4 x i32>, <4 x i32>* %13, align 16
  ret <4 x i32> %34
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vraddhn_high_u16_wrapper(<8 x i8> %0, <8 x i16> %1, <8 x i16> %2) #1 {
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i8>, align 8
  %10 = alloca <8 x i8>, align 8
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <16 x i8>, align 16
  %14 = alloca <8 x i8>, align 8
  %15 = alloca <8 x i16>, align 16
  %16 = alloca <8 x i16>, align 16
  store <8 x i8> %0, <8 x i8>* %14, align 8
  store <8 x i16> %1, <8 x i16>* %15, align 16
  store <8 x i16> %2, <8 x i16>* %16, align 16
  %17 = load <8 x i8>, <8 x i8>* %14, align 8
  %18 = load <8 x i16>, <8 x i16>* %15, align 16
  %19 = load <8 x i16>, <8 x i16>* %16, align 16
  store <8 x i8> %17, <8 x i8>* %10, align 8
  store <8 x i16> %18, <8 x i16>* %11, align 16
  store <8 x i16> %19, <8 x i16>* %12, align 16
  %20 = load <8 x i8>, <8 x i8>* %10, align 8
  %21 = load <8 x i16>, <8 x i16>* %11, align 16
  %22 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i16> %21, <8 x i16>* %7, align 16
  store <8 x i16> %22, <8 x i16>* %8, align 16
  %23 = load <8 x i16>, <8 x i16>* %7, align 16
  %24 = bitcast <8 x i16> %23 to <16 x i8>
  %25 = load <8 x i16>, <8 x i16>* %8, align 16
  %26 = bitcast <8 x i16> %25 to <16 x i8>
  %27 = call <8 x i8> @llvm.aarch64.neon.raddhn.v8i8(<8 x i16> %23, <8 x i16> %25) #4
  store <8 x i8> %27, <8 x i8>* %9, align 8
  %28 = load <8 x i8>, <8 x i8>* %9, align 8
  store <8 x i8> %20, <8 x i8>* %4, align 8
  store <8 x i8> %28, <8 x i8>* %5, align 8
  %29 = load <8 x i8>, <8 x i8>* %4, align 8
  %30 = load <8 x i8>, <8 x i8>* %5, align 8
  %31 = shufflevector <8 x i8> %29, <8 x i8> %30, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <16 x i8> %31, <16 x i8>* %6, align 16
  %32 = load <16 x i8>, <16 x i8>* %6, align 16
  store <16 x i8> %32, <16 x i8>* %13, align 16
  %33 = load <16 x i8>, <16 x i8>* %13, align 16
  ret <16 x i8> %33
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vraddhn_high_u32_wrapper(<4 x i16> %0, <4 x i32> %1, <4 x i32> %2) #1 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <4 x i16>, align 8
  %15 = alloca <4 x i32>, align 16
  %16 = alloca <4 x i32>, align 16
  store <4 x i16> %0, <4 x i16>* %14, align 8
  store <4 x i32> %1, <4 x i32>* %15, align 16
  store <4 x i32> %2, <4 x i32>* %16, align 16
  %17 = load <4 x i16>, <4 x i16>* %14, align 8
  %18 = load <4 x i32>, <4 x i32>* %15, align 16
  %19 = load <4 x i32>, <4 x i32>* %16, align 16
  store <4 x i16> %17, <4 x i16>* %10, align 8
  store <4 x i32> %18, <4 x i32>* %11, align 16
  store <4 x i32> %19, <4 x i32>* %12, align 16
  %20 = load <4 x i16>, <4 x i16>* %10, align 8
  %21 = load <4 x i32>, <4 x i32>* %11, align 16
  %22 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i32> %21, <4 x i32>* %7, align 16
  store <4 x i32> %22, <4 x i32>* %8, align 16
  %23 = load <4 x i32>, <4 x i32>* %7, align 16
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = load <4 x i32>, <4 x i32>* %8, align 16
  %26 = bitcast <4 x i32> %25 to <16 x i8>
  %27 = call <4 x i16> @llvm.aarch64.neon.raddhn.v4i16(<4 x i32> %23, <4 x i32> %25) #4
  %28 = bitcast <4 x i16> %27 to <8 x i8>
  store <4 x i16> %27, <4 x i16>* %9, align 8
  %29 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i16> %20, <4 x i16>* %4, align 8
  store <4 x i16> %29, <4 x i16>* %5, align 8
  %30 = load <4 x i16>, <4 x i16>* %4, align 8
  %31 = load <4 x i16>, <4 x i16>* %5, align 8
  %32 = shufflevector <4 x i16> %30, <4 x i16> %31, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %32, <8 x i16>* %6, align 16
  %33 = load <8 x i16>, <8 x i16>* %6, align 16
  store <8 x i16> %33, <8 x i16>* %13, align 16
  %34 = load <8 x i16>, <8 x i16>* %13, align 16
  ret <8 x i16> %34
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vraddhn_high_u64_wrapper(<2 x i32> %0, <2 x i64> %1, <2 x i64> %2) #1 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <2 x i32>, align 8
  %15 = alloca <2 x i64>, align 16
  %16 = alloca <2 x i64>, align 16
  store <2 x i32> %0, <2 x i32>* %14, align 8
  store <2 x i64> %1, <2 x i64>* %15, align 16
  store <2 x i64> %2, <2 x i64>* %16, align 16
  %17 = load <2 x i32>, <2 x i32>* %14, align 8
  %18 = load <2 x i64>, <2 x i64>* %15, align 16
  %19 = load <2 x i64>, <2 x i64>* %16, align 16
  store <2 x i32> %17, <2 x i32>* %10, align 8
  store <2 x i64> %18, <2 x i64>* %11, align 16
  store <2 x i64> %19, <2 x i64>* %12, align 16
  %20 = load <2 x i32>, <2 x i32>* %10, align 8
  %21 = load <2 x i64>, <2 x i64>* %11, align 16
  %22 = load <2 x i64>, <2 x i64>* %12, align 16
  store <2 x i64> %21, <2 x i64>* %7, align 16
  store <2 x i64> %22, <2 x i64>* %8, align 16
  %23 = load <2 x i64>, <2 x i64>* %7, align 16
  %24 = bitcast <2 x i64> %23 to <16 x i8>
  %25 = load <2 x i64>, <2 x i64>* %8, align 16
  %26 = bitcast <2 x i64> %25 to <16 x i8>
  %27 = call <2 x i32> @llvm.aarch64.neon.raddhn.v2i32(<2 x i64> %23, <2 x i64> %25) #4
  %28 = bitcast <2 x i32> %27 to <8 x i8>
  store <2 x i32> %27, <2 x i32>* %9, align 8
  %29 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i32> %20, <2 x i32>* %4, align 8
  store <2 x i32> %29, <2 x i32>* %5, align 8
  %30 = load <2 x i32>, <2 x i32>* %4, align 8
  %31 = load <2 x i32>, <2 x i32>* %5, align 8
  %32 = shufflevector <2 x i32> %30, <2 x i32> %31, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %32, <4 x i32>* %6, align 16
  %33 = load <4 x i32>, <4 x i32>* %6, align 16
  store <4 x i32> %33, <4 x i32>* %13, align 16
  %34 = load <4 x i32>, <4 x i32>* %13, align 16
  ret <4 x i32> %34
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vmul_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = mul <8 x i8> %10, %11
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vmulq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = mul <16 x i8> %10, %11
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmul_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = mul <4 x i16> %10, %11
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmulq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = mul <8 x i16> %10, %11
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmul_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = mul <2 x i32> %10, %11
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmulq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = mul <4 x i32> %10, %11
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vmul_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = mul <8 x i8> %10, %11
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vmulq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = mul <16 x i8> %10, %11
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmul_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = mul <4 x i16> %10, %11
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmulq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = mul <8 x i16> %10, %11
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmul_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = mul <2 x i32> %10, %11
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmulq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = mul <4 x i32> %10, %11
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vmla_s8_wrapper(<8 x i8> %0, <8 x i8> %1, <8 x i8> %2) #0 {
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i8>, align 8
  %10 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %8, align 8
  store <8 x i8> %1, <8 x i8>* %9, align 8
  store <8 x i8> %2, <8 x i8>* %10, align 8
  %11 = load <8 x i8>, <8 x i8>* %8, align 8
  %12 = load <8 x i8>, <8 x i8>* %9, align 8
  %13 = load <8 x i8>, <8 x i8>* %10, align 8
  store <8 x i8> %11, <8 x i8>* %4, align 8
  store <8 x i8> %12, <8 x i8>* %5, align 8
  store <8 x i8> %13, <8 x i8>* %6, align 8
  %14 = load <8 x i8>, <8 x i8>* %4, align 8
  %15 = load <8 x i8>, <8 x i8>* %5, align 8
  %16 = load <8 x i8>, <8 x i8>* %6, align 8
  %17 = mul <8 x i8> %15, %16
  %18 = add <8 x i8> %14, %17
  store <8 x i8> %18, <8 x i8>* %7, align 8
  %19 = load <8 x i8>, <8 x i8>* %7, align 8
  ret <8 x i8> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vmlaq_s8_wrapper(<16 x i8> %0, <16 x i8> %1, <16 x i8> %2) #1 {
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  %8 = alloca <16 x i8>, align 16
  %9 = alloca <16 x i8>, align 16
  %10 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %8, align 16
  store <16 x i8> %1, <16 x i8>* %9, align 16
  store <16 x i8> %2, <16 x i8>* %10, align 16
  %11 = load <16 x i8>, <16 x i8>* %8, align 16
  %12 = load <16 x i8>, <16 x i8>* %9, align 16
  %13 = load <16 x i8>, <16 x i8>* %10, align 16
  store <16 x i8> %11, <16 x i8>* %4, align 16
  store <16 x i8> %12, <16 x i8>* %5, align 16
  store <16 x i8> %13, <16 x i8>* %6, align 16
  %14 = load <16 x i8>, <16 x i8>* %4, align 16
  %15 = load <16 x i8>, <16 x i8>* %5, align 16
  %16 = load <16 x i8>, <16 x i8>* %6, align 16
  %17 = mul <16 x i8> %15, %16
  %18 = add <16 x i8> %14, %17
  store <16 x i8> %18, <16 x i8>* %7, align 16
  %19 = load <16 x i8>, <16 x i8>* %7, align 16
  ret <16 x i8> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmla_s16_wrapper(<4 x i16> %0, <4 x i16> %1, <4 x i16> %2) #0 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %8, align 8
  store <4 x i16> %1, <4 x i16>* %9, align 8
  store <4 x i16> %2, <4 x i16>* %10, align 8
  %11 = load <4 x i16>, <4 x i16>* %8, align 8
  %12 = load <4 x i16>, <4 x i16>* %9, align 8
  %13 = load <4 x i16>, <4 x i16>* %10, align 8
  store <4 x i16> %11, <4 x i16>* %4, align 8
  store <4 x i16> %12, <4 x i16>* %5, align 8
  store <4 x i16> %13, <4 x i16>* %6, align 8
  %14 = load <4 x i16>, <4 x i16>* %4, align 8
  %15 = load <4 x i16>, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %6, align 8
  %17 = mul <4 x i16> %15, %16
  %18 = add <4 x i16> %14, %17
  store <4 x i16> %18, <4 x i16>* %7, align 8
  %19 = load <4 x i16>, <4 x i16>* %7, align 8
  ret <4 x i16> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmlaq_s16_wrapper(<8 x i16> %0, <8 x i16> %1, <8 x i16> %2) #1 {
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %8, align 16
  store <8 x i16> %1, <8 x i16>* %9, align 16
  store <8 x i16> %2, <8 x i16>* %10, align 16
  %11 = load <8 x i16>, <8 x i16>* %8, align 16
  %12 = load <8 x i16>, <8 x i16>* %9, align 16
  %13 = load <8 x i16>, <8 x i16>* %10, align 16
  store <8 x i16> %11, <8 x i16>* %4, align 16
  store <8 x i16> %12, <8 x i16>* %5, align 16
  store <8 x i16> %13, <8 x i16>* %6, align 16
  %14 = load <8 x i16>, <8 x i16>* %4, align 16
  %15 = load <8 x i16>, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %6, align 16
  %17 = mul <8 x i16> %15, %16
  %18 = add <8 x i16> %14, %17
  store <8 x i16> %18, <8 x i16>* %7, align 16
  %19 = load <8 x i16>, <8 x i16>* %7, align 16
  ret <8 x i16> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmla_s32_wrapper(<2 x i32> %0, <2 x i32> %1, <2 x i32> %2) #0 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %8, align 8
  store <2 x i32> %1, <2 x i32>* %9, align 8
  store <2 x i32> %2, <2 x i32>* %10, align 8
  %11 = load <2 x i32>, <2 x i32>* %8, align 8
  %12 = load <2 x i32>, <2 x i32>* %9, align 8
  %13 = load <2 x i32>, <2 x i32>* %10, align 8
  store <2 x i32> %11, <2 x i32>* %4, align 8
  store <2 x i32> %12, <2 x i32>* %5, align 8
  store <2 x i32> %13, <2 x i32>* %6, align 8
  %14 = load <2 x i32>, <2 x i32>* %4, align 8
  %15 = load <2 x i32>, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %6, align 8
  %17 = mul <2 x i32> %15, %16
  %18 = add <2 x i32> %14, %17
  store <2 x i32> %18, <2 x i32>* %7, align 8
  %19 = load <2 x i32>, <2 x i32>* %7, align 8
  ret <2 x i32> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlaq_s32_wrapper(<4 x i32> %0, <4 x i32> %1, <4 x i32> %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %8, align 16
  store <4 x i32> %1, <4 x i32>* %9, align 16
  store <4 x i32> %2, <4 x i32>* %10, align 16
  %11 = load <4 x i32>, <4 x i32>* %8, align 16
  %12 = load <4 x i32>, <4 x i32>* %9, align 16
  %13 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %11, <4 x i32>* %4, align 16
  store <4 x i32> %12, <4 x i32>* %5, align 16
  store <4 x i32> %13, <4 x i32>* %6, align 16
  %14 = load <4 x i32>, <4 x i32>* %4, align 16
  %15 = load <4 x i32>, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %6, align 16
  %17 = mul <4 x i32> %15, %16
  %18 = add <4 x i32> %14, %17
  store <4 x i32> %18, <4 x i32>* %7, align 16
  %19 = load <4 x i32>, <4 x i32>* %7, align 16
  ret <4 x i32> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vmla_u8_wrapper(<8 x i8> %0, <8 x i8> %1, <8 x i8> %2) #0 {
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i8>, align 8
  %10 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %8, align 8
  store <8 x i8> %1, <8 x i8>* %9, align 8
  store <8 x i8> %2, <8 x i8>* %10, align 8
  %11 = load <8 x i8>, <8 x i8>* %8, align 8
  %12 = load <8 x i8>, <8 x i8>* %9, align 8
  %13 = load <8 x i8>, <8 x i8>* %10, align 8
  store <8 x i8> %11, <8 x i8>* %4, align 8
  store <8 x i8> %12, <8 x i8>* %5, align 8
  store <8 x i8> %13, <8 x i8>* %6, align 8
  %14 = load <8 x i8>, <8 x i8>* %4, align 8
  %15 = load <8 x i8>, <8 x i8>* %5, align 8
  %16 = load <8 x i8>, <8 x i8>* %6, align 8
  %17 = mul <8 x i8> %15, %16
  %18 = add <8 x i8> %14, %17
  store <8 x i8> %18, <8 x i8>* %7, align 8
  %19 = load <8 x i8>, <8 x i8>* %7, align 8
  ret <8 x i8> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vmlaq_u8_wrapper(<16 x i8> %0, <16 x i8> %1, <16 x i8> %2) #1 {
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  %8 = alloca <16 x i8>, align 16
  %9 = alloca <16 x i8>, align 16
  %10 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %8, align 16
  store <16 x i8> %1, <16 x i8>* %9, align 16
  store <16 x i8> %2, <16 x i8>* %10, align 16
  %11 = load <16 x i8>, <16 x i8>* %8, align 16
  %12 = load <16 x i8>, <16 x i8>* %9, align 16
  %13 = load <16 x i8>, <16 x i8>* %10, align 16
  store <16 x i8> %11, <16 x i8>* %4, align 16
  store <16 x i8> %12, <16 x i8>* %5, align 16
  store <16 x i8> %13, <16 x i8>* %6, align 16
  %14 = load <16 x i8>, <16 x i8>* %4, align 16
  %15 = load <16 x i8>, <16 x i8>* %5, align 16
  %16 = load <16 x i8>, <16 x i8>* %6, align 16
  %17 = mul <16 x i8> %15, %16
  %18 = add <16 x i8> %14, %17
  store <16 x i8> %18, <16 x i8>* %7, align 16
  %19 = load <16 x i8>, <16 x i8>* %7, align 16
  ret <16 x i8> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmla_u16_wrapper(<4 x i16> %0, <4 x i16> %1, <4 x i16> %2) #0 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %8, align 8
  store <4 x i16> %1, <4 x i16>* %9, align 8
  store <4 x i16> %2, <4 x i16>* %10, align 8
  %11 = load <4 x i16>, <4 x i16>* %8, align 8
  %12 = load <4 x i16>, <4 x i16>* %9, align 8
  %13 = load <4 x i16>, <4 x i16>* %10, align 8
  store <4 x i16> %11, <4 x i16>* %4, align 8
  store <4 x i16> %12, <4 x i16>* %5, align 8
  store <4 x i16> %13, <4 x i16>* %6, align 8
  %14 = load <4 x i16>, <4 x i16>* %4, align 8
  %15 = load <4 x i16>, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %6, align 8
  %17 = mul <4 x i16> %15, %16
  %18 = add <4 x i16> %14, %17
  store <4 x i16> %18, <4 x i16>* %7, align 8
  %19 = load <4 x i16>, <4 x i16>* %7, align 8
  ret <4 x i16> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmlaq_u16_wrapper(<8 x i16> %0, <8 x i16> %1, <8 x i16> %2) #1 {
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %8, align 16
  store <8 x i16> %1, <8 x i16>* %9, align 16
  store <8 x i16> %2, <8 x i16>* %10, align 16
  %11 = load <8 x i16>, <8 x i16>* %8, align 16
  %12 = load <8 x i16>, <8 x i16>* %9, align 16
  %13 = load <8 x i16>, <8 x i16>* %10, align 16
  store <8 x i16> %11, <8 x i16>* %4, align 16
  store <8 x i16> %12, <8 x i16>* %5, align 16
  store <8 x i16> %13, <8 x i16>* %6, align 16
  %14 = load <8 x i16>, <8 x i16>* %4, align 16
  %15 = load <8 x i16>, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %6, align 16
  %17 = mul <8 x i16> %15, %16
  %18 = add <8 x i16> %14, %17
  store <8 x i16> %18, <8 x i16>* %7, align 16
  %19 = load <8 x i16>, <8 x i16>* %7, align 16
  ret <8 x i16> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmla_u32_wrapper(<2 x i32> %0, <2 x i32> %1, <2 x i32> %2) #0 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %8, align 8
  store <2 x i32> %1, <2 x i32>* %9, align 8
  store <2 x i32> %2, <2 x i32>* %10, align 8
  %11 = load <2 x i32>, <2 x i32>* %8, align 8
  %12 = load <2 x i32>, <2 x i32>* %9, align 8
  %13 = load <2 x i32>, <2 x i32>* %10, align 8
  store <2 x i32> %11, <2 x i32>* %4, align 8
  store <2 x i32> %12, <2 x i32>* %5, align 8
  store <2 x i32> %13, <2 x i32>* %6, align 8
  %14 = load <2 x i32>, <2 x i32>* %4, align 8
  %15 = load <2 x i32>, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %6, align 8
  %17 = mul <2 x i32> %15, %16
  %18 = add <2 x i32> %14, %17
  store <2 x i32> %18, <2 x i32>* %7, align 8
  %19 = load <2 x i32>, <2 x i32>* %7, align 8
  ret <2 x i32> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlaq_u32_wrapper(<4 x i32> %0, <4 x i32> %1, <4 x i32> %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %8, align 16
  store <4 x i32> %1, <4 x i32>* %9, align 16
  store <4 x i32> %2, <4 x i32>* %10, align 16
  %11 = load <4 x i32>, <4 x i32>* %8, align 16
  %12 = load <4 x i32>, <4 x i32>* %9, align 16
  %13 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %11, <4 x i32>* %4, align 16
  store <4 x i32> %12, <4 x i32>* %5, align 16
  store <4 x i32> %13, <4 x i32>* %6, align 16
  %14 = load <4 x i32>, <4 x i32>* %4, align 16
  %15 = load <4 x i32>, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %6, align 16
  %17 = mul <4 x i32> %15, %16
  %18 = add <4 x i32> %14, %17
  store <4 x i32> %18, <4 x i32>* %7, align 16
  %19 = load <4 x i32>, <4 x i32>* %7, align 16
  ret <4 x i32> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmlal_s8_wrapper(<8 x i16> %0, <8 x i8> %1, <8 x i8> %2) #1 {
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i8>, align 8
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <8 x i8>, align 8
  %13 = alloca <8 x i8>, align 8
  store <8 x i16> %0, <8 x i16>* %11, align 16
  store <8 x i8> %1, <8 x i8>* %12, align 8
  store <8 x i8> %2, <8 x i8>* %13, align 8
  %14 = load <8 x i16>, <8 x i16>* %11, align 16
  %15 = load <8 x i8>, <8 x i8>* %12, align 8
  %16 = load <8 x i8>, <8 x i8>* %13, align 8
  store <8 x i16> %14, <8 x i16>* %7, align 16
  store <8 x i8> %15, <8 x i8>* %8, align 8
  store <8 x i8> %16, <8 x i8>* %9, align 8
  %17 = load <8 x i16>, <8 x i16>* %7, align 16
  %18 = load <8 x i8>, <8 x i8>* %8, align 8
  %19 = load <8 x i8>, <8 x i8>* %9, align 8
  store <8 x i8> %18, <8 x i8>* %4, align 8
  store <8 x i8> %19, <8 x i8>* %5, align 8
  %20 = load <8 x i8>, <8 x i8>* %4, align 8
  %21 = load <8 x i8>, <8 x i8>* %5, align 8
  %22 = call <8 x i16> @llvm.aarch64.neon.smull.v8i16(<8 x i8> %20, <8 x i8> %21) #4
  store <8 x i16> %22, <8 x i16>* %6, align 16
  %23 = load <8 x i16>, <8 x i16>* %6, align 16
  %24 = add <8 x i16> %17, %23
  store <8 x i16> %24, <8 x i16>* %10, align 16
  %25 = load <8 x i16>, <8 x i16>* %10, align 16
  ret <8 x i16> %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlal_s16_wrapper(<4 x i32> %0, <4 x i16> %1, <4 x i16> %2) #1 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <4 x i16>, align 8
  %13 = alloca <4 x i16>, align 8
  store <4 x i32> %0, <4 x i32>* %11, align 16
  store <4 x i16> %1, <4 x i16>* %12, align 8
  store <4 x i16> %2, <4 x i16>* %13, align 8
  %14 = load <4 x i32>, <4 x i32>* %11, align 16
  %15 = load <4 x i16>, <4 x i16>* %12, align 8
  %16 = load <4 x i16>, <4 x i16>* %13, align 8
  store <4 x i32> %14, <4 x i32>* %7, align 16
  store <4 x i16> %15, <4 x i16>* %8, align 8
  store <4 x i16> %16, <4 x i16>* %9, align 8
  %17 = load <4 x i32>, <4 x i32>* %7, align 16
  %18 = load <4 x i16>, <4 x i16>* %8, align 8
  %19 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i16> %18, <4 x i16>* %4, align 8
  store <4 x i16> %19, <4 x i16>* %5, align 8
  %20 = load <4 x i16>, <4 x i16>* %4, align 8
  %21 = bitcast <4 x i16> %20 to <8 x i8>
  %22 = load <4 x i16>, <4 x i16>* %5, align 8
  %23 = bitcast <4 x i16> %22 to <8 x i8>
  %24 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %20, <4 x i16> %22) #4
  store <4 x i32> %24, <4 x i32>* %6, align 16
  %25 = load <4 x i32>, <4 x i32>* %6, align 16
  %26 = add <4 x i32> %17, %25
  store <4 x i32> %26, <4 x i32>* %10, align 16
  %27 = load <4 x i32>, <4 x i32>* %10, align 16
  ret <4 x i32> %27
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmlal_s32_wrapper(<2 x i64> %0, <2 x i32> %1, <2 x i32> %2) #1 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <2 x i32>, align 8
  %13 = alloca <2 x i32>, align 8
  store <2 x i64> %0, <2 x i64>* %11, align 16
  store <2 x i32> %1, <2 x i32>* %12, align 8
  store <2 x i32> %2, <2 x i32>* %13, align 8
  %14 = load <2 x i64>, <2 x i64>* %11, align 16
  %15 = load <2 x i32>, <2 x i32>* %12, align 8
  %16 = load <2 x i32>, <2 x i32>* %13, align 8
  store <2 x i64> %14, <2 x i64>* %7, align 16
  store <2 x i32> %15, <2 x i32>* %8, align 8
  store <2 x i32> %16, <2 x i32>* %9, align 8
  %17 = load <2 x i64>, <2 x i64>* %7, align 16
  %18 = load <2 x i32>, <2 x i32>* %8, align 8
  %19 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i32> %18, <2 x i32>* %4, align 8
  store <2 x i32> %19, <2 x i32>* %5, align 8
  %20 = load <2 x i32>, <2 x i32>* %4, align 8
  %21 = bitcast <2 x i32> %20 to <8 x i8>
  %22 = load <2 x i32>, <2 x i32>* %5, align 8
  %23 = bitcast <2 x i32> %22 to <8 x i8>
  %24 = call <2 x i64> @llvm.aarch64.neon.smull.v2i64(<2 x i32> %20, <2 x i32> %22) #4
  store <2 x i64> %24, <2 x i64>* %6, align 16
  %25 = load <2 x i64>, <2 x i64>* %6, align 16
  %26 = add <2 x i64> %17, %25
  store <2 x i64> %26, <2 x i64>* %10, align 16
  %27 = load <2 x i64>, <2 x i64>* %10, align 16
  ret <2 x i64> %27
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmlal_high_s8_wrapper(<8 x i16> %0, <16 x i8> %1, <16 x i8> %2) #1 {
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i8>, align 8
  %11 = alloca <8 x i8>, align 8
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <16 x i8>, align 16
  %14 = alloca <8 x i8>, align 8
  %15 = alloca <8 x i16>, align 16
  %16 = alloca <16 x i8>, align 16
  %17 = alloca <16 x i8>, align 16
  %18 = alloca <8 x i16>, align 16
  %19 = alloca <8 x i16>, align 16
  %20 = alloca <16 x i8>, align 16
  %21 = alloca <16 x i8>, align 16
  store <8 x i16> %0, <8 x i16>* %19, align 16
  store <16 x i8> %1, <16 x i8>* %20, align 16
  store <16 x i8> %2, <16 x i8>* %21, align 16
  %22 = load <8 x i16>, <8 x i16>* %19, align 16
  %23 = load <16 x i8>, <16 x i8>* %20, align 16
  %24 = load <16 x i8>, <16 x i8>* %21, align 16
  store <8 x i16> %22, <8 x i16>* %15, align 16
  store <16 x i8> %23, <16 x i8>* %16, align 16
  store <16 x i8> %24, <16 x i8>* %17, align 16
  %25 = load <8 x i16>, <8 x i16>* %15, align 16
  %26 = load <16 x i8>, <16 x i8>* %16, align 16
  store <16 x i8> %26, <16 x i8>* %13, align 16
  %27 = load <16 x i8>, <16 x i8>* %13, align 16
  %28 = load <16 x i8>, <16 x i8>* %13, align 16
  %29 = shufflevector <16 x i8> %27, <16 x i8> %28, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %29, <8 x i8>* %14, align 8
  %30 = load <8 x i8>, <8 x i8>* %14, align 8
  %31 = load <16 x i8>, <16 x i8>* %17, align 16
  store <16 x i8> %31, <16 x i8>* %4, align 16
  %32 = load <16 x i8>, <16 x i8>* %4, align 16
  %33 = load <16 x i8>, <16 x i8>* %4, align 16
  %34 = shufflevector <16 x i8> %32, <16 x i8> %33, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %34, <8 x i8>* %5, align 8
  %35 = load <8 x i8>, <8 x i8>* %5, align 8
  store <8 x i16> %25, <8 x i16>* %9, align 16
  store <8 x i8> %30, <8 x i8>* %10, align 8
  store <8 x i8> %35, <8 x i8>* %11, align 8
  %36 = load <8 x i16>, <8 x i16>* %9, align 16
  %37 = load <8 x i8>, <8 x i8>* %10, align 8
  %38 = load <8 x i8>, <8 x i8>* %11, align 8
  store <8 x i8> %37, <8 x i8>* %6, align 8
  store <8 x i8> %38, <8 x i8>* %7, align 8
  %39 = load <8 x i8>, <8 x i8>* %6, align 8
  %40 = load <8 x i8>, <8 x i8>* %7, align 8
  %41 = call <8 x i16> @llvm.aarch64.neon.smull.v8i16(<8 x i8> %39, <8 x i8> %40) #4
  store <8 x i16> %41, <8 x i16>* %8, align 16
  %42 = load <8 x i16>, <8 x i16>* %8, align 16
  %43 = add <8 x i16> %36, %42
  store <8 x i16> %43, <8 x i16>* %12, align 16
  %44 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i16> %44, <8 x i16>* %18, align 16
  %45 = load <8 x i16>, <8 x i16>* %18, align 16
  ret <8 x i16> %45
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlal_high_s16_wrapper(<4 x i32> %0, <8 x i16> %1, <8 x i16> %2) #1 {
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i16>, align 8
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <4 x i16>, align 8
  %15 = alloca <4 x i32>, align 16
  %16 = alloca <8 x i16>, align 16
  %17 = alloca <8 x i16>, align 16
  %18 = alloca <4 x i32>, align 16
  %19 = alloca <4 x i32>, align 16
  %20 = alloca <8 x i16>, align 16
  %21 = alloca <8 x i16>, align 16
  store <4 x i32> %0, <4 x i32>* %19, align 16
  store <8 x i16> %1, <8 x i16>* %20, align 16
  store <8 x i16> %2, <8 x i16>* %21, align 16
  %22 = load <4 x i32>, <4 x i32>* %19, align 16
  %23 = load <8 x i16>, <8 x i16>* %20, align 16
  %24 = load <8 x i16>, <8 x i16>* %21, align 16
  store <4 x i32> %22, <4 x i32>* %15, align 16
  store <8 x i16> %23, <8 x i16>* %16, align 16
  store <8 x i16> %24, <8 x i16>* %17, align 16
  %25 = load <4 x i32>, <4 x i32>* %15, align 16
  %26 = load <8 x i16>, <8 x i16>* %16, align 16
  store <8 x i16> %26, <8 x i16>* %13, align 16
  %27 = load <8 x i16>, <8 x i16>* %13, align 16
  %28 = load <8 x i16>, <8 x i16>* %13, align 16
  %29 = shufflevector <8 x i16> %27, <8 x i16> %28, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %29, <4 x i16>* %14, align 8
  %30 = load <4 x i16>, <4 x i16>* %14, align 8
  %31 = load <8 x i16>, <8 x i16>* %17, align 16
  store <8 x i16> %31, <8 x i16>* %4, align 16
  %32 = load <8 x i16>, <8 x i16>* %4, align 16
  %33 = load <8 x i16>, <8 x i16>* %4, align 16
  %34 = shufflevector <8 x i16> %32, <8 x i16> %33, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %34, <4 x i16>* %5, align 8
  %35 = load <4 x i16>, <4 x i16>* %5, align 8
  store <4 x i32> %25, <4 x i32>* %9, align 16
  store <4 x i16> %30, <4 x i16>* %10, align 8
  store <4 x i16> %35, <4 x i16>* %11, align 8
  %36 = load <4 x i32>, <4 x i32>* %9, align 16
  %37 = load <4 x i16>, <4 x i16>* %10, align 8
  %38 = load <4 x i16>, <4 x i16>* %11, align 8
  store <4 x i16> %37, <4 x i16>* %6, align 8
  store <4 x i16> %38, <4 x i16>* %7, align 8
  %39 = load <4 x i16>, <4 x i16>* %6, align 8
  %40 = bitcast <4 x i16> %39 to <8 x i8>
  %41 = load <4 x i16>, <4 x i16>* %7, align 8
  %42 = bitcast <4 x i16> %41 to <8 x i8>
  %43 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %39, <4 x i16> %41) #4
  store <4 x i32> %43, <4 x i32>* %8, align 16
  %44 = load <4 x i32>, <4 x i32>* %8, align 16
  %45 = add <4 x i32> %36, %44
  store <4 x i32> %45, <4 x i32>* %12, align 16
  %46 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i32> %46, <4 x i32>* %18, align 16
  %47 = load <4 x i32>, <4 x i32>* %18, align 16
  ret <4 x i32> %47
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmlal_high_s32_wrapper(<2 x i64> %0, <4 x i32> %1, <4 x i32> %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i32>, align 8
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <2 x i32>, align 8
  %15 = alloca <2 x i64>, align 16
  %16 = alloca <4 x i32>, align 16
  %17 = alloca <4 x i32>, align 16
  %18 = alloca <2 x i64>, align 16
  %19 = alloca <2 x i64>, align 16
  %20 = alloca <4 x i32>, align 16
  %21 = alloca <4 x i32>, align 16
  store <2 x i64> %0, <2 x i64>* %19, align 16
  store <4 x i32> %1, <4 x i32>* %20, align 16
  store <4 x i32> %2, <4 x i32>* %21, align 16
  %22 = load <2 x i64>, <2 x i64>* %19, align 16
  %23 = load <4 x i32>, <4 x i32>* %20, align 16
  %24 = load <4 x i32>, <4 x i32>* %21, align 16
  store <2 x i64> %22, <2 x i64>* %15, align 16
  store <4 x i32> %23, <4 x i32>* %16, align 16
  store <4 x i32> %24, <4 x i32>* %17, align 16
  %25 = load <2 x i64>, <2 x i64>* %15, align 16
  %26 = load <4 x i32>, <4 x i32>* %16, align 16
  store <4 x i32> %26, <4 x i32>* %13, align 16
  %27 = load <4 x i32>, <4 x i32>* %13, align 16
  %28 = load <4 x i32>, <4 x i32>* %13, align 16
  %29 = shufflevector <4 x i32> %27, <4 x i32> %28, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %29, <2 x i32>* %14, align 8
  %30 = load <2 x i32>, <2 x i32>* %14, align 8
  %31 = load <4 x i32>, <4 x i32>* %17, align 16
  store <4 x i32> %31, <4 x i32>* %4, align 16
  %32 = load <4 x i32>, <4 x i32>* %4, align 16
  %33 = load <4 x i32>, <4 x i32>* %4, align 16
  %34 = shufflevector <4 x i32> %32, <4 x i32> %33, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %34, <2 x i32>* %5, align 8
  %35 = load <2 x i32>, <2 x i32>* %5, align 8
  store <2 x i64> %25, <2 x i64>* %9, align 16
  store <2 x i32> %30, <2 x i32>* %10, align 8
  store <2 x i32> %35, <2 x i32>* %11, align 8
  %36 = load <2 x i64>, <2 x i64>* %9, align 16
  %37 = load <2 x i32>, <2 x i32>* %10, align 8
  %38 = load <2 x i32>, <2 x i32>* %11, align 8
  store <2 x i32> %37, <2 x i32>* %6, align 8
  store <2 x i32> %38, <2 x i32>* %7, align 8
  %39 = load <2 x i32>, <2 x i32>* %6, align 8
  %40 = bitcast <2 x i32> %39 to <8 x i8>
  %41 = load <2 x i32>, <2 x i32>* %7, align 8
  %42 = bitcast <2 x i32> %41 to <8 x i8>
  %43 = call <2 x i64> @llvm.aarch64.neon.smull.v2i64(<2 x i32> %39, <2 x i32> %41) #4
  store <2 x i64> %43, <2 x i64>* %8, align 16
  %44 = load <2 x i64>, <2 x i64>* %8, align 16
  %45 = add <2 x i64> %36, %44
  store <2 x i64> %45, <2 x i64>* %12, align 16
  %46 = load <2 x i64>, <2 x i64>* %12, align 16
  store <2 x i64> %46, <2 x i64>* %18, align 16
  %47 = load <2 x i64>, <2 x i64>* %18, align 16
  ret <2 x i64> %47
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmlal_u8_wrapper(<8 x i16> %0, <8 x i8> %1, <8 x i8> %2) #1 {
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i8>, align 8
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <8 x i8>, align 8
  %13 = alloca <8 x i8>, align 8
  store <8 x i16> %0, <8 x i16>* %11, align 16
  store <8 x i8> %1, <8 x i8>* %12, align 8
  store <8 x i8> %2, <8 x i8>* %13, align 8
  %14 = load <8 x i16>, <8 x i16>* %11, align 16
  %15 = load <8 x i8>, <8 x i8>* %12, align 8
  %16 = load <8 x i8>, <8 x i8>* %13, align 8
  store <8 x i16> %14, <8 x i16>* %7, align 16
  store <8 x i8> %15, <8 x i8>* %8, align 8
  store <8 x i8> %16, <8 x i8>* %9, align 8
  %17 = load <8 x i16>, <8 x i16>* %7, align 16
  %18 = load <8 x i8>, <8 x i8>* %8, align 8
  %19 = load <8 x i8>, <8 x i8>* %9, align 8
  store <8 x i8> %18, <8 x i8>* %4, align 8
  store <8 x i8> %19, <8 x i8>* %5, align 8
  %20 = load <8 x i8>, <8 x i8>* %4, align 8
  %21 = load <8 x i8>, <8 x i8>* %5, align 8
  %22 = call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> %20, <8 x i8> %21) #4
  store <8 x i16> %22, <8 x i16>* %6, align 16
  %23 = load <8 x i16>, <8 x i16>* %6, align 16
  %24 = add <8 x i16> %17, %23
  store <8 x i16> %24, <8 x i16>* %10, align 16
  %25 = load <8 x i16>, <8 x i16>* %10, align 16
  ret <8 x i16> %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlal_u16_wrapper(<4 x i32> %0, <4 x i16> %1, <4 x i16> %2) #1 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <4 x i16>, align 8
  %13 = alloca <4 x i16>, align 8
  store <4 x i32> %0, <4 x i32>* %11, align 16
  store <4 x i16> %1, <4 x i16>* %12, align 8
  store <4 x i16> %2, <4 x i16>* %13, align 8
  %14 = load <4 x i32>, <4 x i32>* %11, align 16
  %15 = load <4 x i16>, <4 x i16>* %12, align 8
  %16 = load <4 x i16>, <4 x i16>* %13, align 8
  store <4 x i32> %14, <4 x i32>* %7, align 16
  store <4 x i16> %15, <4 x i16>* %8, align 8
  store <4 x i16> %16, <4 x i16>* %9, align 8
  %17 = load <4 x i32>, <4 x i32>* %7, align 16
  %18 = load <4 x i16>, <4 x i16>* %8, align 8
  %19 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i16> %18, <4 x i16>* %4, align 8
  store <4 x i16> %19, <4 x i16>* %5, align 8
  %20 = load <4 x i16>, <4 x i16>* %4, align 8
  %21 = bitcast <4 x i16> %20 to <8 x i8>
  %22 = load <4 x i16>, <4 x i16>* %5, align 8
  %23 = bitcast <4 x i16> %22 to <8 x i8>
  %24 = call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %20, <4 x i16> %22) #4
  store <4 x i32> %24, <4 x i32>* %6, align 16
  %25 = load <4 x i32>, <4 x i32>* %6, align 16
  %26 = add <4 x i32> %17, %25
  store <4 x i32> %26, <4 x i32>* %10, align 16
  %27 = load <4 x i32>, <4 x i32>* %10, align 16
  ret <4 x i32> %27
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmlal_u32_wrapper(<2 x i64> %0, <2 x i32> %1, <2 x i32> %2) #1 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <2 x i32>, align 8
  %13 = alloca <2 x i32>, align 8
  store <2 x i64> %0, <2 x i64>* %11, align 16
  store <2 x i32> %1, <2 x i32>* %12, align 8
  store <2 x i32> %2, <2 x i32>* %13, align 8
  %14 = load <2 x i64>, <2 x i64>* %11, align 16
  %15 = load <2 x i32>, <2 x i32>* %12, align 8
  %16 = load <2 x i32>, <2 x i32>* %13, align 8
  store <2 x i64> %14, <2 x i64>* %7, align 16
  store <2 x i32> %15, <2 x i32>* %8, align 8
  store <2 x i32> %16, <2 x i32>* %9, align 8
  %17 = load <2 x i64>, <2 x i64>* %7, align 16
  %18 = load <2 x i32>, <2 x i32>* %8, align 8
  %19 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i32> %18, <2 x i32>* %4, align 8
  store <2 x i32> %19, <2 x i32>* %5, align 8
  %20 = load <2 x i32>, <2 x i32>* %4, align 8
  %21 = bitcast <2 x i32> %20 to <8 x i8>
  %22 = load <2 x i32>, <2 x i32>* %5, align 8
  %23 = bitcast <2 x i32> %22 to <8 x i8>
  %24 = call <2 x i64> @llvm.aarch64.neon.umull.v2i64(<2 x i32> %20, <2 x i32> %22) #4
  store <2 x i64> %24, <2 x i64>* %6, align 16
  %25 = load <2 x i64>, <2 x i64>* %6, align 16
  %26 = add <2 x i64> %17, %25
  store <2 x i64> %26, <2 x i64>* %10, align 16
  %27 = load <2 x i64>, <2 x i64>* %10, align 16
  ret <2 x i64> %27
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmlal_high_u8_wrapper(<8 x i16> %0, <16 x i8> %1, <16 x i8> %2) #1 {
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i8>, align 8
  %11 = alloca <8 x i8>, align 8
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <16 x i8>, align 16
  %14 = alloca <8 x i8>, align 8
  %15 = alloca <8 x i16>, align 16
  %16 = alloca <16 x i8>, align 16
  %17 = alloca <16 x i8>, align 16
  %18 = alloca <8 x i16>, align 16
  %19 = alloca <8 x i16>, align 16
  %20 = alloca <16 x i8>, align 16
  %21 = alloca <16 x i8>, align 16
  store <8 x i16> %0, <8 x i16>* %19, align 16
  store <16 x i8> %1, <16 x i8>* %20, align 16
  store <16 x i8> %2, <16 x i8>* %21, align 16
  %22 = load <8 x i16>, <8 x i16>* %19, align 16
  %23 = load <16 x i8>, <16 x i8>* %20, align 16
  %24 = load <16 x i8>, <16 x i8>* %21, align 16
  store <8 x i16> %22, <8 x i16>* %15, align 16
  store <16 x i8> %23, <16 x i8>* %16, align 16
  store <16 x i8> %24, <16 x i8>* %17, align 16
  %25 = load <8 x i16>, <8 x i16>* %15, align 16
  %26 = load <16 x i8>, <16 x i8>* %16, align 16
  store <16 x i8> %26, <16 x i8>* %13, align 16
  %27 = load <16 x i8>, <16 x i8>* %13, align 16
  %28 = load <16 x i8>, <16 x i8>* %13, align 16
  %29 = shufflevector <16 x i8> %27, <16 x i8> %28, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %29, <8 x i8>* %14, align 8
  %30 = load <8 x i8>, <8 x i8>* %14, align 8
  %31 = load <16 x i8>, <16 x i8>* %17, align 16
  store <16 x i8> %31, <16 x i8>* %4, align 16
  %32 = load <16 x i8>, <16 x i8>* %4, align 16
  %33 = load <16 x i8>, <16 x i8>* %4, align 16
  %34 = shufflevector <16 x i8> %32, <16 x i8> %33, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %34, <8 x i8>* %5, align 8
  %35 = load <8 x i8>, <8 x i8>* %5, align 8
  store <8 x i16> %25, <8 x i16>* %9, align 16
  store <8 x i8> %30, <8 x i8>* %10, align 8
  store <8 x i8> %35, <8 x i8>* %11, align 8
  %36 = load <8 x i16>, <8 x i16>* %9, align 16
  %37 = load <8 x i8>, <8 x i8>* %10, align 8
  %38 = load <8 x i8>, <8 x i8>* %11, align 8
  store <8 x i8> %37, <8 x i8>* %6, align 8
  store <8 x i8> %38, <8 x i8>* %7, align 8
  %39 = load <8 x i8>, <8 x i8>* %6, align 8
  %40 = load <8 x i8>, <8 x i8>* %7, align 8
  %41 = call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> %39, <8 x i8> %40) #4
  store <8 x i16> %41, <8 x i16>* %8, align 16
  %42 = load <8 x i16>, <8 x i16>* %8, align 16
  %43 = add <8 x i16> %36, %42
  store <8 x i16> %43, <8 x i16>* %12, align 16
  %44 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i16> %44, <8 x i16>* %18, align 16
  %45 = load <8 x i16>, <8 x i16>* %18, align 16
  ret <8 x i16> %45
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlal_high_u16_wrapper(<4 x i32> %0, <8 x i16> %1, <8 x i16> %2) #1 {
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i16>, align 8
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <4 x i16>, align 8
  %15 = alloca <4 x i32>, align 16
  %16 = alloca <8 x i16>, align 16
  %17 = alloca <8 x i16>, align 16
  %18 = alloca <4 x i32>, align 16
  %19 = alloca <4 x i32>, align 16
  %20 = alloca <8 x i16>, align 16
  %21 = alloca <8 x i16>, align 16
  store <4 x i32> %0, <4 x i32>* %19, align 16
  store <8 x i16> %1, <8 x i16>* %20, align 16
  store <8 x i16> %2, <8 x i16>* %21, align 16
  %22 = load <4 x i32>, <4 x i32>* %19, align 16
  %23 = load <8 x i16>, <8 x i16>* %20, align 16
  %24 = load <8 x i16>, <8 x i16>* %21, align 16
  store <4 x i32> %22, <4 x i32>* %15, align 16
  store <8 x i16> %23, <8 x i16>* %16, align 16
  store <8 x i16> %24, <8 x i16>* %17, align 16
  %25 = load <4 x i32>, <4 x i32>* %15, align 16
  %26 = load <8 x i16>, <8 x i16>* %16, align 16
  store <8 x i16> %26, <8 x i16>* %13, align 16
  %27 = load <8 x i16>, <8 x i16>* %13, align 16
  %28 = load <8 x i16>, <8 x i16>* %13, align 16
  %29 = shufflevector <8 x i16> %27, <8 x i16> %28, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %29, <4 x i16>* %14, align 8
  %30 = load <4 x i16>, <4 x i16>* %14, align 8
  %31 = load <8 x i16>, <8 x i16>* %17, align 16
  store <8 x i16> %31, <8 x i16>* %4, align 16
  %32 = load <8 x i16>, <8 x i16>* %4, align 16
  %33 = load <8 x i16>, <8 x i16>* %4, align 16
  %34 = shufflevector <8 x i16> %32, <8 x i16> %33, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %34, <4 x i16>* %5, align 8
  %35 = load <4 x i16>, <4 x i16>* %5, align 8
  store <4 x i32> %25, <4 x i32>* %9, align 16
  store <4 x i16> %30, <4 x i16>* %10, align 8
  store <4 x i16> %35, <4 x i16>* %11, align 8
  %36 = load <4 x i32>, <4 x i32>* %9, align 16
  %37 = load <4 x i16>, <4 x i16>* %10, align 8
  %38 = load <4 x i16>, <4 x i16>* %11, align 8
  store <4 x i16> %37, <4 x i16>* %6, align 8
  store <4 x i16> %38, <4 x i16>* %7, align 8
  %39 = load <4 x i16>, <4 x i16>* %6, align 8
  %40 = bitcast <4 x i16> %39 to <8 x i8>
  %41 = load <4 x i16>, <4 x i16>* %7, align 8
  %42 = bitcast <4 x i16> %41 to <8 x i8>
  %43 = call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %39, <4 x i16> %41) #4
  store <4 x i32> %43, <4 x i32>* %8, align 16
  %44 = load <4 x i32>, <4 x i32>* %8, align 16
  %45 = add <4 x i32> %36, %44
  store <4 x i32> %45, <4 x i32>* %12, align 16
  %46 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i32> %46, <4 x i32>* %18, align 16
  %47 = load <4 x i32>, <4 x i32>* %18, align 16
  ret <4 x i32> %47
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmlal_high_u32_wrapper(<2 x i64> %0, <4 x i32> %1, <4 x i32> %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i32>, align 8
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <2 x i32>, align 8
  %15 = alloca <2 x i64>, align 16
  %16 = alloca <4 x i32>, align 16
  %17 = alloca <4 x i32>, align 16
  %18 = alloca <2 x i64>, align 16
  %19 = alloca <2 x i64>, align 16
  %20 = alloca <4 x i32>, align 16
  %21 = alloca <4 x i32>, align 16
  store <2 x i64> %0, <2 x i64>* %19, align 16
  store <4 x i32> %1, <4 x i32>* %20, align 16
  store <4 x i32> %2, <4 x i32>* %21, align 16
  %22 = load <2 x i64>, <2 x i64>* %19, align 16
  %23 = load <4 x i32>, <4 x i32>* %20, align 16
  %24 = load <4 x i32>, <4 x i32>* %21, align 16
  store <2 x i64> %22, <2 x i64>* %15, align 16
  store <4 x i32> %23, <4 x i32>* %16, align 16
  store <4 x i32> %24, <4 x i32>* %17, align 16
  %25 = load <2 x i64>, <2 x i64>* %15, align 16
  %26 = load <4 x i32>, <4 x i32>* %16, align 16
  store <4 x i32> %26, <4 x i32>* %13, align 16
  %27 = load <4 x i32>, <4 x i32>* %13, align 16
  %28 = load <4 x i32>, <4 x i32>* %13, align 16
  %29 = shufflevector <4 x i32> %27, <4 x i32> %28, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %29, <2 x i32>* %14, align 8
  %30 = load <2 x i32>, <2 x i32>* %14, align 8
  %31 = load <4 x i32>, <4 x i32>* %17, align 16
  store <4 x i32> %31, <4 x i32>* %4, align 16
  %32 = load <4 x i32>, <4 x i32>* %4, align 16
  %33 = load <4 x i32>, <4 x i32>* %4, align 16
  %34 = shufflevector <4 x i32> %32, <4 x i32> %33, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %34, <2 x i32>* %5, align 8
  %35 = load <2 x i32>, <2 x i32>* %5, align 8
  store <2 x i64> %25, <2 x i64>* %9, align 16
  store <2 x i32> %30, <2 x i32>* %10, align 8
  store <2 x i32> %35, <2 x i32>* %11, align 8
  %36 = load <2 x i64>, <2 x i64>* %9, align 16
  %37 = load <2 x i32>, <2 x i32>* %10, align 8
  %38 = load <2 x i32>, <2 x i32>* %11, align 8
  store <2 x i32> %37, <2 x i32>* %6, align 8
  store <2 x i32> %38, <2 x i32>* %7, align 8
  %39 = load <2 x i32>, <2 x i32>* %6, align 8
  %40 = bitcast <2 x i32> %39 to <8 x i8>
  %41 = load <2 x i32>, <2 x i32>* %7, align 8
  %42 = bitcast <2 x i32> %41 to <8 x i8>
  %43 = call <2 x i64> @llvm.aarch64.neon.umull.v2i64(<2 x i32> %39, <2 x i32> %41) #4
  store <2 x i64> %43, <2 x i64>* %8, align 16
  %44 = load <2 x i64>, <2 x i64>* %8, align 16
  %45 = add <2 x i64> %36, %44
  store <2 x i64> %45, <2 x i64>* %12, align 16
  %46 = load <2 x i64>, <2 x i64>* %12, align 16
  store <2 x i64> %46, <2 x i64>* %18, align 16
  %47 = load <2 x i64>, <2 x i64>* %18, align 16
  ret <2 x i64> %47
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vmls_s8_wrapper(<8 x i8> %0, <8 x i8> %1, <8 x i8> %2) #0 {
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i8>, align 8
  %10 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %8, align 8
  store <8 x i8> %1, <8 x i8>* %9, align 8
  store <8 x i8> %2, <8 x i8>* %10, align 8
  %11 = load <8 x i8>, <8 x i8>* %8, align 8
  %12 = load <8 x i8>, <8 x i8>* %9, align 8
  %13 = load <8 x i8>, <8 x i8>* %10, align 8
  store <8 x i8> %11, <8 x i8>* %4, align 8
  store <8 x i8> %12, <8 x i8>* %5, align 8
  store <8 x i8> %13, <8 x i8>* %6, align 8
  %14 = load <8 x i8>, <8 x i8>* %4, align 8
  %15 = load <8 x i8>, <8 x i8>* %5, align 8
  %16 = load <8 x i8>, <8 x i8>* %6, align 8
  %17 = mul <8 x i8> %15, %16
  %18 = sub <8 x i8> %14, %17
  store <8 x i8> %18, <8 x i8>* %7, align 8
  %19 = load <8 x i8>, <8 x i8>* %7, align 8
  ret <8 x i8> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vmlsq_s8_wrapper(<16 x i8> %0, <16 x i8> %1, <16 x i8> %2) #1 {
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  %8 = alloca <16 x i8>, align 16
  %9 = alloca <16 x i8>, align 16
  %10 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %8, align 16
  store <16 x i8> %1, <16 x i8>* %9, align 16
  store <16 x i8> %2, <16 x i8>* %10, align 16
  %11 = load <16 x i8>, <16 x i8>* %8, align 16
  %12 = load <16 x i8>, <16 x i8>* %9, align 16
  %13 = load <16 x i8>, <16 x i8>* %10, align 16
  store <16 x i8> %11, <16 x i8>* %4, align 16
  store <16 x i8> %12, <16 x i8>* %5, align 16
  store <16 x i8> %13, <16 x i8>* %6, align 16
  %14 = load <16 x i8>, <16 x i8>* %4, align 16
  %15 = load <16 x i8>, <16 x i8>* %5, align 16
  %16 = load <16 x i8>, <16 x i8>* %6, align 16
  %17 = mul <16 x i8> %15, %16
  %18 = sub <16 x i8> %14, %17
  store <16 x i8> %18, <16 x i8>* %7, align 16
  %19 = load <16 x i8>, <16 x i8>* %7, align 16
  ret <16 x i8> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmls_s16_wrapper(<4 x i16> %0, <4 x i16> %1, <4 x i16> %2) #0 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %8, align 8
  store <4 x i16> %1, <4 x i16>* %9, align 8
  store <4 x i16> %2, <4 x i16>* %10, align 8
  %11 = load <4 x i16>, <4 x i16>* %8, align 8
  %12 = load <4 x i16>, <4 x i16>* %9, align 8
  %13 = load <4 x i16>, <4 x i16>* %10, align 8
  store <4 x i16> %11, <4 x i16>* %4, align 8
  store <4 x i16> %12, <4 x i16>* %5, align 8
  store <4 x i16> %13, <4 x i16>* %6, align 8
  %14 = load <4 x i16>, <4 x i16>* %4, align 8
  %15 = load <4 x i16>, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %6, align 8
  %17 = mul <4 x i16> %15, %16
  %18 = sub <4 x i16> %14, %17
  store <4 x i16> %18, <4 x i16>* %7, align 8
  %19 = load <4 x i16>, <4 x i16>* %7, align 8
  ret <4 x i16> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmlsq_s16_wrapper(<8 x i16> %0, <8 x i16> %1, <8 x i16> %2) #1 {
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %8, align 16
  store <8 x i16> %1, <8 x i16>* %9, align 16
  store <8 x i16> %2, <8 x i16>* %10, align 16
  %11 = load <8 x i16>, <8 x i16>* %8, align 16
  %12 = load <8 x i16>, <8 x i16>* %9, align 16
  %13 = load <8 x i16>, <8 x i16>* %10, align 16
  store <8 x i16> %11, <8 x i16>* %4, align 16
  store <8 x i16> %12, <8 x i16>* %5, align 16
  store <8 x i16> %13, <8 x i16>* %6, align 16
  %14 = load <8 x i16>, <8 x i16>* %4, align 16
  %15 = load <8 x i16>, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %6, align 16
  %17 = mul <8 x i16> %15, %16
  %18 = sub <8 x i16> %14, %17
  store <8 x i16> %18, <8 x i16>* %7, align 16
  %19 = load <8 x i16>, <8 x i16>* %7, align 16
  ret <8 x i16> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmls_s32_wrapper(<2 x i32> %0, <2 x i32> %1, <2 x i32> %2) #0 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %8, align 8
  store <2 x i32> %1, <2 x i32>* %9, align 8
  store <2 x i32> %2, <2 x i32>* %10, align 8
  %11 = load <2 x i32>, <2 x i32>* %8, align 8
  %12 = load <2 x i32>, <2 x i32>* %9, align 8
  %13 = load <2 x i32>, <2 x i32>* %10, align 8
  store <2 x i32> %11, <2 x i32>* %4, align 8
  store <2 x i32> %12, <2 x i32>* %5, align 8
  store <2 x i32> %13, <2 x i32>* %6, align 8
  %14 = load <2 x i32>, <2 x i32>* %4, align 8
  %15 = load <2 x i32>, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %6, align 8
  %17 = mul <2 x i32> %15, %16
  %18 = sub <2 x i32> %14, %17
  store <2 x i32> %18, <2 x i32>* %7, align 8
  %19 = load <2 x i32>, <2 x i32>* %7, align 8
  ret <2 x i32> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlsq_s32_wrapper(<4 x i32> %0, <4 x i32> %1, <4 x i32> %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %8, align 16
  store <4 x i32> %1, <4 x i32>* %9, align 16
  store <4 x i32> %2, <4 x i32>* %10, align 16
  %11 = load <4 x i32>, <4 x i32>* %8, align 16
  %12 = load <4 x i32>, <4 x i32>* %9, align 16
  %13 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %11, <4 x i32>* %4, align 16
  store <4 x i32> %12, <4 x i32>* %5, align 16
  store <4 x i32> %13, <4 x i32>* %6, align 16
  %14 = load <4 x i32>, <4 x i32>* %4, align 16
  %15 = load <4 x i32>, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %6, align 16
  %17 = mul <4 x i32> %15, %16
  %18 = sub <4 x i32> %14, %17
  store <4 x i32> %18, <4 x i32>* %7, align 16
  %19 = load <4 x i32>, <4 x i32>* %7, align 16
  ret <4 x i32> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vmls_u8_wrapper(<8 x i8> %0, <8 x i8> %1, <8 x i8> %2) #0 {
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i8>, align 8
  %10 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %8, align 8
  store <8 x i8> %1, <8 x i8>* %9, align 8
  store <8 x i8> %2, <8 x i8>* %10, align 8
  %11 = load <8 x i8>, <8 x i8>* %8, align 8
  %12 = load <8 x i8>, <8 x i8>* %9, align 8
  %13 = load <8 x i8>, <8 x i8>* %10, align 8
  store <8 x i8> %11, <8 x i8>* %4, align 8
  store <8 x i8> %12, <8 x i8>* %5, align 8
  store <8 x i8> %13, <8 x i8>* %6, align 8
  %14 = load <8 x i8>, <8 x i8>* %4, align 8
  %15 = load <8 x i8>, <8 x i8>* %5, align 8
  %16 = load <8 x i8>, <8 x i8>* %6, align 8
  %17 = mul <8 x i8> %15, %16
  %18 = sub <8 x i8> %14, %17
  store <8 x i8> %18, <8 x i8>* %7, align 8
  %19 = load <8 x i8>, <8 x i8>* %7, align 8
  ret <8 x i8> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vmlsq_u8_wrapper(<16 x i8> %0, <16 x i8> %1, <16 x i8> %2) #1 {
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  %8 = alloca <16 x i8>, align 16
  %9 = alloca <16 x i8>, align 16
  %10 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %8, align 16
  store <16 x i8> %1, <16 x i8>* %9, align 16
  store <16 x i8> %2, <16 x i8>* %10, align 16
  %11 = load <16 x i8>, <16 x i8>* %8, align 16
  %12 = load <16 x i8>, <16 x i8>* %9, align 16
  %13 = load <16 x i8>, <16 x i8>* %10, align 16
  store <16 x i8> %11, <16 x i8>* %4, align 16
  store <16 x i8> %12, <16 x i8>* %5, align 16
  store <16 x i8> %13, <16 x i8>* %6, align 16
  %14 = load <16 x i8>, <16 x i8>* %4, align 16
  %15 = load <16 x i8>, <16 x i8>* %5, align 16
  %16 = load <16 x i8>, <16 x i8>* %6, align 16
  %17 = mul <16 x i8> %15, %16
  %18 = sub <16 x i8> %14, %17
  store <16 x i8> %18, <16 x i8>* %7, align 16
  %19 = load <16 x i8>, <16 x i8>* %7, align 16
  ret <16 x i8> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmls_u16_wrapper(<4 x i16> %0, <4 x i16> %1, <4 x i16> %2) #0 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %8, align 8
  store <4 x i16> %1, <4 x i16>* %9, align 8
  store <4 x i16> %2, <4 x i16>* %10, align 8
  %11 = load <4 x i16>, <4 x i16>* %8, align 8
  %12 = load <4 x i16>, <4 x i16>* %9, align 8
  %13 = load <4 x i16>, <4 x i16>* %10, align 8
  store <4 x i16> %11, <4 x i16>* %4, align 8
  store <4 x i16> %12, <4 x i16>* %5, align 8
  store <4 x i16> %13, <4 x i16>* %6, align 8
  %14 = load <4 x i16>, <4 x i16>* %4, align 8
  %15 = load <4 x i16>, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %6, align 8
  %17 = mul <4 x i16> %15, %16
  %18 = sub <4 x i16> %14, %17
  store <4 x i16> %18, <4 x i16>* %7, align 8
  %19 = load <4 x i16>, <4 x i16>* %7, align 8
  ret <4 x i16> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmlsq_u16_wrapper(<8 x i16> %0, <8 x i16> %1, <8 x i16> %2) #1 {
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %8, align 16
  store <8 x i16> %1, <8 x i16>* %9, align 16
  store <8 x i16> %2, <8 x i16>* %10, align 16
  %11 = load <8 x i16>, <8 x i16>* %8, align 16
  %12 = load <8 x i16>, <8 x i16>* %9, align 16
  %13 = load <8 x i16>, <8 x i16>* %10, align 16
  store <8 x i16> %11, <8 x i16>* %4, align 16
  store <8 x i16> %12, <8 x i16>* %5, align 16
  store <8 x i16> %13, <8 x i16>* %6, align 16
  %14 = load <8 x i16>, <8 x i16>* %4, align 16
  %15 = load <8 x i16>, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %6, align 16
  %17 = mul <8 x i16> %15, %16
  %18 = sub <8 x i16> %14, %17
  store <8 x i16> %18, <8 x i16>* %7, align 16
  %19 = load <8 x i16>, <8 x i16>* %7, align 16
  ret <8 x i16> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmls_u32_wrapper(<2 x i32> %0, <2 x i32> %1, <2 x i32> %2) #0 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %8, align 8
  store <2 x i32> %1, <2 x i32>* %9, align 8
  store <2 x i32> %2, <2 x i32>* %10, align 8
  %11 = load <2 x i32>, <2 x i32>* %8, align 8
  %12 = load <2 x i32>, <2 x i32>* %9, align 8
  %13 = load <2 x i32>, <2 x i32>* %10, align 8
  store <2 x i32> %11, <2 x i32>* %4, align 8
  store <2 x i32> %12, <2 x i32>* %5, align 8
  store <2 x i32> %13, <2 x i32>* %6, align 8
  %14 = load <2 x i32>, <2 x i32>* %4, align 8
  %15 = load <2 x i32>, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %6, align 8
  %17 = mul <2 x i32> %15, %16
  %18 = sub <2 x i32> %14, %17
  store <2 x i32> %18, <2 x i32>* %7, align 8
  %19 = load <2 x i32>, <2 x i32>* %7, align 8
  ret <2 x i32> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlsq_u32_wrapper(<4 x i32> %0, <4 x i32> %1, <4 x i32> %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %8, align 16
  store <4 x i32> %1, <4 x i32>* %9, align 16
  store <4 x i32> %2, <4 x i32>* %10, align 16
  %11 = load <4 x i32>, <4 x i32>* %8, align 16
  %12 = load <4 x i32>, <4 x i32>* %9, align 16
  %13 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %11, <4 x i32>* %4, align 16
  store <4 x i32> %12, <4 x i32>* %5, align 16
  store <4 x i32> %13, <4 x i32>* %6, align 16
  %14 = load <4 x i32>, <4 x i32>* %4, align 16
  %15 = load <4 x i32>, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %6, align 16
  %17 = mul <4 x i32> %15, %16
  %18 = sub <4 x i32> %14, %17
  store <4 x i32> %18, <4 x i32>* %7, align 16
  %19 = load <4 x i32>, <4 x i32>* %7, align 16
  ret <4 x i32> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmlsl_s8_wrapper(<8 x i16> %0, <8 x i8> %1, <8 x i8> %2) #1 {
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i8>, align 8
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <8 x i8>, align 8
  %13 = alloca <8 x i8>, align 8
  store <8 x i16> %0, <8 x i16>* %11, align 16
  store <8 x i8> %1, <8 x i8>* %12, align 8
  store <8 x i8> %2, <8 x i8>* %13, align 8
  %14 = load <8 x i16>, <8 x i16>* %11, align 16
  %15 = load <8 x i8>, <8 x i8>* %12, align 8
  %16 = load <8 x i8>, <8 x i8>* %13, align 8
  store <8 x i16> %14, <8 x i16>* %7, align 16
  store <8 x i8> %15, <8 x i8>* %8, align 8
  store <8 x i8> %16, <8 x i8>* %9, align 8
  %17 = load <8 x i16>, <8 x i16>* %7, align 16
  %18 = load <8 x i8>, <8 x i8>* %8, align 8
  %19 = load <8 x i8>, <8 x i8>* %9, align 8
  store <8 x i8> %18, <8 x i8>* %4, align 8
  store <8 x i8> %19, <8 x i8>* %5, align 8
  %20 = load <8 x i8>, <8 x i8>* %4, align 8
  %21 = load <8 x i8>, <8 x i8>* %5, align 8
  %22 = call <8 x i16> @llvm.aarch64.neon.smull.v8i16(<8 x i8> %20, <8 x i8> %21) #4
  store <8 x i16> %22, <8 x i16>* %6, align 16
  %23 = load <8 x i16>, <8 x i16>* %6, align 16
  %24 = sub <8 x i16> %17, %23
  store <8 x i16> %24, <8 x i16>* %10, align 16
  %25 = load <8 x i16>, <8 x i16>* %10, align 16
  ret <8 x i16> %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlsl_s16_wrapper(<4 x i32> %0, <4 x i16> %1, <4 x i16> %2) #1 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <4 x i16>, align 8
  %13 = alloca <4 x i16>, align 8
  store <4 x i32> %0, <4 x i32>* %11, align 16
  store <4 x i16> %1, <4 x i16>* %12, align 8
  store <4 x i16> %2, <4 x i16>* %13, align 8
  %14 = load <4 x i32>, <4 x i32>* %11, align 16
  %15 = load <4 x i16>, <4 x i16>* %12, align 8
  %16 = load <4 x i16>, <4 x i16>* %13, align 8
  store <4 x i32> %14, <4 x i32>* %7, align 16
  store <4 x i16> %15, <4 x i16>* %8, align 8
  store <4 x i16> %16, <4 x i16>* %9, align 8
  %17 = load <4 x i32>, <4 x i32>* %7, align 16
  %18 = load <4 x i16>, <4 x i16>* %8, align 8
  %19 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i16> %18, <4 x i16>* %4, align 8
  store <4 x i16> %19, <4 x i16>* %5, align 8
  %20 = load <4 x i16>, <4 x i16>* %4, align 8
  %21 = bitcast <4 x i16> %20 to <8 x i8>
  %22 = load <4 x i16>, <4 x i16>* %5, align 8
  %23 = bitcast <4 x i16> %22 to <8 x i8>
  %24 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %20, <4 x i16> %22) #4
  store <4 x i32> %24, <4 x i32>* %6, align 16
  %25 = load <4 x i32>, <4 x i32>* %6, align 16
  %26 = sub <4 x i32> %17, %25
  store <4 x i32> %26, <4 x i32>* %10, align 16
  %27 = load <4 x i32>, <4 x i32>* %10, align 16
  ret <4 x i32> %27
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmlsl_s32_wrapper(<2 x i64> %0, <2 x i32> %1, <2 x i32> %2) #1 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <2 x i32>, align 8
  %13 = alloca <2 x i32>, align 8
  store <2 x i64> %0, <2 x i64>* %11, align 16
  store <2 x i32> %1, <2 x i32>* %12, align 8
  store <2 x i32> %2, <2 x i32>* %13, align 8
  %14 = load <2 x i64>, <2 x i64>* %11, align 16
  %15 = load <2 x i32>, <2 x i32>* %12, align 8
  %16 = load <2 x i32>, <2 x i32>* %13, align 8
  store <2 x i64> %14, <2 x i64>* %7, align 16
  store <2 x i32> %15, <2 x i32>* %8, align 8
  store <2 x i32> %16, <2 x i32>* %9, align 8
  %17 = load <2 x i64>, <2 x i64>* %7, align 16
  %18 = load <2 x i32>, <2 x i32>* %8, align 8
  %19 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i32> %18, <2 x i32>* %4, align 8
  store <2 x i32> %19, <2 x i32>* %5, align 8
  %20 = load <2 x i32>, <2 x i32>* %4, align 8
  %21 = bitcast <2 x i32> %20 to <8 x i8>
  %22 = load <2 x i32>, <2 x i32>* %5, align 8
  %23 = bitcast <2 x i32> %22 to <8 x i8>
  %24 = call <2 x i64> @llvm.aarch64.neon.smull.v2i64(<2 x i32> %20, <2 x i32> %22) #4
  store <2 x i64> %24, <2 x i64>* %6, align 16
  %25 = load <2 x i64>, <2 x i64>* %6, align 16
  %26 = sub <2 x i64> %17, %25
  store <2 x i64> %26, <2 x i64>* %10, align 16
  %27 = load <2 x i64>, <2 x i64>* %10, align 16
  ret <2 x i64> %27
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmlsl_high_s8_wrapper(<8 x i16> %0, <16 x i8> %1, <16 x i8> %2) #1 {
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i8>, align 8
  %11 = alloca <8 x i8>, align 8
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <16 x i8>, align 16
  %14 = alloca <8 x i8>, align 8
  %15 = alloca <8 x i16>, align 16
  %16 = alloca <16 x i8>, align 16
  %17 = alloca <16 x i8>, align 16
  %18 = alloca <8 x i16>, align 16
  %19 = alloca <8 x i16>, align 16
  %20 = alloca <16 x i8>, align 16
  %21 = alloca <16 x i8>, align 16
  store <8 x i16> %0, <8 x i16>* %19, align 16
  store <16 x i8> %1, <16 x i8>* %20, align 16
  store <16 x i8> %2, <16 x i8>* %21, align 16
  %22 = load <8 x i16>, <8 x i16>* %19, align 16
  %23 = load <16 x i8>, <16 x i8>* %20, align 16
  %24 = load <16 x i8>, <16 x i8>* %21, align 16
  store <8 x i16> %22, <8 x i16>* %15, align 16
  store <16 x i8> %23, <16 x i8>* %16, align 16
  store <16 x i8> %24, <16 x i8>* %17, align 16
  %25 = load <8 x i16>, <8 x i16>* %15, align 16
  %26 = load <16 x i8>, <16 x i8>* %16, align 16
  store <16 x i8> %26, <16 x i8>* %13, align 16
  %27 = load <16 x i8>, <16 x i8>* %13, align 16
  %28 = load <16 x i8>, <16 x i8>* %13, align 16
  %29 = shufflevector <16 x i8> %27, <16 x i8> %28, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %29, <8 x i8>* %14, align 8
  %30 = load <8 x i8>, <8 x i8>* %14, align 8
  %31 = load <16 x i8>, <16 x i8>* %17, align 16
  store <16 x i8> %31, <16 x i8>* %4, align 16
  %32 = load <16 x i8>, <16 x i8>* %4, align 16
  %33 = load <16 x i8>, <16 x i8>* %4, align 16
  %34 = shufflevector <16 x i8> %32, <16 x i8> %33, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %34, <8 x i8>* %5, align 8
  %35 = load <8 x i8>, <8 x i8>* %5, align 8
  store <8 x i16> %25, <8 x i16>* %9, align 16
  store <8 x i8> %30, <8 x i8>* %10, align 8
  store <8 x i8> %35, <8 x i8>* %11, align 8
  %36 = load <8 x i16>, <8 x i16>* %9, align 16
  %37 = load <8 x i8>, <8 x i8>* %10, align 8
  %38 = load <8 x i8>, <8 x i8>* %11, align 8
  store <8 x i8> %37, <8 x i8>* %6, align 8
  store <8 x i8> %38, <8 x i8>* %7, align 8
  %39 = load <8 x i8>, <8 x i8>* %6, align 8
  %40 = load <8 x i8>, <8 x i8>* %7, align 8
  %41 = call <8 x i16> @llvm.aarch64.neon.smull.v8i16(<8 x i8> %39, <8 x i8> %40) #4
  store <8 x i16> %41, <8 x i16>* %8, align 16
  %42 = load <8 x i16>, <8 x i16>* %8, align 16
  %43 = sub <8 x i16> %36, %42
  store <8 x i16> %43, <8 x i16>* %12, align 16
  %44 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i16> %44, <8 x i16>* %18, align 16
  %45 = load <8 x i16>, <8 x i16>* %18, align 16
  ret <8 x i16> %45
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlsl_high_s16_wrapper(<4 x i32> %0, <8 x i16> %1, <8 x i16> %2) #1 {
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i16>, align 8
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <4 x i16>, align 8
  %15 = alloca <4 x i32>, align 16
  %16 = alloca <8 x i16>, align 16
  %17 = alloca <8 x i16>, align 16
  %18 = alloca <4 x i32>, align 16
  %19 = alloca <4 x i32>, align 16
  %20 = alloca <8 x i16>, align 16
  %21 = alloca <8 x i16>, align 16
  store <4 x i32> %0, <4 x i32>* %19, align 16
  store <8 x i16> %1, <8 x i16>* %20, align 16
  store <8 x i16> %2, <8 x i16>* %21, align 16
  %22 = load <4 x i32>, <4 x i32>* %19, align 16
  %23 = load <8 x i16>, <8 x i16>* %20, align 16
  %24 = load <8 x i16>, <8 x i16>* %21, align 16
  store <4 x i32> %22, <4 x i32>* %15, align 16
  store <8 x i16> %23, <8 x i16>* %16, align 16
  store <8 x i16> %24, <8 x i16>* %17, align 16
  %25 = load <4 x i32>, <4 x i32>* %15, align 16
  %26 = load <8 x i16>, <8 x i16>* %16, align 16
  store <8 x i16> %26, <8 x i16>* %13, align 16
  %27 = load <8 x i16>, <8 x i16>* %13, align 16
  %28 = load <8 x i16>, <8 x i16>* %13, align 16
  %29 = shufflevector <8 x i16> %27, <8 x i16> %28, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %29, <4 x i16>* %14, align 8
  %30 = load <4 x i16>, <4 x i16>* %14, align 8
  %31 = load <8 x i16>, <8 x i16>* %17, align 16
  store <8 x i16> %31, <8 x i16>* %4, align 16
  %32 = load <8 x i16>, <8 x i16>* %4, align 16
  %33 = load <8 x i16>, <8 x i16>* %4, align 16
  %34 = shufflevector <8 x i16> %32, <8 x i16> %33, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %34, <4 x i16>* %5, align 8
  %35 = load <4 x i16>, <4 x i16>* %5, align 8
  store <4 x i32> %25, <4 x i32>* %9, align 16
  store <4 x i16> %30, <4 x i16>* %10, align 8
  store <4 x i16> %35, <4 x i16>* %11, align 8
  %36 = load <4 x i32>, <4 x i32>* %9, align 16
  %37 = load <4 x i16>, <4 x i16>* %10, align 8
  %38 = load <4 x i16>, <4 x i16>* %11, align 8
  store <4 x i16> %37, <4 x i16>* %6, align 8
  store <4 x i16> %38, <4 x i16>* %7, align 8
  %39 = load <4 x i16>, <4 x i16>* %6, align 8
  %40 = bitcast <4 x i16> %39 to <8 x i8>
  %41 = load <4 x i16>, <4 x i16>* %7, align 8
  %42 = bitcast <4 x i16> %41 to <8 x i8>
  %43 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %39, <4 x i16> %41) #4
  store <4 x i32> %43, <4 x i32>* %8, align 16
  %44 = load <4 x i32>, <4 x i32>* %8, align 16
  %45 = sub <4 x i32> %36, %44
  store <4 x i32> %45, <4 x i32>* %12, align 16
  %46 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i32> %46, <4 x i32>* %18, align 16
  %47 = load <4 x i32>, <4 x i32>* %18, align 16
  ret <4 x i32> %47
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmlsl_high_s32_wrapper(<2 x i64> %0, <4 x i32> %1, <4 x i32> %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i32>, align 8
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <2 x i32>, align 8
  %15 = alloca <2 x i64>, align 16
  %16 = alloca <4 x i32>, align 16
  %17 = alloca <4 x i32>, align 16
  %18 = alloca <2 x i64>, align 16
  %19 = alloca <2 x i64>, align 16
  %20 = alloca <4 x i32>, align 16
  %21 = alloca <4 x i32>, align 16
  store <2 x i64> %0, <2 x i64>* %19, align 16
  store <4 x i32> %1, <4 x i32>* %20, align 16
  store <4 x i32> %2, <4 x i32>* %21, align 16
  %22 = load <2 x i64>, <2 x i64>* %19, align 16
  %23 = load <4 x i32>, <4 x i32>* %20, align 16
  %24 = load <4 x i32>, <4 x i32>* %21, align 16
  store <2 x i64> %22, <2 x i64>* %15, align 16
  store <4 x i32> %23, <4 x i32>* %16, align 16
  store <4 x i32> %24, <4 x i32>* %17, align 16
  %25 = load <2 x i64>, <2 x i64>* %15, align 16
  %26 = load <4 x i32>, <4 x i32>* %16, align 16
  store <4 x i32> %26, <4 x i32>* %13, align 16
  %27 = load <4 x i32>, <4 x i32>* %13, align 16
  %28 = load <4 x i32>, <4 x i32>* %13, align 16
  %29 = shufflevector <4 x i32> %27, <4 x i32> %28, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %29, <2 x i32>* %14, align 8
  %30 = load <2 x i32>, <2 x i32>* %14, align 8
  %31 = load <4 x i32>, <4 x i32>* %17, align 16
  store <4 x i32> %31, <4 x i32>* %4, align 16
  %32 = load <4 x i32>, <4 x i32>* %4, align 16
  %33 = load <4 x i32>, <4 x i32>* %4, align 16
  %34 = shufflevector <4 x i32> %32, <4 x i32> %33, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %34, <2 x i32>* %5, align 8
  %35 = load <2 x i32>, <2 x i32>* %5, align 8
  store <2 x i64> %25, <2 x i64>* %9, align 16
  store <2 x i32> %30, <2 x i32>* %10, align 8
  store <2 x i32> %35, <2 x i32>* %11, align 8
  %36 = load <2 x i64>, <2 x i64>* %9, align 16
  %37 = load <2 x i32>, <2 x i32>* %10, align 8
  %38 = load <2 x i32>, <2 x i32>* %11, align 8
  store <2 x i32> %37, <2 x i32>* %6, align 8
  store <2 x i32> %38, <2 x i32>* %7, align 8
  %39 = load <2 x i32>, <2 x i32>* %6, align 8
  %40 = bitcast <2 x i32> %39 to <8 x i8>
  %41 = load <2 x i32>, <2 x i32>* %7, align 8
  %42 = bitcast <2 x i32> %41 to <8 x i8>
  %43 = call <2 x i64> @llvm.aarch64.neon.smull.v2i64(<2 x i32> %39, <2 x i32> %41) #4
  store <2 x i64> %43, <2 x i64>* %8, align 16
  %44 = load <2 x i64>, <2 x i64>* %8, align 16
  %45 = sub <2 x i64> %36, %44
  store <2 x i64> %45, <2 x i64>* %12, align 16
  %46 = load <2 x i64>, <2 x i64>* %12, align 16
  store <2 x i64> %46, <2 x i64>* %18, align 16
  %47 = load <2 x i64>, <2 x i64>* %18, align 16
  ret <2 x i64> %47
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmlsl_u8_wrapper(<8 x i16> %0, <8 x i8> %1, <8 x i8> %2) #1 {
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i8>, align 8
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <8 x i8>, align 8
  %13 = alloca <8 x i8>, align 8
  store <8 x i16> %0, <8 x i16>* %11, align 16
  store <8 x i8> %1, <8 x i8>* %12, align 8
  store <8 x i8> %2, <8 x i8>* %13, align 8
  %14 = load <8 x i16>, <8 x i16>* %11, align 16
  %15 = load <8 x i8>, <8 x i8>* %12, align 8
  %16 = load <8 x i8>, <8 x i8>* %13, align 8
  store <8 x i16> %14, <8 x i16>* %7, align 16
  store <8 x i8> %15, <8 x i8>* %8, align 8
  store <8 x i8> %16, <8 x i8>* %9, align 8
  %17 = load <8 x i16>, <8 x i16>* %7, align 16
  %18 = load <8 x i8>, <8 x i8>* %8, align 8
  %19 = load <8 x i8>, <8 x i8>* %9, align 8
  store <8 x i8> %18, <8 x i8>* %4, align 8
  store <8 x i8> %19, <8 x i8>* %5, align 8
  %20 = load <8 x i8>, <8 x i8>* %4, align 8
  %21 = load <8 x i8>, <8 x i8>* %5, align 8
  %22 = call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> %20, <8 x i8> %21) #4
  store <8 x i16> %22, <8 x i16>* %6, align 16
  %23 = load <8 x i16>, <8 x i16>* %6, align 16
  %24 = sub <8 x i16> %17, %23
  store <8 x i16> %24, <8 x i16>* %10, align 16
  %25 = load <8 x i16>, <8 x i16>* %10, align 16
  ret <8 x i16> %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlsl_u16_wrapper(<4 x i32> %0, <4 x i16> %1, <4 x i16> %2) #1 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <4 x i16>, align 8
  %13 = alloca <4 x i16>, align 8
  store <4 x i32> %0, <4 x i32>* %11, align 16
  store <4 x i16> %1, <4 x i16>* %12, align 8
  store <4 x i16> %2, <4 x i16>* %13, align 8
  %14 = load <4 x i32>, <4 x i32>* %11, align 16
  %15 = load <4 x i16>, <4 x i16>* %12, align 8
  %16 = load <4 x i16>, <4 x i16>* %13, align 8
  store <4 x i32> %14, <4 x i32>* %7, align 16
  store <4 x i16> %15, <4 x i16>* %8, align 8
  store <4 x i16> %16, <4 x i16>* %9, align 8
  %17 = load <4 x i32>, <4 x i32>* %7, align 16
  %18 = load <4 x i16>, <4 x i16>* %8, align 8
  %19 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i16> %18, <4 x i16>* %4, align 8
  store <4 x i16> %19, <4 x i16>* %5, align 8
  %20 = load <4 x i16>, <4 x i16>* %4, align 8
  %21 = bitcast <4 x i16> %20 to <8 x i8>
  %22 = load <4 x i16>, <4 x i16>* %5, align 8
  %23 = bitcast <4 x i16> %22 to <8 x i8>
  %24 = call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %20, <4 x i16> %22) #4
  store <4 x i32> %24, <4 x i32>* %6, align 16
  %25 = load <4 x i32>, <4 x i32>* %6, align 16
  %26 = sub <4 x i32> %17, %25
  store <4 x i32> %26, <4 x i32>* %10, align 16
  %27 = load <4 x i32>, <4 x i32>* %10, align 16
  ret <4 x i32> %27
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmlsl_u32_wrapper(<2 x i64> %0, <2 x i32> %1, <2 x i32> %2) #1 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <2 x i32>, align 8
  %13 = alloca <2 x i32>, align 8
  store <2 x i64> %0, <2 x i64>* %11, align 16
  store <2 x i32> %1, <2 x i32>* %12, align 8
  store <2 x i32> %2, <2 x i32>* %13, align 8
  %14 = load <2 x i64>, <2 x i64>* %11, align 16
  %15 = load <2 x i32>, <2 x i32>* %12, align 8
  %16 = load <2 x i32>, <2 x i32>* %13, align 8
  store <2 x i64> %14, <2 x i64>* %7, align 16
  store <2 x i32> %15, <2 x i32>* %8, align 8
  store <2 x i32> %16, <2 x i32>* %9, align 8
  %17 = load <2 x i64>, <2 x i64>* %7, align 16
  %18 = load <2 x i32>, <2 x i32>* %8, align 8
  %19 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i32> %18, <2 x i32>* %4, align 8
  store <2 x i32> %19, <2 x i32>* %5, align 8
  %20 = load <2 x i32>, <2 x i32>* %4, align 8
  %21 = bitcast <2 x i32> %20 to <8 x i8>
  %22 = load <2 x i32>, <2 x i32>* %5, align 8
  %23 = bitcast <2 x i32> %22 to <8 x i8>
  %24 = call <2 x i64> @llvm.aarch64.neon.umull.v2i64(<2 x i32> %20, <2 x i32> %22) #4
  store <2 x i64> %24, <2 x i64>* %6, align 16
  %25 = load <2 x i64>, <2 x i64>* %6, align 16
  %26 = sub <2 x i64> %17, %25
  store <2 x i64> %26, <2 x i64>* %10, align 16
  %27 = load <2 x i64>, <2 x i64>* %10, align 16
  ret <2 x i64> %27
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmlsl_high_u8_wrapper(<8 x i16> %0, <16 x i8> %1, <16 x i8> %2) #1 {
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i8>, align 8
  %11 = alloca <8 x i8>, align 8
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <16 x i8>, align 16
  %14 = alloca <8 x i8>, align 8
  %15 = alloca <8 x i16>, align 16
  %16 = alloca <16 x i8>, align 16
  %17 = alloca <16 x i8>, align 16
  %18 = alloca <8 x i16>, align 16
  %19 = alloca <8 x i16>, align 16
  %20 = alloca <16 x i8>, align 16
  %21 = alloca <16 x i8>, align 16
  store <8 x i16> %0, <8 x i16>* %19, align 16
  store <16 x i8> %1, <16 x i8>* %20, align 16
  store <16 x i8> %2, <16 x i8>* %21, align 16
  %22 = load <8 x i16>, <8 x i16>* %19, align 16
  %23 = load <16 x i8>, <16 x i8>* %20, align 16
  %24 = load <16 x i8>, <16 x i8>* %21, align 16
  store <8 x i16> %22, <8 x i16>* %15, align 16
  store <16 x i8> %23, <16 x i8>* %16, align 16
  store <16 x i8> %24, <16 x i8>* %17, align 16
  %25 = load <8 x i16>, <8 x i16>* %15, align 16
  %26 = load <16 x i8>, <16 x i8>* %16, align 16
  store <16 x i8> %26, <16 x i8>* %13, align 16
  %27 = load <16 x i8>, <16 x i8>* %13, align 16
  %28 = load <16 x i8>, <16 x i8>* %13, align 16
  %29 = shufflevector <16 x i8> %27, <16 x i8> %28, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %29, <8 x i8>* %14, align 8
  %30 = load <8 x i8>, <8 x i8>* %14, align 8
  %31 = load <16 x i8>, <16 x i8>* %17, align 16
  store <16 x i8> %31, <16 x i8>* %4, align 16
  %32 = load <16 x i8>, <16 x i8>* %4, align 16
  %33 = load <16 x i8>, <16 x i8>* %4, align 16
  %34 = shufflevector <16 x i8> %32, <16 x i8> %33, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %34, <8 x i8>* %5, align 8
  %35 = load <8 x i8>, <8 x i8>* %5, align 8
  store <8 x i16> %25, <8 x i16>* %9, align 16
  store <8 x i8> %30, <8 x i8>* %10, align 8
  store <8 x i8> %35, <8 x i8>* %11, align 8
  %36 = load <8 x i16>, <8 x i16>* %9, align 16
  %37 = load <8 x i8>, <8 x i8>* %10, align 8
  %38 = load <8 x i8>, <8 x i8>* %11, align 8
  store <8 x i8> %37, <8 x i8>* %6, align 8
  store <8 x i8> %38, <8 x i8>* %7, align 8
  %39 = load <8 x i8>, <8 x i8>* %6, align 8
  %40 = load <8 x i8>, <8 x i8>* %7, align 8
  %41 = call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> %39, <8 x i8> %40) #4
  store <8 x i16> %41, <8 x i16>* %8, align 16
  %42 = load <8 x i16>, <8 x i16>* %8, align 16
  %43 = sub <8 x i16> %36, %42
  store <8 x i16> %43, <8 x i16>* %12, align 16
  %44 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i16> %44, <8 x i16>* %18, align 16
  %45 = load <8 x i16>, <8 x i16>* %18, align 16
  ret <8 x i16> %45
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlsl_high_u16_wrapper(<4 x i32> %0, <8 x i16> %1, <8 x i16> %2) #1 {
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i16>, align 8
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <4 x i16>, align 8
  %15 = alloca <4 x i32>, align 16
  %16 = alloca <8 x i16>, align 16
  %17 = alloca <8 x i16>, align 16
  %18 = alloca <4 x i32>, align 16
  %19 = alloca <4 x i32>, align 16
  %20 = alloca <8 x i16>, align 16
  %21 = alloca <8 x i16>, align 16
  store <4 x i32> %0, <4 x i32>* %19, align 16
  store <8 x i16> %1, <8 x i16>* %20, align 16
  store <8 x i16> %2, <8 x i16>* %21, align 16
  %22 = load <4 x i32>, <4 x i32>* %19, align 16
  %23 = load <8 x i16>, <8 x i16>* %20, align 16
  %24 = load <8 x i16>, <8 x i16>* %21, align 16
  store <4 x i32> %22, <4 x i32>* %15, align 16
  store <8 x i16> %23, <8 x i16>* %16, align 16
  store <8 x i16> %24, <8 x i16>* %17, align 16
  %25 = load <4 x i32>, <4 x i32>* %15, align 16
  %26 = load <8 x i16>, <8 x i16>* %16, align 16
  store <8 x i16> %26, <8 x i16>* %13, align 16
  %27 = load <8 x i16>, <8 x i16>* %13, align 16
  %28 = load <8 x i16>, <8 x i16>* %13, align 16
  %29 = shufflevector <8 x i16> %27, <8 x i16> %28, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %29, <4 x i16>* %14, align 8
  %30 = load <4 x i16>, <4 x i16>* %14, align 8
  %31 = load <8 x i16>, <8 x i16>* %17, align 16
  store <8 x i16> %31, <8 x i16>* %4, align 16
  %32 = load <8 x i16>, <8 x i16>* %4, align 16
  %33 = load <8 x i16>, <8 x i16>* %4, align 16
  %34 = shufflevector <8 x i16> %32, <8 x i16> %33, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %34, <4 x i16>* %5, align 8
  %35 = load <4 x i16>, <4 x i16>* %5, align 8
  store <4 x i32> %25, <4 x i32>* %9, align 16
  store <4 x i16> %30, <4 x i16>* %10, align 8
  store <4 x i16> %35, <4 x i16>* %11, align 8
  %36 = load <4 x i32>, <4 x i32>* %9, align 16
  %37 = load <4 x i16>, <4 x i16>* %10, align 8
  %38 = load <4 x i16>, <4 x i16>* %11, align 8
  store <4 x i16> %37, <4 x i16>* %6, align 8
  store <4 x i16> %38, <4 x i16>* %7, align 8
  %39 = load <4 x i16>, <4 x i16>* %6, align 8
  %40 = bitcast <4 x i16> %39 to <8 x i8>
  %41 = load <4 x i16>, <4 x i16>* %7, align 8
  %42 = bitcast <4 x i16> %41 to <8 x i8>
  %43 = call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %39, <4 x i16> %41) #4
  store <4 x i32> %43, <4 x i32>* %8, align 16
  %44 = load <4 x i32>, <4 x i32>* %8, align 16
  %45 = sub <4 x i32> %36, %44
  store <4 x i32> %45, <4 x i32>* %12, align 16
  %46 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i32> %46, <4 x i32>* %18, align 16
  %47 = load <4 x i32>, <4 x i32>* %18, align 16
  ret <4 x i32> %47
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmlsl_high_u32_wrapper(<2 x i64> %0, <4 x i32> %1, <4 x i32> %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i32>, align 8
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <2 x i32>, align 8
  %15 = alloca <2 x i64>, align 16
  %16 = alloca <4 x i32>, align 16
  %17 = alloca <4 x i32>, align 16
  %18 = alloca <2 x i64>, align 16
  %19 = alloca <2 x i64>, align 16
  %20 = alloca <4 x i32>, align 16
  %21 = alloca <4 x i32>, align 16
  store <2 x i64> %0, <2 x i64>* %19, align 16
  store <4 x i32> %1, <4 x i32>* %20, align 16
  store <4 x i32> %2, <4 x i32>* %21, align 16
  %22 = load <2 x i64>, <2 x i64>* %19, align 16
  %23 = load <4 x i32>, <4 x i32>* %20, align 16
  %24 = load <4 x i32>, <4 x i32>* %21, align 16
  store <2 x i64> %22, <2 x i64>* %15, align 16
  store <4 x i32> %23, <4 x i32>* %16, align 16
  store <4 x i32> %24, <4 x i32>* %17, align 16
  %25 = load <2 x i64>, <2 x i64>* %15, align 16
  %26 = load <4 x i32>, <4 x i32>* %16, align 16
  store <4 x i32> %26, <4 x i32>* %13, align 16
  %27 = load <4 x i32>, <4 x i32>* %13, align 16
  %28 = load <4 x i32>, <4 x i32>* %13, align 16
  %29 = shufflevector <4 x i32> %27, <4 x i32> %28, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %29, <2 x i32>* %14, align 8
  %30 = load <2 x i32>, <2 x i32>* %14, align 8
  %31 = load <4 x i32>, <4 x i32>* %17, align 16
  store <4 x i32> %31, <4 x i32>* %4, align 16
  %32 = load <4 x i32>, <4 x i32>* %4, align 16
  %33 = load <4 x i32>, <4 x i32>* %4, align 16
  %34 = shufflevector <4 x i32> %32, <4 x i32> %33, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %34, <2 x i32>* %5, align 8
  %35 = load <2 x i32>, <2 x i32>* %5, align 8
  store <2 x i64> %25, <2 x i64>* %9, align 16
  store <2 x i32> %30, <2 x i32>* %10, align 8
  store <2 x i32> %35, <2 x i32>* %11, align 8
  %36 = load <2 x i64>, <2 x i64>* %9, align 16
  %37 = load <2 x i32>, <2 x i32>* %10, align 8
  %38 = load <2 x i32>, <2 x i32>* %11, align 8
  store <2 x i32> %37, <2 x i32>* %6, align 8
  store <2 x i32> %38, <2 x i32>* %7, align 8
  %39 = load <2 x i32>, <2 x i32>* %6, align 8
  %40 = bitcast <2 x i32> %39 to <8 x i8>
  %41 = load <2 x i32>, <2 x i32>* %7, align 8
  %42 = bitcast <2 x i32> %41 to <8 x i8>
  %43 = call <2 x i64> @llvm.aarch64.neon.umull.v2i64(<2 x i32> %39, <2 x i32> %41) #4
  store <2 x i64> %43, <2 x i64>* %8, align 16
  %44 = load <2 x i64>, <2 x i64>* %8, align 16
  %45 = sub <2 x i64> %36, %44
  store <2 x i64> %45, <2 x i64>* %12, align 16
  %46 = load <2 x i64>, <2 x i64>* %12, align 16
  store <2 x i64> %46, <2 x i64>* %18, align 16
  %47 = load <2 x i64>, <2 x i64>* %18, align 16
  ret <2 x i64> %47
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vqdmulh_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.sqdmulh.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vqdmulhq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.sqdmulh.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vqdmulh_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.sqdmulh.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqdmulhq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.sqdmulh.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define signext i16 @vqdmulhh_s16_wrapper(i16 signext %0, i16 signext %1) #2 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  store i16 %0, i16* %6, align 2
  store i16 %1, i16* %7, align 2
  %8 = load i16, i16* %6, align 2
  %9 = load i16, i16* %7, align 2
  store i16 %8, i16* %3, align 2
  store i16 %9, i16* %4, align 2
  %10 = load i16, i16* %3, align 2
  %11 = load i16, i16* %4, align 2
  %12 = insertelement <4 x i16> undef, i16 %10, i64 0
  %13 = insertelement <4 x i16> undef, i16 %11, i64 0
  %14 = call <4 x i16> @llvm.aarch64.neon.sqdmulh.v4i16(<4 x i16> %12, <4 x i16> %13) #4
  %15 = extractelement <4 x i16> %14, i64 0
  store i16 %15, i16* %5, align 2
  %16 = load i16, i16* %5, align 2
  ret i16 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @vqdmulhs_s32_wrapper(i32 %0, i32 %1) #2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  %8 = load i32, i32* %6, align 4
  %9 = load i32, i32* %7, align 4
  store i32 %8, i32* %3, align 4
  store i32 %9, i32* %4, align 4
  %10 = load i32, i32* %3, align 4
  %11 = load i32, i32* %4, align 4
  %12 = call i32 @llvm.aarch64.neon.sqdmulh.i32(i32 %10, i32 %11) #4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %5, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vqrdmulh_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.sqrdmulh.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vqrdmulhq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.sqrdmulh.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vqrdmulh_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.sqrdmulh.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqrdmulhq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define signext i16 @vqrdmulhh_s16_wrapper(i16 signext %0, i16 signext %1) #2 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  store i16 %0, i16* %6, align 2
  store i16 %1, i16* %7, align 2
  %8 = load i16, i16* %6, align 2
  %9 = load i16, i16* %7, align 2
  store i16 %8, i16* %3, align 2
  store i16 %9, i16* %4, align 2
  %10 = load i16, i16* %3, align 2
  %11 = load i16, i16* %4, align 2
  %12 = insertelement <4 x i16> undef, i16 %10, i64 0
  %13 = insertelement <4 x i16> undef, i16 %11, i64 0
  %14 = call <4 x i16> @llvm.aarch64.neon.sqrdmulh.v4i16(<4 x i16> %12, <4 x i16> %13) #4
  %15 = extractelement <4 x i16> %14, i64 0
  store i16 %15, i16* %5, align 2
  %16 = load i16, i16* %5, align 2
  ret i16 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @vqrdmulhs_s32_wrapper(i32 %0, i32 %1) #2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  %8 = load i32, i32* %6, align 4
  %9 = load i32, i32* %7, align 4
  store i32 %8, i32* %3, align 4
  store i32 %9, i32* %4, align 4
  %10 = load i32, i32* %3, align 4
  %11 = load i32, i32* %4, align 4
  %12 = call i32 @llvm.aarch64.neon.sqrdmulh.i32(i32 %10, i32 %11) #4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %5, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqdmlal_s16_wrapper(<4 x i32> %0, <4 x i16> %1, <4 x i16> %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  store <4 x i32> %0, <4 x i32>* %8, align 16
  store <4 x i16> %1, <4 x i16>* %9, align 8
  store <4 x i16> %2, <4 x i16>* %10, align 8
  %11 = load <4 x i32>, <4 x i32>* %8, align 16
  %12 = load <4 x i16>, <4 x i16>* %9, align 8
  %13 = load <4 x i16>, <4 x i16>* %10, align 8
  store <4 x i32> %11, <4 x i32>* %4, align 16
  store <4 x i16> %12, <4 x i16>* %5, align 8
  store <4 x i16> %13, <4 x i16>* %6, align 8
  %14 = load <4 x i32>, <4 x i32>* %4, align 16
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  %17 = bitcast <4 x i16> %16 to <8 x i8>
  %18 = load <4 x i16>, <4 x i16>* %6, align 8
  %19 = bitcast <4 x i16> %18 to <8 x i8>
  %20 = call <4 x i32> @llvm.aarch64.neon.sqdmull.v4i32(<4 x i16> %16, <4 x i16> %18) #4
  %21 = call <4 x i32> @llvm.aarch64.neon.sqadd.v4i32(<4 x i32> %14, <4 x i32> %20) #4
  store <4 x i32> %21, <4 x i32>* %7, align 16
  %22 = load <4 x i32>, <4 x i32>* %7, align 16
  ret <4 x i32> %22
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqdmlal_s32_wrapper(<2 x i64> %0, <2 x i32> %1, <2 x i32> %2) #1 {
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  store <2 x i64> %0, <2 x i64>* %8, align 16
  store <2 x i32> %1, <2 x i32>* %9, align 8
  store <2 x i32> %2, <2 x i32>* %10, align 8
  %11 = load <2 x i64>, <2 x i64>* %8, align 16
  %12 = load <2 x i32>, <2 x i32>* %9, align 8
  %13 = load <2 x i32>, <2 x i32>* %10, align 8
  store <2 x i64> %11, <2 x i64>* %4, align 16
  store <2 x i32> %12, <2 x i32>* %5, align 8
  store <2 x i32> %13, <2 x i32>* %6, align 8
  %14 = load <2 x i64>, <2 x i64>* %4, align 16
  %15 = bitcast <2 x i64> %14 to <16 x i8>
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  %17 = bitcast <2 x i32> %16 to <8 x i8>
  %18 = load <2 x i32>, <2 x i32>* %6, align 8
  %19 = bitcast <2 x i32> %18 to <8 x i8>
  %20 = call <2 x i64> @llvm.aarch64.neon.sqdmull.v2i64(<2 x i32> %16, <2 x i32> %18) #4
  %21 = call <2 x i64> @llvm.aarch64.neon.sqadd.v2i64(<2 x i64> %14, <2 x i64> %20) #4
  store <2 x i64> %21, <2 x i64>* %7, align 16
  %22 = load <2 x i64>, <2 x i64>* %7, align 16
  ret <2 x i64> %22
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqdmlal_high_s16_wrapper(<4 x i32> %0, <8 x i16> %1, <8 x i16> %2) #1 {
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <8 x i16>, align 16
  %15 = alloca <4 x i32>, align 16
  %16 = alloca <4 x i32>, align 16
  %17 = alloca <8 x i16>, align 16
  %18 = alloca <8 x i16>, align 16
  store <4 x i32> %0, <4 x i32>* %16, align 16
  store <8 x i16> %1, <8 x i16>* %17, align 16
  store <8 x i16> %2, <8 x i16>* %18, align 16
  %19 = load <4 x i32>, <4 x i32>* %16, align 16
  %20 = load <8 x i16>, <8 x i16>* %17, align 16
  %21 = load <8 x i16>, <8 x i16>* %18, align 16
  store <4 x i32> %19, <4 x i32>* %12, align 16
  store <8 x i16> %20, <8 x i16>* %13, align 16
  store <8 x i16> %21, <8 x i16>* %14, align 16
  %22 = load <4 x i32>, <4 x i32>* %12, align 16
  %23 = load <8 x i16>, <8 x i16>* %13, align 16
  store <8 x i16> %23, <8 x i16>* %10, align 16
  %24 = load <8 x i16>, <8 x i16>* %10, align 16
  %25 = load <8 x i16>, <8 x i16>* %10, align 16
  %26 = shufflevector <8 x i16> %24, <8 x i16> %25, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %26, <4 x i16>* %11, align 8
  %27 = load <4 x i16>, <4 x i16>* %11, align 8
  %28 = load <8 x i16>, <8 x i16>* %14, align 16
  store <8 x i16> %28, <8 x i16>* %4, align 16
  %29 = load <8 x i16>, <8 x i16>* %4, align 16
  %30 = load <8 x i16>, <8 x i16>* %4, align 16
  %31 = shufflevector <8 x i16> %29, <8 x i16> %30, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %31, <4 x i16>* %5, align 8
  %32 = load <4 x i16>, <4 x i16>* %5, align 8
  store <4 x i32> %22, <4 x i32>* %6, align 16
  store <4 x i16> %27, <4 x i16>* %7, align 8
  store <4 x i16> %32, <4 x i16>* %8, align 8
  %33 = load <4 x i32>, <4 x i32>* %6, align 16
  %34 = bitcast <4 x i32> %33 to <16 x i8>
  %35 = load <4 x i16>, <4 x i16>* %7, align 8
  %36 = bitcast <4 x i16> %35 to <8 x i8>
  %37 = load <4 x i16>, <4 x i16>* %8, align 8
  %38 = bitcast <4 x i16> %37 to <8 x i8>
  %39 = call <4 x i32> @llvm.aarch64.neon.sqdmull.v4i32(<4 x i16> %35, <4 x i16> %37) #4
  %40 = call <4 x i32> @llvm.aarch64.neon.sqadd.v4i32(<4 x i32> %33, <4 x i32> %39) #4
  store <4 x i32> %40, <4 x i32>* %9, align 16
  %41 = load <4 x i32>, <4 x i32>* %9, align 16
  store <4 x i32> %41, <4 x i32>* %15, align 16
  %42 = load <4 x i32>, <4 x i32>* %15, align 16
  ret <4 x i32> %42
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqdmlal_high_s32_wrapper(<2 x i64> %0, <4 x i32> %1, <4 x i32> %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <4 x i32>, align 16
  %15 = alloca <2 x i64>, align 16
  %16 = alloca <2 x i64>, align 16
  %17 = alloca <4 x i32>, align 16
  %18 = alloca <4 x i32>, align 16
  store <2 x i64> %0, <2 x i64>* %16, align 16
  store <4 x i32> %1, <4 x i32>* %17, align 16
  store <4 x i32> %2, <4 x i32>* %18, align 16
  %19 = load <2 x i64>, <2 x i64>* %16, align 16
  %20 = load <4 x i32>, <4 x i32>* %17, align 16
  %21 = load <4 x i32>, <4 x i32>* %18, align 16
  store <2 x i64> %19, <2 x i64>* %12, align 16
  store <4 x i32> %20, <4 x i32>* %13, align 16
  store <4 x i32> %21, <4 x i32>* %14, align 16
  %22 = load <2 x i64>, <2 x i64>* %12, align 16
  %23 = load <4 x i32>, <4 x i32>* %13, align 16
  store <4 x i32> %23, <4 x i32>* %10, align 16
  %24 = load <4 x i32>, <4 x i32>* %10, align 16
  %25 = load <4 x i32>, <4 x i32>* %10, align 16
  %26 = shufflevector <4 x i32> %24, <4 x i32> %25, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %26, <2 x i32>* %11, align 8
  %27 = load <2 x i32>, <2 x i32>* %11, align 8
  %28 = load <4 x i32>, <4 x i32>* %14, align 16
  store <4 x i32> %28, <4 x i32>* %4, align 16
  %29 = load <4 x i32>, <4 x i32>* %4, align 16
  %30 = load <4 x i32>, <4 x i32>* %4, align 16
  %31 = shufflevector <4 x i32> %29, <4 x i32> %30, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %31, <2 x i32>* %5, align 8
  %32 = load <2 x i32>, <2 x i32>* %5, align 8
  store <2 x i64> %22, <2 x i64>* %6, align 16
  store <2 x i32> %27, <2 x i32>* %7, align 8
  store <2 x i32> %32, <2 x i32>* %8, align 8
  %33 = load <2 x i64>, <2 x i64>* %6, align 16
  %34 = bitcast <2 x i64> %33 to <16 x i8>
  %35 = load <2 x i32>, <2 x i32>* %7, align 8
  %36 = bitcast <2 x i32> %35 to <8 x i8>
  %37 = load <2 x i32>, <2 x i32>* %8, align 8
  %38 = bitcast <2 x i32> %37 to <8 x i8>
  %39 = call <2 x i64> @llvm.aarch64.neon.sqdmull.v2i64(<2 x i32> %35, <2 x i32> %37) #4
  %40 = call <2 x i64> @llvm.aarch64.neon.sqadd.v2i64(<2 x i64> %33, <2 x i64> %39) #4
  store <2 x i64> %40, <2 x i64>* %9, align 16
  %41 = load <2 x i64>, <2 x i64>* %9, align 16
  store <2 x i64> %41, <2 x i64>* %15, align 16
  %42 = load <2 x i64>, <2 x i64>* %15, align 16
  ret <2 x i64> %42
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @vqdmlalh_s16_wrapper(i32 %0, i16 signext %1, i16 signext %2) #2 {
  %4 = alloca i32, align 4
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i16, align 2
  %10 = alloca i16, align 2
  store i32 %0, i32* %8, align 4
  store i16 %1, i16* %9, align 2
  store i16 %2, i16* %10, align 2
  %11 = load i32, i32* %8, align 4
  %12 = load i16, i16* %9, align 2
  %13 = load i16, i16* %10, align 2
  store i32 %11, i32* %4, align 4
  store i16 %12, i16* %5, align 2
  store i16 %13, i16* %6, align 2
  %14 = load i32, i32* %4, align 4
  %15 = load i16, i16* %5, align 2
  %16 = insertelement <4 x i16> undef, i16 %15, i64 0
  %17 = load i16, i16* %6, align 2
  %18 = insertelement <4 x i16> undef, i16 %17, i64 0
  %19 = call <4 x i32> @llvm.aarch64.neon.sqdmull.v4i32(<4 x i16> %16, <4 x i16> %18) #4
  %20 = extractelement <4 x i32> %19, i64 0
  %21 = call i32 @llvm.aarch64.neon.sqadd.i32(i32 %14, i32 %20) #4
  store i32 %21, i32* %7, align 4
  %22 = load i32, i32* %7, align 4
  ret i32 %22
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vqdmlals_s32_wrapper(i64 %0, i32 %1, i32 %2) #2 {
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i64 %0, i64* %8, align 8
  store i32 %1, i32* %9, align 4
  store i32 %2, i32* %10, align 4
  %11 = load i64, i64* %8, align 8
  %12 = load i32, i32* %9, align 4
  %13 = load i32, i32* %10, align 4
  store i64 %11, i64* %4, align 8
  store i32 %12, i32* %5, align 4
  store i32 %13, i32* %6, align 4
  %14 = load i64, i64* %4, align 8
  %15 = load i32, i32* %5, align 4
  %16 = load i32, i32* %6, align 4
  %17 = call i64 @llvm.aarch64.neon.sqdmulls.scalar(i32 %15, i32 %16) #4
  %18 = call i64 @llvm.aarch64.neon.sqadd.i64(i64 %14, i64 %17) #4
  store i64 %18, i64* %7, align 8
  %19 = load i64, i64* %7, align 8
  ret i64 %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqdmlsl_s16_wrapper(<4 x i32> %0, <4 x i16> %1, <4 x i16> %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  store <4 x i32> %0, <4 x i32>* %8, align 16
  store <4 x i16> %1, <4 x i16>* %9, align 8
  store <4 x i16> %2, <4 x i16>* %10, align 8
  %11 = load <4 x i32>, <4 x i32>* %8, align 16
  %12 = load <4 x i16>, <4 x i16>* %9, align 8
  %13 = load <4 x i16>, <4 x i16>* %10, align 8
  store <4 x i32> %11, <4 x i32>* %4, align 16
  store <4 x i16> %12, <4 x i16>* %5, align 8
  store <4 x i16> %13, <4 x i16>* %6, align 8
  %14 = load <4 x i32>, <4 x i32>* %4, align 16
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  %17 = bitcast <4 x i16> %16 to <8 x i8>
  %18 = load <4 x i16>, <4 x i16>* %6, align 8
  %19 = bitcast <4 x i16> %18 to <8 x i8>
  %20 = call <4 x i32> @llvm.aarch64.neon.sqdmull.v4i32(<4 x i16> %16, <4 x i16> %18) #4
  %21 = call <4 x i32> @llvm.aarch64.neon.sqsub.v4i32(<4 x i32> %14, <4 x i32> %20) #4
  store <4 x i32> %21, <4 x i32>* %7, align 16
  %22 = load <4 x i32>, <4 x i32>* %7, align 16
  ret <4 x i32> %22
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqdmlsl_s32_wrapper(<2 x i64> %0, <2 x i32> %1, <2 x i32> %2) #1 {
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  store <2 x i64> %0, <2 x i64>* %8, align 16
  store <2 x i32> %1, <2 x i32>* %9, align 8
  store <2 x i32> %2, <2 x i32>* %10, align 8
  %11 = load <2 x i64>, <2 x i64>* %8, align 16
  %12 = load <2 x i32>, <2 x i32>* %9, align 8
  %13 = load <2 x i32>, <2 x i32>* %10, align 8
  store <2 x i64> %11, <2 x i64>* %4, align 16
  store <2 x i32> %12, <2 x i32>* %5, align 8
  store <2 x i32> %13, <2 x i32>* %6, align 8
  %14 = load <2 x i64>, <2 x i64>* %4, align 16
  %15 = bitcast <2 x i64> %14 to <16 x i8>
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  %17 = bitcast <2 x i32> %16 to <8 x i8>
  %18 = load <2 x i32>, <2 x i32>* %6, align 8
  %19 = bitcast <2 x i32> %18 to <8 x i8>
  %20 = call <2 x i64> @llvm.aarch64.neon.sqdmull.v2i64(<2 x i32> %16, <2 x i32> %18) #4
  %21 = call <2 x i64> @llvm.aarch64.neon.sqsub.v2i64(<2 x i64> %14, <2 x i64> %20) #4
  store <2 x i64> %21, <2 x i64>* %7, align 16
  %22 = load <2 x i64>, <2 x i64>* %7, align 16
  ret <2 x i64> %22
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqdmlsl_high_s16_wrapper(<4 x i32> %0, <8 x i16> %1, <8 x i16> %2) #1 {
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <8 x i16>, align 16
  %15 = alloca <4 x i32>, align 16
  %16 = alloca <4 x i32>, align 16
  %17 = alloca <8 x i16>, align 16
  %18 = alloca <8 x i16>, align 16
  store <4 x i32> %0, <4 x i32>* %16, align 16
  store <8 x i16> %1, <8 x i16>* %17, align 16
  store <8 x i16> %2, <8 x i16>* %18, align 16
  %19 = load <4 x i32>, <4 x i32>* %16, align 16
  %20 = load <8 x i16>, <8 x i16>* %17, align 16
  %21 = load <8 x i16>, <8 x i16>* %18, align 16
  store <4 x i32> %19, <4 x i32>* %12, align 16
  store <8 x i16> %20, <8 x i16>* %13, align 16
  store <8 x i16> %21, <8 x i16>* %14, align 16
  %22 = load <4 x i32>, <4 x i32>* %12, align 16
  %23 = load <8 x i16>, <8 x i16>* %13, align 16
  store <8 x i16> %23, <8 x i16>* %10, align 16
  %24 = load <8 x i16>, <8 x i16>* %10, align 16
  %25 = load <8 x i16>, <8 x i16>* %10, align 16
  %26 = shufflevector <8 x i16> %24, <8 x i16> %25, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %26, <4 x i16>* %11, align 8
  %27 = load <4 x i16>, <4 x i16>* %11, align 8
  %28 = load <8 x i16>, <8 x i16>* %14, align 16
  store <8 x i16> %28, <8 x i16>* %4, align 16
  %29 = load <8 x i16>, <8 x i16>* %4, align 16
  %30 = load <8 x i16>, <8 x i16>* %4, align 16
  %31 = shufflevector <8 x i16> %29, <8 x i16> %30, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %31, <4 x i16>* %5, align 8
  %32 = load <4 x i16>, <4 x i16>* %5, align 8
  store <4 x i32> %22, <4 x i32>* %6, align 16
  store <4 x i16> %27, <4 x i16>* %7, align 8
  store <4 x i16> %32, <4 x i16>* %8, align 8
  %33 = load <4 x i32>, <4 x i32>* %6, align 16
  %34 = bitcast <4 x i32> %33 to <16 x i8>
  %35 = load <4 x i16>, <4 x i16>* %7, align 8
  %36 = bitcast <4 x i16> %35 to <8 x i8>
  %37 = load <4 x i16>, <4 x i16>* %8, align 8
  %38 = bitcast <4 x i16> %37 to <8 x i8>
  %39 = call <4 x i32> @llvm.aarch64.neon.sqdmull.v4i32(<4 x i16> %35, <4 x i16> %37) #4
  %40 = call <4 x i32> @llvm.aarch64.neon.sqsub.v4i32(<4 x i32> %33, <4 x i32> %39) #4
  store <4 x i32> %40, <4 x i32>* %9, align 16
  %41 = load <4 x i32>, <4 x i32>* %9, align 16
  store <4 x i32> %41, <4 x i32>* %15, align 16
  %42 = load <4 x i32>, <4 x i32>* %15, align 16
  ret <4 x i32> %42
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqdmlsl_high_s32_wrapper(<2 x i64> %0, <4 x i32> %1, <4 x i32> %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <4 x i32>, align 16
  %15 = alloca <2 x i64>, align 16
  %16 = alloca <2 x i64>, align 16
  %17 = alloca <4 x i32>, align 16
  %18 = alloca <4 x i32>, align 16
  store <2 x i64> %0, <2 x i64>* %16, align 16
  store <4 x i32> %1, <4 x i32>* %17, align 16
  store <4 x i32> %2, <4 x i32>* %18, align 16
  %19 = load <2 x i64>, <2 x i64>* %16, align 16
  %20 = load <4 x i32>, <4 x i32>* %17, align 16
  %21 = load <4 x i32>, <4 x i32>* %18, align 16
  store <2 x i64> %19, <2 x i64>* %12, align 16
  store <4 x i32> %20, <4 x i32>* %13, align 16
  store <4 x i32> %21, <4 x i32>* %14, align 16
  %22 = load <2 x i64>, <2 x i64>* %12, align 16
  %23 = load <4 x i32>, <4 x i32>* %13, align 16
  store <4 x i32> %23, <4 x i32>* %10, align 16
  %24 = load <4 x i32>, <4 x i32>* %10, align 16
  %25 = load <4 x i32>, <4 x i32>* %10, align 16
  %26 = shufflevector <4 x i32> %24, <4 x i32> %25, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %26, <2 x i32>* %11, align 8
  %27 = load <2 x i32>, <2 x i32>* %11, align 8
  %28 = load <4 x i32>, <4 x i32>* %14, align 16
  store <4 x i32> %28, <4 x i32>* %4, align 16
  %29 = load <4 x i32>, <4 x i32>* %4, align 16
  %30 = load <4 x i32>, <4 x i32>* %4, align 16
  %31 = shufflevector <4 x i32> %29, <4 x i32> %30, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %31, <2 x i32>* %5, align 8
  %32 = load <2 x i32>, <2 x i32>* %5, align 8
  store <2 x i64> %22, <2 x i64>* %6, align 16
  store <2 x i32> %27, <2 x i32>* %7, align 8
  store <2 x i32> %32, <2 x i32>* %8, align 8
  %33 = load <2 x i64>, <2 x i64>* %6, align 16
  %34 = bitcast <2 x i64> %33 to <16 x i8>
  %35 = load <2 x i32>, <2 x i32>* %7, align 8
  %36 = bitcast <2 x i32> %35 to <8 x i8>
  %37 = load <2 x i32>, <2 x i32>* %8, align 8
  %38 = bitcast <2 x i32> %37 to <8 x i8>
  %39 = call <2 x i64> @llvm.aarch64.neon.sqdmull.v2i64(<2 x i32> %35, <2 x i32> %37) #4
  %40 = call <2 x i64> @llvm.aarch64.neon.sqsub.v2i64(<2 x i64> %33, <2 x i64> %39) #4
  store <2 x i64> %40, <2 x i64>* %9, align 16
  %41 = load <2 x i64>, <2 x i64>* %9, align 16
  store <2 x i64> %41, <2 x i64>* %15, align 16
  %42 = load <2 x i64>, <2 x i64>* %15, align 16
  ret <2 x i64> %42
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @vqdmlslh_s16_wrapper(i32 %0, i16 signext %1, i16 signext %2) #2 {
  %4 = alloca i32, align 4
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i16, align 2
  %10 = alloca i16, align 2
  store i32 %0, i32* %8, align 4
  store i16 %1, i16* %9, align 2
  store i16 %2, i16* %10, align 2
  %11 = load i32, i32* %8, align 4
  %12 = load i16, i16* %9, align 2
  %13 = load i16, i16* %10, align 2
  store i32 %11, i32* %4, align 4
  store i16 %12, i16* %5, align 2
  store i16 %13, i16* %6, align 2
  %14 = load i32, i32* %4, align 4
  %15 = load i16, i16* %5, align 2
  %16 = insertelement <4 x i16> undef, i16 %15, i64 0
  %17 = load i16, i16* %6, align 2
  %18 = insertelement <4 x i16> undef, i16 %17, i64 0
  %19 = call <4 x i32> @llvm.aarch64.neon.sqdmull.v4i32(<4 x i16> %16, <4 x i16> %18) #4
  %20 = extractelement <4 x i32> %19, i64 0
  %21 = call i32 @llvm.aarch64.neon.sqsub.i32(i32 %14, i32 %20) #4
  store i32 %21, i32* %7, align 4
  %22 = load i32, i32* %7, align 4
  ret i32 %22
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vqdmlsls_s32_wrapper(i64 %0, i32 %1, i32 %2) #2 {
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i64 %0, i64* %8, align 8
  store i32 %1, i32* %9, align 4
  store i32 %2, i32* %10, align 4
  %11 = load i64, i64* %8, align 8
  %12 = load i32, i32* %9, align 4
  %13 = load i32, i32* %10, align 4
  store i64 %11, i64* %4, align 8
  store i32 %12, i32* %5, align 4
  store i32 %13, i32* %6, align 4
  %14 = load i64, i64* %4, align 8
  %15 = load i32, i32* %5, align 4
  %16 = load i32, i32* %6, align 4
  %17 = call i64 @llvm.aarch64.neon.sqdmulls.scalar(i32 %15, i32 %16) #4
  %18 = call i64 @llvm.aarch64.neon.sqsub.i64(i64 %14, i64 %17) #4
  store i64 %18, i64* %7, align 8
  %19 = load i64, i64* %7, align 8
  ret i64 %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmull_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #1 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i16> @llvm.aarch64.neon.smull.v8i16(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmull_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %10, <4 x i16> %12) #4
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %15 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmull_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i64> @llvm.aarch64.neon.smull.v2i64(<2 x i32> %10, <2 x i32> %12) #4
  store <2 x i64> %14, <2 x i64>* %5, align 16
  %15 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmull_high_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <16 x i8>, align 16
  %9 = alloca <8 x i8>, align 8
  %10 = alloca <16 x i8>, align 16
  %11 = alloca <16 x i8>, align 16
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <16 x i8>, align 16
  %14 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %13, align 16
  store <16 x i8> %1, <16 x i8>* %14, align 16
  %15 = load <16 x i8>, <16 x i8>* %13, align 16
  %16 = load <16 x i8>, <16 x i8>* %14, align 16
  store <16 x i8> %15, <16 x i8>* %10, align 16
  store <16 x i8> %16, <16 x i8>* %11, align 16
  %17 = load <16 x i8>, <16 x i8>* %10, align 16
  store <16 x i8> %17, <16 x i8>* %8, align 16
  %18 = load <16 x i8>, <16 x i8>* %8, align 16
  %19 = load <16 x i8>, <16 x i8>* %8, align 16
  %20 = shufflevector <16 x i8> %18, <16 x i8> %19, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %20, <8 x i8>* %9, align 8
  %21 = load <8 x i8>, <8 x i8>* %9, align 8
  %22 = load <16 x i8>, <16 x i8>* %11, align 16
  store <16 x i8> %22, <16 x i8>* %3, align 16
  %23 = load <16 x i8>, <16 x i8>* %3, align 16
  %24 = load <16 x i8>, <16 x i8>* %3, align 16
  %25 = shufflevector <16 x i8> %23, <16 x i8> %24, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %25, <8 x i8>* %4, align 8
  %26 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %21, <8 x i8>* %5, align 8
  store <8 x i8> %26, <8 x i8>* %6, align 8
  %27 = load <8 x i8>, <8 x i8>* %5, align 8
  %28 = load <8 x i8>, <8 x i8>* %6, align 8
  %29 = call <8 x i16> @llvm.aarch64.neon.smull.v8i16(<8 x i8> %27, <8 x i8> %28) #4
  store <8 x i16> %29, <8 x i16>* %7, align 16
  %30 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %30, <8 x i16>* %12, align 16
  %31 = load <8 x i16>, <8 x i16>* %12, align 16
  ret <8 x i16> %31
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmull_high_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %13, align 16
  store <8 x i16> %1, <8 x i16>* %14, align 16
  %15 = load <8 x i16>, <8 x i16>* %13, align 16
  %16 = load <8 x i16>, <8 x i16>* %14, align 16
  store <8 x i16> %15, <8 x i16>* %10, align 16
  store <8 x i16> %16, <8 x i16>* %11, align 16
  %17 = load <8 x i16>, <8 x i16>* %10, align 16
  store <8 x i16> %17, <8 x i16>* %8, align 16
  %18 = load <8 x i16>, <8 x i16>* %8, align 16
  %19 = load <8 x i16>, <8 x i16>* %8, align 16
  %20 = shufflevector <8 x i16> %18, <8 x i16> %19, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %20, <4 x i16>* %9, align 8
  %21 = load <4 x i16>, <4 x i16>* %9, align 8
  %22 = load <8 x i16>, <8 x i16>* %11, align 16
  store <8 x i16> %22, <8 x i16>* %3, align 16
  %23 = load <8 x i16>, <8 x i16>* %3, align 16
  %24 = load <8 x i16>, <8 x i16>* %3, align 16
  %25 = shufflevector <8 x i16> %23, <8 x i16> %24, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %25, <4 x i16>* %4, align 8
  %26 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %21, <4 x i16>* %5, align 8
  store <4 x i16> %26, <4 x i16>* %6, align 8
  %27 = load <4 x i16>, <4 x i16>* %5, align 8
  %28 = bitcast <4 x i16> %27 to <8 x i8>
  %29 = load <4 x i16>, <4 x i16>* %6, align 8
  %30 = bitcast <4 x i16> %29 to <8 x i8>
  %31 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %27, <4 x i16> %29) #4
  store <4 x i32> %31, <4 x i32>* %7, align 16
  %32 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %32, <4 x i32>* %12, align 16
  %33 = load <4 x i32>, <4 x i32>* %12, align 16
  ret <4 x i32> %33
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmull_high_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %13, align 16
  store <4 x i32> %1, <4 x i32>* %14, align 16
  %15 = load <4 x i32>, <4 x i32>* %13, align 16
  %16 = load <4 x i32>, <4 x i32>* %14, align 16
  store <4 x i32> %15, <4 x i32>* %10, align 16
  store <4 x i32> %16, <4 x i32>* %11, align 16
  %17 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %17, <4 x i32>* %8, align 16
  %18 = load <4 x i32>, <4 x i32>* %8, align 16
  %19 = load <4 x i32>, <4 x i32>* %8, align 16
  %20 = shufflevector <4 x i32> %18, <4 x i32> %19, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %20, <2 x i32>* %9, align 8
  %21 = load <2 x i32>, <2 x i32>* %9, align 8
  %22 = load <4 x i32>, <4 x i32>* %11, align 16
  store <4 x i32> %22, <4 x i32>* %3, align 16
  %23 = load <4 x i32>, <4 x i32>* %3, align 16
  %24 = load <4 x i32>, <4 x i32>* %3, align 16
  %25 = shufflevector <4 x i32> %23, <4 x i32> %24, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %25, <2 x i32>* %4, align 8
  %26 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %21, <2 x i32>* %5, align 8
  store <2 x i32> %26, <2 x i32>* %6, align 8
  %27 = load <2 x i32>, <2 x i32>* %5, align 8
  %28 = bitcast <2 x i32> %27 to <8 x i8>
  %29 = load <2 x i32>, <2 x i32>* %6, align 8
  %30 = bitcast <2 x i32> %29 to <8 x i8>
  %31 = call <2 x i64> @llvm.aarch64.neon.smull.v2i64(<2 x i32> %27, <2 x i32> %29) #4
  store <2 x i64> %31, <2 x i64>* %7, align 16
  %32 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %32, <2 x i64>* %12, align 16
  %33 = load <2 x i64>, <2 x i64>* %12, align 16
  ret <2 x i64> %33
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmull_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #1 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmull_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %10, <4 x i16> %12) #4
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %15 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmull_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i64> @llvm.aarch64.neon.umull.v2i64(<2 x i32> %10, <2 x i32> %12) #4
  store <2 x i64> %14, <2 x i64>* %5, align 16
  %15 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmull_high_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <16 x i8>, align 16
  %9 = alloca <8 x i8>, align 8
  %10 = alloca <16 x i8>, align 16
  %11 = alloca <16 x i8>, align 16
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <16 x i8>, align 16
  %14 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %13, align 16
  store <16 x i8> %1, <16 x i8>* %14, align 16
  %15 = load <16 x i8>, <16 x i8>* %13, align 16
  %16 = load <16 x i8>, <16 x i8>* %14, align 16
  store <16 x i8> %15, <16 x i8>* %10, align 16
  store <16 x i8> %16, <16 x i8>* %11, align 16
  %17 = load <16 x i8>, <16 x i8>* %10, align 16
  store <16 x i8> %17, <16 x i8>* %8, align 16
  %18 = load <16 x i8>, <16 x i8>* %8, align 16
  %19 = load <16 x i8>, <16 x i8>* %8, align 16
  %20 = shufflevector <16 x i8> %18, <16 x i8> %19, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %20, <8 x i8>* %9, align 8
  %21 = load <8 x i8>, <8 x i8>* %9, align 8
  %22 = load <16 x i8>, <16 x i8>* %11, align 16
  store <16 x i8> %22, <16 x i8>* %3, align 16
  %23 = load <16 x i8>, <16 x i8>* %3, align 16
  %24 = load <16 x i8>, <16 x i8>* %3, align 16
  %25 = shufflevector <16 x i8> %23, <16 x i8> %24, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %25, <8 x i8>* %4, align 8
  %26 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %21, <8 x i8>* %5, align 8
  store <8 x i8> %26, <8 x i8>* %6, align 8
  %27 = load <8 x i8>, <8 x i8>* %5, align 8
  %28 = load <8 x i8>, <8 x i8>* %6, align 8
  %29 = call <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8> %27, <8 x i8> %28) #4
  store <8 x i16> %29, <8 x i16>* %7, align 16
  %30 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %30, <8 x i16>* %12, align 16
  %31 = load <8 x i16>, <8 x i16>* %12, align 16
  ret <8 x i16> %31
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmull_high_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %13, align 16
  store <8 x i16> %1, <8 x i16>* %14, align 16
  %15 = load <8 x i16>, <8 x i16>* %13, align 16
  %16 = load <8 x i16>, <8 x i16>* %14, align 16
  store <8 x i16> %15, <8 x i16>* %10, align 16
  store <8 x i16> %16, <8 x i16>* %11, align 16
  %17 = load <8 x i16>, <8 x i16>* %10, align 16
  store <8 x i16> %17, <8 x i16>* %8, align 16
  %18 = load <8 x i16>, <8 x i16>* %8, align 16
  %19 = load <8 x i16>, <8 x i16>* %8, align 16
  %20 = shufflevector <8 x i16> %18, <8 x i16> %19, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %20, <4 x i16>* %9, align 8
  %21 = load <4 x i16>, <4 x i16>* %9, align 8
  %22 = load <8 x i16>, <8 x i16>* %11, align 16
  store <8 x i16> %22, <8 x i16>* %3, align 16
  %23 = load <8 x i16>, <8 x i16>* %3, align 16
  %24 = load <8 x i16>, <8 x i16>* %3, align 16
  %25 = shufflevector <8 x i16> %23, <8 x i16> %24, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %25, <4 x i16>* %4, align 8
  %26 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %21, <4 x i16>* %5, align 8
  store <4 x i16> %26, <4 x i16>* %6, align 8
  %27 = load <4 x i16>, <4 x i16>* %5, align 8
  %28 = bitcast <4 x i16> %27 to <8 x i8>
  %29 = load <4 x i16>, <4 x i16>* %6, align 8
  %30 = bitcast <4 x i16> %29 to <8 x i8>
  %31 = call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %27, <4 x i16> %29) #4
  store <4 x i32> %31, <4 x i32>* %7, align 16
  %32 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %32, <4 x i32>* %12, align 16
  %33 = load <4 x i32>, <4 x i32>* %12, align 16
  ret <4 x i32> %33
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmull_high_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %13, align 16
  store <4 x i32> %1, <4 x i32>* %14, align 16
  %15 = load <4 x i32>, <4 x i32>* %13, align 16
  %16 = load <4 x i32>, <4 x i32>* %14, align 16
  store <4 x i32> %15, <4 x i32>* %10, align 16
  store <4 x i32> %16, <4 x i32>* %11, align 16
  %17 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %17, <4 x i32>* %8, align 16
  %18 = load <4 x i32>, <4 x i32>* %8, align 16
  %19 = load <4 x i32>, <4 x i32>* %8, align 16
  %20 = shufflevector <4 x i32> %18, <4 x i32> %19, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %20, <2 x i32>* %9, align 8
  %21 = load <2 x i32>, <2 x i32>* %9, align 8
  %22 = load <4 x i32>, <4 x i32>* %11, align 16
  store <4 x i32> %22, <4 x i32>* %3, align 16
  %23 = load <4 x i32>, <4 x i32>* %3, align 16
  %24 = load <4 x i32>, <4 x i32>* %3, align 16
  %25 = shufflevector <4 x i32> %23, <4 x i32> %24, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %25, <2 x i32>* %4, align 8
  %26 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %21, <2 x i32>* %5, align 8
  store <2 x i32> %26, <2 x i32>* %6, align 8
  %27 = load <2 x i32>, <2 x i32>* %5, align 8
  %28 = bitcast <2 x i32> %27 to <8 x i8>
  %29 = load <2 x i32>, <2 x i32>* %6, align 8
  %30 = bitcast <2 x i32> %29 to <8 x i8>
  %31 = call <2 x i64> @llvm.aarch64.neon.umull.v2i64(<2 x i32> %27, <2 x i32> %29) #4
  store <2 x i64> %31, <2 x i64>* %7, align 16
  %32 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %32, <2 x i64>* %12, align 16
  %33 = load <2 x i64>, <2 x i64>* %12, align 16
  ret <2 x i64> %33
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqdmull_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.sqdmull.v4i32(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqdmull_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i64> @llvm.aarch64.neon.sqdmull.v2i64(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i64> %14 to <16 x i8>
  store <2 x i64> %14, <2 x i64>* %5, align 16
  %16 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqdmull_high_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %13, align 16
  store <8 x i16> %1, <8 x i16>* %14, align 16
  %15 = load <8 x i16>, <8 x i16>* %13, align 16
  %16 = load <8 x i16>, <8 x i16>* %14, align 16
  store <8 x i16> %15, <8 x i16>* %10, align 16
  store <8 x i16> %16, <8 x i16>* %11, align 16
  %17 = load <8 x i16>, <8 x i16>* %10, align 16
  store <8 x i16> %17, <8 x i16>* %8, align 16
  %18 = load <8 x i16>, <8 x i16>* %8, align 16
  %19 = load <8 x i16>, <8 x i16>* %8, align 16
  %20 = shufflevector <8 x i16> %18, <8 x i16> %19, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %20, <4 x i16>* %9, align 8
  %21 = load <4 x i16>, <4 x i16>* %9, align 8
  %22 = load <8 x i16>, <8 x i16>* %11, align 16
  store <8 x i16> %22, <8 x i16>* %3, align 16
  %23 = load <8 x i16>, <8 x i16>* %3, align 16
  %24 = load <8 x i16>, <8 x i16>* %3, align 16
  %25 = shufflevector <8 x i16> %23, <8 x i16> %24, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %25, <4 x i16>* %4, align 8
  %26 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %21, <4 x i16>* %5, align 8
  store <4 x i16> %26, <4 x i16>* %6, align 8
  %27 = load <4 x i16>, <4 x i16>* %5, align 8
  %28 = bitcast <4 x i16> %27 to <8 x i8>
  %29 = load <4 x i16>, <4 x i16>* %6, align 8
  %30 = bitcast <4 x i16> %29 to <8 x i8>
  %31 = call <4 x i32> @llvm.aarch64.neon.sqdmull.v4i32(<4 x i16> %27, <4 x i16> %29) #4
  %32 = bitcast <4 x i32> %31 to <16 x i8>
  store <4 x i32> %31, <4 x i32>* %7, align 16
  %33 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %33, <4 x i32>* %12, align 16
  %34 = load <4 x i32>, <4 x i32>* %12, align 16
  ret <4 x i32> %34
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqdmull_high_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %13, align 16
  store <4 x i32> %1, <4 x i32>* %14, align 16
  %15 = load <4 x i32>, <4 x i32>* %13, align 16
  %16 = load <4 x i32>, <4 x i32>* %14, align 16
  store <4 x i32> %15, <4 x i32>* %10, align 16
  store <4 x i32> %16, <4 x i32>* %11, align 16
  %17 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %17, <4 x i32>* %8, align 16
  %18 = load <4 x i32>, <4 x i32>* %8, align 16
  %19 = load <4 x i32>, <4 x i32>* %8, align 16
  %20 = shufflevector <4 x i32> %18, <4 x i32> %19, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %20, <2 x i32>* %9, align 8
  %21 = load <2 x i32>, <2 x i32>* %9, align 8
  %22 = load <4 x i32>, <4 x i32>* %11, align 16
  store <4 x i32> %22, <4 x i32>* %3, align 16
  %23 = load <4 x i32>, <4 x i32>* %3, align 16
  %24 = load <4 x i32>, <4 x i32>* %3, align 16
  %25 = shufflevector <4 x i32> %23, <4 x i32> %24, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %25, <2 x i32>* %4, align 8
  %26 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %21, <2 x i32>* %5, align 8
  store <2 x i32> %26, <2 x i32>* %6, align 8
  %27 = load <2 x i32>, <2 x i32>* %5, align 8
  %28 = bitcast <2 x i32> %27 to <8 x i8>
  %29 = load <2 x i32>, <2 x i32>* %6, align 8
  %30 = bitcast <2 x i32> %29 to <8 x i8>
  %31 = call <2 x i64> @llvm.aarch64.neon.sqdmull.v2i64(<2 x i32> %27, <2 x i32> %29) #4
  %32 = bitcast <2 x i64> %31 to <16 x i8>
  store <2 x i64> %31, <2 x i64>* %7, align 16
  %33 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %33, <2 x i64>* %12, align 16
  %34 = load <2 x i64>, <2 x i64>* %12, align 16
  ret <2 x i64> %34
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @vqdmullh_s16_wrapper(i16 signext %0, i16 signext %1) #2 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca i32, align 4
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  store i16 %0, i16* %6, align 2
  store i16 %1, i16* %7, align 2
  %8 = load i16, i16* %6, align 2
  %9 = load i16, i16* %7, align 2
  store i16 %8, i16* %3, align 2
  store i16 %9, i16* %4, align 2
  %10 = load i16, i16* %3, align 2
  %11 = load i16, i16* %4, align 2
  %12 = insertelement <4 x i16> undef, i16 %10, i64 0
  %13 = insertelement <4 x i16> undef, i16 %11, i64 0
  %14 = call <4 x i32> @llvm.aarch64.neon.sqdmull.v4i32(<4 x i16> %12, <4 x i16> %13) #4
  %15 = extractelement <4 x i32> %14, i64 0
  store i32 %15, i32* %5, align 4
  %16 = load i32, i32* %5, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vqdmulls_s32_wrapper(i32 %0, i32 %1) #2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  %8 = load i32, i32* %6, align 4
  %9 = load i32, i32* %7, align 4
  store i32 %8, i32* %3, align 4
  store i32 %9, i32* %4, align 4
  %10 = load i32, i32* %3, align 4
  %11 = load i32, i32* %4, align 4
  %12 = call i64 @llvm.aarch64.neon.sqdmulls.scalar(i32 %10, i32 %11) #4
  store i64 %12, i64* %5, align 8
  %13 = load i64, i64* %5, align 8
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vsub_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = sub <8 x i8> %10, %11
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vsubq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = sub <16 x i8> %10, %11
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vsub_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = sub <4 x i16> %10, %11
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vsubq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = sub <8 x i16> %10, %11
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vsub_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = sub <2 x i32> %10, %11
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vsubq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = sub <4 x i32> %10, %11
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vsubq_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = sub <2 x i64> %10, %11
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vsub_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = sub <8 x i8> %10, %11
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vsubq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = sub <16 x i8> %10, %11
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vsub_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = sub <4 x i16> %10, %11
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vsubq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = sub <8 x i16> %10, %11
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vsub_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = sub <2 x i32> %10, %11
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vsubq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = sub <4 x i32> %10, %11
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vsubq_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = sub <2 x i64> %10, %11
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vsub_s64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = sub <1 x i64> %10, %11
  store <1 x i64> %12, <1 x i64>* %5, align 8
  %13 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vsub_u64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = sub <1 x i64> %10, %11
  store <1 x i64> %12, <1 x i64>* %5, align 8
  %13 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vsubd_s64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = sub i64 %10, %11
  store i64 %12, i64* %5, align 8
  %13 = load i64, i64* %5, align 8
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vsubd_u64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = sub i64 %10, %11
  store i64 %12, i64* %5, align 8
  %13 = load i64, i64* %5, align 8
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vsubl_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #1 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i8>, align 8
  %11 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %10, align 8
  store <8 x i8> %1, <8 x i8>* %11, align 8
  %12 = load <8 x i8>, <8 x i8>* %10, align 8
  %13 = load <8 x i8>, <8 x i8>* %11, align 8
  store <8 x i8> %12, <8 x i8>* %7, align 8
  store <8 x i8> %13, <8 x i8>* %8, align 8
  %14 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %14, <8 x i8>* %5, align 8
  %15 = load <8 x i8>, <8 x i8>* %5, align 8
  %16 = sext <8 x i8> %15 to <8 x i16>
  store <8 x i16> %16, <8 x i16>* %6, align 16
  %17 = load <8 x i16>, <8 x i16>* %6, align 16
  %18 = load <8 x i8>, <8 x i8>* %8, align 8
  store <8 x i8> %18, <8 x i8>* %3, align 8
  %19 = load <8 x i8>, <8 x i8>* %3, align 8
  %20 = sext <8 x i8> %19 to <8 x i16>
  store <8 x i16> %20, <8 x i16>* %4, align 16
  %21 = load <8 x i16>, <8 x i16>* %4, align 16
  %22 = sub <8 x i16> %17, %21
  store <8 x i16> %22, <8 x i16>* %9, align 16
  %23 = load <8 x i16>, <8 x i16>* %9, align 16
  ret <8 x i16> %23
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vsubl_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i16>, align 8
  %11 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %10, align 8
  store <4 x i16> %1, <4 x i16>* %11, align 8
  %12 = load <4 x i16>, <4 x i16>* %10, align 8
  %13 = load <4 x i16>, <4 x i16>* %11, align 8
  store <4 x i16> %12, <4 x i16>* %7, align 8
  store <4 x i16> %13, <4 x i16>* %8, align 8
  %14 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %15 = load <4 x i16>, <4 x i16>* %5, align 8
  %16 = bitcast <4 x i16> %15 to <8 x i8>
  %17 = sext <4 x i16> %15 to <4 x i32>
  store <4 x i32> %17, <4 x i32>* %6, align 16
  %18 = load <4 x i32>, <4 x i32>* %6, align 16
  %19 = load <4 x i16>, <4 x i16>* %8, align 8
  store <4 x i16> %19, <4 x i16>* %3, align 8
  %20 = load <4 x i16>, <4 x i16>* %3, align 8
  %21 = bitcast <4 x i16> %20 to <8 x i8>
  %22 = sext <4 x i16> %20 to <4 x i32>
  store <4 x i32> %22, <4 x i32>* %4, align 16
  %23 = load <4 x i32>, <4 x i32>* %4, align 16
  %24 = sub <4 x i32> %18, %23
  store <4 x i32> %24, <4 x i32>* %9, align 16
  %25 = load <4 x i32>, <4 x i32>* %9, align 16
  ret <4 x i32> %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vsubl_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i32>, align 8
  %11 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %10, align 8
  store <2 x i32> %1, <2 x i32>* %11, align 8
  %12 = load <2 x i32>, <2 x i32>* %10, align 8
  %13 = load <2 x i32>, <2 x i32>* %11, align 8
  store <2 x i32> %12, <2 x i32>* %7, align 8
  store <2 x i32> %13, <2 x i32>* %8, align 8
  %14 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %15 = load <2 x i32>, <2 x i32>* %5, align 8
  %16 = bitcast <2 x i32> %15 to <8 x i8>
  %17 = sext <2 x i32> %15 to <2 x i64>
  store <2 x i64> %17, <2 x i64>* %6, align 16
  %18 = load <2 x i64>, <2 x i64>* %6, align 16
  %19 = load <2 x i32>, <2 x i32>* %8, align 8
  store <2 x i32> %19, <2 x i32>* %3, align 8
  %20 = load <2 x i32>, <2 x i32>* %3, align 8
  %21 = bitcast <2 x i32> %20 to <8 x i8>
  %22 = sext <2 x i32> %20 to <2 x i64>
  store <2 x i64> %22, <2 x i64>* %4, align 16
  %23 = load <2 x i64>, <2 x i64>* %4, align 16
  %24 = sub <2 x i64> %18, %23
  store <2 x i64> %24, <2 x i64>* %9, align 16
  %25 = load <2 x i64>, <2 x i64>* %9, align 16
  ret <2 x i64> %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vsubl_high_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <16 x i8>, align 16
  %12 = alloca <8 x i8>, align 8
  %13 = alloca <16 x i8>, align 16
  %14 = alloca <8 x i16>, align 16
  %15 = alloca <8 x i8>, align 8
  %16 = alloca <8 x i8>, align 8
  %17 = alloca <8 x i16>, align 16
  %18 = alloca <8 x i16>, align 16
  %19 = alloca <16 x i8>, align 16
  %20 = alloca <16 x i8>, align 16
  %21 = alloca <8 x i16>, align 16
  %22 = alloca <16 x i8>, align 16
  %23 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %22, align 16
  store <16 x i8> %1, <16 x i8>* %23, align 16
  %24 = load <16 x i8>, <16 x i8>* %22, align 16
  %25 = load <16 x i8>, <16 x i8>* %23, align 16
  store <16 x i8> %24, <16 x i8>* %19, align 16
  store <16 x i8> %25, <16 x i8>* %20, align 16
  %26 = load <16 x i8>, <16 x i8>* %19, align 16
  store <16 x i8> %26, <16 x i8>* %13, align 16
  %27 = load <16 x i8>, <16 x i8>* %13, align 16
  store <16 x i8> %27, <16 x i8>* %11, align 16
  %28 = load <16 x i8>, <16 x i8>* %11, align 16
  %29 = load <16 x i8>, <16 x i8>* %11, align 16
  %30 = shufflevector <16 x i8> %28, <16 x i8> %29, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %30, <8 x i8>* %12, align 8
  %31 = load <8 x i8>, <8 x i8>* %12, align 8
  store <8 x i8> %31, <8 x i8>* %15, align 8
  %32 = load <8 x i8>, <8 x i8>* %15, align 8
  store <8 x i8> %32, <8 x i8>* %16, align 8
  %33 = load <8 x i8>, <8 x i8>* %16, align 8
  %34 = sext <8 x i8> %33 to <8 x i16>
  store <8 x i16> %34, <8 x i16>* %17, align 16
  %35 = load <8 x i16>, <8 x i16>* %17, align 16
  store <8 x i16> %35, <8 x i16>* %18, align 16
  %36 = load <8 x i16>, <8 x i16>* %18, align 16
  store <8 x i16> %36, <8 x i16>* %14, align 16
  %37 = load <8 x i16>, <8 x i16>* %14, align 16
  %38 = load <16 x i8>, <16 x i8>* %20, align 16
  store <16 x i8> %38, <16 x i8>* %5, align 16
  %39 = load <16 x i8>, <16 x i8>* %5, align 16
  store <16 x i8> %39, <16 x i8>* %3, align 16
  %40 = load <16 x i8>, <16 x i8>* %3, align 16
  %41 = load <16 x i8>, <16 x i8>* %3, align 16
  %42 = shufflevector <16 x i8> %40, <16 x i8> %41, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %42, <8 x i8>* %4, align 8
  %43 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %43, <8 x i8>* %7, align 8
  %44 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %44, <8 x i8>* %8, align 8
  %45 = load <8 x i8>, <8 x i8>* %8, align 8
  %46 = sext <8 x i8> %45 to <8 x i16>
  store <8 x i16> %46, <8 x i16>* %9, align 16
  %47 = load <8 x i16>, <8 x i16>* %9, align 16
  store <8 x i16> %47, <8 x i16>* %10, align 16
  %48 = load <8 x i16>, <8 x i16>* %10, align 16
  store <8 x i16> %48, <8 x i16>* %6, align 16
  %49 = load <8 x i16>, <8 x i16>* %6, align 16
  %50 = sub <8 x i16> %37, %49
  store <8 x i16> %50, <8 x i16>* %21, align 16
  %51 = load <8 x i16>, <8 x i16>* %21, align 16
  ret <8 x i16> %51
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vsubl_high_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <4 x i16>, align 8
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <4 x i32>, align 16
  %15 = alloca <4 x i16>, align 8
  %16 = alloca <4 x i16>, align 8
  %17 = alloca <4 x i32>, align 16
  %18 = alloca <4 x i32>, align 16
  %19 = alloca <8 x i16>, align 16
  %20 = alloca <8 x i16>, align 16
  %21 = alloca <4 x i32>, align 16
  %22 = alloca <8 x i16>, align 16
  %23 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %22, align 16
  store <8 x i16> %1, <8 x i16>* %23, align 16
  %24 = load <8 x i16>, <8 x i16>* %22, align 16
  %25 = load <8 x i16>, <8 x i16>* %23, align 16
  store <8 x i16> %24, <8 x i16>* %19, align 16
  store <8 x i16> %25, <8 x i16>* %20, align 16
  %26 = load <8 x i16>, <8 x i16>* %19, align 16
  store <8 x i16> %26, <8 x i16>* %13, align 16
  %27 = load <8 x i16>, <8 x i16>* %13, align 16
  store <8 x i16> %27, <8 x i16>* %11, align 16
  %28 = load <8 x i16>, <8 x i16>* %11, align 16
  %29 = load <8 x i16>, <8 x i16>* %11, align 16
  %30 = shufflevector <8 x i16> %28, <8 x i16> %29, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %30, <4 x i16>* %12, align 8
  %31 = load <4 x i16>, <4 x i16>* %12, align 8
  store <4 x i16> %31, <4 x i16>* %15, align 8
  %32 = load <4 x i16>, <4 x i16>* %15, align 8
  store <4 x i16> %32, <4 x i16>* %16, align 8
  %33 = load <4 x i16>, <4 x i16>* %16, align 8
  %34 = bitcast <4 x i16> %33 to <8 x i8>
  %35 = sext <4 x i16> %33 to <4 x i32>
  store <4 x i32> %35, <4 x i32>* %17, align 16
  %36 = load <4 x i32>, <4 x i32>* %17, align 16
  store <4 x i32> %36, <4 x i32>* %18, align 16
  %37 = load <4 x i32>, <4 x i32>* %18, align 16
  store <4 x i32> %37, <4 x i32>* %14, align 16
  %38 = load <4 x i32>, <4 x i32>* %14, align 16
  %39 = load <8 x i16>, <8 x i16>* %20, align 16
  store <8 x i16> %39, <8 x i16>* %5, align 16
  %40 = load <8 x i16>, <8 x i16>* %5, align 16
  store <8 x i16> %40, <8 x i16>* %3, align 16
  %41 = load <8 x i16>, <8 x i16>* %3, align 16
  %42 = load <8 x i16>, <8 x i16>* %3, align 16
  %43 = shufflevector <8 x i16> %41, <8 x i16> %42, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %43, <4 x i16>* %4, align 8
  %44 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %44, <4 x i16>* %7, align 8
  %45 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %45, <4 x i16>* %8, align 8
  %46 = load <4 x i16>, <4 x i16>* %8, align 8
  %47 = bitcast <4 x i16> %46 to <8 x i8>
  %48 = sext <4 x i16> %46 to <4 x i32>
  store <4 x i32> %48, <4 x i32>* %9, align 16
  %49 = load <4 x i32>, <4 x i32>* %9, align 16
  store <4 x i32> %49, <4 x i32>* %10, align 16
  %50 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %50, <4 x i32>* %6, align 16
  %51 = load <4 x i32>, <4 x i32>* %6, align 16
  %52 = sub <4 x i32> %38, %51
  store <4 x i32> %52, <4 x i32>* %21, align 16
  %53 = load <4 x i32>, <4 x i32>* %21, align 16
  ret <4 x i32> %53
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vsubl_high_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <2 x i32>, align 8
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <2 x i64>, align 16
  %15 = alloca <2 x i32>, align 8
  %16 = alloca <2 x i32>, align 8
  %17 = alloca <2 x i64>, align 16
  %18 = alloca <2 x i64>, align 16
  %19 = alloca <4 x i32>, align 16
  %20 = alloca <4 x i32>, align 16
  %21 = alloca <2 x i64>, align 16
  %22 = alloca <4 x i32>, align 16
  %23 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %22, align 16
  store <4 x i32> %1, <4 x i32>* %23, align 16
  %24 = load <4 x i32>, <4 x i32>* %22, align 16
  %25 = load <4 x i32>, <4 x i32>* %23, align 16
  store <4 x i32> %24, <4 x i32>* %19, align 16
  store <4 x i32> %25, <4 x i32>* %20, align 16
  %26 = load <4 x i32>, <4 x i32>* %19, align 16
  store <4 x i32> %26, <4 x i32>* %13, align 16
  %27 = load <4 x i32>, <4 x i32>* %13, align 16
  store <4 x i32> %27, <4 x i32>* %11, align 16
  %28 = load <4 x i32>, <4 x i32>* %11, align 16
  %29 = load <4 x i32>, <4 x i32>* %11, align 16
  %30 = shufflevector <4 x i32> %28, <4 x i32> %29, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %30, <2 x i32>* %12, align 8
  %31 = load <2 x i32>, <2 x i32>* %12, align 8
  store <2 x i32> %31, <2 x i32>* %15, align 8
  %32 = load <2 x i32>, <2 x i32>* %15, align 8
  store <2 x i32> %32, <2 x i32>* %16, align 8
  %33 = load <2 x i32>, <2 x i32>* %16, align 8
  %34 = bitcast <2 x i32> %33 to <8 x i8>
  %35 = sext <2 x i32> %33 to <2 x i64>
  store <2 x i64> %35, <2 x i64>* %17, align 16
  %36 = load <2 x i64>, <2 x i64>* %17, align 16
  store <2 x i64> %36, <2 x i64>* %18, align 16
  %37 = load <2 x i64>, <2 x i64>* %18, align 16
  store <2 x i64> %37, <2 x i64>* %14, align 16
  %38 = load <2 x i64>, <2 x i64>* %14, align 16
  %39 = load <4 x i32>, <4 x i32>* %20, align 16
  store <4 x i32> %39, <4 x i32>* %5, align 16
  %40 = load <4 x i32>, <4 x i32>* %5, align 16
  store <4 x i32> %40, <4 x i32>* %3, align 16
  %41 = load <4 x i32>, <4 x i32>* %3, align 16
  %42 = load <4 x i32>, <4 x i32>* %3, align 16
  %43 = shufflevector <4 x i32> %41, <4 x i32> %42, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %43, <2 x i32>* %4, align 8
  %44 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %44, <2 x i32>* %7, align 8
  %45 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %45, <2 x i32>* %8, align 8
  %46 = load <2 x i32>, <2 x i32>* %8, align 8
  %47 = bitcast <2 x i32> %46 to <8 x i8>
  %48 = sext <2 x i32> %46 to <2 x i64>
  store <2 x i64> %48, <2 x i64>* %9, align 16
  %49 = load <2 x i64>, <2 x i64>* %9, align 16
  store <2 x i64> %49, <2 x i64>* %10, align 16
  %50 = load <2 x i64>, <2 x i64>* %10, align 16
  store <2 x i64> %50, <2 x i64>* %6, align 16
  %51 = load <2 x i64>, <2 x i64>* %6, align 16
  %52 = sub <2 x i64> %38, %51
  store <2 x i64> %52, <2 x i64>* %21, align 16
  %53 = load <2 x i64>, <2 x i64>* %21, align 16
  ret <2 x i64> %53
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vsubl_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #1 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i8>, align 8
  %11 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %10, align 8
  store <8 x i8> %1, <8 x i8>* %11, align 8
  %12 = load <8 x i8>, <8 x i8>* %10, align 8
  %13 = load <8 x i8>, <8 x i8>* %11, align 8
  store <8 x i8> %12, <8 x i8>* %7, align 8
  store <8 x i8> %13, <8 x i8>* %8, align 8
  %14 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %14, <8 x i8>* %5, align 8
  %15 = load <8 x i8>, <8 x i8>* %5, align 8
  %16 = zext <8 x i8> %15 to <8 x i16>
  store <8 x i16> %16, <8 x i16>* %6, align 16
  %17 = load <8 x i16>, <8 x i16>* %6, align 16
  %18 = load <8 x i8>, <8 x i8>* %8, align 8
  store <8 x i8> %18, <8 x i8>* %3, align 8
  %19 = load <8 x i8>, <8 x i8>* %3, align 8
  %20 = zext <8 x i8> %19 to <8 x i16>
  store <8 x i16> %20, <8 x i16>* %4, align 16
  %21 = load <8 x i16>, <8 x i16>* %4, align 16
  %22 = sub <8 x i16> %17, %21
  store <8 x i16> %22, <8 x i16>* %9, align 16
  %23 = load <8 x i16>, <8 x i16>* %9, align 16
  ret <8 x i16> %23
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vsubl_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i16>, align 8
  %11 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %10, align 8
  store <4 x i16> %1, <4 x i16>* %11, align 8
  %12 = load <4 x i16>, <4 x i16>* %10, align 8
  %13 = load <4 x i16>, <4 x i16>* %11, align 8
  store <4 x i16> %12, <4 x i16>* %7, align 8
  store <4 x i16> %13, <4 x i16>* %8, align 8
  %14 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %15 = load <4 x i16>, <4 x i16>* %5, align 8
  %16 = bitcast <4 x i16> %15 to <8 x i8>
  %17 = zext <4 x i16> %15 to <4 x i32>
  store <4 x i32> %17, <4 x i32>* %6, align 16
  %18 = load <4 x i32>, <4 x i32>* %6, align 16
  %19 = load <4 x i16>, <4 x i16>* %8, align 8
  store <4 x i16> %19, <4 x i16>* %3, align 8
  %20 = load <4 x i16>, <4 x i16>* %3, align 8
  %21 = bitcast <4 x i16> %20 to <8 x i8>
  %22 = zext <4 x i16> %20 to <4 x i32>
  store <4 x i32> %22, <4 x i32>* %4, align 16
  %23 = load <4 x i32>, <4 x i32>* %4, align 16
  %24 = sub <4 x i32> %18, %23
  store <4 x i32> %24, <4 x i32>* %9, align 16
  %25 = load <4 x i32>, <4 x i32>* %9, align 16
  ret <4 x i32> %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vsubl_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i32>, align 8
  %11 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %10, align 8
  store <2 x i32> %1, <2 x i32>* %11, align 8
  %12 = load <2 x i32>, <2 x i32>* %10, align 8
  %13 = load <2 x i32>, <2 x i32>* %11, align 8
  store <2 x i32> %12, <2 x i32>* %7, align 8
  store <2 x i32> %13, <2 x i32>* %8, align 8
  %14 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %15 = load <2 x i32>, <2 x i32>* %5, align 8
  %16 = bitcast <2 x i32> %15 to <8 x i8>
  %17 = zext <2 x i32> %15 to <2 x i64>
  store <2 x i64> %17, <2 x i64>* %6, align 16
  %18 = load <2 x i64>, <2 x i64>* %6, align 16
  %19 = load <2 x i32>, <2 x i32>* %8, align 8
  store <2 x i32> %19, <2 x i32>* %3, align 8
  %20 = load <2 x i32>, <2 x i32>* %3, align 8
  %21 = bitcast <2 x i32> %20 to <8 x i8>
  %22 = zext <2 x i32> %20 to <2 x i64>
  store <2 x i64> %22, <2 x i64>* %4, align 16
  %23 = load <2 x i64>, <2 x i64>* %4, align 16
  %24 = sub <2 x i64> %18, %23
  store <2 x i64> %24, <2 x i64>* %9, align 16
  %25 = load <2 x i64>, <2 x i64>* %9, align 16
  ret <2 x i64> %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vsubl_high_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <16 x i8>, align 16
  %12 = alloca <8 x i8>, align 8
  %13 = alloca <16 x i8>, align 16
  %14 = alloca <8 x i16>, align 16
  %15 = alloca <8 x i8>, align 8
  %16 = alloca <8 x i8>, align 8
  %17 = alloca <8 x i16>, align 16
  %18 = alloca <8 x i16>, align 16
  %19 = alloca <16 x i8>, align 16
  %20 = alloca <16 x i8>, align 16
  %21 = alloca <8 x i16>, align 16
  %22 = alloca <16 x i8>, align 16
  %23 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %22, align 16
  store <16 x i8> %1, <16 x i8>* %23, align 16
  %24 = load <16 x i8>, <16 x i8>* %22, align 16
  %25 = load <16 x i8>, <16 x i8>* %23, align 16
  store <16 x i8> %24, <16 x i8>* %19, align 16
  store <16 x i8> %25, <16 x i8>* %20, align 16
  %26 = load <16 x i8>, <16 x i8>* %19, align 16
  store <16 x i8> %26, <16 x i8>* %13, align 16
  %27 = load <16 x i8>, <16 x i8>* %13, align 16
  store <16 x i8> %27, <16 x i8>* %11, align 16
  %28 = load <16 x i8>, <16 x i8>* %11, align 16
  %29 = load <16 x i8>, <16 x i8>* %11, align 16
  %30 = shufflevector <16 x i8> %28, <16 x i8> %29, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %30, <8 x i8>* %12, align 8
  %31 = load <8 x i8>, <8 x i8>* %12, align 8
  store <8 x i8> %31, <8 x i8>* %15, align 8
  %32 = load <8 x i8>, <8 x i8>* %15, align 8
  store <8 x i8> %32, <8 x i8>* %16, align 8
  %33 = load <8 x i8>, <8 x i8>* %16, align 8
  %34 = zext <8 x i8> %33 to <8 x i16>
  store <8 x i16> %34, <8 x i16>* %17, align 16
  %35 = load <8 x i16>, <8 x i16>* %17, align 16
  store <8 x i16> %35, <8 x i16>* %18, align 16
  %36 = load <8 x i16>, <8 x i16>* %18, align 16
  store <8 x i16> %36, <8 x i16>* %14, align 16
  %37 = load <8 x i16>, <8 x i16>* %14, align 16
  %38 = load <16 x i8>, <16 x i8>* %20, align 16
  store <16 x i8> %38, <16 x i8>* %5, align 16
  %39 = load <16 x i8>, <16 x i8>* %5, align 16
  store <16 x i8> %39, <16 x i8>* %3, align 16
  %40 = load <16 x i8>, <16 x i8>* %3, align 16
  %41 = load <16 x i8>, <16 x i8>* %3, align 16
  %42 = shufflevector <16 x i8> %40, <16 x i8> %41, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %42, <8 x i8>* %4, align 8
  %43 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %43, <8 x i8>* %7, align 8
  %44 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %44, <8 x i8>* %8, align 8
  %45 = load <8 x i8>, <8 x i8>* %8, align 8
  %46 = zext <8 x i8> %45 to <8 x i16>
  store <8 x i16> %46, <8 x i16>* %9, align 16
  %47 = load <8 x i16>, <8 x i16>* %9, align 16
  store <8 x i16> %47, <8 x i16>* %10, align 16
  %48 = load <8 x i16>, <8 x i16>* %10, align 16
  store <8 x i16> %48, <8 x i16>* %6, align 16
  %49 = load <8 x i16>, <8 x i16>* %6, align 16
  %50 = sub <8 x i16> %37, %49
  store <8 x i16> %50, <8 x i16>* %21, align 16
  %51 = load <8 x i16>, <8 x i16>* %21, align 16
  ret <8 x i16> %51
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vsubl_high_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <4 x i16>, align 8
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <4 x i32>, align 16
  %15 = alloca <4 x i16>, align 8
  %16 = alloca <4 x i16>, align 8
  %17 = alloca <4 x i32>, align 16
  %18 = alloca <4 x i32>, align 16
  %19 = alloca <8 x i16>, align 16
  %20 = alloca <8 x i16>, align 16
  %21 = alloca <4 x i32>, align 16
  %22 = alloca <8 x i16>, align 16
  %23 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %22, align 16
  store <8 x i16> %1, <8 x i16>* %23, align 16
  %24 = load <8 x i16>, <8 x i16>* %22, align 16
  %25 = load <8 x i16>, <8 x i16>* %23, align 16
  store <8 x i16> %24, <8 x i16>* %19, align 16
  store <8 x i16> %25, <8 x i16>* %20, align 16
  %26 = load <8 x i16>, <8 x i16>* %19, align 16
  store <8 x i16> %26, <8 x i16>* %13, align 16
  %27 = load <8 x i16>, <8 x i16>* %13, align 16
  store <8 x i16> %27, <8 x i16>* %11, align 16
  %28 = load <8 x i16>, <8 x i16>* %11, align 16
  %29 = load <8 x i16>, <8 x i16>* %11, align 16
  %30 = shufflevector <8 x i16> %28, <8 x i16> %29, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %30, <4 x i16>* %12, align 8
  %31 = load <4 x i16>, <4 x i16>* %12, align 8
  store <4 x i16> %31, <4 x i16>* %15, align 8
  %32 = load <4 x i16>, <4 x i16>* %15, align 8
  store <4 x i16> %32, <4 x i16>* %16, align 8
  %33 = load <4 x i16>, <4 x i16>* %16, align 8
  %34 = bitcast <4 x i16> %33 to <8 x i8>
  %35 = zext <4 x i16> %33 to <4 x i32>
  store <4 x i32> %35, <4 x i32>* %17, align 16
  %36 = load <4 x i32>, <4 x i32>* %17, align 16
  store <4 x i32> %36, <4 x i32>* %18, align 16
  %37 = load <4 x i32>, <4 x i32>* %18, align 16
  store <4 x i32> %37, <4 x i32>* %14, align 16
  %38 = load <4 x i32>, <4 x i32>* %14, align 16
  %39 = load <8 x i16>, <8 x i16>* %20, align 16
  store <8 x i16> %39, <8 x i16>* %5, align 16
  %40 = load <8 x i16>, <8 x i16>* %5, align 16
  store <8 x i16> %40, <8 x i16>* %3, align 16
  %41 = load <8 x i16>, <8 x i16>* %3, align 16
  %42 = load <8 x i16>, <8 x i16>* %3, align 16
  %43 = shufflevector <8 x i16> %41, <8 x i16> %42, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %43, <4 x i16>* %4, align 8
  %44 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %44, <4 x i16>* %7, align 8
  %45 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %45, <4 x i16>* %8, align 8
  %46 = load <4 x i16>, <4 x i16>* %8, align 8
  %47 = bitcast <4 x i16> %46 to <8 x i8>
  %48 = zext <4 x i16> %46 to <4 x i32>
  store <4 x i32> %48, <4 x i32>* %9, align 16
  %49 = load <4 x i32>, <4 x i32>* %9, align 16
  store <4 x i32> %49, <4 x i32>* %10, align 16
  %50 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %50, <4 x i32>* %6, align 16
  %51 = load <4 x i32>, <4 x i32>* %6, align 16
  %52 = sub <4 x i32> %38, %51
  store <4 x i32> %52, <4 x i32>* %21, align 16
  %53 = load <4 x i32>, <4 x i32>* %21, align 16
  ret <4 x i32> %53
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vsubl_high_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <2 x i32>, align 8
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <2 x i64>, align 16
  %15 = alloca <2 x i32>, align 8
  %16 = alloca <2 x i32>, align 8
  %17 = alloca <2 x i64>, align 16
  %18 = alloca <2 x i64>, align 16
  %19 = alloca <4 x i32>, align 16
  %20 = alloca <4 x i32>, align 16
  %21 = alloca <2 x i64>, align 16
  %22 = alloca <4 x i32>, align 16
  %23 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %22, align 16
  store <4 x i32> %1, <4 x i32>* %23, align 16
  %24 = load <4 x i32>, <4 x i32>* %22, align 16
  %25 = load <4 x i32>, <4 x i32>* %23, align 16
  store <4 x i32> %24, <4 x i32>* %19, align 16
  store <4 x i32> %25, <4 x i32>* %20, align 16
  %26 = load <4 x i32>, <4 x i32>* %19, align 16
  store <4 x i32> %26, <4 x i32>* %13, align 16
  %27 = load <4 x i32>, <4 x i32>* %13, align 16
  store <4 x i32> %27, <4 x i32>* %11, align 16
  %28 = load <4 x i32>, <4 x i32>* %11, align 16
  %29 = load <4 x i32>, <4 x i32>* %11, align 16
  %30 = shufflevector <4 x i32> %28, <4 x i32> %29, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %30, <2 x i32>* %12, align 8
  %31 = load <2 x i32>, <2 x i32>* %12, align 8
  store <2 x i32> %31, <2 x i32>* %15, align 8
  %32 = load <2 x i32>, <2 x i32>* %15, align 8
  store <2 x i32> %32, <2 x i32>* %16, align 8
  %33 = load <2 x i32>, <2 x i32>* %16, align 8
  %34 = bitcast <2 x i32> %33 to <8 x i8>
  %35 = zext <2 x i32> %33 to <2 x i64>
  store <2 x i64> %35, <2 x i64>* %17, align 16
  %36 = load <2 x i64>, <2 x i64>* %17, align 16
  store <2 x i64> %36, <2 x i64>* %18, align 16
  %37 = load <2 x i64>, <2 x i64>* %18, align 16
  store <2 x i64> %37, <2 x i64>* %14, align 16
  %38 = load <2 x i64>, <2 x i64>* %14, align 16
  %39 = load <4 x i32>, <4 x i32>* %20, align 16
  store <4 x i32> %39, <4 x i32>* %5, align 16
  %40 = load <4 x i32>, <4 x i32>* %5, align 16
  store <4 x i32> %40, <4 x i32>* %3, align 16
  %41 = load <4 x i32>, <4 x i32>* %3, align 16
  %42 = load <4 x i32>, <4 x i32>* %3, align 16
  %43 = shufflevector <4 x i32> %41, <4 x i32> %42, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %43, <2 x i32>* %4, align 8
  %44 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %44, <2 x i32>* %7, align 8
  %45 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %45, <2 x i32>* %8, align 8
  %46 = load <2 x i32>, <2 x i32>* %8, align 8
  %47 = bitcast <2 x i32> %46 to <8 x i8>
  %48 = zext <2 x i32> %46 to <2 x i64>
  store <2 x i64> %48, <2 x i64>* %9, align 16
  %49 = load <2 x i64>, <2 x i64>* %9, align 16
  store <2 x i64> %49, <2 x i64>* %10, align 16
  %50 = load <2 x i64>, <2 x i64>* %10, align 16
  store <2 x i64> %50, <2 x i64>* %6, align 16
  %51 = load <2 x i64>, <2 x i64>* %6, align 16
  %52 = sub <2 x i64> %38, %51
  store <2 x i64> %52, <2 x i64>* %21, align 16
  %53 = load <2 x i64>, <2 x i64>* %21, align 16
  ret <2 x i64> %53
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vsubw_s8_wrapper(<8 x i16> %0, <8 x i8> %1) #1 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i8>, align 8
  store <8 x i16> %0, <8 x i16>* %8, align 16
  store <8 x i8> %1, <8 x i8>* %9, align 8
  %10 = load <8 x i16>, <8 x i16>* %8, align 16
  %11 = load <8 x i8>, <8 x i8>* %9, align 8
  store <8 x i16> %10, <8 x i16>* %5, align 16
  store <8 x i8> %11, <8 x i8>* %6, align 8
  %12 = load <8 x i16>, <8 x i16>* %5, align 16
  %13 = load <8 x i8>, <8 x i8>* %6, align 8
  store <8 x i8> %13, <8 x i8>* %3, align 8
  %14 = load <8 x i8>, <8 x i8>* %3, align 8
  %15 = sext <8 x i8> %14 to <8 x i16>
  store <8 x i16> %15, <8 x i16>* %4, align 16
  %16 = load <8 x i16>, <8 x i16>* %4, align 16
  %17 = sub <8 x i16> %12, %16
  store <8 x i16> %17, <8 x i16>* %7, align 16
  %18 = load <8 x i16>, <8 x i16>* %7, align 16
  ret <8 x i16> %18
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vsubw_s16_wrapper(<4 x i32> %0, <4 x i16> %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  store <4 x i32> %0, <4 x i32>* %8, align 16
  store <4 x i16> %1, <4 x i16>* %9, align 8
  %10 = load <4 x i32>, <4 x i32>* %8, align 16
  %11 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i32> %10, <4 x i32>* %5, align 16
  store <4 x i16> %11, <4 x i16>* %6, align 8
  %12 = load <4 x i32>, <4 x i32>* %5, align 16
  %13 = load <4 x i16>, <4 x i16>* %6, align 8
  store <4 x i16> %13, <4 x i16>* %3, align 8
  %14 = load <4 x i16>, <4 x i16>* %3, align 8
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  %16 = sext <4 x i16> %14 to <4 x i32>
  store <4 x i32> %16, <4 x i32>* %4, align 16
  %17 = load <4 x i32>, <4 x i32>* %4, align 16
  %18 = sub <4 x i32> %12, %17
  store <4 x i32> %18, <4 x i32>* %7, align 16
  %19 = load <4 x i32>, <4 x i32>* %7, align 16
  ret <4 x i32> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vsubw_s32_wrapper(<2 x i64> %0, <2 x i32> %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  store <2 x i64> %0, <2 x i64>* %8, align 16
  store <2 x i32> %1, <2 x i32>* %9, align 8
  %10 = load <2 x i64>, <2 x i64>* %8, align 16
  %11 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i64> %10, <2 x i64>* %5, align 16
  store <2 x i32> %11, <2 x i32>* %6, align 8
  %12 = load <2 x i64>, <2 x i64>* %5, align 16
  %13 = load <2 x i32>, <2 x i32>* %6, align 8
  store <2 x i32> %13, <2 x i32>* %3, align 8
  %14 = load <2 x i32>, <2 x i32>* %3, align 8
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  %16 = sext <2 x i32> %14 to <2 x i64>
  store <2 x i64> %16, <2 x i64>* %4, align 16
  %17 = load <2 x i64>, <2 x i64>* %4, align 16
  %18 = sub <2 x i64> %12, %17
  store <2 x i64> %18, <2 x i64>* %7, align 16
  %19 = load <2 x i64>, <2 x i64>* %7, align 16
  ret <2 x i64> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vsubw_high_s8_wrapper(<8 x i16> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <16 x i8>, align 16
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <8 x i16>, align 16
  %15 = alloca <16 x i8>, align 16
  store <8 x i16> %0, <8 x i16>* %14, align 16
  store <16 x i8> %1, <16 x i8>* %15, align 16
  %16 = load <8 x i16>, <8 x i16>* %14, align 16
  %17 = load <16 x i8>, <16 x i8>* %15, align 16
  store <8 x i16> %16, <8 x i16>* %11, align 16
  store <16 x i8> %17, <16 x i8>* %12, align 16
  %18 = load <8 x i16>, <8 x i16>* %11, align 16
  %19 = load <16 x i8>, <16 x i8>* %12, align 16
  store <16 x i8> %19, <16 x i8>* %5, align 16
  %20 = load <16 x i8>, <16 x i8>* %5, align 16
  store <16 x i8> %20, <16 x i8>* %3, align 16
  %21 = load <16 x i8>, <16 x i8>* %3, align 16
  %22 = load <16 x i8>, <16 x i8>* %3, align 16
  %23 = shufflevector <16 x i8> %21, <16 x i8> %22, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %23, <8 x i8>* %4, align 8
  %24 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %24, <8 x i8>* %7, align 8
  %25 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %25, <8 x i8>* %8, align 8
  %26 = load <8 x i8>, <8 x i8>* %8, align 8
  %27 = sext <8 x i8> %26 to <8 x i16>
  store <8 x i16> %27, <8 x i16>* %9, align 16
  %28 = load <8 x i16>, <8 x i16>* %9, align 16
  store <8 x i16> %28, <8 x i16>* %10, align 16
  %29 = load <8 x i16>, <8 x i16>* %10, align 16
  store <8 x i16> %29, <8 x i16>* %6, align 16
  %30 = load <8 x i16>, <8 x i16>* %6, align 16
  %31 = sub <8 x i16> %18, %30
  store <8 x i16> %31, <8 x i16>* %13, align 16
  %32 = load <8 x i16>, <8 x i16>* %13, align 16
  ret <8 x i16> %32
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vsubw_high_s16_wrapper(<4 x i32> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <4 x i32>, align 16
  %15 = alloca <8 x i16>, align 16
  store <4 x i32> %0, <4 x i32>* %14, align 16
  store <8 x i16> %1, <8 x i16>* %15, align 16
  %16 = load <4 x i32>, <4 x i32>* %14, align 16
  %17 = load <8 x i16>, <8 x i16>* %15, align 16
  store <4 x i32> %16, <4 x i32>* %11, align 16
  store <8 x i16> %17, <8 x i16>* %12, align 16
  %18 = load <4 x i32>, <4 x i32>* %11, align 16
  %19 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i16> %19, <8 x i16>* %5, align 16
  %20 = load <8 x i16>, <8 x i16>* %5, align 16
  store <8 x i16> %20, <8 x i16>* %3, align 16
  %21 = load <8 x i16>, <8 x i16>* %3, align 16
  %22 = load <8 x i16>, <8 x i16>* %3, align 16
  %23 = shufflevector <8 x i16> %21, <8 x i16> %22, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %23, <4 x i16>* %4, align 8
  %24 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %24, <4 x i16>* %7, align 8
  %25 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %25, <4 x i16>* %8, align 8
  %26 = load <4 x i16>, <4 x i16>* %8, align 8
  %27 = bitcast <4 x i16> %26 to <8 x i8>
  %28 = sext <4 x i16> %26 to <4 x i32>
  store <4 x i32> %28, <4 x i32>* %9, align 16
  %29 = load <4 x i32>, <4 x i32>* %9, align 16
  store <4 x i32> %29, <4 x i32>* %10, align 16
  %30 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %30, <4 x i32>* %6, align 16
  %31 = load <4 x i32>, <4 x i32>* %6, align 16
  %32 = sub <4 x i32> %18, %31
  store <4 x i32> %32, <4 x i32>* %13, align 16
  %33 = load <4 x i32>, <4 x i32>* %13, align 16
  ret <4 x i32> %33
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vsubw_high_s32_wrapper(<2 x i64> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <2 x i64>, align 16
  %14 = alloca <2 x i64>, align 16
  %15 = alloca <4 x i32>, align 16
  store <2 x i64> %0, <2 x i64>* %14, align 16
  store <4 x i32> %1, <4 x i32>* %15, align 16
  %16 = load <2 x i64>, <2 x i64>* %14, align 16
  %17 = load <4 x i32>, <4 x i32>* %15, align 16
  store <2 x i64> %16, <2 x i64>* %11, align 16
  store <4 x i32> %17, <4 x i32>* %12, align 16
  %18 = load <2 x i64>, <2 x i64>* %11, align 16
  %19 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i32> %19, <4 x i32>* %5, align 16
  %20 = load <4 x i32>, <4 x i32>* %5, align 16
  store <4 x i32> %20, <4 x i32>* %3, align 16
  %21 = load <4 x i32>, <4 x i32>* %3, align 16
  %22 = load <4 x i32>, <4 x i32>* %3, align 16
  %23 = shufflevector <4 x i32> %21, <4 x i32> %22, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %23, <2 x i32>* %4, align 8
  %24 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %24, <2 x i32>* %7, align 8
  %25 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %25, <2 x i32>* %8, align 8
  %26 = load <2 x i32>, <2 x i32>* %8, align 8
  %27 = bitcast <2 x i32> %26 to <8 x i8>
  %28 = sext <2 x i32> %26 to <2 x i64>
  store <2 x i64> %28, <2 x i64>* %9, align 16
  %29 = load <2 x i64>, <2 x i64>* %9, align 16
  store <2 x i64> %29, <2 x i64>* %10, align 16
  %30 = load <2 x i64>, <2 x i64>* %10, align 16
  store <2 x i64> %30, <2 x i64>* %6, align 16
  %31 = load <2 x i64>, <2 x i64>* %6, align 16
  %32 = sub <2 x i64> %18, %31
  store <2 x i64> %32, <2 x i64>* %13, align 16
  %33 = load <2 x i64>, <2 x i64>* %13, align 16
  ret <2 x i64> %33
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vsubw_u8_wrapper(<8 x i16> %0, <8 x i8> %1) #1 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i8>, align 8
  store <8 x i16> %0, <8 x i16>* %8, align 16
  store <8 x i8> %1, <8 x i8>* %9, align 8
  %10 = load <8 x i16>, <8 x i16>* %8, align 16
  %11 = load <8 x i8>, <8 x i8>* %9, align 8
  store <8 x i16> %10, <8 x i16>* %5, align 16
  store <8 x i8> %11, <8 x i8>* %6, align 8
  %12 = load <8 x i16>, <8 x i16>* %5, align 16
  %13 = load <8 x i8>, <8 x i8>* %6, align 8
  store <8 x i8> %13, <8 x i8>* %3, align 8
  %14 = load <8 x i8>, <8 x i8>* %3, align 8
  %15 = zext <8 x i8> %14 to <8 x i16>
  store <8 x i16> %15, <8 x i16>* %4, align 16
  %16 = load <8 x i16>, <8 x i16>* %4, align 16
  %17 = sub <8 x i16> %12, %16
  store <8 x i16> %17, <8 x i16>* %7, align 16
  %18 = load <8 x i16>, <8 x i16>* %7, align 16
  ret <8 x i16> %18
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vsubw_u16_wrapper(<4 x i32> %0, <4 x i16> %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  store <4 x i32> %0, <4 x i32>* %8, align 16
  store <4 x i16> %1, <4 x i16>* %9, align 8
  %10 = load <4 x i32>, <4 x i32>* %8, align 16
  %11 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i32> %10, <4 x i32>* %5, align 16
  store <4 x i16> %11, <4 x i16>* %6, align 8
  %12 = load <4 x i32>, <4 x i32>* %5, align 16
  %13 = load <4 x i16>, <4 x i16>* %6, align 8
  store <4 x i16> %13, <4 x i16>* %3, align 8
  %14 = load <4 x i16>, <4 x i16>* %3, align 8
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  %16 = zext <4 x i16> %14 to <4 x i32>
  store <4 x i32> %16, <4 x i32>* %4, align 16
  %17 = load <4 x i32>, <4 x i32>* %4, align 16
  %18 = sub <4 x i32> %12, %17
  store <4 x i32> %18, <4 x i32>* %7, align 16
  %19 = load <4 x i32>, <4 x i32>* %7, align 16
  ret <4 x i32> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vsubw_u32_wrapper(<2 x i64> %0, <2 x i32> %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  store <2 x i64> %0, <2 x i64>* %8, align 16
  store <2 x i32> %1, <2 x i32>* %9, align 8
  %10 = load <2 x i64>, <2 x i64>* %8, align 16
  %11 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i64> %10, <2 x i64>* %5, align 16
  store <2 x i32> %11, <2 x i32>* %6, align 8
  %12 = load <2 x i64>, <2 x i64>* %5, align 16
  %13 = load <2 x i32>, <2 x i32>* %6, align 8
  store <2 x i32> %13, <2 x i32>* %3, align 8
  %14 = load <2 x i32>, <2 x i32>* %3, align 8
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  %16 = zext <2 x i32> %14 to <2 x i64>
  store <2 x i64> %16, <2 x i64>* %4, align 16
  %17 = load <2 x i64>, <2 x i64>* %4, align 16
  %18 = sub <2 x i64> %12, %17
  store <2 x i64> %18, <2 x i64>* %7, align 16
  %19 = load <2 x i64>, <2 x i64>* %7, align 16
  ret <2 x i64> %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vsubw_high_u8_wrapper(<8 x i16> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <16 x i8>, align 16
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <8 x i16>, align 16
  %15 = alloca <16 x i8>, align 16
  store <8 x i16> %0, <8 x i16>* %14, align 16
  store <16 x i8> %1, <16 x i8>* %15, align 16
  %16 = load <8 x i16>, <8 x i16>* %14, align 16
  %17 = load <16 x i8>, <16 x i8>* %15, align 16
  store <8 x i16> %16, <8 x i16>* %11, align 16
  store <16 x i8> %17, <16 x i8>* %12, align 16
  %18 = load <8 x i16>, <8 x i16>* %11, align 16
  %19 = load <16 x i8>, <16 x i8>* %12, align 16
  store <16 x i8> %19, <16 x i8>* %5, align 16
  %20 = load <16 x i8>, <16 x i8>* %5, align 16
  store <16 x i8> %20, <16 x i8>* %3, align 16
  %21 = load <16 x i8>, <16 x i8>* %3, align 16
  %22 = load <16 x i8>, <16 x i8>* %3, align 16
  %23 = shufflevector <16 x i8> %21, <16 x i8> %22, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %23, <8 x i8>* %4, align 8
  %24 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %24, <8 x i8>* %7, align 8
  %25 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %25, <8 x i8>* %8, align 8
  %26 = load <8 x i8>, <8 x i8>* %8, align 8
  %27 = zext <8 x i8> %26 to <8 x i16>
  store <8 x i16> %27, <8 x i16>* %9, align 16
  %28 = load <8 x i16>, <8 x i16>* %9, align 16
  store <8 x i16> %28, <8 x i16>* %10, align 16
  %29 = load <8 x i16>, <8 x i16>* %10, align 16
  store <8 x i16> %29, <8 x i16>* %6, align 16
  %30 = load <8 x i16>, <8 x i16>* %6, align 16
  %31 = sub <8 x i16> %18, %30
  store <8 x i16> %31, <8 x i16>* %13, align 16
  %32 = load <8 x i16>, <8 x i16>* %13, align 16
  ret <8 x i16> %32
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vsubw_high_u16_wrapper(<4 x i32> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <4 x i32>, align 16
  %15 = alloca <8 x i16>, align 16
  store <4 x i32> %0, <4 x i32>* %14, align 16
  store <8 x i16> %1, <8 x i16>* %15, align 16
  %16 = load <4 x i32>, <4 x i32>* %14, align 16
  %17 = load <8 x i16>, <8 x i16>* %15, align 16
  store <4 x i32> %16, <4 x i32>* %11, align 16
  store <8 x i16> %17, <8 x i16>* %12, align 16
  %18 = load <4 x i32>, <4 x i32>* %11, align 16
  %19 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i16> %19, <8 x i16>* %5, align 16
  %20 = load <8 x i16>, <8 x i16>* %5, align 16
  store <8 x i16> %20, <8 x i16>* %3, align 16
  %21 = load <8 x i16>, <8 x i16>* %3, align 16
  %22 = load <8 x i16>, <8 x i16>* %3, align 16
  %23 = shufflevector <8 x i16> %21, <8 x i16> %22, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %23, <4 x i16>* %4, align 8
  %24 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %24, <4 x i16>* %7, align 8
  %25 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %25, <4 x i16>* %8, align 8
  %26 = load <4 x i16>, <4 x i16>* %8, align 8
  %27 = bitcast <4 x i16> %26 to <8 x i8>
  %28 = zext <4 x i16> %26 to <4 x i32>
  store <4 x i32> %28, <4 x i32>* %9, align 16
  %29 = load <4 x i32>, <4 x i32>* %9, align 16
  store <4 x i32> %29, <4 x i32>* %10, align 16
  %30 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %30, <4 x i32>* %6, align 16
  %31 = load <4 x i32>, <4 x i32>* %6, align 16
  %32 = sub <4 x i32> %18, %31
  store <4 x i32> %32, <4 x i32>* %13, align 16
  %33 = load <4 x i32>, <4 x i32>* %13, align 16
  ret <4 x i32> %33
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vsubw_high_u32_wrapper(<2 x i64> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <2 x i64>, align 16
  %14 = alloca <2 x i64>, align 16
  %15 = alloca <4 x i32>, align 16
  store <2 x i64> %0, <2 x i64>* %14, align 16
  store <4 x i32> %1, <4 x i32>* %15, align 16
  %16 = load <2 x i64>, <2 x i64>* %14, align 16
  %17 = load <4 x i32>, <4 x i32>* %15, align 16
  store <2 x i64> %16, <2 x i64>* %11, align 16
  store <4 x i32> %17, <4 x i32>* %12, align 16
  %18 = load <2 x i64>, <2 x i64>* %11, align 16
  %19 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i32> %19, <4 x i32>* %5, align 16
  %20 = load <4 x i32>, <4 x i32>* %5, align 16
  store <4 x i32> %20, <4 x i32>* %3, align 16
  %21 = load <4 x i32>, <4 x i32>* %3, align 16
  %22 = load <4 x i32>, <4 x i32>* %3, align 16
  %23 = shufflevector <4 x i32> %21, <4 x i32> %22, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %23, <2 x i32>* %4, align 8
  %24 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %24, <2 x i32>* %7, align 8
  %25 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %25, <2 x i32>* %8, align 8
  %26 = load <2 x i32>, <2 x i32>* %8, align 8
  %27 = bitcast <2 x i32> %26 to <8 x i8>
  %28 = zext <2 x i32> %26 to <2 x i64>
  store <2 x i64> %28, <2 x i64>* %9, align 16
  %29 = load <2 x i64>, <2 x i64>* %9, align 16
  store <2 x i64> %29, <2 x i64>* %10, align 16
  %30 = load <2 x i64>, <2 x i64>* %10, align 16
  store <2 x i64> %30, <2 x i64>* %6, align 16
  %31 = load <2 x i64>, <2 x i64>* %6, align 16
  %32 = sub <2 x i64> %18, %31
  store <2 x i64> %32, <2 x i64>* %13, align 16
  %33 = load <2 x i64>, <2 x i64>* %13, align 16
  ret <2 x i64> %33
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vhsub_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.shsub.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vhsubq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.shsub.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vhsub_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.shsub.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vhsubq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.shsub.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vhsub_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.shsub.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vhsubq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.shsub.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vhsub_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.uhsub.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vhsubq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.uhsub.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vhsub_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.uhsub.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vhsubq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.uhsub.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vhsub_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.uhsub.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vhsubq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.uhsub.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vqsub_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.sqsub.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vqsubq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.sqsub.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vqsub_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.sqsub.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vqsubq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.sqsub.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vqsub_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.sqsub.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqsubq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.sqsub.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqsubq_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = call <2 x i64> @llvm.aarch64.neon.sqsub.v2i64(<2 x i64> %10, <2 x i64> %12) #4
  %15 = bitcast <2 x i64> %14 to <16 x i8>
  store <2 x i64> %14, <2 x i64>* %5, align 16
  %16 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vqsub_s64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = bitcast <1 x i64> %10 to <8 x i8>
  %12 = load <1 x i64>, <1 x i64>* %4, align 8
  %13 = bitcast <1 x i64> %12 to <8 x i8>
  %14 = call <1 x i64> @llvm.aarch64.neon.sqsub.v1i64(<1 x i64> %10, <1 x i64> %12) #4
  %15 = bitcast <1 x i64> %14 to <8 x i8>
  store <1 x i64> %14, <1 x i64>* %5, align 8
  %16 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define signext i8 @vqsubb_s8_wrapper(i8 signext %0, i8 signext %1) #2 {
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8 %0, i8* %6, align 1
  store i8 %1, i8* %7, align 1
  %8 = load i8, i8* %6, align 1
  %9 = load i8, i8* %7, align 1
  store i8 %8, i8* %3, align 1
  store i8 %9, i8* %4, align 1
  %10 = load i8, i8* %3, align 1
  %11 = load i8, i8* %4, align 1
  %12 = insertelement <8 x i8> undef, i8 %10, i64 0
  %13 = insertelement <8 x i8> undef, i8 %11, i64 0
  %14 = call <8 x i8> @llvm.aarch64.neon.sqsub.v8i8(<8 x i8> %12, <8 x i8> %13) #4
  %15 = extractelement <8 x i8> %14, i64 0
  store i8 %15, i8* %5, align 1
  %16 = load i8, i8* %5, align 1
  ret i8 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define signext i16 @vqsubh_s16_wrapper(i16 signext %0, i16 signext %1) #2 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  store i16 %0, i16* %6, align 2
  store i16 %1, i16* %7, align 2
  %8 = load i16, i16* %6, align 2
  %9 = load i16, i16* %7, align 2
  store i16 %8, i16* %3, align 2
  store i16 %9, i16* %4, align 2
  %10 = load i16, i16* %3, align 2
  %11 = load i16, i16* %4, align 2
  %12 = insertelement <4 x i16> undef, i16 %10, i64 0
  %13 = insertelement <4 x i16> undef, i16 %11, i64 0
  %14 = call <4 x i16> @llvm.aarch64.neon.sqsub.v4i16(<4 x i16> %12, <4 x i16> %13) #4
  %15 = extractelement <4 x i16> %14, i64 0
  store i16 %15, i16* %5, align 2
  %16 = load i16, i16* %5, align 2
  ret i16 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @vqsubs_s32_wrapper(i32 %0, i32 %1) #2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  %8 = load i32, i32* %6, align 4
  %9 = load i32, i32* %7, align 4
  store i32 %8, i32* %3, align 4
  store i32 %9, i32* %4, align 4
  %10 = load i32, i32* %3, align 4
  %11 = load i32, i32* %4, align 4
  %12 = call i32 @llvm.aarch64.neon.sqsub.i32(i32 %10, i32 %11) #4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %5, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vqsubd_s64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = call i64 @llvm.aarch64.neon.sqsub.i64(i64 %10, i64 %11) #4
  store i64 %12, i64* %5, align 8
  %13 = load i64, i64* %5, align 8
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vqsub_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.uqsub.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vqsubq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.uqsub.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vqsub_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.uqsub.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vqsubq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.uqsub.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vqsub_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.uqsub.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqsubq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.uqsub.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqsubq_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = call <2 x i64> @llvm.aarch64.neon.uqsub.v2i64(<2 x i64> %10, <2 x i64> %12) #4
  %15 = bitcast <2 x i64> %14 to <16 x i8>
  store <2 x i64> %14, <2 x i64>* %5, align 16
  %16 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vqsub_u64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = bitcast <1 x i64> %10 to <8 x i8>
  %12 = load <1 x i64>, <1 x i64>* %4, align 8
  %13 = bitcast <1 x i64> %12 to <8 x i8>
  %14 = call <1 x i64> @llvm.aarch64.neon.uqsub.v1i64(<1 x i64> %10, <1 x i64> %12) #4
  %15 = bitcast <1 x i64> %14 to <8 x i8>
  store <1 x i64> %14, <1 x i64>* %5, align 8
  %16 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define zeroext i8 @vqsubb_u8_wrapper(i8 zeroext %0, i8 zeroext %1) #2 {
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8 %0, i8* %6, align 1
  store i8 %1, i8* %7, align 1
  %8 = load i8, i8* %6, align 1
  %9 = load i8, i8* %7, align 1
  store i8 %8, i8* %3, align 1
  store i8 %9, i8* %4, align 1
  %10 = load i8, i8* %3, align 1
  %11 = load i8, i8* %4, align 1
  %12 = insertelement <8 x i8> undef, i8 %10, i64 0
  %13 = insertelement <8 x i8> undef, i8 %11, i64 0
  %14 = call <8 x i8> @llvm.aarch64.neon.uqsub.v8i8(<8 x i8> %12, <8 x i8> %13) #4
  %15 = extractelement <8 x i8> %14, i64 0
  store i8 %15, i8* %5, align 1
  %16 = load i8, i8* %5, align 1
  ret i8 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define zeroext i16 @vqsubh_u16_wrapper(i16 zeroext %0, i16 zeroext %1) #2 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  store i16 %0, i16* %6, align 2
  store i16 %1, i16* %7, align 2
  %8 = load i16, i16* %6, align 2
  %9 = load i16, i16* %7, align 2
  store i16 %8, i16* %3, align 2
  store i16 %9, i16* %4, align 2
  %10 = load i16, i16* %3, align 2
  %11 = load i16, i16* %4, align 2
  %12 = insertelement <4 x i16> undef, i16 %10, i64 0
  %13 = insertelement <4 x i16> undef, i16 %11, i64 0
  %14 = call <4 x i16> @llvm.aarch64.neon.uqsub.v4i16(<4 x i16> %12, <4 x i16> %13) #4
  %15 = extractelement <4 x i16> %14, i64 0
  store i16 %15, i16* %5, align 2
  %16 = load i16, i16* %5, align 2
  ret i16 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @vqsubs_u32_wrapper(i32 %0, i32 %1) #2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  %8 = load i32, i32* %6, align 4
  %9 = load i32, i32* %7, align 4
  store i32 %8, i32* %3, align 4
  store i32 %9, i32* %4, align 4
  %10 = load i32, i32* %3, align 4
  %11 = load i32, i32* %4, align 4
  %12 = call i32 @llvm.aarch64.neon.uqsub.i32(i32 %10, i32 %11) #4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %5, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vqsubd_u64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = call i64 @llvm.aarch64.neon.uqsub.i64(i64 %10, i64 %11) #4
  store i64 %12, i64* %5, align 8
  %13 = load i64, i64* %5, align 8
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vsubhn_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = sub <8 x i16> %10, %12
  %15 = lshr <8 x i16> %14, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %16 = trunc <8 x i16> %15 to <8 x i8>
  store <8 x i8> %16, <8 x i8>* %5, align 8
  %17 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vsubhn_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = sub <4 x i32> %10, %12
  %15 = lshr <4 x i32> %14, <i32 16, i32 16, i32 16, i32 16>
  %16 = trunc <4 x i32> %15 to <4 x i16>
  store <4 x i16> %16, <4 x i16>* %5, align 8
  %17 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vsubhn_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = sub <2 x i64> %10, %12
  %15 = lshr <2 x i64> %14, <i64 32, i64 32>
  %16 = trunc <2 x i64> %15 to <2 x i32>
  store <2 x i32> %16, <2 x i32>* %5, align 8
  %17 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vsubhn_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = sub <8 x i16> %10, %12
  %15 = lshr <8 x i16> %14, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %16 = trunc <8 x i16> %15 to <8 x i8>
  store <8 x i8> %16, <8 x i8>* %5, align 8
  %17 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vsubhn_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = sub <4 x i32> %10, %12
  %15 = lshr <4 x i32> %14, <i32 16, i32 16, i32 16, i32 16>
  %16 = trunc <4 x i32> %15 to <4 x i16>
  store <4 x i16> %16, <4 x i16>* %5, align 8
  %17 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vsubhn_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = sub <2 x i64> %10, %12
  %15 = lshr <2 x i64> %14, <i64 32, i64 32>
  %16 = trunc <2 x i64> %15 to <2 x i32>
  store <2 x i32> %16, <2 x i32>* %5, align 8
  %17 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vsubhn_high_s16_wrapper(<8 x i8> %0, <8 x i16> %1, <8 x i16> %2) #1 {
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i8>, align 8
  %10 = alloca <8 x i8>, align 8
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <16 x i8>, align 16
  %14 = alloca <8 x i8>, align 8
  %15 = alloca <8 x i16>, align 16
  %16 = alloca <8 x i16>, align 16
  store <8 x i8> %0, <8 x i8>* %14, align 8
  store <8 x i16> %1, <8 x i16>* %15, align 16
  store <8 x i16> %2, <8 x i16>* %16, align 16
  %17 = load <8 x i8>, <8 x i8>* %14, align 8
  %18 = load <8 x i16>, <8 x i16>* %15, align 16
  %19 = load <8 x i16>, <8 x i16>* %16, align 16
  store <8 x i8> %17, <8 x i8>* %10, align 8
  store <8 x i16> %18, <8 x i16>* %11, align 16
  store <8 x i16> %19, <8 x i16>* %12, align 16
  %20 = load <8 x i8>, <8 x i8>* %10, align 8
  %21 = load <8 x i16>, <8 x i16>* %11, align 16
  %22 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i16> %21, <8 x i16>* %7, align 16
  store <8 x i16> %22, <8 x i16>* %8, align 16
  %23 = load <8 x i16>, <8 x i16>* %7, align 16
  %24 = bitcast <8 x i16> %23 to <16 x i8>
  %25 = load <8 x i16>, <8 x i16>* %8, align 16
  %26 = bitcast <8 x i16> %25 to <16 x i8>
  %27 = sub <8 x i16> %23, %25
  %28 = lshr <8 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = trunc <8 x i16> %28 to <8 x i8>
  store <8 x i8> %29, <8 x i8>* %9, align 8
  %30 = load <8 x i8>, <8 x i8>* %9, align 8
  store <8 x i8> %20, <8 x i8>* %4, align 8
  store <8 x i8> %30, <8 x i8>* %5, align 8
  %31 = load <8 x i8>, <8 x i8>* %4, align 8
  %32 = load <8 x i8>, <8 x i8>* %5, align 8
  %33 = shufflevector <8 x i8> %31, <8 x i8> %32, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <16 x i8> %33, <16 x i8>* %6, align 16
  %34 = load <16 x i8>, <16 x i8>* %6, align 16
  store <16 x i8> %34, <16 x i8>* %13, align 16
  %35 = load <16 x i8>, <16 x i8>* %13, align 16
  ret <16 x i8> %35
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vsubhn_high_s32_wrapper(<4 x i16> %0, <4 x i32> %1, <4 x i32> %2) #1 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <4 x i16>, align 8
  %15 = alloca <4 x i32>, align 16
  %16 = alloca <4 x i32>, align 16
  store <4 x i16> %0, <4 x i16>* %14, align 8
  store <4 x i32> %1, <4 x i32>* %15, align 16
  store <4 x i32> %2, <4 x i32>* %16, align 16
  %17 = load <4 x i16>, <4 x i16>* %14, align 8
  %18 = load <4 x i32>, <4 x i32>* %15, align 16
  %19 = load <4 x i32>, <4 x i32>* %16, align 16
  store <4 x i16> %17, <4 x i16>* %10, align 8
  store <4 x i32> %18, <4 x i32>* %11, align 16
  store <4 x i32> %19, <4 x i32>* %12, align 16
  %20 = load <4 x i16>, <4 x i16>* %10, align 8
  %21 = load <4 x i32>, <4 x i32>* %11, align 16
  %22 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i32> %21, <4 x i32>* %7, align 16
  store <4 x i32> %22, <4 x i32>* %8, align 16
  %23 = load <4 x i32>, <4 x i32>* %7, align 16
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = load <4 x i32>, <4 x i32>* %8, align 16
  %26 = bitcast <4 x i32> %25 to <16 x i8>
  %27 = sub <4 x i32> %23, %25
  %28 = lshr <4 x i32> %27, <i32 16, i32 16, i32 16, i32 16>
  %29 = trunc <4 x i32> %28 to <4 x i16>
  store <4 x i16> %29, <4 x i16>* %9, align 8
  %30 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i16> %20, <4 x i16>* %4, align 8
  store <4 x i16> %30, <4 x i16>* %5, align 8
  %31 = load <4 x i16>, <4 x i16>* %4, align 8
  %32 = load <4 x i16>, <4 x i16>* %5, align 8
  %33 = shufflevector <4 x i16> %31, <4 x i16> %32, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %33, <8 x i16>* %6, align 16
  %34 = load <8 x i16>, <8 x i16>* %6, align 16
  store <8 x i16> %34, <8 x i16>* %13, align 16
  %35 = load <8 x i16>, <8 x i16>* %13, align 16
  ret <8 x i16> %35
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vsubhn_high_s64_wrapper(<2 x i32> %0, <2 x i64> %1, <2 x i64> %2) #1 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <2 x i32>, align 8
  %15 = alloca <2 x i64>, align 16
  %16 = alloca <2 x i64>, align 16
  store <2 x i32> %0, <2 x i32>* %14, align 8
  store <2 x i64> %1, <2 x i64>* %15, align 16
  store <2 x i64> %2, <2 x i64>* %16, align 16
  %17 = load <2 x i32>, <2 x i32>* %14, align 8
  %18 = load <2 x i64>, <2 x i64>* %15, align 16
  %19 = load <2 x i64>, <2 x i64>* %16, align 16
  store <2 x i32> %17, <2 x i32>* %10, align 8
  store <2 x i64> %18, <2 x i64>* %11, align 16
  store <2 x i64> %19, <2 x i64>* %12, align 16
  %20 = load <2 x i32>, <2 x i32>* %10, align 8
  %21 = load <2 x i64>, <2 x i64>* %11, align 16
  %22 = load <2 x i64>, <2 x i64>* %12, align 16
  store <2 x i64> %21, <2 x i64>* %7, align 16
  store <2 x i64> %22, <2 x i64>* %8, align 16
  %23 = load <2 x i64>, <2 x i64>* %7, align 16
  %24 = bitcast <2 x i64> %23 to <16 x i8>
  %25 = load <2 x i64>, <2 x i64>* %8, align 16
  %26 = bitcast <2 x i64> %25 to <16 x i8>
  %27 = sub <2 x i64> %23, %25
  %28 = lshr <2 x i64> %27, <i64 32, i64 32>
  %29 = trunc <2 x i64> %28 to <2 x i32>
  store <2 x i32> %29, <2 x i32>* %9, align 8
  %30 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i32> %20, <2 x i32>* %4, align 8
  store <2 x i32> %30, <2 x i32>* %5, align 8
  %31 = load <2 x i32>, <2 x i32>* %4, align 8
  %32 = load <2 x i32>, <2 x i32>* %5, align 8
  %33 = shufflevector <2 x i32> %31, <2 x i32> %32, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %33, <4 x i32>* %6, align 16
  %34 = load <4 x i32>, <4 x i32>* %6, align 16
  store <4 x i32> %34, <4 x i32>* %13, align 16
  %35 = load <4 x i32>, <4 x i32>* %13, align 16
  ret <4 x i32> %35
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vsubhn_high_u16_wrapper(<8 x i8> %0, <8 x i16> %1, <8 x i16> %2) #1 {
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i8>, align 8
  %10 = alloca <8 x i8>, align 8
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <16 x i8>, align 16
  %14 = alloca <8 x i8>, align 8
  %15 = alloca <8 x i16>, align 16
  %16 = alloca <8 x i16>, align 16
  store <8 x i8> %0, <8 x i8>* %14, align 8
  store <8 x i16> %1, <8 x i16>* %15, align 16
  store <8 x i16> %2, <8 x i16>* %16, align 16
  %17 = load <8 x i8>, <8 x i8>* %14, align 8
  %18 = load <8 x i16>, <8 x i16>* %15, align 16
  %19 = load <8 x i16>, <8 x i16>* %16, align 16
  store <8 x i8> %17, <8 x i8>* %10, align 8
  store <8 x i16> %18, <8 x i16>* %11, align 16
  store <8 x i16> %19, <8 x i16>* %12, align 16
  %20 = load <8 x i8>, <8 x i8>* %10, align 8
  %21 = load <8 x i16>, <8 x i16>* %11, align 16
  %22 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i16> %21, <8 x i16>* %7, align 16
  store <8 x i16> %22, <8 x i16>* %8, align 16
  %23 = load <8 x i16>, <8 x i16>* %7, align 16
  %24 = bitcast <8 x i16> %23 to <16 x i8>
  %25 = load <8 x i16>, <8 x i16>* %8, align 16
  %26 = bitcast <8 x i16> %25 to <16 x i8>
  %27 = sub <8 x i16> %23, %25
  %28 = lshr <8 x i16> %27, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %29 = trunc <8 x i16> %28 to <8 x i8>
  store <8 x i8> %29, <8 x i8>* %9, align 8
  %30 = load <8 x i8>, <8 x i8>* %9, align 8
  store <8 x i8> %20, <8 x i8>* %4, align 8
  store <8 x i8> %30, <8 x i8>* %5, align 8
  %31 = load <8 x i8>, <8 x i8>* %4, align 8
  %32 = load <8 x i8>, <8 x i8>* %5, align 8
  %33 = shufflevector <8 x i8> %31, <8 x i8> %32, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <16 x i8> %33, <16 x i8>* %6, align 16
  %34 = load <16 x i8>, <16 x i8>* %6, align 16
  store <16 x i8> %34, <16 x i8>* %13, align 16
  %35 = load <16 x i8>, <16 x i8>* %13, align 16
  ret <16 x i8> %35
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vsubhn_high_u32_wrapper(<4 x i16> %0, <4 x i32> %1, <4 x i32> %2) #1 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <4 x i16>, align 8
  %15 = alloca <4 x i32>, align 16
  %16 = alloca <4 x i32>, align 16
  store <4 x i16> %0, <4 x i16>* %14, align 8
  store <4 x i32> %1, <4 x i32>* %15, align 16
  store <4 x i32> %2, <4 x i32>* %16, align 16
  %17 = load <4 x i16>, <4 x i16>* %14, align 8
  %18 = load <4 x i32>, <4 x i32>* %15, align 16
  %19 = load <4 x i32>, <4 x i32>* %16, align 16
  store <4 x i16> %17, <4 x i16>* %10, align 8
  store <4 x i32> %18, <4 x i32>* %11, align 16
  store <4 x i32> %19, <4 x i32>* %12, align 16
  %20 = load <4 x i16>, <4 x i16>* %10, align 8
  %21 = load <4 x i32>, <4 x i32>* %11, align 16
  %22 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i32> %21, <4 x i32>* %7, align 16
  store <4 x i32> %22, <4 x i32>* %8, align 16
  %23 = load <4 x i32>, <4 x i32>* %7, align 16
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = load <4 x i32>, <4 x i32>* %8, align 16
  %26 = bitcast <4 x i32> %25 to <16 x i8>
  %27 = sub <4 x i32> %23, %25
  %28 = lshr <4 x i32> %27, <i32 16, i32 16, i32 16, i32 16>
  %29 = trunc <4 x i32> %28 to <4 x i16>
  store <4 x i16> %29, <4 x i16>* %9, align 8
  %30 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i16> %20, <4 x i16>* %4, align 8
  store <4 x i16> %30, <4 x i16>* %5, align 8
  %31 = load <4 x i16>, <4 x i16>* %4, align 8
  %32 = load <4 x i16>, <4 x i16>* %5, align 8
  %33 = shufflevector <4 x i16> %31, <4 x i16> %32, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %33, <8 x i16>* %6, align 16
  %34 = load <8 x i16>, <8 x i16>* %6, align 16
  store <8 x i16> %34, <8 x i16>* %13, align 16
  %35 = load <8 x i16>, <8 x i16>* %13, align 16
  ret <8 x i16> %35
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vsubhn_high_u64_wrapper(<2 x i32> %0, <2 x i64> %1, <2 x i64> %2) #1 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <2 x i32>, align 8
  %15 = alloca <2 x i64>, align 16
  %16 = alloca <2 x i64>, align 16
  store <2 x i32> %0, <2 x i32>* %14, align 8
  store <2 x i64> %1, <2 x i64>* %15, align 16
  store <2 x i64> %2, <2 x i64>* %16, align 16
  %17 = load <2 x i32>, <2 x i32>* %14, align 8
  %18 = load <2 x i64>, <2 x i64>* %15, align 16
  %19 = load <2 x i64>, <2 x i64>* %16, align 16
  store <2 x i32> %17, <2 x i32>* %10, align 8
  store <2 x i64> %18, <2 x i64>* %11, align 16
  store <2 x i64> %19, <2 x i64>* %12, align 16
  %20 = load <2 x i32>, <2 x i32>* %10, align 8
  %21 = load <2 x i64>, <2 x i64>* %11, align 16
  %22 = load <2 x i64>, <2 x i64>* %12, align 16
  store <2 x i64> %21, <2 x i64>* %7, align 16
  store <2 x i64> %22, <2 x i64>* %8, align 16
  %23 = load <2 x i64>, <2 x i64>* %7, align 16
  %24 = bitcast <2 x i64> %23 to <16 x i8>
  %25 = load <2 x i64>, <2 x i64>* %8, align 16
  %26 = bitcast <2 x i64> %25 to <16 x i8>
  %27 = sub <2 x i64> %23, %25
  %28 = lshr <2 x i64> %27, <i64 32, i64 32>
  %29 = trunc <2 x i64> %28 to <2 x i32>
  store <2 x i32> %29, <2 x i32>* %9, align 8
  %30 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i32> %20, <2 x i32>* %4, align 8
  store <2 x i32> %30, <2 x i32>* %5, align 8
  %31 = load <2 x i32>, <2 x i32>* %4, align 8
  %32 = load <2 x i32>, <2 x i32>* %5, align 8
  %33 = shufflevector <2 x i32> %31, <2 x i32> %32, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %33, <4 x i32>* %6, align 16
  %34 = load <4 x i32>, <4 x i32>* %6, align 16
  store <4 x i32> %34, <4 x i32>* %13, align 16
  %35 = load <4 x i32>, <4 x i32>* %13, align 16
  ret <4 x i32> %35
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vrsubhn_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i8> @llvm.aarch64.neon.rsubhn.v8i8(<8 x i16> %10, <8 x i16> %12) #4
  store <8 x i8> %14, <8 x i8>* %5, align 8
  %15 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vrsubhn_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.rsubhn.v4i16(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vrsubhn_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.rsubhn.v2i32(<2 x i64> %10, <2 x i64> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vrsubhn_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i8> @llvm.aarch64.neon.rsubhn.v8i8(<8 x i16> %10, <8 x i16> %12) #4
  store <8 x i8> %14, <8 x i8>* %5, align 8
  %15 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vrsubhn_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.rsubhn.v4i16(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vrsubhn_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.rsubhn.v2i32(<2 x i64> %10, <2 x i64> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vrsubhn_high_s16_wrapper(<8 x i8> %0, <8 x i16> %1, <8 x i16> %2) #1 {
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i8>, align 8
  %10 = alloca <8 x i8>, align 8
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <16 x i8>, align 16
  %14 = alloca <8 x i8>, align 8
  %15 = alloca <8 x i16>, align 16
  %16 = alloca <8 x i16>, align 16
  store <8 x i8> %0, <8 x i8>* %14, align 8
  store <8 x i16> %1, <8 x i16>* %15, align 16
  store <8 x i16> %2, <8 x i16>* %16, align 16
  %17 = load <8 x i8>, <8 x i8>* %14, align 8
  %18 = load <8 x i16>, <8 x i16>* %15, align 16
  %19 = load <8 x i16>, <8 x i16>* %16, align 16
  store <8 x i8> %17, <8 x i8>* %10, align 8
  store <8 x i16> %18, <8 x i16>* %11, align 16
  store <8 x i16> %19, <8 x i16>* %12, align 16
  %20 = load <8 x i8>, <8 x i8>* %10, align 8
  %21 = load <8 x i16>, <8 x i16>* %11, align 16
  %22 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i16> %21, <8 x i16>* %7, align 16
  store <8 x i16> %22, <8 x i16>* %8, align 16
  %23 = load <8 x i16>, <8 x i16>* %7, align 16
  %24 = bitcast <8 x i16> %23 to <16 x i8>
  %25 = load <8 x i16>, <8 x i16>* %8, align 16
  %26 = bitcast <8 x i16> %25 to <16 x i8>
  %27 = call <8 x i8> @llvm.aarch64.neon.rsubhn.v8i8(<8 x i16> %23, <8 x i16> %25) #4
  store <8 x i8> %27, <8 x i8>* %9, align 8
  %28 = load <8 x i8>, <8 x i8>* %9, align 8
  store <8 x i8> %20, <8 x i8>* %4, align 8
  store <8 x i8> %28, <8 x i8>* %5, align 8
  %29 = load <8 x i8>, <8 x i8>* %4, align 8
  %30 = load <8 x i8>, <8 x i8>* %5, align 8
  %31 = shufflevector <8 x i8> %29, <8 x i8> %30, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <16 x i8> %31, <16 x i8>* %6, align 16
  %32 = load <16 x i8>, <16 x i8>* %6, align 16
  store <16 x i8> %32, <16 x i8>* %13, align 16
  %33 = load <16 x i8>, <16 x i8>* %13, align 16
  ret <16 x i8> %33
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vrsubhn_high_s32_wrapper(<4 x i16> %0, <4 x i32> %1, <4 x i32> %2) #1 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <4 x i16>, align 8
  %15 = alloca <4 x i32>, align 16
  %16 = alloca <4 x i32>, align 16
  store <4 x i16> %0, <4 x i16>* %14, align 8
  store <4 x i32> %1, <4 x i32>* %15, align 16
  store <4 x i32> %2, <4 x i32>* %16, align 16
  %17 = load <4 x i16>, <4 x i16>* %14, align 8
  %18 = load <4 x i32>, <4 x i32>* %15, align 16
  %19 = load <4 x i32>, <4 x i32>* %16, align 16
  store <4 x i16> %17, <4 x i16>* %10, align 8
  store <4 x i32> %18, <4 x i32>* %11, align 16
  store <4 x i32> %19, <4 x i32>* %12, align 16
  %20 = load <4 x i16>, <4 x i16>* %10, align 8
  %21 = load <4 x i32>, <4 x i32>* %11, align 16
  %22 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i32> %21, <4 x i32>* %7, align 16
  store <4 x i32> %22, <4 x i32>* %8, align 16
  %23 = load <4 x i32>, <4 x i32>* %7, align 16
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = load <4 x i32>, <4 x i32>* %8, align 16
  %26 = bitcast <4 x i32> %25 to <16 x i8>
  %27 = call <4 x i16> @llvm.aarch64.neon.rsubhn.v4i16(<4 x i32> %23, <4 x i32> %25) #4
  %28 = bitcast <4 x i16> %27 to <8 x i8>
  store <4 x i16> %27, <4 x i16>* %9, align 8
  %29 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i16> %20, <4 x i16>* %4, align 8
  store <4 x i16> %29, <4 x i16>* %5, align 8
  %30 = load <4 x i16>, <4 x i16>* %4, align 8
  %31 = load <4 x i16>, <4 x i16>* %5, align 8
  %32 = shufflevector <4 x i16> %30, <4 x i16> %31, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %32, <8 x i16>* %6, align 16
  %33 = load <8 x i16>, <8 x i16>* %6, align 16
  store <8 x i16> %33, <8 x i16>* %13, align 16
  %34 = load <8 x i16>, <8 x i16>* %13, align 16
  ret <8 x i16> %34
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vrsubhn_high_s64_wrapper(<2 x i32> %0, <2 x i64> %1, <2 x i64> %2) #1 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <2 x i32>, align 8
  %15 = alloca <2 x i64>, align 16
  %16 = alloca <2 x i64>, align 16
  store <2 x i32> %0, <2 x i32>* %14, align 8
  store <2 x i64> %1, <2 x i64>* %15, align 16
  store <2 x i64> %2, <2 x i64>* %16, align 16
  %17 = load <2 x i32>, <2 x i32>* %14, align 8
  %18 = load <2 x i64>, <2 x i64>* %15, align 16
  %19 = load <2 x i64>, <2 x i64>* %16, align 16
  store <2 x i32> %17, <2 x i32>* %10, align 8
  store <2 x i64> %18, <2 x i64>* %11, align 16
  store <2 x i64> %19, <2 x i64>* %12, align 16
  %20 = load <2 x i32>, <2 x i32>* %10, align 8
  %21 = load <2 x i64>, <2 x i64>* %11, align 16
  %22 = load <2 x i64>, <2 x i64>* %12, align 16
  store <2 x i64> %21, <2 x i64>* %7, align 16
  store <2 x i64> %22, <2 x i64>* %8, align 16
  %23 = load <2 x i64>, <2 x i64>* %7, align 16
  %24 = bitcast <2 x i64> %23 to <16 x i8>
  %25 = load <2 x i64>, <2 x i64>* %8, align 16
  %26 = bitcast <2 x i64> %25 to <16 x i8>
  %27 = call <2 x i32> @llvm.aarch64.neon.rsubhn.v2i32(<2 x i64> %23, <2 x i64> %25) #4
  %28 = bitcast <2 x i32> %27 to <8 x i8>
  store <2 x i32> %27, <2 x i32>* %9, align 8
  %29 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i32> %20, <2 x i32>* %4, align 8
  store <2 x i32> %29, <2 x i32>* %5, align 8
  %30 = load <2 x i32>, <2 x i32>* %4, align 8
  %31 = load <2 x i32>, <2 x i32>* %5, align 8
  %32 = shufflevector <2 x i32> %30, <2 x i32> %31, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %32, <4 x i32>* %6, align 16
  %33 = load <4 x i32>, <4 x i32>* %6, align 16
  store <4 x i32> %33, <4 x i32>* %13, align 16
  %34 = load <4 x i32>, <4 x i32>* %13, align 16
  ret <4 x i32> %34
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vrsubhn_high_u16_wrapper(<8 x i8> %0, <8 x i16> %1, <8 x i16> %2) #1 {
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i8>, align 8
  %10 = alloca <8 x i8>, align 8
  %11 = alloca <8 x i16>, align 16
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <16 x i8>, align 16
  %14 = alloca <8 x i8>, align 8
  %15 = alloca <8 x i16>, align 16
  %16 = alloca <8 x i16>, align 16
  store <8 x i8> %0, <8 x i8>* %14, align 8
  store <8 x i16> %1, <8 x i16>* %15, align 16
  store <8 x i16> %2, <8 x i16>* %16, align 16
  %17 = load <8 x i8>, <8 x i8>* %14, align 8
  %18 = load <8 x i16>, <8 x i16>* %15, align 16
  %19 = load <8 x i16>, <8 x i16>* %16, align 16
  store <8 x i8> %17, <8 x i8>* %10, align 8
  store <8 x i16> %18, <8 x i16>* %11, align 16
  store <8 x i16> %19, <8 x i16>* %12, align 16
  %20 = load <8 x i8>, <8 x i8>* %10, align 8
  %21 = load <8 x i16>, <8 x i16>* %11, align 16
  %22 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i16> %21, <8 x i16>* %7, align 16
  store <8 x i16> %22, <8 x i16>* %8, align 16
  %23 = load <8 x i16>, <8 x i16>* %7, align 16
  %24 = bitcast <8 x i16> %23 to <16 x i8>
  %25 = load <8 x i16>, <8 x i16>* %8, align 16
  %26 = bitcast <8 x i16> %25 to <16 x i8>
  %27 = call <8 x i8> @llvm.aarch64.neon.rsubhn.v8i8(<8 x i16> %23, <8 x i16> %25) #4
  store <8 x i8> %27, <8 x i8>* %9, align 8
  %28 = load <8 x i8>, <8 x i8>* %9, align 8
  store <8 x i8> %20, <8 x i8>* %4, align 8
  store <8 x i8> %28, <8 x i8>* %5, align 8
  %29 = load <8 x i8>, <8 x i8>* %4, align 8
  %30 = load <8 x i8>, <8 x i8>* %5, align 8
  %31 = shufflevector <8 x i8> %29, <8 x i8> %30, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <16 x i8> %31, <16 x i8>* %6, align 16
  %32 = load <16 x i8>, <16 x i8>* %6, align 16
  store <16 x i8> %32, <16 x i8>* %13, align 16
  %33 = load <16 x i8>, <16 x i8>* %13, align 16
  ret <16 x i8> %33
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vrsubhn_high_u32_wrapper(<4 x i16> %0, <4 x i32> %1, <4 x i32> %2) #1 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <4 x i16>, align 8
  %15 = alloca <4 x i32>, align 16
  %16 = alloca <4 x i32>, align 16
  store <4 x i16> %0, <4 x i16>* %14, align 8
  store <4 x i32> %1, <4 x i32>* %15, align 16
  store <4 x i32> %2, <4 x i32>* %16, align 16
  %17 = load <4 x i16>, <4 x i16>* %14, align 8
  %18 = load <4 x i32>, <4 x i32>* %15, align 16
  %19 = load <4 x i32>, <4 x i32>* %16, align 16
  store <4 x i16> %17, <4 x i16>* %10, align 8
  store <4 x i32> %18, <4 x i32>* %11, align 16
  store <4 x i32> %19, <4 x i32>* %12, align 16
  %20 = load <4 x i16>, <4 x i16>* %10, align 8
  %21 = load <4 x i32>, <4 x i32>* %11, align 16
  %22 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i32> %21, <4 x i32>* %7, align 16
  store <4 x i32> %22, <4 x i32>* %8, align 16
  %23 = load <4 x i32>, <4 x i32>* %7, align 16
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = load <4 x i32>, <4 x i32>* %8, align 16
  %26 = bitcast <4 x i32> %25 to <16 x i8>
  %27 = call <4 x i16> @llvm.aarch64.neon.rsubhn.v4i16(<4 x i32> %23, <4 x i32> %25) #4
  %28 = bitcast <4 x i16> %27 to <8 x i8>
  store <4 x i16> %27, <4 x i16>* %9, align 8
  %29 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i16> %20, <4 x i16>* %4, align 8
  store <4 x i16> %29, <4 x i16>* %5, align 8
  %30 = load <4 x i16>, <4 x i16>* %4, align 8
  %31 = load <4 x i16>, <4 x i16>* %5, align 8
  %32 = shufflevector <4 x i16> %30, <4 x i16> %31, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %32, <8 x i16>* %6, align 16
  %33 = load <8 x i16>, <8 x i16>* %6, align 16
  store <8 x i16> %33, <8 x i16>* %13, align 16
  %34 = load <8 x i16>, <8 x i16>* %13, align 16
  ret <8 x i16> %34
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vrsubhn_high_u64_wrapper(<2 x i32> %0, <2 x i64> %1, <2 x i64> %2) #1 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <2 x i32>, align 8
  %15 = alloca <2 x i64>, align 16
  %16 = alloca <2 x i64>, align 16
  store <2 x i32> %0, <2 x i32>* %14, align 8
  store <2 x i64> %1, <2 x i64>* %15, align 16
  store <2 x i64> %2, <2 x i64>* %16, align 16
  %17 = load <2 x i32>, <2 x i32>* %14, align 8
  %18 = load <2 x i64>, <2 x i64>* %15, align 16
  %19 = load <2 x i64>, <2 x i64>* %16, align 16
  store <2 x i32> %17, <2 x i32>* %10, align 8
  store <2 x i64> %18, <2 x i64>* %11, align 16
  store <2 x i64> %19, <2 x i64>* %12, align 16
  %20 = load <2 x i32>, <2 x i32>* %10, align 8
  %21 = load <2 x i64>, <2 x i64>* %11, align 16
  %22 = load <2 x i64>, <2 x i64>* %12, align 16
  store <2 x i64> %21, <2 x i64>* %7, align 16
  store <2 x i64> %22, <2 x i64>* %8, align 16
  %23 = load <2 x i64>, <2 x i64>* %7, align 16
  %24 = bitcast <2 x i64> %23 to <16 x i8>
  %25 = load <2 x i64>, <2 x i64>* %8, align 16
  %26 = bitcast <2 x i64> %25 to <16 x i8>
  %27 = call <2 x i32> @llvm.aarch64.neon.rsubhn.v2i32(<2 x i64> %23, <2 x i64> %25) #4
  %28 = bitcast <2 x i32> %27 to <8 x i8>
  store <2 x i32> %27, <2 x i32>* %9, align 8
  %29 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i32> %20, <2 x i32>* %4, align 8
  store <2 x i32> %29, <2 x i32>* %5, align 8
  %30 = load <2 x i32>, <2 x i32>* %4, align 8
  %31 = load <2 x i32>, <2 x i32>* %5, align 8
  %32 = shufflevector <2 x i32> %30, <2 x i32> %31, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %32, <4 x i32>* %6, align 16
  %33 = load <4 x i32>, <4 x i32>* %6, align 16
  store <4 x i32> %33, <4 x i32>* %13, align 16
  %34 = load <4 x i32>, <4 x i32>* %13, align 16
  ret <4 x i32> %34
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vceq_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = icmp eq <8 x i8> %10, %11
  %13 = sext <8 x i1> %12 to <8 x i8>
  store <8 x i8> %13, <8 x i8>* %5, align 8
  %14 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vceqq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = icmp eq <16 x i8> %10, %11
  %13 = sext <16 x i1> %12 to <16 x i8>
  store <16 x i8> %13, <16 x i8>* %5, align 16
  %14 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vceq_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = icmp eq <4 x i16> %10, %11
  %13 = sext <4 x i1> %12 to <4 x i16>
  store <4 x i16> %13, <4 x i16>* %5, align 8
  %14 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vceqq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = icmp eq <8 x i16> %10, %11
  %13 = sext <8 x i1> %12 to <8 x i16>
  store <8 x i16> %13, <8 x i16>* %5, align 16
  %14 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vceq_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = icmp eq <2 x i32> %10, %11
  %13 = sext <2 x i1> %12 to <2 x i32>
  store <2 x i32> %13, <2 x i32>* %5, align 8
  %14 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vceqq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = icmp eq <4 x i32> %10, %11
  %13 = sext <4 x i1> %12 to <4 x i32>
  store <4 x i32> %13, <4 x i32>* %5, align 16
  %14 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vceq_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = icmp eq <8 x i8> %10, %11
  %13 = sext <8 x i1> %12 to <8 x i8>
  store <8 x i8> %13, <8 x i8>* %5, align 8
  %14 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vceqq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = icmp eq <16 x i8> %10, %11
  %13 = sext <16 x i1> %12 to <16 x i8>
  store <16 x i8> %13, <16 x i8>* %5, align 16
  %14 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vceq_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = icmp eq <4 x i16> %10, %11
  %13 = sext <4 x i1> %12 to <4 x i16>
  store <4 x i16> %13, <4 x i16>* %5, align 8
  %14 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vceqq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = icmp eq <8 x i16> %10, %11
  %13 = sext <8 x i1> %12 to <8 x i16>
  store <8 x i16> %13, <8 x i16>* %5, align 16
  %14 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vceq_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = icmp eq <2 x i32> %10, %11
  %13 = sext <2 x i1> %12 to <2 x i32>
  store <2 x i32> %13, <2 x i32>* %5, align 8
  %14 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vceqq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = icmp eq <4 x i32> %10, %11
  %13 = sext <4 x i1> %12 to <4 x i32>
  store <4 x i32> %13, <4 x i32>* %5, align 16
  %14 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vceqq_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = icmp eq <2 x i64> %10, %11
  %13 = sext <2 x i1> %12 to <2 x i64>
  store <2 x i64> %13, <2 x i64>* %5, align 16
  %14 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vceqq_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = icmp eq <2 x i64> %10, %11
  %13 = sext <2 x i1> %12 to <2 x i64>
  store <2 x i64> %13, <2 x i64>* %5, align 16
  %14 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vceq_s64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = icmp eq <1 x i64> %10, %11
  %13 = sext <1 x i1> %12 to <1 x i64>
  store <1 x i64> %13, <1 x i64>* %5, align 8
  %14 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vceq_u64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = icmp eq <1 x i64> %10, %11
  %13 = sext <1 x i1> %12 to <1 x i64>
  store <1 x i64> %13, <1 x i64>* %5, align 8
  %14 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vceqd_s64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = icmp eq i64 %10, %11
  %13 = sext i1 %12 to i64
  store i64 %13, i64* %5, align 8
  %14 = load i64, i64* %5, align 8
  ret i64 %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vceqd_u64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = icmp eq i64 %10, %11
  %13 = sext i1 %12 to i64
  store i64 %13, i64* %5, align 8
  %14 = load i64, i64* %5, align 8
  ret i64 %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vceqz_s8_wrapper(<8 x i8> %0) #0 {
  %2 = alloca <8 x i8>, align 8
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %4, align 8
  %5 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %5, <8 x i8>* %2, align 8
  %6 = load <8 x i8>, <8 x i8>* %2, align 8
  %7 = icmp eq <8 x i8> %6, zeroinitializer
  %8 = sext <8 x i1> %7 to <8 x i8>
  store <8 x i8> %8, <8 x i8>* %3, align 8
  %9 = load <8 x i8>, <8 x i8>* %3, align 8
  ret <8 x i8> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vceqzq_s8_wrapper(<16 x i8> %0) #1 {
  %2 = alloca <16 x i8>, align 16
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %4, align 16
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  store <16 x i8> %5, <16 x i8>* %2, align 16
  %6 = load <16 x i8>, <16 x i8>* %2, align 16
  %7 = icmp eq <16 x i8> %6, zeroinitializer
  %8 = sext <16 x i1> %7 to <16 x i8>
  store <16 x i8> %8, <16 x i8>* %3, align 16
  %9 = load <16 x i8>, <16 x i8>* %3, align 16
  ret <16 x i8> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vceqz_s16_wrapper(<4 x i16> %0) #0 {
  %2 = alloca <4 x i16>, align 8
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %4, align 8
  %5 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %5, <4 x i16>* %2, align 8
  %6 = load <4 x i16>, <4 x i16>* %2, align 8
  %7 = bitcast <4 x i16> %6 to <8 x i8>
  %8 = icmp eq <4 x i16> %6, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i16>
  store <4 x i16> %9, <4 x i16>* %3, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  ret <4 x i16> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vceqzq_s16_wrapper(<8 x i16> %0) #1 {
  %2 = alloca <8 x i16>, align 16
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %4, align 16
  %5 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %5, <8 x i16>* %2, align 16
  %6 = load <8 x i16>, <8 x i16>* %2, align 16
  %7 = bitcast <8 x i16> %6 to <16 x i8>
  %8 = icmp eq <8 x i16> %6, zeroinitializer
  %9 = sext <8 x i1> %8 to <8 x i16>
  store <8 x i16> %9, <8 x i16>* %3, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  ret <8 x i16> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vceqz_s32_wrapper(<2 x i32> %0) #0 {
  %2 = alloca <2 x i32>, align 8
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %4, align 8
  %5 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %5, <2 x i32>* %2, align 8
  %6 = load <2 x i32>, <2 x i32>* %2, align 8
  %7 = bitcast <2 x i32> %6 to <8 x i8>
  %8 = icmp eq <2 x i32> %6, zeroinitializer
  %9 = sext <2 x i1> %8 to <2 x i32>
  store <2 x i32> %9, <2 x i32>* %3, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  ret <2 x i32> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vceqzq_s32_wrapper(<4 x i32> %0) #1 {
  %2 = alloca <4 x i32>, align 16
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %4, align 16
  %5 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %5, <4 x i32>* %2, align 16
  %6 = load <4 x i32>, <4 x i32>* %2, align 16
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = icmp eq <4 x i32> %6, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i32>
  store <4 x i32> %9, <4 x i32>* %3, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  ret <4 x i32> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vceqz_u8_wrapper(<8 x i8> %0) #0 {
  %2 = alloca <8 x i8>, align 8
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %4, align 8
  %5 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %5, <8 x i8>* %2, align 8
  %6 = load <8 x i8>, <8 x i8>* %2, align 8
  %7 = icmp eq <8 x i8> %6, zeroinitializer
  %8 = sext <8 x i1> %7 to <8 x i8>
  store <8 x i8> %8, <8 x i8>* %3, align 8
  %9 = load <8 x i8>, <8 x i8>* %3, align 8
  ret <8 x i8> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vceqzq_u8_wrapper(<16 x i8> %0) #1 {
  %2 = alloca <16 x i8>, align 16
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %4, align 16
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  store <16 x i8> %5, <16 x i8>* %2, align 16
  %6 = load <16 x i8>, <16 x i8>* %2, align 16
  %7 = icmp eq <16 x i8> %6, zeroinitializer
  %8 = sext <16 x i1> %7 to <16 x i8>
  store <16 x i8> %8, <16 x i8>* %3, align 16
  %9 = load <16 x i8>, <16 x i8>* %3, align 16
  ret <16 x i8> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vceqz_u16_wrapper(<4 x i16> %0) #0 {
  %2 = alloca <4 x i16>, align 8
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %4, align 8
  %5 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %5, <4 x i16>* %2, align 8
  %6 = load <4 x i16>, <4 x i16>* %2, align 8
  %7 = bitcast <4 x i16> %6 to <8 x i8>
  %8 = icmp eq <4 x i16> %6, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i16>
  store <4 x i16> %9, <4 x i16>* %3, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  ret <4 x i16> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vceqzq_u16_wrapper(<8 x i16> %0) #1 {
  %2 = alloca <8 x i16>, align 16
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %4, align 16
  %5 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %5, <8 x i16>* %2, align 16
  %6 = load <8 x i16>, <8 x i16>* %2, align 16
  %7 = bitcast <8 x i16> %6 to <16 x i8>
  %8 = icmp eq <8 x i16> %6, zeroinitializer
  %9 = sext <8 x i1> %8 to <8 x i16>
  store <8 x i16> %9, <8 x i16>* %3, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  ret <8 x i16> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vceqz_u32_wrapper(<2 x i32> %0) #0 {
  %2 = alloca <2 x i32>, align 8
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %4, align 8
  %5 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %5, <2 x i32>* %2, align 8
  %6 = load <2 x i32>, <2 x i32>* %2, align 8
  %7 = bitcast <2 x i32> %6 to <8 x i8>
  %8 = icmp eq <2 x i32> %6, zeroinitializer
  %9 = sext <2 x i1> %8 to <2 x i32>
  store <2 x i32> %9, <2 x i32>* %3, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  ret <2 x i32> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vceqzq_u32_wrapper(<4 x i32> %0) #1 {
  %2 = alloca <4 x i32>, align 16
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %4, align 16
  %5 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %5, <4 x i32>* %2, align 16
  %6 = load <4 x i32>, <4 x i32>* %2, align 16
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = icmp eq <4 x i32> %6, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i32>
  store <4 x i32> %9, <4 x i32>* %3, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  ret <4 x i32> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vceqzq_s64_wrapper(<2 x i64> %0) #1 {
  %2 = alloca <2 x i64>, align 16
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %4, align 16
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  store <2 x i64> %5, <2 x i64>* %2, align 16
  %6 = load <2 x i64>, <2 x i64>* %2, align 16
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = icmp eq <2 x i64> %6, zeroinitializer
  %9 = sext <2 x i1> %8 to <2 x i64>
  store <2 x i64> %9, <2 x i64>* %3, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  ret <2 x i64> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vceqzq_u64_wrapper(<2 x i64> %0) #1 {
  %2 = alloca <2 x i64>, align 16
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %4, align 16
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  store <2 x i64> %5, <2 x i64>* %2, align 16
  %6 = load <2 x i64>, <2 x i64>* %2, align 16
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = icmp eq <2 x i64> %6, zeroinitializer
  %9 = sext <2 x i1> %8 to <2 x i64>
  store <2 x i64> %9, <2 x i64>* %3, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  ret <2 x i64> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vceqz_s64_wrapper(<1 x i64> %0) #0 {
  %2 = alloca <1 x i64>, align 8
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %4, align 8
  %5 = load <1 x i64>, <1 x i64>* %4, align 8
  store <1 x i64> %5, <1 x i64>* %2, align 8
  %6 = load <1 x i64>, <1 x i64>* %2, align 8
  %7 = bitcast <1 x i64> %6 to <8 x i8>
  %8 = icmp eq <1 x i64> %6, zeroinitializer
  %9 = sext <1 x i1> %8 to <1 x i64>
  store <1 x i64> %9, <1 x i64>* %3, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  ret <1 x i64> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vceqz_u64_wrapper(<1 x i64> %0) #0 {
  %2 = alloca <1 x i64>, align 8
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %4, align 8
  %5 = load <1 x i64>, <1 x i64>* %4, align 8
  store <1 x i64> %5, <1 x i64>* %2, align 8
  %6 = load <1 x i64>, <1 x i64>* %2, align 8
  %7 = bitcast <1 x i64> %6 to <8 x i8>
  %8 = icmp eq <1 x i64> %6, zeroinitializer
  %9 = sext <1 x i1> %8 to <1 x i64>
  store <1 x i64> %9, <1 x i64>* %3, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  ret <1 x i64> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vceqzd_s64_wrapper(i64 %0) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  store i64 %5, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = icmp eq i64 %6, 0
  %8 = sext i1 %7 to i64
  store i64 %8, i64* %3, align 8
  %9 = load i64, i64* %3, align 8
  ret i64 %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vceqzd_u64_wrapper(i64 %0) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  store i64 %5, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = icmp eq i64 %6, 0
  %8 = sext i1 %7 to i64
  store i64 %8, i64* %3, align 8
  %9 = load i64, i64* %3, align 8
  ret i64 %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vcge_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = icmp sge <8 x i8> %10, %11
  %13 = sext <8 x i1> %12 to <8 x i8>
  store <8 x i8> %13, <8 x i8>* %5, align 8
  %14 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vcgeq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = icmp sge <16 x i8> %10, %11
  %13 = sext <16 x i1> %12 to <16 x i8>
  store <16 x i8> %13, <16 x i8>* %5, align 16
  %14 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vcge_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = icmp sge <4 x i16> %10, %11
  %13 = sext <4 x i1> %12 to <4 x i16>
  store <4 x i16> %13, <4 x i16>* %5, align 8
  %14 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vcgeq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = icmp sge <8 x i16> %10, %11
  %13 = sext <8 x i1> %12 to <8 x i16>
  store <8 x i16> %13, <8 x i16>* %5, align 16
  %14 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vcge_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = icmp sge <2 x i32> %10, %11
  %13 = sext <2 x i1> %12 to <2 x i32>
  store <2 x i32> %13, <2 x i32>* %5, align 8
  %14 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vcgeq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = icmp sge <4 x i32> %10, %11
  %13 = sext <4 x i1> %12 to <4 x i32>
  store <4 x i32> %13, <4 x i32>* %5, align 16
  %14 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vcgeq_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = icmp sge <2 x i64> %10, %11
  %13 = sext <2 x i1> %12 to <2 x i64>
  store <2 x i64> %13, <2 x i64>* %5, align 16
  %14 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vcle_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = icmp sle <8 x i8> %10, %11
  %13 = sext <8 x i1> %12 to <8 x i8>
  store <8 x i8> %13, <8 x i8>* %5, align 8
  %14 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vcleq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = icmp sle <16 x i8> %10, %11
  %13 = sext <16 x i1> %12 to <16 x i8>
  store <16 x i8> %13, <16 x i8>* %5, align 16
  %14 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vcle_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = icmp sle <4 x i16> %10, %11
  %13 = sext <4 x i1> %12 to <4 x i16>
  store <4 x i16> %13, <4 x i16>* %5, align 8
  %14 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vcleq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = icmp sle <8 x i16> %10, %11
  %13 = sext <8 x i1> %12 to <8 x i16>
  store <8 x i16> %13, <8 x i16>* %5, align 16
  %14 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vcle_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = icmp sle <2 x i32> %10, %11
  %13 = sext <2 x i1> %12 to <2 x i32>
  store <2 x i32> %13, <2 x i32>* %5, align 8
  %14 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vcleq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = icmp sle <4 x i32> %10, %11
  %13 = sext <4 x i1> %12 to <4 x i32>
  store <4 x i32> %13, <4 x i32>* %5, align 16
  %14 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vcleq_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = icmp sle <2 x i64> %10, %11
  %13 = sext <2 x i1> %12 to <2 x i64>
  store <2 x i64> %13, <2 x i64>* %5, align 16
  %14 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vcge_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = icmp uge <8 x i8> %10, %11
  %13 = sext <8 x i1> %12 to <8 x i8>
  store <8 x i8> %13, <8 x i8>* %5, align 8
  %14 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vcgeq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = icmp uge <16 x i8> %10, %11
  %13 = sext <16 x i1> %12 to <16 x i8>
  store <16 x i8> %13, <16 x i8>* %5, align 16
  %14 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vcge_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = icmp uge <4 x i16> %10, %11
  %13 = sext <4 x i1> %12 to <4 x i16>
  store <4 x i16> %13, <4 x i16>* %5, align 8
  %14 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vcgeq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = icmp uge <8 x i16> %10, %11
  %13 = sext <8 x i1> %12 to <8 x i16>
  store <8 x i16> %13, <8 x i16>* %5, align 16
  %14 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vcge_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = icmp uge <2 x i32> %10, %11
  %13 = sext <2 x i1> %12 to <2 x i32>
  store <2 x i32> %13, <2 x i32>* %5, align 8
  %14 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vcgeq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = icmp uge <4 x i32> %10, %11
  %13 = sext <4 x i1> %12 to <4 x i32>
  store <4 x i32> %13, <4 x i32>* %5, align 16
  %14 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vcgeq_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = icmp uge <2 x i64> %10, %11
  %13 = sext <2 x i1> %12 to <2 x i64>
  store <2 x i64> %13, <2 x i64>* %5, align 16
  %14 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vcle_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = icmp ule <8 x i8> %10, %11
  %13 = sext <8 x i1> %12 to <8 x i8>
  store <8 x i8> %13, <8 x i8>* %5, align 8
  %14 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vcleq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = icmp ule <16 x i8> %10, %11
  %13 = sext <16 x i1> %12 to <16 x i8>
  store <16 x i8> %13, <16 x i8>* %5, align 16
  %14 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vcle_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = icmp ule <4 x i16> %10, %11
  %13 = sext <4 x i1> %12 to <4 x i16>
  store <4 x i16> %13, <4 x i16>* %5, align 8
  %14 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vcleq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = icmp ule <8 x i16> %10, %11
  %13 = sext <8 x i1> %12 to <8 x i16>
  store <8 x i16> %13, <8 x i16>* %5, align 16
  %14 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vcle_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = icmp ule <2 x i32> %10, %11
  %13 = sext <2 x i1> %12 to <2 x i32>
  store <2 x i32> %13, <2 x i32>* %5, align 8
  %14 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vcleq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = icmp ule <4 x i32> %10, %11
  %13 = sext <4 x i1> %12 to <4 x i32>
  store <4 x i32> %13, <4 x i32>* %5, align 16
  %14 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vcleq_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = icmp ule <2 x i64> %10, %11
  %13 = sext <2 x i1> %12 to <2 x i64>
  store <2 x i64> %13, <2 x i64>* %5, align 16
  %14 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vcge_s64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = icmp sge <1 x i64> %10, %11
  %13 = sext <1 x i1> %12 to <1 x i64>
  store <1 x i64> %13, <1 x i64>* %5, align 8
  %14 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vcged_s64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = icmp sge i64 %10, %11
  %13 = sext i1 %12 to i64
  store i64 %13, i64* %5, align 8
  %14 = load i64, i64* %5, align 8
  ret i64 %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vcle_s64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = icmp sle <1 x i64> %10, %11
  %13 = sext <1 x i1> %12 to <1 x i64>
  store <1 x i64> %13, <1 x i64>* %5, align 8
  %14 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vcled_s64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = icmp sle i64 %10, %11
  %13 = sext i1 %12 to i64
  store i64 %13, i64* %5, align 8
  %14 = load i64, i64* %5, align 8
  ret i64 %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vcge_u64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = icmp uge <1 x i64> %10, %11
  %13 = sext <1 x i1> %12 to <1 x i64>
  store <1 x i64> %13, <1 x i64>* %5, align 8
  %14 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vcged_u64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = icmp uge i64 %10, %11
  %13 = sext i1 %12 to i64
  store i64 %13, i64* %5, align 8
  %14 = load i64, i64* %5, align 8
  ret i64 %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vcle_u64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = icmp ule <1 x i64> %10, %11
  %13 = sext <1 x i1> %12 to <1 x i64>
  store <1 x i64> %13, <1 x i64>* %5, align 8
  %14 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vcled_u64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = icmp ule i64 %10, %11
  %13 = sext i1 %12 to i64
  store i64 %13, i64* %5, align 8
  %14 = load i64, i64* %5, align 8
  ret i64 %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vcgez_s8_wrapper(<8 x i8> %0) #0 {
  %2 = alloca <8 x i8>, align 8
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %4, align 8
  %5 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %5, <8 x i8>* %2, align 8
  %6 = load <8 x i8>, <8 x i8>* %2, align 8
  %7 = icmp sge <8 x i8> %6, zeroinitializer
  %8 = sext <8 x i1> %7 to <8 x i8>
  store <8 x i8> %8, <8 x i8>* %3, align 8
  %9 = load <8 x i8>, <8 x i8>* %3, align 8
  ret <8 x i8> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vcgezq_s8_wrapper(<16 x i8> %0) #1 {
  %2 = alloca <16 x i8>, align 16
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %4, align 16
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  store <16 x i8> %5, <16 x i8>* %2, align 16
  %6 = load <16 x i8>, <16 x i8>* %2, align 16
  %7 = icmp sge <16 x i8> %6, zeroinitializer
  %8 = sext <16 x i1> %7 to <16 x i8>
  store <16 x i8> %8, <16 x i8>* %3, align 16
  %9 = load <16 x i8>, <16 x i8>* %3, align 16
  ret <16 x i8> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vcgez_s16_wrapper(<4 x i16> %0) #0 {
  %2 = alloca <4 x i16>, align 8
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %4, align 8
  %5 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %5, <4 x i16>* %2, align 8
  %6 = load <4 x i16>, <4 x i16>* %2, align 8
  %7 = bitcast <4 x i16> %6 to <8 x i8>
  %8 = icmp sge <4 x i16> %6, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i16>
  store <4 x i16> %9, <4 x i16>* %3, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  ret <4 x i16> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vcgezq_s16_wrapper(<8 x i16> %0) #1 {
  %2 = alloca <8 x i16>, align 16
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %4, align 16
  %5 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %5, <8 x i16>* %2, align 16
  %6 = load <8 x i16>, <8 x i16>* %2, align 16
  %7 = bitcast <8 x i16> %6 to <16 x i8>
  %8 = icmp sge <8 x i16> %6, zeroinitializer
  %9 = sext <8 x i1> %8 to <8 x i16>
  store <8 x i16> %9, <8 x i16>* %3, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  ret <8 x i16> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vcgez_s32_wrapper(<2 x i32> %0) #0 {
  %2 = alloca <2 x i32>, align 8
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %4, align 8
  %5 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %5, <2 x i32>* %2, align 8
  %6 = load <2 x i32>, <2 x i32>* %2, align 8
  %7 = bitcast <2 x i32> %6 to <8 x i8>
  %8 = icmp sge <2 x i32> %6, zeroinitializer
  %9 = sext <2 x i1> %8 to <2 x i32>
  store <2 x i32> %9, <2 x i32>* %3, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  ret <2 x i32> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vcgezq_s32_wrapper(<4 x i32> %0) #1 {
  %2 = alloca <4 x i32>, align 16
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %4, align 16
  %5 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %5, <4 x i32>* %2, align 16
  %6 = load <4 x i32>, <4 x i32>* %2, align 16
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = icmp sge <4 x i32> %6, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i32>
  store <4 x i32> %9, <4 x i32>* %3, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  ret <4 x i32> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vcgezq_s64_wrapper(<2 x i64> %0) #1 {
  %2 = alloca <2 x i64>, align 16
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %4, align 16
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  store <2 x i64> %5, <2 x i64>* %2, align 16
  %6 = load <2 x i64>, <2 x i64>* %2, align 16
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = icmp sge <2 x i64> %6, zeroinitializer
  %9 = sext <2 x i1> %8 to <2 x i64>
  store <2 x i64> %9, <2 x i64>* %3, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  ret <2 x i64> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vcgez_s64_wrapper(<1 x i64> %0) #0 {
  %2 = alloca <1 x i64>, align 8
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %4, align 8
  %5 = load <1 x i64>, <1 x i64>* %4, align 8
  store <1 x i64> %5, <1 x i64>* %2, align 8
  %6 = load <1 x i64>, <1 x i64>* %2, align 8
  %7 = bitcast <1 x i64> %6 to <8 x i8>
  %8 = icmp sge <1 x i64> %6, zeroinitializer
  %9 = sext <1 x i1> %8 to <1 x i64>
  store <1 x i64> %9, <1 x i64>* %3, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  ret <1 x i64> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vcgezd_s64_wrapper(i64 %0) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  store i64 %5, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = icmp sge i64 %6, 0
  %8 = sext i1 %7 to i64
  store i64 %8, i64* %3, align 8
  %9 = load i64, i64* %3, align 8
  ret i64 %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vclez_s8_wrapper(<8 x i8> %0) #0 {
  %2 = alloca <8 x i8>, align 8
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %4, align 8
  %5 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %5, <8 x i8>* %2, align 8
  %6 = load <8 x i8>, <8 x i8>* %2, align 8
  %7 = icmp sle <8 x i8> %6, zeroinitializer
  %8 = sext <8 x i1> %7 to <8 x i8>
  store <8 x i8> %8, <8 x i8>* %3, align 8
  %9 = load <8 x i8>, <8 x i8>* %3, align 8
  ret <8 x i8> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vclezq_s8_wrapper(<16 x i8> %0) #1 {
  %2 = alloca <16 x i8>, align 16
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %4, align 16
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  store <16 x i8> %5, <16 x i8>* %2, align 16
  %6 = load <16 x i8>, <16 x i8>* %2, align 16
  %7 = icmp sle <16 x i8> %6, zeroinitializer
  %8 = sext <16 x i1> %7 to <16 x i8>
  store <16 x i8> %8, <16 x i8>* %3, align 16
  %9 = load <16 x i8>, <16 x i8>* %3, align 16
  ret <16 x i8> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vclez_s16_wrapper(<4 x i16> %0) #0 {
  %2 = alloca <4 x i16>, align 8
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %4, align 8
  %5 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %5, <4 x i16>* %2, align 8
  %6 = load <4 x i16>, <4 x i16>* %2, align 8
  %7 = bitcast <4 x i16> %6 to <8 x i8>
  %8 = icmp sle <4 x i16> %6, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i16>
  store <4 x i16> %9, <4 x i16>* %3, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  ret <4 x i16> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vclezq_s16_wrapper(<8 x i16> %0) #1 {
  %2 = alloca <8 x i16>, align 16
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %4, align 16
  %5 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %5, <8 x i16>* %2, align 16
  %6 = load <8 x i16>, <8 x i16>* %2, align 16
  %7 = bitcast <8 x i16> %6 to <16 x i8>
  %8 = icmp sle <8 x i16> %6, zeroinitializer
  %9 = sext <8 x i1> %8 to <8 x i16>
  store <8 x i16> %9, <8 x i16>* %3, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  ret <8 x i16> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vclez_s32_wrapper(<2 x i32> %0) #0 {
  %2 = alloca <2 x i32>, align 8
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %4, align 8
  %5 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %5, <2 x i32>* %2, align 8
  %6 = load <2 x i32>, <2 x i32>* %2, align 8
  %7 = bitcast <2 x i32> %6 to <8 x i8>
  %8 = icmp sle <2 x i32> %6, zeroinitializer
  %9 = sext <2 x i1> %8 to <2 x i32>
  store <2 x i32> %9, <2 x i32>* %3, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  ret <2 x i32> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vclezq_s32_wrapper(<4 x i32> %0) #1 {
  %2 = alloca <4 x i32>, align 16
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %4, align 16
  %5 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %5, <4 x i32>* %2, align 16
  %6 = load <4 x i32>, <4 x i32>* %2, align 16
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = icmp sle <4 x i32> %6, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i32>
  store <4 x i32> %9, <4 x i32>* %3, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  ret <4 x i32> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vclezq_s64_wrapper(<2 x i64> %0) #1 {
  %2 = alloca <2 x i64>, align 16
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %4, align 16
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  store <2 x i64> %5, <2 x i64>* %2, align 16
  %6 = load <2 x i64>, <2 x i64>* %2, align 16
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = icmp sle <2 x i64> %6, zeroinitializer
  %9 = sext <2 x i1> %8 to <2 x i64>
  store <2 x i64> %9, <2 x i64>* %3, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  ret <2 x i64> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vclez_s64_wrapper(<1 x i64> %0) #0 {
  %2 = alloca <1 x i64>, align 8
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %4, align 8
  %5 = load <1 x i64>, <1 x i64>* %4, align 8
  store <1 x i64> %5, <1 x i64>* %2, align 8
  %6 = load <1 x i64>, <1 x i64>* %2, align 8
  %7 = bitcast <1 x i64> %6 to <8 x i8>
  %8 = icmp sle <1 x i64> %6, zeroinitializer
  %9 = sext <1 x i1> %8 to <1 x i64>
  store <1 x i64> %9, <1 x i64>* %3, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  ret <1 x i64> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vclezd_s64_wrapper(i64 %0) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  store i64 %5, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = icmp sle i64 %6, 0
  %8 = sext i1 %7 to i64
  store i64 %8, i64* %3, align 8
  %9 = load i64, i64* %3, align 8
  ret i64 %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vcgt_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = icmp sgt <8 x i8> %10, %11
  %13 = sext <8 x i1> %12 to <8 x i8>
  store <8 x i8> %13, <8 x i8>* %5, align 8
  %14 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vcgtq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = icmp sgt <16 x i8> %10, %11
  %13 = sext <16 x i1> %12 to <16 x i8>
  store <16 x i8> %13, <16 x i8>* %5, align 16
  %14 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vcgt_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = icmp sgt <4 x i16> %10, %11
  %13 = sext <4 x i1> %12 to <4 x i16>
  store <4 x i16> %13, <4 x i16>* %5, align 8
  %14 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vcgtq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = icmp sgt <8 x i16> %10, %11
  %13 = sext <8 x i1> %12 to <8 x i16>
  store <8 x i16> %13, <8 x i16>* %5, align 16
  %14 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vcgt_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = icmp sgt <2 x i32> %10, %11
  %13 = sext <2 x i1> %12 to <2 x i32>
  store <2 x i32> %13, <2 x i32>* %5, align 8
  %14 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vcgtq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = icmp sgt <4 x i32> %10, %11
  %13 = sext <4 x i1> %12 to <4 x i32>
  store <4 x i32> %13, <4 x i32>* %5, align 16
  %14 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vcgtq_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = icmp sgt <2 x i64> %10, %11
  %13 = sext <2 x i1> %12 to <2 x i64>
  store <2 x i64> %13, <2 x i64>* %5, align 16
  %14 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vclt_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = icmp slt <8 x i8> %10, %11
  %13 = sext <8 x i1> %12 to <8 x i8>
  store <8 x i8> %13, <8 x i8>* %5, align 8
  %14 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vcltq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = icmp slt <16 x i8> %10, %11
  %13 = sext <16 x i1> %12 to <16 x i8>
  store <16 x i8> %13, <16 x i8>* %5, align 16
  %14 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vclt_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = icmp slt <4 x i16> %10, %11
  %13 = sext <4 x i1> %12 to <4 x i16>
  store <4 x i16> %13, <4 x i16>* %5, align 8
  %14 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vcltq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = icmp slt <8 x i16> %10, %11
  %13 = sext <8 x i1> %12 to <8 x i16>
  store <8 x i16> %13, <8 x i16>* %5, align 16
  %14 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vclt_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = icmp slt <2 x i32> %10, %11
  %13 = sext <2 x i1> %12 to <2 x i32>
  store <2 x i32> %13, <2 x i32>* %5, align 8
  %14 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vcltq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = icmp slt <4 x i32> %10, %11
  %13 = sext <4 x i1> %12 to <4 x i32>
  store <4 x i32> %13, <4 x i32>* %5, align 16
  %14 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vcltq_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = icmp slt <2 x i64> %10, %11
  %13 = sext <2 x i1> %12 to <2 x i64>
  store <2 x i64> %13, <2 x i64>* %5, align 16
  %14 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vcgt_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = icmp ugt <8 x i8> %10, %11
  %13 = sext <8 x i1> %12 to <8 x i8>
  store <8 x i8> %13, <8 x i8>* %5, align 8
  %14 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vcgtq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = icmp ugt <16 x i8> %10, %11
  %13 = sext <16 x i1> %12 to <16 x i8>
  store <16 x i8> %13, <16 x i8>* %5, align 16
  %14 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vcgt_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = icmp ugt <4 x i16> %10, %11
  %13 = sext <4 x i1> %12 to <4 x i16>
  store <4 x i16> %13, <4 x i16>* %5, align 8
  %14 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vcgtq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = icmp ugt <8 x i16> %10, %11
  %13 = sext <8 x i1> %12 to <8 x i16>
  store <8 x i16> %13, <8 x i16>* %5, align 16
  %14 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vcgt_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = icmp ugt <2 x i32> %10, %11
  %13 = sext <2 x i1> %12 to <2 x i32>
  store <2 x i32> %13, <2 x i32>* %5, align 8
  %14 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vcgtq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = icmp ugt <4 x i32> %10, %11
  %13 = sext <4 x i1> %12 to <4 x i32>
  store <4 x i32> %13, <4 x i32>* %5, align 16
  %14 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vcgtq_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = icmp ugt <2 x i64> %10, %11
  %13 = sext <2 x i1> %12 to <2 x i64>
  store <2 x i64> %13, <2 x i64>* %5, align 16
  %14 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vclt_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = icmp ult <8 x i8> %10, %11
  %13 = sext <8 x i1> %12 to <8 x i8>
  store <8 x i8> %13, <8 x i8>* %5, align 8
  %14 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vcltq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = icmp ult <16 x i8> %10, %11
  %13 = sext <16 x i1> %12 to <16 x i8>
  store <16 x i8> %13, <16 x i8>* %5, align 16
  %14 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vclt_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = icmp ult <4 x i16> %10, %11
  %13 = sext <4 x i1> %12 to <4 x i16>
  store <4 x i16> %13, <4 x i16>* %5, align 8
  %14 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vcltq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = icmp ult <8 x i16> %10, %11
  %13 = sext <8 x i1> %12 to <8 x i16>
  store <8 x i16> %13, <8 x i16>* %5, align 16
  %14 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vclt_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = icmp ult <2 x i32> %10, %11
  %13 = sext <2 x i1> %12 to <2 x i32>
  store <2 x i32> %13, <2 x i32>* %5, align 8
  %14 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vcltq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = icmp ult <4 x i32> %10, %11
  %13 = sext <4 x i1> %12 to <4 x i32>
  store <4 x i32> %13, <4 x i32>* %5, align 16
  %14 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vcltq_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = icmp ult <2 x i64> %10, %11
  %13 = sext <2 x i1> %12 to <2 x i64>
  store <2 x i64> %13, <2 x i64>* %5, align 16
  %14 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vcgt_s64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = icmp sgt <1 x i64> %10, %11
  %13 = sext <1 x i1> %12 to <1 x i64>
  store <1 x i64> %13, <1 x i64>* %5, align 8
  %14 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vcgtd_s64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = icmp sgt i64 %10, %11
  %13 = sext i1 %12 to i64
  store i64 %13, i64* %5, align 8
  %14 = load i64, i64* %5, align 8
  ret i64 %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vclt_s64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = icmp slt <1 x i64> %10, %11
  %13 = sext <1 x i1> %12 to <1 x i64>
  store <1 x i64> %13, <1 x i64>* %5, align 8
  %14 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vcltd_s64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = icmp slt i64 %10, %11
  %13 = sext i1 %12 to i64
  store i64 %13, i64* %5, align 8
  %14 = load i64, i64* %5, align 8
  ret i64 %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vcgt_u64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = icmp ugt <1 x i64> %10, %11
  %13 = sext <1 x i1> %12 to <1 x i64>
  store <1 x i64> %13, <1 x i64>* %5, align 8
  %14 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vcgtd_u64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = icmp ugt i64 %10, %11
  %13 = sext i1 %12 to i64
  store i64 %13, i64* %5, align 8
  %14 = load i64, i64* %5, align 8
  ret i64 %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vclt_u64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = icmp ult <1 x i64> %10, %11
  %13 = sext <1 x i1> %12 to <1 x i64>
  store <1 x i64> %13, <1 x i64>* %5, align 8
  %14 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vcltd_u64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = icmp ult i64 %10, %11
  %13 = sext i1 %12 to i64
  store i64 %13, i64* %5, align 8
  %14 = load i64, i64* %5, align 8
  ret i64 %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vcgtz_s8_wrapper(<8 x i8> %0) #0 {
  %2 = alloca <8 x i8>, align 8
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %4, align 8
  %5 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %5, <8 x i8>* %2, align 8
  %6 = load <8 x i8>, <8 x i8>* %2, align 8
  %7 = icmp sgt <8 x i8> %6, zeroinitializer
  %8 = sext <8 x i1> %7 to <8 x i8>
  store <8 x i8> %8, <8 x i8>* %3, align 8
  %9 = load <8 x i8>, <8 x i8>* %3, align 8
  ret <8 x i8> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vcgtzq_s8_wrapper(<16 x i8> %0) #1 {
  %2 = alloca <16 x i8>, align 16
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %4, align 16
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  store <16 x i8> %5, <16 x i8>* %2, align 16
  %6 = load <16 x i8>, <16 x i8>* %2, align 16
  %7 = icmp sgt <16 x i8> %6, zeroinitializer
  %8 = sext <16 x i1> %7 to <16 x i8>
  store <16 x i8> %8, <16 x i8>* %3, align 16
  %9 = load <16 x i8>, <16 x i8>* %3, align 16
  ret <16 x i8> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vcgtz_s16_wrapper(<4 x i16> %0) #0 {
  %2 = alloca <4 x i16>, align 8
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %4, align 8
  %5 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %5, <4 x i16>* %2, align 8
  %6 = load <4 x i16>, <4 x i16>* %2, align 8
  %7 = bitcast <4 x i16> %6 to <8 x i8>
  %8 = icmp sgt <4 x i16> %6, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i16>
  store <4 x i16> %9, <4 x i16>* %3, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  ret <4 x i16> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vcgtzq_s16_wrapper(<8 x i16> %0) #1 {
  %2 = alloca <8 x i16>, align 16
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %4, align 16
  %5 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %5, <8 x i16>* %2, align 16
  %6 = load <8 x i16>, <8 x i16>* %2, align 16
  %7 = bitcast <8 x i16> %6 to <16 x i8>
  %8 = icmp sgt <8 x i16> %6, zeroinitializer
  %9 = sext <8 x i1> %8 to <8 x i16>
  store <8 x i16> %9, <8 x i16>* %3, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  ret <8 x i16> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vcgtz_s32_wrapper(<2 x i32> %0) #0 {
  %2 = alloca <2 x i32>, align 8
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %4, align 8
  %5 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %5, <2 x i32>* %2, align 8
  %6 = load <2 x i32>, <2 x i32>* %2, align 8
  %7 = bitcast <2 x i32> %6 to <8 x i8>
  %8 = icmp sgt <2 x i32> %6, zeroinitializer
  %9 = sext <2 x i1> %8 to <2 x i32>
  store <2 x i32> %9, <2 x i32>* %3, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  ret <2 x i32> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vcgtzq_s32_wrapper(<4 x i32> %0) #1 {
  %2 = alloca <4 x i32>, align 16
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %4, align 16
  %5 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %5, <4 x i32>* %2, align 16
  %6 = load <4 x i32>, <4 x i32>* %2, align 16
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = icmp sgt <4 x i32> %6, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i32>
  store <4 x i32> %9, <4 x i32>* %3, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  ret <4 x i32> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vcgtzq_s64_wrapper(<2 x i64> %0) #1 {
  %2 = alloca <2 x i64>, align 16
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %4, align 16
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  store <2 x i64> %5, <2 x i64>* %2, align 16
  %6 = load <2 x i64>, <2 x i64>* %2, align 16
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = icmp sgt <2 x i64> %6, zeroinitializer
  %9 = sext <2 x i1> %8 to <2 x i64>
  store <2 x i64> %9, <2 x i64>* %3, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  ret <2 x i64> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vcgtz_s64_wrapper(<1 x i64> %0) #0 {
  %2 = alloca <1 x i64>, align 8
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %4, align 8
  %5 = load <1 x i64>, <1 x i64>* %4, align 8
  store <1 x i64> %5, <1 x i64>* %2, align 8
  %6 = load <1 x i64>, <1 x i64>* %2, align 8
  %7 = bitcast <1 x i64> %6 to <8 x i8>
  %8 = icmp sgt <1 x i64> %6, zeroinitializer
  %9 = sext <1 x i1> %8 to <1 x i64>
  store <1 x i64> %9, <1 x i64>* %3, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  ret <1 x i64> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vcgtzd_s64_wrapper(i64 %0) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  store i64 %5, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = icmp sgt i64 %6, 0
  %8 = sext i1 %7 to i64
  store i64 %8, i64* %3, align 8
  %9 = load i64, i64* %3, align 8
  ret i64 %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vcltz_s8_wrapper(<8 x i8> %0) #0 {
  %2 = alloca <8 x i8>, align 8
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %4, align 8
  %5 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %5, <8 x i8>* %2, align 8
  %6 = load <8 x i8>, <8 x i8>* %2, align 8
  %7 = icmp slt <8 x i8> %6, zeroinitializer
  %8 = sext <8 x i1> %7 to <8 x i8>
  store <8 x i8> %8, <8 x i8>* %3, align 8
  %9 = load <8 x i8>, <8 x i8>* %3, align 8
  ret <8 x i8> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vcltzq_s8_wrapper(<16 x i8> %0) #1 {
  %2 = alloca <16 x i8>, align 16
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %4, align 16
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  store <16 x i8> %5, <16 x i8>* %2, align 16
  %6 = load <16 x i8>, <16 x i8>* %2, align 16
  %7 = icmp slt <16 x i8> %6, zeroinitializer
  %8 = sext <16 x i1> %7 to <16 x i8>
  store <16 x i8> %8, <16 x i8>* %3, align 16
  %9 = load <16 x i8>, <16 x i8>* %3, align 16
  ret <16 x i8> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vcltz_s16_wrapper(<4 x i16> %0) #0 {
  %2 = alloca <4 x i16>, align 8
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %4, align 8
  %5 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %5, <4 x i16>* %2, align 8
  %6 = load <4 x i16>, <4 x i16>* %2, align 8
  %7 = bitcast <4 x i16> %6 to <8 x i8>
  %8 = icmp slt <4 x i16> %6, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i16>
  store <4 x i16> %9, <4 x i16>* %3, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  ret <4 x i16> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vcltzq_s16_wrapper(<8 x i16> %0) #1 {
  %2 = alloca <8 x i16>, align 16
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %4, align 16
  %5 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %5, <8 x i16>* %2, align 16
  %6 = load <8 x i16>, <8 x i16>* %2, align 16
  %7 = bitcast <8 x i16> %6 to <16 x i8>
  %8 = icmp slt <8 x i16> %6, zeroinitializer
  %9 = sext <8 x i1> %8 to <8 x i16>
  store <8 x i16> %9, <8 x i16>* %3, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  ret <8 x i16> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vcltz_s32_wrapper(<2 x i32> %0) #0 {
  %2 = alloca <2 x i32>, align 8
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %4, align 8
  %5 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %5, <2 x i32>* %2, align 8
  %6 = load <2 x i32>, <2 x i32>* %2, align 8
  %7 = bitcast <2 x i32> %6 to <8 x i8>
  %8 = icmp slt <2 x i32> %6, zeroinitializer
  %9 = sext <2 x i1> %8 to <2 x i32>
  store <2 x i32> %9, <2 x i32>* %3, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  ret <2 x i32> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vcltzq_s32_wrapper(<4 x i32> %0) #1 {
  %2 = alloca <4 x i32>, align 16
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %4, align 16
  %5 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %5, <4 x i32>* %2, align 16
  %6 = load <4 x i32>, <4 x i32>* %2, align 16
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = icmp slt <4 x i32> %6, zeroinitializer
  %9 = sext <4 x i1> %8 to <4 x i32>
  store <4 x i32> %9, <4 x i32>* %3, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  ret <4 x i32> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vcltzq_s64_wrapper(<2 x i64> %0) #1 {
  %2 = alloca <2 x i64>, align 16
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %4, align 16
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  store <2 x i64> %5, <2 x i64>* %2, align 16
  %6 = load <2 x i64>, <2 x i64>* %2, align 16
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = icmp slt <2 x i64> %6, zeroinitializer
  %9 = sext <2 x i1> %8 to <2 x i64>
  store <2 x i64> %9, <2 x i64>* %3, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  ret <2 x i64> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vcltz_s64_wrapper(<1 x i64> %0) #0 {
  %2 = alloca <1 x i64>, align 8
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %4, align 8
  %5 = load <1 x i64>, <1 x i64>* %4, align 8
  store <1 x i64> %5, <1 x i64>* %2, align 8
  %6 = load <1 x i64>, <1 x i64>* %2, align 8
  %7 = bitcast <1 x i64> %6 to <8 x i8>
  %8 = icmp slt <1 x i64> %6, zeroinitializer
  %9 = sext <1 x i1> %8 to <1 x i64>
  store <1 x i64> %9, <1 x i64>* %3, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  ret <1 x i64> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vcltzd_s64_wrapper(i64 %0) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  store i64 %5, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = icmp slt i64 %6, 0
  %8 = sext i1 %7 to i64
  store i64 %8, i64* %3, align 8
  %9 = load i64, i64* %3, align 8
  ret i64 %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vtst_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = and <8 x i8> %10, %11
  %13 = icmp ne <8 x i8> %12, zeroinitializer
  %14 = sext <8 x i1> %13 to <8 x i8>
  store <8 x i8> %14, <8 x i8>* %5, align 8
  %15 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vtstq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = and <16 x i8> %10, %11
  %13 = icmp ne <16 x i8> %12, zeroinitializer
  %14 = sext <16 x i1> %13 to <16 x i8>
  store <16 x i8> %14, <16 x i8>* %5, align 16
  %15 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vtst_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = and <4 x i16> %10, %12
  %15 = icmp ne <4 x i16> %14, zeroinitializer
  %16 = sext <4 x i1> %15 to <4 x i16>
  store <4 x i16> %16, <4 x i16>* %5, align 8
  %17 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vtstq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = and <8 x i16> %10, %12
  %15 = icmp ne <8 x i16> %14, zeroinitializer
  %16 = sext <8 x i1> %15 to <8 x i16>
  store <8 x i16> %16, <8 x i16>* %5, align 16
  %17 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vtst_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = and <2 x i32> %10, %12
  %15 = icmp ne <2 x i32> %14, zeroinitializer
  %16 = sext <2 x i1> %15 to <2 x i32>
  store <2 x i32> %16, <2 x i32>* %5, align 8
  %17 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vtstq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = and <4 x i32> %10, %12
  %15 = icmp ne <4 x i32> %14, zeroinitializer
  %16 = sext <4 x i1> %15 to <4 x i32>
  store <4 x i32> %16, <4 x i32>* %5, align 16
  %17 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vtst_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = and <8 x i8> %10, %11
  %13 = icmp ne <8 x i8> %12, zeroinitializer
  %14 = sext <8 x i1> %13 to <8 x i8>
  store <8 x i8> %14, <8 x i8>* %5, align 8
  %15 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vtstq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = and <16 x i8> %10, %11
  %13 = icmp ne <16 x i8> %12, zeroinitializer
  %14 = sext <16 x i1> %13 to <16 x i8>
  store <16 x i8> %14, <16 x i8>* %5, align 16
  %15 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vtst_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = and <4 x i16> %10, %12
  %15 = icmp ne <4 x i16> %14, zeroinitializer
  %16 = sext <4 x i1> %15 to <4 x i16>
  store <4 x i16> %16, <4 x i16>* %5, align 8
  %17 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vtstq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = and <8 x i16> %10, %12
  %15 = icmp ne <8 x i16> %14, zeroinitializer
  %16 = sext <8 x i1> %15 to <8 x i16>
  store <8 x i16> %16, <8 x i16>* %5, align 16
  %17 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vtst_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = and <2 x i32> %10, %12
  %15 = icmp ne <2 x i32> %14, zeroinitializer
  %16 = sext <2 x i1> %15 to <2 x i32>
  store <2 x i32> %16, <2 x i32>* %5, align 8
  %17 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vtstq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = and <4 x i32> %10, %12
  %15 = icmp ne <4 x i32> %14, zeroinitializer
  %16 = sext <4 x i1> %15 to <4 x i32>
  store <4 x i32> %16, <4 x i32>* %5, align 16
  %17 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vtstq_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = and <2 x i64> %10, %12
  %15 = icmp ne <2 x i64> %14, zeroinitializer
  %16 = sext <2 x i1> %15 to <2 x i64>
  store <2 x i64> %16, <2 x i64>* %5, align 16
  %17 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vtstq_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = and <2 x i64> %10, %12
  %15 = icmp ne <2 x i64> %14, zeroinitializer
  %16 = sext <2 x i1> %15 to <2 x i64>
  store <2 x i64> %16, <2 x i64>* %5, align 16
  %17 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vtst_s64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = bitcast <1 x i64> %10 to <8 x i8>
  %12 = load <1 x i64>, <1 x i64>* %4, align 8
  %13 = bitcast <1 x i64> %12 to <8 x i8>
  %14 = and <1 x i64> %10, %12
  %15 = icmp ne <1 x i64> %14, zeroinitializer
  %16 = sext <1 x i1> %15 to <1 x i64>
  store <1 x i64> %16, <1 x i64>* %5, align 8
  %17 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vtst_u64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = bitcast <1 x i64> %10 to <8 x i8>
  %12 = load <1 x i64>, <1 x i64>* %4, align 8
  %13 = bitcast <1 x i64> %12 to <8 x i8>
  %14 = and <1 x i64> %10, %12
  %15 = icmp ne <1 x i64> %14, zeroinitializer
  %16 = sext <1 x i1> %15 to <1 x i64>
  store <1 x i64> %16, <1 x i64>* %5, align 8
  %17 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vtstd_s64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = and i64 %10, %11
  %13 = icmp ne i64 %12, 0
  %14 = sext i1 %13 to i64
  store i64 %14, i64* %5, align 8
  %15 = load i64, i64* %5, align 8
  ret i64 %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vtstd_u64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = and i64 %10, %11
  %13 = icmp ne i64 %12, 0
  %14 = sext i1 %13 to i64
  store i64 %14, i64* %5, align 8
  %15 = load i64, i64* %5, align 8
  ret i64 %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vmax_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.smax.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vmaxq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.smax.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmax_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.smax.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %15 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmaxq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.smax.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %15 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmax_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.smax.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %15 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmaxq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %15 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vmax_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.umax.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vmaxq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmax_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.umax.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %15 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmaxq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.umax.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %15 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmax_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.umax.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %15 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmaxq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.umax.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %15 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vmin_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.smin.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vminq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.smin.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmin_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.smin.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %15 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vminq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.smin.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %15 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmin_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.smin.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %15 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vminq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %15 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vmin_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.umin.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vminq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.umin.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmin_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.umin.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %15 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vminq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %15 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmin_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.umin.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %15 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vminq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.umin.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %15 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vshl_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.sshl.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vshlq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.sshl.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vshl_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.sshl.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vshlq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.sshl.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vshl_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.sshl.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vshlq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.sshl.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vshlq_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = call <2 x i64> @llvm.aarch64.neon.sshl.v2i64(<2 x i64> %10, <2 x i64> %12) #4
  %15 = bitcast <2 x i64> %14 to <16 x i8>
  store <2 x i64> %14, <2 x i64>* %5, align 16
  %16 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vshl_s64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = bitcast <1 x i64> %10 to <8 x i8>
  %12 = load <1 x i64>, <1 x i64>* %4, align 8
  %13 = bitcast <1 x i64> %12 to <8 x i8>
  %14 = call <1 x i64> @llvm.aarch64.neon.sshl.v1i64(<1 x i64> %10, <1 x i64> %12) #4
  %15 = bitcast <1 x i64> %14 to <8 x i8>
  store <1 x i64> %14, <1 x i64>* %5, align 8
  %16 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vshld_s64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = call i64 @llvm.aarch64.neon.sshl.i64(i64 %10, i64 %11) #4
  store i64 %12, i64* %5, align 8
  %13 = load i64, i64* %5, align 8
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vshl_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.ushl.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vshlq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.ushl.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vshl_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.ushl.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vshlq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.ushl.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vshl_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.ushl.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vshlq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.ushl.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vshlq_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = call <2 x i64> @llvm.aarch64.neon.ushl.v2i64(<2 x i64> %10, <2 x i64> %12) #4
  %15 = bitcast <2 x i64> %14 to <16 x i8>
  store <2 x i64> %14, <2 x i64>* %5, align 16
  %16 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vshl_u64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = bitcast <1 x i64> %10 to <8 x i8>
  %12 = load <1 x i64>, <1 x i64>* %4, align 8
  %13 = bitcast <1 x i64> %12 to <8 x i8>
  %14 = call <1 x i64> @llvm.aarch64.neon.ushl.v1i64(<1 x i64> %10, <1 x i64> %12) #4
  %15 = bitcast <1 x i64> %14 to <8 x i8>
  store <1 x i64> %14, <1 x i64>* %5, align 8
  %16 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vshld_u64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = call i64 @llvm.aarch64.neon.ushl.i64(i64 %10, i64 %11) #4
  store i64 %12, i64* %5, align 8
  %13 = load i64, i64* %5, align 8
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vqshl_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.sqshl.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vqshlq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.sqshl.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vqshl_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.sqshl.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vqshlq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.sqshl.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vqshl_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.sqshl.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqshlq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.sqshl.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqshlq_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = call <2 x i64> @llvm.aarch64.neon.sqshl.v2i64(<2 x i64> %10, <2 x i64> %12) #4
  %15 = bitcast <2 x i64> %14 to <16 x i8>
  store <2 x i64> %14, <2 x i64>* %5, align 16
  %16 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vqshl_s64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = bitcast <1 x i64> %10 to <8 x i8>
  %12 = load <1 x i64>, <1 x i64>* %4, align 8
  %13 = bitcast <1 x i64> %12 to <8 x i8>
  %14 = call <1 x i64> @llvm.aarch64.neon.sqshl.v1i64(<1 x i64> %10, <1 x i64> %12) #4
  %15 = bitcast <1 x i64> %14 to <8 x i8>
  store <1 x i64> %14, <1 x i64>* %5, align 8
  %16 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define signext i8 @vqshlb_s8_wrapper(i8 signext %0, i8 signext %1) #2 {
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8 %0, i8* %6, align 1
  store i8 %1, i8* %7, align 1
  %8 = load i8, i8* %6, align 1
  %9 = load i8, i8* %7, align 1
  store i8 %8, i8* %3, align 1
  store i8 %9, i8* %4, align 1
  %10 = load i8, i8* %3, align 1
  %11 = load i8, i8* %4, align 1
  %12 = insertelement <8 x i8> undef, i8 %10, i64 0
  %13 = insertelement <8 x i8> undef, i8 %11, i64 0
  %14 = call <8 x i8> @llvm.aarch64.neon.sqshl.v8i8(<8 x i8> %12, <8 x i8> %13) #4
  %15 = extractelement <8 x i8> %14, i64 0
  store i8 %15, i8* %5, align 1
  %16 = load i8, i8* %5, align 1
  ret i8 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define signext i16 @vqshlh_s16_wrapper(i16 signext %0, i16 signext %1) #2 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  store i16 %0, i16* %6, align 2
  store i16 %1, i16* %7, align 2
  %8 = load i16, i16* %6, align 2
  %9 = load i16, i16* %7, align 2
  store i16 %8, i16* %3, align 2
  store i16 %9, i16* %4, align 2
  %10 = load i16, i16* %3, align 2
  %11 = load i16, i16* %4, align 2
  %12 = insertelement <4 x i16> undef, i16 %10, i64 0
  %13 = insertelement <4 x i16> undef, i16 %11, i64 0
  %14 = call <4 x i16> @llvm.aarch64.neon.sqshl.v4i16(<4 x i16> %12, <4 x i16> %13) #4
  %15 = extractelement <4 x i16> %14, i64 0
  store i16 %15, i16* %5, align 2
  %16 = load i16, i16* %5, align 2
  ret i16 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @vqshls_s32_wrapper(i32 %0, i32 %1) #2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  %8 = load i32, i32* %6, align 4
  %9 = load i32, i32* %7, align 4
  store i32 %8, i32* %3, align 4
  store i32 %9, i32* %4, align 4
  %10 = load i32, i32* %3, align 4
  %11 = load i32, i32* %4, align 4
  %12 = call i32 @llvm.aarch64.neon.sqshl.i32(i32 %10, i32 %11) #4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %5, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vqshld_s64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = call i64 @llvm.aarch64.neon.sqshl.i64(i64 %10, i64 %11) #4
  store i64 %12, i64* %5, align 8
  %13 = load i64, i64* %5, align 8
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vqshl_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.uqshl.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vqshlq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.uqshl.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vqshl_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.uqshl.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vqshlq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.uqshl.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vqshl_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.uqshl.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqshlq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.uqshl.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqshlq_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = call <2 x i64> @llvm.aarch64.neon.uqshl.v2i64(<2 x i64> %10, <2 x i64> %12) #4
  %15 = bitcast <2 x i64> %14 to <16 x i8>
  store <2 x i64> %14, <2 x i64>* %5, align 16
  %16 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vqshl_u64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = bitcast <1 x i64> %10 to <8 x i8>
  %12 = load <1 x i64>, <1 x i64>* %4, align 8
  %13 = bitcast <1 x i64> %12 to <8 x i8>
  %14 = call <1 x i64> @llvm.aarch64.neon.uqshl.v1i64(<1 x i64> %10, <1 x i64> %12) #4
  %15 = bitcast <1 x i64> %14 to <8 x i8>
  store <1 x i64> %14, <1 x i64>* %5, align 8
  %16 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define zeroext i8 @vqshlb_u8_wrapper(i8 zeroext %0, i8 signext %1) #2 {
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8 %0, i8* %6, align 1
  store i8 %1, i8* %7, align 1
  %8 = load i8, i8* %6, align 1
  %9 = load i8, i8* %7, align 1
  store i8 %8, i8* %3, align 1
  store i8 %9, i8* %4, align 1
  %10 = load i8, i8* %3, align 1
  %11 = load i8, i8* %4, align 1
  %12 = insertelement <8 x i8> undef, i8 %10, i64 0
  %13 = insertelement <8 x i8> undef, i8 %11, i64 0
  %14 = call <8 x i8> @llvm.aarch64.neon.uqshl.v8i8(<8 x i8> %12, <8 x i8> %13) #4
  %15 = extractelement <8 x i8> %14, i64 0
  store i8 %15, i8* %5, align 1
  %16 = load i8, i8* %5, align 1
  ret i8 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define zeroext i16 @vqshlh_u16_wrapper(i16 zeroext %0, i16 signext %1) #2 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  store i16 %0, i16* %6, align 2
  store i16 %1, i16* %7, align 2
  %8 = load i16, i16* %6, align 2
  %9 = load i16, i16* %7, align 2
  store i16 %8, i16* %3, align 2
  store i16 %9, i16* %4, align 2
  %10 = load i16, i16* %3, align 2
  %11 = load i16, i16* %4, align 2
  %12 = insertelement <4 x i16> undef, i16 %10, i64 0
  %13 = insertelement <4 x i16> undef, i16 %11, i64 0
  %14 = call <4 x i16> @llvm.aarch64.neon.uqshl.v4i16(<4 x i16> %12, <4 x i16> %13) #4
  %15 = extractelement <4 x i16> %14, i64 0
  store i16 %15, i16* %5, align 2
  %16 = load i16, i16* %5, align 2
  ret i16 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @vqshls_u32_wrapper(i32 %0, i32 %1) #2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  %8 = load i32, i32* %6, align 4
  %9 = load i32, i32* %7, align 4
  store i32 %8, i32* %3, align 4
  store i32 %9, i32* %4, align 4
  %10 = load i32, i32* %3, align 4
  %11 = load i32, i32* %4, align 4
  %12 = call i32 @llvm.aarch64.neon.uqshl.i32(i32 %10, i32 %11) #4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %5, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vqshld_u64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = call i64 @llvm.aarch64.neon.uqshl.i64(i64 %10, i64 %11) #4
  store i64 %12, i64* %5, align 8
  %13 = load i64, i64* %5, align 8
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vrshl_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.srshl.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vrshlq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.srshl.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vrshl_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.srshl.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vrshlq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.srshl.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vrshl_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.srshl.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vrshlq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vrshlq_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = call <2 x i64> @llvm.aarch64.neon.srshl.v2i64(<2 x i64> %10, <2 x i64> %12) #4
  %15 = bitcast <2 x i64> %14 to <16 x i8>
  store <2 x i64> %14, <2 x i64>* %5, align 16
  %16 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vrshl_s64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = bitcast <1 x i64> %10 to <8 x i8>
  %12 = load <1 x i64>, <1 x i64>* %4, align 8
  %13 = bitcast <1 x i64> %12 to <8 x i8>
  %14 = call <1 x i64> @llvm.aarch64.neon.srshl.v1i64(<1 x i64> %10, <1 x i64> %12) #4
  %15 = bitcast <1 x i64> %14 to <8 x i8>
  store <1 x i64> %14, <1 x i64>* %5, align 8
  %16 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vrshld_s64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = call i64 @llvm.aarch64.neon.srshl.i64(i64 %10, i64 %11) #4
  store i64 %12, i64* %5, align 8
  %13 = load i64, i64* %5, align 8
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vrshl_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.urshl.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vrshlq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.urshl.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vrshl_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.urshl.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vrshlq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.urshl.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vrshl_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.urshl.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vrshlq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.urshl.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vrshlq_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = call <2 x i64> @llvm.aarch64.neon.urshl.v2i64(<2 x i64> %10, <2 x i64> %12) #4
  %15 = bitcast <2 x i64> %14 to <16 x i8>
  store <2 x i64> %14, <2 x i64>* %5, align 16
  %16 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vrshl_u64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = bitcast <1 x i64> %10 to <8 x i8>
  %12 = load <1 x i64>, <1 x i64>* %4, align 8
  %13 = bitcast <1 x i64> %12 to <8 x i8>
  %14 = call <1 x i64> @llvm.aarch64.neon.urshl.v1i64(<1 x i64> %10, <1 x i64> %12) #4
  %15 = bitcast <1 x i64> %14 to <8 x i8>
  store <1 x i64> %14, <1 x i64>* %5, align 8
  %16 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vrshld_u64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = call i64 @llvm.aarch64.neon.urshl.i64(i64 %10, i64 %11) #4
  store i64 %12, i64* %5, align 8
  %13 = load i64, i64* %5, align 8
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vqrshl_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.sqrshl.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vqrshlq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.sqrshl.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vqrshl_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.sqrshl.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vqrshlq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.sqrshl.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vqrshl_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.sqrshl.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqrshlq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.sqrshl.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqrshlq_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = call <2 x i64> @llvm.aarch64.neon.sqrshl.v2i64(<2 x i64> %10, <2 x i64> %12) #4
  %15 = bitcast <2 x i64> %14 to <16 x i8>
  store <2 x i64> %14, <2 x i64>* %5, align 16
  %16 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vqrshl_s64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = bitcast <1 x i64> %10 to <8 x i8>
  %12 = load <1 x i64>, <1 x i64>* %4, align 8
  %13 = bitcast <1 x i64> %12 to <8 x i8>
  %14 = call <1 x i64> @llvm.aarch64.neon.sqrshl.v1i64(<1 x i64> %10, <1 x i64> %12) #4
  %15 = bitcast <1 x i64> %14 to <8 x i8>
  store <1 x i64> %14, <1 x i64>* %5, align 8
  %16 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define signext i8 @vqrshlb_s8_wrapper(i8 signext %0, i8 signext %1) #2 {
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8 %0, i8* %6, align 1
  store i8 %1, i8* %7, align 1
  %8 = load i8, i8* %6, align 1
  %9 = load i8, i8* %7, align 1
  store i8 %8, i8* %3, align 1
  store i8 %9, i8* %4, align 1
  %10 = load i8, i8* %3, align 1
  %11 = load i8, i8* %4, align 1
  %12 = insertelement <8 x i8> undef, i8 %10, i64 0
  %13 = insertelement <8 x i8> undef, i8 %11, i64 0
  %14 = call <8 x i8> @llvm.aarch64.neon.sqrshl.v8i8(<8 x i8> %12, <8 x i8> %13) #4
  %15 = extractelement <8 x i8> %14, i64 0
  store i8 %15, i8* %5, align 1
  %16 = load i8, i8* %5, align 1
  ret i8 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define signext i16 @vqrshlh_s16_wrapper(i16 signext %0, i16 signext %1) #2 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  store i16 %0, i16* %6, align 2
  store i16 %1, i16* %7, align 2
  %8 = load i16, i16* %6, align 2
  %9 = load i16, i16* %7, align 2
  store i16 %8, i16* %3, align 2
  store i16 %9, i16* %4, align 2
  %10 = load i16, i16* %3, align 2
  %11 = load i16, i16* %4, align 2
  %12 = insertelement <4 x i16> undef, i16 %10, i64 0
  %13 = insertelement <4 x i16> undef, i16 %11, i64 0
  %14 = call <4 x i16> @llvm.aarch64.neon.sqrshl.v4i16(<4 x i16> %12, <4 x i16> %13) #4
  %15 = extractelement <4 x i16> %14, i64 0
  store i16 %15, i16* %5, align 2
  %16 = load i16, i16* %5, align 2
  ret i16 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @vqrshls_s32_wrapper(i32 %0, i32 %1) #2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  %8 = load i32, i32* %6, align 4
  %9 = load i32, i32* %7, align 4
  store i32 %8, i32* %3, align 4
  store i32 %9, i32* %4, align 4
  %10 = load i32, i32* %3, align 4
  %11 = load i32, i32* %4, align 4
  %12 = call i32 @llvm.aarch64.neon.sqrshl.i32(i32 %10, i32 %11) #4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %5, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vqrshld_s64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = call i64 @llvm.aarch64.neon.sqrshl.i64(i64 %10, i64 %11) #4
  store i64 %12, i64* %5, align 8
  %13 = load i64, i64* %5, align 8
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vqrshl_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.uqrshl.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vqrshlq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.uqrshl.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vqrshl_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.uqrshl.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vqrshlq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.uqrshl.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vqrshl_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.uqrshl.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqrshlq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.uqrshl.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqrshlq_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = call <2 x i64> @llvm.aarch64.neon.uqrshl.v2i64(<2 x i64> %10, <2 x i64> %12) #4
  %15 = bitcast <2 x i64> %14 to <16 x i8>
  store <2 x i64> %14, <2 x i64>* %5, align 16
  %16 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vqrshl_u64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = bitcast <1 x i64> %10 to <8 x i8>
  %12 = load <1 x i64>, <1 x i64>* %4, align 8
  %13 = bitcast <1 x i64> %12 to <8 x i8>
  %14 = call <1 x i64> @llvm.aarch64.neon.uqrshl.v1i64(<1 x i64> %10, <1 x i64> %12) #4
  %15 = bitcast <1 x i64> %14 to <8 x i8>
  store <1 x i64> %14, <1 x i64>* %5, align 8
  %16 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define zeroext i8 @vqrshlb_u8_wrapper(i8 zeroext %0, i8 signext %1) #2 {
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8 %0, i8* %6, align 1
  store i8 %1, i8* %7, align 1
  %8 = load i8, i8* %6, align 1
  %9 = load i8, i8* %7, align 1
  store i8 %8, i8* %3, align 1
  store i8 %9, i8* %4, align 1
  %10 = load i8, i8* %3, align 1
  %11 = load i8, i8* %4, align 1
  %12 = insertelement <8 x i8> undef, i8 %10, i64 0
  %13 = insertelement <8 x i8> undef, i8 %11, i64 0
  %14 = call <8 x i8> @llvm.aarch64.neon.uqrshl.v8i8(<8 x i8> %12, <8 x i8> %13) #4
  %15 = extractelement <8 x i8> %14, i64 0
  store i8 %15, i8* %5, align 1
  %16 = load i8, i8* %5, align 1
  ret i8 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define zeroext i16 @vqrshlh_u16_wrapper(i16 zeroext %0, i16 signext %1) #2 {
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  store i16 %0, i16* %6, align 2
  store i16 %1, i16* %7, align 2
  %8 = load i16, i16* %6, align 2
  %9 = load i16, i16* %7, align 2
  store i16 %8, i16* %3, align 2
  store i16 %9, i16* %4, align 2
  %10 = load i16, i16* %3, align 2
  %11 = load i16, i16* %4, align 2
  %12 = insertelement <4 x i16> undef, i16 %10, i64 0
  %13 = insertelement <4 x i16> undef, i16 %11, i64 0
  %14 = call <4 x i16> @llvm.aarch64.neon.uqrshl.v4i16(<4 x i16> %12, <4 x i16> %13) #4
  %15 = extractelement <4 x i16> %14, i64 0
  store i16 %15, i16* %5, align 2
  %16 = load i16, i16* %5, align 2
  ret i16 %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @vqrshls_u32_wrapper(i32 %0, i32 %1) #2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  %8 = load i32, i32* %6, align 4
  %9 = load i32, i32* %7, align 4
  store i32 %8, i32* %3, align 4
  store i32 %9, i32* %4, align 4
  %10 = load i32, i32* %3, align 4
  %11 = load i32, i32* %4, align 4
  %12 = call i32 @llvm.aarch64.neon.uqrshl.i32(i32 %10, i32 %11) #4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %5, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vqrshld_u64_wrapper(i64 %0, i64 %1) #2 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i64 %1, i64* %7, align 8
  %8 = load i64, i64* %6, align 8
  %9 = load i64, i64* %7, align 8
  store i64 %8, i64* %3, align 8
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %3, align 8
  %11 = load i64, i64* %4, align 8
  %12 = call i64 @llvm.aarch64.neon.uqrshl.i64(i64 %10, i64 %11) #4
  store i64 %12, i64* %5, align 8
  %13 = load i64, i64* %5, align 8
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmovl_s8_wrapper(<8 x i8> %0) #1 {
  %2 = alloca <8 x i8>, align 8
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %4, align 8
  %5 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %5, <8 x i8>* %2, align 8
  %6 = load <8 x i8>, <8 x i8>* %2, align 8
  %7 = sext <8 x i8> %6 to <8 x i16>
  store <8 x i16> %7, <8 x i16>* %3, align 16
  %8 = load <8 x i16>, <8 x i16>* %3, align 16
  ret <8 x i16> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmovl_s16_wrapper(<4 x i16> %0) #1 {
  %2 = alloca <4 x i16>, align 8
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %4, align 8
  %5 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %5, <4 x i16>* %2, align 8
  %6 = load <4 x i16>, <4 x i16>* %2, align 8
  %7 = bitcast <4 x i16> %6 to <8 x i8>
  %8 = sext <4 x i16> %6 to <4 x i32>
  store <4 x i32> %8, <4 x i32>* %3, align 16
  %9 = load <4 x i32>, <4 x i32>* %3, align 16
  ret <4 x i32> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmovl_s32_wrapper(<2 x i32> %0) #1 {
  %2 = alloca <2 x i32>, align 8
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %4, align 8
  %5 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %5, <2 x i32>* %2, align 8
  %6 = load <2 x i32>, <2 x i32>* %2, align 8
  %7 = bitcast <2 x i32> %6 to <8 x i8>
  %8 = sext <2 x i32> %6 to <2 x i64>
  store <2 x i64> %8, <2 x i64>* %3, align 16
  %9 = load <2 x i64>, <2 x i64>* %3, align 16
  ret <2 x i64> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmovl_high_s8_wrapper(<16 x i8> %0) #1 {
  %2 = alloca <16 x i8>, align 16
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %10, align 16
  %11 = load <16 x i8>, <16 x i8>* %10, align 16
  store <16 x i8> %11, <16 x i8>* %4, align 16
  %12 = load <16 x i8>, <16 x i8>* %4, align 16
  store <16 x i8> %12, <16 x i8>* %2, align 16
  %13 = load <16 x i8>, <16 x i8>* %2, align 16
  %14 = load <16 x i8>, <16 x i8>* %2, align 16
  %15 = shufflevector <16 x i8> %13, <16 x i8> %14, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %15, <8 x i8>* %3, align 8
  %16 = load <8 x i8>, <8 x i8>* %3, align 8
  store <8 x i8> %16, <8 x i8>* %6, align 8
  %17 = load <8 x i8>, <8 x i8>* %6, align 8
  store <8 x i8> %17, <8 x i8>* %7, align 8
  %18 = load <8 x i8>, <8 x i8>* %7, align 8
  %19 = sext <8 x i8> %18 to <8 x i16>
  store <8 x i16> %19, <8 x i16>* %8, align 16
  %20 = load <8 x i16>, <8 x i16>* %8, align 16
  store <8 x i16> %20, <8 x i16>* %9, align 16
  %21 = load <8 x i16>, <8 x i16>* %9, align 16
  store <8 x i16> %21, <8 x i16>* %5, align 16
  %22 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %22
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmovl_high_s16_wrapper(<8 x i16> %0) #1 {
  %2 = alloca <8 x i16>, align 16
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %10, align 16
  %11 = load <8 x i16>, <8 x i16>* %10, align 16
  store <8 x i16> %11, <8 x i16>* %4, align 16
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %12, <8 x i16>* %2, align 16
  %13 = load <8 x i16>, <8 x i16>* %2, align 16
  %14 = load <8 x i16>, <8 x i16>* %2, align 16
  %15 = shufflevector <8 x i16> %13, <8 x i16> %14, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %15, <4 x i16>* %3, align 8
  %16 = load <4 x i16>, <4 x i16>* %3, align 8
  store <4 x i16> %16, <4 x i16>* %6, align 8
  %17 = load <4 x i16>, <4 x i16>* %6, align 8
  store <4 x i16> %17, <4 x i16>* %7, align 8
  %18 = load <4 x i16>, <4 x i16>* %7, align 8
  %19 = bitcast <4 x i16> %18 to <8 x i8>
  %20 = sext <4 x i16> %18 to <4 x i32>
  store <4 x i32> %20, <4 x i32>* %8, align 16
  %21 = load <4 x i32>, <4 x i32>* %8, align 16
  store <4 x i32> %21, <4 x i32>* %9, align 16
  %22 = load <4 x i32>, <4 x i32>* %9, align 16
  store <4 x i32> %22, <4 x i32>* %5, align 16
  %23 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %23
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmovl_high_s32_wrapper(<4 x i32> %0) #1 {
  %2 = alloca <4 x i32>, align 16
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %10, align 16
  %11 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %11, <4 x i32>* %4, align 16
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %12, <4 x i32>* %2, align 16
  %13 = load <4 x i32>, <4 x i32>* %2, align 16
  %14 = load <4 x i32>, <4 x i32>* %2, align 16
  %15 = shufflevector <4 x i32> %13, <4 x i32> %14, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %15, <2 x i32>* %3, align 8
  %16 = load <2 x i32>, <2 x i32>* %3, align 8
  store <2 x i32> %16, <2 x i32>* %6, align 8
  %17 = load <2 x i32>, <2 x i32>* %6, align 8
  store <2 x i32> %17, <2 x i32>* %7, align 8
  %18 = load <2 x i32>, <2 x i32>* %7, align 8
  %19 = bitcast <2 x i32> %18 to <8 x i8>
  %20 = sext <2 x i32> %18 to <2 x i64>
  store <2 x i64> %20, <2 x i64>* %8, align 16
  %21 = load <2 x i64>, <2 x i64>* %8, align 16
  store <2 x i64> %21, <2 x i64>* %9, align 16
  %22 = load <2 x i64>, <2 x i64>* %9, align 16
  store <2 x i64> %22, <2 x i64>* %5, align 16
  %23 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %23
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmovl_u8_wrapper(<8 x i8> %0) #1 {
  %2 = alloca <8 x i8>, align 8
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %4, align 8
  %5 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %5, <8 x i8>* %2, align 8
  %6 = load <8 x i8>, <8 x i8>* %2, align 8
  %7 = zext <8 x i8> %6 to <8 x i16>
  store <8 x i16> %7, <8 x i16>* %3, align 16
  %8 = load <8 x i16>, <8 x i16>* %3, align 16
  ret <8 x i16> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmovl_u16_wrapper(<4 x i16> %0) #1 {
  %2 = alloca <4 x i16>, align 8
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %4, align 8
  %5 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %5, <4 x i16>* %2, align 8
  %6 = load <4 x i16>, <4 x i16>* %2, align 8
  %7 = bitcast <4 x i16> %6 to <8 x i8>
  %8 = zext <4 x i16> %6 to <4 x i32>
  store <4 x i32> %8, <4 x i32>* %3, align 16
  %9 = load <4 x i32>, <4 x i32>* %3, align 16
  ret <4 x i32> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmovl_u32_wrapper(<2 x i32> %0) #1 {
  %2 = alloca <2 x i32>, align 8
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %4, align 8
  %5 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %5, <2 x i32>* %2, align 8
  %6 = load <2 x i32>, <2 x i32>* %2, align 8
  %7 = bitcast <2 x i32> %6 to <8 x i8>
  %8 = zext <2 x i32> %6 to <2 x i64>
  store <2 x i64> %8, <2 x i64>* %3, align 16
  %9 = load <2 x i64>, <2 x i64>* %3, align 16
  ret <2 x i64> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmovl_high_u8_wrapper(<16 x i8> %0) #1 {
  %2 = alloca <16 x i8>, align 16
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %10, align 16
  %11 = load <16 x i8>, <16 x i8>* %10, align 16
  store <16 x i8> %11, <16 x i8>* %4, align 16
  %12 = load <16 x i8>, <16 x i8>* %4, align 16
  store <16 x i8> %12, <16 x i8>* %2, align 16
  %13 = load <16 x i8>, <16 x i8>* %2, align 16
  %14 = load <16 x i8>, <16 x i8>* %2, align 16
  %15 = shufflevector <16 x i8> %13, <16 x i8> %14, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i8> %15, <8 x i8>* %3, align 8
  %16 = load <8 x i8>, <8 x i8>* %3, align 8
  store <8 x i8> %16, <8 x i8>* %6, align 8
  %17 = load <8 x i8>, <8 x i8>* %6, align 8
  store <8 x i8> %17, <8 x i8>* %7, align 8
  %18 = load <8 x i8>, <8 x i8>* %7, align 8
  %19 = zext <8 x i8> %18 to <8 x i16>
  store <8 x i16> %19, <8 x i16>* %8, align 16
  %20 = load <8 x i16>, <8 x i16>* %8, align 16
  store <8 x i16> %20, <8 x i16>* %9, align 16
  %21 = load <8 x i16>, <8 x i16>* %9, align 16
  store <8 x i16> %21, <8 x i16>* %5, align 16
  %22 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %22
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmovl_high_u16_wrapper(<8 x i16> %0) #1 {
  %2 = alloca <8 x i16>, align 16
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %10, align 16
  %11 = load <8 x i16>, <8 x i16>* %10, align 16
  store <8 x i16> %11, <8 x i16>* %4, align 16
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %12, <8 x i16>* %2, align 16
  %13 = load <8 x i16>, <8 x i16>* %2, align 16
  %14 = load <8 x i16>, <8 x i16>* %2, align 16
  %15 = shufflevector <8 x i16> %13, <8 x i16> %14, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %15, <4 x i16>* %3, align 8
  %16 = load <4 x i16>, <4 x i16>* %3, align 8
  store <4 x i16> %16, <4 x i16>* %6, align 8
  %17 = load <4 x i16>, <4 x i16>* %6, align 8
  store <4 x i16> %17, <4 x i16>* %7, align 8
  %18 = load <4 x i16>, <4 x i16>* %7, align 8
  %19 = bitcast <4 x i16> %18 to <8 x i8>
  %20 = zext <4 x i16> %18 to <4 x i32>
  store <4 x i32> %20, <4 x i32>* %8, align 16
  %21 = load <4 x i32>, <4 x i32>* %8, align 16
  store <4 x i32> %21, <4 x i32>* %9, align 16
  %22 = load <4 x i32>, <4 x i32>* %9, align 16
  store <4 x i32> %22, <4 x i32>* %5, align 16
  %23 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %23
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmovl_high_u32_wrapper(<4 x i32> %0) #1 {
  %2 = alloca <4 x i32>, align 16
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %10, align 16
  %11 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %11, <4 x i32>* %4, align 16
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %12, <4 x i32>* %2, align 16
  %13 = load <4 x i32>, <4 x i32>* %2, align 16
  %14 = load <4 x i32>, <4 x i32>* %2, align 16
  %15 = shufflevector <4 x i32> %13, <4 x i32> %14, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %15, <2 x i32>* %3, align 8
  %16 = load <2 x i32>, <2 x i32>* %3, align 8
  store <2 x i32> %16, <2 x i32>* %6, align 8
  %17 = load <2 x i32>, <2 x i32>* %6, align 8
  store <2 x i32> %17, <2 x i32>* %7, align 8
  %18 = load <2 x i32>, <2 x i32>* %7, align 8
  %19 = bitcast <2 x i32> %18 to <8 x i8>
  %20 = zext <2 x i32> %18 to <2 x i64>
  store <2 x i64> %20, <2 x i64>* %8, align 16
  %21 = load <2 x i64>, <2 x i64>* %8, align 16
  store <2 x i64> %21, <2 x i64>* %9, align 16
  %22 = load <2 x i64>, <2 x i64>* %9, align 16
  store <2 x i64> %22, <2 x i64>* %5, align 16
  %23 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %23
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vmovn_s16_wrapper(<8 x i16> %0) #1 {
  %2 = alloca <8 x i16>, align 16
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %4, align 16
  %5 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %5, <8 x i16>* %2, align 16
  %6 = load <8 x i16>, <8 x i16>* %2, align 16
  %7 = bitcast <8 x i16> %6 to <16 x i8>
  %8 = trunc <8 x i16> %6 to <8 x i8>
  store <8 x i8> %8, <8 x i8>* %3, align 8
  %9 = load <8 x i8>, <8 x i8>* %3, align 8
  ret <8 x i8> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmovn_s32_wrapper(<4 x i32> %0) #1 {
  %2 = alloca <4 x i32>, align 16
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %4, align 16
  %5 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %5, <4 x i32>* %2, align 16
  %6 = load <4 x i32>, <4 x i32>* %2, align 16
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = trunc <4 x i32> %6 to <4 x i16>
  store <4 x i16> %8, <4 x i16>* %3, align 8
  %9 = load <4 x i16>, <4 x i16>* %3, align 8
  ret <4 x i16> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmovn_s64_wrapper(<2 x i64> %0) #1 {
  %2 = alloca <2 x i64>, align 16
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %4, align 16
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  store <2 x i64> %5, <2 x i64>* %2, align 16
  %6 = load <2 x i64>, <2 x i64>* %2, align 16
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = trunc <2 x i64> %6 to <2 x i32>
  store <2 x i32> %8, <2 x i32>* %3, align 8
  %9 = load <2 x i32>, <2 x i32>* %3, align 8
  ret <2 x i32> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vmovn_u16_wrapper(<8 x i16> %0) #1 {
  %2 = alloca <8 x i16>, align 16
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %4, align 16
  %5 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %5, <8 x i16>* %2, align 16
  %6 = load <8 x i16>, <8 x i16>* %2, align 16
  %7 = bitcast <8 x i16> %6 to <16 x i8>
  %8 = trunc <8 x i16> %6 to <8 x i8>
  store <8 x i8> %8, <8 x i8>* %3, align 8
  %9 = load <8 x i8>, <8 x i8>* %3, align 8
  ret <8 x i8> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmovn_u32_wrapper(<4 x i32> %0) #1 {
  %2 = alloca <4 x i32>, align 16
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %4, align 16
  %5 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %5, <4 x i32>* %2, align 16
  %6 = load <4 x i32>, <4 x i32>* %2, align 16
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = trunc <4 x i32> %6 to <4 x i16>
  store <4 x i16> %8, <4 x i16>* %3, align 8
  %9 = load <4 x i16>, <4 x i16>* %3, align 8
  ret <4 x i16> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmovn_u64_wrapper(<2 x i64> %0) #1 {
  %2 = alloca <2 x i64>, align 16
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %4, align 16
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  store <2 x i64> %5, <2 x i64>* %2, align 16
  %6 = load <2 x i64>, <2 x i64>* %2, align 16
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = trunc <2 x i64> %6 to <2 x i32>
  store <2 x i32> %8, <2 x i32>* %3, align 8
  %9 = load <2 x i32>, <2 x i32>* %3, align 8
  ret <2 x i32> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vmovn_high_s16_wrapper(<8 x i8> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <16 x i8>, align 16
  %11 = alloca <8 x i8>, align 8
  %12 = alloca <8 x i16>, align 16
  store <8 x i8> %0, <8 x i8>* %11, align 8
  store <8 x i16> %1, <8 x i16>* %12, align 16
  %13 = load <8 x i8>, <8 x i8>* %11, align 8
  %14 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i8> %13, <8 x i8>* %8, align 8
  store <8 x i16> %14, <8 x i16>* %9, align 16
  %15 = load <8 x i8>, <8 x i8>* %8, align 8
  %16 = load <8 x i16>, <8 x i16>* %9, align 16
  store <8 x i16> %16, <8 x i16>* %6, align 16
  %17 = load <8 x i16>, <8 x i16>* %6, align 16
  %18 = bitcast <8 x i16> %17 to <16 x i8>
  %19 = trunc <8 x i16> %17 to <8 x i8>
  store <8 x i8> %19, <8 x i8>* %7, align 8
  %20 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %15, <8 x i8>* %3, align 8
  store <8 x i8> %20, <8 x i8>* %4, align 8
  %21 = load <8 x i8>, <8 x i8>* %3, align 8
  %22 = load <8 x i8>, <8 x i8>* %4, align 8
  %23 = shufflevector <8 x i8> %21, <8 x i8> %22, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <16 x i8> %23, <16 x i8>* %5, align 16
  %24 = load <16 x i8>, <16 x i8>* %5, align 16
  store <16 x i8> %24, <16 x i8>* %10, align 16
  %25 = load <16 x i8>, <16 x i8>* %10, align 16
  ret <16 x i8> %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmovn_high_s32_wrapper(<4 x i16> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <4 x i32>, align 16
  store <4 x i16> %0, <4 x i16>* %11, align 8
  store <4 x i32> %1, <4 x i32>* %12, align 16
  %13 = load <4 x i16>, <4 x i16>* %11, align 8
  %14 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i16> %13, <4 x i16>* %8, align 8
  store <4 x i32> %14, <4 x i32>* %9, align 16
  %15 = load <4 x i16>, <4 x i16>* %8, align 8
  %16 = load <4 x i32>, <4 x i32>* %9, align 16
  store <4 x i32> %16, <4 x i32>* %6, align 16
  %17 = load <4 x i32>, <4 x i32>* %6, align 16
  %18 = bitcast <4 x i32> %17 to <16 x i8>
  %19 = trunc <4 x i32> %17 to <4 x i16>
  store <4 x i16> %19, <4 x i16>* %7, align 8
  %20 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %15, <4 x i16>* %3, align 8
  store <4 x i16> %20, <4 x i16>* %4, align 8
  %21 = load <4 x i16>, <4 x i16>* %3, align 8
  %22 = load <4 x i16>, <4 x i16>* %4, align 8
  %23 = shufflevector <4 x i16> %21, <4 x i16> %22, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %23, <8 x i16>* %5, align 16
  %24 = load <8 x i16>, <8 x i16>* %5, align 16
  store <8 x i16> %24, <8 x i16>* %10, align 16
  %25 = load <8 x i16>, <8 x i16>* %10, align 16
  ret <8 x i16> %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmovn_high_s64_wrapper(<2 x i32> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <2 x i64>, align 16
  store <2 x i32> %0, <2 x i32>* %11, align 8
  store <2 x i64> %1, <2 x i64>* %12, align 16
  %13 = load <2 x i32>, <2 x i32>* %11, align 8
  %14 = load <2 x i64>, <2 x i64>* %12, align 16
  store <2 x i32> %13, <2 x i32>* %8, align 8
  store <2 x i64> %14, <2 x i64>* %9, align 16
  %15 = load <2 x i32>, <2 x i32>* %8, align 8
  %16 = load <2 x i64>, <2 x i64>* %9, align 16
  store <2 x i64> %16, <2 x i64>* %6, align 16
  %17 = load <2 x i64>, <2 x i64>* %6, align 16
  %18 = bitcast <2 x i64> %17 to <16 x i8>
  %19 = trunc <2 x i64> %17 to <2 x i32>
  store <2 x i32> %19, <2 x i32>* %7, align 8
  %20 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %15, <2 x i32>* %3, align 8
  store <2 x i32> %20, <2 x i32>* %4, align 8
  %21 = load <2 x i32>, <2 x i32>* %3, align 8
  %22 = load <2 x i32>, <2 x i32>* %4, align 8
  %23 = shufflevector <2 x i32> %21, <2 x i32> %22, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %23, <4 x i32>* %5, align 16
  %24 = load <4 x i32>, <4 x i32>* %5, align 16
  store <4 x i32> %24, <4 x i32>* %10, align 16
  %25 = load <4 x i32>, <4 x i32>* %10, align 16
  ret <4 x i32> %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vmovn_high_u16_wrapper(<8 x i8> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <16 x i8>, align 16
  %11 = alloca <8 x i8>, align 8
  %12 = alloca <8 x i16>, align 16
  store <8 x i8> %0, <8 x i8>* %11, align 8
  store <8 x i16> %1, <8 x i16>* %12, align 16
  %13 = load <8 x i8>, <8 x i8>* %11, align 8
  %14 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i8> %13, <8 x i8>* %8, align 8
  store <8 x i16> %14, <8 x i16>* %9, align 16
  %15 = load <8 x i8>, <8 x i8>* %8, align 8
  %16 = load <8 x i16>, <8 x i16>* %9, align 16
  store <8 x i16> %16, <8 x i16>* %6, align 16
  %17 = load <8 x i16>, <8 x i16>* %6, align 16
  %18 = bitcast <8 x i16> %17 to <16 x i8>
  %19 = trunc <8 x i16> %17 to <8 x i8>
  store <8 x i8> %19, <8 x i8>* %7, align 8
  %20 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %15, <8 x i8>* %3, align 8
  store <8 x i8> %20, <8 x i8>* %4, align 8
  %21 = load <8 x i8>, <8 x i8>* %3, align 8
  %22 = load <8 x i8>, <8 x i8>* %4, align 8
  %23 = shufflevector <8 x i8> %21, <8 x i8> %22, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <16 x i8> %23, <16 x i8>* %5, align 16
  %24 = load <16 x i8>, <16 x i8>* %5, align 16
  store <16 x i8> %24, <16 x i8>* %10, align 16
  %25 = load <16 x i8>, <16 x i8>* %10, align 16
  ret <16 x i8> %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmovn_high_u32_wrapper(<4 x i16> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <4 x i32>, align 16
  store <4 x i16> %0, <4 x i16>* %11, align 8
  store <4 x i32> %1, <4 x i32>* %12, align 16
  %13 = load <4 x i16>, <4 x i16>* %11, align 8
  %14 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i16> %13, <4 x i16>* %8, align 8
  store <4 x i32> %14, <4 x i32>* %9, align 16
  %15 = load <4 x i16>, <4 x i16>* %8, align 8
  %16 = load <4 x i32>, <4 x i32>* %9, align 16
  store <4 x i32> %16, <4 x i32>* %6, align 16
  %17 = load <4 x i32>, <4 x i32>* %6, align 16
  %18 = bitcast <4 x i32> %17 to <16 x i8>
  %19 = trunc <4 x i32> %17 to <4 x i16>
  store <4 x i16> %19, <4 x i16>* %7, align 8
  %20 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %15, <4 x i16>* %3, align 8
  store <4 x i16> %20, <4 x i16>* %4, align 8
  %21 = load <4 x i16>, <4 x i16>* %3, align 8
  %22 = load <4 x i16>, <4 x i16>* %4, align 8
  %23 = shufflevector <4 x i16> %21, <4 x i16> %22, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %23, <8 x i16>* %5, align 16
  %24 = load <8 x i16>, <8 x i16>* %5, align 16
  store <8 x i16> %24, <8 x i16>* %10, align 16
  %25 = load <8 x i16>, <8 x i16>* %10, align 16
  ret <8 x i16> %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmovn_high_u64_wrapper(<2 x i32> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <2 x i64>, align 16
  store <2 x i32> %0, <2 x i32>* %11, align 8
  store <2 x i64> %1, <2 x i64>* %12, align 16
  %13 = load <2 x i32>, <2 x i32>* %11, align 8
  %14 = load <2 x i64>, <2 x i64>* %12, align 16
  store <2 x i32> %13, <2 x i32>* %8, align 8
  store <2 x i64> %14, <2 x i64>* %9, align 16
  %15 = load <2 x i32>, <2 x i32>* %8, align 8
  %16 = load <2 x i64>, <2 x i64>* %9, align 16
  store <2 x i64> %16, <2 x i64>* %6, align 16
  %17 = load <2 x i64>, <2 x i64>* %6, align 16
  %18 = bitcast <2 x i64> %17 to <16 x i8>
  %19 = trunc <2 x i64> %17 to <2 x i32>
  store <2 x i32> %19, <2 x i32>* %7, align 8
  %20 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %15, <2 x i32>* %3, align 8
  store <2 x i32> %20, <2 x i32>* %4, align 8
  %21 = load <2 x i32>, <2 x i32>* %3, align 8
  %22 = load <2 x i32>, <2 x i32>* %4, align 8
  %23 = shufflevector <2 x i32> %21, <2 x i32> %22, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %23, <4 x i32>* %5, align 16
  %24 = load <4 x i32>, <4 x i32>* %5, align 16
  store <4 x i32> %24, <4 x i32>* %10, align 16
  %25 = load <4 x i32>, <4 x i32>* %10, align 16
  ret <4 x i32> %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vqmovn_s16_wrapper(<8 x i16> %0) #1 {
  %2 = alloca <8 x i16>, align 16
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %4, align 16
  %5 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %5, <8 x i16>* %2, align 16
  %6 = load <8 x i16>, <8 x i16>* %2, align 16
  %7 = bitcast <8 x i16> %6 to <16 x i8>
  %8 = call <8 x i8> @llvm.aarch64.neon.sqxtn.v8i8(<8 x i16> %6) #4
  store <8 x i8> %8, <8 x i8>* %3, align 8
  %9 = load <8 x i8>, <8 x i8>* %3, align 8
  ret <8 x i8> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vqmovn_s32_wrapper(<4 x i32> %0) #1 {
  %2 = alloca <4 x i32>, align 16
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %4, align 16
  %5 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %5, <4 x i32>* %2, align 16
  %6 = load <4 x i32>, <4 x i32>* %2, align 16
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %6) #4
  %9 = bitcast <4 x i16> %8 to <8 x i8>
  store <4 x i16> %8, <4 x i16>* %3, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  ret <4 x i16> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vqmovn_s64_wrapper(<2 x i64> %0) #1 {
  %2 = alloca <2 x i64>, align 16
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %4, align 16
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  store <2 x i64> %5, <2 x i64>* %2, align 16
  %6 = load <2 x i64>, <2 x i64>* %2, align 16
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = call <2 x i32> @llvm.aarch64.neon.sqxtn.v2i32(<2 x i64> %6) #4
  %9 = bitcast <2 x i32> %8 to <8 x i8>
  store <2 x i32> %8, <2 x i32>* %3, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  ret <2 x i32> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vqmovn_high_s16_wrapper(<8 x i8> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <16 x i8>, align 16
  %11 = alloca <8 x i8>, align 8
  %12 = alloca <8 x i16>, align 16
  store <8 x i8> %0, <8 x i8>* %11, align 8
  store <8 x i16> %1, <8 x i16>* %12, align 16
  %13 = load <8 x i8>, <8 x i8>* %11, align 8
  %14 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i8> %13, <8 x i8>* %8, align 8
  store <8 x i16> %14, <8 x i16>* %9, align 16
  %15 = load <8 x i8>, <8 x i8>* %8, align 8
  %16 = load <8 x i16>, <8 x i16>* %9, align 16
  store <8 x i16> %16, <8 x i16>* %6, align 16
  %17 = load <8 x i16>, <8 x i16>* %6, align 16
  %18 = bitcast <8 x i16> %17 to <16 x i8>
  %19 = call <8 x i8> @llvm.aarch64.neon.sqxtn.v8i8(<8 x i16> %17) #4
  store <8 x i8> %19, <8 x i8>* %7, align 8
  %20 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %15, <8 x i8>* %3, align 8
  store <8 x i8> %20, <8 x i8>* %4, align 8
  %21 = load <8 x i8>, <8 x i8>* %3, align 8
  %22 = load <8 x i8>, <8 x i8>* %4, align 8
  %23 = shufflevector <8 x i8> %21, <8 x i8> %22, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <16 x i8> %23, <16 x i8>* %5, align 16
  %24 = load <16 x i8>, <16 x i8>* %5, align 16
  store <16 x i8> %24, <16 x i8>* %10, align 16
  %25 = load <16 x i8>, <16 x i8>* %10, align 16
  ret <16 x i8> %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vqmovn_high_s32_wrapper(<4 x i16> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <4 x i32>, align 16
  store <4 x i16> %0, <4 x i16>* %11, align 8
  store <4 x i32> %1, <4 x i32>* %12, align 16
  %13 = load <4 x i16>, <4 x i16>* %11, align 8
  %14 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i16> %13, <4 x i16>* %8, align 8
  store <4 x i32> %14, <4 x i32>* %9, align 16
  %15 = load <4 x i16>, <4 x i16>* %8, align 8
  %16 = load <4 x i32>, <4 x i32>* %9, align 16
  store <4 x i32> %16, <4 x i32>* %6, align 16
  %17 = load <4 x i32>, <4 x i32>* %6, align 16
  %18 = bitcast <4 x i32> %17 to <16 x i8>
  %19 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %17) #4
  %20 = bitcast <4 x i16> %19 to <8 x i8>
  store <4 x i16> %19, <4 x i16>* %7, align 8
  %21 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %15, <4 x i16>* %3, align 8
  store <4 x i16> %21, <4 x i16>* %4, align 8
  %22 = load <4 x i16>, <4 x i16>* %3, align 8
  %23 = load <4 x i16>, <4 x i16>* %4, align 8
  %24 = shufflevector <4 x i16> %22, <4 x i16> %23, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %24, <8 x i16>* %5, align 16
  %25 = load <8 x i16>, <8 x i16>* %5, align 16
  store <8 x i16> %25, <8 x i16>* %10, align 16
  %26 = load <8 x i16>, <8 x i16>* %10, align 16
  ret <8 x i16> %26
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqmovn_high_s64_wrapper(<2 x i32> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <2 x i64>, align 16
  store <2 x i32> %0, <2 x i32>* %11, align 8
  store <2 x i64> %1, <2 x i64>* %12, align 16
  %13 = load <2 x i32>, <2 x i32>* %11, align 8
  %14 = load <2 x i64>, <2 x i64>* %12, align 16
  store <2 x i32> %13, <2 x i32>* %8, align 8
  store <2 x i64> %14, <2 x i64>* %9, align 16
  %15 = load <2 x i32>, <2 x i32>* %8, align 8
  %16 = load <2 x i64>, <2 x i64>* %9, align 16
  store <2 x i64> %16, <2 x i64>* %6, align 16
  %17 = load <2 x i64>, <2 x i64>* %6, align 16
  %18 = bitcast <2 x i64> %17 to <16 x i8>
  %19 = call <2 x i32> @llvm.aarch64.neon.sqxtn.v2i32(<2 x i64> %17) #4
  %20 = bitcast <2 x i32> %19 to <8 x i8>
  store <2 x i32> %19, <2 x i32>* %7, align 8
  %21 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %15, <2 x i32>* %3, align 8
  store <2 x i32> %21, <2 x i32>* %4, align 8
  %22 = load <2 x i32>, <2 x i32>* %3, align 8
  %23 = load <2 x i32>, <2 x i32>* %4, align 8
  %24 = shufflevector <2 x i32> %22, <2 x i32> %23, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %24, <4 x i32>* %5, align 16
  %25 = load <4 x i32>, <4 x i32>* %5, align 16
  store <4 x i32> %25, <4 x i32>* %10, align 16
  %26 = load <4 x i32>, <4 x i32>* %10, align 16
  ret <4 x i32> %26
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vqmovn_u16_wrapper(<8 x i16> %0) #1 {
  %2 = alloca <8 x i16>, align 16
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %4, align 16
  %5 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %5, <8 x i16>* %2, align 16
  %6 = load <8 x i16>, <8 x i16>* %2, align 16
  %7 = bitcast <8 x i16> %6 to <16 x i8>
  %8 = call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %6) #4
  store <8 x i8> %8, <8 x i8>* %3, align 8
  %9 = load <8 x i8>, <8 x i8>* %3, align 8
  ret <8 x i8> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vqmovn_u32_wrapper(<4 x i32> %0) #1 {
  %2 = alloca <4 x i32>, align 16
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %4, align 16
  %5 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %5, <4 x i32>* %2, align 16
  %6 = load <4 x i32>, <4 x i32>* %2, align 16
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %6) #4
  %9 = bitcast <4 x i16> %8 to <8 x i8>
  store <4 x i16> %8, <4 x i16>* %3, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  ret <4 x i16> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vqmovn_u64_wrapper(<2 x i64> %0) #1 {
  %2 = alloca <2 x i64>, align 16
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %4, align 16
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  store <2 x i64> %5, <2 x i64>* %2, align 16
  %6 = load <2 x i64>, <2 x i64>* %2, align 16
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = call <2 x i32> @llvm.aarch64.neon.uqxtn.v2i32(<2 x i64> %6) #4
  %9 = bitcast <2 x i32> %8 to <8 x i8>
  store <2 x i32> %8, <2 x i32>* %3, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  ret <2 x i32> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vqmovn_high_u16_wrapper(<8 x i8> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <16 x i8>, align 16
  %11 = alloca <8 x i8>, align 8
  %12 = alloca <8 x i16>, align 16
  store <8 x i8> %0, <8 x i8>* %11, align 8
  store <8 x i16> %1, <8 x i16>* %12, align 16
  %13 = load <8 x i8>, <8 x i8>* %11, align 8
  %14 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i8> %13, <8 x i8>* %8, align 8
  store <8 x i16> %14, <8 x i16>* %9, align 16
  %15 = load <8 x i8>, <8 x i8>* %8, align 8
  %16 = load <8 x i16>, <8 x i16>* %9, align 16
  store <8 x i16> %16, <8 x i16>* %6, align 16
  %17 = load <8 x i16>, <8 x i16>* %6, align 16
  %18 = bitcast <8 x i16> %17 to <16 x i8>
  %19 = call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %17) #4
  store <8 x i8> %19, <8 x i8>* %7, align 8
  %20 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %15, <8 x i8>* %3, align 8
  store <8 x i8> %20, <8 x i8>* %4, align 8
  %21 = load <8 x i8>, <8 x i8>* %3, align 8
  %22 = load <8 x i8>, <8 x i8>* %4, align 8
  %23 = shufflevector <8 x i8> %21, <8 x i8> %22, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <16 x i8> %23, <16 x i8>* %5, align 16
  %24 = load <16 x i8>, <16 x i8>* %5, align 16
  store <16 x i8> %24, <16 x i8>* %10, align 16
  %25 = load <16 x i8>, <16 x i8>* %10, align 16
  ret <16 x i8> %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vqmovn_high_u32_wrapper(<4 x i16> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <4 x i32>, align 16
  store <4 x i16> %0, <4 x i16>* %11, align 8
  store <4 x i32> %1, <4 x i32>* %12, align 16
  %13 = load <4 x i16>, <4 x i16>* %11, align 8
  %14 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i16> %13, <4 x i16>* %8, align 8
  store <4 x i32> %14, <4 x i32>* %9, align 16
  %15 = load <4 x i16>, <4 x i16>* %8, align 8
  %16 = load <4 x i32>, <4 x i32>* %9, align 16
  store <4 x i32> %16, <4 x i32>* %6, align 16
  %17 = load <4 x i32>, <4 x i32>* %6, align 16
  %18 = bitcast <4 x i32> %17 to <16 x i8>
  %19 = call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %17) #4
  %20 = bitcast <4 x i16> %19 to <8 x i8>
  store <4 x i16> %19, <4 x i16>* %7, align 8
  %21 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %15, <4 x i16>* %3, align 8
  store <4 x i16> %21, <4 x i16>* %4, align 8
  %22 = load <4 x i16>, <4 x i16>* %3, align 8
  %23 = load <4 x i16>, <4 x i16>* %4, align 8
  %24 = shufflevector <4 x i16> %22, <4 x i16> %23, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %24, <8 x i16>* %5, align 16
  %25 = load <8 x i16>, <8 x i16>* %5, align 16
  store <8 x i16> %25, <8 x i16>* %10, align 16
  %26 = load <8 x i16>, <8 x i16>* %10, align 16
  ret <8 x i16> %26
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqmovn_high_u64_wrapper(<2 x i32> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <2 x i64>, align 16
  store <2 x i32> %0, <2 x i32>* %11, align 8
  store <2 x i64> %1, <2 x i64>* %12, align 16
  %13 = load <2 x i32>, <2 x i32>* %11, align 8
  %14 = load <2 x i64>, <2 x i64>* %12, align 16
  store <2 x i32> %13, <2 x i32>* %8, align 8
  store <2 x i64> %14, <2 x i64>* %9, align 16
  %15 = load <2 x i32>, <2 x i32>* %8, align 8
  %16 = load <2 x i64>, <2 x i64>* %9, align 16
  store <2 x i64> %16, <2 x i64>* %6, align 16
  %17 = load <2 x i64>, <2 x i64>* %6, align 16
  %18 = bitcast <2 x i64> %17 to <16 x i8>
  %19 = call <2 x i32> @llvm.aarch64.neon.uqxtn.v2i32(<2 x i64> %17) #4
  %20 = bitcast <2 x i32> %19 to <8 x i8>
  store <2 x i32> %19, <2 x i32>* %7, align 8
  %21 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %15, <2 x i32>* %3, align 8
  store <2 x i32> %21, <2 x i32>* %4, align 8
  %22 = load <2 x i32>, <2 x i32>* %3, align 8
  %23 = load <2 x i32>, <2 x i32>* %4, align 8
  %24 = shufflevector <2 x i32> %22, <2 x i32> %23, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %24, <4 x i32>* %5, align 16
  %25 = load <4 x i32>, <4 x i32>* %5, align 16
  store <4 x i32> %25, <4 x i32>* %10, align 16
  %26 = load <4 x i32>, <4 x i32>* %10, align 16
  ret <4 x i32> %26
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define signext i8 @vqmovnh_s16_wrapper(i16 signext %0) #2 {
  %2 = alloca i16, align 2
  %3 = alloca i8, align 1
  %4 = alloca i16, align 2
  store i16 %0, i16* %4, align 2
  %5 = load i16, i16* %4, align 2
  store i16 %5, i16* %2, align 2
  %6 = load i16, i16* %2, align 2
  %7 = insertelement <8 x i16> undef, i16 %6, i64 0
  %8 = call <8 x i8> @llvm.aarch64.neon.sqxtn.v8i8(<8 x i16> %7) #4
  %9 = extractelement <8 x i8> %8, i64 0
  store i8 %9, i8* %3, align 1
  %10 = load i8, i8* %3, align 1
  ret i8 %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define signext i16 @vqmovns_s32_wrapper(i32 %0) #2 {
  %2 = alloca i32, align 4
  %3 = alloca i16, align 2
  %4 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = insertelement <4 x i32> undef, i32 %6, i64 0
  %8 = call <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32> %7) #4
  %9 = extractelement <4 x i16> %8, i64 0
  store i16 %9, i16* %3, align 2
  %10 = load i16, i16* %3, align 2
  ret i16 %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @vqmovnd_s64_wrapper(i64 %0) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  store i64 %5, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i32 @llvm.aarch64.neon.scalar.sqxtn.i32.i64(i64 %6) #4
  store i32 %7, i32* %3, align 4
  %8 = load i32, i32* %3, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define zeroext i8 @vqmovnh_u16_wrapper(i16 zeroext %0) #2 {
  %2 = alloca i16, align 2
  %3 = alloca i8, align 1
  %4 = alloca i16, align 2
  store i16 %0, i16* %4, align 2
  %5 = load i16, i16* %4, align 2
  store i16 %5, i16* %2, align 2
  %6 = load i16, i16* %2, align 2
  %7 = insertelement <8 x i16> undef, i16 %6, i64 0
  %8 = call <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16> %7) #4
  %9 = extractelement <8 x i8> %8, i64 0
  store i8 %9, i8* %3, align 1
  %10 = load i8, i8* %3, align 1
  ret i8 %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define zeroext i16 @vqmovns_u32_wrapper(i32 %0) #2 {
  %2 = alloca i32, align 4
  %3 = alloca i16, align 2
  %4 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = insertelement <4 x i32> undef, i32 %6, i64 0
  %8 = call <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32> %7) #4
  %9 = extractelement <4 x i16> %8, i64 0
  store i16 %9, i16* %3, align 2
  %10 = load i16, i16* %3, align 2
  ret i16 %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @vqmovnd_u64_wrapper(i64 %0) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  store i64 %5, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i32 @llvm.aarch64.neon.scalar.uqxtn.i32.i64(i64 %6) #4
  store i32 %7, i32* %3, align 4
  %8 = load i32, i32* %3, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vqmovun_s16_wrapper(<8 x i16> %0) #1 {
  %2 = alloca <8 x i16>, align 16
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %4, align 16
  %5 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %5, <8 x i16>* %2, align 16
  %6 = load <8 x i16>, <8 x i16>* %2, align 16
  %7 = bitcast <8 x i16> %6 to <16 x i8>
  %8 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %6) #4
  store <8 x i8> %8, <8 x i8>* %3, align 8
  %9 = load <8 x i8>, <8 x i8>* %3, align 8
  ret <8 x i8> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vqmovun_s32_wrapper(<4 x i32> %0) #1 {
  %2 = alloca <4 x i32>, align 16
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %4, align 16
  %5 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %5, <4 x i32>* %2, align 16
  %6 = load <4 x i32>, <4 x i32>* %2, align 16
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = call <4 x i16> @llvm.aarch64.neon.sqxtun.v4i16(<4 x i32> %6) #4
  %9 = bitcast <4 x i16> %8 to <8 x i8>
  store <4 x i16> %8, <4 x i16>* %3, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  ret <4 x i16> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vqmovun_s64_wrapper(<2 x i64> %0) #1 {
  %2 = alloca <2 x i64>, align 16
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %4, align 16
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  store <2 x i64> %5, <2 x i64>* %2, align 16
  %6 = load <2 x i64>, <2 x i64>* %2, align 16
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = call <2 x i32> @llvm.aarch64.neon.sqxtun.v2i32(<2 x i64> %6) #4
  %9 = bitcast <2 x i32> %8 to <8 x i8>
  store <2 x i32> %8, <2 x i32>* %3, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  ret <2 x i32> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vqmovun_high_s16_wrapper(<8 x i8> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <16 x i8>, align 16
  %11 = alloca <8 x i8>, align 8
  %12 = alloca <8 x i16>, align 16
  store <8 x i8> %0, <8 x i8>* %11, align 8
  store <8 x i16> %1, <8 x i16>* %12, align 16
  %13 = load <8 x i8>, <8 x i8>* %11, align 8
  %14 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i8> %13, <8 x i8>* %8, align 8
  store <8 x i16> %14, <8 x i16>* %9, align 16
  %15 = load <8 x i8>, <8 x i8>* %8, align 8
  %16 = load <8 x i16>, <8 x i16>* %9, align 16
  store <8 x i16> %16, <8 x i16>* %6, align 16
  %17 = load <8 x i16>, <8 x i16>* %6, align 16
  %18 = bitcast <8 x i16> %17 to <16 x i8>
  %19 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %17) #4
  store <8 x i8> %19, <8 x i8>* %7, align 8
  %20 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %15, <8 x i8>* %3, align 8
  store <8 x i8> %20, <8 x i8>* %4, align 8
  %21 = load <8 x i8>, <8 x i8>* %3, align 8
  %22 = load <8 x i8>, <8 x i8>* %4, align 8
  %23 = shufflevector <8 x i8> %21, <8 x i8> %22, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <16 x i8> %23, <16 x i8>* %5, align 16
  %24 = load <16 x i8>, <16 x i8>* %5, align 16
  store <16 x i8> %24, <16 x i8>* %10, align 16
  %25 = load <16 x i8>, <16 x i8>* %10, align 16
  ret <16 x i8> %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vqmovun_high_s32_wrapper(<4 x i16> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <4 x i32>, align 16
  store <4 x i16> %0, <4 x i16>* %11, align 8
  store <4 x i32> %1, <4 x i32>* %12, align 16
  %13 = load <4 x i16>, <4 x i16>* %11, align 8
  %14 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i16> %13, <4 x i16>* %8, align 8
  store <4 x i32> %14, <4 x i32>* %9, align 16
  %15 = load <4 x i16>, <4 x i16>* %8, align 8
  %16 = load <4 x i32>, <4 x i32>* %9, align 16
  store <4 x i32> %16, <4 x i32>* %6, align 16
  %17 = load <4 x i32>, <4 x i32>* %6, align 16
  %18 = bitcast <4 x i32> %17 to <16 x i8>
  %19 = call <4 x i16> @llvm.aarch64.neon.sqxtun.v4i16(<4 x i32> %17) #4
  %20 = bitcast <4 x i16> %19 to <8 x i8>
  store <4 x i16> %19, <4 x i16>* %7, align 8
  %21 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %15, <4 x i16>* %3, align 8
  store <4 x i16> %21, <4 x i16>* %4, align 8
  %22 = load <4 x i16>, <4 x i16>* %3, align 8
  %23 = load <4 x i16>, <4 x i16>* %4, align 8
  %24 = shufflevector <4 x i16> %22, <4 x i16> %23, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i16> %24, <8 x i16>* %5, align 16
  %25 = load <8 x i16>, <8 x i16>* %5, align 16
  store <8 x i16> %25, <8 x i16>* %10, align 16
  %26 = load <8 x i16>, <8 x i16>* %10, align 16
  ret <8 x i16> %26
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqmovun_high_s64_wrapper(<2 x i32> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <2 x i64>, align 16
  store <2 x i32> %0, <2 x i32>* %11, align 8
  store <2 x i64> %1, <2 x i64>* %12, align 16
  %13 = load <2 x i32>, <2 x i32>* %11, align 8
  %14 = load <2 x i64>, <2 x i64>* %12, align 16
  store <2 x i32> %13, <2 x i32>* %8, align 8
  store <2 x i64> %14, <2 x i64>* %9, align 16
  %15 = load <2 x i32>, <2 x i32>* %8, align 8
  %16 = load <2 x i64>, <2 x i64>* %9, align 16
  store <2 x i64> %16, <2 x i64>* %6, align 16
  %17 = load <2 x i64>, <2 x i64>* %6, align 16
  %18 = bitcast <2 x i64> %17 to <16 x i8>
  %19 = call <2 x i32> @llvm.aarch64.neon.sqxtun.v2i32(<2 x i64> %17) #4
  %20 = bitcast <2 x i32> %19 to <8 x i8>
  store <2 x i32> %19, <2 x i32>* %7, align 8
  %21 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %15, <2 x i32>* %3, align 8
  store <2 x i32> %21, <2 x i32>* %4, align 8
  %22 = load <2 x i32>, <2 x i32>* %3, align 8
  %23 = load <2 x i32>, <2 x i32>* %4, align 8
  %24 = shufflevector <2 x i32> %22, <2 x i32> %23, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  store <4 x i32> %24, <4 x i32>* %5, align 16
  %25 = load <4 x i32>, <4 x i32>* %5, align 16
  store <4 x i32> %25, <4 x i32>* %10, align 16
  %26 = load <4 x i32>, <4 x i32>* %10, align 16
  ret <4 x i32> %26
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define zeroext i8 @vqmovunh_s16_wrapper(i16 signext %0) #2 {
  %2 = alloca i16, align 2
  %3 = alloca i8, align 1
  %4 = alloca i16, align 2
  store i16 %0, i16* %4, align 2
  %5 = load i16, i16* %4, align 2
  store i16 %5, i16* %2, align 2
  %6 = load i16, i16* %2, align 2
  %7 = insertelement <8 x i16> undef, i16 %6, i64 0
  %8 = call <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16> %7) #4
  %9 = extractelement <8 x i8> %8, i64 0
  store i8 %9, i8* %3, align 1
  %10 = load i8, i8* %3, align 1
  ret i8 %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define zeroext i16 @vqmovuns_s32_wrapper(i32 %0) #2 {
  %2 = alloca i32, align 4
  %3 = alloca i16, align 2
  %4 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = insertelement <4 x i32> undef, i32 %6, i64 0
  %8 = call <4 x i16> @llvm.aarch64.neon.sqxtun.v4i16(<4 x i32> %7) #4
  %9 = extractelement <4 x i16> %8, i64 0
  store i16 %9, i16* %3, align 2
  %10 = load i16, i16* %3, align 2
  ret i16 %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @vqmovund_s64_wrapper(i64 %0) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  store i64 %5, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i32 @llvm.aarch64.neon.scalar.sqxtun.i32.i64(i64 %6) #4
  store i32 %7, i32* %3, align 4
  %8 = load i32, i32* %3, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmla_n_s16_wrapper(<4 x i16> %0, <4 x i16> %1, i16 signext %2) #0 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca i16, align 2
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  %11 = alloca i16, align 2
  store <4 x i16> %0, <4 x i16>* %9, align 8
  store <4 x i16> %1, <4 x i16>* %10, align 8
  store i16 %2, i16* %11, align 2
  %12 = load <4 x i16>, <4 x i16>* %9, align 8
  %13 = load <4 x i16>, <4 x i16>* %10, align 8
  %14 = load i16, i16* %11, align 2
  store <4 x i16> %12, <4 x i16>* %4, align 8
  store <4 x i16> %13, <4 x i16>* %5, align 8
  store i16 %14, i16* %6, align 2
  %15 = load <4 x i16>, <4 x i16>* %4, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  %17 = load i16, i16* %6, align 2
  %18 = insertelement <4 x i16> undef, i16 %17, i32 0
  %19 = load i16, i16* %6, align 2
  %20 = insertelement <4 x i16> %18, i16 %19, i32 1
  %21 = load i16, i16* %6, align 2
  %22 = insertelement <4 x i16> %20, i16 %21, i32 2
  %23 = load i16, i16* %6, align 2
  %24 = insertelement <4 x i16> %22, i16 %23, i32 3
  store <4 x i16> %24, <4 x i16>* %8, align 8
  %25 = load <4 x i16>, <4 x i16>* %8, align 8
  %26 = mul <4 x i16> %16, %25
  %27 = add <4 x i16> %15, %26
  store <4 x i16> %27, <4 x i16>* %7, align 8
  %28 = load <4 x i16>, <4 x i16>* %7, align 8
  ret <4 x i16> %28
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmlaq_n_s16_wrapper(<8 x i16> %0, <8 x i16> %1, i16 signext %2) #1 {
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca i16, align 2
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i16>, align 16
  %11 = alloca i16, align 2
  store <8 x i16> %0, <8 x i16>* %9, align 16
  store <8 x i16> %1, <8 x i16>* %10, align 16
  store i16 %2, i16* %11, align 2
  %12 = load <8 x i16>, <8 x i16>* %9, align 16
  %13 = load <8 x i16>, <8 x i16>* %10, align 16
  %14 = load i16, i16* %11, align 2
  store <8 x i16> %12, <8 x i16>* %4, align 16
  store <8 x i16> %13, <8 x i16>* %5, align 16
  store i16 %14, i16* %6, align 2
  %15 = load <8 x i16>, <8 x i16>* %4, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  %17 = load i16, i16* %6, align 2
  %18 = insertelement <8 x i16> undef, i16 %17, i32 0
  %19 = load i16, i16* %6, align 2
  %20 = insertelement <8 x i16> %18, i16 %19, i32 1
  %21 = load i16, i16* %6, align 2
  %22 = insertelement <8 x i16> %20, i16 %21, i32 2
  %23 = load i16, i16* %6, align 2
  %24 = insertelement <8 x i16> %22, i16 %23, i32 3
  %25 = load i16, i16* %6, align 2
  %26 = insertelement <8 x i16> %24, i16 %25, i32 4
  %27 = load i16, i16* %6, align 2
  %28 = insertelement <8 x i16> %26, i16 %27, i32 5
  %29 = load i16, i16* %6, align 2
  %30 = insertelement <8 x i16> %28, i16 %29, i32 6
  %31 = load i16, i16* %6, align 2
  %32 = insertelement <8 x i16> %30, i16 %31, i32 7
  store <8 x i16> %32, <8 x i16>* %8, align 16
  %33 = load <8 x i16>, <8 x i16>* %8, align 16
  %34 = mul <8 x i16> %16, %33
  %35 = add <8 x i16> %15, %34
  store <8 x i16> %35, <8 x i16>* %7, align 16
  %36 = load <8 x i16>, <8 x i16>* %7, align 16
  ret <8 x i16> %36
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmla_n_s32_wrapper(<2 x i32> %0, <2 x i32> %1, i32 %2) #0 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca i32, align 4
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  %11 = alloca i32, align 4
  store <2 x i32> %0, <2 x i32>* %9, align 8
  store <2 x i32> %1, <2 x i32>* %10, align 8
  store i32 %2, i32* %11, align 4
  %12 = load <2 x i32>, <2 x i32>* %9, align 8
  %13 = load <2 x i32>, <2 x i32>* %10, align 8
  %14 = load i32, i32* %11, align 4
  store <2 x i32> %12, <2 x i32>* %4, align 8
  store <2 x i32> %13, <2 x i32>* %5, align 8
  store i32 %14, i32* %6, align 4
  %15 = load <2 x i32>, <2 x i32>* %4, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  %17 = load i32, i32* %6, align 4
  %18 = insertelement <2 x i32> undef, i32 %17, i32 0
  %19 = load i32, i32* %6, align 4
  %20 = insertelement <2 x i32> %18, i32 %19, i32 1
  store <2 x i32> %20, <2 x i32>* %8, align 8
  %21 = load <2 x i32>, <2 x i32>* %8, align 8
  %22 = mul <2 x i32> %16, %21
  %23 = add <2 x i32> %15, %22
  store <2 x i32> %23, <2 x i32>* %7, align 8
  %24 = load <2 x i32>, <2 x i32>* %7, align 8
  ret <2 x i32> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlaq_n_s32_wrapper(<4 x i32> %0, <4 x i32> %1, i32 %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  store <4 x i32> %0, <4 x i32>* %9, align 16
  store <4 x i32> %1, <4 x i32>* %10, align 16
  store i32 %2, i32* %11, align 4
  %12 = load <4 x i32>, <4 x i32>* %9, align 16
  %13 = load <4 x i32>, <4 x i32>* %10, align 16
  %14 = load i32, i32* %11, align 4
  store <4 x i32> %12, <4 x i32>* %4, align 16
  store <4 x i32> %13, <4 x i32>* %5, align 16
  store i32 %14, i32* %6, align 4
  %15 = load <4 x i32>, <4 x i32>* %4, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  %17 = load i32, i32* %6, align 4
  %18 = insertelement <4 x i32> undef, i32 %17, i32 0
  %19 = load i32, i32* %6, align 4
  %20 = insertelement <4 x i32> %18, i32 %19, i32 1
  %21 = load i32, i32* %6, align 4
  %22 = insertelement <4 x i32> %20, i32 %21, i32 2
  %23 = load i32, i32* %6, align 4
  %24 = insertelement <4 x i32> %22, i32 %23, i32 3
  store <4 x i32> %24, <4 x i32>* %8, align 16
  %25 = load <4 x i32>, <4 x i32>* %8, align 16
  %26 = mul <4 x i32> %16, %25
  %27 = add <4 x i32> %15, %26
  store <4 x i32> %27, <4 x i32>* %7, align 16
  %28 = load <4 x i32>, <4 x i32>* %7, align 16
  ret <4 x i32> %28
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmla_n_u16_wrapper(<4 x i16> %0, <4 x i16> %1, i16 zeroext %2) #0 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca i16, align 2
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  %11 = alloca i16, align 2
  store <4 x i16> %0, <4 x i16>* %9, align 8
  store <4 x i16> %1, <4 x i16>* %10, align 8
  store i16 %2, i16* %11, align 2
  %12 = load <4 x i16>, <4 x i16>* %9, align 8
  %13 = load <4 x i16>, <4 x i16>* %10, align 8
  %14 = load i16, i16* %11, align 2
  store <4 x i16> %12, <4 x i16>* %4, align 8
  store <4 x i16> %13, <4 x i16>* %5, align 8
  store i16 %14, i16* %6, align 2
  %15 = load <4 x i16>, <4 x i16>* %4, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  %17 = load i16, i16* %6, align 2
  %18 = insertelement <4 x i16> undef, i16 %17, i32 0
  %19 = load i16, i16* %6, align 2
  %20 = insertelement <4 x i16> %18, i16 %19, i32 1
  %21 = load i16, i16* %6, align 2
  %22 = insertelement <4 x i16> %20, i16 %21, i32 2
  %23 = load i16, i16* %6, align 2
  %24 = insertelement <4 x i16> %22, i16 %23, i32 3
  store <4 x i16> %24, <4 x i16>* %8, align 8
  %25 = load <4 x i16>, <4 x i16>* %8, align 8
  %26 = mul <4 x i16> %16, %25
  %27 = add <4 x i16> %15, %26
  store <4 x i16> %27, <4 x i16>* %7, align 8
  %28 = load <4 x i16>, <4 x i16>* %7, align 8
  ret <4 x i16> %28
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmlaq_n_u16_wrapper(<8 x i16> %0, <8 x i16> %1, i16 zeroext %2) #1 {
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca i16, align 2
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i16>, align 16
  %11 = alloca i16, align 2
  store <8 x i16> %0, <8 x i16>* %9, align 16
  store <8 x i16> %1, <8 x i16>* %10, align 16
  store i16 %2, i16* %11, align 2
  %12 = load <8 x i16>, <8 x i16>* %9, align 16
  %13 = load <8 x i16>, <8 x i16>* %10, align 16
  %14 = load i16, i16* %11, align 2
  store <8 x i16> %12, <8 x i16>* %4, align 16
  store <8 x i16> %13, <8 x i16>* %5, align 16
  store i16 %14, i16* %6, align 2
  %15 = load <8 x i16>, <8 x i16>* %4, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  %17 = load i16, i16* %6, align 2
  %18 = insertelement <8 x i16> undef, i16 %17, i32 0
  %19 = load i16, i16* %6, align 2
  %20 = insertelement <8 x i16> %18, i16 %19, i32 1
  %21 = load i16, i16* %6, align 2
  %22 = insertelement <8 x i16> %20, i16 %21, i32 2
  %23 = load i16, i16* %6, align 2
  %24 = insertelement <8 x i16> %22, i16 %23, i32 3
  %25 = load i16, i16* %6, align 2
  %26 = insertelement <8 x i16> %24, i16 %25, i32 4
  %27 = load i16, i16* %6, align 2
  %28 = insertelement <8 x i16> %26, i16 %27, i32 5
  %29 = load i16, i16* %6, align 2
  %30 = insertelement <8 x i16> %28, i16 %29, i32 6
  %31 = load i16, i16* %6, align 2
  %32 = insertelement <8 x i16> %30, i16 %31, i32 7
  store <8 x i16> %32, <8 x i16>* %8, align 16
  %33 = load <8 x i16>, <8 x i16>* %8, align 16
  %34 = mul <8 x i16> %16, %33
  %35 = add <8 x i16> %15, %34
  store <8 x i16> %35, <8 x i16>* %7, align 16
  %36 = load <8 x i16>, <8 x i16>* %7, align 16
  ret <8 x i16> %36
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmla_n_u32_wrapper(<2 x i32> %0, <2 x i32> %1, i32 %2) #0 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca i32, align 4
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  %11 = alloca i32, align 4
  store <2 x i32> %0, <2 x i32>* %9, align 8
  store <2 x i32> %1, <2 x i32>* %10, align 8
  store i32 %2, i32* %11, align 4
  %12 = load <2 x i32>, <2 x i32>* %9, align 8
  %13 = load <2 x i32>, <2 x i32>* %10, align 8
  %14 = load i32, i32* %11, align 4
  store <2 x i32> %12, <2 x i32>* %4, align 8
  store <2 x i32> %13, <2 x i32>* %5, align 8
  store i32 %14, i32* %6, align 4
  %15 = load <2 x i32>, <2 x i32>* %4, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  %17 = load i32, i32* %6, align 4
  %18 = insertelement <2 x i32> undef, i32 %17, i32 0
  %19 = load i32, i32* %6, align 4
  %20 = insertelement <2 x i32> %18, i32 %19, i32 1
  store <2 x i32> %20, <2 x i32>* %8, align 8
  %21 = load <2 x i32>, <2 x i32>* %8, align 8
  %22 = mul <2 x i32> %16, %21
  %23 = add <2 x i32> %15, %22
  store <2 x i32> %23, <2 x i32>* %7, align 8
  %24 = load <2 x i32>, <2 x i32>* %7, align 8
  ret <2 x i32> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlaq_n_u32_wrapper(<4 x i32> %0, <4 x i32> %1, i32 %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  store <4 x i32> %0, <4 x i32>* %9, align 16
  store <4 x i32> %1, <4 x i32>* %10, align 16
  store i32 %2, i32* %11, align 4
  %12 = load <4 x i32>, <4 x i32>* %9, align 16
  %13 = load <4 x i32>, <4 x i32>* %10, align 16
  %14 = load i32, i32* %11, align 4
  store <4 x i32> %12, <4 x i32>* %4, align 16
  store <4 x i32> %13, <4 x i32>* %5, align 16
  store i32 %14, i32* %6, align 4
  %15 = load <4 x i32>, <4 x i32>* %4, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  %17 = load i32, i32* %6, align 4
  %18 = insertelement <4 x i32> undef, i32 %17, i32 0
  %19 = load i32, i32* %6, align 4
  %20 = insertelement <4 x i32> %18, i32 %19, i32 1
  %21 = load i32, i32* %6, align 4
  %22 = insertelement <4 x i32> %20, i32 %21, i32 2
  %23 = load i32, i32* %6, align 4
  %24 = insertelement <4 x i32> %22, i32 %23, i32 3
  store <4 x i32> %24, <4 x i32>* %8, align 16
  %25 = load <4 x i32>, <4 x i32>* %8, align 16
  %26 = mul <4 x i32> %16, %25
  %27 = add <4 x i32> %15, %26
  store <4 x i32> %27, <4 x i32>* %7, align 16
  %28 = load <4 x i32>, <4 x i32>* %7, align 16
  ret <4 x i32> %28
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlal_n_s16_wrapper(<4 x i32> %0, <4 x i16> %1, i16 signext %2) #1 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i16>, align 8
  %9 = alloca i16, align 2
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <4 x i16>, align 8
  %14 = alloca i16, align 2
  store <4 x i32> %0, <4 x i32>* %12, align 16
  store <4 x i16> %1, <4 x i16>* %13, align 8
  store i16 %2, i16* %14, align 2
  %15 = load <4 x i32>, <4 x i32>* %12, align 16
  %16 = load <4 x i16>, <4 x i16>* %13, align 8
  %17 = load i16, i16* %14, align 2
  store <4 x i32> %15, <4 x i32>* %7, align 16
  store <4 x i16> %16, <4 x i16>* %8, align 8
  store i16 %17, i16* %9, align 2
  %18 = load <4 x i32>, <4 x i32>* %7, align 16
  %19 = load <4 x i16>, <4 x i16>* %8, align 8
  %20 = load i16, i16* %9, align 2
  %21 = insertelement <4 x i16> undef, i16 %20, i32 0
  %22 = load i16, i16* %9, align 2
  %23 = insertelement <4 x i16> %21, i16 %22, i32 1
  %24 = load i16, i16* %9, align 2
  %25 = insertelement <4 x i16> %23, i16 %24, i32 2
  %26 = load i16, i16* %9, align 2
  %27 = insertelement <4 x i16> %25, i16 %26, i32 3
  store <4 x i16> %27, <4 x i16>* %11, align 8
  %28 = load <4 x i16>, <4 x i16>* %11, align 8
  store <4 x i16> %19, <4 x i16>* %4, align 8
  store <4 x i16> %28, <4 x i16>* %5, align 8
  %29 = load <4 x i16>, <4 x i16>* %4, align 8
  %30 = bitcast <4 x i16> %29 to <8 x i8>
  %31 = load <4 x i16>, <4 x i16>* %5, align 8
  %32 = bitcast <4 x i16> %31 to <8 x i8>
  %33 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %29, <4 x i16> %31) #4
  store <4 x i32> %33, <4 x i32>* %6, align 16
  %34 = load <4 x i32>, <4 x i32>* %6, align 16
  %35 = add <4 x i32> %18, %34
  store <4 x i32> %35, <4 x i32>* %10, align 16
  %36 = load <4 x i32>, <4 x i32>* %10, align 16
  ret <4 x i32> %36
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmlal_n_s32_wrapper(<2 x i64> %0, <2 x i32> %1, i32 %2) #1 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i32>, align 8
  %9 = alloca i32, align 4
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <2 x i32>, align 8
  %14 = alloca i32, align 4
  store <2 x i64> %0, <2 x i64>* %12, align 16
  store <2 x i32> %1, <2 x i32>* %13, align 8
  store i32 %2, i32* %14, align 4
  %15 = load <2 x i64>, <2 x i64>* %12, align 16
  %16 = load <2 x i32>, <2 x i32>* %13, align 8
  %17 = load i32, i32* %14, align 4
  store <2 x i64> %15, <2 x i64>* %7, align 16
  store <2 x i32> %16, <2 x i32>* %8, align 8
  store i32 %17, i32* %9, align 4
  %18 = load <2 x i64>, <2 x i64>* %7, align 16
  %19 = load <2 x i32>, <2 x i32>* %8, align 8
  %20 = load i32, i32* %9, align 4
  %21 = insertelement <2 x i32> undef, i32 %20, i32 0
  %22 = load i32, i32* %9, align 4
  %23 = insertelement <2 x i32> %21, i32 %22, i32 1
  store <2 x i32> %23, <2 x i32>* %11, align 8
  %24 = load <2 x i32>, <2 x i32>* %11, align 8
  store <2 x i32> %19, <2 x i32>* %4, align 8
  store <2 x i32> %24, <2 x i32>* %5, align 8
  %25 = load <2 x i32>, <2 x i32>* %4, align 8
  %26 = bitcast <2 x i32> %25 to <8 x i8>
  %27 = load <2 x i32>, <2 x i32>* %5, align 8
  %28 = bitcast <2 x i32> %27 to <8 x i8>
  %29 = call <2 x i64> @llvm.aarch64.neon.smull.v2i64(<2 x i32> %25, <2 x i32> %27) #4
  store <2 x i64> %29, <2 x i64>* %6, align 16
  %30 = load <2 x i64>, <2 x i64>* %6, align 16
  %31 = add <2 x i64> %18, %30
  store <2 x i64> %31, <2 x i64>* %10, align 16
  %32 = load <2 x i64>, <2 x i64>* %10, align 16
  ret <2 x i64> %32
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlal_high_n_s16_wrapper(<4 x i32> %0, <8 x i16> %1, i16 signext %2) #1 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i16>, align 8
  %9 = alloca i16, align 2
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <4 x i16>, align 8
  %14 = alloca <4 x i32>, align 16
  %15 = alloca <8 x i16>, align 16
  %16 = alloca i16, align 2
  %17 = alloca <4 x i32>, align 16
  %18 = alloca <4 x i32>, align 16
  %19 = alloca <8 x i16>, align 16
  %20 = alloca i16, align 2
  store <4 x i32> %0, <4 x i32>* %18, align 16
  store <8 x i16> %1, <8 x i16>* %19, align 16
  store i16 %2, i16* %20, align 2
  %21 = load <4 x i32>, <4 x i32>* %18, align 16
  %22 = load <8 x i16>, <8 x i16>* %19, align 16
  %23 = load i16, i16* %20, align 2
  store <4 x i32> %21, <4 x i32>* %14, align 16
  store <8 x i16> %22, <8 x i16>* %15, align 16
  store i16 %23, i16* %16, align 2
  %24 = load <4 x i32>, <4 x i32>* %14, align 16
  %25 = load <8 x i16>, <8 x i16>* %15, align 16
  store <8 x i16> %25, <8 x i16>* %12, align 16
  %26 = load <8 x i16>, <8 x i16>* %12, align 16
  %27 = load <8 x i16>, <8 x i16>* %12, align 16
  %28 = shufflevector <8 x i16> %26, <8 x i16> %27, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %28, <4 x i16>* %13, align 8
  %29 = load <4 x i16>, <4 x i16>* %13, align 8
  %30 = load i16, i16* %16, align 2
  store <4 x i32> %24, <4 x i32>* %7, align 16
  store <4 x i16> %29, <4 x i16>* %8, align 8
  store i16 %30, i16* %9, align 2
  %31 = load <4 x i32>, <4 x i32>* %7, align 16
  %32 = load <4 x i16>, <4 x i16>* %8, align 8
  %33 = load i16, i16* %9, align 2
  %34 = insertelement <4 x i16> undef, i16 %33, i32 0
  %35 = load i16, i16* %9, align 2
  %36 = insertelement <4 x i16> %34, i16 %35, i32 1
  %37 = load i16, i16* %9, align 2
  %38 = insertelement <4 x i16> %36, i16 %37, i32 2
  %39 = load i16, i16* %9, align 2
  %40 = insertelement <4 x i16> %38, i16 %39, i32 3
  store <4 x i16> %40, <4 x i16>* %11, align 8
  %41 = load <4 x i16>, <4 x i16>* %11, align 8
  store <4 x i16> %32, <4 x i16>* %4, align 8
  store <4 x i16> %41, <4 x i16>* %5, align 8
  %42 = load <4 x i16>, <4 x i16>* %4, align 8
  %43 = bitcast <4 x i16> %42 to <8 x i8>
  %44 = load <4 x i16>, <4 x i16>* %5, align 8
  %45 = bitcast <4 x i16> %44 to <8 x i8>
  %46 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %42, <4 x i16> %44) #4
  store <4 x i32> %46, <4 x i32>* %6, align 16
  %47 = load <4 x i32>, <4 x i32>* %6, align 16
  %48 = add <4 x i32> %31, %47
  store <4 x i32> %48, <4 x i32>* %10, align 16
  %49 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %49, <4 x i32>* %17, align 16
  %50 = load <4 x i32>, <4 x i32>* %17, align 16
  ret <4 x i32> %50
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmlal_high_n_s32_wrapper(<2 x i64> %0, <4 x i32> %1, i32 %2) #1 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i32>, align 8
  %9 = alloca i32, align 4
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <2 x i32>, align 8
  %14 = alloca <2 x i64>, align 16
  %15 = alloca <4 x i32>, align 16
  %16 = alloca i32, align 4
  %17 = alloca <2 x i64>, align 16
  %18 = alloca <2 x i64>, align 16
  %19 = alloca <4 x i32>, align 16
  %20 = alloca i32, align 4
  store <2 x i64> %0, <2 x i64>* %18, align 16
  store <4 x i32> %1, <4 x i32>* %19, align 16
  store i32 %2, i32* %20, align 4
  %21 = load <2 x i64>, <2 x i64>* %18, align 16
  %22 = load <4 x i32>, <4 x i32>* %19, align 16
  %23 = load i32, i32* %20, align 4
  store <2 x i64> %21, <2 x i64>* %14, align 16
  store <4 x i32> %22, <4 x i32>* %15, align 16
  store i32 %23, i32* %16, align 4
  %24 = load <2 x i64>, <2 x i64>* %14, align 16
  %25 = load <4 x i32>, <4 x i32>* %15, align 16
  store <4 x i32> %25, <4 x i32>* %12, align 16
  %26 = load <4 x i32>, <4 x i32>* %12, align 16
  %27 = load <4 x i32>, <4 x i32>* %12, align 16
  %28 = shufflevector <4 x i32> %26, <4 x i32> %27, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %28, <2 x i32>* %13, align 8
  %29 = load <2 x i32>, <2 x i32>* %13, align 8
  %30 = load i32, i32* %16, align 4
  store <2 x i64> %24, <2 x i64>* %7, align 16
  store <2 x i32> %29, <2 x i32>* %8, align 8
  store i32 %30, i32* %9, align 4
  %31 = load <2 x i64>, <2 x i64>* %7, align 16
  %32 = load <2 x i32>, <2 x i32>* %8, align 8
  %33 = load i32, i32* %9, align 4
  %34 = insertelement <2 x i32> undef, i32 %33, i32 0
  %35 = load i32, i32* %9, align 4
  %36 = insertelement <2 x i32> %34, i32 %35, i32 1
  store <2 x i32> %36, <2 x i32>* %11, align 8
  %37 = load <2 x i32>, <2 x i32>* %11, align 8
  store <2 x i32> %32, <2 x i32>* %4, align 8
  store <2 x i32> %37, <2 x i32>* %5, align 8
  %38 = load <2 x i32>, <2 x i32>* %4, align 8
  %39 = bitcast <2 x i32> %38 to <8 x i8>
  %40 = load <2 x i32>, <2 x i32>* %5, align 8
  %41 = bitcast <2 x i32> %40 to <8 x i8>
  %42 = call <2 x i64> @llvm.aarch64.neon.smull.v2i64(<2 x i32> %38, <2 x i32> %40) #4
  store <2 x i64> %42, <2 x i64>* %6, align 16
  %43 = load <2 x i64>, <2 x i64>* %6, align 16
  %44 = add <2 x i64> %31, %43
  store <2 x i64> %44, <2 x i64>* %10, align 16
  %45 = load <2 x i64>, <2 x i64>* %10, align 16
  store <2 x i64> %45, <2 x i64>* %17, align 16
  %46 = load <2 x i64>, <2 x i64>* %17, align 16
  ret <2 x i64> %46
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlal_n_u16_wrapper(<4 x i32> %0, <4 x i16> %1, i16 zeroext %2) #1 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i16>, align 8
  %9 = alloca i16, align 2
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <4 x i16>, align 8
  %14 = alloca i16, align 2
  store <4 x i32> %0, <4 x i32>* %12, align 16
  store <4 x i16> %1, <4 x i16>* %13, align 8
  store i16 %2, i16* %14, align 2
  %15 = load <4 x i32>, <4 x i32>* %12, align 16
  %16 = load <4 x i16>, <4 x i16>* %13, align 8
  %17 = load i16, i16* %14, align 2
  store <4 x i32> %15, <4 x i32>* %7, align 16
  store <4 x i16> %16, <4 x i16>* %8, align 8
  store i16 %17, i16* %9, align 2
  %18 = load <4 x i32>, <4 x i32>* %7, align 16
  %19 = load <4 x i16>, <4 x i16>* %8, align 8
  %20 = load i16, i16* %9, align 2
  %21 = insertelement <4 x i16> undef, i16 %20, i32 0
  %22 = load i16, i16* %9, align 2
  %23 = insertelement <4 x i16> %21, i16 %22, i32 1
  %24 = load i16, i16* %9, align 2
  %25 = insertelement <4 x i16> %23, i16 %24, i32 2
  %26 = load i16, i16* %9, align 2
  %27 = insertelement <4 x i16> %25, i16 %26, i32 3
  store <4 x i16> %27, <4 x i16>* %11, align 8
  %28 = load <4 x i16>, <4 x i16>* %11, align 8
  store <4 x i16> %19, <4 x i16>* %4, align 8
  store <4 x i16> %28, <4 x i16>* %5, align 8
  %29 = load <4 x i16>, <4 x i16>* %4, align 8
  %30 = bitcast <4 x i16> %29 to <8 x i8>
  %31 = load <4 x i16>, <4 x i16>* %5, align 8
  %32 = bitcast <4 x i16> %31 to <8 x i8>
  %33 = call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %29, <4 x i16> %31) #4
  store <4 x i32> %33, <4 x i32>* %6, align 16
  %34 = load <4 x i32>, <4 x i32>* %6, align 16
  %35 = add <4 x i32> %18, %34
  store <4 x i32> %35, <4 x i32>* %10, align 16
  %36 = load <4 x i32>, <4 x i32>* %10, align 16
  ret <4 x i32> %36
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmlal_n_u32_wrapper(<2 x i64> %0, <2 x i32> %1, i32 %2) #1 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i32>, align 8
  %9 = alloca i32, align 4
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <2 x i32>, align 8
  %14 = alloca i32, align 4
  store <2 x i64> %0, <2 x i64>* %12, align 16
  store <2 x i32> %1, <2 x i32>* %13, align 8
  store i32 %2, i32* %14, align 4
  %15 = load <2 x i64>, <2 x i64>* %12, align 16
  %16 = load <2 x i32>, <2 x i32>* %13, align 8
  %17 = load i32, i32* %14, align 4
  store <2 x i64> %15, <2 x i64>* %7, align 16
  store <2 x i32> %16, <2 x i32>* %8, align 8
  store i32 %17, i32* %9, align 4
  %18 = load <2 x i64>, <2 x i64>* %7, align 16
  %19 = load <2 x i32>, <2 x i32>* %8, align 8
  %20 = load i32, i32* %9, align 4
  %21 = insertelement <2 x i32> undef, i32 %20, i32 0
  %22 = load i32, i32* %9, align 4
  %23 = insertelement <2 x i32> %21, i32 %22, i32 1
  store <2 x i32> %23, <2 x i32>* %11, align 8
  %24 = load <2 x i32>, <2 x i32>* %11, align 8
  store <2 x i32> %19, <2 x i32>* %4, align 8
  store <2 x i32> %24, <2 x i32>* %5, align 8
  %25 = load <2 x i32>, <2 x i32>* %4, align 8
  %26 = bitcast <2 x i32> %25 to <8 x i8>
  %27 = load <2 x i32>, <2 x i32>* %5, align 8
  %28 = bitcast <2 x i32> %27 to <8 x i8>
  %29 = call <2 x i64> @llvm.aarch64.neon.umull.v2i64(<2 x i32> %25, <2 x i32> %27) #4
  store <2 x i64> %29, <2 x i64>* %6, align 16
  %30 = load <2 x i64>, <2 x i64>* %6, align 16
  %31 = add <2 x i64> %18, %30
  store <2 x i64> %31, <2 x i64>* %10, align 16
  %32 = load <2 x i64>, <2 x i64>* %10, align 16
  ret <2 x i64> %32
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlal_high_n_u16_wrapper(<4 x i32> %0, <8 x i16> %1, i16 zeroext %2) #1 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i16>, align 8
  %9 = alloca i16, align 2
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <4 x i16>, align 8
  %14 = alloca <4 x i32>, align 16
  %15 = alloca <8 x i16>, align 16
  %16 = alloca i16, align 2
  %17 = alloca <4 x i32>, align 16
  %18 = alloca <4 x i32>, align 16
  %19 = alloca <8 x i16>, align 16
  %20 = alloca i16, align 2
  store <4 x i32> %0, <4 x i32>* %18, align 16
  store <8 x i16> %1, <8 x i16>* %19, align 16
  store i16 %2, i16* %20, align 2
  %21 = load <4 x i32>, <4 x i32>* %18, align 16
  %22 = load <8 x i16>, <8 x i16>* %19, align 16
  %23 = load i16, i16* %20, align 2
  store <4 x i32> %21, <4 x i32>* %14, align 16
  store <8 x i16> %22, <8 x i16>* %15, align 16
  store i16 %23, i16* %16, align 2
  %24 = load <4 x i32>, <4 x i32>* %14, align 16
  %25 = load <8 x i16>, <8 x i16>* %15, align 16
  store <8 x i16> %25, <8 x i16>* %12, align 16
  %26 = load <8 x i16>, <8 x i16>* %12, align 16
  %27 = load <8 x i16>, <8 x i16>* %12, align 16
  %28 = shufflevector <8 x i16> %26, <8 x i16> %27, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %28, <4 x i16>* %13, align 8
  %29 = load <4 x i16>, <4 x i16>* %13, align 8
  %30 = load i16, i16* %16, align 2
  store <4 x i32> %24, <4 x i32>* %7, align 16
  store <4 x i16> %29, <4 x i16>* %8, align 8
  store i16 %30, i16* %9, align 2
  %31 = load <4 x i32>, <4 x i32>* %7, align 16
  %32 = load <4 x i16>, <4 x i16>* %8, align 8
  %33 = load i16, i16* %9, align 2
  %34 = insertelement <4 x i16> undef, i16 %33, i32 0
  %35 = load i16, i16* %9, align 2
  %36 = insertelement <4 x i16> %34, i16 %35, i32 1
  %37 = load i16, i16* %9, align 2
  %38 = insertelement <4 x i16> %36, i16 %37, i32 2
  %39 = load i16, i16* %9, align 2
  %40 = insertelement <4 x i16> %38, i16 %39, i32 3
  store <4 x i16> %40, <4 x i16>* %11, align 8
  %41 = load <4 x i16>, <4 x i16>* %11, align 8
  store <4 x i16> %32, <4 x i16>* %4, align 8
  store <4 x i16> %41, <4 x i16>* %5, align 8
  %42 = load <4 x i16>, <4 x i16>* %4, align 8
  %43 = bitcast <4 x i16> %42 to <8 x i8>
  %44 = load <4 x i16>, <4 x i16>* %5, align 8
  %45 = bitcast <4 x i16> %44 to <8 x i8>
  %46 = call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %42, <4 x i16> %44) #4
  store <4 x i32> %46, <4 x i32>* %6, align 16
  %47 = load <4 x i32>, <4 x i32>* %6, align 16
  %48 = add <4 x i32> %31, %47
  store <4 x i32> %48, <4 x i32>* %10, align 16
  %49 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %49, <4 x i32>* %17, align 16
  %50 = load <4 x i32>, <4 x i32>* %17, align 16
  ret <4 x i32> %50
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmlal_high_n_u32_wrapper(<2 x i64> %0, <4 x i32> %1, i32 %2) #1 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i32>, align 8
  %9 = alloca i32, align 4
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <2 x i32>, align 8
  %14 = alloca <2 x i64>, align 16
  %15 = alloca <4 x i32>, align 16
  %16 = alloca i32, align 4
  %17 = alloca <2 x i64>, align 16
  %18 = alloca <2 x i64>, align 16
  %19 = alloca <4 x i32>, align 16
  %20 = alloca i32, align 4
  store <2 x i64> %0, <2 x i64>* %18, align 16
  store <4 x i32> %1, <4 x i32>* %19, align 16
  store i32 %2, i32* %20, align 4
  %21 = load <2 x i64>, <2 x i64>* %18, align 16
  %22 = load <4 x i32>, <4 x i32>* %19, align 16
  %23 = load i32, i32* %20, align 4
  store <2 x i64> %21, <2 x i64>* %14, align 16
  store <4 x i32> %22, <4 x i32>* %15, align 16
  store i32 %23, i32* %16, align 4
  %24 = load <2 x i64>, <2 x i64>* %14, align 16
  %25 = load <4 x i32>, <4 x i32>* %15, align 16
  store <4 x i32> %25, <4 x i32>* %12, align 16
  %26 = load <4 x i32>, <4 x i32>* %12, align 16
  %27 = load <4 x i32>, <4 x i32>* %12, align 16
  %28 = shufflevector <4 x i32> %26, <4 x i32> %27, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %28, <2 x i32>* %13, align 8
  %29 = load <2 x i32>, <2 x i32>* %13, align 8
  %30 = load i32, i32* %16, align 4
  store <2 x i64> %24, <2 x i64>* %7, align 16
  store <2 x i32> %29, <2 x i32>* %8, align 8
  store i32 %30, i32* %9, align 4
  %31 = load <2 x i64>, <2 x i64>* %7, align 16
  %32 = load <2 x i32>, <2 x i32>* %8, align 8
  %33 = load i32, i32* %9, align 4
  %34 = insertelement <2 x i32> undef, i32 %33, i32 0
  %35 = load i32, i32* %9, align 4
  %36 = insertelement <2 x i32> %34, i32 %35, i32 1
  store <2 x i32> %36, <2 x i32>* %11, align 8
  %37 = load <2 x i32>, <2 x i32>* %11, align 8
  store <2 x i32> %32, <2 x i32>* %4, align 8
  store <2 x i32> %37, <2 x i32>* %5, align 8
  %38 = load <2 x i32>, <2 x i32>* %4, align 8
  %39 = bitcast <2 x i32> %38 to <8 x i8>
  %40 = load <2 x i32>, <2 x i32>* %5, align 8
  %41 = bitcast <2 x i32> %40 to <8 x i8>
  %42 = call <2 x i64> @llvm.aarch64.neon.umull.v2i64(<2 x i32> %38, <2 x i32> %40) #4
  store <2 x i64> %42, <2 x i64>* %6, align 16
  %43 = load <2 x i64>, <2 x i64>* %6, align 16
  %44 = add <2 x i64> %31, %43
  store <2 x i64> %44, <2 x i64>* %10, align 16
  %45 = load <2 x i64>, <2 x i64>* %10, align 16
  store <2 x i64> %45, <2 x i64>* %17, align 16
  %46 = load <2 x i64>, <2 x i64>* %17, align 16
  ret <2 x i64> %46
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqdmlal_n_s16_wrapper(<4 x i32> %0, <4 x i16> %1, i16 signext %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca i16, align 2
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <4 x i16>, align 8
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <4 x i16>, align 8
  %15 = alloca i16, align 2
  store <4 x i32> %0, <4 x i32>* %13, align 16
  store <4 x i16> %1, <4 x i16>* %14, align 8
  store i16 %2, i16* %15, align 2
  %16 = load <4 x i32>, <4 x i32>* %13, align 16
  %17 = load <4 x i16>, <4 x i16>* %14, align 8
  %18 = load i16, i16* %15, align 2
  store <4 x i32> %16, <4 x i32>* %8, align 16
  store <4 x i16> %17, <4 x i16>* %9, align 8
  store i16 %18, i16* %10, align 2
  %19 = load <4 x i32>, <4 x i32>* %8, align 16
  %20 = load <4 x i16>, <4 x i16>* %9, align 8
  %21 = load i16, i16* %10, align 2
  %22 = insertelement <4 x i16> undef, i16 %21, i32 0
  %23 = load i16, i16* %10, align 2
  %24 = insertelement <4 x i16> %22, i16 %23, i32 1
  %25 = load i16, i16* %10, align 2
  %26 = insertelement <4 x i16> %24, i16 %25, i32 2
  %27 = load i16, i16* %10, align 2
  %28 = insertelement <4 x i16> %26, i16 %27, i32 3
  store <4 x i16> %28, <4 x i16>* %12, align 8
  %29 = load <4 x i16>, <4 x i16>* %12, align 8
  store <4 x i32> %19, <4 x i32>* %4, align 16
  store <4 x i16> %20, <4 x i16>* %5, align 8
  store <4 x i16> %29, <4 x i16>* %6, align 8
  %30 = load <4 x i32>, <4 x i32>* %4, align 16
  %31 = bitcast <4 x i32> %30 to <16 x i8>
  %32 = load <4 x i16>, <4 x i16>* %5, align 8
  %33 = bitcast <4 x i16> %32 to <8 x i8>
  %34 = load <4 x i16>, <4 x i16>* %6, align 8
  %35 = bitcast <4 x i16> %34 to <8 x i8>
  %36 = call <4 x i32> @llvm.aarch64.neon.sqdmull.v4i32(<4 x i16> %32, <4 x i16> %34) #4
  %37 = call <4 x i32> @llvm.aarch64.neon.sqadd.v4i32(<4 x i32> %30, <4 x i32> %36) #4
  store <4 x i32> %37, <4 x i32>* %7, align 16
  %38 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %38, <4 x i32>* %11, align 16
  %39 = load <4 x i32>, <4 x i32>* %11, align 16
  ret <4 x i32> %39
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqdmlal_n_s32_wrapper(<2 x i64> %0, <2 x i32> %1, i32 %2) #1 {
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca i32, align 4
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <2 x i32>, align 8
  %13 = alloca <2 x i64>, align 16
  %14 = alloca <2 x i32>, align 8
  %15 = alloca i32, align 4
  store <2 x i64> %0, <2 x i64>* %13, align 16
  store <2 x i32> %1, <2 x i32>* %14, align 8
  store i32 %2, i32* %15, align 4
  %16 = load <2 x i64>, <2 x i64>* %13, align 16
  %17 = load <2 x i32>, <2 x i32>* %14, align 8
  %18 = load i32, i32* %15, align 4
  store <2 x i64> %16, <2 x i64>* %8, align 16
  store <2 x i32> %17, <2 x i32>* %9, align 8
  store i32 %18, i32* %10, align 4
  %19 = load <2 x i64>, <2 x i64>* %8, align 16
  %20 = load <2 x i32>, <2 x i32>* %9, align 8
  %21 = load i32, i32* %10, align 4
  %22 = insertelement <2 x i32> undef, i32 %21, i32 0
  %23 = load i32, i32* %10, align 4
  %24 = insertelement <2 x i32> %22, i32 %23, i32 1
  store <2 x i32> %24, <2 x i32>* %12, align 8
  %25 = load <2 x i32>, <2 x i32>* %12, align 8
  store <2 x i64> %19, <2 x i64>* %4, align 16
  store <2 x i32> %20, <2 x i32>* %5, align 8
  store <2 x i32> %25, <2 x i32>* %6, align 8
  %26 = load <2 x i64>, <2 x i64>* %4, align 16
  %27 = bitcast <2 x i64> %26 to <16 x i8>
  %28 = load <2 x i32>, <2 x i32>* %5, align 8
  %29 = bitcast <2 x i32> %28 to <8 x i8>
  %30 = load <2 x i32>, <2 x i32>* %6, align 8
  %31 = bitcast <2 x i32> %30 to <8 x i8>
  %32 = call <2 x i64> @llvm.aarch64.neon.sqdmull.v2i64(<2 x i32> %28, <2 x i32> %30) #4
  %33 = call <2 x i64> @llvm.aarch64.neon.sqadd.v2i64(<2 x i64> %26, <2 x i64> %32) #4
  store <2 x i64> %33, <2 x i64>* %7, align 16
  %34 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %34, <2 x i64>* %11, align 16
  %35 = load <2 x i64>, <2 x i64>* %11, align 16
  ret <2 x i64> %35
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqdmlal_high_n_s16_wrapper(<4 x i32> %0, <8 x i16> %1, i16 signext %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca i16, align 2
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <4 x i16>, align 8
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <4 x i16>, align 8
  %15 = alloca <4 x i32>, align 16
  %16 = alloca <8 x i16>, align 16
  %17 = alloca i16, align 2
  %18 = alloca <4 x i32>, align 16
  %19 = alloca <4 x i32>, align 16
  %20 = alloca <8 x i16>, align 16
  %21 = alloca i16, align 2
  store <4 x i32> %0, <4 x i32>* %19, align 16
  store <8 x i16> %1, <8 x i16>* %20, align 16
  store i16 %2, i16* %21, align 2
  %22 = load <4 x i32>, <4 x i32>* %19, align 16
  %23 = load <8 x i16>, <8 x i16>* %20, align 16
  %24 = load i16, i16* %21, align 2
  store <4 x i32> %22, <4 x i32>* %15, align 16
  store <8 x i16> %23, <8 x i16>* %16, align 16
  store i16 %24, i16* %17, align 2
  %25 = load <4 x i32>, <4 x i32>* %15, align 16
  %26 = load <8 x i16>, <8 x i16>* %16, align 16
  store <8 x i16> %26, <8 x i16>* %13, align 16
  %27 = load <8 x i16>, <8 x i16>* %13, align 16
  %28 = load <8 x i16>, <8 x i16>* %13, align 16
  %29 = shufflevector <8 x i16> %27, <8 x i16> %28, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %29, <4 x i16>* %14, align 8
  %30 = load <4 x i16>, <4 x i16>* %14, align 8
  %31 = load i16, i16* %17, align 2
  store <4 x i32> %25, <4 x i32>* %8, align 16
  store <4 x i16> %30, <4 x i16>* %9, align 8
  store i16 %31, i16* %10, align 2
  %32 = load <4 x i32>, <4 x i32>* %8, align 16
  %33 = load <4 x i16>, <4 x i16>* %9, align 8
  %34 = load i16, i16* %10, align 2
  %35 = insertelement <4 x i16> undef, i16 %34, i32 0
  %36 = load i16, i16* %10, align 2
  %37 = insertelement <4 x i16> %35, i16 %36, i32 1
  %38 = load i16, i16* %10, align 2
  %39 = insertelement <4 x i16> %37, i16 %38, i32 2
  %40 = load i16, i16* %10, align 2
  %41 = insertelement <4 x i16> %39, i16 %40, i32 3
  store <4 x i16> %41, <4 x i16>* %12, align 8
  %42 = load <4 x i16>, <4 x i16>* %12, align 8
  store <4 x i32> %32, <4 x i32>* %4, align 16
  store <4 x i16> %33, <4 x i16>* %5, align 8
  store <4 x i16> %42, <4 x i16>* %6, align 8
  %43 = load <4 x i32>, <4 x i32>* %4, align 16
  %44 = bitcast <4 x i32> %43 to <16 x i8>
  %45 = load <4 x i16>, <4 x i16>* %5, align 8
  %46 = bitcast <4 x i16> %45 to <8 x i8>
  %47 = load <4 x i16>, <4 x i16>* %6, align 8
  %48 = bitcast <4 x i16> %47 to <8 x i8>
  %49 = call <4 x i32> @llvm.aarch64.neon.sqdmull.v4i32(<4 x i16> %45, <4 x i16> %47) #4
  %50 = call <4 x i32> @llvm.aarch64.neon.sqadd.v4i32(<4 x i32> %43, <4 x i32> %49) #4
  store <4 x i32> %50, <4 x i32>* %7, align 16
  %51 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %51, <4 x i32>* %11, align 16
  %52 = load <4 x i32>, <4 x i32>* %11, align 16
  store <4 x i32> %52, <4 x i32>* %18, align 16
  %53 = load <4 x i32>, <4 x i32>* %18, align 16
  ret <4 x i32> %53
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqdmlal_high_n_s32_wrapper(<2 x i64> %0, <4 x i32> %1, i32 %2) #1 {
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca i32, align 4
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <2 x i32>, align 8
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <2 x i32>, align 8
  %15 = alloca <2 x i64>, align 16
  %16 = alloca <4 x i32>, align 16
  %17 = alloca i32, align 4
  %18 = alloca <2 x i64>, align 16
  %19 = alloca <2 x i64>, align 16
  %20 = alloca <4 x i32>, align 16
  %21 = alloca i32, align 4
  store <2 x i64> %0, <2 x i64>* %19, align 16
  store <4 x i32> %1, <4 x i32>* %20, align 16
  store i32 %2, i32* %21, align 4
  %22 = load <2 x i64>, <2 x i64>* %19, align 16
  %23 = load <4 x i32>, <4 x i32>* %20, align 16
  %24 = load i32, i32* %21, align 4
  store <2 x i64> %22, <2 x i64>* %15, align 16
  store <4 x i32> %23, <4 x i32>* %16, align 16
  store i32 %24, i32* %17, align 4
  %25 = load <2 x i64>, <2 x i64>* %15, align 16
  %26 = load <4 x i32>, <4 x i32>* %16, align 16
  store <4 x i32> %26, <4 x i32>* %13, align 16
  %27 = load <4 x i32>, <4 x i32>* %13, align 16
  %28 = load <4 x i32>, <4 x i32>* %13, align 16
  %29 = shufflevector <4 x i32> %27, <4 x i32> %28, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %29, <2 x i32>* %14, align 8
  %30 = load <2 x i32>, <2 x i32>* %14, align 8
  %31 = load i32, i32* %17, align 4
  store <2 x i64> %25, <2 x i64>* %8, align 16
  store <2 x i32> %30, <2 x i32>* %9, align 8
  store i32 %31, i32* %10, align 4
  %32 = load <2 x i64>, <2 x i64>* %8, align 16
  %33 = load <2 x i32>, <2 x i32>* %9, align 8
  %34 = load i32, i32* %10, align 4
  %35 = insertelement <2 x i32> undef, i32 %34, i32 0
  %36 = load i32, i32* %10, align 4
  %37 = insertelement <2 x i32> %35, i32 %36, i32 1
  store <2 x i32> %37, <2 x i32>* %12, align 8
  %38 = load <2 x i32>, <2 x i32>* %12, align 8
  store <2 x i64> %32, <2 x i64>* %4, align 16
  store <2 x i32> %33, <2 x i32>* %5, align 8
  store <2 x i32> %38, <2 x i32>* %6, align 8
  %39 = load <2 x i64>, <2 x i64>* %4, align 16
  %40 = bitcast <2 x i64> %39 to <16 x i8>
  %41 = load <2 x i32>, <2 x i32>* %5, align 8
  %42 = bitcast <2 x i32> %41 to <8 x i8>
  %43 = load <2 x i32>, <2 x i32>* %6, align 8
  %44 = bitcast <2 x i32> %43 to <8 x i8>
  %45 = call <2 x i64> @llvm.aarch64.neon.sqdmull.v2i64(<2 x i32> %41, <2 x i32> %43) #4
  %46 = call <2 x i64> @llvm.aarch64.neon.sqadd.v2i64(<2 x i64> %39, <2 x i64> %45) #4
  store <2 x i64> %46, <2 x i64>* %7, align 16
  %47 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %47, <2 x i64>* %11, align 16
  %48 = load <2 x i64>, <2 x i64>* %11, align 16
  store <2 x i64> %48, <2 x i64>* %18, align 16
  %49 = load <2 x i64>, <2 x i64>* %18, align 16
  ret <2 x i64> %49
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmls_n_s16_wrapper(<4 x i16> %0, <4 x i16> %1, i16 signext %2) #0 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca i16, align 2
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  %11 = alloca i16, align 2
  store <4 x i16> %0, <4 x i16>* %9, align 8
  store <4 x i16> %1, <4 x i16>* %10, align 8
  store i16 %2, i16* %11, align 2
  %12 = load <4 x i16>, <4 x i16>* %9, align 8
  %13 = load <4 x i16>, <4 x i16>* %10, align 8
  %14 = load i16, i16* %11, align 2
  store <4 x i16> %12, <4 x i16>* %4, align 8
  store <4 x i16> %13, <4 x i16>* %5, align 8
  store i16 %14, i16* %6, align 2
  %15 = load <4 x i16>, <4 x i16>* %4, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  %17 = load i16, i16* %6, align 2
  %18 = insertelement <4 x i16> undef, i16 %17, i32 0
  %19 = load i16, i16* %6, align 2
  %20 = insertelement <4 x i16> %18, i16 %19, i32 1
  %21 = load i16, i16* %6, align 2
  %22 = insertelement <4 x i16> %20, i16 %21, i32 2
  %23 = load i16, i16* %6, align 2
  %24 = insertelement <4 x i16> %22, i16 %23, i32 3
  store <4 x i16> %24, <4 x i16>* %8, align 8
  %25 = load <4 x i16>, <4 x i16>* %8, align 8
  %26 = mul <4 x i16> %16, %25
  %27 = sub <4 x i16> %15, %26
  store <4 x i16> %27, <4 x i16>* %7, align 8
  %28 = load <4 x i16>, <4 x i16>* %7, align 8
  ret <4 x i16> %28
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmlsq_n_s16_wrapper(<8 x i16> %0, <8 x i16> %1, i16 signext %2) #1 {
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca i16, align 2
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i16>, align 16
  %11 = alloca i16, align 2
  store <8 x i16> %0, <8 x i16>* %9, align 16
  store <8 x i16> %1, <8 x i16>* %10, align 16
  store i16 %2, i16* %11, align 2
  %12 = load <8 x i16>, <8 x i16>* %9, align 16
  %13 = load <8 x i16>, <8 x i16>* %10, align 16
  %14 = load i16, i16* %11, align 2
  store <8 x i16> %12, <8 x i16>* %4, align 16
  store <8 x i16> %13, <8 x i16>* %5, align 16
  store i16 %14, i16* %6, align 2
  %15 = load <8 x i16>, <8 x i16>* %4, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  %17 = load i16, i16* %6, align 2
  %18 = insertelement <8 x i16> undef, i16 %17, i32 0
  %19 = load i16, i16* %6, align 2
  %20 = insertelement <8 x i16> %18, i16 %19, i32 1
  %21 = load i16, i16* %6, align 2
  %22 = insertelement <8 x i16> %20, i16 %21, i32 2
  %23 = load i16, i16* %6, align 2
  %24 = insertelement <8 x i16> %22, i16 %23, i32 3
  %25 = load i16, i16* %6, align 2
  %26 = insertelement <8 x i16> %24, i16 %25, i32 4
  %27 = load i16, i16* %6, align 2
  %28 = insertelement <8 x i16> %26, i16 %27, i32 5
  %29 = load i16, i16* %6, align 2
  %30 = insertelement <8 x i16> %28, i16 %29, i32 6
  %31 = load i16, i16* %6, align 2
  %32 = insertelement <8 x i16> %30, i16 %31, i32 7
  store <8 x i16> %32, <8 x i16>* %8, align 16
  %33 = load <8 x i16>, <8 x i16>* %8, align 16
  %34 = mul <8 x i16> %16, %33
  %35 = sub <8 x i16> %15, %34
  store <8 x i16> %35, <8 x i16>* %7, align 16
  %36 = load <8 x i16>, <8 x i16>* %7, align 16
  ret <8 x i16> %36
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmls_n_s32_wrapper(<2 x i32> %0, <2 x i32> %1, i32 %2) #0 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca i32, align 4
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  %11 = alloca i32, align 4
  store <2 x i32> %0, <2 x i32>* %9, align 8
  store <2 x i32> %1, <2 x i32>* %10, align 8
  store i32 %2, i32* %11, align 4
  %12 = load <2 x i32>, <2 x i32>* %9, align 8
  %13 = load <2 x i32>, <2 x i32>* %10, align 8
  %14 = load i32, i32* %11, align 4
  store <2 x i32> %12, <2 x i32>* %4, align 8
  store <2 x i32> %13, <2 x i32>* %5, align 8
  store i32 %14, i32* %6, align 4
  %15 = load <2 x i32>, <2 x i32>* %4, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  %17 = load i32, i32* %6, align 4
  %18 = insertelement <2 x i32> undef, i32 %17, i32 0
  %19 = load i32, i32* %6, align 4
  %20 = insertelement <2 x i32> %18, i32 %19, i32 1
  store <2 x i32> %20, <2 x i32>* %8, align 8
  %21 = load <2 x i32>, <2 x i32>* %8, align 8
  %22 = mul <2 x i32> %16, %21
  %23 = sub <2 x i32> %15, %22
  store <2 x i32> %23, <2 x i32>* %7, align 8
  %24 = load <2 x i32>, <2 x i32>* %7, align 8
  ret <2 x i32> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlsq_n_s32_wrapper(<4 x i32> %0, <4 x i32> %1, i32 %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  store <4 x i32> %0, <4 x i32>* %9, align 16
  store <4 x i32> %1, <4 x i32>* %10, align 16
  store i32 %2, i32* %11, align 4
  %12 = load <4 x i32>, <4 x i32>* %9, align 16
  %13 = load <4 x i32>, <4 x i32>* %10, align 16
  %14 = load i32, i32* %11, align 4
  store <4 x i32> %12, <4 x i32>* %4, align 16
  store <4 x i32> %13, <4 x i32>* %5, align 16
  store i32 %14, i32* %6, align 4
  %15 = load <4 x i32>, <4 x i32>* %4, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  %17 = load i32, i32* %6, align 4
  %18 = insertelement <4 x i32> undef, i32 %17, i32 0
  %19 = load i32, i32* %6, align 4
  %20 = insertelement <4 x i32> %18, i32 %19, i32 1
  %21 = load i32, i32* %6, align 4
  %22 = insertelement <4 x i32> %20, i32 %21, i32 2
  %23 = load i32, i32* %6, align 4
  %24 = insertelement <4 x i32> %22, i32 %23, i32 3
  store <4 x i32> %24, <4 x i32>* %8, align 16
  %25 = load <4 x i32>, <4 x i32>* %8, align 16
  %26 = mul <4 x i32> %16, %25
  %27 = sub <4 x i32> %15, %26
  store <4 x i32> %27, <4 x i32>* %7, align 16
  %28 = load <4 x i32>, <4 x i32>* %7, align 16
  ret <4 x i32> %28
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmls_n_u16_wrapper(<4 x i16> %0, <4 x i16> %1, i16 zeroext %2) #0 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca i16, align 2
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  %11 = alloca i16, align 2
  store <4 x i16> %0, <4 x i16>* %9, align 8
  store <4 x i16> %1, <4 x i16>* %10, align 8
  store i16 %2, i16* %11, align 2
  %12 = load <4 x i16>, <4 x i16>* %9, align 8
  %13 = load <4 x i16>, <4 x i16>* %10, align 8
  %14 = load i16, i16* %11, align 2
  store <4 x i16> %12, <4 x i16>* %4, align 8
  store <4 x i16> %13, <4 x i16>* %5, align 8
  store i16 %14, i16* %6, align 2
  %15 = load <4 x i16>, <4 x i16>* %4, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  %17 = load i16, i16* %6, align 2
  %18 = insertelement <4 x i16> undef, i16 %17, i32 0
  %19 = load i16, i16* %6, align 2
  %20 = insertelement <4 x i16> %18, i16 %19, i32 1
  %21 = load i16, i16* %6, align 2
  %22 = insertelement <4 x i16> %20, i16 %21, i32 2
  %23 = load i16, i16* %6, align 2
  %24 = insertelement <4 x i16> %22, i16 %23, i32 3
  store <4 x i16> %24, <4 x i16>* %8, align 8
  %25 = load <4 x i16>, <4 x i16>* %8, align 8
  %26 = mul <4 x i16> %16, %25
  %27 = sub <4 x i16> %15, %26
  store <4 x i16> %27, <4 x i16>* %7, align 8
  %28 = load <4 x i16>, <4 x i16>* %7, align 8
  ret <4 x i16> %28
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmlsq_n_u16_wrapper(<8 x i16> %0, <8 x i16> %1, i16 zeroext %2) #1 {
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca i16, align 2
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i16>, align 16
  %11 = alloca i16, align 2
  store <8 x i16> %0, <8 x i16>* %9, align 16
  store <8 x i16> %1, <8 x i16>* %10, align 16
  store i16 %2, i16* %11, align 2
  %12 = load <8 x i16>, <8 x i16>* %9, align 16
  %13 = load <8 x i16>, <8 x i16>* %10, align 16
  %14 = load i16, i16* %11, align 2
  store <8 x i16> %12, <8 x i16>* %4, align 16
  store <8 x i16> %13, <8 x i16>* %5, align 16
  store i16 %14, i16* %6, align 2
  %15 = load <8 x i16>, <8 x i16>* %4, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  %17 = load i16, i16* %6, align 2
  %18 = insertelement <8 x i16> undef, i16 %17, i32 0
  %19 = load i16, i16* %6, align 2
  %20 = insertelement <8 x i16> %18, i16 %19, i32 1
  %21 = load i16, i16* %6, align 2
  %22 = insertelement <8 x i16> %20, i16 %21, i32 2
  %23 = load i16, i16* %6, align 2
  %24 = insertelement <8 x i16> %22, i16 %23, i32 3
  %25 = load i16, i16* %6, align 2
  %26 = insertelement <8 x i16> %24, i16 %25, i32 4
  %27 = load i16, i16* %6, align 2
  %28 = insertelement <8 x i16> %26, i16 %27, i32 5
  %29 = load i16, i16* %6, align 2
  %30 = insertelement <8 x i16> %28, i16 %29, i32 6
  %31 = load i16, i16* %6, align 2
  %32 = insertelement <8 x i16> %30, i16 %31, i32 7
  store <8 x i16> %32, <8 x i16>* %8, align 16
  %33 = load <8 x i16>, <8 x i16>* %8, align 16
  %34 = mul <8 x i16> %16, %33
  %35 = sub <8 x i16> %15, %34
  store <8 x i16> %35, <8 x i16>* %7, align 16
  %36 = load <8 x i16>, <8 x i16>* %7, align 16
  ret <8 x i16> %36
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmls_n_u32_wrapper(<2 x i32> %0, <2 x i32> %1, i32 %2) #0 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca i32, align 4
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  %11 = alloca i32, align 4
  store <2 x i32> %0, <2 x i32>* %9, align 8
  store <2 x i32> %1, <2 x i32>* %10, align 8
  store i32 %2, i32* %11, align 4
  %12 = load <2 x i32>, <2 x i32>* %9, align 8
  %13 = load <2 x i32>, <2 x i32>* %10, align 8
  %14 = load i32, i32* %11, align 4
  store <2 x i32> %12, <2 x i32>* %4, align 8
  store <2 x i32> %13, <2 x i32>* %5, align 8
  store i32 %14, i32* %6, align 4
  %15 = load <2 x i32>, <2 x i32>* %4, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  %17 = load i32, i32* %6, align 4
  %18 = insertelement <2 x i32> undef, i32 %17, i32 0
  %19 = load i32, i32* %6, align 4
  %20 = insertelement <2 x i32> %18, i32 %19, i32 1
  store <2 x i32> %20, <2 x i32>* %8, align 8
  %21 = load <2 x i32>, <2 x i32>* %8, align 8
  %22 = mul <2 x i32> %16, %21
  %23 = sub <2 x i32> %15, %22
  store <2 x i32> %23, <2 x i32>* %7, align 8
  %24 = load <2 x i32>, <2 x i32>* %7, align 8
  ret <2 x i32> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlsq_n_u32_wrapper(<4 x i32> %0, <4 x i32> %1, i32 %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca i32, align 4
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  store <4 x i32> %0, <4 x i32>* %9, align 16
  store <4 x i32> %1, <4 x i32>* %10, align 16
  store i32 %2, i32* %11, align 4
  %12 = load <4 x i32>, <4 x i32>* %9, align 16
  %13 = load <4 x i32>, <4 x i32>* %10, align 16
  %14 = load i32, i32* %11, align 4
  store <4 x i32> %12, <4 x i32>* %4, align 16
  store <4 x i32> %13, <4 x i32>* %5, align 16
  store i32 %14, i32* %6, align 4
  %15 = load <4 x i32>, <4 x i32>* %4, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  %17 = load i32, i32* %6, align 4
  %18 = insertelement <4 x i32> undef, i32 %17, i32 0
  %19 = load i32, i32* %6, align 4
  %20 = insertelement <4 x i32> %18, i32 %19, i32 1
  %21 = load i32, i32* %6, align 4
  %22 = insertelement <4 x i32> %20, i32 %21, i32 2
  %23 = load i32, i32* %6, align 4
  %24 = insertelement <4 x i32> %22, i32 %23, i32 3
  store <4 x i32> %24, <4 x i32>* %8, align 16
  %25 = load <4 x i32>, <4 x i32>* %8, align 16
  %26 = mul <4 x i32> %16, %25
  %27 = sub <4 x i32> %15, %26
  store <4 x i32> %27, <4 x i32>* %7, align 16
  %28 = load <4 x i32>, <4 x i32>* %7, align 16
  ret <4 x i32> %28
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlsl_n_s16_wrapper(<4 x i32> %0, <4 x i16> %1, i16 signext %2) #1 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i16>, align 8
  %9 = alloca i16, align 2
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <4 x i16>, align 8
  %14 = alloca i16, align 2
  store <4 x i32> %0, <4 x i32>* %12, align 16
  store <4 x i16> %1, <4 x i16>* %13, align 8
  store i16 %2, i16* %14, align 2
  %15 = load <4 x i32>, <4 x i32>* %12, align 16
  %16 = load <4 x i16>, <4 x i16>* %13, align 8
  %17 = load i16, i16* %14, align 2
  store <4 x i32> %15, <4 x i32>* %7, align 16
  store <4 x i16> %16, <4 x i16>* %8, align 8
  store i16 %17, i16* %9, align 2
  %18 = load <4 x i32>, <4 x i32>* %7, align 16
  %19 = load <4 x i16>, <4 x i16>* %8, align 8
  %20 = load i16, i16* %9, align 2
  %21 = insertelement <4 x i16> undef, i16 %20, i32 0
  %22 = load i16, i16* %9, align 2
  %23 = insertelement <4 x i16> %21, i16 %22, i32 1
  %24 = load i16, i16* %9, align 2
  %25 = insertelement <4 x i16> %23, i16 %24, i32 2
  %26 = load i16, i16* %9, align 2
  %27 = insertelement <4 x i16> %25, i16 %26, i32 3
  store <4 x i16> %27, <4 x i16>* %11, align 8
  %28 = load <4 x i16>, <4 x i16>* %11, align 8
  store <4 x i16> %19, <4 x i16>* %4, align 8
  store <4 x i16> %28, <4 x i16>* %5, align 8
  %29 = load <4 x i16>, <4 x i16>* %4, align 8
  %30 = bitcast <4 x i16> %29 to <8 x i8>
  %31 = load <4 x i16>, <4 x i16>* %5, align 8
  %32 = bitcast <4 x i16> %31 to <8 x i8>
  %33 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %29, <4 x i16> %31) #4
  store <4 x i32> %33, <4 x i32>* %6, align 16
  %34 = load <4 x i32>, <4 x i32>* %6, align 16
  %35 = sub <4 x i32> %18, %34
  store <4 x i32> %35, <4 x i32>* %10, align 16
  %36 = load <4 x i32>, <4 x i32>* %10, align 16
  ret <4 x i32> %36
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmlsl_n_s32_wrapper(<2 x i64> %0, <2 x i32> %1, i32 %2) #1 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i32>, align 8
  %9 = alloca i32, align 4
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <2 x i32>, align 8
  %14 = alloca i32, align 4
  store <2 x i64> %0, <2 x i64>* %12, align 16
  store <2 x i32> %1, <2 x i32>* %13, align 8
  store i32 %2, i32* %14, align 4
  %15 = load <2 x i64>, <2 x i64>* %12, align 16
  %16 = load <2 x i32>, <2 x i32>* %13, align 8
  %17 = load i32, i32* %14, align 4
  store <2 x i64> %15, <2 x i64>* %7, align 16
  store <2 x i32> %16, <2 x i32>* %8, align 8
  store i32 %17, i32* %9, align 4
  %18 = load <2 x i64>, <2 x i64>* %7, align 16
  %19 = load <2 x i32>, <2 x i32>* %8, align 8
  %20 = load i32, i32* %9, align 4
  %21 = insertelement <2 x i32> undef, i32 %20, i32 0
  %22 = load i32, i32* %9, align 4
  %23 = insertelement <2 x i32> %21, i32 %22, i32 1
  store <2 x i32> %23, <2 x i32>* %11, align 8
  %24 = load <2 x i32>, <2 x i32>* %11, align 8
  store <2 x i32> %19, <2 x i32>* %4, align 8
  store <2 x i32> %24, <2 x i32>* %5, align 8
  %25 = load <2 x i32>, <2 x i32>* %4, align 8
  %26 = bitcast <2 x i32> %25 to <8 x i8>
  %27 = load <2 x i32>, <2 x i32>* %5, align 8
  %28 = bitcast <2 x i32> %27 to <8 x i8>
  %29 = call <2 x i64> @llvm.aarch64.neon.smull.v2i64(<2 x i32> %25, <2 x i32> %27) #4
  store <2 x i64> %29, <2 x i64>* %6, align 16
  %30 = load <2 x i64>, <2 x i64>* %6, align 16
  %31 = sub <2 x i64> %18, %30
  store <2 x i64> %31, <2 x i64>* %10, align 16
  %32 = load <2 x i64>, <2 x i64>* %10, align 16
  ret <2 x i64> %32
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlsl_high_n_s16_wrapper(<4 x i32> %0, <8 x i16> %1, i16 signext %2) #1 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i16>, align 8
  %9 = alloca i16, align 2
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <4 x i16>, align 8
  %14 = alloca <4 x i32>, align 16
  %15 = alloca <8 x i16>, align 16
  %16 = alloca i16, align 2
  %17 = alloca <4 x i32>, align 16
  %18 = alloca <4 x i32>, align 16
  %19 = alloca <8 x i16>, align 16
  %20 = alloca i16, align 2
  store <4 x i32> %0, <4 x i32>* %18, align 16
  store <8 x i16> %1, <8 x i16>* %19, align 16
  store i16 %2, i16* %20, align 2
  %21 = load <4 x i32>, <4 x i32>* %18, align 16
  %22 = load <8 x i16>, <8 x i16>* %19, align 16
  %23 = load i16, i16* %20, align 2
  store <4 x i32> %21, <4 x i32>* %14, align 16
  store <8 x i16> %22, <8 x i16>* %15, align 16
  store i16 %23, i16* %16, align 2
  %24 = load <4 x i32>, <4 x i32>* %14, align 16
  %25 = load <8 x i16>, <8 x i16>* %15, align 16
  store <8 x i16> %25, <8 x i16>* %12, align 16
  %26 = load <8 x i16>, <8 x i16>* %12, align 16
  %27 = load <8 x i16>, <8 x i16>* %12, align 16
  %28 = shufflevector <8 x i16> %26, <8 x i16> %27, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %28, <4 x i16>* %13, align 8
  %29 = load <4 x i16>, <4 x i16>* %13, align 8
  %30 = load i16, i16* %16, align 2
  store <4 x i32> %24, <4 x i32>* %7, align 16
  store <4 x i16> %29, <4 x i16>* %8, align 8
  store i16 %30, i16* %9, align 2
  %31 = load <4 x i32>, <4 x i32>* %7, align 16
  %32 = load <4 x i16>, <4 x i16>* %8, align 8
  %33 = load i16, i16* %9, align 2
  %34 = insertelement <4 x i16> undef, i16 %33, i32 0
  %35 = load i16, i16* %9, align 2
  %36 = insertelement <4 x i16> %34, i16 %35, i32 1
  %37 = load i16, i16* %9, align 2
  %38 = insertelement <4 x i16> %36, i16 %37, i32 2
  %39 = load i16, i16* %9, align 2
  %40 = insertelement <4 x i16> %38, i16 %39, i32 3
  store <4 x i16> %40, <4 x i16>* %11, align 8
  %41 = load <4 x i16>, <4 x i16>* %11, align 8
  store <4 x i16> %32, <4 x i16>* %4, align 8
  store <4 x i16> %41, <4 x i16>* %5, align 8
  %42 = load <4 x i16>, <4 x i16>* %4, align 8
  %43 = bitcast <4 x i16> %42 to <8 x i8>
  %44 = load <4 x i16>, <4 x i16>* %5, align 8
  %45 = bitcast <4 x i16> %44 to <8 x i8>
  %46 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %42, <4 x i16> %44) #4
  store <4 x i32> %46, <4 x i32>* %6, align 16
  %47 = load <4 x i32>, <4 x i32>* %6, align 16
  %48 = sub <4 x i32> %31, %47
  store <4 x i32> %48, <4 x i32>* %10, align 16
  %49 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %49, <4 x i32>* %17, align 16
  %50 = load <4 x i32>, <4 x i32>* %17, align 16
  ret <4 x i32> %50
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmlsl_high_n_s32_wrapper(<2 x i64> %0, <4 x i32> %1, i32 %2) #1 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i32>, align 8
  %9 = alloca i32, align 4
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <2 x i32>, align 8
  %14 = alloca <2 x i64>, align 16
  %15 = alloca <4 x i32>, align 16
  %16 = alloca i32, align 4
  %17 = alloca <2 x i64>, align 16
  %18 = alloca <2 x i64>, align 16
  %19 = alloca <4 x i32>, align 16
  %20 = alloca i32, align 4
  store <2 x i64> %0, <2 x i64>* %18, align 16
  store <4 x i32> %1, <4 x i32>* %19, align 16
  store i32 %2, i32* %20, align 4
  %21 = load <2 x i64>, <2 x i64>* %18, align 16
  %22 = load <4 x i32>, <4 x i32>* %19, align 16
  %23 = load i32, i32* %20, align 4
  store <2 x i64> %21, <2 x i64>* %14, align 16
  store <4 x i32> %22, <4 x i32>* %15, align 16
  store i32 %23, i32* %16, align 4
  %24 = load <2 x i64>, <2 x i64>* %14, align 16
  %25 = load <4 x i32>, <4 x i32>* %15, align 16
  store <4 x i32> %25, <4 x i32>* %12, align 16
  %26 = load <4 x i32>, <4 x i32>* %12, align 16
  %27 = load <4 x i32>, <4 x i32>* %12, align 16
  %28 = shufflevector <4 x i32> %26, <4 x i32> %27, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %28, <2 x i32>* %13, align 8
  %29 = load <2 x i32>, <2 x i32>* %13, align 8
  %30 = load i32, i32* %16, align 4
  store <2 x i64> %24, <2 x i64>* %7, align 16
  store <2 x i32> %29, <2 x i32>* %8, align 8
  store i32 %30, i32* %9, align 4
  %31 = load <2 x i64>, <2 x i64>* %7, align 16
  %32 = load <2 x i32>, <2 x i32>* %8, align 8
  %33 = load i32, i32* %9, align 4
  %34 = insertelement <2 x i32> undef, i32 %33, i32 0
  %35 = load i32, i32* %9, align 4
  %36 = insertelement <2 x i32> %34, i32 %35, i32 1
  store <2 x i32> %36, <2 x i32>* %11, align 8
  %37 = load <2 x i32>, <2 x i32>* %11, align 8
  store <2 x i32> %32, <2 x i32>* %4, align 8
  store <2 x i32> %37, <2 x i32>* %5, align 8
  %38 = load <2 x i32>, <2 x i32>* %4, align 8
  %39 = bitcast <2 x i32> %38 to <8 x i8>
  %40 = load <2 x i32>, <2 x i32>* %5, align 8
  %41 = bitcast <2 x i32> %40 to <8 x i8>
  %42 = call <2 x i64> @llvm.aarch64.neon.smull.v2i64(<2 x i32> %38, <2 x i32> %40) #4
  store <2 x i64> %42, <2 x i64>* %6, align 16
  %43 = load <2 x i64>, <2 x i64>* %6, align 16
  %44 = sub <2 x i64> %31, %43
  store <2 x i64> %44, <2 x i64>* %10, align 16
  %45 = load <2 x i64>, <2 x i64>* %10, align 16
  store <2 x i64> %45, <2 x i64>* %17, align 16
  %46 = load <2 x i64>, <2 x i64>* %17, align 16
  ret <2 x i64> %46
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlsl_n_u16_wrapper(<4 x i32> %0, <4 x i16> %1, i16 zeroext %2) #1 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i16>, align 8
  %9 = alloca i16, align 2
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <4 x i16>, align 8
  %14 = alloca i16, align 2
  store <4 x i32> %0, <4 x i32>* %12, align 16
  store <4 x i16> %1, <4 x i16>* %13, align 8
  store i16 %2, i16* %14, align 2
  %15 = load <4 x i32>, <4 x i32>* %12, align 16
  %16 = load <4 x i16>, <4 x i16>* %13, align 8
  %17 = load i16, i16* %14, align 2
  store <4 x i32> %15, <4 x i32>* %7, align 16
  store <4 x i16> %16, <4 x i16>* %8, align 8
  store i16 %17, i16* %9, align 2
  %18 = load <4 x i32>, <4 x i32>* %7, align 16
  %19 = load <4 x i16>, <4 x i16>* %8, align 8
  %20 = load i16, i16* %9, align 2
  %21 = insertelement <4 x i16> undef, i16 %20, i32 0
  %22 = load i16, i16* %9, align 2
  %23 = insertelement <4 x i16> %21, i16 %22, i32 1
  %24 = load i16, i16* %9, align 2
  %25 = insertelement <4 x i16> %23, i16 %24, i32 2
  %26 = load i16, i16* %9, align 2
  %27 = insertelement <4 x i16> %25, i16 %26, i32 3
  store <4 x i16> %27, <4 x i16>* %11, align 8
  %28 = load <4 x i16>, <4 x i16>* %11, align 8
  store <4 x i16> %19, <4 x i16>* %4, align 8
  store <4 x i16> %28, <4 x i16>* %5, align 8
  %29 = load <4 x i16>, <4 x i16>* %4, align 8
  %30 = bitcast <4 x i16> %29 to <8 x i8>
  %31 = load <4 x i16>, <4 x i16>* %5, align 8
  %32 = bitcast <4 x i16> %31 to <8 x i8>
  %33 = call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %29, <4 x i16> %31) #4
  store <4 x i32> %33, <4 x i32>* %6, align 16
  %34 = load <4 x i32>, <4 x i32>* %6, align 16
  %35 = sub <4 x i32> %18, %34
  store <4 x i32> %35, <4 x i32>* %10, align 16
  %36 = load <4 x i32>, <4 x i32>* %10, align 16
  ret <4 x i32> %36
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmlsl_n_u32_wrapper(<2 x i64> %0, <2 x i32> %1, i32 %2) #1 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i32>, align 8
  %9 = alloca i32, align 4
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <2 x i32>, align 8
  %14 = alloca i32, align 4
  store <2 x i64> %0, <2 x i64>* %12, align 16
  store <2 x i32> %1, <2 x i32>* %13, align 8
  store i32 %2, i32* %14, align 4
  %15 = load <2 x i64>, <2 x i64>* %12, align 16
  %16 = load <2 x i32>, <2 x i32>* %13, align 8
  %17 = load i32, i32* %14, align 4
  store <2 x i64> %15, <2 x i64>* %7, align 16
  store <2 x i32> %16, <2 x i32>* %8, align 8
  store i32 %17, i32* %9, align 4
  %18 = load <2 x i64>, <2 x i64>* %7, align 16
  %19 = load <2 x i32>, <2 x i32>* %8, align 8
  %20 = load i32, i32* %9, align 4
  %21 = insertelement <2 x i32> undef, i32 %20, i32 0
  %22 = load i32, i32* %9, align 4
  %23 = insertelement <2 x i32> %21, i32 %22, i32 1
  store <2 x i32> %23, <2 x i32>* %11, align 8
  %24 = load <2 x i32>, <2 x i32>* %11, align 8
  store <2 x i32> %19, <2 x i32>* %4, align 8
  store <2 x i32> %24, <2 x i32>* %5, align 8
  %25 = load <2 x i32>, <2 x i32>* %4, align 8
  %26 = bitcast <2 x i32> %25 to <8 x i8>
  %27 = load <2 x i32>, <2 x i32>* %5, align 8
  %28 = bitcast <2 x i32> %27 to <8 x i8>
  %29 = call <2 x i64> @llvm.aarch64.neon.umull.v2i64(<2 x i32> %25, <2 x i32> %27) #4
  store <2 x i64> %29, <2 x i64>* %6, align 16
  %30 = load <2 x i64>, <2 x i64>* %6, align 16
  %31 = sub <2 x i64> %18, %30
  store <2 x i64> %31, <2 x i64>* %10, align 16
  %32 = load <2 x i64>, <2 x i64>* %10, align 16
  ret <2 x i64> %32
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmlsl_high_n_u16_wrapper(<4 x i32> %0, <8 x i16> %1, i16 zeroext %2) #1 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i16>, align 8
  %9 = alloca i16, align 2
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <8 x i16>, align 16
  %13 = alloca <4 x i16>, align 8
  %14 = alloca <4 x i32>, align 16
  %15 = alloca <8 x i16>, align 16
  %16 = alloca i16, align 2
  %17 = alloca <4 x i32>, align 16
  %18 = alloca <4 x i32>, align 16
  %19 = alloca <8 x i16>, align 16
  %20 = alloca i16, align 2
  store <4 x i32> %0, <4 x i32>* %18, align 16
  store <8 x i16> %1, <8 x i16>* %19, align 16
  store i16 %2, i16* %20, align 2
  %21 = load <4 x i32>, <4 x i32>* %18, align 16
  %22 = load <8 x i16>, <8 x i16>* %19, align 16
  %23 = load i16, i16* %20, align 2
  store <4 x i32> %21, <4 x i32>* %14, align 16
  store <8 x i16> %22, <8 x i16>* %15, align 16
  store i16 %23, i16* %16, align 2
  %24 = load <4 x i32>, <4 x i32>* %14, align 16
  %25 = load <8 x i16>, <8 x i16>* %15, align 16
  store <8 x i16> %25, <8 x i16>* %12, align 16
  %26 = load <8 x i16>, <8 x i16>* %12, align 16
  %27 = load <8 x i16>, <8 x i16>* %12, align 16
  %28 = shufflevector <8 x i16> %26, <8 x i16> %27, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %28, <4 x i16>* %13, align 8
  %29 = load <4 x i16>, <4 x i16>* %13, align 8
  %30 = load i16, i16* %16, align 2
  store <4 x i32> %24, <4 x i32>* %7, align 16
  store <4 x i16> %29, <4 x i16>* %8, align 8
  store i16 %30, i16* %9, align 2
  %31 = load <4 x i32>, <4 x i32>* %7, align 16
  %32 = load <4 x i16>, <4 x i16>* %8, align 8
  %33 = load i16, i16* %9, align 2
  %34 = insertelement <4 x i16> undef, i16 %33, i32 0
  %35 = load i16, i16* %9, align 2
  %36 = insertelement <4 x i16> %34, i16 %35, i32 1
  %37 = load i16, i16* %9, align 2
  %38 = insertelement <4 x i16> %36, i16 %37, i32 2
  %39 = load i16, i16* %9, align 2
  %40 = insertelement <4 x i16> %38, i16 %39, i32 3
  store <4 x i16> %40, <4 x i16>* %11, align 8
  %41 = load <4 x i16>, <4 x i16>* %11, align 8
  store <4 x i16> %32, <4 x i16>* %4, align 8
  store <4 x i16> %41, <4 x i16>* %5, align 8
  %42 = load <4 x i16>, <4 x i16>* %4, align 8
  %43 = bitcast <4 x i16> %42 to <8 x i8>
  %44 = load <4 x i16>, <4 x i16>* %5, align 8
  %45 = bitcast <4 x i16> %44 to <8 x i8>
  %46 = call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %42, <4 x i16> %44) #4
  store <4 x i32> %46, <4 x i32>* %6, align 16
  %47 = load <4 x i32>, <4 x i32>* %6, align 16
  %48 = sub <4 x i32> %31, %47
  store <4 x i32> %48, <4 x i32>* %10, align 16
  %49 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %49, <4 x i32>* %17, align 16
  %50 = load <4 x i32>, <4 x i32>* %17, align 16
  ret <4 x i32> %50
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmlsl_high_n_u32_wrapper(<2 x i64> %0, <4 x i32> %1, i32 %2) #1 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i32>, align 8
  %9 = alloca i32, align 4
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <4 x i32>, align 16
  %13 = alloca <2 x i32>, align 8
  %14 = alloca <2 x i64>, align 16
  %15 = alloca <4 x i32>, align 16
  %16 = alloca i32, align 4
  %17 = alloca <2 x i64>, align 16
  %18 = alloca <2 x i64>, align 16
  %19 = alloca <4 x i32>, align 16
  %20 = alloca i32, align 4
  store <2 x i64> %0, <2 x i64>* %18, align 16
  store <4 x i32> %1, <4 x i32>* %19, align 16
  store i32 %2, i32* %20, align 4
  %21 = load <2 x i64>, <2 x i64>* %18, align 16
  %22 = load <4 x i32>, <4 x i32>* %19, align 16
  %23 = load i32, i32* %20, align 4
  store <2 x i64> %21, <2 x i64>* %14, align 16
  store <4 x i32> %22, <4 x i32>* %15, align 16
  store i32 %23, i32* %16, align 4
  %24 = load <2 x i64>, <2 x i64>* %14, align 16
  %25 = load <4 x i32>, <4 x i32>* %15, align 16
  store <4 x i32> %25, <4 x i32>* %12, align 16
  %26 = load <4 x i32>, <4 x i32>* %12, align 16
  %27 = load <4 x i32>, <4 x i32>* %12, align 16
  %28 = shufflevector <4 x i32> %26, <4 x i32> %27, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %28, <2 x i32>* %13, align 8
  %29 = load <2 x i32>, <2 x i32>* %13, align 8
  %30 = load i32, i32* %16, align 4
  store <2 x i64> %24, <2 x i64>* %7, align 16
  store <2 x i32> %29, <2 x i32>* %8, align 8
  store i32 %30, i32* %9, align 4
  %31 = load <2 x i64>, <2 x i64>* %7, align 16
  %32 = load <2 x i32>, <2 x i32>* %8, align 8
  %33 = load i32, i32* %9, align 4
  %34 = insertelement <2 x i32> undef, i32 %33, i32 0
  %35 = load i32, i32* %9, align 4
  %36 = insertelement <2 x i32> %34, i32 %35, i32 1
  store <2 x i32> %36, <2 x i32>* %11, align 8
  %37 = load <2 x i32>, <2 x i32>* %11, align 8
  store <2 x i32> %32, <2 x i32>* %4, align 8
  store <2 x i32> %37, <2 x i32>* %5, align 8
  %38 = load <2 x i32>, <2 x i32>* %4, align 8
  %39 = bitcast <2 x i32> %38 to <8 x i8>
  %40 = load <2 x i32>, <2 x i32>* %5, align 8
  %41 = bitcast <2 x i32> %40 to <8 x i8>
  %42 = call <2 x i64> @llvm.aarch64.neon.umull.v2i64(<2 x i32> %38, <2 x i32> %40) #4
  store <2 x i64> %42, <2 x i64>* %6, align 16
  %43 = load <2 x i64>, <2 x i64>* %6, align 16
  %44 = sub <2 x i64> %31, %43
  store <2 x i64> %44, <2 x i64>* %10, align 16
  %45 = load <2 x i64>, <2 x i64>* %10, align 16
  store <2 x i64> %45, <2 x i64>* %17, align 16
  %46 = load <2 x i64>, <2 x i64>* %17, align 16
  ret <2 x i64> %46
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqdmlsl_n_s16_wrapper(<4 x i32> %0, <4 x i16> %1, i16 signext %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca i16, align 2
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <4 x i16>, align 8
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <4 x i16>, align 8
  %15 = alloca i16, align 2
  store <4 x i32> %0, <4 x i32>* %13, align 16
  store <4 x i16> %1, <4 x i16>* %14, align 8
  store i16 %2, i16* %15, align 2
  %16 = load <4 x i32>, <4 x i32>* %13, align 16
  %17 = load <4 x i16>, <4 x i16>* %14, align 8
  %18 = load i16, i16* %15, align 2
  store <4 x i32> %16, <4 x i32>* %8, align 16
  store <4 x i16> %17, <4 x i16>* %9, align 8
  store i16 %18, i16* %10, align 2
  %19 = load <4 x i32>, <4 x i32>* %8, align 16
  %20 = load <4 x i16>, <4 x i16>* %9, align 8
  %21 = load i16, i16* %10, align 2
  %22 = insertelement <4 x i16> undef, i16 %21, i32 0
  %23 = load i16, i16* %10, align 2
  %24 = insertelement <4 x i16> %22, i16 %23, i32 1
  %25 = load i16, i16* %10, align 2
  %26 = insertelement <4 x i16> %24, i16 %25, i32 2
  %27 = load i16, i16* %10, align 2
  %28 = insertelement <4 x i16> %26, i16 %27, i32 3
  store <4 x i16> %28, <4 x i16>* %12, align 8
  %29 = load <4 x i16>, <4 x i16>* %12, align 8
  store <4 x i32> %19, <4 x i32>* %4, align 16
  store <4 x i16> %20, <4 x i16>* %5, align 8
  store <4 x i16> %29, <4 x i16>* %6, align 8
  %30 = load <4 x i32>, <4 x i32>* %4, align 16
  %31 = bitcast <4 x i32> %30 to <16 x i8>
  %32 = load <4 x i16>, <4 x i16>* %5, align 8
  %33 = bitcast <4 x i16> %32 to <8 x i8>
  %34 = load <4 x i16>, <4 x i16>* %6, align 8
  %35 = bitcast <4 x i16> %34 to <8 x i8>
  %36 = call <4 x i32> @llvm.aarch64.neon.sqdmull.v4i32(<4 x i16> %32, <4 x i16> %34) #4
  %37 = call <4 x i32> @llvm.aarch64.neon.sqsub.v4i32(<4 x i32> %30, <4 x i32> %36) #4
  store <4 x i32> %37, <4 x i32>* %7, align 16
  %38 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %38, <4 x i32>* %11, align 16
  %39 = load <4 x i32>, <4 x i32>* %11, align 16
  ret <4 x i32> %39
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqdmlsl_n_s32_wrapper(<2 x i64> %0, <2 x i32> %1, i32 %2) #1 {
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca i32, align 4
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <2 x i32>, align 8
  %13 = alloca <2 x i64>, align 16
  %14 = alloca <2 x i32>, align 8
  %15 = alloca i32, align 4
  store <2 x i64> %0, <2 x i64>* %13, align 16
  store <2 x i32> %1, <2 x i32>* %14, align 8
  store i32 %2, i32* %15, align 4
  %16 = load <2 x i64>, <2 x i64>* %13, align 16
  %17 = load <2 x i32>, <2 x i32>* %14, align 8
  %18 = load i32, i32* %15, align 4
  store <2 x i64> %16, <2 x i64>* %8, align 16
  store <2 x i32> %17, <2 x i32>* %9, align 8
  store i32 %18, i32* %10, align 4
  %19 = load <2 x i64>, <2 x i64>* %8, align 16
  %20 = load <2 x i32>, <2 x i32>* %9, align 8
  %21 = load i32, i32* %10, align 4
  %22 = insertelement <2 x i32> undef, i32 %21, i32 0
  %23 = load i32, i32* %10, align 4
  %24 = insertelement <2 x i32> %22, i32 %23, i32 1
  store <2 x i32> %24, <2 x i32>* %12, align 8
  %25 = load <2 x i32>, <2 x i32>* %12, align 8
  store <2 x i64> %19, <2 x i64>* %4, align 16
  store <2 x i32> %20, <2 x i32>* %5, align 8
  store <2 x i32> %25, <2 x i32>* %6, align 8
  %26 = load <2 x i64>, <2 x i64>* %4, align 16
  %27 = bitcast <2 x i64> %26 to <16 x i8>
  %28 = load <2 x i32>, <2 x i32>* %5, align 8
  %29 = bitcast <2 x i32> %28 to <8 x i8>
  %30 = load <2 x i32>, <2 x i32>* %6, align 8
  %31 = bitcast <2 x i32> %30 to <8 x i8>
  %32 = call <2 x i64> @llvm.aarch64.neon.sqdmull.v2i64(<2 x i32> %28, <2 x i32> %30) #4
  %33 = call <2 x i64> @llvm.aarch64.neon.sqsub.v2i64(<2 x i64> %26, <2 x i64> %32) #4
  store <2 x i64> %33, <2 x i64>* %7, align 16
  %34 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %34, <2 x i64>* %11, align 16
  %35 = load <2 x i64>, <2 x i64>* %11, align 16
  ret <2 x i64> %35
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqdmlsl_high_n_s16_wrapper(<4 x i32> %0, <8 x i16> %1, i16 signext %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca i16, align 2
  %11 = alloca <4 x i32>, align 16
  %12 = alloca <4 x i16>, align 8
  %13 = alloca <8 x i16>, align 16
  %14 = alloca <4 x i16>, align 8
  %15 = alloca <4 x i32>, align 16
  %16 = alloca <8 x i16>, align 16
  %17 = alloca i16, align 2
  %18 = alloca <4 x i32>, align 16
  %19 = alloca <4 x i32>, align 16
  %20 = alloca <8 x i16>, align 16
  %21 = alloca i16, align 2
  store <4 x i32> %0, <4 x i32>* %19, align 16
  store <8 x i16> %1, <8 x i16>* %20, align 16
  store i16 %2, i16* %21, align 2
  %22 = load <4 x i32>, <4 x i32>* %19, align 16
  %23 = load <8 x i16>, <8 x i16>* %20, align 16
  %24 = load i16, i16* %21, align 2
  store <4 x i32> %22, <4 x i32>* %15, align 16
  store <8 x i16> %23, <8 x i16>* %16, align 16
  store i16 %24, i16* %17, align 2
  %25 = load <4 x i32>, <4 x i32>* %15, align 16
  %26 = load <8 x i16>, <8 x i16>* %16, align 16
  store <8 x i16> %26, <8 x i16>* %13, align 16
  %27 = load <8 x i16>, <8 x i16>* %13, align 16
  %28 = load <8 x i16>, <8 x i16>* %13, align 16
  %29 = shufflevector <8 x i16> %27, <8 x i16> %28, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %29, <4 x i16>* %14, align 8
  %30 = load <4 x i16>, <4 x i16>* %14, align 8
  %31 = load i16, i16* %17, align 2
  store <4 x i32> %25, <4 x i32>* %8, align 16
  store <4 x i16> %30, <4 x i16>* %9, align 8
  store i16 %31, i16* %10, align 2
  %32 = load <4 x i32>, <4 x i32>* %8, align 16
  %33 = load <4 x i16>, <4 x i16>* %9, align 8
  %34 = load i16, i16* %10, align 2
  %35 = insertelement <4 x i16> undef, i16 %34, i32 0
  %36 = load i16, i16* %10, align 2
  %37 = insertelement <4 x i16> %35, i16 %36, i32 1
  %38 = load i16, i16* %10, align 2
  %39 = insertelement <4 x i16> %37, i16 %38, i32 2
  %40 = load i16, i16* %10, align 2
  %41 = insertelement <4 x i16> %39, i16 %40, i32 3
  store <4 x i16> %41, <4 x i16>* %12, align 8
  %42 = load <4 x i16>, <4 x i16>* %12, align 8
  store <4 x i32> %32, <4 x i32>* %4, align 16
  store <4 x i16> %33, <4 x i16>* %5, align 8
  store <4 x i16> %42, <4 x i16>* %6, align 8
  %43 = load <4 x i32>, <4 x i32>* %4, align 16
  %44 = bitcast <4 x i32> %43 to <16 x i8>
  %45 = load <4 x i16>, <4 x i16>* %5, align 8
  %46 = bitcast <4 x i16> %45 to <8 x i8>
  %47 = load <4 x i16>, <4 x i16>* %6, align 8
  %48 = bitcast <4 x i16> %47 to <8 x i8>
  %49 = call <4 x i32> @llvm.aarch64.neon.sqdmull.v4i32(<4 x i16> %45, <4 x i16> %47) #4
  %50 = call <4 x i32> @llvm.aarch64.neon.sqsub.v4i32(<4 x i32> %43, <4 x i32> %49) #4
  store <4 x i32> %50, <4 x i32>* %7, align 16
  %51 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %51, <4 x i32>* %11, align 16
  %52 = load <4 x i32>, <4 x i32>* %11, align 16
  store <4 x i32> %52, <4 x i32>* %18, align 16
  %53 = load <4 x i32>, <4 x i32>* %18, align 16
  ret <4 x i32> %53
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqdmlsl_high_n_s32_wrapper(<2 x i64> %0, <4 x i32> %1, i32 %2) #1 {
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca i32, align 4
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <2 x i32>, align 8
  %13 = alloca <4 x i32>, align 16
  %14 = alloca <2 x i32>, align 8
  %15 = alloca <2 x i64>, align 16
  %16 = alloca <4 x i32>, align 16
  %17 = alloca i32, align 4
  %18 = alloca <2 x i64>, align 16
  %19 = alloca <2 x i64>, align 16
  %20 = alloca <4 x i32>, align 16
  %21 = alloca i32, align 4
  store <2 x i64> %0, <2 x i64>* %19, align 16
  store <4 x i32> %1, <4 x i32>* %20, align 16
  store i32 %2, i32* %21, align 4
  %22 = load <2 x i64>, <2 x i64>* %19, align 16
  %23 = load <4 x i32>, <4 x i32>* %20, align 16
  %24 = load i32, i32* %21, align 4
  store <2 x i64> %22, <2 x i64>* %15, align 16
  store <4 x i32> %23, <4 x i32>* %16, align 16
  store i32 %24, i32* %17, align 4
  %25 = load <2 x i64>, <2 x i64>* %15, align 16
  %26 = load <4 x i32>, <4 x i32>* %16, align 16
  store <4 x i32> %26, <4 x i32>* %13, align 16
  %27 = load <4 x i32>, <4 x i32>* %13, align 16
  %28 = load <4 x i32>, <4 x i32>* %13, align 16
  %29 = shufflevector <4 x i32> %27, <4 x i32> %28, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %29, <2 x i32>* %14, align 8
  %30 = load <2 x i32>, <2 x i32>* %14, align 8
  %31 = load i32, i32* %17, align 4
  store <2 x i64> %25, <2 x i64>* %8, align 16
  store <2 x i32> %30, <2 x i32>* %9, align 8
  store i32 %31, i32* %10, align 4
  %32 = load <2 x i64>, <2 x i64>* %8, align 16
  %33 = load <2 x i32>, <2 x i32>* %9, align 8
  %34 = load i32, i32* %10, align 4
  %35 = insertelement <2 x i32> undef, i32 %34, i32 0
  %36 = load i32, i32* %10, align 4
  %37 = insertelement <2 x i32> %35, i32 %36, i32 1
  store <2 x i32> %37, <2 x i32>* %12, align 8
  %38 = load <2 x i32>, <2 x i32>* %12, align 8
  store <2 x i64> %32, <2 x i64>* %4, align 16
  store <2 x i32> %33, <2 x i32>* %5, align 8
  store <2 x i32> %38, <2 x i32>* %6, align 8
  %39 = load <2 x i64>, <2 x i64>* %4, align 16
  %40 = bitcast <2 x i64> %39 to <16 x i8>
  %41 = load <2 x i32>, <2 x i32>* %5, align 8
  %42 = bitcast <2 x i32> %41 to <8 x i8>
  %43 = load <2 x i32>, <2 x i32>* %6, align 8
  %44 = bitcast <2 x i32> %43 to <8 x i8>
  %45 = call <2 x i64> @llvm.aarch64.neon.sqdmull.v2i64(<2 x i32> %41, <2 x i32> %43) #4
  %46 = call <2 x i64> @llvm.aarch64.neon.sqsub.v2i64(<2 x i64> %39, <2 x i64> %45) #4
  store <2 x i64> %46, <2 x i64>* %7, align 16
  %47 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %47, <2 x i64>* %11, align 16
  %48 = load <2 x i64>, <2 x i64>* %11, align 16
  store <2 x i64> %48, <2 x i64>* %18, align 16
  %49 = load <2 x i64>, <2 x i64>* %18, align 16
  ret <2 x i64> %49
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmul_n_s16_wrapper(<4 x i16> %0, i16 signext %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca i16, align 2
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  %8 = alloca i16, align 2
  store <4 x i16> %0, <4 x i16>* %7, align 8
  store i16 %1, i16* %8, align 2
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  %10 = load i16, i16* %8, align 2
  store <4 x i16> %9, <4 x i16>* %3, align 8
  store i16 %10, i16* %4, align 2
  %11 = load <4 x i16>, <4 x i16>* %3, align 8
  %12 = load i16, i16* %4, align 2
  %13 = insertelement <4 x i16> undef, i16 %12, i32 0
  %14 = load i16, i16* %4, align 2
  %15 = insertelement <4 x i16> %13, i16 %14, i32 1
  %16 = load i16, i16* %4, align 2
  %17 = insertelement <4 x i16> %15, i16 %16, i32 2
  %18 = load i16, i16* %4, align 2
  %19 = insertelement <4 x i16> %17, i16 %18, i32 3
  store <4 x i16> %19, <4 x i16>* %6, align 8
  %20 = load <4 x i16>, <4 x i16>* %6, align 8
  %21 = mul <4 x i16> %11, %20
  store <4 x i16> %21, <4 x i16>* %5, align 8
  %22 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %22
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmulq_n_s16_wrapper(<8 x i16> %0, i16 signext %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca i16, align 2
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  %8 = alloca i16, align 2
  store <8 x i16> %0, <8 x i16>* %7, align 16
  store i16 %1, i16* %8, align 2
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  %10 = load i16, i16* %8, align 2
  store <8 x i16> %9, <8 x i16>* %3, align 16
  store i16 %10, i16* %4, align 2
  %11 = load <8 x i16>, <8 x i16>* %3, align 16
  %12 = load i16, i16* %4, align 2
  %13 = insertelement <8 x i16> undef, i16 %12, i32 0
  %14 = load i16, i16* %4, align 2
  %15 = insertelement <8 x i16> %13, i16 %14, i32 1
  %16 = load i16, i16* %4, align 2
  %17 = insertelement <8 x i16> %15, i16 %16, i32 2
  %18 = load i16, i16* %4, align 2
  %19 = insertelement <8 x i16> %17, i16 %18, i32 3
  %20 = load i16, i16* %4, align 2
  %21 = insertelement <8 x i16> %19, i16 %20, i32 4
  %22 = load i16, i16* %4, align 2
  %23 = insertelement <8 x i16> %21, i16 %22, i32 5
  %24 = load i16, i16* %4, align 2
  %25 = insertelement <8 x i16> %23, i16 %24, i32 6
  %26 = load i16, i16* %4, align 2
  %27 = insertelement <8 x i16> %25, i16 %26, i32 7
  store <8 x i16> %27, <8 x i16>* %6, align 16
  %28 = load <8 x i16>, <8 x i16>* %6, align 16
  %29 = mul <8 x i16> %11, %28
  store <8 x i16> %29, <8 x i16>* %5, align 16
  %30 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %30
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmul_n_s32_wrapper(<2 x i32> %0, i32 %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca i32, align 4
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  %8 = alloca i32, align 4
  store <2 x i32> %0, <2 x i32>* %7, align 8
  store i32 %1, i32* %8, align 4
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  %10 = load i32, i32* %8, align 4
  store <2 x i32> %9, <2 x i32>* %3, align 8
  store i32 %10, i32* %4, align 4
  %11 = load <2 x i32>, <2 x i32>* %3, align 8
  %12 = load i32, i32* %4, align 4
  %13 = insertelement <2 x i32> undef, i32 %12, i32 0
  %14 = load i32, i32* %4, align 4
  %15 = insertelement <2 x i32> %13, i32 %14, i32 1
  store <2 x i32> %15, <2 x i32>* %6, align 8
  %16 = load <2 x i32>, <2 x i32>* %6, align 8
  %17 = mul <2 x i32> %11, %16
  store <2 x i32> %17, <2 x i32>* %5, align 8
  %18 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %18
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmulq_n_s32_wrapper(<4 x i32> %0, i32 %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  store <4 x i32> %0, <4 x i32>* %7, align 16
  store i32 %1, i32* %8, align 4
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  %10 = load i32, i32* %8, align 4
  store <4 x i32> %9, <4 x i32>* %3, align 16
  store i32 %10, i32* %4, align 4
  %11 = load <4 x i32>, <4 x i32>* %3, align 16
  %12 = load i32, i32* %4, align 4
  %13 = insertelement <4 x i32> undef, i32 %12, i32 0
  %14 = load i32, i32* %4, align 4
  %15 = insertelement <4 x i32> %13, i32 %14, i32 1
  %16 = load i32, i32* %4, align 4
  %17 = insertelement <4 x i32> %15, i32 %16, i32 2
  %18 = load i32, i32* %4, align 4
  %19 = insertelement <4 x i32> %17, i32 %18, i32 3
  store <4 x i32> %19, <4 x i32>* %6, align 16
  %20 = load <4 x i32>, <4 x i32>* %6, align 16
  %21 = mul <4 x i32> %11, %20
  store <4 x i32> %21, <4 x i32>* %5, align 16
  %22 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %22
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmul_n_u16_wrapper(<4 x i16> %0, i16 zeroext %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca i16, align 2
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  %8 = alloca i16, align 2
  store <4 x i16> %0, <4 x i16>* %7, align 8
  store i16 %1, i16* %8, align 2
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  %10 = load i16, i16* %8, align 2
  store <4 x i16> %9, <4 x i16>* %3, align 8
  store i16 %10, i16* %4, align 2
  %11 = load <4 x i16>, <4 x i16>* %3, align 8
  %12 = load i16, i16* %4, align 2
  %13 = insertelement <4 x i16> undef, i16 %12, i32 0
  %14 = load i16, i16* %4, align 2
  %15 = insertelement <4 x i16> %13, i16 %14, i32 1
  %16 = load i16, i16* %4, align 2
  %17 = insertelement <4 x i16> %15, i16 %16, i32 2
  %18 = load i16, i16* %4, align 2
  %19 = insertelement <4 x i16> %17, i16 %18, i32 3
  store <4 x i16> %19, <4 x i16>* %6, align 8
  %20 = load <4 x i16>, <4 x i16>* %6, align 8
  %21 = mul <4 x i16> %11, %20
  store <4 x i16> %21, <4 x i16>* %5, align 8
  %22 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %22
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmulq_n_u16_wrapper(<8 x i16> %0, i16 zeroext %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca i16, align 2
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  %8 = alloca i16, align 2
  store <8 x i16> %0, <8 x i16>* %7, align 16
  store i16 %1, i16* %8, align 2
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  %10 = load i16, i16* %8, align 2
  store <8 x i16> %9, <8 x i16>* %3, align 16
  store i16 %10, i16* %4, align 2
  %11 = load <8 x i16>, <8 x i16>* %3, align 16
  %12 = load i16, i16* %4, align 2
  %13 = insertelement <8 x i16> undef, i16 %12, i32 0
  %14 = load i16, i16* %4, align 2
  %15 = insertelement <8 x i16> %13, i16 %14, i32 1
  %16 = load i16, i16* %4, align 2
  %17 = insertelement <8 x i16> %15, i16 %16, i32 2
  %18 = load i16, i16* %4, align 2
  %19 = insertelement <8 x i16> %17, i16 %18, i32 3
  %20 = load i16, i16* %4, align 2
  %21 = insertelement <8 x i16> %19, i16 %20, i32 4
  %22 = load i16, i16* %4, align 2
  %23 = insertelement <8 x i16> %21, i16 %22, i32 5
  %24 = load i16, i16* %4, align 2
  %25 = insertelement <8 x i16> %23, i16 %24, i32 6
  %26 = load i16, i16* %4, align 2
  %27 = insertelement <8 x i16> %25, i16 %26, i32 7
  store <8 x i16> %27, <8 x i16>* %6, align 16
  %28 = load <8 x i16>, <8 x i16>* %6, align 16
  %29 = mul <8 x i16> %11, %28
  store <8 x i16> %29, <8 x i16>* %5, align 16
  %30 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %30
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmul_n_u32_wrapper(<2 x i32> %0, i32 %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca i32, align 4
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  %8 = alloca i32, align 4
  store <2 x i32> %0, <2 x i32>* %7, align 8
  store i32 %1, i32* %8, align 4
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  %10 = load i32, i32* %8, align 4
  store <2 x i32> %9, <2 x i32>* %3, align 8
  store i32 %10, i32* %4, align 4
  %11 = load <2 x i32>, <2 x i32>* %3, align 8
  %12 = load i32, i32* %4, align 4
  %13 = insertelement <2 x i32> undef, i32 %12, i32 0
  %14 = load i32, i32* %4, align 4
  %15 = insertelement <2 x i32> %13, i32 %14, i32 1
  store <2 x i32> %15, <2 x i32>* %6, align 8
  %16 = load <2 x i32>, <2 x i32>* %6, align 8
  %17 = mul <2 x i32> %11, %16
  store <2 x i32> %17, <2 x i32>* %5, align 8
  %18 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %18
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmulq_n_u32_wrapper(<4 x i32> %0, i32 %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca i32, align 4
  store <4 x i32> %0, <4 x i32>* %7, align 16
  store i32 %1, i32* %8, align 4
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  %10 = load i32, i32* %8, align 4
  store <4 x i32> %9, <4 x i32>* %3, align 16
  store i32 %10, i32* %4, align 4
  %11 = load <4 x i32>, <4 x i32>* %3, align 16
  %12 = load i32, i32* %4, align 4
  %13 = insertelement <4 x i32> undef, i32 %12, i32 0
  %14 = load i32, i32* %4, align 4
  %15 = insertelement <4 x i32> %13, i32 %14, i32 1
  %16 = load i32, i32* %4, align 4
  %17 = insertelement <4 x i32> %15, i32 %16, i32 2
  %18 = load i32, i32* %4, align 4
  %19 = insertelement <4 x i32> %17, i32 %18, i32 3
  store <4 x i32> %19, <4 x i32>* %6, align 16
  %20 = load <4 x i32>, <4 x i32>* %6, align 16
  %21 = mul <4 x i32> %11, %20
  store <4 x i32> %21, <4 x i32>* %5, align 16
  %22 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %22
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmull_n_s16_wrapper(<4 x i16> %0, i16 signext %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i16>, align 8
  %7 = alloca i16, align 2
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  %11 = alloca i16, align 2
  store <4 x i16> %0, <4 x i16>* %10, align 8
  store i16 %1, i16* %11, align 2
  %12 = load <4 x i16>, <4 x i16>* %10, align 8
  %13 = load i16, i16* %11, align 2
  store <4 x i16> %12, <4 x i16>* %6, align 8
  store i16 %13, i16* %7, align 2
  %14 = load <4 x i16>, <4 x i16>* %6, align 8
  %15 = load i16, i16* %7, align 2
  %16 = insertelement <4 x i16> undef, i16 %15, i32 0
  %17 = load i16, i16* %7, align 2
  %18 = insertelement <4 x i16> %16, i16 %17, i32 1
  %19 = load i16, i16* %7, align 2
  %20 = insertelement <4 x i16> %18, i16 %19, i32 2
  %21 = load i16, i16* %7, align 2
  %22 = insertelement <4 x i16> %20, i16 %21, i32 3
  store <4 x i16> %22, <4 x i16>* %9, align 8
  %23 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i16> %14, <4 x i16>* %3, align 8
  store <4 x i16> %23, <4 x i16>* %4, align 8
  %24 = load <4 x i16>, <4 x i16>* %3, align 8
  %25 = bitcast <4 x i16> %24 to <8 x i8>
  %26 = load <4 x i16>, <4 x i16>* %4, align 8
  %27 = bitcast <4 x i16> %26 to <8 x i8>
  %28 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %24, <4 x i16> %26) #4
  store <4 x i32> %28, <4 x i32>* %5, align 16
  %29 = load <4 x i32>, <4 x i32>* %5, align 16
  store <4 x i32> %29, <4 x i32>* %8, align 16
  %30 = load <4 x i32>, <4 x i32>* %8, align 16
  ret <4 x i32> %30
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmull_n_s32_wrapper(<2 x i32> %0, i32 %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i32>, align 8
  %7 = alloca i32, align 4
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  %11 = alloca i32, align 4
  store <2 x i32> %0, <2 x i32>* %10, align 8
  store i32 %1, i32* %11, align 4
  %12 = load <2 x i32>, <2 x i32>* %10, align 8
  %13 = load i32, i32* %11, align 4
  store <2 x i32> %12, <2 x i32>* %6, align 8
  store i32 %13, i32* %7, align 4
  %14 = load <2 x i32>, <2 x i32>* %6, align 8
  %15 = load i32, i32* %7, align 4
  %16 = insertelement <2 x i32> undef, i32 %15, i32 0
  %17 = load i32, i32* %7, align 4
  %18 = insertelement <2 x i32> %16, i32 %17, i32 1
  store <2 x i32> %18, <2 x i32>* %9, align 8
  %19 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i32> %14, <2 x i32>* %3, align 8
  store <2 x i32> %19, <2 x i32>* %4, align 8
  %20 = load <2 x i32>, <2 x i32>* %3, align 8
  %21 = bitcast <2 x i32> %20 to <8 x i8>
  %22 = load <2 x i32>, <2 x i32>* %4, align 8
  %23 = bitcast <2 x i32> %22 to <8 x i8>
  %24 = call <2 x i64> @llvm.aarch64.neon.smull.v2i64(<2 x i32> %20, <2 x i32> %22) #4
  store <2 x i64> %24, <2 x i64>* %5, align 16
  %25 = load <2 x i64>, <2 x i64>* %5, align 16
  store <2 x i64> %25, <2 x i64>* %8, align 16
  %26 = load <2 x i64>, <2 x i64>* %8, align 16
  ret <2 x i64> %26
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmull_high_n_s16_wrapper(<8 x i16> %0, i16 signext %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i16>, align 8
  %7 = alloca i16, align 2
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <8 x i16>, align 16
  %13 = alloca i16, align 2
  %14 = alloca <4 x i32>, align 16
  %15 = alloca <8 x i16>, align 16
  %16 = alloca i16, align 2
  store <8 x i16> %0, <8 x i16>* %15, align 16
  store i16 %1, i16* %16, align 2
  %17 = load <8 x i16>, <8 x i16>* %15, align 16
  %18 = load i16, i16* %16, align 2
  store <8 x i16> %17, <8 x i16>* %12, align 16
  store i16 %18, i16* %13, align 2
  %19 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i16> %19, <8 x i16>* %10, align 16
  %20 = load <8 x i16>, <8 x i16>* %10, align 16
  %21 = load <8 x i16>, <8 x i16>* %10, align 16
  %22 = shufflevector <8 x i16> %20, <8 x i16> %21, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %22, <4 x i16>* %11, align 8
  %23 = load <4 x i16>, <4 x i16>* %11, align 8
  %24 = load i16, i16* %13, align 2
  store <4 x i16> %23, <4 x i16>* %6, align 8
  store i16 %24, i16* %7, align 2
  %25 = load <4 x i16>, <4 x i16>* %6, align 8
  %26 = load i16, i16* %7, align 2
  %27 = insertelement <4 x i16> undef, i16 %26, i32 0
  %28 = load i16, i16* %7, align 2
  %29 = insertelement <4 x i16> %27, i16 %28, i32 1
  %30 = load i16, i16* %7, align 2
  %31 = insertelement <4 x i16> %29, i16 %30, i32 2
  %32 = load i16, i16* %7, align 2
  %33 = insertelement <4 x i16> %31, i16 %32, i32 3
  store <4 x i16> %33, <4 x i16>* %9, align 8
  %34 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i16> %25, <4 x i16>* %3, align 8
  store <4 x i16> %34, <4 x i16>* %4, align 8
  %35 = load <4 x i16>, <4 x i16>* %3, align 8
  %36 = bitcast <4 x i16> %35 to <8 x i8>
  %37 = load <4 x i16>, <4 x i16>* %4, align 8
  %38 = bitcast <4 x i16> %37 to <8 x i8>
  %39 = call <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16> %35, <4 x i16> %37) #4
  store <4 x i32> %39, <4 x i32>* %5, align 16
  %40 = load <4 x i32>, <4 x i32>* %5, align 16
  store <4 x i32> %40, <4 x i32>* %8, align 16
  %41 = load <4 x i32>, <4 x i32>* %8, align 16
  store <4 x i32> %41, <4 x i32>* %14, align 16
  %42 = load <4 x i32>, <4 x i32>* %14, align 16
  ret <4 x i32> %42
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmull_high_n_s32_wrapper(<4 x i32> %0, i32 %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i32>, align 8
  %7 = alloca i32, align 4
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <4 x i32>, align 16
  %13 = alloca i32, align 4
  %14 = alloca <2 x i64>, align 16
  %15 = alloca <4 x i32>, align 16
  %16 = alloca i32, align 4
  store <4 x i32> %0, <4 x i32>* %15, align 16
  store i32 %1, i32* %16, align 4
  %17 = load <4 x i32>, <4 x i32>* %15, align 16
  %18 = load i32, i32* %16, align 4
  store <4 x i32> %17, <4 x i32>* %12, align 16
  store i32 %18, i32* %13, align 4
  %19 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i32> %19, <4 x i32>* %10, align 16
  %20 = load <4 x i32>, <4 x i32>* %10, align 16
  %21 = load <4 x i32>, <4 x i32>* %10, align 16
  %22 = shufflevector <4 x i32> %20, <4 x i32> %21, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %22, <2 x i32>* %11, align 8
  %23 = load <2 x i32>, <2 x i32>* %11, align 8
  %24 = load i32, i32* %13, align 4
  store <2 x i32> %23, <2 x i32>* %6, align 8
  store i32 %24, i32* %7, align 4
  %25 = load <2 x i32>, <2 x i32>* %6, align 8
  %26 = load i32, i32* %7, align 4
  %27 = insertelement <2 x i32> undef, i32 %26, i32 0
  %28 = load i32, i32* %7, align 4
  %29 = insertelement <2 x i32> %27, i32 %28, i32 1
  store <2 x i32> %29, <2 x i32>* %9, align 8
  %30 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i32> %25, <2 x i32>* %3, align 8
  store <2 x i32> %30, <2 x i32>* %4, align 8
  %31 = load <2 x i32>, <2 x i32>* %3, align 8
  %32 = bitcast <2 x i32> %31 to <8 x i8>
  %33 = load <2 x i32>, <2 x i32>* %4, align 8
  %34 = bitcast <2 x i32> %33 to <8 x i8>
  %35 = call <2 x i64> @llvm.aarch64.neon.smull.v2i64(<2 x i32> %31, <2 x i32> %33) #4
  store <2 x i64> %35, <2 x i64>* %5, align 16
  %36 = load <2 x i64>, <2 x i64>* %5, align 16
  store <2 x i64> %36, <2 x i64>* %8, align 16
  %37 = load <2 x i64>, <2 x i64>* %8, align 16
  store <2 x i64> %37, <2 x i64>* %14, align 16
  %38 = load <2 x i64>, <2 x i64>* %14, align 16
  ret <2 x i64> %38
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmull_n_u16_wrapper(<4 x i16> %0, i16 zeroext %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i16>, align 8
  %7 = alloca i16, align 2
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  %11 = alloca i16, align 2
  store <4 x i16> %0, <4 x i16>* %10, align 8
  store i16 %1, i16* %11, align 2
  %12 = load <4 x i16>, <4 x i16>* %10, align 8
  %13 = load i16, i16* %11, align 2
  store <4 x i16> %12, <4 x i16>* %6, align 8
  store i16 %13, i16* %7, align 2
  %14 = load <4 x i16>, <4 x i16>* %6, align 8
  %15 = load i16, i16* %7, align 2
  %16 = insertelement <4 x i16> undef, i16 %15, i32 0
  %17 = load i16, i16* %7, align 2
  %18 = insertelement <4 x i16> %16, i16 %17, i32 1
  %19 = load i16, i16* %7, align 2
  %20 = insertelement <4 x i16> %18, i16 %19, i32 2
  %21 = load i16, i16* %7, align 2
  %22 = insertelement <4 x i16> %20, i16 %21, i32 3
  store <4 x i16> %22, <4 x i16>* %9, align 8
  %23 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i16> %14, <4 x i16>* %3, align 8
  store <4 x i16> %23, <4 x i16>* %4, align 8
  %24 = load <4 x i16>, <4 x i16>* %3, align 8
  %25 = bitcast <4 x i16> %24 to <8 x i8>
  %26 = load <4 x i16>, <4 x i16>* %4, align 8
  %27 = bitcast <4 x i16> %26 to <8 x i8>
  %28 = call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %24, <4 x i16> %26) #4
  store <4 x i32> %28, <4 x i32>* %5, align 16
  %29 = load <4 x i32>, <4 x i32>* %5, align 16
  store <4 x i32> %29, <4 x i32>* %8, align 16
  %30 = load <4 x i32>, <4 x i32>* %8, align 16
  ret <4 x i32> %30
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmull_n_u32_wrapper(<2 x i32> %0, i32 %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i32>, align 8
  %7 = alloca i32, align 4
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  %11 = alloca i32, align 4
  store <2 x i32> %0, <2 x i32>* %10, align 8
  store i32 %1, i32* %11, align 4
  %12 = load <2 x i32>, <2 x i32>* %10, align 8
  %13 = load i32, i32* %11, align 4
  store <2 x i32> %12, <2 x i32>* %6, align 8
  store i32 %13, i32* %7, align 4
  %14 = load <2 x i32>, <2 x i32>* %6, align 8
  %15 = load i32, i32* %7, align 4
  %16 = insertelement <2 x i32> undef, i32 %15, i32 0
  %17 = load i32, i32* %7, align 4
  %18 = insertelement <2 x i32> %16, i32 %17, i32 1
  store <2 x i32> %18, <2 x i32>* %9, align 8
  %19 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i32> %14, <2 x i32>* %3, align 8
  store <2 x i32> %19, <2 x i32>* %4, align 8
  %20 = load <2 x i32>, <2 x i32>* %3, align 8
  %21 = bitcast <2 x i32> %20 to <8 x i8>
  %22 = load <2 x i32>, <2 x i32>* %4, align 8
  %23 = bitcast <2 x i32> %22 to <8 x i8>
  %24 = call <2 x i64> @llvm.aarch64.neon.umull.v2i64(<2 x i32> %20, <2 x i32> %22) #4
  store <2 x i64> %24, <2 x i64>* %5, align 16
  %25 = load <2 x i64>, <2 x i64>* %5, align 16
  store <2 x i64> %25, <2 x i64>* %8, align 16
  %26 = load <2 x i64>, <2 x i64>* %8, align 16
  ret <2 x i64> %26
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmull_high_n_u16_wrapper(<8 x i16> %0, i16 zeroext %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i16>, align 8
  %7 = alloca i16, align 2
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <8 x i16>, align 16
  %13 = alloca i16, align 2
  %14 = alloca <4 x i32>, align 16
  %15 = alloca <8 x i16>, align 16
  %16 = alloca i16, align 2
  store <8 x i16> %0, <8 x i16>* %15, align 16
  store i16 %1, i16* %16, align 2
  %17 = load <8 x i16>, <8 x i16>* %15, align 16
  %18 = load i16, i16* %16, align 2
  store <8 x i16> %17, <8 x i16>* %12, align 16
  store i16 %18, i16* %13, align 2
  %19 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i16> %19, <8 x i16>* %10, align 16
  %20 = load <8 x i16>, <8 x i16>* %10, align 16
  %21 = load <8 x i16>, <8 x i16>* %10, align 16
  %22 = shufflevector <8 x i16> %20, <8 x i16> %21, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %22, <4 x i16>* %11, align 8
  %23 = load <4 x i16>, <4 x i16>* %11, align 8
  %24 = load i16, i16* %13, align 2
  store <4 x i16> %23, <4 x i16>* %6, align 8
  store i16 %24, i16* %7, align 2
  %25 = load <4 x i16>, <4 x i16>* %6, align 8
  %26 = load i16, i16* %7, align 2
  %27 = insertelement <4 x i16> undef, i16 %26, i32 0
  %28 = load i16, i16* %7, align 2
  %29 = insertelement <4 x i16> %27, i16 %28, i32 1
  %30 = load i16, i16* %7, align 2
  %31 = insertelement <4 x i16> %29, i16 %30, i32 2
  %32 = load i16, i16* %7, align 2
  %33 = insertelement <4 x i16> %31, i16 %32, i32 3
  store <4 x i16> %33, <4 x i16>* %9, align 8
  %34 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i16> %25, <4 x i16>* %3, align 8
  store <4 x i16> %34, <4 x i16>* %4, align 8
  %35 = load <4 x i16>, <4 x i16>* %3, align 8
  %36 = bitcast <4 x i16> %35 to <8 x i8>
  %37 = load <4 x i16>, <4 x i16>* %4, align 8
  %38 = bitcast <4 x i16> %37 to <8 x i8>
  %39 = call <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16> %35, <4 x i16> %37) #4
  store <4 x i32> %39, <4 x i32>* %5, align 16
  %40 = load <4 x i32>, <4 x i32>* %5, align 16
  store <4 x i32> %40, <4 x i32>* %8, align 16
  %41 = load <4 x i32>, <4 x i32>* %8, align 16
  store <4 x i32> %41, <4 x i32>* %14, align 16
  %42 = load <4 x i32>, <4 x i32>* %14, align 16
  ret <4 x i32> %42
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmull_high_n_u32_wrapper(<4 x i32> %0, i32 %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i32>, align 8
  %7 = alloca i32, align 4
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <4 x i32>, align 16
  %13 = alloca i32, align 4
  %14 = alloca <2 x i64>, align 16
  %15 = alloca <4 x i32>, align 16
  %16 = alloca i32, align 4
  store <4 x i32> %0, <4 x i32>* %15, align 16
  store i32 %1, i32* %16, align 4
  %17 = load <4 x i32>, <4 x i32>* %15, align 16
  %18 = load i32, i32* %16, align 4
  store <4 x i32> %17, <4 x i32>* %12, align 16
  store i32 %18, i32* %13, align 4
  %19 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i32> %19, <4 x i32>* %10, align 16
  %20 = load <4 x i32>, <4 x i32>* %10, align 16
  %21 = load <4 x i32>, <4 x i32>* %10, align 16
  %22 = shufflevector <4 x i32> %20, <4 x i32> %21, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %22, <2 x i32>* %11, align 8
  %23 = load <2 x i32>, <2 x i32>* %11, align 8
  %24 = load i32, i32* %13, align 4
  store <2 x i32> %23, <2 x i32>* %6, align 8
  store i32 %24, i32* %7, align 4
  %25 = load <2 x i32>, <2 x i32>* %6, align 8
  %26 = load i32, i32* %7, align 4
  %27 = insertelement <2 x i32> undef, i32 %26, i32 0
  %28 = load i32, i32* %7, align 4
  %29 = insertelement <2 x i32> %27, i32 %28, i32 1
  store <2 x i32> %29, <2 x i32>* %9, align 8
  %30 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i32> %25, <2 x i32>* %3, align 8
  store <2 x i32> %30, <2 x i32>* %4, align 8
  %31 = load <2 x i32>, <2 x i32>* %3, align 8
  %32 = bitcast <2 x i32> %31 to <8 x i8>
  %33 = load <2 x i32>, <2 x i32>* %4, align 8
  %34 = bitcast <2 x i32> %33 to <8 x i8>
  %35 = call <2 x i64> @llvm.aarch64.neon.umull.v2i64(<2 x i32> %31, <2 x i32> %33) #4
  store <2 x i64> %35, <2 x i64>* %5, align 16
  %36 = load <2 x i64>, <2 x i64>* %5, align 16
  store <2 x i64> %36, <2 x i64>* %8, align 16
  %37 = load <2 x i64>, <2 x i64>* %8, align 16
  store <2 x i64> %37, <2 x i64>* %14, align 16
  %38 = load <2 x i64>, <2 x i64>* %14, align 16
  ret <2 x i64> %38
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqdmull_n_s16_wrapper(<4 x i16> %0, i16 signext %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i16>, align 8
  %7 = alloca i16, align 2
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  %11 = alloca i16, align 2
  store <4 x i16> %0, <4 x i16>* %10, align 8
  store i16 %1, i16* %11, align 2
  %12 = load <4 x i16>, <4 x i16>* %10, align 8
  %13 = load i16, i16* %11, align 2
  store <4 x i16> %12, <4 x i16>* %6, align 8
  store i16 %13, i16* %7, align 2
  %14 = load <4 x i16>, <4 x i16>* %6, align 8
  %15 = load i16, i16* %7, align 2
  %16 = insertelement <4 x i16> undef, i16 %15, i32 0
  %17 = load i16, i16* %7, align 2
  %18 = insertelement <4 x i16> %16, i16 %17, i32 1
  %19 = load i16, i16* %7, align 2
  %20 = insertelement <4 x i16> %18, i16 %19, i32 2
  %21 = load i16, i16* %7, align 2
  %22 = insertelement <4 x i16> %20, i16 %21, i32 3
  store <4 x i16> %22, <4 x i16>* %9, align 8
  %23 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i16> %14, <4 x i16>* %3, align 8
  store <4 x i16> %23, <4 x i16>* %4, align 8
  %24 = load <4 x i16>, <4 x i16>* %3, align 8
  %25 = bitcast <4 x i16> %24 to <8 x i8>
  %26 = load <4 x i16>, <4 x i16>* %4, align 8
  %27 = bitcast <4 x i16> %26 to <8 x i8>
  %28 = call <4 x i32> @llvm.aarch64.neon.sqdmull.v4i32(<4 x i16> %24, <4 x i16> %26) #4
  %29 = bitcast <4 x i32> %28 to <16 x i8>
  store <4 x i32> %28, <4 x i32>* %5, align 16
  %30 = load <4 x i32>, <4 x i32>* %5, align 16
  store <4 x i32> %30, <4 x i32>* %8, align 16
  %31 = load <4 x i32>, <4 x i32>* %8, align 16
  ret <4 x i32> %31
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqdmull_n_s32_wrapper(<2 x i32> %0, i32 %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i32>, align 8
  %7 = alloca i32, align 4
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  %11 = alloca i32, align 4
  store <2 x i32> %0, <2 x i32>* %10, align 8
  store i32 %1, i32* %11, align 4
  %12 = load <2 x i32>, <2 x i32>* %10, align 8
  %13 = load i32, i32* %11, align 4
  store <2 x i32> %12, <2 x i32>* %6, align 8
  store i32 %13, i32* %7, align 4
  %14 = load <2 x i32>, <2 x i32>* %6, align 8
  %15 = load i32, i32* %7, align 4
  %16 = insertelement <2 x i32> undef, i32 %15, i32 0
  %17 = load i32, i32* %7, align 4
  %18 = insertelement <2 x i32> %16, i32 %17, i32 1
  store <2 x i32> %18, <2 x i32>* %9, align 8
  %19 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i32> %14, <2 x i32>* %3, align 8
  store <2 x i32> %19, <2 x i32>* %4, align 8
  %20 = load <2 x i32>, <2 x i32>* %3, align 8
  %21 = bitcast <2 x i32> %20 to <8 x i8>
  %22 = load <2 x i32>, <2 x i32>* %4, align 8
  %23 = bitcast <2 x i32> %22 to <8 x i8>
  %24 = call <2 x i64> @llvm.aarch64.neon.sqdmull.v2i64(<2 x i32> %20, <2 x i32> %22) #4
  %25 = bitcast <2 x i64> %24 to <16 x i8>
  store <2 x i64> %24, <2 x i64>* %5, align 16
  %26 = load <2 x i64>, <2 x i64>* %5, align 16
  store <2 x i64> %26, <2 x i64>* %8, align 16
  %27 = load <2 x i64>, <2 x i64>* %8, align 16
  ret <2 x i64> %27
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqdmull_high_n_s16_wrapper(<8 x i16> %0, i16 signext %1) #1 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i16>, align 8
  %7 = alloca i16, align 2
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <8 x i16>, align 16
  %11 = alloca <4 x i16>, align 8
  %12 = alloca <8 x i16>, align 16
  %13 = alloca i16, align 2
  %14 = alloca <4 x i32>, align 16
  %15 = alloca <8 x i16>, align 16
  %16 = alloca i16, align 2
  store <8 x i16> %0, <8 x i16>* %15, align 16
  store i16 %1, i16* %16, align 2
  %17 = load <8 x i16>, <8 x i16>* %15, align 16
  %18 = load i16, i16* %16, align 2
  store <8 x i16> %17, <8 x i16>* %12, align 16
  store i16 %18, i16* %13, align 2
  %19 = load <8 x i16>, <8 x i16>* %12, align 16
  store <8 x i16> %19, <8 x i16>* %10, align 16
  %20 = load <8 x i16>, <8 x i16>* %10, align 16
  %21 = load <8 x i16>, <8 x i16>* %10, align 16
  %22 = shufflevector <8 x i16> %20, <8 x i16> %21, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i16> %22, <4 x i16>* %11, align 8
  %23 = load <4 x i16>, <4 x i16>* %11, align 8
  %24 = load i16, i16* %13, align 2
  store <4 x i16> %23, <4 x i16>* %6, align 8
  store i16 %24, i16* %7, align 2
  %25 = load <4 x i16>, <4 x i16>* %6, align 8
  %26 = load i16, i16* %7, align 2
  %27 = insertelement <4 x i16> undef, i16 %26, i32 0
  %28 = load i16, i16* %7, align 2
  %29 = insertelement <4 x i16> %27, i16 %28, i32 1
  %30 = load i16, i16* %7, align 2
  %31 = insertelement <4 x i16> %29, i16 %30, i32 2
  %32 = load i16, i16* %7, align 2
  %33 = insertelement <4 x i16> %31, i16 %32, i32 3
  store <4 x i16> %33, <4 x i16>* %9, align 8
  %34 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i16> %25, <4 x i16>* %3, align 8
  store <4 x i16> %34, <4 x i16>* %4, align 8
  %35 = load <4 x i16>, <4 x i16>* %3, align 8
  %36 = bitcast <4 x i16> %35 to <8 x i8>
  %37 = load <4 x i16>, <4 x i16>* %4, align 8
  %38 = bitcast <4 x i16> %37 to <8 x i8>
  %39 = call <4 x i32> @llvm.aarch64.neon.sqdmull.v4i32(<4 x i16> %35, <4 x i16> %37) #4
  %40 = bitcast <4 x i32> %39 to <16 x i8>
  store <4 x i32> %39, <4 x i32>* %5, align 16
  %41 = load <4 x i32>, <4 x i32>* %5, align 16
  store <4 x i32> %41, <4 x i32>* %8, align 16
  %42 = load <4 x i32>, <4 x i32>* %8, align 16
  store <4 x i32> %42, <4 x i32>* %14, align 16
  %43 = load <4 x i32>, <4 x i32>* %14, align 16
  ret <4 x i32> %43
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqdmull_high_n_s32_wrapper(<4 x i32> %0, i32 %1) #1 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i32>, align 8
  %7 = alloca i32, align 4
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <4 x i32>, align 16
  %11 = alloca <2 x i32>, align 8
  %12 = alloca <4 x i32>, align 16
  %13 = alloca i32, align 4
  %14 = alloca <2 x i64>, align 16
  %15 = alloca <4 x i32>, align 16
  %16 = alloca i32, align 4
  store <4 x i32> %0, <4 x i32>* %15, align 16
  store i32 %1, i32* %16, align 4
  %17 = load <4 x i32>, <4 x i32>* %15, align 16
  %18 = load i32, i32* %16, align 4
  store <4 x i32> %17, <4 x i32>* %12, align 16
  store i32 %18, i32* %13, align 4
  %19 = load <4 x i32>, <4 x i32>* %12, align 16
  store <4 x i32> %19, <4 x i32>* %10, align 16
  %20 = load <4 x i32>, <4 x i32>* %10, align 16
  %21 = load <4 x i32>, <4 x i32>* %10, align 16
  %22 = shufflevector <4 x i32> %20, <4 x i32> %21, <2 x i32> <i32 2, i32 3>
  store <2 x i32> %22, <2 x i32>* %11, align 8
  %23 = load <2 x i32>, <2 x i32>* %11, align 8
  %24 = load i32, i32* %13, align 4
  store <2 x i32> %23, <2 x i32>* %6, align 8
  store i32 %24, i32* %7, align 4
  %25 = load <2 x i32>, <2 x i32>* %6, align 8
  %26 = load i32, i32* %7, align 4
  %27 = insertelement <2 x i32> undef, i32 %26, i32 0
  %28 = load i32, i32* %7, align 4
  %29 = insertelement <2 x i32> %27, i32 %28, i32 1
  store <2 x i32> %29, <2 x i32>* %9, align 8
  %30 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i32> %25, <2 x i32>* %3, align 8
  store <2 x i32> %30, <2 x i32>* %4, align 8
  %31 = load <2 x i32>, <2 x i32>* %3, align 8
  %32 = bitcast <2 x i32> %31 to <8 x i8>
  %33 = load <2 x i32>, <2 x i32>* %4, align 8
  %34 = bitcast <2 x i32> %33 to <8 x i8>
  %35 = call <2 x i64> @llvm.aarch64.neon.sqdmull.v2i64(<2 x i32> %31, <2 x i32> %33) #4
  %36 = bitcast <2 x i64> %35 to <16 x i8>
  store <2 x i64> %35, <2 x i64>* %5, align 16
  %37 = load <2 x i64>, <2 x i64>* %5, align 16
  store <2 x i64> %37, <2 x i64>* %8, align 16
  %38 = load <2 x i64>, <2 x i64>* %8, align 16
  store <2 x i64> %38, <2 x i64>* %14, align 16
  %39 = load <2 x i64>, <2 x i64>* %14, align 16
  ret <2 x i64> %39
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vqdmulh_n_s16_wrapper(<4 x i16> %0, i16 signext %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca i16, align 2
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  %11 = alloca i16, align 2
  store <4 x i16> %0, <4 x i16>* %10, align 8
  store i16 %1, i16* %11, align 2
  %12 = load <4 x i16>, <4 x i16>* %10, align 8
  %13 = load i16, i16* %11, align 2
  store <4 x i16> %12, <4 x i16>* %6, align 8
  store i16 %13, i16* %7, align 2
  %14 = load <4 x i16>, <4 x i16>* %6, align 8
  %15 = load i16, i16* %7, align 2
  %16 = insertelement <4 x i16> undef, i16 %15, i32 0
  %17 = load i16, i16* %7, align 2
  %18 = insertelement <4 x i16> %16, i16 %17, i32 1
  %19 = load i16, i16* %7, align 2
  %20 = insertelement <4 x i16> %18, i16 %19, i32 2
  %21 = load i16, i16* %7, align 2
  %22 = insertelement <4 x i16> %20, i16 %21, i32 3
  store <4 x i16> %22, <4 x i16>* %9, align 8
  %23 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i16> %14, <4 x i16>* %3, align 8
  store <4 x i16> %23, <4 x i16>* %4, align 8
  %24 = load <4 x i16>, <4 x i16>* %3, align 8
  %25 = bitcast <4 x i16> %24 to <8 x i8>
  %26 = load <4 x i16>, <4 x i16>* %4, align 8
  %27 = bitcast <4 x i16> %26 to <8 x i8>
  %28 = call <4 x i16> @llvm.aarch64.neon.sqdmulh.v4i16(<4 x i16> %24, <4 x i16> %26) #4
  %29 = bitcast <4 x i16> %28 to <8 x i8>
  store <4 x i16> %28, <4 x i16>* %5, align 8
  %30 = load <4 x i16>, <4 x i16>* %5, align 8
  store <4 x i16> %30, <4 x i16>* %8, align 8
  %31 = load <4 x i16>, <4 x i16>* %8, align 8
  ret <4 x i16> %31
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vqdmulhq_n_s16_wrapper(<8 x i16> %0, i16 signext %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca i16, align 2
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i16>, align 16
  %11 = alloca i16, align 2
  store <8 x i16> %0, <8 x i16>* %10, align 16
  store i16 %1, i16* %11, align 2
  %12 = load <8 x i16>, <8 x i16>* %10, align 16
  %13 = load i16, i16* %11, align 2
  store <8 x i16> %12, <8 x i16>* %6, align 16
  store i16 %13, i16* %7, align 2
  %14 = load <8 x i16>, <8 x i16>* %6, align 16
  %15 = load i16, i16* %7, align 2
  %16 = insertelement <8 x i16> undef, i16 %15, i32 0
  %17 = load i16, i16* %7, align 2
  %18 = insertelement <8 x i16> %16, i16 %17, i32 1
  %19 = load i16, i16* %7, align 2
  %20 = insertelement <8 x i16> %18, i16 %19, i32 2
  %21 = load i16, i16* %7, align 2
  %22 = insertelement <8 x i16> %20, i16 %21, i32 3
  %23 = load i16, i16* %7, align 2
  %24 = insertelement <8 x i16> %22, i16 %23, i32 4
  %25 = load i16, i16* %7, align 2
  %26 = insertelement <8 x i16> %24, i16 %25, i32 5
  %27 = load i16, i16* %7, align 2
  %28 = insertelement <8 x i16> %26, i16 %27, i32 6
  %29 = load i16, i16* %7, align 2
  %30 = insertelement <8 x i16> %28, i16 %29, i32 7
  store <8 x i16> %30, <8 x i16>* %9, align 16
  %31 = load <8 x i16>, <8 x i16>* %9, align 16
  store <8 x i16> %14, <8 x i16>* %3, align 16
  store <8 x i16> %31, <8 x i16>* %4, align 16
  %32 = load <8 x i16>, <8 x i16>* %3, align 16
  %33 = bitcast <8 x i16> %32 to <16 x i8>
  %34 = load <8 x i16>, <8 x i16>* %4, align 16
  %35 = bitcast <8 x i16> %34 to <16 x i8>
  %36 = call <8 x i16> @llvm.aarch64.neon.sqdmulh.v8i16(<8 x i16> %32, <8 x i16> %34) #4
  %37 = bitcast <8 x i16> %36 to <16 x i8>
  store <8 x i16> %36, <8 x i16>* %5, align 16
  %38 = load <8 x i16>, <8 x i16>* %5, align 16
  store <8 x i16> %38, <8 x i16>* %8, align 16
  %39 = load <8 x i16>, <8 x i16>* %8, align 16
  ret <8 x i16> %39
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vqdmulh_n_s32_wrapper(<2 x i32> %0, i32 %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca i32, align 4
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  %11 = alloca i32, align 4
  store <2 x i32> %0, <2 x i32>* %10, align 8
  store i32 %1, i32* %11, align 4
  %12 = load <2 x i32>, <2 x i32>* %10, align 8
  %13 = load i32, i32* %11, align 4
  store <2 x i32> %12, <2 x i32>* %6, align 8
  store i32 %13, i32* %7, align 4
  %14 = load <2 x i32>, <2 x i32>* %6, align 8
  %15 = load i32, i32* %7, align 4
  %16 = insertelement <2 x i32> undef, i32 %15, i32 0
  %17 = load i32, i32* %7, align 4
  %18 = insertelement <2 x i32> %16, i32 %17, i32 1
  store <2 x i32> %18, <2 x i32>* %9, align 8
  %19 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i32> %14, <2 x i32>* %3, align 8
  store <2 x i32> %19, <2 x i32>* %4, align 8
  %20 = load <2 x i32>, <2 x i32>* %3, align 8
  %21 = bitcast <2 x i32> %20 to <8 x i8>
  %22 = load <2 x i32>, <2 x i32>* %4, align 8
  %23 = bitcast <2 x i32> %22 to <8 x i8>
  %24 = call <2 x i32> @llvm.aarch64.neon.sqdmulh.v2i32(<2 x i32> %20, <2 x i32> %22) #4
  %25 = bitcast <2 x i32> %24 to <8 x i8>
  store <2 x i32> %24, <2 x i32>* %5, align 8
  %26 = load <2 x i32>, <2 x i32>* %5, align 8
  store <2 x i32> %26, <2 x i32>* %8, align 8
  %27 = load <2 x i32>, <2 x i32>* %8, align 8
  ret <2 x i32> %27
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqdmulhq_n_s32_wrapper(<4 x i32> %0, i32 %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  store <4 x i32> %0, <4 x i32>* %10, align 16
  store i32 %1, i32* %11, align 4
  %12 = load <4 x i32>, <4 x i32>* %10, align 16
  %13 = load i32, i32* %11, align 4
  store <4 x i32> %12, <4 x i32>* %6, align 16
  store i32 %13, i32* %7, align 4
  %14 = load <4 x i32>, <4 x i32>* %6, align 16
  %15 = load i32, i32* %7, align 4
  %16 = insertelement <4 x i32> undef, i32 %15, i32 0
  %17 = load i32, i32* %7, align 4
  %18 = insertelement <4 x i32> %16, i32 %17, i32 1
  %19 = load i32, i32* %7, align 4
  %20 = insertelement <4 x i32> %18, i32 %19, i32 2
  %21 = load i32, i32* %7, align 4
  %22 = insertelement <4 x i32> %20, i32 %21, i32 3
  store <4 x i32> %22, <4 x i32>* %9, align 16
  %23 = load <4 x i32>, <4 x i32>* %9, align 16
  store <4 x i32> %14, <4 x i32>* %3, align 16
  store <4 x i32> %23, <4 x i32>* %4, align 16
  %24 = load <4 x i32>, <4 x i32>* %3, align 16
  %25 = bitcast <4 x i32> %24 to <16 x i8>
  %26 = load <4 x i32>, <4 x i32>* %4, align 16
  %27 = bitcast <4 x i32> %26 to <16 x i8>
  %28 = call <4 x i32> @llvm.aarch64.neon.sqdmulh.v4i32(<4 x i32> %24, <4 x i32> %26) #4
  %29 = bitcast <4 x i32> %28 to <16 x i8>
  store <4 x i32> %28, <4 x i32>* %5, align 16
  %30 = load <4 x i32>, <4 x i32>* %5, align 16
  store <4 x i32> %30, <4 x i32>* %8, align 16
  %31 = load <4 x i32>, <4 x i32>* %8, align 16
  ret <4 x i32> %31
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vqrdmulh_n_s16_wrapper(<4 x i16> %0, i16 signext %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca i16, align 2
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  %11 = alloca i16, align 2
  store <4 x i16> %0, <4 x i16>* %10, align 8
  store i16 %1, i16* %11, align 2
  %12 = load <4 x i16>, <4 x i16>* %10, align 8
  %13 = load i16, i16* %11, align 2
  store <4 x i16> %12, <4 x i16>* %6, align 8
  store i16 %13, i16* %7, align 2
  %14 = load <4 x i16>, <4 x i16>* %6, align 8
  %15 = load i16, i16* %7, align 2
  %16 = insertelement <4 x i16> undef, i16 %15, i32 0
  %17 = load i16, i16* %7, align 2
  %18 = insertelement <4 x i16> %16, i16 %17, i32 1
  %19 = load i16, i16* %7, align 2
  %20 = insertelement <4 x i16> %18, i16 %19, i32 2
  %21 = load i16, i16* %7, align 2
  %22 = insertelement <4 x i16> %20, i16 %21, i32 3
  store <4 x i16> %22, <4 x i16>* %9, align 8
  %23 = load <4 x i16>, <4 x i16>* %9, align 8
  store <4 x i16> %14, <4 x i16>* %3, align 8
  store <4 x i16> %23, <4 x i16>* %4, align 8
  %24 = load <4 x i16>, <4 x i16>* %3, align 8
  %25 = bitcast <4 x i16> %24 to <8 x i8>
  %26 = load <4 x i16>, <4 x i16>* %4, align 8
  %27 = bitcast <4 x i16> %26 to <8 x i8>
  %28 = call <4 x i16> @llvm.aarch64.neon.sqrdmulh.v4i16(<4 x i16> %24, <4 x i16> %26) #4
  %29 = bitcast <4 x i16> %28 to <8 x i8>
  store <4 x i16> %28, <4 x i16>* %5, align 8
  %30 = load <4 x i16>, <4 x i16>* %5, align 8
  store <4 x i16> %30, <4 x i16>* %8, align 8
  %31 = load <4 x i16>, <4 x i16>* %8, align 8
  ret <4 x i16> %31
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vqrdmulhq_n_s16_wrapper(<8 x i16> %0, i16 signext %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca i16, align 2
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i16>, align 16
  %11 = alloca i16, align 2
  store <8 x i16> %0, <8 x i16>* %10, align 16
  store i16 %1, i16* %11, align 2
  %12 = load <8 x i16>, <8 x i16>* %10, align 16
  %13 = load i16, i16* %11, align 2
  store <8 x i16> %12, <8 x i16>* %6, align 16
  store i16 %13, i16* %7, align 2
  %14 = load <8 x i16>, <8 x i16>* %6, align 16
  %15 = load i16, i16* %7, align 2
  %16 = insertelement <8 x i16> undef, i16 %15, i32 0
  %17 = load i16, i16* %7, align 2
  %18 = insertelement <8 x i16> %16, i16 %17, i32 1
  %19 = load i16, i16* %7, align 2
  %20 = insertelement <8 x i16> %18, i16 %19, i32 2
  %21 = load i16, i16* %7, align 2
  %22 = insertelement <8 x i16> %20, i16 %21, i32 3
  %23 = load i16, i16* %7, align 2
  %24 = insertelement <8 x i16> %22, i16 %23, i32 4
  %25 = load i16, i16* %7, align 2
  %26 = insertelement <8 x i16> %24, i16 %25, i32 5
  %27 = load i16, i16* %7, align 2
  %28 = insertelement <8 x i16> %26, i16 %27, i32 6
  %29 = load i16, i16* %7, align 2
  %30 = insertelement <8 x i16> %28, i16 %29, i32 7
  store <8 x i16> %30, <8 x i16>* %9, align 16
  %31 = load <8 x i16>, <8 x i16>* %9, align 16
  store <8 x i16> %14, <8 x i16>* %3, align 16
  store <8 x i16> %31, <8 x i16>* %4, align 16
  %32 = load <8 x i16>, <8 x i16>* %3, align 16
  %33 = bitcast <8 x i16> %32 to <16 x i8>
  %34 = load <8 x i16>, <8 x i16>* %4, align 16
  %35 = bitcast <8 x i16> %34 to <16 x i8>
  %36 = call <8 x i16> @llvm.aarch64.neon.sqrdmulh.v8i16(<8 x i16> %32, <8 x i16> %34) #4
  %37 = bitcast <8 x i16> %36 to <16 x i8>
  store <8 x i16> %36, <8 x i16>* %5, align 16
  %38 = load <8 x i16>, <8 x i16>* %5, align 16
  store <8 x i16> %38, <8 x i16>* %8, align 16
  %39 = load <8 x i16>, <8 x i16>* %8, align 16
  ret <8 x i16> %39
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vqrdmulh_n_s32_wrapper(<2 x i32> %0, i32 %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca i32, align 4
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  %11 = alloca i32, align 4
  store <2 x i32> %0, <2 x i32>* %10, align 8
  store i32 %1, i32* %11, align 4
  %12 = load <2 x i32>, <2 x i32>* %10, align 8
  %13 = load i32, i32* %11, align 4
  store <2 x i32> %12, <2 x i32>* %6, align 8
  store i32 %13, i32* %7, align 4
  %14 = load <2 x i32>, <2 x i32>* %6, align 8
  %15 = load i32, i32* %7, align 4
  %16 = insertelement <2 x i32> undef, i32 %15, i32 0
  %17 = load i32, i32* %7, align 4
  %18 = insertelement <2 x i32> %16, i32 %17, i32 1
  store <2 x i32> %18, <2 x i32>* %9, align 8
  %19 = load <2 x i32>, <2 x i32>* %9, align 8
  store <2 x i32> %14, <2 x i32>* %3, align 8
  store <2 x i32> %19, <2 x i32>* %4, align 8
  %20 = load <2 x i32>, <2 x i32>* %3, align 8
  %21 = bitcast <2 x i32> %20 to <8 x i8>
  %22 = load <2 x i32>, <2 x i32>* %4, align 8
  %23 = bitcast <2 x i32> %22 to <8 x i8>
  %24 = call <2 x i32> @llvm.aarch64.neon.sqrdmulh.v2i32(<2 x i32> %20, <2 x i32> %22) #4
  %25 = bitcast <2 x i32> %24 to <8 x i8>
  store <2 x i32> %24, <2 x i32>* %5, align 8
  %26 = load <2 x i32>, <2 x i32>* %5, align 8
  store <2 x i32> %26, <2 x i32>* %8, align 8
  %27 = load <2 x i32>, <2 x i32>* %8, align 8
  ret <2 x i32> %27
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqrdmulhq_n_s32_wrapper(<4 x i32> %0, i32 %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca i32, align 4
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i32>, align 16
  %11 = alloca i32, align 4
  store <4 x i32> %0, <4 x i32>* %10, align 16
  store i32 %1, i32* %11, align 4
  %12 = load <4 x i32>, <4 x i32>* %10, align 16
  %13 = load i32, i32* %11, align 4
  store <4 x i32> %12, <4 x i32>* %6, align 16
  store i32 %13, i32* %7, align 4
  %14 = load <4 x i32>, <4 x i32>* %6, align 16
  %15 = load i32, i32* %7, align 4
  %16 = insertelement <4 x i32> undef, i32 %15, i32 0
  %17 = load i32, i32* %7, align 4
  %18 = insertelement <4 x i32> %16, i32 %17, i32 1
  %19 = load i32, i32* %7, align 4
  %20 = insertelement <4 x i32> %18, i32 %19, i32 2
  %21 = load i32, i32* %7, align 4
  %22 = insertelement <4 x i32> %20, i32 %21, i32 3
  store <4 x i32> %22, <4 x i32>* %9, align 16
  %23 = load <4 x i32>, <4 x i32>* %9, align 16
  store <4 x i32> %14, <4 x i32>* %3, align 16
  store <4 x i32> %23, <4 x i32>* %4, align 16
  %24 = load <4 x i32>, <4 x i32>* %3, align 16
  %25 = bitcast <4 x i32> %24 to <16 x i8>
  %26 = load <4 x i32>, <4 x i32>* %4, align 16
  %27 = bitcast <4 x i32> %26 to <16 x i8>
  %28 = call <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32> %24, <4 x i32> %26) #4
  %29 = bitcast <4 x i32> %28 to <16 x i8>
  store <4 x i32> %28, <4 x i32>* %5, align 16
  %30 = load <4 x i32>, <4 x i32>* %5, align 16
  store <4 x i32> %30, <4 x i32>* %8, align 16
  %31 = load <4 x i32>, <4 x i32>* %8, align 16
  ret <4 x i32> %31
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vabs_s8_wrapper(<8 x i8> %0) #0 {
  %2 = alloca <8 x i8>, align 8
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %4, align 8
  %5 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %5, <8 x i8>* %2, align 8
  %6 = load <8 x i8>, <8 x i8>* %2, align 8
  %7 = call <8 x i8> @llvm.aarch64.neon.abs.v8i8(<8 x i8> %6) #4
  store <8 x i8> %7, <8 x i8>* %3, align 8
  %8 = load <8 x i8>, <8 x i8>* %3, align 8
  ret <8 x i8> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vabsq_s8_wrapper(<16 x i8> %0) #1 {
  %2 = alloca <16 x i8>, align 16
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %4, align 16
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  store <16 x i8> %5, <16 x i8>* %2, align 16
  %6 = load <16 x i8>, <16 x i8>* %2, align 16
  %7 = call <16 x i8> @llvm.aarch64.neon.abs.v16i8(<16 x i8> %6) #4
  store <16 x i8> %7, <16 x i8>* %3, align 16
  %8 = load <16 x i8>, <16 x i8>* %3, align 16
  ret <16 x i8> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vabs_s16_wrapper(<4 x i16> %0) #0 {
  %2 = alloca <4 x i16>, align 8
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %4, align 8
  %5 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %5, <4 x i16>* %2, align 8
  %6 = load <4 x i16>, <4 x i16>* %2, align 8
  %7 = bitcast <4 x i16> %6 to <8 x i8>
  %8 = call <4 x i16> @llvm.aarch64.neon.abs.v4i16(<4 x i16> %6) #4
  store <4 x i16> %8, <4 x i16>* %3, align 8
  %9 = load <4 x i16>, <4 x i16>* %3, align 8
  ret <4 x i16> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vabsq_s16_wrapper(<8 x i16> %0) #1 {
  %2 = alloca <8 x i16>, align 16
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %4, align 16
  %5 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %5, <8 x i16>* %2, align 16
  %6 = load <8 x i16>, <8 x i16>* %2, align 16
  %7 = bitcast <8 x i16> %6 to <16 x i8>
  %8 = call <8 x i16> @llvm.aarch64.neon.abs.v8i16(<8 x i16> %6) #4
  store <8 x i16> %8, <8 x i16>* %3, align 16
  %9 = load <8 x i16>, <8 x i16>* %3, align 16
  ret <8 x i16> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vabs_s32_wrapper(<2 x i32> %0) #0 {
  %2 = alloca <2 x i32>, align 8
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %4, align 8
  %5 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %5, <2 x i32>* %2, align 8
  %6 = load <2 x i32>, <2 x i32>* %2, align 8
  %7 = bitcast <2 x i32> %6 to <8 x i8>
  %8 = call <2 x i32> @llvm.aarch64.neon.abs.v2i32(<2 x i32> %6) #4
  store <2 x i32> %8, <2 x i32>* %3, align 8
  %9 = load <2 x i32>, <2 x i32>* %3, align 8
  ret <2 x i32> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vabsq_s32_wrapper(<4 x i32> %0) #1 {
  %2 = alloca <4 x i32>, align 16
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %4, align 16
  %5 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %5, <4 x i32>* %2, align 16
  %6 = load <4 x i32>, <4 x i32>* %2, align 16
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = call <4 x i32> @llvm.aarch64.neon.abs.v4i32(<4 x i32> %6) #4
  store <4 x i32> %8, <4 x i32>* %3, align 16
  %9 = load <4 x i32>, <4 x i32>* %3, align 16
  ret <4 x i32> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vabsq_s64_wrapper(<2 x i64> %0) #1 {
  %2 = alloca <2 x i64>, align 16
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %4, align 16
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  store <2 x i64> %5, <2 x i64>* %2, align 16
  %6 = load <2 x i64>, <2 x i64>* %2, align 16
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = call <2 x i64> @llvm.aarch64.neon.abs.v2i64(<2 x i64> %6) #4
  store <2 x i64> %8, <2 x i64>* %3, align 16
  %9 = load <2 x i64>, <2 x i64>* %3, align 16
  ret <2 x i64> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vabs_s64_wrapper(<1 x i64> %0) #0 {
  %2 = alloca <1 x i64>, align 8
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %4, align 8
  %5 = load <1 x i64>, <1 x i64>* %4, align 8
  store <1 x i64> %5, <1 x i64>* %2, align 8
  %6 = load <1 x i64>, <1 x i64>* %2, align 8
  %7 = bitcast <1 x i64> %6 to <8 x i8>
  %8 = call <1 x i64> @llvm.aarch64.neon.abs.v1i64(<1 x i64> %6) #4
  store <1 x i64> %8, <1 x i64>* %3, align 8
  %9 = load <1 x i64>, <1 x i64>* %3, align 8
  ret <1 x i64> %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vabsd_s64_wrapper(i64 %0) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  store i64 %5, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @llvm.aarch64.neon.abs.i64(i64 %6) #4
  store i64 %7, i64* %3, align 8
  %8 = load i64, i64* %3, align 8
  ret i64 %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vqabs_s8_wrapper(<8 x i8> %0) #0 {
  %2 = alloca <8 x i8>, align 8
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %4, align 8
  %5 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %5, <8 x i8>* %2, align 8
  %6 = load <8 x i8>, <8 x i8>* %2, align 8
  %7 = call <8 x i8> @llvm.aarch64.neon.sqabs.v8i8(<8 x i8> %6) #4
  store <8 x i8> %7, <8 x i8>* %3, align 8
  %8 = load <8 x i8>, <8 x i8>* %3, align 8
  ret <8 x i8> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vqabsq_s8_wrapper(<16 x i8> %0) #1 {
  %2 = alloca <16 x i8>, align 16
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %4, align 16
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  store <16 x i8> %5, <16 x i8>* %2, align 16
  %6 = load <16 x i8>, <16 x i8>* %2, align 16
  %7 = call <16 x i8> @llvm.aarch64.neon.sqabs.v16i8(<16 x i8> %6) #4
  store <16 x i8> %7, <16 x i8>* %3, align 16
  %8 = load <16 x i8>, <16 x i8>* %3, align 16
  ret <16 x i8> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vqabs_s16_wrapper(<4 x i16> %0) #0 {
  %2 = alloca <4 x i16>, align 8
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %4, align 8
  %5 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %5, <4 x i16>* %2, align 8
  %6 = load <4 x i16>, <4 x i16>* %2, align 8
  %7 = bitcast <4 x i16> %6 to <8 x i8>
  %8 = call <4 x i16> @llvm.aarch64.neon.sqabs.v4i16(<4 x i16> %6) #4
  %9 = bitcast <4 x i16> %8 to <8 x i8>
  store <4 x i16> %8, <4 x i16>* %3, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  ret <4 x i16> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vqabsq_s16_wrapper(<8 x i16> %0) #1 {
  %2 = alloca <8 x i16>, align 16
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %4, align 16
  %5 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %5, <8 x i16>* %2, align 16
  %6 = load <8 x i16>, <8 x i16>* %2, align 16
  %7 = bitcast <8 x i16> %6 to <16 x i8>
  %8 = call <8 x i16> @llvm.aarch64.neon.sqabs.v8i16(<8 x i16> %6) #4
  %9 = bitcast <8 x i16> %8 to <16 x i8>
  store <8 x i16> %8, <8 x i16>* %3, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  ret <8 x i16> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vqabs_s32_wrapper(<2 x i32> %0) #0 {
  %2 = alloca <2 x i32>, align 8
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %4, align 8
  %5 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %5, <2 x i32>* %2, align 8
  %6 = load <2 x i32>, <2 x i32>* %2, align 8
  %7 = bitcast <2 x i32> %6 to <8 x i8>
  %8 = call <2 x i32> @llvm.aarch64.neon.sqabs.v2i32(<2 x i32> %6) #4
  %9 = bitcast <2 x i32> %8 to <8 x i8>
  store <2 x i32> %8, <2 x i32>* %3, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  ret <2 x i32> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqabsq_s32_wrapper(<4 x i32> %0) #1 {
  %2 = alloca <4 x i32>, align 16
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %4, align 16
  %5 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %5, <4 x i32>* %2, align 16
  %6 = load <4 x i32>, <4 x i32>* %2, align 16
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = call <4 x i32> @llvm.aarch64.neon.sqabs.v4i32(<4 x i32> %6) #4
  %9 = bitcast <4 x i32> %8 to <16 x i8>
  store <4 x i32> %8, <4 x i32>* %3, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  ret <4 x i32> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqabsq_s64_wrapper(<2 x i64> %0) #1 {
  %2 = alloca <2 x i64>, align 16
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %4, align 16
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  store <2 x i64> %5, <2 x i64>* %2, align 16
  %6 = load <2 x i64>, <2 x i64>* %2, align 16
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = call <2 x i64> @llvm.aarch64.neon.sqabs.v2i64(<2 x i64> %6) #4
  %9 = bitcast <2 x i64> %8 to <16 x i8>
  store <2 x i64> %8, <2 x i64>* %3, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  ret <2 x i64> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vqabs_s64_wrapper(<1 x i64> %0) #0 {
  %2 = alloca <1 x i64>, align 8
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %4, align 8
  %5 = load <1 x i64>, <1 x i64>* %4, align 8
  store <1 x i64> %5, <1 x i64>* %2, align 8
  %6 = load <1 x i64>, <1 x i64>* %2, align 8
  %7 = bitcast <1 x i64> %6 to <8 x i8>
  %8 = call <1 x i64> @llvm.aarch64.neon.sqabs.v1i64(<1 x i64> %6) #4
  %9 = bitcast <1 x i64> %8 to <8 x i8>
  store <1 x i64> %8, <1 x i64>* %3, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  ret <1 x i64> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define signext i8 @vqabsb_s8_wrapper(i8 signext %0) #2 {
  %2 = alloca i8, align 1
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  store i8 %0, i8* %4, align 1
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %2, align 1
  %6 = load i8, i8* %2, align 1
  %7 = insertelement <8 x i8> undef, i8 %6, i64 0
  %8 = call <8 x i8> @llvm.aarch64.neon.sqabs.v8i8(<8 x i8> %7) #4
  %9 = extractelement <8 x i8> %8, i64 0
  store i8 %9, i8* %3, align 1
  %10 = load i8, i8* %3, align 1
  ret i8 %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define signext i16 @vqabsh_s16_wrapper(i16 signext %0) #2 {
  %2 = alloca i16, align 2
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  store i16 %0, i16* %4, align 2
  %5 = load i16, i16* %4, align 2
  store i16 %5, i16* %2, align 2
  %6 = load i16, i16* %2, align 2
  %7 = insertelement <4 x i16> undef, i16 %6, i64 0
  %8 = call <4 x i16> @llvm.aarch64.neon.sqabs.v4i16(<4 x i16> %7) #4
  %9 = extractelement <4 x i16> %8, i64 0
  store i16 %9, i16* %3, align 2
  %10 = load i16, i16* %3, align 2
  ret i16 %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @vqabss_s32_wrapper(i32 %0) #2 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = call i32 @llvm.aarch64.neon.sqabs.i32(i32 %6) #4
  store i32 %7, i32* %3, align 4
  %8 = load i32, i32* %3, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vqabsd_s64_wrapper(i64 %0) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  store i64 %5, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @llvm.aarch64.neon.sqabs.i64(i64 %6) #4
  store i64 %7, i64* %3, align 8
  %8 = load i64, i64* %3, align 8
  ret i64 %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vneg_s8_wrapper(<8 x i8> %0) #0 {
  %2 = alloca <8 x i8>, align 8
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %4, align 8
  %5 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %5, <8 x i8>* %2, align 8
  %6 = load <8 x i8>, <8 x i8>* %2, align 8
  %7 = sub <8 x i8> zeroinitializer, %6
  store <8 x i8> %7, <8 x i8>* %3, align 8
  %8 = load <8 x i8>, <8 x i8>* %3, align 8
  ret <8 x i8> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vnegq_s8_wrapper(<16 x i8> %0) #1 {
  %2 = alloca <16 x i8>, align 16
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %4, align 16
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  store <16 x i8> %5, <16 x i8>* %2, align 16
  %6 = load <16 x i8>, <16 x i8>* %2, align 16
  %7 = sub <16 x i8> zeroinitializer, %6
  store <16 x i8> %7, <16 x i8>* %3, align 16
  %8 = load <16 x i8>, <16 x i8>* %3, align 16
  ret <16 x i8> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vneg_s16_wrapper(<4 x i16> %0) #0 {
  %2 = alloca <4 x i16>, align 8
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %4, align 8
  %5 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %5, <4 x i16>* %2, align 8
  %6 = load <4 x i16>, <4 x i16>* %2, align 8
  %7 = sub <4 x i16> zeroinitializer, %6
  store <4 x i16> %7, <4 x i16>* %3, align 8
  %8 = load <4 x i16>, <4 x i16>* %3, align 8
  ret <4 x i16> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vnegq_s16_wrapper(<8 x i16> %0) #1 {
  %2 = alloca <8 x i16>, align 16
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %4, align 16
  %5 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %5, <8 x i16>* %2, align 16
  %6 = load <8 x i16>, <8 x i16>* %2, align 16
  %7 = sub <8 x i16> zeroinitializer, %6
  store <8 x i16> %7, <8 x i16>* %3, align 16
  %8 = load <8 x i16>, <8 x i16>* %3, align 16
  ret <8 x i16> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vneg_s32_wrapper(<2 x i32> %0) #0 {
  %2 = alloca <2 x i32>, align 8
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %4, align 8
  %5 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %5, <2 x i32>* %2, align 8
  %6 = load <2 x i32>, <2 x i32>* %2, align 8
  %7 = sub <2 x i32> zeroinitializer, %6
  store <2 x i32> %7, <2 x i32>* %3, align 8
  %8 = load <2 x i32>, <2 x i32>* %3, align 8
  ret <2 x i32> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vnegq_s32_wrapper(<4 x i32> %0) #1 {
  %2 = alloca <4 x i32>, align 16
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %4, align 16
  %5 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %5, <4 x i32>* %2, align 16
  %6 = load <4 x i32>, <4 x i32>* %2, align 16
  %7 = sub <4 x i32> zeroinitializer, %6
  store <4 x i32> %7, <4 x i32>* %3, align 16
  %8 = load <4 x i32>, <4 x i32>* %3, align 16
  ret <4 x i32> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vnegq_s64_wrapper(<2 x i64> %0) #1 {
  %2 = alloca <2 x i64>, align 16
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %4, align 16
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  store <2 x i64> %5, <2 x i64>* %2, align 16
  %6 = load <2 x i64>, <2 x i64>* %2, align 16
  %7 = sub <2 x i64> zeroinitializer, %6
  store <2 x i64> %7, <2 x i64>* %3, align 16
  %8 = load <2 x i64>, <2 x i64>* %3, align 16
  ret <2 x i64> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vneg_s64_wrapper(<1 x i64> %0) #0 {
  %2 = alloca <1 x i64>, align 8
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %4, align 8
  %5 = load <1 x i64>, <1 x i64>* %4, align 8
  store <1 x i64> %5, <1 x i64>* %2, align 8
  %6 = load <1 x i64>, <1 x i64>* %2, align 8
  %7 = sub <1 x i64> zeroinitializer, %6
  store <1 x i64> %7, <1 x i64>* %3, align 8
  %8 = load <1 x i64>, <1 x i64>* %3, align 8
  ret <1 x i64> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vnegd_s64_wrapper(i64 %0) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  store i64 %5, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = sub i64 0, %6
  store i64 %7, i64* %3, align 8
  %8 = load i64, i64* %3, align 8
  ret i64 %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vqneg_s8_wrapper(<8 x i8> %0) #0 {
  %2 = alloca <8 x i8>, align 8
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %4, align 8
  %5 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %5, <8 x i8>* %2, align 8
  %6 = load <8 x i8>, <8 x i8>* %2, align 8
  %7 = call <8 x i8> @llvm.aarch64.neon.sqneg.v8i8(<8 x i8> %6) #4
  store <8 x i8> %7, <8 x i8>* %3, align 8
  %8 = load <8 x i8>, <8 x i8>* %3, align 8
  ret <8 x i8> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vqnegq_s8_wrapper(<16 x i8> %0) #1 {
  %2 = alloca <16 x i8>, align 16
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %4, align 16
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  store <16 x i8> %5, <16 x i8>* %2, align 16
  %6 = load <16 x i8>, <16 x i8>* %2, align 16
  %7 = call <16 x i8> @llvm.aarch64.neon.sqneg.v16i8(<16 x i8> %6) #4
  store <16 x i8> %7, <16 x i8>* %3, align 16
  %8 = load <16 x i8>, <16 x i8>* %3, align 16
  ret <16 x i8> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vqneg_s16_wrapper(<4 x i16> %0) #0 {
  %2 = alloca <4 x i16>, align 8
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %4, align 8
  %5 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %5, <4 x i16>* %2, align 8
  %6 = load <4 x i16>, <4 x i16>* %2, align 8
  %7 = bitcast <4 x i16> %6 to <8 x i8>
  %8 = call <4 x i16> @llvm.aarch64.neon.sqneg.v4i16(<4 x i16> %6) #4
  %9 = bitcast <4 x i16> %8 to <8 x i8>
  store <4 x i16> %8, <4 x i16>* %3, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  ret <4 x i16> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vqnegq_s16_wrapper(<8 x i16> %0) #1 {
  %2 = alloca <8 x i16>, align 16
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %4, align 16
  %5 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %5, <8 x i16>* %2, align 16
  %6 = load <8 x i16>, <8 x i16>* %2, align 16
  %7 = bitcast <8 x i16> %6 to <16 x i8>
  %8 = call <8 x i16> @llvm.aarch64.neon.sqneg.v8i16(<8 x i16> %6) #4
  %9 = bitcast <8 x i16> %8 to <16 x i8>
  store <8 x i16> %8, <8 x i16>* %3, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  ret <8 x i16> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vqneg_s32_wrapper(<2 x i32> %0) #0 {
  %2 = alloca <2 x i32>, align 8
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %4, align 8
  %5 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %5, <2 x i32>* %2, align 8
  %6 = load <2 x i32>, <2 x i32>* %2, align 8
  %7 = bitcast <2 x i32> %6 to <8 x i8>
  %8 = call <2 x i32> @llvm.aarch64.neon.sqneg.v2i32(<2 x i32> %6) #4
  %9 = bitcast <2 x i32> %8 to <8 x i8>
  store <2 x i32> %8, <2 x i32>* %3, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  ret <2 x i32> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vqnegq_s32_wrapper(<4 x i32> %0) #1 {
  %2 = alloca <4 x i32>, align 16
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %4, align 16
  %5 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %5, <4 x i32>* %2, align 16
  %6 = load <4 x i32>, <4 x i32>* %2, align 16
  %7 = bitcast <4 x i32> %6 to <16 x i8>
  %8 = call <4 x i32> @llvm.aarch64.neon.sqneg.v4i32(<4 x i32> %6) #4
  %9 = bitcast <4 x i32> %8 to <16 x i8>
  store <4 x i32> %8, <4 x i32>* %3, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  ret <4 x i32> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vqnegq_s64_wrapper(<2 x i64> %0) #1 {
  %2 = alloca <2 x i64>, align 16
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %4, align 16
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  store <2 x i64> %5, <2 x i64>* %2, align 16
  %6 = load <2 x i64>, <2 x i64>* %2, align 16
  %7 = bitcast <2 x i64> %6 to <16 x i8>
  %8 = call <2 x i64> @llvm.aarch64.neon.sqneg.v2i64(<2 x i64> %6) #4
  %9 = bitcast <2 x i64> %8 to <16 x i8>
  store <2 x i64> %8, <2 x i64>* %3, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  ret <2 x i64> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vqneg_s64_wrapper(<1 x i64> %0) #0 {
  %2 = alloca <1 x i64>, align 8
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %4, align 8
  %5 = load <1 x i64>, <1 x i64>* %4, align 8
  store <1 x i64> %5, <1 x i64>* %2, align 8
  %6 = load <1 x i64>, <1 x i64>* %2, align 8
  %7 = bitcast <1 x i64> %6 to <8 x i8>
  %8 = call <1 x i64> @llvm.aarch64.neon.sqneg.v1i64(<1 x i64> %6) #4
  %9 = bitcast <1 x i64> %8 to <8 x i8>
  store <1 x i64> %8, <1 x i64>* %3, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  ret <1 x i64> %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define signext i8 @vqnegb_s8_wrapper(i8 signext %0) #2 {
  %2 = alloca i8, align 1
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  store i8 %0, i8* %4, align 1
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %2, align 1
  %6 = load i8, i8* %2, align 1
  %7 = insertelement <8 x i8> undef, i8 %6, i64 0
  %8 = call <8 x i8> @llvm.aarch64.neon.sqneg.v8i8(<8 x i8> %7) #4
  %9 = extractelement <8 x i8> %8, i64 0
  store i8 %9, i8* %3, align 1
  %10 = load i8, i8* %3, align 1
  ret i8 %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define signext i16 @vqnegh_s16_wrapper(i16 signext %0) #2 {
  %2 = alloca i16, align 2
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  store i16 %0, i16* %4, align 2
  %5 = load i16, i16* %4, align 2
  store i16 %5, i16* %2, align 2
  %6 = load i16, i16* %2, align 2
  %7 = insertelement <4 x i16> undef, i16 %6, i64 0
  %8 = call <4 x i16> @llvm.aarch64.neon.sqneg.v4i16(<4 x i16> %7) #4
  %9 = extractelement <4 x i16> %8, i64 0
  store i16 %9, i16* %3, align 2
  %10 = load i16, i16* %3, align 2
  ret i16 %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @vqnegs_s32_wrapper(i32 %0) #2 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %2, align 4
  %6 = load i32, i32* %2, align 4
  %7 = call i32 @llvm.aarch64.neon.sqneg.i32(i32 %6) #4
  store i32 %7, i32* %3, align 4
  %8 = load i32, i32* %3, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @vqnegd_s64_wrapper(i64 %0) #2 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  store i64 %5, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = call i64 @llvm.aarch64.neon.sqneg.i64(i64 %6) #4
  store i64 %7, i64* %3, align 8
  %8 = load i64, i64* %3, align 8
  ret i64 %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vmvn_s8_wrapper(<8 x i8> %0) #0 {
  %2 = alloca <8 x i8>, align 8
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %4, align 8
  %5 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %5, <8 x i8>* %2, align 8
  %6 = load <8 x i8>, <8 x i8>* %2, align 8
  %7 = xor <8 x i8> %6, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  store <8 x i8> %7, <8 x i8>* %3, align 8
  %8 = load <8 x i8>, <8 x i8>* %3, align 8
  ret <8 x i8> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vmvnq_s8_wrapper(<16 x i8> %0) #1 {
  %2 = alloca <16 x i8>, align 16
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %4, align 16
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  store <16 x i8> %5, <16 x i8>* %2, align 16
  %6 = load <16 x i8>, <16 x i8>* %2, align 16
  %7 = xor <16 x i8> %6, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  store <16 x i8> %7, <16 x i8>* %3, align 16
  %8 = load <16 x i8>, <16 x i8>* %3, align 16
  ret <16 x i8> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmvn_s16_wrapper(<4 x i16> %0) #0 {
  %2 = alloca <4 x i16>, align 8
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %4, align 8
  %5 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %5, <4 x i16>* %2, align 8
  %6 = load <4 x i16>, <4 x i16>* %2, align 8
  %7 = xor <4 x i16> %6, <i16 -1, i16 -1, i16 -1, i16 -1>
  store <4 x i16> %7, <4 x i16>* %3, align 8
  %8 = load <4 x i16>, <4 x i16>* %3, align 8
  ret <4 x i16> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmvnq_s16_wrapper(<8 x i16> %0) #1 {
  %2 = alloca <8 x i16>, align 16
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %4, align 16
  %5 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %5, <8 x i16>* %2, align 16
  %6 = load <8 x i16>, <8 x i16>* %2, align 16
  %7 = xor <8 x i16> %6, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  store <8 x i16> %7, <8 x i16>* %3, align 16
  %8 = load <8 x i16>, <8 x i16>* %3, align 16
  ret <8 x i16> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmvn_s32_wrapper(<2 x i32> %0) #0 {
  %2 = alloca <2 x i32>, align 8
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %4, align 8
  %5 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %5, <2 x i32>* %2, align 8
  %6 = load <2 x i32>, <2 x i32>* %2, align 8
  %7 = xor <2 x i32> %6, <i32 -1, i32 -1>
  store <2 x i32> %7, <2 x i32>* %3, align 8
  %8 = load <2 x i32>, <2 x i32>* %3, align 8
  ret <2 x i32> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmvnq_s32_wrapper(<4 x i32> %0) #1 {
  %2 = alloca <4 x i32>, align 16
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %4, align 16
  %5 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %5, <4 x i32>* %2, align 16
  %6 = load <4 x i32>, <4 x i32>* %2, align 16
  %7 = xor <4 x i32> %6, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %7, <4 x i32>* %3, align 16
  %8 = load <4 x i32>, <4 x i32>* %3, align 16
  ret <4 x i32> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vmvn_u8_wrapper(<8 x i8> %0) #0 {
  %2 = alloca <8 x i8>, align 8
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %4, align 8
  %5 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %5, <8 x i8>* %2, align 8
  %6 = load <8 x i8>, <8 x i8>* %2, align 8
  %7 = xor <8 x i8> %6, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  store <8 x i8> %7, <8 x i8>* %3, align 8
  %8 = load <8 x i8>, <8 x i8>* %3, align 8
  ret <8 x i8> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vmvnq_u8_wrapper(<16 x i8> %0) #1 {
  %2 = alloca <16 x i8>, align 16
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %4, align 16
  %5 = load <16 x i8>, <16 x i8>* %4, align 16
  store <16 x i8> %5, <16 x i8>* %2, align 16
  %6 = load <16 x i8>, <16 x i8>* %2, align 16
  %7 = xor <16 x i8> %6, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  store <16 x i8> %7, <16 x i8>* %3, align 16
  %8 = load <16 x i8>, <16 x i8>* %3, align 16
  ret <16 x i8> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmvn_u16_wrapper(<4 x i16> %0) #0 {
  %2 = alloca <4 x i16>, align 8
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %4, align 8
  %5 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %5, <4 x i16>* %2, align 8
  %6 = load <4 x i16>, <4 x i16>* %2, align 8
  %7 = xor <4 x i16> %6, <i16 -1, i16 -1, i16 -1, i16 -1>
  store <4 x i16> %7, <4 x i16>* %3, align 8
  %8 = load <4 x i16>, <4 x i16>* %3, align 8
  ret <4 x i16> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmvnq_u16_wrapper(<8 x i16> %0) #1 {
  %2 = alloca <8 x i16>, align 16
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %4, align 16
  %5 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %5, <8 x i16>* %2, align 16
  %6 = load <8 x i16>, <8 x i16>* %2, align 16
  %7 = xor <8 x i16> %6, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  store <8 x i16> %7, <8 x i16>* %3, align 16
  %8 = load <8 x i16>, <8 x i16>* %3, align 16
  ret <8 x i16> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmvn_u32_wrapper(<2 x i32> %0) #0 {
  %2 = alloca <2 x i32>, align 8
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %4, align 8
  %5 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %5, <2 x i32>* %2, align 8
  %6 = load <2 x i32>, <2 x i32>* %2, align 8
  %7 = xor <2 x i32> %6, <i32 -1, i32 -1>
  store <2 x i32> %7, <2 x i32>* %3, align 8
  %8 = load <2 x i32>, <2 x i32>* %3, align 8
  ret <2 x i32> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmvnq_u32_wrapper(<4 x i32> %0) #1 {
  %2 = alloca <4 x i32>, align 16
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %4, align 16
  %5 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %5, <4 x i32>* %2, align 16
  %6 = load <4 x i32>, <4 x i32>* %2, align 16
  %7 = xor <4 x i32> %6, <i32 -1, i32 -1, i32 -1, i32 -1>
  store <4 x i32> %7, <4 x i32>* %3, align 16
  %8 = load <4 x i32>, <4 x i32>* %3, align 16
  ret <4 x i32> %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vand_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = and <8 x i8> %10, %11
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vandq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = and <16 x i8> %10, %11
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vand_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = and <4 x i16> %10, %11
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vandq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = and <8 x i16> %10, %11
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vand_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = and <2 x i32> %10, %11
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vandq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = and <4 x i32> %10, %11
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vand_s64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = and <1 x i64> %10, %11
  store <1 x i64> %12, <1 x i64>* %5, align 8
  %13 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vandq_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = and <2 x i64> %10, %11
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vand_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = and <8 x i8> %10, %11
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vandq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = and <16 x i8> %10, %11
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vand_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = and <4 x i16> %10, %11
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vandq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = and <8 x i16> %10, %11
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vand_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = and <2 x i32> %10, %11
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vandq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = and <4 x i32> %10, %11
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vand_u64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = and <1 x i64> %10, %11
  store <1 x i64> %12, <1 x i64>* %5, align 8
  %13 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vandq_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = and <2 x i64> %10, %11
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vorr_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = or <8 x i8> %10, %11
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vorrq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = or <16 x i8> %10, %11
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vorr_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = or <4 x i16> %10, %11
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vorrq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = or <8 x i16> %10, %11
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vorr_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = or <2 x i32> %10, %11
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vorrq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = or <4 x i32> %10, %11
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vorr_s64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = or <1 x i64> %10, %11
  store <1 x i64> %12, <1 x i64>* %5, align 8
  %13 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vorrq_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = or <2 x i64> %10, %11
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vorr_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = or <8 x i8> %10, %11
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vorrq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = or <16 x i8> %10, %11
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vorr_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = or <4 x i16> %10, %11
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vorrq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = or <8 x i16> %10, %11
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vorr_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = or <2 x i32> %10, %11
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vorrq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = or <4 x i32> %10, %11
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vorr_u64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = or <1 x i64> %10, %11
  store <1 x i64> %12, <1 x i64>* %5, align 8
  %13 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vorrq_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = or <2 x i64> %10, %11
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @veor_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = xor <8 x i8> %10, %11
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @veorq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = xor <16 x i8> %10, %11
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @veor_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = xor <4 x i16> %10, %11
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @veorq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = xor <8 x i16> %10, %11
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @veor_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = xor <2 x i32> %10, %11
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @veorq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = xor <4 x i32> %10, %11
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @veor_s64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = xor <1 x i64> %10, %11
  store <1 x i64> %12, <1 x i64>* %5, align 8
  %13 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @veorq_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = xor <2 x i64> %10, %11
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @veor_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = xor <8 x i8> %10, %11
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @veorq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = xor <16 x i8> %10, %11
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @veor_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = xor <4 x i16> %10, %11
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @veorq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = xor <8 x i16> %10, %11
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @veor_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = xor <2 x i32> %10, %11
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @veorq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = xor <4 x i32> %10, %11
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @veor_u64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = xor <1 x i64> %10, %11
  store <1 x i64> %12, <1 x i64>* %5, align 8
  %13 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @veorq_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = xor <2 x i64> %10, %11
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vbic_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = xor <8 x i8> %11, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %13 = and <8 x i8> %10, %12
  store <8 x i8> %13, <8 x i8>* %5, align 8
  %14 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vbicq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = xor <16 x i8> %11, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %13 = and <16 x i8> %10, %12
  store <16 x i8> %13, <16 x i8>* %5, align 16
  %14 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vbic_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = xor <4 x i16> %11, <i16 -1, i16 -1, i16 -1, i16 -1>
  %13 = and <4 x i16> %10, %12
  store <4 x i16> %13, <4 x i16>* %5, align 8
  %14 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vbicq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = xor <8 x i16> %11, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %13 = and <8 x i16> %10, %12
  store <8 x i16> %13, <8 x i16>* %5, align 16
  %14 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vbic_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = xor <2 x i32> %11, <i32 -1, i32 -1>
  %13 = and <2 x i32> %10, %12
  store <2 x i32> %13, <2 x i32>* %5, align 8
  %14 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vbicq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = xor <4 x i32> %11, <i32 -1, i32 -1, i32 -1, i32 -1>
  %13 = and <4 x i32> %10, %12
  store <4 x i32> %13, <4 x i32>* %5, align 16
  %14 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vbic_s64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = xor <1 x i64> %11, <i64 -1>
  %13 = and <1 x i64> %10, %12
  store <1 x i64> %13, <1 x i64>* %5, align 8
  %14 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vbicq_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = xor <2 x i64> %11, <i64 -1, i64 -1>
  %13 = and <2 x i64> %10, %12
  store <2 x i64> %13, <2 x i64>* %5, align 16
  %14 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vbic_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = xor <8 x i8> %11, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %13 = and <8 x i8> %10, %12
  store <8 x i8> %13, <8 x i8>* %5, align 8
  %14 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vbicq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = xor <16 x i8> %11, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %13 = and <16 x i8> %10, %12
  store <16 x i8> %13, <16 x i8>* %5, align 16
  %14 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vbic_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = xor <4 x i16> %11, <i16 -1, i16 -1, i16 -1, i16 -1>
  %13 = and <4 x i16> %10, %12
  store <4 x i16> %13, <4 x i16>* %5, align 8
  %14 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vbicq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = xor <8 x i16> %11, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %13 = and <8 x i16> %10, %12
  store <8 x i16> %13, <8 x i16>* %5, align 16
  %14 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vbic_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = xor <2 x i32> %11, <i32 -1, i32 -1>
  %13 = and <2 x i32> %10, %12
  store <2 x i32> %13, <2 x i32>* %5, align 8
  %14 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vbicq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = xor <4 x i32> %11, <i32 -1, i32 -1, i32 -1, i32 -1>
  %13 = and <4 x i32> %10, %12
  store <4 x i32> %13, <4 x i32>* %5, align 16
  %14 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vbic_u64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = xor <1 x i64> %11, <i64 -1>
  %13 = and <1 x i64> %10, %12
  store <1 x i64> %13, <1 x i64>* %5, align 8
  %14 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vbicq_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = xor <2 x i64> %11, <i64 -1, i64 -1>
  %13 = and <2 x i64> %10, %12
  store <2 x i64> %13, <2 x i64>* %5, align 16
  %14 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vorn_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = xor <8 x i8> %11, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %13 = or <8 x i8> %10, %12
  store <8 x i8> %13, <8 x i8>* %5, align 8
  %14 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vornq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = xor <16 x i8> %11, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %13 = or <16 x i8> %10, %12
  store <16 x i8> %13, <16 x i8>* %5, align 16
  %14 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vorn_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = xor <4 x i16> %11, <i16 -1, i16 -1, i16 -1, i16 -1>
  %13 = or <4 x i16> %10, %12
  store <4 x i16> %13, <4 x i16>* %5, align 8
  %14 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vornq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = xor <8 x i16> %11, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %13 = or <8 x i16> %10, %12
  store <8 x i16> %13, <8 x i16>* %5, align 16
  %14 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vorn_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = xor <2 x i32> %11, <i32 -1, i32 -1>
  %13 = or <2 x i32> %10, %12
  store <2 x i32> %13, <2 x i32>* %5, align 8
  %14 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vornq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = xor <4 x i32> %11, <i32 -1, i32 -1, i32 -1, i32 -1>
  %13 = or <4 x i32> %10, %12
  store <4 x i32> %13, <4 x i32>* %5, align 16
  %14 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vorn_s64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = xor <1 x i64> %11, <i64 -1>
  %13 = or <1 x i64> %10, %12
  store <1 x i64> %13, <1 x i64>* %5, align 8
  %14 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vornq_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = xor <2 x i64> %11, <i64 -1, i64 -1>
  %13 = or <2 x i64> %10, %12
  store <2 x i64> %13, <2 x i64>* %5, align 16
  %14 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vorn_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = xor <8 x i8> %11, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %13 = or <8 x i8> %10, %12
  store <8 x i8> %13, <8 x i8>* %5, align 8
  %14 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vornq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = xor <16 x i8> %11, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %13 = or <16 x i8> %10, %12
  store <16 x i8> %13, <16 x i8>* %5, align 16
  %14 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vorn_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = xor <4 x i16> %11, <i16 -1, i16 -1, i16 -1, i16 -1>
  %13 = or <4 x i16> %10, %12
  store <4 x i16> %13, <4 x i16>* %5, align 8
  %14 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vornq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = xor <8 x i16> %11, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %13 = or <8 x i16> %10, %12
  store <8 x i16> %13, <8 x i16>* %5, align 16
  %14 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vorn_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = xor <2 x i32> %11, <i32 -1, i32 -1>
  %13 = or <2 x i32> %10, %12
  store <2 x i32> %13, <2 x i32>* %5, align 8
  %14 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vornq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = xor <4 x i32> %11, <i32 -1, i32 -1, i32 -1, i32 -1>
  %13 = or <4 x i32> %10, %12
  store <4 x i32> %13, <4 x i32>* %5, align 16
  %14 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vorn_u64_wrapper(<1 x i64> %0, <1 x i64> %1) #0 {
  %3 = alloca <1 x i64>, align 8
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %6, align 8
  store <1 x i64> %1, <1 x i64>* %7, align 8
  %8 = load <1 x i64>, <1 x i64>* %6, align 8
  %9 = load <1 x i64>, <1 x i64>* %7, align 8
  store <1 x i64> %8, <1 x i64>* %3, align 8
  store <1 x i64> %9, <1 x i64>* %4, align 8
  %10 = load <1 x i64>, <1 x i64>* %3, align 8
  %11 = load <1 x i64>, <1 x i64>* %4, align 8
  %12 = xor <1 x i64> %11, <i64 -1>
  %13 = or <1 x i64> %10, %12
  store <1 x i64> %13, <1 x i64>* %5, align 8
  %14 = load <1 x i64>, <1 x i64>* %5, align 8
  ret <1 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vornq_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = xor <2 x i64> %11, <i64 -1, i64 -1>
  %13 = or <2 x i64> %10, %12
  store <2 x i64> %13, <2 x i64>* %5, align 16
  %14 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vbsl_s8_wrapper(<8 x i8> %0, <8 x i8> %1, <8 x i8> %2) #0 {
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i8>, align 8
  %10 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %8, align 8
  store <8 x i8> %1, <8 x i8>* %9, align 8
  store <8 x i8> %2, <8 x i8>* %10, align 8
  %11 = load <8 x i8>, <8 x i8>* %8, align 8
  %12 = load <8 x i8>, <8 x i8>* %9, align 8
  %13 = load <8 x i8>, <8 x i8>* %10, align 8
  store <8 x i8> %11, <8 x i8>* %4, align 8
  store <8 x i8> %12, <8 x i8>* %5, align 8
  store <8 x i8> %13, <8 x i8>* %6, align 8
  %14 = load <8 x i8>, <8 x i8>* %4, align 8
  %15 = load <8 x i8>, <8 x i8>* %5, align 8
  %16 = load <8 x i8>, <8 x i8>* %6, align 8
  %17 = and <8 x i8> %14, %15
  %18 = xor <8 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %19 = and <8 x i8> %18, %16
  %20 = or <8 x i8> %17, %19
  store <8 x i8> %20, <8 x i8>* %7, align 8
  %21 = load <8 x i8>, <8 x i8>* %7, align 8
  ret <8 x i8> %21
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vbslq_s8_wrapper(<16 x i8> %0, <16 x i8> %1, <16 x i8> %2) #1 {
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  %8 = alloca <16 x i8>, align 16
  %9 = alloca <16 x i8>, align 16
  %10 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %8, align 16
  store <16 x i8> %1, <16 x i8>* %9, align 16
  store <16 x i8> %2, <16 x i8>* %10, align 16
  %11 = load <16 x i8>, <16 x i8>* %8, align 16
  %12 = load <16 x i8>, <16 x i8>* %9, align 16
  %13 = load <16 x i8>, <16 x i8>* %10, align 16
  store <16 x i8> %11, <16 x i8>* %4, align 16
  store <16 x i8> %12, <16 x i8>* %5, align 16
  store <16 x i8> %13, <16 x i8>* %6, align 16
  %14 = load <16 x i8>, <16 x i8>* %4, align 16
  %15 = load <16 x i8>, <16 x i8>* %5, align 16
  %16 = load <16 x i8>, <16 x i8>* %6, align 16
  %17 = and <16 x i8> %14, %15
  %18 = xor <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %19 = and <16 x i8> %18, %16
  %20 = or <16 x i8> %17, %19
  store <16 x i8> %20, <16 x i8>* %7, align 16
  %21 = load <16 x i8>, <16 x i8>* %7, align 16
  ret <16 x i8> %21
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vbsl_s16_wrapper(<4 x i16> %0, <4 x i16> %1, <4 x i16> %2) #0 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %8, align 8
  store <4 x i16> %1, <4 x i16>* %9, align 8
  store <4 x i16> %2, <4 x i16>* %10, align 8
  %11 = load <4 x i16>, <4 x i16>* %8, align 8
  %12 = load <4 x i16>, <4 x i16>* %9, align 8
  %13 = load <4 x i16>, <4 x i16>* %10, align 8
  store <4 x i16> %11, <4 x i16>* %4, align 8
  store <4 x i16> %12, <4 x i16>* %5, align 8
  store <4 x i16> %13, <4 x i16>* %6, align 8
  %14 = load <4 x i16>, <4 x i16>* %4, align 8
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  %17 = bitcast <4 x i16> %16 to <8 x i8>
  %18 = load <4 x i16>, <4 x i16>* %6, align 8
  %19 = bitcast <4 x i16> %18 to <8 x i8>
  %20 = and <4 x i16> %14, %16
  %21 = xor <4 x i16> %14, <i16 -1, i16 -1, i16 -1, i16 -1>
  %22 = and <4 x i16> %21, %18
  %23 = or <4 x i16> %20, %22
  store <4 x i16> %23, <4 x i16>* %7, align 8
  %24 = load <4 x i16>, <4 x i16>* %7, align 8
  ret <4 x i16> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vbslq_s16_wrapper(<8 x i16> %0, <8 x i16> %1, <8 x i16> %2) #1 {
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %8, align 16
  store <8 x i16> %1, <8 x i16>* %9, align 16
  store <8 x i16> %2, <8 x i16>* %10, align 16
  %11 = load <8 x i16>, <8 x i16>* %8, align 16
  %12 = load <8 x i16>, <8 x i16>* %9, align 16
  %13 = load <8 x i16>, <8 x i16>* %10, align 16
  store <8 x i16> %11, <8 x i16>* %4, align 16
  store <8 x i16> %12, <8 x i16>* %5, align 16
  store <8 x i16> %13, <8 x i16>* %6, align 16
  %14 = load <8 x i16>, <8 x i16>* %4, align 16
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  %17 = bitcast <8 x i16> %16 to <16 x i8>
  %18 = load <8 x i16>, <8 x i16>* %6, align 16
  %19 = bitcast <8 x i16> %18 to <16 x i8>
  %20 = and <8 x i16> %14, %16
  %21 = xor <8 x i16> %14, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %22 = and <8 x i16> %21, %18
  %23 = or <8 x i16> %20, %22
  store <8 x i16> %23, <8 x i16>* %7, align 16
  %24 = load <8 x i16>, <8 x i16>* %7, align 16
  ret <8 x i16> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vbsl_s32_wrapper(<2 x i32> %0, <2 x i32> %1, <2 x i32> %2) #0 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %8, align 8
  store <2 x i32> %1, <2 x i32>* %9, align 8
  store <2 x i32> %2, <2 x i32>* %10, align 8
  %11 = load <2 x i32>, <2 x i32>* %8, align 8
  %12 = load <2 x i32>, <2 x i32>* %9, align 8
  %13 = load <2 x i32>, <2 x i32>* %10, align 8
  store <2 x i32> %11, <2 x i32>* %4, align 8
  store <2 x i32> %12, <2 x i32>* %5, align 8
  store <2 x i32> %13, <2 x i32>* %6, align 8
  %14 = load <2 x i32>, <2 x i32>* %4, align 8
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  %17 = bitcast <2 x i32> %16 to <8 x i8>
  %18 = load <2 x i32>, <2 x i32>* %6, align 8
  %19 = bitcast <2 x i32> %18 to <8 x i8>
  %20 = and <2 x i32> %14, %16
  %21 = xor <2 x i32> %14, <i32 -1, i32 -1>
  %22 = and <2 x i32> %21, %18
  %23 = or <2 x i32> %20, %22
  store <2 x i32> %23, <2 x i32>* %7, align 8
  %24 = load <2 x i32>, <2 x i32>* %7, align 8
  ret <2 x i32> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vbslq_s32_wrapper(<4 x i32> %0, <4 x i32> %1, <4 x i32> %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %8, align 16
  store <4 x i32> %1, <4 x i32>* %9, align 16
  store <4 x i32> %2, <4 x i32>* %10, align 16
  %11 = load <4 x i32>, <4 x i32>* %8, align 16
  %12 = load <4 x i32>, <4 x i32>* %9, align 16
  %13 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %11, <4 x i32>* %4, align 16
  store <4 x i32> %12, <4 x i32>* %5, align 16
  store <4 x i32> %13, <4 x i32>* %6, align 16
  %14 = load <4 x i32>, <4 x i32>* %4, align 16
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  %17 = bitcast <4 x i32> %16 to <16 x i8>
  %18 = load <4 x i32>, <4 x i32>* %6, align 16
  %19 = bitcast <4 x i32> %18 to <16 x i8>
  %20 = and <4 x i32> %14, %16
  %21 = xor <4 x i32> %14, <i32 -1, i32 -1, i32 -1, i32 -1>
  %22 = and <4 x i32> %21, %18
  %23 = or <4 x i32> %20, %22
  store <4 x i32> %23, <4 x i32>* %7, align 16
  %24 = load <4 x i32>, <4 x i32>* %7, align 16
  ret <4 x i32> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vbsl_s64_wrapper(<1 x i64> %0, <1 x i64> %1, <1 x i64> %2) #0 {
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  %8 = alloca <1 x i64>, align 8
  %9 = alloca <1 x i64>, align 8
  %10 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %8, align 8
  store <1 x i64> %1, <1 x i64>* %9, align 8
  store <1 x i64> %2, <1 x i64>* %10, align 8
  %11 = load <1 x i64>, <1 x i64>* %8, align 8
  %12 = load <1 x i64>, <1 x i64>* %9, align 8
  %13 = load <1 x i64>, <1 x i64>* %10, align 8
  store <1 x i64> %11, <1 x i64>* %4, align 8
  store <1 x i64> %12, <1 x i64>* %5, align 8
  store <1 x i64> %13, <1 x i64>* %6, align 8
  %14 = load <1 x i64>, <1 x i64>* %4, align 8
  %15 = bitcast <1 x i64> %14 to <8 x i8>
  %16 = load <1 x i64>, <1 x i64>* %5, align 8
  %17 = bitcast <1 x i64> %16 to <8 x i8>
  %18 = load <1 x i64>, <1 x i64>* %6, align 8
  %19 = bitcast <1 x i64> %18 to <8 x i8>
  %20 = and <1 x i64> %14, %16
  %21 = xor <1 x i64> %14, <i64 -1>
  %22 = and <1 x i64> %21, %18
  %23 = or <1 x i64> %20, %22
  store <1 x i64> %23, <1 x i64>* %7, align 8
  %24 = load <1 x i64>, <1 x i64>* %7, align 8
  ret <1 x i64> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vbslq_s64_wrapper(<2 x i64> %0, <2 x i64> %1, <2 x i64> %2) #1 {
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %8, align 16
  store <2 x i64> %1, <2 x i64>* %9, align 16
  store <2 x i64> %2, <2 x i64>* %10, align 16
  %11 = load <2 x i64>, <2 x i64>* %8, align 16
  %12 = load <2 x i64>, <2 x i64>* %9, align 16
  %13 = load <2 x i64>, <2 x i64>* %10, align 16
  store <2 x i64> %11, <2 x i64>* %4, align 16
  store <2 x i64> %12, <2 x i64>* %5, align 16
  store <2 x i64> %13, <2 x i64>* %6, align 16
  %14 = load <2 x i64>, <2 x i64>* %4, align 16
  %15 = bitcast <2 x i64> %14 to <16 x i8>
  %16 = load <2 x i64>, <2 x i64>* %5, align 16
  %17 = bitcast <2 x i64> %16 to <16 x i8>
  %18 = load <2 x i64>, <2 x i64>* %6, align 16
  %19 = bitcast <2 x i64> %18 to <16 x i8>
  %20 = and <2 x i64> %14, %16
  %21 = xor <2 x i64> %14, <i64 -1, i64 -1>
  %22 = and <2 x i64> %21, %18
  %23 = or <2 x i64> %20, %22
  store <2 x i64> %23, <2 x i64>* %7, align 16
  %24 = load <2 x i64>, <2 x i64>* %7, align 16
  ret <2 x i64> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vbsl_u8_wrapper(<8 x i8> %0, <8 x i8> %1, <8 x i8> %2) #0 {
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  %8 = alloca <8 x i8>, align 8
  %9 = alloca <8 x i8>, align 8
  %10 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %8, align 8
  store <8 x i8> %1, <8 x i8>* %9, align 8
  store <8 x i8> %2, <8 x i8>* %10, align 8
  %11 = load <8 x i8>, <8 x i8>* %8, align 8
  %12 = load <8 x i8>, <8 x i8>* %9, align 8
  %13 = load <8 x i8>, <8 x i8>* %10, align 8
  store <8 x i8> %11, <8 x i8>* %4, align 8
  store <8 x i8> %12, <8 x i8>* %5, align 8
  store <8 x i8> %13, <8 x i8>* %6, align 8
  %14 = load <8 x i8>, <8 x i8>* %4, align 8
  %15 = load <8 x i8>, <8 x i8>* %5, align 8
  %16 = load <8 x i8>, <8 x i8>* %6, align 8
  %17 = and <8 x i8> %14, %15
  %18 = xor <8 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %19 = and <8 x i8> %18, %16
  %20 = or <8 x i8> %17, %19
  store <8 x i8> %20, <8 x i8>* %7, align 8
  %21 = load <8 x i8>, <8 x i8>* %7, align 8
  ret <8 x i8> %21
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vbslq_u8_wrapper(<16 x i8> %0, <16 x i8> %1, <16 x i8> %2) #1 {
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  %8 = alloca <16 x i8>, align 16
  %9 = alloca <16 x i8>, align 16
  %10 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %8, align 16
  store <16 x i8> %1, <16 x i8>* %9, align 16
  store <16 x i8> %2, <16 x i8>* %10, align 16
  %11 = load <16 x i8>, <16 x i8>* %8, align 16
  %12 = load <16 x i8>, <16 x i8>* %9, align 16
  %13 = load <16 x i8>, <16 x i8>* %10, align 16
  store <16 x i8> %11, <16 x i8>* %4, align 16
  store <16 x i8> %12, <16 x i8>* %5, align 16
  store <16 x i8> %13, <16 x i8>* %6, align 16
  %14 = load <16 x i8>, <16 x i8>* %4, align 16
  %15 = load <16 x i8>, <16 x i8>* %5, align 16
  %16 = load <16 x i8>, <16 x i8>* %6, align 16
  %17 = and <16 x i8> %14, %15
  %18 = xor <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %19 = and <16 x i8> %18, %16
  %20 = or <16 x i8> %17, %19
  store <16 x i8> %20, <16 x i8>* %7, align 16
  %21 = load <16 x i8>, <16 x i8>* %7, align 16
  ret <16 x i8> %21
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vbsl_u16_wrapper(<4 x i16> %0, <4 x i16> %1, <4 x i16> %2) #0 {
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  %8 = alloca <4 x i16>, align 8
  %9 = alloca <4 x i16>, align 8
  %10 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %8, align 8
  store <4 x i16> %1, <4 x i16>* %9, align 8
  store <4 x i16> %2, <4 x i16>* %10, align 8
  %11 = load <4 x i16>, <4 x i16>* %8, align 8
  %12 = load <4 x i16>, <4 x i16>* %9, align 8
  %13 = load <4 x i16>, <4 x i16>* %10, align 8
  store <4 x i16> %11, <4 x i16>* %4, align 8
  store <4 x i16> %12, <4 x i16>* %5, align 8
  store <4 x i16> %13, <4 x i16>* %6, align 8
  %14 = load <4 x i16>, <4 x i16>* %4, align 8
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  %17 = bitcast <4 x i16> %16 to <8 x i8>
  %18 = load <4 x i16>, <4 x i16>* %6, align 8
  %19 = bitcast <4 x i16> %18 to <8 x i8>
  %20 = and <4 x i16> %14, %16
  %21 = xor <4 x i16> %14, <i16 -1, i16 -1, i16 -1, i16 -1>
  %22 = and <4 x i16> %21, %18
  %23 = or <4 x i16> %20, %22
  store <4 x i16> %23, <4 x i16>* %7, align 8
  %24 = load <4 x i16>, <4 x i16>* %7, align 8
  ret <4 x i16> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vbslq_u16_wrapper(<8 x i16> %0, <8 x i16> %1, <8 x i16> %2) #1 {
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  %8 = alloca <8 x i16>, align 16
  %9 = alloca <8 x i16>, align 16
  %10 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %8, align 16
  store <8 x i16> %1, <8 x i16>* %9, align 16
  store <8 x i16> %2, <8 x i16>* %10, align 16
  %11 = load <8 x i16>, <8 x i16>* %8, align 16
  %12 = load <8 x i16>, <8 x i16>* %9, align 16
  %13 = load <8 x i16>, <8 x i16>* %10, align 16
  store <8 x i16> %11, <8 x i16>* %4, align 16
  store <8 x i16> %12, <8 x i16>* %5, align 16
  store <8 x i16> %13, <8 x i16>* %6, align 16
  %14 = load <8 x i16>, <8 x i16>* %4, align 16
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  %17 = bitcast <8 x i16> %16 to <16 x i8>
  %18 = load <8 x i16>, <8 x i16>* %6, align 16
  %19 = bitcast <8 x i16> %18 to <16 x i8>
  %20 = and <8 x i16> %14, %16
  %21 = xor <8 x i16> %14, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %22 = and <8 x i16> %21, %18
  %23 = or <8 x i16> %20, %22
  store <8 x i16> %23, <8 x i16>* %7, align 16
  %24 = load <8 x i16>, <8 x i16>* %7, align 16
  ret <8 x i16> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vbsl_u32_wrapper(<2 x i32> %0, <2 x i32> %1, <2 x i32> %2) #0 {
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  %8 = alloca <2 x i32>, align 8
  %9 = alloca <2 x i32>, align 8
  %10 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %8, align 8
  store <2 x i32> %1, <2 x i32>* %9, align 8
  store <2 x i32> %2, <2 x i32>* %10, align 8
  %11 = load <2 x i32>, <2 x i32>* %8, align 8
  %12 = load <2 x i32>, <2 x i32>* %9, align 8
  %13 = load <2 x i32>, <2 x i32>* %10, align 8
  store <2 x i32> %11, <2 x i32>* %4, align 8
  store <2 x i32> %12, <2 x i32>* %5, align 8
  store <2 x i32> %13, <2 x i32>* %6, align 8
  %14 = load <2 x i32>, <2 x i32>* %4, align 8
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  %17 = bitcast <2 x i32> %16 to <8 x i8>
  %18 = load <2 x i32>, <2 x i32>* %6, align 8
  %19 = bitcast <2 x i32> %18 to <8 x i8>
  %20 = and <2 x i32> %14, %16
  %21 = xor <2 x i32> %14, <i32 -1, i32 -1>
  %22 = and <2 x i32> %21, %18
  %23 = or <2 x i32> %20, %22
  store <2 x i32> %23, <2 x i32>* %7, align 8
  %24 = load <2 x i32>, <2 x i32>* %7, align 8
  ret <2 x i32> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vbslq_u32_wrapper(<4 x i32> %0, <4 x i32> %1, <4 x i32> %2) #1 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  %8 = alloca <4 x i32>, align 16
  %9 = alloca <4 x i32>, align 16
  %10 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %8, align 16
  store <4 x i32> %1, <4 x i32>* %9, align 16
  store <4 x i32> %2, <4 x i32>* %10, align 16
  %11 = load <4 x i32>, <4 x i32>* %8, align 16
  %12 = load <4 x i32>, <4 x i32>* %9, align 16
  %13 = load <4 x i32>, <4 x i32>* %10, align 16
  store <4 x i32> %11, <4 x i32>* %4, align 16
  store <4 x i32> %12, <4 x i32>* %5, align 16
  store <4 x i32> %13, <4 x i32>* %6, align 16
  %14 = load <4 x i32>, <4 x i32>* %4, align 16
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  %17 = bitcast <4 x i32> %16 to <16 x i8>
  %18 = load <4 x i32>, <4 x i32>* %6, align 16
  %19 = bitcast <4 x i32> %18 to <16 x i8>
  %20 = and <4 x i32> %14, %16
  %21 = xor <4 x i32> %14, <i32 -1, i32 -1, i32 -1, i32 -1>
  %22 = and <4 x i32> %21, %18
  %23 = or <4 x i32> %20, %22
  store <4 x i32> %23, <4 x i32>* %7, align 16
  %24 = load <4 x i32>, <4 x i32>* %7, align 16
  ret <4 x i32> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <1 x i64> @vbsl_u64_wrapper(<1 x i64> %0, <1 x i64> %1, <1 x i64> %2) #0 {
  %4 = alloca <1 x i64>, align 8
  %5 = alloca <1 x i64>, align 8
  %6 = alloca <1 x i64>, align 8
  %7 = alloca <1 x i64>, align 8
  %8 = alloca <1 x i64>, align 8
  %9 = alloca <1 x i64>, align 8
  %10 = alloca <1 x i64>, align 8
  store <1 x i64> %0, <1 x i64>* %8, align 8
  store <1 x i64> %1, <1 x i64>* %9, align 8
  store <1 x i64> %2, <1 x i64>* %10, align 8
  %11 = load <1 x i64>, <1 x i64>* %8, align 8
  %12 = load <1 x i64>, <1 x i64>* %9, align 8
  %13 = load <1 x i64>, <1 x i64>* %10, align 8
  store <1 x i64> %11, <1 x i64>* %4, align 8
  store <1 x i64> %12, <1 x i64>* %5, align 8
  store <1 x i64> %13, <1 x i64>* %6, align 8
  %14 = load <1 x i64>, <1 x i64>* %4, align 8
  %15 = bitcast <1 x i64> %14 to <8 x i8>
  %16 = load <1 x i64>, <1 x i64>* %5, align 8
  %17 = bitcast <1 x i64> %16 to <8 x i8>
  %18 = load <1 x i64>, <1 x i64>* %6, align 8
  %19 = bitcast <1 x i64> %18 to <8 x i8>
  %20 = and <1 x i64> %14, %16
  %21 = xor <1 x i64> %14, <i64 -1>
  %22 = and <1 x i64> %21, %18
  %23 = or <1 x i64> %20, %22
  store <1 x i64> %23, <1 x i64>* %7, align 8
  %24 = load <1 x i64>, <1 x i64>* %7, align 8
  ret <1 x i64> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vbslq_u64_wrapper(<2 x i64> %0, <2 x i64> %1, <2 x i64> %2) #1 {
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %8, align 16
  store <2 x i64> %1, <2 x i64>* %9, align 16
  store <2 x i64> %2, <2 x i64>* %10, align 16
  %11 = load <2 x i64>, <2 x i64>* %8, align 16
  %12 = load <2 x i64>, <2 x i64>* %9, align 16
  %13 = load <2 x i64>, <2 x i64>* %10, align 16
  store <2 x i64> %11, <2 x i64>* %4, align 16
  store <2 x i64> %12, <2 x i64>* %5, align 16
  store <2 x i64> %13, <2 x i64>* %6, align 16
  %14 = load <2 x i64>, <2 x i64>* %4, align 16
  %15 = bitcast <2 x i64> %14 to <16 x i8>
  %16 = load <2 x i64>, <2 x i64>* %5, align 16
  %17 = bitcast <2 x i64> %16 to <16 x i8>
  %18 = load <2 x i64>, <2 x i64>* %6, align 16
  %19 = bitcast <2 x i64> %18 to <16 x i8>
  %20 = and <2 x i64> %14, %16
  %21 = xor <2 x i64> %14, <i64 -1, i64 -1>
  %22 = and <2 x i64> %21, %18
  %23 = or <2 x i64> %20, %22
  store <2 x i64> %23, <2 x i64>* %7, align 16
  %24 = load <2 x i64>, <2 x i64>* %7, align 16
  ret <2 x i64> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vdup_n_s8_wrapper(i8 signext %0) #0 {
  %2 = alloca i8, align 1
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca i8, align 1
  store i8 %0, i8* %5, align 1
  %6 = load i8, i8* %5, align 1
  store i8 %6, i8* %2, align 1
  %7 = load i8, i8* %2, align 1
  %8 = insertelement <8 x i8> undef, i8 %7, i32 0
  %9 = load i8, i8* %2, align 1
  %10 = insertelement <8 x i8> %8, i8 %9, i32 1
  %11 = load i8, i8* %2, align 1
  %12 = insertelement <8 x i8> %10, i8 %11, i32 2
  %13 = load i8, i8* %2, align 1
  %14 = insertelement <8 x i8> %12, i8 %13, i32 3
  %15 = load i8, i8* %2, align 1
  %16 = insertelement <8 x i8> %14, i8 %15, i32 4
  %17 = load i8, i8* %2, align 1
  %18 = insertelement <8 x i8> %16, i8 %17, i32 5
  %19 = load i8, i8* %2, align 1
  %20 = insertelement <8 x i8> %18, i8 %19, i32 6
  %21 = load i8, i8* %2, align 1
  %22 = insertelement <8 x i8> %20, i8 %21, i32 7
  store <8 x i8> %22, <8 x i8>* %4, align 8
  %23 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %23, <8 x i8>* %3, align 8
  %24 = load <8 x i8>, <8 x i8>* %3, align 8
  ret <8 x i8> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vdupq_n_s8_wrapper(i8 signext %0) #1 {
  %2 = alloca i8, align 1
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca i8, align 1
  store i8 %0, i8* %5, align 1
  %6 = load i8, i8* %5, align 1
  store i8 %6, i8* %2, align 1
  %7 = load i8, i8* %2, align 1
  %8 = insertelement <16 x i8> undef, i8 %7, i32 0
  %9 = load i8, i8* %2, align 1
  %10 = insertelement <16 x i8> %8, i8 %9, i32 1
  %11 = load i8, i8* %2, align 1
  %12 = insertelement <16 x i8> %10, i8 %11, i32 2
  %13 = load i8, i8* %2, align 1
  %14 = insertelement <16 x i8> %12, i8 %13, i32 3
  %15 = load i8, i8* %2, align 1
  %16 = insertelement <16 x i8> %14, i8 %15, i32 4
  %17 = load i8, i8* %2, align 1
  %18 = insertelement <16 x i8> %16, i8 %17, i32 5
  %19 = load i8, i8* %2, align 1
  %20 = insertelement <16 x i8> %18, i8 %19, i32 6
  %21 = load i8, i8* %2, align 1
  %22 = insertelement <16 x i8> %20, i8 %21, i32 7
  %23 = load i8, i8* %2, align 1
  %24 = insertelement <16 x i8> %22, i8 %23, i32 8
  %25 = load i8, i8* %2, align 1
  %26 = insertelement <16 x i8> %24, i8 %25, i32 9
  %27 = load i8, i8* %2, align 1
  %28 = insertelement <16 x i8> %26, i8 %27, i32 10
  %29 = load i8, i8* %2, align 1
  %30 = insertelement <16 x i8> %28, i8 %29, i32 11
  %31 = load i8, i8* %2, align 1
  %32 = insertelement <16 x i8> %30, i8 %31, i32 12
  %33 = load i8, i8* %2, align 1
  %34 = insertelement <16 x i8> %32, i8 %33, i32 13
  %35 = load i8, i8* %2, align 1
  %36 = insertelement <16 x i8> %34, i8 %35, i32 14
  %37 = load i8, i8* %2, align 1
  %38 = insertelement <16 x i8> %36, i8 %37, i32 15
  store <16 x i8> %38, <16 x i8>* %4, align 16
  %39 = load <16 x i8>, <16 x i8>* %4, align 16
  store <16 x i8> %39, <16 x i8>* %3, align 16
  %40 = load <16 x i8>, <16 x i8>* %3, align 16
  ret <16 x i8> %40
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vdup_n_s16_wrapper(i16 signext %0) #0 {
  %2 = alloca i16, align 2
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca i16, align 2
  store i16 %0, i16* %5, align 2
  %6 = load i16, i16* %5, align 2
  store i16 %6, i16* %2, align 2
  %7 = load i16, i16* %2, align 2
  %8 = insertelement <4 x i16> undef, i16 %7, i32 0
  %9 = load i16, i16* %2, align 2
  %10 = insertelement <4 x i16> %8, i16 %9, i32 1
  %11 = load i16, i16* %2, align 2
  %12 = insertelement <4 x i16> %10, i16 %11, i32 2
  %13 = load i16, i16* %2, align 2
  %14 = insertelement <4 x i16> %12, i16 %13, i32 3
  store <4 x i16> %14, <4 x i16>* %4, align 8
  %15 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %15, <4 x i16>* %3, align 8
  %16 = load <4 x i16>, <4 x i16>* %3, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vdupq_n_s16_wrapper(i16 signext %0) #1 {
  %2 = alloca i16, align 2
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca i16, align 2
  store i16 %0, i16* %5, align 2
  %6 = load i16, i16* %5, align 2
  store i16 %6, i16* %2, align 2
  %7 = load i16, i16* %2, align 2
  %8 = insertelement <8 x i16> undef, i16 %7, i32 0
  %9 = load i16, i16* %2, align 2
  %10 = insertelement <8 x i16> %8, i16 %9, i32 1
  %11 = load i16, i16* %2, align 2
  %12 = insertelement <8 x i16> %10, i16 %11, i32 2
  %13 = load i16, i16* %2, align 2
  %14 = insertelement <8 x i16> %12, i16 %13, i32 3
  %15 = load i16, i16* %2, align 2
  %16 = insertelement <8 x i16> %14, i16 %15, i32 4
  %17 = load i16, i16* %2, align 2
  %18 = insertelement <8 x i16> %16, i16 %17, i32 5
  %19 = load i16, i16* %2, align 2
  %20 = insertelement <8 x i16> %18, i16 %19, i32 6
  %21 = load i16, i16* %2, align 2
  %22 = insertelement <8 x i16> %20, i16 %21, i32 7
  store <8 x i16> %22, <8 x i16>* %4, align 16
  %23 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %23, <8 x i16>* %3, align 16
  %24 = load <8 x i16>, <8 x i16>* %3, align 16
  ret <8 x i16> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vdup_n_s32_wrapper(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = insertelement <2 x i32> undef, i32 %7, i32 0
  %9 = load i32, i32* %2, align 4
  %10 = insertelement <2 x i32> %8, i32 %9, i32 1
  store <2 x i32> %10, <2 x i32>* %4, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %11, <2 x i32>* %3, align 8
  %12 = load <2 x i32>, <2 x i32>* %3, align 8
  ret <2 x i32> %12
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vdupq_n_s32_wrapper(i32 %0) #1 {
  %2 = alloca i32, align 4
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = load i32, i32* %2, align 4
  %10 = insertelement <4 x i32> %8, i32 %9, i32 1
  %11 = load i32, i32* %2, align 4
  %12 = insertelement <4 x i32> %10, i32 %11, i32 2
  %13 = load i32, i32* %2, align 4
  %14 = insertelement <4 x i32> %12, i32 %13, i32 3
  store <4 x i32> %14, <4 x i32>* %4, align 16
  %15 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %15, <4 x i32>* %3, align 16
  %16 = load <4 x i32>, <4 x i32>* %3, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vdupq_n_s64_wrapper(i64 %0) #1 {
  %2 = alloca i64, align 8
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca i64, align 8
  store i64 %0, i64* %5, align 8
  %6 = load i64, i64* %5, align 8
  store i64 %6, i64* %2, align 8
  %7 = load i64, i64* %2, align 8
  %8 = insertelement <2 x i64> undef, i64 %7, i32 0
  %9 = load i64, i64* %2, align 8
  %10 = insertelement <2 x i64> %8, i64 %9, i32 1
  store <2 x i64> %10, <2 x i64>* %4, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  store <2 x i64> %11, <2 x i64>* %3, align 16
  %12 = load <2 x i64>, <2 x i64>* %3, align 16
  ret <2 x i64> %12
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vdup_n_u8_wrapper(i8 zeroext %0) #0 {
  %2 = alloca i8, align 1
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca i8, align 1
  store i8 %0, i8* %5, align 1
  %6 = load i8, i8* %5, align 1
  store i8 %6, i8* %2, align 1
  %7 = load i8, i8* %2, align 1
  %8 = insertelement <8 x i8> undef, i8 %7, i32 0
  %9 = load i8, i8* %2, align 1
  %10 = insertelement <8 x i8> %8, i8 %9, i32 1
  %11 = load i8, i8* %2, align 1
  %12 = insertelement <8 x i8> %10, i8 %11, i32 2
  %13 = load i8, i8* %2, align 1
  %14 = insertelement <8 x i8> %12, i8 %13, i32 3
  %15 = load i8, i8* %2, align 1
  %16 = insertelement <8 x i8> %14, i8 %15, i32 4
  %17 = load i8, i8* %2, align 1
  %18 = insertelement <8 x i8> %16, i8 %17, i32 5
  %19 = load i8, i8* %2, align 1
  %20 = insertelement <8 x i8> %18, i8 %19, i32 6
  %21 = load i8, i8* %2, align 1
  %22 = insertelement <8 x i8> %20, i8 %21, i32 7
  store <8 x i8> %22, <8 x i8>* %4, align 8
  %23 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %23, <8 x i8>* %3, align 8
  %24 = load <8 x i8>, <8 x i8>* %3, align 8
  ret <8 x i8> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vdupq_n_u8_wrapper(i8 zeroext %0) #1 {
  %2 = alloca i8, align 1
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca i8, align 1
  store i8 %0, i8* %5, align 1
  %6 = load i8, i8* %5, align 1
  store i8 %6, i8* %2, align 1
  %7 = load i8, i8* %2, align 1
  %8 = insertelement <16 x i8> undef, i8 %7, i32 0
  %9 = load i8, i8* %2, align 1
  %10 = insertelement <16 x i8> %8, i8 %9, i32 1
  %11 = load i8, i8* %2, align 1
  %12 = insertelement <16 x i8> %10, i8 %11, i32 2
  %13 = load i8, i8* %2, align 1
  %14 = insertelement <16 x i8> %12, i8 %13, i32 3
  %15 = load i8, i8* %2, align 1
  %16 = insertelement <16 x i8> %14, i8 %15, i32 4
  %17 = load i8, i8* %2, align 1
  %18 = insertelement <16 x i8> %16, i8 %17, i32 5
  %19 = load i8, i8* %2, align 1
  %20 = insertelement <16 x i8> %18, i8 %19, i32 6
  %21 = load i8, i8* %2, align 1
  %22 = insertelement <16 x i8> %20, i8 %21, i32 7
  %23 = load i8, i8* %2, align 1
  %24 = insertelement <16 x i8> %22, i8 %23, i32 8
  %25 = load i8, i8* %2, align 1
  %26 = insertelement <16 x i8> %24, i8 %25, i32 9
  %27 = load i8, i8* %2, align 1
  %28 = insertelement <16 x i8> %26, i8 %27, i32 10
  %29 = load i8, i8* %2, align 1
  %30 = insertelement <16 x i8> %28, i8 %29, i32 11
  %31 = load i8, i8* %2, align 1
  %32 = insertelement <16 x i8> %30, i8 %31, i32 12
  %33 = load i8, i8* %2, align 1
  %34 = insertelement <16 x i8> %32, i8 %33, i32 13
  %35 = load i8, i8* %2, align 1
  %36 = insertelement <16 x i8> %34, i8 %35, i32 14
  %37 = load i8, i8* %2, align 1
  %38 = insertelement <16 x i8> %36, i8 %37, i32 15
  store <16 x i8> %38, <16 x i8>* %4, align 16
  %39 = load <16 x i8>, <16 x i8>* %4, align 16
  store <16 x i8> %39, <16 x i8>* %3, align 16
  %40 = load <16 x i8>, <16 x i8>* %3, align 16
  ret <16 x i8> %40
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vdup_n_u16_wrapper(i16 zeroext %0) #0 {
  %2 = alloca i16, align 2
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca i16, align 2
  store i16 %0, i16* %5, align 2
  %6 = load i16, i16* %5, align 2
  store i16 %6, i16* %2, align 2
  %7 = load i16, i16* %2, align 2
  %8 = insertelement <4 x i16> undef, i16 %7, i32 0
  %9 = load i16, i16* %2, align 2
  %10 = insertelement <4 x i16> %8, i16 %9, i32 1
  %11 = load i16, i16* %2, align 2
  %12 = insertelement <4 x i16> %10, i16 %11, i32 2
  %13 = load i16, i16* %2, align 2
  %14 = insertelement <4 x i16> %12, i16 %13, i32 3
  store <4 x i16> %14, <4 x i16>* %4, align 8
  %15 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %15, <4 x i16>* %3, align 8
  %16 = load <4 x i16>, <4 x i16>* %3, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vdupq_n_u16_wrapper(i16 zeroext %0) #1 {
  %2 = alloca i16, align 2
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca i16, align 2
  store i16 %0, i16* %5, align 2
  %6 = load i16, i16* %5, align 2
  store i16 %6, i16* %2, align 2
  %7 = load i16, i16* %2, align 2
  %8 = insertelement <8 x i16> undef, i16 %7, i32 0
  %9 = load i16, i16* %2, align 2
  %10 = insertelement <8 x i16> %8, i16 %9, i32 1
  %11 = load i16, i16* %2, align 2
  %12 = insertelement <8 x i16> %10, i16 %11, i32 2
  %13 = load i16, i16* %2, align 2
  %14 = insertelement <8 x i16> %12, i16 %13, i32 3
  %15 = load i16, i16* %2, align 2
  %16 = insertelement <8 x i16> %14, i16 %15, i32 4
  %17 = load i16, i16* %2, align 2
  %18 = insertelement <8 x i16> %16, i16 %17, i32 5
  %19 = load i16, i16* %2, align 2
  %20 = insertelement <8 x i16> %18, i16 %19, i32 6
  %21 = load i16, i16* %2, align 2
  %22 = insertelement <8 x i16> %20, i16 %21, i32 7
  store <8 x i16> %22, <8 x i16>* %4, align 16
  %23 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %23, <8 x i16>* %3, align 16
  %24 = load <8 x i16>, <8 x i16>* %3, align 16
  ret <8 x i16> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vdup_n_u32_wrapper(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = insertelement <2 x i32> undef, i32 %7, i32 0
  %9 = load i32, i32* %2, align 4
  %10 = insertelement <2 x i32> %8, i32 %9, i32 1
  store <2 x i32> %10, <2 x i32>* %4, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %11, <2 x i32>* %3, align 8
  %12 = load <2 x i32>, <2 x i32>* %3, align 8
  ret <2 x i32> %12
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vdupq_n_u32_wrapper(i32 %0) #1 {
  %2 = alloca i32, align 4
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = load i32, i32* %2, align 4
  %10 = insertelement <4 x i32> %8, i32 %9, i32 1
  %11 = load i32, i32* %2, align 4
  %12 = insertelement <4 x i32> %10, i32 %11, i32 2
  %13 = load i32, i32* %2, align 4
  %14 = insertelement <4 x i32> %12, i32 %13, i32 3
  store <4 x i32> %14, <4 x i32>* %4, align 16
  %15 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %15, <4 x i32>* %3, align 16
  %16 = load <4 x i32>, <4 x i32>* %3, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vdupq_n_u64_wrapper(i64 %0) #1 {
  %2 = alloca i64, align 8
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca i64, align 8
  store i64 %0, i64* %5, align 8
  %6 = load i64, i64* %5, align 8
  store i64 %6, i64* %2, align 8
  %7 = load i64, i64* %2, align 8
  %8 = insertelement <2 x i64> undef, i64 %7, i32 0
  %9 = load i64, i64* %2, align 8
  %10 = insertelement <2 x i64> %8, i64 %9, i32 1
  store <2 x i64> %10, <2 x i64>* %4, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  store <2 x i64> %11, <2 x i64>* %3, align 16
  %12 = load <2 x i64>, <2 x i64>* %3, align 16
  ret <2 x i64> %12
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vmov_n_s8_wrapper(i8 signext %0) #0 {
  %2 = alloca i8, align 1
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca i8, align 1
  store i8 %0, i8* %5, align 1
  %6 = load i8, i8* %5, align 1
  store i8 %6, i8* %2, align 1
  %7 = load i8, i8* %2, align 1
  %8 = insertelement <8 x i8> undef, i8 %7, i32 0
  %9 = load i8, i8* %2, align 1
  %10 = insertelement <8 x i8> %8, i8 %9, i32 1
  %11 = load i8, i8* %2, align 1
  %12 = insertelement <8 x i8> %10, i8 %11, i32 2
  %13 = load i8, i8* %2, align 1
  %14 = insertelement <8 x i8> %12, i8 %13, i32 3
  %15 = load i8, i8* %2, align 1
  %16 = insertelement <8 x i8> %14, i8 %15, i32 4
  %17 = load i8, i8* %2, align 1
  %18 = insertelement <8 x i8> %16, i8 %17, i32 5
  %19 = load i8, i8* %2, align 1
  %20 = insertelement <8 x i8> %18, i8 %19, i32 6
  %21 = load i8, i8* %2, align 1
  %22 = insertelement <8 x i8> %20, i8 %21, i32 7
  store <8 x i8> %22, <8 x i8>* %4, align 8
  %23 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %23, <8 x i8>* %3, align 8
  %24 = load <8 x i8>, <8 x i8>* %3, align 8
  ret <8 x i8> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vmovq_n_s8_wrapper(i8 signext %0) #1 {
  %2 = alloca i8, align 1
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca i8, align 1
  store i8 %0, i8* %5, align 1
  %6 = load i8, i8* %5, align 1
  store i8 %6, i8* %2, align 1
  %7 = load i8, i8* %2, align 1
  %8 = insertelement <16 x i8> undef, i8 %7, i32 0
  %9 = load i8, i8* %2, align 1
  %10 = insertelement <16 x i8> %8, i8 %9, i32 1
  %11 = load i8, i8* %2, align 1
  %12 = insertelement <16 x i8> %10, i8 %11, i32 2
  %13 = load i8, i8* %2, align 1
  %14 = insertelement <16 x i8> %12, i8 %13, i32 3
  %15 = load i8, i8* %2, align 1
  %16 = insertelement <16 x i8> %14, i8 %15, i32 4
  %17 = load i8, i8* %2, align 1
  %18 = insertelement <16 x i8> %16, i8 %17, i32 5
  %19 = load i8, i8* %2, align 1
  %20 = insertelement <16 x i8> %18, i8 %19, i32 6
  %21 = load i8, i8* %2, align 1
  %22 = insertelement <16 x i8> %20, i8 %21, i32 7
  %23 = load i8, i8* %2, align 1
  %24 = insertelement <16 x i8> %22, i8 %23, i32 8
  %25 = load i8, i8* %2, align 1
  %26 = insertelement <16 x i8> %24, i8 %25, i32 9
  %27 = load i8, i8* %2, align 1
  %28 = insertelement <16 x i8> %26, i8 %27, i32 10
  %29 = load i8, i8* %2, align 1
  %30 = insertelement <16 x i8> %28, i8 %29, i32 11
  %31 = load i8, i8* %2, align 1
  %32 = insertelement <16 x i8> %30, i8 %31, i32 12
  %33 = load i8, i8* %2, align 1
  %34 = insertelement <16 x i8> %32, i8 %33, i32 13
  %35 = load i8, i8* %2, align 1
  %36 = insertelement <16 x i8> %34, i8 %35, i32 14
  %37 = load i8, i8* %2, align 1
  %38 = insertelement <16 x i8> %36, i8 %37, i32 15
  store <16 x i8> %38, <16 x i8>* %4, align 16
  %39 = load <16 x i8>, <16 x i8>* %4, align 16
  store <16 x i8> %39, <16 x i8>* %3, align 16
  %40 = load <16 x i8>, <16 x i8>* %3, align 16
  ret <16 x i8> %40
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmov_n_s16_wrapper(i16 signext %0) #0 {
  %2 = alloca i16, align 2
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca i16, align 2
  store i16 %0, i16* %5, align 2
  %6 = load i16, i16* %5, align 2
  store i16 %6, i16* %2, align 2
  %7 = load i16, i16* %2, align 2
  %8 = insertelement <4 x i16> undef, i16 %7, i32 0
  %9 = load i16, i16* %2, align 2
  %10 = insertelement <4 x i16> %8, i16 %9, i32 1
  %11 = load i16, i16* %2, align 2
  %12 = insertelement <4 x i16> %10, i16 %11, i32 2
  %13 = load i16, i16* %2, align 2
  %14 = insertelement <4 x i16> %12, i16 %13, i32 3
  store <4 x i16> %14, <4 x i16>* %4, align 8
  %15 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %15, <4 x i16>* %3, align 8
  %16 = load <4 x i16>, <4 x i16>* %3, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmovq_n_s16_wrapper(i16 signext %0) #1 {
  %2 = alloca i16, align 2
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca i16, align 2
  store i16 %0, i16* %5, align 2
  %6 = load i16, i16* %5, align 2
  store i16 %6, i16* %2, align 2
  %7 = load i16, i16* %2, align 2
  %8 = insertelement <8 x i16> undef, i16 %7, i32 0
  %9 = load i16, i16* %2, align 2
  %10 = insertelement <8 x i16> %8, i16 %9, i32 1
  %11 = load i16, i16* %2, align 2
  %12 = insertelement <8 x i16> %10, i16 %11, i32 2
  %13 = load i16, i16* %2, align 2
  %14 = insertelement <8 x i16> %12, i16 %13, i32 3
  %15 = load i16, i16* %2, align 2
  %16 = insertelement <8 x i16> %14, i16 %15, i32 4
  %17 = load i16, i16* %2, align 2
  %18 = insertelement <8 x i16> %16, i16 %17, i32 5
  %19 = load i16, i16* %2, align 2
  %20 = insertelement <8 x i16> %18, i16 %19, i32 6
  %21 = load i16, i16* %2, align 2
  %22 = insertelement <8 x i16> %20, i16 %21, i32 7
  store <8 x i16> %22, <8 x i16>* %4, align 16
  %23 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %23, <8 x i16>* %3, align 16
  %24 = load <8 x i16>, <8 x i16>* %3, align 16
  ret <8 x i16> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmov_n_s32_wrapper(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = insertelement <2 x i32> undef, i32 %7, i32 0
  %9 = load i32, i32* %2, align 4
  %10 = insertelement <2 x i32> %8, i32 %9, i32 1
  store <2 x i32> %10, <2 x i32>* %4, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %11, <2 x i32>* %3, align 8
  %12 = load <2 x i32>, <2 x i32>* %3, align 8
  ret <2 x i32> %12
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmovq_n_s32_wrapper(i32 %0) #1 {
  %2 = alloca i32, align 4
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = load i32, i32* %2, align 4
  %10 = insertelement <4 x i32> %8, i32 %9, i32 1
  %11 = load i32, i32* %2, align 4
  %12 = insertelement <4 x i32> %10, i32 %11, i32 2
  %13 = load i32, i32* %2, align 4
  %14 = insertelement <4 x i32> %12, i32 %13, i32 3
  store <4 x i32> %14, <4 x i32>* %4, align 16
  %15 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %15, <4 x i32>* %3, align 16
  %16 = load <4 x i32>, <4 x i32>* %3, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmovq_n_s64_wrapper(i64 %0) #1 {
  %2 = alloca i64, align 8
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca i64, align 8
  store i64 %0, i64* %5, align 8
  %6 = load i64, i64* %5, align 8
  store i64 %6, i64* %2, align 8
  %7 = load i64, i64* %2, align 8
  %8 = insertelement <2 x i64> undef, i64 %7, i32 0
  %9 = load i64, i64* %2, align 8
  %10 = insertelement <2 x i64> %8, i64 %9, i32 1
  store <2 x i64> %10, <2 x i64>* %4, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  store <2 x i64> %11, <2 x i64>* %3, align 16
  %12 = load <2 x i64>, <2 x i64>* %3, align 16
  ret <2 x i64> %12
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vmov_n_u8_wrapper(i8 zeroext %0) #0 {
  %2 = alloca i8, align 1
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca i8, align 1
  store i8 %0, i8* %5, align 1
  %6 = load i8, i8* %5, align 1
  store i8 %6, i8* %2, align 1
  %7 = load i8, i8* %2, align 1
  %8 = insertelement <8 x i8> undef, i8 %7, i32 0
  %9 = load i8, i8* %2, align 1
  %10 = insertelement <8 x i8> %8, i8 %9, i32 1
  %11 = load i8, i8* %2, align 1
  %12 = insertelement <8 x i8> %10, i8 %11, i32 2
  %13 = load i8, i8* %2, align 1
  %14 = insertelement <8 x i8> %12, i8 %13, i32 3
  %15 = load i8, i8* %2, align 1
  %16 = insertelement <8 x i8> %14, i8 %15, i32 4
  %17 = load i8, i8* %2, align 1
  %18 = insertelement <8 x i8> %16, i8 %17, i32 5
  %19 = load i8, i8* %2, align 1
  %20 = insertelement <8 x i8> %18, i8 %19, i32 6
  %21 = load i8, i8* %2, align 1
  %22 = insertelement <8 x i8> %20, i8 %21, i32 7
  store <8 x i8> %22, <8 x i8>* %4, align 8
  %23 = load <8 x i8>, <8 x i8>* %4, align 8
  store <8 x i8> %23, <8 x i8>* %3, align 8
  %24 = load <8 x i8>, <8 x i8>* %3, align 8
  ret <8 x i8> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vmovq_n_u8_wrapper(i8 zeroext %0) #1 {
  %2 = alloca i8, align 1
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca i8, align 1
  store i8 %0, i8* %5, align 1
  %6 = load i8, i8* %5, align 1
  store i8 %6, i8* %2, align 1
  %7 = load i8, i8* %2, align 1
  %8 = insertelement <16 x i8> undef, i8 %7, i32 0
  %9 = load i8, i8* %2, align 1
  %10 = insertelement <16 x i8> %8, i8 %9, i32 1
  %11 = load i8, i8* %2, align 1
  %12 = insertelement <16 x i8> %10, i8 %11, i32 2
  %13 = load i8, i8* %2, align 1
  %14 = insertelement <16 x i8> %12, i8 %13, i32 3
  %15 = load i8, i8* %2, align 1
  %16 = insertelement <16 x i8> %14, i8 %15, i32 4
  %17 = load i8, i8* %2, align 1
  %18 = insertelement <16 x i8> %16, i8 %17, i32 5
  %19 = load i8, i8* %2, align 1
  %20 = insertelement <16 x i8> %18, i8 %19, i32 6
  %21 = load i8, i8* %2, align 1
  %22 = insertelement <16 x i8> %20, i8 %21, i32 7
  %23 = load i8, i8* %2, align 1
  %24 = insertelement <16 x i8> %22, i8 %23, i32 8
  %25 = load i8, i8* %2, align 1
  %26 = insertelement <16 x i8> %24, i8 %25, i32 9
  %27 = load i8, i8* %2, align 1
  %28 = insertelement <16 x i8> %26, i8 %27, i32 10
  %29 = load i8, i8* %2, align 1
  %30 = insertelement <16 x i8> %28, i8 %29, i32 11
  %31 = load i8, i8* %2, align 1
  %32 = insertelement <16 x i8> %30, i8 %31, i32 12
  %33 = load i8, i8* %2, align 1
  %34 = insertelement <16 x i8> %32, i8 %33, i32 13
  %35 = load i8, i8* %2, align 1
  %36 = insertelement <16 x i8> %34, i8 %35, i32 14
  %37 = load i8, i8* %2, align 1
  %38 = insertelement <16 x i8> %36, i8 %37, i32 15
  store <16 x i8> %38, <16 x i8>* %4, align 16
  %39 = load <16 x i8>, <16 x i8>* %4, align 16
  store <16 x i8> %39, <16 x i8>* %3, align 16
  %40 = load <16 x i8>, <16 x i8>* %3, align 16
  ret <16 x i8> %40
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vmov_n_u16_wrapper(i16 zeroext %0) #0 {
  %2 = alloca i16, align 2
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca i16, align 2
  store i16 %0, i16* %5, align 2
  %6 = load i16, i16* %5, align 2
  store i16 %6, i16* %2, align 2
  %7 = load i16, i16* %2, align 2
  %8 = insertelement <4 x i16> undef, i16 %7, i32 0
  %9 = load i16, i16* %2, align 2
  %10 = insertelement <4 x i16> %8, i16 %9, i32 1
  %11 = load i16, i16* %2, align 2
  %12 = insertelement <4 x i16> %10, i16 %11, i32 2
  %13 = load i16, i16* %2, align 2
  %14 = insertelement <4 x i16> %12, i16 %13, i32 3
  store <4 x i16> %14, <4 x i16>* %4, align 8
  %15 = load <4 x i16>, <4 x i16>* %4, align 8
  store <4 x i16> %15, <4 x i16>* %3, align 8
  %16 = load <4 x i16>, <4 x i16>* %3, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vmovq_n_u16_wrapper(i16 zeroext %0) #1 {
  %2 = alloca i16, align 2
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca i16, align 2
  store i16 %0, i16* %5, align 2
  %6 = load i16, i16* %5, align 2
  store i16 %6, i16* %2, align 2
  %7 = load i16, i16* %2, align 2
  %8 = insertelement <8 x i16> undef, i16 %7, i32 0
  %9 = load i16, i16* %2, align 2
  %10 = insertelement <8 x i16> %8, i16 %9, i32 1
  %11 = load i16, i16* %2, align 2
  %12 = insertelement <8 x i16> %10, i16 %11, i32 2
  %13 = load i16, i16* %2, align 2
  %14 = insertelement <8 x i16> %12, i16 %13, i32 3
  %15 = load i16, i16* %2, align 2
  %16 = insertelement <8 x i16> %14, i16 %15, i32 4
  %17 = load i16, i16* %2, align 2
  %18 = insertelement <8 x i16> %16, i16 %17, i32 5
  %19 = load i16, i16* %2, align 2
  %20 = insertelement <8 x i16> %18, i16 %19, i32 6
  %21 = load i16, i16* %2, align 2
  %22 = insertelement <8 x i16> %20, i16 %21, i32 7
  store <8 x i16> %22, <8 x i16>* %4, align 16
  %23 = load <8 x i16>, <8 x i16>* %4, align 16
  store <8 x i16> %23, <8 x i16>* %3, align 16
  %24 = load <8 x i16>, <8 x i16>* %3, align 16
  ret <8 x i16> %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vmov_n_u32_wrapper(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = insertelement <2 x i32> undef, i32 %7, i32 0
  %9 = load i32, i32* %2, align 4
  %10 = insertelement <2 x i32> %8, i32 %9, i32 1
  store <2 x i32> %10, <2 x i32>* %4, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  store <2 x i32> %11, <2 x i32>* %3, align 8
  %12 = load <2 x i32>, <2 x i32>* %3, align 8
  ret <2 x i32> %12
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vmovq_n_u32_wrapper(i32 %0) #1 {
  %2 = alloca i32, align 4
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %2, align 4
  %7 = load i32, i32* %2, align 4
  %8 = insertelement <4 x i32> undef, i32 %7, i32 0
  %9 = load i32, i32* %2, align 4
  %10 = insertelement <4 x i32> %8, i32 %9, i32 1
  %11 = load i32, i32* %2, align 4
  %12 = insertelement <4 x i32> %10, i32 %11, i32 2
  %13 = load i32, i32* %2, align 4
  %14 = insertelement <4 x i32> %12, i32 %13, i32 3
  store <4 x i32> %14, <4 x i32>* %4, align 16
  %15 = load <4 x i32>, <4 x i32>* %4, align 16
  store <4 x i32> %15, <4 x i32>* %3, align 16
  %16 = load <4 x i32>, <4 x i32>* %3, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vmovq_n_u64_wrapper(i64 %0) #1 {
  %2 = alloca i64, align 8
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca i64, align 8
  store i64 %0, i64* %5, align 8
  %6 = load i64, i64* %5, align 8
  store i64 %6, i64* %2, align 8
  %7 = load i64, i64* %2, align 8
  %8 = insertelement <2 x i64> undef, i64 %7, i32 0
  %9 = load i64, i64* %2, align 8
  %10 = insertelement <2 x i64> %8, i64 %9, i32 1
  store <2 x i64> %10, <2 x i64>* %4, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  store <2 x i64> %11, <2 x i64>* %3, align 16
  %12 = load <2 x i64>, <2 x i64>* %3, align 16
  ret <2 x i64> %12
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vpadd_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.addp.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vpadd_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.addp.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vpadd_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.addp.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vpadd_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.addp.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vpadd_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.addp.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  %15 = bitcast <4 x i16> %14 to <8 x i8>
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %16 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vpadd_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.addp.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  %15 = bitcast <2 x i32> %14 to <8 x i8>
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %16 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vpaddq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.addp.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vpaddq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.addp.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vpaddq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.addp.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vpaddq_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = call <2 x i64> @llvm.aarch64.neon.addp.v2i64(<2 x i64> %10, <2 x i64> %12) #4
  %15 = bitcast <2 x i64> %14 to <16 x i8>
  store <2 x i64> %14, <2 x i64>* %5, align 16
  %16 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vpaddq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.addp.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vpaddq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.addp.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  %15 = bitcast <8 x i16> %14 to <16 x i8>
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %16 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vpaddq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.addp.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %16 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vpaddq_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = bitcast <2 x i64> %10 to <16 x i8>
  %12 = load <2 x i64>, <2 x i64>* %4, align 16
  %13 = bitcast <2 x i64> %12 to <16 x i8>
  %14 = call <2 x i64> @llvm.aarch64.neon.addp.v2i64(<2 x i64> %10, <2 x i64> %12) #4
  %15 = bitcast <2 x i64> %14 to <16 x i8>
  store <2 x i64> %14, <2 x i64>* %5, align 16
  %16 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %16
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vpmax_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.smaxp.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vpmax_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.smaxp.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %15 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vpmax_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.smaxp.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %15 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vpmaxq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.smaxp.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vpmaxq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.smaxp.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %15 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vpmaxq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.smaxp.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %15 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vpmax_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.umaxp.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vpmax_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.umaxp.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %15 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vpmax_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.umaxp.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %15 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vpmaxq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.umaxp.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vpmaxq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.umaxp.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %15 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vpmaxq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.umaxp.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %15 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vpmin_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.sminp.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vpmin_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.sminp.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %15 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vpmin_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.sminp.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %15 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vpminq_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.sminp.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vpminq_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.sminp.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %15 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vpminq_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.sminp.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %15 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vpmin_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = call <8 x i8> @llvm.aarch64.neon.uminp.v8i8(<8 x i8> %10, <8 x i8> %11) #4
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vpmin_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = bitcast <4 x i16> %10 to <8 x i8>
  %12 = load <4 x i16>, <4 x i16>* %4, align 8
  %13 = bitcast <4 x i16> %12 to <8 x i8>
  %14 = call <4 x i16> @llvm.aarch64.neon.uminp.v4i16(<4 x i16> %10, <4 x i16> %12) #4
  store <4 x i16> %14, <4 x i16>* %5, align 8
  %15 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vpmin_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = bitcast <2 x i32> %10 to <8 x i8>
  %12 = load <2 x i32>, <2 x i32>* %4, align 8
  %13 = bitcast <2 x i32> %12 to <8 x i8>
  %14 = call <2 x i32> @llvm.aarch64.neon.uminp.v2i32(<2 x i32> %10, <2 x i32> %12) #4
  store <2 x i32> %14, <2 x i32>* %5, align 8
  %15 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vpminq_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = call <16 x i8> @llvm.aarch64.neon.uminp.v16i8(<16 x i8> %10, <16 x i8> %11) #4
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vpminq_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = bitcast <8 x i16> %10 to <16 x i8>
  %12 = load <8 x i16>, <8 x i16>* %4, align 16
  %13 = bitcast <8 x i16> %12 to <16 x i8>
  %14 = call <8 x i16> @llvm.aarch64.neon.uminp.v8i16(<8 x i16> %10, <8 x i16> %12) #4
  store <8 x i16> %14, <8 x i16>* %5, align 16
  %15 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vpminq_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = load <4 x i32>, <4 x i32>* %4, align 16
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = call <4 x i32> @llvm.aarch64.neon.uminp.v4i32(<4 x i32> %10, <4 x i32> %12) #4
  store <4 x i32> %14, <4 x i32>* %5, align 16
  %15 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %15
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vzip1_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = shufflevector <8 x i8> %10, <8 x i8> %11, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vzip1q_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = shufflevector <16 x i8> %10, <16 x i8> %11, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vzip1_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = shufflevector <4 x i16> %10, <4 x i16> %11, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vzip1q_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = shufflevector <8 x i16> %10, <8 x i16> %11, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vzip1_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = shufflevector <2 x i32> %10, <2 x i32> %11, <2 x i32> <i32 0, i32 2>
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vzip1q_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = shufflevector <4 x i32> %10, <4 x i32> %11, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vzip1q_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = shufflevector <2 x i64> %10, <2 x i64> %11, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vzip1_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = shufflevector <8 x i8> %10, <8 x i8> %11, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vzip1q_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = shufflevector <16 x i8> %10, <16 x i8> %11, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vzip1_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = shufflevector <4 x i16> %10, <4 x i16> %11, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vzip1q_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = shufflevector <8 x i16> %10, <8 x i16> %11, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vzip1_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = shufflevector <2 x i32> %10, <2 x i32> %11, <2 x i32> <i32 0, i32 2>
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vzip1q_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = shufflevector <4 x i32> %10, <4 x i32> %11, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vzip1q_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = shufflevector <2 x i64> %10, <2 x i64> %11, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vzip2_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = shufflevector <8 x i8> %10, <8 x i8> %11, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vzip2q_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = shufflevector <16 x i8> %10, <16 x i8> %11, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vzip2_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = shufflevector <4 x i16> %10, <4 x i16> %11, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vzip2q_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = shufflevector <8 x i16> %10, <8 x i16> %11, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vzip2_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = shufflevector <2 x i32> %10, <2 x i32> %11, <2 x i32> <i32 1, i32 3>
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vzip2q_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = shufflevector <4 x i32> %10, <4 x i32> %11, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vzip2q_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = shufflevector <2 x i64> %10, <2 x i64> %11, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vzip2_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = shufflevector <8 x i8> %10, <8 x i8> %11, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vzip2q_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = shufflevector <16 x i8> %10, <16 x i8> %11, <16 x i32> <i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vzip2_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = shufflevector <4 x i16> %10, <4 x i16> %11, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vzip2q_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = shufflevector <8 x i16> %10, <8 x i16> %11, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vzip2_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = shufflevector <2 x i32> %10, <2 x i32> %11, <2 x i32> <i32 1, i32 3>
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vzip2q_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = shufflevector <4 x i32> %10, <4 x i32> %11, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vzip2q_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = shufflevector <2 x i64> %10, <2 x i64> %11, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vuzp1_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = shufflevector <8 x i8> %10, <8 x i8> %11, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vuzp1q_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = shufflevector <16 x i8> %10, <16 x i8> %11, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vuzp1_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = shufflevector <4 x i16> %10, <4 x i16> %11, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vuzp1q_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = shufflevector <8 x i16> %10, <8 x i16> %11, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vuzp1_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = shufflevector <2 x i32> %10, <2 x i32> %11, <2 x i32> <i32 0, i32 2>
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vuzp1q_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = shufflevector <4 x i32> %10, <4 x i32> %11, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vuzp1q_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = shufflevector <2 x i64> %10, <2 x i64> %11, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vuzp1_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = shufflevector <8 x i8> %10, <8 x i8> %11, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vuzp1q_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = shufflevector <16 x i8> %10, <16 x i8> %11, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vuzp1_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = shufflevector <4 x i16> %10, <4 x i16> %11, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vuzp1q_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = shufflevector <8 x i16> %10, <8 x i16> %11, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vuzp1_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = shufflevector <2 x i32> %10, <2 x i32> %11, <2 x i32> <i32 0, i32 2>
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vuzp1q_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = shufflevector <4 x i32> %10, <4 x i32> %11, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vuzp1q_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = shufflevector <2 x i64> %10, <2 x i64> %11, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vuzp2_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = shufflevector <8 x i8> %10, <8 x i8> %11, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vuzp2q_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = shufflevector <16 x i8> %10, <16 x i8> %11, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vuzp2_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = shufflevector <4 x i16> %10, <4 x i16> %11, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vuzp2q_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = shufflevector <8 x i16> %10, <8 x i16> %11, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vuzp2_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = shufflevector <2 x i32> %10, <2 x i32> %11, <2 x i32> <i32 1, i32 3>
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vuzp2q_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = shufflevector <4 x i32> %10, <4 x i32> %11, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vuzp2q_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = shufflevector <2 x i64> %10, <2 x i64> %11, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vuzp2_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = shufflevector <8 x i8> %10, <8 x i8> %11, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vuzp2q_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = shufflevector <16 x i8> %10, <16 x i8> %11, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vuzp2_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = shufflevector <4 x i16> %10, <4 x i16> %11, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vuzp2q_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = shufflevector <8 x i16> %10, <8 x i16> %11, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vuzp2_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = shufflevector <2 x i32> %10, <2 x i32> %11, <2 x i32> <i32 1, i32 3>
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vuzp2q_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = shufflevector <4 x i32> %10, <4 x i32> %11, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vuzp2q_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = shufflevector <2 x i64> %10, <2 x i64> %11, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vtrn1_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = shufflevector <8 x i8> %10, <8 x i8> %11, <8 x i32> <i32 0, i32 8, i32 2, i32 10, i32 4, i32 12, i32 6, i32 14>
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vtrn1q_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = shufflevector <16 x i8> %10, <16 x i8> %11, <16 x i32> <i32 0, i32 16, i32 2, i32 18, i32 4, i32 20, i32 6, i32 22, i32 8, i32 24, i32 10, i32 26, i32 12, i32 28, i32 14, i32 30>
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vtrn1_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = shufflevector <4 x i16> %10, <4 x i16> %11, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vtrn1q_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = shufflevector <8 x i16> %10, <8 x i16> %11, <8 x i32> <i32 0, i32 8, i32 2, i32 10, i32 4, i32 12, i32 6, i32 14>
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vtrn1_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = shufflevector <2 x i32> %10, <2 x i32> %11, <2 x i32> <i32 0, i32 2>
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vtrn1q_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = shufflevector <4 x i32> %10, <4 x i32> %11, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vtrn1q_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = shufflevector <2 x i64> %10, <2 x i64> %11, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vtrn1_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = shufflevector <8 x i8> %10, <8 x i8> %11, <8 x i32> <i32 0, i32 8, i32 2, i32 10, i32 4, i32 12, i32 6, i32 14>
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vtrn1q_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = shufflevector <16 x i8> %10, <16 x i8> %11, <16 x i32> <i32 0, i32 16, i32 2, i32 18, i32 4, i32 20, i32 6, i32 22, i32 8, i32 24, i32 10, i32 26, i32 12, i32 28, i32 14, i32 30>
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vtrn1_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = shufflevector <4 x i16> %10, <4 x i16> %11, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vtrn1q_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = shufflevector <8 x i16> %10, <8 x i16> %11, <8 x i32> <i32 0, i32 8, i32 2, i32 10, i32 4, i32 12, i32 6, i32 14>
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vtrn1_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = shufflevector <2 x i32> %10, <2 x i32> %11, <2 x i32> <i32 0, i32 2>
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vtrn1q_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = shufflevector <4 x i32> %10, <4 x i32> %11, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vtrn1q_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = shufflevector <2 x i64> %10, <2 x i64> %11, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vtrn2_s8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = shufflevector <8 x i8> %10, <8 x i8> %11, <8 x i32> <i32 1, i32 9, i32 3, i32 11, i32 5, i32 13, i32 7, i32 15>
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vtrn2q_s8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = shufflevector <16 x i8> %10, <16 x i8> %11, <16 x i32> <i32 1, i32 17, i32 3, i32 19, i32 5, i32 21, i32 7, i32 23, i32 9, i32 25, i32 11, i32 27, i32 13, i32 29, i32 15, i32 31>
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vtrn2_s16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = shufflevector <4 x i16> %10, <4 x i16> %11, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vtrn2q_s16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = shufflevector <8 x i16> %10, <8 x i16> %11, <8 x i32> <i32 1, i32 9, i32 3, i32 11, i32 5, i32 13, i32 7, i32 15>
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vtrn2_s32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = shufflevector <2 x i32> %10, <2 x i32> %11, <2 x i32> <i32 1, i32 3>
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vtrn2q_s32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = shufflevector <4 x i32> %10, <4 x i32> %11, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vtrn2q_s64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = shufflevector <2 x i64> %10, <2 x i64> %11, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i8> @vtrn2_u8_wrapper(<8 x i8> %0, <8 x i8> %1) #0 {
  %3 = alloca <8 x i8>, align 8
  %4 = alloca <8 x i8>, align 8
  %5 = alloca <8 x i8>, align 8
  %6 = alloca <8 x i8>, align 8
  %7 = alloca <8 x i8>, align 8
  store <8 x i8> %0, <8 x i8>* %6, align 8
  store <8 x i8> %1, <8 x i8>* %7, align 8
  %8 = load <8 x i8>, <8 x i8>* %6, align 8
  %9 = load <8 x i8>, <8 x i8>* %7, align 8
  store <8 x i8> %8, <8 x i8>* %3, align 8
  store <8 x i8> %9, <8 x i8>* %4, align 8
  %10 = load <8 x i8>, <8 x i8>* %3, align 8
  %11 = load <8 x i8>, <8 x i8>* %4, align 8
  %12 = shufflevector <8 x i8> %10, <8 x i8> %11, <8 x i32> <i32 1, i32 9, i32 3, i32 11, i32 5, i32 13, i32 7, i32 15>
  store <8 x i8> %12, <8 x i8>* %5, align 8
  %13 = load <8 x i8>, <8 x i8>* %5, align 8
  ret <8 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <16 x i8> @vtrn2q_u8_wrapper(<16 x i8> %0, <16 x i8> %1) #1 {
  %3 = alloca <16 x i8>, align 16
  %4 = alloca <16 x i8>, align 16
  %5 = alloca <16 x i8>, align 16
  %6 = alloca <16 x i8>, align 16
  %7 = alloca <16 x i8>, align 16
  store <16 x i8> %0, <16 x i8>* %6, align 16
  store <16 x i8> %1, <16 x i8>* %7, align 16
  %8 = load <16 x i8>, <16 x i8>* %6, align 16
  %9 = load <16 x i8>, <16 x i8>* %7, align 16
  store <16 x i8> %8, <16 x i8>* %3, align 16
  store <16 x i8> %9, <16 x i8>* %4, align 16
  %10 = load <16 x i8>, <16 x i8>* %3, align 16
  %11 = load <16 x i8>, <16 x i8>* %4, align 16
  %12 = shufflevector <16 x i8> %10, <16 x i8> %11, <16 x i32> <i32 1, i32 17, i32 3, i32 19, i32 5, i32 21, i32 7, i32 23, i32 9, i32 25, i32 11, i32 27, i32 13, i32 29, i32 15, i32 31>
  store <16 x i8> %12, <16 x i8>* %5, align 16
  %13 = load <16 x i8>, <16 x i8>* %5, align 16
  ret <16 x i8> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i16> @vtrn2_u16_wrapper(<4 x i16> %0, <4 x i16> %1) #0 {
  %3 = alloca <4 x i16>, align 8
  %4 = alloca <4 x i16>, align 8
  %5 = alloca <4 x i16>, align 8
  %6 = alloca <4 x i16>, align 8
  %7 = alloca <4 x i16>, align 8
  store <4 x i16> %0, <4 x i16>* %6, align 8
  store <4 x i16> %1, <4 x i16>* %7, align 8
  %8 = load <4 x i16>, <4 x i16>* %6, align 8
  %9 = load <4 x i16>, <4 x i16>* %7, align 8
  store <4 x i16> %8, <4 x i16>* %3, align 8
  store <4 x i16> %9, <4 x i16>* %4, align 8
  %10 = load <4 x i16>, <4 x i16>* %3, align 8
  %11 = load <4 x i16>, <4 x i16>* %4, align 8
  %12 = shufflevector <4 x i16> %10, <4 x i16> %11, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  store <4 x i16> %12, <4 x i16>* %5, align 8
  %13 = load <4 x i16>, <4 x i16>* %5, align 8
  ret <4 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <8 x i16> @vtrn2q_u16_wrapper(<8 x i16> %0, <8 x i16> %1) #1 {
  %3 = alloca <8 x i16>, align 16
  %4 = alloca <8 x i16>, align 16
  %5 = alloca <8 x i16>, align 16
  %6 = alloca <8 x i16>, align 16
  %7 = alloca <8 x i16>, align 16
  store <8 x i16> %0, <8 x i16>* %6, align 16
  store <8 x i16> %1, <8 x i16>* %7, align 16
  %8 = load <8 x i16>, <8 x i16>* %6, align 16
  %9 = load <8 x i16>, <8 x i16>* %7, align 16
  store <8 x i16> %8, <8 x i16>* %3, align 16
  store <8 x i16> %9, <8 x i16>* %4, align 16
  %10 = load <8 x i16>, <8 x i16>* %3, align 16
  %11 = load <8 x i16>, <8 x i16>* %4, align 16
  %12 = shufflevector <8 x i16> %10, <8 x i16> %11, <8 x i32> <i32 1, i32 9, i32 3, i32 11, i32 5, i32 13, i32 7, i32 15>
  store <8 x i16> %12, <8 x i16>* %5, align 16
  %13 = load <8 x i16>, <8 x i16>* %5, align 16
  ret <8 x i16> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i32> @vtrn2_u32_wrapper(<2 x i32> %0, <2 x i32> %1) #0 {
  %3 = alloca <2 x i32>, align 8
  %4 = alloca <2 x i32>, align 8
  %5 = alloca <2 x i32>, align 8
  %6 = alloca <2 x i32>, align 8
  %7 = alloca <2 x i32>, align 8
  store <2 x i32> %0, <2 x i32>* %6, align 8
  store <2 x i32> %1, <2 x i32>* %7, align 8
  %8 = load <2 x i32>, <2 x i32>* %6, align 8
  %9 = load <2 x i32>, <2 x i32>* %7, align 8
  store <2 x i32> %8, <2 x i32>* %3, align 8
  store <2 x i32> %9, <2 x i32>* %4, align 8
  %10 = load <2 x i32>, <2 x i32>* %3, align 8
  %11 = load <2 x i32>, <2 x i32>* %4, align 8
  %12 = shufflevector <2 x i32> %10, <2 x i32> %11, <2 x i32> <i32 1, i32 3>
  store <2 x i32> %12, <2 x i32>* %5, align 8
  %13 = load <2 x i32>, <2 x i32>* %5, align 8
  ret <2 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <4 x i32> @vtrn2q_u32_wrapper(<4 x i32> %0, <4 x i32> %1) #1 {
  %3 = alloca <4 x i32>, align 16
  %4 = alloca <4 x i32>, align 16
  %5 = alloca <4 x i32>, align 16
  %6 = alloca <4 x i32>, align 16
  %7 = alloca <4 x i32>, align 16
  store <4 x i32> %0, <4 x i32>* %6, align 16
  store <4 x i32> %1, <4 x i32>* %7, align 16
  %8 = load <4 x i32>, <4 x i32>* %6, align 16
  %9 = load <4 x i32>, <4 x i32>* %7, align 16
  store <4 x i32> %8, <4 x i32>* %3, align 16
  store <4 x i32> %9, <4 x i32>* %4, align 16
  %10 = load <4 x i32>, <4 x i32>* %3, align 16
  %11 = load <4 x i32>, <4 x i32>* %4, align 16
  %12 = shufflevector <4 x i32> %10, <4 x i32> %11, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  store <4 x i32> %12, <4 x i32>* %5, align 16
  %13 = load <4 x i32>, <4 x i32>* %5, align 16
  ret <4 x i32> %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define <2 x i64> @vtrn2q_u64_wrapper(<2 x i64> %0, <2 x i64> %1) #1 {
  %3 = alloca <2 x i64>, align 16
  %4 = alloca <2 x i64>, align 16
  %5 = alloca <2 x i64>, align 16
  %6 = alloca <2 x i64>, align 16
  %7 = alloca <2 x i64>, align 16
  store <2 x i64> %0, <2 x i64>* %6, align 16
  store <2 x i64> %1, <2 x i64>* %7, align 16
  %8 = load <2 x i64>, <2 x i64>* %6, align 16
  %9 = load <2 x i64>, <2 x i64>* %7, align 16
  store <2 x i64> %8, <2 x i64>* %3, align 16
  store <2 x i64> %9, <2 x i64>* %4, align 16
  %10 = load <2 x i64>, <2 x i64>* %3, align 16
  %11 = load <2 x i64>, <2 x i64>* %4, align 16
  %12 = shufflevector <2 x i64> %10, <2 x i64> %11, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %12, <2 x i64>* %5, align 16
  %13 = load <2 x i64>, <2 x i64>* %5, align 16
  ret <2 x i64> %13
}

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.shadd.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.shadd.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.shadd.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.shadd.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.shadd.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.shadd.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.uhadd.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.uhadd.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.uhadd.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.uhadd.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.uhadd.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.uhadd.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.srhadd.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.srhadd.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.srhadd.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.srhadd.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.srhadd.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.srhadd.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.urhadd.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.urhadd.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.urhadd.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.urhadd.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.urhadd.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.urhadd.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.sqadd.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.sqadd.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.sqadd.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.sqadd.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.sqadd.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.sqadd.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.aarch64.neon.sqadd.v2i64(<2 x i64>, <2 x i64>) #3

; Function Attrs: nounwind readnone
declare <1 x i64> @llvm.aarch64.neon.sqadd.v1i64(<1 x i64>, <1 x i64>) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.aarch64.neon.sqadd.i32(i32, i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.aarch64.neon.sqadd.i64(i64, i64) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.uqadd.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.uqadd.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.uqadd.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.uqadd.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.uqadd.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.uqadd.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.aarch64.neon.uqadd.v2i64(<2 x i64>, <2 x i64>) #3

; Function Attrs: nounwind readnone
declare <1 x i64> @llvm.aarch64.neon.uqadd.v1i64(<1 x i64>, <1 x i64>) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.aarch64.neon.uqadd.i32(i32, i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.aarch64.neon.uqadd.i64(i64, i64) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.suqadd.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.suqadd.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.suqadd.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.suqadd.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.suqadd.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.suqadd.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.aarch64.neon.suqadd.v2i64(<2 x i64>, <2 x i64>) #3

; Function Attrs: nounwind readnone
declare <1 x i64> @llvm.aarch64.neon.suqadd.v1i64(<1 x i64>, <1 x i64>) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.aarch64.neon.suqadd.i32(i32, i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.aarch64.neon.suqadd.i64(i64, i64) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.usqadd.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.usqadd.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.usqadd.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.usqadd.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.usqadd.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.usqadd.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.aarch64.neon.usqadd.v2i64(<2 x i64>, <2 x i64>) #3

; Function Attrs: nounwind readnone
declare <1 x i64> @llvm.aarch64.neon.usqadd.v1i64(<1 x i64>, <1 x i64>) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.aarch64.neon.usqadd.i32(i32, i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.aarch64.neon.usqadd.i64(i64, i64) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.raddhn.v8i8(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.raddhn.v4i16(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.raddhn.v2i32(<2 x i64>, <2 x i64>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.sqdmulh.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.sqdmulh.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.sqdmulh.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.sqdmulh.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.aarch64.neon.sqdmulh.i32(i32, i32) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.sqrdmulh.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.sqrdmulh.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.sqrdmulh.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.sqrdmulh.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.aarch64.neon.sqrdmulh.i32(i32, i32) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.sqdmull.v4i32(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.aarch64.neon.sqdmull.v2i64(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.aarch64.neon.sqdmulls.scalar(i32, i32) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.sqsub.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.aarch64.neon.sqsub.v2i64(<2 x i64>, <2 x i64>) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.aarch64.neon.sqsub.i32(i32, i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.aarch64.neon.sqsub.i64(i64, i64) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.smull.v8i16(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.smull.v4i32(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.aarch64.neon.smull.v2i64(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.umull.v8i16(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.umull.v4i32(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.aarch64.neon.umull.v2i64(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.shsub.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.shsub.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.shsub.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.shsub.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.shsub.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.shsub.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.uhsub.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.uhsub.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.uhsub.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.uhsub.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.uhsub.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.uhsub.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.sqsub.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.sqsub.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.sqsub.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.sqsub.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.sqsub.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <1 x i64> @llvm.aarch64.neon.sqsub.v1i64(<1 x i64>, <1 x i64>) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.uqsub.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.uqsub.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.uqsub.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.uqsub.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.uqsub.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.uqsub.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.aarch64.neon.uqsub.v2i64(<2 x i64>, <2 x i64>) #3

; Function Attrs: nounwind readnone
declare <1 x i64> @llvm.aarch64.neon.uqsub.v1i64(<1 x i64>, <1 x i64>) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.aarch64.neon.uqsub.i32(i32, i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.aarch64.neon.uqsub.i64(i64, i64) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.rsubhn.v8i8(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.rsubhn.v4i16(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.rsubhn.v2i32(<2 x i64>, <2 x i64>) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.smax.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.smax.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.smax.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.smax.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.smax.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.smax.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.umax.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.umax.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.umax.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.umax.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.umax.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.umax.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.smin.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.smin.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.smin.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.smin.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.smin.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.smin.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.umin.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.umin.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.umin.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.umin.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.umin.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.umin.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.sshl.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.sshl.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.sshl.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.sshl.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.sshl.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.sshl.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.aarch64.neon.sshl.v2i64(<2 x i64>, <2 x i64>) #3

; Function Attrs: nounwind readnone
declare <1 x i64> @llvm.aarch64.neon.sshl.v1i64(<1 x i64>, <1 x i64>) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.aarch64.neon.sshl.i64(i64, i64) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.ushl.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.ushl.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.ushl.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.ushl.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.ushl.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.ushl.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.aarch64.neon.ushl.v2i64(<2 x i64>, <2 x i64>) #3

; Function Attrs: nounwind readnone
declare <1 x i64> @llvm.aarch64.neon.ushl.v1i64(<1 x i64>, <1 x i64>) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.aarch64.neon.ushl.i64(i64, i64) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.sqshl.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.sqshl.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.sqshl.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.sqshl.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.sqshl.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.sqshl.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.aarch64.neon.sqshl.v2i64(<2 x i64>, <2 x i64>) #3

; Function Attrs: nounwind readnone
declare <1 x i64> @llvm.aarch64.neon.sqshl.v1i64(<1 x i64>, <1 x i64>) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.aarch64.neon.sqshl.i32(i32, i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.aarch64.neon.sqshl.i64(i64, i64) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.uqshl.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.uqshl.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.uqshl.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.uqshl.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.uqshl.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.uqshl.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.aarch64.neon.uqshl.v2i64(<2 x i64>, <2 x i64>) #3

; Function Attrs: nounwind readnone
declare <1 x i64> @llvm.aarch64.neon.uqshl.v1i64(<1 x i64>, <1 x i64>) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.aarch64.neon.uqshl.i32(i32, i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.aarch64.neon.uqshl.i64(i64, i64) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.srshl.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.srshl.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.srshl.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.srshl.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.srshl.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.srshl.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.aarch64.neon.srshl.v2i64(<2 x i64>, <2 x i64>) #3

; Function Attrs: nounwind readnone
declare <1 x i64> @llvm.aarch64.neon.srshl.v1i64(<1 x i64>, <1 x i64>) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.aarch64.neon.srshl.i64(i64, i64) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.urshl.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.urshl.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.urshl.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.urshl.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.urshl.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.urshl.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.aarch64.neon.urshl.v2i64(<2 x i64>, <2 x i64>) #3

; Function Attrs: nounwind readnone
declare <1 x i64> @llvm.aarch64.neon.urshl.v1i64(<1 x i64>, <1 x i64>) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.aarch64.neon.urshl.i64(i64, i64) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.sqrshl.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.sqrshl.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.sqrshl.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.sqrshl.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.sqrshl.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.sqrshl.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.aarch64.neon.sqrshl.v2i64(<2 x i64>, <2 x i64>) #3

; Function Attrs: nounwind readnone
declare <1 x i64> @llvm.aarch64.neon.sqrshl.v1i64(<1 x i64>, <1 x i64>) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.aarch64.neon.sqrshl.i32(i32, i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.aarch64.neon.sqrshl.i64(i64, i64) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.uqrshl.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.uqrshl.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.uqrshl.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.uqrshl.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.uqrshl.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.uqrshl.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.aarch64.neon.uqrshl.v2i64(<2 x i64>, <2 x i64>) #3

; Function Attrs: nounwind readnone
declare <1 x i64> @llvm.aarch64.neon.uqrshl.v1i64(<1 x i64>, <1 x i64>) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.aarch64.neon.uqrshl.i32(i32, i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.aarch64.neon.uqrshl.i64(i64, i64) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.sqxtn.v8i8(<8 x i16>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.sqxtn.v4i16(<4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.sqxtn.v2i32(<2 x i64>) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.uqxtn.v8i8(<8 x i16>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.uqxtn.v4i16(<4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.uqxtn.v2i32(<2 x i64>) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.aarch64.neon.scalar.sqxtn.i32.i64(i64) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.aarch64.neon.scalar.uqxtn.i32.i64(i64) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.sqxtun.v8i8(<8 x i16>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.sqxtun.v4i16(<4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.sqxtun.v2i32(<2 x i64>) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.aarch64.neon.scalar.sqxtun.i32.i64(i64) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.abs.v8i8(<8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.abs.v16i8(<16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.abs.v4i16(<4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.abs.v8i16(<8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.abs.v2i32(<2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.abs.v4i32(<4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.aarch64.neon.abs.v2i64(<2 x i64>) #3

; Function Attrs: nounwind readnone
declare <1 x i64> @llvm.aarch64.neon.abs.v1i64(<1 x i64>) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.aarch64.neon.abs.i64(i64) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.sqabs.v8i8(<8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.sqabs.v16i8(<16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.sqabs.v4i16(<4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.sqabs.v8i16(<8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.sqabs.v2i32(<2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.sqabs.v4i32(<4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.aarch64.neon.sqabs.v2i64(<2 x i64>) #3

; Function Attrs: nounwind readnone
declare <1 x i64> @llvm.aarch64.neon.sqabs.v1i64(<1 x i64>) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.aarch64.neon.sqabs.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.aarch64.neon.sqabs.i64(i64) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.sqneg.v8i8(<8 x i8>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.sqneg.v16i8(<16 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.sqneg.v4i16(<4 x i16>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.sqneg.v8i16(<8 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.sqneg.v2i32(<2 x i32>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.sqneg.v4i32(<4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.aarch64.neon.sqneg.v2i64(<2 x i64>) #3

; Function Attrs: nounwind readnone
declare <1 x i64> @llvm.aarch64.neon.sqneg.v1i64(<1 x i64>) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.aarch64.neon.sqneg.i32(i32) #3

; Function Attrs: nounwind readnone
declare i64 @llvm.aarch64.neon.sqneg.i64(i64) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.addp.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.addp.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.addp.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.addp.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.addp.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.addp.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <2 x i64> @llvm.aarch64.neon.addp.v2i64(<2 x i64>, <2 x i64>) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.smaxp.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.smaxp.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.smaxp.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.smaxp.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.smaxp.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.smaxp.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.umaxp.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.umaxp.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.umaxp.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.umaxp.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.umaxp.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.umaxp.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.sminp.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.sminp.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.sminp.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.sminp.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.sminp.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.sminp.v4i32(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone
declare <8 x i8> @llvm.aarch64.neon.uminp.v8i8(<8 x i8>, <8 x i8>) #3

; Function Attrs: nounwind readnone
declare <4 x i16> @llvm.aarch64.neon.uminp.v4i16(<4 x i16>, <4 x i16>) #3

; Function Attrs: nounwind readnone
declare <2 x i32> @llvm.aarch64.neon.uminp.v2i32(<2 x i32>, <2 x i32>) #3

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.aarch64.neon.uminp.v16i8(<16 x i8>, <16 x i8>) #3

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.aarch64.neon.uminp.v8i16(<8 x i16>, <8 x i16>) #3

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.aarch64.neon.uminp.v4i32(<4 x i32>, <4 x i32>) #3

attributes #0 = { noinline nounwind optnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="non-leaf" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-a7" "target-features"="+aes,+crypto,+fp-armv8,+neon,+sha2,+zcm,+zcz" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noinline nounwind optnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="non-leaf" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-a7" "target-features"="+aes,+crypto,+fp-armv8,+neon,+sha2,+zcm,+zcz" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind optnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="non-leaf" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-a7" "target-features"="+aes,+crypto,+fp-armv8,+neon,+sha2,+zcm,+zcz" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"Homebrew clang version 11.1.0"}
